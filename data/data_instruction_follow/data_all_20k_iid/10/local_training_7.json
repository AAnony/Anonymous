[{"instruction": "Write a script that prints the first N numbers in a Fibonacci series.", "input": "N = 10", "output": "def fibonacci_series(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \nfibonacci_series(N)", "category": "Python"}, {"instruction": "Sort a string in alphabetical order.", "input": "string = \"edcba\"", "output": "def sort_string(string):\n    str_list = list(string)\n    str_list.sort()\n    return \"\".join(str_list)\n\nsorted_str = sort_string(string)", "category": "Python"}, {"instruction": "Convert the following SQL statement into a Python def() and write the code.", "input": "SELECT order_id, order_time, subtotal FROM orders WHERE order_time > NOW()", "output": "def get_order_info(order_time):\n    query = \"SELECT order_id, order_time, subtotal FROM orders WHERE order_time > %s\"\n    cursor.execute(query, (order_time, ))\n    rows = cursor.fetchall()\n    return rows", "category": "Python"}, {"instruction": "Write a function to sort a string containing several words alphabetically.", "input": "", "output": "def sortString(string): \n    words = string.split() \n    words.sort()\n    return (' '.join(words))", "category": "Python"}, {"instruction": "Construct a class in Python that contains three variables and two methods.", "input": "", "output": "class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)", "category": "Python"}, {"instruction": "Design a regex pattern to check if a given string is a valid URL or not.", "input": "", "output": "pattern = r'^(https?:\\/\\/)[\\da-z\\.-]+\\.[a-z\\.]{2,}\\/?[\\/\\w \\.-]*'", "category": "Python"}, {"instruction": "Construct a switch-case statement to output \"Monthly\" if the user enters \"M\" to output \"Yearly\" if the user enters \"Y\", and \"Invalid\" if the user enters neither \"M\" nor \"Y\".", "input": "", "output": "def printOption(option):\nswitch(option):\n    case \"M\":\n        print(\"Monthly\")\n        break\n    case \"Y\":\n        print(\"Yearly\")\n        break\n    default:\n        print(\"Invalid\")", "category": "Python"}, {"instruction": "Construct an if-else if condition to grade the user input (1 to 5) between A, B, C, D, or F.", "input": "", "output": "if user_input == 1:\n    print('A')\nelif user_input == 2:\n    print('B')\nelif user_input == 3:\n    print('C')\nelif user_input == 4:\n    print('D')\nelse:\n    print('F')", "category": "Python"}, {"instruction": "Construct a JSON Object of a person with their name, age, and occupation.", "input": "", "output": "{\n    \"name\": \"John Doe\",\n    \"age\": 35,\n    \"occupation\": \"Software Engineer\"\n}", "category": "Python"}, {"instruction": "Edit the following JS code to include a check to avoid creating duplicate requests.", "input": "sendRequest(url) {\n  // Code to send request\n}\n\nmakeRequest(url) {\n  sendRequest(url);\n}", "output": "sendRequest(url) {\n  // Code to send request\n}\n\nrequests = []; // Array to keep track of requests\n\nmakeRequest(url) {\n  if (!requests.includes(url)) { // Check if request doesn't already exist\n    sendRequest(url);\n    requests.push(url); // Add request to list\n  }\n}", "category": "Python"}, {"instruction": "Write an HTML page to display facts about a specific animal.", "input": "Animal: Cat \nName: Fluffy \nAge: 8 \nWeight: 10 lbs\nFur Color: Orange", "output": "<html>\n<head>\n    <title>Facts about Fluffy</title>\n</head>\n<body>\n    <h1>Fluffy the Cat</h1>\n  \n    <ul>\n        <li>Age: 8</li>\n        <li>Weight: 10 lbs</li>\n        <li>Fur Color: Orange</li>\n    </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a MySQL query that returns all the names of the students with a grade greater than or equal to 7.", "input": "Table: Students\nColumns: student_id, name, grade", "output": "SELECT name \nFROM Students \nWHERE grade >= 7;", "category": "Python"}, {"instruction": "Edit the following JavaScript code to make the function asynchronous.", "input": "function getData() {\n  // Code to fetch data\n}", "output": "function getData() {\n  // Code to fetch data\n  return new Promise((resolve, reject) => {\n    // Fetch data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}", "category": "Python"}, {"instruction": "Given a 2D array, replace every element with the greatest element on its row.", "input": "[[6, 2, 9],\n [3, 8, 7],\n [1, 4, 5]]", "output": "def greatest_element(arr): \n    # loop through elements of 1D array \n    for i in range(len(arr)): \n        max_element = arr[i][0] \n  \n        # loop through elements of 2D array \n        for j in range(len(arr[i])):  \n            if arr[i][j] > max_element: \n                max_element = arr[i][j] \n              \n        # replace every element with max_element \n        for j in range(len(arr[i])): \n            arr[i][j] = max_element \n    return arr", "category": "Python"}, {"instruction": "Initialize a 2D array with `0`s.", "input": "", "output": "def init2DArray(rows, cols): \n    # initialize the array \n    arr = [[0 for i in range(cols)] for j in range(rows)]\n    return arr", "category": "Python"}, {"instruction": "Convert an array from its x-coordinate values to an array of polar coordinates.", "input": "[(1, 1), (4, 2)]", "output": "[(1.4142135623730951, 0.7853981633974483), (4.47213595499958, 0.4636476090008061)]", "category": "Python"}, {"instruction": "Generate a URL to search the desired content on Google using Python.", "input": "Search Keyword: Covid-19 Pandemic", "output": "import urllib\nurl = 'https://www.google.com/search?q=Covid-19+Pandemic'\nurllib.request.urlopen(url)", "category": "Python"}, {"instruction": "Find the largest value in an array of numbers.", "input": "[5, 9, 40, 0.5, 3]", "output": "40", "category": "Python"}, {"instruction": "Create a database query in SQL to filter records within a particular range.", "input": "Table Name: records\n Attributes: id (INTEGER), name (TEXT), start_date (DATE), end_date (DATE)", "output": "SELECT * FROM records WHERE start_date >= '<date1>' AND end_date <= '<date2>';", "category": "Python"}, {"instruction": "Write a Python code snippet to evaluate an expression stored as a string.", "input": "expression = '2+2*2'", "output": "def evaluate_expression(expression):\n    return eval(expression)\n\nprint(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Consider the given list of tuples, remove the third element if it exists.", "input": "data = [(1, 5), (3, 4), (2, 6, 4)]", "output": "data = [(1, 5), (3, 4)]", "category": "Python"}, {"instruction": "Write an HTML code for a div tag with an id attribute of 'main-content'.", "input": "", "output": "<div id=\"main-content\"></div>", "category": "Python"}, {"instruction": "Design a fourth-order Butterworth low-pass filter.", "input": "", "output": "s = tf('s');\nH = 1/(s^4 + 2.39125*s^3 + 2.37238*s^2 + 0.857723*s + 0.147902);", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all rows in a table that match a certain criteria.", "input": "Table: Users\n\n name | age \n------|------\n John | 20\n Pete | 22\n Alex | 18", "output": "SELECT * FROM Users WHERE age > 20;", "category": "Python"}, {"instruction": "Design a web page with the following HTML elements: (1) Heading, (2) Subheading, (3) Form, (4) Button.", "input": "", "output": "<html>\n    <head>\n        <title> My Web Page </title>\n    </head>\n    <body>\n        <h1> Heading </h1>\n        <h2> Subheading </h2>\n        <form>\n            ...\n        </form>\n        <button> Button </button>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Implement a Swift function to filter an array of numbers by a given filter number", "input": "[4, 5, 8, 11, 7], filter_num = 7", "output": "func filter_array(_ numbers: [Int], filter_num: Int) -> [Int] {\n    var resultArr = [Int]()\n    for i in 0..<numbers.count {\n        if numbers[i] < filter_num { \n            resultArr.append(numbers[i])\n        }\n    }\n    return resultArr\n}\n\nfilter_array([4, 5, 8, 11, 7], filter_num: 7) // returns [4, 5]", "category": "Python"}, {"instruction": "Write a Python program to get the IP address from a given hostname", "input": "google.com", "output": "import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))", "category": "Python"}, {"instruction": "Implement a function in C++ to print a pyramid of stars", "input": "", "output": "#include <iostream> \n  \nusing namespace std; \n  \n// Function to demonstrate printing pattern \nvoid pyramid(int n) \n{ \n    // outer loop to handle number of rows \n    //  n in this case \n    for (int i=0; i<n; i++) \n    { \n        //  inner loop to handle number of columns \n        //  values changing acc. to outer loop \n        for (int j=0; j<=i; j++ ) \n        { \n            // printing stars \n            cout << \"* \"; \n        } \n  \n        // ending line after each row \n        cout << endl; \n    } \n}", "category": "Python"}, {"instruction": "Create a MongoDB query to find all documents that have a field called 'city' with a value of 'New York'", "input": "", "output": "db.collection.find({city: 'New York'});", "category": "Python"}, {"instruction": "for the given array, output true if the array does not contain duplicates,output false if it contains any.", "input": "arr = [1, 3, 5, 6, 1]", "output": "false", "category": "Python"}, {"instruction": "You need to generate an HTML table and style it with CSS.", "input": "table {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Title of the document</title>\n</head>\n\n<body>\n\n  <table>\n    <tr>\n      <th>Firstname</th>\n      <th>Lastname</th>\n      <th>Age</th>\n    </tr>\n    <tr>\n      <td>Jill</td>\n      <td>Smith</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>Eve</td>\n      <td>Jackson</td>\n      <td>94</td>\n    </tr>\n  </table>\n\n</body>\n\n</html>", "category": "Python"}, {"instruction": "Create a Spring boot program to find the area of a triangle.", "input": "", "output": "import org.springframework.boot.autoconfigure.SpringBootApplication; \n\n@SpringBootApplication \npublic class App \n{ \n    // Function to calculate the area of triangle \n    public static double calculateArea(int a, int b, int c) \n    { \n        double s = (a + b + c) / 2; \n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)); \n        return area; \n    } \n  \n    public static void main( String[] args ) \n    { \n        int a = 3; \n        int b = 4; \n        int c = 5; \n        System.out.println(\"The area of the triangle is: \" + calculateArea(a, b, c)); \n    } \n}", "category": "Python"}, {"instruction": "How do you compare two numbers, num1 and num2, in python?", "input": "", "output": "We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3.", "category": "Python"}, {"instruction": "Develop a web page which takes user inputs and validates them", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Validate user input</title>\n<script>\nfunction validateInput() {\n  var name = document.getElementById(\"name\").value;\n  var email = document.getElementById(\"email\").value;\n\n  if (name.length == 0 || email.length == 0) {\n    alert(\"Please enter your name and email.\");\n    return false;\n  }\n\n  if (!email.includes(\"@\")){\n    alert(\"Please enter a valid email address.\");\n    return false;\n  }\n\n  return true;\n}\n</script>\n</head>\n<body>\n<h3>Validate user input</h3>\n<form onsubmit=\"return validateInput()\">\nName: <input type=\"text\" id=\"name\" name=\"name\" /> <br/>\nEmail: <input type=\"text\" id=\"email\" name=\"email\" /> <br/>\n<input type=\"submit\" value=\"Submit\" />\n</form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Develop a program to encrypt a text", "input": "", "output": "#include <stdio.h>\n#include <string.h>\n\n// Encode a string using Ceasar cipher\nstring ceasar_encode(string s, int k)\n{\n    // Declare a variable to store the encoded string\n    string encoded_str = \"\";\n\n    // Loop through the string and encode each character\n    for (int i=0; i<strlen(s); i++)\n    {\n        // Shift each character with the given key\n        char enc = ((s[i]-'a' + k) % 26) + 'a';\n        encoded_str += enc;\n    }\n    return encoded_str;\n}\n\nint main()\n{\n before = \"abcdefghijklmnopqrstuvwxyz\";\n after = ceasar_encode(before, 5);\n printf(\"%s\\n\", after);\n\n return 0;\n}\n\n// Output: fghijklmnopqrstuvwxyzabcde", "category": "Python"}, {"instruction": "Create a neural network to classify types of dogs", "input": "", "output": "import keras\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Building a Sequential model\nmodel = Sequential()\n# Input layer with 2 neurons\nmodel.add(Dense(2, input_dim=64, activation='relu'))\n# Hidden layer with 3 neurons\nmodel.add(Dense(3, activation='relu'))\n# Output layer with 15 neurons (15 classes)\nmodel.add(Dense(15, activation='softmax'))\n\n# Compiling and training the model\nmodel.compile(loss='mean_squared_error',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.fit(training_samples, labels, epochs=100)", "category": "Python"}, {"instruction": "Write an algorithm to find the area of a triangle", "input": "", "output": "Algorithm:\n\n1. Take the input for the sides of the triangle.\n2. Calculate the semiperimeter of the triangle using the formula (a+b+c)/2\n3. Calculate the area of the triangle using the formula:\n    area = \u221a(s(s-a)(s-b)(s-c))", "category": "Python"}, {"instruction": "Construct a regex pattern to match a valid IP address", "input": "", "output": "^(((25[0\u20135]|2[0-4][0\u20139]|[01]?[0-9][0\u20139]?)\\.){3}(25[0\u20135]|2[0-4][0\u20139]|[01]?[0\u20139][0\u20139]?))$", "category": "Python"}, {"instruction": "Construct a DB search query to find a customer by name", "input": "Name of the customer: John", "output": "SELECT * FROM customers WHERE name=\"John\";", "category": "Python"}, {"instruction": "Construct a query to retrieve the names and ages of all customers", "input": "", "output": "SELECT name, age FROM customers;", "category": "Python"}, {"instruction": "Merge two sorted linked lists and return it as a new list.", "input": "", "output": "def merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list", "category": "Python"}, {"instruction": "Print the nth element from a spin lock sequence using only O(1) space.", "input": "", "output": "def get_spinlock_element(n):\n    \"\"\" Prints the nth element from a spin lock sequence using only O(1) space\n    \n    Args:\n        n (int): The number of the element to be retrieved\n        \n    Returns:\n        int: The nth element\n    \"\"\"\n    # Initialize the step size\n    step_size = 343\n    \n    # Find the previous two elements in the iteration\n    first = 0\n    second = 0\n    \n    # Initialize the index of the element to be retrieved\n    index = 0\n    \n    # Iterate over the elements until we reach the desired element\n    while index < n:\n        # Generate the next element in the sequence\n        element = first + second + 1\n        \n        # Update the previous two elements\n        first, second = second, element\n        \n        # Move the index\n        index += step_size\n    \n    # Return the element at the nth position\n    return element", "category": "Python"}, {"instruction": "Write a code to generate n terms of the Fibonacci sequence.", "input": "", "output": "def get_fibonacci(n):\n    \"\"\" Generates n terms of the Fibonacci sequence\n    \n    Args:\n        n (int): The number of Fibonacci terms to generate\n        \n    Returns:\n        list: A list of the first n Fibonacci numbers\n    \"\"\"\n    # Initialize first two Fibonacci numbers\n    a = 0\n    b = 1\n\n    # Initialize the Fibonacci Sequence list\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    fibonacci_sequence.append(b)\n\n    # Generate the Fibonacci Sequence\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n        b = c\n\n    return fibonacci_sequence", "category": "Python"}, {"instruction": "Construct an array of objects in JavaScript to represent a list of users.", "input": "", "output": "let users = [\n  {\n    username: 'John',\n    age: 20\n  },\n  {\n    username: 'Jane',\n    age: 22\n  },\n  {\n    username: 'Jacob',\n    age: 25\n  }\n];", "category": "Python"}, {"instruction": "Write a SQL query to find all orders greater than a given value.", "input": "", "output": "SELECT * FROM orders WHERE value > [INPUT VALUE];", "category": "Python"}, {"instruction": "Build an HTML table with 3 columns and 5 rows using JavaScript.", "input": "", "output": "var htmlTable = '<table border=\"1\">';\n\n// Create the table rows \nfor (var i = 0; i < 5; i++){\n  htmlTable += '<tr>';\n\n  // Create the table columns\n  for (var j = 0; j < 3; j++){\n    htmlTable += \"<td></td>\";\n  }\n \n  htmlTable += \"</tr>\";\n}\n \nhtmlTable += \"</table>\";", "category": "Python"}, {"instruction": "Find the indices of the two numbers in an array that have the sum of a given number using JavaScript.", "input": "let arr = [2, 5, 11, 15],\n    targetSum = 16;", "output": "function twoNumSum(arr, targetSum) {\n  let hash = {};\n\n  for(let i = 0; i < arr.length; i++){\n    let current = arr[i];\n    \n    if(hash[current] !== undefined) return [hash.current, i];\n    else hash[targetSum - current] = i;\n  }\n\n  return [];\n}", "category": "Python"}, {"instruction": "Read the input and print the output in the specified format.", "input": "Name: John\nAge: 23", "output": "Hello, my name is John and I am 23 years old.", "category": "Python"}, {"instruction": "Suggest a code to execute when a condition is met.", "input": "if volume > 10:", "output": "if volume > 10:\n    # Do something\n    print(\"Volume is greater than 10\")", "category": "Python"}, {"instruction": "Convert the following python code to an equivalent JavaScript code.", "input": "for item in items:\n    print(item)", "output": "items.forEach(item => {\n    console.log(item);\n});", "category": "Python"}, {"instruction": "Suggest a code to get the smallest and largest number in an unsorted list.", "input": "", "output": "def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)", "category": "Python"}, {"instruction": "Estimate the area of a shape using data from the given Pandas dataframe.", "input": "Stored in the form of a Pandas dataframe.\n0    1    2   \na    5    b   \n4    4    5", "output": "", "category": "Python"}, {"instruction": "Construct a program to filter the list of names based on the given condition.", "input": "names = [\"Ada\", \"Bob\", \"Chris\", \"David\", \"Elsa\", \"Frank\"]\ncondition: length greater than 4", "output": "[\"Ada\", \"Chris\", \"David\", \"Elsa\", \"Frank\"]", "category": "Python"}, {"instruction": "Estimate how many words are present in the given text.", "input": "The world of technology is rapidly evolving each day.", "output": "10", "category": "Python"}, {"instruction": "Develop an algorithm that checks for balanced parentheses in a given string.", "input": "", "output": "def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "category": "Python"}, {"instruction": "Construct a boolean check to detect if a given string contains the word \"hello\".", "input": "", "output": "def contains_hello(input_string):\n    return \"hello\" in input_string", "category": "Python"}, {"instruction": "Compute the mean of all the values in a column of a given dataframe.", "input": "Stored in the form of a Pandas dataframe.\n0    1    2   \na    1    b   \n4    4    5", "output": "3.0", "category": "Python"}, {"instruction": "Replace NaN values in the given dataframe with a string.", "input": "Stored in the form of a Pandas dataframe.\n0    1    2    3\na    NaN  b    NaN\n4    NaN  5    6", "output": "Stored in the form of a Pandas dataframe.\n0    1    2    3\na    'NA'  b   'NA'\n4    'NA'  5    6", "category": "Python"}, {"instruction": "Implement a linked list structure with an insert method using Java.", "input": "", "output": "class Node {\n  int data;\n  Node next;\n  Node (int data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  Node head;\n\n  public void insert(int data) {\n    Node newNode = new Node(data);\n    if (head == null) {\n      head = newNode;\n    } \n    else {\n      Node current = head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n}", "category": "Python"}, {"instruction": "Print the symmetric difference of two sets.", "input": "set1 = {1, 2, 3, 4, 5}, set2 = {1, 3, 5, 7, 9}", "output": "{2, 4, 7, 9}", "category": "Python"}, {"instruction": "Construct an HTML table that contains the following headers: \"Year\", \"Make\", \"Model\".", "input": "", "output": "<html>\n  <table>\n    <thead>\n      <tr>\n        <th>Year</th>\n        <th>Make</th>\n        <th>Model</th>\n      </tr>\n    </thead>\n  </table>\n</html>", "category": "Python"}, {"instruction": "Create a bash script that prints out the days in a month.", "input": "", "output": "#!/bin/bash\n\nfor day in {1..31}; do\n   echo \"$day\"\ndone", "category": "Python"}, {"instruction": "Suggest a code to add the values of all odd numbers in an array.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "total = 0\nfor num in arr:\n    if num % 2 == 1:  # Check if num is odd\n        total += num", "category": "Python"}, {"instruction": "What is the meaning of the modulo operator in python?", "input": "", "output": "In Python, the modulo operator (also known as the \u201cremainder\u201d or \u201cmodulus\u201d operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression \u201c7 % 3\u201d will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is \u201ca % b\u201d, where a and b are numbers. The result of this operation is the remainder after a is divided by b.", "category": "Python"}, {"instruction": "Suggest a code to create an empty list.", "input": "", "output": "mylist = []  # Create an empty list", "category": "Python"}, {"instruction": "For the following function, suggest a test case that can be used to check the correctness of the function.", "input": "def find_mode(arr):\n    \"\"\"\n    Function to find the mode of a list\n    Parameters:\n        arr: The list of values\n    Returns:\n        The mode of the list\n    \"\"\"", "output": "A test case that can be used to check the correctness of the function is to pass the list [1, 1, 2, 3, 3, 3] to the function. The function should return 3 as the mode, which is the element that appears most frequently in the list.", "category": "Python"}, {"instruction": "Read the input and output the reverse of each word.", "input": "List of words: Apple Banana Car", "output": "elppA ananab raC", "category": "Python"}, {"instruction": "Create an object with the following properties, `name` of type `string`, `age` of type `number`, and `pet` of type `boolean`.", "input": "", "output": "let exampleObject = {\n    name: 'Bob',\n    age: 26,\n    pet: true\n};", "category": "Python"}, {"instruction": "Design a machine learning model to classify an article as either a sports article or a food article.", "input": "", "output": "The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units \u2013 one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles.", "category": "Python"}, {"instruction": "Construct an object literal in JavaScript to describe a person's name and age.", "input": "", "output": "let person = {\n  name: \"John\",\n  age: 20\n};", "category": "Python"}, {"instruction": "Write a code snippets in Python to print the contents of a dictionary.", "input": "{\"key1\": \"value1\", \"key2\": \"value2\"}", "output": "for key, value in dict.items():\n   print(\"Key: {}, Value: {}\".format(key, value))", "category": "Python"}, {"instruction": "Create an HTML element for a paragraph and add five sentences to it.", "input": "", "output": "<p>\n  This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\n</p>", "category": "Python"}, {"instruction": "Write a command to install a package in Node.js from the Node Package Manager.", "input": "Package name: ejs", "output": "npm install ejs", "category": "Python"}, {"instruction": "Create a function to search for a given element in a list and output its index.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i", "category": "Python"}, {"instruction": "Output the total number of elements in a given list.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def count_list_elements(list_numbers):\n    count = 0\n    for element in list_numbers:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to compare two strings and output their similarity score.", "input": "string_1 = \"python\"\nstring_2 = \"coding\"", "output": "def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = min(len(string_1), len(string_2))\n    for i in range(n): \n        if string_1[i] == string_2[i]: \n            similarity_score += 1\n    return similarity_score", "category": "Python"}, {"instruction": "Write a line of code to input 10 numbers from the user.", "input": "", "output": "a = list(map(int, input(\"Enter 10 numbers: \").split()))", "category": "Python"}, {"instruction": "Create a Node.js program to print the first 5 prime numbers", "input": "", "output": "const prime_nums = () => {\n    let count = 0;\n    let num = 2;\n    while(count < 5) {\n        if(isPrime(num)) {\n            console.log(num);\n            count++;\n        }\n        num++;\n    }\n}\n\nfunction isPrime(n) {\n    for(let i = 2; i < n; i++)\n        if(n % i === 0) return false;\n    return true;\n}\n\nprime_nums();", "category": "Python"}, {"instruction": "What is the MySQL command to drop a database named 'test'", "input": "", "output": "The MySQL command to drop a database named 'test' is `DROP DATABASE test;`.", "category": "Python"}, {"instruction": "Write a PowerShell script to list all the installed applications on a Windows machine", "input": "", "output": "Get-ItemPropertyHKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | select-Object DisplayName, Publisher", "category": "Python"}, {"instruction": "Write a CSS rule to center align a div element with id=\"content\"", "input": "", "output": "#content {\n    margin: 0 auto;\n    width: 70%;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Create a HTML page with a textbox, button and a message \u201cHello World!\u201d", "input": "", "output": "<html>\n    <head></head>\n    <body>\n        <input type=\"text\" id=\"textbox\">\n        <button onclick=\"sayHello()\">Say Hello</button>\n        <p id=\"message\">Hello World!</p>\n        \n        <script>\n            function sayHello() {\n                var text = document.getElementById('textbox').value;\n                document.getElementById('message').innerHTML = \"Hello \" + text + \"!\";\n            }\n        </script>\n    </body>\n</html>", "category": "Python"}, {"instruction": "What is the command to run a Python script from the command line?", "input": "", "output": "The command to run a Python script from the command line is `python filename.py`.", "category": "Python"}, {"instruction": "Create a HTML page with 4 divs, one of them should have text aligned in the center.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>4 Divs</title>\n</head>\n<body>\n  <div>\n    This div does not contain any special styling\n  </div>\n  <div>\n    This div is colored red\n    <style>div { background-color: red; }\n</style>\n  </div>\n  <div>\n    This div is colored blue\n  <style>div { background-color: blue; }</style>\n  </div>  \n  <div style=\"text-align: center;\">\n    This div has the text aligned in the center \n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes the two given arrays, A and B, and merges them into a single array.", "input": "let A = [1, 2, 3];\nlet B = [4, 5, 6];", "output": "function mergeArrays(A, B) {\n  let merged = [];\n  let indexA = 0;\n  let indexB = 0;\n  while (indexA < A.length && indexB < B.length) {\n    merged.push(A[indexA], B[indexB]);\n    indexA++;\n    indexB++;\n  }\n  if (indexA < A.length) {\n    for (let i=indexA; i < A.length; i++) {\n      merged.push(A[i]);\n    }\n  }\n  if (indexB < B.length) {\n    for (let i=indexB; i < B.length; i++) {\n      merged.push(B[i]);\n    }\n  }\n  return merged;\n}", "category": "Python"}, {"instruction": "Reverse the following linked list in Java.", "input": "// single linked list \nNode { \n    int data; \n    Node next; \n}\n    \nhead\n|\nV\n1 -> 2 -> 3 -> 4 -> NULL", "output": "// single linked list \nNode { \n    int data; \n    Node next; \n}\n    \nhead\n|\nV\n4 -> 3 -> 2 -> 1 -> NULL", "category": "Python"}, {"instruction": "Write a function in C# to round a given number to the next closest integer.", "input": "Number: 27.7", "output": "public static int RoundToNearestInteger(double number)\n{\n        return (int)Math.Round(number, 0);\n}\n\nRoundToNearestInteger(27.7); //output: 28", "category": "Python"}, {"instruction": "Write an if-else statement in Java to check if a given number is greater than or equal to 15.", "input": "Number: 9", "output": "int number = 9;\n\nif (number >= 15) {\n    System.out.println(\"Number is greater than or equal to 15\");\n} else {\n    System.out.println(\"Number is less than 15\");\n}", "category": "Python"}, {"instruction": "Construct a regular expression pattern in Python that matches all emails.", "input": "", "output": "pattern = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$\"", "category": "Python"}, {"instruction": "Create a React component that displays an alert when a button is clicked.", "input": "", "output": "import React from 'react';\n\nclass AlertButton extends React.Component {\n\n    onClick() {\n        alert('Button clicked!');\n    }\n\n    render() {\n        return (\n            <button onClick={this.onClick}>Click me</button>\n        );\n    }\n}", "category": "Python"}, {"instruction": "How would you create a table in a database using SQL commands?", "input": "", "output": "To create a table in a database using SQL commands, you would use the following SQL statement: CREATE TABLE <table_name>(column_name datatype);", "category": "Python"}, {"instruction": "Explain in detail what is the significance of a local variable in Python", "input": "", "output": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.", "category": "Python"}, {"instruction": "Write an SQL query to select all the customers who are from the US.", "input": "", "output": "SELECT * FROM customers WHERE country = 'US';", "category": "Python"}, {"instruction": "Create a HTML page that prints the following message", "input": "\"Welcome to my website!\"", "output": "<html>\n    <head>\n        <title>Welcome to my website!</title>\n    </head>\n    <body>\n        <h1>Welcome to my website!</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Edit this code to sort a list of strings alphabetically", "input": "mylist = [\"Eggs\", \"Cheese\", \"Milk\"]", "output": "mylist.sort()", "category": "Python"}, {"instruction": "Create a JSON object with the following elements: firstname, lastname, age", "input": "", "output": "{\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"age\": 25\n}", "category": "Python"}, {"instruction": "Write a command to retrieve the first n items from a list.", "input": "[10, 20, 30, 40, 50], n = 3", "output": "[10, 20, 30]", "category": "Python"}, {"instruction": "Write a SQL query to insert new data into a table.", "input": "Table Name: users\nColumns: id, name, email\nData: 1, John Doe, john@example.com", "output": "INSERT INTO users (id, name, email) VALUES (1, 'John Doe', 'john@example.com');", "category": "Python"}, {"instruction": "Create a rake task in Ruby that updates the system time.", "input": "", "output": "task :update_time do\n  system(\"date +%T -s '#{Time.now.strftime(\"%H:%M:%S\")}'\")\nend", "category": "Python"}, {"instruction": "Design an algorithm in JavaScript that finds the most frequent element in an array.", "input": "", "output": "function mostFrequentElem(arr) {\n  let countMap = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    if (!countMap.has(arr[i])) {\n      countMap.set(arr[i], 1);\n    } else {\n      let val = countMap.get(arr[i]);\n      countMap.set(arr[i], val + 1);\n    }\n  }\n  let maxCount = 1;\n  let maxElem;\n  for (let [key, val] of countMap.entries()) {\n    if (val > maxCount) {\n      maxCount = val;\n      maxElem = key;\n    }\n  }\n  return maxElem;\n}", "category": "Python"}, {"instruction": "Construct\nan HTML form that includes two input fields, one for a name and one for an email address.", "input": "", "output": "<form action=\"\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Email Address:</label>\n  <input type=\"email\" name=\"email\">\n</form>", "category": "Python"}, {"instruction": "Create a class in TypeScript that contains a method that takes two numbers, adds them, and returns the result.", "input": "", "output": "class Math {\n  add(n1: number, n2: number): number {\n    return n1 + n2;\n  }\n}", "category": "Python"}, {"instruction": "Create a thread-safe Java method that increments a given counter.", "input": "", "output": "public static synchronized void incrementCounter(int counter) {\n  counter += 1;\n}", "category": "Python"}, {"instruction": "Write a function in Go language that will return the number of elements in a slice.", "input": "", "output": "func len(s []int) int {\n\treturn len(s)\n}", "category": "Python"}, {"instruction": "Create a Swift class called \"Vehicle\" that includes two properties: a model name (String) and a year (Int).", "input": "", "output": "class Vehicle {\n  let modelName: String\n  let year: Int\n\n  init(modelName: String, year: Int) {\n    self.modelName = modelName\n    self.year = year\n  }\n}", "category": "Python"}, {"instruction": "Write a Bash command that outputs the system's date as \"DD-MM-YYYY\".", "input": "", "output": "date +\"%d-%m-%Y\"", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the last four entries of a table called \"students\".", "input": "", "output": "SELECT * FROM students ORDER BY id DESC LIMIT 4;", "category": "Python"}, {"instruction": "Write a JavaScript function that counts the number of times a given character appears in a string.", "input": "", "output": "const countCharacter = (str, char) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === char) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// example call\nlet str = \"hello world\";\nlet char = \"l\";\nlet count = countCharacter(str, char);\nconsole.log(count); // 3", "category": "Python"}, {"instruction": "Design a web scraper in Python to extract the text content from Wikipedia articles.", "input": "", "output": "The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method.", "category": "Python"}, {"instruction": "Implement a Vue component that displays a table layout.", "input": "", "output": "The component can be implemented in the following way: \n\n<template> \n  <div> \n    <table> \n      <tr v-for=\"row in rows\"> \n        <td v-for=\"item in row\">{{item}}</td> \n      </tr> \n    </table>\n  </div>\n</template> \n\n<script> \nexport default { \n  name: 'TableComponent', \n  props: { \n    rows: { \n      type: Array \n    } \n  } \n} \n</script>", "category": "Python"}, {"instruction": "Concatenate the following two strings using C#.", "input": "string str1 = \"hello\";\nstring str2 = \"world\";", "output": "string str1 = \"hello\";\nstring str2 = \"world\";\nstring result = str1 + str2;", "category": "Python"}, {"instruction": "Provide a syntactically correct C++ function that takes a number and returns a string representation of the number.", "input": "", "output": "std::string intToString(int number){\n    std::stringstream ss; \n    ss << number; \n    return ss.str();\n}", "category": "Python"}, {"instruction": "Explain the main differences between Java and Python.", "input": "", "output": "The main differences between Java and Python include speed of development, execution speed, type safety, readability and syntax ease, standard libraries, and code scalability. Java is more popular in enterprise applications and is generally faster to develop than Python because of its statically typed language. Java has a JVM (Java Virtual Machine) making it faster to compile and execute than Python, which is dynamically typed. Java is more type-safe and easier to debug, while Python is more readable and easier to learn. Python also has wider range of standard libraries than Java, making development faster. Python is more scalable than Java, making it applicable for larger projects.", "category": "Python"}, {"instruction": "Create a javascript class that takes in two arguments and prints them out when called.", "input": "", "output": "class PrintNumber{\n    constructor(num1, num2){\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    printNumber(){\n        console.log(`${this.num1}, ${this.num2}`);\n    }\n}", "category": "Python"}, {"instruction": "Write a python program to create a class called cube.", "input": "", "output": "class Cube:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\n    def calculate_volume(self):\n        return self.length * self.width * self.height", "category": "Python"}, {"instruction": "Summarize the features of the Python pandas library.", "input": "", "output": "Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data.", "category": "Python"}, {"instruction": "Create a Java program that prints a 10x10 multiplication table.", "input": "", "output": "class MultiplicationTable {\n  public static void main(String[] args) {\n    System.out.print(\"  \");\n    for(int i=1; i<=10; i++)\n      System.out.printf(\"%4d\", i);\n    System.out.println();\n\n    for(int i=1; i<=10; i++) {\n      System.out.print(i + \" \");\n      for(int j=1; j<=10; j++)\n        System.out.printf(\"%4d\", i * j);\n      System.out.println();\n    }\n  }\n}", "category": "Python"}, {"instruction": "Using CSS, style a page width 800px and a page height of 600px.", "input": "", "output": "body {\n  width: 800px;\n  height: 600px;\n}", "category": "Python"}, {"instruction": "Using the JavaScript language, write a code snippet to display the current date.", "input": "", "output": "var today = new Date() \nvar date = today.getDate() + \"/\" + (today.getMonth()+1) + \"/\" + today.getFullYear() \nconsole.log(date)", "category": "Python"}, {"instruction": "Create a Go program to print out the cube of a given integer.", "input": "Number: 5", "output": "package main  \nimport \"fmt\"  \n  \nfunc main() {  \n    num := 5 \n    fmt.Println(\"Cube of a given number is: \", num*num*num)  \n}", "category": "Python"}, {"instruction": "Spin up a container for an application with Docker-Compose", "input": "Web App Image: my_web_app:v1", "output": "version: '3'\n\nservices:\n  web_app:\n    image: my_web_app:v1\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure", "category": "Python"}, {"instruction": "Generate a Python Fibonacci sequence of length n", "input": "n = 7", "output": "def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))", "category": "Python"}, {"instruction": "Rewrite the following Java code into SQL to select all the distinct elements from a table.", "input": "String sql = \"SELECT DISTINCT * FROM table_name\";", "output": "SELECT DISTINCT * FROM table_name;", "category": "Python"}, {"instruction": "Identify the mistakes in the below code.", "input": "def add_two_numbers(x, y):\n  a = x + y\n  return a", "output": "The given code does not have any mistakes. All the syntax is correct and the code will perform its intended operation. The indentation of the code is also correct. However, it could be improved by adding descriptive variable and function names, adding comments to explain the code's purpose and by making sure that the code follows the established coding standards.", "category": "Python"}, {"instruction": "Write some Java code to fill in an array of size n with all consecutive numbers from 1 to n.", "input": "", "output": "public void fill(int[] array, int n) { \n    for (int i = 0; i < n; i++) { \n        array[i] = i + 1; \n    } \n}", "category": "Python"}, {"instruction": "Create an HTML page that uses the CSS box model to style a text.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Styling</title>\n    <style>\n        #text {\n            border: solid 1px black;\n            padding: 10px;\n            width: 300px;\n            margin: 10px auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"text\">\n        This is some sample text to demonstrate the CSS box model.\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Print a multiplication table for the number 4 in C.", "input": "", "output": "#include <stdio.h>\n\nint main()\n{\n    int i,j;\n \n    for(i=1;i<=9;i++)\n    {\n        j=4*i;\n        printf(\"%d * %d = %d\\n\",4,i,j);\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a code to find the maximum value in a numeric array using recursion.", "input": "array = [1, -2, 3, -4, 5]", "output": "def find_max(arr): \n  #base case \n  if len(arr) == 1: \n      return arr[0] \n  else: \n      max_n = find_max(arr[1:]) \n      #compare the maximum element with the first element of the array \n      if arr[0] > max_n: \n          return arr[0] \n      else: \n          return max_n \n  \n# Print maximum value in the array \nprint(find_max(array)) \n\n#output \n5", "category": "Python"}, {"instruction": "Create a simple calculator program in Python.", "input": "", "output": "def add(num1, num2): \n  return num1 + num2 \n\ndef subtract(num1, num2): \n  return num1 - num2 \n\ndef multiply(num1, num2): \n  return num1 * num2 \n\ndef divide(num1, num2): \n  return num1 / num2 \n\n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n\n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n\n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")", "category": "Python"}, {"instruction": "Write a React class conmponent to render a greeting.", "input": "", "output": "class Greeting extends React.Component {\n    render() {\n        return (\n            <div> \n                <h1>Hello World!</h1> \n            </div>\n        );\n    }\n}", "category": "Python"}, {"instruction": "Construct a switch statement to check if a month name is valid.", "input": "", "output": "// switch statement to check if a month name is valid \nswitch (month) { \n   case \"January\": \n   case \"February\": \n   case \"March\": \n   case \"April\": \n   case \"May\": \n   case \"June\": \n   case \"July\": \n   case \"August\": \n   case \"September\": \n   case \"October\": \n   case \"November\": \n   case \"December\":  \n      System.out.println(\"Valid Month\"); \n      break; \n   default: \n      System.out.println(\"Invalid Month\"); \n      break; \n}", "category": "Python"}, {"instruction": "Create a simple website using HTML/CSS.", "input": "", "output": "<html>\n<head>\n  <title> My Website </title>\n  <style>\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n    h1 {\n      font-size: 40px;\n      color: blue;\n    }\n    p {\n      font-size: 20px;\n      line-height: 1.6;\n    }\n  </style>\n</head>\n<body>\n  <h1> Welcome to my website! </h1>\n  <p> This is a simple website created using HTML and CSS. </p>\n</body>\n</html>", "category": "Python"}, {"instruction": "List the various sorting algorithms used in computer programming.", "input": "", "output": "The various sorting algorithms used in computer programming include: bubble sort, insertion sort, selection sort, merge sort, quick sort, heap sort, shell sort, radix sort, and counting sort.", "category": "Python"}, {"instruction": "Write regular expression for the following string: abc123", "input": "", "output": "^[a-zA-Z]+[0-9]{3}$", "category": "Python"}, {"instruction": "Construct a decision tree to classify a fruit as mango or apple based on its color and texture.", "input": "", "output": "Decision Tree:\n\nRoot Node:  Is it a mango?\n\nYes: Output = Mango \nNo:\n  Left Node: Is it yellow?\n     Yes: Output = Mango\n     No:\n        Left Node: Is it green?\n           Yes: Output = Apple\n           No: Output = Unknown \n  Right Node: Is it smooth?\n     Yes: Output = Apple\n     No: Output = Unknown", "category": "Python"}, {"instruction": "Explain the differences between a multi-threaded application and a multi-process application.", "input": "", "output": "A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can\u2019t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.", "category": "Python"}, {"instruction": "Insert this HTML element at the appropriate place.", "input": "<h1>Important Text</h1>", "output": "<body>\n    <p>Some other text here</p>\n    <h1>Important Text</h1>\n</body>", "category": "Python"}, {"instruction": "Add a function to implement a basic calculator in C++.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint addition(int a, int b){\n   return (a+b);\n}\n\n// Subtraction function\nint subtraction(int a, int b){\n   return (a-b);\n}\n\n// Multiplication function\nint multiplication(int a, int b){\n   return (a*b);\n}\n\n// Division function\nint division(int a, int b){\n   return (a/b);\n}\n\n// Function to perform basic calculator operations\nint calculate(int a, int b, char c){\n    int result;\n    switch (c){\n       case '+':\n           result = addition(a, b);\n           break;\n       case '-':\n           result = subtraction(a, b);\n           break;\n       case '*':\n           result = multiplication(a, b);\n           break;\n       case '/':\n           result = division(a, b);\n           break;\n       default:\n           break;\n    }\n    return result;\n}\n\nint main(){\n    int x, y;\n    char a;\n    \n    cout << \"Please enter two numbers: \";\n    cin >> x >> y;\n    \n    cout << \"Please enter an operator: \";\n    cin >> a;\n    \n    int result = calculate(x, y, a);\n    cout << \"The result is: \" << result;\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Java program to output the first ten numbers of the Fibonacci sequence.", "input": "", "output": "class Fibonacci {  \n    public void printFibonacciNumbers(int n) { \n    int first = 0;\n    int second = 1; \n    System.out.print(first + \" \" + second);  \n    for (int i = 2; i < n; i++) { \n        int third = first + second; \n        System.out.print(\" \"+third); \n        first = second; \n        second = third; \n    }\n    }\n}", "category": "Python"}, {"instruction": "Write a loop that iterates over the characters in a string, and if the character is an 'o', print the character.", "input": "\"Hello World\"", "output": "for char in \"Hello World\":\n    if char == 'o':\n        print(char)", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to check for an empty array.", "input": "let array = [];", "output": "if (array.length === 0) {\n   console.log('Array is empty');\n}", "category": "Python"}, {"instruction": "Create a SQL query to select the most recent 5 posts from a table ordered by the post date.", "input": "", "output": "SELECT * FROM Posts\nORDER BY PostDate DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Write a Java statement that takes a string as an argument and prints it out.", "input": "String s = \"Hello World!\";", "output": "System.out.println(s);", "category": "Python"}, {"instruction": "Write an XPATH expression to find the text \"Welcome\" in an HTML document.", "input": "<div>\n  <h1>Welcome</h1>\n  <p>Hello World!</p>\n</div>", "output": "//h1[contains(text(), \"Welcome\")]", "category": "Python"}, {"instruction": "Create a regular expression to match all numbers of the form 1xx-xxx-xxxx.", "input": "", "output": "Regex pattern to match numbers in the given form: \npattern = r'1\\d{2}-\\d{3}-\\d{4}'", "category": "Python"}, {"instruction": "Design a Node.js program to send a push notification to users when the deadline of a task is reached.", "input": "", "output": "const { Notifications } = require('node-notifier');\n\nfunction sendPushNotification() {\n  const message = \"This is a reminder that your deadline is approaching\"; \n  const notification = new Notifications({message})\n  notification.send();\n};\n\n// Function to monitor the deadline\nfunction deadlineMonitor() {\n  setInterval(function(){\n    // Call function to check if the deadline has been reached\n    deadlineReached();\n  }, 5000);\n}\n\n// Function to check if the deadline has been reached\nfunction deadlineReached() {\n  // Set deadline\n  let deadline = new Date();\n  deadline.setMinutes(deadline.getMinutes() + 15);\n  \n  // Current date\n  const date = new Date();\n  \n  // If the current date is equal to the deadline, call the push notification\n  if (date === deadline) {\n    sendPushNotification();\n  }\n}", "category": "Python"}, {"instruction": "Write an assembly code to perform the task of incrementing a memory block by 8.", "input": "", "output": "MOV AL, 8\nMOV CX, Size\nCLD\n\nLOOP: LODSW\nADD AL, 8\nSTOSW\nLOOP LOOP", "category": "Python"}, {"instruction": "Edit this line of code to make it work according to our requirements.", "input": "print(\"Hello\",[1,2,3],sep='|')", "output": "print(\"Hello\",\"|\".join([str(x) for x in [1,2,3]]))", "category": "Python"}, {"instruction": "Write a SQL query to extract the top 5 occurrences of the city names from the following table.", "input": "Table: person\n\n\u2554\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 id \u2551 name  \u2551   city   \u2551\n\u2560\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551  1 \u2551 Ann   \u2551  Paris   \u2551\n\u2551  2 \u2551 Jack  \u2551  Tokyo   \u2551\n\u2551  3 \u2551 Tom   \u2551  Tokyo   \u2551\n\u2551  4 \u2551 Daisy \u2551  Paris   \u2551\n\u2551  5 \u2551 John  \u2551  London  \u2551\n\u2551  6 \u2551 Paul  \u2551  London  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d", "output": "SELECT CITY, COUNT(*) as Occurrences\nFROM person\nGROUP BY City\nORDER BY Count(*) DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "You are given a list of names. Create a list whose elements are the length of each name in the original list.", "input": "names = [\"Max\", \"John\", \"Cindy\", \"Sarah\"]", "output": "lens = []\nfor name in names:\n    lens.append(len(name))", "category": "Python"}, {"instruction": "Create a Java program to determine whether a given string is a palindrome. A palindrome is a string which reads the same forwards and backwards.", "input": "", "output": "public class Palindrome {\n    public static boolean isPalindrome(String s) {\n        int i = 0, j = s.length()-1; \n        while (i < j) { \n            if (s.charAt(i) != s.charAt(j)) \n                return false; \n            i++; \n            j--; \n        } \n  \n        return true; \n    } \n \n    public static void main(String[] args) {\n        String s = \"madam\";\n        if (isPalindrome(s)) \n            System.out.println(\"The string is a palindrome.\"); \n        else\n            System.out.println(\"The string is not a palindrome.\"); \n    }\n \n}", "category": "Python"}, {"instruction": "Edit the following code to take in a list of numbers and output the sum of all numbers in the list.", "input": "my_list = [5, 10, 15, 20]", "output": "my_list = [5, 10, 15, 20]\ntotal = 0\nfor num in my_list:\n    total += num\nprint(total) #50", "category": "Python"}, {"instruction": "Write a Java program to take in 3 strings and combine them into one.", "input": "string1 = \"hello\"\nstring2 = \"world\"\nstring3 = \"!\"", "output": "public class CombineStrings {\n    public static void main(String[] args) {\n        String string1 = \"hello\";\n        String string2 = \"world\";\n        String string3 = \"!\";\n        String output = string1 + string2 + string3 ;\n        System.out.println(output); //hello world!\n    }\n}", "category": "Python"}, {"instruction": "Read the following JavaScript code and add an appropriate input field for the function.", "input": "", "output": "function reverse_string(string){\n   let reversed = '';\n   for(let i = string.length - 1; i >= 0; i--){\n      reversed += string[i];\n   }\n   return reversed;\n}\nlet input = \"hello world\";\nconsole.log(reverse_string(input)); // dlrow olleh", "category": "Python"}, {"instruction": "Edit the following program to add 1 to each element of the list and print the result.", "input": "my_list = [2, 5, 7, 9]", "output": "my_list = [2, 5, 7, 9]\nfor (let i = 0; i < my_list.length; i++) {\n    my_list[i] = my_list[i] + 1;\n}\nconsole.log(my_list); // [3, 6, 8, 10]", "category": "Python"}, {"instruction": "Create a PHP script to iterate through a list of numbers and determine if any of the numbers are divisible by 5.", "input": "my_list = [18, 22, 10, 27]", "output": "<?php\n$my_list = [18, 22, 10, 27];\n$divisible = False;\nforeach ($my_list as $num){\n    if($num % 5 == 0){\n        $divisible = True;\n        break;\n    }\n}\necho $divisible;", "category": "Python"}, {"instruction": "Read a sentence from the user, and then reverse its words in place.", "input": "", "output": "sentence = input(\"Please enter a sentence: \")\nwords = sentence.split()\nwords.reverse()\nsentence = \" \".join(words)\nprint(sentence)", "category": "Python"}, {"instruction": "Write a Python program to count how many times a given element appears in the list.", "input": "my_list = [1, 2, 5, 4, 2, 1, 5]", "output": "my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2", "category": "Python"}, {"instruction": "Read the given Python code and generate the output for the following input.", "input": "my_list = range(1, 11)", "output": "my_list = range(1, 11)\noutput = 0\nfor i in my_list:\n output += i\nprint(output) #55", "category": "Python"}, {"instruction": "Write a code snippet to compute the average of a set of integers.", "input": "[3, 7, 11, 15]", "output": "def avg(arr): \n    sum = 0 \n    for num in arr:\n        sum += num \n    return sum/len(arr)  \n  \nnumbers = [3, 7, 11, 15]\naverage = avg(numbers) \nprint(\"Average of the numbers:\",average)  // Output: 9.5", "category": "Python"}, {"instruction": "Write a SQL query to find the names of the people who are enrolled in both Physics and Math classes.", "input": "", "output": "SELECT name\nFROM students \nWHERE enrolled_in = 'Physics'\nAND enrolled_in = 'Math';", "category": "Python"}, {"instruction": "Create a Java function that takes an integer array as a parameter and prints out the maximum element of the array.", "input": "[1, 5, 9, 10, 12]", "output": "public static void printMax(int[] arr) {\n    int max = arr[0];\n    for (int i = 1; i < arr.length;i++) {\n        max = (arr[i] > max) ? arr[i] : max;\n    }\n    System.out.println(max);\n}", "category": "Python"}, {"instruction": "Debug the following C++ program.", "input": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b \n    cin>>a,b;\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}", "output": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b;\n    cin>>a>>b; // change \",\" to \">>\"\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}", "category": "Python"}, {"instruction": "Design a data structure to store a list of courses with their corresponding details.", "input": "", "output": "The data structure to store a list of courses with their corresponding details can be a Python dictionary. The keys can be the course codes and the corresponding value can be a dictionary with the details of the course such as the name, number of credits, and description.\nExample: \n\ncourse_list = { \n    'MATH101': { \n        'name': 'Calculus', \n        'credits': 4, \n        'description': 'A study of calculus.' \n    }, \n    'PHYS101': { \n        'name': 'Physics', \n        'credits': 5, \n        'description': 'An introduction to physics.' \n    } \n}", "category": "Python"}, {"instruction": "Design a neural network model to detect the sentiment of a given sentence.", "input": "", "output": "The designed neural network model can be implemented with an embedding layer followed by a convolutional layer and then a global max-pooling layer. The output of the pooling layer can be passed through a fully connected layer with a sigmoid activation function to achieve the final output of the model. We can feed the model with a dataset of sentences labeled as either 'positive' or 'negative'. The model can then be trained using gradient descent. After training is complete, the model can be used to detect the sentiment of new sentences as either 'positive' or 'negative'.", "category": "Python"}, {"instruction": "Edit the given JavaScript code to convert the input string\u2019s first letter to uppercase.", "input": "let str = \"hello world\";", "output": "let str = \"hello world\";\nstr = str[0].toUpperCase() + str.slice(1);", "category": "Python"}, {"instruction": "Sort an array in descending order using JavaScript.", "input": "[50, 34, 97, 56, 12, 99]", "output": "let arrayToSort = [50, 34, 97, 56, 12, 99];\narrayTo Sort.sort((a, b) => b - a);\nconsole.log(arrayToSort); // [99, 97, 56, 50, 34, 12]", "category": "Python"}, {"instruction": "Create two functions to check if a given list contains a specific element.", "input": "list = [4, 1, 6, 9, 8]\nitem = 8", "output": "def check_list(lst, item):\n    return item in lst\n\ndef check_list_version2(lst, item):\n    for x in lst:\n        if x == item: \n            return True\n    return False", "category": "Python"}, {"instruction": "Unpack the elements in the given list of tuples and assign them to individual variables.", "input": "lst = [(\"Max\", \"Smith\"), (\"John\", \"Doe\"), (\"Cindy\", \"Wilson\")]", "output": "for (name1, name2) in lst:\n    first_name = name1\n    last_name = name2", "category": "Python"}, {"instruction": "Suggest two ways to loop through a python dictionary", "input": "", "output": "1. Using for loop: \n\nfor key, value in dict.items(): \n    # Do something with key and value\n\n2. Using while loop:\n\nkeys = list(dict.keys()) \ni = 0\nwhile i < len(keys):\n    key = keys[i] \n    value = dict[key]\n    # Do something with key and value\n    i += 1", "category": "Python"}, {"instruction": "Make a dictionary that contains the number of characters in each word from this list.", "input": "list = ['apple', 'banana', 'cherry']", "output": "list_dict = { 'apple': 5, 'banana': 6, 'cherry': 6 }", "category": "Python"}, {"instruction": "Construct a loop that prints the characters of the given string in reverse order.", "input": "string = 'Hello World'", "output": "for i in range(len(string)-1, -1, -1):  \n    print(string[i], end=\"\")", "category": "Python"}, {"instruction": "Form an if-else condition that prints \u201cThis is an even number\u201d if a number is even and \u201cThis is an odd number\u201d if the number is odd", "input": "number = 5", "output": "if (number % 2 == 0): \n    print(\"This is an even number\") \nelse: \n    print(\"This is an odd number\")", "category": "Python"}, {"instruction": "Construct a helper function that prints the provided string twice.", "input": "", "output": "def print_twice(string):\n    print(string)\n    print(string)", "category": "Python"}, {"instruction": "Create a for loop to output the square roots of the numbers between 0 and 10 using the math library.", "input": "", "output": "import math\n\nfor i in range(0,11):\n    print(math.sqrt(i))", "category": "Python"}, {"instruction": "Replace the content of the variable ``x`` with a list of numbers.", "input": "x = <noinput>", "output": "x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Given a list of numbers, sort them from smallest to largest.", "input": "lst = [3, 5, 2, 6, 8, 1]", "output": "lst.sort()", "category": "Python"}, {"instruction": "Construct a for loop in Java for iterating through an array.", "input": "", "output": "for (int i = 0; i < array.length; i++) {\n    System.out.println(array[i]);\n}", "category": "Python"}, {"instruction": "Write a SQL query which will select column names from a certain table.", "input": "", "output": "SELECT column_name \nFROM table_name;", "category": "Python"}, {"instruction": "Modify the following code to print the keys of a dictionary.", "input": "d = {'a':1, 'b':2, 'c':3}", "output": "d = {'a':1, 'b':2, 'c':3}\n\nfor key in d:\n    print(key)", "category": "Python"}, {"instruction": "Generate an HTML page with the following data fields: title, author, and content.", "input": "title: Generating HTML page\nauthor: GPT\ncontent: This is an example of how you can generate an HTML page.", "output": "<html>\n<head>\n    <title>Generating HTML Page</title>\n    <meta name=\"author\" content=\"GPT\" />\n</head>\n<body>\n<p>This is an example of how you can generate an HTML page.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Edit this HTML structure to add a footer at the bottom.", "input": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n \n<footer>\n   <p>Copyright \u00a9 20", "category": "Python"}, {"instruction": "Write a JavaScript function to generate a random string of 8 characters using lowercase alphabets and digits.", "input": "", "output": "function getRandomString(){\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let str = '';\n    for (let i=0; i<8; i++)\n        str += chars.charAt(Math.floor(Math.random() * chars.length));\n    return str;\n}", "category": "Python"}, {"instruction": "Convert the following list of strings to integers and calculate their total.", "input": "lst = [\"4\", \"5\", \"2\", \"6\", \"8\", \"1\"]", "output": "total = 0\nfor s in lst:\n    total += int(s)", "category": "Python"}, {"instruction": "Given two strings, concatenate them together and assign the result to a variable.", "input": "str1 = \"Hello\"\nstr2 = \"World\"", "output": "res = str1 + str2", "category": "Python"}, {"instruction": "Create an algorithm for finding the least common multiple of two numbers.", "input": "", "output": "One algorithm to find the least common multiple of two numbers is as follows:\n\nStep 1: Find the greatest common divisor (GCD) of the two numbers.\nStep 2: Divide the product of the two numbers by the GCD to find the least common multiple (LCM).\n\nThe GCD of two numbers can be found using the Euclidean algorithm, which works by continually dividing the larger number by the smaller number until they are equal. The GCD is then the smaller number.", "category": "Python"}, {"instruction": "What is the JavaScript syntax for declaring a variable with the value of \"hello\"?", "input": "", "output": "The JavaScript syntax for declaring a variable with the value of \"hello\" is  \"var myVariable= 'hello';\".", "category": "Python"}, {"instruction": "Write a JavaScript program to convert a given number of seconds into the equivalent time in days, hours, minutes and seconds.", "input": "15000", "output": "let totalSeconds = 15000;\nlet days = Math.floor(totalSeconds / (24*60*60));\nlet remainingSeconds = totalSeconds % (24*60*60);\nlet hours = Math.floor(remainingSeconds / (60*60));\nlet remainingSeconds2 = remainingSeconds % (60*60);\nlet minutes = Math.floor(remainingSeconds2 / (60));\nlet seconds = remainingSeconds2 % (60);\n\nconsole.log(`${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds.`);", "category": "Python"}, {"instruction": "Create an array to store 10 names of famous scientists.", "input": "", "output": "let scientists = [\"Albert Einstein\", \"Isaac Newton\", \"Charles Darwin\", \"Marie Curie\", \"Galileo Galilei\", \"Stephen Hawking\", \"Sophie Germain\", \"Antoine Lavoisier\", \"Niels Bohr\", \"Blaise Pascal\"];", "category": "Python"}, {"instruction": "Write a function to find all elements that appear more than once in a given array.", "input": "[1, 3, 2, 3, 8, 9, 10]", "output": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n    for num in numbers:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)", "category": "Python"}, {"instruction": "Write a function to remove the first occurrence of a specified element from a given list.", "input": "[2, 4, 8, 9, 4]", "output": "def remove_first_occurrence(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr", "category": "Python"}, {"instruction": "Suppose a web page contains an unknown number of parameters. Write a function to count the number of parameters present in a given URL.", "input": "https://www.example.com?query=environment&limit=10&sort=descending", "output": "def count_parameters(url):\n    params = url.split('?')[-1]\n    return len(params.split('&'))", "category": "Python"}, {"instruction": "Develop an algorithm to modify a given string by changing the case of each character.", "input": "string = \"Hello World\"", "output": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string", "category": "Python"}, {"instruction": "Edit the given code to validate an IP address.", "input": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):", "output": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):\n    # Split the IP string by '.' \n    ip_split = IP.split('.')\n    \n    #Checking for the corner cases \n    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): \n        return \"Valid IP!\"\n    else: \n        return \"Invalid IP!\"", "category": "Python"}, {"instruction": "You need to write an algorithm to find the third largest value in a Binary Search Tree.", "input": "8 \n      /   \\\n     3     10\n    / \\     \\\n   1   6     14\n      / \\    /\n     4   7  13", "output": "def third_largest(root):\n    if root is None:\n        return None\n \n    queue = []\n    queue.append(root)\n    while len(queue):\n        curr = queue.pop(0)\n \n        if curr.right:\n            queue.append(curr.right)\n        if curr.left:\n            queue.append(curr.left)\n \n    if len(queue)>1:\n        return queue[1].val\n    else:\n        return root.val", "category": "Python"}, {"instruction": "Generate a regular expression to match words that contain only lowercase letters.", "input": "", "output": "^[a-z]+$", "category": "Python"}, {"instruction": "Develop an algorithm to print all the possible n-ary trees with a given number of nodes.", "input": "n=4", "output": "# Node class \nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.children = [] \n\n# A function to print the n-ary tree \ndef printNaryTreeUtil(root, func, level = 0): \n   \n    # If node is None, simply return \n    if root is None: \n        return\n  \n    # Process child nodes of root recursively \n    for i in range(len(root.children)): \n        printNaryTreeUtil(root.children[i], func, \n                          level + 1) \n  \n    # Call the function for the root \n    func(root, level) \n  \n# Function to generate n-ary trees    \ndef constructNaryTree(nodes): \n  \n    # Create a root node \n    root = Node(nodes[0]) \n  \n    # Create a stack which will be used to \n    # create children of root and their subtrees \n    s = [root] \n  \n    # Traverse the tree nodes in pre order fashion \n    i = 1\n    while i < len(nodes): \n  \n        node = s[len(s) - 1] \n        child = Node(nodes[i]) \n        node.children.append(child) \n        s.append(child) \n  \n        # If number of children of the node is equal to \n        # its degree, remove the node and its subtree \n        if len(node.children) == node.degree: \n            s.pop() \n  \n        i += 1\n  \n    return root \n    \n# Driver code \nif __name__ == '__main__': \n\n\t# Given number of nodes \n\tn = 4\n\n\t# Generate the nodes \n\tnodes = list(range(1, n + 1)) \n\n\t# Construct n-ary tree \n\troot = constructNaryTree(nodes) \n\n\t# Function to print the tree \n\tdef printTree(node, level): \n\t\tprint('\\t' * level, node.data, sep=\"\") \n\n\t# Print the tree \n\tprintNaryTreeUtil(root, printTree)", "category": "Python"}, {"instruction": "Generate a random string with the a capital letter followed by two lower case letters.", "input": "", "output": "import string\nimport random\ndef random_string():\n\n  capitalletter = random.choice(string.ascii_uppercase)\n  lowercaseletter1 = random.choice(string.ascii_lowercase)\n  lowercaseletter2 = random.choice(string.ascii_lowercase)\n\n  return capitalletter + lowercaseletter1 + lowercaseletter2", "category": "Python"}, {"instruction": "Develop an algorithm to concatenate two strings.", "input": "String 1: \"Hello,\" \nString 2: \"World!\"", "output": "def concatenate(str1, str2):\n  return str1 + str2", "category": "Python"}, {"instruction": "Find the area of a triangle using the Heron's formula", "input": "lengths = [3, 4, 5]", "output": "def herons_formula(lengths):\n    a, b, c = lengths[0], lengths[1], lengths[2]\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c))** 0.5\n    return area", "category": "Python"}, {"instruction": "Using python, implement a method to find the longest common subsequence in two strings", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))", "category": "Python"}, {"instruction": "Classify the following pieces of data", "input": "Texas\nBlue\nDog", "output": "State: Texas\nColor: Blue\nAnimal: Dog", "category": "Python"}, {"instruction": "Convert the following snippet from ES6 to ES5", "input": "const multiply = ( x, y) => { return x * y };", "output": "var multiply = function(x, y) { \n    return x * y;\n};", "category": "Python"}, {"instruction": "Rewrite the code to remove the unnecessary boolean flag", "input": "flag = False\ndef printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n        flag = True\n    if flag and len(fooBarArray) > 0:\n        print(fooBarArray)", "output": "def printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n    if len(fooBarArray) > 0:\n        print(fooBarArray)", "category": "Python"}, {"instruction": "Generate an 8 character random string.", "input": "", "output": "import string\nimport random\n\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(size))\n\nrandom_string = gen_random_string(8)\nprint(random_string)", "category": "Python"}, {"instruction": "Create a script to delete all system logs.", "input": "", "output": "#!/bin/bash\n\n# Remove all system log files\nsudo rm /var/log/*.log", "category": "Python"}, {"instruction": "Compute the sum of all elements in an array given as an argument to a JavaScript function.", "input": "", "output": "function sumArray(array) {\n   let result = 0;\n   array.forEach(function(element) {\n     result += element;\n   });\n   return result;\n}", "category": "Python"}, {"instruction": "Classify three objects using a decision tree algorithm written in JavaScript.", "input": "Object 1: round, red, 5cm\nObject 2: square, green, 10cm\nObject 3: triangular, red, 8cm", "output": "function classifyObject(object) {\n    if(object.shape === 'round') {\n        return 'object is round';\n    } else if(object.color === 'red') {\n        return 'object is red';\n    } else if(object.size <= 8) {\n        return 'object is small';\n    } else {\n        return 'object is large';\n    }\n}", "category": "Python"}, {"instruction": "Construct a program in Java to sort an array of String objects.", "input": "", "output": "public class StringSort { \n  \n    public static void sortStringArray(String[] arr) \n    { \n        // Sorting strings \n        Arrays.sort(arr); \n  \n        // Displaying the strings after sorting \n        System.out.println(\"Strings in sorted order: \"); \n        for (int i = 0; i < arr.length; i++) \n            System.out.println(arr[i]); \n    } \n}", "category": "Python"}, {"instruction": "Implement a DFS algorithm for a tree data structure.", "input": "", "output": "def DFS(root):\n    S = []\n    visited = []\n \n    S.append(root)\n \n    while len(S) > 0:\n        node = S.pop()\n        visited.append(node)\n \n        for vertex in node.get_adjacent_vertices():\n            if vertex not in visited:\n                S.append(vertex)\n    return visited", "category": "Python"}, {"instruction": "Write a stack class in Java.", "input": "", "output": "public class Stack {\n \n    private int[] stackArray;\n    private int maxSize;\n    private int top;\n   \n    public Stack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n   \n    public void push(int item) {\n        stackArray[++top] = item;\n    }\n   \n    public int pop() {\n        return stackArray[top--];\n    }\n   \n    public int peek() {\n        return stackArray[top];\n    }\n   \n    public boolean isEmpty() {\n        return (top == -1);\n    }\n}", "category": "Python"}, {"instruction": "Create a function in Python to add two numbers, which may take any number of arguments.", "input": "", "output": "def add(*nums):\n    \"\"\"Add two or more numbers.\"\"\"\n    # Initialize sum\n    result = 0\n\n    # Iterate through given numbers\n    for num in nums:\n        result += num\n\n    # Return the sum \n    return result\n    \n# Example\nsum = add(15, 7, 10)\nprint(sum)\n# Output: 32", "category": "Python"}, {"instruction": "Create a for loop in JavaScript to loop backwards from 10 to 1.", "input": "", "output": "for (let i = 10; i > 0; i--) {\n  console.log(i);\n}\n\n// Output: 10 9 8 7 6 5 4 3 2 1", "category": "Python"}, {"instruction": "Print the largest number in a given array in Python.", "input": "my_array = [5, 11, 7, 10, 2]", "output": "my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n        # If a number is larger than the assumed largest, it is the new largest number\n        if num > largest:\n            largest = num\n\n    # Return the largest number\n    return largest\n\n# Call the function\nlargest = find_largest_number(my_array)\n\n# Print the result\nprint(largest)\n# Output: 11", "category": "Python"}, {"instruction": "Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores.", "input": "\"Hello World!\"", "output": "def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    # Convert to lowercase\n    normalized_string = normalized_string.lower()\n\n    # Replace special characters\n    characters = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\"]\n    for c in characters:\n        normalized_string = normalized_string.replace(c, \"_\")\n\n    return normalized_string\n\n# Example\nnormalized_string = normalize_string(\"Hello World!\")\nprint(normalized_string)\n# Output: hello_world_", "category": "Python"}, {"instruction": "Writing a regex pattern to match words starting with \"Py\"", "input": "", "output": "pattern = r'\\bPy\\w*\\b'", "category": "Python"}, {"instruction": "Rewrite the following if-statement into a switch statement.", "input": "if (grade == \"A\") {\n    gradeValue = 4.0;\n}\nelse if (grade == \"B\") {\n    gradeValue = 3.0;\n}\nelse if (grade == \"C\") {\n    gradeValue = 2.0;\n}\nelse if (grade == \"D\") {\n    gradeValue = 1.0;\n}", "output": "switch(grade) {\n  case 'A':\n    gradeValue = 4.0;\n    break;\n  case 'B':\n    gradeValue = 3.0;\n    break;\n  case 'C':\n    gradeValue = 2.0;\n    break;\n  case 'D':\n    gradeValue = 1.0;\n    break;\n  default:\n    gradeValue = 0;\n    break;    \n}", "category": "Python"}, {"instruction": "Edit the given Python code to compute the mean of the given list of numbers.", "input": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x", "output": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)", "category": "Python"}, {"instruction": "Create a SQL query that returns the number of employees in each city.", "input": "", "output": "SELECT city, COUNT(*) AS num_employees\nFROM employees\nGROUP BY city;", "category": "Python"}, {"instruction": "Create a Python program to convert a given temperature in Celsius to Kelvin.", "input": "", "output": "def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin", "category": "Python"}, {"instruction": "Determine the function of the Bluetooth signal in the given program.", "input": "void setup() {\n  Serial.begin(9600);\n  Bluetooth.begin(9600);\n}\n\nvoid loop() {\n  BluetoothSignal();\n}\n\nvoid BluetoothSignal() {\n // Code to send a signal to the Bluetooth module.\n}", "output": "The function of the Bluetooth signal is to send a signal to the Bluetooth module.", "category": "Python"}, {"instruction": "Generate a string containing the first 10 characters of the alphabet in reverse order.", "input": "", "output": "zyxwvutsrq", "category": "Python"}, {"instruction": "Write a Java program to find all pairs of integers from an array whose sum equals a given number.", "input": "", "output": "public static List<int[]> findSumPairs(int[] arr, int target) {\n    List<int[]> pairs = new ArrayList<>();\n \n    Map<Integer, Integer> numFreqMap = new HashMap<>();\n    for (int value : arr) {\n        numFreqMap.put(value, numFreqMap.getOrDefault(value, 0) + 1);\n    }\n    \n    for (int value : arr) {\n        int targetSubValue = target - value;\n \n        if (numFreqMap.containsKey(targetSubValue)) {\n            int targetSubValueFreq = numFreqMap.get(targetSubValue);\n \n            if (targetSubValue == value) {\n                if (targetSubValueFreq >= 2) {\n                    int[] pair = {value, targetSubValue};\n                    pairs.add(pair);\n                }\n            } else {\n                int[] pair = {value, targetSubValue};\n                pairs.add(pair);\n            }\n \n            numFreqMap.put(targetSubValue, 0);\n        }\n    }\n \n    return pairs;\n}", "category": "Python"}, {"instruction": "Modify a given shell script to generate a text-based report of the commands run in the bash shell.", "input": "", "output": "#!/bin/bash\n\n# Capture the output of command\nresult=$(bash -c \"${COMMAND}\")\n# Store the output of command in a file\necho \"$result\" >> output.txt\n# Include timestamp\necho \"Result at: $(date)\" >> output.txt\n# Add a newline to results file\necho >> output.txt", "category": "Python"}, {"instruction": "Train a Random Forest classifier in Python on the Iris dataset.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)", "category": "Python"}, {"instruction": "Construct a data mining program to mine public internet data.", "input": "Twitter datasets", "output": "import tweepy\n \nCONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXX'\nCONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN_SECRET = 'XXXXXXXXXXXXXXXXXXXX'\n\n# authenticating\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# initializing the API for data mining\napi = tweepy.API(auth)\n\n# pulling the data from Twitter\ndata = api.search(q=\"data mining\", lang=\"en\", count=100, tweet_mode=\"extended\")\n\n# processing the data\nfor tweet in data:\n    print(tweet.full_text) # print the full text of each tweet", "category": "Python"}, {"instruction": "Replace all instances of a given character with another character.", "input": "s = \"this is a sample string\", c=\"s\", r=\"x\"", "output": "s = \"this is a sample string\"\nc = \"s\"\nr = \"x\"\n\ndef replace_character(s, c, r):\n    return s.replace(c, r)\n\nprint(replace_character(s, c, r))", "category": "Python"}, {"instruction": "Filter out the integers from the list that are divisible by 6.", "input": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]", "output": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]\n\ndef filter_divisible_by_6(nums):\n    return [num for num in nums if num % 6 == 0]\n\nprint(filter_divisible_by_6(nums))", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all the columns from a table named 'customers' where their address includes the string \"Palm Street\".", "input": "", "output": "SELECT * FROM customers WHERE address LIKE '%Palm Street%';", "category": "Python"}, {"instruction": "Add an additional parameter to the following function.", "input": "def greet(name):\n    print(\"Hello \" + name + \"!\")", "output": "def greet(name, message):\n    print(message + \" \" + name + \"!\")", "category": "Python"}, {"instruction": "Create a new data structure to store the following information and write an algorithm to access it.", "input": "Key: \"B\"\n Value: \"Blue\"", "output": "data_structure = {\n    \"B\": \"Blue\"\n}\n\ndef access_data_structure(key):\n    return data_structure.get(key)", "category": "Python"}, {"instruction": "Explain how to traverse a binary tree using breadth-first search (BFS).", "input": "", "output": "Breadth-first search (BFS) is a technique used to traverse a tree or graph. In BFS, nodes are visited layer by layer, moving across each level from left to right. The algorithm traverses the tree level by level, beginning with the root node, then traversing the child nodes of the root, then traversing the grandchild nodes of the root, and so on. It continues the traversal until all the nodes in the tree have been visited.", "category": "Python"}, {"instruction": "Suggest the missing code to open a connection with a MySQL database in PHP.", "input": "", "output": "$host=\"localhost\";\n$user=\"username\";\n$password=\"password\";\n$db=\"database_name\";\n\n$conn=mysqli_connect($host,$user,$password,$db);\nif(mysqli_connect_error()){\n    echo \"Error connecting to database\";\n    die();\n}", "category": "Python"}, {"instruction": "Construct a JavaScript program to find the maximum element in the following array.", "input": "[12,3,4,1,26,7]", "output": "let arr = [12,3,4,1,26,7];\nlet max = arr[0];\n\nfor(let i=0; i<arr.length; i++) {\n    if(arr[i] > max) {\n        max = arr[i];\n    }\n}\n\nconsole.log(max);    # Output: 26", "category": "Python"}, {"instruction": "Construct an SQL query to add a new column called \"Gender\" to the table \"Employees\" with values Male and Female.", "input": "", "output": "ALTER TABLE `Employees` ADD `Gender` VARCHAR(20);\nUPDATE `Employees` SET `Gender`=\"Male\";\nUPDATE `Employees` SET `Gender`=\"Female\";", "category": "Python"}, {"instruction": "Design a Java method that takes an integer as an argument and prints its negative equivalent.", "input": "int x = 5;", "output": "public static void printNegativeNumber(int x) {\n    System.out.println(-x);\n}\n\nprintNegativeNumber(x); // -5", "category": "Python"}, {"instruction": "Build a function in JavaScript that takes two integers and returns the minimum value of the two.", "input": "int x = 5;\nint y = 8;", "output": "const findMin = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n}\n\nfindMin(x, y); // 5", "category": "Python"}, {"instruction": "Write a JavaScript code to print the current day in the week.", "input": "", "output": "const day = new Date().getDay();\nlet dayString;\n\nswitch (day) {\n  case 0:\n    dayString = \"Sunday\";\n    break;\n  case 1:\n    dayString = \"Monday\";\n    break;\n  case 2:\n    dayString = \"Tuesday\";\n    break;\n  case 3:\n    dayString = \"Wednesday\";\n    break;\n  case 4:\n    dayString = \"Thursday\";\n    break;\n  case 5:\n    dayString = \"Friday\";\n    break;\n  case 6:\n    dayString = \"Saturday\";\n    break;\n  default:\n    dayString = \"Unknown\";\n}\n\nconsole.log(dayString);", "category": "Python"}, {"instruction": "Create an SQL query to select name, age, and city from a table called \"users\".", "input": "", "output": "SELECT name, age, city FROM users;", "category": "Python"}, {"instruction": "Write a C++ code that implements the selection sort algorithm.", "input": "arr = { 7, 4, 3, 1, 9 }", "output": "#include <iostream> \nusing namespace std; \n  \nvoid swap(int *xp, int *yp) \n{ \n  int temp = *xp; \n  *xp = *yp; \n  *yp = temp; \n} \n  \nvoid selectionSort(int arr[], int n) \n{ \n  int i, j, min_idx; \n  \n  for (i = 0; i < n-1; i++) \n  { \n    min_idx = i; \n    for (j = i+1; j < n; j++) \n      if (arr[j] < arr[min_idx]) \n        min_idx = j; \n  \n    swap(&arr[min_idx], &arr[i]); \n  } \n} \n  \nint main() \n{ \n  int arr[] = {7, 4, 3, 1, 9}; \n  int n = sizeof(arr)/sizeof(arr[0]); \n  selectionSort(arr, n); \n  return 0; \n}", "category": "Python"}, {"instruction": "Create a function that multiplies each element of the input array by 10 and returns the result.", "input": "arr = [2, 3, 4]", "output": "def multiply_by_10(arr):\n  newArr = []\n  for i in arr:\n    newArr.append(i * 10)\n  return newArr\n\narr = [2, 3, 4]\n\nprint(multiply_by_10(arr))", "category": "Python"}, {"instruction": "Use LINQ syntax to create a query that returns all items that begin with the letter 'b'.", "input": "var letters = new[] { \"a\", \"b\", \"c\", \"d\", \"e\" };", "output": "var query = from letter in letters\n            where letter.StartsWith(\"b\")\n            select letter;\n\nforeach (string letter in query)\n{\n    Console.WriteLine(letter);\n}", "category": "Python"}, {"instruction": "Create a function `calculate_discount` to calculate 20% discount for a given price.", "input": "price = 50", "output": "def calculate_discount(price):\n    return price * 0.8\n\ndiscount = calculate_discount(price)", "category": "Python"}, {"instruction": "Create a for loop which will run till the given number and add each number to a list.", "input": "end_number = 10", "output": "numbers = [] \nfor num in range (1, end_number+1): \n    numbers.append(num)", "category": "Python"}, {"instruction": "Create a function called `convert_csv_to_json` to convert the following csv to the corresponding JSON formatt.", "input": "city,country,latitude,longitude\nFrankfurt,Germany,50.1117,8.6785\nLondon,UK,51.4667,-0.25", "output": "import json\n\ndef convert_csv_to_json(csv_string):\n    lines = csv_string.split(\"\\n\")\n    keys = lines[0].split(\",\")\n    out_list = [] \n    for line_num in range(1, len(lines)):\n        line = lines[line_num]\n        values = line.split(\",\")\n        item = {}\n        for key_num in range(0, len(keys)):\n            key = keys[key_num]\n            val = values[key_num]\n            item[key] = val\n        out_list.append(item)\n    return json.dumps(out_list)", "category": "Python"}, {"instruction": "Create a function that detects whether a given string is a palindrome.", "input": "string = \u2018level\u2019", "output": "def detect_palindrome(string): \n    reversed_string = string[::-1] \n    if (string == reversed_string): \n        return \"This string is a palindrome\" \n    else: \n        return \"This string is not a palindrome\"\n\nprint(detect_palindrome(string))", "category": "Python"}, {"instruction": "Given two strings s1 and s2, find the number of times the characters in s2 are present in s1.", "input": "s1 = \"Hello World\", s2 = \"o\"", "output": "s1 = \"Hello World\"\ns2 = \"o\"\n\ndef count_characters(s1, s2):\n    count = 0\n    for c in s1:\n        if c == s2:\n            count += 1\n    return count\n\nprint(count_characters(s1,s2))", "category": "Python"}, {"instruction": "Initialize a dictionary using the given keys.", "input": "keys=[\"key1\", \"key2\", \"key3\"]", "output": "keys = [\"key1\", \"key2\", \"key3\"]\n\ndictionary = {key: None for key in keys}\n\nprint(dictionary)", "category": "Python"}, {"instruction": "Write a Python code to construct a dictionary from the given input.", "input": "key_arr = [100, 200, 300]\nvalue_arr = [\"apple\", \"banana\", \"mango\"]", "output": "def dict_from_arrs(key_arr, value_arr):\n    return dict(zip(key_arr, value_arr))", "category": "Python"}, {"instruction": "Write a query to delete all the rows in the given table.", "input": "Table\nID | Name | Address\n18 | John | UK\n2 | Jack | US\n6 | Mary | UK\n14 | Chris | Canada", "output": "DELETE FROM Table;", "category": "Python"}, {"instruction": "Add an import statement to the code to import the regex module.", "input": "import sys", "output": "import sys\nimport re", "category": "Python"}, {"instruction": "Write a Python function to find the minimum element from the given array.", "input": "arr = [11, 9, 10, 14]", "output": "def find_min(arr):\n    return min(arr)", "category": "Python"}, {"instruction": "Select all the records in the given table where the ID is greater than 5.", "input": "Table\nID | Name | Address\n1 | John | UK\n2 | Jack | US\n5 | Mary | UK\n11 | Chris | Canada", "output": "SELECT * FROM Table WHERE ID > 5;", "category": "Python"}, {"instruction": "Transform and print the given list which includes negative and positive numbers.", "input": "nums = [-5, -2, 3, 7, 1]", "output": "nums = [-5, -2, 3, 7, 1]\n\ndef transform(nums):\n return [abs(num) for num in nums]\n \nprint(transform(nums))", "category": "Python"}, {"instruction": "Create an array of the squared values of all elements of the given array.", "input": "arr = [2, 3, 6, 8]", "output": "def square_arr(arr):\n    return [x**2 for x in arr]", "category": "Python"}, {"instruction": "Explain how a support vector machine works.", "input": "", "output": "A Support Vector Machine (SVM) is a supervised learning algorithm that can be used for binary classification, regression, or outlier detection. SVMs use a hyperplane to separate data points into two categories, each represented by a different class. The hyperplane divides data points into classes by minimizing the distance between them and maximizing the margin between the two classes, while creating a decision boundary. SVMs then use a kernel function to project the data into a higher dimensional space and maximize the distance between observations. This allows SVMs to identify non-linear patterns in data and find the optimal decision boundary. The support vectors are points closest to the decision boundary", "category": "Python"}, {"instruction": "Differentiate the methods of machine learning and explain the differences.", "input": "", "output": "There are three main methods of machine learning: supervised learning, unsupervised learning, and reinforcement learning. In supervised learning, the model is trained using labeled data, that is, data that has its output (or target) value given to the model. Unsupervised learning models learn by extracting patterns from unlabeled datasets without the need for a defined output value. Reinforcement learning models use reward-based learning to maximize a reward signal by taking actions in an environment. Supervised and unsupervised learning use input data and a set of instructions to learn from known data. Reinforcement learning, on the other hand, uses an environment with a reward system to teach an agent how to achieve a goal through a series of trial-and-error based decisions.", "category": "Python"}, {"instruction": "Write a regular expression that captures all the words starting with \"A\".", "input": "", "output": "^A\\w+", "category": "Python"}, {"instruction": "Create a function called `replace_words` which replaces all the words specified in; the given list of words with their corresponding synonyms.", "input": "string = \u201cThe quick brown fox jumps over the lazy dog\u201d\nwords = [[\u2018quick\u2019, \u2018fast\u2019], [\u2018lazy\u2019, \u2018sluggish\u2019]]", "output": "def replace_words(string, words): \n    for item in words: \n        string = string.replace(item[0], item[1])\n    return string\n\nreplaced_string = replace_words(string, words)\nprint(replaced_string)", "category": "Python"}, {"instruction": "Create a function named `binary_search` that implement a binary search algorithm.", "input": "list = [1, 3, 5, 7, 8, 9, 11]\ngoal = 5", "output": "def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\nresult = binary_search(list, goal)\nprint(result)", "category": "Python"}, {"instruction": "Assign 1 to all the elements of a 2D array that are divisible by 3.", "input": "arr = [[1,2,3],\n       [10,15,20],\n       [3, 8, 6]]", "output": "for row in range(len(arr)): \n    for col in range(len(arr[row])): \n        if arr[row][col] % 3 == 0: \n            arr[row][col] = 1\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to filter and print all lines that end in the given character.", "input": "string = \u2018Hello world\\nMy name is John\\nHello again\\nToday is Monday\u2019\ncharacter = \u2018n\u2019", "output": "lines = string.split(\"\\n\") \nfor line in lines: \n    if line.endswith(character): \n        print(line)", "category": "Python"}, {"instruction": "Write a function that takes an integer as an argument and prints its least significant digit.", "input": "", "output": "def print_lsc(x):\n   print(x%10)", "category": "Python"}, {"instruction": "Write a PowerShell script to print out the current date.", "input": "", "output": "Get-Date | Format-List", "category": "Python"}, {"instruction": "Give a function name in JavaScript that takes in two integer numbers as parameters and returns the remainder of the first parameter divided by the second.", "input": "", "output": "function remainder(a, b) {\n    return a % b;\n}", "category": "Python"}, {"instruction": "Write a code snippet in HTML to include an external style sheet in web page.", "input": "", "output": "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />", "category": "Python"}, {"instruction": "Design a linked list data structure.", "input": "", "output": "\"\"\"\nDesign a linked list data structure\n\"\"\"\n\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = ListNode(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n\n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next", "category": "Python"}, {"instruction": "Write a code to fetch the last 4 commits of a git repository.", "input": "user: 'rnyagah', repo: 'GPT-Evaluation'", "output": "\"\"\"\nWrite a code to fetch the last 4 commits of a git repository\n\"\"\"\n\nimport requests\n\nuser = 'rnyagah'\nrepo = 'GPT-Evaluation'\n\nurl = f'https://api.github.com/repos/{user}/{repo}/commits'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# get the last 4 commits\ncommits = data[:4]\n\nfor commit in commits:\n    print(f'commit {commit[\"sha\"]}: {commit[\"commit\"][\"message\"]}')", "category": "Python"}, {"instruction": "Write a code to create a 3x3 matrix with all elements 1.", "input": "", "output": "#import numpy library\nimport numpy as np\n\n#create a 3x3 matrix with all elements 1 \nx = np.ones((3,3))\nprint(x)", "category": "Python"}, {"instruction": "Create a text classifier using a Random Forest algorithm.", "input": "[['Ready Player One', 'Adventure'],\n['IT', 'Drama'],\n['Halloween', 'Horror'],\n['Pirates of the Caribbean', 'Adventure']]", "output": "\"\"\"\nCreate a text classifier using a Random Forest algorithm\n\"\"\"\n \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create the dataframe from the given input\ndf = pd.DataFrame(columns=['text', 'category'], data=input)\n\n# define the features and labels\nX = df['text']\ny = df['category']\n\n# create and train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel = model.fit(X, y)", "category": "Python"}, {"instruction": "Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted output", "input": "Student Name: John Smith\nAge: 17\nCourse: Computer Science", "output": "class Student: \n    def __init__(self, name, age, course): \n        self.name = name \n        self.age = age\n        self.course = course\n\n    def get_info(self): \n        return f\"Name: {self.name}, Age: {self.age}, Course: {self.course}\"\n\nstudent = Student(\"John Smith\", 17, \"Computer Science\")\n\nprint(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science", "category": "Python"}, {"instruction": "Modify a given code to sort a two-dimensional array (matrix) using bubble sort.", "input": "Matrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]]", "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)", "category": "Python"}, {"instruction": "Write a code to implement insertion sort on a given list.", "input": "List: [4, 3, 6, 1, 5]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Create a code that removes all duplicate elements in a given array.", "input": "Array: [5, 10, 5, 7, 10]", "output": "def unique_elements(arr): \n    new_arr = [] \n    for i in arr:\n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr \n  \narr = [5, 10, 5, 7, 10] \n\nprint(unique_elements(arr)) # [5, 10, 7]", "category": "Python"}, {"instruction": "Write a code to get the IP address of a system.", "input": "", "output": "import socket \n  \nhostname = socket.gethostname() \nIPAddr = socket.gethostbyname(hostname) \n  \nprint(\"The IP address of the system is:\" + IPAddr)", "category": "Python"}, {"instruction": "Write a code to establish a connection between your server and a remote database.", "input": "Server host: 127.0.0.1\nDatabase Name: my_db\nUsername: root\nPassword: pw123", "output": "\"\"\"\nEstablish a connection between your server and a remote database\n\"\"\"\n\nimport pymysql\n\ndb = pymysql.connect(host='127.0.0.1', user='root', \n                      password='pw123', db='my_db')", "category": "Python"}, {"instruction": "Write a code to retrieve tweets from a specific Twitter account by using their API.", "input": "Twitter account: \"@twitter\"", "output": "\"\"\"\nRetrieve tweets from a specific Twitter account\n\"\"\"\n\nimport tweepy\n\n#Enter the respective information \nconsumer_key = 'XXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXX'\naccess_token = 'XXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXX'\n\n#Authentication using the given keys \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n\n#getting the API  \napi = tweepy.API(auth) \n\n#fetch tweets related to \"@twitter\"\ntweets = api.user_timeline(\"@twitter\") \n\n#display first five tweets \nfor tweet in tweets[:5]: \n    print(tweet.text)", "category": "Python"}, {"instruction": "Modify the following code to generate the Fibonacci sequence up to the nth term", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Edit the following code to calculate the standard deviation of a given list", "input": "", "output": "def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev", "category": "Python"}, {"instruction": "Modify the following given program to print all prime number between 1 and n", "input": "", "output": "def check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)", "category": "Python"}, {"instruction": "Write a Python program to replace the last element in a list with another given element.", "input": "lst = [1, 2, 3, 4]\nelement = 5", "output": "def replace_last(lst, element):\n    lst[-1] = element\n    return lst", "category": "Python"}, {"instruction": "Create a script to remove HTML tags from a web page.", "input": "<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <p>Welcome to example.com</p>\n  </body>\n</html>", "output": "\"\"\"\nCreate a script to remove HTML tags from a web page\n\"\"\"\n\nimport re\n\nhtml_string = input\n\n# remove all html tags using regex\nv = re.compile(r'<.*?>')\ncleaned_string = re.sub(v, '', html_string)\n\nprint(cleaned_string)", "category": "Python"}, {"instruction": "Create a FOR loop to print out the odd numbers between a given range.", "input": "min = 1, max = 10", "output": "\"\"\"\nCreate a FOR loop to print out the odd numbers between a given range\n\"\"\"\n\n# define the range\nmin = input[0]\nmax = input[1]\n\n# iterate through the range\nfor i in range(min, max+1):\n    # check for odd numbers\n    if i % 2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Create a class 'Employee' with the following fields: name, address, and salary.", "input": "", "output": "class Employee:\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary", "category": "Python"}, {"instruction": "What does the `filter()` method do in Python?", "input": "", "output": "The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items\nfor which the function evaluates to True.\nIt is typically used to filter out elements from a list based on a certain condition.", "category": "Python"}, {"instruction": "Create a list of 5 integers and print out their product.", "input": "", "output": "\"\"\"\nCreate a list of 5 integers and print out their product\n\"\"\"\n\nlist_of_ints = [1, 2, 3, 4, 5]\n\nproduct = 1\nfor i in list_of_ints:\n    product *= i\nprint(product)", "category": "Python"}, {"instruction": "Create a function that takes a string and a keyword, then delete all the occurrences of the keyword in the given string.", "input": "str = \"I am going to the market to buy apples\"\nkeyword = \"apples\"", "output": "def delete_occurrences(string, keyword):\n    new_str = string.replace(keyword, '')\n    return new_str\n\nprint(delete_occurrences(str, keyword))  # prints \"I am going to the market to buy\"", "category": "Python"}, {"instruction": "Edit the following code to insert a new item at the end of a given Python list.", "input": "items = [1, 2, 3]\nnew_item = 4", "output": "items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a Python code using list comprehension to get the power of each element in a list.", "input": "list_num = [1, 2, 3, 4, 5]", "output": "power_list = [num**2 for num in list_num]\nprint(power_list)  # prints [1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Generate a random string of length 10 that consists of characters 'a', 'b' and 'c'.", "input": "", "output": "import random\n\nrandom_string = ''.join(random.choices(['a', 'b', 'c'], k=10))\nprint(random_string)  # prints something like ccaacccaac", "category": "Python"}, {"instruction": "Write a code to input an array and find the maximum and minimum element in it.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1", "category": "Python"}, {"instruction": "Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.", "input": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}", "output": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25", "category": "Python"}, {"instruction": "Design a code to check if a given list is ordered in an increasing order.", "input": "lst = [1, 2, 3, 5, 4]", "output": "def is_increasing(lst):\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Read the following code and identify all the objects present in it.", "input": "class Person:\n    name = 'John'\n    age = 25", "output": "In the given code, the object is \u2018Person\u2019, and the two data attributes of the object are \u2018name\u2019 and \u2018age\u2019.", "category": "Python"}, {"instruction": "Code an while loop statement to print a string with the value of the variable num.", "input": "num = 10", "output": "while num > 0:\n    print(\"The value of num is \" + str(num))\n    num -= 1", "category": "Python"}, {"instruction": "Create an array with the elements 1, 2, 3, and 4 and name it 'numbers'.", "input": "", "output": "numbers = [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a code to find the maximum of 3 arguments.", "input": "", "output": "def find_max(a, b, c):\n    max_value = a\n    if b > max_value:\n        max_value = b\n    if c > max_value:\n        max_value = c\n    return max_value\n\nprint(find_max(1, 2, 3))  # Output: 3", "category": "Python"}, {"instruction": "Create a dictionary with the name 'salary' and assign values to the employee names.", "input": "Employee Names: \"John\", \"Jane\", \"Tina\".", "output": "salary = {\n    \"John\": 0,\n    \"Jane\": 0,\n    \"Tina\": 0\n}", "category": "Python"}, {"instruction": "Write a code to remove elements from a list using the `remove()` method.", "input": "list = [1, 2, 3, 4]", "output": "list = [1, 2, 3, 4]\nlist.remove(2)\nlist.remove(3)\n\n# list is now [1, 4]", "category": "Python"}, {"instruction": "Create a subclass 'Manager' of Employee and add the field 'experience'.", "input": "", "output": "class Manager(Employee):\n    def __init__(self, name, address, salary, experience):\n        super().__init__(name, address, salary)\n        self.experience = experience", "category": "Python"}, {"instruction": "Create a tuple `numbers` with the elements 1, 2, 3 and 4.", "input": "", "output": "numbers = (1, 2, 3, 4)", "category": "Python"}, {"instruction": "Create a function that takes two numbers as an argument and compares them to find the highest number.", "input": "x = 5\ny = 8", "output": "def highest_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nhighest_number(x, y)   # returns 8", "category": "Python"}, {"instruction": "Develop a C++ code to print the numbers 1 to 10 in descending order.", "input": "", "output": "for(int i=10; i>0; i--) \n    cout << i << \" \";", "category": "Python"}, {"instruction": "Design a program in Python to remove all even elements from a given list.", "input": "lst = [2, 4, 5, 6, 8, 10]", "output": "def remove_even(lst):\n    evens = []\n    for num in lst:\n        if num % 2 != 0:\n            evens.append(num)\n    return evens", "category": "Python"}, {"instruction": "Given two lists, write a Python program to print all common elements in them.", "input": "list1 = [10, 20, 30, 40] \nlist2 = [30, 40, 50, 60]", "output": "def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    return common", "category": "Python"}, {"instruction": "Create an algorithm to implement a stack using a single queue.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, item):\n        self.queue.append(item)\n        # Reverse the queue to implement a stack\n        self.queue.reverse()\n\n    def pop(self):\n        if self.queue:\n            # Reverse the queue to implement a stack\n            self.queue.reverse()\n            return self.queue.pop()\n        return None", "category": "Python"}, {"instruction": "Create a HTML form that takes three inputs and print them out when the submit button is clicked.", "input": "", "output": "<html>\n    <head>\n        <title>Input Form</title>\n    </head>\n    <body>\n        <h1>Input Form</h1>\n        <form action=\"#\">\n        <p>First name: <input type=\"text\" name=\"firstname\"></p>\n        <p>Last name: <input type=\"text\" name=\"lastname\"></p>\n        <p>Email: <input type=\"text\" name=\"email\"></p>\n        <button type=\"submit\" onclick=\"printInputs()\">Submit</button>\n        </form>\n\n        <script>\n            function printInputs(){\n                let firstName = document.querySelector(\"input[name=firstname]\").value;\n                let lastName = document.querySelector(\"input[name=lastname]\").value;\n                let email = document.querySelector(\"input[name=email]\").value;\n\n                console.log(firstName, lastName, email);\n            }\n        </script>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an algorithm that sorts a given list of numbers.", "input": "[1, 5, -3, 0, 8]", "output": "def bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] > list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\n\nbubble_sort([1,5,-3,0,8])", "category": "Python"}, {"instruction": "Write a Node.js program which fetches the top 10 trending news from a given website.", "input": "", "output": "const rp = require('request-promise');\nconst cheerio = require('cheerio');\n\nasync function getTrendingContent(){\n    const options = {\n        uri: '<url>',\n    };\n\n    let trendingContent = [];\n\n    const htmlResult = await rp(options);\n    const $ = await cheerio.load(htmlResult);\n    \n    const allTitles = $('h2.title');\n\n    allTitles.each((index, element) => {\n        if(index < 10){\n            trendingContent.push($(element).text());\n        }\n    });\n\n    return trendingContent;\n}\n\ngetTrendingContent().then(content => console.log(content));", "category": "Python"}, {"instruction": "Create a React app that loads data from a given REST API endpoint.", "input": "", "output": "import React from 'react';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n        };\n    }\n\n    async componentDidMount() {\n        const res = await Axios.get(<api_url>)\n        this.setState({data: res.data});\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.data.map(item => <p>{item.name}</p>)}\n            </div>\n        )\n    }\n}\n\nexport default App;", "category": "Python"}, {"instruction": "You need to develop a function which checks if a given string is palindrome or not.", "input": "String: \"redder\"", "output": "def is_palindrome(input_string): \n    # Convert string to lower case to ignore capitalization.\n    input_string = input_string.lower() \n    # Reverse input string \n    rev_string = reversed(input_string) \n  \n    # Check if strings are equal or not \n    if (list(input_string) == list(rev_string)): \n        return True\n    else: \n        return False\n  \nprint(is_palindrome(\"redder\"))", "category": "Python"}, {"instruction": "Given two strings, develop a function to calculate edit distance between them.", "input": "Strings: \"kitten\" and \"sitting\"", "output": "def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")", "category": "Python"}, {"instruction": "Write the Big O time complexity of the given algorithm.", "input": "Algorithm: Finding the value at a given index of an unordered array.", "output": "O(n).", "category": "Python"}, {"instruction": "Develop a function to encode a text string in a ROT13 manner.", "input": "String: \"Hello World\"", "output": "def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))", "category": "Python"}, {"instruction": "You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.", "input": "Strings: \"computer\" and \"computer\"", "output": "def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\nprint (isAnagram(\"computer\", \"computer\"))", "category": "Python"}, {"instruction": "What is an event in JavaScript?", "input": "", "output": "In JavaScript, an event is an action that a user performs that causes a change in the state of the program. Events can be generated by a user (e.g. pressing a button, clicking a link), by the browser (e.g. loading a page, scrolling, resizing the window) or by the system (e.g. device orientation changes, network connection changes). Events can trigger handlers (functions in JavaScript) that respond to the event with the appropriate action.", "category": "Python"}, {"instruction": "List the types of inheritance supported in Java.", "input": "", "output": "In Java, there are four types of inheritance supported: single inheritance, multiple inheritance, hierarchical inheritance, and socioeconomic inheritance. Single inheritance means a class extends only one class. Multiple inheritance is when a subclass extends multiple superclasses. Hierarchical inheritance is when a class can be extended by multiple subclasses. Lastly, socioeconomic inheritance is when a subclass can extend superclasses and use their methods, variables, and properties.", "category": "Python"}, {"instruction": "Compile a C program that calculates the area of a rectangle from the given values of length and width.", "input": "Length = 10\nWidth = 15", "output": "#include <stdio.h>\n \nint main()\n{\n    int length = 10;\n    int width = 15;\n    int area;\n    area = length * width;\n \n    printf(\"The area is %d.\", area);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Describe the different thread states in Java programming.", "input": "", "output": "In Java, threads can be in one of the following states: NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING or TERMINATED. The NEW state means that the thread has been created but not yet started. RUNNABLE means that the thread is running. BLOCKED means that the thread is waiting to acquire a lock. WAITING and TIMED_WAITING means that the thread is waiting for another thread to perform a particular action. Lastly, TERMINATED is the state when the thread has finished execution.", "category": "Python"}, {"instruction": "Create a JavaScript program to make a TCP connection to the server.", "input": "", "output": "const net = require('net');\n\nconst client = new net.Socket();\nclient.connect(5000, '127.0.0.1', () => {\n console.log('Connected');\n});\n\nclient.on('data', (data) => {\n console.log('Received: ' + data);\n});\n\nclient.on('close', () => {\n console.log('Connection closed');\n});", "category": "Python"}, {"instruction": "Formulate a SQL query to determine the name of the product with the highest price.", "input": "", "output": "SELECT product_name \nFROM product_table \nWHERE price = (SELECT MAX(price) FROM product_table);", "category": "Python"}, {"instruction": "Create a Java program for finding the largest number among three integers.", "input": "", "output": "public class LargestNumber \n{\n    public static int getLargestNumber(int num1, int num2, int num3)\n    {\n        int greater;\n        if( num1 > num2 && num1 > num3)\n         greater = num1;\n        \n        else if( num2 > num1 && num2 > num3)\n         greater = num2;\n         \n        else\n         greater = num3;\n         \n        return greater;\n    }\n \n    public static void main(String[] args) \n    {\n        int num1 = 10, num2 = 14, num3 = 12;\n        System.out.println(\"Largest number among \" + num1 + \", \" + num2 + \" and \" + num3 + \" is \" + getLargestNumber(num1, num2, num3));\n    }\n}", "category": "Python"}, {"instruction": "Write a C++ program to rotate an array by 'k' positions.", "input": "int arr[] = {1, 2, 3, 4, 5};\nint k = 2;", "output": "#include<iostream> \nusing namespace std; \n  \nvoid reverseArray(int arr[], int start, int end) \n{ \n    while (start < end) \n    { \n        int temp = arr[start]; \n        arr[start] = arr[end]; \n        arr[end] = temp; \n        start++; \n        end--; \n    } \n} \n  \nvoid leftRotate(int arr[], int d, int size) \n{ \n    reverseArray(arr, 0, d-1); \n    reverseArray(arr, d, size-1); \n    reverseArray(arr, 0, size-1); \n} \n  \nvoid printArray(int arr[], int size) \n{ \n    for (int i=0; i < size; i++) \n        cout << arr[i] << \" \"; \n} \n  \nint main() \n{ \n    int arr[] = {1, 2, 3, 4, 5}; \n    int size = sizeof(arr) / sizeof(arr[0]); \n    int k = 2; \n  \n    leftRotate(arr, k, size); \n    printArray(arr, size); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a Python program to insert a given string at a specific position within another given string.", "input": "string1 = 'Python is fun' \nstring2 = 'awesome '\nposition = 7", "output": "def insert_string(string1, string2, pos):\n    return string1[:pos] + string2 + string1[pos:]", "category": "Python"}, {"instruction": "Convert a string of characters to uppercase in JavaScript.", "input": "String: hello", "output": "let upperCaseString = 'hello'.toUpperCase();", "category": "Python"}, {"instruction": "Translate the sentence \"I'm having dinner at 8pm\" into French.", "input": "", "output": "Je prends mon d\u00eener \u00e0 20h.", "category": "Python"}, {"instruction": "Gather data from the web page and write a C# program to extract the page title.", "input": "", "output": "using System.Net;\nusing System.IO;\n\npublic static string GetPageTitle(string url)\n{\n  HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n  using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())\n  {\n    using (StreamReader reader = new StreamReader(response.GetResponseStream()))\n    {\n      string html = reader.ReadToEnd();\n\n      int startIndex = html.IndexOf(\"<title>\") + \"<title>\".Length;\n      int endIndex = html.IndexOf(\"</title>\", startIndex);\n\n      string title = html.Substring(startIndex, endIndex - startIndex);\n\n      return title;\n    }\n  }\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to do the following: assign a value of \"true\" to a variable if the number is odd, and assign the value of \"false\" if the number is even.", "input": "Number: 6", "output": "function assignOddOrEven(num){\n  let result;\n  if(num % 2 === 0) {\n    result = false;\n  } else {\n    result = true;\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "How can a developer create a button with the text \"Submit\" in HTML?", "input": "", "output": "<button>Submit</button>", "category": "Python"}, {"instruction": "Create a CSS selector for all paragraph tags, which will set the font size to 14px.", "input": "", "output": "p { \n  font-size: 14px;\n}", "category": "Python"}, {"instruction": "Design a program in Python which takes a string as input and returns a list of words from the string.", "input": "string1 = 'Python Programming is Fun!'", "output": "def get_words(string1):\n    words = string1.split()\n    return words", "category": "Python"}, {"instruction": "Create a CSS class named \"card\" to create a card with border-radius = 10 px..", "input": "", "output": ".card {\n  border-radius: 10px;\n}", "category": "Python"}, {"instruction": "Suppose you have a list of numbers and you want to add all the numbers together. Write a loop to do so.", "input": "[1, 2, 3, 4, 5]", "output": "sum = 0\nnums = [1, 2, 3, 4, 5]\nfor num in nums:\n    sum += num\n\nprint(sum)\n\n# Output\n15", "category": "Python"}, {"instruction": "Physicists often use the constant, Planck's constant, to measure the frequency of light waves. What is the value of Planck's constant?", "input": "", "output": "Planck's constant (denoted by h) is a physical constant that has a value of 6.62607015\u00d710-34 kg m2/s. It is the fundamental physical constant that is used to describe the size of quantum effects. It is named after physicist Max Planck, who first proposed it in 1900.", "category": "Python"}, {"instruction": "Given the following nested loop structure, write code to print all elements in the array.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in arr:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n\n# Output\n# 1 2 3\n# 4 5 6\n# 7 8 9", "category": "Python"}, {"instruction": "Explain the purpose of the np.random.seed() function.", "input": "", "output": "The np.random.seed() function sets the random seed, or starting point, for generating random numbers. This allows users to reproduce the same random numbers each time they run the code, making apps and experiments easier to debug. The seed can be set to an integer value, a list of integers, or None. If the seed is set to None, the system time is used to set the starting point.", "category": "Python"}, {"instruction": "Write an R script to create a histogram of a given array of numeric values.", "input": "", "output": "# Load libraries\nlibrary(ggplot2)\n\n# Define the data\ndata <- c(1, 4, 6, 8, 12, 16, 20)\n\n# Create the histogram\nggplot(data.frame(x=data), aes(x)) + geom_histogram(bins = 5, fill = \"#0072B2\", color = \"black\")", "category": "Python"}, {"instruction": "Write a PHP script to connect to a MySQL database and insert a row in the table with values in given fields.", "input": "Table name: users\nFields: id, name, email", "output": "<?php\n// Connect to the database\n$db = new mysqli('localhost', 'user', 'password', 'dbname');\n\n// Check connection\nif($db->connect_errno > 0){\n    die('Unable to connect to database [' . $db->connect_error . ']');\n}\n\n// Prepare the statement\n$sql = \"INSERT INTO users (id, name, email)\n        VALUES (?, ?, ?)\";\n$stmt = $db->prepare($sql);\n\n// Execute the statement\n$stmt->bind_param('isi', $id, $name, $email);\n$stmt->execute();\n\n$stmt->close();\n$db->close();\n?>", "category": "Python"}, {"instruction": "Write a Python code snippet to check if an integer is between 5 and 10 (including both).", "input": "x = 8", "output": "if 5 <= x <= 10:\n    print('The integer is between 5 and 10.')\nelse:\n    print('The integer is not between 5 and 10.')", "category": "Python"}, {"instruction": "We have a list of numbers, what is the correct syntax for finding the sum of all the numbers?", "input": "[1, 2, 3, 4, 5]", "output": "total = 0\nnums = [1, 2, 3, 4, 5]\nfor num in nums:\n    total += num\n    \nprint(total)\n\n# Output\n15", "category": "Python"}, {"instruction": "Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.", "input": "arr = [\"apple\", \"banana\", \"cherry\"]", "output": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))", "category": "Python"}, {"instruction": "Write a JavaScript code that implements a binary search algorithm.", "input": "arr = [1, 3, 5, 7, 9, 11]\ntarget = 11", "output": "function binarySearch(arr, target) {\n  let start = 0;\n  let end = arr.length - 1;\n  let middle = Math.floor((start + end) / 2);\n\n  while (arr[middle] !== target && start <= end) {\n    if (target < arr[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n    middle = Math.floor((start + end) / 2);\n  }\n  if (arr[middle] === target) {\n    return middle;\n  }\n\n  return -1;\n}\n\narr = [1, 3, 5, 7, 9, 11];\ntarget = 11;\n\nconsole.log(binarySearch(arr, target));", "category": "Python"}, {"instruction": "Write a Python program that finds the longest common subsequence of two strings.", "input": "str1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"", "output": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))", "category": "Python"}, {"instruction": "Create a Dictionary object in JavaScript and add three key-value pairs.", "input": "", "output": "let dictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n};", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of all items in a given dictionary with integer values.", "input": "dict = {'a': 5, 'b': 10, 'c': 3}", "output": "def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18", "category": "Python"}, {"instruction": "Write a CSS code snippet to make the <h1> text bold with font size of 24px.", "input": "", "output": "h1 {\n font-weight: bold;\n font-size: 24px;\n}", "category": "Python"}, {"instruction": "Find the square root of 961 using JavaScript.", "input": "", "output": "Math.sqrt(961); //Output is: 31", "category": "Python"}, {"instruction": "How do you loop over a JavaScript array?", "input": "", "output": "for (let i = 0; i < array.length; i++) {\n    let element = array[i];\n    //code to execute for each element\n}", "category": "Python"}, {"instruction": "Change the font size of the HTML element <p> to \"14px\".", "input": "", "output": "document.querySelector('p').style.fontSize = \"14px\";", "category": "Python"}, {"instruction": "Write a code that computes the sum and difference of two numbers in JavaScript.", "input": "var x = 10;\nvar y = 5;", "output": "var x = 10;\nvar y = 5;\n\nvar sum = x + y;\nvar diff = x - y;\n\nconsole.log(\"The sum of \" + x + \" and \" + y + \" is: \" + sum);\nconsole.log(\"The difference of \" + x + \" and \" + y + \" is: \" + diff);", "category": "Python"}, {"instruction": "Given an array of strings, write a code snippet in Python that finds the longest string and prints its length.", "input": "arr = [\"Dog\",\"Cat\",\"Mouse\"]", "output": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))", "category": "Python"}, {"instruction": "Write a C# program to take a given number and print it in words.", "input": "int n = 1234", "output": "int n = 1234;\nString[] ones = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\nString[] teens = {\"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\nString[] tens = {\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\nint n1 = n % 10;\nint n2 = n / 10;\nint n3 = n2 % 10;\nint n4 = n2 / 10;\nint n5 = n4 % 10;\nint n6 = n4 / 10;\n\nString words = \"\";\nif (n6 > 0)\n    words += ones[n6] + \" thousand \";\nif (n5 > 0)\n    words += ones[n5] + \" hundred \";\nif (n4 > 1)\n    words += tens[n3] + \" \";\nif (n3 == 1)\n    words += teens[n1 - 1] + \" \";\nif (n2 > 0 && n3 != 1)\n    words += ones[n1] + \" \";\n\nSystem.out.println(words);", "category": "Python"}, {"instruction": "Write a regular expression that finds all occurrences of the word \"computer\" in the following text.", "input": "\"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.", "output": "import re\n\npattern = re.compile(r'\\bcomputer\\b')\n\ntext = \"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.\"\n\nmatches = pattern.finditer(text)\n\nfor match in matches:\n    print(match)", "category": "Python"}, {"instruction": "Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order.", "input": "n=5", "output": "n = 5\nlst = list(range(n, 0, -1))\nprint(lst)", "category": "Python"}, {"instruction": "How could you modify the following JavaScript code to generate a random number between 0 and 10?", "input": "var randomNum = Math.random()", "output": "var randomNum = Math.floor(Math.random() * (11 - 0)) + 0;", "category": "Python"}, {"instruction": "Modify the following JavaScript code to make it print the result on the console.", "input": "var num1 = 10;\nvar num2 = 20;", "output": "var num1 = 10;\nvar num2 = 20;\nconsole.log(num1 + num2);", "category": "Python"}, {"instruction": "Write a Python script that extracts the name and age of all customers from the customer table in a database.", "input": "", "output": "import MySQLdb \n\n# connect to database\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"password\", db=\"customers\")  \n\n# create a cursor \ncursor = db.cursor()\n\n# execute SQL query \ncursor.execute(\"SELECT name, age FROM customers\")  \n\n# fetch the rows \nrows = cursor.fetchall() \n\n# traverse over the results \nfor row in rows: \n    name = row[0] \n    age = row[1] \n    print(\"Name = {}, Age = {}\".format(name, age))", "category": "Python"}, {"instruction": "Write a TensorFlow program to construct a basic neural network", "input": "", "output": "import tensorflow as tf\n\n# Set up the layers for the model\nmodel = tf.keras.models.Sequential([\n    # Set up the first layer\n    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),\n    # Set up the second layer\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    # Set up the output layer\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\n\n# Compile the model\nmodel.compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = ['accuracy']\n)", "category": "Python"}, {"instruction": "Sort a JavaScript array of objects by a given property.", "input": "arr = [\n {name:\"Harry\", age:25}, \n {name:\"John\", age:30},\n {name:\"Jane\", age:22}\n]", "output": "arr.sort((a, b) => (a.age > b.age) ? 1 : -1 ); //Output is: [{name:\"Jane\", age:22}, {name:\"Harry\", age:25}, {name:\"John\", age:30}]", "category": "Python"}, {"instruction": "Construct a for-loop to iterate through a given list of strings and print each member one line at a time.", "input": "word_list = [\"hello\", \"world\", \"!\"]", "output": "for word in word_list:\n print(word)", "category": "Python"}, {"instruction": "Create a class in Java that stores a student's ID and name.", "input": "", "output": "public class Student { \n    int id; \n    String name; \n  \n    Student(int id, String name) { \n        this.id = id; \n        this.name = name; \n    } \n}", "category": "Python"}, {"instruction": "Write a Python script to calculate the total and the average of an array of numbers.", "input": "arr = [56, 23, 89, 17, 13, 10]", "output": "total=sum(arr)\navg=sum(arr)/len(arr)\nprint(\"Total of the array elements is: \"+str(total))\nprint(\"Average of the array elements is: \"+str(avg))", "category": "Python"}, {"instruction": "In Java, how do you make a method that takes a number and displays its square?", "input": "", "output": "public static void displaySquare(int num){\n  System.out.println(num*num);\n}", "category": "Python"}, {"instruction": "How would you limit the output of a SQL query to the first 10 rows?", "input": "", "output": "SELECT * FROM [table_name] LIMIT 10;", "category": "Python"}, {"instruction": "Construct a MySQL query to create a new table with 3 columns.", "input": "tableName = \u2018products\u2019\ncolumns = ['id', 'name', 'price']", "output": "CREATE TABLE products (id INTEGER, name VARCHAR(255), price DECIMAL);", "category": "Python"}, {"instruction": "Access the third element from a list.", "input": "my_list = [1,2,3,4,5]", "output": "element = my_list[2]", "category": "Python"}, {"instruction": "Implement a function that creates a dictionary from two lists which contain the keys and values, respectively.", "input": "keys = [\"name\", \"age\", \"city\"]\nvalues = [\"John\", 30, \"New York\"]", "output": "def create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict", "category": "Python"}, {"instruction": "Implement a function that swaps the places of two elements in a list.", "input": "my_list = [1,2,3,4,5]", "output": "def swap(my_list, index_1, index_2):\n    # Store the two elements \n    temp = my_list[index_1]\n    my_list[index_1] = my_list[index_2]\n    my_list[index_2] = temp", "category": "Python"}, {"instruction": "Compare two values to check if the first one is greater than the second one, and if so, print \"A is greater than B\".", "input": "A = 5\nB = 3", "output": "if A > B:\n    print(\"A is greater than B\")", "category": "Python"}, {"instruction": "Transform an array of objects using JavaScript", "input": "Array: [{name: \"John\", age: 21}, {name: \"Mary\", age: 18}, {name: \"Steve\", age: 24}]", "output": "const result = arr.map(obj => (\n  {\n    name: obj.name, \n    age: obj.age * 2\n  }\n));", "category": "Python"}, {"instruction": "Using the given variables, create an if-else statement that prints \"You are an adult\" when age is greater than or equal to 18, otherwise print \"You are a minor\".", "input": "age = 18", "output": "if age >= 18:\n    print(\"You are an adult\")\nelse:\n    print(\"You are a minor\")", "category": "Python"}, {"instruction": "Use a regex expression to find all the words that begin with a \"t\" and end with an \"e\" in the following sentence.", "input": "sentence = \"The dark night was quiet and still\"", "output": "import re\n\nsentence = \"The dark night was quiet and still\"\n\npattern = r\"\\bT\\w*e\\b\"\n\n# Find all the words that begin with a \"t\" and end with an \"e\"\nmatches = re.findall(pattern, sentence)\nprint(matches)\n\n# Output: ['The', 'night', 'quiet', 'still']", "category": "Python"}, {"instruction": "How can you print the Hello World message using the Tkinter module in Python?", "input": "", "output": "\"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()", "category": "Python"}, {"instruction": "What is the result of performing arithmetic subtraction between two numbers, 5 and 2?", "input": "", "output": "The result of performing arithmetic subtraction between two numbers, 5 and 2 is 3. Since subtraction is the inverse of addition, to get the difference between two numbers you subtract the number being subtracted from the number that is being subtracted from. Thus, 5 - 2 = 3.", "category": "Python"}, {"instruction": "Generate a C++ function to print the Fibonacci series", "input": "", "output": "#include <iostream> \nusing namespace std; \n\nvoid Fibonacci(int n) \n{ \n    int f1 = 0, f2 = 1, i; \n  \n    if (n == 0) \n        return; \n  \n    for (i = 1; i <= n; i++) \n    { \n        cout << f2 << \" \"; \n        int next = f1 + f2; \n        f1 = f2; \n        f2 = next; \n    } \n} \n  \nint main() \n{ \n    int n = 10; \n    Fibonacci(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a Python function to sort a list of dictionaries in ascending order of \"count\".", "input": "data = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},\n]", "output": "def sort_dict_list(data):\n    \"\"\"Sort a list of dictionaries in ascending order of 'count'\n   \n    Args:\n        data (list): A list of dictionaries\n   \n    Returns:\n        list: A sorted list of dictionaries\n    \"\"\"\n \n    sorted_data = sorted(data, key=lambda x: x['count'])\n    return sorted_data\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'Alice', 'count': 5}, \n        {'name': 'Bob', 'count': 3}, \n        {'name': 'John', 'count': 7},\n        {'name': 'David', 'count': 4},\n    ]\n    sorted_data = sort_dict_list(data)\n    print(sorted_data)", "category": "Python"}, {"instruction": "Construct an if-statement to check whether the given element is present in an array or not.", "input": "arr = [4, 5, 6]\nelement = 5", "output": "if element in arr:\n    print(\"Element is present in array\")", "category": "Python"}, {"instruction": "Create a Node.js function to validate an email with a given regex.", "input": "", "output": "function validateEmail(email) {\n    var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return re.test(email); \n}", "category": "Python"}, {"instruction": "Using the JavaScript Math object, calculate the sine of an angle.", "input": "angle = 45", "output": "\"\"\"Using the Math object, calculate the sine of an angle\"\"\"\n\nangle = 45\n\nsine = Math.sin(angle * Math.PI / 180);\nconsole.log(sine);\n\n# Output: 0.7071067811865476", "category": "Python"}, {"instruction": "Construct an XPath query to select all <h2> tags from a web page", "input": "", "output": "//h2", "category": "Python"}, {"instruction": "Write a SQL query to list out the product names and prices from a database", "input": "", "output": "SELECT name, price FROM products;", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and combines them together into one string", "input": "[\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]", "output": "def combineStrings(strings):\n    combined_string = \"\"\n    for string in strings:\n        combined_string += string + \" \"\n    return combined_string\n\ncombined_string = combineStrings([\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"])", "category": "Python"}, {"instruction": "Create a HTML form with name, email address and a submit button.", "input": "", "output": "<form>\n  Name: <input type=\"text\" name=\"name\"><br>\n  Email: <input type=\"email\" name=\"email\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a regular expression to match dates in the MM/DD/YYYY format.", "input": "", "output": "import re\n\npattern = re.compile(r'^\\d{2}\\/\\d{2}\\/\\d{4}$')", "category": "Python"}, {"instruction": "Write a SQL query to count the number of distinct values for a specific column in a table.", "input": "Table Name: myTable\nColumn Name: myColumn", "output": "SELECT COUNT(DISTINCT myColumn)\nFROM myTable", "category": "Python"}, {"instruction": "Create an R code to convert yes/no questions to binary input.", "input": "Do you have a pet?", "output": "question <- \"Do you have a pet?\"\n\nbinary_input <- ifelse(question == \"Do you have a pet?\", 1, 0)\n\nprint(binary_input) # prints 1", "category": "Python"}, {"instruction": "Write a SQL query to update the record of the column \"Gender\" to 'Male' where the column \"Name\" is 'John'.", "input": "", "output": "UPDATE table_name\nSET Gender = 'Male'\nWHERE Name = 'John';", "category": "Python"}, {"instruction": "Given a valid XML string, write an XPath query to retrieve all the elements", "input": "<?xml version=\"1.0\"?>\n<root>\n  <child name=\"child1\" />\n  <child name=\"child2\">\n    <subchild>subchild</subchild>\n  </child>\n  <child name=\"child3\" />\n</root>", "output": "// XPath query to retrieve all elements from the given XML string \n/root/child", "category": "Python"}, {"instruction": "Write a Ruby code to convert a double-linked list to a single-linked list.", "input": "", "output": "def double_to_single(list)\n    current_node = list.head\n    while current_node\n        current_node.next = current_node.other\n        current_node.other = nil\n        current_node = current_node.next\n    end\nend", "category": "Python"}, {"instruction": "Replace each letter in the following text with its corresponding number:", "input": "Hello world!", "output": "83055109 16971134!", "category": "Python"}, {"instruction": "Generate three different sorting algorithms for a list of integers.", "input": "", "output": "# Bubble Sort algorithm\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\n# Insertion Sort algorithm\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n\n# Heap Sort algorithm\ndef heap_sort(lst):\n    # build max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n   \n    # extract elements\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\n\ndef heapify(lst, n, i):\n    # Find largest among root, left child and right child\n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2 \n  \n    if l < n and lst[i] < lst[l]:\n        largest = l\n  \n    if r < n and lst[largest] < lst[r]:\n        largest = r\n  \n    # change root, if needed\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)", "category": "Python"}, {"instruction": "Write a code block to return a random value from a given list", "input": "[1, 4, 8, 12]", "output": "#Return a random value from a given list\nimport random\n\ndef get_random_value(lst):\n    n = random.randint(0, len(lst) - 1)\n    return lst[n]\n\ntest_list = [1, 4, 8, 12]\nrandom_value = get_random_value(test_list)\nprint('Random value:', random_value)", "category": "Python"}, {"instruction": "Create a method to calculate the amount of tax to be paid based on the inputs of income and country.", "input": "income = 20000, country = Ireland", "output": "#Calculate the applicable tax amount \ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)", "category": "Python"}, {"instruction": "Write a code to find control characters such as carriage returns inside a given string", "input": "'This is a string\\r\\nwith some control characters'", "output": "#Function to find control characters\ndef find_control_chars(string):\n    control_chars = [\n        '\\r', \n        '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\n    \nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)", "category": "Python"}, {"instruction": "Given a function that takes two parameters \"a\" and \"b\", write a code to add the two parameters together and return the result.", "input": "a = 1, b = 2", "output": "#Add two parameters together and return the result\ndef add_two_params(a, b):\n    return a + b\nresult = add_two_params(1, 2)\nprint('The result is', result)", "category": "Python"}, {"instruction": "Develop a code that can calculate the cumulative sum of an array", "input": "[2, 4, 6, 8, 10]", "output": "def cummulative_sum(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\nif __name__ == '__main__':\n    test_list = [2, 4, 6, 8, 10]\n    print('Cumulative Sum:', cummulative_sum(test_list))", "category": "Python"}, {"instruction": "Create a code block that calculates the root of a given number", "input": "Find the square root of 16", "output": "#calculate the square root of a given number\ndef get_square_root(num):\n    root = num ** 0.5\n    return root\nif __name__ == '__main__':\n    number = 16\n    root = get_square_root(number)\n    print(\"Square root of {} is {}\".format(number, root))", "category": "Python"}, {"instruction": "Create a SQL query to show all employee details with their attachments in a specific department.", "input": "Department Name: Sales", "output": "SELECT e.name, a.file_name, a.file_url\nFROM employees e\nJOIN attachments a ON e.id = a.employee_id\nWHERE e.department = 'Sales'", "category": "Python"}, {"instruction": "Create a class in C++ for a light emitting diode (LED) object that describes the color of the LED.", "input": "", "output": "class LED \n{ \n    private: \n    int color; \n\npublic: \n    // default constructor \n    LED() \n    { \n        color = 0; \n    } \n\n    // setter function \n    void setColor(int c) \n    { \n        color = c; \n    } \n\n    // getter function  \n    int getColor() \n    { \n        return color; \n    } \n};", "category": "Python"}, {"instruction": "Create a Ruby method to keep only text from a string.", "input": "string = \"This is a string with numbers such as 1, 2, and 3 in it.\"", "output": "def only_text(string)\n  return string.gsub(/[0-9,]/, '')\nend\n\nonly_text(string) // output: \"This is a string with numbers such as  and  in it.\"", "category": "Python"}, {"instruction": "Read the following code and debug the errors.", "input": "def double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen])", "output": "def double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen - 1])", "category": "Python"}, {"instruction": "Create an API Request to send a request with a body in JSON format", "input": "Endpoint: https://example.com/orders\n<noinput>", "output": "fetch('https://example.com/orders', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    orderId: '12434',\n    items: [\n      { itemId: '345', quantity: 3 },\n      { itemId: '678', quantity: 4 }\n    ]\n  }\n});", "category": "Python"}, {"instruction": "Given a string, replace characters with their corresponding HTML entities", "input": "String: '<div>'", "output": "String: '&lt;div&gt;'", "category": "Python"}, {"instruction": "Reverse the order of an array.", "input": "[2, 3, 4, 5, 6]", "output": "[6, 5, 4, 3, 2]", "category": "Python"}, {"instruction": "Given a string, the task is to output a new string with all repeating continuous characters collapsed to a single character.", "input": "aabbccddcc", "output": "abcdc", "category": "Python"}, {"instruction": "Write a Java code snippet to swap two given values.", "input": "int a = 10;\nint b = 20;", "output": "int temp = a;\na = b;\nb = temp;", "category": "Python"}, {"instruction": "Write a HTML code snippet to create a link which redirects to a given website.", "input": "", "output": "<a href=\"https://www.example.com/\">Link Text</a>", "category": "Python"}, {"instruction": "Write an HTML form with two input fields, one for the user's name and one for the user's age.", "input": "", "output": "<form>\n  <label>Name:</label><input type=\"text\" name=\"name\"><br>\n  <label>Age:</label><input type=\"number\" name=\"age\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a MySQL query to select the name and description of all products", "input": "", "output": "SELECT name, description FROM products;", "category": "Python"}, {"instruction": "Given two strings, write a Python function to check if they are anagrams.", "input": "", "output": "def check_anagrams(str1, str2): \n \n    if (len(str1) != len(str2)): \n        return False \n  \n    # sorting both strings \n    str1_list = sorted(str1) \n    str2_list = sorted(str2) \n  \n    # Check if both lists are equal \n    for i in range(0, len(str1_list)): \n        if str1_list[i] != str2_list[i]: \n            return False \n  \n    # If all characters were same \n    return True", "category": "Python"}, {"instruction": "Write a function in Python to calculate the length and breadth of a given rectangle.", "input": "", "output": "def calculate_rectangle_length_and_breadth(x, y):\n    length = x\n    breadth = y\n    return length, breadth", "category": "Python"}, {"instruction": "Create a HTML element for inputting an email address.", "input": "", "output": "<input type=\"email\" name=\"email\" placeholder=\"Enter your email address\">", "category": "Python"}, {"instruction": "Add the following data to a JavaScript associative array: {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "input": "", "output": "let data = {\n  \"name\": \"John\", \n  \"age\": 30, \n  \"city\": \"New York\"\n};", "category": "Python"}, {"instruction": "Output \"Hello World!\" using Java.", "input": "", "output": "public class HelloWorld { \n    public static void main(String[] args) \n    { \n        System.out.println(\"Hello World!\"); \n    } \n}", "category": "Python"}, {"instruction": "What is the output of this C++ code for n = 3?", "input": "int f(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return f(n-1) + f(n-2);\n}", "output": "3", "category": "Python"}, {"instruction": "Create a SQL query to get the list of members younger than 30.", "input": "", "output": "SELECT * \nFROM members \nWHERE age < 30;", "category": "Python"}, {"instruction": "Write a JavaScript code to sort an array of employee objects from oldest to youngest based on age property.", "input": "[{name: 'John', age: 30},\n{name: 'Mary', age: 25},\n{name: 'Kevin', age: 27}]", "output": "let employees = [{name: 'John', age: 30}, \n                 {name: 'Mary', age: 25}, \n                 {name: 'Kevin', age: 27}];\n\nemployees.sort((employee1, employee2) => {\n  return employee2.age - employee1.age;\n});", "category": "Python"}, {"instruction": "Given a list of student grades, write HTML code to display them in a table.", "input": "let grades = [85, 90, 77, 95];", "output": "<table>\n    <thead>\n        <tr>\n            <th>Grades</th>\n        </tr>\n    </thead>\n    <tbody>\n    <tr><td>85</td></tr>\n    <tr><td>90</td></tr>\n    <tr><td>77</td></tr>\n    <tr><td>95</td></tr>\n    </tbody>\n</table>", "category": "Python"}, {"instruction": "Write a neural network in Keras that can distinguish between a cat and a dog.", "input": "", "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n\n# Define the model\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a Kendo-UI application to display an interactive grid with the following options: sorting, pagination, and search filter.", "input": "<no-input>", "output": "<div id=\"grid\"></div>\n<script>\n$(\"#grid\").kendoGrid({\n    dataSource: {\n        sort: {\n            field: \"firstName\",\n            dir: \"asc\"\n        },\n        pageSize: 10,\n        serverPaging: true,\n        serverFiltering: true\n    },\n    columns: [\n        { \n            field: \"firstName\", \n            title: \"First Name\" \n        },\n        { \n            field: \"lastName\", \n            title: \"Last Name\" \n        },\n        { \n            field: \"age\", \n            title: \"Age\" \n        }\n    ],\n    sortable: true,\n    pageable: {\n        refresh: true,\n        pageSizes: true\n    },\n    filterable: {\n        mode: \"row\"\n    },\n    height: 550\n});\n</script>", "category": "Python"}, {"instruction": "Create a class \"Person\" in Kotlin with first name, last name, and age as its fields.", "input": "", "output": "class Person(\n    var firstName: String,\n    var lastName: String, \n    var age: Int\n)", "category": "Python"}, {"instruction": "Construct a PHP script to redirect a page to another page after 4 seconds.", "input": "", "output": "<?php\n    // Redirect after 4 seconds\n    header(\"Refresh: 4; url=http://example.com\");\n?>", "category": "Python"}, {"instruction": "Construct a C# program for displaying \"Hello World!\" on the console.", "input": "", "output": "using System;\n\nnamespace HelloWorld\n{   \n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to encode a given string with Base64 encoding.", "input": "myString = \"Hello World!\"", "output": "function encodeBase64(myString) {\n    return btoa(myString);\n}\nvar myStringEncoded = encodeBase64(myString);\nconsole.log(myStringEncoded);", "category": "Python"}, {"instruction": "Construct a SQL query to delete all the records from a table named 'friends' where the first name is \"John\".", "input": "", "output": "DELETE FROM friends WHERE first_name = 'John';", "category": "Python"}, {"instruction": "Write a Java function for reversing a given array of integers.", "input": "arr = [1,2,3,4,5,6]", "output": "public static void reverse(int arr[])  \n{\n    int i, j;\n    int n = arr.length;    \n    for (i = 0; i < n/2; i++)\n    {\n        j = n - i - 1;\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    } \n}", "category": "Python"}, {"instruction": "Write a PL/SQL query to display the sum of salaries of all the employees in a given department.", "input": "", "output": "SELECT SUM(salary) FROM employees WHERE department = 'department_name';", "category": "Python"}, {"instruction": "Write a Python code snippet for a function to calculate the number of words in a given string.", "input": "myString = \"The sky is blue\"", "output": "def countWords (myString): \n    return len(myString.split()) \n\nnum = countWords(myString) \nprint(\"Number of words =\", num)", "category": "Python"}, {"instruction": "Write a Java program for sorting a given list of numbers in descending order.", "input": "unsortedList = [7, 6, 5, 4, 3, 2, 1]", "output": "import java.util.Arrays; \n\npublic class SortList { \n    public static void main(String[] args) \n    { \n        int unsortedList[] = {7, 6, 5, 4, 3, 2, 1}; \n        Arrays.sort(unsortedList);\n  \n        int n = unsortedList.length; \n        for (int i=n-1; i>=0; i--) \n            System.out.print(unsortedList[i]+\" \"); \n    } \n}", "category": "Python"}, {"instruction": "Connect to a MySQL database on localhost, select all columns from the table 'products' and display the results.", "input": "", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"username\",\npassword=\"password\"\n)\n\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * from products\")\n\nresult = mycursor.fetchall()\n\nfor row in result:\n    print(row)", "category": "Python"}, {"instruction": "Create an artificial neural network to predict the stock prices.", "input": "", "output": "import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom sklearn.neural_network import MLPRegressor\n \n# Read data into a dataframe \ndf = pd.read_csv('stock_data.csv') \n \n# Split the data into features and target \nX = np.array(df[['open', 'high', 'low', 'volume']]) \ny = np.array(df['close']) \n \n# Create the model and fit the data \nmodel = MLPRegressor(hidden_layer_sizes=(4,4,4), max_iter=20000) \nmodel.fit(X,y) \n \n# Make predictions based on the test data \npredictions = model.predict(X) \n \n# Plot the results to compare the predicted and actual values \nplt.scatter(y, predictions) \nplt.xlabel('Actual Prices') \nplt.ylabel('Predicted Prices') \nplt.title('Predicted vs Actual Stock Prices') \nplt.show()", "category": "Python"}, {"instruction": "Execute a loop over all elements of a given array and print the square of each element.", "input": "[1,2,3]", "output": "for (let i = 0; i < arr.length; i++) {\n console.log(arr[i] * arr[i]);\n}\n\n// Output:\n1\n4\n9", "category": "Python"}, {"instruction": "Create a SQL query to find all records from the table \"licenses\" with license state \"CA\".", "input": "", "output": "SELECT * FROM licenses WHERE license_state = 'CA';", "category": "Python"}, {"instruction": "Convert a given expression to the postfix notation.", "input": "(A + B) * (C - D)", "output": "A B + C D - *", "category": "Python"}, {"instruction": "Create a JavaScript variable which stores a dictionary of team members and their respective ages.", "input": "{\n\t\"Tom\": 30,\n\t\"Harry\": 25,\n\t\"Sally\": 28\n}", "output": "let teamMembers = {\n  \"Tom\": 30,\n  \"Harry\": 25,\n  \"Sally\": 28\n};", "category": "Python"}, {"instruction": "Editor a Swift code to add item into an array.", "input": "var array = [5, 7, 15]", "output": "var array = [5, 7, 15]\narray.append(21)\nprint(array)", "category": "Python"}, {"instruction": "Write a C++ program for sorting a given list of numbers using bubble sort algorithm.", "input": "unsortedList = [7, 6, 5, 4, 3, 2, 1]", "output": "#include<iostream>\n\nusing namespace std;  \n  \nvoid bubbleSort(int unsortedList[], int n)  \n{  \n    int i, j;  \n    for (i = 0; i < n-1; i++)      \n      for (j = 0; j < n-i-1; j++)  \n        if (unsortedList[j] > unsortedList[j+1])  \n        {\n            int temp = unsortedList[j];  \n            unsortedList[j] = unsortedList[j+1];  \n            unsortedList[j+1] = temp;  \n        }\n}  \n  \nint main()  \n{  \n    int n = 7;  \n    int unsortedList[] = {7, 6, 5, 4, 3, 2, 1} ;\n  \n    bubbleSort(unsortedList, n);  \n  \n    cout<<\"Sorted List: \";  \n    for (int i = 0; i < n; i++)  \n        cout << unsortedList[i] << \" \";  \n    cout << endl;\n    \n    return 0;  \n}", "category": "Python"}, {"instruction": "Write a code snippet in JavaScript to get the date and time of the last day of the current month.", "input": "", "output": "var today = new Date();\nvar lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);\nvar lastDayOfMonthTime = lastDayOfMonth.toLocaleString();\nconsole.log(lastDayofMonthTime);", "category": "Python"}, {"instruction": "Modify the following Java code to print the second element in a given array.", "input": "int[] arr = {1, 2, 3, 4, 5};", "output": "int[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr[1]);", "category": "Python"}, {"instruction": "What is the name of the method used to log a message to the console in JavaScript?", "input": "", "output": "console.log()", "category": "Python"}, {"instruction": "Transform the input string to upper case and print the result.", "input": "This is a string", "output": "String inputString = \"This is a string\";\nString upperCaseString = inputString.ToUpper();\nConsole.WriteLine(upperCaseString);", "category": "Python"}, {"instruction": "Create a boolean type variable called \"isValid\" and set it to true.", "input": "", "output": "bool isValid = true;", "category": "Python"}, {"instruction": "How to check if a given number is a multiple of 10 in Java?", "input": "", "output": "In Java, the best way to check if a given number is a multiple of 10 is to use the modulo operator (%). The modulo operator (x % y) will return 0 if x is a multiple of y. Therefore, if (n % 10) == 0, then n is a multiple of 10.", "category": "Python"}, {"instruction": "What language is used to install packages in Ubuntu and other Linux-based systems?", "input": "", "output": "The language used to install packages in Ubuntu and other Linux-based systems is apt.", "category": "Python"}, {"instruction": "Write a C++ program to generate a Fibonacci sequence of length 10.", "input": "", "output": "#include <iostream> \n\nusing namespace std; \n\nint main () \n{ \n\tint n1 = 0, n2 = 1, n3, i, number; \n\n\tcout << \"Enter the number of elements: \"; \n\tcin >> number; \n\tcout << n1 << \" \" << n2 << \" \"; \n\n\tfor (i = 2; i < number; ++i) \n\t{ \n\t\tn3 = n1 + n2; \n\t\tcout << n3 << \" \"; \n\t\tn1 = n2; \n\t\tn2 = n3; \n\t} \n\t\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Write a Java program to create a class for a circle, with a parameter for the radius, and methods for calculating the area and circumference of a circle.", "input": "", "output": "public class Circle {\n  double radius;\n  \n  public Circle(double r){\n    this.radius = r;\n  }\n  \n  public double area(){\n    return (Math.PI * Math.pow(this.radius, 2));\n  }\n  \n  public double circumference(){\n    return (2 * Math.PI * this.radius);\n  }\n}", "category": "Python"}, {"instruction": "What is the most efficient sorting algorithm in C?", "input": "", "output": "The most efficient sorting algorithm in C is Quick Sort.", "category": "Python"}, {"instruction": "Describe how multithreading works in Java.", "input": "", "output": "Multithreading in Java is a process by which multiple threads can exist within the context of a single program and run concurrently. This allows for multiple processing tasks to be accomplished at the same time and makes the most of your available processing power. In a multithreaded application, threads can share objects and work cooperatively to complete tasks. Java also provides support for synchronization of threads, which allows for threads to co-ordinate their activities to ensure that critical shared resources are not used simultaneously or destroyed by improper access.", "category": "Python"}, {"instruction": "Write an SQL query to find the average salary for employees with the position of Manager at a company.", "input": "", "output": "SELECT AVG(salary) FROM employees WHERE position = 'Manager';", "category": "Python"}, {"instruction": "What is the name of the method used in Java to compare two strings?", "input": "", "output": "The method used in Java to compare two strings is the .equals() method.", "category": "Python"}, {"instruction": "Write an SQL query to select the names of employees and their salaries from a table named 'employees', in ascending order of the salaries.", "input": "", "output": "SELECT name, salary FROM employees ORDER BY salary ASC;", "category": "Python"}, {"instruction": "What programming language is used to create a web page?", "input": "", "output": "HTML is the most commonly used language for creating web pages. CSS and JavaScript can also be used.", "category": "Python"}, {"instruction": "Write an SQL query to select all data from a table named 'users' in descending order by the 'age' column.", "input": "", "output": "SELECT * FROM users ORDER BY age DESC;", "category": "Python"}, {"instruction": "Create a Java method that takes a decimal number as an argument and returns its binary equivalent.", "input": "", "output": "public static String decToBinary(int n)  \n{  \n    String s=\"\";  \n    while(n > 0)  \n    {  \n        int a = n % 2;  \n        s = a + s;  \n        n = n / 2;  \n    }  \n    return s;  \n}", "category": "Python"}, {"instruction": "Describe how to access the fifth element in an associative array in PHP.", "input": "", "output": "You can access the fifth element in an associative array in PHP by using the syntax $array['key_name'], where key_name is the key for the fifth element.", "category": "Python"}, {"instruction": "Create an array of size ten with every even slot filled with the value 0 and every odd slot filled with the value 1.", "input": "", "output": "[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]", "category": "Python"}, {"instruction": "Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers.", "input": "11", "output": "def is_prime(n):\n  #Check if n islarger than one \n  if n > 1:\n    # Check if n is divisible by any number between2 and n\n    for i in range(2,n):\n      if (n % i) == 0:\n        return False\n    else:\n      return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Write a code to print all prime numbers up to 1000.", "input": "", "output": "def is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)", "category": "Python"}, {"instruction": "Convert a Python function to a JavaScript function.", "input": "def add(a, b):\n    return a + b", "output": "function add(a, b) {\n    return a + b;\n}", "category": "Python"}, {"instruction": "Design a function to select the nth smallest element from an array.", "input": "int[] arr = {11, -2, 4, 9, -5, 7}", "output": "def selectNthSmallest(arr, n): \n \n    # sort the array \n    arr = sorted(arr) \n  \n    # return the nth smallest element \n    return arr[n-1]  \n      \n# Driver code \narr = [11, -2, 4, 9, -5, 7]  \nn = 3\n  \n# Output \nprint(selectNthSmallest(arr, n))", "category": "Python"}, {"instruction": "Generate a new list from an old list by multiplying each element of the old list with a given number", "input": "numbers = [2, 4, 6]\nmultiply = 5", "output": "def multiply_elements(numbers, multiply):\n    new_list = []\n    for num in numbers:\n        new_list.append(num * multiply)\n    return new_list\n\nnumbers = [2, 4, 6]\nmultiply = 5\n\nprint(multiply_elements(numbers, multiply))", "category": "Python"}, {"instruction": "Identify common elements between two given lists", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]", "output": "def common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nprint(common_elements(list1, list2))", "category": "Python"}, {"instruction": "Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.", "input": "string = 'Hello, world!'\ncharacter = '#'", "output": "import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))", "category": "Python"}, {"instruction": "Write a code that takes two lists and find the longest common starting substring", "input": "list1 = ['cat', 'car', 'camel']\nlist2 = ['carry', 'cap', 'caterpillar']", "output": "def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \nprint(find_longest_substring(list1, list2))", "category": "Python"}, {"instruction": "Write a Python code take a given string and return the string in reverse.", "input": "hello", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Take the following array and add up all of the numbers", "input": "numbers = [4,15,7,10,45]", "output": "def sum_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nprint(sum_numbers(numbers))", "category": "Python"}, {"instruction": "Write a code that takes a number and prints it out in words.", "input": "25", "output": "def number_to_word(n):\n    tens_words = {\n        0: '',\n        2: 'twenty',\n        3: 'thirty',\n        4: 'forty',\n        5: 'fifty',\n        6: 'sixty',\n        7: 'seventy',\n        8: 'eighty',\n        9: 'ninety',\n    }\n    ones_words = {\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n    }\n\n    tens = n // 10\n    ones = n % 10\n\n    return tens_words[tens] + ' ' + ones_words[ones]\n\nprint(number_to_word(25))", "category": "Python"}, {"instruction": "Take the following list of words and return the words in alphabetical order", "input": "words = ['daisy', 'apple', 'cat', 'zebra']", "output": "def sort_alphabetical(words):\n return sorted(words)\n\nwords = ['daisy', 'apple', 'cat', 'zebra']\n\nprint(sort_alphabetical(words))", "category": "Python"}, {"instruction": "Take the following code and convert it from a for loop to a While loop.", "input": "nums = [1,2,3,4,5]\nfor num in nums:\n    print(num**2)", "output": "nums = [1,2,3,4,5]\ni = 0\nwhile i < len(nums):\n    print(nums[i]**2)\n    i = i + 1", "category": "Python"}, {"instruction": "How would you set up a database table to store medical records", "input": "", "output": "CREATE TABLE medical_records (\n    record_id INT AUTO_INCREMENT PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    doctor VARCHAR(255) NOT NULL,\n    diagnosis TEXT,\n    test_results TEXT,\n    notes TEXT\n);", "category": "Python"}, {"instruction": "Implement a class to create an object with the given characteristics", "input": "Characteristics: Name, Age, Gender", "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name \n        self.age = age \n        self.gender = gender \n\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"", "category": "Python"}, {"instruction": "Find the area of the following circle", "input": "Radius: 8 cm", "output": "Area = pi * r^2\n\nArea = 3.14 * 8^2 \n\nArea = 201.06 cm^2", "category": "Python"}, {"instruction": "Generate a list of email addresses using the given range.", "input": "Range: 10-100", "output": "[\n    'email10@example.com',\n    'email11@example.com',\n    'email12@example.com',\n    'email13@example.com',\n    'email14@example.com',\n    'email15@example.com',\n    'email16@example.com',\n    'email17@example.com',\n    'email18@example.com',\n    'email19@example.com',\n    'email20@example.com',\n    'email21@example.com',\n    'email22@example.com',\n    'email23@example.com',\n    'email24@example.com',\n    'email25@example.com',\n    'email26@example.com',\n    'email27@example.com',\n    'email28@example.com',\n    'email29@example.com',\n    'email30@example.com',\n    'email31@example.com',\n    'email32@example.com',\n    'email33@example.com',\n    'email34@example.com',\n    'email35@example.com',\n    'email36@example.com',\n    'email37@example.com',\n    'email38@example.com',\n    'email39@example.com',\n    'email40@example.com',\n    'email41@example.com',\n    'email42@example.com',\n    'email43@example.com',\n    'email44@example.com',\n    'email45@example.com',\n    'email46@example.com',\n    'email47@example.com',\n    'email48@example.com',\n    'email49@example.com',\n    'email50@example.com',\n    'email51@example.com',\n    'email52@example.com',\n    'email53@example.com',\n    'email54@example.com',\n    'email55@example.com',\n    'email56@example.com',\n    'email57@example.com',\n    'email58@example.com',\n    'email59@example.com',\n    'email60@example.com',\n    'email61@example.com',\n    'email62@example.com',\n    'email63@example.com',\n    'email64@example.com',\n    'email65@example.com',\n    'email66@example.com',\n    'email67@example.com',\n    'email68@example.com',\n    'email69@example.com',\n    'email70@example.com',\n    'email71@example.com',\n    'email72@example.com',\n    'email73@example.com',\n    'email74@example.com',\n    'email75@example.com',\n    'email76@example.com',\n    'email77@example.com',\n    'email78@example.com',\n    'email79@example.com',\n    'email80@example.com',\n    'email81@example.com',\n    'email82@example.com',\n    'email83@example.com',\n    'email84@example.com',\n    'email85@example.com',\n    'email86@example.com',\n    'email87@example.com',\n    'email88@example.com',\n    'email89@example.com',\n    'email90@example.com',\n    'email91@example.com',\n    'email92@example.com',\n    'email93@example.com',\n    'email94@example.com',\n    'email95@example.com',\n    'email96@example.com',\n    'email97@example.com',\n    'email98@example.com',\n    'email99@example.com',\n    'email100@example.com'\n]", "category": "Python"}, {"instruction": "Create a GraphQL query to get the list of products from a database.", "input": "", "output": "query { \n  products { \n    id \n    name \n    price \n    quantity \n    category \n  }\n}", "category": "Python"}, {"instruction": "Write code in Swift to print the Fibonacci Sequence to the first 20 numbers", "input": "", "output": "var a = 0, b = 1\n\nfor _ in 1...20 {\n    let c = a + b\n    a = b\n    b = c\n    print(\"\\(c)\")\n}", "category": "Python"}, {"instruction": "Write a function in R to filter out the words containing more than 5 letters.", "input": "", "output": "filter_words_over_five_letters <- function(words_list) {\n  filtered_words <- words_list[nchar(words_list) > 5]\n  return(filtered_words)\n}", "category": "Python"}, {"instruction": "Fix the bug in the following code that causes the output to be incorrect.", "input": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')", "output": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}.')", "category": "Python"}, {"instruction": "Write a JavaScript program to find the remainder when two given numbers are divided.", "input": "9 and 5", "output": "let dividend = 9;\nlet divisor = 5;\nlet remainder = dividend % divisor;\nconsole.log(remainder);", "category": "Python"}, {"instruction": "Find the code snippet to format the output of a List.", "input": "", "output": "for item in some_list:\n    print(\"{:>20}\".format(item))", "category": "Python"}, {"instruction": "Modify the code to declare a variable as a float.", "input": "x = 5", "output": "x = float(5)", "category": "Python"}, {"instruction": "Create a class in Java with private variables, getter and setter method, and constructor.", "input": "", "output": "public class MyClass {\n    private int variable1;\n    private int variable2;\n    \n    public MyClass(int variable1, int variable2) {\n        this.variable1 = variable1;\n        this.variable2 = variable2;\n    }\n    \n    public int getVariable1() {\n        return variable1;\n    }\n    \n    public void setVariable1(int variable1) {\n        this.variable1 = variable1;\n    }\n    \n    public int getVariable2() {\n        return variable2;\n    }\n    \n    public void setVariable2(int variable2) {\n        this.variable2 = variable2;\n    }\n}", "category": "Python"}, {"instruction": "Given a list containing strings, write a Python program to filter out unique strings.", "input": "mylist = [\"fox\", \"fox\", \"cat\", \"dog\", \"dog\"]", "output": "mylist = list(set(mylist))\nprint(mylist)", "category": "Python"}, {"instruction": "Determine the number of words in the given passage using text processing in Python.", "input": "passage = \"Once upon a midnight dreary, while I pondered, weak and weary\"", "output": "n_words = len(passage.split())\nprint(\"The number of words in the passage is:\", n_words)", "category": "Python"}, {"instruction": "Write a MySQL query that retrieves all data from the table 'Sales' for the date range 01-04-2021 and 15-04-2021 using the date column.", "input": "", "output": "SELECT * FROM Sales WHERE date BETWEEN '2021-04-01'AND '2021-04-15';", "category": "Python"}, {"instruction": "In the given Java program replace the line number 3 with a line that outputs the remainder of dividing 10 by 3.", "input": "public class Main {\n    public static void main(String[] args) {\n        // Code to be replaced\n    }\n}", "output": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(10 % 3);\n    }\n}", "category": "Python"}, {"instruction": "Create a bash script that prints out a sequence of numbers between 0 and 100.", "input": "", "output": "#!/bin/bash \n\nfor num in {0..100}\ndo\n  echo \"$num\"\ndone", "category": "Python"}, {"instruction": "Create a program in C++ to find the max and min of an array of fixed size.", "input": "array = [3, 5, 8, 6, 10, 1]", "output": "#include <iostream>\nusing namespace std;\n\n// Function to find maximum and minimum of an array\nvoid minMax(int arr[], int n) \n{ \n    int max = arr[0]; \n    int min = arr[0]; \n  \n    for (int i = 1; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n  \n        if (arr[i] < min) \n            min = arr[i]; \n    } \n  \n    cout << \"Maximum element = \" << max << endl; \n    cout << \"Minimum element = \" << min; \n} \n\nint main() \n{ \n    int arr[] = {3, 5, 8, 6, 10, 1}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    minMax(arr, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Select the correct code for a for-loop for a sequential array of numbers.", "input": "", "output": "for i in range(1, 10):\n    print(i)", "category": "Python"}, {"instruction": "Create a function in Python that takes a string and prints the frequency table of all its characters.", "input": "string = \u201cHello world\"", "output": "def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)", "category": "Python"}, {"instruction": "What should be the output for the given code?", "input": "a = 7\nb = 2\n\nif a % b == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "output": "Yes", "category": "Python"}, {"instruction": "Create a class to represent an Employee, which includes a name, salary, and ID number", "input": "", "output": "class Employee:\n    def __init__(self, name, salary, id_number):\n        self.name = name\n        self.salary = salary\n        self.id_number = id_number", "category": "Python"}, {"instruction": "Generate a recursive function for the following task:", "input": "Given a list of integers, \"find the max element present in the list\".", "output": "def find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])", "category": "Python"}, {"instruction": "Write a code to find the maximum of three numbers using if else.", "input": "", "output": "def maximum_of_three(x, y, z): \n    if x > y and x > z: \n        max = x \n    elif y > x and y > z: \n        max = y \n    else: \n        max = z \n    return max", "category": "Python"}, {"instruction": "Write a while loop to print all numbers from 20 to 0.", "input": "", "output": "num = 20\n\nwhile num >= 0:\n    print(num)\n    num -= 1", "category": "Python"}, {"instruction": "What command should be added to the function to make sure the input list is sorted?", "input": "def remove_duplicates(list):\n    # TODO: add command\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    # sort the list\n    list.sort()\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "Delete the elements at a specified position of the given list.", "input": "my_list = [1, 2, 3, 4, 5]\npos = 3", "output": "def delete_element(list1, pos):\n    del list1[pos]\n    print(\"After deleting the element at position {0} the list is: {1}\".format(pos, list1))\n\ndelete_element(my_list, pos)", "category": "Python"}, {"instruction": "You are passed an array and a value. Write a Python program to insert the value in the array at the end.", "input": "array = [1, 2, 3, 4], value = 7", "output": "array = [1, 2, 3, 4, 7]", "category": "Python"}, {"instruction": "Create a javascript function for calculating the average of 1 to n-1 numbers in an array.", "input": "[1, 2, 3, 4]", "output": "function calcAvg(arr) {\n   let sum = 0;\n   let arrLength = arr.length - 1;\n   for(let i = 0; i < arrLength; i++) {\n       sum += arr[i];\n   }\n   return sum / arrLength;\n}", "category": "Python"}, {"instruction": "Write the SQL query to print out all the products in the product table.", "input": "", "output": "SELECT * \nFROM product;", "category": "Python"}, {"instruction": "Write a loop in C++ to print out a list of numbers from 1 to 100.", "input": "", "output": "#include <iostream>\n\nint main() {\n  for(int i = 1; i <= 100; i++) {\n    std::cout << i << ' ';\n  }\n  return 0;  \n}", "category": "Python"}, {"instruction": "Rewrite the following function to use the modern function syntax in Javascript.", "input": "function greetUser(name) {\n    console.log('Hello ' + name + '!');\n}", "output": "const greetUser = (name) => console.log(`Hello ${name}!`);", "category": "Python"}, {"instruction": "Suggest a one-line solution for intersecting two given arrays in Javascript.", "input": "", "output": "const intersection = (arr1, arr2) => arr1.filter(x => arr2.includes(x));", "category": "Python"}, {"instruction": "Create a function in Javascript to be used for capitalizing the first letter of each word in a string of text.", "input": "", "output": "const toTitleCase = (str) => {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}", "category": "Python"}, {"instruction": "Alter the following CSS code to make font size \"40px\" for all h1 and h2 elements.", "input": "h1, h2 {\n    font-size: 20px;\n}", "output": "h1, h2 {\n    font-size: 40px;\n}", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integer as input and return the most frequent value in the list.", "input": "[3, 9, 5, 6, 3, 9, 5]", "output": "def most_frequent_value(list):\n    return max(set(list), key = list.count)", "category": "Python"}, {"instruction": "Create a function to find a pair of elements in an array whose sum matches the given target.", "input": "numbers = [1, 2, 3, 4, 5], target = 6", "output": "def find_pair(numbers, target):\n  nums_set = set(numbers)\n  for num in nums_set:\n    if target - num in nums_set:\n      return [num, target-num]", "category": "Python"}, {"instruction": "Create a function to compute the depth of a binary tree.", "input": "", "output": "def tree_depth(root): \n    # Base case \n    if root is None: \n        return 0 ;  \n  \n    # If tree is not empty then height = 1 + max of left  \n    # height and right heights  \n    return 1 + max(tree_depth(root.left),  \n                    tree_depth(root.right))", "category": "Python"}, {"instruction": "Format the given list of numbers in such a way that element at i'th index is the product of all elements in the list except the i'th element.", "input": "numbers = [1, 2, 3, 4]", "output": "def format_list(numbers):\n    result = []\n    prod = 1\n    for i in range(0, len(numbers)):\n        prod = prod * numbers[i]\n    for i in range(0, len(numbers)):\n        result.append(prod // numbers[i])\n    return result", "category": "Python"}, {"instruction": "Given a 2D array, transpose the array.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "transpose_matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "category": "Python"}, {"instruction": "Write an SQL query that displays the 10 highest paid employees.", "input": "", "output": "SELECT * \nFROM Employee \nORDER BY Salary DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Create a Java program which takes a year as input and prints whether it is a leap year or not.", "input": "year = 2020", "output": "public class LeapYear \n{ \n    public static void main(String args[]) \n    { \n        int year = 2020; \n        if((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) \n            System.out.println(\"The year is a leap year.\"); \n        else\n            System.out.println(\"The year is not a leap year.\"); \n    } \n}", "category": "Python"}, {"instruction": "Read a list of strings and return a list which contains only the strings with length at least 3.", "input": "list = [\"Apple\", \"cat\", \"dog\", \"banana\", \"mouse\"]", "output": "newList = [i for i in list if len(i) >= 3]\nprint(newList)\n\n# Output: ['Apple', 'banana', 'mouse']", "category": "Python"}, {"instruction": "Edit this code to create a function which prints the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))", "category": "Python"}, {"instruction": "Create a loop in Python to print odd numbers between 10 and 25.", "input": "", "output": "for i in range(11, 25, 2):\n    print(i)", "category": "Python"}, {"instruction": "Read an array of integers and sort it in increasing order.", "input": "arr = [3, 1, 4, 5, 2]", "output": "def sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\nsortArray(arr) \nprint(arr)\n\n# Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a JavaScript class named \u201cApple\u201d that holds one property, the \u201cName\u201d.", "input": "", "output": "class Apple {\n    constructor(name){\n        this.Name = name;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all flights departing from a given location after a given date and time.", "input": "StartCity: NYC \nDate/Time: March 16, 2021 8:00 AM", "output": "SELECT flightno, startcity, starttime \nFROM flights \nWHERE startcity = 'NYC' AND starttime > '2021-03-16 08:00:00';", "category": "Python"}, {"instruction": "Create an object in Python that has three properties, \"Color\", \"Height\" and \"Weight\".", "input": "", "output": "myObject = { \n    'color': '',\n    'height': 0,\n    'weight': 0\n}", "category": "Python"}, {"instruction": "Write a CSS rule to set the text size of all elements with the class \u201cbig-header\u201d to 24px.", "input": "", "output": ".big-header {\n    font-size: 24px;\n}", "category": "Python"}, {"instruction": "Construct a JavaScript function that implements a fibonacci sequence.", "input": "", "output": "function fibonacci(num) {\n  let a = 1,\n    b = 0,\n    temp;\n\n  while (num >= 0) {\n    temp = a;\n    a = a + b;\n    b = temp;\n    num--;\n  }\n\n  return b;\n}", "category": "Python"}, {"instruction": "Create discrete buckets in a given array using the following algorithm.", "input": "[2, 3, 6, 7, 8]", "output": "def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]", "category": "Python"}, {"instruction": "Implement an algorithm in C++ for finding the largest number in an array.", "input": "int arr[] = {3, 7, 1, -2, 9, 5};", "output": "#include <iostream> \n\nusing namespace std; \n  \nint largestNumber(int arr[], int n) \n{ \n    int max = arr[0]; \n  \n    for (int i = 0; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n    } \n  \n    return max; \n} \n  \nint main() \n{ \n    int arr[] = {3, 7, 1, -2, 9, 5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    cout <<\"The largest element is \"<< largestNumber(arr, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a basic login form in HTML.", "input": "", "output": "<form action=\"\" method=\"POST\">\n\n <div>\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" name=\"username\" id=\"username\">\n </div>\n\n <div>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" name=\"password\" id=\"password\">\n </div>\n\n <button type=\"submit\">Log In</button>\n\n</form>", "category": "Python"}, {"instruction": "Output the first 10 Fibonacci numbers.", "input": "", "output": "0 1 1 2 3 5 8 13 21 34", "category": "Python"}, {"instruction": "Generate a Python program to generate the square of a number.", "input": "", "output": "def square(n):\n    return n*n", "category": "Python"}, {"instruction": "Create a program to generate all subsets of a set.", "input": "input_set = {1, 2, 3}", "output": "def all_subsets(input_set):\n    res = [[]]\n    for ele in input_set:\n        res += [i + [ele] for i in res]\n    return res", "category": "Python"}, {"instruction": "Write a Python script to create a dictionary of key - value pairs from a list.", "input": "list = [\"apple\", \"banana\", \"cherry\"]", "output": "dictionary = dict.fromkeys(list, 0)\n\nprint(dictionary)\n\n# Output: {'apple': 0, 'banana': 0, 'cherry': 0}", "category": "Python"}, {"instruction": "Change the Python code to find the occurrences of an item in a list", "input": "def count(list_of_items, item): \n    return len(list_of_items)", "output": "def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Edit the Python code to reverse a linked list.", "input": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None", "output": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev", "category": "Python"}, {"instruction": "How would you go about sorting a million numbers in memory?", "input": "", "output": "A common approach would be to use an efficient sorting algorithm, such as Quicksort, Merge Sort, or Heapsort. These algorithms typically take time proportional to n log n, where n is the number of elements being sorted.", "category": "Python"}, {"instruction": "Observe the given piece of code and suggest the possible data structure to use.", "input": "for (int i = 0; i < input.length; i++)\n{\n    if (input[i] == 0)\n    {\n       output[output_index] = i;\n       output_index++;\n    }\n}", "output": "An array or a list should be used to store the positions of the numbers that are equal to 0 in the input. The output array should be used to store the positions. The output index should be used to keep track of the current position in the output array.", "category": "Python"}, {"instruction": "Edit the following code to use more efficient algorithms to improve its performance.", "input": "for (int i = 0; i < n; i++)\n{\n    sum += i;\n}", "output": "int sum = 0; \nfor (int i = 0; i < n; i++) \n    sum += i;\nsum = n * (n + 1) / 2;", "category": "Python"}, {"instruction": "List all the items in an associative array named \u2018inventory\u2019.", "input": "inventory = {\n    \"fruits\": [\"Apple\", \"Banana\", \"Orange\"],\n    \"vegetables\": [\"Carrot\", \"Cucumber\", \"Spinach\"] \n}", "output": "[\"Apple\", \"Banana\", \"Orange\", \"Carrot\", \"Cucumber\", \"Spinach\"]", "category": "Python"}, {"instruction": "Compute the sum of all the numbers in the following array: [1, 2, 3, 4, 5].", "input": "", "output": "15", "category": "Python"}, {"instruction": "Create an HTML table that contains 10 rows and 3 columns.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>Column A</th>\n      <th>Column B</th>\n      <th>Column C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Change the Python code to output the product of two numbers.", "input": "def multiply(a, b): \n    return a + b", "output": "def multiply(a, b): \n    return a * b", "category": "Python"}, {"instruction": "Fix the following code so it outputs the correct result.", "input": "def string_formatter(string):\n    new_str = string.split()\n    return new_str\n\nprint(string_formatter('This is a string'))", "output": "def string_formatter(string):\n    new_str = string.split()\n    return ' '.join(new_str)\n\nprint(string_formatter('This is a string'))\n# Output: This is a string", "category": "Python"}, {"instruction": "Split the following sentence into three words using regular expression.", "input": "sentence = \"Meeting is at 4 pm\"", "output": "import re\n\nwords = re.split(r'\\s', sentence)\nprint(words)\n\n# Output: ['Meeting', 'is', 'at', '4', 'pm']", "category": "Python"}, {"instruction": "Read the integers in a given list and return the sum of the squares of the list elements.", "input": "arr = [1, 2, 3]", "output": "def squares_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] ** 2\n    return sum", "category": "Python"}, {"instruction": "Code an SQL query to insert new records into the Students table.", "input": "Table Name: Students\nColumns: id, name, grade", "output": "INSERT INTO Students (id, name, grade)\nVALUES (1, 'John', 'A'), (2, 'Kate', 'B'), (3, 'Steve', 'A');", "category": "Python"}, {"instruction": "How does JavaScript handle undeclared variables?", "input": "", "output": "JavaScript will automatically create an undeclared variable if it is referenced in the code. The variable is then set to the undefined value. The variable cannot be set or accessed until it has been declared. The variable will also remain in the global scope.", "category": "Python"}, {"instruction": "Identify the dependent clause in the given sentence.", "input": "Sentence: Although he was sad, he still managed to go to the party.", "output": "Although he was sad.", "category": "Python"}, {"instruction": "Write a JavaScript program to create an array of elements, representing the Fibonacci sequence, up to the given number n.", "input": "", "output": "function fibonacci_array(n) {\n let sequence = [0, 1];\n while (sequence.length <= n) {\n let lastIndex = sequence.length - 1;\n sequence.push(sequence[lastIndex] + sequence[lastIndex - 1]);\n }\n return sequence;\n}", "category": "Python"}, {"instruction": "Code an SQL query to get the records of all students with a grade of \u2018A\u2019 in the Student table.", "input": "Table Name: Student\nColumns: id, name, grade", "output": "SELECT * FROM Student\nWHERE grade = 'A';", "category": "Python"}, {"instruction": "Write a function that creates a new array from a given array of integers, leaving out the negative ones.", "input": "list1 = [-1, 1, 2, -2, 3, -3]", "output": "def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    return outputArray\n\n# testing\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1)) # Output: [1,2,3]", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of odd numbers from a given list of numbers.", "input": "numbers = [1,2,3,4,5,6,7,8,9,10]", "output": "odd = [x for x in numbers if x % 2 != 0]\nprint(odd) # Output: [1, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Create an HTML page that displays the Date and Time in the header.", "input": "", "output": "<html>\n    <head>\n        <title>Date and Time</title>\n    </head>\n    <body>\n        <h3 id=\"date\"><script>document.getElementById(\"date\").innerHTML = Date()</script></h3>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".", "input": "x = 9, y = 3", "output": "def is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y", "category": "Python"}, {"instruction": "Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.", "input": "list1 = [1,2,2,4,4,4,5]", "output": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]", "category": "Python"}, {"instruction": "Read two strings from the user and check if they are anagrams.", "input": "string1 = 'listen', string2 = 'silent'", "output": "def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True", "category": "Python"}, {"instruction": "Process this CSV string into an array of objects.", "input": "name, age \nJohn, 20 \nKen, 30", "output": "const csvInput = `name, age\nJohn, 20\nKen, 30`;\n\nconst lines = csvInput.split('\\n');\n\nconst header = lines[0].split(', ');\n\nconst rows = lines.slice(1);\n\nconst objects = [];\n\nrows.forEach(row => {\n    const entries = row.split(', ');\n    const obj = {};\n    header.forEach((key, i) => {\n      obj[key] = entries[i];\n    });\n    objects.push(obj);\n});\n\n// [\n//   { name: 'John', age: '20' },\n//   { name: 'Ken', age: '30' }\n// ]", "category": "Python"}, {"instruction": "Write SQL code to insert a row into this table called \"tbl_users\".", "input": "Table Structure: \ntbl_users\nuser_id (int, primary key)\nuser_name (varchar)\nuser_email (varchar)", "output": "INSERT INTO tbl_users (user_name, user_email) VALUES ('John Doe', 'john@example.com');", "category": "Python"}, {"instruction": "Format the following string to a valid JSON", "input": "{name: \"John\", age: 20}", "output": "\"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 20}\"", "category": "Python"}, {"instruction": "Parse this JSON string into a JSONObject", "input": "{\n    \"status\": 200,\n    \"message\": \"OK\",\n    \"data\": {\n        \"users\": [\n            {\n               \"name\": \"John\",\n               \"age\": 20 \n            },\n            {\n               \"name\": \"Ken\",\n               \"age\": 30 \n            }\n        ]\n    }\n}", "output": "JSONObject jsonObj = new JSONObject(jsonInput);\n\n// get the data\nJSONObject data = jsonObj.getJSONObject(\"data\");\n\n// get the users list\nJSONArray users = data.getJSONArray(\"users\");\n\n// traverse the users list\nfor(int i=0;i<users.length();i++){\n    JSONObject user = users.getJSONObject(i);\n    String name = user.getString(\"name\");\n    int age = user.getInt(\"age\");\n}", "category": "Python"}, {"instruction": "Remove comments from a given HTML page.", "input": "", "output": "def remove_comments(html_page):\n  comment_start = \"<!--\"\n  comment_end = \"-->\"\n  output_page = \"\"\n  while html_page:\n    comment_start_index = html_page.find(comment_start)\n    if comment_start_index == -1:\n      output_page += html_page\n      break\n    output_page += html_page[:comment_start_index]\n    html_page = html_page[comment_start_index:]\n    comment_end_index = html_page.find(comment_end) + len(comment_end)\n    html_page = html_page[comment_end_index:]\n  \n  return output_page", "category": "Python"}, {"instruction": "Draft a while loop to print the numbers up to and including 5.", "input": "", "output": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Summarize the given article using the Gensim summarizer.", "input": "[Article about Gensim summarizer](https://gensim.readthedocs.io/en/latest/summarization.html)", "output": "Gensim summarizer uses text preprocessing, tokenization, and summarization to generate extracted summaries from the given text. It supports manual summarization, latent semantic analysis, Latent Dirichlet Allocation, baseline summarization, and phrases-based summarization. Gensim summarizer provides a variety of ways to summarize text documents including manual summarization and auto summarization techniques.", "category": "Python"}, {"instruction": "Formulate a regular expression to identify even numbers up to 100.", "input": "", "output": "^([02468]|[13579][0-9]?)$", "category": "Python"}, {"instruction": "Generate a function to convert an infix expression to a postfix expression.", "input": "\"A + B * C\"", "output": "def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\n\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+", "category": "Python"}, {"instruction": "Generate a query to count the number of unique values in a SQL table.", "input": "", "output": "SELECT COUNT(DISTINCT column_name) FROM table_name;", "category": "Python"}, {"instruction": "Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.", "input": "[1, 2, 2, 2, 3, 3, 4, 4, 5]", "output": "def group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \n\nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}", "category": "Python"}, {"instruction": "Classify and label the outputs from a logistic regression.", "input": "[-1, 0.1, 0.6, 1.8]", "output": "The outputs from the logistic regression are [-1, 0.1, 0.6, 1.8]. \nThe labels for these outputs are: -1 = \"Negative Class\", 0.1 = \"Close to Negative Class\", 0.6 = \"Neutral Class\", 1.8 = \"Positive Class\".", "category": "Python"}, {"instruction": "Raise an error with the message \"Invalid value\" when the following function is called and the value of \"n\" is below 0.", "input": "def check_value(n):\n    # TODO", "output": "def check_value(n):\n    if n < 0:\n        raise ValueError(\"Invalid value\")", "category": "Python"}, {"instruction": "Format the following string using the str.format() method.", "input": "String: The name of the person is {} and his age is {}", "output": "print(\"The name of the person is {name} and his age is {age}\".format(name=\"John Doe\", age=23))", "category": "Python"}, {"instruction": "Output the smallest and greatest number from the provided list", "input": "List: [53, 78, 25, 63, 23, 39]", "output": "Minimum: 23 \nMaximum: 78", "category": "Python"}, {"instruction": "Create a format string in Python to output the sentence \u201cHello, my name is John Doe.\u201d", "input": "name = \"John Doe\"", "output": "print(f\"Hello, my name is {name}.\")", "category": "Python"}, {"instruction": "Print the contents of the provided dictonary", "input": "Dictonary: {'name': 'John', 'age': 23, 'address': '123 Main Street'}", "output": "print('Name:', d['name'])\nprint('Age:', d['age'])\nprint('Address:', d['address'])", "category": "Python"}, {"instruction": "Parse the data in the given json to a list of key-value dictionaries", "input": "{\"country\": \"faculty of engineering\",\n  \"students\": 15000,\n  \"graduates\": 1200\n}", "output": "[{'country': 'faculty of engineering', 'students': 15000}, {'graduates': 1200}]", "category": "Python"}, {"instruction": "Write a code to validate an email entered by the user.", "input": "", "output": "\"\"\"\nValidate an email entered by the user\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex, email)):\n  return True\n else:\n  return False\n  \nif __name__ == '__main__':\n email = input('Enter email address: ')\n if validate_email(email):\n  print('Valid email address')\n else:\n  print('Invalid email address')", "category": "Python"}, {"instruction": "How do you access the first element of the given list?", "input": "List = [6, 7, 8]", "output": "list[0]", "category": "Python"}, {"instruction": "Write a code snippet to cut the first 10 characters from a string.", "input": "String: \"Hello World!\"", "output": "```\nstring = \"Hello World!\"\nstring = string[10:]\nprint(string)\n```", "category": "Python"}, {"instruction": "Identify the Python statement used for looping.", "input": "", "output": "for", "category": "Python"}, {"instruction": "Find the type of an object for the given object.", "input": "Object: \"Hello World\"", "output": "str", "category": "Python"}, {"instruction": "Create a function which returns the factorial of a given number.", "input": "", "output": "\"\"\"\nFunction which returns factorial of a given number\n\"\"\"\n\ndef factorial(num):\n    if (num == 0):\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nif __name__ == '__main__':\n    print(factorial(5))", "category": "Python"}, {"instruction": "Generate a regex that detects an email", "input": "", "output": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$", "category": "Python"}, {"instruction": "Write a SQL query to find the first name of all students enrolled in course \"CSCI-203\"", "input": "", "output": "SELECT firstName \nFROM students \nWHERE courseName = 'CSCI-203';", "category": "Python"}, {"instruction": "Find the minimum, maximum, and the average of a list of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "min = 1\nmax = 5\naverage = 3", "category": "Python"}, {"instruction": "How would you convert this list of strings to integers in Python?", "input": "str_list = ['1', '2', '3', '4']", "output": "int_list = [int(i) for i in str_list]\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "What is the best way to format a large number such that it is easy to read?", "input": "", "output": "The best way to format a large number is to add separator characters such as comma, underscore, period or space. This makes it easier to read and understand the large number.", "category": "Python"}, {"instruction": "Delete all comments that start with the string '#' from the given text.", "input": "The following program writes \"Hello World!\" to the screen. # This is a comment", "output": "The following program writes \"Hello World!\" to the screen.", "category": "Python"}, {"instruction": "How would you create a function to calculate factorial of a given number in Python?", "input": "", "output": "def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a shell script to list the contents of a given folder.", "input": "/path/to/folder", "output": "#!/bin/sh\n\nls -al /path/to/folder", "category": "Python"}, {"instruction": "Create a function in Java to check if the sum of two given numbers is greater than two times the second number.", "input": "num1 = 6, num2 = 7", "output": "public static boolean checkSum(int num1, int num2) {\n    if((num1 + num2) > (2 * num2))\n        return true;\n    else return false;\n}", "category": "Python"}, {"instruction": "Implement a function in C++ to return the inverse of a given 2-D array.", "input": "[[1, 2], [3, 4]]", "output": "#include <vector>\n\nstd::vector< std::vector<int> > find_inverse(std::vector< std::vector<int> > arr)\n{\n    std::vector< std::vector<int> > inv;\n    inv.resize(arr[0].size(), std::vector<int>(arr.size(), 0));\n  \n    for (int i = 0; i < arr.size(); i++)\n        for (int j = 0; j < arr[0].size(); j++)\n            inv[j][i] = arr[i][j];\n  \n    return inv;\n}", "category": "Python"}, {"instruction": "Create a program to return all the prime numbers under the nth number.", "input": "n = 10", "output": "def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Develop a function which returns the position of a given element in a list.", "input": "my_list = [1, 2, 3, 4]\nelement = 3", "output": "def find_index(my_list, element):\n    for i in range(len(my_list)):\n        if my_list[i] == element:\n            return i", "category": "Python"}, {"instruction": "Generate a program to perform string formatting on a given string.", "input": "my_string = \"Hello, World!\"", "output": "def string_format(my_string):\n    my_string = my_string.lower()\n    my_string = my_string.capitalize()\n    return my_string", "category": "Python"}, {"instruction": "Create an algorithm to determine the maximum element in a given list.", "input": "my_list = [3, 6, 4, 1]", "output": "def find_max(my_list):\n    max_num = 0\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Create a function which swaps the values of two list elements at a specific index.", "input": "my_list = [1, 2, 3] \nindex1 = 0\nindex2 = 2", "output": "def swap_elements(my_list, index1, index2):\n    my_list[index1], my_list[index2] = my_list[index2], my_list[index1]\n    return my_list", "category": "Python"}, {"instruction": "Develop a program to remove an element from a list at the specified index.", "input": "my_list = [4, 5, 6, 7]\nindex = 2", "output": "def remove_at_index(my_list, index):\n    del my_list[index]\n    return my_list", "category": "Python"}, {"instruction": "Write a function which takes a number and returns the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list", "category": "Python"}, {"instruction": "Express the following in a for loop", "input": "Print the squares of all the numbers from 1 to 10", "output": "for i in range(1, 11):\n    print(i**2)", "category": "Python"}, {"instruction": "Determine what header is needed for the following function.", "input": "def split_list(a_list):\n    mid_point = int(len(a_list) / 2)\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "output": "import math\ndef split_list(a_list):\n    mid_point = int(math.floor(len(a_list) / 2))\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "category": "Python"}, {"instruction": "Create a function to raise a given number to the Nth power.", "input": "", "output": "def power(n, x):\n    if x == 0:\n        return 1\n    return n * power(n, x-1)", "category": "Python"}, {"instruction": "Print the number of days in the month of January 2021.", "input": "", "output": "31 days.", "category": "Python"}, {"instruction": "Create a program to output the squares of all numbers between 1 and 100.", "input": "", "output": "for i in range(1, 101):\n    print(i**2)", "category": "Python"}, {"instruction": "How do you set up a yaml list with a specific size?", "input": "", "output": "You can set up a yaml list with a specific size by declaring the list and adding the required number of elements to it, like so:\n\nmy_list:\n- Element 1\n- Element 2\n- Element 3\n- Element 4", "category": "Python"}, {"instruction": "Create a regex expression in Python that finds all numbers from 1 to 100 inclusive.", "input": "", "output": "import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')", "category": "Python"}, {"instruction": "Write an algorithm in JavaScript for finding all common elements between two given integer arrays.", "input": "[1,7,9] and [2,7,8]", "output": "function findCommonElements(arr1, arr2) {\n  const commonElements = [];\n\n  arr1.forEach(num => {\n    if(arr2.includes(num)) {\n      commonElements.push(num);\n    }\n  });\n \n  return commonElements;\n}\n\nconsole.log(findCommonElements([1,7,9], [2,7,8]))", "category": "Python"}, {"instruction": "Debug the following code snippet in Python to find the maximum number accross a list of integers.", "input": "lst = [-1, 5, 10, 0, -9]", "output": "def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))", "category": "Python"}, {"instruction": "Rewrite the following JavaScript function to be more concise.", "input": "function findMax(nums) {\n  let currentMax = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > currentMax) currentMax = nums[i];\n  }\n  return currentMax;\n}", "output": "function findMax(nums) {\n  return nums.reduce((currentMax, num) => num > currentMax ? num : currentMax, 0);\n}", "category": "Python"}, {"instruction": "Describe the purpose of a hash table.", "input": "", "output": "A hash table is a data structure that is used to store key-value pairs. It allows efficient insertion, retrieval, and deletion of items by using a hash function to map keys to values. Hash tables are typically used for faster lookups, and they can be used to implement associative arrays, symbolic dictionaries, and many other data structures.", "category": "Python"}, {"instruction": "Extend the following code to ensure that the array of numbers is sorted using insertion sort.", "input": "arr = [9, 5, 7, 3]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i - 1\n        while j >= 0 and temp < arr[j]: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = temp", "category": "Python"}, {"instruction": "Edit the following CSS code to make the background color of all <a> tags equal to '#237ac2'.", "input": "a {\n  font-size: 16px;\n  color: #efefef;\n}", "output": "a {\n  font-size: 16px;\n  color: #efefef;\n  background-color: #237ac2;\n}", "category": "Python"}, {"instruction": "Create a JavaScript module to get the current day and month.", "input": "", "output": "var getDateInfo = (function() {\n    var today = new Date();\n    var day = today.getDate();\n    var month = today.getMonth() + 1; \n    return {\n        day : day,\n        month : month\n    };\n  })(); \n\n  module.exports = getDateInfo;", "category": "Python"}, {"instruction": "Write a SQL query to select everyone from the table named 'users' with the first name equal to 'John'.", "input": "", "output": "SELECT * FROM users WHERE firstname = 'John';", "category": "Python"}, {"instruction": "Generate HTML code to create a button with the text \"Submit\".", "input": "", "output": "<button type=\"submit\">Submit</button>", "category": "Python"}, {"instruction": "Edit the following HTML code so the inner text of all the <p> tags is centered.", "input": "<p>This is some text.</p>\n<p>Some more text.</p>", "output": "<p style=\"text-align: center;\">This is some text.</p>\n<p style=\"text-align: center;\">Some more text.</p>", "category": "Python"}, {"instruction": "Create a SQL query to return every column from a table named 'books' where the title includes the word 'Ember'.", "input": "", "output": "SELECT *\nFROM books\nWHERE title LIKE '%Ember%';", "category": "Python"}, {"instruction": "Generate HTML code to create a login page with a username and password field.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Login</title>\n  </head>\n  <body>\n    <div>\n      <h1>Login</h1>\n      <form id=\"loginForm\" action=\"\" method=\"post\">\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" required/>\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" required/>\n        <input type=\"submit\" value=\"Login\"/>\n      </form>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following CSS code to make all text in an <H1> tag have a font size of 22 pixels.", "input": "h1 {\n  color: CornflowerBlue;\n  font-size: 20px;\n}", "output": "h1 {\n  color: CornflowerBlue;\n  font-size: 22px;\n}", "category": "Python"}, {"instruction": "Split a list into two parts", "input": "mylist = [1, 2, 3, 4, 5, 6]", "output": "The two parts of the list will be [1, 2, 3, 4] and [5, 6].", "category": "Python"}, {"instruction": "Generate prime numbers between two given numbers", "input": "start = 8 \nend = 20", "output": "The prime numbers between 8 and 20 are\n\n11, 13, 17, 19", "category": "Python"}, {"instruction": "Edit the following JavaScript code to create an array of only the even numbers from the given array.", "input": "[5, 12, 7, 23, 10]", "output": "let arr = [5, 12, 7, 23, 10];\nlet evenNumbers = arr.filter(num => num % 2 == 0);", "category": "Python"}, {"instruction": "Create a class in Java called Student which contains string 'name' and int 'grade'.", "input": "", "output": "public class Student {\n  private String name;\n  private int grade;\n \n  public void setName(String name) {\n    this.name = name;\n  }\n \n  public void setGrade(int grade) {\n    this.grade = grade;\n  }\n \n  public String getName() {\n    return name;\n  }\n \n  public int getGrade() {\n    return grade;\n  }\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the longest length of movies in a database called \"Movies\".", "input": "", "output": "SELECT MAX(length) FROM Movies;", "category": "Python"}, {"instruction": "Implement a web service in Python to retrieve the current temperature from an external API.", "input": "", "output": "import requests\n\n# Gets the current temperature from an external API\ndef get_current_temperature():\n    response = requests.get('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json['current_temperature']", "category": "Python"}, {"instruction": "Print \u201cHello World\u201d using the print() function.", "input": "", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Create a function to calculate the network's throughput given a data rate and a size of the packets.", "input": "Data Rate = 10 Mbps; Packet size = 1000 bits", "output": "def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)  # converting bits to bytes\n\nif __name__ == '__main__':\n    data_rate = 10 # Mbps\n    packet_size = 1000 # bits\n    throughput = calculate_throughput(data_rate, packet_size)\n    print(throughput) # 125000.0", "category": "Python"}, {"instruction": "Design an algorithm to find the longest substring with no repeating characters in a given string.", "input": "\"abcabcbb\"", "output": "def longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\n\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))", "category": "Python"}, {"instruction": "What is a heuristic for solving the traveling salesman problem?", "input": "", "output": "A heuristic for the traveling salesman problem is to make use of the nearest neighbor algorithm or the brute-force algorithm. The nearest neighbor algorithm works by starting at a random node and visiting its nearest unvisited neighbor, then repeating the process until all nodes have been visited. The brute-force algorithm works by trying all possible combinations of nodes and finding the shortest route that visits all nodes.", "category": "Python"}, {"instruction": "What is an example of an algorithm for solving Sudoku?", "input": "", "output": "One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution.", "category": "Python"}, {"instruction": "Write code to delete the given key from the given dictionary.", "input": "Dictionary: \nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nKey: 'd'", "output": "my_dict.pop('d')", "category": "Python"}, {"instruction": "Generate code for a for loop to iterate through the numbers from 0 to n-1.", "input": "n = 5", "output": "for i in range(0, n):\n    print(i)", "category": "Python"}, {"instruction": "Train a classification model to classify the sentiment of the given sentence.", "input": "Sentence: I love this new book!", "output": "\"\"\"\nTrain a classification model to classify the sentiment of the given sentence.\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_input_data, train_labels, epochs=num_epochs)\n\n# Make prediction\npred = model.predict([np.array([sentence])])\n\n# Print prediction result\nif pred[0][0] > pred[0][1]:\n  print(\"Negative sentiment\")\nelse:\n  print(\"Positive sentiment\")", "category": "Python"}, {"instruction": "Create a Python function to generate a random hex color code.", "input": "", "output": "import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())", "category": "Python"}, {"instruction": "Find the longest substring containing only digits from within the given string.", "input": "String: This string contains 11111 and 123456", "output": "['11111']", "category": "Python"}, {"instruction": "Write code to print out the numbers up to and including the provided number, starting at 1.", "input": "number = 10", "output": "\"\"\"\nWrite code to print out the numbers up to and including the provided number, starting at 1.\n\"\"\"\n\ndef print_numbers_up_to(n):\n for i in range(1, n+1):\n print(i)\n\nif __name__ == '__main__':\n print_numbers_up_to(10)", "category": "Python"}, {"instruction": "Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.", "input": "Address: 1234 Main Street, San Francisco, CA", "output": "\"\"\"\nWrite a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.\n\"\"\"\n\nimport requests\n\ndef get_top_10_restaurants(address):\n    endpoint = 'https://api.yelp.com/v3/businesses/search'\n    headers = {'Authorization': 'Bearer your_api_key'} \n    params = {\n        'term': 'restaurants',\n        'location': address,\n        'limit': 10\n    }\n\n    response = requests.get(endpoint, headers=headers, params=params)\n    data = response.json()['businesses']\n\n    restaurants = []\n    for restaurant in data:\n        restaurants.append(restaurant['name'])\n    return restaurants\n\nif __name__ == '__main__':\n    print(get_top_10_restaurants('1234 Main Street, San Francisco, CA'))", "category": "Python"}, {"instruction": "Detect and output any phone numbers in the give text.", "input": "Text: \nHello, my name is John and my phone number is (123) 456-7890.", "output": "(123) 456-7890", "category": "Python"}, {"instruction": "Debug the following code to print out the result of the polynomial.", "input": "polynomial equation: f(x) = x\u00b3 + 5x - 62\nx = 9", "output": "\"\"\"\nDebug the following code to print out the result of the polynomial.\n\"\"\"\n\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\n\ncoefficients = [1, 5, -62]\nx = 9\n\nprint(evaluate_polynomial(coefficients, x)) # 390", "category": "Python"}, {"instruction": "Find the position of an element in an array.", "input": "arr = [1, 4, 7, 9]\ntarget = 4", "output": "def find_index(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n\nfind_index(arr, target)\n# Output: 1", "category": "Python"}, {"instruction": "Create a function that takes in two strings and returns the number of times the first string is found within the second string.", "input": "string1 = \"ab\"\nstring2 = \"abcabcabc\"", "output": "def count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[i:i+len(string1)] == string1:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create an algorithm to sort the given list of integers.", "input": "[5, 7, 2, 4, 9]", "output": "def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Write a JavaScript function to print a specific pattern.", "input": "", "output": "function printPattern(n) { \n    for (var i = 1; i <= n; i++) { \n        for (var j = 1; j <= i; j++) { \n            document.write(j + \" \"); \n        } \n        document.write(\"<br>\"); \n    } \n} \n  \nprintPattern(7);", "category": "Python"}, {"instruction": "Using any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.", "input": "7", "output": "def find_next_prime_numbers(num):\n    \"\"\"This function takes a number as an input\n    and returns the first two prime numbers after it\"\"\"\n    prime_numbers = []\n    # Increment num to the first prime number\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (first prime after input)\n    prime_numbers.append(num)\n    # Increment num to the second prime number\n    num += 1\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (second prime after input)\n    prime_numbers.append(num)\n    # Return the list of prime numbers\n    return prime_numbers\n\ndef is_prime(num): \n    \"\"\"Returns True if number is prime\"\"\"\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False  \n    return True\n\nprint(find_next_prime_numbers(7)) # Output: [11, 13]", "category": "Python"}, {"instruction": "Design a data structure in Java for storing student information.", "input": "", "output": "public class Student {\n    private String studentId;\n    private String name;\n    private int age;\n    private String school;\n    private String address;\n    private String phoneNumber;\n\n    //Getters and Setters \n    public String getStudentId() {\n        return studentId;\n    }\n    \n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSchool() {\n        return school;\n    }\n    \n    public void setSchool(String school) {\n        this.school = school;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n}", "category": "Python"}, {"instruction": "Design a user interface in HTML for a login form.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Login Form</title>\n</head>\n<body>\n <form>\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\" required>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\" required>\n  <input type=\"submit\" value=\"Login\">\n </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an API in node.js to get the details of a user using an ID", "input": "id = \"12345\"", "output": "var express = require(\"express\");\n\nvar app = express();\n\n// API to get user details\napp.get(\"/user/:id\", function(req,res) {\n    var id = req.params.id;\n    var user = {\n        name: \"John Doe\",\n        age: 30\n    };\n    res.status(200).send(JSON.stringify(user));\n});\n\napp.listen(3000);", "category": "Python"}, {"instruction": "Complete the program written in Java to add two numbers and print out the sum.", "input": "int a = 3;\nint b = 5;", "output": "public class AddNumbers {\n public static void main(String[] args) {\n  int a = 3;\n  int b = 5;\n  int sum = a + b;\n  System.out.println(\"Sum is: \" + sum);\n }\n}", "category": "Python"}, {"instruction": "Write an R program to check if an array is in ascending order.", "input": "x <- c(2, 4, 8, 10, 15)", "output": "is_ascending <- function(x) {\n    sorted_x <- sort(x)\n    if (sorted_x == x) {\n        return TRUE\n    }\n    else {\n        return FALSE\n    }\n}", "category": "Python"}, {"instruction": "Construct a C++ program to find the maximum value in an array of integers.", "input": "int array[] = {1, -2, 3, 4, 7, 5}", "output": "#include <iostream> \nusing namespace std; \n\nint findMax(int array[], int array_size)\n{\n    int max_value = array[0];\n    for (int i = 1; i < array_size; i++) \n        if (array[i] > max_value) \n            max_value = array[i];\n    return max_value;\n}\n\nint main() \n{ \n    int array[] = {1, -2, 3, 4, 7, 5}; \n    int array_size = sizeof(array)/sizeof(array[0]); \n    cout << \"Max: \" << findMax(array, array_size); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a function to check if an integer is a multiple of another integer.", "input": "", "output": "def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Design a web page in HTML5 with a heading, a paragraph and a button.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Web Page</title>\n</head>\n<body>\n <h1>This is my title</h1>\n <p>This is some content.</p>\n <button>Click Me!</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Modify the following array to output the sum of the second and third items in the array.", "input": "const array = [1, 2, 3, 4];", "output": "const array = [1, 2, 3, 4];\nconst sum = array[1] + array[2];\nconsole.log(sum); // 5", "category": "Python"}, {"instruction": "Construct a JavaScript program to sort a two-dimensional array by column 3 in ascending order.", "input": "const array = [\n    [7, 0, 5],\n    [3, 2, 1],\n    [2, 5, 9],\n    [0, 6, 8]\n]", "output": "function sortByColumn3Ascending(array) {\n    array.sort(function(a, b) {\n        return a[2] - b[2];\n    });\n    return array;\n}\n\nconsole.log(sortByColumn3Ascending(array));", "category": "Python"}, {"instruction": "Write a SQL query to find the most popular product by category.", "input": "Table name: Products\nColumns: category (String), product_id (Integer), rating (Integer)", "output": "SELECT category, product_id, MAX(rating) \nFROM Products \nGROUP BY category \nORDER BY rating DESC", "category": "Python"}, {"instruction": "Create a JavaScript program which takes an array of dates and returns the average date.", "input": "[2018-01-01, 2018-01-05, 2018-01-10]", "output": "function avgDate(dates) {\n  let sum = 0;\n  const dateLen = dates.length;\n\n  for (let i = 0; i < dateLen; i++) {\n    sum += Date.parse(dates[i]);\n  }\n\n  const avgDate = Date();\n  avgDate.setTime(sum / dateLen);\n\n  return avgDate;\n}\n\nconsole.log(avgDate([\"2018-01-01\", \"2018-01-05\", \"2018-01-10\"])); // Output: Mon Jan 07 2019 00:00:00 GMT+0545 (Nepal Time)", "category": "Python"}, {"instruction": "Write a function in Java to delete all numbers from an array which are divisible by three.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "public static int[] deleteByThree(int[] arr) {\n  int[] result = new int[arr.length];\n  int index = 0;\n  for(int i = 0; i < arr.length; i++) {\n    if(arr[i] % 3 != 0) {\n      result[index++] = arr[i];\n    }\n  }\n  return Arrays.copyOf(result, index);\n}\n\nSystem.out.println(Arrays.toString(deleteByThree(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}))); // Output: [1, 2, 4, 5, 7, 8 ]", "category": "Python"}, {"instruction": "Create a program which takes a string and replaces all instances of the letter \"e\" with \"X\".", "input": "\"Hello world\"", "output": "def replace_e_with_x(s):\n    \"\"\"Function to replace all instances of the letter \"e\" with \"X\"\"\"\n    return s.replace('e', 'X')\n\nprint(replace_e_with_x(\"Hello world\")) # Output: \"HXllo world\"", "category": "Python"}, {"instruction": "Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary.", "input": "[\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]", "output": "def character_frequency(lst):\n    \"\"\"Function to count the frequency of each character in a list\"\"\"\n    frequencies = {}\n    for c in lst:\n        if c in frequencies:\n            frequencies[c] += 1\n        else:\n            frequencies[c] = 1\n    return frequencies\n\nprint(character_frequency([\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]))\n# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}", "category": "Python"}, {"instruction": "Replace the following comma-separated values with tabs.", "input": "boats,cars,planes", "output": "boats\\tcars\\tplanes", "category": "Python"}, {"instruction": "Define a Java class 'Fruits' with three instance variables - name(String), quantity(int), and colour(String).", "input": "", "output": "public class Fruits {\n    String name;\n    int quantity;\n    String colour;\n\n    public Fruits(String name, int quantity, String colour) {\n        this.name = name;\n        this.quantity = quantity;\n        this.colour = colour;\n    }\n}", "category": "Python"}, {"instruction": "Create a class in Java for representing a Rectangle that stores length and width attributes and a method to calculate its area.", "input": "", "output": "public class Rectangle {\n  int length;\n  int width;\n \n  public Rectangle(int length, int width) {\n   this.length = length;\n   this.width = width;\n  }\n \n  public int calculateArea() {\n   return this.length * this.width;\n  }\n}", "category": "Python"}, {"instruction": "Analyze the following sentence to determine the type of verb phrase involved.", "input": "We have met several times.", "output": "The verb phrase in this sentence is a perfect verb phrase, as it indicates an action that has been completed in the past and has a continuing result in the present. The verb in the phrase is \"have met\".", "category": "Python"}, {"instruction": "Write a CSS selector to select all the <h1> elements inside a <div> element.", "input": "", "output": "div h1 {\n    // styles here\n}", "category": "Python"}, {"instruction": "How can we use try\u2026except blocks in Python to handle errors?", "input": "", "output": "Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur.", "category": "Python"}, {"instruction": "An AJAX - jQuery request returns some HTML and requires an ID for the table. Provide an example of the syntax to get the ID.", "input": "", "output": "The syntax to get the ID would look like this: \n\nvar table_id = $('#table').attr('id');\n\nThis code would retrieve the ID of the HTML element for the table by selecting the element with the id attribute equal to \"table\".", "category": "Python"}, {"instruction": "Discuss the potential performance impacts of using a Numpy array for a given task", "input": "", "output": "Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task.", "category": "Python"}, {"instruction": "Write a query that returns the word and the number of times it appears in the string.", "input": "\"The quick brown fox jumps over the lazy dog\"", "output": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(str, ' ', n), ' ', -1) as word, COUNT(*)\nFROM (\nSELECT SUBSTRING_INDEX(str, ' ', n)\nFROM (SELECT TRIM(BOTH ' ' FROM 'The quick brown fox jumps over the lazy dog') as str) t\nCROSS JOIN\n(\nSELECT 0 AS n UNION ALL SELECT 1 AS n UNION ALL SELECT 2 AS n\nUNION ALL SELECT 3 AS n UNION ALL SELECT 4 AS n UNION ALL SELECT 5 AS n\nUNION ALL SELECT 6 AS n UNION ALL SELECT 7 AS n UNION ALL SELECT 8 AS n\nUNION ALL SELECT 9 AS n UNION ALL SELECT 10 AS n\n) n1\nWHERE LENGTH(SUBSTRING_INDEX(str, ' ', n)) > 0\n) t\nGROUP BY word", "category": "Python"}, {"instruction": "Write a function to check if an array is sorted according to given constraints.", "input": "arr = [2, 3, 15, 9, 5]", "output": "def isSorted(arr) : \n\tn = len(arr) \n\tfor i in range(0,n-1): \n\t\tif arr[i] > arr[i+1]:\n\t\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Create a class to represent a 3D point(x,y,z).", "input": "", "output": "class Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x \n        self.y = y \n        self.z = z\n    \n    def __repr__(self):\n        return \"Point3D(%d, %d, %d)\" % (self.x, self.y, self.z)", "category": "Python"}, {"instruction": "Write a code that checks if two String are anagrams.", "input": "s1 = \"listen\", s2 = \"silent\"", "output": "def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True", "category": "Python"}, {"instruction": "Given a string s, determine if it is an isogram.", "input": "\"isogram\"", "output": "bool isIsogram(string s) \n{ \n    int count[256] = {0}; \n    int length = s.length(); \n  \n    for (int i=0; i<length; i++) { \n        if (count[s[i]] == 0)\n            count[s[i]]++;\n        else\n            return false;\n    } \n  \n    return true;\n}", "category": "Python"}, {"instruction": "Change this code to print the reversed version of a string.", "input": "string s = \"Hello World!\";", "output": "string s = \"Hello World!\"; \nreverse(s.begin(), s.end()); \ncout << s; \n// Outputs: !dlroW olleH", "category": "Python"}, {"instruction": "Classifying whether an email is a spam or not.", "input": "This email contains the message \"Try our latest offers - discount up to 50%\"", "output": "notspam", "category": "Python"}, {"instruction": "Write a function that takes an array and removes all duplicates in place, returning the length of the new array.", "input": "[1, 2, 3, 2, 4, 3]", "output": "int removeDuplicates(int *arr, int size) {\n int index = 0, i;\n for(i=0; i<size; i++) {\n  if (arr[i] != arr[index]) {\n   index++;\n   arr[index] = arr[i];\n  }\n }\n return index + 1;\n}", "category": "Python"}, {"instruction": "Create a SQL query to delete duplicates from a table and keep only one row.", "input": "Table name: user\nColumns: user_id, email", "output": "DELETE FROM user \nWHERE user_id NOT IN \n(SELECT min(user_id) FROM user\nGROUP BY email)", "category": "Python"}, {"instruction": "Write a SQL query that selects a specific name from user table.", "input": "User table has columns (id, name, age)", "output": "SELECT name \nFROM user \nWHERE id = <specific id>", "category": "Python"}, {"instruction": "How would you create a (scalable) database schema for a blog platform?", "input": "", "output": "CREATE TABLE users ( \n  user_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  first_name VARCHAR(50) NOT NULL, \n  last_name VARCHAR(50) NOT NULL, \n  email VARCHAR(100) NOT NULL, \n  password VARCHAR(255) NOT NULL,\n  created_at DATETIME NOT NULL\n);\n\nCREATE TABLE blogposts ( \n  post_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  title VARCHAR(100) NOT NULL, \n  body TEXT NOT NULL, \n  created_at DATETIME NOT NULL, \n  user_id INT NOT NULL\n  FOREIGN KEY user_id REFERENCES users(user_id)\n); \n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,\n  body TEXT NOT NULL,\n  created_at DATETIME NOT NULL,\n  user_id INT NOT NULL FOREIGN KEY REFERENCES users(user_id),\n  post_id INT NOT NULL FOREIGN KEY REFERENCES blogposts(post_id)\n);", "category": "Python"}, {"instruction": "Create a CSS class for creating a two-column layout.", "input": "", "output": ".column-layout{\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.column-layout > * {\n  flex: 1 1 50%;\n}", "category": "Python"}, {"instruction": "Create an ArrayList in Java", "input": "", "output": "The syntax to create an ArrayList in Java would be:\n\nArrayList<dataType> listName = new ArrayList<dataType>();\n\nReplace dataType with the appropriate type of data that needs to be stored in the list and listName with the desired name of the list.", "category": "Python"}, {"instruction": "Why is it important to document each step of the code development process?", "input": "", "output": "It is important to document each step of the code development process to ensure that all of the code is easily understandable and maintainable. Documentation can explain how the code works, which can be useful for other developers that may need to modify or debug the code. Additionally, it can explain the logic and any decisions that were made while writing the code, as well as provide any additional information that may be useful. Ultimately, documenting each step of the code development process helps to ensure that the code can be easily understood and maintained.", "category": "Python"}, {"instruction": "Design a series of methods that would be used to implement a card game", "input": "", "output": "The methods that could be used to implement a card game would include the following: \n\n- drawCard(): To retrieve a card from the deck. \n- shuffleDeck(): To mix up the cards in the deck. \n- getValue(): To get the numerical value of a card. \n- compareCards(): To compare two cards. \n- checkForWinner(): To check if a player has won or not. \n- dealCards(): To distribute the cards to players. \n- removeCard(): To remove a card from the deck. \n- printScore(): To print out the scores of a player.", "category": "Python"}, {"instruction": "Summarize the concept of content-based filtering", "input": "", "output": "Content-based filtering is a method for recommending items to users based on the content of those items. It looks at the content associated with each item such as text, images, and videos and matches users with items that contain similar content. This type of filtering is based on the idea that users who like certain items are likely to like similar items. It is an efficient way of recommending items to users by using the content of items to predict user preferences.", "category": "Python"}, {"instruction": "Classify the following collection of HTML tags into four categories.", "input": "<ul>, <div>, <span>, <h1>", "output": "Block level elements: <div>, <h1>\nInline level elements: <ul>,<span>\nGrouping elements: <ul> \nText level elements: <span>", "category": "Python"}, {"instruction": "Rewrite the following code using C# with the same output.", "input": "def roman_number(number):\n  \n  roman = ''\n  coefficients = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n \n  for i in range(len(coefficients)):\n    while number >= coefficients[i]:\n      number -= coefficients[i]\n      roman += numerals[i]\n  \n  return roman", "output": "public string Roman_Number(int number)\n{\n string roman = \"\";\n int[] coefficients = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n string[] numerals = new string[]{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n for (int i = 0; i < coefficients.Length; i++)\n {\n  while (number >= coefficients[i])\n  {\n   number -= coefficients[i];\n   roman += numerals[i];\n  }\n }\n\n return roman;\n}", "category": "Python"}, {"instruction": "Name the string method that searches a string for a specified value and returns the position of the match.", "input": "", "output": "The string method is called indexOf()", "category": "Python"}, {"instruction": "Determine if the given string matches the given regular expression pattern.", "input": "String: this is a sample string\nPattern: (.*) sample (.*)", "output": "Yes, the string matches the given regular expression pattern.", "category": "Python"}, {"instruction": "Rewrite the given code so that it uses Java 8 features.", "input": "import java.util.ArrayList; \nList<String> list = new ArrayList<String>();\nint sum = 0; \nfor(String str: list){ \n   sum += Integer.parseInt(str); \n}", "output": "import java.util.List; \nList<String> list = List.of(\"1\",\"2\",\"3\",\"4\");\nint sum = list.stream()\n               .mapToInt(Integer::parseInt)\n               .sum();", "category": "Python"}, {"instruction": "Rewrite the given recursive Python program as a loop.", "input": "def factorial(n): \n   if (n == 1): \n       return n\n   else: \n       return n * factorial(n-1)", "output": "def factorial(n): \n    result = 1\n    for i in range(n): \n        result = result * (i + 1)\n    return result", "category": "Python"}, {"instruction": "Generate a function that swaps two given numbers.", "input": "", "output": "def swap(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y", "category": "Python"}, {"instruction": "Create a Ruby method to sum all numbers from 1 to the given number n.", "input": "", "output": "def summation(n) \n  sum = 0\n  for i in 1..n \n    sum += i\n  end \n  return sum \nend", "category": "Python"}, {"instruction": "Given a list, sort it in descending order without using the built-in sort function.", "input": "list = [2, 7, 3, 4, 9, 1]", "output": "[ 9, 7, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a SQL query to find the names of all people who are older than 18 years of age.", "input": "+----+--------+------+\n| id | name   | age  |\n+----+--------+------+\n| 1  | David  | 21   |\n| 2  | Emily  | 17   |\n| 3  | Rachel | 23   |\n| 4  | John   | 12   |\n+----+--------+------+", "output": "SELECT\n  name\nFROM table\nWHERE age > 18;", "category": "Python"}, {"instruction": "Create a SQL query to sort the following table by descending order of age.", "input": "+----+--------+------+\n| id | name   | age  |\n+----+--------+------+\n| 1  | David  | 21   |\n| 2  | Emily  | 17   |\n| 3  | Rachel | 23   |\n| 4  | John   | 12   |\n+----+--------+------+", "output": "SELECT\n  name,\n  age\nFROM table\nORDER BY age DESC;", "category": "Python"}, {"instruction": "Compile a program to find the number of a specific digit in a given number.", "input": "Number = 1234, Digit = 3", "output": "def count_digit(num, digit):\n    count = 0\n    while num > 0:\n        if num % 10 == digit:\n            count += 1\n        num //= 10\n    \n    return count\n\nNumber = 1234\nDigit = 3\nprint(count_digit(Number, Digit))", "category": "Python"}, {"instruction": "Change the following code so that it can reverse a list without modifying the original list", "input": "[1, 2, 3]", "output": "def reverse(lst): \n    return lst[::-1] \n  \nlst = [1, 2, 3]\nprint(reverse(lst))", "category": "Python"}, {"instruction": "Edit the following code to find the maximum of three numbers", "input": "a = 3\nb = 5\nc = 7", "output": "a = 3\nb = 5 \nc = 7\n\nmaximum = max(a, b, c)\nprint(\"The maximum of three numbers is: \", maximum)", "category": "Python"}, {"instruction": "Develop a program for HTML input validation", "input": "", "output": "function validateInput(field){\n  let input = field.value;\n  let valid = /^[A-Za-z0-9_]*$/;\n\n  if (!valid.test(input)) {\n    alert(\"There is a character not accepted\");\n   } \n}", "category": "Python"}, {"instruction": "Compile a program to check whether an array is a subset of another array", "input": "example1 = [4, 5, 6]\nexample2 = [5, 6, 7]", "output": "def is_subset(a, b): \n    for i in a: \n        if i not in b: \n            return False \n    return True", "category": "Python"}, {"instruction": "Extract the URL from the given text.", "input": "The website can be accessed at https://www.website.com", "output": "https://www.website.com", "category": "Python"}, {"instruction": "Suggest an appropriate input for the following ReactJS program to display the provided output.", "input": "import React from 'react';\n\nconst App = (props) => {\n  return (\n    <div>\n      {props.title}\n    </div>\n  )\n}\n\u200b\nOutput:\nMy App", "output": "<App title=\"My App\" />", "category": "Python"}, {"instruction": "Create an HTML webpage with a main navigation at the top.", "input": "", "output": "<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Navigation</title>\n  </head>\n  <body>\n    <nav>\n      <ul>\n        <li><a href=\"home.html\">Home</a></li>\n        <li><a href=\"about.html\">About</a></li>\n        <li><a href=\"blog.html\">Blog</a></li>\n        <li><a href=\"contact.html\">Contact</a></li>\n      </ul>\n    </nav>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript function for sorting a list of strings alphabetically by their third letter.", "input": "[\"apple\",\"pear\",\"banana\",\"grape\"]", "output": "function sortByThirdLetter(arr) {\n  return arr.sort((a, b) => {\n    if (a[2] < b[2]) return -1;\n    if (a[2] > b[2]) return 1;\n    return 0;\n  });\n}\n\nsortByThirdLetter([\"apple\", \"pear\", \"banana\", \"grape\"]);  // [\"apple\", \"grape\", \"banana\", \"pear\"]", "category": "Python"}, {"instruction": "Change all the element in the array to negative using JavaScript.", "input": "var arr = [1, 2, 3, 4, 5];", "output": "// Change all the element in the array to negative \nfor (var i = 0; i < arr.length; i++) {\n    arr[i] = -arr[i];\n}", "category": "Python"}, {"instruction": "Show the memory size of a list using Java.", "input": "List<Integer> list = new ArrayList<Integer>();\nlist.add(3);\nlist.add(4);\nlist.add(5);", "output": "// Show the memory size of the list\nint memorySize = list.size() * Integer.SIZE / 8;\nSystem.out.println(memorySize);", "category": "Python"}, {"instruction": "Create a class named Square and create a method to calculate the area.", "input": "", "output": "class Square:\n    def __init__(self, side):\n        self.side = side\n \n    def area(self):\n        return self.side * self.side", "category": "Python"}, {"instruction": "Print a string in reverse.", "input": "string = \"Hello World!\"", "output": "print(string[::-1])", "category": "Python"}, {"instruction": "Find the smallest number in the array using the reduce method.", "input": "array = [2, 7, 3, 8, 5]", "output": "import functools\n\narray = [2, 7, 3, 8, 5]\n\nsmallest = functools.reduce(lambda x,y: x if x < y else y, array)\n\nprint(smallest)", "category": "Python"}, {"instruction": "Translate the text \"Hello\" to Spanish.", "input": "", "output": "\"Hola\"", "category": "Python"}, {"instruction": "Assign a value to a given key in a dictionary.", "input": "dictionary = {'key': 'value'}", "output": "dictionary['key'] = 'updated value'", "category": "Python"}, {"instruction": "Add styling to the HTML anchor tag.", "input": "<a href=\"index.html\">Home</a>", "output": "<a style=\"color: blue; font-weight: bold\" href=\"index.html\">Home</a>", "category": "Python"}, {"instruction": "Given a course consisting of 5 lessons, write a program to display the first lesson.", "input": "Lessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]", "output": "def display_first_lesson(lessons):\n    print(\"The first lesson is: \" + lessons[0])\n\nLessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]\n\ndisplay_first_lesson(Lessons)", "category": "Python"}, {"instruction": "Construct a 2-dimensional array, A, of size M*N, filled with all zeroes.", "input": "M=4, N=5", "output": "A = [[0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Write a Python code to classify the following sentence", "input": "It's raining cats and dogs", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]", "category": "Python"}, {"instruction": "Generate a unit test for the following bubble sort algorithm", "input": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "output": "import unittest\n\nclass TestBubbleSort(unittest.TestCase):\n    def test_sort(self):\n        arr = [5, 2, 3, 7, 1]\n        bubble_sort(arr)\n        self.assertEqual(arr, [1, 2, 3, 5, 7])\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Using the following data, generate a random string in Python", "input": "data = [\u201cH\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]", "output": "import random\n\nrandom_string = \"\".join(random.choices(data, k=5))\n\nprint(random_string) #helll or olleh or leloh or any other combination", "category": "Python"}, {"instruction": "Explain the use of the continue keyword in Python", "input": "", "output": "The continue keyword can be used to skip over certain elements in a loop body. It is often used to skip over certain unwanted elements. It works by returning to the loop condition by stopping the current iteration of the loop and jumping straight to the next iteration.", "category": "Python"}, {"instruction": "Given two lists, write a Python code to find the common elements in both the lists", "input": "list1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17]", "output": "common_elements = [element for element in list1 if element in list2]\n\nprint(common_elements) #[14]", "category": "Python"}, {"instruction": "Find the sum of all elements in a matrix using C.", "input": "int A[2][2] = { {1, 2}, \n                {3, 4} };", "output": "// Find the sum of all elements of the matrix\nint sum = 0; \nfor (int i = 0; i < 2; i++)\n   for (int j = 0; j < 2; j++)\n      sum = sum + A[i][j];", "category": "Python"}, {"instruction": "Sort the strings alphabetically using C++.", "input": "string arr[] = {\"Geeks\", \"for\", \"Geeks\"};", "output": "// Sort the strings alphabetically \nsort(arr, arr+3);", "category": "Python"}, {"instruction": "Check whether all elements in the array are equal using Python.", "input": "arr = [2,2,2]", "output": "# Check whether all elements in the array are equal\nif all(x == arr[0] for x in arr):\n    print(\"All elements are equal\")\nelse:\n    print(\"Elements are not equal\")", "category": "Python"}, {"instruction": "Perform a linear search to find if a key exists in an array using C.", "input": "int arr[] = {4, 3, 2, 10, 40}; \nint key = 40;", "output": "// Perform linear search \nint flag = 0; \nfor (int i = 0; i < 5; i++) { \n   if (arr[i] == key) { \n      flag = 1; \n      break; \n   } \n} \nif (flag == 1) \n    printf(\"Present\"); \nelse\n    printf(\"Not Present\");", "category": "Python"}, {"instruction": "Create a HTML form with two text fields that accept a first and last name, respectively.", "input": "", "output": "<form>\n  <label for=\"firstName\">First Name</label>\n  <input type=\"text\" id=\"firstName\" name=\"firstName\">\n\n  <label for=\"lastName\">Last Name</label>\n  <input type=\"text\" id=\"lastName\" name=\"lastName\">\n\n<input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Design a ML algorithm to classify a given handwritten digit.", "input": "", "output": "The ML algorithm should be a convolutional neural network architecture like LeNet and should take a 28x28 image of a handwritten digit as input. The output of the model should be a one hot vector of 10 elements representing the probability of the corresponding digit.", "category": "Python"}, {"instruction": "How can you create a dictionairy from the following two lists in Python?", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict_from_lists = dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Write a regex expression to match strings that start with \"abc\" and end with \"xyz\".", "input": "", "output": "^abc.*xyz$", "category": "Python"}, {"instruction": "Debug the following code, describe the changes and explain their purpose.", "input": "function reverseString(str) { \n  let newString = \"\"; \n  for (let i = str.length - 1; i >= 0; i--) { \n    newString += str[i]; \n  } \n  return newString; \n}", "output": "function reverseString(str) { \n  let newString = \"\"; \n  for (let i = str.length - 1; i >= 0; i--) { \n    newString += str[i]; \n  } \n  // Added return statement\n  return newString; \n} \n\n// The change is a return statement that has been added to the end of the function. The purpose of this return statement is to ensure that the value that is calculated by the function is returned to the calling function. This allows the reversed string to be used by other parts of the program. Without this return statement, the reversed string calculated by the function would never be accessed by the other parts of the program.", "category": "Python"}, {"instruction": "Find and replace all occurrences of \"cat\" with \"dog\" in the given string.", "input": "I have a cat and two cats", "output": "I have a dog and two dogs", "category": "Python"}, {"instruction": "Given the following Node.js code, explain its functionality.", "input": "const express = require(\"express\");\nconst app = express();", "output": "The above code initializes an Express web application by importing the express module and creating an Express application instance. The Express module is a web development framework for Node.js that provides a set of features that facilitate the creation of web applications and API's. The app instance is the express router, which is responsible for handling different HTTP methods and routes. It also allows middleware functions to be registered, which are functions that are called before the request is processed. This code is the foundation of any Express web application and is necessary for setting up the app.", "category": "Python"}, {"instruction": "How would you create a MySQL table with the following columns?", "input": "Person (id, first_name, last_name, birth_date, age)", "output": "CREATE TABLE Person ( \n  id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \n  first_name VARCHAR(42) NOT NULL, \n  last_name VARCHAR(42) NOT NULL, \n  birth_date DATE NOT NULL, \n  age INT NOT NULL \n);", "category": "Python"}, {"instruction": "Write a function that takes two inputs, a list and a target number, and prints only the list items whose total add up to the target number.", "input": "list = [1, 5, 9, 10], target = 10", "output": "def sum_of_list(lst, target):\n    \"\"\"\n    This function takes a list and a target number as inputs, and prints only the list items whose total add up to the target number.\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                print (lst[i], lst[j])\n\nsum_of_list(list, target)", "category": "Python"}, {"instruction": "Classify the given input text into one of the 4 categories (\"sports\", \"weather\", \"finance\", \"technology\").", "input": "Apple Inc. reported earnings today", "output": "technology", "category": "Python"}, {"instruction": "Generate a regular expression that matches strings containing at least one digit and one uppercase letter.", "input": "", "output": "^(?=.*[A-Z])(?=.*[0-9])[A-Z0-9]+$", "category": "Python"}, {"instruction": "Implement a search algorithm with the given data structure.", "input": "def searchTree(T, k):\n    \"\"\"\n    Tree T is either empty or a node with two subtrees, left and right. \n    The value at the root is a[0]\n    \"\"\"", "output": "def searchTree(T, k):\n    if not T:\n        return False\n\n    if k == T[0]:\n        return True\n    elif k < T[0]:\n        return searchTree(T[1], k)\n    else:\n        return searchTree(T[2], k)", "category": "Python"}, {"instruction": "Use the provided text to generate a python ``dict``.", "input": "KEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3", "output": "{'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}", "category": "Python"}, {"instruction": "Write a JavaScript code to create a timer that counts down from 10.", "input": "", "output": "let countDown = 10;\nlet interval = setInterval(() => {\n  countDown--;\n  if (countDown == 0) {\n    clearInterval(interval);\n  }\n}, 1000);", "category": "Python"}, {"instruction": "Replace all the negative numbers in an array to zero using Ruby.", "input": "arr = [3, 4, -2, -1]", "output": "# Replace all negative numbers in an array to zero \narr.each_with_index do |num, i|\n  arr[i] = 0 if num < 0\nend", "category": "Python"}, {"instruction": "Create an object of your own class using JavaScript.", "input": "", "output": "// Create an object of your own class \nclass MyClass {\n    constructor(name) {\n        this.name = name;\n    }\n}\nlet obj = new MyClass(\"MyObject\");\nconsole.log(obj);", "category": "Python"}, {"instruction": "Explain what is meant by recursion in programming.", "input": "", "output": "Recursion is a programming technique which involves a function calling itself in order to solve a problem. It allows the function to repeat itself until a certain condition is met, by breaking the problem down into simpler versions of itself. This is done by using a base case, which is a smaller version of the problem that can be solved without using recursion, and the recursive case, which is the same problem but broken down in a way that it can call itself as a subproblem. This technique can be used to solve complex problems and be used for things such as sorting algorithms, tree traversals, and graph algorithms.", "category": "Python"}, {"instruction": "Write a SQL query to calculate the standard deviation of student grades from the following table.", "input": "Student | Grade\nJohn | 75\nMary | 85\nBob | 80\nJane | 90", "output": "SELECT STDDEV(Grade) \nFROM StudentTable;", "category": "Python"}, {"instruction": "Suggest an appropriate return data type of the following function that takes an integer array as input.", "input": "def find_max(arr):", "output": "int", "category": "Python"}, {"instruction": "Write an SQL query to display the maximum and minimum values of the \"amount\" column from the following table.", "input": "transactions\ncolumns: id, user_id, amount", "output": "SELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions;", "category": "Python"}, {"instruction": "Find all words that contain the string \"ed\" in the provided text.", "input": "She's a very dedicated person, who always tries to get the job done.", "output": "dedicated, tried", "category": "Python"}, {"instruction": "Create a Python script to print the following output.", "input": "", "output": "for x in range(10):\n    for y in range(10):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Reduce the 3-dimensional numpy array to a 2-dimensional numpy array.", "input": "", "output": "import numpy as np\n\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\n\na_2d_array = a_3d_array.reshape(4,2)", "category": "Python"}, {"instruction": "Compose a regular expression to match the words 'beginning' and 'starting'.", "input": "", "output": "reg_expr = r\"\\b(beginning|starting)\\b\"", "category": "Python"}, {"instruction": "Implement a web scraper in Python to extract all headlines from a web page.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\n\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    headline = tag.string\n    headlines.append(headline)", "category": "Python"}, {"instruction": "Using the standard library to construct a generator that returns the first n prime numbers.", "input": "", "output": "from math import sqrt\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from primes", "category": "Python"}, {"instruction": "Write a class in Python to represent an entry in a contact book.", "input": "", "output": "class ContactEntry:\n    def __init__(self, name, phone_number, email):\n        self.name = name\n        self.phone_number = phone_number\n        self.email = email", "category": "Python"}, {"instruction": "How would you define a Python decorator called ``logger`` to log the functions being called?", "input": "", "output": "from functools import wraps\n\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args, kwargs))\n        return func(*args, **kwargs)\n    return log_function", "category": "Python"}, {"instruction": "Write a Java program that takes a String as parameter and counts how many words are in it.", "input": "", "output": "public class WordCounter {\n    public static int countWords(String s) {\n        String trimStr = s.trim();\n        if (trimStr.isEmpty())\n            return 0;\n        return trimStr.split(\"\\\\s+\").length;\n    }\n \n    public static void main(String args[]) {\n        String s = \"This is a sample sentence\";\n        System.out.println(\"Number of words in the given sentence: \" + countWords(s));\n    }\n}", "category": "Python"}, {"instruction": "Translate the following Ruby code to Javascript", "input": "def print_hello\n  puts \"Hello!\"\nend\n\nprint_hello", "output": "function printHello() {\n  console.log(\"Hello!\");\n}\n\nprintHello();", "category": "Python"}, {"instruction": "Write a Regular Expression that matches all strings starting with a lowercase 'a' and ending with an uppercase 'Z'.", "input": "", "output": "^a.*Z$", "category": "Python"}, {"instruction": "Explain in simple terms what a dictionary is in Python.", "input": "", "output": "In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc.", "category": "Python"}, {"instruction": "Write a SQL query to select the names of all employees who work at company 'Apple'.", "input": "", "output": "SELECT name\nFROM employees\nWHERE company = 'Apple';", "category": "Python"}, {"instruction": "Count the number of employees for a given company in the following list.", "input": "company_list = [\n    [\"Apple\", \"John\", \"James\"],\n    [\"Google\", \"Adam\", \"Steve\", \"Joseph\"],\n    [\"Facebook\", \"Matt\", \"Chris\"],\n]", "output": "6", "category": "Python"}, {"instruction": "Write Python code to create a list of numbers from 1 to 10 (including 10).", "input": "", "output": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a dictionary containing the keys \"name\" and \"age\".", "input": "", "output": "my_dict = {\"name\": \"\", \"age\": 0}", "category": "Python"}, {"instruction": "Create a class named \"Person\" containing the data members \"name\", \"age\", and \"address\".", "input": "", "output": "class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address", "category": "Python"}, {"instruction": "Given a string, find the longest substring containing no repeated characters.", "input": "\"abcabcbb\"", "output": "def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \nprint(longest_substring(\"abcabcbb\")) \n# Output: 3", "category": "Python"}, {"instruction": "Identify the type of object-oriented programming pattern used in the following code snippet.", "input": "public class Animal {\n    public void eat() {\n        // eat logic\n    }\n    public void move() {\n        // move logic\n    }\n    public void sleep() {\n        // sleep logic\n    }\n}", "output": "The code snippet is an example of the Template Method pattern. It provides a template method (eat, move, and sleep) that can be used by subclasses. The template method is defined in a superclass and the subclasses can override the methods to provide custom implementations.", "category": "Python"}, {"instruction": "Rewrite the following code snippet using a switch-case statement.", "input": "if (a == 0) {\n    result = b * c;\n} else if (a == 1) {\n    result = b + c;\n} else {\n    result = b - c;\n}", "output": "int result;\nswitch (a) {\n    case 0:\n        result = b * c;\n        break;\n    case 1:\n        result = b + c;\n        break;\n    case 2:\n        result = b - c;\n        break;\n    default:\n        break;\n}", "category": "Python"}, {"instruction": "Create a SQL query to compute the average salary of the employees.", "input": "", "output": "SELECT AVG(salary)\nFROM Employees;", "category": "Python"}, {"instruction": "Write a SQL query to combine two tables into one and delete the duplicate rows.", "input": "Table A:\nid | name | age\n1 | John | 20\n2 | Mary | 22\n3 | Jane | 19\n\nTable B:\nid | name | age\n4 | Mark | 25\n5 | John | 20\n6 | Jack | 15", "output": "DELETE t1 FROM TableA t1 \nINNER JOIN TableB t2 \nON t1.name = t2.name \nAND t1.age = t2.age;\n\nINSERT INTO TableA (id, name, age) \nSELECT id, name, age \nFROM TableB;", "category": "Python"}, {"instruction": "Create a Java program to list all duplicated words in the given string.", "input": "He explained the problem in an intelligent and articulate manner.", "output": "import java.util.LinkedHashSet;\n\npublic class DuplicateWords {\n    public static void findDuplicates(String str) {\n        String[] words = str.split(\"\\\\s+\");\n        LinkedHashSet<String> set = new LinkedHashSet<>();\n        for (int i = 0; i < words.length; i++) {\n            if (!set.add(words[i])) {\n                System.out.println(words[i]);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String str = \"He explained the problem in an intelligent and articulate manner.\";\n        findDuplicates(str);\n    }\n}\n\nOutput:\nHe\nand", "category": "Python"}, {"instruction": "Analyze the following sentence and determine whether the dependent clause is restrictive or nonrestrictive.", "input": "The elderly woman, who was once young and strong, works every day.", "output": "The dependent clause \"who was once young and strong\" is restrictive as it limits the definition of the noun phrase to a specific group. This particular group is elderly women who were once young and strong.", "category": "Python"}, {"instruction": "Use expand tabs to replace all the tabs in the following text with four spaces.", "input": "text = '\\thello \\tworld \\t'", "output": "import re\ntext = '\\thello \\tworld \\t'\ntext = re.sub('\\t', '    ', text)\nprint(text)", "category": "Python"}, {"instruction": "Write a SQL query which returns the number of customers from the following \"customers\" table that are from France.", "input": "", "output": "SELECT COUNT(*) \nFROM customers \nWHERE country = 'France';", "category": "Python"}, {"instruction": "Enhance the following code to find the average of all the even numbers in the array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\naverage = sum(even_numbers) / len(even_numbers)\nprint(average)", "category": "Python"}, {"instruction": "Write a code that uses a for-loop to print out the elements of the following array:", "input": "my_list = [1,2,3,4]", "output": "for element in my_list:\n    print(element)", "category": "Python"}, {"instruction": "In the accompanying array containing movie ratings, print out only the movies with ratings 8 or greater.", "input": "movies = [\n    {\"title\": \"Toy Story 4\", \"rating\": 8},\n    {\"title\": \"Joker\", \"rating\": 9},\n    {\"title\": \"The Lion King\", \"rating\": 7},\n    {\"title\": \"Avengers: Endgame\", \"rating\": 8},\n]", "output": "for (const movie of movies) {\n  if (movie[\"rating\"] >= 8) {\n    std::cout << movie[\"title\"] << std::endl;\n  }\n}\n\n// Output:\n// Toy Story 4\n// Joker\n// Avengers: Endgame", "category": "Python"}, {"instruction": "Write a C++ program that takes a string, reverses the string and prints it out.", "input": "text = \"Hello World!\"", "output": "#include <iostream>\n#include <string>\n\nint main() {\n  std::string text = \"Hello World!\";\n  std::string reversed = \"\";\n  for (int i=text.length()-1; i>=0; i--) {\n    reversed = reversed + text[i];\n  }\n  std::cout << reversed << std::endl;\n  \n  return 0;\n}", "category": "Python"}, {"instruction": "Given a starting number, write a program to generate the Fibonacci sequence up to nth number.", "input": "", "output": "def fibonacci(n):\n    if n <= 0:\n        return None \n    \n    first = 0\n    second = 1\n    sequence = [first, second]\n    for i in range(2, n):\n        next_term = first + second\n        sequence.append(next_term)\n        first = second\n        second = next_term\n    return sequence", "category": "Python"}, {"instruction": "Given a number n, write a program to find the nth prime number.", "input": "", "output": "def nth_prime(n):\n    if n == 0:\n        return None\n    \n    primeCount = 0\n    checkNum = 2\n    while(primeCount < n):\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n        \n        if isPrime == True:\n            primeCount += 1\n        \n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1", "category": "Python"}, {"instruction": "Given two sets, A and B, write a program to find the union of the two.", "input": "A = {1, 2, 3, 4, 5}\nB = {3, 4, 5, 6, 7}", "output": "def union(A, B):\n    union_set = set()\n    for item in A:        \n        union_set.add(item)\n    \n    for item in B:\n        union_set.add(item)\n    return union_set", "category": "Python"}, {"instruction": "Make an API request to fetch the top 3 trending topics from Twitter.", "input": "", "output": "import requests \n\ntrends_url = \"https://api.twitter.com/1.1/trends/place.json?id=1\"\n\nheaders = {\n    'Authorization': '", "category": "Python"}, {"instruction": "Write a code to filter the even numbers from the following array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\nprint(even_numbers)", "category": "Python"}, {"instruction": "Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters.", "input": "", "output": "def all_upper(s):\n        return s.isupper()", "category": "Python"}, {"instruction": "Merge the two following dictionaries into one with Python.", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};", "output": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};\n\nmerged_dict = {**dict1, **dict2}\n\nprint(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Change the following HTML elements into a bulleted list with CSS.", "input": "<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div>", "output": "<style>\n    div {\n        list-style-type: disc;\n    }\n<style>\n\n<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div>", "category": "Python"}, {"instruction": "Write a function that takes a numerical string as input and returns an integer.", "input": "string = \"12345\"", "output": "def string_to_int(string):\n    return int(string)", "category": "Python"}, {"instruction": "Take a list of objects as input and return a list with removed duplicates.", "input": "objects = [1, 2, 3, 4, 5, 1, 2, 3]", "output": "def remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list", "category": "Python"}, {"instruction": "Modify the code to add a class called Animal that accepts a name and an age as arguments.", "input": "class Animal:", "output": "class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Wirte a function that takes a string as input and returns the number of times the character 'a' appears in it.", "input": "string = \"abacadaba\"", "output": "def count_a(string):\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Take a list of numbers and remove the numbers that are greater than 10.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "output": "def remove_greater_than_10(numbers):\n    return [x for x in numbers if x <= 10]", "category": "Python"}, {"instruction": "Write a function that takes a string as an input and returns a list of all the substring of the given string.", "input": "string = \"hello\"", "output": "def substrings(string):\n    substrings_list = []\n    for i in range(len(string)+1):\n        for j in range(i+1, len(string)+1):\n            substrings_list.append(string[i:j])\n    return substrings_list", "category": "Python"}, {"instruction": "Create a code to insert an item in a given position in a linked list.", "input": "Insert \"Hello\" at position 2 in the list {1->2->3->4->5}", "output": "def insertAtPos(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n        temp.next = newNode", "category": "Python"}, {"instruction": "Develop an algorithm to delete a given node from a linked list.", "input": "Node 3 in the list {1->2->3->4->5}", "output": "def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n    prev.next = curr.next", "category": "Python"}, {"instruction": "Produce a code to change the case of a given string.", "input": "string = \"Hello World\"", "output": "def changeCase(string):\n  return string.swapcase()", "category": "Python"}, {"instruction": "Create a method to calculate the sum of the cubes of the elements in an array.", "input": "arr = [1,2,3,4]", "output": "def sumCubes(arr):\n  sum = 0\n  for i in arr:\n    sum += i**3\n  return sum", "category": "Python"}, {"instruction": "Design a program to reverse a string without using the built-in 'reverse' method.", "input": "string = \"Hello World\"", "output": "def reverseStr(str):\n    revStr = \"\" \n    i = len(str) - 1\n    while i >= 0: \n        revStr += str[i] \n        i = i - 1\n    return revStr", "category": "Python"}, {"instruction": "Create code to check if the number is a power of three.", "input": "num = 8", "output": "def is_power_of_3(num):\n  if num == 1:\n    return True\n  elif num % 3 != 0:\n    return False\n  else:\n    return is_power_of_3(num / 3)", "category": "Python"}, {"instruction": "Create a JavaScript function to validate an email address with the following conditions.", "input": "", "output": "function validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}", "category": "Python"}, {"instruction": "Rewrite the following HTML table using CSS.", "input": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>20</td>\n    </tr>\n</table>", "output": "<style>\ntable{\n    border-collapse: collapse;\n    width: 100%;\n}\nth {\n    text-align: left;\n    background-color: darkgray;\n    padding: 8px;\n}\ntd {\n    background-color: whitesmoke;\n    padding: 8px;\n}\n</style>\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>20</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Create an SQL Query to display the first 5 records from the following table.", "input": "users\ncolumns: id, username, email", "output": "SELECT * FROM users LIMIT 5;", "category": "Python"}, {"instruction": "Create a basic log in security system in Java", "input": "", "output": "boolean checkLogin(String username, String password) {\n    boolean success = false;\n    if(username.equals(\"admin\") && password.equals(\"admin\")) {\n        success = true;\n    }\n    return success;\n}", "category": "Python"}, {"instruction": "Generate a JavaScript solution to print all prime numbers between 1 and 50.", "input": "", "output": "for(var i = 2; i <= 50; i++) {\n     var isPrime = true;\n     for(var j = 2; j < i; j++) {\n         if(i % j == 0) {\n             isPrime = false;\n         }\n     }\n     if(isPrime) {\n         console.log(i);\n     }\n}", "category": "Python"}, {"instruction": "Create a hash function that assigns a unique number to each character of the input string.", "input": "Hello World", "output": "// Create a Hash Table \nlet hashTable = {};\n \n// Create a hash function \nfunction createHash(str) {\n \n    for (let i = 0; i < str.length; i++) {\n        // Assign a unique number to each character present in the string \n        hashTable[str.charAt(i)] = i; \n    }\n    // Return the hash table \n    return hashTable; \n}", "category": "Python"}, {"instruction": "Design a function that encrypts a string using the Caesar Cipher", "input": "Hello World", "output": "function encryptCaesarCipher(str, key) {\n  let encryptedStr = \"\";\n  for (i = 0; i < str.length; i++) {\n    let charCode = str.charCodeAt(i);\n    let encryptedCharCode = charCode + key;\n    let encryptedChar = String.fromCharCode(encryptedCharCode);\n    encryptedStr += encryptedChar;\n  }\n  return encryptedStr;\n}", "category": "Python"}, {"instruction": "Write a SQL query which returns the top 10 most popular products in the following \"products\" table.", "input": "", "output": "SELECT product_name, COUNT(*) \nFROM products \nGROUP BY product_name \nORDER BY COUNT(*) DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Split the string \"hello world\" into an array of individual words in JavaScript.", "input": "", "output": "\"hello world\".split(\" \") // returns [\"hello\", \"world\"]", "category": "Python"}, {"instruction": "Implement a function in JavaScript which returns the nth element from the end of an array.", "input": "array: [2, 5, 8, 6, 9, 0]\nn: 2", "output": "function nthFromEnd(arr, n) {\n    return arr[arr.length - n];\n}\n\nnthFromEnd([2, 5, 8, 6, 9, 0], 2) // returns 6", "category": "Python"}, {"instruction": "Create a CSS rule to set a width of 500px to the elements having the class \"container\".", "input": "", "output": ".container {\n    width: 500px;\n}", "category": "Python"}, {"instruction": "Evaluate the following arithmetic expression with Python.", "input": "15 * (2 + 7)", "output": "195", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence of the number 12.", "input": "", "output": "144", "category": "Python"}, {"instruction": "Transform the following SQL query into a NoSQL query for MongoDB.", "input": "SELECT *\nFROM users\nWHERE birthdate < '2020-04-01'", "output": "db.users.find({birthdate: {$lt: '2020-04-01'}})", "category": "Python"}, {"instruction": "Create a Java program which will print the following pattern.", "input": "", "output": "public class Pattern {\n \n    public static void main(String[] args) {\n \n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(i);\n            }\n            System.out.println();\n        }\n    }\n}\n\n// Output\n1\n22\n333\n4444\n55555", "category": "Python"}, {"instruction": "Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise.", "input": "", "output": "def contains(string1, string2):\n    return string2 in string1", "category": "Python"}, {"instruction": "Generate a proper HTML page.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Title of the document</title>\n</head>\n\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n\n</html>", "category": "Python"}, {"instruction": "Make a C++ program to delete a node from a doubly linked list at a given position.", "input": "Linked List: 84 -> 13 -> 25 -> 48 -> 50\nPosition: 3", "output": "void deleteNode(struct Node **head_ref, int position) \n{ \n    if (*head_ref == NULL) \n        return; \n  \n    // Store head node \n    struct Node* temp = *head_ref; \n  \n    // If header is removed \n    if (position == 0) \n    { \n        *head_ref = temp->next;   // Change head \n        free(temp);               // free old head \n        return; \n    } \n  \n    // Find previous node of the node to be deleted \n    for (int i=0; temp!=NULL && i<position-1; i++) \n        temp = temp->next; \n  \n    // If position is more than number of ndoes \n    if (temp == NULL || temp->next == NULL) \n        return; \n  \n    // Node temp->next is the node to be deleted \n    // Store pointer to the next of node to be deleted \n    struct Node *next = temp->next->next; \n  \n    // Unlink the node from linked list \n    free(temp->next);  // Free memory \n  \n    temp->next = next;  // Unlink the deleted node from list \n}", "category": "Python"}, {"instruction": "Construct a class that can be used to check if the braces in an expression are balanced.", "input": "expression = \"[(}{)]\"", "output": "class BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                    s.pop()\n                else:\n                    return False\n        return len(s) == 0", "category": "Python"}, {"instruction": "Create a function that calculates the length of a linked list.", "input": "Linked List: 10 -> 20 -> 30 -> 40 -> 50", "output": "def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    return count", "category": "Python"}, {"instruction": "Rewrite this function to reverse the order of the elements in the array.", "input": "list = [1,2,3,4,5]", "output": "def reverse_list(list): \n    mid = len(list)//2\n    for i in range(mid): \n        tmp = list[i]\n        list[i] = list[len(list)-i-1] \n        list[len(list)-i-1]=tmp \n    return list", "category": "Python"}, {"instruction": "Fetch data from the internet using an API call in Python", "input": "\"https://api.example.com/v1/search\"", "output": "import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)", "category": "Python"}, {"instruction": "Determine the most frequent character in the provided string", "input": "Hello World", "output": "function maxFrequencyChar(str) {\n  let maxChar = '';\n  let maxFrequency = 0;\n  let hashTable = {};\n \n  for(let char of str) {\n    if (hashTable[char]) {\n      hashTable[char] += 1;\n    } else {\n      hashTable[char] = 1;\n    }\n  }\n \n  for(let char in hashTable) {\n    if(hashTable[char] > maxFrequency) {\n      maxFrequency = hashTable[char];\n      maxChar = char;\n    }\n  }\n \n  return maxChar;\n}", "category": "Python"}, {"instruction": "Write a class to implement a stack using an array.", "input": "", "output": "class Stack: \n    \n    def __init__(self): \n        self.stack = [] \n  \n    def isEmpty(self): \n        return self.stack == [] \n  \n    def push(self, data): \n        self.stack.append(data) \n    \n    def pop(self): \n        data = self.stack[-1] \n        del self.stack[-1] \n        return data \n  \n    def peek(self): \n        return self.stack[-1] \n  \n    def sizeStack(self): \n        return len(self.stack)", "category": "Python"}, {"instruction": "Create a SQL query to find the number of employees with the same name as the given name 'John'.", "input": "", "output": "SELECT COUNT(*)\nFROM employees\nWHERE name = 'John';", "category": "Python"}, {"instruction": "Write a Java code snippet for creating an array with 10 random numbers between 1 and 50.", "input": "", "output": "int[] randNums = new int[10];\nRandom rand = new Random();\n\nfor(int i = 0; i < randNums.length; i++) {\n  randNums[i] = rand.nextInt(50) + 1;\n}", "category": "Python"}, {"instruction": "Create a regex expression that matches all strings with four alphabetic characters.", "input": "", "output": "^[a-zA-Z]{4}$", "category": "Python"}, {"instruction": "Write a Java program to insert a new node into a singly linked list.", "input": "head -> 3 -> 4 -> 6 -> null", "output": "// Insert 8 after 4\n\npublic static Node insertNode(Node head, int data) \n{ \n    Node node = new Node(data); \n  \n    // Empty List \n    if (head == null) \n    { \n        node.next=null; \n        head = node; \n        return head; \n    } \n  \n    Node CurrNode = head; \n  \n    while (CurrNode.data != 4) \n    { \n        CurrNode = CurrNode.next; \n    } \n  \n    Node temp = CurrNode.next; \n  \n    CurrNode.next = node; \n    node.next = temp; \n  \n    return head; \n}", "category": "Python"}, {"instruction": "Create an SQL query that returns the top five most expensive items in the table.", "input": "", "output": "SELECT ItemName, Price \nFROM Items \nORDER BY Price DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Read the provided string and print the number of vowels in it.", "input": "\"GPT-3 is an advanced language model\"", "output": "7", "category": "Python"}, {"instruction": "Create a data structure to store records of students' attendance.", "input": "", "output": "struct StudentAttendance\n{\n    int studentId;  // Unique identifier for each student\n    int classId;    // Unique identifier for each class\n    int year;       // Year of the class\n    string month;   // Month of the class\n    int attendance; // Number of attendances\n};", "category": "Python"}, {"instruction": "Write an SQL query that returns the sum of inventories in the Inventory table.", "input": "", "output": "SELECT SUM(Amount) FROM Inventory;", "category": "Python"}, {"instruction": "How can you check if the given word is a palindrome in Python?", "input": "", "output": "word = \"madam\"\n\nif word == word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")", "category": "Python"}, {"instruction": "How can you access the last element of the following Python array?", "input": "arr = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "arr[-1]", "category": "Python"}, {"instruction": "Create a Ruby script to loop through the items of a given array and print it on the command line.", "input": "list = [\"Apple\",\"Banana\",\"Orange\"]", "output": "list = [\"Apple\",\"Banana\",\"Orange\"]\n\nlist.each do |item|\n  puts item\nend", "category": "Python"}, {"instruction": "Write a function in JavaScript to check if the given string contains a vowel or not.", "input": "", "output": "function containsVowel(str) {\n  var vowels = \"aeiou\"\n  for(i=0; i<str.length; i++) {\n    if (vowels.indexOf(str[i]) !== -1)\n      return true;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Create a SQL query to find the highest grossing movie.", "input": "Table Name: \"Movies\"\nColumns: \"MovieName\", \"BoxOfficeGross\"", "output": "SELECT MovieName\nFROM Movies\nORDER BY BoxOfficeGross DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write SQL query to calculate total rental fees for customers who have rented a movie in the past 7 days.", "input": "Table Name: \"Rentals\"\nColumns: \"CustomerId\", \"RentalDate\", \"RentalFee\"", "output": "SELECT SUM(RentalFee) \nFROM Rentals\nWHERE RentalDate >= DATE_SUB(CURDATE(),INTERVAL 7 DAY);", "category": "Python"}, {"instruction": "Edit the following function to only accept lowercase parameters.", "input": "def greeting(name):\n    print('Hello, ' + name + '!')", "output": "def greeting(name):\n    name = name.lower()\n    print('Hello, ' + name + '!')", "category": "Python"}, {"instruction": "Create a SQL query to select all columns with the same last name from a database table.", "input": "Table Name: \"Users\"\nColumns: \"FirstName\", \"LastName\"", "output": "SELECT * FROM Users WHERE LastName = (SELECT LastName FROM Users);", "category": "Python"}, {"instruction": "Describe the use of the HSL color model in web development.", "input": "", "output": "The HSL (hue, saturation, lightness) color model is used in web development for specifying colors. Hue is the color in the color wheel, saturation is the intensity, and lightness is how light/dark the color is. This model is easy to use and understand because it uses values that are more familiar and natural to humans, making it possible to create more visually appealing and consistent color schemes.", "category": "Python"}, {"instruction": "Describe the purpose of Asynchronous programming.", "input": "", "output": "Asynchronous programming is a method of concurrent programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure or progress. It enables programs to run multiple operations at the same time without blocking other operations. This helps improve the performance of applications by allowing them to do work in parallel.", "category": "Python"}, {"instruction": "Create an array of numbers and check if a given number exists in the array. Output true if it exists, output false if it does not.", "input": "arr = [1,2,3,4,5]\nn = 4", "output": "true", "category": "Python"}, {"instruction": "You receive an array of numbers as input and you need to calculate the median number.", "input": "arr = [3, 2, 4, 1, 5]", "output": "3.0", "category": "Python"}, {"instruction": "Create a PHP script that closes a MySQL connection.", "input": "", "output": "mysqli_close($connection);", "category": "Python"}, {"instruction": "A website requires a logo to be displayed in the header. Design a logo and write the HTML code to display it.", "input": "", "output": "<div class=\"logo\">\n \t<img src=\"logo.png\" alt=\"Company Logo\">\n</div>", "category": "Python"}, {"instruction": "Write a JavaScript function to convert a given number to its Roman numeral equivalent.", "input": "", "output": "function toRoman(num) {\n    // store roman equivalents of numbers\n    var romanNumerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L'\n    };\n  \n    // array to store roman numeral\n    var roman = [];\n  \n    // loop to check for roman equivalents\n    for (let i = Object.keys(romanNumerals).length; i >= 0; i--) {\n        let div = Math.floor(num / Object.keys(romanNumerals)[i]);\n        let rem = num % Object.keys(romanNumerals)[i];\n  \n        if (div > 0) {\n            roman.push(romanNumerals[Object.keys(romanNumerals)[i]].repeat(div));\n            num = rem;\n        }\n    }\n  \n    // return the new created string\n    return roman.join(\"\");\n}", "category": "Python"}, {"instruction": "Split the given string into words and remove any words that have less than 4 characters.", "input": "string = 'This is a test string'", "output": "string = 'This is a test string'\nwords = string.split()\nfiltered_words = []\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words)\n\n# Output:\n# ['This', 'test', 'string']", "category": "Python"}, {"instruction": "Create a css class for a table to be displayed on a mobile device.", "input": "", "output": ".mobile-table {\n    width: 100%;\n    border-collapse: collapse;\n    overflow-x: scroll;\n}\n\n.mobile-table td {\n    padding: 10px;\n    vertical-align: top;\n    overflow-y: hidden;\n    overflow-x: auto;\n}", "category": "Python"}, {"instruction": "Write an algorithm to calculate the average of a list of integers given as input.", "input": "", "output": "def average(nums):\n    \"\"\"\n    Takes a list of numbers and returns the average.\n    \"\"\"\n    \n    total = 0\n    for num in nums:\n        total += num\n    \n    return total / len(nums)", "category": "Python"}, {"instruction": "Create a function to find the total number of vowels in a series of strings.", "input": "string1: \"Hello\"\nstring2: \"World\"", "output": "public static int countVowels(String... strings) {\n    int count = 0;\n    \n    for (String str : strings) {\n        for (char c : str.toCharArray()) {\n            switch (c) {\n                case 'a':\n                case 'e':\n                case 'i':\n                case 'o':\n                case 'u':\n                    count++;\n            }\n        }\n    }\n    \n    return count;\n}", "category": "Python"}, {"instruction": "Convert the given list of integers to a string of comma separated values.", "input": "[1, 2, 3, 4, 5]", "output": "\"1,2,3,4,5\"", "category": "Python"}, {"instruction": "Write a CSS class that will make the font size of all elements 2 times larger.", "input": "", "output": ".increase-font-size {\n    font-size: 2rem;\n}", "category": "Python"}, {"instruction": "Create a function that converts an arbitrary number from any base between 2 and 16 to its decimal representation.", "input": "int value = 0xFE;", "output": "public static int ConvertToDecimal (int value, int base) \n{ \n    int decimalValue = 0; \n      \n    int i = 0; \n    while (value != 0 && i++ < 8) \n    { \n        int remainder = value % 10; \n        value /= 10; \n          \n        decimalValue += remainder * (int)Math.Pow(base, i); \n    }\n    return decimalValue;\n}", "category": "Python"}, {"instruction": "Change the following text from uppercase to lowercase.", "input": "MY NAME IS JOHN", "output": "my name is john", "category": "Python"}, {"instruction": "Create a code to print the items from a given array in reverse.", "input": "[1,2,3,4]", "output": "# Define the function to print array in reverse\ndef print_reverse(arr):\n \n # Base case\n if len(arr) == 0 :\n  return\n\n # Print the last value\n print(arr.pop())\n\n # Recursive call with array - 1 \n return print_reverse(arr)\n\n# Get the array\narr = [1,2,3,4]\n\n# Print the array in reverse\nprint(\"The array in reverse is: \")\nprint_reverse(arr)", "category": "Python"}, {"instruction": "Create a code to raise a number to a given power p.", "input": "2", "output": "# Define the function to raise a number to a given power\ndef power(x, p):\n \n # The base case is when power is 0 \n if p == 0:\n  return 1\n  \n # if power is not 0, then recursively call the function power \n return x * power(x, p-1)\n\n# Get the number\nx = 2\n\n# Get the power\np = 3\n\n# Calculate the result\nresult = power(x, p)\n\n# Print the result\nprint(\"The result is: \", result)", "category": "Python"}, {"instruction": "Write a code to generate 1000 random numbers and print the mean of these random numbers.", "input": "", "output": "# Import the random module\nimport random\n\n# Generate 1000 random numbers \nrandom_numbers = [random.randint(1, 1000) for i in range(1000)]\n\n# Calculate mean of the random numbers\nmean = sum(random_numbers)/len(random_numbers)\n\n# Print mean of random numbers\nprint(\"The mean of 1000 random numbers is: \", mean)", "category": "Python"}, {"instruction": "Reverse a given array without using a loop.", "input": "arr = [1,2,3,4]", "output": "[4, 3, 2, 1]", "category": "Python"}, {"instruction": "Devise a data structure to store an inventory of items in a store.", "input": "", "output": "struct StoreInventory {\n    char itemName;  //Name of the item\n    int itemCode;   //Unique identifier for each item \n    float itemPrice; //Price of the item \n    int itemQuantity; //Quantity of the item \n};", "category": "Python"}, {"instruction": "You need to write a function that validates a given password. It should only be valid if it contains at least one lowercase letter, one uppercase letter, one number, and one special character.", "input": "", "output": "function validatePassword(password) {\n  if(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(password))\n  {\n      return true;\n  }\n  else\n  {\n      return false;\n  }\n\n}", "category": "Python"}, {"instruction": "Read the provided code and determine whether it is using object-oriented programming or not. Output true if it is and false if it is not.", "input": "function displayName(name) {\n  console.log(name);\n}", "output": "false", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a code to print the elements column-wise.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "# Define a function to print elements column-wise \ndef print_columnwise(arr):\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)", "category": "Python"}, {"instruction": "Write a function that takes in a list of strings and returns True if any of the strings contains the letter `a`.", "input": "", "output": "def contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False", "category": "Python"}, {"instruction": "Convert this ES6 code to ES5.", "input": "let newList = myList.map(num => num * 2)", "output": "var newList = myList.map(function(num) {\n    return num * 2;\n});", "category": "Python"}, {"instruction": "Create classes and interfaces to represent an online news system.", "input": "", "output": "class NewsSystem {\n    public string title;\n    public string content;\n    \n    public NewsSystem(string title, string content) {\n        this.title = title;\n        this.content = content;\n    }\n}\n\ninterface INewsActions {\n    void PostNewArticle(NewsSystem article);\n    void EditArticle(NewsSystem article);\n    void DeleteArticle(NewsSystem article);\n}", "category": "Python"}, {"instruction": "Create a C++ program for printing a pyramid pattern up to a given number.", "input": "//n = 5", "output": "#include<iostream>\nusing namespace std;\n \nint main()\n{\n    int i, j, rows;\n \n    cout << \"Enter number of rows: \";\n    cin >> rows;\n \n    for(i=1; i<=rows; i++)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            cout<< \"* \";\n        }\n        cout << \"\\n\";\n    }\nreturn 0;", "category": "Python"}, {"instruction": "Write a Java function to compare two strings and print the longer string.", "input": "// Two Strings:\nString str1 = \"stack\";\nString Str2 = \"overflow\";", "output": "public static String longestString(String str1, String str2) {\n if (str1.length() > str2.length()) {\n  return str1;\n }\n return str2;\n}", "category": "Python"}, {"instruction": "What is the syntax for creating an object of the \"Car\" class in Java?", "input": "", "output": "The syntax for creating an object of the \"Car\" class in Java is:\nCar myCar = new Car();", "category": "Python"}, {"instruction": "How many parameters does a C++ function have?", "input": "", "output": "A C++ function can have any number of parameters, from zero parameters to an unlimited number of parameters.", "category": "Python"}, {"instruction": "Find the power of a number using a C program.", "input": "Base = 5, Exponent = 3", "output": "#include <stdio.h>\n\nint main() \n{ \n    int base = 5, exponent = 3, result = 1; \n    while (exponent != 0) { \n        result *= base; \n        --exponent; \n    } \n  \n    printf(\"Result = %d\", result); \n    return 0; \n}\n\n// Output -> Result = 125", "category": "Python"}, {"instruction": "Create a program in Java to print a multiplication table of size 5x5.", "input": "", "output": "for (int i = 1; i <= 5; i++) {\n   System.out.printf(\"%d * %d = %d\\n\", i, i, i * i); \n   for (int j = 1; j <= 5; j++) {\n      System.out.printf(\"%d * %d = %d\\n\", i, j, i * j);\n   }\n   System.out.println();\n}", "category": "Python"}, {"instruction": "Print all the numbers in a given string using Java.", "input": "String str = \"123XYZ456ABC789\"", "output": "for (int i = 0; i < str.length(); i++) {\n   if (Character.isDigit(str.charAt(i))) {\n      System.out.print(str.charAt(i) + \" \");\n   }\n}\n\n// Output -> 1 2 3 4 5 6 7 8 9", "category": "Python"}, {"instruction": "Modify the code below to create a new function called \"addSquares()\" that adds the squares of two numbers and returns the result.", "input": "def add(x, y):\n   return x + y", "output": "def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y", "category": "Python"}, {"instruction": "What is the argument type of the function \"len()\" in Python?", "input": "", "output": "The argument type of the function \"len()\" in Python is an object.", "category": "Python"}, {"instruction": "Convert the string \"Hello World\" to upper case using a Java program.", "input": "", "output": "String upperCaseString = \"Hello World\".toUpperCase();", "category": "Python"}, {"instruction": "Write an Apache VTL code to check if the user is logged in or not.", "input": "", "output": "#if(${user.loggedIn})\n  You are logged in.\n#else\n  You are not logged in.\n#end", "category": "Python"}, {"instruction": "Write a query to retrieve all rows from the Students table where the Grade is \"A\".", "input": "", "output": "SELECT * FROM Students WHERE Grade = 'A';", "category": "Python"}, {"instruction": "Identify the wrong code in this JavaScript snippet.", "input": "let a = \"Hello World!\";\nconsole 'log(a);", "output": "console 'log(a); // lacks () parenthesis for the log method of the console object.", "category": "Python"}, {"instruction": "Generate a JavaScript object that contains two key-value pairs.", "input": "", "output": "let object = {\n  key1: \"value1\",\n  key2: \"value2\" \n}", "category": "Python"}, {"instruction": "Scan the given array and find the second largest number.", "input": "[13, 54, 78, 54, 3, 87]", "output": "78", "category": "Python"}, {"instruction": "Using Flexbox (CSS Framework), center the text \"My Title\" horizontally and vertically on the page.", "input": "", "output": ".container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n<div class=\"container\">\n    <h1>My Title</h1>\n</div>", "category": "Python"}, {"instruction": "Construct a query in SQL to select users from the \"Users\" table aged between 30 and 40.", "input": "// Table Name\nUsers", "output": "SELECT *\nFROM Users\nWHERE age BETWEEN 30 AND 40;", "category": "Python"}, {"instruction": "Craft a JavaScript snippet to create an array with elements from 0 to 10.", "input": "", "output": "let array = Array.from({length: 11}, (v, k) => k);", "category": "Python"}, {"instruction": "Find the maximum element from a given array in JavaScript.", "input": "//Array\nlet array = [2, 3, 6, 9, 5, 14];", "output": "let maxElement = Math.max(...array);\nconsole.log(maxElement);\n//Output: 14", "category": "Python"}, {"instruction": "Explain the use of 'break' and 'continue' in for loops.", "input": "", "output": "The \u201cbreak\u201d keyword is used to exit from the loop and continues to execute the code after the loop. The \"continue\" keyword is used to skip the rest of the loop and start from the beginning of the loop again. It is used mostly when you have defined certain condition and want to skip some codes when that condition is being met.", "category": "Python"}, {"instruction": "Compile and execute this Java code.", "input": "public class Main { \n public static void main(String[] args) { \n System.out.println(\"Welcome to Java\"); \n } \n}", "output": "Compilation successful.\n\nWelcome to Java", "category": "Python"}, {"instruction": "Write an HTML code to create a dropdown selection list with three options.", "input": "", "output": "<select>\n  <option value=\"option1\">Option 1</option>\n  <option value=\"option2\">Option 2</option>\n  <option value=\"option3\">Option 3</option>\n</select>", "category": "Python"}, {"instruction": "Write a MongoDB query to find documents where a given field contains a substring.", "input": "", "output": "db.collection.find({$where: \"return this.field.includes('substring')\"})", "category": "Python"}, {"instruction": "Create a PHP script to encode a given string in base-64.", "input": "", "output": "<?php\n  // Function to encode a given string in base-64\n  function encodeBase64($str){\n    return base64_encode($str);\n  }\n\n  echo encodeBase64(\"Hello World!\");\n?>", "category": "Python"}, {"instruction": "Write a HTML code to create a table with two columns, one for the name of a person and the other for their address.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Address</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Doe</td>\n      <td>123 Main Street</td>\n    </tr>\n    <tr>\n      <td>Jane Doe</td>\n      <td>456 South Ave</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Write an SQL query to identify the most frequently occurring value in a given column", "input": "", "output": "SELECT column_name, COUNT(*) AS frequency\nFROM table_name\nGROUP BY column_name\nORDER BY frequency DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Design a data structure that will store name, phone number and address of a person.", "input": "", "output": "class PersonData {\n    String name;\n    String phoneNumber;\n    String address;\n\n    PersonData(String name, String phoneNumber, String address) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n        this.address = address;\n    }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to display the most populous region with its population count", "input": "", "output": "SELECT region, COUNT(*) AS population\n  FROM Census\n  GROUP BY region\n  ORDER BY population DESC\n  LIMIT 1;", "category": "Python"}, {"instruction": "Create a function to group a given set of numbers into a continuous range", "input": "Set of numbers: [1, 3, 4, 6, 7, 8, 10]", "output": "\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\n\ndef group_numbers(nums):\n    # Initialize left and right pointers\n    l = 0\n    r = 1\n    # Initialize ranges list\n    ranges = []\n    \n    while r < len(nums):\n        # If the end of the range is not same as the \n        # start of the next range, append the current range \n        if nums[r - 1] + 1 != nums[r]:\n            ranges.append(str(nums[l]) + \"->\" + str(nums[r - 1]))\n            l = r\n\n        r += 1\n\n    # Append the last range\n    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))\n\n    return ranges\n\nif __name__ == '__main__':\n    nums = [1, 3, 4, 6, 7, 8, 10]\n    print(group_numbers(nums))", "category": "Python"}, {"instruction": "Classify the given news title into two categories: Positive andNegative", "input": "The stock market bounces back", "output": "Positive.", "category": "Python"}, {"instruction": "Compute the maximum amount of money X which can be obtained using two given coins of denomination A and B.", "input": "A = 5 \nB = 7\nX = 31", "output": "\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\n\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))", "category": "Python"}, {"instruction": "Create a function to register a new user using a given username, email and password.", "input": "username: angelina \nemail: angelina@example.com\npassword: abc12345", "output": "\"\"\"\nFunction register: Registers a new user using a given username, email and password\n\"\"\"\n\ndef register(username, email, password):\n    # initialize user database\n    user_db = {}\n    # add user info to database\n    user_db[username] = {\n        'email': email,\n        'password': password\n    }\n    # return user database\n    return user_db\n\nif __name__ == '__main__':\n    username = 'angelina'\n    email = 'angelina@example.com'\n    password = 'abc12345'\n    print(register(username, email, password))", "category": "Python"}, {"instruction": "Construct an SQL query to get the name of the oldest user from the \"Users\" table.", "input": "// Table Name\nUsers", "output": "SELECT name  \nFROM Users\nORDER BY date_of_birth DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Modify a C++ program to print the following sequence of numbers using a loop:\n* 5, 4, 3, 2, 1", "input": "//Existing code\ncout << \"Hello world!\" << endl;", "output": "#include <iostream>\nusing namespace std;\n\nint main ()\n{\n    int x;\n    cout << \"Hello world!\" << endl;\n    for (x=5; x>=1; x--) \n    { \n      cout << x <<\", \"; \n    }\n    cout << \"Blast off!\";\n    return 0;\n}", "category": "Python"}, {"instruction": "Create an HTML element that displays text \u201cWelcome\u201d with the color blue.", "input": "", "output": "<span style=\"color: blue;\">Welcome</span>", "category": "Python"}, {"instruction": "Implement a comparator method in Java to compare two objects of the same class.", "input": "class Country {\n    String name;\n    double population;\n    double area;\n}", "output": "class CountryComparator implements Comparator<Country> {\n    @Override\n    public int compare(Country c1, Country c2) {\n        //compare by population\n        if (c1.population < c2.population) {\n            return -1;\n        } else if (c1.population > c2.population) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create an HTML form with radio buttons and labels to get the user's gender.", "input": "", "output": "<form>\n  <label>Gender:</label>\n  <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n  <label for=\"male\">Male</label>\n  <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n  <label for=\"female\">Female</label>\n</form>", "category": "Python"}, {"instruction": "Write a Java program to remove comments from the Java program.", "input": "public class HelloWorld {\n    /*\n    This is a multiline comment.\n    */\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); // This is a single line comment.\n    }\n}", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); \n    }\n}", "category": "Python"}, {"instruction": "Create a PHP function that sorts the elements of an array in ascending order.", "input": "", "output": "<?php\nfunction sort_array_ascending($array) {\n    sort($array);\n    return $array;\n}\n?>", "category": "Python"}, {"instruction": "Summarize the given code", "input": "def sumOfTwo(a, b):\n    \"\"\"Returns the sum of two integers.\"\"\"\n    c = a + b\n    return c", "output": "This function takes two integers as input and returns their sum.", "category": "Python"}, {"instruction": "Consider the formula z=(x1n+x2+x3)(2x2+3x3)? find the value of y", "input": "x1 = 2; x2 = 4; x3 = 6", "output": "y = 28", "category": "Python"}, {"instruction": "Debug the following code and update the list \"result\" accordingly.", "input": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n        return result\n\nnums = [1, 2, 3, 4]", "output": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n    return result\n\nnums = [1, 2, 3, 4]\n\nresult = foo(nums)", "category": "Python"}, {"instruction": "Construct an if-else statement to compare two variables.", "input": "variable1: 5\n  variable2: 10", "output": "variable1 = 5\nvariable2 = 10\n\nif variable1 > variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in this code with logic to calculate the mean of a list of numbers.", "input": "numbers = [1, 2, 3, 4, 5]\n# TODO: calculate the mean", "output": "numbers = [1, 2, 3, 4, 5]\n\n# calculate the mean\nmean = sum(numbers)/len(numbers)\n\nprint('The mean of the list of numbers is {}.'.format(mean))", "category": "Python"}, {"instruction": "Program a binary search algorithm.", "input": "data: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  target: 16", "output": "def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n\n    return -1\n\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\n\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")", "category": "Python"}, {"instruction": "Construct a Python class for a camera object.", "input": "", "output": "class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model", "category": "Python"}, {"instruction": "Explode a string with a given delimiter.", "input": "given_str = \"apple,banana,orange\"", "output": "def explode_string(given_str):\n  return given_str.split(\",\")\n\ngiven_str = \"apple,banana,orange\" \n\nexploded_str = explode_string(given_str)\nprint(exploded_str)\n# Output: ['apple', 'banana', 'orange']", "category": "Python"}, {"instruction": "Find all words that start with the letter 'R' in a string.", "input": "string = \"hello world\"", "output": "def findAllWordsStartingWith(string,letter):\n    words = string.split(' ')\n    allWordsStartingWithLetter = [] \n    for word in words:\n        if word[0] == letter:\n            allWordsStartingWithLetter.append(word)\n    return allWordsStartingWithLetter\n\nprint(findAllWordsStartingWith('hello world', 'R')) # Output: []", "category": "Python"}, {"instruction": "Write a Bash script to check if the number of arguments supplied is equal to 3 or not.", "input": "", "output": "#!/bin/bash\n\nif [ \"$#\" -eq 3 ]\nthen \n   echo \"Number of Arguments provided is 3\"\nelse\n   echo \"Number of Arguments provided is not 3\"\nfi", "category": "Python"}, {"instruction": "Write a CSS code to align a button to the center of a webpage.", "input": "<button>My Button</button>", "output": "button {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}", "category": "Python"}, {"instruction": "Change the background color of all paragraphs in HTML code to blue.", "input": "<p>I am a paragraph</p>\n<p>I am another paragraph</p>", "output": "<p style=\"background-color:blue;\">I am a paragraph</p>\n<p style=\"background-color:blue;\">I am another paragraph</p>", "category": "Python"}, {"instruction": "Write a Spring Boot Rest Controller to list all products in an online store.", "input": "", "output": "@RestController\npublic class ProductController {\n \n    @Autowired\n    private ProductService productService;\n \n    @GetMapping(\"/products\")\n    public List<Product> getProducts(){\n        return productService.listProducts();\n    }\n}", "category": "Python"}, {"instruction": "Find the largest integer in this list?", "input": "[1, 4, 9, 3, 5]", "output": "largest_integer = max([1, 4, 9, 3, 5])\nprint(largest_integer)  # Output: 9", "category": "Python"}, {"instruction": "Write Python code to merge two given dictionaries into a single dictionary.", "input": "Dictionary 1: {'A':1, 'B':2} \nDictionary 2: {'C':3, 'D':4}", "output": "def merge_dicts(dic1, dic2): \n    res = {**dic1, **dic2} \n    return res", "category": "Python"}, {"instruction": "Modify the program to work with any dataset", "input": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    # TODO: Your code here\n    return sum", "output": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    for val in data:\n        sum += val\n    return sum", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of the digits in an integer", "input": "N = 155", "output": "def sum_digits(n):\n    s = 0\n    while(n):\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(155))", "category": "Python"}, {"instruction": "Output the 5th element in an array", "input": "[1, 5, 9, 17, 24, 42, 50]", "output": "24", "category": "Python"}, {"instruction": "Read the comment in the code and update the code accordingly.", "input": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    # TODO: Your code here\n    return multiples", "output": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    for i in range(limit + 1):\n        if i % n == 0:\n            multiples.append(i)  \n    return multiples", "category": "Python"}, {"instruction": "Write a Python program to read a list of numbers and print them as a single string without any space.", "input": "[34, 32, 67, 85]", "output": "my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))", "category": "Python"}, {"instruction": "Generate a C program to encrypt a sentence using Caesar cipher.", "input": "The quick brown fox jumps over the lazy dog", "output": "#include <stdio.h> \n#include <string.h> \n\nchar encrypt(char ch, int key); \n\nint main() \n{ \n    char message[] = \"The quick brown fox jumps over the lazy dog\"; \n    int key;\n  \n    printf(\"Enter the key: \"); \n    scanf(\"%d\", &key);\n\n    char encrypted_message[100]; \n  \n    for (int i = 0; i < strlen(message); ++i) { \n        encrypted_message[i] = encrypt(message[i], key); \n    }\n\n    printf(\"Encrypted message: %s\\n\", encrypted_message); \n    return 0; \n} \n\nchar encrypt(char ch, int key) \n{ \n    if (ch >= 'a' && ch <= 'z') \n        return (char)('a' + (ch - 'a' + key) % 26); \n    else if (ch >= 'A' && ch <= 'Z') \n        return (char)('A' + (ch - 'A' + key) % 26); \n    else\n        return ch; \n}", "category": "Python"}, {"instruction": "Construct a SQL query to display the product name from the table 'products' ordered by price in descending order.", "input": "", "output": "SELECT product_name \nFROM products\nORDER BY price DESC", "category": "Python"}, {"instruction": "Design a Java program to display the given integer in reverse.", "input": "6789", "output": "public class ReverseNumber { \n    public static void main(String[] args) \n    { \n        int num = 6789; \n        int reversed = 0; \n        while(num != 0) \n        { \n            int digit = num % 10; \n            reversed = reversed * 10 + digit; \n            num /= 10; \n        } \n  \n        System.out.println(\"Reversed Number: \" + reversed); \n    } \n}", "category": "Python"}, {"instruction": "Describe the different types of loops in Java.", "input": "", "output": "In Java, there are three types of loops: while loops, for loops and do-while loops. While loops execute a block of code until a certain condition is met. For loops are used when the number of iterations is known, with the loop iterating a specific number of times. Do-while loops are similar to while loops, except the condition is tested after the loop iteration, so the loop body will always execute at least once.", "category": "Python"}, {"instruction": "Generate a Java program that prints the sum of digits of a given number.", "input": "17", "output": "public class SumOfDigits {\n    \n    public static void main(String args[]) {\n        int num = 17;\n        int sum = 0;\n  \n        while(num > 0) \n        { \n            sum += num % 10; \n            num /= 10; \n        } \n        System.out.println(\"Sum of Digits of the Number: \" +sum); \n    } \n}", "category": "Python"}, {"instruction": "Create a SQL query to display sales sum in ascending order of year.", "input": "SalesSum(TOTAL)", "output": "SELECT YEAR, SUM(TOTAL) AS SalesSum\nFROM Orders\nGROUP BY YEAR\nORDER BY YEAR ASC", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all users where the gender is `Female`.", "input": "", "output": "SELECT Name \nFROM Users \nWHERE Gender = 'Female'", "category": "Python"}, {"instruction": "Construct an array in JavaScript that contains the numbers from 6 to 15.", "input": "", "output": "let arr = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15];", "category": "Python"}, {"instruction": "Insert the missing code in the function below to sort an array of strings:", "input": "arr = [\"hello\", \"apple\", \"cat\"]\n\ndef sort_str(arr):\n  # Insert code here", "output": "def sort_str(arr):\n  # Insert code here\n  arr.sort()\n  return arr", "category": "Python"}, {"instruction": "Explain the role of an HTML div tag.", "input": "", "output": "The <div> tag defines a division or section in the HTML document. It is used to group blocks of related elements to structure and style a page. The <div> tag is a block-level element, meaning it can stand alone and not appear within any other tags.\n\nCSS can be used along with the <div> to define design elements such as the color, size, and position of the division.", "category": "Python"}, {"instruction": "Create a SQL query to show all the employees' names working in the company 'ABC'.", "input": "", "output": "SELECT name\nFROM Employees\nWHERE company = 'ABC';", "category": "Python"}, {"instruction": "Determine if the given input string is a valid C++ identifier or not.", "input": "stringInput = \"my_age\"", "output": "true", "category": "Python"}, {"instruction": "Write a Java program that prints all numbers between 1 to 100.", "input": "", "output": "public class PrintNumbers{\n    public static void main(String[] args){\n        // Prints numbers from 1 to 100\n        for(int i = 1; i <= 100; i++){\n            System.out.println(i); \n        }\n    }\n}", "category": "Python"}, {"instruction": "What will be the ouptut of below operation?", "input": "print(4 >> 2)", "output": "1", "category": "Python"}, {"instruction": "Perform a selection sort on the given array", "input": "[4, 1, 10, 8, 5]", "output": "def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([4, 1, 10, 8, 5]))", "category": "Python"}, {"instruction": "Create a JavaScript statement to set the margin of an element with class \"myclass\" to 0.", "input": "", "output": "document.querySelector('.myclass').style.margin = '0';", "category": "Python"}, {"instruction": "Create a bash script to check the disk usage of the \"/tmp\" directory.", "input": "", "output": "#!/bin/bash\n\necho \"Checking disk usage of the /tmp directory\"\n\n# Get the current disk usage\ndu -sh /tmp/", "category": "Python"}, {"instruction": "Write a Python program to convert a given binary string to its equivalent hexadecimal representation.", "input": "", "output": "def bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string", "category": "Python"}, {"instruction": "Edit the following code so that it prints out a right triangle of size n", "input": "int n = 5;\nfor (int i = 0; i < n; i++) {\n  for (int j = 0; j <= i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}", "output": "int n = 5;\nfor (int i = n; i > 0; i--) {\n  for(int j = 0; j < i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}", "category": "Python"}, {"instruction": "Write a MySQL query to insert values into a table called 'users' with three columns: 'name', 'email', and 'age'.", "input": "name: John, email: john@example.com, age: 28", "output": "INSERT INTO users (name, email, age) VALUES ('John', 'john@example.com', 28);", "category": "Python"}, {"instruction": "Create a CSS class to make all the text in the body of the page blue.", "input": "", "output": "body {\n    font-color: blue;\n}", "category": "Python"}, {"instruction": "Create an HTML table with two columns called \"Name\" and \"Age\", and three rows, with the name and age of Alice, Bob and Eve.", "input": "", "output": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>Alice</td>\n  <td>20</td>\n </tr>\n <tr>\n  <td>Bob</td>\n  <td>30</td>\n </tr>\n <tr>\n  <td>Eve</td>\n  <td>40</td>\n </tr>\n</table>", "category": "Python"}, {"instruction": "Write a function to sum values stored in a dictonary using for loop.", "input": "mydict = {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}", "output": "def sum_dict_values(mydict):\n  ans = 0\n  for key,val in mydict.items():\n    ans += val\n  return ans", "category": "Python"}, {"instruction": "Format the strings given in the list so that only the first letter of each word is in upper case.", "input": "[\"Hello world\", \"Wonderful DAY\"]", "output": "[\"Hello World\", \"Wonderful Day\"]", "category": "Python"}, {"instruction": "Design a function in Python to sort a list of tuples based on the first element.", "input": "", "output": "def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[0])\n    return my_list", "category": "Python"}, {"instruction": "Design an algorithm to check if two given binary trees are identical.", "input": "", "output": "We can use a recursive approach to compare two binary trees. We can start by a root node comparison and if the values of the two root nodes are not equal, the trees are not equivalent. Otherwise, we can move on to compare the left subtree and the right subtree of each tree for equality. To do so, we can recursively call the algorithm on the left nodes of each tree and the right nodes of each tree. If at any point, any of the nodes are not equal, the two trees are not identical. If all nodes are equal, the two binary trees are identical.", "category": "Python"}, {"instruction": "Suggest a way to search for a target element in a binary search tree in less than O(n) time.", "input": "", "output": "The binary search tree can be traversed in a depth-first manner to search for the target element in a time complexity of O(log n), where n is the number of nodes in the binary search tree. In a depth-first search, the target node is compared with each node in the tree and if it does not match, the left or right subtree is recursively searched depending on whether the target element is smaller or bigger than the current node. This way, the target element can be searched in less than O(n) time.", "category": "Python"}, {"instruction": "You are given an array of integers and you need to find the maximum sum of any subarray of the given array.", "input": "", "output": "The maximum sum of any subarray of a given array of integers can be found with the Kadane's algorithm. This algorithm works by keeping track of the maximum sum seen so far and the current sum running. Whenever the current sum running is negative, the current sum running is reset to 0 and the maximum sum seen is compared with the current sum. Whenever the current sum running is positive, it is added to the maximum sum seen so far. This way, the maximum sum of any subarray of the given array can be found in one pass.", "category": "Python"}, {"instruction": "Describe a machine learning algorithm that uses supervised learning.", "input": "", "output": "One popular supervised machine learning algorithm is the Support Vector Machine (SVM). It uses labelled data points to infer the best decision boundary between different classes. It uses an optimization function to maximize the margin between the support vectors (data points) and the decision boundary. The support vectors are the data points which are the closest to the hyperplane and the decision boundary is the one that best separates the different classes. The SVM could also be tweaked to use different kernels, such as the Gaussian Kernel which is commonly used for non-linear classification.", "category": "Python"}, {"instruction": "Design an algorithm to check if a given string can be converted to a palindrome.", "input": "", "output": "We can use a two pointer approach to traverse the string and compare the leftmost and rightmost characters. If the characters are not equal, then the string cannot be a palindrome. We can move the left pointer one character to the right, and move the right pointer one character to the left, and compare the characters again. We keep repeating this until either the left pointer is equal to the right pointer, or the left and right pointers have crossed each other. If one of the comparisons does not result in equality, then the string cannot be converted to a palindrome. If the left pointer is equal to the right pointer, or if the two pointers have crossed each other, then the string can be converted to a palindrome.", "category": "Python"}, {"instruction": "Refactor the following condition to use the ternary operator instead of an if-else statement.", "input": "if (x < 0) {\n   y = -1;\n} else {\n   y = 1;\n}", "output": "y = x < 0 ? -1 : 1;", "category": "Python"}, {"instruction": "Create a MongoDB query to find all documents that have an array \"items\" with a field \"name\" equal to \"pen\".", "input": "", "output": "db.collection.find( { \"items\": { $elemMatch: { \"name\": \"pen\" } } } )", "category": "Python"}, {"instruction": "Filter the array based on the given condition and return a new array of elements that satisfy the condition.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5];\n\nconst filteredArray = arr.filter(item => item % 2 === 0);\n\nconsole.log(filteredArray);\n\n# Output:\n# [2, 4]", "category": "Python"}, {"instruction": "Write a loop to iterate through the following array and prints each element.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Create an Angular 10 service to fetch data from a remote API and print the results to the console.", "input": "address: 'www.example.com/api/v1/data'.", "output": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class DataService {\n  constructor(private http: HttpClient) {\n\n  }\n\n  async getData() {\n    const data = await this.http.get(address).toPromise();\n    console.log(data);\n  }\n}", "category": "Python"}, {"instruction": "Create a React component which renders an input box and a submit button.", "input": "", "output": "import React from 'react';\n\nexport default function Form() {\n  return (\n    <form>\n      <input type=\"text\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}", "category": "Python"}, {"instruction": "Generate code to display a progress bar in HTML.", "input": "", "output": "<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n</div>", "category": "Python"}, {"instruction": "Create a Swift class with a method named 'validate' which returns true if the given value is greater than 10 and false otherwise.", "input": "", "output": "class Validation {\n  func validate(value: Int) -> Bool {\n    return value > 10\n  }\n}", "category": "Python"}, {"instruction": "Generate a correct Java program to swap two given numbers.", "input": "", "output": "public class Swap { \n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    System.out.println(\"before swap: a = \"+a+\" b = \"+b);\n    int temp = a; \n    a = b; \n    b = temp; \n    System.out.println(\"after swap: a = \"+a+\" b = \"+b);\n  }\n}", "category": "Python"}, {"instruction": "Change the following code to use for-loops instead of while-loops.", "input": "x = 0\nwhile x < 5:\n    print(x) \n    x += 1", "output": "for x in range(5):\n  print(x)", "category": "Python"}, {"instruction": "Check if an integer is a power of two.", "input": "", "output": "public static boolean isPowerOfTwo(int n) { \n   return (n > 0) && ((n & (n - 1)) == 0); \n}", "category": "Python"}, {"instruction": "Create a Python program to extract the URLs from a given list of strings.", "input": "['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',\n 'This is an example of a string without a URL']", "output": "import re\n\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls", "category": "Python"}, {"instruction": "Write a JavaScript function to check whether a string contains all the vowels in alphabetical order.", "input": "", "output": "function checkVowels(str) {\n  const sortedVowels = 'aeiou'.split('').sort().join('');\n  const sortedStr = str\n    .toLowerCase()\n    .split('')\n    .filter(letter => ['a','e','i','o','u'].includes(letter))\n    .sort()\n    .join('');\n  return sortedVowels === sortedStr;\n}", "category": "Python"}, {"instruction": "Create an SQL query to sum all values in the \"amount\" column.", "input": "", "output": "SELECT SUM(amount) FROM table_name;", "category": "Python"}, {"instruction": "Debug the following Java program to get the output \"Can you try again?", "input": "public class TryAgain {\n  public static void main (String[] args) {\n     x = 4;\n     System.out.println(x = 4);\n  }\n}", "output": "public class TryAgain {\n  public static void main (String[] args) {\n     int x = 4;\n     System.out.println(\"Can you try again?\");\n  }\n}", "category": "Python"}, {"instruction": "Generate a correct SQL query for checking if a record exists with a given condition.", "input": "Check if a record exists in the \"Customers\" table with the email address \"john@example.com\";", "output": "SELECT COUNT(*) FROM Customers WHERE email = 'john@example.com';", "category": "Python"}, {"instruction": "Using JavaScript, create an input field to store a hexadecimal value.", "input": "", "output": "<input type=\"text\" pattern=\"^#([A-Fa-f0\u20139]{6}|[A-Fa-f0\u20139]{3})$\">", "category": "Python"}, {"instruction": "Create a Python script to generate random numbers from 1 to 10 in a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums", "category": "Python"}, {"instruction": "Create an HTML form element to store a password with a validation of maximum 8 characters.", "input": "", "output": "<form>\n  <label for=\"password\">Password: </label>\n  <input type=\"password\" id=\"password\" name=\"password\" maxlength=\"8\">\n</form>", "category": "Python"}, {"instruction": "Using CSS, modify the background color of a div.", "input": "", "output": "div { \n  background-color: blue;\n}", "category": "Python"}, {"instruction": "Use Java to generate a string containing 1000 random characters of length 10.", "input": "", "output": "String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\nStringBuilder randomString = new StringBuilder();\nRandom rand = new Random();\nfor (int i = 0; i < 1000; i++){\n int randIndex = rand.nextInt(chars.length());\n randomString.append(chars.charAt(randIndex));\n}\nString result = randomString.toString();", "category": "Python"}, {"instruction": "Using HTML, create an input field that stores an integer.", "input": "", "output": "<input type=\"number\">", "category": "Python"}, {"instruction": "Generate code to call an API and print the results using JavaScript.", "input": "url: 'www.example.com/api/v1/data'", "output": "fetch(url)\n  .then(response => {\n    return response.json()\n  }).then(data => {\n    console.log(data);\n  });", "category": "Python"}, {"instruction": "Create a C# program to sort a given array of integers.", "input": "int[] nums = {8, 5, 1, 3, 9};", "output": "int[] sorted = nums.OrderBy(n => n).ToArray();", "category": "Python"}, {"instruction": "Using HTML, create a select option field with five given options.", "input": "Options: Option 1, Option 2, Option 3, Option 4, Option 5", "output": "<select>\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n  <option>Option 4</option>\n  <option>Option 5</option>\n</select>", "category": "Python"}, {"instruction": "Generate a SQL statement to retrieve the title of all books in the library table.", "input": "", "output": "SELECT title FROM Library;", "category": "Python"}, {"instruction": "Create a random list of 10 numbers in the range of -10 to 10 in Python.", "input": "", "output": "import random\n \nrandom_list = [random.randint(-10, 10) for i in range(10)] \nprint(random_list)", "category": "Python"}, {"instruction": "Write a regex pattern to check if the given string is a US phone number.", "input": "", "output": "regex = r\"^\\(?[2-9]{3}\\)?[-. ]?[2-9]{3}[-. ]?[0-9]{4}$\"", "category": "Python"}, {"instruction": "Build a program to print the frequency of characters in an input string.", "input": "input_string = \"abcabcabcabc\"", "output": "def frequency_chart(input_string): \n    # Dictionary to store character frequency \n    freq = {} \n  \n    # Loop over the input string \n    for char in input_string: \n        if char in freq: \n            freq[char] += 1\n        else: \n            freq[char] = 1\n  \n    return freq \n  \n# Driver Code \ninput_string = \"abcabcabcabc\"\nprint(frequency_chart(input_string))", "category": "Python"}, {"instruction": "Write a code to generate a random password using random library of Python.", "input": "length = 8", "output": "import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))", "category": "Python"}, {"instruction": "Write a function to determine the largest integer in an unordered array.", "input": "array = [6, 8, 1, 3, 4]", "output": "def largest_int(arr): \n    largest_int = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > largest_int: \n            largest_int = arr[i] \n    return largest_int \n  \n# Driver Code\narray = [6, 8, 1, 3, 4]\nprint(largest_int(array))", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and prints out their product.", "input": "array = [1,2,3,4,5]", "output": "def product(arr): \n    product = 1\n    for x in arr: \n        product *= x \n    return product \n  \n# Driver Code \narray = [1,2,3,4,5]\nprint(product(array))", "category": "Python"}, {"instruction": "Construct an algorithm to detect a cycle in a linked list", "input": "", "output": "A cycle can be detected in a linked list using the Floyd's Algorithm. This algorithm works by using two pointers; a slow pointer and a fast pointer. The slow pointer moves one node of the list at a time, while the fast pointer moves two nodes at a time. If the two pointers point to the same node, then a cycle exists in the list.", "category": "Python"}, {"instruction": "Write a java program to generate a Fibonacci series up to N numbers", "input": "int N = 10;", "output": "public class Fibonacci{\n    public static void main(String args[]) {\n        int n1=0,n2=1,n3,i,count=10;\n        System.out.print(n1+\" \"+n2);//printing 0 and 1 \n    \n        for(i=2;i<count;++i)//loop starts from 2 because 0 and 1 are already printed\n        {    \n            n3=n1+n2;    \n            System.out.print(\" \"+n3);    \n            n1=n2;    \n            n2=n3;    \n        }\n    }\n}", "category": "Python"}, {"instruction": "How would you test a Turing machine?", "input": "", "output": "A Turing machine can be tested by providing sample inputs that cover various cases and examining the output. An ideal test would consist of input strings that cover all possible scenarios, such as inputs with no computation, inputs with long computations, inputs that flip a single bit, etc. Additionally, Turing machine implementations should be tested for edge cases, such as providing inputs with invalid syntax or supplying an input of exceptional size.", "category": "Python"}, {"instruction": "Suppose a set of n numbers and write a program to calculate the median", "input": "int[] numbers = {3,7,5,14,15,17};", "output": "int n = numbers.length;\n\nif (n % 2 == 0) {\n \u00a0  // if n is even\n    int m = n/2;\n    double median = (numbers[m-1] + numbers[m]) / 2.0\n} else {\n \u00a0  // if n is odd\n    int m = (n+1) / 2;\n    double median = numbers[m-1];\n}", "category": "Python"}, {"instruction": "Explain the process of linear search in a few sentences.", "input": "", "output": "Linear search is a technique for searching for an element in a list by repeatedly checking every element until a match is found or the end of the list is reached. It is typically implemented as a loop, where each element is compared to the search key until a match is found, or until all the elements have been searched.", "category": "Python"}, {"instruction": "Write a loop in Java to add all elements of a given array.", "input": "int[] arr = {1, 2, 3, 4, 5};", "output": "int sum = 0; \n  \nfor (int i = 0; i < arr.length; i++) \n    sum += arr[i];", "category": "Python"}, {"instruction": "Identify the data structure most suitable for storing 100 unique integers.", "input": "", "output": "Hash Table", "category": "Python"}, {"instruction": "Create a Regex in JavaScript to extract all words of length 6 or more from a sentence.", "input": "Sentence = \"This is a sample sentence with some words of length 6 or more\"", "output": "let regex = /\\w{6,}/g;\nlet words = sentence.match(regex);", "category": "Python"}, {"instruction": "Write a function to traverse a tree using depth-first search algorithm in Java.", "input": "", "output": "public void traverseTree(Node root) {\nS tack<Node> stack = new Stack<>();\nstack.push(root);\nwhile (!stack.isEmpty()) {\n    Node node = stack.pop();\n    // Process the node\n    if (node.right != null)\n        stack.push(node.right);\n    if (node.left != null)\n        stack.push(node.left);\n    }\n}", "category": "Python"}, {"instruction": "Assign the variable \"age\" with the value 18.", "input": "", "output": "int age = 18;", "category": "Python"}, {"instruction": "Manipulate a string in C++ to delete all special characters from it.", "input": "String = \u201cHello!&@ This#%^$ is a string\u201d", "output": "string s = \"Hello!&@ This#%^$ is a string\";\nfor (int i = 0; i < s.length(); i++) \n{ \n    if (!isalnum(s[i])) \n        s.erase(s.begin() + i); \n}", "category": "Python"}, {"instruction": "Write a function to get a string made of the first and last two characters of a given string.", "input": "input_string = \"spring\"", "output": "def string_two_characters(input_string): \n    # Get the length of the string \n    n = len(input_string) \n  \n    # Return the string which is made of the first and last two characters \n    return input_string[0:2] + input_string[n-2:n] \n  \n# Driver Code \ninput_string = \"spring\"\nprint(string_two_characters(input_string))", "category": "Python"}, {"instruction": "Return the maximum number of 256-bit numbers that fit in a 1GB RAM.", "input": "", "output": "The maximum number of 256-bit numbers that fit in a 1GB RAM is 134217728.", "category": "Python"}, {"instruction": "What is the maximum number of nodes in a full binary tree with a given height?", "input": "Height: 4", "output": "The maximum number of nodes in a full binary tree with a given height of 4 is 2^4 - 1, which is 15.", "category": "Python"}, {"instruction": "Convert a string to its corresponding integer value.", "input": "String: \"123\"", "output": "def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res * 10 + int(char)\n    return res", "category": "Python"}, {"instruction": "Compare the following two strings and print out which one is bigger.", "input": "str1=\"Hello\"\nstr2=\"World\"", "output": "let str1=\"Hello\";\nlet str2=\"World\";\n\nif(str1 > str2){\n console.log(str1 + \" is bigger than \" + str2);\n}\nelse{\n console.log(str2 + \" is bigger than \" + str1);\n}", "category": "Python"}, {"instruction": "Create a React component for displaying a list of items with name, description, and price fields.", "input": "", "output": "import React from 'react';\n\nconst ItemList = ({items}) => {\n  return (\n    <div className=\"item-list\">\n      {items.map(item => (\n        <div className=\"item\" key={item.name}>\n          <div className=\"name\">{item.name}</div>\n          <div className=\"description\">{item.description}</div>\n          <div className=\"price\">{item.price}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemList;", "category": "Python"}, {"instruction": "Create a database table for a social media application.", "input": "", "output": "CREATE TABLE users (\n    id int NOT NULL AUTO_INCREMENT,\n    username varchar(255) NOT NULL,\n    password varchar(255) NOT NULL,\n    email varchar(255) NOT NULL,\n    PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a regular expression to match emails with domain example.com", "input": "", "output": "/[a-zA-Z0-9_\\-\\.]+@example\\.com$/", "category": "Python"}, {"instruction": "Refactor this function to be less complex and more readable.", "input": "def calculate_price(products):\n  total_price=0\n  for p in products:\n    total_price+=p[0]*p[1]\n  return total_price", "output": "def calculate_price(products):\n  total_price = 0\n  for price, quantity in products: \n    total_price += price * quantity\n  return total_price", "category": "Python"}, {"instruction": "Write a function for removing duplicate values from an array.", "input": "", "output": "function removeDuplicates(arr){\n  let result = [];\n  arr.forEach(function(element){\n    if(!result.includes(element)){\n      result.push(element);\n    }\n  });\n  return result;\n}", "category": "Python"}, {"instruction": "Using conditional statements, print out whether a given number is odd or even.", "input": "number = 7", "output": "if(number % 2 == 0){\n  console.log('`number` is even')\n} else {\n  console.log('`number` is odd')\n}", "category": "Python"}, {"instruction": "Create a while loop in Python to increment a counter by 1 until it reaches 10.", "input": "counter = 0", "output": "while counter < 10:\n    counter += 1", "category": "Python"}, {"instruction": "Print out the sum of each row of a given 2 dimensional array.", "input": "arr = [\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3]\n]", "output": "// Total sum of each row\nfor(let row of arr){\n  let total = 0\n  for(let col of row){\n    total += col\n  }\n  console.log(total)\n}", "category": "Python"}, {"instruction": "Create a tower of stars made up of 10 lines of increasing star lengths.", "input": "", "output": "starString = \"*\";\nfor (let i = 1; i <= 10; i++){\n  console.log(starString);\n  starString += \"*\";\n}", "category": "Python"}, {"instruction": "Write a for loop for printing the first 10 powers of 2.", "input": "", "output": "for(let i = 0; i <= 10; i++){\n  console.log(2**i);\n}", "category": "Python"}, {"instruction": "Create a switch statement that prints \"Yay!\" if input is 1 and \"Nay!\" if input is 2.", "input": "", "output": "switch(input){\n  case 1:\n    console.log(\"Yay!\");\n    break;\n  case 2:\n    console.log(\"Nay!\");\n    break;\n  default:\n    console.log(\"Invalid Input\")\n    break;\n}", "category": "Python"}, {"instruction": "Create a class called 'Address' with four string fields: address line 1, address line 2, city, and zipCode.", "input": "", "output": "class Address {\n  String addressL1;\n  String addressL2;\n  String city;\n  String zipCode;\n\n  public Address(String addressL1, String addressL2, String city, String zipCode) {\n    this.addressL1 = addressL1;\n    this.addressL2 = addressL2;\n    this.city = city;\n    this.zipCode = zipCode;\n  }\n}", "category": "Python"}, {"instruction": "Create a new SQL table using the following schema", "input": "employees (name VARCHAR(25), age INT, gender VARCHAR(6), salary INT)", "output": "CREATE TABLE employees (\n    name VARCHAR(25) NOT NULL,\n    age INT NOT NULL,\n    gender VARCHAR(6) NOT NULL,\n    salary INT NOT NULL\n);", "category": "Python"}, {"instruction": "Write a JavaScript function to find the maximum value from an array of numbers", "input": "[10,20,30,40,50]", "output": "function maxValue(arr){\n    let max = arr[0];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Edit the following HTML document and change the font color of the level 2 heading tag to red", "input": "<html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2>Heading 2</h2></body></html>", "output": "<html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2 style=\"color:red;\">Heading 2</h2></body></html>", "category": "Python"}, {"instruction": "Design a CSS class to set the color of text.", "input": "", "output": ".text-color {\n  color: #000000;\n}", "category": "Python"}, {"instruction": "Create a JavaScript class called Point with an X and a Y coordinate.", "input": "", "output": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}", "category": "Python"}, {"instruction": "Create an HTML page with a basic structure and text.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Basic HTML Page Structure</title>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n    <p>This is a basic HTML page structure.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following JavaScript code to make it able to log even numbers.", "input": "const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i])\n}", "output": "const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  if (myArray[i] % 2 == 0) {\n    console.log(myArray[i])\n  }\n}", "category": "Python"}, {"instruction": "Write an HTML code to add a padding of 10px to the paragraph tag", "input": "", "output": "<p style=\"padding: 10px;\">  </p>", "category": "Python"}, {"instruction": "Using Java, write a program that calculates the average of 5 numbers entered by the user.", "input": "2, 4, 6, 8, 10", "output": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int[] numList = new int[5];\n        int sum = 0;\n        \n        for(int i=0;i<numList.length;i++){\n            System.out.println(\"Enter number \"+(i+1));\n            numList[i] = sc.nextInt();\n            sum += numList[i];\n        }\n        \n        double avg = (double)sum/numList.length;\n        System.out.println(\"Average = \"+avg);\n        \n    }\n}", "category": "Python"}, {"instruction": "Write a function in Java to implement a Radix Sort algorithm.", "input": "", "output": "void radixSort(int arr[]) \n{ \n    int n = arr.length; \n  \n    // Find the maximum number to know number of digits \n    int max = getMax(arr, n); \n  \n    // Do counting sort for every digit. Note that instead \n    // of passing digit number, exp is passed. exp is 10^i \n    // where i is current digit number \n    for (int exp = 1; max/exp > 0; exp *= 10) \n        countSort(arr, n, exp); \n} \n\nint getMax(int arr[], int n) \n{ \n    int max = arr[0]; \n    for (int i = 1; i < n; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n    return max; \n} \n  \nvoid countSort(int arr[], int n, int exp) \n{ \n    int output[n]; // output array \n    int i; \n    int count[10] = {0}; \n  \n    // Store count of occurrences in count[] \n    for (i = 0; i < n; i++) \n        count[ (arr[i]/exp)%10 ]++; \n  \n    // Change count[i] so that count[i] now contains actual \n    //  position of this digit in output[] \n    for (i = 1; i < 10; i++) \n        count[i] += count[i - 1]; \n  \n    // Build the output array \n    for (i = n - 1; i >= 0; i--) \n    { \n        output[count[ (arr[i]/exp)%10 ] - 1] = arr[i]; \n        count[ (arr[i]/exp)%10 ]--; \n    } \n  \n    // Copy the output array to arr[], so that arr[] now \n    // contains sorted numbers according to curent digit \n    for (i = 0; i < n; i++) \n        arr[i] = output[i]; \n}", "category": "Python"}, {"instruction": "Convert the following line of HTML code to lowercase.", "input": "<P>", "output": "<p>", "category": "Python"}, {"instruction": "Create a module in Python to read webpages into the program", "input": "", "output": "import urllib\n\ndef read_webpage(url):\n    with urllib.request.urlopen(url) as response:\n        return response.read()", "category": "Python"}, {"instruction": "Write a Python program to calculate the frequency of each element in a given list.", "input": "mylist = [2, 3, 4, 2, 3, 5, 6, 7]", "output": "def frequency_count(mylist):\n    freq = {}\n    for element in mylist:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n    \nprint(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}", "category": "Python"}, {"instruction": "Modify the following code to add a new item to the list at a specific index.", "input": "lst = [\"a\", \"b\", \"c\", \"d\"]", "output": "lst = [\"a\", \"b\", \"c\", \"d\"]\n\nlst.insert(2, \"e\")\n\nprint(lst) # output ['a', 'b', 'e', 'c', 'd']", "category": "Python"}, {"instruction": "Write a SQL query that selects all the records from the table student.", "input": "", "output": "SELECT * FROM student;", "category": "Python"}, {"instruction": "Identify the correct code to execute an API call with the python requests library.", "input": "", "output": "import requests\n \nresponse = requests.get('http://example.com/api')", "category": "Python"}, {"instruction": "Calculate the cube root of 533.", "input": "", "output": "7.777314028068125", "category": "Python"}, {"instruction": "Parse the JSON text below and add \"City\" to the dictionary.", "input": "{\n \"Name\": \"John\",\n \"Age\": 32\n}", "output": "{\n \"Name\": \"John\",\n \"Age\": 32,\n \"City\": \"\"\n}", "category": "Python"}, {"instruction": "Construct a xPath that selects all the hyperlinks from the HTML snippet below.", "input": "<div>\n  <a href=\"https://example.com/first\">First link</a>\n  <a href=\"https://example.com/second\">Second link</a>\n</div>", "output": "//div//a", "category": "Python"}, {"instruction": "Edit the HTML code snippet below to add the attribute \"target='_blank'\" to the link element.", "input": "<a href=\"https://example.com\">Example Website</a>", "output": "<a href=\"https://example.com\" target='_blank'>Example Website</a>", "category": "Python"}, {"instruction": "Create a table in a MySQL database that contains a list of titles with two columns (\"title\" and \"description\").", "input": "", "output": "CREATE TABLE titles (\n   title VARCHAR(255) NOT NULL,\n   description VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Calculate the median of the following numbers: 14, 30, 5, 10.", "input": "", "output": "10", "category": "Python"}, {"instruction": "Generate a hash for the string \"AutomatedAssistant\"", "input": "", "output": "d3eb3504653eba66b47a82f3cb5279ae9133f2584e00cbc56434a3d877f7b284", "category": "Python"}, {"instruction": "Create an API endpoint that takes two inputs (phone number and name) and updates contact details in the database.", "input": "", "output": "@app.route(\"/api/update_contact_details\", methods=['PUT'])\ndef update_contact_details():\n    # Get the inputs from the request body\n    phone_number = request.json['phone_number']\n    name = request.json['name']\n    # Query the database\n    db.execute(\"UPDATE contacts SET name = '{name}' WHERE phone = '{phone_number}'\".format(name=name, phone_number=phone_number))\n    return jsonify(status=\"success\")", "category": "Python"}, {"instruction": "Write a Python code snippet that checks if all elements in the input list are equal.", "input": "[10, 10, 10]", "output": "all_equal = all(x == 10 for x in [10, 10, 10])", "category": "Python"}, {"instruction": "Calculate the total of the numbers in the array below.", "input": "[5, 10, 15]", "output": "30", "category": "Python"}, {"instruction": "Rewrite the following code in a more efficient way, keeping the same logic:", "input": "for i in range(len(lst)-1):\n    for j in range(i+1, len(lst)):\n        if lst[i]==lst[j]:\n            return True", "output": "def find_duplicate(lst):\n    seen = set()\n    for elem in lst:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False", "category": "Python"}, {"instruction": "Generate a list of prime numbers", "input": "", "output": "def generate_primes(n):\n    prime_list = []\n    for num in range(2, n + 1): \n        if all(num % i != 0 for i in range(2, num)): # check if num is prime\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Determine whether a given number is an armstrong number or not", "input": "153", "output": "def is_armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  sum_ = 0\n  for digit in digits:\n    sum_ += pow(digit, len(digits))\n  return num == sum_\n\nprint(is_armstrong_number(153))\n# Output: True", "category": "Python"}, {"instruction": "You need to write a function to find the index of a value in an array", "input": "[1, 2, 3, 4], 3", "output": "def find_index(arr, val):\n    for index, elem in enumerate(arr):\n        if val == elem:\n            return index\n    return -1\n\nprint(find_index([1, 2, 3, 4], 3))\n# Output: 2", "category": "Python"}, {"instruction": "Write an SQL query to find the ID, course name and instructor name for courses taught by instructor \"John Smith\".", "input": "", "output": "SELECT id, course_name, instructor_name\n  FROM Courses\n  WHERE instructor_name = 'John Smith';", "category": "Python"}, {"instruction": "Write a python code to check for a number being prime or not.", "input": "num = 11", "output": "# Initialize a boolean no_prime\nno_prime = False\n\n# Check all numbers lower than num\nfor i in range(2, num):\n    if num % i == 0: \n        no_prime = True\n        break \n\n# Print the appropriate output\nif no_prime:\n    print(num, 'is not prime')\nelse:\n    print(num, 'is prime')", "category": "Python"}, {"instruction": "Write a Java code to find the maximum of two numbers a and b.", "input": "int a = 3;\nint b = 4;", "output": "int max;\n\nif (a > b) {\n max = a;\n} else {\n max = b;\n}", "category": "Python"}, {"instruction": "Write a C# code snippet to add two integers a and b.", "input": "int a = 3;\nint b = 4;", "output": "int c = a + b;", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all students who are enrolled in the course \"Intro to Data Science\".", "input": "", "output": "SELECT name FROM Student\n  WHERE course_name = 'Intro to Data Science';", "category": "Python"}, {"instruction": "Write a python code snippet to square the number 12.", "input": "", "output": "x = 12\ny = x**2\nprint(y)", "category": "Python"}, {"instruction": "Combine the input arrays into a single array.", "input": "Array1 = [3, 4, 9, 6]\nArray2 = [2, 6, 8, 7]", "output": "Array = [3, 4, 9, 6, 2, 6, 8, 7]", "category": "Python"}, {"instruction": "Change the CSS style of the paragraph element below so that it has a red border around it.", "input": "<p>This is my paragraph</p>", "output": "<p style=\"border: 1px solid red;\">This is my paragraph</p>", "category": "Python"}, {"instruction": "Create a graphical representation of the input data.", "input": "Apple : 48 \nOrange : 32 \nBanana : 68", "output": "<img src=\"output-graph.png\" width=\"400\" height=\"200\" />", "category": "Python"}, {"instruction": "Create multiple classes in Java with the provided input.", "input": "class Player {\n    String name;\n    int age;\n    String club; \n    String position;", "output": "class Player {\n    String name; \n    int age;\n    String club;\n    String position;\n\n    // Constructors\n    public Player(String name, int age, String club, String position) {\n        this.name = name;\n        this.age = age;\n        this.club = club;\n        this.position = position;\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return this.name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return this.age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public String getClub() {\n        return this.club;\n    }\n    public void setClub(String club) {\n        this.club = club;\n    }\n    public String getPosition() {\n        return this.position;\n    }\n    public void setPosition(String position) {\n        this.position = position;\n    }\n}", "category": "Python"}, {"instruction": "Write a comment for the following code", "input": "def convert_to_timestamp(date): \n    # convert date to timestamp\n    time_converted = time.strptime(date, \"%Y-%m-%d %H:%M:%S\")\n    timestamp = time.mktime(time_converted)\n    return timestamp", "output": "# This function takes a date in string format \"%Y-%m-%d %H:%M:%S\" and returns the corresponding timestamp in seconds.", "category": "Python"}, {"instruction": "Generate a code to extract data from a table 'book_list' that has columns book_id and title. Extract data from book_list table where book_id is greater than 500.", "input": "", "output": "SELECT * FROM book_list WHERE book_id > 500;", "category": "Python"}, {"instruction": "Write a function to parse HTML", "input": "", "output": "import bs4 as bs\n\ndef parse_html(html):\n    soup = bs.BeautifulSoup(html, 'html.parser')\n    return soup", "category": "Python"}, {"instruction": "Write a JavaScript statement to delete all cookies", "input": "", "output": "document.cookie = \"\";", "category": "Python"}, {"instruction": "Sort a given array according to the given criteria", "input": "[1, 20, 12, 15, 5], 'desc'", "output": "def sort_array(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\narr = [1, 20, 12, 15, 5] \norder = 'desc'\n\nprint(sort_array(arr, order))\n# Output: [20, 15, 12, 5, 1]", "category": "Python"}, {"instruction": "Output the following array in a column", "input": "[1, 2, 3, 4]", "output": "for x in [1,2,3,4]:\n    print(x)\n    \n# Output:\n1\n2\n3\n4", "category": "Python"}, {"instruction": "Edit the code to fix the following bug: The code doesn't return the expected output.", "input": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x", "output": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return int(x)", "category": "Python"}, {"instruction": "Classify a set of emails into 'spam' or 'not spam'.", "input": "Email 1: \nHello there, I noticed that you have not been making use of our sales offers lately, so I thought I'd remind you about our special offers and discounts for the month. Don't miss out!", "output": "not spam", "category": "Python"}, {"instruction": "Write a function to print out all possible permutations of a list of numbers.", "input": "list = [1, 2, 3]", "output": "def permutations(list): \n    if len(list) == 0: \n        return [] \n    if len(list) == 1: \n        return [list]\n    l = [] #empty list \n  \n    for i in range(len(list)): \n        m = list[i] \n        remList = list[:i] + list[i+1:] \n        for p in permutations(remList): \n            l.append([m] + p) \n    return l", "category": "Python"}, {"instruction": "Write code to search for a number in a sorted array.", "input": "", "output": "def binary_search(list, target):\n    low = 0\n    high = len(list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == target:\n            return mid\n        if list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Write a code to get the sum of all the unique values in a dictionary.", "input": "d = {'a': 2, 'b': 3, 'c': 4, 'd': 5}", "output": "total_sum  = 0\nfor key in d:\n    total_sum += d[key]\n    \nprint(total_sum)", "category": "Python"}, {"instruction": "What is a regular expression?", "input": "", "output": "A regular expression (regex) is a sequence of characters that define a search pattern used to match strings or pieces of text. It can be used for searching, validating and manipulating text.", "category": "Python"}, {"instruction": "Create a class, Car, with the following instance variables that store information about a car", "input": "Number of doors, colour, model_year, speed", "output": "class Car:\n\tdef __init__(self, num_doors, color, model_year, speed):\n\t\tself.num_doors = num_doors\n\t\tself.color = color\n\t\tself.model_year = model_year\n\t\tself.speed = speed", "category": "Python"}, {"instruction": "Explain what boolean operators are and what do they do.", "input": "", "output": "Boolean operators are logical operators which allow us to connect two or more conditions in a statement. These operators return a boolean value when evaluates multiple conditions or objects. The three main boolean operators are AND, OR, NOT. The AND operator returns true if both conditions are true, OR operator if any one of the condition is true and NOT operator returns true only if the condition is false.", "category": "Python"}, {"instruction": "Construct a single list from the following list of lists.", "input": "[[1, 2], [3, 4]]", "output": "final_list = [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Reorder the following array in decreasing order.", "input": "[21, 12, 8, 36, 33]", "output": "[36, 33, 21, 12, 8]", "category": "Python"}, {"instruction": "Generate code to find the mean of the following list of numbers.", "input": "number_list = [3, 7, 4, 8, 5, 9]", "output": "def mean(number_list):\n    return sum(number_list) / len(number_list)\n \naverage = mean(number_list)\nprint(average)\n\n# Output: 6.166666666666667", "category": "Python"}, {"instruction": "Convert the following list of URLs to strings without the protocol portions.", "input": "url_list = ['http://example.com/index', 'https://example.net/contact', \n            'http://example.org/about']", "output": "def convert_urls(url_list):\n    return list(map(lambda x : x.split('://')[1] , url_list))\n \nconverted_urls = convert_urls(url_list)\nprint(converted_urls)\n\n# Output: ['example.com/index', 'example.net/contact', 'example.org/about']", "category": "Python"}, {"instruction": "Write a function that takes a list of numbers and a target number. Print the numbers in the list that are closest to the target.", "input": "number_list = [7, 11, 13, 14, 40]\ntarget = 16", "output": "def closest_numbers(number_list, target):\n    closest_numbers = min(map(lambda x : (x , abs(x - target)), number_list))\n    return closest_numbers[0]\n\nclosest_num = closest_numbers(number_list, target)\nprint(closest_num)\n\n# Output: 14", "category": "Python"}, {"instruction": "Write a python regex pattern to filter the following list of strings.", "input": "string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']", "output": "import re \n  \nstring_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']\nfiltered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]$',x), string_list)) \n\nprint(filtered_list) \n \n# Output: ['ABC1', 'DEF2', 'GHI3']", "category": "Python"}, {"instruction": "Add code to make an API call using a library to a given JSON endpoint and retrieve the data.", "input": "API URL: https://example.com/endpoint/data", "output": "import requests\n \nurl = \"https://example.com/endpoint/data\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Code a function to generate a random string of 10 randomly selected characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nrandom_string = generate_random_string()", "category": "Python"}, {"instruction": "Given a list of strings, code a function to remove all duplicate strings.", "input": "string_list = ['a', 'b', 'c', 'a', 'b', 'c', 'd']", "output": "def remove_duplicates(string_list):\n    return list(set(string_list))\n\nunique_string_list = remove_duplicates(string_list)\nprint(unique_string_list)\n\n# Output: ['d', 'b', 'a', 'c']", "category": "Python"}, {"instruction": "Generate the SQL query to select all columns from a table called \"data_table\".", "input": "", "output": "SELECT * \nFROM data_table;", "category": "Python"}, {"instruction": "Given an array of numbers, how would you filter the numbers that are divisible by 3.", "input": "[1, 6, 7, 8, 10, 15, 18, 18]", "output": "[6, 9, 15, 18, 18]", "category": "Python"}, {"instruction": "Edit the text below and print a new sentence using the same words.", "input": "The moon is bright and beautiful.", "output": "Beautiful and bright, the moon shines.", "category": "Python"}, {"instruction": "Construct a SELECT SQL query answer the question \"Which employees have an age of 25?\".", "input": "", "output": "SELECT * FROM employees WHERE age = 25;", "category": "Python"}, {"instruction": "Write a Python function that takes two strings and returns the longest common subsequence.", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]", "category": "Python"}, {"instruction": "Write a function to replace the Kth smallest number in integer array with 0.", "input": "nums = [2, 9, 8, 11, 5]\nK = 3", "output": "def replace_kth_smallest(nums, k):\n    min_num = min(nums)\n    min_count = nums.count(min_num)\n    if k > min_count:\n        k -= min_count\n        nums.remove(min_num)\n    nums[k-1] = 0\n    return nums", "category": "Python"}, {"instruction": "Define a class \"Car\" with two data attributes \"top speed\" and \"model year\".", "input": "", "output": "class Car:\n    def __init__(self, top_speed, model_year):\n        self.top_speed = top_speed\n        self.model_year = model_year", "category": "Python"}, {"instruction": "Design a JSON schema for an item.", "input": "", "output": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"price\": {\n            \"type\": \"number\"\n        },\n        \"quantity\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"required\": [\"id\", \"name\", \"price\", \"quantity\"]\n}", "category": "Python"}, {"instruction": "Write a Python program to print the calendar of a given month and year", "input": "", "output": "import calendar\n\ndef get_calendar(month, year):\n  return calendar.month(year, month)", "category": "Python"}, {"instruction": "Generate a function in Python which takes a list and sorts the list elements in ascending order", "input": "", "output": "def sort_ascending(nums):\n  return sorted(nums)", "category": "Python"}, {"instruction": "Create a Python program which takes a sentence and prints back the words in reverse order", "input": "", "output": "def reverse_words(sentence):\n  words = sentence.split()\n  words.reverse()\n  return ' '.join(words)", "category": "Python"}, {"instruction": "Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.", "input": "", "output": "def is_even(x):\n   return x%2 == 0", "category": "Python"}, {"instruction": "Build a function to detect if a provided number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Create a BST with two data elements 10 and 15.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data \n        self.left = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n  \n  \n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n  \n    def _insert(self, value, cur_node):\n        if value < cur_node.data:\n            if cur_node.left is None:\n                cur_node.left = Node(value)\n            else:\n                self._insert(value, cur_node.left)\n        elif value >= cur_node.data:\n            if cur_node.right is None:\n                cur_node.right = Node(value)\n            else:\n                self._insert(value, cur_node.right)\n        else:\n            pass \n\nbst = BST()\nbst.insert(10)\nbst.insert(15)", "category": "Python"}, {"instruction": "Create a Python function to print a Fibonacci sequence up to n number of digits.", "input": "", "output": "def fib(n):\n a,b = 0,1\n while a<n:\n  print(a, end=' ')\n  a,b = b,a+b\n print()", "category": "Python"}, {"instruction": "Create a function in Python which takes a list and finds the second highest number in it.", "input": "arr = [2, 3, 1, 5, 4]", "output": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-2]", "category": "Python"}, {"instruction": "Create a class that represents a circle", "input": "radius = 5.5", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return self.radius * self.radius * 3.14\n\nc = Circle(radius) \nprint(c.area())  # Output: 95.033", "category": "Python"}, {"instruction": "Cut all the letters off the end of a given word.", "input": "word = \"Hello\"", "output": "new_word = word[:len(word)-1]\nprint(new_word)  # Output: Hell", "category": "Python"}, {"instruction": "Irrespective of the value of the input array, always print 1111111.", "input": "arr = [6,2,3,4]", "output": "for x in arr:\n    print(1111111)", "category": "Python"}, {"instruction": "Deconstruct this line of Python code and explain what it does", "input": "y = [x**2 for x in range(10)]", "output": "This line of code is a Python List Comprehension, it will iterate through the range of 0 to 9 and square each of those numbers and add them to a new list 'y'. The list will contain the squares of the numbers 0 to 9, i.e. [0, 1, 4, 9, 16, 25, 36, 49, 64, 81].", "category": "Python"}, {"instruction": "Write a function that can generate all permutations of a given string.", "input": "string = \"ABC\"", "output": "def permute(string):\n    if len(string) == 1:\n        return [string] \n\n    prevList = permute(string[1:]) \n\n    nextList = [] \n    for i in range(len(prevList)): \n        for j in range(len(string)): \n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] \n            if newString not in nextList: \n                nextList.append(newString) \n    return nextList", "category": "Python"}, {"instruction": "Write a function that can split an array into two equally-sized subarrays.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def split_array(arr):\n    if len(arr) % 2 != 0:\n        return False\n\n    mid = len(arr)// 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    return [left_arr, right_arr]", "category": "Python"}, {"instruction": "Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.", "input": "", "output": "def is_vowel(char):\n    vowels = 'aeiou'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a HTML form with three input fields for taking a user's name, email, and address.", "input": "", "output": "<form action=\"\" method=\"post\">\n    <label for=\"name\">Name: </label><br>\n    <input type=\"text\" name=\"name\" id=\"name\"><br><br>\n\n    <label for=\"email\">Email: </label><br>\n    <input type=\"email\" name=\"email\" id=\"email\"><br><br>\n\n    <label for=\"address\">Address: </label><br>\n    <input type=\"text\" name=\"address\" id=\"address\"><br><br>\n\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Design a Swift class for a 3-dimensional point.", "input": "", "output": "class Point3D {\n    var x: Double\n    var y: Double\n    var z: Double\n \n    init(x: Double, y: Double, z: Double) {\n        self.x = x\n        self.y = y\n        self.z = z\n    }\n}", "category": "Python"}, {"instruction": "Generate a CSS rule to make all headings red.", "input": "", "output": "h1, h2, h3, h4 {\n    color: red; \n}", "category": "Python"}, {"instruction": "Translate the following expression into a SQL query.", "input": "", "output": "SELECT * FROM table WHERE conditions LIKE '%expression%';", "category": "Python"}, {"instruction": "Investigate the syntax error in this R script and fix it.", "input": "x <- c(1, 2, 3", "output": "x <- c(1, 2, 3)", "category": "Python"}, {"instruction": "Create a Java programme that accepts two strings and returns the length of the longest string.", "input": "String string1 = \"Hello\";\nString string2 = \"World!\";", "output": "int longest = Math.max(string1.length(), string2.length());\nSystem.out.println(\"Longest string length is \"+ longest);", "category": "Python"}, {"instruction": "How would you form a list from two lists by taking elements at same index from both the lists?", "input": "", "output": "def form_list_from_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3] \n    list2 = [4, 5, 6]\n    print(form_list_from_list(list1, list2))", "category": "Python"}, {"instruction": "Write a code to get the second smallest number from a list of integers.", "input": "", "output": "def second_smallest(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n\nif __name__ == '__main__':\n    numbers = [1, 5, 2, 9, 3, 6]\n    print(second_smallest(numbers))", "category": "Python"}, {"instruction": "How would you calculate the distance between two points in a three-dimensional space?", "input": "", "output": "def distance_3d(x1, y1, z1, x2, y2, z2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\n\nif __name__ == '__main__':\n    x1, y1, z1 = 1, 2, 3\n    x2, y2, z2 = 5, 6, 7\n    print(distance_3d(x1, y1, z1, x2, y2, z2))", "category": "Python"}, {"instruction": "Edit the following code to print the position of an element x in a list y.", "input": "list y = [2, 3, 4, 1, 5]\nx = 1", "output": "list y = [2, 3, 4, 1, 5]\nx = 1\n\ndef find_position(y, x):\n    for index, value in enumerate(y):\n        if value == x:\n            return index\n    return f\"{x} is not in the list\"\n\nif __name__ == '__main__':\n    print(find_position(y, x))", "category": "Python"}, {"instruction": "Write a Python program to print the numbers of a specified list after removing even numbers from it.", "input": "", "output": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))", "category": "Python"}, {"instruction": "Create a function to get the root of a quadratic equation", "input": "1, 4, 4", "output": "def get_roots_of_quad_eqn(a, b, c):\n    # compute discriminant \n    d = (b**2) - (4 * a * c)\n    \n    # compute roots\n    root1 = (-b + math.sqrt(d)) / (2 * a) \n    root2 = (-b - math.sqrt(d)) / (2 * a) \n    \n    # return the roots\n    return root1, root2\n\nif __name__ == '__main__':\n    a, b, c = 1, 4, 4\n    print(get_roots_of_quad_eqn(a, b, c))", "category": "Python"}, {"instruction": "How would you generate a Fibonacci sequence up to n in a list?", "input": "", "output": "def generate_fibonacci_sequence(n):\n    result = [1]\n \n    current_number = 1\n    next_number = 1\n    while current_number <= n:\n        result.append(current_number)\n        current_number, next_number = next_number, current_number + next_number\n \n    return result\n\nif __name__ == '__main__':\n print(generate_fibonacci_sequence(10))", "category": "Python"}, {"instruction": "Create a program that finds the average of two numbers.", "input": "7 and 9", "output": "def find_average(num1, num2):\n    return (num1 + num2) / 2\n\nif __name__ == '__main__':\n    print(find_average(7, 9))", "category": "Python"}, {"instruction": "Using the array below, count the occurrence of the number 3.", "input": "arr = [1, 1, 2, 3, 3, 3, 4, 5]", "output": "arr = [1, 1, 2, 3, 3, 3, 4, 5]\n\ndef count_number(arr, num):\n    count = 0\n    for val in arr:\n        if val == num:\n            count += 1\n    return count\n\ncount = count_number(arr, 3)\nprint(count)  # Output: 3", "category": "Python"}, {"instruction": "Given an array of integers, replace each element of the array with its square.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_squares(arr):\n    squares = []\n    for num in arr:\n        squares.append(num ** 2)\n    return squares\n\narr = [1, 2, 3, 4, 5]\nsquares = get_squares(arr)\n\nprint(*squares)  # Output: 1 4 9 16 25", "category": "Python"}, {"instruction": "Sort the following list of numbers in increasing order without using any built-in sorting method.", "input": "arr = [2, 5, 3, 8, 7]", "output": "def sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\narr = [2, 5, 3, 8, 7] \nsorted_arr = sort_increasing(arr)\nprint(*sorted_arr) # Output: 2 3 5 7 8", "category": "Python"}, {"instruction": "Programmatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters\n    numbers = string.digits\n    symbols = string.punctuation\n\n    chars = letters + numbers + symbols\n    length = 8\n\n    password = \"\".join(random.sample(chars, length))\n    if any(char.islower() for char in password) \\\n        and any(char.isupper() for char in password) \\\n            and any(char.isdigit() for char in password) \\\n                and any(char in symbols for char in password):\n        return password\n\nrandom_password = generate_password()\nprint(random_password)  # Output: eQ@0?St$", "category": "Python"}, {"instruction": "Create a function in Java to find the number of values greater than a given number in a given array.", "input": "int[] arr = {1, 2, 3, 4};\nint threshold = 2;", "output": "public static int greaterThan(int[] arr, int threshold) {\n  int count = 0;\n  for (int i=0; i < arr.length; i++) {\n    if (arr[i] > threshold) {\n      count++;\n    }\n  }\n  return count;\n}", "category": "Python"}, {"instruction": "Edit the given code snippet to reverse the elements of a list in Python.", "input": "", "output": "def reverseList(list): \n    list.reverse() \n    return list", "category": "Python"}, {"instruction": "Output the remaining items in the following array after removing duplicates:", "input": "let arr = [1, 2, 1, 4, 5, 2, 6]", "output": "[4, 5, 6]", "category": "Python"}, {"instruction": "Convert the following JavaScript code to a for loop:", "input": "let num = 0;\nwhile (num < 5) {\n  console.log(num);\n  num++;\n}", "output": "for (let num = 0; num < 5; num++) {\n    console.log(num);\n}", "category": "Python"}, {"instruction": "Create an algorithm to determine whether the given array contains an odd number of elements.", "input": "[1, 2, 3, 4, 5]", "output": "def is_odd(arr):\n    return len(arr) % 2 != 0", "category": "Python"}, {"instruction": "Count the number of vowels present in the input text.", "input": "Good morning!", "output": "def vowel_count(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in text:\n        if c.lower() in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Generate a valid JSON string as output with given input data.", "input": "name: 'John Doe',\nage: 25,\naddress: '123 Main St.'", "output": "def generate_json(data):\n    return json.dumps(data)\n    \n# Usage \ndata = {\"name\": \"John Doe\", \"age\": 25, \"address\": \"123 Main St.\"}\njson_str = generate_json(data) \nprint(json_str)", "category": "Python"}, {"instruction": "Implement quicksort in Python", "input": "", "output": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)", "category": "Python"}, {"instruction": "using the given input text, identify the parts of speech for each word.", "input": "The cat is black and white", "output": "The: article \ncat: noun \nis: verb \nblack: adjective \nand: conjunction \nwhite: adjective", "category": "Python"}, {"instruction": "Write a method in Java which displays a printing pattern like shown below.\n\nx\nxx\nxxx\nxxxx", "input": "", "output": "public static void printPattern(int n) {\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= i; j++) {\n      System.out.print(\"x\");\n    }\n    System.out.println();\n  }\n}", "category": "Python"}, {"instruction": "Design a class in Java called 'Student' which contains student's information such as name, age, etc.", "input": "", "output": "public class Student {\n  private String name;\n  private int age;\n  private boolean status;\n\n  public Student(String name, int age, boolean status) {\n    this.name = name;\n    this.age = age;\n    this.status = status;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int age) {\n    this.age = age;\n  }\n  \n  public boolean getStatus() {\n    return status;\n  }\n  \n  public void setStatus(boolean status) {\n    this.status = status;\n  }  \n}", "category": "Python"}, {"instruction": "Given the following array and a number k, determine if two elements from the array add up to k.", "input": "arr = [10, 15, 3, 7], k = 17", "output": "def findSum(arr, k):\n    s = set()\n    for num in arr:\n        diff = k - num\n        if diff in s:\n            return True\n        s.add(num)\n    return False\n\narr = [10, 15, 3, 7] \nk = 17 \nprint(findSum(arr, k))  # Output: True", "category": "Python"}, {"instruction": "Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.", "input": "", "output": "import tensorflow as tf\nimport matplotlib.pyplot as plt\n\n#Import the dataset\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n  \n# Create our model\nmodel = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])])\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='sgd')\n\n# Fit the model\nmodel.fit(x, y, epochs=10)\n\n# Plot the result\nplt.plot(x, y, 'ro', label='original data')\nplt.plot(x, model.predict(x), label='predicted')\nplt.xlabel('Temperature')\nplt.ylabel('Electricity Consumption')\nplt.legend()\nplt.show()", "category": "Python"}, {"instruction": "Develop a regex expression to validate if a given string contains 5 numbers consecutively.", "input": "", "output": "^\\d{5}$", "category": "Python"}, {"instruction": "Use dictionaries in Python to merge the data from two given dictionaries.", "input": "dictA = {\n  'keyA': 1,\n  'keyB': 2\n}\ndictB = {\n  'keyC': 3,\n  'keyD': 4\n}", "output": "dictC = {**dictA, **dictB}", "category": "Python"}, {"instruction": "Define a Bash function with name 'times2' which takes one parameter and prints the value doubled.", "input": "", "output": "times2 () {\n  value=$1\n  echo \"$value*2 = $(($value*2))\"\n}", "category": "Python"}, {"instruction": "Write a Bash script which will print the value of Shell variable 'USER' followed by User's current working directory.", "input": "", "output": "#!/bin/bash\n\necho \"$USER is currently in: \"\npwd", "category": "Python"}, {"instruction": "Use the given array and print the second element using its index.", "input": "Array: [2, 3, 4, 5, 6]", "output": "console.log(arr[1]); // prints 3", "category": "Python"}, {"instruction": "How does the following HTML code create a clickable link?", "input": "<a href=\"www.example.com\" >Click here</a>", "output": "This HTML code will create a clickable link that will lead to the URL \"www.example.com\" when clicked.", "category": "Python"}, {"instruction": "How does the following CSS style the first letter of a paragraph?", "input": "p::first-letter {\n    font-weight: bold;\n}", "output": "The first letter of a paragraph will be rendered with a bold font style.", "category": "Python"}, {"instruction": "Write a query in MongoDB to fetch all documents where the field 'status' is 'active'.", "input": "", "output": "db.collection.find({\"status\": \"active\"})", "category": "Python"}, {"instruction": "Compute the sum of elements in the following input array.", "input": "[4, 7, 2, 9, 10, 15]", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Create a C# function called \"InsertCharacter\" that takes a string input and inserts a character at a given index.", "input": "string = \"Hello World!\", index = 5", "output": "public static string InsertCharacter(string str, int index, char ch)\n{\n    return str.Substring(0, index) + ch + str.Substring(index);\n}\n\nstring newString = InsertCharacter(\"Hello World!\", 5, 'x');\nConsole.WriteLine(newString);  # Output: Hellxo World!", "category": "Python"}, {"instruction": "Replace the values in the following array with its cumulative sum.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def cumulative_sum(arr):\n    cum_sum = []\n    temp_sum = 0\n    for num in arr:\n        temp_sum += num\n        cum_sum.append(temp_sum)\n    return cum_sum\n\narr = [1, 2, 3, 4, 5] \ncum_sum = cumulative_sum(arr)\n\nprint(cum_sum)  # Output: [1, 3, 6, 10, 15]", "category": "Python"}, {"instruction": "Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide", "input": "", "output": "class Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        return num1 / num2", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.", "input": "", "output": "def sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n    return result", "category": "Python"}, {"instruction": "Make a single change in the following code to throw an error when the argument to the function is negative.", "input": "def calculate_square_root(n):\n    return n**(1/2)", "output": "def calculate_square_root(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    return n**(1/2)", "category": "Python"}, {"instruction": "Write code to iterate through a nested dictionary and return the sum of all values.", "input": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}", "output": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}\n\ndef iterate_dict(d):\n    result = 0\n    for value in d.values():\n        if type(value) is dict:\n            result += iterate_dict(value)\n        else:\n            result += value\n    return result\n\nprint(iterate_dict(dictionary)) # 13", "category": "Python"}, {"instruction": "Find the maximum number of left and right parentheses that can be balanced for a given expression.", "input": "Expression: (()()", "output": "The maximum number of left parentheses that can be balanced in the given expression is 3 and the maximum number of right parentheses that can be balanced is 3.", "category": "Python"}, {"instruction": "Write a query in MySQL that returns all unique values of a given column.", "input": "Table name: student\nColumn: gender", "output": "SELECT DISTINCT gender FROM student;", "category": "Python"}, {"instruction": "Convert this temperature from Kelvin to Celsius in JavaScript.", "input": "Temperature (K): 298", "output": "let tempKelvin = 298;\nlet convertedTemp = tempKelvin - 273.15;\nconsole.log(convertedTemp + ' degrees Celsius');", "category": "Python"}, {"instruction": "Using HTML, write a code to create a link that redirects to a specified webpage.", "input": "Link: https://www.google.com", "output": "<a href=\"https://www.google.com\">Click here to visit Google</a>", "category": "Python"}, {"instruction": "Compile this code in C++.", "input": "#include <iostream>\n \nint main() \n{\n    std::cout << \"Hello World!\";\n    return 0;\n}", "output": "g++ -o hello_world hello_world.cpp", "category": "Python"}, {"instruction": "Design a class in Python to model a hospital.", "input": "", "output": "class Hospital:\n    def __init__(self, location, name, rooms, staff):\n        self.location = location\n        self.name = name\n        self.rooms = rooms\n        self.staff = staff\n    \n    def get_location(self):\n        return self.location\n    \n    def get_name(self):\n        return self.name\n    \n    def get_rooms(self):\n        return self.rooms\n    \n    def get_staff(self):\n        return self.staff\n    \n    def set_location(self, location):\n        self.location = location\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_rooms(self, rooms):\n        self.rooms = rooms\n    \n    def set_staff(self, staff):\n        self.staff = staff", "category": "Python"}, {"instruction": "Given a number as an input, write a code in Java to check if it is an Armstrong number.", "input": "Number: 153", "output": "public class ArmstrongNumber { \n\tpublic static boolean armstrongNumber(int number) \n\t{ \n\t\tint result = 0, originalNumber, remainder; \n\n\t\toriginalNumber = number; \n\n\t\t// Check if the number is Armstrong number \n\t\twhile (originalNumber != 0) { \n\t\t\tremainder = originalNumber % 10; \n\t\t\tresult += Math.pow(remainder, 3); \n\t\t\toriginalNumber /= 10; \n\t\t} \n\n\t\tif (result == number) \n\t\t\treturn true; \n\t\telse\n\t\t\treturn false; \n\t} \n\t\t\n\tpublic static void main(String[] args) \n\t{ \n\t\tint number = 153; \n\t\tboolean isArmstrong = \n\t\t\tarmstrongNumber(number); \n\t\tif (isArmstrong) \n\t\t\tSystem.out.println(number + \n\t\t\t\t\t\" is an Armstrong number.\"); \n\t\telse\n\t\t\tSystem.out.println(number + \n\t\t\t\t\t\" is not an Armstrong number.\"); \n\t} \n}", "category": "Python"}, {"instruction": "Write a query in SQL to get the top 10 students with the highest scores.", "input": "Table name: student\nColumns: name, score", "output": "SELECT TOP 10 name, score FROM student ORDER BY score DESC;", "category": "Python"}, {"instruction": "Given a string, write code to reverse it in JavaScript.", "input": "String: programming", "output": "function reverseString(str) {\n  let revStr = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    revStr += str[i];\n  }\n  return revStr;\n}\n\nconsole.log(reverseString('programming'));", "category": "Python"}, {"instruction": "Create a class in Java that prints \"Hello World!\"", "input": "", "output": "class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "category": "Python"}, {"instruction": "What is the difference between post() and get() in AJAX?", "input": "", "output": "The main difference between post() and get() in AJAX is that post() sends the data in the body of the request and get() sends it in the URL. Post() is generally used to send form data, and can be used for creating or updating data on the server. Get() is usually used for requesting data from the server, and can be used for reading data from the server.", "category": "Python"}, {"instruction": "Replace the \"TODO\" in the following code with the code to print the sum of the first n natural numbers.", "input": "def print_sum(n):\n    # TODO\n\nprint_sum(5)", "output": "def print_sum(n):\n    sum_n = n * (n + 1) // 2\n    print(sum_n)\n\nprint_sum(5)", "category": "Python"}, {"instruction": "Create a function to parse a string that has lines of key/value pairs and return a dictionary of the values paired with the keys.", "input": "", "output": "def parse_key_value_pairs(string):\n    result = {}\n    lines = string.split(\"\\n\")\n    for line in lines:\n        if line:\n            key, value = line.split(\":\")\n            result[key] = value\n    return result", "category": "Python"}, {"instruction": "Write code to find the maximum sum for a contiguous subarray of a given array.", "input": "", "output": "def max_sum_subarray(nums):\n    current_sum = 0\n    max_sum = -float('inf')\n    for num in nums:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to format a given list of numbers with commas as thousands separators.", "input": "", "output": "def format_numbers(nums):\n    formatted_nums = []\n    for num in nums:\n        formatted_nums.append(\"{:,}\".format(num))\n    return formatted_nums", "category": "Python"}, {"instruction": "Given the following text, create a Python function that finds the number of unique words in the text.", "input": "This is a sample text to find the number of unique words.", "output": "def find_unique_words(text):\n    words = set(text.split(\" \"))\n    return len(words)\n\nunique_words = find_unique_words(\"This is a sample text to find the number of unique words.\")\nprint(unique_words)", "category": "Python"}, {"instruction": "Create a CSS class called \"black-background\" that sets the background color for a div element to black.", "input": "", "output": ".black-background {\n  background-color: #000000;\n}", "category": "Python"}, {"instruction": "Generate a code to sort a list of floats.", "input": "[4.5, 7.5, 1.5, -2.5]", "output": "def sort_floats(arr): \n    arr.sort(key=float) \n    return arr", "category": "Python"}, {"instruction": "Create an algorithm to determine if two strings are rotations of each other.", "input": "\"abcde\", \"eabcd\"", "output": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1+str1", "category": "Python"}, {"instruction": "Create an algorithm that returns an array of the unique items in a given list.", "input": "[1, 2, 4, 2, 5, 6, 7, 1, 4]", "output": "def unique(arr):\n    unique_list = []\n    for el in arr:\n        if el not in unique_list:\n            unique_list.append(el)\n    return unique_list", "category": "Python"}, {"instruction": "Create a SQLite query to find the sum of the column \"price\" in a table called \"orders\".", "input": "", "output": "SELECT SUM(price) AS total_sum\nFROM orders;", "category": "Python"}, {"instruction": "Create a MySQL query to group clubs by the number of players.", "input": "", "output": "SELECT COUNT(player_id) AS number_of_players, club\nFROM club_players \nGROUP BY club;", "category": "Python"}, {"instruction": "Create a ReactJS component called \"MyComponent\" that renders a simple HTML element.", "input": "", "output": "import React from 'react';\n\nclass MyComponent extends React.Component {\n    render () {\n        return <div>Hello world!</div>\n    }\n}\n\nexport default MyComponent;", "category": "Python"}, {"instruction": "Find the average value of the following array in Python.", "input": "arr = [1,2,3,4,5]", "output": "import numpy as np\n\narr = [1,2,3,4,5]\naverage = np.mean(arr)\nprint(f\"The average of the array is: {average}\")", "category": "Python"}, {"instruction": "Write a regex (in Python) to match the following pattern: \"an apple a day keeps the doctor away\"", "input": "", "output": "import re\n\nregex = r\"\\ban\\sapple\\s\\ba\\sday\\skeeps\\sthe\\sdoctor\\saway\\b\"", "category": "Python"}, {"instruction": "Create a Java program to find the sum of the following array [1,2,3,4,5].", "input": "", "output": "public class Sum {\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 5};\n    int sum = 0;\n\n    // Compute sum of array elements\n    for (int i = 0; i < arr.length; i++) {\n       sum += arr[i];\n    }\n\n    // Print sum\n    System.out.println(\"Sum of given array elements is: \" + sum);\n  }\n}", "category": "Python"}, {"instruction": "Create a program in Java that finds the average of a given array.", "input": "int[] arr = {3, 4, 5, 6};", "output": "public static double findAvg(int[] arr) {\n  int sum = 0;\n\n  for (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  double avg = (double)sum / (double)arr.length;\n\n  return avg;\n}", "category": "Python"}, {"instruction": "Create a program in C that takes in two integers and adds them together.", "input": "int x = 2;\n  int y = 3;", "output": "#include <stdio.h>\n\nint main() {\n  int x = 2;\n  int y = 3;\n  int result = x + y;\n\n  printf(\"The result is %d\\n\", result);\n\n  return 0;\n}", "category": "Python"}, {"instruction": "Write an algorithm in Java that finds the maximum value in an array.", "input": "int[] arr = { 4, 9, 3, 6, 1 };", "output": "int maxVal(int[] arr) {\n     int maxVal = arr[0];\n\n     for (int i=1; i<arr.length; i++) {\n         if (arr[i] > maxVal) {\n             maxVal = arr[i];\n         }\n     }\n\n     return maxVal;\n }", "category": "Python"}, {"instruction": "Write a JavaScript function that returns the name of the user.", "input": "let user = { \n name: \"Tom\", \n age: 28 \n};", "output": "function getUserName(user){\n return user.name;\n}", "category": "Python"}, {"instruction": "Write a SQL query that finds the total number of courses.", "input": "", "output": "SELECT COUNT(*) \nFROM courses;", "category": "Python"}, {"instruction": "Extract the title and description from this XML data.", "input": "<data>\n<info>\n <title>Page Title</title>\n <description>This is a description of a web page.</description>\n</info>\n</data>", "output": "let title = xml.querySelector('title').innerHTML;\nlet description = xml.querySelector('description').innerHTML;", "category": "Python"}, {"instruction": "Interchange the values of two given variables.", "input": "x = 10 \ny = 5", "output": "# Swap x and y\ndef swap_values(x, y):\n    x, y = y, x \n    return x, y", "category": "Python"}, {"instruction": "Describe the timeline of a given project.", "input": "Create a social media app", "output": "# Describe the timeline of a given project\ndef create_timeline(project):\n    timeline = ['identify goals', 'analyze market', 'develop strategy', 'plan development',\n                'design UI', 'write code', 'test and refine', 'launch']\n    return timeline", "category": "Python"}, {"instruction": "Calclate the area of a triangle in accordance with the given values.", "input": "Base = 4 \nHeight = 3", "output": "def calculate_area(base, height):\n    return 0.5 * base * height", "category": "Python"}, {"instruction": "Write an SQL query to find the ten most popular books among the library readers.", "input": "Table: library\nColumns: book_name, reader_name\nTable: readers\nColumns: reader_name, book_name", "output": "SELECT book_name, COUNT(*) \nFROM library \nINNER JOIN readers \nON library.reader_name = readers.reader_name \nGROUP BY book_name \nORDER BY COUNT(*) \nDESC LIMIT 10;", "category": "Python"}, {"instruction": "Generate 10 random integers between 12 and 25.", "input": "", "output": "", "category": "Python"}, {"instruction": "Explain how you would use the givew array to create a valid JSON output.", "input": "array = [\n  \"firstname\" => \"Nikola\", \n  \"lastname\" => \"Tesla\", \n  \"birthdate\" => \"10-07-1856\"\n ]", "output": "We can use the given array to create a valid JSON output by first converting it into an object by wrapping it in curly brackets and then assign keys for each value. For example, \n{\n  \"firstname\": \"Nikola\", \n  \"lastname\": \"Tesla\", \n  \"birthdate\": \"10-07-1856\"\n }\nOnce the object is created, it need to be converted to a JSON string using a JSON library such as JSON.stringify() method in JavaScript. The resulting string looks like this:\n\n\"{\\\"firstname\\\":\\\"Nikola\\\",\\\"lastname\\\":\\\"Tesla\\\",\\\"birthdate\\\":\\\"10-07-1856\\\"}\"", "category": "Python"}, {"instruction": "Write a JavaScript function to get the current date and time in DD/MM/YYYY hh:mm:ss format.", "input": "", "output": "function getCurrentDateTime() { \n    var date = new Date(); \n    var dd = date.getDate(); \n    var mm = date.getMonth() + 1; \n    var yyyy = date.getFullYear(); \n    var hh = date.getHours(); \n    var min = date.getMinutes(); \n    var sec = date.getSeconds(); \n  \n    if (dd < 10) { \n        dd = '0' + dd; \n    } \n  \n    if (mm < 10) { \n        mm = '0' + mm; \n    } \n  \n    if (min < 10) { \n        min = '0' + min; \n    } \n  \n    if (sec < 10) { \n        sec = '0' + sec; \n    } \n  \n    return dd + '/' + mm + '/' + yyyy + ' ' + hh + ':' + min + ':' + sec; \n} \n\ndocument.write(\"Current Date and Time: \" + getCurrentDateTime());", "category": "Python"}, {"instruction": "Compile \"Hello world!\" in C++.", "input": "", "output": "$ g++ -o hello hello.cpp\n\n// hello.cpp\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello world!\" << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a C++ class Student which contains name, age, and gender as members.", "input": "", "output": "class Student {\n    private: \n        string name;\n        int age;\n        string gender;\n    public: \n        Student(string name, int age, string gender)\n            : name(name), age(age), gender(gender) { } \n            \n        string getName() {\n            return name;\n        }\n        \n        int getAge() {\n            return age;\n        }\n        \n        string getGender() {\n            return gender;\n        }\n};", "category": "Python"}, {"instruction": "Write a bash script for displaying \"Hello World\"!", "input": "", "output": "#!/bin/bash\necho \"Hello World!\"", "category": "Python"}, {"instruction": "Implement a class in Python which implements the given method.", "input": "class Test:\n    def print_name(name):\n        print(name)", "output": "class Test:\n    def print_name(self, name):\n        print(name)", "category": "Python"}, {"instruction": "Identify the type of variable (integer, float, string) for the given value.", "input": "Value: 1968", "output": "integer", "category": "Python"}, {"instruction": "Create a new dictionary in Python with the given keys and values.", "input": "Keys: A, B\nValues: 1, 2", "output": "d = {'A': 1, 'B': 2}", "category": "Python"}, {"instruction": "Develop a function to fetch the maximum element from a given dictionary.", "input": "d = {'Name': 'John', 'Age': 28, 'Score': 98}", "output": "def getMaxElement(d): \n  maxElement = max(d.values()) \n  for key, value in d.items(): \n    if (value == maxElement):  \n        return key, value", "category": "Python"}, {"instruction": "Create a loop through a given list of numbers and check if the number is divisible by 3.", "input": "nums = [3, 5, 7, 8, 10, 11]", "output": "for num in nums:\n  if num % 3 == 0:\n    print (f\"{num} is divisible by 3.\")", "category": "Python"}, {"instruction": "Compare two strings and print true if they are equal, otherwise print false.", "input": "String 1: Hello World\nString 2: Hello World", "output": "true", "category": "Python"}, {"instruction": "Write a JavaScript program to find the sum of all numbers the user has entered in to the input box.", "input": "", "output": "function calculateSum() { \n  let sum = 0; \n  // Iterate over all the input boxes \n  document.querySelectorAll(\"input[type=number]\").forEach((element) => { \n    // current value of the element \n    let elementValue = Number(element.value); \n    \n    // Sum of all elements \n    sum = sum + elementValue; \n  }); \n  console.log(\"The Sum of All the Numbers is: \"+ sum); \n}", "category": "Python"}, {"instruction": "Correct the mistake in this code.", "input": "x = \"Hello word\"", "output": "x = \"Hello world\"", "category": "Python"}, {"instruction": "Design a public Java API to generate a cookie.", "input": "", "output": "public interface CookieGenerator {\n  public String generateCookie();\n}", "category": "Python"}, {"instruction": "Construct a regular expression to detect a valid IP address in a user input.", "input": "", "output": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", "category": "Python"}, {"instruction": "Design a CRUD API using Node.js.", "input": "", "output": "const express = require('express');\nconst router = express.Router();\n\n// Create\nrouter.post('/', (req, res) => {\n\t// Code for creating an item\n});\n\n// Read\nrouter.get('/', (req, res) => {\n\t// Code for retrieving an item\n});\n\n// Update\nrouter.put('/:id', (req, res) => {\n\t// Code for updating an item\n});\n\n// Delete\nrouter.delete('/:id', (req, res) => {\n\t// Code for deleting an item\n});\n\nmodule.exports = router;", "category": "Python"}, {"instruction": "Implement a method in C# that reverses the digits of an integer.", "input": "", "output": "public static int ReverseDigits (int num) {\n   int result = 0;\n   while (num > 0) {\n      int temp = num % 10;\n      result = (result * 10) + temp;\n      num = num / 10; \n   }\n   return result;\n}", "category": "Python"}, {"instruction": "Write a C++ method to convert a string into lowercase.", "input": "", "output": "string toLowerCase(string s)\n{\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    return s;\n}", "category": "Python"}, {"instruction": "Create a CSS rule to make all the links in a document to be underlined.", "input": "", "output": "a {\n    text-decoration: underline;\n}", "category": "Python"}, {"instruction": "Design an SQL query to get all the employees from a database who are over 40 years old.", "input": "Table Name: employee\nAttributes: id, firstname, lastname, age", "output": "SELECT * FROM employee \nWHERE age > 40;", "category": "Python"}, {"instruction": "How can you access the fourth element of a linked list in Java?", "input": "", "output": "The fourth element of a linked list in Java can be accessed by traversing the list from the start node three times, where each traverse proceeds one node at a time. The fourth node can be accessed by calling getData() on the traversed node.", "category": "Python"}, {"instruction": "Create a function in Java that takes a 2D array as input and prints out all diagonals.", "input": "array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "static void printDiagonals(int arr[][]) {\n    int n = arr.length;\n    // Print anti-diagonals\n    for (int k = 0; k < n; k++) {\n        for (int i = 0, j = k; j >= 0; j--, i++) {\n            System.out.print(arr[i][j] + \" \");\n        }\n        System.out.println();\n    }\n\n    // Print main diagonals\n    for (int k = 1; k < n; k++) {\n        for (int i = k, j = n - 1; i < n; i++, j--) {\n            System.out.print(arr[i][j] + \" \");\n        }\n        System.out.println();\n    }\n}", "category": "Python"}, {"instruction": "Write a Java program to find all combinations of two numbers in an array that add up to a given sum.", "input": "Array: [2, 7, 3, 5]\nSum: 10", "output": "public static List<List<Integer>> findSumPairs(int arr[], int sum) {\n    List<List<Integer>> result = new ArrayList<>();\n    Map<Integer, Integer> map = new HashMap<>();\n \n    for (int i = 0; i < arr.length; i++) {\n        int target = sum - arr[i];\n        if (map.containsKey(target)) {\n            result.add(Arrays.asList(map.get(target), i));\n        }\n        map.put(arr[i], i);\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Update the C# code below so that it prints the reversed form of a given string.", "input": "using System;\n\nnamespace ReverseString\n{\nclass Program\n{\n   public static void Main()\n   {\n      string message = \"Hello World\";\n   }\n }\n}", "output": "using System;\n\nnamespace ReverseString\n{\nclass Program\n{\n   public static void Main()\n   {\n      string message = \"Hello World\";\n      Console.WriteLine(string.Join(\"\", message.Reverse()));\n   }\n }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to create and display a dynamic table of products and their prices.", "input": "var products = [\n    {name: 'Apple', price: 1.50},\n    {name: 'Orange', price: 2.00},\n    {name: 'Banana', price: 1.80},\n];", "output": "let table = document.createElement(\"table\");\ndocument.body.appendChild(table);\n\nproducts.forEach(product => {\n    let row = table.insertRow();\n    let nameCell = row.insertCell();\n    let priceCell = row.insertCell();\n\n    nameCell.innerHTML = product.name;\n    priceCell.innerHTML = product.price;\n});", "category": "Python"}, {"instruction": "What is the basic syntax to define a function in Python 3?", "input": "", "output": "def function_name(parameters):\n    \"\"\" function docstring \"\"\"\n    statement(s)", "category": "Python"}, {"instruction": "Generate a for loop to iterate over all div elements on a website and print their content.", "input": "", "output": "var divs = document.getElementsByTagName('div');\nfor (var i = 0; i < divs.length; i++) {\n    console.log(divs[i].innerHTML);\n}", "category": "Python"}, {"instruction": "Suggest a data structure to efficiently store a set of phone numbers", "input": "", "output": "A good data structure for efficiently storing a set of phone numbers is a Hash Table. This data structure uses a hash function to map each phone number to the value(s) associated with it and stores the values in a linked list. This data structure provides constant time lookup, insert and delete operations, making it ideal for storing a large set of phone numbers.", "category": "Python"}, {"instruction": "Suggest a design pattern to solve the following problem", "input": "A system needs to access different types of data from multiple data sources.", "output": "A good design pattern for solving this problem is the Adapter Pattern. This pattern allows the adapter to abstract away the different types of data sources and provide an interface for accessing the data from a single source. With this pattern, the system can easily access different types of data from multiple sources without having to handle the different data sources directly.", "category": "Python"}, {"instruction": "Design a method in JavaScript to validate a password according to certain criteria.", "input": "", "output": "function validatePassword(password) {\n  const regx = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,20}$/;\n  if (password.match(regx)) {\n    return true;\n  } else {\n    return false;\n  };\n}", "category": "Python"}, {"instruction": "Rewrite the following C++ function to Pascal.\n\nFunction Definition:\nint add(int x, int y) {\n    return x + y;\n}", "input": "", "output": "function add(x, y: integer): integer;\nbegin \n  add := x + y;\nend;", "category": "Python"}, {"instruction": "Convert the given string \"I am a programmer\" into upper case letters.", "input": "", "output": "\"I AM A PROGRAMMER\"", "category": "Python"}, {"instruction": "Given an array of integers, write a function to find the maximum difference between a lower element and an upper element.", "input": "Array: [3, 10, 2, 6, 4, 8, 1]", "output": "def findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference", "category": "Python"}, {"instruction": "Create a SQL query to insert sample data into an 'employees' table.", "input": "", "output": "INSERT INTO employees (id, first_name, last_name, age, email) \nVALUES (1, 'John', 'Doe', 25, 'john.doe@example.com'), (2, 'Jane', 'Doe', 30, 'jane.doe@example.com'), (3, 'Jim', 'Smith', 32, 'jim.smith@example.com');", "category": "Python"}, {"instruction": "Create a HTML web page containing two boxes on a single line.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>        \n    </head>\n    <body>\n        <div style=\"display: inline-block; width: 300px; height: 100px; border: 1px solid #000;\"></div>\n        <div style=\"display: inline-block; width: 300px; height: 100px; border: 1px solid #000;\"></div>       \n    </body>\n</html>", "category": "Python"}, {"instruction": "Update the C++ code below to generate a Fibonacci sequence of up to the 6th number.", "input": "#include <iostream>\n \nint main ()\n{\nint x = 0, y = 1;\nstd::cout << x << \" \" << y;\n\nreturn 0;\n}", "output": "#include <iostream>\n \nint main ()\n{\n    int x = 0, y = 1, z = 0;\n    std::cout << x << \" \" << y;\n    for (int i = 0; i < 6; i++) {\n        z = x + y;\n        x = y;\n        y = z; \n        std::cout << \" \" << z;\n    }\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Explain why it is important to have exception handling", "input": "", "output": "Exception handling is important for a program as it allows the program to gracefully handle any unexpected or erroneous conditions. This helps keep the program running by providing meaningful feedback and prompts to the user. It also helps reduce the risk of having some part of the program crashing due to an unforeseen and avoidable event. Exception handling also encourages developers to write more robust and structured code as they are aware that their code might be faced with unpredictable conditions, and they will expect their code to be able to handle them gracefully.", "category": "Python"}, {"instruction": "Output the square of the following number", "input": "5", "output": "25", "category": "Python"}, {"instruction": "Design a function that will print out the leap years in a given interval", "input": "From 2015 to 2050", "output": "def print_leap_years(start_year, end_year): \n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n\nprint_leap_years(2015, 2050)", "category": "Python"}, {"instruction": "Add a feature to the given code to print the name of the largest number in an array.", "input": "int[] arr = {5,3,7,2,4};\nint largest = arr[0];\nfor (int i = 1; i < arr.length; i++){\n  if(arr[i] > largest){\n    largest = arr[i];\n  }\n}", "output": "int[] arr = {5,3,7,2,4};\nint largest = arr[0];\nString name;\nfor (int i = 1; i < arr.length; i++){\n  if(arr[i] > largest){\n    largest = arr[i];\n    name = Integer.toString(arr[i]);\n  }\n}\nSystem.out.println(\"The largest number is \" + name);", "category": "Python"}, {"instruction": "Rewrite a PHP program to produce the same result.", "input": "<?php\n\n$arr = array(1,2,3,4,5);\n$sum = 0;\n\nfor ($i = 0; $i < count($arr); $i++){\n\t$sum = $sum + $arr[$i];\n}\n\necho $sum;\n\n?>", "output": "<?php\n\n$arr = array(1,2,3,4,5);\n$sum = 0;\n\nforeach ($arr as $val) {\n\t$sum += $val;\n}\n\necho $sum;\n\n?>", "category": "Python"}, {"instruction": "Create a React component to render a table with three columns: \"ID\", \"Name\", and \"Occupation\".", "input": "", "output": "import React from 'react';\nimport { Table } from 'react-bootstrap';\n\nclass MyTable extends React.Component {\n  render() {\n    return (\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Occupation</th>\n          </tr>\n        </thead>\n        <tbody>\n        {this.props.data.map( (row, index) => {\n          return (\n            <tr key={index}>\n              <td>{row.id}</td>\n              <td>{row.name}</td>\n              <td>{row.occupation}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </Table>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Use Ruby on Rails to generate a migration to add a column \"name\" to the table \"users\".", "input": "", "output": "class AddNameToUsers < ActiveRecord::Migration[6.0]\n  def change\n    add_column :users, :name, :string\n  end\nend", "category": "Python"}, {"instruction": "Create a program to identify a given string as a valid ISBN 10 code", "input": "", "output": "def is_valid_isbn_10(code):\n    # check for the length\n    if len(code) != 10:\n        return False\n    # check for leading \"X\" characters\n    if code.startswith(\"X\"):\n        return False\n    # check for digits\n    if not code.isdigit():\n        return False\n    # calculate the check digit\n    sum = 0\n    for i in range(9): \n        sum += int(code[i]) * (10 - i)\n    checksum = sum % 11\n    # check for valid check digit\n    if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):\n        return False\n    # No errors found\n    return True\n\nif __name__ == '__main__':\n    code = input('Enter the ISBN-10 code: ')\n    print(is_valid_isbn_10(code))", "category": "Python"}, {"instruction": "Create an Angular2 component to display a \"Hello, world!\" message.", "input": "", "output": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-hello-world',\n  template: `<div>Hello, World!</div>`,\n})\nexport class HelloWorldComponent {\n\n}", "category": "Python"}, {"instruction": "Create a Go program to convert a given temperature from Kelvin to Celsius.", "input": "", "output": "package main\n\nimport \"fmt\"\n\nfunc KelvinToCelsius(k float64) float64 {\n    c := k - 273.15\n    return c\n}\n\nfunc main() {\n    k := 300.15\n    c := KelvinToCelsius(k)\n    fmt.Printf(\"%.2f kelvin is equal to %.2f celsius.\\n\", k, c)\n}", "category": "Python"}, {"instruction": "Using Tensorflow, set up a model to predict the classification of a handwritten digit.", "input": "", "output": "import tensorflow as tf\n\n#load the MNIST data\nmnist = tf.keras.datasets.mnist\n\n#split the data into train and test\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n#normalize the data between 0 and 1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n\n#build the model\nmodel = tf.keras.models.Sequential()\n\n# add the input layer of the model\nmodel.add(tf.keras.layers.Flatten())\n\n# add the hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n\n#add the output layer\n#NOTE: We are using output dimension as 10 because we are trying to predict 10 classifications (i.e. 0 to 9)\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\n#compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=3)\n\n#evaluate the model\nval_loss, val_acc = model.evaluate(x_test, y_test) \nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Write a SQL query to sort the records in table \"Employees\" by employment date in ascending order.", "input": "", "output": "SELECT * FROM Employees ORDER BY Employment_Date ASC;", "category": "Python"}, {"instruction": "Complete the missing parts of the code to sort an array in ascending order.", "input": "int[] arr = {3, 5, 2, 7, 1};\nint temp;\nfor (int i = 0; i < arr.length; i++){\n  // TODO: complete the code\n}", "output": "int[] arr = {3, 5, 2, 7, 1};\nint temp;\nfor (int i = 0; i < arr.length; i++){\n  for (int j = i+1; j < arr.length; j++){\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n}", "category": "Python"}, {"instruction": "Update the following code to loop through the numbers 0 to 5.", "input": "for i in range():\n    print(i)", "output": "for i in range(6):\n    print(i)", "category": "Python"}, {"instruction": "Compose an algorithm to determine whether a given string contains all unique characters.", "input": "", "output": "def is_unique(string):\n   char_set = set()\n   for char in string:\n       if char in char_set:\n           return False\n       else:\n           char_set.add(char)\n   return True", "category": "Python"}, {"instruction": "Generate a list of integers between a given start and end value.", "input": "Start = 3\nEnd = 10", "output": "def generate_list(start, end):\n    return list(range(start, end+1))", "category": "Python"}, {"instruction": "Debug the following code to print all the elements of an array.", "input": "int[] arr = {1,2,3,4,5};\nfor (int i = 0; i < arr.len; i++){\n  System.out.println(arr[i]);\n}", "output": "int[] arr = {1,2,3,4,5};\nfor (int i = 0; i < arr.length; i++){\n  System.out.println(arr[i]);\n}", "category": "Python"}, {"instruction": "Write a SQL query to get the names and salaries of all employees who earn more than $7000.", "input": "", "output": "SELECT e.name, e.salary\nFROM employee e\nWHERE e.salary > 7000;", "category": "Python"}, {"instruction": "Design a function that takes two parameters a and two and returns the result of a multiplied by two", "input": "", "output": "def mul_two(a, b):\n    return a * b\n\nif __name__ == '__main__':\n    x = int(input('Enter first number: '))\n    y = int(input('Enter second number: '))\n    print(mul_two(x, y))", "category": "Python"}, {"instruction": "Verify if a given password string matches the regular expression.", "input": "password = \"Ab12#\"", "output": "import re\n\n# regex pattern to match given password\npattern = re.compile(r\"^[A-Za-z]\\w{7,15}$\") \n\n# check if the password string matches the pattern \nif pattern.match(password): \n    print(\"Password is valid\")\nelse: \n    print(\"Password is invalid\")", "category": "Python"}, {"instruction": "Write a Micropython program to turn on an LED.", "input": "", "output": "from machine import Pin\nled = Pin(0, Pin.OUT)\nled.on()", "category": "Python"}, {"instruction": "Apply K-means clustering to a 3-dimensional dataset given a certain number of clusters.", "input": "Number of Clusters = 4", "output": "from sklearn.cluster import KMeans\n\n# prepare the data\nX = [... the 3-dimensional dataset ...]\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=4)\n\n# fit the model\nkmeans_model.fit(X)\n\n# get the cluster centers\ncluster_centers = kmeans_model.cluster_centers_\n\n# get the labels for each point\nlabels = kmeans_model.labels_", "category": "Python"}, {"instruction": "How can we obfuscate a JavaScript code to make it harder for hackers to reverse engineer it?", "input": "", "output": "There are several tools and techniques that can be used to obfuscate JavaScript code. These include minifying the code so that it is difficult for humans to read, encrypting the code, scrambling variables, encrypting strings, and using code evaluation techniques to avoid running malicious code.", "category": "Python"}, {"instruction": "Generate SQL code to query a database table containing student names and ages.", "input": "SELECT all students who are between 18 and 25 years of age.", "output": "SELECT *\nFROM Students\nWHERE Age BETWEEN 18 and 25;", "category": "Python"}, {"instruction": "Create a regular expression to identify email addresses in a given string.", "input": "", "output": "The regular expression to identify email addresses in a given string is:\n\n\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b", "category": "Python"}, {"instruction": "How to define an array in PHP?", "input": "", "output": "An array in PHP is defined using the array() function. The syntax is as follows:\n\n$array = array($element1, $element2, ...);\n\nThe elements can be of any type, such as strings, numbers, Booleans, objects, or even other arrays.", "category": "Python"}, {"instruction": "How would you form an argument in Java?", "input": "", "output": "A Java argument is specified either at the command line while running a program, or within the code of a method. When running a program, the argument is specified after typing the program name followed by a space. The argument can be of any data type, such as a string, an integer, a double, and so on.\n\nWithin a method, the argument is being passed in when the method is being called. For example, consider a method called calculateArea that requires one argument\u2014the radius of a circle\u2014in order to calculate the area of a circle. The argument is included within the parentheses when the method is called.", "category": "Python"}, {"instruction": "Write a C++ method to calculate the Fibonacci series.", "input": "", "output": "// C++ program to calculate Fibonacci series\n#include <iostream>\n\n// Fibonacci function\nint Fibonacci(int n)\n{\n    if (n <= 1)\n        return n;\n    return Fibonacci(n-1) + Fibonacci(n-2);\n}\n\nint main()\n{\n  int n;\n  std::cout << \"Enter the number of terms: \";\n  std::cin >> n;\n  // This loop will print Fibonacci series till n\n  for (int i = 0; i < n; i++)\n      std::cout << Fibonacci(i) << \", \";\n  std::cout << \"...\" << std::endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Create a basic query using two variables.", "input": "sky, blue", "output": "SELECT *\nFROM table\nWHERE sky = 'blue';", "category": "Python"}, {"instruction": "Optimize MySQL query to select the latest record in each group", "input": "SELECT * FROM myTable\nGROUP BY type", "output": "SELECT * \nFROM myTable\nWHERE id = (SELECT MAX(id) FROM myTable AS T2 WHERE T2.type = MyTable.type)\nGROUP BY type", "category": "Python"}, {"instruction": "Create a JavaScript object for a square with sides 8, 10 and 12.", "input": "", "output": "let objSquare = {\n  side1: 8,\n  side2: 10,\n  side3: 12\n}", "category": "Python"}, {"instruction": "Connect to a MySQL database and display the table data.", "input": "host = \"localhost\"\nuser = \"root\"\npassword = \"password\"\ndatabase = \"mydb\"", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n    host=host,\n    user=user,\n    passwd=password,\n    database=database\n)\n\ncursor = mydb.cursor()\n\n# execute SQL query to display all data in table\ncursor.execute(\"SELECT * FROM myTable\")\n\n# print all of the table data\nmyresult = cursor.fetchall()\n\nfor row in myresult:\n   print(row)", "category": "Python"}, {"instruction": "Create a web page with styles.", "input": "", "output": "<html>\n  <head>\n    <title>Styled Web Page</title>\n    <style>\n      body {\n        background-color: lightblue;\n      }\n      h1 {\n        color: white;\n        text-align: center;\n      }\n      p {\n        font-family: verdana;\n        font-size: 15px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <h1>Welcome to My Web Page</h1>\n    <p>This is my styled web page.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Train a machine learning model for a classification problem.", "input": "X = [[0, 1], [1, 1], [0, 0], [1, 0]]\ny = [1, 0, 1, 0]", "output": "# importing the necessary libraries\nimport numpy as np \nfrom sklearn.svm import SVC \n\n# creating a svm classifier\nclf = SVC(kernel = 'linear') \n\n# fitting the model \nclf.fit(X, y)", "category": "Python"}, {"instruction": "Run a sentiment analysis on a given text.", "input": "Text: \"The movie was amazing!\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nanalyzer = SentimentIntensityAnalyzer()\n\n# run sentiment analysis\nsentiment = analyzer.polarity_scores(text)\n\nfor key in sentiment:\n    print('{0}: {1}'.format(key, sentiment[key]))\n\n# output\ncompound: 0.6249\nneg: 0.0\nneu: 0.406\npos: 0.594", "category": "Python"}, {"instruction": "Create a react component to render the following table.", "input": "", "output": "import React from \"react\"\n\n// React component to render a table \nclass Table extends React.Component {\n    render() {\n        return (\n            <table>\n                <tr>\n                    <th>Name</th>\n                    <th>Age</th>\n                    <th>Address</th> \n                </tr>\n                <tr>\n                    <td>James</td>\n                    <td>25</td>\n                    <td>San Francisco</td>\n                </tr>\n                <tr>\n                    <td>John</td>\n                    <td>30</td>\n                    <td>New York</td>\n                </tr>\n                <tr>\n                    <td>Olivia</td>\n                    <td>20</td>\n                    <td>London</td>\n                </tr>\n            </table>\n        )\n    }\n}\n\nexport default Table;", "category": "Python"}, {"instruction": "Generate C code to swap two integers without using a third variable.", "input": "", "output": "void swap_int(int * x, int * y) {\n    *x = *x ^ *y;\n    *y = *x ^ *y;\n    *x = *x ^ *y;\n}", "category": "Python"}, {"instruction": "Use the input to generate a loop in JavaScript to print an increasing count starting from the given number.", "input": "num = 5", "output": "for (let i = num; i < num + 10; i++) {\n    console.log(i);\n}\n\n# Output\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14", "category": "Python"}, {"instruction": "Rewrite the following linear equation into the standard form y = mx + c: x + 2y = 5", "input": "", "output": "y = - x/2 + 5/2 \nThis equation can be written in standard form as y = -0.5x + 2.5", "category": "Python"}, {"instruction": "Design a SQL query to count the number of records in the first 5 rows of the table named \"users\".", "input": "", "output": "SELECT COUNT(*) FROM users LIMIT 5;", "category": "Python"}, {"instruction": "Find the elements at even indexes in a given list.", "input": "list = [1,3,4,7,10,21]", "output": "[list[i] for i in range(0,len(list),2)]", "category": "Python"}, {"instruction": "Parse the following string to get the server name.", "input": "url = \"https://my.example.com/api/user\"", "output": "server_name = url.split(\"/\")[2]", "category": "Python"}, {"instruction": "Output the list of all prime numbers in the range of 2 to 50.", "input": "", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "category": "Python"}, {"instruction": "Assign values to the given array of length 10 and print it using a Java program.", "input": "", "output": "public class PrintArray {\n    public static void main(String[] args) {\n        int[] array = new int[10];\n        for (int i = 0; i < 10; i++) {\n            array[i] = i;\n        }\n        for (int i = 0; i < 10; i++) {\n            System.out.print(array[i] + \" \");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Compare the given two strings and return true if the strings match.", "input": "String 1: hello\nString 2: hello", "output": "if (str1 == str2)\n    return true;\nelse\n    return false;", "category": "Python"}, {"instruction": "Search and delete a specific record from the given SQL table.", "input": "Table Name: products\nRecord ID: 12", "output": "DELETE FROM products WHERE id = 12;", "category": "Python"}, {"instruction": "Edit the given C++ code for reversing a given string.", "input": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n    string str = \"Hello World!\";\n    cout << str;\n    return 0;\n}", "output": "#include <iostream>\n#include <algorithm> \nusing namespace std;\n\nint main() \n{\n    string str = \"Hello World!\";\n    reverse(str.begin(), str.end());\n    cout << str;\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a JSP code snippet to instantiate an array object", "input": "", "output": "<% \n    int [] arr = new int[3]; \n%>", "category": "Python"}, {"instruction": "Estimate the storage space of the given data type.", "input": "Integer", "output": "4 bytes", "category": "Python"}, {"instruction": "Design a recursive algorithm in Python to calculate the sum of all elements in the given array", "input": "[1, 3, 7, 9, 11]", "output": "def recursive_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + recursive_sum(arr[1:])\n\narr = [1, 3, 7, 9, 11]\nprint(recursive_sum(arr))", "category": "Python"}, {"instruction": "Sort the numbers in an ascending order in the given array.", "input": "[4, 2, 9, 10, 5]", "output": "[2, 4, 5, 9, 10]", "category": "Python"}, {"instruction": "Design an SQL query to select the first and last name of all users who are over the age of 25.", "input": "", "output": "SELECT first_name, last_name\nFROM users\nWHERE age > 25", "category": "Python"}, {"instruction": "Create a HTML form and assign 'onSubmit' handler to it.", "input": "", "output": "<form onSubmit=\"alert('Form submitted')\">\n    <!-- Form Content -->\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write an HTML code to link Google Search page inside an iframe", "input": "", "output": "<iframe src=\"https://www.google.com/search\" height=\"500px\" width=\"800px\"></iframe>", "category": "Python"}, {"instruction": "Using the comment as a guide, edit the following CSS so that the text of the id 'heading_text' is green when an element of class 'selected' is active.", "input": ".selected {\n\tborder: 1px solid green;\n}", "output": ".selected {\n\tborder: 1px solid green;\n}\n#heading_text {\n    color: green;\n}\n.selected:active #heading_text {\n    color: green;\n}", "category": "Python"}, {"instruction": "Using SQLite, create a table from the following schema.", "input": "created_at DATETIME,\nuser_id INTEGER,\nusername VARCHAR(64)", "output": "CREATE TABLE table_name(created_at DATETIME, user_id INTEGER, username VARCHAR(64));", "category": "Python"}, {"instruction": "Construct a while loop to print out the numbers 5 to 15.", "input": "", "output": "num = 5\n\nwhile num <= 15:\n  print(num)\n  num += 1", "category": "Python"}, {"instruction": "Suggest a LINQ query to retrieve fields \"name\" and \"date\" from an array of objects.", "input": "[\n   {\n      \"name\":\"John Doe\",\n      \"date\":\"1/1/2020\"\n   },\n   {\n      \"name\":\"Jane Doe\",\n      \"date\":\"1/2/2020\"\n   },\n   {\n      \"name\":\"John Smith\",\n      \"date\":\"1/3/2020\"\n   }\n]", "output": "var data = array.Select(x => new { x.name, x.date });", "category": "Python"}, {"instruction": "Write a loop to extract the first three characters from each string in the list.", "input": "letters = [\"abcde\", \"fghij\", \"klmno\"]", "output": "extracted_letters = []\n\nfor letter in letters:\n    extracted_letters.append(letter[0:3])", "category": "Python"}, {"instruction": "Create a SQL query for finding all books written by a given author.", "input": "", "output": "SELECT books.* \nFROM books \nJOIN authors ON books.author_id = authors.id \nWHERE authors.name = 'John Doe'", "category": "Python"}, {"instruction": "Create a Javascript class for a customer address book.", "input": "", "output": "class AddressBook {\n  constructor() {\n    this.contacts = [];\n  }\n\n  add(name, email, phone, relation) {\n    let contact = {\n      name,\n      email,\n      phone,\n      relation\n    };\n    this.contacts.push(contact);\n  }\n\n  delete(name) {\n    this.contacts = this.contacts.filter(contact => contact.name !== name);\n  }\n\n  list() {\n    console.log(this.contacts);\n  }\n}", "category": "Python"}, {"instruction": "Create a HTML function that changes the color of a given element.", "input": "", "output": "function changeColor(element, color){\n    element.style.backgroundColor = color;\n}", "category": "Python"}, {"instruction": "Create a Python program that takes two strings as input and finds their longest common subsequence.", "input": "x = \u201cABCBDAB\u201d\n y = \u201cBDCABA\u201d", "output": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")", "category": "Python"}, {"instruction": "Given an array of integers and an integer value, figure out whether the given value is present in the array or not.", "input": "Array: [1, 2, 3, 4, 5, 6]\nValue: 7", "output": "False", "category": "Python"}, {"instruction": "Generate the output for this simple algorithm with the given input.", "input": "Input: array = [5, 4, 1, 2, 6]\nOutput:\n8", "output": "The output of the algorithm is 8.", "category": "Python"}, {"instruction": "Read the code and figure out what will be the output of the program.", "input": "int a = 15; \nint b = 10; \nint result = 0; \nif(a == b){\n   result = a + b; \n} else {\n result = a * b; \n}", "output": "150", "category": "Python"}, {"instruction": "Generate a valid CSS rule to center align the text with the id \"heading_text\"", "input": "", "output": "#heading_text {\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Place the missing parenthesis in the given algorithm.", "input": "for i = 1 to n \n  if (A[i] == x)\n     start = i;\n     end = i + k \u2013 1;", "output": "for (i = 1; i <= n; i++) \n  if (A[i] == x)\n     start = i;\n     end = i + k - 1;", "category": "Python"}, {"instruction": "Get the output from the given code snippet on an array of integers.", "input": "int[] numbers = {1,2,3,4,5,6,7,8,9};\nint result = 0;\nfor (int number : numbers) {\nresult += number; \n}", "output": "45", "category": "Python"}, {"instruction": "Update the given CSS class statement.", "input": ".red_box { \n    background-color: #AAFF00; \n    margin: 10px; \n     width: 20px;\n}", "output": ".red_box { \n    background-color: #AAFF00; \n    margin: 10px; \n    padding: 15px;\n    width: 20px;\n    border-radius: 10px;\n}", "category": "Python"}, {"instruction": "Suggest an algorithm to sum values of pairs in an array.", "input": "arr = [2, 3, 5, 7]", "output": "def array_sum(arr):\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i] + arr[i+1]\n    return sum", "category": "Python"}, {"instruction": "Construct an IF-ELSE statement that test for a given condition and prints result based on that.", "input": "to_test = 5", "output": "if to_test < 10: \n  print(\"Less than 10\")\nelse:\n  print(\"Greater than 10\")", "category": "Python"}, {"instruction": "Write a method in Python to append a given list to another list.", "input": "list_1 = [1,2,3]\nlist_2 = [4,5,6]", "output": "list_1.extend(list_2)", "category": "Python"}, {"instruction": "Using JavaScript, suggest a program to update a key in a given object.", "input": "object = {\"name\":\"john\"};", "output": "object[\"name\"] = \"JAMES\";", "category": "Python"}, {"instruction": "Create a mapping of keys and values from a given dictionary.", "input": "dict = {\"a\":1, \"b\":2, \"c\":3}", "output": "mapping = {k:v for (k,v) in dict.items()}", "category": "Python"}, {"instruction": "Given a string of words, calculate the number of unique words.", "input": "String str = \"This is a test to see how many unique words are in this string\";", "output": "13", "category": "Python"}, {"instruction": "Write a PHP script to find the 5th element of an array.", "input": "$arr = array(14,32,25,19,14,89,130);", "output": "<?php \n$arr = array(14,32,25,19,14,89,130);\necho $arr[4];\n?>", "category": "Python"}, {"instruction": "Write a Bash shell script to print the unique elements in the given array.", "input": "list=(1 2 3 1 4 2 5)", "output": "#!/bin/bash\n\nlist=(1 2 3 1 4 2 5)\nunique_list=()\n\nfor num in ${list[@]}; do\n    if [[ ! ${unique_list[*]} =~ $num ]]; then\n        unique_list+=($num)\n    fi\ndone\n\necho ${unique_list[@]}", "category": "Python"}, {"instruction": "Write a SQL query to find the name and the average value of all the transactions for each customer.", "input": "", "output": "SELECT customer.name, AVG(transaction.value) \nFROM customer \nINNER JOIN transaction\nON customer.customer_id = transaction.customer_id\nGROUP BY customer.name", "category": "Python"}, {"instruction": "Write a JavaScript function to determine if a given string contains at least one upper case letter.", "input": "", "output": "function hasUpperCase(str) {\n    return str.split('').some(function(l) {\n        return l.charCodeAt(0) >= 65 && l.charCodeAt(0) <= 90;\n    });\n}", "category": "Python"}, {"instruction": "What are the two basic components of a computer system?", "input": "", "output": "The two basic components of a computer system are hardware and software.", "category": "Python"}, {"instruction": "Create an HTML page that has two paragraphs, a heading and a link to a website.", "input": "Link: https://example.com\nHeading: Example Website\nParagraph 1: This is the first paragraph.\nParagraph 2: This is the second paragraph.", "output": "<html>\n    <head>\n        <title>Example Website</title>\n    </head>\n    <body>\n        <h1>Example Website<h1>\n        <p>This is the first paragraph.</p>\n        <p>This is the second paragraph.</p>\n        <a href=\"https://example.com\">Link to Website</a>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Fill up the missing value in the given JSON array.", "input": "[19, 10, 22, 25, ??, 4, 100]", "output": "[19, 10, 22, 25, 15, 4, 100]", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array of numbers and returns an array containing only the even numbers.", "input": "", "output": "function get_even_numbers(nums) {\n  return nums.filter(n => n % 2 == 0);\n}", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code to make it compatible with older browsers.", "input": "let colors = [\"red\", \"blue\", \"green\"];", "output": "var colors = [\"red\", \"blue\", \"green\"];", "category": "Python"}, {"instruction": "Code a solution that prints out the string \"Hello, [name]!\" using string interpolation in JavaScript.", "input": "", "output": "const name = \"John Doe\";\nconsole.log(`Hello, ${name}!`);", "category": "Python"}, {"instruction": "Explain the concept of an ASCII table", "input": "", "output": "An ASCII table is a table that shows the correspondence between characters and symbols commonly used in computers or electronic devices. It consists of a set of codes that represent unique characters, such as letters, numbers, and symbols. Each code is represented by a number between 0 and 127 and is referred to by its decimal, octal, hexadecimal, or binary numbers. It is used to store, transmit, and display characters in different computer systems.", "category": "Python"}, {"instruction": "Define a function to search for a specific element in an array", "input": "[5, 10, 2, 4, 7]", "output": "def search(arr, e):\n    for i in range(len(arr)):\n        if (arr[i] == e):\n            return i\n    return -1", "category": "Python"}, {"instruction": "Convert a given list into a dictionary in Python", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "dict = {\n    \"apple\": 0,\n    \"banana\": 1,\n    \"cherry\": 2\n}", "category": "Python"}, {"instruction": "Explain how to use the built-in bubble sort function for sorting a given list of numbers.", "input": "[4, 9, 0, 3, 5, 7]", "output": "The built-in bubble sort function can be used to sort the given list of numbers. The algorithm starts from the beginning of the list and compares two adjacent elements. If the first number is larger than the second number, they are swapped. This process is repeated until the end of the list is reached. After one iteration, the largest element is placed at the end of the list. This process is then repeated for the remaining elements until the list is completely sorted. To use the Python built-in bubble sort function, simply call the bubble sort on the list, and it will return the sorted list.", "category": "Python"}, {"instruction": "Evaluate the given value for the expression \"3 * 5 + 4 / 2\".", "input": "", "output": "17.", "category": "Python"}, {"instruction": "Generate XML code for the following.", "input": "Student Name: John\nStudent ID: 123456\nCourse: Computer Science", "output": "<studentName>John</studentName>\n<studentID>123456</studentID>\n<course>Computer Science</course>", "category": "Python"}, {"instruction": "Design a SQL query to find the names of the employees who have an age of 30 or more.", "input": "Table Name: Employees\nColumns:  Employee_ID, Last_Name, Age", "output": "SELECT Last_Name \nFROM Employees\nWHERE Age >= 30;", "category": "Python"}, {"instruction": "Rewrite the following code using the try-catch statement", "input": "if (num!=0)\n  result = 1/num;\nelse\n  result = 0;", "output": "try {\n  result = 1 / num;\n} catch (err) {\n  result = 0;\n}", "category": "Python"}, {"instruction": "Edit the following HTML page to add a new heading and a link.", "input": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <p>This is a Sample Page.</p>\n </body>\n</html>\nLink: http://example.com\nHeading: Sample Page", "output": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <h2>Sample Page</h2>\n  <p>This is a Sample Page</p>\n  <a href=\"http://example.com\">Link</a>\n </body>\n</html>", "category": "Python"}, {"instruction": "You are given a string s, output the longest substring with no repeating characters.", "input": "s = \"abcabcbb\"", "output": "def longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\n\nlongest_substring(s)\n3", "category": "Python"}, {"instruction": "Supply a CSS styling for the HTML structure in Task 2.", "input": "", "output": "<style>\n    body { \n        background-color: #fafafa; \n        font-family: sans-serif; \n    }\n</style>", "category": "Python"}, {"instruction": "Create a function in R for converting a string into uppercase.", "input": "", "output": "upperCase <- function(string){\n  return(toupper(string))\n}", "category": "Python"}, {"instruction": "Create an HTML form for taking user input about his/her favorite ice-cream flavor.", "input": "", "output": "<form action=\"/submit-flavor\" method=\"post\">\n  <label>Choose your favorite flavor:</label>\n  <select name=\"Flavor\" required>\n    <option value=\"Vanilla\">Vanilla</option>\n    <option value=\"Chocolate\">Chocolate</option>\n    <option value=\"Strawberry\">Strawberry</option>\n    <option value=\"Mint\">Mint</option>\n    <option value=\"Coffee\">Coffee</option>\n  </select><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a function in Python for sorting a given list of numbers.", "input": "[29, 11, 46, 7, 248, 1724]", "output": "def sort_list(numbers):\n  return sorted(numbers)", "category": "Python"}, {"instruction": "In the given snippet of code, insert a line of code to display the sum of two numbers.", "input": "int a = 10;\nint b = 20;", "output": "int a = 10;\nint b = 20;\nSystem.out.println(\"Sum of two numbers is \" + (a + b));", "category": "Python"}, {"instruction": "Create a dictionary with the keys of the students' IDs and their corresponding grades as the values.", "input": "student_ids = [1000, 1001, 1002, 1003] \ngrades = [90, 80, 60, 50]", "output": "def create_grade_dict(student_ids, grades):\n    # Create an empty dictionary\n    grade_dict = {} \n    # Loop based on length of student ids \n    for i in range(len(student_ids)):  \n         # Add id as key and grade as value\n        grade_dict[student_ids[i]] = grades[i] \n    # Return the grade dictionary    \n    return grade_dict", "category": "Python"}, {"instruction": "Write a function to create a Nim game board with size n.", "input": "", "output": "def create_game_board(n):\n    # Create an empty list\n    game_board = []\n    # Loop based on number of rows\n    for i in range(n):\n        # Create an empty row\n        row = []\n        # Loop based on number of columns\n        for j in range(n):\n            # Add value 0 at each position\n            row.append(0)\n        # Add the row in empty list\n        game_board.append(row)\n    # Return the game board\n    return game_board", "category": "Python"}, {"instruction": "Generate a valid C++ code to implement a linked list with basic operations.", "input": "", "output": "#include<iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\nclass LinkedList {\n    Node* head;\n\npublic:\n    LinkedList(){ \n         head = NULL; \n    }\n    \n    void append(int data) {\n        Node* newNode = new Node;\n        newNode->data = data;\n        newNode->next = NULL;\n\n        if (head == NULL) {\n            head = newNode;\n        } else {\n            Node* temp = head;\n            while (temp->next != NULL) {\n                temp = temp->next;\n            }\n            temp->next = newNode;\n        }\n    }\n\n    void deleteNodeByData(int data) {\n        if (head == NULL) {\n            return;\n        }\n\n        if (head->data == data) {\n            Node *temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node *prev;\n        Node *curr = head;\n\n        while(curr != NULL && curr->data != data) {\n            prev = curr;\n            curr = curr->next;\n        }\n\n        prev->next = curr->next;\n        delete curr;\n        return;\n    }\n\n\n    void printList() { \n        Node* temp = head;\n        while (temp != NULL) {\n            cout << temp->data << endl; \n            temp = temp->next; \n        } \n    }\n};", "category": "Python"}, {"instruction": "Locate and erase all text nodes from the following XML string.", "input": "<body>\n  <div>Hello world!</div>\n  <div>Good bye world!</div>\n</body>", "output": "def delete_text_nodes(xml_string): \n  root = ET.fromstring(xml_string) # parse the XML string \n  elems = root.findall(\".//text()\") # find all text nodes \n  for e in elems: \n    e.getparent().remove(e) # remove the text node \n  return ET.tostring(root) # return the parsed XML string", "category": "Python"}, {"instruction": "Edit the following HTML code to allow Google Chrome to accurately render the page.", "input": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Coloumn 2</th>\n  </tr>\n</body>\n</html>", "output": "<html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Using the following PHP array, output each name in its own bold tags.", "input": "$names = array(\"John\", \"Sarah\", \"Paul\");", "output": "<?php\n  foreach($names as $name){\n    echo \"<b>\".$name.\"</b><br>\";\n  }\n?>", "category": "Python"}, {"instruction": "Write a JavaScript function that calculates the area of a triangle based on the three sides provided.", "input": "", "output": "function areaOfTriangle(a, b, c) {\n  var s = (a+b+c)/2;\n  return Math.sqrt(s*(s-a)*(s-b)*(s-c));\n}", "category": "Python"}, {"instruction": "Create a PHP class to represent a student with the following data fields: first name, last name, age, GPA.", "input": "", "output": "class Student { \n  public $firstName;\n  public $lastName;\n  public $age;\n  public $GPA;\n  \n  public function __construct($firstName, $lastName, $age, $GPA) {\n    $this->firstName = $firstName;\n    $this->lastName = $lastName;\n    $this->age = $age;\n    $this->GPA = $GPA;\n  }\n}", "category": "Python"}, {"instruction": "Fix the bug in the following Python script:", "input": "def is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5)", "output": "def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)", "category": "Python"}, {"instruction": "You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.", "input": "array = [1, -3, 4, 5, 7, 8, -2, 9, -1]\nk=3", "output": "def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\n\nmax_sum_k_elements(array, k)", "category": "Python"}, {"instruction": "Calculate the distance between two points (x1, y1) and (x2, y2).", "input": "x1 = 5, x2 = 8\ny1 = 3, y2 = 12", "output": "def calculate_distance(x1, x2, y1, y2):\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n    \ncalculate_distance(x1, x2, y1, y2)\n7.615773105863909", "category": "Python"}, {"instruction": "Create a C program to print the numbers from 1 to 100, except for any number divisible by 3.", "input": "", "output": "#include <stdio.h>\n\nint main() \n{ \n    for (int i = 1; i <= 100; i++) { \n        if (i % 3 != 0) \n            printf(\"%d\\n\", i); \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Edit the following C code so it runs correctly.", "input": "#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i;\n\nreturn 0;\n}", "output": "#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i\", score);\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Python function that accepts a list and returns the sum of the numbers present in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "def list_sum(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Determine the accuracy of a model trained on a given dataset.", "input": "", "output": "Accuracy of a model can be determined by computing its predictions against the actual values of the dataset, and then comparing the number of correct predictions with the total number of predictions. The accuracy of the model is then calculated as the proportion of correct predictions to the total number of predictions.", "category": "Python"}, {"instruction": "Write C++ code to implement a basic doubly linked list.", "input": "", "output": "#include <iostream>\n \nstruct Node {\n    int data;\n    Node* prev;\n    Node* next;\n};\n \nclass DoublyLinkedList {\nprivate:\n    Node* head;\n    Node* tail;\npublic:\n    DoublyLinkedList() : head(nullptr), tail(nullptr) {}\n    ~DoublyLinkedList();\n \n    void AddFront(int data);\n    void AddBack(int data);\n    void DeleteFront();\n    void DeleteBack();\n    void Display();\n};\n \nvoid DoublyLinkedList::AddFront(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n \n    newNode->prev = nullptr;\n \n    if (head == nullptr) {\n        newNode->next = nullptr;\n        head = newNode;\n        tail = newNode;\n    }\n    else {\n        head->prev = newNode;\n        newNode->next = head;\n        head = newNode;\n    }\n}\n \nvoid DoublyLinkedList::AddBack(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->next = nullptr;\n \n    if (tail == nullptr) {\n        newNode->prev = nullptr;\n        head = newNode;\n        tail = newNode;\n    }\n    else {\n        tail->next = newNode;\n        newNode->prev = tail;\n        tail = newNode;\n    }\n}\n \nvoid DoublyLinkedList::DeleteFront() {\n    if (head == nullptr) {\n        return;\n    }\n    else if (head->next == nullptr) {\n        delete head;\n        head = nullptr;\n        tail = nullptr;\n        return;\n    }\n    else {\n        Node* tmp = head;\n        head = head->next;\n        delete tmp;\n        head->prev = nullptr;\n    }\n}\n \nvoid DoublyLinkedList::DeleteBack() {\n    if (tail == nullptr) {\n        return;\n    }\n    else if (tail->prev == nullptr) {\n        delete tail;\n        head = nullptr;\n        tail = nullptr;\n        return;\n    }\n    else {\n        Node* tmp = tail;\n        tail = tail->prev;\n        delete tmp;\n        tail->next = nullptr;\n    }\n}\n \nvoid DoublyLinkedList::Display() {\n    Node* tmp = head;\n \n    while (tmp != nullptr) {\n        std::cout << tmp->data << \" \";\n        tmp = tmp->next;\n    }\n}\n \nDoublyLinkedList::~DoublyLinkedList() {\n    Node* tmp = head;\n \n    while (tmp != nullptr) {\n        Node* next = tmp->next;\n        delete tmp;\n        tmp = next;\n    }\n}", "category": "Python"}, {"instruction": "Write Python code which changes a string to all lowercase characters.", "input": "String: \"This is a string in Uppercase!!!\"", "output": "text = \"This is a string in Uppercase!!!\"\ntext = text.lower()\nprint(text)", "category": "Python"}, {"instruction": "Write a function in Ruby that takes in two parameters, a string and an alphabetically sorted list of words, and returns true if the string is an anagram of a word in the list", "input": "", "output": "def is_anagram(string, words) \n  words.each do |word|\n    return true if word.split(\"\").sort == string.split(\"\").sort\n  end\n  return false\nend", "category": "Python"}, {"instruction": "Create a function in HTML that checks to make sure the provided input is an integer", "input": "", "output": "<html>\n<head>\n    <script>\n        function checkInteger(number) {\n            if(typeof number == 'number') {\n                if(Math.floor(number) == number) \n                    return true;\n            }\n            return false;\n        }\n    </script>\n</head>", "category": "Python"}, {"instruction": "Identify the data type (int, string, list, etc.) of the following expression in Python", "input": "\"hello world\"", "output": "string", "category": "Python"}, {"instruction": "Create a Java program to read in an integer from the user and output the number doubled.", "input": "", "output": "import java.util.Scanner;\n\npublic class NumberDoubling {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter an integer: \");\n        int number = scanner.nextInt();\n\n        System.out.println(\"The doubled number is: \" + (number * 2));\n    }\n}", "category": "Python"}, {"instruction": "Reverse the characters in the following string: \u201cHello World\u201d", "input": "", "output": "\"dlroW olleH\"", "category": "Python"}, {"instruction": "Arrange in order of increasing magnitude the elements in an integer array.", "input": "arr = [4, 23, 1, 7, 10]", "output": "arr.sort(); // arr is now [1, 4, 7, 10, 23]", "category": "Python"}, {"instruction": "Rewrite the following Python function without using an elif statement.", "input": "def find_type(x):\n    if x == \"a\":\n        print(\"alpha\")\n    elif x == \"b\":\n        print(\"beta\")\n    elif x == \"c\":\n        print(\"gamma\")", "output": "def find_type(x):\n    type_map = {\"a\": \"alpha\", \"b\": \"beta\", \"c\": \"gamma\"}\n    if x in type_map:\n        print(type_map[x])", "category": "Python"}, {"instruction": "Identify all person names in the following text using python.", "input": "John, Paul, and George went to the park.", "output": "import re\ntext = \"John, Paul, and George went to the park.\"\npersons = re.findall(r\"\\w+\", text)\nprint(persons) # [\"John\", \"Paul\", \"and\", \"George\"]", "category": "Python"}, {"instruction": "Extract all characters from the following text and store them in a new string.", "input": "Hello world!", "output": "characters = \"Helloworld!\"", "category": "Python"}, {"instruction": "Using regular expressions, separate the below string into three parts.", "input": "\"a=1,b=2,c=3\"", "output": "regex = \"\\w=(\\d+)\"\na, b, c = re.findall(regex, \"a=1,b=2,c=3\")", "category": "Python"}, {"instruction": "Ask a natural language question with the intent \"What is the population of India?\".", "input": "", "output": "What is the population of India?", "category": "Python"}, {"instruction": "Construct an for loop in R for reading in a csv of an dataset.", "input": "file_name = \"mydata.csv\"", "output": "d <- read.csv(file_name)\nfor (i in 1:nrow(d)) {\n    # do something with each row of data\n}", "category": "Python"}, {"instruction": "Create a function in Python that executes the below pseudocode.", "input": "Input: A list of integers\n\nFor each integer:\n    If the integer is even, add 1 to the list\n    If the integer is odd, subtract 1 from the list\n\nOutput: A new list of integers", "output": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list", "category": "Python"}, {"instruction": "Write a C# class which implements two-dimensional array searching using binary search algorithms.", "input": "", "output": "public class BinarySearch2D\n{\n    public void Search(int[,] matrix, int target)\n    {\n        if (matrix == null || matrix.GetLength(0) == 0 || matrix.GetLength(1) == 0) \n            return;\n        \n        int rows = matrix.GetLength(0);\n        int columns = matrix.GetLength(1);\n        \n        int row = 0;\n        int column = columns - 1;\n        \n        while (row < rows && column >= 0)\n        {\n            if (matrix[row, column] == target)\n            {\n                Console.WriteLine($\"Target found at row: {row} and column: {column}\");\n                return;\n            }\n            else if (matrix[row, column] > target)\n            {\n                column--;\n            }\n            else\n            {\n                row++;\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write a method in C that prints out all the permutations of a given string.", "input": "String: ABC", "output": "#include<stdio.h> \n#include<string.h> \n\n/* Function to swap values at two pointers */\nvoid swap(char *x, char *y) \n{ \n\tchar temp; \n\ttemp = *x; \n\t*x = *y; \n\t*y = temp; \n} \n  \n/* Function to print permutations of string \n   This function takes three parameters: \n   1. String \n   2. Starting index of the string \n   3. Ending index of the string. */\nvoid permute(char *a, int l, int r) \n{ \n   int i; \n   if (l == r) \n     printf(\"%s\\n\", a); \n   else\n   { \n       for (i = l; i <= r; i++) \n       { \n          swap((a+l), (a+i)); \n          permute(a, l+1, r); \n          swap((a+l), (a+i)); //backtrack \n       } \n   } \n} \n  \n/* Driver program to test above functions */\nint main() \n{ \n\tchar str[] = \"ABC\"; \n\tint n = strlen(str); \n\tpermute(str, 0, n-1); \n\treturn 0; \n}", "category": "Python"}, {"instruction": "Write a MySQL query to calculate the average temperature for each user, given a table of log data.", "input": "", "output": "SELECT user_id, AVG(temperature) \nFROM logs \nGROUP BY user_id;", "category": "Python"}, {"instruction": "Write an SQL query to find the top 5 users with the highest temperature reading.", "input": "", "output": "SELECT TOP 5 user_id, MAX(temperature)\nFROM logs\nGROUP BY user_id\nORDER BY MAX(temperature) DESC;", "category": "Python"}, {"instruction": "Create an SQL query to get the names and ages of all employees that are under 25 and have a job title of \"Software Engineer\".", "input": "Table: Employees\nColumns: id (int), name (string), age (int), job_title (string)", "output": "SELECT name, age\nFROM Employees\nWHERE age<25 AND job_title=\"Software Engineer\"", "category": "Python"}, {"instruction": "Parse a given HTML page to extract all <h1> tags.", "input": "<html>\n<head>\n    <title>Page Title</title>\n</head>\n<body>\n    <h1>This is a heading 1</h1>\n    <h2>This is a heading 2</h2>\n    <h1>This is another heading 1</h1>\n</body>\n</html>", "output": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<html>\n<head>\n    <title>Page Title</title>\n</head>\n<body>\n    <h1>This is a heading 1</h1>\n    <h2>This is a heading 2</h2>\n    <h1>This is another heading 1</h1>\n</body>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\nh1_tags = soup.find_all('h1')\nfor tag in h1_tags:\n    print(tag)", "category": "Python"}, {"instruction": "Implement a program in Java that reverses a string input given by the user.", "input": "", "output": "import java.util.Scanner; \n\npublic class ReverseString {\n public static void main(String[] args) {\n \n  Scanner scanner = new Scanner(System.in);\n  String inputString = scanner.nextLine();\n  String reversedString = \"\";\n \n  for(int i = inputString.length() - 1; i >= 0; i-- ) {\n   reversedString = reversedString + inputString.charAt(i);\n  }\n \n  System.out.println(reversedString);\n }\n}", "category": "Python"}, {"instruction": "Generate the code to append the item \"banana\" to the end of the list called fruits.", "input": "fruits = ['apple', 'orange', 'grapes']", "output": "fruits.append('banana')", "category": "Python"}, {"instruction": "Create a SQL query to get the total count of the employees in the team that have the job title of \"software engineer\".", "input": "Table: Employees \nColumns: id (int), name (string), job_title (string), team (string)", "output": "SELECT COUNT(*) AS total_count\nFROM Employees\nWHERE job_title=\"software engineer\"", "category": "Python"}, {"instruction": "Given two integers, implement a function in C to swap their values.", "input": "int a = 3\nint b = 5", "output": "void swap(int *a, int *b){\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nswap(&a, &b);", "category": "Python"}, {"instruction": "Modify the given code so it prints a prime number table.", "input": "table_size = 10", "output": "# Include the necessary library\nfrom prime_generator import get_prime\n\n# Get a list of prime numbers\nprimes = get_prime(table_size)\n\n# Print the prime number table\nprint(\" Prime Number Table\")\nprint(\" --------------------\")\n\nfor i in range(table_size):\n    print(f\"{primes[i]:>4} {(i+1)*primes[i]:>4}\")", "category": "Python"}, {"instruction": "Construct an HTML form as a comment in the below code.", "input": "<div>\n    <!-- TODO: Add a form here -->\n</div>", "output": "<div>\n    <!--\n    <form action=\"submit.php\" method=\"post\">\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n        <label for=\"email\">Email:</label><br>\n        <input type=\"text\" id=\"email\" name=\"email\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    -->\n</div>", "category": "Python"}, {"instruction": "Calculate the sum of the numbers in the given array using the Java 8 Stream API.", "input": "nums = [2, 4, 6, 10]", "output": "int sum = Arrays.stream(nums).sum();\nSystem.out.println(sum); // prints 22", "category": "Python"}, {"instruction": "Create a variable in JavaScript for storing the result of the following expression.", "input": "a + 5*b", "output": "let result = a + 5*b;", "category": "Python"}, {"instruction": "Given a JSON string, write a function in JavaScript to extract the value for the key \"name\".", "input": "jsonString = {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}", "output": "function getValueByKey(jsonString, key) {\n    let jsonObj = JSON.parse(jsonString);\n    return jsonObj[key];\n}\n\nnameValue = getValueByKey(jsonString, \"name\");\nconsole.log(nameValue) //prints \"John\"", "category": "Python"}, {"instruction": "Concatenate the strings in the given list using Java.", "input": "list = [\"hello\", \"world\", \"!\"]", "output": "StringBuilder sb = new StringBuilder();\nfor (String str : list) {\n    sb.append(str);\n}\nString output = sb.toString();\nSystem.out.println(output); // prints \"hello world!\"", "category": "Python"}, {"instruction": "Generate a random string 10 characters in length using the given Python code.", "input": "import random", "output": "import random\n\ndef generate_random_string(length):\n    \"\"\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choice(chars)\n    return result\n\nrandom_string = generate_random_string(10)\nprint(random_string) #eg. 7O?1Y%%&_K", "category": "Python"}, {"instruction": "Replace the placeholder in the given HTML document with the corresponding table.", "input": "<html>\n  <body>\n    <!-- replace placeholder with table -->\n  </body>\n</html>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td> \n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td> \n    <td>94</td>\n  </tr>\n</table>", "output": "<html>\n  <body>\n    <table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td> \n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td> \n    <td>94</td>\n  </tr>\n</table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Given an array of integers, write a function that returns the index of the smallest number in the array.", "input": "array = [3, 1, 9, 6, 17]", "output": "def findSmallest(arr):\n    \n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[smallest_index]:\n            smallest_index = i\n    \n    return smallest_index\n\nindex_of_smallest = findSmallest(array)\nprint(index_of_smallest) #prints 1", "category": "Python"}, {"instruction": "Write an HTML page which takes in user input and makes an AJAX request to a web server.", "input": "", "output": "<html>\n  <head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n      $(document).ready(function(){\n        $(\"button\").click(function(){\n          $.ajax({\n            url: 'https://example.com',\n            type: 'POST',\n            data: $('#user-input').val(),\n            success: function(response) {\n              // Display response from server\n            }\n          });\n        });\n      });\n    </script>\n  </head>\n  <body>\n    <input type=\"text\" id=\"user-input\" />\n    <button>Send</button>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Search for the string \"tutorials\" in the given text and replace it with the word \"lessons\".", "input": "text = \"This site provides many Python tutorials\"", "output": "text = text.replace(\"tutorials\", \"lessons\");\nconsole.log(text); // prints \"This site provides many Python lessons\"", "category": "Python"}, {"instruction": "Using the HTML code below, add a link to an external web page.", "input": "<h2>My First Web Page</h2>\n\n<p>This is my first web page.</p>", "output": "<h2>My First Web Page</h2>\n\n<p>This is my first web page. <a href=\"url-to-some-site\">Learn More</a>.</p>", "category": "Python"}, {"instruction": "Write a SQL statement that joins three tables and returns the fields of interest.", "input": "Table 1 (tbl_person): person_name, person_id\nTable 2 (tbl_course): course_id, course_name\nTable 3 (tbl_enroll): person_id, course_id\nFields of Interest: person_name, course_name", "output": "SELECT tbl_person.person_name, tbl_course.course_name\nFROM tbl_person\nINNER JOIN tbl_enroll on tbl_person.person_id = tbl_enroll.person_id\nINNER JOIN tbl_course on tbl_enroll.course_id = tbl_course.course_id;", "category": "Python"}, {"instruction": "Write a class in Java with assigned variables and adequate getters and setters.", "input": "ClassName: Student\nVariables: name (String), age (integer)", "output": "public class Student {\n    private String name;\n    private int age;\n\n    // Getters & Setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}", "category": "Python"}, {"instruction": "Convert the following NFA (Non-Deterministic Finite Automaton) to DFA (Deterministic Finite Automaton).", "input": "State S0, S1, S2 \nTransition Function:\nS0 - a -> S1\nS0 - b -> S2\nS1 - b -> S0\nS1 - a -> S2\nS2 - a -> S2\nS2 - b -> S1\nStart State S0, Final States S1 and S2", "output": "State Q0, Q1, Q2 \nTransition Function:\nQ0 - a -> Q1\nQ0 - b -> Q2\nQ1 - a -> Q2\nQ1 - b -> Q0\nQ2 - a -> Q2\nQ2 - b -> Q1\nStart State Q0, Final States Q0 and Q2", "category": "Python"}, {"instruction": "Write a SQL query to fetch records from the table Persons where the city is either Dallas or Chicago.", "input": "Table name: Persons \nFields: ID, Lastname, Firstname, City", "output": "SELECT ID, Lastname, Firstname, City\nFROM Persons\nWHERE City IN ('Dallas', 'Chicago');", "category": "Python"}, {"instruction": "Create a C++ class for managing a generic dictionary, in which keys and values can be of any data type.", "input": "", "output": "template <typename K, typename V>\nclass Dictionary {\n    private:\n    std::map<K,V> m;\n     \n    public:\n    const V& get(const K& key) const {\n        return m[key];\n    }\n \n    void set(const K& key, const V& value) {\n        m[key] = value;\n    }\n};", "category": "Python"}, {"instruction": "Write a stored procedure in SQL for inserting records into the table \"Students\".", "input": "", "output": "CREATE PROCEDURE insert_students \n(IN name VARCHAR(100), IN age INT) \nBEGIN \n   INSERT INTO students (name, age) \n   VALUES (name, age); \nEND", "category": "Python"}, {"instruction": "Create a React component for displaying a simple profile card with the properties of name and age.", "input": "", "output": "const ProfileCard = (props) => {\n    return (\n        <div>\n            <h1>{props.name}</h1>\n            <p>Age: {props.age}</p>\n        </div>\n    );\n}", "category": "Python"}, {"instruction": "Construct a MySQL query to select certain columns from the table \"Books\".", "input": "", "output": "SELECT title, author FROM Books;", "category": "Python"}, {"instruction": "Create a type-safe generic class in C# for storing objects of any data type.", "input": "", "output": "public class GenericStorage<T>\n{\n    public T Data {get; set;}\n}", "category": "Python"}, {"instruction": "Convert a JSON object to corresponding HTML table format.", "input": "{ \"name\": \"John\", \"age\": 31, \"city\": \"New York\"}", "output": "<table>\n     <tr>\n        <td>Name</td>\n        <td>John</td>\n    </tr>\n    <tr>\n        <td>Age</td>\n        <td>31</td>\n    </tr>\n    <tr>\n        <td>City</td>\n        <td>New York</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write a function in JavaScript to sort an array of objects based on a selected key.", "input": "[{\"name\":\"John\",\"age\":25},{\"name\":\"Bob\",\"age\":30}]", "output": "function sortByKey(arr, key) {\n    return arr.sort((a, b) => (a[key] > b[key]) ? 1 : -1);\n}", "category": "Python"}, {"instruction": "Create a method in Java for encrypting a string using the Advanced Encryption Standard (AES).", "input": "", "output": "public static String AESEncrypt(String toEncrypt) throws Exception\n  {\n  \tSecureRandom secureRandom = new SecureRandom();  \n\tbyte[] keyBytes = new byte[16];\n\tsecureRandom.nextBytes(keyBytes);\n    \tSecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes,\"AES\");\n      \n\tCipher cipher = Cipher.getInstance(\"AES\");\n\tcipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);\n\tbyte[] encrypted = cipher.doFinal(toEncrypt.getBytes());\n\tString encryptedString = Base64.encodeBase64String(encrypted);\n    \n\treturn encryptedString;\n  }", "category": "Python"}, {"instruction": "Write a C# method for converting a string to its equivalent integer value.", "input": "", "output": "public static int StringToInt(string str)\n{\n    int result = 0;\n    Int32.TryParse(str, out result);\n    return result;\n}", "category": "Python"}, {"instruction": "Create an endpoint in Express.js which prints out the request path when hit by a POST request.", "input": "", "output": "app.post(\"/\", (req, res) => {\n    console.log(\"Request path: \" + req.path);\n    res.send(\"\");\n});", "category": "Python"}, {"instruction": "Compare and contrast HTTP and HTTPS.", "input": "", "output": "HTTP (Hypertext Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure) are both protocols used to transfer data over the internet. The main difference between them is that HTTPS is a secure connection, using encryption technology to protect and authenticate data exchanged over the connection. HTTP on the other hand is a plain text protocol and does not provide secure communication. Thus, HTTPS is much more secure and is preferred when sending and receiving sensitive data such as passwords and credit card information.", "category": "Python"}, {"instruction": "How is memory managed in C++?", "input": "", "output": "C++ memory management is done through the use of pointers. Pointers are variables which hold the address of a variable or an object. Memory for variables and objects is allocated dynamically at run-time through the use of the new keyword, and deallocated dynamically through the use of the delete keyword. The C++ runtime library also comes with functions such as malloc() and free() for allocating and deallocating memory.", "category": "Python"}, {"instruction": "Add an event listener to a given HTML element.", "input": "<button type=\"button\" id=\"clickMe\">Click Me!</button>", "output": "document.getElementById(\"clickMe\").addEventListener(\"click\", function() {\n  // Do something when the element is clicked\n});", "category": "Python"}, {"instruction": "Create a basic React web page with two app components.", "input": "", "output": "import React from \"react\";\n\nconst MainApp = () => (\n  <div>\n    <h1>My React App</h1>\n    <p>Welcome to my React App!</p>\n  </div>\n);\n\nconst SecondaryApp = () => (\n  <div>\n    <h2>Welcome to the second page</h2>\n    <p>This is the second page of my App!</p>\n  </div>\n);\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\nReactDOM.render(<SecondaryApp />, document.getElementById('root2'));", "category": "Python"}, {"instruction": "Design a Java program to display the numbers from 1 to 100 in a tabular format.", "input": "", "output": "public class Table {\n\n  public static void main(String[] args) {\n    for (int i = 1 ; i <= 100 ; i++){\n      System.out.println(i);\n      if (i % 10 == 0){\n        System.out.println(\"\");\n      }\n    }\n  }\n}", "category": "Python"}, {"instruction": "Design a basic HTML page with a header, footer and a body section.", "input": "", "output": "<html>\n <head>\n  <title>My HTML Page</title>\n </head>\n <body>\n  <header>\n   <h1>My Website</h1>\n  </header>\n  <main>\n   This is the main content of the page.\n  </main>\n  <footer>\n   Copyright 20", "category": "Python"}, {"instruction": "Write a function in Java that takes an array of integers and sorts it in ascending order.", "input": "", "output": "public static void sortArray(int[] arr) \n{ \n    int n = arr.length; \n\n    for (int i = 0; i < n-1; i++) \n    { \n        int min_idx = i; \n        for (int j = i+1; j < n; j++) \n            if (arr[j] < arr[min_idx]) \n                min_idx = j; \n  \n        int temp = arr[min_idx]; \n        arr[min_idx] = arr[i]; \n        arr[i] = temp; \n    } \n}", "category": "Python"}, {"instruction": "Create an SQL query to get the second highest salary from a table named 'empployee'", "input": "", "output": "SELECT MAX(salary) AS second_highest_salary \nFROM employee\nWHERE salary < (SELECT MAX(salary) FROM employee);", "category": "Python"}, {"instruction": "Write a Ruby function to find the most frequently occurring elements in an array", "input": "[3, 2, 1, 2, 4, 8, 7, 4]", "output": "def find_most_frequent(arr) \n  hash = Hash.new(0) \n  arr.each do |num| \n    hash[num] += 1 \n  end \n  arr.max_by { |v| hash[v] } \nend \n\narr = [3, 2, 1, 2, 4, 8, 7, 4] \nprint find_most_frequent(arr) \n# Output is 4", "category": "Python"}, {"instruction": "Create a JavaScript function that checks if all elements of an array are equal or not.", "input": "[1,2,3,1,2]", "output": "function checkEquality(arr) {\n  return arr.every(val => val === arr[0]);\n}\n\nlet arr = [1, 2, 3, 1, 2];\nconsole.log(checkEquality(arr)); // false", "category": "Python"}, {"instruction": "Modify the given Swift code to compute the product of two numbers and print the result", "input": "a = 5\nb = 8", "output": "var a = 5\nvar b = 8\n\nvar result = a * b\nprint(\"The product of a and b is: \\(result)\")", "category": "Python"}, {"instruction": "Write a HTML/CSS code to implement responsive design", "input": "", "output": "<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<style>\n  @media only screen and (max-width: 600px) {\n    #wrap {\n      max-width: 100%;\n    }\n  }\n</style>\n</head>\n<body>\n <div id=\"wrap\">\n   <!-- your content -->\n </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a correct assembly language code to execution the following", "input": "Add two numbers and store the result in memory address 2000", "output": "MOV R1, #3000 \n MOV R2, #3001 \n ADD R3, R1, R2 \n MOV 2000, R3", "category": "Python"}, {"instruction": "Modify the given Ruby program to find the sum of all odd numbers between a given range", "input": "1, 10", "output": "def sum_odd_numbers(start, finish)\n  total = 0\n  (start..finish).each do |number|\n    total += number if number % 2 == 1 \n  end\n  total\nend\n\np sum_odd_numbers(1, 10)", "category": "Python"}, {"instruction": "Convert the following array of strings into a decimal number.", "input": "[\"3\", \"14\", \"5\"]", "output": "Number(\"3.145\")", "category": "Python"}, {"instruction": "Create a C program that sorts an array in either ascending or descending order, depending on the user\u2019s selection.", "input": "[2, 1, 4, 3]", "output": "#include <stdio.h>\n\n// Function to swap two elements\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\n\n// Bubble sort function \nvoid bubbleSort(int arr[], int n, int order) {     \n    int i, j; \n    for (i = 0; i < n-1; i++)              \n        for (j = 0; j < n-i-1; j++) \n            if (order == 0 && arr[j] > arr[j+1]) \n                swap(&arr[j], &arr[j+1]); \n            else if (order == 1 && arr[j] < arr[j+1])\n                swap(&arr[j], &arr[j+1]); \n}\n\n// Driver program\nint main() {\n    int arr[] = {2, 1, 4, 3}; \n    int n = sizeof(arr)/sizeof(arr[0]); \n    int order;\n    printf(\"Enter 0 for ascending order, 1 for descending: \\n\");\n    scanf(\"%d\", &order);\n    bubbleSort(arr, n, order);\n    printf(\"Sorted array: \\n\");\n    for (int i=0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    return 0;\n}", "category": "Python"}, {"instruction": "Modify the given Java Program to generate the Fibonacci Series till provided number of terms.", "input": "int n = 10;", "output": "public class Fibonacci { \n\n    static int fib(int n) \n    { \n    if (n <= 1) \n       return n; \n    return fib(n-1) + fib(n-2); \n    } \n       \n    public static void main (String args[]) \n    { \n    int n = 10; \n    System.out.println(fib(n)); \n    } \n}", "category": "Python"}, {"instruction": "Write a Java script to filter out repeat elements in an array.", "input": "[1, 2, 3, 2, 4, 4, 1]", "output": "let arr = [1, 2, 3, 2, 4, 4, 1]; \nlet unique = [...new Set(arr)];\nconsole.log(unique); // [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a C++ function to compute the area of a triangle with three given edges.", "input": "", "output": "float triangle_area(float a, float b, float c) \n{ \n    float s = (a + b + c) / 2; \n    return sqrt(s * (s - a) * (s - b) * (s - c)); \n}", "category": "Python"}, {"instruction": "Create a SQL query to list all the employees of a given department in descending order of their salary.", "input": "Table name: \"Employees\"\nColumns: \"emp_name\", \"emp_dept\", \"salary\"", "output": "SELECT emp_name, emp_dept, salary FROM Employees \nWHERE emp_dept = <dept_name> \nORDER BY salary DESC;", "category": "Python"}, {"instruction": "Write a function in Java to split a string into an array of substrings.", "input": "", "output": "public static String[] splitString(String s, String regex) \n{ \n    return s.split(regex); \n}", "category": "Python"}, {"instruction": "Find the number of days in a month given the year and month.", "input": "Year: 2020\nMonth: April", "output": "Given the year 2020 and month April, the number of days in April is 30.", "category": "Python"}, {"instruction": "Define an interface in Java.", "input": "", "output": "interface SampleInterface { \n    // abstract method \n    public void sampleMethod(); \n}", "category": "Python"}, {"instruction": "Write a JavaScript program to generate the following types of patterns of stars.", "input": "*\n**\n***\n****\n*****", "output": "for (var i = 0; i < 5; i++){\n  var row = \"\";\n  for (var j = 0; j <= i; j++){\n    row += \"*\";\n  }\n  console.log(row);\n}", "category": "Python"}, {"instruction": "Write a JavaScript code that gets the URL of a web page.", "input": "", "output": "var url = window.location.href;", "category": "Python"}, {"instruction": "Classify the given sentence into either declarative or interrogative sentence.", "input": "John is getting ready for the test.", "output": "Declarative sentence.", "category": "Python"}, {"instruction": "Design a SQL query to select the top 5 movies based on the number of 'likes'.", "input": "Table Name: Movies\nColumns:  Movie_ID, Movie_Name, Likes", "output": "SELECT Movie_Name \nFROM Movies\nORDER BY Likes\nLIMIT 5;", "category": "Python"}, {"instruction": "Write a function in C to find the corresponding letter for a given prime number.", "input": "int prime_no = 11;", "output": "char findLetterforPrime(int prime_no)\n{\n    char character;\n \n    switch (prime_no)\n    {\n        case 2:\n            character = 'A';\n            break;\n        case 3:\n            character = 'B';\n            break;\n        case 5:\n            character = 'C';\n            break;\n        case 7:\n            character = 'D';\n            break;\n        case 11:\n            character = 'E';\n            break;\n        default:\n            printf(\" prime number is not in list\");\n    }\n    return character;\n}", "category": "Python"}, {"instruction": "Write a code snippet that returns the root of a given binary tree.", "input": "tree = \n        3\n      /   \\\n    4      5\n  /    \\    \\\n3       6    7", "output": "def root(tree):\n    if not tree:\n        return None\n    return tree.val", "category": "Python"}, {"instruction": "Write a function to print the four elements in the given list in reverse order", "input": "list = [\"a\", \"b\", \"c\", \"d\"]", "output": "def print_reverse_order(lst):\n    for item in reversed(lst):\n        print(item)\n\nprint_reverse_order(list)", "category": "Python"}, {"instruction": "Create a new method \u201clistItems\u201d which returns a list of strings", "input": "", "output": "def listItems():\n    list_items = [\"item1\", \"item2\", \"item3\"]\n    return list_items", "category": "Python"}, {"instruction": "Write a user defined function to print the sum of two numbers", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Modify the CSS in the given HTML code to style the web page", "input": "<html>\n <head>\n  <title>Styled Page</title>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html>", "output": "<html>\n <head>\n  <title>Styled Page</title>\n  <style type=\"text/css\">\n    body {\n        background-color: white;\n    }\n    h1 {\n        font-family: 'Arial', sans-serif;\n        font-size: 30px;\n        color: black;\n        text-align: center;\n    }\n  </style>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Complete the SQL query which find the name and age of all female customers", "input": "Table A (Customers):\nname | sex | age", "output": "SELECT\n    name,\n    age\nFROM\n    Customers\nWHERE \n    sex = 'female';", "category": "Python"}, {"instruction": "Write a Python script to remove all the values that are greater than 30 from the list", "input": "list_of_num = [25, 12, 36, 118, 200, 30]", "output": "new_list = [num for num in list_of_num if num <= 30]", "category": "Python"}, {"instruction": "Write a SQL query to join two tables \u2018employees\u2019 and \u2018locations\u2019 on the key \u2018city\u2019 and return only the employees of age 25-35", "input": "Table A (employees):\nid | name | city | age\n\nTable B (locations):\ncity | region", "output": "SELECT\n    e.id,\n    e.name,\n    e.city,\n    e.age\nFROM \n    employees e\nINNER JOIN \n    locations l\nON \n    e.city =  l.city\nWHERE\n    e.age BETWEEN 25 AND 35;", "category": "Python"}, {"instruction": "Develop an algorithm to return all possible permutations of a given string.", "input": "String: \"abc\"", "output": "const permute = str => {\n  let results = [];\n  \n  const permutations = (subStr, rest) => {\n    if (!rest.length) {\n      results.push(subStr);\n    } else {\n      for (let i = 0; i < rest.length; i++) {\n        let newSubStr = subStr + rest[i];\n        let newRest = rest.substring(0, i) + rest.substring(i + 1);\n        permutations(newSubStr, newRest);\n      }\n    }\n  }\n\n  permutations('', str);\n  return results;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all rows where the age is greater than or equal to 30.", "input": "Table name: employees\nTable information: id, name, age", "output": "SELECT *\nFROM employees\nWHERE age >= 30", "category": "Python"}, {"instruction": "Update a MongoDB document with the following information.", "input": "Database name: products\nCollection name: items\nDocument ID: 5e9697d50a5173c078b5306b\nField to update: description\nValue: This item is now available in 3 sizes", "output": "db.items.updateOne(\n   { _id: ObjectId(\"5e9697d50a5173c078b5306b\") },\n   { $set: { description: \"This item is now available in 3 sizes\" } }\n)", "category": "Python"}, {"instruction": "Write a SQL query to select all rows where the name contains \"John\".", "input": "Table name: employees\nTable information: id, name, age", "output": "SELECT * \nFROM employees \nWHERE name LIKE '%John%'", "category": "Python"}, {"instruction": "Create a schema for a collection in MongoDB to store product data.", "input": "Collection name: products\nSchema should include: name, type (string), description (string), price (integer), availability (boolean)", "output": "const ProductSchema = new Schema({\n  name: { type: String },\n  type: { type: String },\n  description: { type: String },\n  price: { type: Number },\n  availability: { type: Boolean },\n});", "category": "Python"}, {"instruction": "Create a C# method that takes a string and counts the number of times a given character appears.", "input": "\"Mississippi\", 'i'", "output": "public static int countCharacter(string text, char character)\n \u00a0 \u00a0 \u00a0 \u00a0 {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int count = 0;\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 foreach (char c in text)\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if(c == character)\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count++;\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return count;    \n \u00a0 \u00a0 \u00a0 \u00a0 }", "category": "Python"}, {"instruction": "Edit the following for loop to add a comment before each iteration.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10):\n    # loop iteration: i =\n    print(i)", "category": "Python"}, {"instruction": "Write a code snippet in SQL to show the town fields in a table called \"library.\"", "input": "", "output": "SELECT town \nFROM library;", "category": "Python"}, {"instruction": "Write a code snippet in Java that sorts a given array in ascending order.", "input": "", "output": "public static void sortAscending(int[] arr) { \n    int n = arr.length; \n    for (int i = 0; i < n-1; i++) \n        for (int j = 0; j < n-i-1; j++) \n            if (arr[j] > arr[j+1]) \n            { \n                int temp = arr[j]; \n                arr[j] = arr[j+1]; \n                arr[j+1] = temp; \n            } \n}", "category": "Python"}, {"instruction": "Edit the following Python code to add error handling for invalid inputs.", "input": "def area_triangle(base,height):\n    pass", "output": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height", "category": "Python"}, {"instruction": "Given a function, create a program to identify whether the output is equal to 1, 0 or -1.", "input": "def func(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1", "output": "def func_val(x):\n    result = func(x)\n    if result == -1:\n        return -1\n    elif result == 0:\n        return 0\n    else:\n        return 1", "category": "Python"}, {"instruction": "Edit the following class to make sure any variables created as part of the class cannot be modified by the program", "input": "class Example:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "output": "class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def x(self):\n        return self.__x\n    @x.setter\n    def x(self, val):\n        raise AttributeError(\"Cannot modify x\")\n    @property\n    def y(self):\n        return self.__y\n    @y.setter\n    def y(self, val):\n        raise AttributeError(\"Cannot modify y\")", "category": "Python"}, {"instruction": "Submit a valid Ruby program to remove special characters from a given string", "input": "Hello$#@World!", "output": "def remove_special_chars(str)\n   str = str.gsub(/[^a-zA-Z0-9\\s]/, '')\n   return str\nend\n\nputs remove_special_chars(\"Hello$#@World!\")", "category": "Python"}, {"instruction": "Categorize a given dataset into three classes", "input": "[1, 2, 3, 4, 5]", "output": "Class 1: [1]\nClass 2: [2, 3]\nClass 3: [4, 5]", "category": "Python"}, {"instruction": "Create a function in Python that takes an input list of strings and returns the longest string in the list.", "input": "list = [\"cat\", \"dog\", \"elephant\"]", "output": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word", "category": "Python"}, {"instruction": "Write a function in Java that takes an input string and changes the case of each letter to its opposite (i.e. upper case to lower case and vice versa).", "input": "String input = \"Hello World\";", "output": "public static String changeCase(String input) {\n    StringBuilder outputString = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (Character.isUpperCase(c)) {\n            outputString.append(Character.toLowerCase(c));\n        } else {\n            outputString.append(Character.toUpperCase(c));\n        }\n    }\n    return outputString.toString();\n}", "category": "Python"}, {"instruction": "Create a CSS style to make all headings (h1, h2, h3, h4, h5, h6) bold and blue.", "input": "", "output": "h1, h2, h3, h4, h5, h6{\n    font-weight: bold;\n    color: blue;\n}", "category": "Python"}, {"instruction": "Create a PHP script that can validate if a given string is a valid IP address.", "input": "", "output": "function validateIP(ip) { \n  return filter_var(ip, FILTER_VALIDATE_IP); \n}", "category": "Python"}, {"instruction": "Edit the following SQL statement to select all rows from the \"users\" table where the \"country_id\" is 2 and the \"level\" is greater than 5.", "input": "SELECT * FROM users;", "output": "SELECT * FROM users\nWHERE country_id = 2 \nAND level > 5;", "category": "Python"}, {"instruction": "Create a SQL query to get the number of records from the table \"users\" where the value of the \"active\" column is True.", "input": "", "output": "SELECT COUNT(*) AS num_of_active \nFROM users \nWHERE active = true;", "category": "Python"}, {"instruction": "Write a JavaScript function to find the cube root of a number.", "input": "let num = 8;", "output": "function cubeRoot(num) {\n  return Math.pow(num, 1/3);\n}", "category": "Python"}, {"instruction": "Write a Java method to transform a String input into a String array with each element the length of 4.", "input": "String input = \"HelloWorld\";", "output": "public static String[] stringToArray(String input) {\n    String[] stringArray = new String[input.length()/4];\n    int count = 0;\n    for (int i = 0; i < input.length(); i += 4) {\n        stringArray[count] = input.substring(i, i+4);\n        count++;\n    }\n    return stringArray;\n}", "category": "Python"}, {"instruction": "Create a new div element and add it to the DOM with id \"main-container\".", "input": "", "output": "let myDiv = document.createElement('div');\nmyDiv.id = \"main-container\";\ndocument.body.appendChild(myDiv);", "category": "Python"}, {"instruction": "Create an array that contains the numbers from 0 to 10 in Python.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a function that prints out the Pythagorean theorem in Python.", "input": "", "output": "def pythagoras_theorem():\n    \"\"\"Print the Pythagorean theorem in Python.\"\"\"\n    print(\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\")", "category": "Python"}, {"instruction": "Create a C++ code to display the following pattern.\n\nx\nxxx\nxxxxx\nxxxxxxx", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \n// Function to demonstrate printing pattern \nvoid triangle(int n) \n{ \n    // Outer loop to handle number of rows \n    // n in this case \n    for (int i=0; i<n; i++) \n    { \n        // Inner loop to handle number of columns \n        // values changing acc. to outer loop \n        for (int j=0; j<=i; j++ ) \n        { \n            // Printing stars \n            cout << \"x\"; \n        } \n  \n        // Ending line after each row \n        cout << \"\\n\"; \n    } \n} \n  \n// Driver Function \nint main() \n{ \n    int n = 4; \n    triangle(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a jQuery function that animates an element's background color from red to green over 3 seconds.", "input": "", "output": "$(\"#element\").animate({\n    backgroundColor: \"green\"\n  }, {\n    duration: 3000,\n    easing: \"linear\"\n});", "category": "Python"}, {"instruction": "Sort the following array in reversed order: [3, 2, 1, 5, 4, 6]", "input": "[3, 2, 1, 5, 4, 6]", "output": "[6, 5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Develop a script in JavaScript to validate an email address.", "input": "", "output": "function isValidEmail(email) { \n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}", "category": "Python"}, {"instruction": "Create a MySQL schema to store a table of products.", "input": "", "output": "CREATE TABLE products (\n  id int NOT NULL AUTO_INCREMENT, \n  name VARCHAR(255) NOT NULL,\n  description VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Create a mongoose model for employees who have the fields 'name', 'age', 'gender', and 'salary'.", "input": "", "output": "const mongoose = require(\"mongoose\");\n\nconst EmployeeSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  gender: String,\n  salary: Number,\n});\n\nmodule.exports = mongoose.model(\"Employee\", EmployeeSchema);", "category": "Python"}, {"instruction": "Using the Jest JavaScript test framework, write a test that checks if a given number is divisible by 2.", "input": "n = 6", "output": "test('divisible by 2', () => {\n expect(n % 2).toBe(0);\n});", "category": "Python"}, {"instruction": "Convert the following list of numbers from decimal notation to binary notation.", "input": "[45, 11, 80, 12]", "output": "[101101, 1011, 1010000, 1100]", "category": "Python"}, {"instruction": "Given the following list of strings, return a new list with only the strings that contain the letter \"e\"", "input": "[\"hello\", \"world\", \"foo\", \"bar\", \"elephant\", \"cat\"]", "output": "[\"hello\", \"elephant\"]", "category": "Python"}, {"instruction": "Write a C++ program to determine the greatest common factor of two numbers.", "input": "14, 63", "output": "#include <iostream>\n \nint gcd(int a, int b) \n{ \n    if (b == 0) {\n        return a; \n    }\n    return gcd(b, a % b); \n} \n  \nint main() \n{ \n    int a = 14;\n    int b = 63;\n  \n    std::cout << \"GCD of \" << a << \" and \" << b << \" is \" << gcd(a, b) << std::endl; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Using SQL, write a query to fetch the names of all products with a price lower than $50.", "input": "Table: products\nColumns: id, name, price\nEntries:\n1, Produce A, $35\n2, Produce B, $45\n3, Produce C, $75", "output": "SELECT name\nFROM products\nWHERE price < 50;", "category": "Python"}, {"instruction": "Construct a regex pattern to match the following words.", "input": "words = [\"cat\", \"bat\", \"rat\"]", "output": "pattern = r\"(cat|bat|rat)\"", "category": "Python"}, {"instruction": "Complete the code to slice the list up to index 4.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7]", "output": "my_list = my_list[:4] # my_list is now [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Combine the two objects with the same property value.", "input": "obj1 = {\n  \"name\": \"John\",\n  \"age\": 22\n}\n\nobj2 = {\n  \"name\": \"John\",\n  \"location\": \"New York\"\n}", "output": "obj3 = {\n  \"name\": \"John\",\n  \"age\": 22,\n  \"location\": \"New York\"\n}", "category": "Python"}, {"instruction": "Insert the missing symbol which will make the code syntactically correct.", "input": "if x 0", "output": "if x == 0", "category": "Python"}, {"instruction": "Below is a simple function, improve it for efficiency and readability:", "input": "def get_sum(x, y):\n    m = max(x, y)\n    n = min(x, y)\n    z = 0\n    while n <= m:\n        z += n\n        n += 1\n    return z", "output": "def get_sum(x, y):\n    # get the lower bound and upper bound\n    lower, upper = min(x, y), max(x, y)\n\n    # apply the arithmetic series formula\n    return (upper * (upper + 1) - lower * (lower - 1)) // 2", "category": "Python"}, {"instruction": "What is the value of variable \"a\" at the end of the code?", "input": "a = 0\nfor i in range (10):\n    a += i", "output": "45", "category": "Python"}, {"instruction": "Write a code snippet in Python to generate a random float with up to 4 decimal places.", "input": "", "output": "import random\ndef random_float(a,b):\n  return round(random.uniform(a,b), 4)", "category": "Python"}, {"instruction": "Construct a loop in JavaScript that prints out each item in an array.", "input": "let arr = [1,2,3,4,5]", "output": "for (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Create a function using JavaScript to generate a random string of up to 10 characters in length.", "input": "", "output": "function randomString(length) {\n  let result           = '';\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for ( let i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Re-write the code below in Java to reverse the first string while preserving the order of the elements in the other strings.", "input": "arr = [string1, string2, string3]", "output": "String[] arr = {\"string1\", \"string2\", \"string3\"}; \n \nString temp = arr[0]; \narr[0] = new StringBuilder(temp).reverse().toString(); \n \nSystem.out.println(Arrays.toString(arr));", "category": "Python"}, {"instruction": "Sort the following array of objects based on the 'name' key in descending order.", "input": "arr = [ \n  { name: \u2018Bill\u2019, age: 25 }, \n  { name: \u2018Bob\u2019, age: 21 },\n  { name: \u2018Adam\u2019, age: 20 } \n]", "output": "arr.sort((a, b) => (a.name < b.name) ? 1 : -1);", "category": "Python"}, {"instruction": "Write a SQL query to select all books with a title starting with \u201cThe\u201d from the database.", "input": "Table: books\nColumns: id, title, year\nEntries\n1, \u2018The Millionaire Network\u2019, 2020\n2, \u2018Web Development for Dummies\u2019, 2020\n3, \u2018The Network for Beginners\u2019, 2021", "output": "SELECT * \nFROM books \nWHERE title LIKE \u2018The%\u2019;", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all customers who bought a laptop from a store.", "input": "TableName: Customers\n\nColumns:\nCustomerId INT \nName VARCHAR(50) \nPurchaseItem VARCHAR(20)\n\nTableName: Purchases\n\nColumns:\nPurchaseId INT \nCustomerId INT \nPurchaseItem VARCHAR(20)", "output": "SELECT c.Name\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerId = p.CustomerId\nWHERE p.PurchaseItem = 'laptop';", "category": "Python"}, {"instruction": "Write a SQL query to count the number of unique customers who purchased an item in a given month.", "input": "Table name: \"Orders\"", "output": "SELECT COUNT(DISTINCT customer_id)\nFROM Orders\nWHERE MONTH(order_date) = <month_number>;", "category": "Python"}, {"instruction": "Create a function in JavaScript to concatenate two strings without using the concat() method.", "input": "", "output": "function concat_str(str1, str2) {\n    let result = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        result += str1[i];\n    }\n    for (let j = 0; j < str2.length; j++) {\n        result += str2[j];\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Design an SQL query to find all the records where the salary is between 10000 and 20000 in the 'employees' table.", "input": "", "output": "SELECT * \nFROM employees \nWHERE salary BETWEEN 10000 AND 20000;", "category": "Python"}, {"instruction": "Write an algorithm in Python to count how many words a given string contains.", "input": "", "output": "def count_words(string):\n\twords = string.split()\n\treturn len(words)", "category": "Python"}, {"instruction": "Create a function in JavaScript that removes all vowels from a string.", "input": "", "output": "function removeVowels(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if ((str[i] !== 'a') && (str[i] !== 'e') && (str[i] !== 'i') && (str[i] !== 'o') && (str[i] !== 'u')) {\n      result += str[i];\n    }\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Write a piece of code in C++ to write \"Hello World\" to the console.", "input": "", "output": "#include <iostream> \nint main() \n{ \n    std::cout << \"Hello World!\"; \n    return 0; \n}", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list.", "input": "s=[1,2,3,4]", "output": "def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 <len(s):\n            result.append(x * 3)\n    return result", "category": "Python"}, {"instruction": "Implement a Java program to search the title of books in a library.", "input": "", "output": "public class LibrarySearch {\n\n    private ArrayList<String> titles;\n\n    public LibrarySearch() {\n        titles = new ArrayList<String>();\n    }\n    \n    public boolean searchTitle(String title) {\n        for (int i = 0; i < titles.size(); i++) {\n            String titleInList = titles.get(i);\n            if (title.equals(titleInList)) {\n                return true;\n            }\n        }\n       \n        return false;\n    }\n\n}", "category": "Python"}, {"instruction": "Design a procedure in SQL to get maximum salary from the 'employees' table.", "input": "", "output": "SELECT MAX(salary) \nFROM employees;", "category": "Python"}, {"instruction": "Create a script that prints the prime numbers up to a given integer n.", "input": "", "output": "def printPrimesUpTo_n(n):\n\n    while n > 1:\n        if not (n % 2 and n > 2):\n            flag = False\n            for i in range(2, int(n**0.5) +1):\n                if not n % i:\n                    flag = True\n                    break\n            if not flag:\n                print(n)\n        n -= 1", "category": "Python"}, {"instruction": "Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.", "input": "list_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]", "output": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list", "category": "Python"}, {"instruction": "Construct a regex expression to identify all numbers within a given string.", "input": "", "output": "\\d+", "category": "Python"}, {"instruction": "Create a SQL query to count all buyers from a country.", "input": "TableName: Customers\n\nColumns: \nCustomerID INT \nName VARCHAR(40) \nCountry VARCHAR(20)\n\nTableName: Purchases\n\nColumns:\nPurchaseID INT \nCustomerID INT", "output": "SELECT COUNT(*)\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerID = p.CustomerID\nWHERE c.Country = 'CountryName';", "category": "Python"}, {"instruction": "Design a logic in Rust to check if an entered integer is a prime number or not.", "input": "", "output": "fn is_prime(number: i32) -> bool {\n    if number == 0 || number == 1 {\n        return false\n    }\n    for i in 2..(number/2) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}", "category": "Python"}, {"instruction": "Write an algorithm in pseudocode to convert a temperature given in Celsius to its equivalent value in Fahrenheit.", "input": "", "output": "// Algorithm to convert Celsius to Fahrenheit\n\n// Input: numeric value in Celsius (c)\n// Output: numeric value in Fahrenheit (f)\n\n// Step 1: Multiply c by 9\n// Step 2: Divide the result 9 by 5\n// Step 3: Add 32 to the result\n// Step 4: Output f\n\nf = ( 9 / 5 ) * c + 32", "category": "Python"}, {"instruction": "Create a regex expression to extract all words that contain 3 consonants in a row.", "input": "", "output": "[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{3}[a-zA-Z]*", "category": "Python"}, {"instruction": "Create a function in Java that takes an integer n and prints the first n Fibonacci numbers.", "input": "", "output": "public void printFibonacci(int n) {\n\tint a = 0, b = 1, c;\n \n\tif (n == 0)\n\t\treturn;\n \n\tfor (int i = 1; i <= n; i++) {\n\t\tc = a + b;\n\t\tSystem.out.print(a + \" \");\n\t\ta = b;\n\t\tb = c;\n\t}\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Explain the differences between Stacks and Queues in computer science.", "input": "", "output": "Stacks are data structures that operate in a Last In First Out (LIFO) order, while Queues are data structures that operate in a First In First Out (FIFO) order. In a stack, items can only be added or removed from the top, while in a queue, items can be added at the front and removed from the rear. Additionally, stack elements have direct access to the top element, while queue elements are only able to access the front element.", "category": "Python"}, {"instruction": "Create a program to replace a given string with new text.", "input": "Old Text: \"Hello World\" \nNew Text: \"Hello Universe\"", "output": "public static String replaceText(String old, String newText) {\n  return old.replace(old, newText);\n}", "category": "Python"}, {"instruction": "Suggest the most appropriate approach to train a neural network model with a large dataset.", "input": "", "output": "Using mini-batch gradient descent.", "category": "Python"}, {"instruction": "Suggest the best way to implement an AI system for user authentication.", "input": "", "output": "Using a combination of facial recognition and voice recognition.", "category": "Python"}, {"instruction": "Write the SQL query to delete all tables from a given database.", "input": "database: testdb", "output": "DROP DATABASE testdb;", "category": "Python"}, {"instruction": "Select the most suitable approach for compressing a given list of strings.", "input": "", "output": "Using Huffman Coding.", "category": "Python"}, {"instruction": "Generate a code snippet to sort the students alphabetically by their last name in the following list?", "input": "students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]", "output": "students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]\n\nstudents.sort(key= lambda x: x[1])\n\nprint(students)", "category": "Python"}, {"instruction": "Subtract two matrices named A and B and store the result in matrix C?", "input": "A = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n  \nB = [[10, 11, 12],\n     [13, 14, 15],\n     [16, 17, 18]]", "output": "import numpy as np\n \nA = np.array([[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]])\n \nB = np.array([[10, 11, 12],\n              [13, 14, 15],\n              [16, 17, 18]])\n \nC = A - B\n\nprint(C)", "category": "Python"}, {"instruction": "Generate a code snippet to print out the top 3 highest numbers from an array A.", "input": "A = [9, 4, 18, 24, 7, 22, 11]", "output": "A = [9, 4, 18, 24, 7, 22, 11]\n \nA.sort(reverse=True)\n \ntop_3 = A[:3]\n\nprint(top_3)", "category": "Python"}, {"instruction": "Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.", "input": "A = [1,2,3]\nB = [4,5,6]", "output": "import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)", "category": "Python"}, {"instruction": "Edit the following code snippet to make it calculate the median instead of the average?", "input": "x = [1,2 ,3, 4, 5]", "output": "x = [1,2 ,3, 4, 5]\n\nimport statistics\n\nmedian = statistics.median(x)\nprint(median)", "category": "Python"}, {"instruction": "Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe?", "input": "dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "output": "import pandas as pd\n  \ndataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])\n \ndataframe['avg'] = dataframe.mean(axis=1)\n\nprint(dataframe)", "category": "Python"}, {"instruction": "Write a code snippet to count the occurrence of number 4 in an array called arr.", "input": "arr = [1, 4, 2, 4, 5]", "output": "arr = [1, 4, 2, 4, 5]\n\ncount = 0\nfor num in arr:\n    if num == 4:\n        count += 1\n\nprint(count)", "category": "Python"}, {"instruction": "Generate an appropriate python code snippet to capitalize all elements of an array called A.", "input": "A = ['welcome', 'to', 'my', 'website']", "output": "A = ['welcome', 'to', 'my', 'website']\n\nA = [x.capitalize() for x in A]\n\nprint(A)", "category": "Python"}, {"instruction": "Add the following lines after the 2nd line in the given java program", "input": "public class Calculator {\n    public static void main(String args[]) {\n        int a = 10;\n        int b = 20;\n\nAdd the following lines\nint c = a + b;\nSystem.out.println(\"Sum : \"+c);", "output": "public class Calculator {\n    public static void main(String args[]) {\n        int a = 10;\n        int b = 20;\n        int c = a + b;\n        System.out.println(\"Sum : \"+c);\n    }\n}", "category": "Python"}, {"instruction": "Generate a 5-dimensional array using the numpy library", "input": "", "output": "import numpy as np\n\narr = np.zeros((5,5,5,5,5))", "category": "Python"}, {"instruction": "Edit the given code to fix the bug", "input": "def calculate_tax(price):\ntax_rate = 0.20\ntotal = price + (price * tax_rate)\nreturn total", "output": "def calculate_tax(price):\n    tax_rate = 0.20\n    total = price + (price * tax_rate)\n    return round(total, 2)", "category": "Python"}, {"instruction": "Suggest a way to edit the following text data using NLP techniques", "input": "text = \"This is an exmaple\"", "output": "Using NLP techniques, the text can be edited in various ways such as lemmatisation, stemming and tokenisation. For example, the text can be tokenized and lemmatized so that the words \"example\" and \"exmaple\" are both converted to the root word \"example\".", "category": "Python"}, {"instruction": "Write a Python program to exchange the values of two different variables.", "input": "x = 10 \ny = 20", "output": "x, y = y, x", "category": "Python"}, {"instruction": "Select the best approach to process large amount of data in parallel.", "input": "", "output": "Using MapReduce.", "category": "Python"}, {"instruction": "Identify the most suitable language to create  a web application.", "input": "", "output": "JavaScript.", "category": "Python"}, {"instruction": "Generate a Python dictionary that contains student information.", "input": "Name: John; Age: 22; Grade: A;", "output": "{\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}", "category": "Python"}, {"instruction": "Debug the following PHP code which tries to connect to a remote host.", "input": "$host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n$conn = new mysql_connect($host,$user,$password);\n\nif(!$conn) \n  die(\"Unable to connect!\");", "output": "$host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n// Connecting, selecting database\n$conn = mysql_connect($host, $user, $password) or die('Could not connect: ' . mysql_error());", "category": "Python"}, {"instruction": "Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included).", "input": "", "output": "result = []\nfor i in range(1500, 2701):\n  if i % 5 == 0 and i % 7 != 0:\n    result.append(i)\n\nprint(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]", "category": "Python"}, {"instruction": "Generate a timestamp based on the current date.", "input": "", "output": "import time\n\ntimestamp = int(time.time())\nprint(timestamp) # 1598059584", "category": "Python"}, {"instruction": "How does the break statement work in a for loop?", "input": "", "output": "The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop.", "category": "Python"}, {"instruction": "Modify the following C++ code to capitalize the uppercase letters in a given string.", "input": "#include <iostream> \n#include <string> \n\nint main() \n{ \n    std::string str = \"hello world\"; \n    std::cout << str; \n\nreturn 0; \n}", "output": "#include <iostream> \n#include <string> \n#include <algorithm>\n\nint main() \n{ \n    std::string str = \"hello world\"; \n    //Convert to uppercase letters\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper); \n        std::cout << str;\n\nreturn 0; \n}", "category": "Python"}, {"instruction": "Sort the following array in descending order using JavaScript:[\"cat\", \"dog\", \"fish\", \"elephant\"].", "input": "", "output": "my_arr = [\"cat\", \"dog\", \"fish\", \"elephant\"];\nmy_arr.sort().reverse();\nconsole.log(my_arr); //prints [\"elephant\", \"fish\", \"dog\", \"cat\"]", "category": "Python"}, {"instruction": "Implement a function to solve a given equation.", "input": "4x + 2y = 32", "output": "def solve_equation(x, y):\n    A = 4\n    B = 2\n    C = 32\n    \n    y = (C - A*x)/B\n    return y", "category": "Python"}, {"instruction": "Build a function in Python that takes a string as the input and prints each letter of the string on a separate line.", "input": "", "output": "def print_letters(string): \n    for letter in string: \n        print(letter)", "category": "Python"}, {"instruction": "Create a dictionary in Python mapping the following characters to numbers: A = 1, B = 2, C = 3", "input": "", "output": "my_dict = { \n    'A': 1, \n    'B': 2, \n    'C': 3\n}", "category": "Python"}, {"instruction": "Determine the fraction of numbers in this list that are multiples of 3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].", "input": "", "output": "fraction = 3/10 = 0.3", "category": "Python"}, {"instruction": "Modify the following SQL statement to select only the rows with prices greater than 100.", "input": "SELECT * FROM products;", "output": "SELECT * \nFROM products \nWHERE price > 100;", "category": "Python"}, {"instruction": "Create a random matrix using NumPy where the elements have 2 decimal places.", "input": "", "output": "import numpy as np \n\n# Create a 2\u00d72 matrix \nrandom_matrix = np.random.rand(2,2) \n\n# Round to two decimal places \nnp.around(random_matrix, decimals=2)", "category": "Python"}, {"instruction": "Generate an array in JavaScript with two elements of type boolean.", "input": "", "output": "let booleanArray = [true, false];", "category": "Python"}, {"instruction": "Create an array in Python with 6 elements and print the last three elements.", "input": "", "output": "my_array = [1, 2, 3, 4, 5, 6] \n#Print the last three elements\nprint (my_array[-3:]) \n#Output:[4, 5, 6]", "category": "Python"}, {"instruction": "Create a class in Java called Student that stores four pieces of data: name, id, major, and gpa.", "input": "", "output": "class Student { \n  \n    // data members \n    String name; \n    int id; \n    String major; \n    double gpa; \n  \n    // constructors \n    Student(String name, int id, String major, double gpa) {  \n        this.name = name; \n        this.id = id; \n        this.major = major; \n        this.gpa = gpa; \n    } \n  \n  \n    // method 1 \n    public String getName() \n    { \n        return this.name; \n    } \n  \n    // method 2 \n    public int getId() \n    { \n        return this.id; \n    } \n  \n    // method 3 \n    public String getMajor() \n    { \n        return this.major; \n    } \n  \n    // method 4 \n    public double getGPA() \n    { \n        return this.gpa; \n    } \n  \n    // method 5 \n    public void setName(String name) \n    { \n        this.name = name; \n    } \n  \n    // method 6 \n    public void setId(int id) \n    { \n        this.id = id; \n    } \n  \n    // method 7 \n    public void setMajor(String major) \n    { \n        this.major = major; \n    } \n  \n    // method 8 \n    public void setGPA(int gpa) \n    { \n        this.gpa = gpa; \n    } \n}", "category": "Python"}, {"instruction": "Classify the following sentence as positive, negative, or neutral: \"I am so happy to be here.\"", "input": "", "output": "Positive", "category": "Python"}, {"instruction": "Create an HTML table", "input": "", "output": "<table>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Hobby</td>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>28</td>\n    <td>Travelling</td>\n  </tr>\n  <tr>\n    <td>Amanda</td>\n    <td>27</td>\n    <td>Reading</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Print the numbers in a Fibonacci series with a loop.", "input": "", "output": "# Fibonacci Series using a loop\n# the first two numbers of the Fibonacci series is 0 and 1\n\na = 0\nb = 1\n\nprint(a)\nprint(b)\n\nfor i in range(10):\n    c = a + b\n    a = b\n    b = c\n    print(c)", "category": "Python"}, {"instruction": "Write a Bash script to run multiple commands", "input": "", "output": "#!/bin/bash\n# A bash script which will run all the commands given below\n\n# command 1\ncommand 1\n\n# command 2\ncommand 2\n\n# command 3\ncommand 3\n\n# command 4\ncommand 4\n\netc...", "category": "Python"}, {"instruction": "Change the following string to lowercase using C++.", "input": "\"THIS STRING WILL BE LOWERCASED\"", "output": "#include <bits/stdc++.h>\nusing namespace std;\n \nint main()\n{   \n    string s = \"THIS STRING WILL BE LOWERCASED\";\n    transform(s.begin(), s.end(), s.begin(),\n              [](unsigned char c) { return std::tolower(c); });\n    cout << s;\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.", "input": "p = 1000\nr = 0.10\nn = 3", "output": "def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\n\nprint(calc_comp_int(p, r, n))", "category": "Python"}, {"instruction": "Write a sample program that performs text classification", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load dataset\ndataframe = pd.read_csv('text_classification_data.csv')\n\n# convert to vectors\nvectorizer = TfidfVectorizer()\nvectors = vectorizer.fit_transform(dataframe['text'])\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)\n\n# create model\nmodel = LogisticRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Compute the cross-entropy loss of a given classification problem", "input": "Ground truth: [0, 0, 0, 1, 1]\nPredicted: [0, 0, 0, 0.6, 0.8]", "output": "-1.2885609570312778", "category": "Python"}, {"instruction": "Create a function in R that calculates the mean of a given dataset", "input": "[4.6, 8.9, 5.4, 7.2]", "output": "mean <- function(data) {\n  sum = 0\n  for (i in data) {\n    sum = sum + i\n  }\n  mean = sum / length(data)\n  return(mean)\n}", "category": "Python"}, {"instruction": "Construct a SQL query to get the name and age of the youngest student", "input": "", "output": "SELECT name, age FROM students ORDER BY age asc LIMIT 1;", "category": "Python"}, {"instruction": "Construct an algorithm in pseudocode to sort a given array of numbers.", "input": "[3, 1, 4, 5, 7, 2]", "output": "sort(array A[]):\n  for i = 1 to n-1\n  begin\n    min = i\n    for j = (i + 1) to n\n      if A[j] < A[min]\n        min = j\n    swap the value at index min and index i\n  end\n  return A[]", "category": "Python"}, {"instruction": "Suggest a more descriptive name for the following method.", "input": "def get_data():", "output": "def retrieve_data_from_database():", "category": "Python"}, {"instruction": "Compare the performance of two different neural network architectures.", "input": "Two convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset.", "output": "# evaluate the performance on the test dataset\nfrom sklearn.metrics import accuracy_score\n\n# load the test dataset\nX_test, y_test = load_dataset()\n\n# evaluate each model\ny_pred_1 = model_1.predict(X_test)\nacc_1 = accuracy_score(y_test, y_pred_1)\n\ny_pred_2 = model_2.predict(X_test)\nacc_2 = accuracy_score(y_test, y_pred_2)\n\n# compare the performance\nif acc_1 > acc_2:\n    print('Model 1 has better performance than Model 2.')\nelif acc_2 > acc_1:\n    print('Model 2 has better performance than Model 1.')\nelse:\n    print('The performances of the two models are equal.')", "category": "Python"}, {"instruction": "Implement a stack to store and retrieve items in last-in first-out order.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)", "category": "Python"}, {"instruction": "Implement a basic calculator that takes an equation and outputs the result.", "input": "\"3+3\"", "output": "def calculator(equation):\n    result = eval(equation)\n    return result\n\nprint(calculator(\"3+3\"))\n# Output: 6", "category": "Python"}, {"instruction": "You are given a string, output a new string with its vowels removed.", "input": "\"Hello World\"", "output": "def removeVowels(s):\n    vowels = 'aeiouAEIOU'\n    s_without_vowel = ''\n    for c in s:\n        if c not in vowels:\n            s_without_vowel += c\n    return s_without_vowel\n\nprint(removeVowels(\"Hello World\"))\n# Output: Hll Wld", "category": "Python"}, {"instruction": "Use the given data to print out the average of the numbers.", "input": "[1, 7, 8, 10]", "output": "def calculateAverage(nums):\n    average = 0\n    for num in nums:\n        average += num\n    return average / len(nums)\n\nprint(calculateAverage([1,7,8,10]))\n# Output: 6.5", "category": "Python"}, {"instruction": "Correct this function so that it returns a correct multiplication table.", "input": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * row)\n        print(output)", "output": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * column)\n        print(output)", "category": "Python"}, {"instruction": "You need to generate a random four-digit number and return it as an integer.", "input": "", "output": "import random\n\ndef generateRandomNumber():\n    return random.randint(1000,9999)", "category": "Python"}, {"instruction": "What are the benefits of using React for web development?", "input": "", "output": "The benefits of using React for web development include increased efficiency, increased modularity, and easier maintenance due to its component-based architecture. React allows for quick loading times and scalability. React also allows developers to create reusable UI components. Finally, React\u2019s large community makes debugging and finding resources for development easier.", "category": "Python"}, {"instruction": "Construct a machine learning model in Python for the given dataset.", "input": "The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.", "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Code a function in JavaScript to find the area of a triangle given the lengths of its three sides.", "input": "", "output": "function calculateArea(a, b, c) {\n    let s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}", "category": "Python"}, {"instruction": "Given a list of numbers and a search value, check if the value is present in the list and return a boolean value.", "input": "nums = [2, 4, 6, 8, 10]\nvalue = 6", "output": "def search_list(nums, value):\n    for num in nums:\n        if num == value:\n            return True\n    return False\n\nnums = [2, 4, 6, 8, 10]\nvalue = 6\n\nresult = search_list(nums, value)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Create a class that can be used to generate random numbers between a given range.", "input": "", "output": "class RandomNumberGenerator:\n    def __init__(self, min_num, max_num):\n        self.min_num = min_num\n        self.max_num = max_num\n    \n    def get_random_number(self):\n        return random.randint(self.min_num, self.max_num)", "category": "Python"}, {"instruction": "Sort the given list using the quicksort algorithm.", "input": "my_list = [8, 5, 3, 9, 6, 1]", "output": "def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nquick_sort(my_list)", "category": "Python"}, {"instruction": "Suggest a linear search algorithm for the following task.", "input": "Given a list of numbers, search for the number 6 in the list and return its position.", "output": "The best linear search algorithm to use for this task is the linear search algorithm. In the linear search algorithm, the list is looped through and each element is compared to the target. If the item is found, its position is returned.", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort a list in ascending order.", "input": "my_list = [3, 8, 5, 4, 1, 9, 7]", "output": "The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted.", "category": "Python"}, {"instruction": "Correct any errors in the following code.", "input": "def get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg", "output": "def get_student_avg (studentss):\n    for student in studentss:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum // len(student['grades'])\n        student['avg']= avg", "category": "Python"}, {"instruction": "Reorganize the following code in a more efficient way using Python.", "input": "def get_student_avg(students):\n    for student in students:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum / len(student['grades'])\n        student['avg'] = avg", "output": "def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) / len(student['grades'])", "category": "Python"}, {"instruction": "Construct a C# class to output the prime numbers up to n.", "input": "", "output": "class PrimeNumber\n{\n    public static void Main()\n    {\n        Console.Write(\"Enter a number: \");\n        int n = int.Parse(Console.ReadLine());\n \n        for (int i = 2; i <= n; i++)\n        {\n            if (CheckPrime(i))\n            {\n                Console.Write(i + \" \");\n            }\n        }\n        Console.WriteLine();\n    }\n \n    public static bool CheckPrime(int numberToCheck)\n    {\n        int boundary = (int)Math.Floor(Math.Sqrt(numberToCheck));\n \n        if (numberToCheck == 1) return false;\n        if (numberToCheck == 2) return true;\n \n        for (int i = 2; i <= boundary; ++i)\n        {\n            if (numberToCheck % i == 0) return false;\n        }\n \n        return true;\n    }\n}", "category": "Python"}, {"instruction": "Generate a Perl script to check for palindromes.", "input": "", "output": "sub check_palindrome {\n  my ($str) = @_;\n  my $reverse = reverse $str;\n  if($str eq $reverse){\n    return 1;  \n  }\n  else{\n    return 0;\n  }\n}", "category": "Python"}, {"instruction": "Design a function to calculate the distance between two points in a 3-D space.", "input": "p1 = (3, 2, 1)\np2 = (5, 4, 6)", "output": "def get_distance(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\np1 = (3, 2, 1)\np2 = (5, 4, 6)\ndistance = get_distance(p1, p2)\nprint(distance) # Output: 5.196152422706632", "category": "Python"}, {"instruction": "Create CSS code to design an expandable menu.", "input": "", "output": ".menu > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  .menu > ul > li {\n    float: left;\n  }\n\n  .menu li {\n    position: relative;\n  }\n\n  .menu > ul > li > ul {\n    position: absolute;\n    display: none;\n  }\n\n  .menu > ul > li:hover > ul {\n    display: block;\n  }", "category": "Python"}, {"instruction": "Construct a Node program to merge two arrays.", "input": "", "output": "const mergeArray = (arr1, arr2) => {\n  return [...arr1, ...arr2];\n};", "category": "Python"}, {"instruction": "Construct a Java class to execute a binary search.", "input": "public class BinarySearch {\n\n}", "output": "public class BinarySearch { \n  \n    int binarySearch(int arr[], int l, int r, int x) { \n        if (r >= l) { \n            int mid = l + (r - l) / 2; \n  \n            if (arr[mid] == x) \n                return mid; \n  \n            if (arr[mid] > x) \n                return binarySearch(arr, l, mid - 1, x); \n  \n            return binarySearch(arr, mid + 1, r, x); \n        } \n        return -1; \n    } \n}", "category": "Python"}, {"instruction": "Generate HTML code to display an interactive button.", "input": "", "output": "<button onclick=\"alert('Button was clicked!');\">Click Me!</button>", "category": "Python"}, {"instruction": "Create SQL code to query demographic data from a database.", "input": "SELECT Name, Age, Gender, Location\nFROM User_table", "output": "SELECT Name, Age, Gender, Location\nFROM User_table\nWHERE Age > 18\nAND Gender = 'Female'", "category": "Python"}, {"instruction": "Compile a C program to check for memory leaks.", "input": "#include <stdio.h>\n\nint main() {\n  int* a = (int*)malloc(sizeof(int));\n  return 0;\n}", "output": "g++ -g -o program program.c -lm -lstdc++ && valgrind --leak-check=yes ./program", "category": "Python"}, {"instruction": "Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return (2*self.length) + (2*self.width)\n    \n    def diagonal(self):\n        return (self.length**2 + self.width**2)**0.5", "category": "Python"}, {"instruction": "Write a type annotation for a function that takes an integer as an input and returns a boolean.", "input": "", "output": "def func(num: int) -> bool:\n    ...", "category": "Python"}, {"instruction": "Write an R code to identify DNA motifs of a given gene sequence.", "input": "sequence <- c(\"AAATACTAGCTGAGTTTGTACGTATGGGCC\")", "output": "motifs <- findMotifs(sequence)\nprint(motifs)", "category": "Python"}, {"instruction": "Construct a SQL query to select all records from a table called \u201ccustomers\u201d, and adjust the order based on the column \u201cfirst_name\u201d in descending order.", "input": "", "output": "SELECT * FROM customers ORDER BY first_name DESC;", "category": "Python"}, {"instruction": "Edit the given SQL query to return the number of employees from each team.", "input": "SELECT * FROM Employees", "output": "SELECT team, COUNT(*) AS total_count\nFROM Employees\nGROUP BY team", "category": "Python"}, {"instruction": "Design an algorithm to detect whether two given strings are permutations of each other.", "input": "", "output": "Algorithm:\n\n// Take two strings, str1 and str2\n\n// Step 1:\n// Start\n\n// Step 2:\n// Run a loop over the length of the strings\n\n// Step 3:\n// For each character in str1, check if it also exists in str2. If it does, continue to next character. \n\n// Step 4:\n// If a character does not have a corresponding character in the other string, return False. \n\n// Step 5:\n// If all the characters are found, return True. \n\n// Step 6:\n// Stop", "category": "Python"}, {"instruction": "Create a function in JavaScript which can receive and store user inputs.", "input": "", "output": "function storeInput() {\n  let inputs = [];\n  inputs.push(prompt(\"Please input your name: \"));\n  inputs.push(prompt(\"Please input your age: \"));\n  inputs.push(prompt(\"Please input your email address: \"));\n  \n  return inputs;\n}", "category": "Python"}, {"instruction": "Create a function in Python for sending an email using the SMTP protocol.", "input": "", "output": "import smtplib\n\ndef send_email(sender, recipient, message): \n  smtp_server = smtplib.SMTP(\"smtp.example.com\")\n  smtp_server.sendmail(sender, recipient, message)\n  smtp_server.quit()", "category": "Python"}, {"instruction": "Create two classes in Python which inherits from a parent class called **Shape**.", "input": "", "output": "class Shape(object):\n  pass\n  \nclass Square(Shape):\n  def __init__(self, side):\n    self.side = side\n    \nclass Circle(Shape):\n  def __init__(self, radius):\n    self.radius = radius", "category": "Python"}, {"instruction": "Generate XML tags for the given list of strings.", "input": "list = [\"string1\",\"string2\",\"string3\"]", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <string1></string1>\n  <string2></string2>\n  <string3></string3>\n</root>", "category": "Python"}, {"instruction": "Write a CSS code to center align the given text.", "input": "", "output": "p {\n  text-align: center;\n}", "category": "Python"}, {"instruction": "Create a function in JavaScript for validating a given a string for all required special characters.", "input": "ExampleString: \"This string should contain at least 1 digit, one special character and one capital letter.\"", "output": "function checkRegex(string) {\n    if (/[A-Z]/.test(string) && /[!@#$%^&*]/.test(string) && /[0-9]/.test(string)) { \n        return true;\n    } else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols.", "input": "", "output": "import string\nimport random\n\ndef random_string(stringLength=10):\n  lettersAndDigits = string.ascii_letters + string.digits + string.punctuation\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Create an object-oriented program in Java which can display the current date and time.", "input": "", "output": "import java.util.Date;\n\npublic class DateTime {\n   public static void main(String args[]) {\n      Date date = new Date();\n      System.out.println(\"Current date and time is: \" + date);\n   }\n}", "category": "Python"}, {"instruction": "Create an array of random integers between 1 to 10 using the function **np.random.randint**.", "input": "", "output": "# Create array of random integers between 1 to 10\nimport numpy as np\nrandom_integers = np.random.randint(low=1, high=10, size=10)", "category": "Python"}, {"instruction": "Create a database table called 'Employees' with fields such as employee_id, name, age, email, etc.", "input": "", "output": "CREATE TABLE Employees (\n  employee_id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  age INT NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  PRIMARY KEY (employee_id)\n);", "category": "Python"}, {"instruction": "Construct a function that can generate a unique identifier.", "input": "", "output": "function generateId() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}", "category": "Python"}, {"instruction": "Evaluate the following JSON data using a Javascript function.", "input": "var data = {\n    \"name\": \"John Doe\",\n    \"age\": 28,\n    \"hobbies\": [\"tennis\", \"football\", \"golf\"]\n}", "output": "function evaluateData(data) {\n    console.log(`Name: ${data.name}`);\n    console.log(`Age: ${data.age}`);\n    console.log(`Hobbies: ${data.hobbies.join(', ')}`);\n}\n\nevaluateData(data);\n// Output:\n// Name: John Doe\n// Age: 28\n// Hobbies: tennis, football, golf", "category": "Python"}, {"instruction": "Suggest a way to find the number of occurrences of a time value in a given array.", "input": "array = [10:00, 11:30, 10:00, 8:30, 10:00]", "output": "We can use the reduce method to count the number of occurrences of a certain time value in the array.\n\nvar array = [10:00, 11:30, 10:00, 8:30, 10:00];\nvar desiredTime = '10:00';\n\nvar count = array.reduce((n, val) => {\n    return n + (val === desiredTime);\n}, 0);\n\nconsole.log(count); // output: 3", "category": "Python"}, {"instruction": "Suggest a SQL query to find the percentage of the total mark of a student.", "input": "student_id: 987\nstudent_marks: 40\ntotal_marks: 50", "output": "SELECT student_id, student_marks, total_marks, (student_marks/total_marks)*100 AS Percentage\nFROM table\nWHERE student_id = 987;", "category": "Python"}, {"instruction": "Create a python function that will convert a string to all uppercase.", "input": "", "output": "def toUpperCase(str):\n  return str.upper()", "category": "Python"}, {"instruction": "Create a database table to store student information such as id, name, gender etc.", "input": "", "output": "CREATE TABLE Students (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  gender CHAR(1) NOT NULL,\n  address VARCHAR(255),\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Find the number at the given index in an array.", "input": "array = [1,2,3,4,5], index = 3", "output": "def find_number(arr, index):\n  return arr[index]", "category": "Python"}, {"instruction": "Write a JavaScript program to find the sum of two numbers using a recursive function.", "input": "", "output": "// create a recursive function to find the sum of two numbers\nfunction addNums(num1, num2) {\n  // base case\n  if (num2 == 0) {\n    return num1;\n  }\n  // recursive case\n  else {\n    return addNums(++num1, --num2);\n  }\n}", "category": "Python"}, {"instruction": "Given the data structure below, write a function to print out all the elements in the array.", "input": "const arr = [1, 2, 3, 4, 5];", "output": "function printArray(arr){\n  for (let i = 0; i < arr.length; i++){\n    console.log(arr[i]);\n  }\n}\n\nprintArray(arr);", "category": "Python"}, {"instruction": "Loop through an array using JavaScript", "input": "const array = [2, 3, 5, 7, 11];", "output": "const array = [2, 3, 5, 7, 11];\nfor (let i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}", "category": "Python"}, {"instruction": "Identify and implement a sorting algorithm for the following array", "input": "int[] array = {23, 10, 4, 15, 66, 28, 11};", "output": "int[] array = {23, 10, 4, 15, 66, 28, 11}; \n \n// Insertion sort\nfor (int i = 1; i < array.length; i++) {\n    int key = array[i];\n    int j = i-1;\n \n    while (j >= 0 && array[j] > key) {\n        array[j + 1] = array[j];\n        j = j - 1;\n    }\n    array[j + 1] = key;\n}\n\nSystem.out.println(\"Sorted array: \");\nfor (int i = 0; i < array.length; i++) {\n    System.out.print(array[i] + \" \");\n}", "category": "Python"}, {"instruction": "Generate an HTML page to display text", "input": "The text to be displayed: \"Hello World\"", "output": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct and execute a SQL query to select fields from the following table", "input": "Table: student\nFields: firstname, lastname, email", "output": "SELECT firstname, lastname, email\nFROM student;", "category": "Python"}, {"instruction": "Create a JSON object to represent an address.", "input": "", "output": "{\n  \"houseNumber\": \"20\",\n  \"streetName\": \"Main Street\",\n  \"city\": \"Anytown\",\n  \"state\": \"AL\",\n  \"zip\": \"12345\"\n}", "category": "Python"}, {"instruction": "Create a Java function to take two integers as parameters and return their sum as a double.", "input": "", "output": "public static double sumIntegers(int a, int b){\n    return (double) (a + b);\n}", "category": "Python"}, {"instruction": "Name and describe a feature of the JavaScript Date object.", "input": "", "output": "One feature of the JavaScript Date object is the Get Full Year method, which returns the 4 digit year for the provided date. It allows you to retrieve the year from a date object without any ambiguity due to different calendar conventions. It can also be used when dealing with years outside of the Gregorian calendar.", "category": "Python"}, {"instruction": "Suggest a way to debug these lines of code.", "input": "// code\nint i = 0;\nwhile (i<10)\n{\n\ti++;\n\tSystem.out.println(\"Something is wrong!\");\n}", "output": "One way to debug these lines of code is to add print statements before and after the loop to print the value of \"i\" both before and after the loop. Then, inside the loop, you can print out the value of \"i\" just before the ``println`` statement and you can also print out the value of ``i`` after the loop is exited. This will help you see which iteration is causing the issues.", "category": "Python"}, {"instruction": "Implement the update function in Java for a queue data structure.", "input": "", "output": "public void update(int index, Object newElement) {\n    if(index < 0 || index >= size()) {\n      throw new NoSuchElementException();\n    }\n    Node node = head;\n    for(int i = 0; i < index; i++) {\n      node = node.next;\n    }\n    node.element = newElement;\n}", "category": "Python"}, {"instruction": "Create an if-elseif-else statement in JavaScript", "input": "", "output": "if (condition1) {\n    // code to execute if condition1 is true\n} else if (condition2) {\n    // code to execute if condition2 is true\n} else {\n    // code to execute if both condition1 and condition2 are false\n}", "category": "Python"}, {"instruction": "Create a JavaScript class that has three properties.", "input": "", "output": "class MyClass {\n  constructor(prop1, prop2, prop3) {\n    this.prop1 = prop1;\n    this.prop2 = prop2;\n    this.prop3 = prop3;\n  }\n}", "category": "Python"}, {"instruction": "Write HTML code that creates a table.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n  </tr>\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n  </tr>\n  <tr>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create an object in JavaScript and give it two properties and two methods.", "input": "", "output": "const myObject = {\n    prop1: \"value1\",\n    prop2: \"value2\",\n\n    method1 : function(){\n        // do something\n    },\n    method2: function(){\n        // do something else\n    }\n}", "category": "Python"}, {"instruction": "Explain the function of a variable in programming.", "input": "", "output": "In programming, a variable is a named storage location that can hold a value. Variables are used to store values that can be manipulated or referenced in a program. Variables can be used to hold numbers, text, or other types of data. They can also be used to store values or objects that are accessed or changed by a program. This allows a program to be dynamic and adaptable to ever-changing inputs and data.", "category": "Python"}, {"instruction": "Write CSS to give the title of a heading a font-size of 20px and a font-weight of 800.", "input": "", "output": "h1 {\n    font-size: 20px;\n    font-weight: 800;\n}", "category": "Python"}, {"instruction": "Implement a function that check if a number is prime.", "input": "", "output": "function isPrime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return num > 1;\n}", "category": "Python"}, {"instruction": "Write a function to calculate the power of two number (base^exp).", "input": "", "output": "function power(base, exp) {\n  if (exp == 0) return 1; \n  return base * power(base, exp-1)\n}\n\npower(5, 3);", "category": "Python"}, {"instruction": "Construct a JavaScript object with the following properties", "input": "gender: female\nname: Jane\nage: 22", "output": "let person = {\n    gender: 'female',\n    name: 'Jane',\n    age: 22\n};", "category": "Python"}, {"instruction": "Using JavaScript, make a function to calculate the area of a circle with a given radius.", "input": "4", "output": "function areaOfCircle (radius) {\n    return Math.PI * radius * radius;\n}", "category": "Python"}, {"instruction": "Use Python to write a code that displays a multiplication table of a given number.", "input": "8", "output": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(n, i, n*i))", "category": "Python"}, {"instruction": "Create an array and insert a new record at the beginning of the array in JavaScript.", "input": "", "output": "let array = [1, 2, 3];\narray.unshift(4);\n// Output: [4, 1, 2, 3]", "category": "Python"}, {"instruction": "Fill in the blank to generate a SHA-256 hash in JavaScript:", "input": "", "output": "const crypto = require('crypto');\nconst hash = crypto.createHash('sha256');", "category": "Python"}, {"instruction": "Create a function in R to get the last seven characters of a string.", "input": "", "output": "substr_last7 <- function(string) {\n  return (substr(string, nchar(string)-6, nchar(string)))\n}", "category": "Python"}, {"instruction": "Sort a given list of strings in ascending order by length in Python.", "input": "list1 = [\"cat\", \"apple\", \"dog\", \"banana\"]", "output": "list2 = sorted(list1, key=len)\nprint(list2) #['cat', 'dog', 'apple', 'banana']", "category": "Python"}, {"instruction": "Filter a given list of numbers in Python to find all the even numbers.", "input": "list1 = [3, 4, 5, 6, 7, 8, 9]", "output": "list2 = [number for number in list1 if number % 2 == 0]\nprint(list2) #[4, 6, 8]", "category": "Python"}, {"instruction": "Create a function in R which returns the number of rows in a dataframe.", "input": "", "output": "number_of_rows <- function(dataframe) {\n  return (nrow(dataframe))\n}", "category": "Python"}, {"instruction": "Compile a C++ program, called \"my_program\", with the following code.", "input": "#include <iostream> \n\nint main() \n{ \n   std::cout << \"Hello World!\"; \n   return 0; \n}", "output": "g++ -o my_program my_program.cpp", "category": "Python"}, {"instruction": "Write a SQL query for retrieving the address of the latest customer in the database.", "input": "", "output": "SELECT address FROM customers ORDER BY created_at DESC LIMIT 1;", "category": "Python"}, {"instruction": "Create a second level navigation menu using HTML and CSS.", "input": "", "output": "<nav>\n  <ul>\n    <li>Home</li>\n    <li>About Us \n      <ul>\n        <li>Our History</li>\n        <li>Mission Statement</li>\n        <li>FAQ</li>\n      </ul>\n    </li>\n    <li>Products</li>\n    <li>Services</li>\n    <li>Contact Us</li>\n  </ul>\n</nav>", "category": "Python"}, {"instruction": "Provide an example of a query to find all users whose age is 16 or over.", "input": "", "output": "SELECT * FROM Users\nWHERE age >= 16;", "category": "Python"}, {"instruction": "Generate a random probability distribution with mean 0 and standard deviation 1 in Python.", "input": "", "output": "import numpy as np\n\ndist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples", "category": "Python"}, {"instruction": "Write code in Java to calculate the median from an array of integers.", "input": "arr = [7, 22, 21, 19, 17, 24]", "output": "public double getMedian(int[] arr) { \n    Arrays.sort(arr); \n  \n    int len = arr.length; \n    double median = 0; \n  \n    if (len % 2 == 0) { \n        int a = arr[len / 2]; \n        int b = arr[(len / 2) - 1]; \n        median = (a + b) / 2.0; \n    } \n  \n    else { \n        median = arr[len / 2]; \n    } \n  \n    return median; \n}", "category": "Python"}, {"instruction": "Create an array containing 5 records of emplyee data, including name, age and city.", "input": "", "output": "let employeeData = [\n  {\n    \"name\": \"John\",\n    \"age\": 24,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28,\n    \"city\": \"London\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 32,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  },\n  {\n    \"name\": \"Greg\",\n    \"age\": 30,\n    \"city\": \"Paris\"\n  }\n]", "category": "Python"}, {"instruction": "Summarize the text into a few sentences.", "input": "The United Nations (UN) is an intergovernmental organization that aims to maintain international peace and security, develop friendly relations among nations, achieve international co-operation and be a centre for harmonizing the actions of nations. It is the largest, most familiar, most internationally represented and most powerful intergovernmental organization in the world.", "output": "The United Nations is a global intergovernmental organization that works to maintain peace and security, foster friendly relations between nations, and promote international cooperation. It is the world's largest and most internationally represented organization, and is capable of powerful action to promote global harmony.", "category": "Python"}, {"instruction": "Write an algorithm to find the longest sub string without repeating characters.", "input": "string = 'abcabcbb'", "output": "def length_longest_substring(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n    return max_length", "category": "Python"}, {"instruction": "Write a Java method to find the index of a given string in an array of strings.", "input": "", "output": "public int findIndexOfString(String[] array, String s) {\n    for (int i=0; i<array.length; i++) {\n        if(array[i].equals(s)) \n            return i;\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Create a class in Java and define two float variables and two float methods.", "input": "", "output": "public class FloatExample {\n    float var1, var2;\n\n    public void setVar1(float a) {\n        var1 = a;\n    }\n\n    public float getVar1() {\n        return var1;\n    }\n\n    public void setVar2(float b) {\n        var2 = b;\n    }\n\n    public float getVar2() {\n        return var2;\n    }\n}", "category": "Python"}, {"instruction": "Write a C program to print the numbers from 1 to 100, with the following conditions:\n\nif the number is divisible by 2, print \"fizz\"\nif the number is divisible by 3, print \"buzz\"\nif the number is divisible by both 2 and 3, print \"fizzbuzz\"", "input": "", "output": "#include <stdio.h> \n  \nint main(void) \n{ \n    int i; \n    for (i=1; i<=100; i++) \n    { \n        // number divisible by 3 and 5 both \n        if (i % 3 == 0 && i % 5 == 0) \n            printf(\"fizzbuzz\\n\"); \n  \n        // number divisible by 3 only \n        else if (i % 3 == 0)  \n            printf(\"fizz\\n\"); \n  \n        // number divisible by 5 only \n        else if (i % 5 == 0) \n            printf(\"buzz\\n\"); \n  \n        // number indivisible by both 3 and 5\n        else \n            printf(\"%d\\n\", i); \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a function in SQL to get the average salary of all engineers whose designation is \"Senior Software Engineer\".", "input": "", "output": "SELECT AVG(salary)\nFROM engineers \nWHERE designation = 'Senior Software Engineer';", "category": "Python"}, {"instruction": "Using Java, make a program that finds out the smallest common denominator between two numbers.", "input": "12 and 18", "output": "public static int getSmallestCommonDenominator(int a, int b){\n    int gcd = 1;          \n    int smallNumber = Math.min(a, b);\n    \n     for(int i = 1; i <= smallNumber; i++) \n    {\n        if(a % i == 0 && b % i == 0) \n            gcd = i;\n    } \n    int lcm = (a*b)/gcd; \n   \n    return lcm; \n}", "category": "Python"}, {"instruction": "Create a program in JavaScript that takes in a positive integer and returns the sum of its digits.", "input": "824", "output": "function sumDigits(num) {\n  let str = num.toString();\n  let result = 0;\n  for (let char of str) {\n    result += Number(char);\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Write an SQL query to retrieve the top 3 scores in a table that contains scores for all players.", "input": "", "output": "SELECT TOP 3 * FROM scores ORDER BY score DESC;", "category": "Python"}, {"instruction": "Using Java, create a class constructor for a 3D vector.", "input": "", "output": "class Vector3D {\n    double x; \n    double y;\n    double z;\n \n    Vector3D(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}", "category": "Python"}, {"instruction": "Define a function called find_sum that takes a list of numbers and adds them all together.", "input": "", "output": "def find_sum(seq): \n    s = 0 \n      \n    # iterate over the sequence \n    for i in seq: \n        s += i \n      \n    return s", "category": "Python"}, {"instruction": "Perform sentiment analysis on this text.", "input": "It was a wonderful experience staying at the hotel", "output": "The sentiment of the text is positive.", "category": "Python"}, {"instruction": "Generate an array with all the numbers from 1 to 100", "input": "", "output": "nums = [i for i in range(1,101)]", "category": "Python"}, {"instruction": "Create a function in JavaScript to replace all instances of a specified word in a string with \"peanut butter\".", "input": "String: \"This is an example of the word example.\"\nWord to replace: \"example\"", "output": "function replaceWord (str, wordToReplace) {\n    return str.replace(wordToReplace, \"peanut butter\");\n}", "category": "Python"}, {"instruction": "Retrieve the value of an item in a given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_item_val(arr, idx):\n\t\"\"\"Retrieves the value of an item from the given array at a given index.\"\"\"\n\tif idx < 0 or idx > len(arr):\n\t\treturn None\n\treturn arr[idx]", "category": "Python"}, {"instruction": "Use the following array to generate an HTML table.", "input": "array = [{'Name': 'John', 'Age': 20}, {'Name': 'Stella', 'Age': 23}, \n    {'Name': 'Daniel', 'Age': 19}]", "output": "table = \"<table>\";\nfor(i=0; i < array.length; i++ ) {\n  table += \"<tr>\";\n  table += \"<td>\"+ array[i].Name +\"</td>\";\n  table += \"<td>\"+array[i].Age+\"</td>\";\n  table += \"</tr>\";\n}\ntable += \"</table>\";\nconsole.log(table);", "category": "Python"}, {"instruction": "Write JavaScript code to Print the message after 5 seconds", "input": "", "output": "setTimeout(function(){\n    console.log('Printing message after 5 seconds');\n}, 5000);", "category": "Python"}, {"instruction": "Create a function to print a table using a given dictionary.", "input": "example_dict = {\n    'Name': ['John', 'Stella', 'Daniel'], \n    'Age': [20, 23, 19]\n}", "output": "def print_table(dictionary):\n    \"\"\"Prints a table from a dictionary of lists.\"\"\"\n    # retrieve the lists\n    names = dictionary['Name']\n    ages = dictionary['Age']\n\n    # print the table\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')", "category": "Python"}, {"instruction": "Clone a given array.", "input": "arr = [1,2,3,4,5]", "output": "def clone(arr):\n  new_arr = arr.copy()\n  return new_arr", "category": "Python"}, {"instruction": "Implement a basic calculator using JavaScript.", "input": "", "output": "function calculate(inputString) {\n  let result = 0;\n  inputString.split(/\\+|\\-|\\*|\\//).forEach(function(value) {\n    result += parseFloat(value);\n  });\n  return result;\n}", "category": "Python"}, {"instruction": "Write a function to classify a text as positive or negative.", "input": "text = \"This is an amazing product.\"", "output": "def classify_text(text):\n  score = 0\n  words = text.split(\" \")\n  for word in words:\n    if word in positive_words:\n      score += 1\n    elif word in negative_words:\n      score -= 1\n  if score > 0:\n    return \"positive\"\n  elif score == 0:\n    return \"neutral\"\n  else:\n    return \"negative\"", "category": "Python"}, {"instruction": "Write a function to decode a string encoded using Base64.", "input": "encoded_s = \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgdGluY2lkdXJlIGV4c2VlIGRlc2VydW50IG1vbGxpdCBhbmltIGlwc3VtIHRlbXBvcmUgYSBjb25zZXF1YXQgcXVpcyBkb2xvcmVtIG5pc2ku", "output": "import base64 \ndef decode_base64(encoded_s):\n   decoded_s = base64.b64decode(encoded_s).decode('utf-8') \n   return decoded_s", "category": "Python"}, {"instruction": "Provide a function to read a single line of user input in Python.", "input": "", "output": "def read_input():\n    \"\"\"Reads a single line of user input.\"\"\"\n    return input()", "category": "Python"}, {"instruction": "Write a loop in SQL for selecting all customer names that are not 'Bob'.", "input": "", "output": "SELECT name\nFROM customers\nWHERE name != 'Bob';", "category": "Python"}, {"instruction": "Interpret the following code written in Bash", "input": "list=(a b c d e)\necho $list\necho ${list[2]}", "output": "list=(a b c d e)\necho $list\n\nThis line prints the elements of the array which is \"a b c d e\".\n\necho ${list[2]}\n\nThis line prints the element at index 2 from the array, which is \"c\".", "category": "Python"}, {"instruction": "Create a function in Python to identify if the inputted number is odd or even.", "input": "", "output": "def is_odd_or_even(num): \n  return \"even\" if num % 2 == 0 else \"odd\"", "category": "Python"}, {"instruction": "Formulate a plan to automate a login process.", "input": "", "output": "1. Identify the website that requires the login process.\n2. Connect to the website using the appropriate library/API.\n3. Get the username and password credentials from a secure database (or a file).\n4. Use the credentials to create a login request.\n5. Capture the response and analyze the outcome.\n6. Extract any key elements of the response that are required to perform other activities (if required).\n7. Log details from the login request in the database (or a file).\n8. Handle any error cases appropriately.", "category": "Python"}, {"instruction": "Create an SQL query to select only the rows from a table where the second column is not empty.", "input": "", "output": "SELECT * FROM TABLE_NAME WHERE COL2 <> '';", "category": "Python"}, {"instruction": "Deploy a Keras model to Google App Engine.", "input": "", "output": "1. Create a Google Cloud Platform project and enable the App Engine API.\n2. Create an app for your project on App Engine.\n3. Install the Google Cloud SDK and authentication into your machine.\n4. Initialize your project and configure the App Engine.\n5. Follow the instructions to deploy the model with Google Cloud Endpoints.\n6. Copy the URL from the Cloud Endpoint and use it to access the model from the App Engine.", "category": "Python"}, {"instruction": "Code a function to compute the difference between two dates.", "input": "date1 = \"02/26/2019\";\ndate2 = \"10/25/2020\";", "output": "function dateDifference(date1, date2){\n    let date1Moment = moment(date1, \"MM/DD/YYYY\");\n    let date2Moment = moment(date2, \"MM/DD/YYYY\");\n    let diffInDays = date2Moment.diff(date1Moment, 'days');\n    return diffInDays;\n}\nconsole.log(dateDifference(date1, date2));", "category": "Python"}, {"instruction": "Find the greatest number from an array.", "input": "arr = [41, 77, 56, 99]", "output": "function greatestNumber(arr) { \n    return Math.max(...arr); \n} \nconsole.log(greatestNumber(arr));", "category": "Python"}, {"instruction": "You are expected to calculate the average of the elements in an array.", "input": "arr: [4, 7, 13, 33]", "output": "function calculateAverage(arr){\n    let sum = 0;\n    for(let i=0; i<arr.length;i++){\n        sum+=arr[i];\n    }\n    return sum/arr.length;\n}\nconsole.log(calculateAverage(arr));", "category": "Python"}, {"instruction": "Your job is to generate random numbers within a given range.", "input": "min = 20, max = 40", "output": "function getRandomNumber(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconsole.log(getRandomNumber(min, max));", "category": "Python"}, {"instruction": "Code a function that prints out the characters of a string one by one.", "input": "str = \"Hello World!\"", "output": "function printCharByChar(str) {\n    for (let i=0; i<str.length; i++) { \n        console.log(str.charAt(i)); \n    } \n} \nprintCharByChar(str);", "category": "Python"}, {"instruction": "Compose a React component using the following JSON object.", "input": "{ \n\"id\": \"item-01\", \n\"name\": \"Faux Leather Jacket\", \n\"price\": \"$123.99\", \n\"imageURL\": \"https://images.example.com/jacket.jpg\" \n}", "output": "class ItemComponent extends React.Component {\n  render() {\n    return ( \n      <div>\n        <img src={this.props.imageURL} />\n        <div>\n          id: {this.props.id}\n        </div>\n        <div>\n          name: {this.props.name}\n        </div>\n        <div>\n          price: {this.props.price}\n        </div>\n      </div>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect palindrome strings.", "input": "", "output": "def is_palindrome(s):\n    rev = ''.join(reversed(s))\n    if (s == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to filter an array to retain only the strings in the array that start with \"A\".", "input": "Array: [\"Apple\", \"Banana\", \"Orange\", \"Apple Pie\"]", "output": "const result = array.filter(s => s.startsWith('A'));", "category": "Python"}, {"instruction": "Write an SQL query to select the employees who have worked for more than 5 years.", "input": "", "output": "SELECT * \nFROM employees \nWHERE years_of_experience > 5;", "category": "Python"}, {"instruction": "Write a SQL query to calculate the average age of customers who have purchased items from a store.", "input": "", "output": "SELECT AVG(age) \nFROM customers \nWHERE customers.purchases IS NOT NULL;", "category": "Python"}, {"instruction": "Edit the following HTML code to display a border around the element with the ID 'test-element'.", "input": "<div id=\"test-element\">Hello World</div>", "output": "<div id=\"test-element\" style=\"border:1px solid #000\">Hello World</div>", "category": "Python"}, {"instruction": "Create a UI Automation test that validates the text field is populated with the value \"Hello World!\".", "input": "", "output": "describe('Populated Text Field Test', () => { \n    it('Should validate the text field has the value of \"Hello World!\"', () => {\n        const value = textField.getAttribute('value');\n        expect(value).toEqual('Hello World!');\n    }); \n});", "category": "Python"}, {"instruction": "Create a class for a basketball team.", "input": "", "output": "class BasketballTeam:\n\n    def __init__(self, name, players):\n        self.name = name\n        self.players = players\n    \n    def get_name(self):\n        return self.name\n    \n    def get_players(self):\n        return self.players\n    \n    def add_player(self, player):\n        self.players.append(player)\n        return self.players", "category": "Python"}, {"instruction": "Write a regular expression pattern to find all the words which begin with a digit.", "input": "", "output": "pattern = r'\\b[0-9]\\w+'", "category": "Python"}, {"instruction": "Parse a JSON string.", "input": "{\"name\":\"John\", \"age\":30}", "output": "import json\n\njson_data = '{\"name\":\"John\", \"age\":30}'\n\ndata = json.loads(json_data)\n\nname = data[\"name\"]\nage = data[\"age\"]\n\nprint(f\"Name: {name}, Age: {age}\")", "category": "Python"}, {"instruction": "Implement a queue data structure.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.data = []\n\n    def is_empty(self):\n        return not self.data \n\n    def enqueue(self, element):\n        self.data.append(element)\n\n    def dequeue(self):\n        return self.data.pop(0)\n        \n    def peek(self):\n        if not self.is_empty():\n            return self.data[0]", "category": "Python"}, {"instruction": "Develop an API that returns a list of students and their ages.", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\nstudents = {\n    'John': 20,\n    'Jane': 19,\n    'Bob': 22\n}\n\n@app.route(\"/get_student_ages\", methods = [\"GET\"])\ndef get_student_ages():\n    return flask.jsonify(students)\n  \nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "How many islands of Scotland are there?", "input": "", "output": "There are over 700 islands in Scotland, with approximately 150 of them being inhabited.", "category": "Python"}, {"instruction": "Create a HTML & CSS website template featuring a header with a website logo.", "input": "", "output": "<html>\n\t<head>\n\t\t<title>My Website</title>\n\t</head>\n\n<body>\n\t<header>\n\t\t<div class = \"logo\">\n\t\t\t<img src = \"logo.png\" alt = \"Website Logo\" />\n\t\t</div>\n\t</header>\n\t<!-- other code-->\n</body>\n</html>\n\n/* CSS Code */\n  \nheader {\n\tbackground-color: #ccc;\n\tpadding: 30px 0;\n}\n\n.logo {\n\ttext-align: center;\n}\n\n/* Other Styles */", "category": "Python"}, {"instruction": "Write a SQL query to find all the names of people born before 1990.", "input": "", "output": "SELECT name FROM people WHERE year_of_birth <1990;", "category": "Python"}, {"instruction": "Write a basic CSS structure to style a div element with the background colour of 'red'.", "input": "", "output": "div {\n   background-color: red;\n}", "category": "Python"}, {"instruction": "Create a query in PostgreSQL to display all the records in a given table.", "input": "Table name: 'employee'", "output": "SELECT * FROM employee", "category": "Python"}, {"instruction": "Using Python, create a program that prints out the numbers 0 to 100.", "input": "", "output": "for i in range(101):\n    print(i)", "category": "Python"}, {"instruction": "Create a C++ function to generate a binary tree with a breadth-first search algorithm.", "input": "Nodes: 5, 4, 8, 11, 13, 4, 7, 2, 5, 1", "output": "Node *generateBFSBinaryTree(vector<int> input_nodes) {\n    Node *root = new Node{input_nodes[0]};\n    queue<Node *> que;\n    que.push(root);\n    for (int i = 1; i < input_nodes.size(); ++i) {\n        Node *node = new Node{input_nodes[i]};\n        Node *par = que.front();\n        que.pop();\n        if (!par->left) {\n            par->left = node;\n        }\n        else {\n            par->right = node;\n        }\n        que.push(node);\n    }\n    return root;\n}", "category": "Python"}, {"instruction": "Format the following SQL query using indentation.", "input": "SELECT * FROM employee WHERE name = 'John'", "output": "SELECT *\nFROM  employee\nWHERE  name = 'John'", "category": "Python"}, {"instruction": "Explain the concept of fuzzy logic and provide an example.", "input": "", "output": "Fuzzy logic is a form of artificial intelligence that deals with reasoning that is approximate rather than exact. It is based on the concept of fuzzy sets, which allow for degrees of truth instead of just true and false. For example, \"It's hot\" is a fuzzy statement because there is no definite temperature that it could refer to. Different people might have different definitions of hot.  By using fuzzy logic, it is possible to create a temperature threshold to determine when an environment is hot, cold or moderate.", "category": "Python"}, {"instruction": "Create a SQL query to retrieve the name, address and contact number of the customers with the highest spending record.", "input": "", "output": "SELECT name, address, contact_number FROM customers ORDER BY spending DESC LIMIT 1;", "category": "Python"}, {"instruction": "Explain the concept of the depth-first search algorithm and provide an example.", "input": "", "output": "Depth-first search (DFS) is an algorithm used to traverse a tree or graph data structure. It starts at the root of the tree, explores as far as possible down a given branch and then backtracks along the same path before exploring a new branch. For example, consider a BST (Binary Search Tree) where we want to traverse all the elements, the algorithm starts at the root node, then traverses all the elements in the left subtree before traversing all the elements in the right subtree.", "category": "Python"}, {"instruction": "Which data structure is most suitable for storing a large list of numbers?", "input": "", "output": "Heap or binary tree. A heap or binary tree data structure are most suitable for storing a large list of numbers as it provides O(log n) time complexity for insertion, search and deletion.", "category": "Python"}, {"instruction": "Write a code in Java to convert any string to camel case format.", "input": "String = \"this_is_a_string\"", "output": "\"\"\"\nWrite a code to convert any string to camel case format in Java\n\"\"\"\npublic class CamelCaseFormat {\n    public static String toCamelCase(String s){\n        String[] parts = s.split(\"_\");\n        String camelCaseString = \"\";\n        for (String part : parts){\n            camelCaseString = camelCaseString + toProperCase(part);\n        }\n        return camelCaseString;\n    }\n    \n    static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n               s.substring(1).toLowerCase();\n    }\n \n    public static void main(String[] args)\n    {\n        String s = \"this_is_a_string\";\n        System.out.println(toCamelCase(s));\n    }\n}", "category": "Python"}, {"instruction": "Create a MySQL query to retrieve the oldest record in a table called orders.", "input": "", "output": "SELECT * FROM orders ORDER BY created_at ASC LIMIT 1;", "category": "Python"}, {"instruction": "Run a sentiment analysis of the following sentence using Python.", "input": "The food was really good but the service was terrible.", "output": "\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \n\ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)", "category": "Python"}, {"instruction": "Given a data set, calculate the average using Python.", "input": "[1, 2, 3, 4, 5]", "output": "nums = [1,2,3,4,5]\nsum = 0\n\nfor num in nums:\n  sum +=num\n\naverage =sum / len(nums)\n\nprint(average) // output is 3.0", "category": "Python"}, {"instruction": "Given a string, change the spaces between words to underscores", "input": "String: \"This is a string\"", "output": "String str = \"This is a string\";\nString newStr = str.replaceAll(\"\\\\s\", \"_\");\nSystem.out.println(newStr);  // This_is_a_string", "category": "Python"}, {"instruction": "Create a table in MySQL that stores employee details.", "input": "", "output": "CREATE TABLE EmployeeRecord (\n   EmployeeID INT NOT NULL AUTO_INCREMENT,\n   Name VARCHAR(255) NOT NULL,\n   Age INT NOT NULL,\n   Address VARCHAR(255) NOT NULL,\n   Primary Key (EmployeeID)\n);", "category": "Python"}, {"instruction": "Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers.", "input": "List of numbers:[25, 10, 5, 20]", "output": "import threading \n  \n# function to read the numbers \ndef read_sum(list_of_numbers): \n    total = 0\n    for number in list_of_numbers: \n        total += number  \n  \n    print(\"Sum of the list of numbers is: {}\".format(total)) \n  \n# Driver code \nlist_of_numbers = [25, 10, 5, 20] \nstart = 0\nend = len(list_of_numbers) \n  \n# creating thread \nt1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],)) \n  \n# starting thread 1 \nt1.start() \n# wait until thread 1 is completely executed \nt1.join() \n  \n# both threads completely executed \nprint(\"Done!\")", "category": "Python"}, {"instruction": "Generate a list of 10 items from the given array.", "input": "myArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Classify the following sentence as offensive or non-offensive.", "input": "Sentence: Your work is terrible!", "output": "Offensive.", "category": "Python"}, {"instruction": "How many lines of code does the following function contain?", "input": "def f(x):\n    s = 0\n    for j in range(1,x+1):\n        for k in range(1,x+2):\n            if j % k == 0:\n                s = s + 1\n    return s", "output": "This function contains 8 lines of code.", "category": "Python"}, {"instruction": "Make a valid http request call with the following parameters", "input": "url = 'www.example.com'\nMethod = 'GET'\nHeader = 'Content-Type:application/json'", "output": "import requests\n\nurl = 'www.example.com'\nheaders = {'Content-Type':'application/json'}\nr = requests.get(url, headers=headers)", "category": "Python"}, {"instruction": "Change the following code to create a new string without spaces.", "input": "string = \"Hello World\"", "output": "string = string.replace(' ', '') # new string is \"HelloWorld\"", "category": "Python"}, {"instruction": "Create a list comprehension in Python to generate odd numbers between 1 and 10", "input": "", "output": "odd_numbers = [x for x in range(1, 11) if x % 2 != 0]", "category": "Python"}, {"instruction": "How can you ensure that a button element with the ID of \"submit-btn\" is not clickable?", "input": "", "output": "You can ensure that a button element with the ID of \"submit-btn\" is not clickable by adding this code to the CSS file: \n\n#submit-btn{\n  pointer-events: none;\n}", "category": "Python"}, {"instruction": "Write a CSS rule to set font-size of an element to 20px", "input": "", "output": "CSS Rule: \n{\n  font-size: 20px;\n}", "category": "Python"}, {"instruction": "Convert the following array of integers to a string: [1, 2, 3, 4, 5]", "input": "[1, 2, 3, 4, 5]", "output": "\"1 2 3 4 5\"", "category": "Python"}, {"instruction": "Create an HTML and CSS layout to display a list of books with their author, title and description.", "input": "Book 1: Author - John, Title - The Catcher in the Rye, Description - \u201cThe Catcher in the Rye is a 1951 novel by J. D. Salinger.\u201d \nBook 2: Author - Jane, Title - Sense and Sensibility, Description - \u201cSense and Sensibility is a novel by Jane Austen, published in 1811.\u201d", "output": "<html>\n<head>\n<style>\n  .book-container{\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .book{\n\twidth: 300px;\n\tpadding: 10px;\n\tborder: 1px solid #ccc;\n\tmargin: 10px;\n\tbox-sizing : border-box;\n  }\n  .author {\n\t  font-weight: bold;\n  }\n  .title {\n\t  font-style: italic;\n  }\n  .description {\n\t  font-size: 12px;\n  }\n</style>\n</head>\n<body>\n  <div class=\"book-container\">\n    <div class=\"book\">\n      <p class=\"author\">Author: John</p>\n      <p class=\"title\">Title: The Catcher in the Rye</p>\n      <p class=\"description\">Description: \u201cThe Catcher in the Rye is a 1951 novel by J. D. Salinger.\u201d</p>\n    </div>\n    <div class=\"book\">\n      <p class=\"author\">Author: Jane</p>\n      <p class=\"title\">Title: Sense and Sensibility</p>\n      <p class=\"description\">Description: \u201cSense and Sensibility is a novel by Jane Austen, published in 1811.\u201d</p>\n    </div>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a C++ Program to reverse the words of a string.", "input": "", "output": "#include <iostream> \n#include <string> \n\n// function to reverse the words of a string \nstd::string reverseWords(std::string str) \n{ \n\tstd::string revString = \"\"; \n\tint length = str.length(); \n\n\t// Traverse given string from end \n\tfor (int i = length - 1; i >= 0; i--) { \n\t\t// if (str[i] == ' ') \n\t\t\t// continue; \n\n\t\t// Store next word \n\t\tstd::string temp = \"\"; \n\t\twhile (i >= 0 && str[i] != ' ') { \n\t\t\ttemp = temp + str[i]; \n\t\t\ti--; \n\t\t} \n\n\t\t// Append next word to result \n\t\trevString = revString + temp + \" \"; \n\t} \n\n\treturn revString; \n}", "category": "Python"}, {"instruction": "Given an array of integers and a target value, write a Java program to determine whether this array contains two elements with the given target sum.", "input": "arr = [2, 4, 6, 8, 10], target = 8", "output": "boolean containsTargetSum(int[] arr, int target){\n  for (int i = 0; i < arr.length; i++){\n    for (int j = 1; j < arr.length; j++){\n      if (arr[i] + arr[j] == target)\n        return true;\n    }\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes two integers, n and m as input and returns true if n is larger than m, and false otherwise.", "input": "", "output": "function isNGreaterThanM(n, m) { \n  return n > m ? true : false; \n}", "category": "Python"}, {"instruction": "Using an array, write a Python script that prints the sum of the numbers from 0 to 10.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nsum = 0\n  \n# Iterate to find the sum \nfor i in range (0, len(arr)): \n    sum = sum + arr[i] \n      \n# Print the sum  \nprint(sum)", "category": "Python"}, {"instruction": "Create a JavaScript function to convert a given temperature in celsius to its equivalent in fahrenheit.", "input": "", "output": "function celsiusToFahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32; \n  return fahrenheit;\n}", "category": "Python"}, {"instruction": "Create an efficient algorithm that finds the intersection between two sorted arrays.", "input": "arr1 = [1, 2, 6, 8, 9]\narr2 = [2, 3, 5, 6, 7]", "output": "def intersection(arr1, arr2): \n\n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result", "category": "Python"}, {"instruction": "Write a Dockerfile for an Nginx server.", "input": "", "output": "FROM nginx:alpine\n\nCOPY www/ /usr/share/nginx/html/\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]", "category": "Python"}, {"instruction": "Write a code to extract data from a PDF document.", "input": "", "output": "# install the required package\npip install pdfminer.six\n\n# importing all the required modules \nfrom pdfminer.pdfparser import PDFParser \nfrom pdfminer.pdfdocument import PDFDocument \n\n# open the pdf file \nfp = open('sample_form.pdf', 'rb') \n\n# create parser object \nparser = PDFParser(fp) \n\n# create pdf document object \ndoc = PDFDocument(parser) \n\n# get the text data from pdf file \ndata = doc.get_data() \n\n# print the text extracted \nprint(data)", "category": "Python"}, {"instruction": "Create a MySQL query to select all the employees who have 100 or more sales.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Sales >= 100;", "category": "Python"}, {"instruction": "Compose a SQL query to display the highest minimum salary of the employees in each department.", "input": "", "output": "SELECT DepartmentID, MAX(MinSalary) \nFROM Employee \nGROUP BY DepartmentID;", "category": "Python"}, {"instruction": "Develop a C++ program to find the volume of a cylinder given its radius and height.", "input": "Radius: 12\nHeight: 20", "output": "#include <iostream> \n#include <math.h>\n\nusing namespace std; \n\nint main() \n{ \n  float radius, height, volume; \n  \n  cout << \"Enter the radius of the cylinder in cm: \"; \n  cin >> radius; \n  \n  cout << \"Enter the height of the cylinder in cm: \"; \n  cin >> height; \n  \n  volume = 3.14159 * pow(radius, 2) * height;\n  \n  cout << \"The volume of the cylinder is: \" << volume << \" cm^3\" << endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "We want to display a random number between 1 and 10 using Python. Write a program for that.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)", "category": "Python"}, {"instruction": "In JavaScript, what is the difference between var and let?", "input": "", "output": "The main difference between the \"var\" and \"let\" keywords in JavaScript is their scope. Variables declared with the \"var\" keyword have a function scope and are available throughout the entire function, while variables declared with \"let\" have a block scope and are available only in the block in which they are declared.", "category": "Python"}, {"instruction": "Construct a method in Java to calculate the average of an array of numbers", "input": "", "output": "public static double calculateAverage(int[] numbers) {\n    double total = 0;\n    for (int num : numbers) {\n        total += num;\n    }\n    return total / numbers.length;\n}", "category": "Python"}, {"instruction": "Given the following HTML:", "input": "<div id=\"Container\">\n    <p>Hello World</p>\n    <!-- TODO: Add an image here -->\n</div>", "output": "<div id=\"Container\">\n    <p>Hello World</p>\n    <img src=\"your_image.jpg\" alt=\"your_image\" />\n</div>", "category": "Python"}, {"instruction": "In Java, what does the \"public\" modifier mean for a class?", "input": "", "output": "The public modifier for a class in Java means that the class is visible to all other classes, regardless of package. This means that any class can create an instance of the class, call its methods, and access its fields, as long as they have the proper access permissions.", "category": "Python"}, {"instruction": "Develop a web service to convert a temperature value from Fahrenheit to Celsius.", "input": "Temperature in Fahrenheit: 98", "output": "#!/bin/bash\n\nimport web\n\nurls = (\n   '/convert', 'ConvertFahrenheitToCelcius'\n)\n\napp = web.application(urls, globals())\n\nclass ConvertFahrenheitToCelcius:\n    def GET(self):\n        web.header('Content-Type', 'text/plain; charset=utf-8')\n        tempFahrenheit = web.input().t\n        tempCelcius = (tempFahrenheit - 32) * (5/9)\n        return str(tempCelcius)\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Edit the following code to return a Promise in the getMessage() function", "input": "function getMessage() {\n    const fullName = getName();\n    // TODO: return a Promise\n}", "output": "function getMessage() {\n    const fullName = getName();\n    // return a Promise\n    return new Promise ((resolve, reject) => {\n       resolve(fullName);\n    });\n}", "category": "Python"}, {"instruction": "Create a program to generate random passwords of 8 characters consisting of letters, numbers and special characters.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    letters_and_digits = string.ascii_letters + string.digits \n    special_characters = '!@#$%^&*()'\n    chars = letters_and_digits + special_characters\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8)) # output = xT@lo6Sw", "category": "Python"}, {"instruction": "Create an initialization script for a database.", "input": "", "output": "#!/usr/bin/env python\n\nimport sqlite3\n\ndb_name = 'example.db'\n\n# connect to the database\n\ndb_connection = sqlite3.connect(db_name)\n\n# create tables\n\ndb_connection.execute('''\n    CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL,\n        password TEXT NOT NULL)\n''')\n\ndb_connection.execute('''\n    CREATE TABLE IF NOT EXISTS items (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL,\n        price INTEGER NOT NULL,\n        description TEXT NOT NULL)\n''')\n\n# commit the changes \n\ndb_connection.commit()", "category": "Python"}, {"instruction": "Parse a string containing the date in the format: \"YYYY-MM-DD\"", "input": "date = \"2021-10-15\"", "output": "def parse_date(date):\n    year, month, day = date.split('-')\n    return (year, month, day)\n\ndate_tuple = parse_date(date)\nprint(date_tuple) # output = ('2021', '10', '15')", "category": "Python"}, {"instruction": "Construct a query to find the 2nd highest salary from an employee table.", "input": "", "output": "SELECT MAX(salary) FROM \n    (SELECT DISTINCT(salary) FROM employee\n    ORDER BY salary DESC\n    LIMIT 2)", "category": "Python"}, {"instruction": "Create a dictionary of 10 words and their meanings.", "input": "", "output": "words_dict = {\n    'Piano': 'A musical instrument with keys and strings',\n    'Cello': 'A string instrument played with a bow',\n    'Drums': 'A percussion instrument',\n    'Guitar': 'A plucked stringed instrument',\n    'Harp': 'A stringed instrument played with the hands',\n    'Trumpet': 'A brass instrument',\n    'Violin': 'A bowed string instrument',\n    'Oboe': 'A double-reed wind instrument',\n    'Clarinet': 'A single-reed wind instrument',\n    'Flute': 'A wind instrument with a metal or wooden tube'\n    }", "category": "Python"}, {"instruction": "Create a program to search for a word in a document.", "input": "document = \"This is a sample document with some words.\"\nword = \"words\"", "output": "def search(document, word):\n    if word in document:\n        print(\"The word '{}' was found in the document\".format(word))\n    else:\n        print(\"The word '{}' was not found in the document\".format(word))\n\nsearch(document, word) # output = \"The word 'words' was found in the document.\"", "category": "Python"}, {"instruction": "Write a SQL query to find out all the cities that have the most expensive houses.", "input": "", "output": "SELECT City\nFROM Houses\nORDER BY Price DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Build a function in PHP that converts a string into ASCII code", "input": "", "output": "function stringToASCII($str){\n    $result = '';\n  \tfor($i=0; $i<strlen($str); $i++){\n    \t$result .= ord($str[$i]) .\" \";\n    }\n    return $result;\n}", "category": "Python"}, {"instruction": "Store this JSON data into a database of your choice.", "input": "[\n  {\n    \"name\": \"Bob\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  }\n]", "output": "Using MongoDB:\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst users = [\n  {\n    \"name\": \"Bob\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  }\n];\n\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'myDatabase';\n\nMongoClient.connect(url, {useNewUrlParser: true}, (err, client) => {\n  if(err){\n    console.log(\"Error connecting to database \" + err);\n    return;\n  } else {\n    console.log(\"Successfully connected to database\");\n    const db = client.db(dbName);\n    const collection = db.collection('users');\n    collection.insertMany(users, (err, result) => {\n      if(err){\n        console.log(\"Error inserting users: \" + err);\n      } else {\n        console.log(\"Successfully inserted users into database\");\n      }\n    });\n  }\n});", "category": "Python"}, {"instruction": "Rearrange the following code segments to sort an array of integers in descending order.", "input": "array = [3, 5, 7, 1, 2];\n\nA. for(let i=1; i<array.length; i++)\nB. for(let j=i+1; j<array.length; j++)\nC. if(array[i] < array[j])\nD. [array[i], array[j]] = [array[j], array[i]];", "output": "for(let i=0; i<array.length; i++) {\n    for(let j=i+1; j<array.length; j++) {\n        if(array[i] < array[j]) {\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a JavaScript object that holds properties and methods for a Vehicle.", "input": "", "output": "let Vehicle = {\n  make: '',\n  model: '',\n  year: 0,\n  getFullDetails: function() {\n    return this.make + \" \" + this.model + \" \" + this.year;\n  }\n}", "category": "Python"}, {"instruction": "Using the given regular expression, find all the email addresses in the text provided.", "input": "Regular Expression: /\\S+@\\S+\\.\\S+/\nText: Please contact support@example.com for assistance.", "output": "support@example.com", "category": "Python"}, {"instruction": "Using recursion, write a Python program to find the factorial of a given number.", "input": "Number: 5", "output": "def factorial(num): \n    if num == 1: \n        return 1\n    else: \n        return num * factorial(num-1)\n\nans = factorial(5)\nprint(ans)", "category": "Python"}, {"instruction": "Summarize the following article in one sentence.", "input": "The article is about the rise of artificial intelligence, and how it is impacting the job market and our lives in general.", "output": "Artificial intelligence is rapidly transforming the job market and our lives as a whole.", "category": "Python"}, {"instruction": "Create an HTML/CSS web page from the following text content.", "input": "My favorite food is sushi.", "output": "<html>\n    <head>\n        <title>Sushi</title>\n        <style>\n            // Styling for the page\n            p {\n                font-family: Arial;\n                font-size: 18px;\n            }\n        </style>\n    </head>\n    <body>\n        <p>My favorite food is sushi.</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Suggest a PHP code snippet which calculates the sum of two numbers.", "input": "", "output": "$a = 1;\n$b = 2;\n$sum = $a + $b;\necho $sum; // Outputs: 3", "category": "Python"}, {"instruction": "Rewrite the following Python code to a Bash program.", "input": "v = [1, 2, 3, 4, 5]\nfor i in v:\nprint(i)", "output": "v=(1 2 3 4 5)\n\nfor i in ${v[@]}; do\n    echo $i\ndone", "category": "Python"}, {"instruction": "Produce an R code snippet to randomly sample 10 elements from vector x.", "input": "", "output": "sample(x, size = 10, replace = FALSE)", "category": "Python"}, {"instruction": "Create a Java class to store a student's name, ID, and GPA.", "input": "", "output": "public class Student {\n\n    private String name;\n    private int id;\n    private Double gpa;\n    \n    public Student(String name, int id, Double gpa) {\n        this.name = name;\n        this.id = id;\n        this.gpa = gpa;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getId() {\n        return id;\n    }\n    \n    public Double getGPA() {\n        return gpa;\n    }\n}", "category": "Python"}, {"instruction": "How would you loop through the elements in an array in JavaScript?", "input": "", "output": "You can loop through elements in an array in JavaScript by using a `for loop`:\n\nfor (let i = 0; i < myArray.length; i++) {\n  const element = myArray[i];\n  // Do something with the element\n}", "category": "Python"}, {"instruction": "Create a CSS style to make all paragraphs with a bottom margin of 10px.", "input": "", "output": "p {\n  margin-bottom: 10px;\n}", "category": "Python"}, {"instruction": "Create a Mongoose schema for a blog post with the following fields: title (String), body (String), and isPublished (Boolean).", "input": "", "output": "const blogPostSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  body:  { type: String, required: true },\n  isPublished: { type: Boolean, default: false}\n});", "category": "Python"}, {"instruction": "Create a React component that renders a text input field.", "input": "", "output": "class TextInput extends React.Component {\n  render() {\n    return (\n      <input type=\"text\" />\n    );\n  }\n}", "category": "Python"}, {"instruction": "Create a MySQL query to list the authors and the number of books they wrote.", "input": "", "output": "SELECT authors.name, COUNT(book.id)\nFROM authors INNER JOIN books\nON authors.id = books.author_id\nGROUP BY authors.name;", "category": "Python"}, {"instruction": "Create a Flask endpoint that displays a \"Hello World!\" message.", "input": "", "output": "@app.route(\"/\", methods=['GET'])\ndef hello_world():\n    return \"Hello World!\"", "category": "Python"}, {"instruction": "Using the provided HTML structure and jQuery code, change the background color to green when the button is clicked.", "input": "<div>\n  <h1>Hello World!</h1>\n  <button>Click me!</button>\n</div>\n<script>\n    $(document).ready(function(){\n        $(\"button\").click(function(){\n            //TODO: Add code here\n        });\n    });\n</script>", "output": "<div>\n  <h1>Hello World!</h1>\n  <button>Click me!</button>\n</div>\n<script>\n    $(document).ready(function(){\n        $(\"button\").click(function(){\n            $(\"div\").css(\"background-color\", \"green\");\n        });\n    });\n</script>", "category": "Python"}, {"instruction": "Create a Python dictionary with customer details provided.", "input": "Name: John\nAge: 25\nGender: Male\nOccupation: Chef", "output": "customer = { \n'name': 'John',\n'age': 25,\n'gender': 'Male',\n'occupation': 'Chef'\n}", "category": "Python"}, {"instruction": "Compare the two strings using the given regular expression.", "input": "Regular Expression: /^[a-z]+$/\nStrings: string1 and string2", "output": "import re\n\nregex = re.compile(r\"^[a-z]+$\")\n\nstring1 = \"string1\"\nstring2 = \"string2\"\n\nif regex.match(string1) and regex.match(string2):\n    if string1 == string2:\n        print(\"The strings are equal\")\n    else:\n        print(\"The strings are not equal\")", "category": "Python"}, {"instruction": "With the provided data, find the correlation coefficient between the two variables.", "input": "x: [4, 5, 7, 8]\ny: [6, 7, 8, 10]", "output": "x = [4, 5, 7, 8]\ny = [6, 7, 8, 10]\n\ndef find_correlation_coefficient(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\nprint(\" The correlation coefficient is: \" + str(find_correlation_coefficient(x, y))) # 0.9", "category": "Python"}, {"instruction": "Parse the given string and return a list of words.", "input": "string = \"this is a test string\"", "output": "def parse_string(string):\n    words = string.split()\n    return words", "category": "Python"}, {"instruction": "Modify the following C program so that it can print the result in reverse order.", "input": "#include <stdio.h>\n \nint main()\n{\n   int arr[] = {1, 2, 3, 4, 5};\n   int i, size;\n \n   size = sizeof(arr) / sizeof(arr[0]);\n \n   for (i=0; i < size; i++)\n   {\n      printf(\"%d \", arr[i]);\n   }\n   return 0;\n}", "output": "#include <stdio.h>\n \nint main()\n{\n   int arr[] = {1, 2, 3, 4, 5};\n   int size, i;\n \n   size = sizeof(arr) / sizeof(arr[0]);\n \n   for (i = size - 1; i >= 0; i--) {\n      printf(\"%d \", arr[i]);\n   }\n   return 0;\n}", "category": "Python"}, {"instruction": "Given a string of text, write a python script to remove all non-alphanumeric characters.", "input": "", "output": "def remove_non_alphanumeric_chars(input_string):\n  return ''.join(c for c in input_string if c.isalnum())", "category": "Python"}, {"instruction": "Implement a JavaScript function that takes two strings as parameters and replaces all occurrences of the first string with the second.", "input": "\"test\", \"Data\"", "output": "function replaceString(str1, str2) {\n  return str1.split(' ').map(word => (word === str2) ? str1 : word).join(' ');\n}", "category": "Python"}, {"instruction": "Write a query to select all rows from a table with the name \"products\" and the column \"price\" where the price is greater than 10.", "input": "", "output": "SELECT * FROM products WHERE price > 10;", "category": "Python"}, {"instruction": "What is the meaning of the acronym JSON?", "input": "", "output": "The acronym JSON stands for JavaScript Object Notation. It is a text-based format for data interchange, which makes it easy for machines to parse and generate.", "category": "Python"}, {"instruction": "Construct a function with two parameters to return the sum of the squares of the parameters.", "input": "", "output": "def sum_squares(x, y):\n    return x*x + y*y", "category": "Python"}, {"instruction": "Explain what the expression \"variadic functions\" means.", "input": "", "output": "A variadic function is a function that can accept a variable number of arguments. It is a type of function in which the number of arguments that is passed to the function can vary, thus giving it more versatility than a function with a fixed number of arguments.", "category": "Python"}, {"instruction": "Create a Python class for a user object that includes a name and email field.", "input": "", "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email", "category": "Python"}, {"instruction": "Name four primitive types in Java.", "input": "", "output": "The four primitive types in Java are boolean, char, float, and int.", "category": "Python"}, {"instruction": "Name two methods of sorting a list in Python.", "input": "", "output": "The two methods of sorting a list in Python are the sorted() function and the .sort() method.", "category": "Python"}, {"instruction": "Edit the code to create a program to print all the leap years between 1900 and 2000.", "input": "for year in range(1900, 2001):\n    # TODO", "output": "for year in range(1900, 2001):\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        print(year)", "category": "Python"}, {"instruction": "Given a linked list, write a program to delete a given node.", "input": "1 -> 2 -> 3 -> 4 -> 5 -> NULL\nNode = 3", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n    prev.next = curr.next", "category": "Python"}, {"instruction": "Given two strings, s1 and s2, write a program to return the longest common substring between them.", "input": "s1 = 'abcdef'\ns2 = 'fghijk'", "output": "def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_substring = longest_common_substring(s1, s2)", "category": "Python"}, {"instruction": "Return the number of elements in a dictionary.", "input": "myDict = {'a':1, 'b':2, 'c':3}", "output": "def count_dict_elements(myDict):\n    count = 0\n    for key in myDict:\n        count += 1\n    return count\n        \nelement_nums = count_dict_elements(myDict)", "category": "Python"}, {"instruction": "Create a program to calculate the mean of the following list.", "input": "myList = [4, 8, 10, 15]", "output": "def mean(myList):\n    sum = 0\n    for num in myList:\n        sum += num\n    average = round(sum/len(myList), 2)\n    return average\n\nmean_result = mean(myList)", "category": "Python"}, {"instruction": "Generate a random 6-digit integer.", "input": "", "output": "import random\n\nrandom_int = str(random.randint(100000, 999999))", "category": "Python"}, {"instruction": "What is the difference between higher order functions and first class functions?", "input": "", "output": "Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used.", "category": "Python"}, {"instruction": "Modify the following JavaScript code to alert \"Thanks for visiting!\" when the page is loaded.", "input": "", "output": "window.onload = function() {\n    alert(\"Thanks for visiting!\");\n}", "category": "Python"}, {"instruction": "Create a SQL query for selecting the top 2 records in a table based on a given rating.", "input": "", "output": "SELECT * FROM Table\nORDER BY Rating DESC\nLIMIT 2;", "category": "Python"}, {"instruction": "Write a SQL query to update all the records in the table with new values from another table.", "input": "", "output": "UPDATE Table1\nSET Table1.Col1 = Table2.Col1, \n    Table1.Col2 = Table2.Col2, \n    Table1.Col3 = Table2.Col3\nFROM Table1\nINNER JOIN Table2\nON Table1.ID = Table2.ID;", "category": "Python"}, {"instruction": "Parse a JSON string into an object in JavaScript.", "input": "{\"name\": \"John Doe\", \"age\": 30}", "output": "var data = JSON.parse('{\"name\": \"John Doe\", \"age\": 30}');\nvar name = data.name;\nvar age = data.age;", "category": "Python"}, {"instruction": "Calculate the difference between two given dates in terms of days.", "input": "date1 = \"2020-5-15\"\ndate2 = \"2020-6-20\"", "output": "from datetime import datetime\n\ndate1 = datetime.strptime(date1, \"%Y-%m-%d\")\ndate2 = datetime.strptime(date2, \"%Y-%m-%d\")\n\ndifference = date2 - date1  \nprint(difference.days) # 36", "category": "Python"}, {"instruction": "Generate a simple Flask route to handle a GET request.", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/myroute\", methods=[\"GET\"])\ndef myfunc():\n  # write code here\n\nif __name__ == '__main__':\n app.run()", "category": "Python"}, {"instruction": "Build an array of objects from a given array of numbers.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [\n {\n  num: 1 \n }, \n {\n  num: 2\n }, \n {\n  num: 3\n }, \n {\n  num: 4\n }, \n {\n  num: 5\n }\n]", "category": "Python"}, {"instruction": "Clone a given repository and create a pull request.", "input": "https://github.com/myusername/myrepo", "output": "git clone https://github.com/myusername/myrepo\ngit checkout -b my-new-feature\ngit commit -am \"Added new feature\"\ngit push origin my-new-feature\ngit pull-request -m \"New feature added\"", "category": "Python"}, {"instruction": "Parse a given XML document and create a JavaScript object.", "input": "<?xml version=\"1.0\"?>\n<catalog>\n <book id=\"bk101\">\n  <author>Kerridge, Alan</author>\n  <title>The Kitchen Diaries</title>\n  <price>29.99</price>\n </book>\n <book id=\"bk102\">\n  <author>Zinsser, William</author>\n  <title>On Writing Well</title>\n  <price>19.95</price>\n </book>\n</catalog>", "output": "const parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(text, \"text/xml\");\n \nconst books = xmlDoc.querySelectorAll('book');\nconst result = {};\n \nbooks.forEach(book => {\n const id = book.getAttribute('id');\n result[id] = {\n  author: book.querySelector('author').textContent,\n  title: book.querySelector('title').textContent,\n  price: book.querySelector('price').textContent\n }\n});\n\nconsole.log(result);\n// { \n//  bk101: {author: \"Kerridge, Alan\", title: \"The Kitchen Diaries\", price: \"29.99\"}, \n//  bk102: {author: \"Zinsser, William\", title: \"On Writing Well\", price: \"19.95\"}\n// }", "category": "Python"}, {"instruction": "Write a basic HTML page with a div and an unordered list.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Basic HTML Page</title>\n</head>\n<body>\n <div>\n  <ul>\n   <li>list item 1</li>\n   <li>list item 2</li>\n   <li>list item 3</li>\n  </ul>\n </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Convert the elements of a given array of strings to integers.", "input": "arr = [\"1\", \"2\", \"3\", \"4\", \"5\"]", "output": "arr = list(map(int,arr))", "category": "Python"}, {"instruction": "Create a basic React component.", "input": "", "output": "import React from 'react';\n\nconst MyComponent = () => {\n\n return (\n  <div>\n   <p>Hello, world!</p>\n  </div>\n );\n};\n\nexport default MyComponent;", "category": "Python"}, {"instruction": "Write a query to retrieve the rows from a given table where the value of the \"name\" column is not null.", "input": "my_table {\n    \"id\": Integer,\n    \"name\": String\n}", "output": "SELECT * FROM my_table WHERE name IS NOT NULL;", "category": "Python"}, {"instruction": "Create a JavaScript array from a given Object.", "input": "my_obj = {\"a\": 1, \"b\": 2, \"c\": 3}", "output": "my_arr = [1, 2, 3]", "category": "Python"}, {"instruction": "Determine how many characters are in a given string.", "input": "my_string = \"Hello, world!\"", "output": "length = len(my_string)\nprint(length) # 13", "category": "Python"}, {"instruction": "Explain the differences between a while loop and a for loop in JavaScript.", "input": "", "output": "The major difference between a while loop and a for loop is that a while loop checks the condition before the block of code is executed, while a for loop checks the condition before each iteration of the loop. A while loop is used when the number of iterations is not known, while the number of iterations in a for loop is known. In a while loop, the condition must be true in order to execute the loop body, while in a for loop, the loop body is always executed at least once, regardless of whether the condition is true or false. Another difference is that a for loop allows you to include an increment section where you can increment or decrement the loop counter.", "category": "Python"}, {"instruction": "Write a JavaScript program to randomly select items from an array.", "input": "const fruits = ['apple', 'banana', 'mango', 'cherry'];", "output": "function getRandomItem(arr) {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index]; \n}\n \nconst randomItem = getRandomItem(fruits);\nconsole.log(randomItem);", "category": "Python"}, {"instruction": "Explain the difference between .push(), .pop(), .shift() and .unshift() methods in JavaScript arrays.", "input": "", "output": "The .push() method adds an element to the end of an existing array. It takes a single argument, the element to be added, and returns the new length of the array.\n\nThe .pop() method removes an element from the end of an existing array. It does not take any arguments and returns the element that was removed.\n\nThe .shift() method removes an element from the beginning of an existing array. It does not take any arguments, and returns the element that was removed.\n\nThe .unshift() method adds an element to the beginning of an existing array. It takes a single argument, the element to be added, and returns the new length of the array.", "category": "Python"}, {"instruction": "Create a list of 10 strings in Python and print each string in a separate line.", "input": "", "output": "mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']\nfor item in mylist:\n  print(item)", "category": "Python"}, {"instruction": "Create an array of 10 random numbers between 1 and 100 in JavaScript and print each number in the console.", "input": "", "output": "var arr = [];\n\nfor (i = 0; i < 10; i++) {\n  arr.push(Math.floor(Math.random() * 100) + 1);\n  console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Create a class in Python with one method called talk that prints a string when invoked.", "input": "", "output": "class MyClass:\n  def talk(self):\n    print(\"Hello, world!\")", "category": "Python"}, {"instruction": "Create an array of objects in JavaScript, each object should have two properties, a \"name\" and \"age\".", "input": "", "output": "var arr = [\n  {name: 'John', age: 25},\n  {name: 'Alice', age: 28},\n  {name: 'Bob', age: 30},\n  {name: 'David', age: 32},\n]", "category": "Python"}, {"instruction": "Write a Java code to sort the following array in ascending order [3, 6, 2, 8, 1, 9].", "input": "[3, 6, 2, 8, 1, 9]", "output": "public class SortList { \n  \n  public static void sort (int[] array) { \n    int temp;\n    \n    for (int i = 0; i < array.length; i++) { \n    for (int j = 0; j < array.length; j++) { \n      if (array[j] > array[i]) { \n        temp = array[i]; \n        array[i] = array[j]; \n        array[j] = temp; \n      }\n    } \n  }\n  } \n  \n  public static void main(String args[]) { \n    int[] array = {3, 6, 2, 8, 1, 9}; \n    \n    sort(array); \n    \n    System.out.print(\"Sorted list: \\n\"); \n    for (int i = 0; i < array.length; i++) \n      System.out.print(array[i] + \" \"); \n  } \n}", "category": "Python"}, {"instruction": "Write an Objective-C code to create a loop that iterates 10 times, printing out the iteration number each time.", "input": "", "output": "for(int i = 1; i <= 10; i++) {\n  NSLog(@\"Current Iteration: %d\", i);\n }", "category": "Python"}, {"instruction": "Write a CSS code to style a table such that each row is a different color.", "input": "", "output": "table tr:nth-child(odd) {\n    background-color: #f0f0f0;\n}\ntable tr:nth-child(even) {\n    background-color: #cccccc;\n}", "category": "Python"}, {"instruction": "Write a Python code to group the following numbers according to their last digit [1, 9, 5, 4, 6, 7, 8, 11].", "input": "[1, 9, 5, 4, 6, 7, 8, 11]", "output": "group_by_last_digit = {\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    11: [11]\n}", "category": "Python"}, {"instruction": "Write a SQL query for selecting all the people who were born after January 1st, 1960.", "input": "", "output": "SELECT * FROM People WHERE BirthDate > '1960-01-01';", "category": "Python"}, {"instruction": "Construct an SQL query to find the number of records where the value in a certain column is greater than a specified value.", "input": "", "output": "SELECT COUNT(*) FROM TABLE_NAME WHERE COLUMN_NAME > VALUE;", "category": "Python"}, {"instruction": "Suggest a suitable data structure to hold a series of student records.", "input": "", "output": "A dictionary would be the best data structure to hold student records, since it allows easy mapping of student identifiers (e.g. a student's ID number or username) to associated data about that student, such as their name, age, and academic results.", "category": "Python"}, {"instruction": "Write a PHP code to validate a date in the format MM/DD/YYYY.", "input": "", "output": "<?php\n\nfunction validateDate($date) {\n    $d = \\DateTime::createFromFormat('m/d/Y', $date);\n    return $d && $d->format('m/d/Y') === $date;\n}", "category": "Python"}, {"instruction": "Write a function to extract the elements from a given list and add them to a new list.", "input": "given_list = [0, 2, 4, 6, 8]", "output": "def extract_and_add_elements(given_list):\n    new_list = []\n    for x in given_list:\n        new_list.append(x)\n    return new_list", "category": "Python"}, {"instruction": "Construct an SQL query to select all the unique values of one column from a table that appear more than twice.", "input": "column_name: 'gender'", "output": "SELECT gender \nFROM table_name \nGROUP BY gender \nHAVING COUNT(*) > 2;", "category": "Python"}, {"instruction": "Construct a query to find all movies released since a given year.", "input": "year: 2000", "output": "SELECT * FROM movies\nWHERE year > 2000;", "category": "Python"}, {"instruction": "Write an SQL query to return all the distinct values of a given column from a table.", "input": "column_name: gender", "output": "SELECT DISTINCT gender FROM table_name;", "category": "Python"}, {"instruction": "Construct an SQL query to delete all the rows from a table where the value of a column is less than a given value.", "input": "column_name: age\nvalue: 18", "output": "DELETE FROM table_name \nWHERE age < 18;", "category": "Python"}, {"instruction": "Generate a JavaScript array containing the first ten Fibonacci numbers.", "input": "", "output": "let fib_nums = [1, 1]\nfor (let i=2; i < 10; i++) {\n  fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2]\n}", "category": "Python"}, {"instruction": "Construct an SQL query to get the names and salary of the employees who earn more than a given salary.", "input": "salary: 10000", "output": "SELECT name, salary \nFROM employees \nWHERE salary > 10000;", "category": "Python"}, {"instruction": "Construct an SQL query to find the average temperature for each month in the year.", "input": "", "output": "SELECT \n  MONTH(date) as 'Month',\n  AVG(temperature) as 'Average Temperature'\nFROM temperatures\nGROUP BY MONTH(date);", "category": "Python"}, {"instruction": "Suggest changes to the following Java code so that it sorts an array of strings by length.", "input": "String[] data = {\"Hello\",\"Hi\",\"Bye\"};\n\nArrays.sort(data);", "output": "String[] data = {\"Hello\",\"Hi\",\"Bye\"};\n\nComparator<String> comparator = Comparator.comparingInt(String::length);\nArrays.sort(data, comparator);", "category": "Python"}, {"instruction": "Use the given array to find distinct values.", "input": "arr = [1, 2, 3, 3, 4, 5]", "output": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Replace the character \u2018_\u2019 with the underscore symbol in a string.", "input": "sample_string = \"this__is_a_sample_string\"", "output": "def replace_underscore_char(sample_string):\n    return sample_string.replace('_', '\\_')\n\nsample_string = \"this__is_a_sample_string\"\n\nprint(replace_underscore_char(sample_string))  # Output: this\\_\\_is\\_a\\_sample\\_string", "category": "Python"}, {"instruction": "Write an expression to select the first element from a list.", "input": "list = [1, 2, 3, 4]", "output": "list[0]\n or \nlist[-4]", "category": "Python"}, {"instruction": "Find all local maxima in the given list.", "input": "list_vals = [1, 2, 3, 4, 5, 2, 1]", "output": "[3, 4, 5]", "category": "Python"}, {"instruction": "Compute the value of the expression given below.", "input": "(2^3) + 5", "output": "21", "category": "Python"}, {"instruction": "Write a function to detect if the given integer is even or odd.", "input": "number = 3", "output": "def is_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Replace all 'e' characters with asterisks in the following sentence.", "input": "The elephant is walking", "output": "Th* appl*phant is walking", "category": "Python"}, {"instruction": "Perform the following calculation without using the multiplication operator.", "input": "2*3", "output": "2 + 2 + 2", "category": "Python"}, {"instruction": "Print out the 3rd element in the list.", "input": "list_to_print = ['foo', 'bar', 'baz']", "output": "baz", "category": "Python"}, {"instruction": "Write a Python program to find the longest substring in a given string which has no repeating characters.", "input": "", "output": "def longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n\n        used_char[char] = i\n        \n    return max_len", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes an array and returns a new array containing the elements in reverse order.", "input": "", "output": "function reverseArray(arr) {\n    let newArr = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}", "category": "Python"}, {"instruction": "Write a function in Java that takes a string as an argument and returns the length of the longest word in the string.", "input": "", "output": "public static int findLongestWordLength(String str) {\n    String[] words = str.split(\" \");\n    int maxLength = 0;\n\n    for (String word : words)\n        maxLength = Math.max(maxLength, word.length());\n\n    return maxLength;\n}", "category": "Python"}, {"instruction": "How would you create a function in JavaScript that takes a string as an argument and counts the number of occurrences of a given character?", "input": "", "output": "function countOccurrences(str, char) {\n    let count = 0;\n    for(let i=0; i < str.length; i++) {\n        if(str[i] == char)\n            count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Trace through the following code and explain what it does.", "input": "arr = [1, 4, 6, 7]\n\nfor i in range(len(arr)):\n    if arr[i] == 6:\n        arr[i] = 8", "output": "The code loops through the elements of the list 'arr' and checks if each element is equal to 6. If it is, it replaces the element with 8. So after the loop, the list 'arr' would be changed to [1, 4, 8, 7].", "category": "Python"}, {"instruction": "Compare and contrast Java and Python for developing applications.", "input": "", "output": "Java and Python are both popular programming languages used for developing applications. Java is a statically typed language and requires extra effort in the form of type checking during compilation, while Python is a dynamically typed language and no type checking is required. Java is more suitable for large-scale enterprise software development and is known for its performance and scalability, whereas Python is generally easier to work with and better suited for smaller projects and prototyping. Java is also more verbose than Python, requiring more lines of code to accomplish the same task. On the other hand, Python has a large library of additional modules and provides simpler syntax and more intuitive programming style.", "category": "Python"}, {"instruction": "Implement a function 'convert_to_upper()' in JavaScript that converts a given string to uppercase.", "input": "string = \"Hello, World!\"", "output": "function convert_to_upper(string) {\n return string.toUpperCase();\n}", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates over every element in a list named 'nums'.", "input": "nums = [1, 4, 6, 8, 10]", "output": "for num in nums:\n    # Do something with num", "category": "Python"}, {"instruction": "Using a given array of numbers, create a function to display the frequency of each number.", "input": "", "output": "def frequency(array):\n    count = {}\n    # Count the number of occurances\n    for element in array:\n        if element not in count:\n            count[element] = 1\n        else:\n            count[element] += 1\n\n    # Display the count\n    for element in count:\n        print(\"Number {} occurs {} times\".format(element, count[element]))", "category": "Python"}, {"instruction": "Write a regular expression that matches any string containing a digit.", "input": "", "output": "\\d+", "category": "Python"}, {"instruction": "Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'.", "input": "Car, Toyota, Camry, Red", "output": "class Vehicle:\n    def __init__(self, vehicle_type, make, model, color):\n        self.type = vehicle_type\n        self.make = make\n        self.model = model\n        self.color = color\n\ncar = Vehicle(\"Car\", \"Toyota\", \"Camry\", \"Red\")", "category": "Python"}, {"instruction": "Create a script to find the longest palindrome in a given sentence.", "input": "This is a level sentence.", "output": "function findLongestPalindrome(str) {\n    let longestPalindrome = '';\n\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j < str.length + 1; j++) {\n            let currentSubstr = str.substring(i, j);\n\n            if (currentSubstr === currentSubstr.split(\"\").reverse().join(\"\") && currentSubstr.length > longestPalindrome.length) {\n                longestPalindrome = currentSubstr;\n            }\n        }\n    }\n\n    return longestPalindrome; \n}\n  \nconsole.log(findLongestPalindrome(\"This is a level sentence.\")); // Outputs: \"level\"", "category": "Python"}, {"instruction": "Write an algorithm in JavaScript for finding the maximum number in a given array.", "input": "[5, 10, 8, 3, 13]", "output": "function maxFromArray(arr) {\n    let maxNum = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > maxNum) {\n            maxNum = arr[i];\n        }\n    } \n    return maxNum;\n}\n\nconsole.log(maxFromArray([5, 10, 8, 3, 13])); // Outputs: 13", "category": "Python"}, {"instruction": "Given a string of text, print the count of all the words.", "input": "", "output": "def word_count(string):\n    count = 0\n    for word in string.split():\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Update the HTML div with an ID of \"content\" so that its background color is blue.", "input": "", "output": "<div id=\"content\" style=\"background-color:blue;\"></div>", "category": "Python"}, {"instruction": "Given an array of integers, return the sum of the elements.", "input": "[1, 2, 3, 4]", "output": "10", "category": "Python"}, {"instruction": "Generate a random string of 10 characters that contains only lowercase letters.", "input": "", "output": "hcuqwhvqme", "category": "Python"}, {"instruction": "Create an HTML element, a div with an ID of \"content\".", "input": "", "output": "<div id=\"content\"></div>", "category": "Python"}, {"instruction": "Build a code to print out all permutations of the characters in a given string.", "input": "\"ABC\"", "output": "def permute(s): \n    if len(s) == 0: \n        return [''] \n    prev_permutation_list = permute(s[1:len(s)])  \n    next_list = [] \n    for p in prev_permutation_list: \n        for j in range(len(p) + 1): \n            next_list.append(p[0:j] + s[0] + p[j:len(p)])  \n    return next_list", "category": "Python"}, {"instruction": "Design a code to divide two integers without using division operator.", "input": "38, 4", "output": "def divide_without_operator(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n    return result * sign", "category": "Python"}, {"instruction": "Given a list of words and numbers, create a program to print out the unique words and unique numbers.", "input": "['cat', 'elephant', 'dog', '15', '20', 'elephant', '8']", "output": "Words: ['cat', 'dog', 'elephant']\nNumbers: [15, 20, 8]", "category": "Python"}, {"instruction": "Construct a code to remove all numbers greater than specified value from a given list.", "input": "[1, 6, 4, 9, 5, 8, 2], 7", "output": "def remove_greater(arr, value):\n    new_arr = []\n    for num in arr:\n        if num <= value:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Compose a code to find the mean and median of a given list", "input": "[1, 6, 4, 9, 5, 8, 2]", "output": "def get_mean_median(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n    return mean, median", "category": "Python"}, {"instruction": "Design a data structure to store a list of names of the student with their respective grades in a class.", "input": "Student names and grades\n\n[\n    ['John', 90], \n    ['Tom', 80],\n    ['Jill', 95],\n    ['Stacy', 75]\n]", "output": "class StudentGrades:\n    def __init__(self, names, grades):\n        self.names = names\n        self.grades = grades\n    \n    def add_entry(self, name, grade):\n        self.names.append(name)\n        self.grades.append(grade)\n        \n    def get_grade(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n               return self.grades[i]", "category": "Python"}, {"instruction": "Write a C++ program to take two numbers from the user and display the sum.", "input": "", "output": "#include <iostream> \n  \nusing namespace std; \n  \n// main function - \n// where the execution of program begins \nint main() \n{ \n    // demanding two numbers to the user \n    int a, b, c; \n  \n    cout << \"Enter two numbers: \"; \n    cin >> a >> b; \n  \n    c = a + b; \n    cout << \"Sum is: \" << c; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a condition in an if-statement that checks whether a number is within a range of 5 to 10.", "input": "number = 7", "output": "if (number > 5 && number < 10) {\n  // do something\n}", "category": "Python"}, {"instruction": "Design a CSS structure to give an element a red background with rounded corners.", "input": "", "output": "element {\n  background-color: #ff0000;\n  border-radius: 10px; \n}", "category": "Python"}, {"instruction": "In PHP, write code to print out the following string: \"Today is [day]\".", "input": "date('l')", "output": "echo \"Today is \" . date('l');", "category": "Python"}, {"instruction": "Create a basic HTML form with two text inputs, one for email and one for a password.", "input": "", "output": "<form>\n   <input type=\"email\" name=\"email\" placeholder=\"Email\" />\n   <input type=\"password\" name=\"password\" placeholder=\"Password\" />\n   <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Design a code to arrange an array of numbers such that all odd numbers come before even numbers.", "input": "[2, 8, 3, 4, 9]", "output": "def rearrange_arr(arr): \n    odd_list, even_list = [], [] \n    for num in arr: \n        if num & 1: \n            odd_list.append(num) \n        else: \n            even_list.append(num) \n  \n    return odd_list + even_list", "category": "Python"}, {"instruction": "When given a list of words, output the longest word.", "input": "['cat', 'elephant', 'apple', 'banana']", "output": "elephant", "category": "Python"}, {"instruction": "Transform the given code from C++ to Java.", "input": "int main() {\n\tstd::vector<int> numbers {1, 2, 3, 4, 5};\n\tfor (const auto& number: numbers) {\n\t\tstd::cout << number << std::endl;\n\t}\n\treturn 0;\n}", "output": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tint[] numbers = {1, 2, 3, 4, 5};\n\t\tfor (int number : numbers) {\n\t\t\tSystem.out.println(number);\n\t\t}\n\t}\n}", "category": "Python"}, {"instruction": "Print a multiplication table of a given number", "input": "num = 5", "output": "for i in range(1,11):\n    print(f'{num} x {i} = {num * i}')", "category": "Python"}, {"instruction": "Create an HTML document to display the following text:", "input": "Welcome to our website!", "output": "<html>\n <head>\n  <title>Welcome to our Website!</title>\n </head>\n <body>\n  <h1>Welcome to our Website!</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python program to identify whether or not a given number is prime.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a regular expression to match the string \"123 Main Street\".", "input": "", "output": "regex = r\"^\\d{3}\\s[A-Za-z]+\\s[A-Za-z]+$\"", "category": "Python"}, {"instruction": "Create a function to convert a given integer to a string in Python.", "input": "", "output": "def intToStr(n): \n\treturn str(n)\n\n# Driver Program \nintNum = 55\n  \n# Print the output \nprint(intToStr(intNum))", "category": "Python"}, {"instruction": "Modify the code snippet below to insert the element 'z' into the end of an array.", "input": "arr = ['a', 'b', 'c', 'd', 'e']", "output": "arr = ['a', 'b', 'c', 'd', 'e'] \narr.append('z') \nprint(arr)", "category": "Python"}, {"instruction": "Assign a value to each of the variables, x = ? and y = ?, such that x + y = 7.", "input": "", "output": "int x = 3;\nint y = 4; // x + y = 7", "category": "Python"}, {"instruction": "Create a compiler in C++ to compile a given source code.", "input": "", "output": "#include <iostream>\n#include <string>\n\nstd::string source_code; // source code to be compiled\n\nint main() {\n\n  // compile the source code\n\n  // check the errors\n\n  // return 0 if the compilation is successful\n  return 0;\n}", "category": "Python"}, {"instruction": "Create a JavaScript object which contains a key-value pair representing \"name\" and \"lucy\".", "input": "", "output": "let lucy = {\n    name: \"Lucy\"\n};", "category": "Python"}, {"instruction": "Write a code to count the occurrences of a particular element in a given list.", "input": "list1 = [1, 2, 3, 3, 3, 4, 5]\nelement = 3", "output": "def count_occurrences(list1, element):\n  count = 0\n  for elem in list1:\n    if elem == element:\n      count += 1\n  return count\n\nif __name__ == \"__main__\":\n  print(\"Number of occurrences of\", element, \"in the list:\", count_occurrences(list1, element))", "category": "Python"}, {"instruction": "You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list.", "input": "numbers = [2, 3, 5, 6, 8, 9, 10]", "output": "def get_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nif __name__ == \"__main__\":\n  print(\"Even numbers from original list:\", get_even_numbers(numbers))", "category": "Python"}, {"instruction": "You have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words.", "input": "mixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]", "output": "def get_words(mixed_list):\n  words = []\n  for item in mixed_list:\n    if type(item) == str:\n      words.append(item)\n  return words\n\ndef get_average_word_length(words):\n  total_length = 0\n  for word in words:\n    total_length += len(word)\n  return total_length/len(words)\n\nif __name__ == \"__main__\":\n  words = get_words(mixed_list)\n  print(\"Words in original list:\", words)\n  print(\"Average length of the words:\", get_average_word_length(words))", "category": "Python"}, {"instruction": "Write a code to generate fibonacci series for first n numbers.", "input": "", "output": "def generate_fibonacci(n):\n  fibonacci = [0, 1]\n  for i in range(2, n):\n    fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n  return fibonacci[:n]\n\nif __name__ == \"__main__\":\n  print(generate_fibonacci(n))", "category": "Python"}, {"instruction": "You have been given a list of user details (Names, Addresses etc). Write a code to filter out the users whose age is more than 21.", "input": "user_details = [\n {'name': 'John Doe', 'age': 34, 'address': '123 Main Street'},\n {'name': 'Jane Doe', 'age': 18, 'address': '456 Wallaby Way'},\n {'name': 'Bob Smith', 'age': 21, 'address': '789 Ocean View'},\n]", "output": "def filter_users(user_details):\n  users_over_21 = []\n  for user in user_details:\n    if user['age'] > 21:\n      users_over_21.append(user)\n  return users_over_21\n\nif __name__ == \"__main__\":\n  print(\"Users over 21:\", filter_users(user_details))", "category": "Python"}, {"instruction": "Create a dictionary with two given lists.", "input": "list1 = [\"John\", \"Adam\"]\nlist2 = [25, 30]", "output": "def create_dict(list1, list2):\n    dictionary = dict(zip(list1, list2))\n    return dictionary\n\nlist1 = [\"John\", \"Adam\"]\nlist2 = [25, 30]\n\nprint(create_dict(list1, list2))  # Output: {'John': 25, 'Adam': 30}", "category": "Python"}, {"instruction": "Extract the last four characters from a text string.", "input": "text = \"This is a sample text\"", "output": "text[-4:]  # Output: \"text\"", "category": "Python"}, {"instruction": "Create a tuple of strings.", "input": "", "output": "my_tuple = (\"Apple\", \"Banana\", \"Orange\")", "category": "Python"}, {"instruction": "You have been given a list of strings. Write a code to generate a new list containing only the strings with length less than 6 characters.", "input": "strings = ['Ready', 'Set', 'Go', 'Hello', 'Pizza', 'Book']", "output": "def get_shorter_strings(strings):\n  shorter_strings = []\n  for string in strings:\n    if len(string) < 6:\n      shorter_strings.append(string)\n  return shorter_strings\n\nif __name__ == \"__main__\":\n  print(\"strings with length less than 6:\", get_shorter_strings(strings))", "category": "Python"}, {"instruction": "Generate Python code to find the compound interest for a given principal amount, rate, and time period.", "input": "", "output": "# Python program to find compound interest\n\ndef compound_interest(p,r,t):\n    # p is the principal amount \n    # r is the rate \n    # t is the time period \n  \n    # Calculating compound interest \n    CI = p * (pow((1 + r / 100), t))\n    print(\"Compound interest is\", CI) \n\np=1000\nr=10\nt=2\ncompound_interest(p,r,t)", "category": "Python"}, {"instruction": "What does the SELECT statement in SQL do?", "input": "", "output": "The SELECT statement is used to retrieve data from one or more tables in a database. It is typically used in a query, where it specifies which columns and rows of data should be returned. The statement can also be used to perform calculations on data in the database and to group data together.", "category": "Python"}, {"instruction": "Create a PHP function to trim a string and remove all leading and trailing whitespace.", "input": "$string = \"  Hello World   \";", "output": "function trimString($string)\n{\n    return preg_replace('/^\\s+|\\s+$/', '', $string);\n}\n\n//calling the function\ntrimString($string); //Returns \"Hello World\"", "category": "Python"}, {"instruction": "Write code that validates a given number is within a given range", "input": "num = 5\nmin = 0\nmax = 10", "output": "def in_range(num, min, max):\n    if num in range(min, max):\n        print(f'{num} is in range')\n    else:\n        print(f'{num} is not in range')\nin_range(num, min, max) # Output: 5 is in range", "category": "Python"}, {"instruction": "Read an array of numbers and output an array with all the even numbers", "input": "array = [2, 3, 4, 5, 6, 7, 8]", "output": "even_array = [i for i in array if i % 2 == 0] \nprint(even_array) # Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Output the string \"Programming is Fun\" when you run the code?", "input": "", "output": "print('Programming is Fun')", "category": "Python"}, {"instruction": "Write a code snippet to take in 2 integers and generate the minimum of the 2 numbers", "input": "int x = 5\nint y = 9", "output": "min = min(x, y)\nprint(min) # Output: 5", "category": "Python"}, {"instruction": "Evaluate the following expression:  2x + 3y - 7z.", "input": "x = 5, y = -1, z = 8", "output": "2 * 5 + 3 * -1 - 7 * 8 = -31", "category": "Python"}, {"instruction": "Given a 2-dimensional array, print the elements across each row.", "input": "arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]", "output": "for row in arr:\n    for col in row:\n        print(col, end=\" \")\n    print(\"\")\n# Output\n1 2 3\n4 5 6\n7 8 9", "category": "Python"}, {"instruction": "How can you use a HTML Id attribute?", "input": "", "output": "The HTML id attribute is used to assign an identifier to an element. This identifier can then be used to reference the element in a style sheet or in JavaScript code. It is also used to link a document fragment to an element, such as a table of contents item to the corresponding section.", "category": "Python"}, {"instruction": "Write a piece of code that implements a 3-way merge sort in Java.", "input": "", "output": "class Mergesort \n{ \n    void merge(int arr[], int l, int m, int r) \n    { \n        int n1 = m - l + 1; \n        int n2 = r - m; \n  \n        int L[] = new int[n1]; \n        int R[] = new int[n2]; \n  \n        for (int i = 0; i < n1; ++i) \n            L[i] = arr[l + i]; \n        for (int j = 0; j < n2; ++j) \n            R[j] = arr[m + 1 + j]; \n  \n        int i = 0, j = 0; \n  \n        int k = l; \n        while (i < n1 && j < n2) { \n            if (L[i] <= R[j]) { \n                arr[k] = L[i]; \n                i++; \n            } \n            else { \n                arr[k] = R[j]; \n                j++; \n            } \n            k++; \n        } \n  \n        while (i < n1) { \n            arr[k] = L[i]; \n            i++; \n            k++; \n        } \n  \n        while (j < n2) { \n            arr[k] = R[j]; \n            j++; \n            k++; \n        } \n    } \n  \n    void sort(int arr[], int l, int r) \n    { \n        if (l < r) { \n            int m = (l + r) / 2; \n  \n            sort(arr, l, m); \n            sort(arr, m + 1, r); \n  \n            merge(arr, l, m, r); \n        } \n    } \n}", "category": "Python"}, {"instruction": "What is a bot?", "input": "", "output": "A bot is a software application that automates simple tasks such as sending messages, responding to questions, or performing other tasks. It is often used to create interactive experiences with users, such as chatbots or virtual assistants. It can also be used to automate online activities such as web browsing and data entry.", "category": "Python"}, {"instruction": "Debug the following for loop for computing the sum of numbers from 0 to 10.", "input": "for num in range(0:11)\n  sum = sum + num", "output": "sum = 0\nfor num in range(0, 11):\n    sum = sum + num", "category": "Python"}, {"instruction": "You need to sort an array of numbers in ascending order using JavaScript.", "input": "arr = [7, 4, 1, 10, 2]", "output": "function sortArray(arr) {\n  return arr.sort((a,b) => a - b);\n}\n\nsortArray(arr); //Returns [1, 2, 4, 7, 10]", "category": "Python"}, {"instruction": "Edit a piece of code to fix a syntax error.", "input": "def loopList(list) \n  for i in range(5) \n    sum += list i\n  \n  return sum", "output": "def loopList(list): \n  sum = 0\n  for i in range(5):\n    sum += list[i] \n  \n  return sum", "category": "Python"}, {"instruction": "Create a code to find the largest number from a list of given numbers in HTML.", "input": "", "output": "<script>\n  function findLargestNumber(list) {\n    let largestNumber = list[0];\n    for (let i = 1; i < list.length; i++){\n      if (list[i] > largestNumber) {\n        largestNumber = list[i];\n      }\n    }\n    return largestNumber;\n  }\n</script>", "category": "Python"}, {"instruction": "Write a code to detect all possible anagrams of a given word in Python.", "input": "word = \"cat\"", "output": "def all_anagrams(word):\n \n    if len(word) ==0:\n        return [word]\n    else:\n        temp = []\n        for anagram in all_anagrams(word[1:]):\n            for i in range(len(word)):\n                temp.append(anagram[:i] + word[0:1] + anagram[i:])\n        return temp\n\nall_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']", "category": "Python"}, {"instruction": "Create a function in C to edit a string. The function should correct all occurrences of two or more consecutive spacets with a single space.", "input": "char str[] = \"Hi   everyone   \"", "output": "void trimSpace(char *str) \n{ \n    int i = 0, j = 0; \n    while (str[i]) \n    { \n        if (str[i] != ' ') \n            str[j++] = str[i]; \n        else if (str[i-1] != ' ') \n            str[j++] = str[i];  \n        i++; \n    } \n    str[j] = '\\0';  \n} \n\ntrimSpace(str); // str will become \"Hi everyone \"", "category": "Python"}, {"instruction": "Write some code in JavaScript to generate an array with 3 positive random integers.", "input": "", "output": "function getRandomIntegers(size) {\n  return [...Array(size)].map(\n      () => Math.floor(Math.random() * Math.floor(20))\n    ).filter(randomNumber => randomNumber > 0);\n}\n\ngetRandomIntegers(3); //Returns an array with 3 random positive integers", "category": "Python"}, {"instruction": "Write a bash command to view the amount of free disk space on your computer.", "input": "", "output": "df -h", "category": "Python"}, {"instruction": "Add a method to the Customer class to print out customer's name, age and email", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email\n    \n    def print_customer_data(self):\n        print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)", "category": "Python"}, {"instruction": "Use a Linked List structure to implement a stack data structure.", "input": "", "output": "\"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n\n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value", "category": "Python"}, {"instruction": "Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.", "input": "d = {'John': 15, 'Anna': 20, 'Bob': 10}", "output": "\"\"\"\nGiven a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.\n\"\"\"\n\ndef reorder_dict(d):\n    sorted_dict = {}\n    sorted_values = sorted(d.values())\n\n    while sorted_values:\n        key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]\n        sorted_dict[key] = d[key]\n        sorted_values.remove(d[key])\n\n    return sorted_dict\n\nif __name__ == '__main__':\n    d = {'John': 15, 'Anna': 20, 'Bob': 10}\n    print(reorder_dict(d))", "category": "Python"}, {"instruction": "Create a program that will guess a number between 0 and 10.", "input": "", "output": "import random\n\ndef guessing_game():\n    secret_number = random.randint(0, 10)\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        print(\"Incorrect! Try again.\")\n        guess = int(input(\"Guess a number between 0 and 10: \")) \n    print(\"Correct!\")", "category": "Python"}, {"instruction": "Given a list of integers, determine the sum of all of elements in the list.", "input": "[3, 4, 5, 6]", "output": "def get_sum(nums):\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum", "category": "Python"}, {"instruction": "Write a function in C++ that takes in a string of text and removes all the punctuation from the string.", "input": "", "output": "#include <string>\n#include <cctype>\n\nstring remove_punctuation(string s) {\n    string str;\n    for (char c : s) {\n        if (ispunct(c) == false)\n            str.push_back(c);\n    }\n    return str;\n}", "category": "Python"}, {"instruction": "Create an algorithm to compute the greatest common divisor between two numbers.", "input": "m = 8, n = 20", "output": "def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4", "category": "Python"}, {"instruction": "Create a Python class for a movie instance with name, director, and year fields.", "input": "", "output": "class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year", "category": "Python"}, {"instruction": "Edit the following HTML document and add a CSS style to changes the background color to blue.", "input": "<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <style>\n      body {\n        background-color: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a NodeJS server that listens on port 8080 and serves a simple HTML page.", "input": "", "output": "const http = require('http');\nconst port = 8080;\n\nconst server = http.createServer(function (request, response) {\n    response.writeHead(200, { \"Content-Type\": \"text/html\" }); \n    response.write('<html><body><h1>Hello, World!</h1></body></html>');  \n    response.end(); \n});\n\nserver.listen(port);\nconsole.log(\"Listening at port\", port);", "category": "Python"}, {"instruction": "Re-implement the same program in a different language of your choice.", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick sort(arr):\n    if len(arr) < 2:\n        return arr\n    else: \n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Create a Python script that inputs an integer and prints \"odd\" if the number is odd, or \"even\" if the number is even.", "input": "", "output": "def check_even_or_odd(num):\n  if num % 2 == 0:\n    print(\"even\")\n  else:\n    print(\"odd\")\n  \ncheck_even_or_odd(5) # odd", "category": "Python"}, {"instruction": "Implement a bubble sort on the given array of integers.", "input": "[4, 8, 1, 3, 9]", "output": "def bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]", "category": "Python"}, {"instruction": "Create a GraphQL query that returns all the top five countries in terms of population.", "input": "", "output": "query {\n  countries(first: 5) {\n    name\n    population\n  }\n}", "category": "Python"}, {"instruction": "In what languages can the TensorFlow library be used?", "input": "", "output": "The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers.", "category": "Python"}, {"instruction": "What is the syntax for performing an instruction inside a loop in JavaScript?", "input": "", "output": "The syntax for performing an instruction inside a loop in JavaScript is: \n\nfor (initialization; condition; iteration) {\n    // instruction\n}", "category": "Python"}, {"instruction": "Write a SQL query to get the names and the total number of orders for each customer in a table called 'orders'.", "input": "", "output": "SELECT \n    c.name, \n    COUNT(o.order_id) AS total_orders \nFROM customers c \n    INNER JOIN orders o \n    ON c.customer_id = o.customer_id\nGROUP BY c.name;", "category": "Python"}, {"instruction": "How do you define and call a function in Python?", "input": "", "output": "In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:\n\ndef myfunc(x):\n    # function implementation\n\nmyfunc(x)  # call the function with argument x", "category": "Python"}, {"instruction": "Write an algorithm that takes in two integers and returns true if they are evenly divisible.", "input": "", "output": "def is_evenly_divisible(x, y):\n    return x % y == 0", "category": "Python"}, {"instruction": "Read a code that prints out the Fibonacci Series.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a code that recognizes if an inputted string is a palindrome or not.", "input": "", "output": "def is_palindrome(input_string):\n    rev_input = input_string[::-1]\n    return input_string == rev_input", "category": "Python"}, {"instruction": "You are given a list of integers and need to calculate the maximum number in the list.", "input": "[3, 4, 7, 1]", "output": "def get_max(numbers):\n    max_value = numbers[0]\n    for number in numbers:\n        if (number > max_value):\n            max_value = number\n    return max_value", "category": "Python"}, {"instruction": "Write a HTML code snippet to create a 4x3 table of no border and gradient.", "input": "", "output": "<table style=\"border: none; background: linear-gradient(#ff0000, #00ff00, #0000ff);\">\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n  </tr>\n  <tr>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n  </tr>\n  <tr>\n    <td>Cell 7</td>\n    <td>Cell 8</td>\n    <td>Cell 9</td>\n  </tr>\n  <tr>\n    <td>Cell 10</td>\n    <td>Cell 11</td>\n    <td>Cell 12</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a SQL query to get all distinct posts with the highest score.", "input": "", "output": "SELECT DISTINCT Posts.ID, MAX(Posts.Score) \nFROM Posts \nGROUP BY Posts.ID;", "category": "Python"}, {"instruction": "Write a code to find the day of the week corresponding to a given date using the calendar module?", "input": "Day: 25\nMonth: December\nYear: 2020", "output": "\"\"\"\nFind the day of the week corresponding to a given date using calendar module\n\"\"\"\n\nimport calendar\n\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber] \n    return dayName\n    \nif __name__ == '__main__':\n    day = 25\n    month = 12\n    year = 2020\n    print(get_day_of_week(day, month, year))", "category": "Python"}, {"instruction": "Explain the practical application of sorting algorithms", "input": "", "output": "Sorting algorithms are used in many practical applications, such as sorting data in databases, large scale data analysis, and search engine optimization. They are also used in sorting algorithms used in operating system kernels and in finding the shortest path in graph theory. Sorting algorithms can also be used to improve the performance of applications by sorting data according to certain criteria, thus reducing the amount of computation time required. In addition, sorting algorithms are used in designing algorithms for data compression and in machine learning. Generally, sorting algorithms are used to bring data into some form of order so that it can be searched or traversed more easily. By improving the efficiency of data retrieval, sorting algorithms can improve the overall performance of applications.", "category": "Python"}, {"instruction": "Write a Java program that counts the number of vowels in a given string.", "input": "String str = \"This is a test string\";", "output": "public class VowelCounter {\n\n public static int countVowels(String str) {\n  int count = 0;\n  for(int i = 0; i < str.length(); i++) {\n   char currentChar = str.charAt(i);\n   if(currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n    count++;\n   }\n  }\n  return count;\n }\n\n public static void main(String[] args) {\n  String str = \"This is a test string\";\n  int count = countVowels(str);\n  System.out.println(\"Number of vowels = \" + count);\n }\n}", "category": "Python"}, {"instruction": "What is the difference between supervised learning and unsupervised learning?", "input": "", "output": "Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path.\nUnsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it.", "category": "Python"}, {"instruction": "Create a C++ program that asks the user to type their age and will print out an appropriate message to the user.", "input": "", "output": "#include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Please type your age: \";\n    std::cin >> age;\n \n    if(age < 12) {\n        std::cout << \"You are still young!\" << std::endl;\n    } else if (age < 18) {\n        std::cout << \"You are a teenager!\" << std::endl;\n    } else {\n        std::cout << \"Welcome to adulthood!\" << std::endl;\n    }\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Write a C++ program to print the following sequence: 1, 2, 4, 8, 16, 32, ......", "input": "", "output": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int i, n;\n    for (i = 1; i <= 32; i *= 2)\n    {\n        cout << i << \" \";\n    }\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Edit the following Java code to create a method which will calculate the area of a rectangle, given its width and length.", "input": "public class Rectangle {\n  private double width;\n  private double length;", "output": "public class Rectangle {\n  private double width;\n  private double length;\n \n  public double calculateArea() {\n    return width * length;\n  }\n}", "category": "Python"}, {"instruction": "Create a function in Python that prints out all prime numbers between two given numbers.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Create a function in JavaScript that calculates the area of a rectangular room given its width and length.", "input": "", "output": "const calculateArea = (width, length) => {\n  return width * length;\n}", "category": "Python"}, {"instruction": "Write a C++ class called Vector3D which can be used to represent a 3D vector with 3 float values.", "input": "", "output": "#include <iostream>\n\nclass Vector3D {\nprivate:\n  float x, y, z;\npublic:\n  Vector3D(float x, float y, float z) : x(x), y(y), z(z) {}\n\n  float dotProduct(Vector3D v) {\n    return x * v.x + y * v.y + z * v.z;\n  }\n};", "category": "Python"}, {"instruction": "Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum.", "input": "def getRange(min, max):", "output": "def getRange(min, max):\n  return [i for i in range(min, max+1)]", "category": "Python"}, {"instruction": "Create a function in JavaScript that squares a given number.", "input": "", "output": "const square = (num) => {\n  return num * num;\n}", "category": "Python"}, {"instruction": "Read a given code and determine if it contains any errors or not.", "input": "def factorial(n):\n    product = 1\n    for i in range(2, 3):\n        product *= i\n    return product", "output": "true", "category": "Python"}, {"instruction": "Write an algorithm that takes in two numbers and returns the remainder of the first number divided by the second number.", "input": "", "output": "def get_remainder(x, y):\n    return x % y", "category": "Python"}, {"instruction": "Generate the output given the following input to the Python function you wrote in  task 11.", "input": "print_primes(5, 15)", "output": "5\n7\n11\n13", "category": "Python"}, {"instruction": "Name the different levels of accessibility supported in HTML?", "input": "", "output": "The different levels of accessibility supported in HTML are: A (minimal), AA (structured data and metadata), AAA (full accessibility).", "category": "Python"}, {"instruction": "Write an SQL query to find the names of all employee who have \"Programmer\" as their job title.", "input": "", "output": "SELECT name FROM employee WHERE job_title = 'Programmer';", "category": "Python"}, {"instruction": "Write a C program to find the difference between the maximum and minimum values in an array.", "input": "arr = {2, 8, 10, 9}", "output": "#include<stdio.h> \n  \n\nint diffMaxMin(int arr[], int n) \n{ \n    int max_num = arr[0], min_num = arr[0]; \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        max_num = max_num > arr[i] ? max_num : arr[i]; \n        min_num = min_num < arr[i] ? min_num : arr[i]; \n    } \n  \n    return (max_num - min_num); \n} \n  \nint main() \n{ \n    int arr[] = {2, 8, 10, 9}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    printf(\"%d\\n\", diffMaxMin(arr, n)); \n    return 0; \n}", "category": "Python"}, {"instruction": "Debug the following Java code snippet to makes sure it is syntactically correct:", "input": "public class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 = 0) \n       { \n          num2 = 1; \n       } \n    } \n}", "output": "public class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 == 0) \n       { \n          num2 = 1; \n       } \n    } \n}", "category": "Python"}, {"instruction": "Write an expression in Java to calculate the exponential value of a number.", "input": "", "output": "Math.exp(x)", "category": "Python"}, {"instruction": "Using React, create a component to display a table containing a list of cities.", "input": "", "output": "const CityTable = ({ cities }) => {\n  const cityRows = cities.map(city => (\n    <tr key={city.id}>\n      <td>{city.name}</td>\n      <td>{city.population}</td>\n      <td>{city.country}</td>\n    </tr>\n  ));\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Population</th>\n          <th>Country</th>\n        </tr>\n      </thead>\n      <tbody>{cityRows}</tbody>\n    </table>\n  );\n};", "category": "Python"}, {"instruction": "Develop a high-level algorithm for pathfinding.", "input": "", "output": "def find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n\n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n\n    # Create a queue and add the initial space to it\n    queue = [start]\n\n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n\n        # Add the current node to the path\n        path.append(curr)\n\n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n\n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbour)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None", "category": "Python"}, {"instruction": "Write an SQL query to return the top three highest-scoring players from a table 'scores'.", "input": "", "output": "SELECT player_name\nFROM scores\nORDER BY score DESC\nLIMIT 3;", "category": "Python"}, {"instruction": "Generate a unique ID string in Java.", "input": "", "output": "import java.util.UUID;\n\npublic class App {\n   public static void main(String[] args) {\n      // generate a unique ID string\n      String uniqueID = UUID.randomUUID().toString();\n      System.out.println(\"Unique ID String: \" + uniqueID);\n   }\n}", "category": "Python"}, {"instruction": "Edit the given HTML code so that the paragraphs are numbered.", "input": "<p>These are some sample paragraphs.</p>\n<p>This is another one.</p>", "output": "<ol>\n <li><p>These are some sample paragraphs.</p></li>\n <li><p>This is another one.</p></li>\n</ol>", "category": "Python"}, {"instruction": "Edit the provided code so that it prints 10 rows and 10 columns of stars.", "input": "for row in range(5):\n    for col in range(5):\n        print(\"*\")", "output": "for row in range(10):\n    for col in range(10):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Find the number of prime numbers between 1 and 100.", "input": "", "output": "25", "category": "Python"}, {"instruction": "Write an AppleScript program to open Calculator app.", "input": "", "output": "tell application \"Calculator\"\n    launch\nend tell", "category": "Python"}, {"instruction": "Generate a regular expression that matches strings containing any number of digits, but does not contain any non-digit character.", "input": "", "output": "^[0-9]+$", "category": "Python"}, {"instruction": "Rewrite the following if-elif-else statement using the ternary operator.", "input": "if x > y:\n    result = \"x is greater than y\"\nelif x < y:\n    result = \"x is less than y\"\nelse:\n    result = \"x is equal to y\"", "output": "result =  x > y ? \"x is greater than y\" : ( x < y ? \"x is less than y\" : \"x is equal to y\" )", "category": "Python"}, {"instruction": "Translate the given pseudocode to C programming language.", "input": "BEGIN\n  int sum, i\n  for i \u2190 1 to 20\n    sum \u2190 sum + i\n  end for\n  Print sum\nEND", "output": "#include <stdio.h>\n \nint main()\n{\n    int sum = 0, i;\n    for (i = 1; i <= 20; i++)\n        sum = sum + i;\n \n    printf(\"Sum = %d\\n\",sum);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Trace the output of the given program.", "input": "def foo(x, y):\n    if y > 0:\n        return x + y\n    else:\n        return x * y\n\na = foo(2, 3)\nb = foo(2, -2)\n\nprint(a, b)", "output": "5 -4", "category": "Python"}, {"instruction": "Identify the wrong statement about the recursive function in the given code.", "input": "def recursive(lr):\n    # base case\n    if lr is None:\n        return\n    \n    for i in lr:\n        recursive(i)\n    # recursive call\n    recursive(lr)", "output": "The function makes a recurrent call at the end of the function, which is redundant.", "category": "Python"}, {"instruction": "Create a regular expression to match a string that contains a number followed by a letter.", "input": "", "output": "/\\d[a-zA-Z]/", "category": "Python"}, {"instruction": "Edit the SQL query to get the users from Canada who joined within the last 6 months.", "input": "SELECT * FROM users", "output": "SELECT * FROM users\nWHERE country = 'Canada' \nAND CAST(DATEDIFF(MONTH, joined_date, GETDATE()) AS INT) <= 6;", "category": "Python"}, {"instruction": "Write a Python script to convert a given number of minutes into hours and minutes.", "input": "", "output": "def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes", "category": "Python"}, {"instruction": "Extract only the digits from a given string using Python.", "input": "", "output": "import re\n\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex, \"\", string)", "category": "Python"}, {"instruction": "Solve the following problem. Given an array of integers, return an array with the elements multiplied by two.", "input": "arr = [2, 8, 10, 9]", "output": "def doubleElements(arr):\n  return [num * 2 for num in arr]\n  \narr = [2, 8, 10, 9]\nprint(doubleElements(arr)) // [4, 16, 20, 18]", "category": "Python"}, {"instruction": "Write a Python code to sort a given list into descending order.", "input": "", "output": "def sortDescending(nums):\n  nums.sort(reverse=True)\n  return nums", "category": "Python"}, {"instruction": "Write a C program to add every two elements in an array and print the sum.", "input": "numbers = [2, 3, 4, 5, 6]", "output": "#include<stdio.h>\nint main() \n{ \n    int numbers[] = {2, 3, 4, 5, 6}; \n    int size = sizeof(numbers) / sizeof(numbers[0]); \n  \n    int i;\n    int sum;\n    for (i=1; i<size; i+=2) { \n       sum=numbers[i] + numbers[i-1];\n       printf(\"sum of %d and %d is %d \\n\",numbers[i-1], numbers[i], sum);\n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "How can you validate a credit card number using JavaScript?", "input": "", "output": "You can validate a credit card number using JavaScript with the Luhn algorithm. The Luhn algorithm is a simple checksum formula that can be used to validate various identification numbers, such as credit card numbers, National Provider Identifier (NPI) numbers, and Canadian Social Insurance Numbers (SINs).", "category": "Python"}, {"instruction": "Write a JavaScript code to filter a given array and return only the even numbers.", "input": "array = [1,2,3,4,5,6,7]", "output": "const even = array.filter(num => num % 2 === 0);", "category": "Python"}, {"instruction": "How can you access the value of a key from a JavaScript object?", "input": "", "output": "You can access a value from a JavaScript object using either dot notation or square bracket notation. \n\nUsing dot notation, you can do something like \"object.key\", where the key is the name of the property you want to access. \n\nUsing bracket notation, you can do something like \"object[\"key\"]\", where the key is a string containing the name of the property you want to access.", "category": "Python"}, {"instruction": "How would you query a database table using MySQL?", "input": "", "output": "SELECT * FROM table_name;", "category": "Python"}, {"instruction": "Calculate the value of PI using the Leibniz formula.", "input": "", "output": "def calculatePi():\n    pi = 0.0\n    N = 10000\n    sign = 1\n    for i in range(N):\n        pi += 4.0 * sign / (2.0 * i + 1.0)\n        sign *= -1\n    return pi\n\nprint(\"\u03c0 = \", calculatePi()) # 3.141592653589793", "category": "Python"}, {"instruction": "Read the given CSS selector and explain what it does.", "input": "", "output": "The given CSS selector \"div > p:not(.special)\" will select all the <p> elements that are children of <div> which do not have a class of \"special\".", "category": "Python"}, {"instruction": "Find any errors in the given PHP code.", "input": "<?php\n$name = \u201cJohn\u201d;\n$message = \u201cHello, my name is $Name.\u201d;\necho $message;", "output": "The given PHP code contains an error in the variable name. The variable is written as $Name instead of $name, so it is not getting replaced with the given value of John. The code should be corrected to:\n\n$name = \"John\";\n$message = \"Hello, my name is $name.\";\necho $message;", "category": "Python"}, {"instruction": "Write a React component to display a list of all the countries.", "input": "", "output": "import React from \"react\";\n\nconst CountryList = ({ countries }) => {\n  return (\n    <ul>\n      {countries.map(country => {\n        return <li>{country}</li>;\n      })}\n    </ul>\n  );\n};\n\nexport default CountryList;", "category": "Python"}, {"instruction": "Use the given CSS code to set the color of all h1 elements to blue.", "input": "", "output": "h1 {\n    color: blue;\n}", "category": "Python"}, {"instruction": "Look at the given code and find the bug in it.", "input": "def add_numbers(x,y):\n    return x + y + 1", "output": "The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y.", "category": "Python"}, {"instruction": "Write a JavaScript function to convert the given string to title case.", "input": "", "output": "function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}", "category": "Python"}, {"instruction": "Use the given SQL table named 'employess' to find the total number of employees with the gender 'Male'.", "input": "CREATE TABLE employees (\n  empid INTEGER,\n  firstname VARCHAR(50) NOT NULL,\n  lastname VARCHAR(50) NOT NULL,\n  gender VARCHAR(6) NOT NULL\n);", "output": "SELECT COUNT(*) \nFROM employees \nWHERE gender = \"Male\";", "category": "Python"}, {"instruction": "Write an HTML code snippet for a form to get two inputs: name and email.", "input": "", "output": "<form>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\">\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\">\n\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Given a string, find the number of times a given character appears in the string.", "input": "String: \"Hello World\"\nCharacter: \"l\"", "output": "The given character 'l' appears 3 times in the given string \"Hello World\".", "category": "Python"}, {"instruction": "Write an angular directive to highlight the selected word in a text.", "input": "", "output": "myApp.directive('highlight', function() {\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      attrs.$observe('highlight', function(word) {\n        var text = element[0].innerHTML;\n        if (word) {\n          var regex = new RegExp('('+ word +'\\\\b)', 'gi');\n          var replacedText = text.replace(regex, '<span class=\"highlighted\">$1</span>');\n          element[0].innerHTML = replacedText;\n        } else {\n          element[0].innerHTML = text;\n        }\n      });\n    }\n  };\n});", "category": "Python"}, {"instruction": "How can you write a JavaScript regular expression to validate an email address?", "input": "", "output": "var re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;", "category": "Python"}, {"instruction": "Edit the following code to remove the syntax error so that the program will run correctly.", "input": "def double(x):\nreturn x * 2", "output": "def double(x):\n    return x * 2", "category": "Python"}, {"instruction": "Replace the character at the second index with \"X\".", "input": "s = \"Hello!\"", "output": "s = \"Hello!\"\nnew_str = s[:1] + \"X\" + s[2:]\nprint(new_str) # Output: HXllo!", "category": "Python"}, {"instruction": "Provide the logic for sorting an array of strings alphabetically.", "input": "", "output": "for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]", "category": "Python"}, {"instruction": "Create a Visual Studio Code extension that provides auto-complete features for a specific language.", "input": "", "output": "This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly.", "category": "Python"}, {"instruction": "Find the running time of this code snippet.", "input": "list = [2, 5, 1, 6, 9]\nx = 0\n\nfor item in list:\n    x += item", "output": "The running time of this code snippet is O(n), where n is the length of the list.", "category": "Python"}, {"instruction": "Create a program that outputs the results of an election.", "input": "votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]", "output": "votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]\n\ntotal = 0\nfor name, count in votes:\n    total += count\n\nfor name, count in votes:\n    print(\"{}: {:.2f}%\".format(name, count/total*100))\n\n# Output: \n# A: 59.77%\n# B: 47.60%\n# C: 23.63%", "category": "Python"}, {"instruction": "Provide a solution for displaying another message if the user's input is invalid.", "input": "name = input('What's your name? ')", "output": "name = input('What's your name? ')\nif not name.isalpha():\n    print('Error: Invalid input.')", "category": "Python"}, {"instruction": "Create a function to calculate the Euclidean distance from (x, y) to (a, b).", "input": "", "output": "def euclidean_distance(x, y, a, b):\n     return np.sqrt((x-a)**2 + (y-b)**2)", "category": "Python"}, {"instruction": "Compress the following data using RLE algorithm.", "input": "AABBCC", "output": "AABBCC --> A2B2C2", "category": "Python"}, {"instruction": "Why is HashTable data structure the best choice for fast lookup operations?", "input": "", "output": "HashTable data structure is the best choice for fast lookup operations because it stores the data in key-value pairs and uses hashing algorithms to quickly identify the location of the data in memory. With this data structure, lookups can be done in O(1) time complexity, which is much more efficient than other data structures.", "category": "Python"}, {"instruction": "Specify a type for the following variable in C.", "input": "char c = '&';", "output": "char c = '&'; //Type is char.", "category": "Python"}, {"instruction": "Write a Python function to sort the given array of dictionaries by key value.", "input": "arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]", "output": "def sort_by_key(arr):\n return sorted(arr, key=lambda i: i['name'])", "category": "Python"}, {"instruction": "Write a function that takes a string and turns it into all uppercase.", "input": "var string = 'Hello World';", "output": "function toUpperCase(string) {\n   let upperCaseString = string.toUpperCase();\n   return upperCaseString;\n}\n\ntoUpperCase(string); //output: HELLO WORLD", "category": "Python"}, {"instruction": "Write a script that sorts an array of numbers from smallest to largest.", "input": "var numbers = [3, 7, 4, 2, 9, 1];", "output": "numbers.sort(function(a, b){\n    return a-b\n});\nconsole.log(numbers); //output: [1, 2, 3, 4, 7, 9]", "category": "Python"}, {"instruction": "Create an object with two fields, a name and an id.", "input": "", "output": "var obj = {\n   name: 'John', \n   id: '12345'\n};", "category": "Python"}, {"instruction": "Create a for loop that reads an array of strings and prints each string", "input": "var strings = [\"Hello\", \"world\", \"how\", \"are\", \"you\"];", "output": "for(var i=0; i < strings.length ;i++){\n   console.log(strings[i]);\n}\n//output:\n//Hello\n//world\n//how\n//are\n//you", "category": "Python"}, {"instruction": "Suggest a possible numpy code to normalize a data in the following manner.", "input": "Normalize the data such that the values lie in the range 0-1.", "output": "import numpy as np\n\ndef normalize(arr):\n    arr = np.array(arr)\n    return (arr - arr.min()) / (arr.max() - arr.min())", "category": "Python"}, {"instruction": "Suggest a code to sort the following array of strings.", "input": "[\"dinosaur\", \"cat\", \"dog\", \"elephant\", \"tiger\"]", "output": "arr = [\"dinosaur\", \"cat\", \"dog\", \"elephant\", \"tiger\"]\narr.sort()", "category": "Python"}, {"instruction": "Fill in the __ in the following code to print the reversed string.", "input": "original_string = \"Hello World\"\n \nreversed_string = original_string[ __ : __ ]\n\nprint(reversed_string)", "output": "original_string = \"Hello World\"\n \nreversed_string = original_string[::-1]\n\nprint(reversed_string)", "category": "Python"}, {"instruction": "Construct a code to add a new item to the end of the list.", "input": "list_of_items = [\"apple\", \"orange\", \"cherry\"]", "output": "list_of_items = [\"apple\", \"orange\", \"cherry\"]\nlist_of_items.append(\"banana\")", "category": "Python"}, {"instruction": "Construct a block of JavaScript code to find the smallest of 3 numbers", "input": "", "output": "let num1 = 10;\nlet num2 = 20;\nlet num3 = 15;\n\nlet smallest = Math.min(num1, num2, num3);\nconsole.log(smallest);", "category": "Python"}, {"instruction": "Develop a Python function that returns the first two characters of a string.", "input": "string = \"GPT-3\"", "output": "def first_two_chars(string):\n  return string[:2]", "category": "Python"}, {"instruction": "How to clear the console screen in C++?", "input": "", "output": "The console screen can be cleared in C++ using the system() command with the clear argument: system(\"clear\");", "category": "Python"}, {"instruction": "What should be the output of the following JavaScript statement?", "input": "let x = 5 + 4", "output": "The output of the statement is 9.", "category": "Python"}, {"instruction": "Inside a Python program, how would you convert a float number to a string?", "input": "", "output": "str_number = str(float_number)", "category": "Python"}, {"instruction": "Design a function to generate the random password", "input": "", "output": "import random\n\ndef generate_password():\n    #Declare a string of all possible characters\n    all_chars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'\"\n    #Declare the length of password\n    password_len = 8\n    #Create empty string\n    password = \"\"\n    for i in range(password_len):\n        #Generate a random index\n        rand_index = random.randint(0, len(all_chars)-1)\n        #Append character at the index to password\n        password += all_chars[rand_index]\n    return password", "category": "Python"}, {"instruction": "Write a code in Java to find the GCD of two numbers", "input": "", "output": "public static int gcd(int num1, int num2)\n{\n    if(num2==0)\n        return num1;\n    return gcd(num2, num1%num2);\n}", "category": "Python"}, {"instruction": "Create an array of 5 students and output their names.", "input": "var students = [\n  {name: 'John', age: 19},\n  {name: 'Amy', age: 22},\n  {name: 'Luke', age: 17},\n  {name: 'Alex', age: 18},\n  {name: 'Tom', age: 20}\n];", "output": "names = [students[0].name, students[1].name, students[2].name, students[3].name, students[4].name];\nconsole.log(names);\n// output: ['John', 'Amy', 'Luke', 'Alex', 'Tom']", "category": "Python"}, {"instruction": "Construct a regex expression to extract 3 digits in a string", "input": "", "output": "\\d{3}", "category": "Python"}, {"instruction": "Create a pandas DataFrame based on the given input CSV.", "input": "EmployeeID,EmployeeName,Salary\n1,John,12345\n2,David,23456\n3,Steve,34567", "output": "import pandas as pd\n\ndf = pd.read_csv(\"input.csv\")\nprint(df)", "category": "Python"}, {"instruction": "Suggest a code to remove the third element of a list.", "input": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]", "output": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlist_of_items.pop(2)", "category": "Python"}, {"instruction": "Suggest a code to insert an element at the nth position of a given list.", "input": "list_of_items = [\"apple\", \"banana\", \"grapes\", \"mango\"]", "output": "list_of_items = [\"apple\", \"banana\", \"grapes\", \"mango\"]\n\nlist_of_items.insert(2, \"pineapple\")", "category": "Python"}, {"instruction": "Suggest a code to print the last two elements of a list.", "input": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]", "output": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlast_two = list_of_items[-2:]\nprint(last_two)", "category": "Python"}, {"instruction": "Suggest a code to iterate a list of numbers and add them to a variable.", "input": "list_of_numbers = [10, 20, 30, 40]", "output": "list_of_numbers = [10, 20, 30, 40]\n\ntotal = 0\nfor num in list_of_numbers:\n  total += num", "category": "Python"}, {"instruction": "Construct an algorithm to check for palindrome in a given string.", "input": "", "output": "def is_palindrome(text):\n\trev = ''.join(reversed(text)) \n\treturn rev == text", "category": "Python"}, {"instruction": "Suggest a python code to print all the even numbers from the given list.", "input": "list_of_numbers = [11, 22, 31, 37, 44]", "output": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Propose a fast sorting algorithm for a list of integers", "input": "", "output": "The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n).", "category": "Python"}, {"instruction": "What does a negative index signify in a Python array?", "input": "", "output": "A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1.", "category": "Python"}, {"instruction": "Write a function that prints Fibonacci numbers up to N (N>1).", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Calculate the mean of the following list of numbers: 4, 6, 8, 10.", "input": "", "output": "mean = (4 + 6 + 8 + 10) / 4 = 7.5", "category": "Python"}, {"instruction": "Create a dictionary with the item and their corresponding prices.", "input": "Apple - $2.99\nBanana - $0.99", "output": "d = {'Apple': 2.99, 'Banana': 0.99}", "category": "Python"}, {"instruction": "Write a lambda expression to deduct 10 from a number.", "input": "", "output": "lambda x: x-10", "category": "Python"}, {"instruction": "Create a class Person with a name, age and gender attributes.", "input": "", "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "category": "Python"}, {"instruction": "Write a for loop that iterates through a list of numbers and prints only the even numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "for i in [1,2,3,4,5,6]:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Compare two arrays for equality", "input": "[1, 2, 3]\n[1, 2, 4]", "output": "False", "category": "Python"}, {"instruction": "Sort a given dictionary of strings alphabetically.", "input": "my_dict = {'a':\"apple\", 'c':\"cat\", 'b':\"banana\"}", "output": "my_dict = {'a':\"apple\", 'c':\"cat\", 'b':\"banana\"}\n\n# sort the dictionary\nsorted_dict = {key: my_dict[key] for key in sorted(my_dict.keys())}\n\nprint(sorted_dict)", "category": "Python"}, {"instruction": "Utilize regular expressions to parse and return a list of words from a sentence.", "input": "sentence = \"The quick brown fox jumps over the lazy dog\"", "output": "sentence = \"The quick brown fox jumps over the lazy dog\"\n\n# regular expression\nimport re\nwords = re.findall(r'\\w+', sentence)\n\nprint(words)", "category": "Python"}, {"instruction": "Create a generator expression to print the square of a list of numbers.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "numbers = [1, 2, 3, 4, 5]\n\n# generator expression\nsquares = (num ** 2 for num in numbers)\n\nfor square in squares: \n    print(square)", "category": "Python"}, {"instruction": "Extend the given list of numbers by adding all odd numbers from 0 to 10.", "input": "my_list = [0, 2, 4, 6, 8, 10]", "output": "my_list = [0, 2, 4, 6, 8, 10]\nmy_list.extend([num for num in range(11) if num % 2 != 0])", "category": "Python"}, {"instruction": "Using list comprehension, create a list of all even numbers from 0 to 10.", "input": "", "output": "even_numbers = [num for num in range(11) if num % 2 == 0]", "category": "Python"}]
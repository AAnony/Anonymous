[{"instruction": "Generate a dictionary out of two lists by matching each element in the two lists", "input": "list_a =[2, 3, 4]\nlist_b = [\"a\", \"b\", \"c\"]", "output": "def make_dict(list_a, list_b):\n  dict = {}\n  for a, b in zip(list_a, list_b):\n    dict[a] = b\n\n  return dict", "category": "Python"}, {"instruction": "Create a web page using HTML and CSS that displays a div with some text.", "input": "", "output": "<html>\n   <head>\n      <title>Div Example</title>\n   </head>\n   <body>\n      <div>Hello, welcome to my website!</div>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python code snippet to sum up all the elements in a given dictionary.", "input": "{\n  'a': 10,\n  'b': 15,\n  'c': 20\n}", "output": "d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45", "category": "Python"}, {"instruction": "Create a Java object for a student with the fields 'Name' and 'Marks'.", "input": "", "output": "public class Student { \n \n  // fields \n  String name; \n  int marks; \n \n  // constructor \n  public Student(String name, int marks) { \n    this.name = name; \n    this.marks = marks; \n  } \n \n  // other methods \n}", "category": "Python"}, {"instruction": "Given a key and a value, write a function to store them in a dictionary.", "input": "Key: 'name'\nValue: 'John'", "output": "def add_key_value_pair(key, value, dictionary):\n    dictionary[key] = value", "category": "Python"}, {"instruction": "Generate a list of all pairwise combinations of the numbers in the given list.", "input": "[1,2,3,4]", "output": "def combinations(list_of_numbers):\n  result = []\n\n  for i in range(len(list_of_numbers)):\n    for j in range(len(list_of_numbers)):\n      if i != j:\n        result.append([list_of_numbers[i], list_of_numbers[j]])\n  \n  return result", "category": "Python"}, {"instruction": "Debug this Java program and make the output print \"The answer is 3\".", "input": "public class Debugging {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 2;\n        System.out.println(\"The answer is \" + (x - y));\n    }\n}", "output": "public class Debugging {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 2;\n        System.out.println(\"The answer is \" + (x - y + 1));\n    }\n}", "category": "Python"}, {"instruction": "Design a loop in Ruby that prints \"Hello World\" 10 times.", "input": "", "output": "10.times do \n    puts \u201cHello World\u201d\n end", "category": "Python"}, {"instruction": "How to get the size of a dictionary?", "input": "", "output": "len(dictionary)", "category": "Python"}, {"instruction": "Develop a JavaScript function to convert a date string from the ISO-8601 format to a human-readable format.", "input": "Date String: '2020-06-15'", "output": "function convertISODate(ISOdateString) {\n    const date = new Date(ISOdateString);\n    const dateString = date.toLocaleString('default', {day: 'numeric', month: 'long', year:'numeric'});\n\n    return dateString;\n}\n\nconsole.log(convertISODate('2020-06-15'));\n// Output: June 15, 2020", "category": "Python"}, {"instruction": "Write a MySQL query to display the name and total salary of employees who earn more than the average salary of department 10.", "input": "Table \"Employees\":\n\nName   | Department | Salary \n------ | ---------- | ------ \nJohn   | 10         | 20000  \nDavid  | 10         | 32000  \nAnne   | 10         | 15000  \nJane   | 11         | 26000", "output": "SELECT Name, SUM(Salary) AS Total_Salary\nFROM Employees\nWHERE Department = 10 AND Salary > ( SELECT AVG(Salary)\n  FROM Employees\n  WHERE Department = 10\n)\nGROUP BY Name;", "category": "Python"}, {"instruction": "Convert the following SQL statement to a Pyspark Query.", "input": "SELECT employee_id, name, salary\nFROM employees\nWHERE salary > 50000", "output": "spark.sql(\"SELECT employee_id, name, salary FROM employees WHERE salary > 50000\").show()", "category": "Python"}, {"instruction": "Edit the following Java program and make it compile without any errors.", "input": "public class Main { \n    public static void main(String[] args) { \n        System.print(\"Hello, World!\"); \n    } \n}", "output": "public class Main { \n    public static void main(String[] args) { \n        System.out.println(\"Hello, World!\"); \n    } \n}", "category": "Python"}, {"instruction": "Create a SQL query to return the top 10 most popular books.", "input": "", "output": "SELECT \n    title, COUNT(*) AS num_readers\nFROM books \nLEFT JOIN readers ON books.id = readers.book_id\nGROUP BY title\nORDER BY num_readers DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Write a test case for a function that adds two numbers.", "input": "Function: addTwoNumbers (a, b)", "output": "@Test\npublic void testAddTwoNumbers(){\n    int a = 1;\n    int b = 2;\n    assertEquals(3, addTwoNumbers(a, b));\n}", "category": "Python"}, {"instruction": "What is the difference between shallow copying and deep copying?", "input": "", "output": "Shallow copying is the process of creating a copy of the original object which only contains references to the values contained in the original instance. This means that any shallow copy only contains references to the same objects as the original instance, while any changes made to the copy will be reflected in the original object as well. Deep copying on the other hand, is the process of creating a new instance of the original object with all of its values copied over. This means that any changes made to the copy are not reflected in the original object.", "category": "Python"}, {"instruction": "Write code to evaluate the following expression in C++.", "input": "5 * 4 * 3 * 2 * 1", "output": "int result = 5 * 4 * 3 * 2 * 1;\nstd::cout << \"Result: \" << result << std::endl;\n\nResult: 120", "category": "Python"}, {"instruction": "Design a password validation system using Python code.", "input": "", "output": "import re\n\nMIN_LENGTH = 8\nMAX_LENGTH = 15\n\ndef is_valid_password(password):\n    \n    #check password length\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n\n    #check for at least one digit\n    if re.search(r\"[0-9]\",password) is None:\n        return False\n    \n    #check for at least one uppercase letter\n    if re.search(r\"[A-Z]\",password) is None:\n        return False\n    \n    #check for at least one lowercase letter\n    if re.search(r\"[a-z]\",password) is None:\n        return False\n    \n    #check for at least one special character  \n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password) is None:\n        return False\n\n    #if all conditions are met, password is valid\n    return True", "category": "Python"}, {"instruction": "Analyze the runtime complexity of this algorithm.", "input": "def factorial2(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact", "output": "The runtime complexity of this algorithm is O(n).", "category": "Python"}, {"instruction": "Create a program in Assembly that adds two numbers and prints the result.", "input": "", "output": ".data\n\nnumber1: .word 10\nnumber2: .word 20\n\n.text\n\nmain:\n\tADD word [number1], [number2] \n\tMOV EAX, 0 \n\tMOV EBX, 0 \n\tPUSH [number1] \n\tMOV EAX, [number1] \n\t ADD EBX, EAX\n\tPOP EAX \n\tPRINT num1 \n\tPRINT num2 \n\tPRINT result \n\n\tHALT", "category": "Python"}, {"instruction": "Write a JavaScript program that logs a message to the console.", "input": "\"Hello!\"", "output": "console.log(\"Hello!\");", "category": "Python"}, {"instruction": "Write a code snippet to remove all white spaces from a given string in JavaScript.", "input": "\" Hello World! \"", "output": "let outputString = \"Hello World!\";\noutputString = outputString.replace(/\\s/g, '');  // removes white spaces\nconsole.log(outputString);", "category": "Python"}, {"instruction": "Create a function that takes an array of string elements and sorts them in alphabetical order.", "input": "[\"apple\", \"banana\", \"papaya\", \"kiwi\"]", "output": "def sortStringArray(stringArray): \n    return sorted(stringArray)", "category": "Python"}, {"instruction": "Create a JavaScript object literal with two properties: a key of name with a value of 'Bob' and a key of age with a value of 30.", "input": "", "output": "let bob = {\n    name: 'Bob',\n    age: 30\n};", "category": "Python"}, {"instruction": "Generate an array of increasing numbers beginning from 1 of length n.", "input": "n=5", "output": "def generate_array(n):\n    \"\"\"\n    Generate an array of increasing numbers beginning from 1 of length n\n    \"\"\"\n    return [i for i in range(1, n+1)]\n\n\nprint(generate_array(5))", "category": "Python"}, {"instruction": "Construct a for loop to check for prime numbers up to a given number.", "input": "n = 20", "output": "# construct a for loop to check for prime numbers up to 20\nfor num in range(2, n+1):\n    isPrime = True\n    \n    for i in range(2, num):\n        if (num % i == 0):\n            isPrime = False\n            break\n    if isPrime:\n        print(num, \" is a prime number\")", "category": "Python"}, {"instruction": "Develop an Angular application that displays the current date and time.", "input": "", "output": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <h1>{{ dateTime | date:'dd/MM/yyyy HH:mm:ss' }}</h1>\n  `\n})\nexport class AppComponent {\n  dateTime = new Date();\n}", "category": "Python"}, {"instruction": "Write a regular expression to match a word, which has at least five letters and that only consists of lowercase alphabets.", "input": "", "output": "[a-z]{5,}", "category": "Python"}, {"instruction": "Find the number of unique subsets of a given set", "input": "given_set = {1, 2, 3}", "output": "def unique_subsets_count(given_set): \n    \"\"\"\n    Find the number of unique subsets of a given set\n    \n    Parameters\n    ----------\n    given_set: Set of elements\n    \n    Returns\n    -------\n    count: Number of unique subsets\n    \"\"\"\n             \n    count = 1 << len(given_set)\n    \n    return count", "category": "Python"}, {"instruction": "Generate a random number between 1 and 10, inclusive.", "input": "", "output": "import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)", "category": "Python"}, {"instruction": "Create a script in Python for printing the Fibonacci series for a given range of numbers.", "input": "start = 1\nend = 10", "output": "a,b = 0,1\nfor i in range(start, end+1):\n    print(a)\n    a,b = b,a+b", "category": "Python"}, {"instruction": "Write a function to join a list of strings using a given character.", "input": "", "output": "def join_list(list, char):\n    return char.join(list)", "category": "Python"}, {"instruction": "Create a React component for a dropdown menu.", "input": "The menu should list the following options: Home, About, Contact.", "output": "import React, { Component } from 'react';\n\nclass DropdownMenu extends Component {\n  state = {\n    displayMenu: false,\n  };\n\n  showDropdownMenu = (event) => {\n    event.preventDefault();\n    this.setState({ displayMenu: true }, () => {\n      document.addEventListener('click', this.hideDropdownMenu);\n    });\n  }\n\n  hideDropdownMenu = () => {\n    this.setState({ displayMenu: false }, () => {\n      document.removeEventListener('click', this.hideDropdownMenu);\n    });\n  }\n\n  render() {\n    return (\n      <div  className=\"dropdown\" style={{background:\"#fafafa\",boxShadow: \"0px 8px 16px 0px rgba(0,0,0,0.2)\"}} >\n        <div className=\"button\" onClick={this.showDropdownMenu}> Menu </div>\n        { this.state.displayMenu ? (\n        <ul>\n          <li><a href=\"#\">Home</a></li>\n          <li><a href=\"#\">About</a></li>\n          <li><a href=\"#\">Contact</a></li>\n        </ul>\n        ):\n        (\n          null\n        )\n        }\n      </div>\n    );\n  }\n}\nexport default DropdownMenu;", "category": "Python"}, {"instruction": "Write a ReactJS code to render the following DOM structure.", "input": "<div class=\"container\">\n  <h1>Welcome!</h1>\n  <div>\n    <h2>I'm a React App</h2>\n    <p>This is an example code to render a DOM structure.</p>\n  </div>\n</div>", "output": "import React from 'react';\n\nconst App = () => {\n  return(\n    <div className=\"container\">\n      <h1>Welcome!</h1>\n      <div>\n        <h2>I'm a React App</h2>\n        <p>This is an example code to render a DOM structure.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;", "category": "Python"}, {"instruction": "Construct an R script that sorts given numbers in ascending order.", "input": "", "output": "nums <- c(3, 8, 5, 7, 2, 6)\nsorted_nums <- sort(nums)\nprint(sorted_nums)", "category": "Python"}, {"instruction": "Explain how expression-oriented programming works in Java.", "input": "", "output": "Expression-oriented programming is a programming paradigm where all commands are based on expressions. In Java, expression-oriented programming is used with Java Lambda Expressions, where an expression is executed by passing the command inside parentheses and executing that expression in the context of the method. This approach enables the expression to be executed immediately, as opposed to the traditional approach of declaring a variable, calling a method, and assigning a value to it.", "category": "Python"}, {"instruction": "Compose a SQL query to get the total number of books", "input": "", "output": "SELECT COUNT(*) FROM books;", "category": "Python"}, {"instruction": "Design a CSS style sheet for a given HTML table.", "input": "", "output": "table {\n  border: 1px solid black;\n  border-collapse: collapse;\n}\n\nth, td {\n  padding: 5px;\n  border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Create a program that can identify the next number in a sequence.", "input": "Find the next number in 3, 7, 11, 15.", "output": "def get_next_number(arr):\n    return arr[-1] + (arr[-1] - arr[-2])\n\nif __name__ == \"__main__\":\n    arr = [3, 7, 11, 15]\n    print(get_next_number(arr))", "category": "Python"}, {"instruction": "Return the index of the value if it is present in the list or -1 if it is not present.", "input": "", "output": "def search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Implement the Euclidean distance formula using a def function in Python.", "input": "", "output": "def euclidean_dist(x, y):\n    # write function here\n    dist = 0\n    # iterate through each coordinate of the points\n    for i in range(len(x)):\n        # calculate the distance between corresponding coordinates\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)", "category": "Python"}, {"instruction": "Create a Java class for representing a student object.", "input": "", "output": "public class Student {\n    private String id;\n    private String name;\n    private int age;\n    \n    public Student(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n     public String getId() {\n         return id;\n     }\n\n     public void setId(String id) {\n        this.id = id;\n     }\n\n     public String getName() {\n        return name;\n     }\n\n     public void setName(String name) {\n        this.name = name;\n     }\n\n     public int getAge() {\n        return age;\n     }\n\n     public void setAge(int age) {\n        this.age = age;\n     }\n }", "category": "Python"}, {"instruction": "Write a MySQL query to display the contents of the table \"users\" sorted in descending order by \"age\".", "input": "Table name: users\nFields: name, age", "output": "SELECT * FROM users ORDER BY age DESC;", "category": "Python"}, {"instruction": "Complete the following Java code to sort a list of integers.", "input": "List<Integer> list = Arrays.asList(5, 2, 8, 1);\n\n// Code to sort", "output": "List<Integer> list = Arrays.asList(5, 2, 8, 1);\n\nCollections.sort(list);", "category": "Python"}, {"instruction": "Find the maximum number from an array of numbers using JavaScript.", "input": "let array = [7, 9, 4, 1, 8]", "output": "const getMax = arr => Math.max(...arr);\nconsole.log(getMax(array)); // 9", "category": "Python"}, {"instruction": "Create a boolean condition to check if the value is a real number.", "input": "", "output": "typeof value == 'number' && isFinite(value)", "category": "Python"}, {"instruction": "Write Python code to extend a string to be twice as long as the original string", "input": "Example string: \"Hello world\"", "output": "input = \"Hello world\"\noutput = input + input", "category": "Python"}, {"instruction": "Suggest how would you use a Set in the following JavaScript code.", "input": "let users = {\n  \"John\": true, \n  \"Sandy\": true, \n  \"Stephen\": true\n}", "output": "let users = new Set([\"John\", \"Sandy\", \"Stephen\"]);\n\nif (users.has(\"John\")) {\n    console.log(\"John is present!\");\n}", "category": "Python"}, {"instruction": "Sort a list of words by the frequency of their occurrence.", "input": "dog cat bed dog mouse rat", "output": "\"\"\"\nSort a list of words by the frequency of their occurrence\n\"\"\"\n\ndef sort_words_by_frequency(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)\n    return [word for word, _ in sorted_words]\n\nif __name__ == '__main__':\n    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))", "category": "Python"}, {"instruction": "How would you check if a string contains only digits in C++?", "input": "", "output": "std::string str = \"123456\";\nbool result = std::all_of(str.begin(), str.end(), ::isdigit);", "category": "Python"}, {"instruction": "How would you write a function in C++ to check if the number 16 is a prime number?", "input": "", "output": "bool isPrime(int n) \n{ \n    if (n <= 1)  \n        return false; \n\n    for (int i = 2; i < n; i++) \n        if (n % i == 0) \n            return false; \n\n    return true; \n}", "category": "Python"}, {"instruction": "Write an SQL query to update the column 'name' to 'John' in the table 'employees'.", "input": "", "output": "UPDATE employees SET name = 'John';", "category": "Python"}, {"instruction": "Define a class in Python that takes a string and returns the length of the string.", "input": "", "output": "class StringLength:\n  def __init__(self, string):\n    self.string = string\n\n  def getLength(self):\n    return len(self.string)", "category": "Python"}, {"instruction": "Implement a basic calculator in Java.", "input": "", "output": "import java.util.Scanner;\n \npublic class Calculator {\n    public static void main(String[] args) {\n        int number1, number2;\n        char operation;\n        double result;\n \n        Scanner scanner = new Scanner(System.in);\n \n        System.out.print(\"Enter number 1: \");\n        number1 = scanner.nextInt();\n \n        System.out.print(\"Enter number 2: \");\n        number2 = scanner.nextInt();\n \n        System.out.print(\"Choose operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n \n        switch(operation) {\n            case '+':\n                result = number1 + number2;\n                break;\n            case '-':\n                result = number1 - number2;\n                break;\n            case '*':\n                result = number1 * number2;\n                break;\n            case '/':\n                result = (double) number1 / number2;\n                break;\n            default:\n                System.out.println(\"Invalid operation!\");\n                return;\n        }\n \n        System.out.println(\"Result: \" + result);\n    }\n}", "category": "Python"}, {"instruction": "Generate a SQL query to select all the columns from a table named 'department' where the department name is 'Marketing'.", "input": "", "output": "SELECT * FROM department WHERE department_name = 'Marketing';", "category": "Python"}, {"instruction": "You need to write an API request in Python to return JSON data from an API endpoint.", "input": "", "output": "import requests\n\nAPI_ENDPOINT = 'api.example.com/data'\n\nresponse = requests.get(API_ENDPOINT)\n\nif response.status_code == 200:\n    data = response.json()", "category": "Python"}, {"instruction": "You are given a list of numbers. Construct a for loop to filter out the odd numbers from the list.", "input": "arr = [1,2,3,4,5]", "output": "odds = []\nfor num in arr:\n  if num % 2 == 1:\n    odds.append(num)\nprint(odds)", "category": "Python"}, {"instruction": "Write an assembly code to calculate the sum of a series of numbers.", "input": "Series of numbers: [1, 5, 8, 10]", "output": "MOV      R1, #1 ; Load the first number\n        ADD      R2, R1 ; Initialize the sum\nLOOP    CMP      R1, #10 ; Check if we have reached the last number\n        BEQ      SUM    ; If yes, jump to SUM\n        ADD      R1, #1 ; Increment the number\n        ADD      R2, R1 ; Add the number to sum\n        B        LOOP   ; Loop\nSUM     ; At the end, the sum is in R2", "category": "Python"}, {"instruction": "Change this list of words into a list of strings.", "input": "my_list = [\"apple\", \"banana\", \"orange\"]", "output": "my_list = [\"apple\", \"banana\", \"orange\"]\n\nmy_list = list(map(str, my_list)) # The output will be['apple', 'banana', 'orange']", "category": "Python"}, {"instruction": "Create a function that returns the complement of a given DNA string (A \u2192 T, C \u2192 G).", "input": "dna_string = \"ATCGACG\"", "output": "def get_complement(dna_string):\n    \"\"\"Get complement of given DNA string\"\"\"\n\n    # create a dictionary with complementary keys and values\n    dna_complement = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}\n\n    # create an output variable\n    output_str = \"\"\n\n    # iterate over each char in the dna string and add its complement to the output string\n    for char in dna_string:\n        output_str += dna_complement[char]\n\n    return output_str", "category": "Python"}, {"instruction": "What data type is the following statement?", "input": "float score = 73.2", "output": "The data type of the statement is a float.", "category": "Python"}, {"instruction": "Calculate the average of the given two integers.", "input": "Integer 1: 2\nInteger 2: 5", "output": "The average of 2 and 5 is 3.5.", "category": "Python"}, {"instruction": "Write a function in the Python language to convert a string to a list.", "input": "my_string = \"Welcome to the world of GPT models\"", "output": "def string_to_list(my_string):\n    return my_string.split()", "category": "Python"}, {"instruction": "Design an Android Launcher activity with an appropriate layout.", "input": "", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is the Launcher\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</android.support.constraint.ConstraintLayout>", "category": "Python"}, {"instruction": "How would you write a program to find the number of prime numbers between 0 and 100?", "input": "", "output": "def count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \n\nprint(count_prime_num(0, 100))", "category": "Python"}, {"instruction": "Find the maximum and minimum values of a given list of integers in Python.", "input": "", "output": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)", "category": "Python"}, {"instruction": "What data structure would be best to store an employee roster containing their name, age, and gender?", "input": "", "output": "The best data structure for storing an employee roster containing their name, age, and gender would be a hash table. A hash table is a data structure that allows for fast lookups and inserts by mapping values to keys. Each employee can be stored as a key-value pair, with their name, age, and gender as the respective values.", "category": "Python"}, {"instruction": "Code a solution in Python to replace all the occurences of a specific word in a string.", "input": "sentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"", "output": "def replace_word(sentence, word, replacement):\n    words = sentence.split(\" \")\n    new_sentence = \"\"\n    for w in words:\n        if w == word:\n            w = replacement\n        new_sentence += w + \" \"\n    return new_sentence\n\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\n\nprint(replace_word(sentence, word, replacement))", "category": "Python"}, {"instruction": "Write a code to select all columns from a table named 'students' where the age is between 22 and 28", "input": "", "output": "SELECT * FROM students WHERE age BETWEEN 22 AND 28;", "category": "Python"}, {"instruction": "Develop a Chatbot that can respond to the user's queries about programming languages.", "input": "", "output": "def chatbot():\n    while True: \n        # User's query \n        query = input(\"What would you like to know about programming languages? \")\n\n        # Checking if query is relevant \n        if \"language\" in query:\n            # Provide response \n            print(\"There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java.\")\n        else: \n            # Provide different response for irrelevant query \n            print(\"I'm sorry, I don't understand your query. Please ask me something else.\")", "category": "Python"}]
[{"instruction": "Create a function called \"sum\" which returns the sum of the two given numbers", "input": "", "output": "def sum(x, y):\n    return x+y", "category": "Python"}, {"instruction": "Describe the method to find the factorial of a given number.", "input": "", "output": "The factorial of a given number n is the product of all positive integers less than or equal to n. The factorial of a number can be calculated using a loop to multiple all of the integers up to the given number, or it can be calculated using a recursive method where the factorial(n) = n*factorial(n-1).", "category": "Python"}, {"instruction": "Write a query to find all employees whose age is greater than 25.", "input": "", "output": "SELECT * FROM employees WHERE age > 25;", "category": "Python"}, {"instruction": "Sort a given array in ascending order using the Gnome sort algorithm.", "input": "array = [8, 3, 6, 1, 5]", "output": "def gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n            if (i == 0): \n                i = 1\n    return array", "category": "Python"}, {"instruction": "Train a linear regression model on a given dataset.", "input": "dataset = pd.read_csv('dataset.csv')", "output": "X = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create an array of strings, containing exactly three elements.", "input": "", "output": "string_array = [\"element1\", \"element2\", \"element3\"]", "category": "Python"}, {"instruction": "Given two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.", "input": "s1 = \"Hello there!\"\ns2 = \"Hi there!\"", "output": "def longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n    return result", "category": "Python"}, {"instruction": "Write a function to delete a given character from a string.", "input": "string = \"GPT MODEL\"\ncharacter = 'M'", "output": "def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Write a css class to change a div's background color to green.", "input": "", "output": ".green-background {\n  background-color: green;\n}", "category": "Python"}, {"instruction": "Create a HTML page with a search bar.", "input": "", "output": "<html>\n  <body>\n    <h1>Search Page</h1>\n    <form action=\"search.php\" type=\"GET\">\n      <input type=\"text\" name=\"text\"/>\n      <input type=\"submit\" name=\"submit\" value=\"Search\"/> \n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all emails from a customer table.", "input": "", "output": "SELECT email FROM customer;", "category": "Python"}, {"instruction": "Create a function to insert an element at a given index into a given list.", "input": "test_list = [1, 2, 4, 5]\ninserted_element = 3\nindex = 2", "output": "def insert_element(test_list, inserted_element, index):\n    test_list.insert(index, inserted_element)\n    return test_list", "category": "Python"}, {"instruction": "Given a 2D array, write a program to find the maximum path sum.", "input": "test_array = [[5, 6, 1],\n              [4, 2, 3],\n              [7, 8, 9]]", "output": "def max_path_sum(test_array): \n    row = max_row = len(test_array) \n    col = max_col = len(test_array[0]) \n\n    for row in range(max_row - 1, -1, -1): \n        for col in range(max_col): \n            if (row == max_row - 1): \n                test_array[row][col] \n            else: \n           # Choose the route with maximum sum \n                test_array[row][col] += max(test_array[row + 1][col], test_array[row + 1][col + 1]); \n    # Displays the maximum sum \n    print(test_array[0][0]);", "category": "Python"}, {"instruction": "Create a function to print the Fibonacci numbers up to a given number n.", "input": "", "output": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    while a < n:\n        print(a) \n        c = a + b\n        a = b\n        b = c", "category": "Python"}, {"instruction": "Create a function that prints a list of all the even numbers from a given list of integers.", "input": "test_list = [1, 2, 3, 4, 5, 6]", "output": "def print_even(test_list):\n    even_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            even_list.append(num)\n    print(even_list)", "category": "Python"}, {"instruction": "What is the first index of the substring \"mod\" in the string?", "input": "string = \"GPT MODEL\"", "output": "int index = 4", "category": "Python"}, {"instruction": "Describe an algorithm to sort an array of integers in increasing order.", "input": "[4, 3, 1, 9, 11]", "output": "A simple bubble sort algorithm can be used to sort an array of integers in increasing order. We start at the beginning of the array and compare each pair of adjacent items and swap them if they are in the wrong order. We repeat this process until the array is sorted. For the input array [4, 3, 1, 9, 11], a single pass of bubble sorting the array would go as follows:\n[4, 3, 1, 9, 11] -> [3, 4, 1, 9, 11] -> [3, 1, 4, 9, 11] -> [3, 1, 4, 9, 11] -> [1, 3, 4, 9, 11]. The algorithm is then done since no swaps have been made in the last pass. The final sorted array is [1, 3, 4, 9, 11].", "category": "Python"}, {"instruction": "Create a SQL query to find all the flights departing from city X that are operated by carrier Y.", "input": "", "output": "SELECT * FROM flights\nWHERE origin_city='X' AND carrier='Y';", "category": "Python"}, {"instruction": "Construct a lambda function to find all odd numbers in a given list.", "input": "List of numbers: [2, 3, 7, 8, 10]", "output": "list_of_nums = [2, 3, 7, 8, 10]\nodd_nums = list(filter(lambda num: num % 2 != 0, list_of_nums))", "category": "Python"}, {"instruction": "Run the same transormation to the text using the provided code.", "input": "Text: \"He was very happy!\"\nCode: \ntext = text.lower()\ntext = text.replace('!', '.')", "output": "\"he was very happy.\"", "category": "Python"}, {"instruction": "Write the output of this Python code.", "input": "a = 10\nb = 5\nc = 6\n\nprint(a + b * c)", "output": "56", "category": "Python"}, {"instruction": "Write a SQL query to find the number of books published after the year 2000.", "input": "", "output": "SELECT COUNT(*) FROM books WHERE year > 2000;", "category": "Python"}, {"instruction": "Create a function in C++ to find the maximum and minimum elements in a given array.", "input": "", "output": "#include<iostream>\n \nusing namespace std;\n \nvoid minMax(int arr[], int n, int *min, int *max)\n{\n\t*min = arr[0];  // Initialize minimum element\n\t*max = arr[0];  // Initialize maximum element\n \n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (arr[i] > *max)\n\t\t\t*max = arr[i];\n \n\t\tif (arr[i] < *min)\n\t\t\t*min = arr[i];\n\t}\n}\n\n// Driver code\nint main()\n{\n\tint arr[] = {10, 314, 2, 6, 5};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tint min, max;\n minMax(arr, n, &min, &max);\n\tcout << \"Minimum element = \" << min << endl;\n\tcout << \"Maximum element = \" << max << endl;\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Construct an HTTP request to fetch the HTML of a given web page.", "input": "url = \"example.com\"", "output": "GET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nConnection: keep-alive", "category": "Python"}, {"instruction": "Write a function in Python to calculate the Euclidean Distance between two points.", "input": "point1 = [-1, 0]\npoint2 = [4, 7]", "output": "def euclidean_distance(point1, point2):\n from math import sqrt\n return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)", "category": "Python"}, {"instruction": "Create a Python function to insert a new element in a list at the given index.", "input": "list1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6", "output": "def insert_element(lst, idx, element):\n lst.insert(idx, element)\n return lst\n\nlist1 = insert_element(list1, index, element)\nprint(list1)", "category": "Python"}, {"instruction": "Identify the language used in this code snippet.", "input": "string a = \"Hello\";\nstring b = \" World\";\n\ncout << a + b << endl;", "output": "C++", "category": "Python"}, {"instruction": "Write a SQL query to select all columns from the table student except the column grade.", "input": "", "output": "SELECT * FROM student WHERE NOT grade IS NULL;", "category": "Python"}, {"instruction": "Create a SQL query to find all users from the user table whose age is greater than 30.", "input": "", "output": "SELECT * FROM user WHERE age > 30;", "category": "Python"}, {"instruction": "Write a function in Python to convert JSON data into a Python dictionary.", "input": "json_data = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\ndef json_to_dict(json_data):\n return json.loads(json_data)\n\ndata = json_to_dict(json_data)\nprint(data)", "category": "Python"}, {"instruction": "Edit the given Python code to make the algorithm run faster.", "input": "def slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output": "def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result", "category": "Python"}, {"instruction": "Create a Java program to find the maximum element of an array.", "input": "arr = [2, 3, 1, 4, 5]", "output": "public class Maximum {\n\tpublic static int findMax(int[] arr) {\n\t\tint max = arr[0];\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif(arr[i] > max)\n\t\t\t\tmax = arr[i];\n\t\t}\n\t\treturn max;\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tint arr[] = {2, 3, 1, 4, 5};\n\t\tint max = findMax(arr);\n\t\tSystem.out.println(\"Maximum Element: \" + max);\n\t}\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet for validating an email address.", "input": "", "output": "function validateEmail(email) {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}", "category": "Python"}, {"instruction": "Create a Python class with the same content as a JSON string.", "input": "myjson_string = '{\"name\": \"John\", \"age\": 20}'", "output": "import json\n\nclass Person:\n def __init__(self, json_string):\n  data = json.loads(json_string)\n  self.name = data['name']\n  self.age = data['age']\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)", "category": "Python"}, {"instruction": "Create a Python program to remove the characters from specific index within a string.", "input": "mystring = \"Hello, World!\"\nindex = 5", "output": "mystring = \"Hello, World!\"\nindex = 5\n\nresult = mystring[:index] + mystring[index+1:]\n\nprint(\"Result after removing characters from index {}: {}\".format(index, result))", "category": "Python"}, {"instruction": "Construct a boolean expression using 'or', 'and' and 'not' operators to check if a given number is even.", "input": "", "output": "(num % 2 == 0) or ((not num % 2 == 0) and (not num % 2 == 1))", "category": "Python"}, {"instruction": "Using Java, create a method that takes an array of integers and returns the maximum value.", "input": "", "output": "public static int getMaxValue(int[] array) {\n  int maxValue = array[0];\n  for(int i=1; i < array.length; i++) {\n    if(array[i] > maxValue)\n      maxValue = array[i];\n  }\n  return maxValue;\n}", "category": "Python"}, {"instruction": "Read through the code and write the expected output.", "input": "#include <iostream>\n\nint main() \n{\n    int x[] = {3, 5, 7, 8};\n    for (int i = 0; i < 4; i++) \n    {\n        std::cout << x[i] << '\\n';\n    }\n    return 0;\n}", "output": "3\n5\n7\n8", "category": "Python"}, {"instruction": "Run this SQL query and write the output.", "input": "SELECT DISTINCT course_name\nFROM course_list\nWHERE semester=\u2019Winter\u2019;", "output": "Database Management\nStatistics\nComputer Programming\nApplied Algorithms", "category": "Python"}, {"instruction": "Create a Sinatra App to send the form data to the server.", "input": "Form Name: user_form", "output": "require 'sinatra'\n\npost '/user_form' do\n  # Process the submission\n  \"Form successfully submitted!\"\nend", "category": "Python"}, {"instruction": "Create an android app with a search feature.", "input": "Search bar: Top of the app", "output": "SearchView searchView = findViewById(R.id.search_field); //Find search field\nsearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n        @Override\n        public boolean onQueryTextSubmit(String query) {\n            //Enter your search logics\n            return false;\n        }\n\n        @Override\n        public boolean onQueryTextChange(String newText) {\n            //Enter your logics\n            return false;\n        }\n});", "category": "Python"}, {"instruction": "Create an API endpoint for handling user authentication.", "input": "Endpoint URL: www.example.com/auth", "output": "@app.route(\"/auth\", methods=['POST'])\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)", "category": "Python"}, {"instruction": "Create a Recursive Function to print out the Fibonacci numbers.", "input": "Number: 10", "output": "public static int fibonacci(int n) \n{ \n    if (n <= 1) \n       return n; \n    return fibonacci(n-1) + fibonacci(n-2); \n} \n  \n// Print first 10 numbers of the fibonacci sequence\nfor (int i = 0; i < 10; i++) \n    System.out.println(fibonacci(i));", "category": "Python"}, {"instruction": "Assign a correct data type for the given variables.", "input": "Variable 1: numberOfApples\nVariable 2: userName", "output": "Variable 1: int\nVariable 2: String", "category": "Python"}, {"instruction": "Create a class in Java and set its variable members.", "input": "Class Name: Student\nVariables: \n- name: String\n- dob: Date\n- rollNo: int", "output": "public class Student {\n    private String name;\n    private Date dob;\n    private int rollNo;\n\n    public Student(String name, Date dob, int rollNo) {\n        this.name = name;\n        this.dob = dob;\n        this.rollNo = rollNo;\n    }\n}", "category": "Python"}, {"instruction": "Convert the given XML structure into JSON.", "input": "<article>\n    <title>Car</title>\n    <body>\n        <section>\n            <header>Headline</header>\n            <p>Text about cars</p>\n        </section>\n    </body>\n</article>", "output": "{\n    \"article\": {\n        \"title\": \"Car\",\n        \"body\": {\n            \"section\": {\n                \"header\": \"Headline\",\n                \"p\": \"Text about cars\"\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Complete this function to add two matrices.", "input": "def add_matrices(a, b):\n    # TODO: write code to add two matrices\n    # matrix a and b have the same dimensions", "output": "def add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n\n    return result", "category": "Python"}, {"instruction": "Merge the two JSON objects into one object.", "input": "Object 1:\n{\n    \"name\": \"fruits\"\n    \"data\": []\n}\nObject 2:\n{\n    \"name\": \"vegetables\"\n    \"data\": []\n}", "output": "{\n    \"name\": [\"fruits\", \"vegetables\"],\n    \"data\": []\n}", "category": "Python"}, {"instruction": "Perform a web scraping to retrieve the prices of a specific product.", "input": "Website: www.amazon.com\nProduct: iPhone 12", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nwebsite = requests.get('https://www.amazon.com/Apple-iPhone-12-Unlocked-128GB/dp/B08HeG719F/ref=sr_1_1')\nsoup = BeautifulSoup(website.content, 'html.parser')\n\nprice_divs = []\nprice_divs = soup.find_all('span', {'class': 'a-price-whole'})\n\nfor price_div in price_divs:\n    print(price_div.text)", "category": "Python"}, {"instruction": "Create a SQL query to find the most popular language in a given year.", "input": "Table Name: Language_Usage\nTable Schema: language VARCHAR(100), uses INT, year INT", "output": "SELECT language, MAX(uses) as max_uses \nFROM Language_Usage \nWHERE year = given_year \nGROUP BY language\nORDER BY uses DESC", "category": "Python"}, {"instruction": "Identify the correct regular expression for a string that starts with a letter and is followed by any number of letters and numbers.", "input": "-", "output": "^[a-zA-Z][a-zA-Z0-9]*$", "category": "Python"}, {"instruction": "Write a function that calculates the sum of the digits of a number.", "input": "Number: 13", "output": "def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))", "category": "Python"}, {"instruction": "What is the class of the word \"training\" in the following sentence?", "input": "She was going for a training session.", "output": "Noun, NN.", "category": "Python"}, {"instruction": "Complete the function so that it returns the minimum element in the provided list.", "input": "def min_element(lis):\n    # TODO: write code to find and return the minimum element in the list", "output": "def min_element(lis):\n    # set min to first element in the list\n    min = lis[0]\n  \n    # iterate over the list and compare each element to \n    # the current minimum. If a smaller element is found, \n    # update min. \n    for x in lis:\n        if x < min: \n            min = x\n  \n    # return min\n    return min", "category": "Python"}, {"instruction": "Identify the standard algorithm used to solve the following problem.", "input": "Problem: DNA sequencing", "output": "Dynamic Programming (DP).", "category": "Python"}, {"instruction": "Generate a list of all possible combinations of the given set of numbers.", "input": "Set of numbers: [1,2,3]", "output": "[[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "category": "Python"}, {"instruction": "Create a query to find all users younger than 19 years old in a database table called \"users\".", "input": "", "output": "SELECT * FROM users WHERE age < 19;", "category": "Python"}, {"instruction": "Write a SQL query to select all Colleges from the table \"Universities\" whose enrollment is higher than 10,000 students.", "input": "", "output": "SELECT Name \nFROM Universities \nWHERE Enrollment > 10000;", "category": "Python"}, {"instruction": "Explain the purpose of using variable names in program code.", "input": "", "output": "Variable names are used in programming code to identify specific pieces of data and make it easier to access and manipulate. They provide a concise way to reference a specific value, making the code more readable and understandable for other programmers.", "category": "Python"}, {"instruction": "You need to read a given string and convert it to an appropriate list object in JavaScript.", "input": "\"alpha, beta, gamma\"", "output": "let list = \"alpha, beta, gamma\".split(\", \");", "category": "Python"}, {"instruction": "Read an array and return the contents in a singple comma-separated string in JavaScript.", "input": "[1, 5, 10]", "output": "function arrToString(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ',';\n    }\n    return str.substring(0, str.length - 1);\n}", "category": "Python"}, {"instruction": "Write a SQL query to get the names and ages of all the people who are 25 years old.", "input": "", "output": "SELECT name, age FROM PEOPLE WHERE age = 25;", "category": "Python"}, {"instruction": "You need to reverse the following array using JavaScript.", "input": "[1,3,5,7]", "output": "function reverseArray(arr) {\n    let revArray = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        revArray.push(arr[i]);\n    }\n    return revArray;\n}", "category": "Python"}, {"instruction": "Create a Ruby function to find the number of characters within a given string.", "input": "", "output": "def character_count(string)\n  string.size\nend", "category": "Python"}, {"instruction": "Write a code using PHP to calculate the difference between two dates.", "input": "May 27th, 2020, June 11th, 2020", "output": "$date1 = new DateTime(\"May 27th, 2020\"); \n$date2 = new DateTime(\"June 11th, 2020\"); \n\n$diff = $date2->diff($date1); \n  \necho $diff->format(\"%d days\");", "category": "Python"}, {"instruction": "Sum up an array of numbers to a single number using JavaScript.", "input": "[1, 2, 3, 4]", "output": "function sumArray(arr) {\n    let sum = 0;\n    arr.forEach(function(item){\n        sum += item;\n    });\n    return sum;\n}", "category": "Python"}, {"instruction": "Translate the following Array of characters into a String in Java.", "input": "['h', 'e', 'l', 'l', 'o']", "output": "String s = new String(new char[]{'h','e','l','l','o'});", "category": "Python"}, {"instruction": "Create a Node.js server that serves up a webpage when a GET request is received.", "input": "", "output": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'GET' && req.url === '/') {\n    fs.readFile('index.html', (err, data) => {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(data);\n    });\n  }\n});\n\nserver.listen(8000);", "category": "Python"}, {"instruction": "Create a function in Rust that takes two strings and returns true if they are anagrams.", "input": "", "output": "fn anagrams(s1: &str, s2: &str) -> bool {\n    let s1 = s1.to_lowercase().chars().collect::<Vec<char>>();\n    let s2 = s2.to_lowercase().chars().collect::<Vec<char>>();\n    s1.sort_unstable();\n    s2.sort_unstable();\n    s1 == s2\n}", "category": "Python"}, {"instruction": "Encrypt a given string using AES encryption algorithm.", "input": "String: 'Hello, world!'\nKey: '1234'", "output": "final String encryptionKey = \"1234\";\nfinal String plainText = \"Hello, world!\";\ntry {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec secretKey = new SecretKeySpec(encryptionKey.getBytes(), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    String encryptedString = Base64.getEncoder().encodeToString(cipher.doFinal(plainText.getBytes(\"utf-8\")));\n} catch (Exception ex) \n{ \n    System.err.println(\"AES encryption error: \" + ex.getMessage()); \n}", "category": "Python"}, {"instruction": "Create a function in Scala that takes a parameter x and returns the square of x.", "input": "", "output": "def square (x: Int) : Int = \n  x * x", "category": "Python"}, {"instruction": "Create an HTML page with a table and list 3 books in it.", "input": "", "output": "<html>\n  <head>\n    <title>Books</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Author</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>The Catcher in the Rye</td>\n          <td>J. D. Salinger</td>\n        </tr>\n        <tr>\n          <td>The Great Gatsby</td>\n          <td>F. Scott Fitzgerald</td>\n        </tr>\n        <tr>\n          <td>To Kill a Mockingbird</td>\n          <td>Harper Lee</td>\n        </tr>\n      </tbody>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Parse the following JSON string and create a JavaScript object.", "input": "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}", "output": "const jsonString = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}';\n\nconst obj = JSON.parse(jsonString);\nconsole.log(obj);\n// {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}", "category": "Python"}, {"instruction": "Create a JavaScript function to calculate the total price of an order.", "input": "const items = [ \n  { \n    name: 'Toothbrush', \n    price: 10.00\n  }, \n  { \n    name: 'Toothpaste', \n    price: 4.50\n  }\n]", "output": "function calculateTotalPrice(items) {\n  let total = 0;\n  for (let item of items) {\n    total += item.price\n  }\n  return total;\n}", "category": "Python"}, {"instruction": "Write a code for converting a temperature from Fahrenheit to Celsius in Java.", "input": "", "output": "public static double fToC(double f) {\n    double c = (f - 32) * (5.0/9.0);\n    return c;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to calculate the number of employees in the company who earn wages greater than 50000 USD.", "input": "Table Name: employees\nColumns: emp_id (int), emp_name (varchar), salary (int)", "output": "SELECT COUNT(*) \nFROM employees \nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Write a Python method to determine if a string contains all unique characters.", "input": "string variable: str =\u201cIm so excited to learn GPT\u201d", "output": "def isUnique(str): \n\tstr_set = set() \n\tfor ch in str: \n\t\tif ch in str_set: \n\t\t\treturn False\n\t\telse:\n\t\t\tstr_set.add(ch)\n\t\t\t\n\treturn True", "category": "Python"}, {"instruction": "Generate code to create an array of 5 random integers between 0 and 10.", "input": "", "output": "arr = [];\nfor(let i=0; i<5; i++){\n    arr.push(Math.floor(Math.random() * 11));\n}\n\n// Result: arr = [4, 6, 8, 2, 9]", "category": "Python"}, {"instruction": "Train a machine learning model for text categorization with an input text and labels.", "input": "Text = \"This is an example of text\"\nLabels = [\"example\", \"text\"]", "output": "from sklearn.svm import SVC\n\n# Create a support vector machine for text categorization\nclf = SVC()\n\n# Train the model\nclf.fit(Text, Labels)", "category": "Python"}, {"instruction": "Construct a simple linear regression model using a training dataset.", "input": "import numpy as np\nX_train = np.array([[1,2], [3,4], [5,6]])\ny_train = np.array([2, 4, 6])", "output": "from sklearn.linear_model import LinearRegression \n\n# create LinearRegression model \nmodel = LinearRegression() \n  \n# train the model using the training sets \nmodel.fit(X_train, y_train)", "category": "Python"}, {"instruction": "Generate a unique 10-character password which includes both alphabets and digits.", "input": "", "output": "S0AF8cEw#7", "category": "Python"}, {"instruction": "Create a scatterplot of some toy dataset using a python library.", "input": "import numpy as np\nX_train = np.array([[1,2], [3,4], [5,6]])\nY_train = np.array([1,2,3])", "output": "import matplotlib.pyplot as plt\nplt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train)", "category": "Python"}, {"instruction": "Write an SQL query to update the salary of employee with Id 4 to 80000", "input": "", "output": "UPDATE employees\nSET Salary = 80000\nWHERE ID = 4;", "category": "Python"}, {"instruction": "Create a function in Python to generate a Fibonacci sequence.", "input": "", "output": "def fibonacci_sequence(n):  \n    a = 0 \n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else:  \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Given a string and an integer, write a code to find the index of first occurrence of the integer in the string.", "input": "my_string = \"abcdef\"\nmy_int = 2", "output": "def find_index(str, num):\n    for i in range(len(str)):\n        if str[i] == num:\n            return i\n    return -1\n \nmy_string = \"abcdef\"\nmy_int = 2\nprint(find_index(my_string,my_int))", "category": "Python"}, {"instruction": "Given a linked list of integers, write a C program to find the last node of the linked list.", "input": "", "output": "struct Node \n{ \n    int data; \n    struct Node* next; \n};\n\nstruct Node* findLastNode(struct Node* head) \n{ \n    if (head == NULL) \n        return NULL; \n  \n    while (head->next != NULL) \n        head = head->next; \n  \n    return head;\n}", "category": "Python"}, {"instruction": "Using the dict as an example, add a key-value pair to the dict.", "input": "my_dict = {1: 'a', 2: 'b'}", "output": "my_dict = {1: 'a', 2: 'b', 3: 'c'}\n\nmy_dict = {1: 'a', 2: 'b'}\nmy_dict[3] = 'c'\nprint(my_dict)", "category": "Python"}, {"instruction": "Given a string and an integer, write a program to compare the string with the integer and return the longer string.", "input": "my_string = \"Hello\"\nmy_int = 1", "output": "def compare_str_int(str, num):\n    if len(str) > num:\n        return str\n    else:\n        return \"{i} is greater than {s}\".format(i=num, s=str)\n\nmy_string = \"Hello\"\nmy_int = 1\nprint(compare_str_int(my_string, my_int))", "category": "Python"}, {"instruction": "Write a Bash script for installing multiple packages.", "input": "Package list: curl, wget, nano", "output": "#!/bin/bash \n\n# Install packages from list\nfor package in curl wget nano; do\n    sudo apt-get install -y $package\ndone", "category": "Python"}, {"instruction": "Create a Java method to print a two-dimensional array.", "input": "int array[3][3] = { {1, 2, 3}, \n                    {4, 5, 6}, \n                    {7, 8, 9}}", "output": "public class TwoDimensionalArray { \n    public static void main(String args[]) \n    { \n        int[][] arr = { {1, 2, 3}, \n                        {4, 5, 6}, \n                        {7, 8, 9} }; \n        int m = 3;\n        int n = 3;\n\t\t\n        printArray(arr, m, n); \n    } \n    \n    public static void printArray(int[][] arr, int m, int n) \n    { \n        for (int i = 0; i < m; i++) { \n            for (int j = 0; j < n; j++) \n                System.out.print(arr[i][j] + \" \"); \n    \n            System.out.println(); \n        } \n    } \n}", "category": "Python"}, {"instruction": "What is the difference between preemptive multitasking and non-preemptive multitasking?", "input": "", "output": "Preemptive multitasking is a form of multitasking in which the operating system slices the CPU time and dedicates a slot to each of the programs. The operating system may terminate the process at any given point of time and switch to another process. It depends on the priority of the process. \n\nNon-preemptive multitasking is a form of multitasking in which the operating system does not slice the CPU time in between processes and processes are given CPU time to complete their execution. It does not depend on the priority of the process.", "category": "Python"}, {"instruction": "Convert this code from Python to C++.", "input": "def reverse(s): \n    return s[::-1]", "output": "#include <string> \n  \nusing namespace std; \n\nstring reverse(string s) \n{ \n    string reverse = \"\"; \n    \n    for (int i = s.length() - 1; i >= 0; i--) \n        reverse += s[i]; \n    \n    return reverse; \n}", "category": "Python"}, {"instruction": "Create an HTML layout for a website. Make sure the layout has a header, a navigation menu, and a footer.", "input": "", "output": "<!DOCTYPE html> \n<html> \n   <head> \n      <title>Webpage Layout</title> \n   </head> \n  \n   <body> \n   \n      <header> \n         <h1>Header</h1> \n      </header> \n      \n      <nav> \n         <ul> \n            <li>Home</li> \n            <li>About</li> \n            <li>Contact</li> \n            <li>FAQ</li> \n         </ul> \n      </nav> \n      \n      <footer> \n         <p>Footer</p> \n      </footer> \n   \n   </body> \n</html>", "category": "Python"}, {"instruction": "What is the algorithm complexity of Insertion Sort?", "input": "", "output": "The algorithm complexity of Insertion Sort with n elements is O(n^2). It is an in-place comparison-based sorting algorithm. It has a time complexity of O(n^2) in the worst case, and it has a space complexity of O(1).", "category": "Python"}, {"instruction": "Using the list as an example, remove all elements from the list that have a value of 0.", "input": "my_list = [0, 5, 7, 0, 9]", "output": "my_list = [5, 7, 9]\n \nmy_list = [0, 5, 7, 0, 9]\nmy_list = [x for x in my_list if x != 0]\nprint(my_list)", "category": "Python"}, {"instruction": "Write a JavaScript code to create an array of integers from 1 to 10.", "input": "", "output": "let array = [];\nfor (let i=1; i<=10; i++) {\n  array.push(i);\n}", "category": "Python"}, {"instruction": "Construct an HTML page with a title \"My Website\" and a header tag.", "input": "", "output": "<!DOCTYPE html>\n<html> \n  <head>\n    <title>My Website</title>\n  </head>\n  <body>\n    <h1>My Website</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a CSS selector to select the element with class \"main-content\".", "input": "", "output": ".main-content {\n  //styling here...\n}", "category": "Python"}, {"instruction": "Write a python code to multiply two given numbers.", "input": "x = 10\ny = 5", "output": "# Multiply two given numbers\nx = 10\ny = 5\n\n# Calculate the multiplication\nresult = x * y\nprint(result) # Output: 50", "category": "Python"}, {"instruction": "How can we evaluate a given Python expression dynamically?", "input": "", "output": "We can use the eval() function to evaluate a Python expression dynamically. \n\nExample:\n\nexpr = '2 + 3'\nresult = eval(expr) # result will be 5", "category": "Python"}, {"instruction": "Create a loop that prints the values from a and b in the ascending order.", "input": "a = 5\nb = 10", "output": "# Initialize variable\na = 5\nb = 10\n\n# Loop for print in ascending order\nfor i in range(a,b+1):\n    print(i)", "category": "Python"}, {"instruction": "resolve the following compile-time error in the program", "input": "#include <stdio.h>\n\nint main()\n{\n    int a = 1, 3;\n    printf(\"%d\", a);\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main()\n{\n    int a = 1; // Removed `3` which caused a compile time error \n    printf(\"%d\", a);\n    return 0;\n}", "category": "Python"}, {"instruction": "How can we join two lists in Python?", "input": "", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Join two lists\nlist3 = list1 + list2", "category": "Python"}, {"instruction": "Write a function in Python to print out the sum of the squares of its input.", "input": "", "output": "def sum_of_squares(nums):\n    \"\"\"This function calculates the sum of the squares of a given list of numbers\"\"\"\n    return sum(x**2 for x in nums)", "category": "Python"}, {"instruction": "How can we increment the counter by 20 without manually specifying the value 20?", "input": "counter = 0", "output": "counter += 20; // Increment counter by 20 without using the number 20 directly.", "category": "Python"}, {"instruction": "Create a Bash script to find the sum of all the numbers divisible by 3 and 5 in a given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "#!/bin/bash\narr=(1 2 3 4 5 6 7 8 9 10)\nsum=0\nfor n in ${arr[@]}\ndo\n    if [ $(($n%3)) -eq 0 -o $(($n%5)) -eq 0 ];then\n        let sum=$sum+$n\n    fi\ndone\necho $sum", "category": "Python"}, {"instruction": "Create a HTML page displaying a table of the 10 most disruptive technologies of all time.", "input": "", "output": "<html>\n<head>\n    <title>Most Disruptive Technologies</title>\n</head>\n<body>\n    <h1>Ten Most Disruptive Technologies Of All Time</h1>\n    <table>\n        <tr>\n            <th>Technology</th>\n            <th>Description</th>\n        </tr>\n        <tr>\n            <td>The Internet</td>\n            <td>A worldwide computer network providing a variety of information and communication facilities.</td>\n        </tr>\n        <tr>\n            <td>Smartphones</td>\n            <td>A mobile device that combines the functions of a mobile phone, personal digital assistant, and digital camera.</td>\n        </tr>\n        <tr>\n            <td>The Automobile</td>\n            <td>A motor vehicle with four wheels, powered by an internal combustion engine and able to carry a small number of people.</td>\n        </tr>\n        <tr>\n            <td>Electricity</td>\n            <td>The presence and flow of electric charge.</td>\n        </tr>\n        <tr>\n            <td>The Airplane</td>\n            <td>A powered aircraft that is heavier than air, propelled by one or more engines, and capable of sustained, rising flight in the atmosphere.</td>\n        </tr>\n        <tr>\n            <td>The Computer</td>\n            <td>A machine for performing calculations automatically.</td>\n        </tr>\n        <tr>\n            <td>The Steam Engine</td>\n            <td>A device for converting the thermal energy of steam into mechanical work or electricity.</td>\n        </tr>\n        <tr>\n            <td>Medical Imaging</td>\n            <td>A medical imaging technology that produces visual representations of the inside of a body for medical analysis.</td>\n        </tr>\n        <tr>\n            <td>The Telephone</td>\n            <td>A device that converts sound, typically and most efficiently the human voice, into electrical signals.</td>\n        </tr>\n        <tr>\n            <td>Printing Press</td>\n            <td>A press used for printing from a plate or block that bears the design to be printed.</td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a code to sort a list of integers from smallest to largest", "input": "[19, 5, 96, 36]", "output": "def sort_list(lst):\n    lst.sort()\n    return lst", "category": "Python"}, {"instruction": "Write a Python script to print out the max and min values from the given list.", "input": "[2,10,18,24,36,95]", "output": "list = [2,10,18,24,36,95]\nmax_value = max(list)\nmin_value = min(list)\nprint(\"Max value: \", max_value)\nprint(\"Min value: \", min_value)", "category": "Python"}, {"instruction": "Write an SQL query to return the customers whose purchases include both productid 100 and 101", "input": "", "output": "SELECT c.customer_id \nFROM Customers c\n    INNER JOIN Purchases p\n    ON c.customer_id = p.customer_id\nWHERE p.productid = 100\n    AND p.customer_id\nIN \n    (SELECT DISTINCT p2.customer_id\n    FROM Purchases p2\n    WHERE p2.productid = 101)", "category": "Python"}, {"instruction": "Write a function to shift the elements of a list by one position to the left.", "input": "[2, 4, 6, 8]", "output": "def shift_left(arr): \n    # Shifting the array elements from position 1 to n-1 \n    for i in range(1, len(arr)): \n        arr[i - 1] = arr[i] \n  \n    # Replacing the last element with 0 \n    arr[len(arr) - 1] = 0\n    return arr", "category": "Python"}, {"instruction": "Design a class in Java to build a Binary Search Tree.", "input": "", "output": "public class BST { \n  \n    /* Class containing left and right child of current node and key value*/\n    class Node { \n        int key; \n        Node left, right; \n  \n        public Node(int item) { \n            key = item; \n            left = right = null; \n        } \n    } \n  \n    // Root of BST \n    Node root; \n  \n    // Constructor \n    BST() {  \n        root = null;  \n    } \n  \n    // This method mainly calls insertRec() \n    void insert(int key) { \n       root = insertRec(root, key); \n    } \n  \n    // A recursive function to insert a new key in BST \n    Node insertRec(Node root, int key) { \n  \n        // If the tree is empty, return a new node \n        if (root == null) { \n            root = new Node(key); \n            return root; \n        } \n  \n        // Otherwise, recur down the tree \n        if (key < root.key) \n            root.left = insertRec(root.left, key); \n        else if (key > root.key) \n            root.right = insertRec(root.right, key); \n  \n        // return the (unchanged) node pointer \n        return root; \n    } \n  \n}", "category": "Python"}, {"instruction": "Write a Python script to generate Fibonacci sequence upto n", "input": "", "output": "def generate_fibonacci(n): \n    FibArray = [0, 1] \n    while len(FibArray) < n: \n        FibArray.append(FibArray[-1]+FibArray[-2]) \n  \n    return FibArray", "category": "Python"}, {"instruction": "Make a React component that displays a given text.", "input": "", "output": "// Make a React component that displays the given text\n\nimport React from 'react';\n\nconst TextDisplay = ({text}) => {\n  return <div>{text}</div>;\n};\n\nexport default TextDisplay;", "category": "Python"}, {"instruction": "Find the most frequently occurring element in an array.", "input": "", "output": "def most_frequent_element(arr): \n    # Create a dictionary to store the frequency of each element\n    freq = {} \n    max_freq = 0\n    max_freq_elem = -1\n    \n    # Iterate through an array \n    for elem in arr: \n        if elem in freq.keys(): \n            freq[elem] += 1\n        else: \n            freq[elem] = 1\n  \n    # Find the most frequent element\n    for key,val in freq.items(): \n        # Update the maximum frequency and the corresponding element\n        if (max_freq < val): \n            max_freq_elem = key \n            max_freq = val \n    return max_freq_elem", "category": "Python"}, {"instruction": "How can we remove duplicate elements from a given array?", "input": "", "output": "We can use a set data structure to remove duplicate elements from a given array. Sets are collections of unique elements, so when the elements are added to the set, the duplicate elements are automatically removed.\n\nExample:\n\narr = [1,2,3,3,4,5,5]\narr = list(set(arr)) # arr will be [1,2,3,4,5]", "category": "Python"}, {"instruction": "Output all the prime numbers between 1 and 50.", "input": "", "output": "# Output all the prime numbers between 1 and 50\n\nfor num in range(1,51):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           \n# Output: 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47", "category": "Python"}, {"instruction": "Print out all the numbers between 1 and 100 that are divisible by 3.", "input": "", "output": "for i in range (1, 101):\n  if i % 3 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Write a JavaScript program to simulate a coin toss.", "input": "", "output": "const coinToss = () => {\n  let result = Math.random();\n\n  if (result <= 0.5) {\n    return 'heads';\n  } else {\n    return 'tails';\n  }\n};\n\nlet toss = coinToss();\nconsole.log(toss);", "category": "Python"}, {"instruction": "Create a JSON object with the following properties: name, age, and hobby.", "input": "", "output": "{\n  \"name\": \"John Doe\",\n  \"age\": 28,\n  \"hobby\": \"Reading\"\n}", "category": "Python"}, {"instruction": "Modify the following SQL query to list all the job titles that start with the letter \"A\".", "input": "", "output": "SELECT * \nFROM jobs \nWHERE job_title LIKE 'A%';", "category": "Python"}, {"instruction": "Update the following HTML code with a new heading tag.", "input": "<p>Lorem ipsum.</p>", "output": "<h1>Lorem ipsum.</h1>", "category": "Python"}, {"instruction": "List all the days of the week in a comma-separated string.", "input": "", "output": "\"Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\"", "category": "Python"}, {"instruction": "Write a Python program to sort the list of dictionaries by values in ascending order.", "input": "data = [{'name': 'John', 'age': 23}, \n        {'name': 'Joe', 'age': 28}, \n        {'name': 'Jack', 'age': 25}]", "output": "def sort_by_age(data):\n  return sorted(data, key=lambda k: k['age'], reverse=False)\n\nsorted_list = sort_by_age(data)\nprint(sorted_list)", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code as an arrow function.", "input": "function sum(a, b) {\n  return a + b;\n}", "output": "const sum = (a, b) => a + b;", "category": "Python"}, {"instruction": "Write a SQL query to list the top 3 most used languages by developers.", "input": "", "output": "SELECT language, COUNT(*) AS language_usage\nFROM developers\nGROUP BY language\nORDER BY language_usage DESC\nLIMIT 3;", "category": "Python"}, {"instruction": "Create a function in JavaScript to subtract two dates and return the difference in days", "input": "date1 = 2020-11-01\ndate2 = 2020-11-06", "output": "function subtractDates(date1, date2) {\n    const diffTime = Math.abs(date2 - date1);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n\n    return diffDays;\n}\n\n# Subtract two dates\nresult = subtractDates(new Date(\"2020-11-01\"), new Date(\"2020-11-06\"));\n\n# Output\n# 5", "category": "Python"}, {"instruction": "Combine these two CSS selectors using combinators", "input": "Selector 1: div\nSelector 2: p", "output": "div p {\n    // CSS rules\n}", "category": "Python"}, {"instruction": "Create a Python program to convert a given number of inches to centimeters", "input": "inches = 5", "output": "def convert(inches): \n    cm = inches * 2.54\n    return cm \n  \n# Convert inches to cm \nresult = convert(5) \n  \n# Output \nprint(\"5 inches =\",result,\"cm\") \n\n# Output\n# 5 inches = 12.7 cm", "category": "Python"}, {"instruction": "Create an R function to find the mode of a given data set", "input": "data.set = c(1,2,3,3,3,4,5)", "output": "mode <- function(x) {\n  freq <- table(x)\n  maxfreq <- max(freq)\n  vars <- names(freq)[freq == maxfreq]\n  return(vars)\n}\n\nmode(data.set) \n\n# Output\n# [1] 3", "category": "Python"}, {"instruction": "Write a regular expression to match all valid UK postcodes.", "input": "", "output": "^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[0-9][A-Za-z]{2})$", "category": "Python"}, {"instruction": "Take input of a Python list and return its reversed version", "input": "list_in = [3,5,7,9]", "output": "list_in.reverse() \nlist_out = list_in \nprint(list_out) \n\n# Output \n# [9,7,5,3]", "category": "Python"}, {"instruction": "Write a TensorFlow code to classify MNIST.", "input": "", "output": "# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the input data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train and evaluate the model\nmodel.fit(x_train, y_train, epochs=10)\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Convert the following Python dictionary to a JSON String", "input": "data = {\"name\": \"John Doe\", \"age\": 37, \"hobby\": \"reading\"}", "output": "import json\n\ndata_json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Create a MySQL query to return a distinct list of customers who have purchased productid 120", "input": "", "output": "SELECT DISTINCT c.customer_id \nFROM Customers c\n    INNER JOIN Purchases p\n    ON c.customer_id = p.customer_id\nWHERE p.productid = 120", "category": "Python"}, {"instruction": "Implement a binary search algorithm with a given input array.", "input": "arr = [2, 3, 4, 8, 10, 42, 56, 78, 89]", "output": "// Binary Search Algorithm \n\nfunction binarySearch(arr, x) { \n  \n    let start=0, end=arr.length-1; \n          \n    // Iterate while start not meets end \n    while (start<=end) { \n  \n        // Find the mid index \n        let mid=Math.floor((start + end)/2); \n  \n        // If element is present at mid, return True \n        if (arr[mid]===x) return true; \n  \n        // Else look in left or right half accordingly \n        else if (arr[mid] < x)  \n             start = mid + 1; \n        else\n             end = mid - 1; \n    } \n  \n    return false; \n}", "category": "Python"}, {"instruction": "Generate a Ruby code to find the reverse of a given string.", "input": "", "output": "def reverse_string(string)\n    return string.reverse\nend", "category": "Python"}, {"instruction": "Write a python snippet to reverse the words in a sentence.", "input": "This sentence should be reversed.", "output": "''.join(reversed(sentence.split()))", "category": "Python"}, {"instruction": "Sort the given list of integer numbers from lowest to highest.", "input": "[6, 3, 4, 5, 9, 1]", "output": "[1, 3, 4, 5, 6, 9]", "category": "Python"}, {"instruction": "Create a JavaScript class to generate random numbers.", "input": "", "output": "class RandomGenerator {\n  constructor() {\n    \n  }\n\n  generateRandomNumber() {\n    return Math.random();\n  }\n}", "category": "Python"}, {"instruction": "Generate the Fibonacci series for the given number.", "input": "Number: 10", "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Edit this CSS code to change the font style to bold.", "input": "p {\n font-family: \"Arial\", sans-serif;\n font-size: 1.2em;\n }", "output": "p {\n font-family: \"Arial\", sans-serif;\n font-size: 1.2em;\n font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write a Python script to fetch the top 10 latest YouTube videos.", "input": "", "output": "import requests\nimport json\n\n#Generating Youtube API URL\nurl = 'https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=10&regionCode=US&key={YOUR_API_KEY}'\n\n#Sending a GET request to API for obtaining data\nresponse = requests.get(url)\n\n#Data parsing and extracting top 10 latest YouTube Videos\ndata = json.loads(response.text)\nlatest_videos = []\nfor items in data['items']:\n    latest_videos.append(items['snippet']['title'])\n\nprint(\"Top 10 latest videos : \")\nfor item in latest_videos:\n    print(item)", "category": "Python"}, {"instruction": "Generate a unique number from given two numbers.", "input": "Number 1: 12\nNumber 2: 24", "output": "num = str(12) + str(24)\nunique_num = int(num)", "category": "Python"}, {"instruction": "Write some HTML code to create a list of items.", "input": "", "output": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n  <li>Item 5</li>\n</ul>", "category": "Python"}, {"instruction": "Generate a random series of 5 numbers.", "input": "", "output": "[7, 9, 12, 4, 8]", "category": "Python"}, {"instruction": "Write a SQL statement to select the top 10 highest revenue products.", "input": "Table: products\nColumns: product_id, product_name, revenue", "output": "SELECT product_id, product_name, revenue \nFROM products \nORDER BY revenue DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Update the program to print the sum of two numbers given as input.", "input": "def add(a, b):\n print(a)", "output": "def add(a, b):\n print(a + b)", "category": "Python"}, {"instruction": "Write a JavaScript function to randomize the order of elements in an array", "input": "array = [\"dog\", \"cat\", \"horse\", \"elephant\"]", "output": "function shuffleArray(array) {\n let temp, j;\n for (let i = array.length - 1; i > 0; i--) {\n  j = Math.floor(Math.random() * (i + 1));\n  temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n }\n return array;\n}", "category": "Python"}, {"instruction": "Write a CSS rule to add a shadow effect of 3px to a div.", "input": "", "output": "div {\n box-shadow: 0px 0px 3px #ccc;\n}", "category": "Python"}, {"instruction": "Rewrite the following code so that it is more efficient.", "input": "odds = []\nfor num in range(10):\n if num % 2 != 0:\n odds.append(num)", "output": "odds = [num for num in range(10) if num % 2 != 0]", "category": "Python"}, {"instruction": "Construct a SQL query to join two tables, together.", "input": "Table1: \"accounts\"\nTable2: \"users\"", "output": "SELECT * FROM accounts INNER JOIN users ON accounts.user_id = users.id", "category": "Python"}, {"instruction": "Write a mySQL query to find all the rows with a particular value in a column.", "input": "Table: customers\nColumn: age\nValue: 40", "output": "SELECT * FROM customers WHERE age = 40;", "category": "Python"}, {"instruction": "Describe how to use a while loop in python.", "input": "", "output": "A while loop in Python is a loop that runs until a certain condition is met. The syntax is similar to an if statement, but the condition is evaluated after each iteration of the loop. The code within the loop is executed until the condition evaluates to False.\n\nExample:\n\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n\nThis will print out the numbers from 0 to 9 as the condition is evaluated after each iteration.", "category": "Python"}, {"instruction": "Calculate the sum of the squares of the given number array.", "input": "[2, 3, 4]", "output": "29 (2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29)", "category": "Python"}, {"instruction": "How can we select unique elements from a list in Python?", "input": "", "output": "We can select unique elements from a list in Python using the set() and list() functions. The set() function takes an iterable object, such as a list, and returns the unique elements of that object in the form of a set. The list() function takes the set and returns its elements as a list.\n\nExample:\n\noriginal_list = [1, 2, 3, 1, 4, 2]\nunique_list = list(set(original_list))\n\nprint(unique_list)\n\nOutput: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a python function to return the highest value in a given list of numbers.", "input": "", "output": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value", "category": "Python"}, {"instruction": "Find the output of the following SQL query.", "input": "SELECT customer_name, customer_phone FROM customer_table WHERE customer_country='USA'", "output": "This query will return a table with columns customer_name and customer_phone, which will contain the name and phone of all customers from the USA.", "category": "Python"}, {"instruction": "Use an `if` statement to check if the variable `x` is equal to 10.", "input": "Variable: x\nValue: 10", "output": "if (x == 10) {\n  // code to execute\n}", "category": "Python"}, {"instruction": "Write functions to add two integers in Ruby.", "input": "", "output": "def add_integers(a,b)\n    return a + b\nend", "category": "Python"}, {"instruction": "Split the following sentence into tokens.", "input": "Sentence: I cannot wait to go to the movies.", "output": "['I', 'can', 'not', 'wait', 'to', 'go', 'to', 'the', 'movies', '.']", "category": "Python"}, {"instruction": "Create a C++ class for a student with the attributes \"first name\", \"last name\" and \"marks\".", "input": "", "output": "class Student {\n  private:\n    string firstName;\n    string lastName;\n    int marks;\n\n  public:\n    // constructor and methods\n};", "category": "Python"}, {"instruction": "Use the given JSON object to create a JavaScript function which will output the total number of \"users\" which are in the provided JSON object.", "input": "{\n  \"users\": [\n    {\n      \"name\": \"John\",\n      \"age\": 33\n    },\n    {\n      \"name\": \"Jane\",\n      \"age\": 43\n    }\n  ]\n}", "output": "function countUsers(object) {\n let count = 0;\n const users = object.users;\n \n for (let i = 0; i < users.length; i++) {\n  count++;\n }\n \n return count; \n}", "category": "Python"}, {"instruction": "Write a block of code to check if the given value is a string or not in JavaScript.", "input": "Value: hello", "output": "if (typeof value === \"string\"){\n  console.log(\"It is a string\");\n}", "category": "Python"}, {"instruction": "Identify how the given number can be represented as a binary number.", "input": "Number: 190", "output": "10111110", "category": "Python"}, {"instruction": "Write a while loop in Python which prints numbers from 1 to 10.", "input": "", "output": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "How to find the minimum number in an array of integers in Java?", "input": "", "output": "We can find the minimum number in an array of integers in Java using the Arrays.stream() method. The Arrays.stream() method takes an array and returns a stream of its elements. We can then use the Stream.min() function to find the minimum element in the array.\n\nExample:\n\nint[] arr = {2, 4, 6, 8, 10};\nint min = Arrays.stream(arr).min().getAsInt();\n\nSystem.out.println(min);\n\nOutput: 2", "category": "Python"}, {"instruction": "Write a HTML code to create a button element.", "input": "", "output": "<button>Click me!</button>", "category": "Python"}, {"instruction": "Write a for loop in Python to sum up the elements of an array.", "input": "[5, 9, 2]", "output": "arr = [5, 9, 2]\ntotal = 0\n\nfor num in arr:\n    total+=num\n\nprint(total)\n\nOutput: 16", "category": "Python"}, {"instruction": "Find the second highest value in the given array.", "input": "[9, 2, 7, 4, 11, 6]", "output": "7 (second highest value is 7)", "category": "Python"}, {"instruction": "Write a cURL command to send an HTTP GET request to a given URL.", "input": "URL: https://www.example.com", "output": "curl --get https://www.example.com", "category": "Python"}, {"instruction": "Given a numeric array and a length, find the longest increasing subsequence in the array.", "input": "Array: [3, 4, 1, 5, 10, 9, 8, 11]\nLength: 8", "output": "[3, 4, 5, 10, 11]", "category": "Python"}, {"instruction": "Determine the number of unique numbers from the given array of numbers.", "input": "arr = [14, 12, 13, 11, 15]", "output": "// Function to find the number of unique numbers\n\nconst findUnique = (arr) => {\n    let unique = arr.filter((num, i)=> arr.indexOf(num) === i);\n    return unique.length;\n}\n\nconsole.log(findUnique(arr)); \n// Output: 5", "category": "Python"}, {"instruction": "Write a C++ function to calculate the maximum subarray sum of a given array.", "input": "", "output": "int maxSumSubArray(vector<int> arr) \n{ \n    int max_so_far = arr[0]; \n    int curr_max = arr[0]; \n  \n    for (int i = 1; i < arr.size(); i++) \n    { \n        curr_max = max(arr[i], curr_max+arr[i]); \n        max_so_far = max(max_so_far, curr_max); \n    } \n    return max_so_far; \n}", "category": "Python"}, {"instruction": "Insert the English equivalent of the following regular expression:", "input": "^.*[1-9].*$", "output": "This regular expression matches any string that contains at least one number.", "category": "Python"}, {"instruction": "Estimate the memory usage of the following array of integers.", "input": "nums = [1, 4, 5, 8, 12, 15]", "output": "The memory usage of the given array of integers is approximately 48 bytes. This is because each integer takes up 4 bytes of memory and there are 6 integers in the given array.", "category": "Python"}, {"instruction": "How would you check for syntax errors in a given Java code?", "input": "", "output": "Syntax errors in Java code can be checked by using the Java compiler. The compiler will identify the location and reason for any syntax errors, which can then be corrected. Additionally, IDEs often have built-in syntax checkers that can highlight errors before compilation.", "category": "Python"}, {"instruction": "What is the best data structure for searching a value in a large set of data?", "input": "", "output": "The best data structure for searching a value in a large set of data is a data structure that supports fast search and retrieval of data such as a hash table or a binary search tree. Hash tables are particularly efficient because they allow for constant time search and retrieval, while binary search trees have a time complexity of O(log n). Additionally, hash tables are typically more space efficient than binary search trees. However, binary search trees also have their uses, as they allow for data to be sorted and can easily handle dynamic changes in the size of the data set.", "category": "Python"}, {"instruction": "Write a code in Java for finding the factorial of a number.", "input": "5", "output": "public class Factorial {\n \n  public static int calcFactorial(int number){\n    int factorial;\n \n    if(number == 0 || number == 1){\n      factorial = 1;\n    } else {\n      factorial = number * calcFactorial(number-1);\n    }\n    return factorial;\n  }\n \n  public static void main(String[] args){\n    System.out.println(calcFactorial(5));\n  }\n}", "category": "Python"}, {"instruction": "Develop a C++ program for finding the area of a circle.", "input": "4", "output": "#include<iostream>\n#include<cmath>\n \nusing namespace std;\n \n// Function to calculate area of circle\ndouble findArea(int rad)\n{\n    return (3.17 * pow(rad,2));\n}\n \n// Driver Code\nint main()\n{\n    int radius;\n \n    cin>>radius;\n \n    cout<<\"Area of a Circle is \"<<findArea(radius);\n    return 0;\n}", "category": "Python"}, {"instruction": "What is the syntax of creating a variable in Java?", "input": "", "output": "The syntax for creating a variable in Java is:\n<data_type> <variable_name> = <variable_value>;\n\nFor example:\n\nint myVar = 5;", "category": "Python"}, {"instruction": "Write a code snippet in Python for converting Unix timestamp to date and time.", "input": "1594102055", "output": "import datetime\n \n# Unix timestamp\nunix = 1594102055\n \n# Convert Unix timestamp to Date\ndate_time = datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S')\n \nprint(\"Date & Time (UTC):\", date_time)", "category": "Python"}, {"instruction": "Create a loop in Java for printing all elements of an array of strings.", "input": "[\"String1\", \"String2\", \"String3\", \"String4\"]", "output": "String[] strArr = {\"String1\", \"String2\", \"String3\", \"String4\"};\n \nfor (String str : strArr) {\n    System.out.println(str);\n}", "category": "Python"}, {"instruction": "How would you implement stack using node in Java?", "input": "", "output": "public class Stack {\n  \n  private Node top;\n  \n  public Stack(){\n    this.top = null;\n  }\n  \n  private class Node{\n    int data;\n    Node next;\n    \n    public Node(int data){\n      this.data = data;\n      this.next = null;\n    }\n  }\n  \n  public void push(int data){\n    Node newNode = new Node(data);\n    if(top == null){\n      top = newNode;\n    } else {\n      newNode.next = top;\n      top = newNode;\n    }\n  }\n  \n  public int pop(){\n    if(top == null){\n      throw new NoSuchElementException(\"Stack Underflow Error\");\n    }\n    int data = top.data;\n    top = top.next;\n    return data;\n  }\n  \n  public int peek(){\n    if(top == null){\n      throw new NoSuchElementException(\"Stack Underflow Error\");\n    }\n    return top.data;\n  }\n  \n  public boolean isEmpty(){\n    return top == null;\n  }\n}", "category": "Python"}, {"instruction": "Create an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Generate a Java code to display the multiplication table from 1 to 10.", "input": "", "output": "public static void main(String args[])\n{\n    for (int i=1; i<=10; i++)\n    {\n        for (int j=1; j<=10; j++)             \n            System.out.print(i+\"*\"+j+\"=\"+(i*j)+\"  \");\n \n        System.out.println();\n    }\n}", "category": "Python"}, {"instruction": "Create a program to accept two strings and find if one string is a substring of the other or not.", "input": "'abc', 'ccc'", "output": "def is_substring(s1, s2):\n  return s1 in s2", "category": "Python"}, {"instruction": "Write a code in PHP to convert Celsius to Fahrenheit.", "input": "", "output": "function celsiusToFahrenheit($celsius) {\n  return $celsius * 9 / 5 + 32;\n}", "category": "Python"}, {"instruction": "Generate a C code to calculate the power of a given number.", "input": "", "output": "long long power(int base, int exponent) \n{ \n    long long result = 1; \n    while (exponent != 0) { \n        result *= base; \n        exponent--; \n    } \n    return result; \n}", "category": "Python"}, {"instruction": "Write a code in SQL to create a database table tbl_Users which contains two columns 'name' and 'age'.", "input": "", "output": "CREATE TABLE tbl_Users(\n    name VARCHAR(255),\n    age INTEGER\n);", "category": "Python"}, {"instruction": "Generate a random alphanumeric string of length 8 in Java.", "input": "", "output": "String AlphaNumericString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                        + \"0123456789\"\n                        + \"abcdefghijklmnopqrstuvxyz\";  \n\nStringBuilder sb = new StringBuilder(8);\n\nfor (int i = 0; i < 8; i++) { \n \n            int index \n                = (int)(AlphaNumericString.length() \n                        * Math.random()); \n  \n            sb.append(AlphaNumericString \n                          .charAt(index)); \n        } \n\nString string8Length = sb.toString();\n\nSystem.out.println(\"Random Alphanumeric String of length 8: \" + string8Length);", "category": "Python"}, {"instruction": "Split a string by a number greater than the length of the string in Python.", "input": "string = \"Hello World\"", "output": "split_string = string[:11]\nprint(split_string) # Output = \"Hello World\"", "category": "Python"}, {"instruction": "Suggest a way to delete a specific element from a linked list in C++.", "input": "", "output": "We can delete a specific element from a linked list in C++ by traversing through the list and keeping a pointer to the previous node of the node to be deleted. Then we can change the next of the previous node to the node after the node to be deleted. This will detach the node to be deleted from the linked list and remove it.", "category": "Python"}, {"instruction": "How would you remove all punctuation marks in a given string?", "input": "", "output": "We can remove all punctuation marks in a given string by using the regular expression library in Python. We can create a pattern and use the re.sub() function to replace a matched pattern and remove the punctuation marks from the given string. This can be done with the following code:\n\nimport re \n\nstring = \"This is a test string! With [special] ^characters.\"\n\nremove_punct = re.sub(r'[^\\w\\s]','',string) \n\nprint(remove_punct) # Output = This is a test string With special characters", "category": "Python"}, {"instruction": "Write a JavaScript callback function so that when it is called, it will alert a given message.", "input": "", "output": "function alertMessage(msg) {\n alert(msg);\n}", "category": "Python"}, {"instruction": "Print the textual representation of a given BST.", "input": "4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9", "output": "def print_tree(root):\n if root is not None:\n print(root.val)\n print_tree(root.left)\n print_tree(root.right)", "category": "Python"}, {"instruction": "Create an array of strings sorted by length.", "input": "array = [\"dog\", \"cat\", \"horse\", \"elephant\"]", "output": "sorted_array = [\"dog\", \"cat\", \"horse\", \"elephant\"]\nsorted_array.sort(key=len)", "category": "Python"}, {"instruction": "Update the function such that it returns the sum of two numbers.", "input": "def add(a, b):\n return a", "output": "def add(a, b):\n return a + b", "category": "Python"}, {"instruction": "Write a SQL query to find all entries in the table that contain the word \"house\"", "input": "Table: \"property\"\nColumns: \"address\"", "output": "SELECT * from property WHERE address LIKE '%house%'", "category": "Python"}, {"instruction": "Change the given Python code to an equivalent expression using list comprehension.", "input": "mylist = []\nfor x in range(1, 10):\n    mylist.append(x*x)", "output": "mylist = [x*x for x in range(1, 10)]", "category": "Python"}, {"instruction": "Create a code snippet to print the words \"hello world\" three times.", "input": "", "output": "for i in range(3):\n    print(\"hello world\")", "category": "Python"}, {"instruction": "Write a Python loop to find the number of elements in a given list that are between 0 and 10 (inclusive).", "input": "array = [3, 7, 11, 15]", "output": "def count_elements(array):\n count = 0 \n for item in array:\n if 0 <= item <= 10:\n count += 1\n return count", "category": "Python"}, {"instruction": "Perform string manipulation to generate the word 'happy' by starting with the word 'sad'", "input": "", "output": "word = 'sad'\nword = word[0] + word[2:] + 'py'", "category": "Python"}, {"instruction": "Write a piece of code to create a new dictionary with the same keys as an existing dictionary, but with the values multiplied by 2.", "input": "mydict = {'a': 1, 'b':2, 'c':3}", "output": "mydict_doubled = {}\nfor key, value in mydict.items():\n    mydict_doubled[key] = value * 2", "category": "Python"}, {"instruction": "Create a guide to explain the usage of the built-in Python sort() function.", "input": "", "output": "The Python sort() function is used to sort a list of elements. It takes two parameters: the list to be sorted and a function (optional) that defines the sorting criteria. The sorted list is returned in ascending order by default. The sort() function is stable, meaning that the original positions of equal elements will be preserved.", "category": "Python"}, {"instruction": "Rewrite the given python program to generate the same output but using a while loop instead of a for loop.", "input": "mylist = [1, 2, 3, 4, 5]\nfor i in mylist:\n    print(i)", "output": "i = 0\nmylist = [1, 2, 3, 4, 5]\nwhile i < len(mylist):\n    print(mylist[i])\n    i += 1", "category": "Python"}, {"instruction": "Use a for loop to iterate over the elements of a list and print the total number of elements.", "input": "mylist = [1, 2, 3, 4]", "output": "total = 0\nfor i in mylist:\n    total += 1\nprint(\"The total number of elements is:\", total)", "category": "Python"}, {"instruction": "Suggest a way to explore a large dataset efficiently in Python.", "input": "", "output": "We can explore a large dataset efficiently in Python by using the built-in Pandas library. The features of the Pandas library, such as its ability to read CSV files, make it a great tool for exploring large datasets. Additionally, Pandas provides convenient methods such as head() and tail() to quickly explore the first and last elements of a dataset, as well as info() and describe() methods to provide a better understanding of the entire dataset.", "category": "Python"}, {"instruction": "What type of sorting algorithm can be used to sort a list of integers without using comparisons?", "input": "", "output": "Counting sort is an sorting algorithm that can be used to sort a list of integers without using comparisons. Counting sort works by counting the number of elements with each value, then constructing the sorted output from the counts. It is an efficient algorithm, with a time complexity of O(n+k) where n is the number of elements in the list and k is the range of integers.", "category": "Python"}, {"instruction": "Pack a dictionary with the key-value pairs {'a':1, 'b':2, 'c':3, 'd':4} into a list.", "input": "", "output": "dictionary = {'a':1, 'b':2, 'c':3, 'd':4}\n\npacked_list = [list(dictionary.keys()), list(dictionary.values())]\n\nprint(packed_list) # Output = [['a', 'b', 'c', 'd'], [1, 2, 3, 4]]", "category": "Python"}, {"instruction": "Write a piece of code to merge two arrays into one.", "input": "array1 = [ 1, 2, 3]\narray2 = [ 4, 5, 6]", "output": "merged_arrays = array1 + array2", "category": "Python"}, {"instruction": "How can we check whether a given number is prime or not using a loop?", "input": "num = 17", "output": "def is_prime(num):\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True", "category": "Python"}, {"instruction": "Write a code that will produce a list containing the first and last element of each inner list inside a list of lists.", "input": "my_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def get_first_and_last(my_list):\n    result = [] \n    for lst in my_list:\n        result.append([lst[0], lst[-1]]) \n    return result\n\nif __name__ == '__main__':\n    my_list = [[1,2,3], [4,5,6], [7,8,9]]\n    print(get_first_and_last(my_list)) # Output: [[1, 3], [4, 6], [7, 9]]", "category": "Python"}, {"instruction": "Implement a code that will group a series of numbers into groups of three.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "def group_three(nums): \n    result = []\n    nums_length = len(nums)\n\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n\n    return result\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]", "category": "Python"}, {"instruction": "Modify the given Python code to redirect to a different page when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>", "category": "Python"}, {"instruction": "Create a regular expression to validate that a string contains only letters between a and z.", "input": "", "output": "/^[a-z]+$/", "category": "Python"}, {"instruction": "Create a dictionary in Python with two keys and it corresponds to two values.", "input": "", "output": "my_dict = {\"key1\" : \"value1\", \"key2\" : \"value2\"}", "category": "Python"}, {"instruction": "Write the HTML code to create a button which redirects to another webpage when clicked.", "input": "", "output": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>", "category": "Python"}, {"instruction": "Create a for-loop in Python for printing all numbers from 1 to 9 (inclusive).", "input": "", "output": "for x in range(1, 10): \n  print(x)", "category": "Python"}, {"instruction": "Write a C++ program to separate digits and characters from a string", "input": "Input string: ab123cde", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n    string str = \"ab123cde\"; \n  \n    string digit; \n    string alpha; \n  \n    for (int i = 0; i < str.length(); i++) { \n        if (isdigit(str[i])) { \n            digit.push_back(str[i]); \n        } \n        else { \n            alpha.push_back(str[i]); \n        } \n    } \n  \n    cout << digit << endl; \n    cout << alpha << endl; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Generate a C program to print the ASCII value of a given character", "input": "Input character: A", "output": "#include <stdio.h> \nint main() \n{ \n    char c = 'A'; \n  \n    // Typecast to integer \n    int x = c; \n  \n    printf(\"ASCII value of %c = %d\", c, x); \n    return 0; \n}", "category": "Python"}, {"instruction": "Generate Python code to reverse a string", "input": "Input string: Hello", "output": "def reverseString(str): \n    reversed_str = \"\" \n    for i in str: \n        reversed_str = i + reversed_str \n    return reversed_str   \n\nreverseString(\"Hello\")", "category": "Python"}, {"instruction": "Generate a JavaScript algorithm to sort a given array", "input": "Input array: [2, 3, 1, 4]", "output": "function sortArray(nums) {\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[j] < nums[i]) {\n                let temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n}", "category": "Python"}, {"instruction": "Explain the meaning of the term \u2018data encapsulation\u2019 in Object-Oriented Programming.", "input": "", "output": "Data encapsulation is an important feature of Object-Oriented Programming (OOP). It is a technique of combining data and functions into a single unit called class. data encapsulation hides the implementation details of a class and exposes only the necessary and relevant information which is known as abstraction. This helps to reduce complexity and increase robustness of a program as the implementation details are hidden from the user.", "category": "Python"}, {"instruction": "Create an HTML page to display a form to enter email and password.", "input": "", "output": "<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n  <h1>Login Form</h1>\n  <form>\n    Email: <input type=\"text\" name=\"email\" /><br />\n    Password: <input type=\"password\" name=\"pwd\" /><br />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "How do we define the scope of a variable in Python?", "input": "", "output": "In Python, the scope of a variable is determined by the location of its definition. Variables defined within a function have a local scope, while variables defined outside a function have a global scope. Local variables are accessible only within the same function in which they are declared, while global variables are accessible within all functions.", "category": "Python"}, {"instruction": "Describe the role of the constructors in  a Java class.", "input": "", "output": "The role of the constructors in a Java class is to initialize the fields of an object. A constructor is a special method that is called when an object is instantiated. Constructors typically have the same name as the class and take in parameters. The parameters are used to initialize the fields of the object. Constructors are important because they allow us to create uniform objects with a well-defined state. Constructors can also be used to set up desired behaviors on objects and to make sure they are initialized properly.", "category": "Python"}, {"instruction": "Design an algorithm to calculate the Fibonacci sequence up to a given number n.", "input": "", "output": "We can design an algorithm to calculate the Fibonacci sequence up to a given number n. The algorithm would include two variables, a1 and a2, initially set to 0 and 1. These values would then be updated at each iteration to hold the latest two Fibonacci sequence numbers. A loop would be used to calculate the Fibonacci numbers from 0 up to the given number n. For each iteration, the latest two variables a1 and a2 would be added and stored in the new variable a3. a2 will then be assigned the value stored in a1 and a3 will be assigned to a2. This cycle would continue until the sum of a1 and a2 exceeds the input number n. At that point, the loop would terminate and the Fibonacci sequence will be calculated up to n.", "category": "Python"}, {"instruction": "What is the significance of the \u2018except\u2019 statement in Python?", "input": "", "output": "The \u2018except\u2019 statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The \u2018except\u2019 statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it.", "category": "Python"}, {"instruction": "Create a sorting algorithm in C# which sorts an array of integers.", "input": "int a[6] = {12, 5, 9, 24, 15, 3};", "output": "public static void sortArray(int[] a)\n{\n    int temp, min_idx;\n    for (int i = 0; i < a.length; i++)\n    {\n        min_idx = i;  \n        for (int j = i+1; j < a.length; j++)\n        {\n            if (a[j] < a[min_idx])\n            {\n                min_idx = j;\n            } \n        }\n        temp = a[min_idx];\n        a[min_idx] = a[i];\n        a[i] = temp;\n    }\n}", "category": "Python"}, {"instruction": "Change the HTML code to open a link in a new tab when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.open('https://example.com/','_blank')\">Visit example.com</button>", "category": "Python"}, {"instruction": "Write a function in Java to compute the standard deviation of an array of real numbers.", "input": "float[] data = {3.3, 5.6, 7.8, 5.4, 9.9};", "output": "public static double StandardDev(float[] data) \n{ \n    double mean = 0.0, sum_deviation = 0.0; \n    for(double num : data) \n        mean += num; \n    mean = mean / data.length; \n    for(double num: data) \n        sum_deviation += (num - mean)*(num - mean); \n    return Math.sqrt(sum_deviation / data.length); \n}", "category": "Python"}, {"instruction": "Create an array of 8 string objects in JavaScript with different values.", "input": "", "output": "var stringArray = [\"word1\", \"word2\", \"word3\", \"word4\", \"word5\", \"word6\", \"word7\", \"word8\"];", "category": "Python"}, {"instruction": "Overwrite the existing Java timestamp processing class to produce the desired outputs.", "input": "public class TimestampProcessing {\n    public static List<String> process(String[] timestamps) {\n        List<String> result = new ArrayList<>();\n        for (String timestamp : timestamps) {\n            String dateFormat = \"dd/MM/yyyy hh:mm:ss\";\n            Date date = new SimpleDateFormat(dateFormat).parse(timestamp);\n            Calendar cal = Calendar.getInstance();\n            cal.setTime(date);\n            cal.add(Calendar.HOUR_OF_DAY, -2);\n            result.add(cal.getTime().toString());\n        }\n        return result;\n    }\n}", "output": "public class TimestampProcessing {\n    public static List<String> process(String[] timestamps) {\n        List<String> result = new ArrayList<>();\n        for (String timestamp : timestamps) {\n            String dateFormat = \"dd/MM/yyyy hh:mm:ss\";\n            Date date = new SimpleDateFormat(dateFormat).parse(timestamp);\n            Calendar cal = Calendar.getInstance();\n            cal.setTime(date);\n            cal.add(Calendar.HOUR_OF_DAY, -2);\n            String dateFormatUpdated = \"MM/dd/yyyy hh:mm:ss a\";\n            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormatUpdated);\n            result.add(simpleDateFormat.format(cal.getTime()));\n        }\n        return result;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the cities with a population greater than 5 million.", "input": "", "output": "SELECT City\nFROM Population\nWHERE Population > 5000000;", "category": "Python"}, {"instruction": "Create an HTML page using JavaScript that generates a table with the following data.", "input": "const data = [\n  {\n    name: \"John Doe\",\n    age: 30,\n    city: \"New York\"\n  },\n  {\n    name: \"Jane Smith\",\n    age: 25,\n    city: \"San Francisco\"\n  },\n  {\n    name: \"Adam Johnson\",\n    age: 27,\n    city: \"Los Angeles\"\n  }\n];", "output": "<html>\n  <head>\n    <script>\n      function generateTable() {\n        const data = [\n          {\n            name: \"John Doe\",\n            age: 30,\n            city: \"New York\"\n          },\n          {\n            name: \"Jane Smith\",\n            age: 25,\n            city: \"San Francisco\"\n          },\n          {\n            name: \"Adam Johnson\",\n            age: 27,\n            city: \"Los Angeles\"\n          }\n        ];\n\n        let table = document.createElement('table');\n\n        // Add Table Headers\n        let tableHeaders = \"<tr>\";\n        [\"Name\",\"Age\",\"City\"].forEach(header => {\n          tableHeaders += `<th>${header}</th>`;\n        });\n        tableHeaders += \"</tr>\";\n        table.innerHTML = tableHeaders;\n\n        //Add Table Rows\n        data.forEach(datum => {\n          let tableRow = document.createElement('tr');\n          for (let key in datum) {\n            let tableData = document.createElement('td');\n            tableData.innerText = datum[key];\n            tableRow.appendChild(tableData);\n          }\n          table.appendChild(tableRow);\n        });\n\n        document.getElementById('table-container').appendChild(table);\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"table-container\"></div>\n    <script> generateTable(); </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "How to convert a string to a list in Java", "input": "", "output": "String inputString = \"TestString\";\nList<Character> list = new ArrayList<>();\nfor(char c : inputString.toCharArray()) {\n        list.add(c);\n}", "category": "Python"}, {"instruction": "How to reverse a given string in JavaScript?", "input": "", "output": "let str = 'Hello World!';\nlet newStr = str.split('').reverse().join('');\nconsole.log(newStr); //outputs '!dlroW olleH'", "category": "Python"}, {"instruction": "How to remove the first and last characters from a string in JavaScript?", "input": "", "output": "let str = 'Hello World!';\nlet newStr = str.slice(1, -1);\nconsole.log(newStr); //outputs 'ello Worl'", "category": "Python"}, {"instruction": "Write a code to get the current time in Python", "input": "", "output": "import time\n\n# return UTC time as a float\ncurrent_time = time.time()\n\n# return current time as a string in this format:\n# 'Thu Feb 28 15: 16: 14 2019'\ncurrent_time_str = time.ctime()", "category": "Python"}, {"instruction": "Design a WebGL program to generate a snow flake effect in the browser.", "input": "", "output": "The WebGL program would utilize shaders and particles to generate a snowflake effect in the browser. The vertex shader would compute the spherical coordinates of each snowflake particle, and the fragment shader would output a point representing each particle as a snowflake with the appropriate colors and depth. Additionally, the program would compute a set of transforms on each particle based on the time elapsed, to bring the scattering and movement effects of snow.", "category": "Python"}, {"instruction": "Write a code to check if the string has all unique characters in Python", "input": "", "output": "def isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True", "category": "Python"}, {"instruction": "How to redirect a page using JavaScript", "input": "", "output": "window.location.replace(\"http://www.example.com\");", "category": "Python"}, {"instruction": "How to write a query to select records from a MySQL table titled \u201cUsers\u201d", "input": "", "output": "SELECT * FROM Users;", "category": "Python"}, {"instruction": "Create a class in Java with two methods, get and set.", "input": "", "output": "public class MyClass { \n    private int x; \n  \n    // Getter and setter \n    public int getX() { \n        return x; \n    } \n  \n    public void setX(int x) { \n        this.x = x; \n    } \n}", "category": "Python"}, {"instruction": "How to make an http request in Python", "input": "", "output": "import requests\n\nr = requests.get('http://www.example.com/')\nprint(r.text)", "category": "Python"}, {"instruction": "Create a variable in PHP to store a string \u201cHello World\u201d", "input": "", "output": "$myString = \"Hello World\";", "category": "Python"}, {"instruction": "Generate a random string using 8 characters in Python.", "input": "", "output": "import random \nimport string\n\ndef generate_random_string(size):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))\n    \nprint(generate_random_string(8))", "category": "Python"}, {"instruction": "Write a method in C# for finding the longest common subsequence of two strings.", "input": "string s1 = \"ABCDGHLQR\"; \nstring s2 = \"AEDPHR\";", "output": "public static string LCS(string s1, string s2) \n{ \n    int m = s1.Length;\n    int n = s2.Length;\n    int[,] L = new int[m + 1, n + 1];  \n\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            if (i == 0 || j == 0) \n                L[i, j] = 0; \n            else if (s1[i - 1] == s2[j - 1]) \n                L[i, j] = L[i - 1, j - 1] + 1; \n            else\n                L[i, j] = Math.Max(L[i - 1, j], L[i, j - 1]); \n        } \n    }  \n\n    int index = L[m, n]; \n    int temp = index; \n\n    char[] lcs = new char[index + 1]; \n    lcs[index] = '\\0'; \n\n    int i = m, j = n; \n    while (i > 0 && j > 0) \n    { \n        if (s1[i - 1] == s2[j - 1]) \n        { \n            lcs[index - 1] = s1[i - 1]; \n            i--;\n            j--;\n            index--; \n        }  \n\n        else if (L[i - 1, j] > L[i, j - 1]) \n            i--; \n        else\n            j--;\n    }  \n    return new string(lcs); \n}", "category": "Python"}, {"instruction": "How to check if a number is prime or not in Java", "input": "", "output": "public class Number { \n\t\n    public static boolean isPrime(int n) \n    { \n        // Corner cases \n        if (n <= 1) \n            return false; \n        if (n <= 3) \n            return true; \n  \n        // This is checked so that we can skip \n        // middle five numbers in below loop \n        if (n % 2 == 0 || n % 3 == 0) \n            return false; \n  \n        for (int i = 5; i * i <= n; i = i + 6) { \n            if (n % i == 0 || n % (i + 2) == 0) \n                return false; \n        } \n  \n        return true; \n    } \n  \n    public static void main(String[] args) \n    { \n        int n = 25; \n        if (isPrime(n)) \n            System.out.println(\"Yes\"); \n        else\n            System.out.println(\"No\"); \n    } \n}", "category": "Python"}, {"instruction": "Write a script for filtering out records who are older than 18 years old.", "input": "[\n    {\n        \"name\": \"John Doe\",\n        \"age\": 20\n    },\n    {\n        \"name\": \"Jane Smith\",\n        \"age\": 16\n    },\n    {\n        \"name\": \"Dan Roberts\",\n        \"age\": 25\n    }\n]", "output": "const data = [\n    {\n        \"name\": \"John Doe\",\n        \"age\": 20\n    },\n    {\n        \"name\": \"Jane Smith\",\n        \"age\": 16\n    },\n    {\n        \"name\": \"Dan Roberts\",\n        \"age\": 25\n    }\n];\n\nlet filteredRecords = data.filter(record => {\n    return record.age > 18;\n});\n\nconsole.log(filteredRecords);", "category": "Python"}, {"instruction": "Write a C++ code to create a function which prints the sum of two integers.", "input": "", "output": "#include <iostream>\n \nusing namespace std;\n \n// Function to print the sum of two integers\nvoid printSumOfIntegers(int first, int second) {\n    cout << first + second << endl;\n}", "category": "Python"}, {"instruction": "Write a CSS code to make list items to have a blue background color and a text color of green.", "input": "", "output": "li {\n  background-color: blue;\n  color: green;\n}", "category": "Python"}, {"instruction": "Given the following JSON data, create a Python program to read the data and print the name of the city with the highest population.", "input": "{\n  \"cities\": [\n    {\n      \"name\": \"New York\",\n      \"population\": 8175133\n    },\n    {\n      \"name\": \"Los Angeles\",\n      \"population\": 3792621\n    },\n    {\n      \"name\": \"Chicago\",\n      \"population\": 2695598\n    }\n  ]\n}", "output": "import json\n\nwith open('data.json') as f:\n    data = json.load(f)\n\nmax_population = 0\nmax_city_name = \"\"\nfor city in data['cities']:\n    if city['population'] > max_population:\n        max_population = city['population']\n        max_city_name = city['name']\n\nprint(\"The city with the highest population is\", max_city_name)", "category": "Python"}, {"instruction": "Create a Python program to edit the following line of code to change the text color of the button.", "input": "<button>Press Me</button>", "output": "<button style=\"color: red;\">Press Me</button>", "category": "Python"}, {"instruction": "Edit the following line of code to turn the sentence into plural form.", "input": "sentence = \"I have one friend\"", "output": "sentence = \"I have two friends\"", "category": "Python"}, {"instruction": "Write a Java program to sort the following array of integers using Quick Sort.", "input": "int arr[] = {4, 3, 6, 2, 5, 1};", "output": "public class QuickSort \n{ \n    // Method to implement quick sort \n    public static void quickSort(int[] arr, int low, int high) \n    { \n        if (low < high) \n        { \n            /* pi is partitioning index, arr[pi] is  \n              now at right place */\n            int pi = partition(arr, low, high); \n  \n            // Recursively sort elements before \n            // partition and after partition \n            quickSort(arr, low, pi-1); \n            quickSort(arr, pi+1, high); \n        } \n    } \n  \n    // Method to find partition index \n    public static int partition(int arr[], int low, int high) \n    { \n        int pivot = arr[high];  \n        int i = (low-1); // index of smaller element \n        for (int j=low; j<high; j++) \n        { \n            // If current element is smaller than the pivot \n            if (arr[j] < pivot) \n            { \n                i++; \n  \n                // swap arr[i] and arr[j] \n                int temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        } \n  \n        // swap arr[i+1] and arr[high] (or pivot) \n        int temp = arr[i+1]; \n        arr[i+1] = arr[high]; \n        arr[high] = temp; \n  \n        return i+1; \n    } \n  \n    // Main method \n    public static void main(String args[]) \n    { \n        int[] arr = {4, 3, 6, 2, 5, 1}; \n        int n = arr.length; \n          \n        quickSort(arr, 0, n-1); \n          \n        /* Print the sorted array */\n        System.out.println(\"Sorted array: \"); \n        for(int i=0; i<n; ++i) \n            System.out.print(arr[i] + \" \"); \n    } \n}", "category": "Python"}, {"instruction": "Write a function definition in JavaScript that calculates the factorial of a number.", "input": "", "output": "function factorial(n) {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact = fact * i;\n  }\n  return fact;\n}", "category": "Python"}, {"instruction": "Implement bubble sort in Python.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Write a Java program that takes the following input parameters and prints their sum to the console.", "input": "int a = 2; int b = 4;", "output": "public class Sum {\n public static void main(String[] args) {\n  int a = 2;\n  int b = 4;\n  \n  int sum = a + b;\n  System.out.println(\"Sum = \" + sum);\n }\n}", "category": "Python"}, {"instruction": "Implement an iterator in Python for the following string.", "input": "string = 'Hello World!'", "output": "class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)", "category": "Python"}, {"instruction": "Write an HTML code to create a navigation bar with 3 links.", "input": "", "output": "<nav>\n <ul>\n  <li><a href=\"#\">Link 1</a></li>\n  <li><a href=\"#\">Link 2</a></li>\n  <li><a href=\"#\">Link 3</a></li>\n </ul>\n</nav>", "category": "Python"}, {"instruction": "What is the purpose behind using comments while writing code?", "input": "", "output": "Comments are used while writing code to explain the logic and purpose behind the code. This is important for multiple reasons, such as helping other developers better understand the code and providing helpful reminders for developers returning to the code at a later time. Additionally, good comments make it easier to debug and maintain the code.", "category": "Python"}, {"instruction": "Explain the purpose of try and except blocks when writing code.", "input": "", "output": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.", "category": "Python"}, {"instruction": "Develop a program to generate the Fibonacci sequence up to n.", "input": "", "output": "def fibonacci(n):\n    fib_sequence = [1, 1]\n\n    for i in range(2, n):\n        new_num = fib_sequence[i-2] + fib_sequence[i-1]\n        fib_sequence.append(new_num)\n\n    return fib_sequence\n\nfibonacci(10) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Write a block of code to convert a given string to upper case.", "input": "String to convert: \"The Quick Brown Fox Jumped\"", "output": "string = \"The Quick Brown Fox Jumped\"\n\nconverted_string = string.upper()\n\nprint(converted_string)  # Output: THE QUICK BROWN FOX JUMPED", "category": "Python"}, {"instruction": "Explain the concept of tokenization in relation to natural language processing.", "input": "", "output": "Tokenization is the process of breaking down a given sentence or text into smaller chunks known as tokens. This is an important step in natural language processing as it allows for further processing such as stemming, part of speech tagging, sentiment analysis, etc. For example, tokenization can break a sentence \"The young cat jumped onto the fence\" into [\"The\", \"young\", \"cat\", \"jumped\", \"onto\", \"the\", \"fence\"].", "category": "Python"}, {"instruction": "Develop a function to remove the given string from another string.", "input": "String to remove: \"cat\"\nString to modify: \"The crazy cat jumped to the roof\"", "output": "def remove_string(remove, string):\n    return string.replace(remove, \"\")\n\nremove_string(\"cat\", \"The crazy cat jumped to the roof\")\n# Output: \"The crazy  jumped to the roof\"", "category": "Python"}, {"instruction": "Write a JavaScript code to create a Date object.", "input": "", "output": "let today = new Date();", "category": "Python"}, {"instruction": "Compute the sum of all the elements in an array of integers in Java.", "input": "int[] arr = {1,2,3,4,5};", "output": "int sum = 0; \nfor (int i=0; i<arr.length; i++) {\n sum += arr[i];\n}\nSystem.out.println(sum);", "category": "Python"}, {"instruction": "Create a SQL query to select all records in the \"customers\" table where the customer name is \"John Smith\".", "input": "", "output": "SELECT * FROM customers WHERE name = 'John Smith';", "category": "Python"}, {"instruction": "Create a HTML webpage which displays a list of products.", "input": "", "output": "<html>\n <head>   \n <title>List Of Products</title>\n </head>\n <body>\n  <ul>\n   <li>Product 1</li>\n   <li>Product 2</li>\n   <li>Product 3</li>\n  </ul>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create a regular expression to detect if a string contains only digits (start with 0 to 9).", "input": "", "output": "pattern = r\"^[0-9]+$\"", "category": "Python"}, {"instruction": "Write a Python code to extract the first 3 elements of the following list.", "input": "list = [1, 2, 3, 4, 5]", "output": "first_three_elements = list[:3]", "category": "Python"}, {"instruction": "Create a React component to render a button with a text \"Submit\".", "input": "", "output": "const SubmitButton = () => {\n  return (\n    <button type=\"submit\">Submit</button>\n  )\n}", "category": "Python"}, {"instruction": "Write a SQL statement to select the names of employees beginning with 'A'.", "input": "", "output": "SELECT name FROM employees WHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Suggest an algorithm to solve a N queens problem.", "input": "", "output": "One possible algorithm to solve a N queens problem is to use backtracking. The basic idea is to place a queen in a column and try to place the other queen in the next column, and then repeating this in the subsequent columns until all of the queens are placed in the board.", "category": "Python"}, {"instruction": "Write a PHP code to find the first day of the current month.", "input": "", "output": "$date = strtotime(date('Y-m-01'));\necho date('Y-m-d', $date);", "category": "Python"}, {"instruction": "Write a Python code to create two empty lists.", "input": "", "output": "list_one = []\nlist_two = []", "category": "Python"}, {"instruction": "You need to classify an email as spam or not spam. Output \"spam\" or \"not spam\".", "input": "This is an email offering a chance to win a prize.", "output": "not spam", "category": "Python"}, {"instruction": "Write an SQL query to find all employees with a salary greater than $5000.", "input": "", "output": "SELECT * FROM employees WHERE salary > 5000;", "category": "Python"}, {"instruction": "Create an HTML button that triggers an alert when clicked.", "input": "", "output": "<button onclick=\"alert('Button clicked')\">Click Me!</button>", "category": "Python"}, {"instruction": "Write a JavaScript expression to compute the remainder of 5 divided by 3.", "input": "", "output": "5 % 3;", "category": "Python"}, {"instruction": "Write a Swift code snippet to add two objects of any data type.", "input": "", "output": "func addTwo<T: Comparable>(_ a: T, _ b: T) -> T {\n    return a + b   \n}", "category": "Python"}, {"instruction": "Create a CSS class to style a paragraph text in bold and purple.", "input": "", "output": ".bold-paragraph {\n  font-weight: bold;\n  color: purple;\n}", "category": "Python"}, {"instruction": "Write an SQL query to select the item names and prices from an inventory table.", "input": "", "output": "SELECT item_name, price FROM inventory;", "category": "Python"}, {"instruction": "Write a Python method to generate a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))", "category": "Python"}, {"instruction": "Design a database schema to track course registrations in a university.", "input": "", "output": "CREATE TABLE students (\n  id INT AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE courses (\n  id INT AUTO_INCREMENT,\n  title VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE registrations (\n  student_id INT NOT NULL,\n  course_id INT NOT NULL,\n  FOREIGN KEY (student_id) REFERENCES students(id),\n  FOREIGN KEY (course_id) REFERENCES courses(id)\n);", "category": "Python"}, {"instruction": "Convert the following string to uppercase without using a built-in string method.", "input": "this is a string", "output": "newString = '';\n\nfor (let char of thisString) {\n  newString += char.toUpperCase();\n}", "category": "Python"}, {"instruction": "Write a function in R to calculate the sum of a vector elements.", "input": "", "output": "my_sum <- function(x) {\n  summation <- 0\n  for (i in 1:length(x)) {\n    summation <- summation + x[i]\n  }\n  return(summation)\n}", "category": "Python"}, {"instruction": "Create an iOS app that calculates and shows the currency conversion rate between two different countries.", "input": "", "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view.\n        \n        let fromCurrency = \"USD\"\n        let toCurrency = \"AUD\"\n        \n        CurrencyService.shared.getCurrencyExchangeRate(fromCurrency: fromCurrency, toCurrency: toCurrency) { exchangeRate in\n            print(\"The exchange rate from \\(fromCurrency) to \\(toCurrency) is \" + exchangeRate)\n        }\n    }\n\n}\n\nclass CurrencyService {\n    \n    static let shared = CurrencyService()\n    \n    func getCurrencyExchangeRate(fromCurrency: String, toCurrency: String, completion: @escaping (String) -> Void) {\n        guard let url = URL(string: \"https://api.exchangeratesapi.io/latest?base=\\(fromCurrency)&symbols=\\(toCurrency)\") else {\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { (data: Data?, response: URLResponse?, error: Error?) in\n            if let error = error {\n                print(\"Error: Could not request exchange rate from server. \\(error.localizedDescription)\")\n            }\n            \n            guard let data = data else {\n                print(\"Error: Did not receive data\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                guard let jsonDict = json as? Dictionary<String, Any>,\n                    let rates = jsonDict[\"rates\"] as? Dictionary<String, Double>,\n                    let exchangeRate = rates[toCurrency] else {\n                        print(\"Error: Could not get exchange rate from JSON\")\n                        return\n                }\n                completion(String(exchangeRate))\n            } catch {\n                print(\"Error: Could not parse JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n}", "category": "Python"}, {"instruction": "Create a project in C# to read from a database and display the results in a table.", "input": "", "output": "using System;\nusing System.Data;\nusing MySql.Data.MySqlClient;\n\nnamespace DatabaseReader\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try \n            {\n                // Database connection\n                string connString = \"server=localhost; user id=root; database=DatabaseName\";\n                MySqlConnection mySQLConn = new MySqlConnection(connString);\n                mySQLConn.Open();\n\n                // SQL statement to execute\n                string sql = \"select ColumnName, ColumnName2 from TableName\";\n                MySqlDataAdapter dbAdapter = new MySqlDataAdapter(sql, mySQLConn);\n                DataTable dbTable = new DataTable();\n                dbAdapter.Fill(dbTable);\n\n                // Display table header\n                for (int i = 0; i < dbTable.Columns.Count; i++)\n                {\n                    Console.Write(dbTable.Columns[i].ColumnName + \"\\t\");\n                }\n                Console.WriteLine();\n\n                // Display table contents\n                foreach (DataRow row in dbTable.Rows)\n                {\n                    foreach(object item in row.ItemArray) {\n                        Console.Write(item + \"\\t\");\n                    }\n                    Console.WriteLine();\n                }\n\n                //Close database connection\n                mySQLConn.Close();\n            } \n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Convert a given string to camel case.", "input": "", "output": "def to_camel_case(string):\n    result = \"\" \n    for word in string.split(' '): \n        result += word.title() \n    return result", "category": "Python"}, {"instruction": "Parse a given json string and retrieve a dictionary object.", "input": "json_string = '{\"name\": \"John Smith\", \"age\": 31}'", "output": "import json\n\ndef parse(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "Write a SQL query to find the maximum and minimum salaries of employees in a given company.", "input": "", "output": "SELECT MAX(salary), MIN(salary)\nFROM Employee", "category": "Python"}, {"instruction": "Write a function to find the highest prime number that can be divided by a given number.", "input": "", "output": "def highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and is_prime(i):\n            highest_factor = i\n    return highest_factor\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function that returns the `n`th number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a function to count the number of characters in a string, without using the len() function.", "input": "", "output": "def count_characters(string):\n    count = 0\n    for char in string:\n        count +=1\n    return count", "category": "Python"}, {"instruction": "Make a class called 'Car' that stores information about a car and contains a function called 'start' which when called, prints out \"Car has started\".", "input": "", "output": "class Car:\n    def __init__(self):\n        self.model = \"\"\n        self.year = 0\n    \n    def start(self):\n        print(\"Car has started\")", "category": "Python"}, {"instruction": "Identify the outputs that the following C program produces.", "input": "#include <stdio.h>\n \nint main()\n{\n    int a = 5;\n    int b = 6;\n    int c = a + b;\n    printf(\"c = %d\", c);\n    return 0;", "output": "Output: c = 11", "category": "Python"}, {"instruction": "Create a function that takes in a list of numbers and returns a list of the same numbers, but sorted in a descending order.", "input": "nums = [6, 5, 8, 2, 7, 5]", "output": "def sort_desc(nums):\n    return sorted(nums, reverse=True)", "category": "Python"}, {"instruction": "Write a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.", "input": "my_string = 'Hello World'", "output": "def word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\n\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)", "category": "Python"}, {"instruction": "Create a function to detect if two given strings are anagrams or not.", "input": "str1 = 'abc'\nstr2 = 'bac'", "output": "def is_anagram(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\nresult = is_anagram(str1, str2)\nprint(\"Is anagram:\", result)", "category": "Python"}, {"instruction": "Create a function to output a nested dictionary from a given list of keys and values.", "input": "list_keys = [\"a\", \"b\", \"c\"]\nlist_vals = [1, 2, 3]", "output": "def dictionary(list_keys, list_vals):\n    dict1 = dict(zip(list_keys, list_vals))\n    return dict1\n\nfinal_dict = dictionary(list_keys, list_vals)\nprint(\"Final dictionary:\", final_dict)", "category": "Python"}, {"instruction": "Given a comma separated string, write a Python program to convert the string into a list.", "input": "my_string = \"Hello,World,Hi\"", "output": "my_list = my_string.split(',')\nprint(\"List:\", my_list)", "category": "Python"}, {"instruction": "Write a function to construct a new string by appending the provided string to itself.", "input": "my_string = 'Hello'", "output": "def append_string(my_string):\n    return my_string + my_string\n\nfinal_string = append_string(my_string)\nprint(\"Final string:\", final_string)", "category": "Python"}, {"instruction": "Edit the previous code to print out the total salary of all employees whose salary is between 40,000 and 50,000.", "input": "", "output": "SELECT SUM(salary) as total_salary FROM employees WHERE salary BETWEEN 40000 AND 50000;", "category": "Python"}, {"instruction": "Modify the Java program below so that it prints the sum of two given numbers.", "input": "int num1 = 3;\nint num2 = 5;", "output": "int num1 = 3;\nint num2 = 5;\nint sum = num1 + num2;\n\nSystem.out.println(\"Sum is: \" + sum);", "category": "Python"}, {"instruction": "Describe an effective way to debug a JavaScript program.", "input": "", "output": "A good approach to debugging a JavaScript program is to start by checking for syntax errors. This can be done by using an integrated development environment (IDE) or text editor with built-in syntax checking capabilities. Additionally, the JavaScript console can be used to inspect variables and view output. It is also useful to set breakpoints in the code and step through the code line-by-line to identify the cause of any issues.", "category": "Python"}, {"instruction": "What is the command to compile a C++ program?", "input": "", "output": "The command to compile a C++ program is typically \"g++ <filename>.cpp\". For example, if the name of the C++ program is \"HelloWorld.cpp\", the command to compile it would be \"g++ HelloWorld.cpp\".", "category": "Python"}, {"instruction": "Compare arrays in JavaScript.", "input": "", "output": "Arrays can be compared in JavaScript using the comparison operators == and !=. When comparing two arrays, the == operator will return true if the arrays contain the same elements in the same order, and false if the arrays are not equal. The != operator will return the opposite boolean value.", "category": "Python"}, {"instruction": "Write a code that performs binary search on a given list.", "input": "my_array = [1,3,5,7,9]", "output": "def binary_search(my_array, x): \n    start = 0\n    end = len(my_array) - 1\n  \n    while start <= end: \n  \n        mid = (start + end) // 2 # calculate mid\n  \n        # Check if x is present at mid \n        if my_array[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif my_array[mid] > x: \n            end = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n    # If we reach here, then the element \n    # was not present \n    return -1", "category": "Python"}, {"instruction": "Fill in the missing code so that it prints the second element of each list.", "input": "my_list = [[1,2,3],[4,5,6],[7,8,9]]", "output": "for lst in my_list:\n    print(lst[1])", "category": "Python"}, {"instruction": "Implement a function that will return the intersection of two given arrays.", "input": "arr_1 = [2,3,4,7]\narr_2 = [1,3, 5, 6, 7]", "output": "def intersection(arr_1, arr_2):\n    intersect = []\n\n    for i in arr_1:\n        if i in arr_2:\n            intersect.append(i)\n\n    return intersect\n\nif __name__ == '__main__':\n    arr_1 = [2,3,4,7]\n    arr_2 = [1,3, 5, 6, 7]\n    print(intersection(arr_1, arr_2)) # Output: [3, 7]", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments and checks if the two strings are anagrams (same letters arranged differently).", "input": "str_1 = \"rat\"\nstr_2 = \"tar\"", "output": "def is_anagram(str_1, str_2):\n    str_1 = sorted(str_1)\n    str_2 = sorted(str_2)\n\n    if str_1 == str_2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"rat\"\n    str_2 = \"tar\"\n    print(is_anagram(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments, and decides if either of them is a palindrome.", "input": "str_1 = \"racecar\"\nstr_2 = \"noon\"", "output": "def is_palindrome(str_1, str_2):\n    str_1_reverse = str_1 [::-1]\n    if str_1 == str_1_reverse or str_2 == str_2[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Implement a function that will sort the array using insertion sort.", "input": "nums=[5,2,4,6,1,3]", "output": "def insertion_sort(nums):\n    for i in range(1,len(nums)):\n        item_to_insert = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > item_to_insert:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = item_to_insert\n\n    return nums\n\n\nif __name__ == '__main__':\n    nums = [5,2,4,6,1,3]\n    print(insertion_sort(nums)) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "How can we make the following model more efficient?", "input": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_dim=128))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(1, activation='sigmoid'))", "output": "We can make this model more efficient by increasing the number of neurons in each layer to 64 and by reducing the number of layers to 3. Furthermore, we can use Conv2D layers instead of Dense layers to increase efficiency and reduce the model size. Additionally, we can use \"dropout\" layers to regularize and reduce overfitting. Finally, we can use the \"Adam\" optimizer to improve the accuracy of the model.", "category": "Python"}, {"instruction": "Write an SQL query to select the names of all employees whose salary is between 40,000 and 50,000.", "input": "", "output": "SELECT name FROM employees WHERE salary BETWEEN 40000 AND 50000;", "category": "Python"}, {"instruction": "Write a sql query to list all customers with phone numbers that start with a 6 or 7.", "input": "", "output": "SELECT * FROM customers WHERE phone LIKE '6%' OR phone LIKE '7%';", "category": "Python"}, {"instruction": "Create a JavaScript program to validate an IP address.", "input": "", "output": "function validateIP(ipAddress) {\n    let ipElements = ipAddress.split(\".\");\n    if(ipElements.length !== 4) {\n        return false;\n    } \n    for(let i=0; i<ipElements.length; i++)\n    {\n        let number = Number(ipElements[i]);\n        if(number < 0 || number > 255) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Suggest a solution to the following problem: given an array of numbers, find all pairs of numbers whose product is equal to the given target number.", "input": "arr = [1,5,3,2], target = 10", "output": "def find_pairs(arr, target):\n\tpairs = []\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i]*arr[j] == target:\n\t\t\t\tpairs.append((arr[i], arr[j]))\n\treturn pairs", "category": "Python"}, {"instruction": "Create a function that takes two arguments: the number of apples and oranges and returns the total number of fruits.", "input": "apples = 3\noranges = 5", "output": "def count_fruits(apples, oranges):\n    return apples + oranges", "category": "Python"}, {"instruction": "Create a function that takes two strings and removes all the white spaces from them.", "input": "string_1 = \"Hello World !\"\nstring_2 = \"  Goodbye!  \"", "output": "def remove_whitespace(string_1, string_2):\n    return string_1.replace(\" \", \"\") + string_2.replace(\" \", \"\")", "category": "Python"}, {"instruction": "Generate a valid regex pattern that finds instances of the word \u201cunicorn\u201d appearing at the end of a sentence.", "input": "", "output": "\\bunicorn\\b\\.$", "category": "Python"}, {"instruction": "Create a function that takes two integers a and b and returns the sum of the two values.", "input": "", "output": "def sum(a, b): \n    return a + b", "category": "Python"}, {"instruction": "What is the return type of a Javascript function?", "input": "", "output": "In JavaScript, the return type of a function is the type of value returned by the function. It can be any valid JavaScript data type, including primitive data types (e.g. number, string, boolean), objects, arrays, or even functions and symbols. If the function does not have an explicit return statement, it returns undefined.", "category": "Python"}, {"instruction": "Generate a program to reverse a user inputted string.", "input": "", "output": "def reverse_string():\n    string = input(\"Enter a string: \")\n    reversed_string = string[::-1]\n    return reversed_string", "category": "Python"}, {"instruction": "Create a Python class to represent the 'Employee' entity.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Generate a list of 10 random integers between 50 and 100.", "input": "", "output": "import random\nrand_num_list = [random.randint(50, 100) for i in range(10)]\nprint(rand_num_list)", "category": "Python"}, {"instruction": "Create a for loop to iterate through a list of numbers and print out the sum of all the numbers in the list.", "input": "my_list = [1,2,3,4,5]", "output": "total = 0\nfor num in my_list:\n    total += num\nprint(total)", "category": "Python"}, {"instruction": "Write a Python Evaluator to evaluate Python expression.", "input": "expression = \"5+3\"", "output": "def eval_expression(expression): \n return eval(expression) \n  \n# Call the function \nprint(eval_expression(expression))", "category": "Python"}, {"instruction": "Write a Python code to sort the given list of strings alphabetically.", "input": "lst = [\"Java\", \"C++\", \"Go\", \"Python\"]", "output": "def alphabetical_sort(lst):\n lst.sort()\n return lst\n\nprint(alphabetical_sort(lst))", "category": "Python"}, {"instruction": "Write a Python script to combine two given list of strings.", "input": "list1 = [\"Python\", \"Ruby\", \"JavaScript\"]\nlist2 = [\"C++\", \"C#\", \"GO\"]", "output": "def combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\n\nprint(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a Python program to filter out even numbers from a given list.", "input": "numbers = [2, 4, 6, 8, 10]", "output": "def filter_even_numbers(list):\n return [number for number in list if number % 2 == 1]\n\nprint(filter_even_numbers(numbers))", "category": "Python"}, {"instruction": "Write a Python program to retrieve a specific element from a given list.", "input": "list = [1, 4, 7, 9, 10]\nindex = 2", "output": "def get_element_by_index(list, index):\n return list[index]\n\nprint(get_element_by_index(list, index))", "category": "Python"}, {"instruction": "Write a Python program to swap the first and last element of a given list of integers.", "input": "numbers = [2, 3, 4, 5, 6]", "output": "def swap_first_last(list):\n list[0], list[-1] = list[-1], list[0]\n return list\n\nprint(swap_first_last(numbers))", "category": "Python"}, {"instruction": "Write a Python program to convert a given list of lists into a single list.", "input": "input_list = [[1, 2], [3, 4], [5, 6]]", "output": "def flatten_list(list):\n new_list = []\n for sublist in list:\n for item in sublist:\n new_list.append(item)\n return new_list\n\nprint(flatten_list(input_list))", "category": "Python"}, {"instruction": "Create an array with 5 numbers 0-9 randomly.", "input": "", "output": "[3, 9, 4, 5, 0]", "category": "Python"}, {"instruction": "Convert the following string [\"12.1 10.2 6.3 5.4\"] into a list of floats.", "input": "\"12.1 10.2 6.3 5.4\"", "output": "list_floats = [float(x) for x in the_string.split()]\nprint(list_floats)", "category": "Python"}, {"instruction": "Replace all the ``None`` in the following code to create a valid python statement.", "input": "def find_min(numbers):\n    min = None\n    for number in numbers:\n        if min is None:\n            min = number\n        elif number < min:\n            min = number", "output": "def find_min(numbers):\n    min = float('inf')  # use a high value\n    for number in numbers:\n        if number < min:\n            min = number\n    return min", "category": "Python"}, {"instruction": "Change the following code to create a ``Product`` class with a ``price`` attribute.", "input": "", "output": "class Product:\n    def __init__(self, price):\n        self.price = price", "category": "Python"}, {"instruction": "A website has a form with a textarea field of length 3 rows and 20 columns. Write code to check that the user doesn't exceed the character limit of the textarea.", "input": "", "output": "def check_char_limit(text, rows, cols):\n    lines = text.splitlines()\n    if len(lines) > rows:\n        return False \n    for line in lines:\n        if len(line) > cols:\n            return False\n    return True", "category": "Python"}, {"instruction": "How would you solve the following problem: Given a list of numbers, find the two numbers that add up to a given sum?", "input": "[3, 6, 2, 8, 4], sum = 10", "output": "def find_sum(arr, num):\n    found = False\n    arr_set = set(arr)\n    for i in arr_set:\n        x = num - i\n        if x in arr_set and x != i:  # make sure the numbers aren't the same\n            found = True\n            return i, x\n\n    if not found:\n        return False", "category": "Python"}, {"instruction": "Sort the given array of integers in increasing order.", "input": "[8, 5, 4, 7, 2, 1]", "output": "def sort_int_list(arr):\n    sorted_list = sorted(arr)  # use sorted()\n    return sorted_list", "category": "Python"}, {"instruction": "Change the following code so that it will only return the words that contain more than 5 characters.", "input": "def get_words(text):\n     return text.split(\" \")", "output": "def get_words(text):\n    return [word for word in text.split(\" \") if len(word) > 5]", "category": "Python"}, {"instruction": "Change the following function to make it into a function that can be called with multiple arguments.", "input": "def enclose_data(x):\n    return 'data:' + x", "output": "def enclose_data(*data):\n    return 'data:' + \"|\".join(data)", "category": "Python"}, {"instruction": "Identify the issue in the following function and suggest a fix", "input": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*i)", "output": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*y)  # change i to y", "category": "Python"}, {"instruction": "Convert the following JSON data to an HTML table.", "input": "{\n  \"fruit\": [\"apple\", \"banana\", \"orange\"],\n  \"vegetable\": [\"potato\", \"carrot\", \"onion\"]\n}", "output": "<table>\n  <tr>\n    <th>Fruit</th>\n    <th>Vegetable</th>\n  </tr>\n  <tr>\n    <td>apple</td>\n    <td>potato</td>\n  </tr>\n  <tr>\n    <td>banana</td>\n    <td>carrot</td>\n  </tr>\n  <tr>\n    <td>orange</td>\n    <td>onion</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a variable with the value 10 using JavaScript", "input": "", "output": "var number = 10;", "category": "Python"}, {"instruction": "Create a Python script that asks the user to input an integer number and display the sum of all the preceding numbers.", "input": "", "output": "num = int(input(\"Please enter an integer number: \"))\n\nsum = 0\n\nfor i in range(1, num + 1):\n    sum += i\n    \nprint(\"The sum of all the preceding numbers is:\", sum)", "category": "Python"}, {"instruction": "Write a TensorFlow script to build a 3-layer neural network classifier.", "input": "", "output": "import tensorflow as tf\n \n#Create placeholders\nX = tf.placeholder(tf.float32, [None, 784])\ny = tf.placeholder(tf.float32, [None, 10])\n\n#Create first layer\nW1 = tf.Variable(tf.truncated_normal([784, 300], stddev=0.1))\nb1 = tf.Variable(tf.zeros([300]))\nA1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))\n\n#Create second layer\nW2 = tf.Variable(tf.truncated_normal([300, 100], stddev=0.1))\nb2 = tf.Variable(tf.zeros([100]))\nA2 = tf.nn.relu(tf.add(tf.matmul(A1, W2), b2))\n\n#Create third layer\nW3 = tf.Variable(tf.truncated_normal([100, 10], stddev=0.1))\nb3 = tf.Variable(tf.zeros([10]))\nA3 = tf.nn.sigmoid(tf.add(tf.matmul(A2, W3), b3))\n\n#Define cross-entropy loss\nloss = tf.reduce_mean(-tf.reduce_sum(y*tf.log(A3), reduction_indices=[1]))\n\n#Define the accuracy\ncorrect_prediction = tf.equal(tf.argmax(A3,1), tf.argmax(y,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n#Train the model\ntrain_op = tf.train.AdamOptimizer(1e-4).minimize(loss)", "category": "Python"}, {"instruction": "Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.", "input": "[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]", "output": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)", "category": "Python"}, {"instruction": "Create a function that converts a given number of days into a more readable format of years, months and days.", "input": "", "output": "def years_months_days(days):\n    years = int(days // 365)\n    months = int((days % 365) // 30)\n    days = int((days % 365) % 30)\n \n    return (years, months, days)", "category": "Python"}, {"instruction": "Write a Python script to extract text from a given PDF page.", "input": "A PDF page with this content:\n\nThis is an example PDF page.\n\nIt contains text of varying lengths, from short one-word sentences to long multi-sentence paragraphs.", "output": "import PyPDF2\n \n#open the pdf\npdfFileObj = open('example.pdf', 'rb')\npdfReader = PyPDF2.PdfFileReader(pdfFileObj)\n \n#get the text from the specified page\npageObj = pdfReader.getPage(0)\n \n#print the text from the page\nprint(pageObj.extractText())", "category": "Python"}, {"instruction": "Write a Python function that validates a given credit card number.", "input": "", "output": "def validate(number):\n\"\"\" Validate credit card number using Luhn algorithm \"\"\"\n \n  num = [int(x) for x in str(number)]\n  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0", "category": "Python"}, {"instruction": "Create an algorithm to detect if a given sentence contains any words that are offensive.", "input": "The following sentence contains a few offensive words: \"This stupid jerk is a complete moron!\"", "output": "def detect_offensive_words(sentence):\noffensive_words = [\"stupid\", \"jerk\", \"moron\"]\nwords = sentence.split(\" \")\n\nfor word in words:\n if word in offensive_words:\n return True\n \nreturn False", "category": "Python"}, {"instruction": "Write a SQL query to find customers from USA and order the list by their total purchases in descending order.", "input": "", "output": "SELECT *\nFROM customers\nWHERE country='USA' \nORDER BY total_purchases DESC;", "category": "Python"}, {"instruction": "Create a Python loop that prints numbers from 1 to 20", "input": "", "output": "for i in range(1, 21):\n    print(i)", "category": "Python"}, {"instruction": "Create an array of 10 random integers in JavaScript between -100 and 100.", "input": "", "output": "let randomIntegers = [-99,  44, -54,  83,  -7,  81, -14, -49,  35, 100];", "category": "Python"}, {"instruction": "Create an SQL query for selecting names of all users from the user table.", "input": "", "output": "SELECT name FROM user;", "category": "Python"}, {"instruction": "Create a variable in Python that stores the value \"Hello World!\"", "input": "", "output": "message = \"Hello World!\"", "category": "Python"}, {"instruction": "Write a C# method that takes a string and returns the character count.", "input": "", "output": "public static int CharCount(string str)\n{\n    int count = 0;\n    foreach (char c in str)\n    {\n        count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "What is an abstract class?", "input": "", "output": "An abstract class is a special type of class which is only partially implemented. It contains one or more abstract methods which are methods that do not have any concrete implementation. Abstract classes cannot be instantiated and can only be used as base classes for other classes.", "category": "Python"}, {"instruction": "Create a HTML page using a basic text editor", "input": "", "output": "<html>\n<head>\n  <title>My Title</title>\n</head>\n<body>\n  <h1>Hello World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using the data provided below, create an SQL query to find the first name, last name and age of all employees over the age of 40.", "input": "Table: employees\nColumns: first_name, last_name, age", "output": "SELECT first_name, last_name, age\nFROM employees\nWHERE age > 40", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not.", "input": "", "output": "def is_palindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True", "category": "Python"}, {"instruction": "Create a JavaScript function that takes two parameters, an integer and a character, and returns a string with the character repeated that many times.", "input": "2, '#'", "output": "const repeatCharacter = (num, character) => {\n  let str = '';\n  for (let i = 0; i < num; i++) {\n    str += character;\n  }\n  return str;\n};\n\nrepeatCharacter(2, '#'); // returns '##'", "category": "Python"}, {"instruction": "Given an array, write a JavaScript snippet to return an object of frequencies for each element.", "input": "Array: [1, 2, 2, 3, 4, 5]", "output": "const nums = [1, 2, 2, 3, 4, 5];\n\nconst freq = {};\n\nfor (let num of nums) {\n  if (freq[num]) {\n    freq[num]++;\n  } else {\n    freq[num] = 1;\n  }\n}\n\nconsole.log(freq); // {1: 1, 2: 2, 3: 1, 4: 1, 5: 1}", "category": "Python"}, {"instruction": "Convert the following Celsius temperature to Fahrenheit using a JavaScript function.", "input": "temperature = -4.5", "output": "function celsiusToFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\nvar fahrenheit = celsiusToFahrenheit(-4.5);", "category": "Python"}, {"instruction": "Find the maximum value from a Python dictionary.", "input": "sample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30}", "output": "def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  return max_val", "category": "Python"}, {"instruction": "Format the following HTML code into a valid HTML document.", "input": "<title>My Website!</title><h1>Welcome</h1>", "output": "<html>\n  <head>\n    <title>My Website!</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to select all items from a table named \"products\" that have a price greater than 50.", "input": "", "output": "SELECT * FROM products WHERE price > 50;", "category": "Python"}, {"instruction": "Write a JavaScript code to display the current date in the following format: yyyy-mm-dd.", "input": "", "output": "const date = new Date();\nconst dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\nconsole.log(dateString);", "category": "Python"}, {"instruction": "Create a C++ function that takes in an array and a value and returns the index of the value (if it exists) in the array.", "input": "int arr[] = {10, 20, 80, 30, 60, 50, 110, 100, 130,};\nint value = 80;", "output": "int get_index(int arr[],int size,int value)\n{\n    for(int i=0;i<size;i++)\n    {\n        if(arr[i] == value)\n        {\n            return i;\n        }\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Create a method in Python to round a number to 4 decimal points.", "input": "", "output": "def round_to_4_dp(num):\n    return round(num, 4)", "category": "Python"}, {"instruction": "Explain how to use callbacks in JavaScript.", "input": "", "output": "A callback is a function passed as an argument to another function. It is called after the other function has finished executing. Callback functions can be used to help make asynchronous code more organized and easier to read. The callback function will be called with the result of the other function once it is complete. For example, if a function needs to wait for a response from an API before continuing, a callback can be passed in as an argument to execute when the response is received. The callback can outline exactly what happens after the response is received. This helps the code stay organized and readable.", "category": "Python"}, {"instruction": "Create a for loop in Java using the given array.", "input": "int[] nums = {2, 4, 8, 16, 32};", "output": "for (int i = 0; i < nums.length; i++) {\n    int num = nums[i];\n    System.out.println(num);\n}", "category": "Python"}, {"instruction": "What are type hints in Python?", "input": "", "output": "Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better.", "category": "Python"}, {"instruction": "Create a function to calculate the Fibonacci series from 0 to n.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write a code to convert a string to a list of characters.", "input": "", "output": "def str_to_list(s):\n    return list(s)", "category": "Python"}, {"instruction": "What is the time complexity of a binary search tree?", "input": "", "output": "The time complexity of a binary search tree is O(log n), where n is the number of elements in the tree. This is because in a binary search tree, each node can have up to two children, so the depth of the tree is bounded by the logarithm of n. This means that the time required to search the tree is bounded by the logarithm of n.", "category": "Python"}, {"instruction": "Convert the following Python statement into C code.", "input": "x = x + 1", "output": "x++;", "category": "Python"}, {"instruction": "Describe what a quicksort algorithm does?", "input": "", "output": "Quicksort is a widely used sorting algorithm that employs the divide-and-conquer approach. It works by partitioning a given array into two subarrays, the left consisting of smaller elements and the right consisting of larger elements. The sorting algorithm then recursively sorts each subarray until the array is completely sorted. Quicksort has a time complexity of O(n log n) in the best case, making it one of the most efficient sorting algorithms.", "category": "Python"}, {"instruction": "Create a dictionary of the declared states of India.", "input": "", "output": "states_dict = { \n    'Maharashtra': 'Maharashtra', \n    'Tamil Nadu': 'Tamil Nadu', \n    'Karnataka': 'Karnataka', \n    'Uttar Pradesh': 'Uttar Pradesh', \n    'Rajasthan': 'Rajasthan', \n    'Gujarat': 'Gujarat', \n    'Madhya Pradesh': 'Madhya Pradesh', \n    'Bihar': 'Bihar', \n    'West Bengal': 'West Bengal', \n    'Andhra Pradesh': 'Andhra Pradesh', \n    'Haryana': 'Haryana', \n    'Assam': 'Assam', \n    'Jammu and Kashmir': 'Jammu and Kashmir', \n    'Kerala': 'Kerala', \n    'Odisha': 'Odisha', \n    'Telangana': 'Telangana', \n    'Punjab': 'Punjab', \n    'Goa': 'Goa', \n    'Tripura': 'Tripura', \n    'Jharkhand': 'Jharkhand', \n    'Chandigarh': 'Chandigarh', \n    'Himachal Pradesh': 'Himachal Pradesh', \n    'Uttarakhand': 'Uttarakhand', \n    'Ladakh': 'Ladakh'\n}", "category": "Python"}, {"instruction": "Print a list of numbers from 1 to 10 except for 5 and 6.", "input": "", "output": "for num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)", "category": "Python"}, {"instruction": "Create a Python class that has an initialization method which takes in two parameters and sets them as class variables.", "input": "", "output": "class ExampleClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2", "category": "Python"}, {"instruction": "Encode the following string in Base64.", "input": "This is an example string.", "output": "VGhpcyBpcyBhbiBleGFtcGxlIHN0cmluZy4=", "category": "Python"}, {"instruction": "Create a C# function to find the index of the first element of an array that is greater than a given value.", "input": "double[] arr = {1.1, 2.00, 1.3, 9.7, 12.4};\ndouble value = 5.0;", "output": "int findFirstGreaterThan(double[] arr, double value) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] > value) {\n      return i;\n    }\n  }\n  return -1;\n}", "category": "Python"}, {"instruction": "Given a sentence, remove all punctuation using JavaScript.", "input": "This is a sentence!", "output": "function removePunctuation(sentence) {\n  return sentence.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removePunctuation(\"This is a sentence!\"));", "category": "Python"}, {"instruction": "Given a string, remove all spaces from it.", "input": "string = 'This is a sample string'", "output": "\"\"\"\nGiven a string, remove all spaces from it\n\"\"\"\n\ndef remove_spaces(string):\n    result = ''\n    for c in string:\n        if c != ' ':\n            result += c\n    return result\n\nstring = 'This is a sample string'\nprint(remove_spaces(string)) # print Thisisasamplestring", "category": "Python"}, {"instruction": "Write a code to search a word in a given string and get the index position.", "input": "word = 'Hello'\n\nstring = 'Hello World'", "output": "\"\"\"\nWrite a code to search a word in a given string and get the index position\n\"\"\"\n\ndef search_word(word, string):\n    return string.find(word)\n\nword = 'Hello'\nstring = 'Hello World'\n\nprint(search_word(word, string)) # print 0", "category": "Python"}, {"instruction": "Create a looping structure to display numbers from 1-10.", "input": "", "output": "\"\"\"\nCreate a looping structure to display numbers from 1-10\n\"\"\"\n\n# loop from 1 to 10\nfor num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Write a SQL statement to list all the tables in a database.", "input": "", "output": "SELECT * FROM information_schema.tables WHERE table_schema = \"your_database_name\";", "category": "Python"}, {"instruction": "Write a C program to sum the digits of a positive integer.", "input": "", "output": "#include <stdio.h> \n \nint main() \n{ \n    int num, sum = 0, r; \n  \n    printf(\"Enter a positive number: \"); \n    scanf(\"%d\", &num); \n  \n    while (num > 0) { \n        r = num % 10; \n        sum += r; \n        num = num / 10; \n    } \n  \n    printf(\"Sum of digits of the number: %d\\n\", sum); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create an HTML form to accept an email address.", "input": "", "output": "<form>\n  <label for=\"email\">Enter your email address:</label>\n  <input type=\"email\" name=\"email\" id=\"email\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Using Python, classify the following sentence \"The cat is a mammal\" into either Animal or Plant.", "input": "", "output": "def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\n  elif \"plant\" in sentence.lower():\n    return \"Plant\"\n\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))", "category": "Python"}, {"instruction": "Find the index of the element 'c' in the following list.", "input": "[\"a\", \"b\", \"c\"]", "output": "lst = [\"a\", \"b\", \"c\"]\nindex = lst.index(\"c\")", "category": "Python"}, {"instruction": "Write a Bash script that prints the numbers 1 to 10 on one line.", "input": "", "output": "#!/bin/bash\nfor i in {1..10}; do echo -n \"$i \"; done\necho", "category": "Python"}, {"instruction": "Write a PHP script that prints the current hour, minute, and second.", "input": "", "output": "<?php\n$time = getdate(); \necho \"Hour: \".$time['hours'].\"<br>\"; \necho \"Minutes: \".$time['minutes'].\"<br>\"; \necho \"Seconds: \".$time['seconds']; \n?>", "category": "Python"}, {"instruction": "Given a number n, write a function that finds the sum of the first n odd numbers.", "input": "", "output": "def odd_sum(n):\n    return sum(list(range(1, 2*n, 2)))", "category": "Python"}, {"instruction": "Write a function to generate the Cartesian product of 2 sets in Python.", "input": "A = {1, 2}; B = {'a', 'b'}", "output": "from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))", "category": "Python"}, {"instruction": "Use Java's built-in sorting algorithm and write a code that sorts a list in ascending order.", "input": "List = [5, 10, 1, 8]", "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class SortListAscending {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(5);\n        list.add(10);\n        list.add(1);\n        list.add(8);\n\n        Collections.sort(list);\n\n        System.out.println(\"The list in ascending order is: \" + list);\n    }\n}", "category": "Python"}, {"instruction": "Write a Node.js program to find the sum of first n natural numbers.", "input": "", "output": "const calculateSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconsole.log(calculateSum(5));", "category": "Python"}, {"instruction": "Given 2 string variables, write a function to find out if the 2 strings are anagrams.", "input": "str1 = 'schoolmaster', str2 = 'the classroom'", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        counts = dict()\n        for char in str1:\n            counts[char] = counts.get(char, 0) + 1\n        for char in str2:\n            if char not in counts or counts[char] == 0:\n                return False\n            counts[char] -= 1\n    return True", "category": "Python"}, {"instruction": "Create a Python function to check if a given array is sorted in ascending order.", "input": "arr = [1, 3, 5, 7, 6]", "output": "def is_sorted_ascending(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Given a string, edit it so that every first letter of each word is capitalized.", "input": "string = \"this is a test string\"", "output": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a test string\" \ncapitalize_string(string)", "category": "Python"}, {"instruction": "Rearrange the given string in alphabetical order.", "input": "string = 'zxcvbnmlkjhgfdsaqwertyuiop'", "output": "\"\"\"\nRearrange the given string in alphabetical order\n\"\"\"\n\ndef alphabetical_order(string):\n    result = ''.join(sorted(string))\n    return result\n\nstring = 'zxcvbnmlkjhgfdsaqwertyuiop'\nprint(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz", "category": "Python"}, {"instruction": "Check if each item in the following list is a string.", "input": "[3, \"apple\", 5]", "output": "for item in [3, \"apple\", 5]:\n    if isinstance(item,str):\n        print(item, \"is a string\")\n    else:\n        print(item, \"is not a string\")", "category": "Python"}, {"instruction": "Create a conditional statement to print 'hello world' if the variable 'x' equals 5.", "input": "", "output": "if x == 5: \n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Write a Haskell function that takes a list and returns its first element.", "input": "", "output": "head :: [a] -> a\nhead (x:_) = x", "category": "Python"}, {"instruction": "Create a PHP function that finds the maximum of three numbers.", "input": "", "output": "function maxOfThree($num1, $num2, $num3) {\n    $max = max($num1, $num2, $num3);\n    return $max;\n}", "category": "Python"}, {"instruction": "Write a Java method to check if a numerical value is within a specified range.", "input": "", "output": "public static boolean isWithinRange(int val, int min, int max) {\n    return (val >= min && val <= max);\n}", "category": "Python"}, {"instruction": "Write a function in Java that takes an integer and returns its square.", "input": "", "output": "public static int calculateSquare(int num) {\n    return num * num;\n}", "category": "Python"}, {"instruction": "Write an example of a for loop in JavaScript.", "input": "", "output": "for (let i = 0; i < 10; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Create a program to print all prime numbers from 1 to a given number.", "input": "", "output": "def print_prime_numbers(n): \n    for num in range(2,n+1): \n        if is_prime(num): \n            print(num)", "category": "Python"}, {"instruction": "Create a program that takes a string and prints the number of words the string contains", "input": "string = \"This is a sentence.\"", "output": "def count_words(string):\n    string = string.split(\" \")\n    return len(string)", "category": "Python"}, {"instruction": "Generate a program that merges two sorted lists into one sorted list", "input": "list1 = [1, 6, 10] list2 = [3, 5, 7]", "output": "def merge_two_lists(list1, list2): \n    list3 = list1 + list2 \n    list3.sort() \n    return list3", "category": "Python"}, {"instruction": "Create a program to validate a string for a specific length", "input": "", "output": "def is_valid_string(string, length):\n    return len(string) == length", "category": "Python"}, {"instruction": "Create a program to detect if an array contains duplicate values", "input": "", "output": "def is_duplicate_array(arr): \n    return len(arr) != len(set(arr))", "category": "Python"}, {"instruction": "Generate a program in Python that takes two parameters and prints the result of their addition.", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a program that reads a string input and replaces all instances of a word with a given replacement", "input": "Original string = \"Merry Christmas everyone, what a lovely day!\" Replacement word = \"Happy\"", "output": "def replace_word(originalString, replacementWord): \n    return originalString.replace('Christmas', replacementWord)\n# Output: \"Merry Happy everyone, what a lovely day!\"", "category": "Python"}, {"instruction": "Categorize the following sentence into either positive or negative", "input": "This game is way too difficult", "output": "negative", "category": "Python"}, {"instruction": "Write a function to extract the digits of a number in an array.", "input": "Number = 4396", "output": "def extract_digits(number): \n   return [int(x) for x in str(number)] \n# Returns [4, 3, 9, 6]", "category": "Python"}, {"instruction": "Create a function to calculate the Pythagorean theorem given two legs", "input": "", "output": "def calculate_pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c", "category": "Python"}, {"instruction": "Suggest a way to finish the following instruction.", "input": "Create a Java program to", "output": "Create a Java program to calculate the sum of all the elements in an array.", "category": "Python"}, {"instruction": "Combine the two functions into a single function.", "input": "def add(x, y):\n    return x + y \n\ndef subtract(x, y):\n    return x - y", "output": "def calculate(x, y, op):\n    if op=='+':\n        return x + y \n    if op =='-':\n        return x - y", "category": "Python"}, {"instruction": "Write a function to find the length of the longest word in a sentence.", "input": "sentence = \"Today is a beautiful day\"", "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\n    for word in words:\n        if (len(word) > max_len):\n            max_len = len(word)\n            longest_word = word\n    \n    return max_len, longest_word\n\nif __name__ =='__main__':\n    sentence = \"Today is a beautiful day\"\n    max_len, longest_word = find_longest_word(sentence)\n    print(\"The longest word is '{}' with a length of {}\".format(longest_word, max_len))", "category": "Python"}, {"instruction": "Create a function which will take two strings as parameters and will return a concatenated string.", "input": "", "output": "def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!", "category": "Python"}, {"instruction": "Change the following code snippet to convert a given string in lower case.", "input": "string = \"HELLO WORLD\"", "output": "string = string.lower()", "category": "Python"}, {"instruction": "Create a class called 'Student' with attributes name and grade.", "input": "", "output": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade", "category": "Python"}, {"instruction": "Write a regular expression that finds all the words in a given sentence that start with a lowercase letter.", "input": "Sentence: Hello World.", "output": "\\b[a-z]\\w+\\b", "category": "Python"}, {"instruction": "Convert the given temperature in Celsius to Fahrenheit.", "input": "Temperature in Celsius: 28", "output": "82.4", "category": "Python"}, {"instruction": "Edit the given SQL statement to select the top 3 entries with lowest price.", "input": "SELECT * FROM products", "output": "SELECT * FROM products ORDER BY price ASC LIMIT 3;", "category": "Python"}, {"instruction": "Write a function in Python to remove a given element from a list.", "input": "list = ['A', 'B', 'C', 'D']\nelement = 'B'", "output": "def remove_element(list, element): \n  if element in list: \n    list.remove(element)\n  return list\n\nprint(remove_element(list, element))", "category": "Python"}, {"instruction": "Write a function in Java to find the element that appears most frequently in the array.", "input": "[9, 5, 1, 0, 4, 5, 9, 2, 8]", "output": "public static int mostFrequentElement(int[] arr) { \n  int count = 0; \n  int maxCount = 0; \n  int mostFrequent = arr[0]; \n  \n  for (int i = 0; i < arr.length; i++) { \n    count = 0; \n    for (int j = 0; j < arr.length; j++) { \n      if(arr[i] == arr[j]) { \n        count++; \n      } \n      if (count > maxCount) { \n        maxCount = count; \n        mostFrequent = arr[i]; \n      } \n    } \n  } \n  return mostFrequent; \n}", "category": "Python"}, {"instruction": "Create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively.", "input": "", "output": "dict = {'a': 1, 'b': 2}", "category": "Python"}, {"instruction": "Create a class in C++ to calculate the volume of a rectangular box.", "input": "", "output": "class Rectangle { \n  public: \n    double length; \n    double breadth; \n  \n    double volume() { \n      return length * breadth; \n    } \n};", "category": "Python"}, {"instruction": "Calculate the area of a circle whose radius is 3.", "input": "", "output": "28.274333882308138", "category": "Python"}, {"instruction": "Sum up the digits in the given integer.", "input": "12345", "output": "15", "category": "Python"}, {"instruction": "Sort a given list in increasing order.", "input": "my_list = [3, 4, 2, 6]", "output": "def sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n        for j in range(i+1, len(my_list)):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list\n    \nif __name__ == '__main__':\n    my_list = [3, 4, 2, 6]\n    sorted_list = sort_list(my_list)\n    print(sorted_list)  # [2, 3, 4, 6]", "category": "Python"}, {"instruction": "Create a class which will take 3 parameters, name, size, and price.", "input": "", "output": "class Item:\n    \"\"\"Class which will take three parameters, name, size and price\"\"\"\n    def __init__(self, name, size, price):\n        self.name = name\n        self.size = size\n        self.price = price", "category": "Python"}, {"instruction": "Create a for loop to print all the elements of the list.", "input": "my_list = [1,2,3,4,5]", "output": "my_list = [1,2,3,4,5]\nfor elem in my_list:\n    print(elem)", "category": "Python"}, {"instruction": "Edit the code to allow users to enter their name and age and print a greeting with their name and age.", "input": "name = ''\nage = 0", "output": "name = input(\"Enter your name: \")\nage = int(input(\"Enter your age: \"))\n\nprint(\"Hello \" + name + \"! You are \" + str(age) + \" years old.\")", "category": "Python"}, {"instruction": "Write a code in which the values in the dictionaries will be swapped.", "input": "dic = {'x': 10, 'y': 20}", "output": "def swap_dictionary_values(dic):\n    \"\"\"Function to swap the values in the dictionaries\"\"\"\n    dic['x'], dic['y'] = dic['y'], dic['x']\n    return dic\n\nif __name__ == '__main__':\n    dic = {'x': 10, 'y': 20}\n    swapped_dic = swap_dictionary_values(dic)\n    print(swapped_dic) # {'x': 20, 'y': 10}", "category": "Python"}, {"instruction": "Write a code snippet to print out each item in a given array.", "input": "[7, 4, 10, 3]", "output": "for(let item of arr) {\n  console.log(item);\n}", "category": "Python"}, {"instruction": "Give an example of a valid URL.", "input": "", "output": "https://www.example.com", "category": "Python"}, {"instruction": "Create a function to compute the area of a triangle when the length of its three sides are known.", "input": "a = 6, b = 8, c = 10", "output": "\"\"\"\nCreate a function to compute the area of a triangle when the length of its three sides are known\n\"\"\"\n\ndef TriangleArea(a, b, c):\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\na, b, c = 6, 8, 10\n\nprint(TriangleArea(a, b, c)) # print 24.0", "category": "Python"}, {"instruction": "Print the third item of the list.", "input": "my_list = [\"apple\",\"banana\",\"cherry\"]", "output": "print(my_list[2]) # cherry", "category": "Python"}, {"instruction": "Explain the difference between unidirectional and bidirectional recurrent neural networks.", "input": "", "output": "A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. \n\nIn contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.", "category": "Python"}, {"instruction": "How can you convert a given object to a JSON string in JavaScript?", "input": "", "output": "We can use the JSON.stringify() method to convert a given object to a JSON string in JavaScript. The syntax for this method is as follows:\n\nvar jsonString = JSON.stringify(object);", "category": "Python"}, {"instruction": "What is the correct way to find the length of an array in Java?", "input": "", "output": "The correct way to find the length of an array in Java is to use the length field of the array.\nFor example:\n\nint[] arr = new int[10]; \nint len = arr.length; \n// len is now 10", "category": "Python"}, {"instruction": "Write a PHP script that inserts a given value into an array at a given index.", "input": "array: [1, 2, 3, 4] \nindex: 2 \nvalue: 5", "output": "<?php\n\n$array = [1, 2, 3, 4];\n$index = 2;\n$value = 5;\n\narray_splice($array, $index, 0, $value);\n\necho \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n?>", "category": "Python"}, {"instruction": "How can you copy the contents of an array in JavaScript?", "input": "", "output": "We can use the slice() method to copy the contents of an array in JavaScript. The syntax for this method is as follows:\n\nvar arrayCopy = array.slice();", "category": "Python"}, {"instruction": "Create a Node.js server that can listen on port 8080.", "input": "", "output": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 8080;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "category": "Python"}, {"instruction": "Write a SQL query to calculate the average age of all students in a given class.", "input": "", "output": "SELECT AVG(age) AS average_age\nFROM students\nWHERE class = 'X';", "category": "Python"}, {"instruction": "How can you convert a given list of integers into a comma-separated string in Python?", "input": "", "output": "We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:\n\nlistOfIntegers = [1, 2, 3, 4] \ns = ','.join(str(e) for e in listOfIntegers)\nprint(s)", "category": "Python"}, {"instruction": "Modify the following JavaScript code to remove all whitespaces from a given string.", "input": "var mystring = \" This is a  string  with  extra spaces \";", "output": "var mystring = mystring.replace(/\\s/g,'');", "category": "Python"}, {"instruction": "How can you sort a list of strings lexicographically in C++?", "input": "", "output": "We can use the sort() method from the algorithm library to sort a list of strings lexicographically in C++. The syntax for this method is as follows: \n\nsort(listOfStrings.begin(), listOfStrings.end());", "category": "Python"}, {"instruction": "Write a SQL query to calculate the total cost of a given product.", "input": "product_id: 123\nprice: 100.50\nquantity: 10", "output": "SELECT SUM(price * quantity) AS total_cost\nFROM products\nWHERE product_id = 123;", "category": "Python"}, {"instruction": "Write a Java function to classify a given set of numbers into even and odd.", "input": "", "output": "public static void classifyNumber(int[] numbers) {\n  for (int num : numbers) {\n      if (num % 2 == 0) {\n          System.out.println(num + \" is even\");\n      } else {\n          System.out.println(num + \" is odd\");\n      }\n  }\n}", "category": "Python"}, {"instruction": "How can you check if a number is an integer in C#?", "input": "", "output": "We can use the \"int.TryParse\" method to check if a number is an integer in C#. We pass the number as a string to this method and it returns true if it is an integer or false if it is not. For example:\n\nbool result = int.TryParse(\"2\", out _);\n// result is true", "category": "Python"}, {"instruction": "Generate five random numbers between 0 and 10 in Python.", "input": "", "output": "import random\nrandom.sample(range(0, 10), 5)", "category": "Python"}, {"instruction": "Find all top-level domains for the TLD \".org\".", "input": "", "output": "aero.org, asia.org, biz.org, com.org, coop.org, info.org, jobs.org, mobi.org, museum.org, name.org, net.org, pro.org, tel.org, travel.org and org.org.", "category": "Python"}, {"instruction": "Explain the concept of parameter estimation in machine learning.", "input": "", "output": "Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization.", "category": "Python"}, {"instruction": "Design a function to convert a ternary tree to a doubly linked list.", "input": "", "output": "def convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n\n    # To see the linked list join the left and right lists\n    left.extend(right)\n\n    # Get the length of the list\n    length = len(left)\n\n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\n\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\n\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)", "category": "Python"}, {"instruction": "How can one improve the performance of a machine learning algorithm?", "input": "", "output": "There are several ways to improve the performance of a machine learning algorithm, such as:\n\n1. Increasing the quality/quantity of training data: Using more data can increase the accuracy of the model and better handle outliers and edge cases. \n\n2. Tuning the model hyperparameters: Adjusting parameters like learning rate, regularization strength can often improve the performance of the algorithm.\n\n3. Feature engineering: You can add or modify features which can not only improve the performance of the model but also allow it to capture different types of relationships among data points.\n\n4. Using better algorithms: Experimenting with different algorithms and techniques can often improve the performance of the model.", "category": "Python"}, {"instruction": "Write a MySQL query to find the title of the books with the least number of pages.", "input": "", "output": "SELECT title FROM books\nORDER BY pages ASC\nLIMIT 1;", "category": "Python"}, {"instruction": "Construct a SQL query to return all rows in the table where the value of column A is not null and column B is 2.", "input": "Table Name: myTable; Columns: A,B", "output": "SELECT * FROM myTable WHERE A IS NOT NULL AND B = 2;", "category": "Python"}, {"instruction": "Construct the following C++ class.", "input": "Class: Student\nAttributes: firstName(String), lastName(String), age(int)", "output": "class Student {\n   private:\n      string firstName;\n      string lastName;\n      int age;\n\n   public:\n      Student(string firstName, string lastName, int age) {\n         this->firstName = firstName;\n         this->lastName = lastName;\n         this->age = age;\n      }\n\n      string getFirstName() {\n         return firstName;\n      }\n\n      string getLastName() {\n         return lastName;\n      }\n\n      int getAge() {\n         return age;\n      }\n};", "category": "Python"}, {"instruction": "What is the advantage of using dictionary comprehension in Python?", "input": "", "output": "The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries.", "category": "Python"}, {"instruction": "Explain polymorphism in Python.", "input": "", "output": "Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.", "category": "Python"}, {"instruction": "What is the difference between a list and a tuple in Python?", "input": "", "output": "The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.", "category": "Python"}, {"instruction": "Generate a program to get the min and max values from a list in one line.", "input": "", "output": "def get_min_max(lst):\n    return min(lst), max(lst)", "category": "Python"}, {"instruction": "How do you convert a string to an integer in Python?", "input": "", "output": "In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary).", "category": "Python"}, {"instruction": "Write a CSS code snippet to add a shadow effect to all buttons on the page.", "input": "", "output": "button {\n  -webkit-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n  -moz-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n  box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n}", "category": "Python"}, {"instruction": "Explain recursion in programming.", "input": "", "output": "Recursion is a programming technique where a function calls itself, either directly or indirectly. It is used to solve problems that involve repetition or breaking down a problem into simpler sub-problems. Recursion can be used to solve a wide range of problems, from sorting algorithms to defining recursive data structures. It can also reduce the amount of code needed to solve a problem, as the same code can be used to solve different sub-problems.", "category": "Python"}, {"instruction": "Create a class in Python with two methods, one of which accepts an argument.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass\n\n    def my_method(self, arg):\n        # method code\n        pass", "category": "Python"}, {"instruction": "What is data serialization?", "input": "", "output": "Data serialization is the process of transforming data structures into a format that can be stored, transmitted, or parsed. It is commonly used to send and receive data between different types of systems. The application programming interface of a system can determine which data is serialized and deserialized.", "category": "Python"}, {"instruction": "Name the parameter of a Python function?", "input": "", "output": "The parameter of a Python function is the variable name listed after the function name in the function definition.", "category": "Python"}, {"instruction": "Implement a function to sort an array in ascending order.", "input": "Array: [7, 19, 5, 4, 16]", "output": "def sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\n\nsortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]", "category": "Python"}, {"instruction": "Explain the concept of transfer learning.", "input": "", "output": "Transfer learning is a machine learning method where a model is trained on a task, then the learned knowledge is transferred to a new task. This process of knowledge transfer is enabled by the use of pre-trained models that have already been trained on large datasets, which can then be adapted to a given task using only a few additional training examples. This is especially useful for tasks that do not have enough labeled data available, as the pre-trained model can act as a regularizer and help the model learn better.", "category": "Python"}, {"instruction": "Describe how reinforcement learning works.", "input": "", "output": "Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior.", "category": "Python"}, {"instruction": "Implement a function to traverse a binary tree in pre-order.", "input": "", "output": "def traverse_preorder(root):\n    if (root == None):\n        return\n    else:\n        print(root.val)\n        traverse_preorder(root.left)\n        traverse_preorder(root.right)", "category": "Python"}, {"instruction": "What is the purpose of a loop in a programming language?", "input": "", "output": "The purpose of a loop in a programming language is to repeatedly execute a set of instructions until a predetermined condition is met. Loops are used to iterate over a set of elements or a certain number of steps, and are often used to traverse data structures such as arrays and linked lists.", "category": "Python"}, {"instruction": "Write a function to convert a list of characters into a string.", "input": "characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']", "output": "\"\"\"\nWrite a function to convert a list of characters into a string\n\"\"\"\n\ndef list_to_string(characters):\n    result = ''.join(characters)\n    return result\n\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n\nprint(list_to_string(characters)) # print Hello World", "category": "Python"}, {"instruction": "Build a decision tree model using Scikit-Learn to predict the type of iris plant based on petal length, petal width, sepal length and sepal width.", "input": "", "output": "from sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)", "category": "Python"}, {"instruction": "Write a machine learning model to classify whether a given email is spam or not using logistic regression.", "input": "", "output": "from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)", "category": "Python"}, {"instruction": "Using Python, write a function to multiply two matrices.", "input": "", "output": "def multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix", "category": "Python"}, {"instruction": "Write an HTML code snippet to create a checkbox with the label \u201cTerms of Service\u201d", "input": "", "output": "<input type=\"checkbox\" id=\"terms\" name=\"terms\" value=\"agree\" />\n<label for=\"terms\">Terms of Service</label>", "category": "Python"}, {"instruction": "Write a SQL query to list all the customers whose age is over 18.", "input": "", "output": "SELECT * \nFROM customers \nWHERE age > 18;", "category": "Python"}, {"instruction": "Analyze the following code and explain what is wrong with it.", "input": "function max_value(x, y){\nif (x > y){\nreturn x;\n}\nelse{\nreturn y;\n}\n}", "output": "The function will not work when x and y are equal as there is no else if statement to handle that condition. The code should be modified to either return x or y randomly or return a value that is not related to x or y like 'null' or '-1' when x and y are the same.", "category": "Python"}, {"instruction": "Write an SQL query to group all customers with the same age.", "input": "", "output": "SELECT age, COUNT(*)\nFROM customers\nGROUP BY age;", "category": "Python"}, {"instruction": "Using HTML, create a table with 3 columns and 4 rows.", "input": "", "output": "<table>\n  <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr>\n  <tr><td></td><td></td><td></td></tr>\n  <tr><td></td><td></td><td></td></tr>\n  <tr><td></td><td></td><td></td></tr>\n</table>", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to display a welcome message to the user.", "input": "", "output": "console.log('Welcome!');", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the mean age of all customers.", "input": "", "output": "SELECT AVG(age)\nFROM customers;", "category": "Python"}, {"instruction": "Fix the following syntax error.", "input": "myList = [1, 2, 3", "output": "myList = [1, 2, 3]", "category": "Python"}, {"instruction": "Generate an 8-digit alphanumeric string.", "input": "", "output": "import string\nimport random\n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\nprint(alphanumeric_string) # GH485TV6", "category": "Python"}, {"instruction": "Change the following directory path to absolute path.", "input": "path = \"../images/example.png\"", "output": "import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png", "category": "Python"}, {"instruction": "Design an algorithm to find the largest number in a given array.", "input": "arr = [2,4,6,9,3,7]", "output": "def max_in_array(arr):\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max :\n            max = arr[i]\n    return max\n\nmaxValue = max_in_array(arr)\nprint(maxValue) # 9", "category": "Python"}, {"instruction": "Convert the following HTML to CSS.", "input": "<body>\n    <h1>My Web Page</h1>", "output": "body h1 {\n    font-size: 20px;\n    font-weight: bold;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Outpus true if the given number is a power of two, False otherwise.", "input": "n = 16", "output": "print(n > 0 and (n & (n - 1)) == 0) # True", "category": "Python"}, {"instruction": "Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.", "input": "strings = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"]\npattern = \"?ef\"", "output": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to limit the maximum length a user can enter in an input field.", "input": "", "output": "document.getElementById('inputField').maxLength = \"20\";", "category": "Python"}, {"instruction": "Create a method to sort the data by the public_id in descending order?", "input": "data = [{\"name\": \"John Smith\", \"public_id\": 4}, \n        {\"name\": \"Michael Jordan\", \"public_id\": 3}, \n        {\"name\": \"LeBron James\", \"public_id\": 5}]", "output": "def sort_by_public_id(data):\n    return sorted(data, key=lambda x: x['public_id'], reverse=True)", "category": "Python"}, {"instruction": "Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.", "input": "data = [\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]\nn = 3", "output": "def get_values_greater_than_n(data, n):\n  return [val for val in data if len(val) > n]", "category": "Python"}, {"instruction": "Change the following loop so that it prints out the numbers from 10 to 1 in descending order.", "input": "for i in range(1, 11):\n    print(i)", "output": "for i in range(10, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Create a class in C++ called \"Vehicle\", and make it inherit from the class \"Object\".", "input": "", "output": "class Vehicle : public Object {\n    public:\n    // constructor & destructor\n    Vehicle() { }\n    ~Vehicle() { }\n};", "category": "Python"}, {"instruction": "Create a program that can output the permutation of a given string.", "input": "Find the permutation of \u201cABC\u201d", "output": "def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))", "category": "Python"}, {"instruction": "Design a program to find out how many times a pattern occurs in a given string.", "input": "Find the number of times \u201cquick\u201d occurs in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def count_pattern(sentence, pattern):\n    count = 0\n    words = sentence.split(' ')\n    for word in words:\n        if word == pattern:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    pattern = \"quick\"\n    print(count_pattern(sentence, pattern))", "category": "Python"}, {"instruction": "Output a string that is the reversed version of a given sentence.", "input": "Reverse \u201cWhere the wild things are\u201d", "output": "def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::-1])\n\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string(sentence))", "category": "Python"}, {"instruction": "Rewrite existing code to make it more efficient.", "input": "Improve the following code.\n```\nfor i in range(10):\n    print(i)\n```", "output": "def print_nums(n):\n    for i in range(n):\n        print(i)\n\nif __name__ == \"__main__\":\n    print_nums(10)", "category": "Python"}, {"instruction": "Create a program that can convert a given number (integer) to binary.", "input": "Convert 33 to binary numerals.", "output": "def convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\n    \nif __name__ == \"__main__\":\n    print(convert_to_binary(33))", "category": "Python"}, {"instruction": "Create an array of 10 numbers between 0 and 20, both included.", "input": "", "output": "[5, 10, 15, 20, 0, 3, 8, 1, 9, 11]", "category": "Python"}, {"instruction": "Generate a character frequency histogram of a sentence.", "input": "Distribution of characters in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)", "category": "Python"}, {"instruction": "Create a program that can output the current date and time in a user-friendly format.", "input": "", "output": "from datetime import datetime\n\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%c')\n    return friendly_format\n\nif __name__ == \"__main__\":\n    print(get_date_and_time())", "category": "Python"}, {"instruction": "Given a string, rearrange the characters in the string such that no two consecutive characters are the same.", "input": "my_str = \"ababab\"", "output": "def rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n                if arr[j] != arr[i]:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n                j += 1\n        i += 1\n    return \"\".join(arr)", "category": "Python"}, {"instruction": "Rewrite the following code to use for-else statement.", "input": "arr = [1, 2, 3, 4]\n\ni = 0\nwhile True:\n    if i >= len(arr):\n        break\n    print(arr[i])\n    i += 1", "output": "arr = [1, 2, 3, 4]\n\nfor i in arr:\n    print(i)\nelse:\n    break", "category": "Python"}, {"instruction": "Describe what is recursion in programming and provide a simple example.", "input": "", "output": "Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:\n\ndef fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n  \nprint(fibonacci(5))  \n\nThe output of this code is 5.", "category": "Python"}, {"instruction": "For the following JSON object, write a function to get the average of all prices.", "input": "data = [\n  { \"name\": \"apple\", \"price\": 2},\n  { \"name\": \"banana\", \"price\": 4},\n  { \"name\": \"cucumber\", \"price\": 6},\n]", "output": "def avg_price(data):\n    sum = 0\n    for item in data: \n        sum += item[\"price\"] \n    return sum / len(data)", "category": "Python"}, {"instruction": "Write an algorithm to count the number of times the letter 'e' appears in a given string.", "input": "my_string = \"Hello World\"", "output": "def count_letter_e(my_string):\n    count = 0\n    for char in my_string:\n        if char == 'e':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a function to parse a string of HTML and replace all occurrences of <b> with <strong>.", "input": "html_string = \"<h1> This is a heading </h1> <b> This is a bold text </b>\"", "output": "def replace_b_tag_with_strong_tag(html_string):\n    return html_string.replace(\"<b>\", \"<strong>\").replace(\"</b>\", \"</strong>\")", "category": "Python"}, {"instruction": "Design a function to sum up an array of numbers.", "input": "Sum up [2, 3, 5, 10, 16].", "output": "def calculate_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10, 16]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Print the following dictionary in a readable format.", "input": "person = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"hobbies\": [\"reading\", \"biking\", \"yoga\"]\n}", "output": "print(\"Name:\", person[\"name\"])\nprint(\"Age:\", person[\"age\"])\nprint(\"Hobbies:\")\nfor hobby in person[\"hobbies\"]:\n  print(\"-\", hobby)", "category": "Python"}, {"instruction": "Find the sum of all the numbers from 55 to 79.", "input": "", "output": "total = 0\nfor i in range(55, 80):\n    total += i\nprint(total) # Output: 2370", "category": "Python"}, {"instruction": "Write a function to check if all the items in a list are of the same data type.", "input": "", "output": "def check_type(items):\n  # get the type of first item\n  item_type = type(items[0])\n  \n  # check if all items are of the same type\n  for item in items[1:]:\n    if item_type != type(item):\n      return False\n  return True\n\n# Test\nprint(check_type([1, 2, 3, 4])) # Output: True", "category": "Python"}, {"instruction": "Create a function in JavaScript that displays an alert with a given message.", "input": "", "output": "function alertMe(message) {\n  alert(message);\n}", "category": "Python"}, {"instruction": "Implement a function in JavaScript that flips a given binary tree.", "input": "", "output": "function invertBinaryTree(tree) {\n  if (!tree) {\n    return;\n  }\n  let temp = tree.left;\n  tree.left = tree.right;\n  tree.right = temp;\n\n  invertBinaryTree(tree.left);\n  invertBinaryTree(tree.right);\n}", "category": "Python"}, {"instruction": "Create a HTML page that containsthe loading icon for a web page request.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Loading Icon</title>\n  </head>\n  <body>\n  <div id=\"loading-icon\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </div>\n  <style type=\"text/css\">\n    #loading-icon {\n      margin: auto;\n      text-align: center;\n      width: 120px;\n    }\n\n    #loading-icon span {\n      background-color: #E3EEF6;\n      border-radius: 50%;\n      display: inline-block;\n      height: 10px;\n      margin-right: 10px;\n      width: 10px;\n      animation: loader 2s ease-in infinite;\n    }\n\n    #loading-icon span:nth-child(1) {\n      animation-delay: 0s;\n    }\n\n    #loading-icon span:nth-child(2) {\n      animation-delay: 0.3s;\n    }\n\n    #loading-icon span:nth-child(3) {\n      animation-delay: 0.6s;\n    }\n\n    #loading-icon span:nth-child(4) {\n      animation-delay: 0.9s;\n    }\n\n    #loading-icon span:nth-child(5) {\n      animation-delay: 1.2s;\n    }\n\n    @keyframes loader {\n      25% { transform: scale(1.3); }\n      50% { transform: scale(1.1); }\n      75% { transform: scale(1.3); }\n    }\n  </style>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a URL in JavaScript for an API endpoint to fetch data from a given database table.", "input": "Table Name: users", "output": "const generateURL = (tableName) => {\n  return `https://website.com/api/v1/table/${tableName}`;\n}\n\nconst url = generateURL('users');\n// Output: https://website.com/api/v1/table/users", "category": "Python"}, {"instruction": "Write C++ code to calculate the sum of the elements in an array.", "input": "", "output": "int sumArrayElements(int arr[], int n) { \n    int sum = 0; \n    for (int i = 0; i < n; i++) \n        sum += arr[i]; \n  \n    return sum; \n}", "category": "Python"}, {"instruction": "Create a program in Java that validates an input string for containing only numbers.", "input": "", "output": "public class NumberValidation {\n\n    public boolean isNumeric(String str) {\n        try {\n            Double.parseDouble(str);\n            return true;\n        } catch(NumberFormatException e){\n            return false;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Sort a list of integers in ascending order using selection sort.", "input": "[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]", "output": "def selection_sort(list): \n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)", "category": "Python"}, {"instruction": "Describe in Python a custom exception for handling database connection errors.", "input": "", "output": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message", "category": "Python"}, {"instruction": "Code a method in Python that determines the number of words in a given string.", "input": "", "output": "def word_count(s):\n  return len(s.split())", "category": "Python"}, {"instruction": "Design a database schema for storing user information such as their email, name and avatar.", "input": "", "output": "CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  email VARCHAR(50),\n  name VARCHAR(50),\n  avatar BLOB\n);", "category": "Python"}, {"instruction": "In Java, write a function for calculating the Fibonacci number for a given input n.", "input": "", "output": "public static long fibonacci(int n) \n    { \n        if (n <= 1) \n            return n; \n        return fibonacci(n-1) + fibonacci(n-2); \n    }", "category": "Python"}, {"instruction": "Create a program in Ruby that encrypts the given data using AES-256 encryption algorithm.", "input": "\"Hello, I'm a secret message to be encrypted!\"", "output": "require 'openssl'\nrequire 'base64'\n\ndef aes_encrypt(data, key)\n  aes = OpenSSL::Cipher::AES.new(256, :ECB)\n  aes.encrypt\n  aes.key = key\n\n  encrypted_data = aes.update(data) + aes.final\n  Base64.encode64(encrypted_data).gsub(\"\\n\", '')\nend\n\nputs aes_encrypt(\"Hello, I'm a secret message to be encrypted!\", '1234567890123456')", "category": "Python"}, {"instruction": "Create an HTML page with a form that validates a user's email address.", "input": "", "output": "<html>\n  <head>\n    <title>Email Validation Form</title>\n  </head>\n  <body>\n    <h1>Email Validation Form</h1>\n    <form action=\"/\" method=\"POST\">\n      <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\">\n      <button type=\"submit\">Submit</button>\n    </form>\n    <script>\n      let inputField = document.querySelector('input');\n\n      inputField.addEventListener('input', function() {\n        let emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n        let isEmailValid = inputField.value.match(emailRegex);\n        inputField.style.borderColor = (isEmailValid) ? \"green\" : \"red\";\n      });\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a regular expression to validate an e-mail address.", "input": "", "output": "^[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$", "category": "Python"}, {"instruction": "Use CSS to create a table with 3 columns and 5 rows.", "input": "", "output": "<table> \n  <tr> \n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th> \n  </tr>\n  <tr> \n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n    <td>Row 1, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n    <td>Row 2, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 3, Column 1</td>\n    <td>Row 3, Column 2</td>\n    <td>Row 3, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 4, Column 1</td>\n    <td>Row 4, Column 2</td>\n    <td>Row 4, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 5, Column 1</td>\n    <td>Row 5, Column 2</td>\n    <td>Row 5, Column 3</td> \n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write an SQL query to find the third highest salary in a table.", "input": "", "output": "SELECT salary \nFROM employee \nORDER BY salary DESC \nLIMIT 2,1;", "category": "Python"}, {"instruction": "Translate the following C++ program into Java.", "input": "#include <iostream>\n \nint main() {\n  int num1 = 0;\n  int num2 = 0;\n  int result = 0;\n \n  std::cout << \"Enter two numbers separated by a space: \";\n  std::cin >> num1 >> num2;\n \n  result = num1 + num2;\n \n  std::cout << \"The sum of \" << num1 << \" and \" << num2 \n            << \" is \" << result;\n \n  return 0;\n}", "output": "import java.util.Scanner;\n\npublic class Program {    \n    public static void main(String[] args) {      \n        Scanner scanner = new Scanner(System.in);\n        int num1 = 0;\n        int num2 = 0;\n        int result = 0;\n       \n        System.out.print(\"Enter two numbers separated by a space: \");\n        num1 = scanner.nextInt();\n        num2 = scanner.nextInt();\n       \n        result = num1 + num2;\n       \n        System.out.println(\"The sum of \" + num1 + \" and \"\n         + num2 + \" is \" + result);\n    }\n}", "category": "Python"}, {"instruction": "Edit the following HTML code to include a new form field.", "input": "<html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n    </form>\n</body>\n</html>", "output": "<html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n        <label for=\"address\">Address</label>\n        <input type=\"text\" id=\"address\">\n    </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a list containing the squares of numbers from 0 to 10.", "input": "", "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "category": "Python"}, {"instruction": "Write a Python script to sort a given list of numbers in ascending order.", "input": "[3, 7, 1, 5, 4]", "output": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))", "category": "Python"}, {"instruction": "Convert the following statement into valid Python syntax.", "input": "x = \"string\"", "output": "x = 'string'", "category": "Python"}, {"instruction": "Write a Python program to print all integer numbers from a given range.", "input": "from 1 to 10", "output": "for i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "Describe the difference between a class and object in object oriented programming.", "input": "", "output": "A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics.", "category": "Python"}, {"instruction": "Write a function to count the occurence of an item in a given list.", "input": "[1, 2, 3, 2, 4]", "output": "def count_occurrence(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n# Driver Code \narr = [1, 2, 3, 2, 4]  \nx = 2\nprint(\"Occurrence of the number is: \", count_occurrence(arr, x))", "category": "Python"}, {"instruction": "Identify the datatype of the following object.", "input": "124", "output": "integer", "category": "Python"}, {"instruction": "Extract the type of the following object in Python.", "input": "a = [1, 2, 3]", "output": "list", "category": "Python"}, {"instruction": "Generate a valid HTML form for a login page.", "input": "Username:\nPassword:", "output": "<form action=\"login.php\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" name=\"username\" id=\"username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" name=\"password\" id=\"password\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a variable in Python with the name \u201cstudentName\u201d and assign it your name as a string.", "input": "", "output": "studentName = \"John\"", "category": "Python"}, {"instruction": "Write CSS code to change the background color of a div element.", "input": "", "output": "#myDiv {\n    background-color: #00F;\n}", "category": "Python"}, {"instruction": "Generate a JavaScript object with two properties.", "input": "", "output": "const myObject = {\n    name: 'John',\n    age: 25\n};", "category": "Python"}, {"instruction": "What is Machine Learning?", "input": "", "output": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.", "category": "Python"}, {"instruction": "Create a SQL query to count the number of rows in a table called 'users'.", "input": "", "output": "SELECT COUNT(*) FROM users;", "category": "Python"}, {"instruction": "Write a function to compute the maximum of two given numbers in JavaScript.", "input": "", "output": "function max(num1, num2) {\n  return (num1 > num2) ? num1 : num2;\n}", "category": "Python"}, {"instruction": "What is an API?", "input": "", "output": "API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database.", "category": "Python"}, {"instruction": "Write a Python script to generate a randomized list of 10 integers.", "input": "", "output": "import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)", "category": "Python"}, {"instruction": "How does a for loop work?", "input": "", "output": "A for loop is a type of loop used in programming languages to execute a set of instruction multiple times. It consists of an initialization statement, condition expression, and a loop body. The code block of the loop is executed until the condition expression evaluates to false. The initialization statement is processed once, while the condition expression is evaluated each time before the loop body is executed. If the condition expression is true, the loop is executed; otherwise, the loop is terminated.", "category": "Python"}, {"instruction": "Modify the following code so that it can accept two parameters.", "input": "def print_message():\n    print(\"Hello there!\")", "output": "def print_message(message, name):\n    print(f\"{message}, {name}!\")", "category": "Python"}, {"instruction": "What is the maximum number of threads simultaneously running in a single process?", "input": "", "output": "The maximum number of threads that can simultaneously run in a single process is limited by the resources of the system, such as the amount of available memory and the scheduling algorithm employed. Generally, a typical modern system will allow up to hundreds or even thousands of threads to run concurrently.", "category": "Python"}, {"instruction": "Add comments to this C++ code segment to explain what it does:", "input": "int x = 5;\nwhile x > 0\nx--;", "output": "// This code segment sets the value of the variable x to 5, \n// and then decrements it until it becomes 0.\nint x = 5;\nwhile (x > 0) { // loop runs until x is 0\n     x--;       // decrement x\n}", "category": "Python"}, {"instruction": "Read this piece of code and describe it in brief.", "input": "def add(x, y):\n  return x + y", "output": "This is a simple Python function that takes two parameters, x and y, and returns the sum of them. The function can be called by passing the two inputs, and it will add them both, then return the result to the caller.", "category": "Python"}, {"instruction": "Classify this text as either positive or negative", "input": "I'm not sure if I'll ever be able to turn this situation around.", "output": "Negative", "category": "Python"}, {"instruction": "Write a pseudo-code to implement a simple sorting algorithm.", "input": "", "output": "// Pseudo code for simple sorting\n\n// Define a sorting function \nfunction Sort(inputList):  \n \n// Loop through the list \n  for i from 0 to length(inputList) - 1 do:\n  \n    currentMinIndex = i \n   \n    // Search the lowest element \n    for j from i + 1 to length(inputList) do:\n      \n      // Update the smallest element \n      if inputList[j]<inputList[currentMinIndex] then \n        currentMinIndex = j\n    \n    // Swap the smallest element \n    if currentMinIndex != i do: \n      Swap(inputList[currentMinIndex],inputList[i]) \n \n// Return the sorted list \n  return inputList", "category": "Python"}, {"instruction": "Write a CSS rule to make the text in a paragraph appear italicized.", "input": "", "output": "p {\n    font-style: italic;\n}", "category": "Python"}, {"instruction": "Check if a string contains a substring, using Python.", "input": "haystack = \"The quick brown fox\"\nneedle = \"brown\"", "output": "needle in haystack # Output: True", "category": "Python"}, {"instruction": "Create a basic HTML structure including an h1 titled \"Welcome\".", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Welcome</title>\n</head>\n<body>\n <h1>Welcome</h1>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Convert a string to lowercase, using Python.", "input": "my_string = \"Hello World\"", "output": "my_string.lower() # Output: \"hello world\"", "category": "Python"}, {"instruction": "Clean the input data using Python, so it is valid for a machine learning model.", "input": "data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]", "output": "data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]", "category": "Python"}, {"instruction": "Replace the placeholder with a valid JavaScript expression", "input": "let x = <placeholder>;", "output": "let x = 8 * 8;", "category": "Python"}, {"instruction": "Write a function to calculate the surface area of a sphere using the formula `4 * pi * r^2`.", "input": "", "output": "def calcSurfAreaSphere(radius):\n    pi = 3.14159\n    return 4 * pi * radius * radius;", "category": "Python"}, {"instruction": "Write a function to find the area of a triangle using the formula `A = 0.5 * base * height`.", "input": "", "output": "def findArea(base, height):\n    return 0.5 * base * height;", "category": "Python"}, {"instruction": "What is the JavaScript syntax for creating a new object?", "input": "", "output": "The syntax for creating a new object in JavaScript is:  const objectName = new Object();", "category": "Python"}, {"instruction": "Create a SQL query that returns the name and age of each person in a table called \"people\".", "input": "", "output": "SELECT name, age FROM people;", "category": "Python"}, {"instruction": "Can you generate CSS for a div with an id of \"container\" that has a width of 500px, a height of 300px, and a white background?", "input": "", "output": "#container { \n  width: 500px;\n  height: 300px;\n  background-color: #FFFFFF;\n}", "category": "Python"}, {"instruction": "Output the following JSON object as a valid HTML table", "input": "[\n\t{\n\t\t\"name\": \"John\",\n\t\t\"age\": 26\n\t},\n\t{\n\t\t\"name\": \"Sarah\",\n\t\t\"age\": 30\n\t},\n\t{\n\t\t\"name\": \"Joe\",\n\t\t\"age\": 27\n\t}\n]", "output": "<table>\n\t<thead> \n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Age</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>John</td>\n\t\t\t<td>26</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Sarah</td>\n\t\t\t<td>30</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Joe</td>\n\t\t\t<td>27</td>\n\t\t</tr>\n\t</tbody>\n</table>", "category": "Python"}, {"instruction": "Can you write a code to delete all the items whose key starts with \"item\"?", "input": "{\n    \"item1\": \"apple\",\n    \"item2\": \"banana\",\n    \"item3\": \"cherry\",\n    \"item4\": \"durian\",\n    \"food1\": \"bacon\"\n}", "output": "let data = {\n    \"item1\": \"apple\",\n    \"item2\": \"banana\",\n    \"item3\": \"cherry\",\n    \"item4\": \"durian\",\n    \"food1\": \"bacon\"\n};\n\n// check each key for the preffix \"item\"\nfor (let key in data) {\n  if (key.startsWith('item')) {\n    // if key starts with \"item\", delete that item from the object\n    delete data[key];\n  } \n}\n\n// output object\nconsole.log(data);", "category": "Python"}, {"instruction": "Write a code to output whether a given number is even or odd", "input": "24", "output": "let num = 24;\n\nif (num % 2 == 0) {\n  console.log(num + \" is an even number\");\n} else {\n  console.log(num + \" is an odd number\");\n}", "category": "Python"}, {"instruction": "Write a code to delete all the items whose value is lower than 5", "input": "{\n    \"item1\": 10,\n    \"item2\": 7,\n    \"item3\": 3,\n    \"item4\": 4,\n    \"food1\": 2\n}", "output": "let data = {\n    \"item1\": 10,\n    \"item2\": 7,\n    \"item3\": 3,\n    \"item4\": 4,\n    \"food1\": 2\n};\n\n// check each value\nfor (let key in data) {\n  if (data[key] < 5) {\n    // if value is lower than 5, delete that item from the object\n    delete data[key];\n  } \n}\n\n// output object\nconsole.log(data);", "category": "Python"}, {"instruction": "Write a PHP script to convert a number in binary format", "input": "24", "output": "<?php\n    $number = 24;\n\n    // convert the number to its binary form\n    $binary_num = decbin($number);\n\n    // output the result\n    echo \"Binary representation of \".$number.\" is \".$binary_num;\n?>", "category": "Python"}, {"instruction": "Write a Java program to generate a random number between 25 and 75.", "input": "", "output": "public class RandomNumber {\n    public static void main(String[] args) {\n        // Generate a random number between 25 and 75\n        int max = 75;\n        int min = 25;\n        int range = max - min + 1;\n\n        int randomNumber = (int) (Math.random() * range) + min;\n\n        System.out.println(randomNumber);\n     }\n }", "category": "Python"}, {"instruction": "Reverse a string without using the reverse() function.", "input": "", "output": "def reverse_string(s): \n    str = \"\" \n    for i in s: \n        str = i + str\n    return str", "category": "Python"}, {"instruction": "Write a SQL query to find all the customers who are over 50 years of age.", "input": "", "output": "SELECT * FROM Customers WHERE age > 50;", "category": "Python"}, {"instruction": "Create a Python list of 10 numbers from 0 to 9.", "input": "", "output": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "What is the highest peak in the world?", "input": "", "output": "The highest peak in the world is Mount Everest, which has a summit elevation of 8,848 meters (29,029 feet).", "category": "Python"}, {"instruction": "Resolve the given linked list into a cycle using the Floyd's Cycle algorithm.", "input": "", "output": "// initialise slow and fast pointers \nlet slow = head;\nlet fast = head;\n\nwhile (fast !== null && fast.next !== null) {  \n  fast = fast.next.next;  \n  if(slow === fast) { \n    break;\n  }  \n  slow = slow.next;  \n} \n\n// check if there is a cycle  \nif (slow === null || fast === null || fast.next === null) { \n  return;\n}  \n// initialize slow pointer to head  \nslow = head;  \nwhile (slow !== fast) {  \n  slow = slow.next;  \n  fast = fast.next;  \n} \n\n// assign the cycle end  \nfast.next = slow;", "category": "Python"}, {"instruction": "How would you check if two strings are anagrams in JavaScript?", "input": "", "output": "function isAnagram(str1, str2) { \n  // Compare the length of the two string\n  if (str1.length !== str2.length) { \n    return false; \n  } \n \n  // Convert both strings to lowercase\n  str1 = str1.toLowerCase(); \n  str2 = str2.toLowerCase(); \n \n  // Store the frequency of characters\n  // in the first string\n  const frequencyCounter1 = {}; \n  for (let char of str1) { \n    frequencyCounter1[char] = (frequencyCounter1[char] || 0) + 1; \n  } \n \n  // Store the frequency of characters\n  // in the second string\n  const frequencyCounter2 = {}; \n  for (let char of str2) { \n    frequencyCounter2[char] = (frequencyCounter2[char] || 0) + 1; \n  }\n \n  // Compare the frequency of characters \n  for (let key in frequencyCounter1) { \n    if (!(key in frequencyCounter2)) { \n      return false; \n    } \n   \n    if (frequencyCounter2[key] !== frequencyCounter1[key]) { \n      return false; \n    } \n  }  \n  return true; \n}", "category": "Python"}, {"instruction": "Create a JavaScript function to remove all spaces from a string.", "input": "", "output": "function removeSpaces(str) { \n  return str.replace(/ /g,\"\"); \n}", "category": "Python"}, {"instruction": "Create an HTML radio button that allows users to select between two options.", "input": "", "output": "<input type=\"radio\" name=\"selection\" value=\"option1\"> Option 1\n<input type=\"radio\" name=\"selection\" value=\"option2\"> Option 2", "category": "Python"}, {"instruction": "Write a code snippet to select all HTML elements with the class name \"button\" from an HTML document.", "input": "", "output": "// Select all elements with class name \"button\"\nconst buttons = document.querySelectorAll(\".button\");\n// Loop through the element list\nfor (let i = 0; i < buttons.length; i++) {\n  const button = buttons[i];\n  // Do something with the elements\n  // ...\n}", "category": "Python"}, {"instruction": "Design a class with 3 data members in Python.", "input": "", "output": "class MyClass: \n  def __init__(self, member1, member2, member3): \n    self.member1 = member1\n    self.member2 = member2\n    self.member3 = member3", "category": "Python"}, {"instruction": "Develop a html form that gets user's name, email, and a valid phone number.", "input": "", "output": "<form action=\"action_page.php\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"Name\" required><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"Email\" required><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"number\" name=\"phone\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" required><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "How would you check if an array contains a specific value in JavaScript?", "input": "", "output": "Using the Array.prototype.includes() method:\n\nfunction checkIfArrayContainsValue(arr, value) {\n  if(arr.includes(value)) {\n    return true;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Given a number N, write a function to check if N is prime.", "input": "Number: 11", "output": "function isPrime(n)\n{\n    // alleven numbers are not prime\n    if (n % 2 == 0) return false;\n\n    // check odd divisors b/w 3 and sqrt(n)\n    let limit = Math.sqrt(n);\n    for (let i = 3; i <= limit; i=i+2)\n    {\n        // if evenly divisible then not prime\n        if (n % i == 0) return false;\n    }\n\t\n    return true;\n}", "category": "Python"}, {"instruction": "Write a code snippet to create a new JavaScript array of n length.", "input": "", "output": "var array = [];\nfor (var i = 0; i < n; i++) {\n  array.push(null);\n}", "category": "Python"}, {"instruction": "Write a method that takes 2 strings and determines if the first string contains the second string as a substring.", "input": "String 1: bus ride\nString 2: ride", "output": "public static boolean isSubstring(String str1, String str2) \n{\n    if (str1.indexOf(str2) >= 0)\n        return true;\n    else\n        return false;\n}", "category": "Python"}, {"instruction": "Implement a function that takes a character and returns true if the character is an uppercase letter.", "input": "", "output": "function isUpperCase(ch) {\n  if (ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90) {\n    return true;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Parse the following HTML string and extract the text of the given tag.", "input": "<div class=\"header\">Hello!</div>", "output": "from bs4 import BeautifulSoup\n\nhtml_string = \"<div class=\"header\">Hello!</div>\"\nsoup = BeautifulSoup(html_string)\n\nheader_tag = soup.find('div', {'class': 'header'})\n\nif header_tag is not None:\n    print(header_tag.text)", "category": "Python"}, {"instruction": "Create a Python dictionary with the following elements", "input": "Name: John\nAge: 25\nCity: New York", "output": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all records from the \"people\" table that have a last name that begins with \"Smith\".", "input": "", "output": "SELECT *\n FROM people\n WHERE last_name LIKE 'Smith%';", "category": "Python"}, {"instruction": "Create a function to calculate the sum of all the values in the given array.", "input": "[2, 4, 6, 8]", "output": "def sum_of_array(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\n# Output:", "category": "Python"}, {"instruction": "Access the data present in the given dictionary.", "input": "dictionary = {\n  'name': 'John',\n  'age': 25\n}", "output": "name = dictionary['name'] \nage = dictionary['age']", "category": "Python"}, {"instruction": "Establish a connection between the web and database server.", "input": "", "output": "To establish a connection between the web and database server, the web server needs to be configured to access the database server. This can be done using a variety of methods such as using a connection string, using an ODBC or JDBC driver, or using a web application framework. Once the connection is established, commands can be sent from the web server to the database server to fetch or store data.", "category": "Python"}, {"instruction": "Construct a SQL query to fetch all data from the given table.", "input": "Table name: employees", "output": "SELECT * FROM employees;", "category": "Python"}, {"instruction": "Construct a dictionary from the given list.", "input": "[(1, 'a'), (2, 'b'), (3, 'c')]", "output": "my_dictionary = {1: 'a', 2: 'b', 3: 'c'}", "category": "Python"}, {"instruction": "Implement a thread pool in Java.", "input": "", "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadPool {\n  private ExecutorService executor;\n\n  public ThreadPool(int size) {\n    this.executor = Executors.newFixedThreadPool(size);\n  }\n\n  public void submit(Runnable task) {\n    this.executor.execute(task);\n  }\n\n  public void shutdown() {\n    this.executor.shutdown();\n  }\n}", "category": "Python"}, {"instruction": "Edit the following JSON code to include the given data.", "input": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    } \n  ]\n}\n\nNew data to add:\nname: \"Jane\",\nage: 25", "output": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    },\n    { \n      \"name\": \"Jane\",\n      \"age\": 25\n    }\n  ]\n}", "category": "Python"}, {"instruction": "Detect the sentiment of the given text.", "input": "The movie was a total disaster.", "output": "The sentiment of the text is negative.", "category": "Python"}, {"instruction": "Generate a Python code to remove the given substring from the string.", "input": "String: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\"", "output": "string = \"The quick brown fox jumped over the lazy dog\"\nsubstring = \"brown\"\nnew_string = string.replace(substring, \"\")\nprint(new_string)\n# Output: The quick  fox jumped over the lazy dog", "category": "Python"}, {"instruction": "Name the main features of a class-based programming language.", "input": "", "output": "The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class.", "category": "Python"}, {"instruction": "Create a program for calculating the hypotenuse of a right-angle triangle using its two sides.", "input": "a = 5, b = 6", "output": "def calculateHypotenuse(a, b):\n    return (a**2 + b**2)**0.5\n\nhypotenuse = calculateHypotenuse(5, 6)", "category": "Python"}, {"instruction": "What is the complexity of the algorithm to reverse a given string?", "input": "", "output": "The complexity of the algorithm to reverse a given string is O(n).", "category": "Python"}, {"instruction": "Program a function to add three integers and return the sum.", "input": "2, 3 and 6", "output": "def addThree(a, b, c):\n    return a + b + c\n\nsum = addThree(2, 3, 6)", "category": "Python"}, {"instruction": "Implement a sorting algorithm for a given array in Python.", "input": "[3, 2, 1, 4]", "output": "sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)", "category": "Python"}, {"instruction": "Program a function to convert a given string with no spaces to a string with underscores (_) in all spaces between words.", "input": "HelloWorld", "output": "Hello_World", "category": "Python"}, {"instruction": "Calculate the LCM (Least Common Multiple) of two integers.", "input": "int x = 15;\nint y = 10;", "output": "def lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))", "category": "Python"}, {"instruction": "Write a Java program to check if a given number is prime.", "input": "int n = 17;", "output": "public class PrimeNumber {\n    public static void main(String[] args) {\n        int n = 17; \n        boolean flag = false;\n        for(int i = 2; i <= n/2; ++i) {\n            if(n % i == 0) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n            System.out.println(n + \" is a prime number.\");\n        else\n            System.out.println(n + \" is not a prime number.\");\n    }\n}", "category": "Python"}, {"instruction": "Write a C# program to test if a given string contains the specified substring.", "input": "String x = \"Hello, World!\";\nString y = \"World\";", "output": "using System;\n \npublic class Program\n{\n    public static void Main()\n    {\n        string x = \"Hello, World!\"\n        string y = \"World\";\n        if (x.Contains(y))\n        {\n            Console.WriteLine(\"String x contains the substring y.\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a PHP function that takes two strings and returns the first string repeated the number of times specified by the length of the second string.", "input": "String x = \"Hi\";\nString y = \"World!\";", "output": "<?php\nfunction repeatString($x, $y) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($y); $i++) {\n        $result .= $x;\n    }\n    return $result;\n}\necho repeatString(\"Hi \", \"World!\");\n?>", "category": "Python"}, {"instruction": "Create an array of 5 integers.", "input": "", "output": "array = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Calculate the mean of the following list of numbers using a for loop.", "input": "numbers = [3, 5, 8, 11, 15]", "output": "total = 0\nfor number in numbers:\n    total += number\nmean = total / len(numbers)\nprint(mean) # Output: 8.4", "category": "Python"}, {"instruction": "Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.", "input": "list_of_strings = [\"Foo\", \"Bar\", \"Baz\"]\nindexes = [0,2]\nalphabet_string = \"abc123\"", "output": "def select_list_items(list_of_strings, indexes, alphabet_string):\n    new_list = []\n    for index in indexes: \n        new_list.append(list_of_strings[alphabet_string.index(str(index))])\n    return new_list\n\nprint(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [\"Foo\", \"Baz\"]", "category": "Python"}, {"instruction": "Complete the following line of code to successfully initiate a pandas dataframe without specifying column names or data.", "input": "", "output": "df = pd.DataFrame(data=None, columns=None)", "category": "Python"}, {"instruction": "Develop a C program for swapping two variables.", "input": "", "output": "#include <stdio.h>\n \nvoid swap(int *x, int *y)\n{\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n \nint main()\n{\n    int x = 10, y = 20;\n \n    // Call swap function to swap 'x' and 'y'\n    swap(&x, &y);\n \n    printf(\"x = %d, y = %d\", x, y);\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a formula to calculate the surface area of a triangular prism", "input": "", "output": "Surface Area = a*h + b*h + c*h + d*h, \nwhere a,b and c are three sides of the triangular face and h is the height of the prism", "category": "Python"}, {"instruction": "Develop a code in Python to update all the elements of an array by a number", "input": "a = [1, 4, 5, 7, 9]", "output": "def update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a", "category": "Python"}, {"instruction": "Using an OOP approach, create an Animal class with properties of name and a virtual property age that gets calculated based on the creation date.", "input": "", "output": "class Animal {\n  constructor(name) {\n    this.name = name;\n    this.age = Date.now() - this.creationDate;\n  }\n}", "category": "Python"}, {"instruction": "Write a Bash script to create a directory", "input": "", "output": "mkdir directory_name", "category": "Python"}, {"instruction": "Generate the code to find the number of days between two dates.", "input": "", "output": "def daysBetween(date1, date2): \n    startDate = pd.to_datetime(date1) \n    endDate = pd.to_datetime(date2)\n    delta = endDate - startDate\n    return delta.days", "category": "Python"}, {"instruction": "Create a regular expression for matching email addresses.", "input": "", "output": "\"^[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"", "category": "Python"}, {"instruction": "Design a Java function to convert a string to uppercase.", "input": "", "output": "public String toUpperCase(String str){ \n    char[] charArr = str.toCharArray(); \n\n    for(int i=0; i<str.length(); i++){ \n        if(charArr[i] >= 'a' && charArr[i] <= 'z'){ \n            charArr[i] = (char)(charArr[i] - 32); \n        } \n    } \n\n    return new String(charArr); \n}", "category": "Python"}, {"instruction": "Write a shell command to list all the running services in a Linux system.", "input": "", "output": "Command: service --status-all", "category": "Python"}, {"instruction": "Generate a Python dictionary containing the squares of the numbers from 1 to n.", "input": "int n = 10;", "output": "def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\n\nn = 10\nprint(generateDict(n))", "category": "Python"}, {"instruction": "Create a SQL query to find the rows that have a specific value in a column.", "input": "table: users\ncolumn: age\nvalue: 18", "output": "SELECT * FROM users\nWHERE age = 18;", "category": "Python"}, {"instruction": "Write a C program to find the longer of two strings.", "input": "String x = \"Hello\";\nString y = \"World!\";", "output": "#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char x[20] = \"Hello\";\n    char y[20] = \"World!\";\n\n    int result = strlen(x) > strlen(y) ? 0 : 1;\n    if (result == 0)\n        printf(\"%s is longer than %s\\n\", x, y);\n    else \n        printf(\"%s is longer than %s\\n\", y, x);\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Develop a script to remove duplicate elements from an array.", "input": "arr = [1, 2, 3, 4, 4, 1, 5]", "output": "def remove_duplicate(arr):\n    newArr = []\n    for i in arr:\n        if i not in newArr:\n            newArr.append(i)\n    return newArr", "category": "Python"}, {"instruction": "Create a web page with a form for user input of a modified text.", "input": "", "output": "<html>\n<body>\n  <form action = \"processText.php\" method = \"post\">\n    <textarea rows = \"10\" cols = \"30\" name = \"modifiedText\"></textarea><br>\n    <input type = \"submit\" value = \"Submit\" />\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Debug the given code to output the correct result.", "input": "def temperature_converter(temperature):\n    kelvin = temperature + 273.15\n    return celsius", "output": "def temperature_converter(temperature):\n    celsius = temperature\n    kelvin = temperature + 273.15\n    return kelvin", "category": "Python"}, {"instruction": "Classify the given sentence according to the Syntactic parse tree and label each part of the sentence.", "input": "I bought a car yesterday.", "output": "[ NP: I] [ VP: bought] [ NP: a car] [ AdvP: yesterday]", "category": "Python"}, {"instruction": "Write a JavaScript program to convert a Celsius temperature to Fahrenheit.", "input": "", "output": "function celsiusToFahrenheit(celsius) {\n  let temperatureInFahrenheit = celsius * (9 / 5) + 32;\n  return temperatureInFahrenheit;\n}", "category": "Python"}, {"instruction": "Write a code snippet in C to find the number of elements in an array.", "input": "array[] = {2, 7, 3, 8, 11}", "output": "#include <stdio.h> \n \nint array[] = {2, 7, 3, 8, 11};\nint array_size = (sizeof(array)/sizeof(array[0]));\n \nprintf(\"Number of elements in array: %d\\n\", array_size);", "category": "Python"}, {"instruction": "Write a Bash script to find the largest number in a list of numbers.", "input": "nums = [6, 15, 4, 1, 22]", "output": "#!/bin/bash\n\nnums=(6 15 4 1 22)\nlargest=${nums[0]}\n \nfor i in ${nums[@]}\ndo\n    if [ $i -gt $largest ] \n    then \n        largest=$i \n    fi\ndone\n \necho \"Largest number in list is: $largest\"", "category": "Python"}, {"instruction": "Write a code snippet using Python to pop an element from a list.", "input": "some_list = [1, 2, 3]", "output": "some_list.pop() # pops 3", "category": "Python"}, {"instruction": "Write a SQL query to get the average salary from the 'employee' table where the job type is 'manager'.", "input": "", "output": "SELECT AVG(salary) FROM employee WHERE job_type=\"manager\";", "category": "Python"}, {"instruction": "Write an expression in JavaScript to check if a number is divisible by 2 or not.", "input": "number = 12", "output": "(number % 2 === 0) ? true : false", "category": "Python"}, {"instruction": "Using R, calculate the average of a list of numbers given as an argument.", "input": "list_num = c(4, 5, 9, 10, 2)", "output": "average_num <- function(list_num){\n  mean(list_num)\n}\n\n# call the function \naverage_num(list_num) # Prints 6", "category": "Python"}, {"instruction": "Given an array of numbers, write a function to find the maximum, minimum and average values.", "input": "numbers = [1, 15, 4, 5, 28, 35, 25]", "output": "def find_max_min_avg(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    avg_val = sum(numbers) / len(numbers)\n\n    return max_val, min_val, avg_val", "category": "Python"}, {"instruction": "Create an object in JavaScript to store a student's information.", "input": "name = \"John Doe\"\nage = 18", "output": "let studentObj = {\n  name: \"John Doe\",\n  age: 18\n}", "category": "Python"}, {"instruction": "Write a CSS code snippet to set the font size for all elements to 12px.", "input": "", "output": "* {\n  font-size: 12px;\n}", "category": "Python"}, {"instruction": "Write a Python function that takes a list of floats as an argument and returns the sum of all elements.", "input": "some_list = [1.5, 5.9, 3.7, 5.2]", "output": "def sum_list(some_list):\n    result = 0\n    for num in some_list:\n        result += num\n    return result\n\nprint(sum_list(some_list)) # Prints 15.3", "category": "Python"}, {"instruction": "Generate the output for the following code.", "input": "var array = [2,4,6,8];\nfor(i=0;i<array.length;i++){\nconsole.log(array[i] + 2);\n}", "output": "4\n6\n8\n10", "category": "Python"}, {"instruction": "Write a PHP code snippet to validate an email address.", "input": "", "output": "<?php\nfunction validateEmail($email) {\n    // regex for validating email addresses\n    return filter_var($email, FILTER_VALIDATE_EMAIL); \n}", "category": "Python"}, {"instruction": "Calculate the dot product of two vectors.", "input": "[1, 2, 3], [2, 4, 6]", "output": "28", "category": "Python"}, {"instruction": "Write a C++ program to print out the sum of the first 100 integers.", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    int i, sum = 0; \n      \n    //Computes the sum \n    for (i = 1; i <= 100; i++) \n    { \n        sum += i; \n    } \n      \n    cout << \"Sum of first 100 natural numbers = \"\n         << sum << endl; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Count the occurrences of the word \"love\" in the given text.", "input": "I love you so much, my love!", "output": "2", "category": "Python"}, {"instruction": "Create a PHP script to get the sum of two numbers.", "input": "num1 = 12\nnum2 = 8", "output": "<?php\n$num1 = 12;\n$num2 = 8;\n$sum = $num1 + $num2;\necho \"The sum of $num1 and $num2 is: \".$sum;\n?>", "category": "Python"}, {"instruction": "Create a for loop to iterate over the following list and print each element.", "input": "list = [1, 2, 3, 4, 5]", "output": "for x in list:\n    print(x)", "category": "Python"}, {"instruction": "Write an SQL query to find the average salary from the \"employee\" table.", "input": "", "output": "SELECT AVG(salary)\nFROM employee;", "category": "Python"}, {"instruction": "Create a PHP script to log user activity.", "input": "", "output": "<?php\n// create a new file\n$log_file = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\");\n\n// write the data to the log file\n$data = time() . \" : User activity logged \\n\";\nfwrite($log_file, $data);\n\n// close the log file\nfclose($log_file);\n?>", "category": "Python"}, {"instruction": "Write a function that takes a string as an argument and removes all vowels (a, e, i, o, u) from it.", "input": "hello world", "output": "hll wrld", "category": "Python"}, {"instruction": "Write a script for displaying the current datetime in RFC2822 format.", "input": "", "output": "var date = new Date();\nvar RFC2822currentDateTime = date.toUTCString();\nconsole.log(RFC2822currentDateTime);", "category": "Python"}, {"instruction": "Program a function that takes a list of numbers as an argument, then returns a dictionary which contains the number in the list as a key and its square root as the value.", "input": "[4, 9, 16, 25]", "output": "{4: 2, 9: 3, 16: 4, 25: 5}", "category": "Python"}, {"instruction": "Create an HTML form with two input fields for email and password.", "input": "", "output": "<form>\n  <label>Email:\n    <input type=\"email\" name=\"email\">\n  </label>\n  <label>Password:\n    <input type=\"password\" name=\"password\">\n  </label>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a CSS animation which will rotate a shape when the user hovers over it.", "input": "", "output": ".shape {\n  width: 100px;\n  height: 100px;\n  background: red;\n\n  /* Animation */\n  animation: rotation 2s linear;\n  animation-iteration-count: infinite;\n}\n\n/* Animation Code */\n@keyframes rotation {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* Specifying Hover to animate shape */\n.shape:hover {\n animation-play-state: running; \n}", "category": "Python"}, {"instruction": "Print the decimal equivalent of a given binary number.", "input": "11100011", "output": "def binToDecimal(num): \n    # Initializing base  \n    # value to 1, i.e 2^0 \n    base = 1; \n      \n    dec_val = 0; \n      \n    # Extracting digits of  \n    # binary number from   \n    # the right most side \n    # and keeping  \n    # incrementing the base \n    # by multiply of 2 \n    temp = num \n    while(temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n          \n        dec_val += last_digit * base; \n        base = base * 2; \n      \n    return dec_val\nnum = 11100011\nprint('Decimal Equivalent of',num,'is',binToDecimal(num))", "category": "Python"}, {"instruction": "Using CSS, create a basic box shadow effect.", "input": "", "output": "box-shadow: 10px 10px 20px 10px #000000;", "category": "Python"}, {"instruction": "What is the best data structure to store a dictionary?", "input": "", "output": "The best data structure to store a dictionary is a hash table. A hash table is an efficient data structure that uses key-value pairs to store data. It provides fast insertion, deletion and search operations, allowing it to be used to search for a specific key in a dictionary quickly and easily.", "category": "Python"}, {"instruction": "Using HTML, create a simple table showing a list of countries and their population.", "input": "", "output": "<table> \n    <tr> \n        <th>Country</th> \n        <th>Population</th> \n    </tr> \n    <tr> \n        <td>United States</td> \n        <td>328.2 million</td> \n    </tr> \n    <tr> \n        <td>China</td> \n        <td>1.44 billion</td> \n    </tr> \n    <tr> \n        <td>India</td> \n        <td>1.39 billion</td> \n    </tr> \n    <tr> \n        <td>Indonesia</td> \n        <td>269.9 million</td> \n    </tr> \n</table>", "category": "Python"}, {"instruction": "Create a class in Java to represent a circle with two fields for its radius and color.", "input": "", "output": "public class Circle { \n    private double radius; \n    private String color; \n  \n    public Circle(double r, String c) \n    { \n        this.radius = r; \n        this.color = c; \n    } \n  \n    public double getRadius() \n    { \n        return this.radius; \n    } \n  \n    public String getColor() \n    { \n        return this.color; \n    } \n  \n    public double getArea() \n    { \n        return Math.PI * this.radius * this.radius; \n    } \n}", "category": "Python"}, {"instruction": "Implement a function that takes a list and reverses its order", "input": "lst = [1,2,3,4]", "output": "def reverse(lst):\n    return lst[::-1]\n\nreverse(lst)", "category": "Python"}, {"instruction": "Implement a function that finds the index of an item in a list.", "input": "lst = [1,2,3,4]\nitem = 3", "output": "def search(lst, item):\n    for index, element in enumerate(lst):\n        if element == item:\n            return index\n    return -1\n\nsearch(lst, item)", "category": "Python"}, {"instruction": "Implement a function that takes a number and returns its multiplication table up to 10.", "input": "n = 5", "output": "def print_multiplication_table(n):\n    # iterate through 0 to 10\n    for i in range(1, 11):\n        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Implement a function that calculates the greatest common divisor of two integers.", "input": "n1 = 15\nn2 = 10", "output": "def cal_gcd(n1, n2): \n   if n2 == 0: \n       return n1 \n   else: \n       return cal_gcd(n2, n1 % n2) \n \ngcd = cal_gcd(n1, n2) \nprint (\"GCD of \" + str(n1) + \" and \" + str(n2) + \" is \" + str(gcd))", "category": "Python"}, {"instruction": "Given a list of student class enrollments, group students into classes that correspond with their major.", "input": "student_list = [{\"name\":\"John\", \"major\":\"Computer Science\"}, {\"name\":\"Alice\", \"major\":\"Business Administration\"},\n {\"name\":\"Bob\", \"major\":\"Computer Science\"}, {\"name\":\"Claire\", \"major\":\"Business Administration\"}]", "output": "def group_students_by_major(student_list):\n    # create a dictionary with two empty lists \n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    # iterate through the student list\n    for student in student_list:\n        # for each student in the list, add their name to the respective list\n        student_groups[student[\"major\"]].append(student[\"name\"])\n    # return the dictionary of groups\n    return student_groups", "category": "Python"}, {"instruction": "Implement a function that takes two strings and checks whether they are anagrams.", "input": "str1 = \"cinema\"\nstr2 = \"iceman\"", "output": "def anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str2:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True", "category": "Python"}, {"instruction": "Define a JavaScript function to sort an array of strings in alphabetical order.", "input": "[\"Tony\", \"Steve\", \"Peter\", \"Bruce\"]", "output": "function sortStrings(arr) {\n  return arr.sort((a, b) => a.localeCompare(b));\n}", "category": "Python"}, {"instruction": "Find the number of words in a given sentence using a Python function.", "input": "sentence = \"This is a test sentence\"", "output": "def word_count(sentence):\n  return len(sentence.split())", "category": "Python"}, {"instruction": "Write a JavaScript statement to delete the key-value pair of age in the following object.", "input": "let person = {\n    name: \"John\",\n    age: 30\n}", "output": "delete person.age;", "category": "Python"}, {"instruction": "Write a JavaScript expression to get the length of the following string.", "input": "let str = \"Hello World!\"", "output": "str.length", "category": "Python"}, {"instruction": "Use PHP to convert a given number to binary.", "input": "", "output": "function dec_to_bin($num) {\n    $bin = \"\";\n    while($num>0) {\n        $bin = ($num%2).$bin;\n        $num= (int)($num/2);\n    }\n    return $bin;\n}", "category": "Python"}, {"instruction": "Program a C# procedure to display the multiplication table of a given number.", "input": "", "output": "void DisplayTable(int num)\n{\n    for (int i = 1; i <= 10; i++)\n    {\n        Console.WriteLine($\"{num} x {i} = {num * i}\");\n    }\n}", "category": "Python"}, {"instruction": "Generate a R code to create a vector containing unique elements from another vector.", "input": "", "output": "unique_vec <- unique(vec)", "category": "Python"}, {"instruction": "Modify the given python program to accept an input string and output the length of that string.", "input": "def func():\n    print(\"Hello World!\")", "output": "def func(s):\n    print(\"Length of the string is: \" + str(len(s)))", "category": "Python"}, {"instruction": "Write a Ruby program to convert the temperature from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(fahrenheit)\n  (fahrenheit - 32) / 1.8\nend", "category": "Python"}, {"instruction": "Generate Delphi code to count the number of times a specific character occurs in a given sentence.", "input": "sentence = \"coding is fun\" / character = 'o'", "output": "function CountCharacter(sentence: string, character : char) : integer;\nvar\n    i : integer;\n    count : integer;\nbegin\n    count := 0;\n    for i := 1 to Length(sentence) do\n\tbegin\n\t\tif sentence[i] = character then\n\t\tbegin\n\t\t\tcount := count + 1;\n\t\tend;\n\tend;\n\tresult := count;\nend;", "category": "Python"}, {"instruction": "Write a JavaScript program to convert month numbers to month names.", "input": "", "output": "function monthName(num) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[num - 1];\n}", "category": "Python"}, {"instruction": "Generate a code using C language to check whether a string is palindrome or not.", "input": "", "output": "#include <stdio.h> \n#include <string.h> \n  \nint check_palindrome(char str[]) \n{ \n    int l = 0; \n    int h = strlen(str) - 1; \n  \n    while (h > l) \n    { \n        if (str[l++] != str[h--]) \n        { \n            return 0; \n        } \n    } \n    return 1; \n}", "category": "Python"}, {"instruction": "Create a shell script to display welcome message.", "input": "", "output": "#!/bin/bash\n# display welcome message\necho \"Welcome to Coding!\"", "category": "Python"}, {"instruction": "Edit the givenjava program to print the count of a specified character.", "input": "public class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    System.out.println(\"Number of s in the given string: \" + str);\n}\n}", "output": "public class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    int count = 0;\n    for (int i=0; i<str.length(); i++) \n    {\n        if (str.charAt(i) == 's') \n        {\n            count++;\n        }\n    }\n    System.out.println(\"Number of s in the given string: \" + count);\n}\n}", "category": "Python"}, {"instruction": "Create a function in Python to find the highest common factor (HCF) of two numbers.", "input": "a = 30 / b = 12", "output": "def hcf(a, b):\n    j = min(a,b)\n    hcf = 1\n    for i in range(2, j+1):\n        if(a%i == 0 and b%i == 0):\n            hcf = i\n    \n    return hcf", "category": "Python"}, {"instruction": "Write a JavaScript function to extract the numbers in the given string.", "input": "\"a1b2c3\"", "output": "function extractNumbers(string) {\n  return string.replace(/\\D/g, '');\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to extract the text from a given HTML element.", "input": "", "output": "function extractText(element) {\n  return element.textContent || element.innerText;\n}", "category": "Python"}, {"instruction": "Write a query to select all artworks whose titles starting with a 'C'.", "input": "", "output": "SELECT * \nFROM artworks\nWHERE title LIKE 'C%';", "category": "Python"}, {"instruction": "Generate a unique key for each item in the given array.", "input": "[\u201ccat\u201d, \u201cdog\u201d, \u201cbird\u201d]", "output": "foreach ($array as $item) {\n    $key = md5($item);\n}", "category": "Python"}, {"instruction": "Make a Perl program to detect whether a given string is numerical.", "input": "", "output": "sub is_numerical {  \n    $input = $_[0];\n    \n    if ($input =~ /^[0-9]+$/) {  \n        return 1;\n    } else {\n        return 0;     \n    }\n}", "category": "Python"}, {"instruction": "Create a JavaScript code to accept a number and check if it is a prime number.", "input": "", "output": "function is_prime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Generate an array of numbers from 0-10 in Python.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a for loop in JavaScript to print out numbers from 0-10.", "input": "", "output": "for (let i = 0; i <= 10; i++) { \n  console.log(i); \n}", "category": "Python"}, {"instruction": "Create a function which takes two lists and outputs all the common elements.", "input": "list1=[2,4,6,8]\nlist2=[1,2,3,4]", "output": "def common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    return list3", "category": "Python"}, {"instruction": "Create a JavaScript program to validate the username entered by the user.", "input": "", "output": "function validateUsername(username) {\n    let rx =\n        new RegExp('^[A-Za-z0-9_]{3,20}$');\n    return rx.test(username);\n}", "category": "Python"}, {"instruction": "Output the ASCII value of a given character.", "input": "A", "output": "print(\"The ASCII value of A is\", ord('A'))", "category": "Python"}, {"instruction": "Write a SQL query to find the oldest customer.", "input": "", "output": "SELECT *\nFROM customers\nORDER BY date_of_birth ASC\nLIMIT 1", "category": "Python"}, {"instruction": "You need to make a function which takes two integers, a and b and prints out their sum.", "input": "", "output": "def add_numbers(a, b):\n    print(a + b)", "category": "Python"}, {"instruction": "Write a JavaScript program to calculate the sum of the first 10 even numbers.", "input": "", "output": "let sum = 0;\nfor (let i = 0; i <= 10; i += 2) {\n   sum += i;\n}\nconsole.log(sum);", "category": "Python"}, {"instruction": "Output the ASCII character corresponding to the decimal value 65.", "input": "", "output": "print(\"The ASCII character for decimal 65 is\",chr(65))", "category": "Python"}, {"instruction": "Create a PHP array for the given strings.", "input": "\"apple\", \"banana\", \"cherry\"", "output": "$fruits = array(\"apple\", \"banana\", \"cherry\");", "category": "Python"}, {"instruction": "Output the multiplication table of 5.", "input": "", "output": "print(\"Multiplication Table of 5\")\nfor i in range(1,11):\n    print(\"5 *\",i,\"=\",5 * i)", "category": "Python"}, {"instruction": "Write a SQL query to find all the customers whose order total is greater than 1000.", "input": "", "output": "SELECT *\nFROM customers\nWHERE (SELECT SUM(amount) from orders WHERE orders.customer_id = customers.id) > 1000", "category": "Python"}, {"instruction": "Create a function in Python to multiply two matrices.", "input": "matrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]]", "output": "def multiplyMatrix(A, B):\n    rowsA = len(A)\n    columnsA = len(A[0])\n    rowsB = len(B)\n    columnsB = len(B[0])\n    \n    if columnsA != rowsB:\n        print(\"Cannot multiply\")\n        return\n    \n    result = [[0 for row in range(columnsB)] for col in range(rowsA)]\n    \n    # Compute matrix multiplication\n    for i in range(rowsA):\n        for j in range(columnsB):\n            for k in range(columnsA):\n                result[i][j] += A[i][k] * B[k][j]\n    \n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\n print(\"Result:\")\n result = multiplyMatrix(A, B) \n  \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Write a SQL query to return the first name, last name and salary of employees from a database with the given conditions", "input": "Table Name = Employees, Salary > 50000", "output": "SELECT firstName, lastName, salary FROM Employees WHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a class in C++ to compare two dates.", "input": "First Date = 10/10/2020, Second Date = 10/11/2020", "output": "#include <iostream>\nusing namespace std;\n\n// Class to compare two dates \nclass CompareDates \n{ \n    int fMonth, fDate, fYear; \n    int sMonth, sDate, sYear; \n  \npublic: \n    CompareDates(int fMonth, int fDate, int fYear, \n                 int sMonth, int sDate, int sYear); \n    int compare()const;\n};\n\nCompareDates::CompareDates(int fMonth, int fDate, int fYear, \n                           int sMonth, int sDate, int sYear)\n{\n    this->fMonth = fMonth;\n    this->fDate = fDate;\n    this->fYear = fYear;\n    this->sMonth = sMonth;\n    this->sDate = sDate;\n    this->sYear = sYear;\n}\n  \n// Compare two dates \nint CompareDates::compare()const\n{ \n    if (fYear != sYear) \n        return (fYear > sYear)? 1: -1; \n  \n    if (fMonth != sMonth)\n        return (fMonth > sMonth)? 1: -1; \n  \n    if (fDate != sDate)\n        return (fDate > sDate)? 1: -1; \n  \n    return 0; \n} \n\n// driver function\nint main() \n{ \n    CompareDates d1(10, 10, 2020, 10, 11, 2020); \n    int result = d1.compare();\n    if (result == 1) \n        cout << \"The date is later\" << endl; \n    else if (result == -1) \n        cout << \"The date is earlier\" << endl; \n    else\n        cout << \"The two dates are same\" << endl; \n    return 0; \n}", "category": "Python"}, {"instruction": "Generate a random number between 0-100 in Python.", "input": "", "output": "import random \n  \n#Generate a random number between 0-100\nrandomNum =  random.randint(0, 100) \nprint (\"Random number:\", randomNum)", "category": "Python"}, {"instruction": "Create a while loop in C++ to iterate through the numbers from 0-10.", "input": "", "output": "int i = 0;\n\nwhile (i <= 10) \n{\n    std::cout << i;\n    i++;  \n}", "category": "Python"}, {"instruction": "Create an object in JavaScript with properties name, age, and location.", "input": "Name = Sam, Age = 30, Location = New York", "output": "let person = {\n  name: \"Sam\",\n  age: 30,\n  location: \"New York\"\n};", "category": "Python"}, {"instruction": "Debug the following program so that it prints the correct output", "input": "x = [5, 4, 3, 2, 1]\nfor i in x\n    print(i)", "output": "x=[5,4,3,2,1]\nfor i in x:\n    print(i)", "category": "Python"}, {"instruction": "How would you make the following function more efficient?", "input": "def find_longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "output": "def find_longest_word(words):\n    longest_word = words[0]\n    for word in words[1:]:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Write a JavaScript ternary operator to add 10 if a number is even else subtract 10 from it.", "input": "x = 8", "output": "(x % 2 == 0) ? x + 10 : x - 10;", "category": "Python"}, {"instruction": "Convert the following if-else scenerio into switch statements.", "input": "if (x == 1) {\n    y = 10;\n} else if (x == 2) {\n    y = 20;\n} else if (x == 3) {\n    y = 30;\n}", "output": "switch (x) {\n  case 1:\n    y = 10;\n    break;\n  case 2:\n    y = 20;\n    break;\n  case 3: \n    y = 30;\n    break;\n  default:\n    // no default required\n}", "category": "Python"}, {"instruction": "Update the HTML code below to add a chrome frame.", "input": "<head>\n  <title>My website</title>\n  \n</head>", "output": "<head>\n  <title>My website</title>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE-edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <!--[if IE]>\n  <script src=\"path/to/chrome_frame.js\"></script>\n  <![endif]-->\n  \n</head>", "category": "Python"}, {"instruction": "Create an assembler program to count the number of vowels in a given string.", "input": "", "output": "section .data\n\nstr: db \"Hello World\", 0\nlen: equ $-str\n\nvowels db 0\n\nsection .text\n\nglobal main\n\nmain:\n    mov edx, len\n    mov esi, str\n    \n    xor eax, eax\n    xor ebx, ebx\n\nwhile_check:\n   cmp ebx, edx \n    je result_print\n    \n    mov al, [esi + ebx]\n    inc ebx\n    cmp al, 'a'\n    je increment_vowel\n    cmp al, 'e'\n    je increment_vowel\n    cmp al, 'i'\n    je increment_vowel\n    cmp al, 'o'\n    je increment_vowel\n    cmp al, 'u'\n    je increment_vowel\n    jmp while_check\n\nincrement_vowel:\n    inc [vowels]\n    jmp while_check\n\nresult_print:\n    mov edx, [vowels]\n    mov eax, 4\n    mov ebx, 1\n    int 80h\n\nmov eax, 1\nmov ebx, 0\nint 80h", "category": "Python"}, {"instruction": "Write a C# program to calculate the area of a triangle.", "input": "", "output": "using System;\n \npublic class Program\n{\n    public static double AreaOfTriangle(double b, double h)  \n    {  \n        double area = (b * h) / 2;  \n        return area;  \n    }  \n      \n    public static void Main(string[] args)  \n    {  \n        double b = 10.0;  \n        double h = 12.0;  \n          \n        Console.WriteLine(AreaOfTriangle(b, h));  \n    }  \n}", "category": "Python"}, {"instruction": "Write an SQL statement to display all the records from the 'Cars' table.", "input": "", "output": "SELECT * FROM Cars;", "category": "Python"}, {"instruction": "Create a Ruby program to get the length of a given string.", "input": "", "output": "def get_length(str)\n  return str.length\nend\n\nputs get_length(\"Hello World\")", "category": "Python"}, {"instruction": "Compute the maximum of the following integers using Java.", "input": "[6, 3, 8, 4, 7]", "output": "public static int findMax(int[] arr){\n    int max = arr[0];\n    for(int i = 1; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the average population of a city.", "input": "Table \"Cities\":\ncity_name | population\n--------------------------\nNew_York  | 8000000\nLondon     | 9000000\nBerlin    | 700000", "output": "SELECT AVG(population) FROM Cities;", "category": "Python"}, {"instruction": "Modify the C++ program below to print the average value of an array.", "input": "int array[4] = {2, 3, 5, 7};", "output": "#include <iostream> \n \nint main() \n{ \n    int array[4] = {2, 3, 5, 7}; \n    int sum = 0; \n    for(int i = 0; i < 4; i++)\n    {\n        sum += array[i];\n    }\n    double avg = (double)sum / 4;\n    std::cout << \"Average value of array : \" <<  avg; \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a database table with the following fields: id, name, age", "input": "", "output": "CREATE TABLE TABLE_NAME (\n    id INT(11) NOT NULL AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    age INT(11) NOT NULL,\n    PRIMARY KEY(id)\n);", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the names and addresses of customers from the \"customer\" table who live in the same city as the customer with ID 3.", "input": "", "output": "SELECT name, address \nFROM customers \nWHERE city = (SELECT city \n               FROM customers \n               WHERE id = 3);", "category": "Python"}, {"instruction": "Create a JavaScript function to simulate a dice roll with a random number generator?", "input": "", "output": "function rollDice() {\n  let max = 6;\n  let min = 1;\n  let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n  return randomNumber;\n}", "category": "Python"}, {"instruction": "Write a Python program to check if a given number is divisible by 5 and 11 or not?", "input": "", "output": "def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0: \n        print(\"It is divisible by 5 and 11.\")\n    else: \n        print(\"It is not divisible by 5 and 11.\")\n     \n# Driver code \nn = 55\ncheckDivisibility(n)", "category": "Python"}, {"instruction": "Modify the following code to turn it into an Insertion Sort algorithm.", "input": "def sort_numbers(arr):\n    pass", "output": "def insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr", "category": "Python"}, {"instruction": "Create a SQL query to return the names of all customers sorted in descending order by their balance?", "input": "", "output": "SELECT name \nFROM customers \nORDER BY balance DESC;", "category": "Python"}, {"instruction": "Modify the following code so that it returns the lowest common multiple of two given numbers?", "input": "def lowest_common_multiple(x, y):\n    pass", "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm", "category": "Python"}, {"instruction": "Replace the following code with its equivalent Ternary Expressions", "input": "if (x > 0):\n    result = \"positive\"\nelse:\n    result = \"negative\"", "output": "result = \"positive\" if (x > 0) else \"negative\"", "category": "Python"}, {"instruction": "Find the time complexity for the folllowing function.", "input": "def myFunc(n):\n    product = 1\n    for i in range(2, n+1):\n        product *= i\n    return product", "output": "O(n)", "category": "Python"}, {"instruction": "Rewrite the following code in the form of list comprehension.", "input": "names = [\"Max\",\"John\",\"Monica\",\"Harry\",\"Steve\"]\nupper_names = []\nfor name in names:\n    upper_names.append(name.upper())", "output": "upper_names = [name.upper() for name in names]", "category": "Python"}, {"instruction": "Rewrite the following code to use a dictionary comprehension.", "input": "names = [\"Max\",\"John\",\"Monica\",\"Harry\",\"Steve\"]\nname_lengths = {}\nfor name in names:\n    name_lengths[name] = len(name)", "output": "name_lengths = {name: len(name) for name in names}", "category": "Python"}, {"instruction": "Write a C# expression to check if a given number is divisible by 7.", "input": "x = 16", "output": "x % 7 == 0", "category": "Python"}, {"instruction": "Write a function to perform regex match in Python.", "input": "", "output": "def regex_match(string, pattern):\n  return re.match(pattern, string)", "category": "Python"}, {"instruction": "Create a MongoDB query to find all documents where \"sale_price\" is greater than 10.", "input": "", "output": "db.collection.find({ \"sale_price\": { \"$gt\": 10 } })", "category": "Python"}, {"instruction": "Create a MySQL query to display all the distinct items from the table \"Orders\".", "input": "", "output": "SELECT DISTINCT item \nFROM orders", "category": "Python"}, {"instruction": "Evaluate the sum of two numbers using a JavaScript expression.", "input": "x = 3;\ny = 5;", "output": "x + y", "category": "Python"}, {"instruction": "Write a query to display the first three rows from the table \"employees\".", "input": "", "output": "SELECT * \nFROM employees \nLIMIT 3", "category": "Python"}, {"instruction": "Write a JavaScript function to format a number to a specific number of decimal places.", "input": "3.14159\n2 decimal places", "output": "function formatNumber(num, decimalPlaces){\n   var result = num.toFixed(decimalPlaces);\n   return result;\n}\n\nconsole.log(formatNumber(3.14159, 2));\n\n# 3.14", "category": "Python"}, {"instruction": "Create a HTML list using the given numbers.", "input": "[3, 12, 13]", "output": "<ul>\n  <li>3</li>\n  <li>12</li>\n  <li>13</li>\n</ul>", "category": "Python"}, {"instruction": "Create a new array after doubling the value of all numbers in the given array.", "input": "[1,3,5,2,7,9]", "output": "double_arr = [a*2 for a in arr] \nprint(double_arr)\n\n# [2, 6, 10, 4, 14, 18]", "category": "Python"}, {"instruction": "Merge the two given arrays and remove duplicates.", "input": "[1,3,4,2,9,4]\n[2,10,7,9,8]", "output": "merged_arr = list(set(arr1+arr2))\nprint(merged_arr)\n\n# [1, 2, 3, 4, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Replace 'x' with the correct input from an API request.", "input": "Url: https://exampleAPI.com/user?id=2\nResponse: {\n    \"name\": \"John Doe\",\n    \"age\": 50\n}", "output": "name = response['name']\nage = response['age']\nprint(\"Name: \"+name+\", Age: \"+str(x))\n\n# Name: John Doe, Age: 50", "category": "Python"}, {"instruction": "Create a Chrome extension that highlights hyperlinks in green.", "input": "", "output": "// Create a new class to extend Google's Chrome Extension\nclass LinkHighlighter extends Chrome Extension {\n\n// Initialize Manifest.json\n\tmanifest: {\n\t\"name\": \"Link Highlighter\",\n\t\"author\": \"Your Name Here\",\n\t\"version\" : \"1.0\",\n    \"description\" : \"Highlights all hyperlinks in green.\",\n\t\"browser_action\": {\n\t\t\"default_title\": \"Link Highlighter\"\n\t}\n}\n\n// Use 'onStartup()' to set rules for all hyperlinks\nonStartup() {\n\tbrowser.webNavigation.onCommitted.addRules([\n\t  {\n\t\tconditions: [\n\t\t  new browser.webNavigation.PageStateMatcher({\n\t\t\tpageUrl: {urlContains: 'http://'},\n\t\t  })\n\t\t],\n\t\tactions: [ new browser.declarativeContent.ShowPageAction() ]\n\t  }\n\t]);\n}\n\n// Create the engine to inject a CSS into the page\n  injectCSS() {\n\tvar headElmts = document.getElementsByTagName(\"head\");\n\tvar styleElmt;\n\tif (headElmts.length) {\n\t  styleElmt = document.createElement(\"style\");\n\t  headElmts[0].appendChild(styleElmt);\n\t}\n\t\n\t// Include the CSS to style the link.\n\tstyleElmt.innerHTML  = 'a { color : green !important; }';\n  }\n  \n  // Execute the engine to inject the CSS\n  injectCSS();\n\n}", "category": "Python"}, {"instruction": "Write a function to search for an element within a linked list.", "input": "", "output": "def search(head, target): \n    curr = head\n    while (curr!= None): \n        if (curr.data == target): \n            return curr.data \n        curr = curr.next\n    return -1", "category": "Python"}, {"instruction": "Update the following code, to use Python's modern type hint annotation.", "input": "def my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "output": "def my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "category": "Python"}, {"instruction": "Translate the following word problem into Python code.", "input": "Gary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.", "output": "gary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\n\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))", "category": "Python"}, {"instruction": "Write a function to create a frequency table from a list of integers.", "input": "list = [1, 2, 3, 1, 4, 5, 5, 2]", "output": "def create_freq_table(lst): \n    freq_table = {} \n    for item in lst: \n        if (item in freq_table): \n            freq_table[item] += 1\n        else: \n            freq_table[item] = 1\n  \n    return freq_table", "category": "Python"}, {"instruction": "Generate a random string of 5 characters containing a-z and 0-9.", "input": "", "output": "import string \nimport random\n  \n# Get all ASCII uppercase letters\nstring_all = string.ascii_letters + string.digits\n  \n# Get random 5 upper case letters\nrandom_string = ''.join(random.choice(string_all) for i in range(5))\nprint(random_string)\n\n# Ex: ZV7b1", "category": "Python"}, {"instruction": "Create a function that takes a string and displays it twice in the output.", "input": "Hello World", "output": "def double_string(string):\n    return string * 2\n\nprint(double_string(\"Hello World\"))", "category": "Python"}, {"instruction": "According to the following code, how is an object of type \u201cPoint\u201d instantiated?", "input": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "output": "An object of type \"Point\" is instantiated by calling the __init__() method, with arguments for the x and y coordinates, e.g. Point(1,2) to create an instance with x=1 and y=2.", "category": "Python"}, {"instruction": "Convert the following list of strings to a dictionary whose keys are numbers and whose values are strings.", "input": "list1 = [\"One\", \"Two\", \"Three\"]", "output": "dict1 = {} \nfor i, s in enumerate(list1): \n    dict1[i+1] = s \n\nInput:\nlist1 = [\"One\", \"Two\", \"Three\"]\n\nOutput:\ndict1 = {1: \"One\", 2: \"Two\", 3: \"Three\"}", "category": "Python"}, {"instruction": "Design an algorithm to sort an array using Quick Sort.", "input": "Array: [5, 3, 6, 2, 1, 4]", "output": "def quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\n\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\n\nOutput: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Design a program to find the longest palindrome inside a given string.", "input": "String: \"abcaaacbcb\"", "output": "def longestPalindrome(string):\n # set up the N^2 matrix to store the boolean\n # values of the characters that are palindromes\n n = len(string)\n matrix = [[False for i in range(n)] for j in range(n)]\n\n max_length = 1\n start = 0\n\n # Every single character is a palindrome of length 1\n for i in range(n):\n  matrix[i][i] = True\n\n # Check for substrings of length 2\n for i in range(n - 1):\n  if string[i] == string[i + 1]:\n   matrix[i][i + 1] = True\n   start = i\n   max_length = 2\n\n # Check for substrings of length 3 and more\n for substring_length in range(3, n + 1):\n  for i in range(n - substring_length + 1):\n   end = i + substring_length - 1\n   if matrix[i + 1][end - 1] and string[i] == string[end]:\n    matrix[i][end] = True\n \n    if substring_length > max_length:\n     start = i\n     max_length = substring_length\n \n print(\"Longest palindrome substring is:\", \n\tstring[start:start + max_length])\n\nlongestPalindrome(\"abcaaacbcb\")\n\nOutput: Longest palindrome substring is: aaacbcaaa", "category": "Python"}, {"instruction": "Construct an algorithm to search for the Given Normalised Word in a Normalised Trie.", "input": "Normalised Trie:\nroot \n|\ns -- a - l -- u -- t\n|\ns -- e - l -- e -- c\nGiven Normalised Word: sault", "output": "def searchWord(node, word):\n if len(word) == 0:\n  return True\n  \n # Check if the character at first position is in the children of the current node\n if word[0] in node.children:\n  # Get the node of the character at first position\n  nextNode = node.children[word[0]]\n  \n  # Check if the rest of the string is present in the \n  # remaining children of the current node\n  return searchWord(nextNode, word[1:])\n # If the character is not found\n else:\n  return False\n  \n# Function to normalize the word\ndef normalize(word):\n # If the word contains only lower case letters\n if word.islower():\n  return word\n \n word = word.lower()\n return word\n \n# Main program\ntrie = Trie() \ntrie.add(\"sault\")\n\n# The word to be searched\nword = \"sault\"\n\n# Normalize the word\nword = normalize(word)\n\n# Search the normalized word in the trie\nif searchWord(trie.root, word):\n print(\"Found!\")\nelse:\n print(\"Not Found!\")\n\nOutput: Found!", "category": "Python"}, {"instruction": "Create a function to remove specified nodes from a linked list.", "input": "Linked List:\n10 -> 21 -> 14 -> 35 -> 19 -> 63 -> null\nNode: 14", "output": "def deleteNode(head, node):\n prev = None\n current = head\n # traverse the list until node is found\n while current is not None:\n  if current.data == node:\n  break\n  prev = current\n  current = current.next\n # if the node is the first node\n if prev is None:\n  head = current.next\n else:\n prev.next = current.next\n return head\n\nhead = {\n data: 10,\n next : { \n  data: 21, \n  next: { \n   data: 14, \n   next: { \n    data: 35, \n    next: { \n     data: 19, \n     next: { \n      data: 63, \n      next: None\n     } \n   }\n }\n}\n}\n\nprint(deleteNode(head, 14)) \n\nOutput:\ndata: 10,\nnext : { \n  data: 21, \n  next: { \n   data: 35, \n   next: { \n    data: 19, \n    next: { \n     data: 63, \n     next: None\n    } \n  }\n}\n}", "category": "Python"}, {"instruction": "Construct a C program to print all permutations of a given string.", "input": "", "output": "#include<stdio.h>\n#include<string.h>\n \n//Function to print all the permutations of the given string\nvoid printPermutations(char *str, int l, int r) {\n   \n    if (l == r)\n      printf(\"%s\\n\", str);\n    else\n    {\n        for (int i = l; i <= r; i++)\n        {\n            //swap the characters at positions l and i\n            char temp = str[l];\n            str[l] = str[i];\n            str[i] = temp;\n \n            //Recursively call the function to generate all permutations\n            printPermutations(str, l+1, r);\n \n            //Again swap the characters to their original positions\n            temp = str[l];\n            str[l] = str[i];\n            str[i] = temp; \n        } \n    }\n}\n \n//Main program\nint main()\n{\n   char str[] = \u201cABC\u201d;\n   \n   int n = strlen(str);\n   printPermutations(str, 0, n-1);\n   \n   return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the elements from the table whose ID is not present in the given python list.", "input": "Table: 'products'\nColumns: 'id', 'name', 'category', 'price'\nPython List: [2, 3, 8]", "output": "SELECT * FROM products WHERE id NOT IN (2,3,8);", "category": "Python"}, {"instruction": "Find the calculations of the time complexity of the following coded snippet.", "input": "for (i = 0; i < n; i++) {\n for (j = 0; j < n; j++) {\n  console.log(i, j);\n }\n}", "output": "The time complexity calculation of the following snippet is O(n\u00b2).", "category": "Python"}, {"instruction": "Correct the syntax errors in the following JavaScript snippet.", "input": "let outpt;\nif(val == 1)\n outpt = 1;\nelse\n outpt = 2;", "output": "let output;\nif(val == 1) {\n output = 1;\n} else {\n output = 2;\n}", "category": "Python"}, {"instruction": "Implement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's\nalgorithm.", "input": "The two-dimensional array:\n[[1, 8, 3],\n [4, 5, 6],\n [9, 5, 0]]\nStart point: [0, 0]\nEnd point: [2, 2]", "output": "# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")", "category": "Python"}, {"instruction": "Generate a function to convert seconds to time format in JavaScript.", "input": "", "output": "function convertSecondsToTime(seconds) {\n const hours = Math.floor(seconds / 3600);\n const minutes = Math.floor((seconds % 3600) / 60);\n const seconds = seconds % 60;\n return { hours, minutes, seconds };\n}", "category": "Python"}, {"instruction": "Write a code to detect the data type of a given variable.", "input": "var = 10", "output": "let var = 10;\nconsole.log(typeof var);", "category": "Python"}, {"instruction": "Write a nod.js code to return the current system time.", "input": "", "output": "let currentTime = new Date().toLocaleTimeString();\nconsole.log(currentTime);", "category": "Python"}, {"instruction": "Write a code snippet for sorting an array of integers.", "input": "arr = [12,9,7,8,6]", "output": "arr = [12,9,7,8,6];\narr.sort(function(a, b){return a - b});\nconsole.log(arr);", "category": "Python"}, {"instruction": "Write a Python code to open a web page and print its content.", "input": "url = \"www.wikipedia.org\"", "output": "import requests\n\nurl = \"www.wikipedia.org\"\n\ntry:\n    response = requests.get(url)\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\n\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))", "category": "Python"}, {"instruction": "Implement a class that stores values of all data types.", "input": "", "output": "class DataStorage {\n  constructor() {\n    this.storage = {};\n  }\n\n  setData(key, value) {\n    this.storage[key] = value;\n  }\n\n  getData(key) {\n    return this.storage[key];\n  }\n}", "category": "Python"}, {"instruction": "Compute the maximum sum of elements of a given subarray of length k in an array of integers.", "input": "arr = [22, 4, 65, -12, 8, 99, 103], k = 2", "output": "def find_max_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum", "category": "Python"}, {"instruction": "Create a HTML page displaying a table with the following values", "input": "[{name: 'John', age: 25, country: 'US'}, \n{name: 'Jane', age: 32, country: 'Canada'},\n{name: 'David', age: 28, country: 'Mexico'}]", "output": "<html>\n<head>\n<title>Table</title>\n</head>\n \n<body>\n \n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Country</th>\n            </tr>\n        </thead>\n \n        <tbody>\n            <tr>                                                            \n                <td>John</td>\n                <td>25</td>\n                <td>US</td>\n            </tr>   \n            <tr>\n                <td>Jane</td>\n                <td>32</td>\n                <td>Canada</td>\n            </tr>\n            <tr>\n                <td>David</td>\n                <td>28</td>\n                <td>Mexico</td>\n            </tr>\n        </tbody>\n    </table>\n \n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Java program to convert an array of integers into an integer.", "input": "[1,2,3,4]", "output": "public static int convertToInt(int[] arr) {\n    int result = 0;\n    for (int i=0; i<arr.length; i++) {\n        result += arr[i]*Math.pow(10, arr.length-1-i);\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Add functionality to a given Python class to retrieve a book ISBN by its title.", "input": "", "output": "class Book:\n    def __init__(self, title, isbn):\n        self.title = title\n        self.isbn = isbn\n        \n    def get_ISBN_by_title(self, title):\n        if self.title == title:\n            return self.isbn\n        else:\n            return None", "category": "Python"}, {"instruction": "Create a JSON string containing the data below", "input": "user_id: 12345, name: John Doe, age: 41", "output": "{\"user_id\": 12345, \"name\": \"John Doe\", \"age\": 41}", "category": "Python"}, {"instruction": "Create a MySQL query to find the name of all users in a table named \"users\".", "input": "", "output": "SELECT name FROM users;", "category": "Python"}, {"instruction": "Create a function to extract the top 10 keywords from a given text.", "input": "text = \"This is some text that I am using to test the extractKeywords function.\"", "output": "import nltk\n\ndef extractKeywords(text):\n    tokens = nltk.word_tokenize(text)\n    tags = nltk.pos_tag(tokens)\n    keywords = [word for word,pos in tags \n            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    freqs = nltk.FreqDist(keywords)\n    top_ten = freqs.most_common(10)\n    return top_ten\n \nif __name__ == \"__main__\": \n    text = \"This is some text that I am using to test the extractKeywords function.\"\n    top_ten = extractKeywords(text)\n    print(top_ten)", "category": "Python"}, {"instruction": "Write a function to measure the similarity between two strings.", "input": "", "output": "def similarity(string1, string2):\n    common_chars = set(string1).intersection(string2)\n    return len(common_chars) / (len(string1) + len(string2) - len(common_chars))\n\nif __name__ == \"__main__\":\n    string1 = \"test\"\n    string2 = \"testimony\"\n    sim = similarity(string1, string2)\n    print(sim)", "category": "Python"}, {"instruction": "Write a code to count repeated words in a given sentence.", "input": "\"This is a sentence. This is a test sentence.\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    counts = dict()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence. This is a test sentence.\"\n    word_counts = count_words(sentence)\n    print(word_counts)", "category": "Python"}, {"instruction": "Write a code to convert an integer to a float in Python.", "input": "", "output": "# Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))", "category": "Python"}, {"instruction": "Compare two JSON objects in Python.", "input": "first_obj = {\n    'name': 'John',\n    'age': 30\n}\nsecond_obj = {\n    'name': 'John',\n    'age': 34\n}", "output": "import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))", "category": "Python"}, {"instruction": "Determine whether the given string is a valid IPv4 address", "input": "ip_address = \"192. 426.4.4\"", "output": "No, the string is not a valid IPv4 address.", "category": "Python"}, {"instruction": "Write a SQL statement to find employees whose salary is greater than a given threshold.", "input": "salary_threshold = 60000", "output": "SELECT * FROM employees WHERE salary > 60000;", "category": "Python"}, {"instruction": "Write a regex expression to extract any URL from a string.", "input": "", "output": "(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})", "category": "Python"}, {"instruction": "Translate this code snippet into a pseudocode.", "input": "for x in range(3, 10):\n    print(x)", "output": "for x from 3 to 10\n    print x", "category": "Python"}, {"instruction": "Generate an HTTP request to delete a customer account.", "input": "customer_id = 3", "output": "DELETE /customers/3 HTTP/1.1\nHost: example.com\nContent-Type: application/json\nAuthorization: Bearer <Access Token>", "category": "Python"}, {"instruction": "Recreate the following code using Java.", "input": "def get_person(name):\n    person = {\"name\":name}\n    return person", "output": "public class Person{\n    public String name;\n    public Person(String name){\n        this.name = name;\n    }\n    \n    public static Person getPerson(String name){\n        Person person = new Person(name);\n        return person;\n    }\n}", "category": "Python"}, {"instruction": "Implement a function in Python that takes an array of numbers and returns the index of the maximum element.", "input": "[4,7,9,2,10]", "output": "def find_index_max(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[max_index] < arr[i]:\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Write a function in Python to convert a given decimal number into its binary form.", "input": "", "output": "def decimal_to_binary(num):\n    binary = []\n\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary", "category": "Python"}, {"instruction": "Write a SQL query to find out the total number of books purchased by each customer in a book store.", "input": "", "output": "SELECT custid, COUNT(*) AS 'Number of Purchases'\nFROM orders\nGROUP BY custid;", "category": "Python"}, {"instruction": "Create an API call in Python to search for a movie by title.", "input": "", "output": "import requests\n\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response", "category": "Python"}, {"instruction": "Delete redundant if-else statements from the following code.", "input": "if x < 0:\n    result = 0\nelif x == 0:\n    result = 0\nelif x == 1:\n    result = 1\nelse:\n    result = 2", "output": "if x < 0:\n    result = 0\nelif x in [0, 1]:\n    result = x\nelse:\n    result = 2", "category": "Python"}, {"instruction": "Create a function that checks whether two strings are anagrams of each other.", "input": "str1 = \"cinema\"\nstr2 = \"iceman\"", "output": "function isAnagram(str1, str2) { \n  \n   let arr1 = [...str1].sort(); \n   let arr2 = [...str2].sort(); \n  \n   return (arr1.length == arr2.length && \n           arr1.every((v,i)=> v === arr2[i])) ? true : false; \n }", "category": "Python"}, {"instruction": "Edit the following code to print out the nth Fibonacci number.", "input": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of the Triangle Series up to the given number n.", "input": "", "output": "def sum_triangle(n): \n    if n<=0: \n        return 0\n    res = (n * (n + 1)) // 2\n    return res", "category": "Python"}, {"instruction": "Create a function to print all permutations of a string without duplicates.", "input": "string = \"abc\"", "output": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}", "category": "Python"}, {"instruction": "Write a function to print the maximum and minimum number in a given list.", "input": "my_list = [5, 4, 7, 1, 2]", "output": "def print_extremes(my_list):\n    print(\"Maximum:\", max(my_list))\n    print(\"Minimum:\", min(my_list))\n\n# Output\nMaximum: 7\nMinimum: 1", "category": "Python"}, {"instruction": "Create a program to create a dictionary with words and their frequencies from a given sentence.", "input": "sentence = \"Python is an easy, powerful language with a simple syntax and high readability\"", "output": "def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}", "category": "Python"}, {"instruction": "Implement a function to replace every occurrence of an old string in a given string with a new string.", "input": "text = \u201cThe quick brown fox jumps over the lazy dog\u201d\nold = \u201cdog\u201d\nnew = \u201ccat\u201d", "output": "def replace_string(text, old, new):\n    return text.replace(old, new)\n\n# Output\nThe quick brown fox jumps over the lazy cat", "category": "Python"}, {"instruction": "Calculate the maximum product of two numbers in a list.", "input": "[4, -2, 3, -1]", "output": "max_product = 4 * -2 = -8", "category": "Python"}, {"instruction": "Convert the following csv data into a JSON object.", "input": "id,name,age\n1,John,12\n2,Jack,15", "output": "import json\n\ncsv_data = '''id,name,age\n1,John,12\n2,Jack,15'''\n\n# Split the CSV data into individual lists.\ncsv_rows = [row.strip().split(',') for row in csv_data.split('\\n')]\n# Create a dictionary from the list of values.\ndata_objects = [dict(zip(csv_rows[0], row)) for row in csv_rows[1:]]\n# Convert the dictionary to a JSON object.\njson_data = json.dumps(data_objects)\nprint(json_data)", "category": "Python"}, {"instruction": "Create a function called ' say_hello' that prints \"Hello World!\" when invoked.", "input": "", "output": "def say_hello():\n    print(\"Hello World!\")", "category": "Python"}, {"instruction": "Create an object of class 'Car' that has a color property of 'red'.", "input": "", "output": "car = Car(color='red')", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to toggle a div's visibility.", "input": "", "output": "const toggleDiv = () => {\n    const div = document.querySelector('.div');\n    if (div.style.display === 'none') {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}", "category": "Python"}, {"instruction": "Write a for loop to print each letter of a string.", "input": "string_example = \"GPT\"", "output": "for letter in string_example:\n    print(letter)", "category": "Python"}, {"instruction": "How would you sort the following list of strings in alphabetical order?", "input": "list1 = [\"Ruby\", \"Python\", \"JavaScript\"]", "output": "def sort_list(list1): \n    return sorted(list1) \n\nInput:\nlist1 = [\"Ruby\", \"Python\", \"JavaScript\"]\n\nOutput:\n[\"JavaScript\", \"Python\", \"Ruby\"]", "category": "Python"}, {"instruction": "Calculate the sum of all odd numbers from 1 to 10.", "input": "", "output": "25", "category": "Python"}, {"instruction": "Classify the following statement as either a string or a number.", "input": "\"42\"", "output": "String", "category": "Python"}, {"instruction": "Clean up the following code so it follows PEP-8 guidelines.", "input": "def sumofSeven(x,y): return x+y+7", "output": "def sumofSeven(x, y): \n    return x + y + 7", "category": "Python"}, {"instruction": "Create a list comprehension to generate the first 10 Fibonacci numbers.", "input": "", "output": "fibonacci_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nfirst_10_fibonacci = [fibonacci_numbers[i] for i in range(10)]", "category": "Python"}, {"instruction": "Write an SQL query to retrieve the names of all the people in the Users table who are over the age of 25.", "input": "", "output": "SELECT Name\nFROM Users\nWHERE age > 25", "category": "Python"}, {"instruction": "Write an HTML code snippet for creating a <button> element with the text \"Click me!\"", "input": "", "output": "<button>Click me!</button>", "category": "Python"}, {"instruction": "Create a class in Python for representing a 2-dimensional point.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Create an SQL query that selects the names of all employees from the accounting department.", "input": "", "output": "SELECT employee_name\nFROM employees\nWHERE department = 'Accounting';", "category": "Python"}, {"instruction": "Create an SQL query to select the names of employees with a salary greater than $50,000", "input": "", "output": "SELECT employee_name\nFROM employees\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a function that reverses the elements of a given array", "input": "", "output": "def reverse_array(array):\n return array[::-1]", "category": "Python"}, {"instruction": "Given a string s and a character c, create a new string with all the occurrences of c in s removed.", "input": "s = 'caat'\nc = 'a'", "output": "new_string = \"\"\nfor char in s:\n if char != c:\n  new_string += char\nprint(new_string)", "category": "Python"}, {"instruction": "Write a function that sums the elements of an array", "input": "", "output": "def array_sum(array):\n res = 0\n for el in array:\n  res += el\n return res", "category": "Python"}, {"instruction": "Find any two numbers in an array such that their sum is equal to a given value.", "input": "array = [3, 4, 5, 6, 7, 8]\nvalue = 11", "output": "for i in range(len(array)):\n for j in range(i+1, len(array)):\n  if array[i] + array[j] == value:\n   print(array[i], array[j])", "category": "Python"}, {"instruction": "Create a function in C++ that capitalizes the first letter of every word in a given string.", "input": "", "output": "#include <iostream>\n#include <string>\n\nstd::string capitalize(std::string s)\n{\n std::string result;\n for (int i = 0; i < s.length(); i++) {\n if (i == 0 || s[i - 1] == ' ')\n result += toupper(s[i]);\n else\n result += s[i];\n }\n return result;\n}", "category": "Python"}, {"instruction": "Calculate the total number of possible binary trees with n nodes.", "input": "", "output": "def numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num", "category": "Python"}, {"instruction": "Create an SQL query that lists the employee names with their corresponding department and salary.", "input": "", "output": "SELECT employee_name, department, salary\nFROM employees;", "category": "Python"}, {"instruction": "Given a string s and a character c, write a Python program to count the number of occurrences of c in s.", "input": "s = 'apple'\nc = 'p'", "output": "count = 0 \nfor char in s:\n if char == c:\n count += 1\nprint(count)", "category": "Python"}, {"instruction": "Create an array which contains the squares of the numbers 0 to 10.", "input": "", "output": "squares = [i*i for i in range(11)]", "category": "Python"}, {"instruction": "Create an array in Python containing the cube of all the integers from 1 to 10.", "input": "", "output": "import array\nint_array = array.array(\"i\", [i*i*i for i in range(1, 11)])", "category": "Python"}, {"instruction": "Create a function to find the longest common prefix of two strings.", "input": "str1 = \"hello\", str2 = \"helmet\"", "output": "def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp", "category": "Python"}, {"instruction": "Write a SQL query to get the titles and release dates of all the movies from the Movies table released in the year 2019.", "input": "", "output": "SELECT title, release_date \nFROM Movies \nWHERE YEAR(release_date) = 2019", "category": "Python"}, {"instruction": "Write a function to group a list of strings based on the first two characters of each string.", "input": "list = [\"aa12\", \"bd32\", \"ca53\", \"db34\"]", "output": "def group_list(list):\n    grouped = {}\n    for item in list:\n        key = item[:2]\n        if key not in grouped:\n            grouped[ key ] = [item]\n        else:\n            grouped[ key ].append(item)\n    return grouped", "category": "Python"}, {"instruction": "Create a NumPy array with all the elements set to 0.", "input": "", "output": "import numpy as np\narr = np.zeros(shape=(10, 10))", "category": "Python"}, {"instruction": "Create a for loop that prints the numbers 0 to 10 and prints if the number is even or odd.", "input": "", "output": "for i in range(11):\n if i % 2 == 0:\n print(f'{i} is even')\n else:\n print(f'{i} is odd')", "category": "Python"}, {"instruction": "Create a stack data structure using Python.", "input": "", "output": "class Stack: \n  \n    def __init__(self): \n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n  \n    def pop(self): \n        if self.is_empty():\n            return None\n          \n        return self.stack.pop()", "category": "Python"}, {"instruction": "Sort this list of strings alphabetically.", "input": "strings = ['hello', 'world', 'this', 'is', 'a', 'list', 'of', 'strings']", "output": "strings.sort(key=lambda x: x.lower())", "category": "Python"}, {"instruction": "Implement a binary search algorithm using Python.", "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1", "category": "Python"}, {"instruction": "Write a React component that is a simple form with two input fields (name and email).", "input": "", "output": "import React, { Component } from 'react';\n\nclass Form extends Component {\n    render() {\n        return (\n            <form>\n            <label>Name: </label>\n            <input type=\"text\" id=\"name\" /><br />\n\n            <label>Email: </label>\n            <input type=\"text\" id=\"email\" /><br />\n            </form>\n        );\n    }\n}\n\nexport default Form;", "category": "Python"}, {"instruction": "Write a C++ program that displays the ASCII character corresponding to a given numerical character code.", "input": "", "output": "#include <iostream>\n\nint main()\n{\n    int code;\n    \n    std::cout << \"Please enter a character code: \";\n    std::cin >> code;\n    \n    std::cout << \"The corresponding character is: \" << char(code) << std::endl;\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Rearrange the following array of objects so that the output sorted in ascending order by the \"age\" property.", "input": "[{name: 'John Doe', age: 25}, {name: 'Sarah Smith', age: 61}, {name: 'Jane Doe', age: 41}];", "output": "[{name: 'John Doe', age: 25}, {name: 'Jane Doe', age: 41}, {name: 'Sarah Smith', age: 61}];", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes two strings as parameters and returns the concatenation of both strings.", "input": "", "output": "const concatStrings = (string1, string2) => {\n    return string1 + string2;\n}", "category": "Python"}, {"instruction": "Given the following JSON structure, write a JavaScript expression that returns the value of the property \"firstName\".", "input": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 25\n}", "output": "jsonObject.firstName", "category": "Python"}, {"instruction": "Calculate the minimum value of the following set of numbers: 4, -2, 6, 9.", "input": "", "output": "-2", "category": "Python"}, {"instruction": "Construct a SQL query to select all articles where the author is \"John Doe\".", "input": "", "output": "SELECT * FROM articles WHERE author=\"John Doe\";", "category": "Python"}, {"instruction": "Given the following HTML structure, write a CSS selector that selects the h2 tags with class \"green\".", "input": "<div>\n    <h2 class=\"green\">Title A</h2>\n    <h2>Title B</h2>\n    <h2 class=\"green\">Title C</h2>\n</div>", "output": "div h2.green", "category": "Python"}, {"instruction": "Apply a filter to the following array of objects so that the output contains only the elements that have a value greater than 5 and a type string.", "input": "[{type: 'string', value: 3}, {type: 'number', value: 4}, {type: 'number', value: 6}, {type: 'string', value: 8}]", "output": "[{type: 'string', value: 8}]", "category": "Python"}, {"instruction": "Modify the code to return the most repeated character.", "input": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)", "output": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Create a function to sum all the numbers in an array.", "input": "arr = [1, 2, 3, 4]", "output": "def sumList(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(sumList(arr))", "category": "Python"}, {"instruction": "Modify the following code so that the output is 4, 4.", "input": "import math \ndef f(x): \n    return math.sqrt(x) * math.sqrt(x+1)\n  \nprint(f(3))", "output": "import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))", "category": "Python"}, {"instruction": "Create an algorithm to solve the Tower of Hanoi problem.", "input": "", "output": "def TowerOfHanoi(n , from_rod, to_rod, aux_rod): \n    if n == 1: \n        print (\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print (\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)", "category": "Python"}, {"instruction": "List 3 prominent reasons to choose Reactjs as a web development library.", "input": "", "output": "1. React is fast - thanks to its virtual DOM and efficient diff algorithm.\n2. React is component-based, making it easy to create reusable, maintainable, and modular code.\n3. React is easy to learn and integrates well with other libraries and frameworks, such as Redux and Node.js.", "category": "Python"}, {"instruction": "Remove the element \"red\" from the following array.", "input": "arr = ['blue', 'green', 'red', 'yellow']", "output": "arr = ['blue', 'green', 'yellow']", "category": "Python"}, {"instruction": "Construct a query in MongoDB to select documents with a value greater than 3 for the property \"value\".", "input": "", "output": "db.collection.find( { value: { $gt: 3 } } )", "category": "Python"}, {"instruction": "Write a Java program that displays the area of a triangle, given the three sides.", "input": "3, 4, 5", "output": "public class TriangleArea {\n \n public static void main(String[] args) {\n \n  int a = 3;\n  int b = 4;\n  int c = 5;\n \n  // calculate the semi-perimeter\n  double s = (a + b + c) / 2;\n \n  // calculate the area\n  double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n \n  // display the result\n  System.out.println(\"The area of the triangle: \" + area);\n }\n \n}", "category": "Python"}, {"instruction": "Create a JSON structure to store the following user data: name, age, and education.", "input": "John Doe, 25, Masters", "output": "{\n \"name\": \"John Doe\",\n \"age\": 25,\n \"education\": \"Masters\"\n}", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code in the Java language.", "input": "const numList = [1, 2, 3, 4];\n\nnumList.map((num) => {\n  return num * 2;\n});", "output": "int[] numList = {1, 2, 3, 4};\n\nfor (int i = 0; i < numList.length; i++) {\n  numList[i] = numList[i] * 2;\n}", "category": "Python"}, {"instruction": "Parse a JSON document and display its contents.", "input": "", "output": "import json\n\nwith open('filename.json', 'r') as json_file:\n    data = json.load(json_file)\n\nfor key, value in data.items():\n    print(key, ':', value)", "category": "Python"}, {"instruction": "Generate a random number from 1 to 1000.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 1000)", "category": "Python"}, {"instruction": "Write a function that converts Fahrenheit to Celsius.", "input": "", "output": "def FtoC(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius", "category": "Python"}, {"instruction": "Implement a stack using a linked list.", "input": "", "output": "class Stack:\n\n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.count = 0\n\n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n\n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n\n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result", "category": "Python"}, {"instruction": "Compute the distance between two points p1 and p2.", "input": "p1 = (3, 4), p2 = (6, 8).", "output": "import math\ndef distance(p1, p2):\n    xDiff = p2[0] - p1[0]\n    yDiff = p2[1] - p1[1]\n    return math.sqrt(xDiff**2 + yDiff**2)\n\ndistance((3,4), (6,8)) # Returns 5.0", "category": "Python"}, {"instruction": "Design a class to represent a point in 2D space.", "input": "It should store two variables\u2014x and y.", "output": "class Point:\n    x = 0\n    y = 0\n    def Point(x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array of strings and returns a new array containing the length of each string.", "input": "", "output": "const getLengths = (arr) => {\n     return arr.map(elem => elem.length);\n}", "category": "Python"}, {"instruction": "Describe the benefits of using JavaScript.", "input": "", "output": "JavaScript has many advantages, such as being easy to learn and implement, being interpreted rather than compiled, and being supported by all major browsers. JavaScript also allows for dynamic and interactive webpages, enabling more user engagement and more sophisticated web experiences. Finally, JavaScript has the ability to run on both the server side and the client side, providing flexibility in how the code is used.", "category": "Python"}, {"instruction": "Create a SQL query to count the number of people who have an age between 18 and 25.", "input": "", "output": "SELECT COUNT(*) \nFROM person \nWHERE age BETWEEN 18 and 25;", "category": "Python"}, {"instruction": "Create a C# function that takes 2 input strings and returns true if one string is a permutation of the other.", "input": "", "output": "static bool IsPermutation(string s1, string s2)\n{\n    if (string.ReferenceEquals(s1, s2))\n        return true;\n    if (s1 == null || s2 == null)\n        return false;\n    if (s1.Length != s2.Length)\n        return false;\n\n    int[] charCount = new int[256];\n\n    foreach (char c in s1){\n        charCount[c]++;\n    }\n\n    foreach (char c in s2) {\n        if (--charCount[c] < 0)\n            return false;\n    }\n\n    return true;\n}", "category": "Python"}, {"instruction": "Rewrite the following code snippet to remove the use of \"while\" loop.", "input": "let sum = 0;\nlet i = 0;\nwhile (i <= 10) {\n   sum += i;\n   i += 1;\n}", "output": "let sum = 0; \nfor (let i = 0; i <= 10; i++) {\n   sum += i;\n}", "category": "Python"}, {"instruction": "Create a Java program that reads an array of integers from the console and prints out the largest number.", "input": "", "output": "import java.util.Scanner;\n\npublic class LargestNum {\n    public static void main(String[] args){\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Input the size of array: \");\n        int n = scanner.nextInt();\n\n        int[] arr = new int[n];\n        System.out.println(\"Input \"+n+\" elements in the array:\");\n        for(int i = 0; i < n; i++){\n            arr[i] = scanner.nextInt();\n        }\n\n        int max = arr[0];\n\n        for (int anArr : arr) {\n            if (anArr > max)\n                max = anArr;\n        }\n\n        System.out.println(\"Largest number in the array is \" + max);\n    }\n}", "category": "Python"}, {"instruction": "Select the code segment that outputs \"pass\".", "input": "", "output": "let num = 4;\n\nif (num < 5) {\n    console.log('pass');\n} else {\n    console.log('fail');\n}", "category": "Python"}, {"instruction": "Create a for loop in JavaScript to iterate through the given array and print out their sum.", "input": "[20, 32, 45, 16]", "output": "let result = 0;\nlet numList = [20, 32, 45, 16];\n\nfor (let i = 0; i < numList.length; i++){\n    result += numList[i];\n}\n\nconsole.log(result);", "category": "Python"}, {"instruction": "Create a Python program that takes a given list of strings and prints out the string with the maximum length.", "input": "['code', 'programming', 'computer science', 'javascript', 'HTML']", "output": "max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\n\nprint(max_string)", "category": "Python"}, {"instruction": "Convert the following list of numbers into a comma-separated string.", "input": "[25, 32, 63, 18, 22]", "output": "'25,32,63,18,22'", "category": "Python"}, {"instruction": "Write some C code to print the following pattern:", "input": "", "output": "#include<stdio.h>\nint main(){\n\tfor(int i=1;i<=5;i++){\n\t\tfor(int j=1;j<=i;j++){\n\t\t\tprintf(\"*\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers from 1 to n.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nfind_primes(10) # Returns [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Develop an algorithm for shuffling an array of numbers.", "input": "", "output": "def shuffleArray(arr):\n    for i in range(len(arr) - 1, 0, -1): \n        j = random.randint(0, i + 1)  \n        arr[i], arr[j] = arr[j], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Using the array, sort it using insertion sort.", "input": "arr = [4, 2, 6, 7, 1]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Translate the following polar equation into a Cartesian equation.", "input": "r = 2 sin(\u03b8)", "output": "Given the equation r=2sin(\u03b8), \nthe Cartesian equation can be determined to be\n\nx=2sin(\u03b8)cos(\u03b8) and y= 2sin\u00b2(\u03b8).", "category": "Python"}, {"instruction": "Write a code snippet to implement a binary search algorithm.", "input": "", "output": "def binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1", "category": "Python"}, {"instruction": "Write an HTML form to collect a user's name, email address, and password.", "input": "", "output": "<form>\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\" />\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\" />\n  <label>Password:</label>\n  <input type=\"password\" name=\"passwd\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Write a C++ function that takes an array of strings and prints them out in reverse order.", "input": "myArray = [\"cat\",\"apple\",\"dog\"]", "output": "void print_reverse (string arr[], int size) { \n  if (size > 0) { \n    print_reverse (arr, size - 1); \n    cout<<arr[size-1]<<\" \"; \n  }\n}", "category": "Python"}, {"instruction": "Explain what are pointers in C++.", "input": "", "output": "Pointers are variables that store the address of another variable in memory. They can be used to dynamically allocate memory, access a particular piece of data, or pass arguments to functions. In C++, pointers are used to extend the notion of an array by allowing to access memory outside of its bounds and to have a dynamic size. Pointers are also used to create data structures like linked lists and binary trees.", "category": "Python"}, {"instruction": "Write a JavaScript function to check if a string ends with the given substring.", "input": "mainStr = \u201cHello World\u201d\nsubStr = \u201corld\u201d", "output": "function endsWith(mainStr, subStr) {\n    let startIndex = mainStr.length - subStr.length;\n    let checkStr = mainStr.substring(startIndex);\n    return checkStr === subStr;\n}", "category": "Python"}, {"instruction": "Explain what is a stack data structure in programming.", "input": "", "output": "A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.", "category": "Python"}, {"instruction": "Write a SQL query to find the name, email address and phone number of all employees with a salary of more than 1000.", "input": "", "output": "SELECT name, email, phone_number FROM employees WHERE salary > 1000;", "category": "Python"}, {"instruction": "Write a JavaScript function that sorts an array of strings alphabetically.", "input": "myArray = [\"cat\",\"apple\",\"dog\"]", "output": "function sortArray(arr) {\n    let sortedArray = arr.sort();\n    return sortedArray;\n}", "category": "Python"}, {"instruction": "Explain the concept of binary search in an array.", "input": "", "output": "Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.", "category": "Python"}, {"instruction": "Write a Python script that prints the current date and time.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))", "category": "Python"}, {"instruction": "Write an HTML link tag to open a link in a new tab.", "input": "", "output": "<a href=\"http://example.com\" target=\"_blank\">Link</a>", "category": "Python"}, {"instruction": "Explain the purpose of lambda functions in Python.", "input": "", "output": "Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they\u2019re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python\u2019s functions is not required.", "category": "Python"}, {"instruction": "Create a loop to print the following array values.", "input": "arr = [3, 6, 9, 12]", "output": "for x in arr:\n    print(x)", "category": "Python"}, {"instruction": "Construct a Tensorflow model to classify the following inputs.", "input": "Images with labels \u201ccat\u201d and \u201cdog\u201d.", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create an algorithm that finds the greatest common divisor of two integers.", "input": "x = 20 \ny = 12", "output": "def find_gcd(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\n    while y > 0:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ngcd = find_gcd(20,12)\nprint(\"The greatest common divisor of 20 and 12 is: \", gcd)", "category": "Python"}, {"instruction": "Create an algorithm to find all pairs of elements in a given array that sum up to a given target.", "input": "array = [1, 6, 4, 5, 3, 2]\ntarget = 5", "output": "def findSumPairs(arr, target): \n\n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n\n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n\n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n\n# Output: [[1, 4], [2, 3]]", "category": "Python"}, {"instruction": "Create a Bash script that prints the first ten numbers.", "input": "", "output": "#!/bin/bash\n\nfor i in {1..10}\ndo\n  echo $i\ndone", "category": "Python"}, {"instruction": "Edit the following HTML code snippet to change the color of the heading to blue.", "input": "<h1>Heading</h1>", "output": "<h1 style=\"color: blue;\">Heading</h1>", "category": "Python"}, {"instruction": "Convert the following function from Python to C++.", "input": "def add_numbers(x, y):\n    return x + y", "output": "int add_numbers(int x, int y) {\n  return x + y;\n}", "category": "Python"}, {"instruction": "What is the difference between variables declared with let and const in JavaScript?", "input": "", "output": "The difference between let and const is that variables declared with let can be reassigned a different value or reassigned a different value type. On the other hand, variables declared with const are fixed, and cannot be reassigned or reassigned a different value type.", "category": "Python"}, {"instruction": "Create a Python dictionary that contains the following key-value pairs: \"a\":1, \"b\":2, \"c\": 3.", "input": "", "output": "d = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n}", "category": "Python"}, {"instruction": "Write a script that prints out the first 100 prime numbers.", "input": "", "output": "# Python program to print first n prime numbers\n  \nnum = 100\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           break\n   else:\n       print(num,\"is a prime number\")\n  \nelse:\n   print(num,\"is not a prime number\")\n\n# Program to print the first N prime numbers\n\n# Taking input from the user\nN = 100\n\n# Initializing a list to store prime numbers\nprime_list = []\n\n# Initializing a variable to store each prime number\nnum = 2\n\n# Iterating over the range of numbers\nwhile len(prime_list) < N:\n    # Initializing a flag to determine if the number is prime or not\n    flag = True\n    # Iterating over the already identified prime numbers and dividing the number by each\n    for prime_num in prime_list:\n        # Checking the remainder\n        if num % prime_num == 0:\n            flag = False\n            break\n    # Checking if the number is prime\n    if flag:\n        prime_list.append(num)\n    # Incrementing the number\n    num += 1\n\n# Printing the first N prime numbers\nprint(\"First\", N , \"prime numbers are:\")\nfor prime_num in prime_list:\n    print(prime_num, end=\" \")", "category": "Python"}, {"instruction": "What is the difference between an array and a list in Java?", "input": "", "output": "Array is a data structure that stores elements of the same data type. It is a fixed length structure and once declared, the length of the array cannot be modified. A list is a data structure that stores elements of different types. The size of a list can be modified by adding or removing elements. Lists are more powerful than arrays as they are more flexible when it comes to inserting, deleting, and searching elements.", "category": "Python"}, {"instruction": "Merge the following two sorted arrays into a single sorted array in Java.", "input": "[1, 5, 8]\n[2, 3, 6]", "output": "int[] mergeArrays(int[] array1, int[] array2) {\n    int[] mergedArray = new int[array1.length + array2.length];\n    int index1 = 0, index2 = 0;\n    for (int i = 0; i < mergedArray.length; i++) {\n        if (index1 < array1.length \n            && (index2 >= array2.length || array1[index1] < array2[index2])) {\n            mergedArray[i] = array1[index1];\n            index1++;\n        } else {\n            mergedArray[i] = array2[index2];\n            index2++;\n        } \n    } \n    return mergedArray;\n}", "category": "Python"}, {"instruction": "Write a CSS rule that changes the font-family of the body element to sans-serif.", "input": "", "output": "body {\n  font-family: sans-serif;\n}", "category": "Python"}, {"instruction": "Create a HTML tag to display a hyperlink.", "input": "jQuery website", "output": "<a href=\"https://jquery.com\">jQuery website</a>", "category": "Python"}, {"instruction": "Create a HTTP GET request using Python.", "input": "", "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nprint(response.text)", "category": "Python"}, {"instruction": "Write an SQL query that finds the most popular product sold today (in terms of quantity), along with the quantity sold.", "input": "", "output": "SELECT product_name, SUM(quantity)\nFROM orders \nWHERE DATE(order_date) = CURDATE()\nGROUP BY product_name \nORDER BY SUM(quantity) DESC\nLIMIT 1", "category": "Python"}, {"instruction": "Edit this HTML document so the <h1> tag at the top of the page is aligned to the center.", "input": "<html>\n  <head>\n    <title>My Page</title> \n  </head>\n  <body>\n    <h1>Page Title</h1>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>My Page</title> \n  </head>\n  <body>\n    <h1 style=\"text-align: center;\">Page Title</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python script to print out a 5x5 multiplication table.", "input": "", "output": "for i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()", "category": "Python"}, {"instruction": "Change the following JavaScript function so that it returns true if the number passed as a parameter is even, and false if it is odd.", "input": "function isEven(number) {\n  return number % 2;\n}", "output": "function isEven(number) {\n  return number % 2 === 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find out how many orders have been placed today?", "input": "", "output": "SELECT COUNT(*) FROM orders\nWHERE DATE(order_date) = CURDATE()", "category": "Python"}, {"instruction": "Create a JavaScript program to convert temperatures between Celsius and Fahrenheit.", "input": "", "output": "function convertTemp(temp, unit) {\n    let newTemp;\n    if (unit === \"C\") {\n        newTemp = temp * 9/5 + 32;\n    } else {\n        newTemp = (temp - 32) * 5/9;\n    }\n    return newTemp;\n}", "category": "Python"}, {"instruction": "Write a SQL query to display the name and country of the customers who have purchased products in the last 24 hours.", "input": "", "output": "SELECT name, country \nFROM customers \nWHERE orderDate > DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY);", "category": "Python"}, {"instruction": "Create a function in Java that returns the number of days between two given dates.", "input": "", "output": "public int getDaysDifference(LocalDate startDate, LocalDate endDate) {\n    return (int) ChronoUnit.DAYS.between(startDate, endDate);\n}", "category": "Python"}, {"instruction": "Calculate the running average of a given array of data.", "input": "[1,6,3,5,2,7,8]", "output": "def calculate_running_average(arr):\n    running_sum = 0\n    for i in range(len(arr)):\n        running_sum += arr[i]\n        arr[i] = running_sum / (i+1)\n    return arr\n\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr) # Returns [1.0, 3.5, 3.0, 3.75, 3.2, 4.16, 4.43]", "category": "Python"}, {"instruction": "Find the longest increasing subsequence of a given array of numbers.", "input": "[10,22,9,33,21,50,41,60]", "output": "def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1] * n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\n\narr = [10,22,9,33,21,50,41,60]\nlongest_increasing_subsequence(arr) # Returns 5", "category": "Python"}, {"instruction": "Convert the following pseudocode into Python code", "input": "for i = 0 to 9\n    print i", "output": "for i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Given a list of numbers, return the first number that appears an odd number of times.", "input": "arr = [2,4,4,4,2,2,8,4]", "output": "def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\n\nfind_odd_occurrence_num(arr) # Returns 8", "category": "Python"}, {"instruction": "Find the duplicate in the array.", "input": "arr = [1,2,3,4,2]", "output": "def find_duplicate(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    return None # if no duplicate\n\nfind_duplicate(arr) # Returns 2", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the first letter of each word in the string.", "input": "string = \"This is an example\"", "output": "def first_letters(string):\n    words = string.split()\n    first_letters = [word[0] for word in words]\n    return \"\".join(first_letters)\n\nfirst_letters(string) # Returns \"Tiiae\"", "category": "Python"}, {"instruction": "What is the average of the numbers in list l?", "input": "l = [1,2,3,4,5]", "output": "Average = sum(l) / len(l) = 15 / 5 = 3.0", "category": "Python"}, {"instruction": "Write a function in Python to shuffle an array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr", "category": "Python"}, {"instruction": "Create an object-oriented design in Python to represent a customer.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.address = address\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_address(self):\n        return self.address\n\n    def set_address(self, address):\n        self.address = address\n\n    def get_email(self):\n        return self.email\n\n    def set_email(self, email):\n        self.email = email", "category": "Python"}, {"instruction": "Create a shell script to find the size of all folders in a directory.", "input": "", "output": "#!/bin/bash\n\nfor i in $(find . -type d); do\n    echo -n \"$i: \"\n    du -sh $i\n done", "category": "Python"}, {"instruction": "Create a MySQL query to calculate the median of a column in a table.", "input": "", "output": "SELECT AVG(sub.median) \nFROM\n    (SELECT AVG(t.rating) as median\n     FROM ratings t\n     LEFT JOIN ( SELECT id,\n                        @rownum := @rownum + 1 AS row_number,\n                        @total_rows := @total_rows + 1 AS total_rows\n                    FROM ratings t1, \n                    (SELECT @rownum := 0) r\n                    ) \n        r ON t.id = r.id\n    WHERE 1=1\n    GROUP BY row_number\n    ORDER BY row_number\n    ) sub\nWHERE sub.median > 0\nAND sub.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) );", "category": "Python"}, {"instruction": "Build a mobile app with React Native to display the current temperature of a given city.", "input": "", "output": "import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { fetchWeather } from './utils/api';\n\nexport default function App() {\n    const [temp, setTemp] = useState('');\n\n    useEffect(() => {\n        fetchWeather('New York City, NY')\n            .then(temp => setTemp(temp));\n    }, []);\n\n    return (\n        <View style={styles.container}>\n            <Text>The current temperature in New York City is {temp}\u00b0F</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        marginHorizontal: 10,\n        padding: 20,\n        backgroundColor: (Platform.OS === 'ios') ? '#e3e3e3' : '#f3f3f3',\n    }\n});", "category": "Python"}, {"instruction": "Create a JavaScript regex to match an email address.", "input": "", "output": "let regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;", "category": "Python"}, {"instruction": "Create a React component to display a list of 5 user names.", "input": "[\n    {name: \"John Doe\"},\n    {name: \"Mary Smith\"},\n    {name: \"Jane Watson\"},\n    {name: \"Bob Williams\"},\n    {name: \"Jill Taylor\"}\n]", "output": "import React from 'react';\n\nconst UserList = (props) => {\n    const users = props.users.map((user, index) => {\n        return (\n            <div key={index}>{user.name}</div>\n        );\n    });\n    return (\n        <div>\n            {users}\n        </div>\n    )\n};\n\nexport default UserList;", "category": "Python"}, {"instruction": "Design an algorithm to check if a number is a palindrome.", "input": "7337", "output": "def is_palindrome(num):\n    num_str = str(num)\n    # compare the first and last characters\n    if num_str[0] != num_str[-1]:\n        return False\n    # go to the next pair of characters\n    if len(num_str) >= 3:\n        return is_palindrome(num_str[1:-1])\n    # all characters have been compared, number is a palindrome\n    return True", "category": "Python"}, {"instruction": "Use python to call a API to get the current temperature in New York City?", "input": "", "output": "import requests\n\n# API call to get current temperatures in New York City\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'\nresponse = requests.get(url)\ndata = response.json()\ncurrent_temperature = data['main']['temp']\nprint(current_temperature)", "category": "Python"}, {"instruction": "Define a function in Ruby that takes two arguments and returns their sum.", "input": "", "output": "def add_numbers(num1, num2) \n  return num1 + num2\nend", "category": "Python"}, {"instruction": "Create a dictionary with two key-value pairs in Python.", "input": "", "output": "my_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}", "category": "Python"}, {"instruction": "Is a valid ISBN-10 number?", "input": "isbn = \"0478156686\"", "output": "import re \n\ndef is_valid_isbn(isbn):\n    pattern = r\"^\\d{9}[\\d|X]$\" # ISBN is a string with 10 digits\n    return True if re.match(pattern, isbn) else False\n\nis_valid_isbn(isbn) # Returns True", "category": "Python"}, {"instruction": "Parse and convert a string containing a valid JSON to a Python dictionary.", "input": "string = '{ \"a\": 1, \"b\": 2, \"c\": 3 }'", "output": "import json\n\ndef convert_json_string(string):\n    return json.loads(string)\n\nconvert_json_string(string) # Returns { \"a\": 1, \"b\": 2, \"c\": 3 }", "category": "Python"}, {"instruction": "Create a function to retrieve the first value from a dictionary that starts with a given letter.", "input": "dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 }\nstarting_letter = \u201cb\u201d", "output": "def get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None # if no value found\n\nget_first_value(dictionary, starting_letter) # Returns 2", "category": "Python"}, {"instruction": "Find the maximum element in a Binary Search Tree.", "input": "", "output": "def findMax(root): \n    if root == None: # if tree is empty\n        return -1\n    while root.right: # Move right in  BST till the last node\n        root = root.right\n    return root.key", "category": "Python"}, {"instruction": "Analyze the sentiment of this statement using Python.", "input": "I am truly happy with the amazing results", "output": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])", "category": "Python"}, {"instruction": "Generate a random set of 7 unique numbers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_set():\n  generated_set = set()\n  while len(generated_set) < 7:\n    generated_set.add(random.randint(0, 10))\n  return generated_set", "category": "Python"}, {"instruction": "Write a Python class to represent a 2-dimensional point.", "input": "", "output": "class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5", "category": "Python"}, {"instruction": "Write a Python function to calculate the least common multiple of two numbers.", "input": "", "output": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)", "category": "Python"}, {"instruction": "Rewrite the code below to use a for loop.", "input": "num = 0\nwhile num < 5: \n    print(num) \n    num+=1", "output": "for num in range(5):\n  print(num)", "category": "Python"}, {"instruction": "Write a Python program to implement a text-based game", "input": "", "output": "import random\n\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\n\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\n\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\n\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\n\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\n\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()", "category": "Python"}, {"instruction": "Create a neural network using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),\n    tf.keras.layers.Dense(units=128, activation='relu'),\n    tf.keras.layers.Dense(units=128, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a function in Javascript to check if a given list is palindrome.", "input": "let list = [1, 2, 3, 3, 2, 1]", "output": "function isPalindrome(list) {\n    for (let i = 0; i < Math.floor(list.length / 2); i++) {\n        if (list[i] !== list[list.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Create a distributed system using Python", "input": "", "output": "import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()", "category": "Python"}, {"instruction": "Create an SQL query that finds the average number of orders for each customer over the last year.", "input": "", "output": "SELECT\n    c.customer_id,\n    AVG(o.total_items)\nFROM\n    customers c JOIN\n    orders o ON c.customer_id = o.customer_id  \nWHERE \n    o.order_date > DATE_SUB(NOW(), INTERVAL 1 YEAR)\nGROUP BY\n    c.customer_id", "category": "Python"}, {"instruction": "Implement a quick-sort algorithm in Python to sort a given array in ascending order.", "input": "", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)", "category": "Python"}, {"instruction": "Write a JavaScript method to return the sum of array elements.", "input": "", "output": "function sumArray (arr) {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "category": "Python"}, {"instruction": "Develop a Java method to calculate the square root of a given number n.", "input": "", "output": "public static double sqrt(double n) { \n  if (n <= 0); \n  return 0; \n  double g = n; \n  while (Math.abs(g*g - n) > 0.01) {\n    g = (g + n / g) / 2.0; \n  }\n  return g;\n}", "category": "Python"}, {"instruction": "Design a CSS class that will set the font family of an HTML element to \u2018Arial\u2019, font size to 12 pts and font weight to bold.", "input": "", "output": ".arial-12-pt { \n  font-family: Arial; \n  font-size: 12pt; \n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Create a dictionary comprehension to capture all the words in a sentence.", "input": "The quick brown fox jumps over the lazy dog", "output": "{word: word for word in sentence.split()}", "category": "Python"}, {"instruction": "Create a function that takes two parameters, an array and an object key, and returns an object containing all the elements in the array whose value is the same as the given object key.", "input": "array = [\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]\nkey = \"b\"", "output": "def group_by_key(array, key):\n    returned_object = {}\n    for item in array:\n        if item == key:\n            returned_object[item] = key\n    return returned_object\n\ngroup_by_key(array, key) # Returns {\"b\": \"b\"}", "category": "Python"}, {"instruction": "Create a class named Dog in Python.", "input": "", "output": "class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")", "category": "Python"}, {"instruction": "Write an SQL query to select the most recent entry from a table.", "input": "Table Name - user_table\nField Names - name, date", "output": "SELECT name, date \nFROM user_table \nORDER BY date DESC \nLIMIT 1;", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence till 10 using Python.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nfor i in range(1,11): \n    print(Fibonacci(i))", "category": "Python"}, {"instruction": "Create a class in Java for a circle.", "input": "", "output": "class Circle{\n    double radius; \n \n    public Circle(double r){\n        this.radius = r; \n    } \n       \n    public double getArea(){ \n        return Math.PI*radius*radius; \n    } \n}", "category": "Python"}, {"instruction": "You need to fix the following code to make it work correctly.", "input": "def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return int(avg)", "output": "def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return round(avg, 2)", "category": "Python"}, {"instruction": "Create a function in JavaScript to create a subset of a given array.", "input": "array = [1, 2, 3, 4, 5], k = 3", "output": "const subset = (array, k) => { \n  const output = []\n  for (let i = 0; i < k; i++) { \n      let index = Math.floor(Math.random() * array.length);\n      output.push(array.splice(index, 1)[0]);\n  }\n  return output;\n}", "category": "Python"}, {"instruction": "Create an algorithm in Java to sort an array in descending order.", "input": "array = [10, 15, 7, 2, 13, 18]", "output": "public static void sortDesc(int[] array) {\n    for(int i = 0; i < array.length; i++) {\n        for(int j = 1; j < array.length; j++) {\n            if(array[j-1] < array[j]) {\n                int temp = array[j-1];\n                array[j-1] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a function in JavaScript to convert a given string to a positive integer.", "input": "str = \"323\"", "output": "const convertStringToInteger = str => {\n  return  parseInt(str, 10);\n}", "category": "Python"}, {"instruction": "Write a Python program to compute the gravitational force between two masses.", "input": "m1 = 5 kg, m2 = 10 kg", "output": "def calc_grav_force(m1, m2):\n    G = 6.67 * 10 ** -11 # gravitational constant\n    force = G * m1 * m2 / (4 * 3.14 ** 2)\n    return force", "category": "Python"}, {"instruction": "Create a function in R to calculate the mean from a given list of numbers.", "input": "numlist = c(2, 5, 10, 17, 21)", "output": "mean <- function(numlist) {\n  mean_val <- sum(numlist)/length(numlist)\n  return (mean_val)\n}", "category": "Python"}, {"instruction": "Create a search algorithm in Python to find an element in a sorted array in less than log(n) time.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1", "category": "Python"}, {"instruction": "You need to generate a list of all the even numbers between two given numbers.", "input": "", "output": "def even_numbers(start, end):\n even_nums = []\n for num in range(start, end):\n if num % 2 ==0:\n even_nums.append(num)\n return even_nums", "category": "Python"}, {"instruction": "Construct an algorithm in python to find the length of the longest common substring between two strings", "input": "str1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\"", "output": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result", "category": "Python"}, {"instruction": "List the different access modifiers in Java", "input": "", "output": "The access modifiers in Java are public, private, protected, and default. Public members are accessible everywhere and can be inherited. Private members can only be accessed within the same class. Protected members are accessible within the same package but can be inherited to a subclass in a different package. Default, or package-private, members are accessible within the same package but cannot be inherited.", "category": "Python"}, {"instruction": "Create a repeatable random number generator in Python", "input": "", "output": "import random\n\ndef repeatRandom(seed):\n  random.seed(seed)\n  return random.random()", "category": "Python"}, {"instruction": "Edit the following code snippet so that it prints \"Hello World\" three times", "input": "#include <iostream>\n\nint main(){\n    std::cout << \"Hello world\" << std::endl;\n    return 0;\n}", "output": "#include <iostream>\n\nint main(){\n    for(int i=0; i < 3; i++)\n        std::cout << \"Hello world\" << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a function in C++ that inserts a new student name and score in the given 2D vector", "input": "students = [\n    [\"Sam\", 70],\n    [\"Tom\", 85],\n    [\"Jess\", 80]\n]\n\nnew_student_name = \"Jen\"\nnew_student_score = 92", "output": "void add_student(vector<vector<string>>& students, string new_student_name, int new_student_score) {\n    vector<string>student;\n    student.push_back(new_student_name);\n    student.push_back(to_string(new_student_score));\n    students.push_back(student);\n}", "category": "Python"}, {"instruction": "Write an algorithm in python to find the second largest number of an unsorted list", "input": "arr = [1, 3, 4, 5, 9, 10, 11]", "output": "def find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n\n# else return the second max\nreturn max2", "category": "Python"}, {"instruction": "Explain the concept of Base Class and Subclass", "input": "", "output": "A base class is a class that serves as a parent class for one or more subclasses. A subclass is a class that is derived from one or more base classes and inherits the properties and methods of its base classes. A subclass can also override and add its own properties and methods, while inheriting the properties and methods of its parent classes.", "category": "Python"}, {"instruction": "Create a program in python to find the longest common contiguous subarray between two integers.", "input": "int arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5}", "output": "def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res", "category": "Python"}, {"instruction": "Change the following code so that it accepts a list as an argument and prints each element of the list.", "input": "def print_list(arr):\n\ti = 0\n\twhile (i < len(arr)):\n\t\tprint arr[i]\n\t\ti +=1", "output": "def print_list(arr):\n\tfor ele in arr:\n\t\tprint(ele)", "category": "Python"}, {"instruction": "Create an SQL query to find all the students with an age between 20 and 22.", "input": "Table Name: students; Columns: age", "output": "SELECT * FROM students WHERE age >= 20 AND age <= 22;", "category": "Python"}, {"instruction": "Generate a sentence that consists of repeated words with different properties.", "input": "", "output": "The icy blue ocean glistened with sparkling diamond stars.", "category": "Python"}, {"instruction": "Write a Python program to generate a list that contains only the non-unique elements from a given list.", "input": "[1,2,3,4,5,1,2,2,3,4]", "output": "def generate_non_unique_list(lst):\n new_list = []\n for i in lst:\n  if lst.count(i) > 1 and i not in new_list:\n   new_list.append(i)\n return new_list", "category": "Python"}, {"instruction": "Write a for loop in Perl for printing all the elements of a list.", "input": "my @myList = (4, 7, 12);", "output": "foreach my $element (@myList){\n  print $element;\n}", "category": "Python"}, {"instruction": "Create a virtual environment with Python version 2.7.", "input": "", "output": "pip install virtualenv\nvirtualenv -p python2.7 venv\nsource venv/bin/activate", "category": "Python"}, {"instruction": "Design a data structure to hold a user's name, age, and city.", "input": "", "output": "struct User {\n    string name;\n    int age;\n    string city;\n};", "category": "Python"}, {"instruction": "Write a SQL query to delete the record of a person whose id is 1234.", "input": "", "output": "DELETE FROM Person WHERE id = 1234;", "category": "Python"}, {"instruction": "Find the sum of the following array elements in MATLAB.", "input": "A = [100,200,300]", "output": "A = [100,200,300];\nsumA = sum(A);\nfprintf('Sum of elements: %d\\n', sumA);", "category": "Python"}, {"instruction": "Create a CSS class for displaying large text in an HTML page.", "input": "", "output": ".large-text {\n    font-size: 22px;\n    font-weight: bold;\n}", "category": "Python"}, {"instruction": "Correct the following Python code so it prints out the current hour in 24-hour format.", "input": "import datetime\n\ncurrent_hour = datetime.now()\nprint(\"Current hour is\")\nprint(current_hour.hour)", "output": "import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))", "category": "Python"}, {"instruction": "You need to implement a class for a numerical calculator.", "input": "", "output": "class Calculator:\n def __init__(self):\n  self.result = 0\n\n def add(self, a, b):\n  self.result = a + b\n  return self.result\n\n def subtract(self, a, b):\n  self.result = a - b\n  return self.result\n\n def multiply(self, a, b):\n  self.result = a * b\n  return self.result\n\n def divide(self, a, b):\n  self.result = a / b\n  return self.result", "category": "Python"}, {"instruction": "Create a Swift code to find the maximum number from an array of integers.", "input": "", "output": "func maximumNumber(fromArray array:[Int]) -> Int {\n    var max = array[0]\n    for number in array {\n        if number > max {\n            max = number\n        }\n    }\n    return max\n}", "category": "Python"}, {"instruction": "Write a HTML page to create a survey form.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Survey Form</title>\n</head>\n<body>\n  <form action=\"/action_page.php\">\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your name..\" required><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Your email..\" required><br>\n    <label for=\"age\">Age:</label><br>\n    <input type=\"number\" id=\"age\" name=\"age\" placeholder=\"Your age..\" required><br><br>\n    <fieldset>\n      <legend>Gender:</legend>\n      <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\" checked>\n      <label for=\"male\">Male</label><br>\n      <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n      <label for=\"female\">Female</label><br>\n      <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n      <label for=\"other\">Other</label><br>\n    </fieldset>\n    <fieldset>\n      <legend>Interests:</legend>\n      <input type=\"checkbox\" id=\"tech\" name=\"tech\" value=\"tech\">\n      <label for=\"tech\">Technology</label><br>\n      <input type=\"checkbox\" id=\"sport\" name=\"sport\" value=\"sport\">\n      <label for=\"sport\">Sports</label><br>\n      <input type=\"checkbox\" id=\"science\" name=\"science\" value=\"science\">\n      <label for=\"science\">Science</label><br>\n    </fieldset><br>\n    <label for=\"comment\">Comment:</label><br>\n    <textarea id=\"comment\" name=\"comment\" placeholder=\"Write something..\" style=\"height:90px\"></textarea>\n    <br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form> \n</body>\n</html>", "category": "Python"}, {"instruction": "Define a function in Ruby to return the sum of two numbers.", "input": "", "output": "def add_numbers(x, y)\n  return x + y\nend", "category": "Python"}, {"instruction": "Create a C++ object class that stores information about different people.", "input": "name: John Smith\nage: 30\naddress: 1234 Main Street", "output": "class Person {\n    string name;\n    int age;\n    string address;\n \npublic:\n    Person();\n    Person(string name, int age, string address);\n \n    string getName();\n    int getAge();\n    string getAddress();\n \n    void setName(string name);\n    void setAge(int age);\n    void setAddress(string address);\n};", "category": "Python"}, {"instruction": "Write a function to compute the product of all elements in a matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n return product", "category": "Python"}, {"instruction": "You need to compute the sum of all odd elements in a given matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def sum_odd_matrix(matrix):\n sum = 0\n for row in matrix:\n  for value in row:\n   if value % 2 != 0:\n    sum += value\n return sum", "category": "Python"}, {"instruction": "Categorize a given list of integers into odd and even numbers.", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def categorize_numbers(lst):\n odd = []\n even = []\n for num in lst:\n  if num % 2 == 0:\n   even.append(num)\n  else:\n   odd.append(num)\n return odd, even", "category": "Python"}, {"instruction": "Implement a function to convert a given string into a list of words.", "input": "My name is Anna.", "output": "def string_to_list(string):\n words = string.split(' ')\n return words", "category": "Python"}, {"instruction": "Generate a PHP array containing 20 random integers in the range 0 to 100.", "input": "", "output": "$numbers = array();\nfor ($i = 0; $i < 20; $i++) {\n    $numbers[$i] = rand(0, 100);\n}", "category": "Python"}, {"instruction": "Find and display all the employees who earn more than the average salary across all departments.", "input": "", "output": "SELECT e.name \nFROM employees e \nWHERE e.salary > (SELECT AVG(salary) FROM employees);", "category": "Python"}, {"instruction": "Debug this code snippet to print a list of all 6-digit numbers.", "input": "", "output": "def printList(): \n    i = 11\n    while(i <= 99999): \n        if (i >= 10000 and i <= 99999): \n            print(i) \n        i = i + 1\n\n# Call the function \nprintList()", "category": "Python"}, {"instruction": "Edit this three lines of code to remove the last item from a given array.", "input": "Input array: [1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nlast_item = arr.pop()\narr.remove(last_item)", "category": "Python"}, {"instruction": "Based on the following list, create a dictionary of each name and their corresponding birth date.", "input": "names = [\"John\", \"Mary\", \"James\", \"Susan\"]\nbirth_dates = [\"1992-12-24\", \"1979-05-17\", \"1995-08-15\", \"1985-04-10\"]", "output": "name_birthdate_dict = dict(zip(names, birth_dates))\nprint(name_birthdate_dict)\n# Output: {'John': '1992-12-24', 'Mary': '1979-05-17', 'James': '1995-08-15', 'Susan': '1985-04-10'}", "category": "Python"}, {"instruction": "Suggest a suitable type of machine learning algorithm for the following task.", "input": "Identifying the sentiment of a movie review.", "output": "A suitable machine learning algorithm for this task is a supervised learning algorithm, such as a Naive Bayes classifier.", "category": "Python"}, {"instruction": "Create a function to divide two numbers and return an integer result.", "input": "", "output": "def div(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y", "category": "Python"}, {"instruction": "Generate an HTML page on the browser with the text \"Hello world.\"", "input": "", "output": "<html>\n    <head>\n    </head>\n    <body>\n        Hello world.\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript program that asks the user to enter a number and then prints the sum of the cube of the digits of the number.", "input": "", "output": "let number = Number(prompt(\"Enter a number:\"));\nlet sum = 0;\n\nwhile (number > 0) {\n    let last_digit = number % 10;\n    sum = sum + last_digit**3;\n    number = (number - last_digit)/10;\n}\n\nconsole.log(sum); # The output will be the sum of the cube of the digits", "category": "Python"}, {"instruction": "What is the sum of all the even numbers in the range 1-100 inclusive?", "input": "", "output": "2550 # The output will be 2550", "category": "Python"}, {"instruction": "Create a script that prints the duplicate elements from a given list of numbers.", "input": "my_list = [1, 2, 3, 2, 3, 4, 5]", "output": "my_list = [1, 2, 3, 2, 3, 4, 5]\n\nduplicated_nums = []\nfor i in my_list:\n    if my_list.count(i) > 1:\n        duplicated_nums.append(i)\n\nprint(list(set(duplicated_nums))) # The output will be [2, 3]", "category": "Python"}, {"instruction": "Create a web page with HTML/CSS that consists of three circles of different colors and different sizes.", "input": "", "output": "<html>\n  <head>\n  <style>\n    div {\n        width: 100px;\n        height: 100px;\n        border-radius: 50%;\n    }\n    #circle1 {\n        background-color: red;  \n    }\n    #circle2 {\n        background-color: green;\n        width: 80px;\n        height: 80px;\n    }\n    #circle3 {\n        background-color: blue;\n        width: 60px;\n        height: 60px;\n    }\n    </style>\n  </head>\n  <body>\n    <div id=\"circle1\"></div>\n    <div id=\"circle2\"></div>\n    <div id=\"circle3\"></div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit the error in this code.", "input": "def my_function(x, y, z):\n    a = x + 5y - z", "output": "def my_function(x, y, z):\n    a = x + 5*y - z", "category": "Python"}, {"instruction": "Given a list of strings, remove all strings in the list", "input": "myList = [\"item1\", \"item2\", \"item3\"]", "output": "def remove_all_strings(myList):\n    myList.clear()\n    return myList", "category": "Python"}, {"instruction": "Create a list containing the even numbers from #1 to #10.", "input": "", "output": "[2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Write a function to parse a query string into its components in JavaScript.", "input": "query = \"name=John&age=30\"", "output": "function parseQueryString(query) {\n let components = query.split(\"&\");\n let data = {};\n for (let c of components) {\n let pair = c.split(\"=\");\n data[pair[0]] = pair[1];\n }\n return data;\n}\n\nconsole.log(parseQueryString(query)); // {name: 'John', age: '30'}", "category": "Python"}, {"instruction": "Select the email addresses the start with the letter \"p\" from the table \"users\".", "input": "", "output": "SELECT email FROM users\nWHERE email LIKE 'p%';", "category": "Python"}, {"instruction": "List all the table names in a PostgreSQL database.", "input": "", "output": "SELECT table_name FROM information_schema.tables\nWHERE table_schema NOT IN ('pg_catalog', 'information_schema');", "category": "Python"}, {"instruction": "Compile the example program that prints \"Hello, World!\" in C++.", "input": "", "output": "g++ -o example example.cpp", "category": "Python"}, {"instruction": "Use the reduce() method to sum the values of an array of numbers in JavaScript.", "input": "const numbers = [1, 2, 3, 4, 5];", "output": "let sum = numbers.reduce((total, num) => total + num);\n\nconsole.log(sum); // 15", "category": "Python"}, {"instruction": "Write a SQL query to count the number of records with a field of \"user_id\" in the table called \"users\".", "input": "", "output": "SELECT COUNT(*) as count_user_id FROM users;", "category": "Python"}, {"instruction": "Create a function that will take a string as an input and returns the number of upper case letters in it.", "input": "", "output": "def countUpperCase(string):\n    # Initialize counter variable\n    count = 0\n\n    # Loop through characters in string\n    for c in string:\n        # If character is upper case increment counter\n        if c.isupper():\n            count += 1\n\n    return count", "category": "Python"}, {"instruction": "Create a variable and assign a value to it in Java.", "input": "", "output": "String name = \"John\";", "category": "Python"}, {"instruction": "Create a function that join two strings into one", "input": "", "output": "def join_strings(string1, string2):\n    return string1 + string2", "category": "Python"}, {"instruction": "Write a function that switches the odd elements and the even elements in a list", "input": "def switch_list(mylist):\n    #TODO", "output": "def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist", "category": "Python"}, {"instruction": "Modify the code to convert any temperature from Celsius to Fahrenheit", "input": "def CtoF(x):\n    #TODO", "output": "def CtoF(x):\n    F = (9/5 * x) + 32\n    return F", "category": "Python"}, {"instruction": "Create a program in Scala to calculate the average price of all products in the table \u201cProducts\u201d.", "input": "", "output": "import scala.io.Source\n\nval products = Source.fromFile(\"products.txt\").getLines.toList\nval avgPrice = products.map(p => p.split(\",\")(4).toDouble).sum/products.length\nprintln(s\"The average price is: $avgPrice\")", "category": "Python"}, {"instruction": "Suggest a completion for the following JavaScript code to determine if a number is an odd number.", "input": "function isOddNumber(", "output": "function isOddNumber(num) {\n    return num % 2 !== 0;\n}", "category": "Python"}, {"instruction": "Generate a CSS code for creating a flex container with columns of equal width.", "input": "", "output": ".flex-container {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-between;\n}\n.flex-item {\n    flex: 1 0 auto;\n    padding: 5px;\n}", "category": "Python"}, {"instruction": "Generate a HTML code that will create an alert message with the text \u201cYou pressed the button!\u201d", "input": "", "output": "<html>\n    <head>\n        <script>\n            function alert_button(){\n                alert(\"You pressed the button!\");\n            }\n        </script>\n    </head>\n    <body>\n        <button onclick=\"alert_button()\">Click Here</button>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a bash shell script that will print \u201cI love programming in Bash!\u201d.", "input": "", "output": "#!/bin/bash\necho \"I love programming in Bash!\"", "category": "Python"}, {"instruction": "Build a SQL query to calculate the biggest salary in the table \u201cEmployees\u201d.", "input": "", "output": "SELECT MAX(salary) FROM Employees;", "category": "Python"}, {"instruction": "Create a function to retrieve a random element from a given list in Java.", "input": "", "output": "public static Object getRandomElement(List<?> list) {\n    Random rand = new Random();\n    int randIndex = rand.nextInt(list.size());\n    return list.get(randIndex);\n}", "category": "Python"}, {"instruction": "Create a HTML form to submit a text entry and view it after submission.", "input": "", "output": "<html>\n  <head>\n    <script>\n      function submitForm(){\n        var formData = document.getElementById(\"textEntry\").value;\n        alert(\"You said: \"+ formData);\n      }\n    </script>\n  </head>\n  <body>\n    <form>\n      <input type=\"text\" id=\"textEntry\">\n      <input type=\"button\" value=\"Submit\" onclick=\"submitForm()\">\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a random sample with size n from a given pandas DataFrame.", "input": "", "output": "import pandas as pd\n\ndef sample_df(df,n):\n    return df.sample(n)", "category": "Python"}, {"instruction": "Suggest a way to the generate a random number between 0 and 1 in JavaScript.", "input": "", "output": "function getRandom() {\n    return Math.random();\n}", "category": "Python"}, {"instruction": "Implement a search() function that uses binary search to find a given element in an array.", "input": "", "output": "def search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1", "category": "Python"}, {"instruction": "Construct a HTML page for a registration form.", "input": "", "output": "<html>\n    <head>\n        <title>Registration Form</title>\n    </head>\n    <body>\n        <h1>Registration Form</h1>\n        <form action=\"register.php\" method=\"POST\">\n          <div class=\"form-row\">\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Email:</label>\n            <input type=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" required>\n          </div> \n          <div class=\"form-row\">\n            <input type=\"submit\" value=\"Register\">\n          </div>\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following PHP code to return the modular exponentiation of two numbers.", "input": "function mod_exp(base, exponent, modulus){\n    return base^exponent % modulus;\n}", "output": "function mod_exp(base, exponent, modulus){\n    var result = 1;\n    for (var i = 0; i < exponent; i++){\n        result = (result * base) % modulus;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Given two strings str1 and str2, write a function in JavaScript to check if str1 is a substring of str2.", "input": "", "output": "function isSubstring(str1, str2){\n    if(str2.indexOf(str1) !== -1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Create a linked list with the following elements: 5, 6, 7, 8.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\nclass LinkedList:\n\n    def __init__(self):  \n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)", "category": "Python"}, {"instruction": "Match the strings \"string1\" and \"string2\" using regex.", "input": "string1=\"Hello World\"\nstring2=\"Hello*World\"", "output": "import re\n\nstring1 = \"Hello World\"\nstring2 = \"Hello*World\"\n\npattern = re.compile(string2.replace('*', '.'))\nmatch = pattern.search(string1)\n\nif match:\n    print('Matched!')", "category": "Python"}, {"instruction": "Using C++, unroll the following loop and vectorize the code.", "input": "for (int i = 0; i < 10; ++i)\n    x[i] = y[i] + z[i];", "output": "__m256 x_vec = _mm256_loadu_ps(x + 0);\n__m256 y_vec = _mm256_loadu_ps(y + 0);\n__m256 z_vec =_mm256_loadu_ps(z + 0);\n\nx_vec = _mm256_add_ps(y_vec, z_vec);\n\n_mm256_storeu_ps(x + 0, x_vec);", "category": "Python"}, {"instruction": "Produce a SQL command that retrieves the maximum and minimum values of an attribute from a table.", "input": "Table name = 'mytable'\nAttribute name = 'myattribute'", "output": "SELECT MAX(myattribute), MIN(myattribute) FROM mytable", "category": "Python"}, {"instruction": "Write a Node.js module that accepts two strings and checks if the first string contains the second string.", "input": "\"Hello World\", \"ello\"", "output": "const containsSubstring = (string, substr) => {\n    return string.indexOf(substr) !== -1;\n}\n\nmodule.exports = containsSubstring;", "category": "Python"}, {"instruction": "Generate a JavaScript code that prints all the numbers from 1 to 30.", "input": "", "output": "for(let i=1; i<=30; i++){\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Write a basic JavaScript program to request a user's name and display a greeting message with the user's name.", "input": "", "output": "let name = prompt(\"What is your name?\");\nconsole.log(`Hello ${name}, how are you doing today?`);", "category": "Python"}, {"instruction": "Convert the following HTML table into a valid JSON format.", "input": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n  <th>Country</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n  <td>USA</td>\n </tr>\n <tr>\n  <td>Jack</td>\n  <td>25</td>\n  <td>Canada</td>\n </tr>\n <tr>\n  <td>Jane</td>\n  <td>20</td>\n  <td>Australia</td>\n </tr>\n</table>", "output": "[\n  {\n   \"Name\": \"John\",\n   \"Age\": 23,\n   \"Country\": \"USA\"\n  },\n  {\n   \"Name\": \"Jack\",\n   \"Age\": 25,\n   \"Country\": \"Canada\"\n  },\n  {\n   \"Name\": \"Jane\",\n   \"Age\": 20,\n   \"Country\": \"Australia\"\n  }\n]", "category": "Python"}, {"instruction": "Develop an algorithm in Python to find the average of four numbers.", "input": "[2, 4, 8, 5]", "output": "def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)", "category": "Python"}, {"instruction": "Create a loop in JavaScript to iterate through all names in an array and print them in a sentence.", "input": "names = [\"John\", \"Jack\", \"Jane\", \"Jill\"]", "output": "for(let i = 0; i < names.length; i++) {\n console.log(\"Hello, my name is \" + names[i] + \".\")\n}", "category": "Python"}, {"instruction": "Create a PHP class called \"Car\" with public member variables.", "input": "", "output": "class Car {\n public $make;\n public $model;\n public $color;\n public $year;\n\n public function __construct($make, $model, $color, $year)\n {\n  $this->make = $make;\n  $this->model = $model;\n  $this->color = $color;\n  $this->year = $year;\n }\n}", "category": "Python"}, {"instruction": "Adjust the following SQL query so that it will return the results sorted in an ascending order.", "input": "SELECT name, age FROM users;", "output": "SELECT name, age \nFROM users \nORDER BY age ASC;", "category": "Python"}, {"instruction": "Design a JavaScript function that will accept two numbers and return their sum.", "input": "", "output": "function add(a, b) {\n return a + b;\n}", "category": "Python"}, {"instruction": "Create a Flask application to redirect the user to a given URL when the user input is valid.", "input": "", "output": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Create an array with 3 strings, \"John\", \"Sam\" and \"Anna\".", "input": "", "output": "string names[] = {\"John\", \"Sam\", \"Anna\"};", "category": "Python"}, {"instruction": "Write a Java program to display the area of a given circle.", "input": "radius = 7", "output": "public class Circle {\n\n    public static void main(String[] args) {\n        double radius = 7.0;\n        double circArea  = Math.PI * (radius * radius);\n\n        System.out.println(\"The area of the circle with radius\" + radius + \" is: \" + circArea);\n    }\n}", "category": "Python"}, {"instruction": "Create a Javascript function that calculates the median value of an array of numbers.", "input": "[2, 7, 12, 15]", "output": "function calculateMedian(arr) {\n  arr.sort(function(a, b){return a-b});\n  if (arr.length % 2 !== 0) {\n    return arr[Math.floor(arr.length / 2)];\n  }\n  else {\n    return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\n  }\n}", "category": "Python"}, {"instruction": "Write a regex expression to match the given input.", "input": "abbccd", "output": "^(a|b|c){2}d$", "category": "Python"}, {"instruction": "Set an environment variable in Bash that holds the value of the given string.", "input": "MyPassword", "output": "export MY_PASSWORD='MyPassword'", "category": "Python"}, {"instruction": "Write a Python program to add the items of two given lists and create a new list.", "input": "[1, 2, 3], [4, 5, 6]", "output": "newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]", "category": "Python"}, {"instruction": "Create an HTML <span> element with a given CSS class name.", "input": "class=\"important\"", "output": "<span class=\"important\"></span>", "category": "Python"}, {"instruction": "Reformat a given JSON string between quotes to a properly indented and formatted output.", "input": "\"{\\\"menu\\\":{\\\"id\\\":\\\"file\\\",\\\"value\\\":\\\"File\\\",\\\"popup\\\":{\\\"menuitem\\\":[{\\\"value\\\":\\\"New\\\", \\\"onclick\\\":\\\"CreateNewDoc()\\\"},{\\\"value\\\":\\\"Open\\\", \\\"onclick\\\":\\\"OpenDoc()\\\"},{\\\"value\\\":\\\"Close\\\", \\\"onclick\\\":\\\"CloseDoc()\\\"}]}}}\"", "output": "{\n  \"menu\": {\n    \"id\": \"file\",\n    \"value\": \"File\",\n    \"popup\": {\n      \"menuitem\": [\n        {\n          \"value\": \"New\",\n          \"onclick\": \"CreateNewDoc()\"\n        },\n        {\n          \"value\": \"Open\",\n          \"onclick\": \"OpenDoc()\"\n        },\n        {\n          \"value\": \"Close\",\n          \"onclick\": \"CloseDoc()\"\n        }\n      ]\n    }\n  }\n}", "category": "Python"}, {"instruction": "Use jQuery to hide all the elements with the given CSS class.", "input": "hidden", "output": "$('.hidden').hide();", "category": "Python"}, {"instruction": "Write a React component that accepts an array of strings and renders a bulleted list.", "input": "const data = [\"dog\", \"cat\", \"bird\"]", "output": "class BulletList extends React.Component {\n  render() {\n    const {data} = this.props\n    return (\n      <ul>\n        {data.map(item => <li>{item}</li>)}\n      </ul>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Create two sets and find the intersection between them.", "input": "Set A: [1, 2, 3, 4]\nSet B: [2, 4, 6, 8]", "output": "set_a = set([1, 2, 3, 4])\nset_b = set([2, 4, 6, 8])\n\nintersection = set_a.intersection(set_b)\n# intersection is the set {2, 4}", "category": "Python"}, {"instruction": "Using Pandas, count how many rows have a value of \"United States\" in the \"Country\" column.", "input": "Data: \n\nCountry\tState\nUnited States\tNew York\nCanada\tOntario\nUnited Kingdom\tLondon\nUnited States\tCalifornia", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],\n                   'State':['New York', 'Ontario', 'London', 'California']})\n\ncount = df[df['Country'] == 'United States'].shape[0]\nprint(count)\n# Output: 2", "category": "Python"}, {"instruction": "Create an HTML form with a text field for user to enter an email address and a submit button.", "input": "", "output": "<form action=\"\" method=\"post\">\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Design a function that takes an array of length n as an argument, and returns an array of the same length, where the output array consists of the elements of the input array in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    return arr[::-1]", "category": "Python"}, {"instruction": "Code a function in R which concatenates two strings of a given length and returns the resulting string.", "input": "let string1 = \"Hello\";\nlet string2 = \"World\";\nlet length = 10;", "output": "concat_strings <- function(string1, string2, length) {\n  return( substr(paste0(string1,string2), 1, length) )\n}", "category": "Python"}, {"instruction": "Create a shell script that prints out the day of the week based on the current day.", "input": "", "output": "#!/bin/bash\n \ntoday=$(date +\"%A\")\n \necho \"Today is $today\"", "category": "Python"}, {"instruction": "Write a method to calculate the average of three numbers in Python.", "input": "", "output": "def avg(num1, num2, num3):\n return (num1 + num2 + num3) / 3", "category": "Python"}, {"instruction": "Write a code segment that manipulates a Fibonacci sequence until the sum is greater than a given number.", "input": "10", "output": "def fibonacci_sum(number):\n    fib_list = [0,1]\n    while True:\n        next_number = fib_list[-1] + fib_list[-2]\n        if next_number > number:\n            break\n        fib_list.append(next_number)\n    return sum(fib_list[:-1])", "category": "Python"}, {"instruction": "Create a function to determine if two strings are symmetrical.", "input": "", "output": "def is_symmetrical(str1, str2):\n    for i in range(0, len(str1)):\n        if str1[i] != str2[-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Generate the first 8 Fibonacci numbers after a starting number of 0.", "input": "", "output": "[0, 1, 1, 2, 3, 5, 8, 13]", "category": "Python"}, {"instruction": "Create a program to find the maximum difference between two elements in an array.", "input": "[9,4,57,28,24,10]", "output": "53", "category": "Python"}, {"instruction": "Count the number of sub strings of length 3 that are present in the sentence.", "input": "This is an example sentence", "output": "7", "category": "Python"}, {"instruction": "Print the words in the given string that are longer than 5 characters.", "input": "\"This is a test string for a coding challenge\"", "output": "This \nstring \nchallenge", "category": "Python"}, {"instruction": "Create a program to print out a given message in reverse.", "input": "Hello World!", "output": "!dlroW olleH", "category": "Python"}, {"instruction": "Separate the given array of numbers into two new arrays, where one array contains even numbers and the other array contains odd numbers.", "input": "[9, 4, 57, 28, 24, 10]", "output": "even_array = [4, 28, 24, 10]\nodd_array = [9, 57]", "category": "Python"}, {"instruction": "Output the second maximum number in a list.", "input": "[9, 4, 57, 28, 24, 10]", "output": "28", "category": "Python"}, {"instruction": "Code a function that takes a dictionary as a parameter and prints out the key-value pairs.", "input": "", "output": "def print_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5.", "input": "", "output": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Design an HTML page to display a timer with minutes and seconds.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Timer</title>\n    </head>\n    <body>\n        <h1>Timer</h1>\n        <p>\n            <span id=\"minutes\">00</span>:<span id=\"seconds\">00</span>\n        </p>\n        <script>\n            let minutes = 0;\n            let seconds = 0;\n\n            setInterval(function(){\n                seconds++;\n\n                if (seconds >= 60) {\n                    minutes++;\n                    seconds = 0;\n                }\n\n                document.getElementById(\"minutes\").innerHTML = minutes;\n                document.getElementById(\"seconds\").innerHTML = seconds;\n            }, 1000);\n        </script>\n\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a Java program to compare two strings and check if they are equal or not.", "input": "String s1 = \"Hello\";\nString s2 = \"World\";", "output": "public static boolean compareStrings(String s1, String s2) {\n    return s1.equals(s2);\n}", "category": "Python"}, {"instruction": "Design a SQL query to get the salary of employee who has the maximum salary in each department.", "input": "", "output": "SELECT emp.name, emp.salary \nFROM employees emp \nJOIN (SELECT dept, MAX(salary) max_salary\n    FROM employees\n    GROUP BY dept) temp\nON emp.dept = temp.dept AND \nemp.salary = temp.max_salary;", "category": "Python"}, {"instruction": "Generate a SQL query to find all the table names in a database.", "input": "", "output": "SELECT TABLE_NAME \nFROM information_schema.tables \nWHERE table_schema = '<database_name>';", "category": "Python"}, {"instruction": "Implement an algorithm to find the power of a number.", "input": "Base: 2, Exponent: 3", "output": "def power(base, exponent):\n result = 1\n while exponent > 0:\n result *= base\n exponent -= 1\n return result\nresult = power(2, 3)\nprint(result)\n# 8", "category": "Python"}, {"instruction": "Create part of an Angular component that shows a message \"Welcome to our website!\"", "input": "", "output": "<p>Welcome to our website!</p>", "category": "Python"}, {"instruction": "Create an HTML form with one text field and one submit button.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Find the difference between two given Unix timestamps.", "input": "1587797520, 1587798320", "output": "difference = 1587798320 - 1587797520 = 800 seconds", "category": "Python"}, {"instruction": "Create a table using JavaScript with three columns, \"Name\", \"Age\", and \"Country\".", "input": "", "output": "<table id=\"exampleTable\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Country</th>\n  </tr>\n</table>\n\n<script>\n  const exampleTable = document.getElementById('exampleTable');\n  const rows = [];\n  const columns = [\"Name\", \"Age\", \"Country\"];\n\n  columns.forEach((columnName) => {  \n  const newRow = document.createElement('tr'); \n  newRow.innerHTML = `<td>${columnName}</td>`;\n  rows.push(newRow);\n });\n\n exampleTable.append(...rows);\n</script>", "category": "Python"}, {"instruction": "Create a Python dictionary with the key-value: \"Alice\": 28", "input": "", "output": "example_dict = {'Alice': 28}", "category": "Python"}, {"instruction": "Create a Go program to read an integer value from the command line and calculate its square.", "input": "", "output": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n)\n\nfunc main() {\n    if len(os.Args) < 2 {\n        fmt.Println(\"Usage : go run main.go <num>\")\n        os.Exit(1)\n    }\n\n    num, _ := strconv.Atoi(os.Args[1])\n    sq := num * num\n\n    fmt.Println(\"Square of \", os.Args[1], \"is\", sq)\n}", "category": "Python"}, {"instruction": "What programming language did Microsoft use to create its Edge browser?", "input": "", "output": "Microsoft used their own programming language called ChakraCore to create the Edge browser. ChakraCore is a JavaScript engine which is optimized for Edge. It is based on the Chakra engine which was originally developed to power Microsoft's Internet Explorer browser.", "category": "Python"}, {"instruction": "Find the maximum element in a given array (unsorted) using a linear search approach.", "input": "[10, 5, 15, 80, 25]", "output": "\"\"\"\nFind the maximum element in a given array (unsorted) using a linear search approach\n\"\"\"\n\ndef linear_search_max(arr):\n    max_element = arr[0]\n    for elem in arr[1:]:\n        if elem > max_element:\n            max_element = elem\n    return max_element\n\nif __name__ == '__main__':\n    arr = [10, 5, 15, 80, 25]\n    max_element = linear_search_max(arr)\n    print(max_element)", "category": "Python"}, {"instruction": "Design a program that prints out the multiplication table up to 12 x 12.", "input": "", "output": "\"\"\"\nDesign a program that prints out the multiplication table up to 12 x 12\n\"\"\"\n\nfor i in range(1, 13):\n    for j in range(1, 13):\n        print('{} x {} = {}'.format(i, j, i * j))\n    print(\"\")", "category": "Python"}, {"instruction": "Devise a function that converts a number represented in the binary system to a decimal number.", "input": "1100", "output": "\"\"\"\nDevise a function that converts a number represented in the binary system to a decimal number\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 1\n        number //= 10\n    return decimal", "category": "Python"}, {"instruction": "Write a code to select records from a database where the country name is identical to the input.", "input": "Australia", "output": "\"\"\"\nSelect records from the database where the country name is identical to the input\n\"\"\"\n\nimport sqlite3\n\ncountry = 'Australia'\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\nquery = \"SELECT * FROM countries WHERE name = ?\"\nc.execute(query, (country,))\n\ndata = c.fetchall()\n\nconn.close()", "category": "Python"}, {"instruction": "Compute the number of days since January 1st, 1971 until the given date.", "input": "May 3rd, 2012", "output": "\"\"\"\nCalculate the number of days since January 1st, 1971 until the given date\n\"\"\"\n\nimport datetime as dt\n\ndef num_days(date_str):\n    datetime_object = dt.datetime.strptime(date_str, \"%B %d, %Y\").date()\n    ref_date = dt.datetime(1971, 1, 1).date()\n    return (datetime_object - ref_date).days\n\nif __name__ == '__main__':\n    print(num_days('May 3rd, 2012'))", "category": "Python"}, {"instruction": "Write a query in MySQL to find the most popular item in a store", "input": "", "output": "SELECT item_name, COUNT(*) AS NumberOfOrders\nFROM orders \nGROUP BY item_name\nORDER BY NumberOfOrders DESC\nLIMIT 1", "category": "Python"}, {"instruction": "Create a function to calculate the exponent of a given number x raised to power y.", "input": "", "output": "def exponent(x,y): \n    if(y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        y = int(y / 2) \n        return exponent(x, y) * exponent(x, y) \n    else: \n        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) \n\nexponent(5,3) # Output: 125", "category": "Python"}, {"instruction": "Rewrite this code in a more efficient way making use of the built-in sort functions.", "input": "my_list = [3, 2, 1]\nfor i in range(len(my_list)):\n    for j in range(len(my_list)-1):\n        if my_list[j] > my_list[j+1]:\n            my_list[j], my_list[j+1] = my_list[j+1], my_list[j]", "output": "\"\"\"\nRewrite this code in a more efficient way making use of the built-in sort functions\n\"\"\"\n\nmy_list = [3, 2, 1]\nmy_list.sort()", "category": "Python"}, {"instruction": "Create a shell script to print the version of a given program.", "input": "Program: java", "output": "#!/bin/bash\n\necho $(java -version 2>&1)", "category": "Python"}, {"instruction": "Create an HTML page displaying the results from a given query.", "input": "", "output": "<html>\n    <head>\n        <title>Query Results</title>\n    </head>\n    <body>\n        <table>\n            <thead>\n                <tr>\n                    <th>Field1</th>\n                    <th>Field2</th>\n                    <th>Field3</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php\n                    $query_result = execute_query();\n                    while($row = $query_result->fetch_assoc()){\n                        echo '<tr>\n                                <td>'.$row['field1'].'</td>\n                                <td>'.$row['field2'].'</td>\n                                <td>'.$row['field3'].'</td>\n                            </tr>';\n                    }\n                ?>\n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a python function to detect if two lists contain the same items in different order.", "input": "", "output": "def compare_lists(list1, list2):\n    return sorted(list1) == sorted(list2)", "category": "Python"}, {"instruction": "Write a Python function to compute the total amount of a given grocery bill after taxes.", "input": "items = [('apple', 1.49), ('banana', 0.99), ('bread', 4.99)]", "output": "def compute_total_after_taxes(items):\n tax = 0.07\n total = 0\n for item in items:\n  price = item[1]\n  tax_amount = price * tax\n  total += price + tax_amount\n return round(total, 2)", "category": "Python"}, {"instruction": "Write a Python function to add an item to a given list.", "input": "", "output": "def add_item(items, item):\n items.append(item)\n return items", "category": "Python"}, {"instruction": "Create a Python dictionary to store information about a student. The student should have the following attributes: name, age, grades, and graduation year.", "input": "", "output": "student = {\n 'name': '',\n 'age': 0,\n 'grades': [],\n 'graduation_year': 0\n}", "category": "Python"}, {"instruction": "Write a Python function to convert temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(f):\n return (f - 32) * 5 / 9", "category": "Python"}, {"instruction": "Provide an input to the following code so that it prints out the sum of all numbers between 1 and 5.", "input": "", "output": "# initialise sum\nsum = 0\n\n# loop over given range\nfor i in range(1, 6):\n    sum += i\n\nprint(sum)\n# Output: 15", "category": "Python"}, {"instruction": "Generate a code to convert a given number to its English word equivalent.", "input": "", "output": "# dictionary to convert numbers to words\nnumber_words = {0 : 'zero', 1: 'one', 2 : 'two',\n                3 : 'three', 4 : 'four', 5 : 'five', \n                6 : 'six', 7 : 'seven', 8 : 'eight', \n                9 : 'nine', 10 : 'ten'}\n\n# convert number to string\ndef convert_to_words(n):\n    if n in number_words:\n        return number_words[n]\n    return \"\"\n\n# Driver code\nprint(convert_to_words(5))\n# Output: five", "category": "Python"}, {"instruction": "Edit the given code to print out the largest even number in the given list.", "input": "lst = [1, 8, 9, 10, 6]", "output": "lst = [1, 8, 9, 10, 6]\n\neven_nums = []\n\nfor num in lst:\n    if num % 2 == 0:\n        even_nums.append(num)\n\nif even_nums:\n    print(max(even_nums))\nelse:\n    print(\"No even numbers in the list.\")\n# Output: 10", "category": "Python"}, {"instruction": "Construct a code that finds the area of a given circle.", "input": "", "output": "def area(radius):\n  return 3.14 * radius * radius\n\nprint(area(5))\n# Output: 78.5", "category": "Python"}, {"instruction": "Create a program to guess a secret number between 1 and 100.", "input": "", "output": "# secret number\nsecret_number = 42\n\n# user guess\nguess = 0\n\n# guessing loop\nwhile guess != secret_number:\n    \n    # ask user to enter a guess\n    guess = int(input(\"Guess a number between 1 and 100: \"))\n\n    # provide hints\n    if guess < secret_number:\n        print(\"Too low. Try something higher.\")\n    elif guess > secret_number:\n        print(\"Too high. Try something lower.\")\n    else:\n        print(\"You guessed it! The secret number was {}\".format(secret_number))", "category": "Python"}, {"instruction": "Write a code to get the number of unique elements in a given list.", "input": "", "output": "def count_unique_elements(lst):\n  unique_elements = set(lst)\n  return len(unique_elements)\n\nprint (count_unique_elements([1,2,3,2,3,4,5]))\n# Output: 5", "category": "Python"}, {"instruction": "Construct a for loop to print out each character of a given string in a new line.", "input": "String: Hello world", "output": "for char in \"Hello world\":\n    print(char)", "category": "Python"}, {"instruction": "Write a script in Python for drawing a rectangle on the screen.", "input": "", "output": "import pygame \n  \n# Initialize the game engine \npygame.init() \n  \n# Define the colors \nBLACK = (0, 0, 0) \nWHITE = (255, 255, 255) \n  \n# Set the window size \nsize = (400, 500) \nscreen = pygame.display.set_mode(size) \n  \n# Iterate over the list of rectangles \nrects = [pygame.Rect(75, 150, 150, 50), \n         pygame.Rect(200, 150, 150, 50)] \n  \n# Iterate over the list of rectangles \nfor rect in rects: \n    pygame.draw.rect(screen, WHITE, rect) \n  \n# Update the display \npygame.display.flip()", "category": "Python"}, {"instruction": "Sort a numerical array from smallest to largest in C++.", "input": "[4, 2, 5, 1, 3]", "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  vector<int> arr = {4, 2, 5, 1, 3};\n  sort(arr.begin(), arr.end());\n  for(int i : arr)\n    cout << i << \" \";\n  return 0;\n}", "category": "Python"}, {"instruction": "Construct a logic circuit that implements a three input AND gate.", "input": "", "output": "[Logic Circuit for Three Input AND Gate]", "category": "Python"}, {"instruction": "Write a React component to display a list of items in an unordered list.", "input": "const listItems = [\"Apples\", \"Bananas\", \"Cherries\"", "output": "import React from 'react';\n\nconst ListItems = props => {\n  const items = props.listItems.map(item => (\n    <li key={item}>{item}</li>\n  ));\n\n  return (\n    <ul>\n      {items}\n    </ul>\n  );\n};\n\nexport default ListItems;", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary from two given lists. The first list should be the keys and the second list should be the values.", "input": "", "output": "def create_dict(keys, values):\n return dict(zip(keys, values))", "category": "Python"}, {"instruction": "Create a function in Python to calculate the sum of the square of all numbers from 1 to n.", "input": "", "output": "def sum_squares(n): \n   total = 0\n   for x in range(1,n+1): \n      total += x * x\n   return total", "category": "Python"}, {"instruction": "Design a C++ program to get the frequency of a subarray in an array.", "input": "arr = [1,2,2,2,2,2,3,4,5], subarr = [2,2]", "output": "int getFrequency(int arr[], int n, int subarr[], int m) \n{ \n    int count = 0; \n    for (int i = 0; i <= (n - m); i++) \n    { \n       int j;\n       for (j = 0; j < m; j++)\n       {\n          if (arr[i + j] != subarr[j])\n              break; \n       }\n       if (j == m) \n       count++;\n    }\n    return count; \n}", "category": "Python"}, {"instruction": "Design a C program to check if a year is leap year or not.", "input": "", "output": "# include<stdio.h> \nint main() \n{ \n    int year; \n  \n    printf(\"Enter a year: \"); \n    scanf(\"%d\",&year); \n  \n    if (year%400 == 0) \n    printf(\"%d is a leap year\", year); \n    else if (year%100 == 0) \n    printf(\"%d is not a leap year\", year); \n    else if (year%4 == 0) \n    printf(\"%d is a leap year\", year); \n    else\n    printf(\"%d is not a leap year\", year); \n      \n    return 0;  \n}", "category": "Python"}, {"instruction": "Create a database table using SQL to store user preferences.", "input": "", "output": "CREATE TABLE user_preferences (\n    user_id INTEGER,\n    preference VARCHAR (50)\n);", "category": "Python"}, {"instruction": "Query a MongoDB to get all documents with a certain field value.", "input": "", "output": "def query_mongo(collection, field_name, field_value):\n    query = {field_name: field_value}\n    documents = collection.find(query)\n    return list(documents)", "category": "Python"}, {"instruction": "Generate a simple python function to concatenate two lists.", "input": "", "output": "def concatenate_lists(list1, list2):\n    return list1 + list2", "category": "Python"}, {"instruction": "Explain what is hyperparameter tuning and provide a basic example.", "input": "", "output": "Hyperparameter tuning is the process of selecting the optimal hyperparameters of a machine learning algorithm. Hyperparameters are static values that define the behaviors and characteristics of the algorithm, such as learning rate, activation functions and regularization terms. An example of hyperparameter tuning is selecting the optimal learning rate for a neural network so that it converges faster and produces better results.", "category": "Python"}, {"instruction": "What is the purpose of a user interface (UI)?", "input": "", "output": "The purpose of a user interface (UI) is to provide an efficient and user-friendly interface for interacting with a device or application. It includes visual components like forms, menus, buttons and other tools that allow users to input information, perform tasks and receive output.", "category": "Python"}, {"instruction": "Identify three patterns in the following list of numbers: 1, 4, 6, 10, the 15.", "input": "", "output": "The three patterns identified in the list of numbers are: an increasing sequence (1, 4, 6, 10, 15), odd numbers (1, 3, 5, 10, 15), and composite numbers (4, 6, 10, 15).", "category": "Python"}, {"instruction": "Modify the following SQL query to also return the age of the people.", "input": "SELECT name FROM people;", "output": "SELECT name, age FROM people;", "category": "Python"}, {"instruction": "Write a SQL query to get the products that have been purchased in the last month", "input": "", "output": "SELECT *\nFROM products\nWHERE purchase_date > (NOW() - INTERVAL 1 MONTH)", "category": "Python"}, {"instruction": "How can you delete a row in an SQL database?", "input": "", "output": "You can delete a row in an SQL database using the DELETE statement. The syntax for this statement is DELETE FROM table_name WHERE condition;", "category": "Python"}, {"instruction": "Convert the following code written in Java to C++.", "input": "String s = \"It's raining today\";", "output": "std::string s = \"It's raining today\";", "category": "Python"}, {"instruction": "What is the name of the machine learning algorithm used to find patterns in data?", "input": "", "output": "The machine learning algorithm used to find patterns in data is called clustering.", "category": "Python"}, {"instruction": "Design a neural network architecture in TensorFlow to predict the sentiment of a movie review", "input": "", "output": "model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a web page in HTML to view a list of books", "input": "", "output": "<html>\n  <head>\n    <title>List of Books</title>\n  </head>\n  <body>\n    <h1>List of Books</h1>\n    <ul>\n      <li>The Alchemist</li>\n      <li>Life of Pi</li>\n      <li>The Great Gatsby</li>\n      <li>The Catcher in the Rye</li>\n      <li>Harry Potter and the Sorcerer's Stone</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Compare two strings using Java", "input": "", "output": "public static int compare(String s1, String s2) {\n    return s1.compareTo(s2);\n}", "category": "Python"}, {"instruction": "Write a code to delete all empty values in a given dictionary.", "input": "my_dict = {'a': '', 'b': False, 'c': 0, 'd': None}", "output": "def delete_empty_values(d):\n    new_dict = {key: value for key, value in d.items() if value != 0 and value != False and value != None and value != ''}\n    return new_dict \n\nmy_dict = delete_empty_values(my_dict)\nprint(my_dict) # Output -> {'b': False}", "category": "Python"}, {"instruction": "Construct an object with 3 properties of different data types.", "input": "", "output": "object = {\"name\": \"John Doe\", \"age\": 18, \"isActive\": False}", "category": "Python"}, {"instruction": "Write a Regex expression to match a string containing the words \"hello\" and \"world\".", "input": "", "output": "\\bhello\\b.*\\bworld\\b", "category": "Python"}, {"instruction": "Suggest a MySql query to check if a given table contains a record with specified column values.", "input": "Table: \"customers\"\nColumns: [name, age]\nRecord: [\"John\", 33]", "output": "SELECT * \nFROM customers \nWHERE name = 'John' AND age = 33;", "category": "Python"}, {"instruction": "Write a Pandas code to drop all rows with missing values from a given dataframe.", "input": "Dataframe name: df", "output": "df.dropna(inplace=True)", "category": "Python"}, {"instruction": "Write a Java program to print the Fibonacci sequence starting from given number.", "input": "Starting Number: 10", "output": "public class Fibonacci { \n \n    public static void main(String[] args) { \n  \n        int n1 = 10, n2 = 0, n3, i; \n\n        System.out.print(n1 + \" \"); \n        for (i = 1; i <= 8; ++i) { \n            n3 = n1 + n2; \n            System.out.print(n3 + \" \"); \n            n1 = n2; \n            n2 = n3; \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a C++ program to concatenate two string variables.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "#include <iostream>\n#include <string>\n \nint main() {\n \n   std::string string1 = \"Hello\";\n   std::string string2 = \"World\";\n \n   std::string concatenation = string1 + \" \" + string2;\n \n   std::cout << concatenation;\n   return 0;\n}", "category": "Python"}, {"instruction": "Create an HTML page with a table containing the name and age of 5 people.", "input": "Name       Age\nJohn       25\nLisa       22\nEmily      19\nGeorge     21\nSamuel     20", "output": "<html>\n  <head>\n    <title>People Age Table</title>\n  </head>\n \n  <body>\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n      </tr>\n      \n      <tr>\n        <td>John</td>\n        <td>25</td>\n      </tr>\n      <tr>\n        <td>Lisa</td>\n        <td>22</td>\n      </tr>\n      <tr>\n        <td>Emily</td>\n        <td>19</td>\n      </tr>\n      <tr>\n        <td>George</td>\n        <td>21</td>\n      </tr>\n      <tr>\n        <td>Samuel</td>\n        <td>20</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a function in Java to convert a string of comma-separated values into an array.", "input": "data = \"Banana, Apple, Apricot\"", "output": "public static String[] convertStringToArray(String data) {\n \n    String[] elements = data.split(\",\");\n \n    // Trim all the elements\n    for (int i = 0; i < elements.length; i++) {\n        elements[i] = elements[i].trim();\n    }\n \n    return elements;\n}", "category": "Python"}, {"instruction": "Develop a code to delete a given element from a list.", "input": "[3, 6, 8, 14], element: 14", "output": "def delete_element(given_list, element):\n    for i in range(len(given_list)):\n        if given_list[i] == element:\n            del given_list[i]\n            break\n    return given_list", "category": "Python"}, {"instruction": "Construct a program which takes two numbers as input and returns the multiplication of these numbers.", "input": "8, 4", "output": "def multiplication(num1, num2):\n    return num1 * num2", "category": "Python"}, {"instruction": "Develop a code to sort a list in ascending or descending order.", "input": "givenList: [5, -3, 2, 4, 0], sortOrder: \"ascending\"", "output": "def sort_list(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n    return givenList", "category": "Python"}, {"instruction": "Design a code to search a given element x in a vector.", "input": "vector: [3, 17, 5, 11], x: 5", "output": "def search_x(x, vector):\n    for i in range(len(vector)):\n        if vector[i] == x:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Create a function that returns the maximum element of a given list.", "input": "Given List: [3, 12, 2, 6, -9]", "output": "def max_val(list):\n    max_val = list[0]\n    for i in range(len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n    return max_val", "category": "Python"}, {"instruction": "Create a JavaScript code to insert a given item at the specified position in an array.", "input": "item = \"hello world\", position = 2", "output": "function insertAtPosition(item, position, array) {\n    array.splice(position, 0, item);\n    return array;\n}", "category": "Python"}, {"instruction": "Create a Java program to implement a doubly linked list with the following operations: insert, delete, display.", "input": "", "output": "class Node { \n    int data; \n    Node previous; \n    Node next;  \n    public Node(int data) { \n        this.data = data; \n        this.previous = null; \n        this.next = null; \n    } \n} \n  \nclass DoublyLinkedList { \n    Node head; \n  \n    // Inserts a new Node at front of the list \n    public void push(int new_data) \n    { \n        Node new_node = new Node(new_data); \n  \n        new_node.next = head; \n        new_node.previous = null; \n  \n        if (head != null) \n            head.previous = new_node; \n  \n        head = new_node; \n    } \n  \n    // Delete a node from the list \n    void deleteNode(Node node_ptr) \n    { \n        // If node to be deleted is head node \n        if (head == node_ptr) \n            head = node_ptr.next; \n  \n        // Change next only if node to be deleted  \n        // is NOT the last node \n        if (node_ptr.next != null) \n            node_ptr.next.previous = node_ptr.previous; \n  \n        // Change prev only if node to be deleted  \n        // is NOT the first node \n        if (node_ptr.previous != null) \n            node_ptr.previous.next = node_ptr.next; \n    } \n  \n    // Display linked list \n    public void display() \n    { \n        Node last = null; \n        System.out.println(\"Doubly Linked List in forward \\n\"); \n        while (head != null) { \n            System.out.print(head.data + \" <=> \"); \n            last = head; \n            head = head.next; \n        } \n        System.out.println(\"null\\n\"); \n  \n        System.out.println(\"Doubly Linked List in reverse \\n\"); \n        while (last != null) { \n            System.out.print(last.data + \" <=> \"); \n            last = last.previous; \n        } \n        System.out.println(\"null\\n\"); \n    } \n}", "category": "Python"}, {"instruction": "Debug a logic error in this JavaScript code that returns the wrong result.", "input": "function multiply(a,b) {\n    return a + b;\n}", "output": "function multiply(a,b) {\n    return a * b;\n}", "category": "Python"}, {"instruction": "Create an HTML code to produce a form which contains two text fields (username and password) and submit button.", "input": "", "output": "<form>\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\" required>\n    <br/><br/>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\" required>\n    <br/><br/>\n    <input type=\"submit\" value=\"Submit\" >\n</form>", "category": "Python"}, {"instruction": "Write a code to wrap a text in a box, with the given length and padding parameters.", "input": "text = \"Hello World!\", length = 20, padding = 5", "output": "def wrap_in_box(text, length, padding): \n    border = \"\"\n    for i in range(length): \n        border += \"-\"\n    space = \"\"\n    for i in range(padding):\n        space += \" \"\n    text = space + text + space \n    if len(text) > length:\n        text = text[:length-1]\n    text = text.center(length)\n    print(border)\n    print(text)\n    print(border)", "category": "Python"}, {"instruction": "Explain the concept behind the Python decorator.", "input": "", "output": "Python decorator is a function which takes another function as argument and extends the behavior of that function without modifying its code. It allows developers to modify the behavior of a function, class or method at runtime without changing the code itself. Decorators are heavily used in frameworks like Flask and Django which are based on the MVC pattern. Decorators allow developers to easily modify and extend the code without having to rewrite it.", "category": "Python"}, {"instruction": "Given the class definition below, write a method to calculate the discount.", "input": "class DiscountCalculator:\n   def __init__(self, price, cash_coupon, percentage_coupon):\n       self.price = price\n       self.cash_coupon = cash_coupon\n       self.percentage_coupon = percentage_coupon", "output": "def calculate_discount(self):\n    discount = self.price - (self.cash_coupon + (self.price * self.percentage_coupon / 100))\n    return discount", "category": "Python"}, {"instruction": "Write a SQL query to show the first 10 customers in an alphabetical order, sorted by their last name.", "input": "Table Customers: id, first_name, last_name", "output": "SELECT first_name, last_name FROM Customers ORDER BY last_name ASC LIMIT 10", "category": "Python"}, {"instruction": "Write a JavaScript expression to remove all even numbers in an array.", "input": "", "output": "function removeEvens(numbers) {\n  return numbers.filter((num) => num % 2 !== 0);\n}", "category": "Python"}, {"instruction": "Create a class in Java that encapsulates a student's name and grade point average (GPA).", "input": "", "output": "public class Student {\n \n private String name;\n private double gpa;\n \n public Student(String name, double gpa) {\n  this.name = name;\n  this.gpa = gpa;\n }\n \n public String getName() {\n  return name;\n }\n \n public double getGPA() {\n  return gpa;\n }\n}", "category": "Python"}, {"instruction": "given a sentence, Write a JavaScript program to find out whether the sentence contains all the vowels.", "input": "let sentence = \"This is an example sentence\";", "output": "function findVowels(sentence) { \n  let count = 0; \n  let vowels = \"aeiou\"; \n  for (let char of sentence.toLowerCase()) { \n     if (vowels.indexOf(char) !== -1) { \n        count++; \n    } \n  } \n  return count === 5; \n}", "category": "Python"}, {"instruction": "Write a boolean expression for the statement \"4 is greater than 5\".", "input": "", "output": "4 > 5", "category": "Python"}, {"instruction": "Using Java, write a program to find the sum of natural numbers from 1 to an input number.", "input": "10", "output": "public class Sum {\n\n    public static void main(String[] args) {\n        int num = 10;\n        int sum = 0;\n\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of natural numbers from 1 to \" + num + \" is \" + sum);\n    }\n}", "category": "Python"}, {"instruction": "There is a string of code. Can you tell me if there are syntax errors in it?", "input": "def foo():\n    print('bar", "output": "true", "category": "Python"}, {"instruction": "Generate a random letter between a and z.", "input": "", "output": "p", "category": "Python"}, {"instruction": "Convert the given input string to lower case keeping all other characters same.", "input": "FEDCbA", "output": "fedcba", "category": "Python"}, {"instruction": "Write a method to find duplicate elements in an array of integers.", "input": "", "output": "We can solve this problem using a HashSet. We traverse the array and insert the elements in the HashSet. If the element already exists in the HashSet, then it is a duplicate.\n\npublic static boolean findDuplicate(int[] arr) {\n    Set<Integer> set = new HashSet<Integer>();\n    \n    for(int i = 0; i < arr.length; i++) {\n        if(set.contains(arr[i])) {\n            return true;\n        }\n        set.add(arr[i]);\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Implement FTP server in Python", "input": "", "output": "import ftplib\n\ndef start_ftp_server(host, port, user, password):\n    server = ftplib.FTP()\n    server.connect(host, port)\n    server.login(user, password)\n    print('FTP Server started successfully')\n\nstart_ftp_server('localhost', 21, 'testuser', 'testpass')", "category": "Python"}, {"instruction": "Create a function in PHP that reverses the order of an array.", "input": "[3, 5, 8, 1, 9, 12]", "output": "function reverse_array($a) {\n  $n = count($a);\n  $temp=null;\n  for ($i=0; $i<$n/2; $i++) {\n    $temp = $a[$i];\n    $a[$i] = $a[$n-$i-1];\n    $a[$n-$i-1] = $temp;\n  }\n  return $a;\n}\n\nprint_r(reverse_array([3, 5, 8, 1, 9, 12]));\n\nOutput: Array ( [0] => 12 [1] => 9 [2] => 1 [3] => 8 [4] => 5 [5] => 3 )", "category": "Python"}, {"instruction": "Create a React component with \"Employee\" as the title and \"Name\" and \"Age\" as the heading.", "input": "", "output": "import React, {Component} from 'react';\nclass Employee extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Employee</h1>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Age</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td></td>\n              <td></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default Employee;", "category": "Python"}, {"instruction": "Generate an HTML page using the defined header and footer.", "input": "Header:\n<head>\n   <title>My Page</title>\n</head>\n\nFooter:\n<div id=\"footer\">\n   <p>Copyright \u00a9 2020 MyPage</p>\n</div>", "output": "<html>\n   <head>\n      <title>My Page</title>\n   </head>\n   <body>\n      <div id=\"content\">\n         <h1>My Page</h1>\n      </div>\n      <div id=\"footer\">\n         <p>Copyright \u00a9 2020 MyPage</p>\n      </div>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Correct the following code in Java.", "input": "public class HelloWorld \n{\n    public static Void main(String[] args) \n    {\n        System.out.println(\"Hello World!\"):\n    }\n}", "output": "public class HelloWorld \n{\n    public static void main(String[] args) \n    {\n        System.out.println(\"Hello World!\");\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following code to output the result in the command line using Node.js", "input": "let sum = 10 + 20", "output": "let sum = 10 + 20;\n\nconsole.log(sum); // Outputs 30", "category": "Python"}, {"instruction": "Print the output of adding two integers in Java.", "input": "int a = 10; int b = 20;", "output": "int a = 10;\nint b = 20;\n\nint c = a + b;\nSystem.out.println(c); // Outputs 30", "category": "Python"}, {"instruction": "Write a code to create a function to rotate a given linked list.", "input": "", "output": "\"\"\"\nCreate a function to rotate a given linked list\n\"\"\"\n\n# Create a class node\nclass Node: \n\t# Create a constructor to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\nclass LinkedList: \n\t# Create a constructor to initialise the linked list \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Create a function to rotate the linked list \n\tdef rotate(self, index):\n\t\tif (index == 0): \n\t\t\treturn\n\t\tprev = None            \n\t\tcurr = self.head\n\t\twhile (index > 0):\n\t\t\tprev = curr\n\t\t\tcurr = curr.next\n\t\t\tindex -= 1\n\t\t\n\t\tprev.next = None\n\t\tself.head = curr\n\t\twhile (curr.next != None):\n\t\t\tcurr = curr.next\n\t\tcurr.next = self.head", "category": "Python"}, {"instruction": "Given a 2 dimensional array, create a code to transpose the array.", "input": "", "output": "def transpose_matrix(matrix): \n\trow = len(matrix) \n\tcol = len(matrix[0]) \n\ttranspose = [[0 for j in range(row)] for i in range(col)] \n  \n\tfor i in range(row): \n\t\tfor j in range(col): \n\t\t\ttranspose[j][i] = matrix[i][j] \n  \n\treturn transpose \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(transpose_matrix(matrix))", "category": "Python"}, {"instruction": "Write a code to create a dictionary containing the frequency of each word in a given string.", "input": "S = \"hello world\"", "output": "def word_frequency(S): \n  frequency = dict() \n  words = S.split() \n  \n  for word in words: \n    if word in frequency: \n        frequency[word] += 1\n    else: \n        frequency[word] = 1\n  \n  return frequency\n\nprint(word_frequency(S))", "category": "Python"}, {"instruction": "Compress the following string using LZW compression.", "input": "Input: \u2018ABBBCDCDEFFG\u2019", "output": "The compressed string would be \u2018A1B3C1D1E1F2G1\u2019.", "category": "Python"}, {"instruction": "Edit the following HTML code to add a link to an external website.", "input": "<div>\n  <p>Hello!</p>\n</div>", "output": "<div>\n  <p>Hello! <a href=\"https://www.example.com\" target=\"_blank\">Visit my website</a></p>\n</div>", "category": "Python"}, {"instruction": "Create a function in Javascript to return an array containing the numbers from 1 to 10.", "input": "", "output": "function generateArray() {\n    let arr = [];\n    for (let i = 1; i <= 10; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\n\nconsole.log(generateArray());\n\nOutput: [1,2,3,4,5,6,7,8,9,10]", "category": "Python"}, {"instruction": "What are the advantages of using a graphical user interface?", "input": "", "output": "The advantages of using a graphical user interface (GUI) include improved usability and accessibility, better visual communication of information, easier drag-and-drop capabilities, improved data visualization, and the ability to add graphics, sound and video to enhance user experience. GUI's also facilitate multi-tasking, allowing users to view and manipulate multiple windows and documents simultaneously.", "category": "Python"}, {"instruction": "How many bytes are there in a megabyte?", "input": "", "output": "A megabyte is equal to 1,048,576 bytes.", "category": "Python"}, {"instruction": "Create a program to convert kilometers to miles in C++.", "input": "Convert 10 kilometers to miles", "output": "#include <iostream> \nusing namespace std; \n\nfloat kms_to_miles(float kms)\n{\n    return kms * 0.621;\n}\n\nint main()\n{\n    float kms = 10;\n    cout << kms << \" kilometers is equal to \" << kms_to_miles(kms) << \" miles\";\n    return 0;\n}", "category": "Python"}, {"instruction": "Design an algorithm to swap two numbers in Python.", "input": "Swap 10 and 20", "output": "def swapNumbers(a, b): \n  temp = a \n  a = b \n  b = temp \n \n  print(\"After swapping: a =\", a, \" b =\", b) \n\n# Driver program \na = 10\nb = 20\nswapNumbers(a, b)", "category": "Python"}, {"instruction": "Generate an SQL query to calculate the average age of all employees from the table 'employees'.", "input": "", "output": "SELECT AVG(age) FROM employees;", "category": "Python"}, {"instruction": "Generate a correct C++ code to delete the second item from an array.", "input": "Delete the second item from the array [5, 3, 10, 8]", "output": "int array[4] = {5, 3, 10, 8};\n\nfor(int i = 1; i < 4; i++)\n    array[i] = array[i+1];\n \n//Decrement the size of array  \nint n = sizeof(array)/sizeof(array[0]);\nn = n - 1;", "category": "Python"}, {"instruction": "Generate a code in Java to compute the average of 5 numbers.", "input": "Compute the average of 8, 5, 10, 3 and 9", "output": "public class Average { \n    public static void main(String args[]) \n    { \n        double nums[] = {8, 5, 10, 3, 9}; \n        double result = 0; \n        int i; \n  \n        for (i=0; i<5; ++i) { \n            result = result + nums[i]; \n        } \n        System.out.println(\"Average is \" + result / 5); \n    } \n}", "category": "Python"}, {"instruction": "Write an HTML code to create a form with input fields for name, age and email address.", "input": "", "output": "<form>\n  Name: <input type=\"text\" name=\"name\"><br>\n  Age: <input type=\"number\" name=\"age\"><br>\n  Email: <input type=\"email\" name=\"email\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Given two linked lists, write a Java program to merge them.", "input": "The two linked lists are:\nList1 (1 -> 4 -> 5 -> 8 -> 10) \nList2 (2 -> 3 -> 6 -> 7 -> 9)", "output": "public static ListNode mergeLinkedLists(ListNode head1, ListNode head2) {  \n    if(head1 == null)  \n        return head2;  \n    if(head2 == null)  \n        return head1;  \n  \n    ListNode mergedList;  \n  \n    if(head1.val < head2.val) {  \n        mergedList = head1;  \n        mergedList.next = mergeLinkedLists(head1.next, head2);  \n    }  \n    else {  \n        mergedList = head2;  \n        mergedList.next = mergeLinkedLists(head1, head2.next);  \n    }  \n  \n    return mergedList;  \n}", "category": "Python"}, {"instruction": "Create a list of the top 5 programming languages currently in use.", "input": "", "output": "1. Java\n2. Python\n3. C++\n4. JavaScript\n5. C#", "category": "Python"}, {"instruction": "Define a function that takes a string and prints it in reverse order.", "input": "", "output": "def print_reverse(str):\n    for i in range(len(str)-1, -1, -1):\n        print(str[i], end=\"\")\n    print()", "category": "Python"}, {"instruction": "Write a MySQL query to count the number of students enrolled in a course called \"Coding 101\".", "input": "", "output": "SELECT COUNT(*) FROM students WHERE course = 'Coding 101';", "category": "Python"}, {"instruction": "How do you use the Set structure in Java?", "input": "", "output": "The Set interface in Java provides an unsorted, unordered collection of objects that cannot contain duplicates. The Set interface is part of the Java Collection Framework and provides methods such as add(), remove() and contains() which allow you to manipulate the set. The Set interface is implemented by the HashSet class and the TreeSet class. The HashSet class is used for unordered collections of objects, while the TreeSet class is used for sorted collections.", "category": "Python"}, {"instruction": "How do you connect to PostgreSQL database using Java?", "input": "", "output": "You can connect to PostgreSQL database using Java by using the JDBC driver. First, import the PostgreSQL JDBC driver class. Then, create an instance of the driver using a connection string and username and password. Finally, use the DriverManager class's getConnection() method to obtain a java.sql.Connection object that represents a database connection.", "category": "Python"}, {"instruction": "How do you create a new dataframe from existing two pandas dataframes?", "input": "", "output": "You can create a new dataframe by using the concat() or merge() functions of pandas.  With concat(), you can create a new dataframe by stacking the existing two dataframes on top/bottom of one another. With merge(), you can combine two dataframes by joining them on a key of your choice.", "category": "Python"}, {"instruction": "Given a 2D array of integers, write a Java method to find the sum of an hourglass pattern.", "input": "The 2D array of integers are:\n[[1, 1, 1, 0, 0, 0], \n[0, 1, 0, 0, 0, 0], \n[1, 1, 1, 0, 0, 0],\n[0, 0, 2, 4, 4, 0], \n[0, 0, 0, 2, 0, 0], \n[0, 0, 1, 2, 4, 0]]", "output": "public static int findSumOfHourglass(int[][] arr){ \n    int sum = 0;\n    for(int i = 0; i < arr.length - 2; i++){ \n        for(int j = 0; j < arr[i].length - 2; j++){ \n            int tempSum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + \n                arr[i+1][j+1] + \n                arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]; \n            if(sum < tempSum) \n                sum = tempSum; \n        } \n    } \n    return sum; \n}", "category": "Python"}, {"instruction": "Create a 3-dimensional array of ints in C#.", "input": "", "output": "int[, ,] array3D = new int[x, y, z];", "category": "Python"}, {"instruction": "Design a function to calculate the sum of the squares of the numbers between 1 and n.", "input": "", "output": "def sum_of_squares(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n    return sum_squares", "category": "Python"}, {"instruction": "Create a script to clone a GitHub repository.", "input": "The repository name is \"myproject\".", "output": "import git\n \n#clone the repository\nrepo = git.Repo.clone_from(\"[https://github.com/user/myproject.git](https://github.com/user/myproject.git)\", \"myproject\")", "category": "Python"}, {"instruction": "Rewrite the code below using Java", "input": "def print_list(list):\n    for item in list:\n        print(item)", "output": "void printList(List<String> list) {\n    for (String item : list) {\n        System.out.println(item);\n    }\n}", "category": "Python"}, {"instruction": "Construct a class in Java that has two methods called 'sayHello' and 'sayGoodbye'.", "input": "", "output": "class HelloGoodbye {\n    public static void sayHello() {\n        System.out.println(\"Hello!\");\n    }\n    public static void sayGoodbye() {\n        System.out.println(\"Goodbye!\");\n    }\n}", "category": "Python"}, {"instruction": "What is the unary operator in C++?", "input": "", "output": "In C++, a unary operator is an operator that takes only a single operand to perform an action. Examples of unary operators include the negation operator (!), increment operator (++), decrement operator (--), and address-of operator (&).", "category": "Python"}, {"instruction": "Create an HTML page that displays \"Hello World!\" when opened in a web browser.", "input": "", "output": "<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct an array of 10 elements in Java and initialize each element to 0.", "input": "", "output": "int[] array = new int[10];\nfor (int i = 0; i < array.length; i++) {\n    array[i] = 0;\n}", "category": "Python"}, {"instruction": "Write an SQL query to join two tables named 'books' and 'authors' on author_id.", "input": "", "output": "SELECT books.book_title, authors.author_name \nFROM books\nINNER JOIN authors\nON books.author_id = authors.author_id;", "category": "Python"}, {"instruction": "Describe linear search algorithm.", "input": "", "output": "Linear search is a searching algorithm for finding an element within an array or a list. It sequentially checks each item of the list until a match is found or the end of the array is reached. If the key is found, the index position of the element is returned. If the element is not found, then the index is returned as -1.", "category": "Python"}, {"instruction": "Prepare a JSON object to store student details such as name, age, and address.", "input": "", "output": "{\n  \"studentDetails\": {\n    \"name\": \"John Doe\",\n    \"age\": 25,\n    \"address\": {\n      \"street\": \"XYZ Street\",\n      \"city\": \"New York\",\n      \"state\": \"NY\"\n    }\n  }\n}", "category": "Python"}, {"instruction": "Write a script in Python for generating a histogram for a given set of data.", "input": "[3, 5, 8, 1, 9, 12]", "output": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', ec='black')\n\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Describe the working of a recursive function.", "input": "", "output": "A recursive function is a function that calls itself until a certain condition is met. It takes in an argument and performs some operation, then calls itself with a modified version of the argument until the condition is satisfied. The result of each call is combined in some fashion to form the final output. This allows the same method to be used to solve several different problems.", "category": "Python"}, {"instruction": "Write a function in JavaScript to capitalize all the words in a given phrase.", "input": "", "output": "function capitalizeWords(str) {\n  let words = str.split(' ');\n  let capitalizedWords = words.map(word => word[0].toUpperCase() + word.slice(1));\n  return capitalizedWords.join(' ');\n}", "category": "Python"}, {"instruction": "Create an SQL statement to select the title and description of all movies with a rating greater than 3.", "input": "", "output": "SELECT title, description FROM movies WHERE rating > 3;", "category": "Python"}, {"instruction": "Create a SQL statement to list all the entries with a rating greater than 3 from the table \"movies\".", "input": "", "output": "SELECT * FROM movies WHERE rating > 3;", "category": "Python"}, {"instruction": "Suggest a code snippet in Python to delete the dictionary entry with a key called \"name\".", "input": "sample_dic = {'id': 123, 'name': 'John Doe'}", "output": "del sample_dic['name']", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to test if a given variable is an array or not.", "input": "", "output": "if (Array.isArray(variable)) {\n  console.log('It is an array');\n} else {\n  console.log('It is not an array');\n}", "category": "Python"}, {"instruction": "Design a SQL query to find the first name of all employees of a company.", "input": "Table \"Employee\" with columns: FirstName, LastName, Email, CompanyID", "output": "SELECT FirstName \nFROM Employee \nWHERE CompanyID = <user-provided-id>;", "category": "Python"}, {"instruction": "generate a JavaScript function to check whether a string is a palindrome.", "input": "", "output": "function isPalindrome(str) {\n    let start = 0;\n    let end = str.length - 1;\n    while (start < end) {\n        if (str[start] !== str[end]) {\n            return false;\n        }\n    start++;\n    end--;\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Suggest a code snippet in C++ to calculate the sum of all the elements of a given array.", "input": "", "output": "int sum = 0; \nfor (int i=0; i<size; i++) \n    sum += arr[i];", "category": "Python"}, {"instruction": "Create a JavaScript function to filter an array of strings.", "input": "strings = [\"apple\", \"banana\", \"coconut\", \"dragon fruit\"]", "output": "function filterStrings(strings) {\n  return strings.filter(string => string.length < 7);\n}", "category": "Python"}, {"instruction": "Create an Oracle SQL statement for finding the average cost of a product.", "input": "", "output": "SELECT AVG(cost)\nFROM product;", "category": "Python"}, {"instruction": "Write a Java program to find out the longest word from a sentence.", "input": "String sentence = \"This is a sample sentence\"", "output": "public class LongestWord { \n  \n    // Function to find longest word in the sentence \n    static String findLongestWord(String str) { \n  \n        String longestWord = \"\"; \n        String[] words = str.split(\" \"); \n        for (int i = 0; i < words.length; i++) { \n            if (words[i].length() > longestWord.length()) { \n                longestWord = words[i]; \n            } \n        } \n        return longestWord; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"This is a sample sentence\"; \n        System.out.println(findLongestWord(str)); \n    } \n}", "category": "Python"}, {"instruction": "Write an SQL query to list all customers who are over the age of 25.", "input": "", "output": "SELECT * FROM customers WHERE age > 25;", "category": "Python"}, {"instruction": "Write a PHP function that takes a string and returns the same string with all vowels replaced with the letter 'x'.", "input": "", "output": "function replaceVowels($string)\n{\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $string = str_replace($vowels, \"x\", $string);\n \n    return $string;\n}", "category": "Python"}, {"instruction": "Write a C++ program that takes two 2D arrays and compares them for equality.", "input": "arr1 = [[1,2], [2,4]]\narr2 = [[1,2], [2,4]]", "output": "#include <iostream>\n#include <array>\n\nbool areEqual (std::array<std::array<int,2>,2> first, std::array<std::array<int,2>,2> second )\n{\n    if( first.size() != second.size() )\n        return false;\n\n    for(int i = 0; i <  first.size(); i++)\n    {\n        for(int j = 0; j < first[i].size(); j++)\n        {\n            if( first[i][j] != second[i][j] )\n                return false;\n        }\n    }\n    return true; \n}\n\nint main()\n{\n    std::array<std::array<int,2>,2> arr1 = {{{1,2}, {2,4}}}, arr2 = {{{1,2}, {2,4}}};\n\n    std::cout << isEqual(arr1, arr2);\n}", "category": "Python"}, {"instruction": "Write an SQL statement that creates a table named 'students' with four columns: \"name\", \"id\", \"major\" and \"age\".", "input": "", "output": "CREATE TABLE students (\n  name VARCHAR(50) NOT NULL,\n  id INT NOT NULL,\n  major VARCHAR(50) NOT NULL,\n  age INT NOT NULL\n);", "category": "Python"}, {"instruction": "How could we access the third element of a list in Python?", "input": "", "output": "The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3.", "category": "Python"}, {"instruction": "Suggest a better way to compare two strings in Python.", "input": "", "output": "Using Python's Standard Library function `difflib.SequenceMatcher` is a more efficient way to compare two strings. This function uses an algorithm to compute the longest common subsequence between the two strings which is then used to calculate the similarity score of the given strings.", "category": "Python"}, {"instruction": "Write a Python code to count the number of uppercase characters in the given string.", "input": "\"Hello World\"", "output": "string = \"Hello World\"\n\ncount = 0\nfor char in string:\n  if char.isupper():\n    count += 1\n\nprint(\"The number of uppercase characters are:\", count)", "category": "Python"}, {"instruction": "Write a code in Python to convert the following string to an integer.", "input": "\"12345\"", "output": "string = \"12345\"\n\nnumber = int(string)\n\nprint(number)", "category": "Python"}, {"instruction": "Return the maximum number from a given array of integers.", "input": "[6,4,7,1,3]", "output": "arr = [6,4,7,1,3]\n\n#Find max number\ndef find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\nresult = find_max(arr)\nprint(\"The maximum number is:\", result)", "category": "Python"}, {"instruction": "Create a random password generator in Python that outputs 10 characters of random alphanumeric characters.", "input": "", "output": "import random\nimport string\n\ndef random_password_generator():\n  charsds = string.ascii_letters + string.digits\n  password = ''.join(random.choice(charsds) for i in range(10))\n  return password\n\nprint(random_password_generator())", "category": "Python"}, {"instruction": "Write a function in PHP that takes in two arrays, and returns a new array that contains only elements present in both arrays.", "input": "[1, 3, 4], [2, 4, 6]", "output": "function intersect_arrays($arr1, $arr2)\n{\n  return array_intersect($arr1, $arr2);\n}", "category": "Python"}, {"instruction": "Create a function using Ruby that takes in a string, and returns a new string that only consists of the vowels from the original string.", "input": "\"Testing123\"", "output": "def only_vowels(str)\n  str.gsub(/[^aeiou]/i, '')\nend", "category": "Python"}, {"instruction": "Using CSS, apply the following style to a paragraph element. Make the font size 200%, the font color red, and the font family 'Montserrat'.", "input": "", "output": "p {\n  font-size: 200%;\n  color: red;\n  font-family: 'Montserrat';\n}", "category": "Python"}, {"instruction": "Calculate the result of the following expression: 63 \u00d7 42", "input": "", "output": "2646", "category": "Python"}, {"instruction": "Reduce the following equation by applying the distributive property.", "input": "3x(y + 4)", "output": "3xy + 12x", "category": "Python"}, {"instruction": "Create a C++ program that prints out the number of days in a given month and year.", "input": "Month: 10\nYear: 2020", "output": "\"\"\"\nPrint the number of days in a given month and year using C++\n\"\"\"\n\n#include<iostream>\n\nint main() {\n    int month, year;\n    std::cout << \"Enter month: \";\n    std::cin >> month;\n    std::cout << \"Enter year: \";\n    std::cin >> year;\n\n    int numDays;\n\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        numDays = 31;\n    }\n    \n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        numDays = 30;\n    }\n    \n    else if (month == 2) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                if (year % 400 == 0) {\n                    numDays = 29;\n                } \n                else {\n                    numDays = 28;\n                }\n            } \n            else {\n                numDays = 29;\n            }\n        } else {\n            numDays = 28;\n        }\n    }\n    \n    std::cout << \"Number of days: \" << numDays << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Develop a function in Java that takes two integers as its arguments and prints out the maximum of the two.", "input": "A = 25\nB = 27", "output": "/**\n * Develop a function in Java that takes two integers as its arguments and prints out the maximum of the two.\n */\npublic class maximum {\n  public static int maximum(int a, int b){\n      if(a > b){\n          return a;\n      } else {\n          return b;\n      }\n  }\n\n  public static void main(String[] args) {\n      int a = 25;\n      int b = 27;\n      int max = maximum(a, b);\n      System.out.println(\"Maximum of the two numbers is: \" + max);\n  }\n}", "category": "Python"}, {"instruction": "Generate a best-fit line for data points {(2,4), (4,7), (6,8), (7,11)} in Python.", "input": "", "output": "\"\"\"\nGenerate a best fit line for data points in Python\n\"\"\"\nimport numpy as np\n\ndata = [(2,4), (4,7), (6,8), (7, 11)]\n\nx = np.array([x[0] for x in data])\ny = np.array([y[1] for y in data])\n\nm, c = np.polyfit(x, y, 1)\n\nprint(\"Best-fit line equation: y = {:.2f}x + {:.2f}\".format(m,c))", "category": "Python"}, {"instruction": "Develop an algorithm in Python that detects any outliers in an array.", "input": "A = [1, 5, 2, 10, 8, 5, 9, 15]", "output": "\"\"\"\nDevelop an algorithm in Python that detects any outliers in an array\n\"\"\"\n#define function to detect outliers\ndef detect_outliers(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\n#call the function to find outliers\nA = [1, 5, 2, 10, 8, 5, 9, 15]\nprint(\"outliers: \", detect_outliers(A))", "category": "Python"}, {"instruction": "Generate a regular expression to check for the presence of word \u2018apple\u2019", "input": "", "output": "^(.*\\bapple\\b.*)$", "category": "Python"}, {"instruction": "Format the following text using Markdown.", "input": "The purpose of this project is to create a user-friendly program for calculating the area of a circle.", "output": "# The Purpose of this Project\nThe purpose of this project is to create a user-friendly program for calculating the **area of a circle**.", "category": "Python"}, {"instruction": "Write a SQL query to list all the customers in the customer table in descending order for the most recent order.", "input": "", "output": "SELECT c.customer_name, MAX(o.order_date) \nFROM customer c \nLEFT JOIN orders o ON c.customer_id = o.order_id \nGROUP BY c.customer_name \nORDER BY o.order_date DESC;", "category": "Python"}, {"instruction": "Write a code that generates a random password of 8 characters including numerical and alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    alpha_list = list(string.ascii_letters) + list(string.digits)\n    return ''.join([random.choice(alpha_list) for _ in range(8)])\n\nrandom_password = generate_password()\nprint(random_password)\n// Output: 4U4K5U6L", "category": "Python"}, {"instruction": "Given an array of integers, write a method to return the indices of the two numbers such that they add up to a specific target.", "input": "nums = [2, 5, 11, 15], target = 9", "output": "def twoSum(nums, target): \n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]+nums[j] == target:\n                result.append(i)\n                result.append(j)\n    return result\n\nindices = twoSum(nums, 9)\nprint(indices)\n// Output: [0, 2]", "category": "Python"}, {"instruction": "You are given a list of float numbers. Write a code to sort them in ascending order.", "input": "arr = [2.5, 3.2, 2.1, 4.6, 1.6]", "output": "def bubbleSort(arr): \n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr\n\nsorted_arr = bubbleSort(arr) \nprint(sorted_arr)\n// Output: [1.6, 2.1, 2.5, 3.2, 4.6]", "category": "Python"}, {"instruction": "Write a function in Python that returns the greatest common divisor (GCD) of two numbers.", "input": "n1 = 18, n2 = 15", "output": "def greatest_common_divisor(n1, n2): \n    while n2 > 0: \n        n1, n2 = n2, n1 % n2 \n    return n1 \n\nresult = greatest_common_divisor(18, 15)\nprint(result)\n// Output: 3", "category": "Python"}, {"instruction": "Create a Ruby script to output the first 20 fibonacci numbers.", "input": "", "output": "def fibonacci(limit)\n  n1, n2 = 0, 1\n  puts \"Fibonacci series upto #{limit}\"\n  while n1 <= limit\n    print \"#{n1}, \"\n    n1, n2 = n2, n1 + n2\n  end\nend\n\nfibonacci(20)", "category": "Python"}, {"instruction": "Write a code that takes a list of integers and output the frequencies of odd and even numbers within the list.", "input": "list_of_ints = [7, 21, 22, 23, 24, 25]", "output": "def find_odd_even_frequencies(list_of_ints):\n    \n    count_odd = 0 \n    count_even = 0\n    \n    for num in list_of_ints:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    return {\"odd\": count_odd, \"even\": count_even}\n\nresult = find_odd_even_frequencies(list_of_ints)\nprint(result)\n// Output: {'odd': 3, 'even': 3}", "category": "Python"}, {"instruction": "Create a script in Java that builds a string based on a given character repeated n number of times.", "input": "Character = '*'\nNumber = 5", "output": "\"\"\"\nCreate a script in Java that builds a string based on a given character repeated n number of times.\n\"\"\"\npublic class StringBuilder {\n\n    public static String buildString(char c, int n){\n        StringBuilder sb = new StringBuilder();\n        \n        for(int i = 0; i < n; i++){\n            sb.append(c);\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        char c = '*';\n        int n = 5;\n        System.out.println(buildString(c, n));\n    }\n}", "category": "Python"}, {"instruction": "Design a module in JavaScript that sorts an array of integers starting from the smallest number.", "input": "A = [9, 8, 12, 4, 7, 10]", "output": "\"\"\"\nDesign a module in JavaScript that sorts an array of integers starting from the smallest number.\n\"\"\"\n// Create the sorting function\nfunction sortArray(array){\n  // Keep track of the index of the minimum value.\n  let index;\n  \n  //loop through the array starting from the beginning.\n  for(let i = 0; i < array.length; i++){\n    //set the min value to the current i value.\n    let min = array[i];\n    //set the index to i\n    index = i;\n    \n    //loop through the array starting from i + 1.\n    for(let j = i + 1; j < array.length; j++){\n      //if the value of array[j] is less then the min value\n      //then set the min to this value and set the index to j\n      if (array[j] < min){\n        min = array[j];\n        index = j;\n      }\n    }\n    \n    //if there was a new min then swap it at the current i position. \n    if(i != index){\n      let temp = array[i];\n      array[i] = array[index];\n      array[index] = temp;\n    }\n  }\n  \n  //return the sorted array\n  return array;\n}\n\n//Call the function for sorting\nlet A = [9, 8, 12, 4, 7, 10];\nlet B =  sortArray(A);\nconsole.log(B);", "category": "Python"}, {"instruction": "Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase.", "input": "A = [\"apple\", \"banana\", \"grapes\"]", "output": "\"\"\"\nWrite a script in Python that takes a list of strings and prints out the first letter of each string in uppercase\n\"\"\"\n# create the function\ndef uppercase_first_letters(list_of_strings):\n    for string in list_of_strings:\n        print(string[0].upper())\n\n# call the function with the list\nA = [\"apple\", \"banana\", \"grapes\"]\nuppercase_first_letters(A)", "category": "Python"}, {"instruction": "Create a code in C# that takes an array of numbers and prints out the second smallest number in the array.", "input": "A = [9, 8, 12, 4, 7, 10]", "output": "\"\"\"\nCreate a code in C# that takes an array of numbers and prints out the second smallest number in the array.\n\"\"\"\npublic static void Main()\n{\n    int[] A = { 9, 8, 12, 4, 7, 10 };\n    \n    int secondMin = A[0];\n    \n    if(A[1] < secondMin)\n    {\n        secondMin = A[1];\n    }\n    \n    for(int i = 2; i < A.Length; i++)\n    {\n        if(A[i] < secondMin)\n        {\n            secondMin = A[i];\n        }\n    }\n    \n    Console.WriteLine(\"Second smallest number is: \" + secondMin);\n    \n}", "category": "Python"}, {"instruction": "Develop an algorithm in JavaScript that determines whether a given year is a leap year or not.", "input": "Year = 2100", "output": "\"\"\"\nDevelop an algorithm in JavaScript that determines whether a given year is a leap year or not\n\"\"\"\nfunction isLeapYear(year) {\n    if (year % 4 === 0) {\n        if (year % 100 === 0) {\n            if (year % 400 === 0) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\n\nlet year = 2100;\nconsole.log(isLeapYear(year));", "category": "Python"}, {"instruction": "Design a module in JavaScript that allows a user to reverse a provided array.", "input": "A = [1,2,3,4,5]", "output": "\"\"\"\nDesign a module in JavaScript that allows a user to reverse a provided array\n\"\"\"\n//implement reverse function\nfunction reverseArray(array){\n  let start = 0;\n  let end = array.length-1;\n  \n  while (start  < end){\n     let temp = array[start];\n     array[start] = array[end];\n     array[end] = temp;\n     start++;\n     end--;\n  }\n  \n  return array;\n}\n\n//Reverse an array\nlet A = [1,2,3,4,5];\nlet B = reverseArray(A);\nconsole.log(B);", "category": "Python"}, {"instruction": "Create a function in Node.js that prints out the numbers between 0 and a given limit.", "input": "limit = 10", "output": "\"\"\"\nCreate a function in Node.js that prints out the numbers between 0 and a given limit.\n\"\"\"\nfunction printNumbers(limit){\n  for(let i = 0; i <= limit; i++) {\n      console.log(i);\n  }\n}\n\nprintNumbers(10);", "category": "Python"}, {"instruction": "Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.", "input": "Base = 5\nExponent = 3", "output": "\"\"\"\nDevelop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.\n\"\"\"\ndef power(base, exponent):\n    result = base**exponent;\n    return result;\n\nbase = 5\nexponent = 3\nprint(power(base, exponent))", "category": "Python"}, {"instruction": "Format the following code using a linter", "input": "func multiply(a,b)\n{\n   return a*b\n}", "output": "def multiply(a, b):\n    \"\"\"Returns the product of the two parameters.\"\"\"\n    return a * b", "category": "Python"}, {"instruction": "Create a user-defined function that prints out a message when called.", "input": "message = \"Hello, World\"", "output": "def print_message(message):\n    print(message)\n\nprint_message('Hello, World')", "category": "Python"}, {"instruction": "Find the most common word in the following paragraph and replace it with a synonym.", "input": "The quick brown fox jumps over the lazy dog.", "output": "The nimble brown fox leaps over the sluggish dog.", "category": "Python"}, {"instruction": "Write an assembly language code to find the sum of two values stored in memory.", "input": "", "output": "LOAD value1\nADD value2\nSTORE result", "category": "Python"}, {"instruction": "Create a method in JavaScript that takes a comma-separated list of values as an argument and returns an array containing those values.", "input": "", "output": "function createArray(string) { \n return string.split(','); \n}", "category": "Python"}, {"instruction": "Generate a SQL query to retrieve all records from the USERS table where the gender is 'Male'.", "input": "", "output": "SELECT * FROM USERS WHERE gender = 'Male';", "category": "Python"}, {"instruction": "Write a CSS style to make a <div> element of width 500px and height 400px.", "input": "", "output": "div {\n width: 500px;\n height: 400px;\n}", "category": "Python"}, {"instruction": "Write a formula in Excel to calculate the total cost of a trip given the cost and quantity.", "input": "Cost of hotel: $50\nQuantity of rooms: 2", "output": "=50*2", "category": "Python"}, {"instruction": "Make a function in Python which calculates the covariance between two given lists.", "input": "list1: [1, 2, 3, 4, 5]\nlist2: [3, 4, 2, 4, 5]", "output": "def cov(list1, list2): \n    mean1 = sum(list1)/len(list1) \n    mean2 = sum(list2)/len(list2) \n    total = 0\n\tfor i in range(len(list1)): \n        total += (list1[i] - mean1)*(list2[i] - mean2) \n    return total/len(list1)", "category": "Python"}, {"instruction": "Create a class in Java for a rectangle shape with length and breadth as attributes.", "input": "", "output": "public class Rectangle { \n  int length; \n  int breadth; \n \n  Rectangle(int l, int b) { \n    length = l; \n    breadth = b; \n  } \n \n  int calculateArea() { \n    return length * breadth; \n  } \n}", "category": "Python"}, {"instruction": "Write a JavaScript code to print out the multiplication table of 3.", "input": "", "output": "for (let i = 1; i <= 10; i++) { \n   console.log(`3x${i}=${3*i}`); \n}", "category": "Python"}, {"instruction": "Make an array containing all elements of the given list that are even.", "input": "[43,55,12,23,44]", "output": "even_array = [i for i in [43, 55, 12, 23, 44] if i % 2 == 0]", "category": "Python"}, {"instruction": "Create a method to build a dictionary that contains all even numbers from the given list.", "input": "[2, 3, 7, 8, 10, 11]", "output": "def build_even_dict(numbers): \n even_dict = {key: value for key, value in enumerate(numbers) if value % 2 == 0} \n return even_dict", "category": "Python"}, {"instruction": "Given an array of positive integers, remove all the duplicates.", "input": "List1 = [1, 2, 3, 3, 4, 4, 2]", "output": "List1 = list(set(List1))\n# Output: List1 = [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a regular expression to match phone numbers in the following format: 0000000000", "input": "", "output": "import re\n\nregex = '^\\d{10}$'", "category": "Python"}, {"instruction": "Use the requests library to make an API call and return the response as JSON", "input": "url = http://example.com", "output": "import requests\n\nurl = 'http://example.com'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Using the requests library, post a JSON object to a specified URL.", "input": "URL: http://example.com\nJSON object: {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}", "output": "import requests\n\nurl = 'http://example.com'\ndata = {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}\n\nrequests.post(url, data=data)", "category": "Python"}, {"instruction": "Extract a list of all the keys from a given dictionary.", "input": "dict = {'Name': 'John', 'Age': 10, 'Gender': 'Male'}", "output": "key_list = list(dict.keys())\n# Output: ['Name', 'Age', 'Gender']", "category": "Python"}, {"instruction": "What is the purpose of this JavaScript code?", "input": "const studentNames = [\"John\", \"Paul\", \"Ringo\", \"George\"];\nlet nameString = studentNames.reduce((string, name) => {\n    return string + name + \",\";\n}, 'All students: ');", "output": "The purpose of this JavaScript code is to create a comma-separated string from an array of strings. The code uses the reduce function to concatenate the strings in the array with a comma and create a new string beginning with the string 'All students: '. The resulting string is stored in the nameString variable.", "category": "Python"}, {"instruction": "Modify the following code to return the sum of an array", "input": "let numbers = [1, 2, 3]", "output": "let numbers = [1, 2, 3]\n\nfunction sumArray(arr) {\n    let total = 0;\n    for(let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    return total;\n} \n\nconsole.log(sumArray(numbers));", "category": "Python"}, {"instruction": "Here's some Python code that finds the smallest number in a list. Edit it\nto find the greatest number in a list.", "input": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the smallest number\nprint(min(list))", "output": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the greatest number\nprint(max(list))", "category": "Python"}, {"instruction": "Write a for loop that prints out the series: 0, 4, 8, 12", "input": "", "output": "for i in range(0, 13, 4):\n    print(i)", "category": "Python"}, {"instruction": "Construct a SQL query to group students by the grade they got, and calculate the average score.", "input": "", "output": "SELECT grade, AVG(score) \nFROM students \nGROUP BY grade", "category": "Python"}, {"instruction": "Given a string, you need to write a regular expression that finds all the words that start with a caret (^) symbol.", "input": "String: \"^awesome ^data ^scoring\"", "output": "\\^awesome\\s|\\^data\\s|\\^scoring\\s", "category": "Python"}, {"instruction": "Write a method to print the first n numbers in the Fibonacci series.", "input": "n = 5", "output": "1 1 2 3 5", "category": "Python"}, {"instruction": "Given a linked list, swap the positions of the two nodes in the list.", "input": "Linked List: 1->2->3->4->5", "output": "Linked List: 1->4->3->2->5", "category": "Python"}, {"instruction": "Using Python, write a piece of code to convert Celsius temperatures to Fahrenheit.", "input": "Celsius: 20", "output": "Fahrenheit = 68", "category": "Python"}, {"instruction": "Given two parameters a and b, return a substring starting from index a and ending at index b.", "input": "String: \"Neural networks are powerful algorithms\"\nParameters: a = 0, b = 7", "output": "Neural n", "category": "Python"}, {"instruction": "Create a loop to print the numbers in reverse order from 5 to 2.", "input": "", "output": "for i in range(5, 1, -1):\n    print(i)", "category": "Python"}, {"instruction": "Compute the GCD of two numbers without using any built-in functions from your language.", "input": "Number1: 9\nNumber2: 6", "output": "3", "category": "Python"}, {"instruction": "Generate a random array of size n in Python.", "input": "Size of array: 5", "output": "import numpy as np\n\nsize = 5\n\n# Create an array of size 5\narr = np.random.randint(100, size = (size))\nprint (arr)", "category": "Python"}, {"instruction": "Create a dictionary using comprehension technique in Python.", "input": "original_dict = {'a':1, 'b':2, 'c':3, 'd':4}", "output": "new_dict = {key: value ** 2 for key, value in original_dict.items()}", "category": "Python"}, {"instruction": "You need to read a code and check if it uses the best practices for writing code. Output true if it does, false if it does not.", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "true", "category": "Python"}, {"instruction": "So you need to design a class for a Linked List.", "input": "", "output": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def is_empty(self):\n        return self.head == None\n    \n    # Other method implementations go here", "category": "Python"}, {"instruction": "What data structure can be used to store words of the same length?", "input": "", "output": "A data structure that can be used to store words of the same length is a Trie. A Trie is a tree-based data structure which stores characters of strings as nodes in a tree. The advantage of using a Trie for storing words of the same length is that it is an efficient data structure for retrieving words quickly. Furthermore, its storage space is optimized as it uses only the required amount of memory for storing words, regardless of the length of the words.", "category": "Python"}, {"instruction": "Write a function that finds the sum of two digits in C.", "input": "", "output": "int sum(int x, int y) {\n    return x + y;\n}", "category": "Python"}, {"instruction": "Modify the following program to print the number of occurrences of the character e in string s.", "input": "String s = \"Hello World!\"", "output": "String s = \"Hello World!\";\nint count = 0;\n\nfor (int i=0; i < s.length(); i++) {\n    if (s.charAt(i) == 'e') {\n        count++;\n    }\n}\nSystem.out.println(\"The number of occurrences of character 'e' in the string is: \" + count);", "category": "Python"}, {"instruction": "Convert the following string to an array of characters in Java.", "input": "String str = \"Hello World!\"", "output": "char[] array = str.toCharArray();", "category": "Python"}, {"instruction": "Create a list of all numbers that are divisible by 5 between 0 and 25.", "input": "", "output": "list_divisible_by_5 = [x for x in range(0, 26) if x%5 == 0]", "category": "Python"}, {"instruction": "Generate a valid SQL query to delete all the records from \u2018Employee\u2019 Table", "input": "", "output": "DELETE FROM Employee;", "category": "Python"}, {"instruction": "Generate a correct code to compare two date objects", "input": "", "output": "def compare_dates(date1, date2):\n    if date1 > date2:\n        return 1\n    elif date1 == date2:\n        return 0;\n    else:\n        return -1", "category": "Python"}, {"instruction": "Write a function to filter a list of strings based on a search term", "input": "", "output": "def filter_by_search_term(strings, search_term):\n    return [string for string in strings if search_term in string]", "category": "Python"}, {"instruction": "Write a SQL query that returns the maximum price of a product from the products table.", "input": "", "output": "SELECT MAX(price) FROM Products;", "category": "Python"}, {"instruction": "Write an HTML code to create a button that changes the background color of the page when clicked.", "input": "", "output": "<button onclick=\"document.body.style.background='#FFF'\">Change Background</button>", "category": "Python"}, {"instruction": "Write a JavaScript function to convert a given string to title case (every word must start with a capital letter).", "input": "", "output": "function toTitleCase(str) {\n  let new_str = str.toLowerCase().replace(/\\b[a-z]/g, char => char.toUpperCase());\n  return new_str;\n}", "category": "Python"}, {"instruction": "How would you format the following date in mm/dd/yyyy format using Java?", "input": "5 January 2020", "output": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nSimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\nString date_string = sdf.format(new Date(2020, 0, 5)); \nSystem.out.println(date_string); # Output: \"01/05/2020\"", "category": "Python"}, {"instruction": "Identify the correct syntax for creating a class with name 'Car' in Python.", "input": "", "output": "class Car:\n  pass", "category": "Python"}, {"instruction": "Write a MySQL query to select the product name and price for products whose name start with \"A\".", "input": "", "output": "SELECT product_name, price FROM products WHERE product_name LIKE 'A%';", "category": "Python"}, {"instruction": "Write a function in C++ which takes in an array and its size and swaps the first and last elements of the array.", "input": "alist = [10, 20, 30, 40]", "output": "#include<iostream>\nusing namespace std;\n \n// Function to swap the first and last elements of an array\nvoid swapFnL(int arr[], int size) \n{\n    int temp;\n    temp = arr[0];\n    arr[0] = arr[size-1];\n    arr[size-1] = temp;\n}\n \nint main()\n{\n    int arr[] = {10, 20, 30, 40};\n    int size = sizeof(arr)/sizeof(arr[0]);\n    swapFnL(arr, size);\n    for(int i=0; i<size; i++)\n    cout<< arr[i] << \" \";\n    return 0;\n}", "category": "Python"}, {"instruction": "Find the most frequent integer in the list: [3, 5, 2, 3, 1, 5, 3, 3, 2].", "input": "", "output": "my_list = [3, 5, 2, 3, 1, 5, 3, 3, 2]\nmax_freq = 0\nmax_num = 0\n# Use a dictionary to store the frequence of each number\ndict = { i : my_list.count(i) for i in my_list }\nfor num, freq in dict.items():\n    if freq > max_freq:\n        max_freq = freq\n        max_num = num\nprint(max_num) # Output: 3", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to create a new array from an existing array where each element is doubled.", "input": "ages = [10, 20, 30, 40]", "output": "let doubledAges = ages.map(age => age * 2);", "category": "Python"}, {"instruction": "Write a Python function that takes in an argument 'arr' which is an array of integers and prints the arithmetic mean of the array.", "input": "arr = [2, 8, 10, 22, 4]", "output": "def mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    mean = sum/len(arr)\n    print(mean)\nmean(arr) # Output: 10.0", "category": "Python"}, {"instruction": "Create a JSON object that has keys \"name\" and \"age\" and assign the values \"John\" and 20 respectively.", "input": "", "output": "my_json = {\n    'name': 'John',\n    'age': 20\n}", "category": "Python"}, {"instruction": "Find the index of the largest element in the array [2, 3, 5, 7, 25, 30].", "input": "", "output": "arr = [2, 3, 5, 7, 25, 30]\nlargest_element = max(arr)\nindex = arr.index(largest_element)\nprint(index) # Output: 4", "category": "Python"}, {"instruction": "Create a class in Python that will allow us to initialize and store a given list of numbers.", "input": "", "output": "class NumbersList:\n    def __init__(self, numbers_list):\n        self.numbers_list = numbers_list\n    \n    def get_list(self):\n        return self.numbers_list\n    \n    def set_list(self, numbers_list):\n        self.numbers_list = numbers_list", "category": "Python"}, {"instruction": "Complete the following snippet with proper code that will return the highest value in a given list.", "input": "my_list = [1,2,3,4,5]", "output": "def find_highest(lst):\n    current_max = lst[0]\n    # Iterate through list\n    for item in lst:\n        if item > current_max:\n            current_max = item\n    # Return the max value\n    return current_max \n\n# Call the function with the given list\nmy_list = [1,2,3,4,5]\nprint(find_highest(my_list)) # 5", "category": "Python"}, {"instruction": "Identify any inefficient coding practices used in the following snippet.", "input": "def find_largest(number_list):\n    #Define variable for holding the biggest number\n    largest = 0\n    for num in number_list:\n        if num > largest:\n            largest = num\n    return largest", "output": "The code works, however the variable `largest` is not properly initialized. Instead of setting it to 0, it should be set to the first element in the list - `number_list[0]`. This will improve the efficiency of the code, as it will not have to perform unnecessary comparisons.", "category": "Python"}, {"instruction": "Write a Python program to print out the longest word entered by the user.", "input": "string = \"Happiness is the best thing\"", "output": "def find_longest_word(string): \n    # split the string \n    word_list = string.split() \n  \n    # sort the list \n    word_list.sort(key = len) \n  \n    # return the last word \n    # which will be the longest \n    return word_list[-1]\n  \n# driver code \nstring = \"Happiness is the best thing\"\n \nprint(find_longest_word(string)) # Output: Happiness", "category": "Python"}, {"instruction": "Write an HTML code to create a hyperlink back to the homepage.", "input": "", "output": "<a href=\"index.html\">Home</a>", "category": "Python"}, {"instruction": "Create a JavaScript program to compute the mathematical expression \"9 + x^3 - 7\" where x is user input.", "input": "x = 7", "output": "let x = 7; \nlet expression = 9 + (x*x*x) - 7;\nconsole.log(expression); // Output: 570", "category": "Python"}, {"instruction": "Create a Python function which accepts two numbers then return an array with the Fibonacci sequence starting by the two numbers.", "input": "start_1: 1\nstart_2: 2", "output": "def fib_array(start_1, start_2):\n    arr = [start_1, start_2]\n    while True:\n        next_num = arr[-1] + arr[-2]\n        if next_num > 100:\n            break\n        arr.append(next_num)\n    return arr", "category": "Python"}, {"instruction": "Implement a function to print each element of a given array in reverse.", "input": "array = [2, 4, 6, 8]", "output": "def print_reversed_array(array):\n  for i in range(len(array)-1, -1, -1):\n    print(array[i])", "category": "Python"}, {"instruction": "Given the below data, find the sum of all the numbers in the array.", "input": "data = [5, 15, 7, 20]", "output": "Sum = 47", "category": "Python"}, {"instruction": "Write a SQL statement to return all books whose title contains the word \"math\".", "input": "", "output": "SELECT * FROM books\nWHERE title LIKE '%math%';", "category": "Python"}, {"instruction": "Create a GraphQL query for retrieving data about a list of userID's.", "input": "userIDs: [1, 2, 3, 4, 5]", "output": "query getUsers($userIDs: [Int!]!) {\n  users(userID_in: $userIDs) {\n    userID\n    name\n    email\n    age\n  }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code that counts the number of tokens that are present in a given document.", "input": "document: \"This is a sentence with five tokens\"", "output": "let tokenCount = 0;\nlet words = document.split(\" \");\nwords.forEach(word => {\n  tokenCount++;\n});\nconsole.log(tokenCount); \n// Output: 5", "category": "Python"}, {"instruction": "You need to write an HTML page with two forms, one for registering a new user and the other for logging in an existing user.", "input": "", "output": "<h1>Welcome to the Sign Up/Login Page</h1>\n\n<h2>Sign Up</h2>\n<form action=\"signup.php\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" name=\"username\" required>\n  <br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" name=\"password\" required>\n  <br>\n  <input type=\"submit\" value=\"Sign Up\">\n</form>\n\n<h2>Log In</h2>\n<form action=\"login.php\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" name=\"username\" required>\n  <br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" name=\"password\" required>\n  <br>\n  <input type=\"submit\" value=\"Log In\">\n</form>", "category": "Python"}, {"instruction": "Create a Ruby code to remove all items that starts with the letter 'a' from a given array.", "input": "arr: [apple, banana, avocado, orange]", "output": "arr = arr.reject {|element| element.start_with?('a') }", "category": "Python"}, {"instruction": "Create a Python script to compact a given list of elements.", "input": "my_list = [1,1,2,3,3,3,4,4,4,4,5]", "output": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Iterate through lst\n    for item in lst:\n        if item != current:\n            current = item\n            new_list.append(current)\n    # Return the new list\n    return new_list\n    \n# Call the function with the given list\nmy_list = [1,1,2,3,3,3,4,4,4,4,5]\nprint(compact_list(my_list)) # [1,2,3,4,5]", "category": "Python"}, {"instruction": "Create a SQL query to select the first 3 rows of a table named 'users'.", "input": "", "output": "SELECT * \nFROM users \nLIMIT 3;", "category": "Python"}, {"instruction": "You need to write a for loop in Python that takes two arguments, N and K and prints out the numbers from 0 to N which are divisible by K.", "input": "N: 15\nK: 4", "output": "for i in range(0, N+1):\n    if i % K == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a Ruby statement to create an array consisting of all numbers between 1 and 10 which are divisible by 3.", "input": "", "output": "arr = (1..10).to_a.select { |x| (x % 3).zero? }", "category": "Python"}, {"instruction": "You need to write an HTML code to create a navigation bar with three menu items, 'Home', 'About' and 'Contact'", "input": "", "output": "<nav>\n  <ul>\n    <li><a href=\"index.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n  </ul>\n</nav>", "category": "Python"}, {"instruction": "You need write a code in JavaScript for a web page with an alert box showing a message 'Thank You for Visiting'.", "input": "", "output": "alert('Thank You for Visiting');", "category": "Python"}, {"instruction": "Write a few lines of code in Python that prints out name followed by age.", "input": "name: John\nage: 25", "output": "name = \"John\"\nage = 25\nprint(name + \" \" + str(age))", "category": "Python"}, {"instruction": "Write a CSS code that changes the font-family of all the text elements of an HTML document to 'Segoe UI'.", "input": "", "output": "* {\n  font-family: 'Segoe UI';\n}", "category": "Python"}, {"instruction": "Create an HTML form with one input field which requests the user's name.", "input": "", "output": "<form action=\"\" method=\"get\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a JavaScript code to convert all the strings in a given array to upper case.", "input": "arr: [\"this\", \"is\", \"an\", \"example\"]", "output": "var upperCaseArray = arr.map(function(element) {\n  return element.toUpperCase();\n});", "category": "Python"}, {"instruction": "Write a code in C# to fetch the current date.", "input": "", "output": "DateTime now = DateTime.Now;\nConsole.WriteLine(now.ToString(\"dd-MM-yyyy\"));", "category": "Python"}, {"instruction": "Create a database in MySQL with the name \"sample db\".", "input": "", "output": "CREATE DATABASE sample_db;", "category": "Python"}, {"instruction": "Write a code to find out if a given number is prime in JavaScript.", "input": "number = 29", "output": "function isPrime(number) {\n\nfor (i=2; i <= Math.sqrt(number); i++) {\n    if (number % i == 0) {\n        return false;\n    }\n}\nreturn true;\n}\n\nlet number = 29\nconsole.log(isPrime(number))", "category": "Python"}, {"instruction": "Write a code to find the first 4 terms of the Fibonacci sequence in Java.", "input": "", "output": "public class Fibonacci {\n    public static int[] getFibonacciNumbers(int numTerms) { \n        int[] sequence = new int[numTerms]; \n        int firstTerm = 0, secondTerm = 1;\t\t \n        sequence[0] = firstTerm; \n        sequence[1] = secondTerm; \n\n        for (int i = 2; i < numTerms; i++) {\n            sequence[i] = firstTerm + secondTerm; \n            int temp = secondTerm; \n            secondTerm = firstTerm + secondTerm; \n            firstTerm = temp; \n        } \n        return sequence; \n    } \n    \n    public static void main(String[] args) \n    { \n        int numTerms = 4; \n        int[] sequence = getFibonacciNumbers(numTerms); \n        System.out.println(\"The first \" + numTerms + \" Fibonacci Numbers are:\");\n        for (int i = 0; i < numTerms; i++) {\n            System.out.println(sequence[i]); \n        }\n    } \n}", "category": "Python"}, {"instruction": "Create a TensorFlow model to recognize handwritten numbers.", "input": "", "output": "\"\"\"\nCreate a TensorFlow model to recognize handwritten numbers\n\"\"\"\n\nimport tensorflow as tf\n\n# Load in the data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Pre-process the data \nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Formulate a SQL query to get all the employee names from the 'employees' table.", "input": "", "output": "SELECT name FROM employees;", "category": "Python"}, {"instruction": "Change the following string to an upper case.", "input": "str = 'this is an example of a string'", "output": "str_upper = str.upper()\nprint(str_upper)\n\n# Output:\nTHIS IS AN EXAMPLE OF A STRING", "category": "Python"}, {"instruction": "Parse the following HTML using the BeautifulSoup library in Python.", "input": "html = '<h1>This is a heading</h1><p>This is a paragraph.</p>'", "output": "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nheading = soup.h1.string\nparagraph = soup.p.string\n\nprint(\"Heading:\", heading)\nprint(\"Paragraph:\", paragraph)\n\n# Output:\nHeading: This is a heading\nParagraph: This is a paragraph.", "category": "Python"}, {"instruction": "Using the following dictionary, print the value for the element 'age'.", "input": "person = {\n    'name': 'John Smith',\n    'age': 32,\n    'address': '123 Main St.'\n}", "output": "age = person['age']\nprint(\"The value for the element 'age' is:\", age)\n\n# Output:\nThe value for the element 'age' is: 32", "category": "Python"}, {"instruction": "What is the difference between deep copy and shallow copy in Python?", "input": "", "output": "A shallow copy of an object creates a new reference to the existing object, while a deep copy creates a new object with a different reference but with the same values. In a shallow copy, changes made to the copied object will be reflected in the original object, whereas with a deep copy, the changes are independent. For example, if a list is shallow copied, the copied list will share the same elements as the original list, while a deep copy will contain independent copies of the original list's elements.", "category": "Python"}, {"instruction": "Write an SQL query to find the counts of all employees grouped by their job titles.", "input": "", "output": "SELECT job_title, COUNT(*)\nFROM employees\nGROUP BY job_title;", "category": "Python"}, {"instruction": "Create a dictionary from the given list that contains unique elements.", "input": "lst = [1, 2, 3, 3, 3, 4, 5, 6, 6]", "output": "mydict = {x: None for x in set(lst)}\nprint(mydict)\n\n# Output:\n# {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}", "category": "Python"}, {"instruction": "What is the function of the \u2018enumerate\u2019 keyword in Python?", "input": "", "output": "The 'enumerate' keyword is used to iterate over an iterable and keep track of the index along the way. Its syntax is \"enumerate(iterable, start=0)\". Each iteration yields a tuple containing the index of the element and the element itself. This is most commonly used for loops that need to track the index of the elements in the iterable. For example, the loop below will print out all the elements and their respective indices in a list:\n\nmy_list = [\"A\",\"B\",\"C\"]\nfor index, element in enumerate(my_list):\n    print(index, element)\n\n# Output:\n# 0 A\n# 1 B\n# 2 C", "category": "Python"}, {"instruction": "Create a JavaScript program to sort a given list in ascending order.", "input": "", "output": "function sortList(arr) {\n    return arr.sort((a, b) => a - b);\n}", "category": "Python"}, {"instruction": "Update the following function to only print the even numbers in a given list", "input": "def print_list(list):\n    for i in list:\n            print(i)", "output": "def print_list(list):\n    for i in list:\n        if i%2==0:\n            print(i)", "category": "Python"}, {"instruction": "Create a function in Python to convert time from 12 hour to 24 hour format.", "input": "", "output": "def convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time12h[2:-2] \n          \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n      \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]", "category": "Python"}, {"instruction": "Create a regular expression to match numbers with exactly three decimal places.", "input": "", "output": "^\\d*\\.\\d{3}$", "category": "Python"}, {"instruction": "Update the following code snippet to ensure that the values in the dictionary are unique.", "input": "mydict = {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}", "output": "mydict = {}\nfor key, value in mydict.items():\n    if value not in mydict.values():\n        mydict[key]=value", "category": "Python"}, {"instruction": "Update the function to print \u2018Hello World!\u2019", "input": "def print_hello():\n    print('Hello')", "output": "def print_hello():\n    print('Hello World!')", "category": "Python"}, {"instruction": "Given a n x n matrix where each element is 0 or 1, how can you find the area of the largest square sub-matrix composed of only \u20181s\u2019?", "input": "", "output": "The simplest way to find the area of the largest square sub-matrix composed entirely of '1's is to use a dynamic programming approach. The algorithm works by iterating through all the elements in the matrix. At each cell, it checks if the current element is a '1' and if the other elements around it form a square sub-matrix of size at least one containing '1's, and if so it updates the answer accordingly. The code for finding the area of the largest square sub-matrix composed of only '1's may look like this:\n\n# n is the size of the matrix\ndef maximum_square_submatrix(matrix, n):\n    # answer stores the maximum size of the square\n    ans = 0\n\n    # dp array of size n+1 x n+1\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if the element is 1\n            if matrix[i-1][j-1] == 1:\n                # find the minimum of the elements on its left, top and diagonal\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n                # update the answer\n                ans = max(ans, dp[i][j])\n\n    # return the answer\n    return ans * ans", "category": "Python"}, {"instruction": "Given a single linked list, reverse it in place.", "input": "Head -> 1 -> 2 -> 3 -> 4 -> 5 -> None", "output": "Node* reverse(Node* head) \n{ \n    Node* current = head; \n    Node* prev = NULL; \n    Node* next = NULL; \n    if (current == NULL) \n        return NULL; \n    while (current != NULL) { \n        next = current->next; \n        current->next = prev; \n        prev = current; \n        current = next; \n    } \n    head = prev; \n    return head; \n}", "category": "Python"}, {"instruction": "Write a code to calculate the roots of a quadratic equation in Python.", "input": "", "output": "import math\n\ndef calculate_roots(a, b, c):\n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # find two solutions\n  sol1 = (-b-math.sqrt(d))/(2*a)\n  sol2 = (-b+math.sqrt(d))/(2*a)\n  \n  print('The solutions are {0} and {1}'.format(sol1,sol2))", "category": "Python"}, {"instruction": "Edit a JavaScript function to perform an action based on another action in the code.", "input": "function myFunction(arr) { \n  return arr.reverse();\n}", "output": "function myFunction(arr) { \n  arr.reverse();\n  return arr;\n}", "category": "Python"}, {"instruction": "Write a code snippet to create an object of type Car in Python.", "input": "", "output": "class Car():\n    def __init__(self):\n        self.make = \"\"\n        self.model = \"\"\n        self.year = 0\n        self.color = \"\"\n \ncar = Car()", "category": "Python"}, {"instruction": "In C#, write a code snippet to print all numbers between 1 and 10 (inclusive).", "input": "", "output": "for (int i = 1; i <= 10; i++) \n{ \n    Console.Write(i + \" \"); \n} \nConsole.WriteLine();", "category": "Python"}, {"instruction": "In PHP, append a new element to an array.", "input": "myArray = ['apple','melon','banana']", "output": "$myArray = array('apple','melon','banana');\narray_push($myArray, 'orange');\nprint_r($myArray);", "category": "Python"}, {"instruction": "Write a code to split a string into words and store them into a list.", "input": "mystring = \"This is a sample string\"", "output": "mystring = \"This is a sample string\"\nwordList = mystring.split()", "category": "Python"}, {"instruction": "Write a single line of code to convert a string to a date in Python.", "input": "", "output": "date = datetime.strptime('01/01/2019', '%d/%m/%Y')", "category": "Python"}, {"instruction": "Write a line of MySQL query that selects all rows from a table called 'employees' where the salary is greater than 55000.", "input": "", "output": "SELECT * FROM employees WHERE salary > 55000;", "category": "Python"}, {"instruction": "Create a function in Python to find all elements of a given list whose sum is equal to a given number.", "input": "list = [5, 7, 9, 4]\nnumber = 18", "output": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))", "category": "Python"}, {"instruction": "Create a new PostgreSQL table named 'employees' with appropriate columns for employee information.", "input": "", "output": "CREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    job_title VARCHAR(100) NOT NULL,\n    age INTEGER NOT NULL,\n    salary DECIMAL NOT NULL\n);", "category": "Python"}, {"instruction": "Write a line of code that prints the text \"Hello, World!\"", "input": "", "output": "print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Using Django, create a view to render a template.", "input": "", "output": "from django.shortcuts import render\n\ndef view(request):\n    return render(request, 'template.html')", "category": "Python"}, {"instruction": "Using HTML, create a form with a textbox and a submit button.", "input": "", "output": "<form>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Using Ruby, Create a method that converts a number to its equivalent in Roman numerals.", "input": "", "output": "def to_roman(n)\n  Roman_mapping = {\n    1000 => \"M\",\n    900 => \"CM\",\n    500 => \"D\",\n    400 => \"CD\",\n    100 => \"C\",\n    90 => \"XC\",\n    50 => \"L\",\n    40 => \"XL\",\n    10 => \"X\",\n    9 => \"IX\",\n    5 => \"V\",\n    4 => \"IV\",\n    1 => \"I\"\n  }\n\n  result = \"\"\n  Roman_mapping.each do |number, letter|\n    result << letter*(n/number)\n    n = n % number\n  end\n\n  result\nend", "category": "Python"}, {"instruction": "Create a JavaScript object with a property \"name\" and a value of your choice.", "input": "", "output": "let person = {\n  name: \"John Doe\"\n};", "category": "Python"}, {"instruction": "Using Angular, create a service to get the current date.", "input": "", "output": "import { Injectable } from '@angular/core'; \nimport { DatePipe } from '@angular/common'; \n\n@Injectable({\n  providedIn: 'root'\n}) \nexport class DateService { \n  constructor(private datePipe: DatePipe) { \n  } \n\n  getCurrentDate(): string { \n    return this.datePipe.transform(new Date(), 'yyyy-MM-dd');  \n  } \n}", "category": "Python"}, {"instruction": "Create a for-loop in JavaScript that iterates through numbers from 1 to 10 and prints out the current number.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Create a React class component that renders a h2 tag with the text \"Welcome!\".", "input": "", "output": "import React from 'react';\n\nclass Welcome extends React.Component {\n  render() {\n    return <h2>Welcome!</h2>\n  }\n}\n\nexport default Welcome;", "category": "Python"}, {"instruction": "How do you write a for loop in Visual Basic?", "input": "", "output": "For <variable> = <startValue> to <endValue>\n    ' Insert code here\nNext <variable>", "category": "Python"}, {"instruction": "Print the maximum element in a linked list.", "input": "head - [1, 3, 4, 10, 8]", "output": "def maximum(head): \n    max = head.data \n    while head is not None: \n        if max < head.data: \n            max = head.data \n        head = head.next\n    return max", "category": "Python"}, {"instruction": "Given a Node.js object, how can you check if a property exists in the object?", "input": "", "output": "if (Object.prototype.hasOwnProperty.call(object, 'property')) { \n // property exists\n}", "category": "Python"}, {"instruction": "Given two arrays in Java, how would you merge them into one array?", "input": "int[] array1 = {1, 2, 3}; \nint[] array2 = {4, 5, 6};", "output": "int[] mergedArray = new int[array1.length + array2.length];\n\nSystem.arraycopy(array1, 0, mergedArray, 0, array1.length);\nSystem.arraycopy(array2, 0, mergedArray, array1.length, array2.length);", "category": "Python"}, {"instruction": "Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort.", "input": "", "output": "# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)", "category": "Python"}, {"instruction": "Construct an SQL query to find the names of all senior developers.", "input": "developers table: id INT, name VARCHAR(50), seniority VARCHAR(20)", "output": "SELECT name \nFROM developers \nWHERE seniority = 'Senior'", "category": "Python"}, {"instruction": "Create a Python program to take the input and print the output as shown in the example below.", "input": "list1 = [10, 20, 30, [40, 50], [60, 70], 80]", "output": "print(list1[3][1])\nprint(list1[4][0])\n\nprint(list1[3][1]) # output: 50\nprint(list1[4][0]) # output: 60", "category": "Python"}, {"instruction": "Substitute the correct data type for each variable in the code below.", "input": "name = <data_type>\nage = <data_type>\nif_married = <data_type>", "output": "name = str\nage = int\nif_married = bool", "category": "Python"}, {"instruction": "Edit the code below to sort the list of integers given in the input.", "input": "list_in = [40, 32, 12, 19]", "output": "list_in = [40, 32, 12, 19]\nlist_in.sort()\nprint(list_in) #output: [12, 19, 32, 40]", "category": "Python"}, {"instruction": "Implement a method in Java to generate a random float within the given range.", "input": "min = 0.3\nmax = 0.7", "output": "/**\n * Generates a random float value within the given range (inclusive).\n * @param min the minimum value of the range\n * @param max the maximum value of the range\n * @return a random float value within the range\n */\npublic static float randomFloat(float min, float max) {\n    Random rand = new Random();\n    return rand.nextFloat() * (max - min) + min;\n}", "category": "Python"}, {"instruction": "Use JavaScript to write a program that finds the greatest common divisor of two numbers.", "input": "num1 = 45\nnum2 = 36", "output": "function findGCD(num1, num2) {  \n    let min = Math.min(num1, num2); \n    while (num1 % min !== 0 || num2 % min !== 0) {\n        min--; \n    }\n    return min;  \n}\n\nlet result = findGCD(45, 36); \nconsole.log(result); // output: 9", "category": "Python"}, {"instruction": "Using the given object, create a function to print out the value of the property \"age\" within the object.", "input": "let obj = {\n    name: 'John',\n    age: 20,\n    printDetails: () => {\n        console.log(`The name is ${name} and age is ${age}`);\n    }\n}", "output": "function printAge(obj) {\n    console.log(obj.age);\n}", "category": "Python"}, {"instruction": "Write a Bash script to read three numbers and print their sum to the screen.", "input": "", "output": "#/bin/bash\n\necho \"Enter the first number: \"\nread num1\n\necho \"Enter the second number: \"\nread num2\n\necho \"Enter the third number: \"\nread num3\n\necho \"The sum of the three numbers is: \"\necho $(($num1 + $num2 + $num3))", "category": "Python"}, {"instruction": "Reverse this sentence: \"I can do coding.\"", "input": "", "output": "\"coding do can I\"", "category": "Python"}, {"instruction": "Create an if statement that prints \"Fizz\" if a number is divisible by 3 and \"Buzz\" if a number is divisible by 5.", "input": "", "output": "if (num % 3 == 0 && num % 5 == 0) {\n    console.log(\"FizzBuzz\");\n} else if (num % 3 == 0) {\n    console.log(\"Fizz\");\n} else if (num % 5 == 0) {\n    console.log(\"Buzz\");\n}", "category": "Python"}, {"instruction": "Using the given array, create a function that takes in two arguments, the array and a number, and returns the position of the number in the array.", "input": "let arr = [1, 7, 9, 8, 5]", "output": "function findIndexOf(array, num) {\n   return array.indexOf(num);\n}", "category": "Python"}, {"instruction": "Create a for loop that prints the following output:", "input": "", "output": "for i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Compute the average of the following three numbers: 5, 10, and 15.", "input": "", "output": "10.0", "category": "Python"}, {"instruction": "Given the object below, debug the problem to make a valid code in JavaScript.", "input": "let obj = {\n    name: 'John',\n    age: 20,\n    printDetails: () => {\n        console.log(`The name is ${name} and age is ${age}`);\n    }\n}", "output": "let obj = {\n    name: 'John',\n    age: 20,\n    printDetails() {\n        console.log(`The name is ${this.name} and age is ${this.age}`);\n    }\n}", "category": "Python"}, {"instruction": "Create an input validation function in Python which checks that the input is an integer between 2-6.", "input": "", "output": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Make a function in Python that sorts a list of integers in increasing order.", "input": "[50, 2, 8, 7, 19, 29]", "output": "def sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Develop an HTML/CSS layout with 2 columns and a 2-row header.", "input": "", "output": "<div class=\"container\">\n  <div class=\"header\">\n    <div class=\"row1\">Row1</div>\n    <div class=\"row2\">Row2</div>\n  </div>\n\n  <div class=\"main\">\n    <div class=\"column1\">Column1</div>\n    <div class=\"column2\">Column2</div>\n  </div>\n</div>", "category": "Python"}, {"instruction": "Create a MySQL query to select the top 10 sales records from the table \"sales\".", "input": "", "output": "SELECT * FROM sales\nORDER BY amount DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Write a CSS rule to center an HTML element.", "input": "", "output": ".center {\n    margin: 0 auto;\n}", "category": "Python"}, {"instruction": "Create an XML document with a root element \"<name>\".", "input": "", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<name> </name>", "category": "Python"}, {"instruction": "Explain what a constructor is and how it is used in C++.", "input": "", "output": "A constructor is a special member function of a class which is used to initialize objects of its class type. A constructor has the same name as the class and its purpose is to initialize the members of an object with the given values when an object of that class is declared. In C++, constructors can be either default or parameterized. The default constructor is used to construct an object without any parameters, while the parameterized constructor is used to initialize an object with given parameters.", "category": "Python"}, {"instruction": "Write a SQL query to select the employees with the lowest salary.", "input": "", "output": "SELECT * \nFROM employees \nORDER BY salary ASC \nLIMIT 1;", "category": "Python"}, {"instruction": "Create a web page with an input field and a button to reset the field.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Input field and Reset button</title>\n</head>\n<body>\n    <input type=\"text\" placeholder=\"Type something\">\n    <button onclick=\"resetInput()\">Reset</button>\n\n    <script>\n        function resetInput() {\n            document.querySelector('input[type=\"text\"]').value = '';\n        }\n    </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Change the case of all characters in a string.", "input": "string = \"Hello World!\"", "output": "def change_case(string):\n    return string.swapcase()", "category": "Python"}, {"instruction": "Create a class definition for a Car object with attributes of HP and speed.", "input": "", "output": "class Car:\n    def __init__(self, hp, speed):\n        self.hp = hp\n        self.speed = speed", "category": "Python"}, {"instruction": "Create an algorithm which is able to sort a given array of integers in descending order.", "input": "", "output": "def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Create a function to encrypt a string using the XOR operator.", "input": "key = 'ABCDEFG'", "output": "def xor_encrypt(string, key):\n    encrypted_string = \"\"\n    for i, letter in enumerate(string):\n        encrypted_string += chr(ord(letter) ^ ord(key[i % len(key)]))\n    return encrypted_string", "category": "Python"}, {"instruction": "Suggest a name for the variable that represents a temperature value in Fahrenheit", "input": "", "output": "fahrenheit_temperature", "category": "Python"}, {"instruction": "Construct an SQL query to delete rows from a table that fulfill two conditions.", "input": "Table Name: Customer\nConditions:\n(1) Country = \u2018USA\u2019 \n(2) Age = 18", "output": "DELETE FROM Customer \nWHERE Country = 'USA' AND Age = 18;", "category": "Python"}, {"instruction": "Create a function that prints out the List of tuples.", "input": "t = [(1, 5), (0, 1), (10, 20)]", "output": "def print_list_tuple(t):\n    for item in t:\n        print(item)", "category": "Python"}, {"instruction": "Develop a CSS/HTML page with a 3-column layout and a sticky navigation bar.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Layout</title>\n    <style>\n        .row {\n            display: flex;\n            flex-wrap: wrap;\n        }\n\n        .column {\n            flex: 25%;\n        }\n    \n        #nav {\n            position: sticky;\n            top: 0;\n            background-color: #000;\n            padding: 10px;\n            text-align: center;\n        }    \n    </style>\n</head>\n<body>\n    <div id=\"nav\">Navigation Bar</div>\n    <div class=\"row\">\n        <div class=\"column\">Column1</div>\n        <div class=\"column\">Column2</div>\n        <div class=\"column\">Column3</div>\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a MySQL query to select the records whose name fields begins with an \"A\".", "input": "", "output": "SELECT * FROM table_name WHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Create an HTML page with a basic calculator form that takes two numbers as inputs and computes and displays the sum.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Calculator</title>\n  </head>\n  <body>\n    <h1>Calculator</h1>\n    <form>\n      <label>\n        Number 1: \n        <input type=\"text\" name=\"num1\" />\n      </label>\n      <br />\n      <label>\n        Number 2: \n        <input type=\"text\" name=\"num2\" />\n      </label>\n      <br />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <p id=\"answer\"></p>\n    <script>\n        let form = document.querySelector(\"form\");\n        \n        form.addEventListener(\"submit\", e => {\n          e.preventDefault();\n          \n          let nums = form.querySelectorAll(\"input[name=num]\");\n          let sum = 0;\n          \n          for (let n of nums) {\n            sum += parseInt(n.value);\n          }\n          \n          document.getElementById(\"answer\").textContent = `The sum is: ${sum}`;\n        });\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a MongoDB query to find all records with a \"quantity\" field greater than 5.", "input": "", "output": "db.collection.find({ \"quantity\": { $gt: 5 } })", "category": "Python"}, {"instruction": "Update the following code to create a valid URL", "input": "url = \"www.example.com:port/path?query=blah\"", "output": "url = \"http://www.example.com:port/path?query=blah\"", "category": "Python"}, {"instruction": "Create a Java program to find a number in an array and print its index.", "input": "int[] arr = {1, 2, 3, 4, 5};\nint num = 3;", "output": "public class Main {\n   public static void main(String[] args) {\n      int[] arr = {1, 2, 3, 4, 5};\n      int num = 3;\n      \n      int index = -1;\n      for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == num) {\n           index = i;\n           break;\n        }\n      }\n      \n      if (index == -1) {\n        System.out.println(\"Number not found.\");\n      } \n      else {\n        System.out.println(\"Number found at index \" + index);\n      }\n   }\n}", "category": "Python"}, {"instruction": "Rewrite the following JavaScript program using ES6 syntax.", "input": "let result=[];\nfor (let i=0;i<array.length;i++) {\nif (array[i]%2 == 0) {\nresult.push(array[i]);\n  }\n}", "output": "let result = array.filter(n => n % 2 == 0);", "category": "Python"}, {"instruction": "Create a PHP script to print out Fibonacci numbers up to 50.", "input": "", "output": "<?php \nfunction Fibonacci($n){ \n  \n    if ($n == 0) \n        return 0;     \n    else if ($n == 1) \n        return 1;     \n      \n    else\n        return (Fibonacci($n-1) +  \n                Fibonacci($n-2)); \n} \n  \n$n = 50; \nfor ($i = 0; $i < $n; $i++) \n    echo Fibonacci($i),' '; \n  \n?>", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary with the given list as its keys and values.", "input": "list = [\"a\", \"b\", \"c\"]", "output": "def create_dict(list):\n  return dict(zip(list, list))\n\ndict = create_dict(list)\nprint(dict)\n# Output: {'a': 'a', 'b': 'b', 'c': 'c'}", "category": "Python"}, {"instruction": "Create a Python program that prints out all even numbers between 0 and the given number n.", "input": "", "output": "def print_even_numbers(n):\n  for i in range (0, n+1):\n    if i % 2 == 0:\n      print (i)\n\nprint_even_numbers(20)", "category": "Python"}, {"instruction": "Write a SQL query to find the number of customers with a given state.", "input": "state = \"Texas\"", "output": "SELECT COUNT(*) \nFROM customers\nWHERE state = \"Texas\";", "category": "Python"}, {"instruction": "Create HTML code for a table that has 7 columns and 3 rows.", "input": "", "output": "<html>\n<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n    <th>Column 5</th>\n    <th>Column 6</th>\n    <th>Column 7</th>\n  </tr>\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n    <td>Cell 7</td>\n   </tr>\n   <tr>\n     <td>Cell 8</td>\n     <td>Cell 9</td>\n     <td>Cell 10</td>\n     <td>Cell 11</td>\n     <td>Cell 12</td>\n     <td>Cell 13</td>\n     <td>Cell 14</td>\n   </tr>\n  </table>\n</html>", "category": "Python"}, {"instruction": "Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import statistics\n\ndef get_stats(list):\n mean = statistics.mean(list)\n stdev = statistics.stdev(list)\n return mean, stdev\n\nmean, stdev = get_stats(list)\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", stdev)", "category": "Python"}, {"instruction": "Edit this text to make it more concise without losing any information.", "input": "The research assisted in understanding the ways in which we can better optimize our data structures. We discovered many new ways of more efficiently using the resources that we were given.", "output": "Research revealed ways to optimize data structures more efficiently, leading to new resource-saving techniques.", "category": "Python"}, {"instruction": "Create HTML code for a web page that has a centered title, a logo, and a colorscheme.", "input": "Title: \"My Website\" \nLogo: <link to logo file>\nColor Scheme: #123456, #234567, #345678", "output": "<html>\n<head>\n<title>My Website</title>\n</head>\n<body>\n<h1 align=\"center\">My Website</h1>\n<img src=\"<link to logo file>\" align=\"center\">\n<style>\n  body {\n  background-color: #123456;\n  color: #234567;  \n  }\n  h1 {\n    color: #345678;\n  }\n</style>\n</body>\n</html>", "category": "Python"}, {"instruction": "Use an object oriented approach to create a class in Java to store the cost and name of an item.", "input": "", "output": "class Item { \n    private String name; \n    private double cost;\n \n    // ... setter and getter methods\n}", "category": "Python"}, {"instruction": "Write a HTML to generate a form to login.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Login</title>\n</head>\n<body>\n <form action=\"\">\n  <label for=\"username\">Username</label>\n  <input type=\"text\" placeholder=\"Username\" name=\"username\"><br><br>\n  <label for=\"password\">Password</label>\n  <input type=\"password\" placeholder=\"Password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Login\">\n </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a HTML structure using semantic tags to list the skills of a web developer.", "input": "HTML, CSS, JavaScript, React", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Web Developer Skills</title>\n</head>\n<body>\n <h1>Web Developer Skills</h1>\n <ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n  <li>React</li>\n </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Use an object oriented approach to create an object in Java to store the temperature, humidity and wind speed from a weather forecast.", "input": "", "output": "class WeatherData { \n    private int temperature; \n    private int humidity;\n    private int windSpeed;\n \n    // ... setter and getter methods\n}", "category": "Python"}, {"instruction": "Write a Java program to read in a list of integers and separate them into two lists of even and odd numbers.", "input": "[1, 4, 6, 7, 8, 10, 12]", "output": "List even = [4, 6, 8, 10, 12]\nList odd = [1, 7]", "category": "Python"}, {"instruction": "Write a query in PostgreSQL for deleting a table.", "input": "", "output": "DROP TABLE table_name;", "category": "Python"}, {"instruction": "Develop a Java code which assigns each element of an array to an individual variable.", "input": "", "output": "int[] myArray = {1,2,3};\n\nint first = myArray[0];\nint second = myArray[1];\nint third = myArray[2];", "category": "Python"}, {"instruction": "Define a function in R which takes two arguments and finds their average.", "input": "", "output": "find_average <- function(x, y){\n    avg <- (x + y) / 2\n    return(avg)\n}", "category": "Python"}, {"instruction": "Write a shell script which prints \u201cHello World\u201d 5 times.", "input": "", "output": "#!/bin/bash\n\nfor i in {1..5}; do\n  echo \"Hello World\"\ndone", "category": "Python"}, {"instruction": "Create a new list which contains even elements from the existing list A.", "input": "A = [1, 4, 5, 12, 3, 7, 16]", "output": "A = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]", "category": "Python"}, {"instruction": "Create a dictionary which contains the product of keys and their individual values from another dictionary.", "input": "d = {'X': 4, 'Y': 5}", "output": "d = {'X': 4, 'Y': 5}\nd2 = {k:v*v for k,v in d.items()}", "category": "Python"}, {"instruction": "Explain how to use trapezoidal approach for numerical integration.", "input": "", "output": "The trapezoidal approach is a numerical integration technique of approximating the area under a curve or a function using the trapezoid rule. It uses the formula y0 + yn + 2(y1+y2+...+yn-1) and is a first-order numerical integration method that can be used to approximate a definite integral. It works by splitting the integration domain into trapezoids and computing the area of each trapezoid. This can be used to approximate the integral of the function and hence, solve the definite integral.", "category": "Python"}, {"instruction": "Design an algorithm to determine if an integer is even or odd.", "input": "", "output": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a MySQL query to find the employees with the best rating during their last review.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Rating IN \n    (SELECT MAX(Rating) FROM Reviews \n      WHERE ReviewDate = (SELECT MAX(ReviewDate) FROM Reviews) \n      GROUP BY EmployeeID) \nORDER BY Rating DESC;", "category": "Python"}, {"instruction": "Design a HTML page to display a table of students\u2019 grades for a specific subject.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr:nth-child(even) {\n  background-color: #dddddd;\n}\n</style>\n</head>\n<body>\n\n<h2>Students' Grades</h2>\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Grade</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Steve</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Jane</td>\n    <td>A+</td>\n  </tr>\n  <tr>\n    <td>Jeff</td>\n    <td>C+</td>\n  </tr>\n</table>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Edit the code to create a class for a profile.", "input": "class Profile {\n\n}", "output": "class Profile {\n  constructor(name, email, avatar_url) {\n    this.name = name;\n    this.email = email;\n    this.avatar_url = avatar_url;\n  }\n\n  updateName(name) {\n    // update the profile's name\n    this.name = name;\n  }\n  \n  updateEmail(email) {\n    // update the profile's email address\n    this.email = email;\n  }\n  \n  updateAvatar(url) {\n    // update the profile's avatar url\n    this.avatar_url = url;\n  }\n  \n  getName() {\n    // return the profile's name\n    return this.name;\n  }\n  \n  getEmail() {\n    // return the profile's email\n    return this.email;\n  }\n  \n  getAvatarUrl() {\n    // return the profile's avatar url\n    return this.avatar_url;\n  }\n}", "category": "Python"}, {"instruction": "Create a class in JavaScript to encapsulate user information.", "input": "", "output": "class User {\n  constructor(fullName, email, address) {\n    this.fullName = fullName;\n    this.email = email;\n    this.address = address;\n  }\n\n  updateName(name) {\n    // update the user's full name\n    this.fullName = name;\n  }\n  \n  updateEmail(email) {\n    // update the user's email address\n    this.email = email;\n  }\n  \n  updateAddress(address) {\n    // update the user's address\n    this.address = address;\n  }\n  \n  getFullName() {\n    // return the user's full name\n    return this.fullName\n  }\n  \n  getEmail() {\n    // return the user's email\n    return this.email\n  }\n  \n  getAddress() {\n    // return the user's address\n    return this.address\n  }\n}", "category": "Python"}, {"instruction": "Implement a JavaScript function to find all distinct prime factors of a given number.", "input": "", "output": "function findPrimeFactors(num) { \n    let factors = []; \n    while (num % 2 === 0) { \n        factors.push(2); \n        num = num / 2; \n    } \n  \n    // num must be odd at this point \n    for (let i = 3; i <= Math.sqrt(num); i += 2) { \n        while (num % i === 0) { \n            factors.push(i); \n            num = num / i; \n        } \n    } \n  \n    // This condition is to handle the case \n    // when num is a prime number greater than 2 \n    if (num > 2) \n        factors.push(num); \n  \n    // Distinct prime factors\n    let uniqFactors = new Set(factors);\n    return [...uniqFactors];\n}", "category": "Python"}, {"instruction": "Use the comment as a guide, replace its content with the proper code.", "input": "char array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};\nchar array2[10];\n// TODO: copy the content of array1 to array2", "output": "char array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};\nchar array2[10];\n\nfor (int i = 0; i < 10; i++) {\n array2[i] = array1[i];\n}", "category": "Python"}, {"instruction": "Write a C++ program to calculate the distance between two points in 3D space.", "input": "", "output": "#include <iostream>\n#include <cmath>\n \nusing namespace std;\n \nstruct Point\n{\n    double x, y, z;\n};\n \n//Calculate distance between two points\ndouble distance(Point p1, Point p2)\n{\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2) + pow(p2.z - p1.z, 2)*1.0);\n}\n \nint main()\n{\n    Point p1 = {2.0, 4.0, 9.0};\n    Point p2 = {5.1, 7.5, 10.0};\n    cout << \"Distance between p1 and p2 is \" << distance(p1, p2);  \n    return 0;\n}", "category": "Python"}, {"instruction": "Design a class for a user profile.", "input": "", "output": "class UserProfile:\n  def __init__(self, username, password, email, full_name, date_of_birth, address):\n    self.username = username\n    self.password = password\n    self.email = email\n    self.full_name = full_name\n    self.date_of_birth = date_of_birth\n    self.address = address\n \n  def update_phone_number(self, phone_number):\n    self.phone_number = phone_number", "category": "Python"}, {"instruction": "Write a Java program to get the day of the month from given a Date object", "input": "", "output": "public class DayFromDate {\n    public static void main(String[] args) {\n        Date date = new Date();\n        System.out.println(\"Day of the month: \" + date.getDate());\n    }\n}", "category": "Python"}, {"instruction": "Write a C++ program to find the sum of all the perfect numbers between two given inputs.", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nint perfectNo(int low, int high) \n{ \n    int sum = 0; \n    for (int i=low; i<high; i++) \n    { \n        int div_sum = 0; \n  \n        for (int j=1; j<i; j++) \n            if (i % j == 0) \n                div_sum += j; \n  \n        if (div_sum == i && i != 1) \n            sum += i; \n    } \n    return sum; \n} \n  \nint main() \n{ \n    int low = 1, high = 25; \n    cout << perfectNo(low, high) << endl; \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a shell script to print out the names of the all subdirectories in given directory", "input": "", "output": "#!/bin/bash\nfor dir in $1/*\ndo\n    if [ -d $dir ]\n    then\n        echo $(basename $dir)\n    fi\ndone", "category": "Python"}, {"instruction": "Write a Java method to remove all whitespaces from a string", "input": "", "output": "public static String removeWhitespace(String str) {\n  return str.replaceAll(\"\\\\s\", \"\");\n}", "category": "Python"}, {"instruction": "Rewrite the following instruction to print the binary value it holds.", "input": "int n = 12;", "output": "System.out.println(Integer.toBinaryString(n));", "category": "Python"}, {"instruction": "How would you create a function in Python to add two numbers?", "input": "", "output": "def add(a, b):\n\treturn a + b \n\n# Usage \nprint(add(3,4)) # output: 7", "category": "Python"}, {"instruction": "When would you use a while-loop in Python?", "input": "", "output": "A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not.", "category": "Python"}, {"instruction": "Explain how inheritance works in programming.", "input": "", "output": "Inheritance is a feature of object-oriented programming (OOP) that allows one class, known as the \"parent class\" or \"base class\", to pass its properties and methods to another class, known as the \"child class\" or \"inherited class\". This relationship between the classes allows for code reuse, as the child class can access the data and functionality of the parent class. Additionally, the child class is allowed to modify and add onto the parent class's features, allowing for even more code reuse between classes and creating more efficient developer workflows.", "category": "Python"}, {"instruction": "Convert the given context free grammar to Chomsky Normal Form.", "input": "S --> AaBb\nA --> aA | b\nB --> bB | a", "output": "S --> AaBb\nA --> aA | bB\nB --> bBB | bA | aB | aA", "category": "Python"}, {"instruction": "Create a C program to swap two numbers using pointers.", "input": "", "output": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 50;\n    int y = 100;\n    \n    printf(\"x = %d and y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x = %d and y = %d\\n\", x, y);\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "What algorithm should be used for predicting the output for a given input?", "input": "", "output": "The type of algorithm to be used for predicting the output for a given input depends on the complexity of the task. Common algorithms used for prediction tasks include Support Vector Machines, Random Forests, k-Nearest Neighbors and Artificial Neural Networks.", "category": "Python"}, {"instruction": "Write a jQuery code to hide the first element of an HTML list.", "input": "<ul>\n  <li>Item One</li>\n  <li>Item Two</li>\n  <li>Item Three</li>\n</ul>", "output": "$('ul li:first-of-type').hide();", "category": "Python"}, {"instruction": "Modify the following react code to make it render an h2 tag.", "input": "import React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    )\n  }\n}", "output": "import React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n        <h2>Nice to meet you!</h2>\n      </div>\n    )\n  }\n}", "category": "Python"}, {"instruction": "Construct an IPython code cell to display the content of a given pandas DataFrame.", "input": "DataFrame:\nName      Age\nAlice      26\nBob        32\nCarol      12", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf", "category": "Python"}, {"instruction": "Create a model in scikit-learn to predict the label of a given input data.", "input": "Input Data: [3.0, -4.0, 2.0, 0.8]\nLabel: Positive", "output": "from sklearn import svm \n\n# define model \nmodel = svm.SVC(kernel='linear', C=1.0) \n\n# define inputs \nX = [[3.0, -4.0, 2.0, 0.8]] \ny = ['Positive'] \n\n# fit model \nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a HTML page that takes your name as input and welcomes you on page load.", "input": "", "output": "<html>\n<body>\n   <script>\n\t  function onPageLoad() {\n\t\t  var name = prompt('Please enter your name: ');\n\t\t  alert('Welcome ' + name + '!');\n\t  }\n\t  onPageLoad();\n   </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query that orders the entries in the table \"tasks\" by their creation date.", "input": "", "output": "SELECT * FROM tasks ORDER BY creation_date;", "category": "Python"}, {"instruction": "Compute the result of 2 + 6 in JavaScript.", "input": "", "output": "let result = 2 + 6;\nconsole.log(result); // Outputs 8;", "category": "Python"}, {"instruction": "Suggest a way to solve the following problem in Python: extracting the last element from a given list.", "input": "", "output": "A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]", "category": "Python"}, {"instruction": "Generate a random string of 10 characters in a JavaScript program.", "input": "", "output": "let randomString = \"\";\nlet characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n \nfor (let i = 0; i < 10; i++) {\n  randomString += characters.charAt(Math.floor(Math.random() * characters.length));\n}\n\nconsole.log(randomString);", "category": "Python"}, {"instruction": "Write a CSS selector for all elements with the ``highlight`` class.", "input": "", "output": ".highlight {\n  \n}", "category": "Python"}, {"instruction": "Explain the purpose of the keyword ``this`` in Java.", "input": "", "output": "In Java, the keyword \"this\" is used to refer to the current object. It can be used to access the values of instance variables and to call methods within the current object. It can also be used to pass the object itself as an argument to another method. \"this\" is used to differentiate instance variables from local variables in the same method.", "category": "Python"}, {"instruction": "Suggest a way to persistently store data in a Java program.", "input": "", "output": "A convenient way to persistently store data in a Java program is to use a database such as MySQL or SQLite. You can also use an API to store data in the cloud, such as AWS S3. Additionally, many Java libraries provide support for persistence such as JPA and Hibernate, which provide object-relational mapping and object-oriented querying capabilities.", "category": "Python"}, {"instruction": "Create a JavaScript object with two keys \"firstName\" and \"lastName\".", "input": "Ahsan", "output": "let person = {\n    \"firstName\": \"Ahsan\",\n    \"lastName\": \"\"\n}", "category": "Python"}, {"instruction": "Write a Python script that prints out the Fibonacci sequence up to the nth number.", "input": "10", "output": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)", "category": "Python"}, {"instruction": "Add comments to the following code to explain briefly its purpose.", "input": "def sum_of_numbers(n):\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "\"\"\"\nThis function is used to calculate the \nsum of the first 'n' natural numbers\n\"\"\"\ndef sum_of_numbers(n): \n    # Initialize total to 0\n    total = 0 \n\n    # Loop through the first 'n' natural numbers\n    for i in range(n): \n        # Add the current number to the total\n        total += i \n\n    # Return total\n    return total", "category": "Python"}, {"instruction": "Fix the bug in the following code to sort a given list of numbers in descending order.", "input": "nums = [2, 3, 1, 4]", "output": "nums = [2, 3, 1, 4]\nnums.sort(reverse=True)\nprint(nums) # Output: [4, 3, 2, 1]", "category": "Python"}, {"instruction": "Take the string \u2018hello world\u2019 and convert it to uppercase.", "input": "", "output": "string = 'hello world'\nprint(string.upper()) # Output: 'HELLO WORLD'", "category": "Python"}, {"instruction": "Parse the given XML code and extract the value of the first attribute of the first element.", "input": "<root>\n    <item attr1=\"value1\" attr2=\"value2\">\n        <value>Logged</value>\n    </item>\n</root>", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('test.xml') \nroot = tree.getroot() \n\nfirst_attr = root[0].attrib['attr1']\nprint(first_attr) # Output: 'value1'", "category": "Python"}, {"instruction": "Create a script to convert JSON to an array.", "input": "{\"name\": \"John Doe\", \"age\": 30}", "output": "import json\n\njson_data = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30}\"\narray = json.loads(json_data)\nprint(array) # Output: {'name': 'John Doe', 'age': 30}", "category": "Python"}, {"instruction": "We have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.", "input": "[1,2,3,4], 6", "output": "def two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if the string contains any special characters.", "input": "Hello World", "output": "def has_special_characters(s):\n    return not all(char.isalnum() for char in s)", "category": "Python"}, {"instruction": "Clone the content of the following Github repository: https://github.com/shreya23/Coding-Challenges", "input": "", "output": "git clone https://github.com/shreya23/Coding-Challenges.git", "category": "Python"}, {"instruction": "Print the Fibonacci sequence up to the 5th element.", "input": "", "output": "0, 1, 1, 2, 3", "category": "Python"}, {"instruction": "Compile the following code to JavaScript and return the compiled code.", "input": "function myFunc(a, b) {\n    return a + b;\n}", "output": "function myFunc(a, b) {\n    return a + b;\n}\n\n//Compiled Version\nconst myFunc = (a, b) => a + b;", "category": "Python"}, {"instruction": "Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.", "input": "Array: [-2, 6, -3, 5, -2, 3, 4, -2]", "output": "\"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\n\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))", "category": "Python"}, {"instruction": "Create a function to edit a given string, replacing all the vowels with a given character.", "input": "String: \"Hello world\"\nCharacter: 'x'", "output": "\"\"\"\nCreate a function to edit a given string, replacing all the vowels with a given character.\n\"\"\"\ndef replace_vowels(string, replacement_character):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in string:\n        if char in vowels:\n            new_str += replacement_character\n        else:\n            new_str += char\n    return new_str\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    replacement_character = 'x' \n    print(replace_vowels(string, replacement_character))", "category": "Python"}, {"instruction": "Classify the following sentences into either a question or an instruction: \u201cPlease write a script to print all the prime numbers up to 50.\u201d", "input": "", "output": "Instruction: Please write a script to print all the prime numbers up to 50.", "category": "Python"}, {"instruction": "Create a data structure to store all of the prime numbers up to 1 million.", "input": "", "output": "\"\"\"\nCreate a data structure to store all of the prime numbers up to 1 million.\n\"\"\"\nimport math\n\ndef sieveOfEratosthenes(n):\n    prime_numbers = [True]*(n+1) \n    prime_numbers[0] = False\n    prime_numbers[1] = False\n      \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (prime_numbers[i]): \n            for j in range(i*i, n+1, i): \n                prime_numbers[j] = False\n      \n    prime_numbers_list = []\n    for k in range(n+1): \n        if prime_numbers[k]: \n            prime_numbers_list.append(k)\n      \n    return prime_numbers_list\n\nif __name__ == '__main__':\n    n = 1000000\n    prime_numbers_list = sieveOfEratosthenes(n)\n    print(prime_numbers_list)", "category": "Python"}, {"instruction": "Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.", "input": "String 1: \"Hello World\" \nString 2: \"World Hello\"", "output": "\"\"\"\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\"\"\"\ndef check_order(str1,str2): \n    stack=[]\n    j=0\n    for i in range(len(str2)): \n        if str2[i]==str1[j]: \n            stack.append(str2[i]) \n            j+=1\n            if stack==str1: \n                return True\n                \n    return False\n\nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))", "category": "Python"}, {"instruction": "Generate a loop to read each word from a given sentence and display them as a list.", "input": "Sentence: \"Python is a great programming language\"", "output": "\"\"\"\nGenerate a loop to read each word from a given sentence and display them as a list.\n\"\"\"\nsentence = \"Python is a great programming language\"\nwords = sentence.split()\n\nword_list= []\nfor word in words:\n    word_list.append(word)\n\nprint(word_list)", "category": "Python"}, {"instruction": "Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.", "input": "Target: 10\nNumbers: [1,4,5,3,6]", "output": "\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))", "category": "Python"}, {"instruction": "Create a function which converts a string representation of number in English to a numerical value.", "input": "\"one thousand two hundred and thirty four\"", "output": "\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))", "category": "Python"}, {"instruction": "In Java, write a program to read in an array of 5 integers and output their sum.", "input": "[2, 5, 9, 8, 6]", "output": "import java.util.Scanner;\n\npublic class ArraySum {\n public static void main(String[] args) {\n  int[] array = {2, 5, 9, 8, 6};\n  int sum = 0;\n\n  for (int i = 0; i < array.length; i++) {\n   sum = sum + array[i];\n  }\n\n  System.out.println(\"The sum of the array is: \"+sum);\n }\n}", "category": "Python"}, {"instruction": "Write a Java program to read in a string and print its length.", "input": "", "output": "import java.util.Scanner;\n\npublic class StringLength {\n public static void main(String[] args) {\n  Scanner scanner = new Scanner(System.in);\n  String inputString = scanner.nextLine();\n  System.out.println(\"Length of the string is: \"+ inputString.length());\n }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to log the integer 3 to the web console.", "input": "", "output": "console.log(3);", "category": "Python"}, {"instruction": "Use features of the Python language to implement 3-way partitioning of a given array.", "input": "Array: [9,6,7,4,1,6,3]", "output": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))", "category": "Python"}, {"instruction": "Use CSS to style the following list items.", "input": "<ul>\n    <li> Item 1 </li>\n    <li> Item 2 </li>\n    <li> Item 3 </li>\n</ul>", "output": "<ul style=\"list-style: none; font-size: 16px; font-weight: bold; color: #00b5e2;\">\n    <li> Item 1 </li>\n    <li> Item 2 </li>\n    <li> Item 3 </li>\n</ul>", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence up to the 10th number using a for loop in JavaScript.", "input": "", "output": "let n1 = 0, n2 = 1;\nlet fibonacci_sequence = [n1, n2];\n\nfor (let i = 2; i < 10; i++) {\n    let n3 = n1 + n2;\n    fibonacci_sequence.push(n3);\n    n1 = n2;\n    n2 = n3;\n}\n\nconsole.log(fibonacci_sequence);", "category": "Python"}, {"instruction": "Edit the given HTML code to add a title tag inside the head tag.", "input": "<html>\n <head>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html>", "output": "<html>\n <head>\n  <title>My Website</title>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Generate a random number between the two numbers provided.", "input": "min = 5\nmax = 10", "output": "import random\n\ndef randomNumber(min, max):\n    return random.randint(min, max)", "category": "Python"}, {"instruction": "Write a function to sort a stack in ascending order.", "input": "stack = [4, 7, 2, 1]", "output": "def sortStackAsc(stack):\n    sorted_stack = []\n\n    while stack:\n        current_element = stack.pop()\n        while sorted_stack and current_element < sorted_stack[-1]:\n            stack.append(sorted_stack.pop())\n        sorted_stack.append(current_element)\n\n    return sorted_stack", "category": "Python"}, {"instruction": "Given a string, remove any duplicate characters.", "input": "input_string = \"aaabbbccc\"", "output": "def removeDupChars(input_string): \n    string_set = set(input_string) \n    new_string = \"\". join(string_set)\n    return new_string", "category": "Python"}, {"instruction": "Create a function that returns the last element of an array.", "input": "arr = [1, 3, 6, 7, 12]", "output": "def lastElement(arr):\n    return arr[-1]", "category": "Python"}, {"instruction": "Write a generic function to split an array into n equal slices.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def splitArr(arr, n):\n    if n > len(arr):\n        return -1\n    result = []\n    for i in range(0, len(arr), n):\n        result.append(arr[i:i+n])\n    return result", "category": "Python"}, {"instruction": "Sort the following array", "input": "arr = [4, 2, 3, 5, 1]", "output": "arr.sort()\nprint(arr)", "category": "Python"}, {"instruction": "In Python, create a function that reverses a list.", "input": "", "output": "def reverse_list(list): \n    return list[::-1] \n  \nlist = [10, 16, 1, 5] \n  \nprint(\"Original List\", list) \nprint(\"Reversed List\", reverse_list(list))", "category": "Python"}, {"instruction": "Create a class with two methods to generate a random Integer and String", "input": "", "output": "import random\n\nclass randomGenerator:\n  \n    def __init__(self):\n        pass\n    \n    def generate_random_int(self):\n        return random.randint(0,100)\n    \n    def generate_random_string(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nrandomGenerator = randomGenerator()", "category": "Python"}, {"instruction": "What is the advantage of using linear regression for predicting the output?", "input": "", "output": "The advantage of using linear regression for predicting the output is that it can capture important relationship between input variables and the outcome. It is easy to interpret and explain, can produce easily interpretable results, and can also be used to optimize parameters for a given problem.", "category": "Python"}, {"instruction": "Differentiate between a compiler and an interpreter.", "input": "", "output": "A compiler takes a source code and converts it into an executable program, while an interpreter takes the same source code and executes it directly. Compilers produce a single output file and are usually faster than interpreters. Interpreters take source code as input and produce output directly, and tend to be slower than compilers.", "category": "Python"}, {"instruction": "Modify the following SQL query to list the top 3 customers with the highest orders.", "input": "SELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id", "output": "SELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id\nORDER BY orders.amount DESC\nLIMIT 3", "category": "Python"}, {"instruction": "Name the most important benefit of using a database system.", "input": "", "output": "The most important benefit of using a database system is the ability to store and retrieve data quickly and easily. Database systems also provide support for data security, data integrity, and concurrently accessing and modifying data from multiple systems.", "category": "Python"}, {"instruction": "Analyze the following two functions to determine which one will be faster for executing a given operation.", "input": "Function 1:\n\ndef f1(x):\n    for i in range(1, x):\n        print(i)\n\nFunction 2:\n\ndef f2(x):\n    i = 1\n    while i < x:\n        print(i)\n        i += 1", "output": "Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition.", "category": "Python"}, {"instruction": "List the layers of an artificial neural network.", "input": "", "output": "The layers of an artificial neural network typically include an input layer, one or more hidden layers and an output layer. In addition, some ANNs also include a convolutional layer and/or a pooling layer.", "category": "Python"}, {"instruction": "Link the given HTML elements with the appropriate bootstrap style.", "input": "<h1>Heading </h1>\n<button> Button </button>", "output": "<h1 class=\"text-primary\">Heading </h1>\n<button class=\"btn btn-secondary\"> Button </button>", "category": "Python"}, {"instruction": "From the array of integers given below, write a Python code snippet to select all even numbers.", "input": "array = [1, 9, 4, 10, 5, 12];", "output": "even_numbers = [num for num in array if num % 2 == 0]", "category": "Python"}, {"instruction": "Create a Java program to print all natural numbers between 1 and 50, both inclusive.", "input": "", "output": "public class Natural { \n    public static void main(String[] args) \n    { \n        int n = 1; \n        while (n <= 50) { \n            System.out.println(n); \n            n = n + 1; \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a CSS style for all <h1> tags to have a red border.", "input": "", "output": "h1{ \n    border: 1px solid red;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the employee names and IDs from the table 'employees' where the name contains \"John\".", "input": "", "output": "SELECT name, id FROM employees WHERE name LIKE '%John%';", "category": "Python"}, {"instruction": "Write a script in JavaScript that gets the value of a certain input field whenever the user clicks it.", "input": "<input type=\"text\" name=\"myInput\" value=\"Input\" />", "output": "document.getElementById(\"myInput\").addEventListener(\"click\", function() {\n    var inputValue = document.getElementById(\"myInput\").value;\n    console.log(inputValue);\n});", "category": "Python"}, {"instruction": "Create an HTML button with a class and an ID attribute.", "input": "", "output": "<button class=\"button\" id=\"button-id\">Click Me!</button>", "category": "Python"}, {"instruction": "Create an object in C++ that stores the roll number and name of students in an array.", "input": "", "output": "#include <iostream>\n#include <string>\n\nclass Student {\npublic:\n    int rollNumber;\n    std::string name;\n};\n\nStudent students[100];", "category": "Python"}, {"instruction": "Generate random numbers in the range of 1 to 100 using a for loop in Python.", "input": "", "output": "import random\n\nfor i in range(100):\n\trand_num = random.randint(1, 100)\n\tprint(rand_num)", "category": "Python"}, {"instruction": "What should the input to the following JavaScript code be?", "input": "const capitalizeFirstLetter = word => word[0].toUpperCase() + word.slice(1);\n\nconst result = capitalizeFirstLetter(input);", "output": "The input to this JavaScript code should be a string. The code capitalizes the first letter of the string, and then concatenates the rest of the string after the first letter.\nFor example, if the input is \"hello\", the output will be \"Hello\".", "category": "Python"}, {"instruction": "What will be printed with the following Java code?", "input": "String myString = \"Hello World\";\n\nfor (int i = 0; i < myString.length(); i++) {\n    System.out.print(i + \" = \" + myString.charAt(i) + \" \");\n}", "output": "0 = H 1 = e 2 = l 3 = l 4 = o 5 =   6 = W 7 = o 8 = r 9 = l 10 = d", "category": "Python"}, {"instruction": "Explain the result of the following one-liner command.", "input": "echo Apple Banana Cat | cut -d\" \" -f2", "output": "This command prints the second word of the list of words, i.e., \"Banana\". The echo command prints out the words 'Apple', 'Banana', and 'Cat', and the cut command is used to extract the parts of each word delimited by spaces. The -d flag specifies the delimiter, which in this case is a space, and the -f flag specifies the field number, which in this case is 2. Therefore, the output is \"Banana\".", "category": "Python"}, {"instruction": "Create a dictionary in Java containing employee information with their names as the key and salary as the values.", "input": "", "output": "Map<String, Integer> employeeMap = new HashMap<>();\nemployeeMap.put(\"John\", 1000);\nemployeeMap.put(\"Amy\", 1200);\nemployeeMap.put(\"Dad\", 1500);\nemployeeMap.put(\"Mom\", 2000);", "category": "Python"}, {"instruction": "Write a SQL query to find all books that are rated 4 stars or higher.", "input": "", "output": "SELECT * \nFROM books \nWHERE rating >= 4;", "category": "Python"}, {"instruction": "Write a CSS snippet to create five divs of size 200px by 200px side by side.", "input": "", "output": "div {\n    width: 200px;\n    height: 200px;\n}\n\ndiv:nth-child(1) {\n    position: relative;\n}\ndiv:nth-child(2) {\n    position: relative;\n    left: 205px;\n}\ndiv:nth-child(3) {\n    position: relative;\n    left: 410px;\n}\ndiv:nth-child(4) {\n    position: relative;\n    left: 615px;\n}\ndiv:nth-child(5) {\n    position: relative;\n    left: 820px;\n}", "category": "Python"}, {"instruction": "What is the Big O complexity of this following code snippet?", "input": "def find_duplicates(nums):\n    duplicates = []\n    for num in nums:\n        if num in duplicates:\n            yield num\n        else:\n            duplicates.append(num)", "output": "The Big O complexity of this code snippet is O(n), since it takes linear time to loop through the array and check if the element has appeared before.", "category": "Python"}, {"instruction": "From the list of numbers given below, write a PHP code snippet to calculate the mean.", "input": "$list = [1, 8, 4, 6, 5, 3];", "output": "<?php\n$sum = 0;\nforeach ($list as $number) {\n    $sum += $number;\n}\n$mean = $sum / count($list);\necho $mean;\n?>", "category": "Python"}, {"instruction": "Create a HTML structure for an ordered list with 5 items.", "input": "", "output": "<ol>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ol>", "category": "Python"}, {"instruction": "From the object given below, write a PHP code snippet to extract the value of the key 'shipping_address'.", "input": "object = {\n    name: 'John Doe',\n    shipping_address: '123 Main Street'\n};", "output": "<?php\n$shipping_address = $object['shipping_address'];\necho $shipping_address;\n?>", "category": "Python"}, {"instruction": "Write an HTML structure to create a form with two text boxes and two submit buttons.", "input": "", "output": "<form action=\"form_action.php\" method=\"POST\">\n    <input type=\"text\" name=\"name\">\n    <input type=\"text\" name=\"email\">\n    <input type=\"submit\" name=\"button1\" value=\"Submit\">\n    <input type=\"submit\" name=\"button2\" value=\"Cancel\">\n</form>", "category": "Python"}, {"instruction": "How do the following Java methods work?", "input": "public static void main(String[] args) \n{ \n    int[] arr = {2,4,6,8,10}; \n    int n = 2; \n    int result = binarySearch(arr, 0, arr.length-1, n); \n    if (result == -1) \n        System.out.println(\"Element is not present\"); \n    else\n        System.out.println(\"Element is present at index \" +  \n                                             result); \n} \n  \nstatic int binarySearch(int arr[], int l, int r, int x) \n{ \n    while (l <= r) \n    { \n        int m = l + (r-l)/2; \n        if (arr[m] == x) \n            return m;  \n        if (arr[m] < x) \n            l = m + 1; \n        else\n            r = m - 1; \n    } \n    return -1;  \n}", "output": "The main method takes an array of integers and an element to search for. It calls binarySearch method which uses the binary search algorithm to search for the element in the given array. The algorithm starts by calculating the mid point of the given array. If the element at the mid point is equal to the element to search for, it returns the index of the mid point. If the element being searched for is less than the element at the mid point, the element can be searched in the left subarray by setting right boundary one less than mid point. If the element being searched for is greater than the element at the mid point, the element can be searched in the right subarray by setting the left boundary one greater than the mid point. The search continues until the element is found or whole array is searched. If the element is not present in the array,It returns -1.", "category": "Python"}, {"instruction": "Design a C++ class which adds the two arguments and returns the result.", "input": "", "output": "class adder \n{ \n    int a, b;\n \npublic: \n    adder (int a, int b) \n    { \n        this->a = a; \n        this->b = b; \n    }\n \n    int add() \n    { \n        int sum = a + b; \n        return sum; \n    }\n};", "category": "Python"}, {"instruction": "Create a function in Python which checks if an input value is positive or negative.", "input": "", "output": "def check_sign(x):\n  if x < 0:\n    print(\"The number is negative.\")\n  elif x > 0:\n    print(\"The number is positive.\")\n  else:\n    print(\"The number is 0.\")", "category": "Python"}, {"instruction": "Write a SQL query which returns all columns from the table 'employees'", "input": "", "output": "SELECT * FROM employees;", "category": "Python"}, {"instruction": "Use the given string and convert it to hexadecimal representation.", "input": "Python", "output": "0x50797468", "category": "Python"}, {"instruction": "Write a query to select the employee name and salary whose salary is between 10000 and 50000.", "input": "", "output": "SELECT name, salary \nFROM employees \nWHERE salary BETWEEN 10000 AND 50000;", "category": "Python"}, {"instruction": "Sort the given list with size constraint N in increasing order.", "input": "N = 4\narr = [8, 7, 6, 5, 4, 1]", "output": "arr = [1, 4, 5, 6, 7, 8]", "category": "Python"}, {"instruction": "Update the code to print out the first five elements of the given list.", "input": "[3, 4, 1, 6, 8, 9]", "output": "for i in range(5): \n print(arr[i])", "category": "Python"}, {"instruction": "Use the given string to find the number of occurrences of each letter.", "input": "Hello World", "output": "occurrences = {\n 'H': 1,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n ' ': 1, \n 'W': 1,\n 'r': 1,\n 'd': 1\n}", "category": "Python"}, {"instruction": "Format the given date and time as DD-MM-YYYY HH:MM", "input": "19-03-2020 17:30", "output": "19-03-2020 17:30", "category": "Python"}, {"instruction": "Make a HTTP request to get the content of the given URL.", "input": "https://example.com", "output": "import requests\n\nresponse = requests.get(\"https://example.com\")\nprint(response.content)", "category": "Python"}, {"instruction": "Change the comparison operator in the given line to its equivalent.", "input": "x != y", "output": "x <> y", "category": "Python"}, {"instruction": "Change the given string to list.", "input": "Data Science", "output": "['Data', 'Science']", "category": "Python"}, {"instruction": "Create a regex to detect URL.", "input": "", "output": "\\b(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]", "category": "Python"}, {"instruction": "Output the fifth letter of the given string.", "input": "Apple", "output": "e", "category": "Python"}, {"instruction": "Construct a class which inherits from the parent class by implementing the abstract method.", "input": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n # TODO: implement abstract method", "output": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n  def abstract_method(self):\n    pass", "category": "Python"}, {"instruction": "Suggest an alternative way of writing the following code using list slicing.", "input": "a = [1,2,3,4,5]\n\nb = []\n\nfor i in range(len(a)):\n    if (i+1) % 2 == 0:\n        b.append(a[i])", "output": "a = [1,2,3,4,5]\nb = a[1::2]", "category": "Python"}, {"instruction": "Write function to encrypt the text with Caesar Cipher.", "input": "text = \"hello\"\nshift = 3", "output": "def caesar_cipher(text, shift):\n    ciphered = ''\n    for char in text:\n        ciphered += chr(ord(char) + shift)\n    return ciphered", "category": "Python"}, {"instruction": "Write a function that takes two parameters, an array of integers and an integer value, and returns the number of occurrences of the given value in the array.", "input": "input_array = [1, 2, 3, 2, 1]\ninput_value = 2", "output": "def count_occurrences(input_array, input_value):\n    return len([item for item in input_array if item == input_value])", "category": "Python"}, {"instruction": "Administer a MySQL database to save the customer information below.", "input": "Henry Smith;25;Real Estate Agent", "output": "INSERT INTO customers (name, age, occupation) VALUES ('Henry Smith', 25, 'Real Estate Agent');", "category": "Python"}, {"instruction": "Modify the code below to filter out negative numbers from the given array.", "input": "var arr = [2, -4, -6, 0, 1];", "output": "var arr = [2, 0, 1]; \narr = arr.filter(element => element >= 0);", "category": "Python"}, {"instruction": "How many jokes can you write in Python?", "input": "", "output": "There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise.", "category": "Python"}, {"instruction": "Implement a function that takes in three string parameters and prints out the longest one.", "input": "", "output": "def longest_string(str1, str2, str3):\n    if len(str1) >= len(str2) and len(str1) >= len(str3):\n        print(str1)\n    elif len(str2) >= len(str1) and len(str2) >= len(str3):\n        print(str2)\n    else:\n        print(str3)", "category": "Python"}, {"instruction": "What is the fifth prime number?", "input": "", "output": "The fifth prime number is 11.", "category": "Python"}, {"instruction": "Modify the following CSS code to target the links with the word \"Learn\".", "input": "a {\n    color: blue;\n}", "output": "a[href*=\"Learn\"] {\n    color: blue;\n}", "category": "Python"}, {"instruction": "Write a shell script that exits with a status code of 0.", "input": "", "output": "#!/bin/bash\n\nexit 0", "category": "Python"}, {"instruction": "Categorize the following string as either a palindrome or not.", "input": "Input: \"racecar\"", "output": "This string is a palindrome.", "category": "Python"}, {"instruction": "Create a SQL query that generates the first 10 names starting with \"A\".", "input": "", "output": "SELECT NAME\nFROM TABLE\nWHERE NAME LIKE \"A%\" \nLIMIT 10;", "category": "Python"}, {"instruction": "Create a Ruby program that reverses the characters of a provided string.", "input": "Input: \"Hello world!\"", "output": "def reverse_string(str)\n  str.reverse\nend\n\nputs reverse_string(\"Hello world!\") #=> \"!dlrow olleH\"", "category": "Python"}, {"instruction": "Explain the difference between a shallow copy and a deep copy.", "input": "", "output": "A shallow copy of an object creates a new object with the same values as the original but with a different location in memory. A deep copy of an object copies not just the values of the original object but also creates copies of any objects that the original object is referencing. The result is two objects which are completely independent of each other.", "category": "Python"}, {"instruction": "Suggest an alternative data representation for the following code.", "input": "ages = {\"Alice\": 24, \"Bob\": 3, \"Carol\": 15}", "output": "ages = [('Alice', 24), ('Bob', 3), ('Carol', 15)]", "category": "Python"}, {"instruction": "Generate code that implements a method to compare two strings.", "input": "", "output": "def compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Create a class called \"Employee\" with three instance variables: 'Name', 'Salary', and 'Position'.", "input": "", "output": "class Employee():\n    \n    def __init__(self, name, salary, position):\n        self.name =name \n        self.salary = salary \n        self.position = position", "category": "Python"}, {"instruction": "Create SQL to select data from the table that has a specific value in the 'name' field.", "input": "Table Name: Country\n\nField: Name\n\nValue: USA", "output": "SELECT * FROM Country WHERE Name = 'USA';", "category": "Python"}, {"instruction": "Calculate the value of \"x\" in the equation \"5x - 12 = 8\".", "input": "", "output": "x = 4", "category": "Python"}, {"instruction": "Edit the given JavaScript code so that the output is the Fibonacci sequence from 1 to \"n\".", "input": "let a = 0, b = 1, result\nfor (let i = 1; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n}\nconsole.log(result)", "output": "let a = 0, b =1, result\nfor (let i = 0; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n  console.log(a)\n}", "category": "Python"}, {"instruction": "Complete the function definition so that it takes in two parameters \"x\" and \"y\" and returns the sum of x and y.", "input": "def sum(x, y):", "output": "def sum(x, y):\n    return x + y", "category": "Python"}, {"instruction": "Insert data into a specific field in a given table.", "input": "Table Name: User\n\nField: Country\n\nData: Indonesia", "output": "INSERT INTO User (Country) VALUES ('Indonesia');", "category": "Python"}, {"instruction": "Create a class called \"BankAccount\" with two instance variables \"accountNumber\" and \"balance\".", "input": "", "output": "class BankAccount():\n    \n    def __init__(self, accountNumber, balance):\n        self.accountNumber = accountNumber \n        self.balance = balance", "category": "Python"}, {"instruction": "Convert the code from OOP to a functional programming style.", "input": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def print_details(self):\n        print(f\"Name: {self.name}, age: {self.age}\")", "output": "def Employee(name, age):\n    return (name, age)\n\ndef print_details(employee):\n    name, age = employee\n    print(f\"Name: {name}, age: {age}\")", "category": "Python"}, {"instruction": "Subdivide the following HTML into two columns.", "input": "<div>\n    <h1>Hello world!</h1>\n    <p>Welcome to my website.</p>\n</div>", "output": "<div class=\"columns\">\n    <div class=\"column\">\n        <h1>Hello world!</h1>\n    </div>\n    <div class=\"column\">\n        <p>Welcome to my website.</p>\n    </div>\n</div>", "category": "Python"}, {"instruction": "In the following code, what is the purpose of the 'if' statement?", "input": "words = [\"apple\", \"pie\", \"make\"]\n\nfor word in words:\n  if len(word) > 4:\n    print(word)", "output": "The 'if' statement is used to check if the length of the current word is greater than 4, and if it is, the word is printed.", "category": "Python"}, {"instruction": "Compute the probability of each string from the below list.", "input": "['apple', 'banana', 'watermelon', 'mango']", "output": "The probability of 'apple' is 0.25,\nThe probability of 'banana' is 0.25, \nThe probability of 'watermelon' is 0.25, \nThe probability of 'mango' is 0.25.", "category": "Python"}, {"instruction": "Construct a MySQL query to select the employee name and their salary from a table named 'employees' where the salary is greater than 30,000.", "input": "", "output": "SELECT name, salary FROM employees WHERE salary > 30000;", "category": "Python"}, {"instruction": "Design a function in C++ that takes in a vector of integers and returns the maximum number in the vector.", "input": "", "output": "int getMax(vector<int> nums) {\n // Rule out empty vector\n if (nums.empty()) {\n return -1;\n }\n \n int max = nums[0];\n // Iterate through every item in vector\n for (int i = 1; i < nums.size(); i++) {\n // Update max if needed\n if (nums[i] > max) {\n max = nums[i];\n }\n }\n return max;\n}", "category": "Python"}, {"instruction": "Calculate the area of a triangle given the following lengths of its sides a, b, and c.", "input": "a = 5, b = 6, c = 8", "output": "double area = 0.25*sqrt((a + b + c)*(b + c - a)*(c + a - b)*(a + b - c));", "category": "Python"}, {"instruction": "Create a JavaScript object called 'book' with the following properties - title, author, genre, and number of pages.", "input": "", "output": "let book = {\n title: \"The Great Gatsby\",\n author: \"F.Scott Fitzgerald\",\n genre: \"Novel\",\n pages: 180\n};", "category": "Python"}, {"instruction": "Create a C++ class called 'Car' with five fields - brand, color, year manufactured, engine type, and number of doors.", "input": "", "output": "class Car {\n private:\n string brand;\n string color;\n int year;\n string engine;\n int doors;\n\n public:\n Car(string brand, string color, int year, string engine, int doors) {\n  this->brand = brand;\n  this->color = color;\n  this->year = year;\n  this->engine = engine;\n  this->doors = doors;\n }\n};", "category": "Python"}, {"instruction": "Calculate the sum of angles in an octagon.", "input": "", "output": "The sum of angles in an octagon is 1080\u00b0 (360\u00b0 \u00d7 3).", "category": "Python"}, {"instruction": "Create an array of five integers with any values.", "input": "", "output": "int[] nums = {12, 24, 49, 37, 54};", "category": "Python"}, {"instruction": "Create a regex expression to match the numbers from 0 to 9.", "input": "", "output": "[0-9]", "category": "Python"}, {"instruction": "Compare and contrast JavaScript Objects and Arrays.", "input": "", "output": "JavaScript Objects and Arrays are both used to store and organize data in JavaScript. However, they are two distinct data structures. Objects store data in key-value pairs, while Arrays are indexed collections of items. Additionally, Objects are mutable, whereas Arrays are not. Objects can have any type of data as a key, whereas Array indices must typically be represented by integers.", "category": "Python"}, {"instruction": "How can one retrieve data from a web server using Node.js?", "input": "", "output": "Using Node.js, one can retrieve data from a web server by making an HTTP request. This can be accomplished using the built-in 'http' module, or by using a third-party library such as Request or Axios. After making the request, the response from the server must be handled and the data can then be processed.", "category": "Python"}, {"instruction": "Write a long-running Python script with a while loop?", "input": "", "output": "while True:\n    # perform a long-running task\n    pass # or perform an action", "category": "Python"}, {"instruction": "Create two lists, one in Python and one in JavaScript, with 10 numbers each.", "input": "", "output": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a loop to iterate through all elements in an array in JavaScript.", "input": "", "output": "for (let i = 0; i < array.length; i++) {\n   const element = array[i];\n   // perform operations on element\n}", "category": "Python"}, {"instruction": "Compare and contrast AJAX and XMLHttpRequest.", "input": "", "output": "AJAX (Asynchronous JavaScript and XML) is a technology that enables web developers to send and receive data asynchronously between the browser and the server without needing to make changes to the existing pages. It works by sending a request to the server using the XMLHttpRequest object, which then processes the request and sends back a response. XMLHttpRequests are used in AJAX, but they can also be used independently of AJAX to send and receive data. The main difference between AJAX and XMLHttpRequest is that AJAX can be used to send and receive multiple requests and responses at once, whereas XMLHttpRequest is limited to one request at a time.", "category": "Python"}, {"instruction": "How do you represent time in JavaScript?", "input": "", "output": "In JavaScript, time is typically represented as the number of milliseconds that have elapsed since midnight on January 1st, 1970 (also known as the Unix Epoch). It can be represented as a Date object, or by using its individual components (such as hours, minutes, and seconds).", "category": "Python"}, {"instruction": "Generate a regular expression that can detect if the length of given strings is above 10.", "input": "", "output": "re.compile(r\".{10,}\")", "category": "Python"}, {"instruction": "Categorize this sentence as either an imperative instruction or a question.", "input": "Write a program to count the number of times a specific word appears in a given string.", "output": "Imperative instruction", "category": "Python"}, {"instruction": "Carve out a SQL query that selects the name and phone number from table named 'Customers'.", "input": "", "output": "SELECT name, phone_number\nFROM Customers;", "category": "Python"}, {"instruction": "Create a class in C++ that can produce the result of an arithmetic expression with two numbers as input.", "input": "num1 = 5, num2 = 10", "output": "class ArithmeticExpression {\n    public: \n        int CalculateExpression(int num1, int num2) {\n            return num1 + num2;\n        }\n};", "category": "Python"}, {"instruction": "Write a function that takes in 2 lists, reverses the elements of each list and combines the elements to output a single list.", "input": "list1 = [1,2,3]\nlist2 = [4,5,6]", "output": "[6, 5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Implement a function that takes an integer n as input and returns a matrix of size nxn consisting of the natural numbers from 1 to n^2 in row major order.", "input": "n = 5", "output": "[[1, 2, 3, 4, 5],\n[6, 7, 8, 9, 10], \n[11, 12, 13, 14, 15], \n[16, 17, 18, 19, 20],\n[21, 22, 23, 24, 25]]", "category": "Python"}, {"instruction": "Implement the Caesar Cipher algorithm that shifts the characters in a string by a specified number of spaces.", "input": "String: \"Hello World!\"\nShift by: 3", "output": "Khoor Zruog!", "category": "Python"}, {"instruction": "Determine which of the following two strings is a palindrome.", "input": "\"kite\"\n\"racecar\"", "output": "\"racecar\" is a palindrome.", "category": "Python"}, {"instruction": "Using the heapsort algorithm, sort the following array of numbers in ascending order.", "input": "[97,54,67,8,2,22,5,47]", "output": "[2, 5, 8, 22, 47, 54, 67, 97]", "category": "Python"}, {"instruction": "Create a function that takes two arguments (n and m) and returns a randomly shuffled array of length n and containing only elements from 0 to m.", "input": "n = 5\nm = 10", "output": "def shuffle_array(n, m):\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(0,m))\n    random.shuffle(arr)\n    return arr", "category": "Python"}, {"instruction": "Modify the following code so that it prints out the characters from the given string one at a time.", "input": "String str = \"Hello World\";", "output": "String str = \"Hello World\";\nfor (int i = 0; i < str.length(); i++) {\n  System.out.println(str.charAt(i));\n}", "category": "Python"}, {"instruction": "Take a string as an input and determine the number of times the letter 'a' appears in the string.", "input": "String: \"The quick brown fox jumps over the lazy dog\"", "output": "The letter 'a' appears 1 time in the string.", "category": "Python"}, {"instruction": "Generate the syntax for initializing an array of integers with the given elements.", "input": "[1, 2, 3]", "output": "int[] arr = {1, 2, 3};", "category": "Python"}, {"instruction": "Create an HTML form that takes 5 inputs: name, age, gender, email, and phone.", "input": "", "output": "<form>\n  <label>Name:</label><input type=\"text\" name=\"name\" required /><br/>\n  <label>Age:</label><input type=\"text\" name=\"age\" required /><br/>\n  <label>Gender:</label><input type=\"text\" name=\"gender\" required /><br/>\n  <label>Email:</label><input type=\"text\" name=\"email\" required /><br/>\n  <label>Phone:</label><input type=\"text\" name=\"phone\" required /><br/>\n  <input type=\"submit\" />\n</form>", "category": "Python"}, {"instruction": "Change the if-else statement to a switch statement.", "input": "if (x == 0) {\n Console.WriteLine(\"Zero\");\n}\nelse if (x == 1) {\n Console.WriteLine(\"One\");\n}", "output": "switch (x) {\n  case 0:\n       Console.WriteLine(\"Zero\");\n       break;\n  case 1:\n       Console.WriteLine(\"One\");\n       break;\n}", "category": "Python"}, {"instruction": "Edit the following code so that it prints the given value to the console.", "input": "System.out.println(\"Hello World\");\n5", "output": "System.out.println(5);", "category": "Python"}, {"instruction": "Generate the for loop in Java for iterating from 0 to the given number.", "input": "4", "output": "for (int i = 0; i < 4; i++) {\n   //code to be executed\n}", "category": "Python"}, {"instruction": "Write a basic CSS rule that sets text color to red.", "input": "", "output": "p {\n  color: red;\n}", "category": "Python"}, {"instruction": "Generate the ternary operator for the following expression: x > 0 ? 10 : 5.", "input": "", "output": "x > 0 ? 10 : 5", "category": "Python"}, {"instruction": "Create a Java program that print the Fibonacci sequence in the given range.", "input": "min = 0, max = 10", "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int min = 0, max = 10;\n        int prev = 0, next = 1;\n        System.out.print(\"Fibonacci Sequence in the given range:\");\n        for (int i = 0; i <= max; i++) {\n            if (i >= min) {\n                System.out.print(\" \" + prev);\n            }\n            int sum = prev + next;\n            prev = next;\n            next = sum;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write an algorithm that reverses a string.", "input": "Hello World", "output": "def reverse_string(string):\n  reversed_string = \"\"\n  for char in string:\n    reversed_string = char + reversed_string\n  return reversed_string", "category": "Python"}, {"instruction": "Create a randomized password of 10 characters.", "input": "", "output": "F8a_3q4*f2", "category": "Python"}, {"instruction": "Edit the code so that it produces the desired output.", "input": "answer = n\nif answer % 2 == 0:\n    print('even')\nelse:\n    print('odd')\nOutput:\"", "output": "answer = n\nif answer % 2 == 0:\n    print('even')\nelif answer % 2 == 1:\n    print('odd')", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns True if one of the strings is the other string reversed.", "input": "string_1 = \"abcde\"\nstring_2 = \"edcba\"", "output": "def isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create an array of random integers from 0-10 and print the sum of all elements in the array.", "input": "", "output": "import random\n\n# generate random integers\nint_list = [random.randint(0, 10) for i in range(10)]\n\n# calculate the sum\ntotal = 0\nfor e in int_list:\n    total += e\n\n# print the sum\nprint(total)", "category": "Python"}, {"instruction": "Edit the given code to use dynamic programming to solve the problem.", "input": "def rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val", "output": "def rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]", "category": "Python"}, {"instruction": "Given the following code, find the output.", "input": "def f(x):\n        if x == 0 or x == 1:\n            return 1\n        return f(x-1) + f(x-2)\n\nprint(f(4))", "output": "The output of the following code is 3.", "category": "Python"}, {"instruction": "Print out the Fibonacci series up to a given number.", "input": "n = 5", "output": "def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n    print()\n\nprint_fibonacci_series(5)", "category": "Python"}, {"instruction": "Write a class that implements an arithmetic operator.", "input": "None", "output": "class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')", "category": "Python"}, {"instruction": "Write a function which will print out a given pattern.", "input": "*\n**\n***\n****", "output": "def print_pattern(n):\n    for i in range(1, n+1):\n        print(\"*\" * i)\n\nprint_pattern(4)", "category": "Python"}, {"instruction": "Rewrite the following code to use loop instead of recursion.", "input": "def longest_substring(input_string):\n    if len(input_string) <= 1:\n        return input_string\n    else:\n        first_letter = input_string[0]\n        rest_substring = input_string[1:]\n        sub_string = longest_substring(rest_substring)\n        if first_letter in sub_string:\n            return sub_string\n        else:\n            return first_letter + sub_string", "output": "def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring", "category": "Python"}, {"instruction": "What type of optimization algorithm is used in the following snippet of code?", "input": "weights = np.random.rand(2, 1)\nfor epoch in range(50):\n     predictions = predict(x, weights)\n     gradients = calcluate_gradients(x, predictions, y)\n     weights -= gradients * learning_rate", "output": "Stochastic Gradient Descent optimization algorithm is used in the given snippet of code.", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers, calculates the sum of the numbers across all the arrays, and returns the average of those sums.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def get_average_sum(arr):\n    total = 0\n    count = 0\n    for sub_arr in arr:\n        total += sum(sub_arr)\n        count += len(sub_arr)\n    return total / count", "category": "Python"}, {"instruction": "Create a function that takes in an integer and returns true if the number is prime or false if the number is not prime.", "input": "", "output": "def is_prime(num):\n    for n in range(2, num):\n        if(num % n == 0):\n            return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Create a program that takes in a numeric value, X, and prints all the positive divisors of that number.", "input": "X = 8", "output": "def print_divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if(x % i == 0):\n            divisors.append(i)\n    print(divisors)", "category": "Python"}, {"instruction": "Create a class that represents a student that contains the following information: name, email, age and type of degree.", "input": "", "output": "class Student:\n    def __init__(self, name, email, age, degree_type):\n        self.name = name\n        self.email = email\n        self.age = age\n        self.degree_type = degree_type", "category": "Python"}, {"instruction": "What does the \u201cstatic\u201d keyword do in Java?", "input": "", "output": "The \"static\" keyword in Java is used to define static members of a class. This includes static methods, static variables, static blocks, and static inner classes. Static methods can be invoked without creating an instance of the class, and static variables are shared among all objects of the same class.", "category": "Python"}, {"instruction": "Edit the following code to add a sharing feature that posts to Facebook.", "input": "def share(message):\n    #code here", "output": "def share(message):\n    import facebook\n    graph = facebook.GraphAPI(access_token=<ACCESS_TOKEN>)\n    graph.put_object(parent_object='me', connection_name='feed', message=message)", "category": "Python"}, {"instruction": "Describe how a web server handles a request.", "input": "", "output": "When a web server receives a request, it typically passes the request to a request handler. The request handler interprets the request and takes the appropriate action. Depending on the type of request, this could include accessing a file or a database, or running an application. After the request has been processed, the response is typically sent back to the user in the form of HTML, XML, or JSON.", "category": "Python"}, {"instruction": "Create a Flask application to display a web page containing the words \"Hello, World.\"", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n   return \"<h1>Hello, World!</h1>\"\n\nif __name__ == '__main__':\n   app.run()", "category": "Python"}, {"instruction": "Use Python to reverse the order of a string input.", "input": "I love coding", "output": "def reverse_string(string): \n    return string[::-1]\n\nstring_input = 'I love coding'\n\nreverse_string(string_input)", "category": "Python"}, {"instruction": "Create a Java class named \"MyClass\" with three methods - getName(), setName(), and displayName().", "input": "", "output": "public class MyClass {\n   private String name;\n \n   // constructor\n   public MyClass(String name) {\n      this.name = name;\n   }\n \n   // getName\n   public String getName() {\n      return this.name;\n   }\n \n   // setName\n   public void setName(String name) {\n      this.name = name;\n   }\n \n   // displayName\n   public void displayName() {\n      System.out.println(\"Name is: \" + this.name);\n   }\n}", "category": "Python"}, {"instruction": "Create a JSON from a given array.", "input": "[1, 2, 3, 4, 5]", "output": "let array = [1, 2, 3, 4, 5];\n\nlet json = JSON.stringify(array);\n\nconsole.log(json);", "category": "Python"}, {"instruction": "Develop an HTML page in which you can display a message to the user.", "input": "", "output": "<html>\n    <head>\n        <title>Display Message</title>\n    </head>\n    <body>\n        <div>\n            <h1>Welcome!</h1>\n            <p>This page displays a message to the user.</p>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Use Predicate logic for representing the following statement.", "input": "\"An elephant only lives in an African safari.\"", "output": "\u2200x(Elephant (x) \u2227 Lives_in(x, African_safari))", "category": "Python"}, {"instruction": "Edit the given python code to execute the arithmetic operation.", "input": "a = 8\nb = a+2", "output": "a = 8\nb = a + 2\nc = a * b\nprint(c)", "category": "Python"}, {"instruction": "Create a query in MySQL which fetches the first 10 records from a table called 'table1'.", "input": "", "output": "SELECT * FROM table1 LIMIT 10;", "category": "Python"}, {"instruction": "Edit the given HTML code to create a paragraph element.", "input": "<div>Hello World!</div>", "output": "<div><p>Hello World!</p></div>", "category": "Python"}, {"instruction": "Round the number 3.1415 to the nearest hundredth", "input": "", "output": "Math.round(3.1415 * 100) / 100;", "category": "Python"}, {"instruction": "Retrieve the company name from the following object", "input": "const user = {\n    name: 'John Doe',\n    company: 'Google'\n}", "output": "user.company", "category": "Python"}, {"instruction": "Create a MongoDB query to find all the documents containing the string \"Apple\" in the field \"Company\".", "input": "", "output": "db.collection.find({Company: { $regex: /Apple/ }});", "category": "Python"}, {"instruction": "Write the SQL query to select the last element of a table", "input": "table_name: users", "output": "SELECT * FROM users ORDER BY id DESC LIMIT 1;", "category": "Python"}, {"instruction": "Create a dictionary with three items of your choice", "input": "", "output": "{\n    'apple': 'fruit',\n    'carrot': 'vegetable',\n    'sugar': 'sweetener'\n}", "category": "Python"}, {"instruction": "Given the following data structure, write a function that takes two arguments and returns the value of the specified property from the object", "input": "const data = {\n  id: 1,\n  name: 'John'\n}", "output": "function getValue(data, key) {\n    return data[key];\n}", "category": "Python"}, {"instruction": "Create an array with 3 elements, first element is 5, the second element is 17 and the third element is identical to the first element", "input": "", "output": "[5, 17, 5]", "category": "Python"}, {"instruction": "Modify the following CSS code to change the background color of the element to \"#FFC0CB\"", "input": ".main-page {\n    background-color: #FFF;\n}", "output": ".main-page {\n    background-color: #FFC0CB;\n}", "category": "Python"}, {"instruction": "Design an algorithm in JavaScript to check if a given string consists of only unique characters.", "input": "Hello", "output": "function isUnique(str) {\n    for(let i = 0; i<str.length; i++){\n        for(let j = i+1; j<str.length; j++){\n            if(str.charAt(i) === str.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nlet str = 'Hello';\nlet result = isUnique(str);\nconsole.log(result);", "category": "Python"}, {"instruction": "Design a program to count the total number of even numbers in a given array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)", "category": "Python"}, {"instruction": "Create an algorithm in JavaScript to sort an array of numbers.", "input": "[5, 2, 4, 6, 1]", "output": "let arr = [5, 2, 4, 6, 1];\n\narr.sort(function(a, b){\n    return a-b;\n});\n\nconsole.log(arr);", "category": "Python"}, {"instruction": "Using the same array, write a function that returns the largest number", "input": "[3, 5, 22, 11, 16, 9]", "output": "function getMaxNumber(nums) {\n    let maxNum = nums[0];\n  \n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] > maxNum) {\n            maxNum = nums[i];\n        }\n    }\n  \n    return maxNum;\n}", "category": "Python"}, {"instruction": "Create a TensorFlow neural network model to classify animals into 4 categories.", "input": "", "output": "import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(4, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a Python program to parse a text string given a regular expression and return the matches.", "input": "", "output": "import re\n\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array of words and returns an array of the lengths of each of those words.", "input": "", "output": "function lengths(words) {\n  var length = [];\n  for (var i = 0; i < words.length; i++) {\n    length.push(words[i].length);\n  }\n  return length;\n}", "category": "Python"}, {"instruction": "Name some of the important data types in Python.", "input": "", "output": "The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets.", "category": "Python"}, {"instruction": "Generate a pseudocode for an algorithm to check if an array is a palindrome.", "input": "", "output": "FUNCTION isPalindrome(arr[], size)\n    START \n        i <- 0 \n        j <- size-1 \n \n        WHILE i < j DO\n            IF arr[i] != arr[j] \n                RETURN false\n            END IF \n            i <- i + 1\n            j <- j - 1\n        END WHILE \n        RETURN true\n    END", "category": "Python"}, {"instruction": "Tell me how to print an IMDB movie rating using Python", "input": "", "output": "import imdb\n\n# create an instance of the IMDb class\nia = imdb.IMDb()\n\n# get the movie\nmovie = ia.get_movie('tt0111161') # The Shawshank Redemption\n\n# get the rating\nrating = movie['rating']\n\n# print the rating\nprint(f\"Rating for the movie 'The Shawshank Redemption': {rating}\")", "category": "Python"}, {"instruction": "Design a Spring Boot class that provides a bean of type String to the application.", "input": "", "output": "@Configuration\npublic class StringBeanProvider {\n\n    @Bean\n    public String provideString() {\n        return \"Hello World!\";\n    }\n\n}", "category": "Python"}, {"instruction": "Create a Javascript function which takes an array as an argument and returns an array with the elements in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "function reverseArray(arr) {\n  return arr.reverse();\n}", "category": "Python"}, {"instruction": "Design a Java class for a Car which has the following attributes: name, model, year, and price.", "input": "", "output": "class Car {\n \n private String name;\n private String model; \n private int year;\n private double price;\n \n //constructor to initialize Car object\n public Car(String name, String model, int year, double price) {\n  this.name = name;\n  this.model = model;\n  this.year = year;\n  this.price = price;\n }\n \n //getters and setters\n public String getName() {\n  return name;\n }\n \n public void setName(String name) {\n  this.name = name;\n }\n \n public String getModel() {\n  return model;\n }\n \n public void setModel(String model) {\n  this.model = model;\n }\n \n public int getYear() {\n  return year;\n }\n \n public void setYear(int year) {\n  this.year = year;\n } \n \n public double getPrice() {\n  return price;\n }\n \n public void setPrice(double price) {\n  this.price = price;\n }\n \n @Override\n public String toString() {\n  return \"Car: \" \n   + this.name \n   + \" \" + this.model \n   + \" (\" + this.year + \"), \" \n   + this.price;\n }\n  \n}", "category": "Python"}, {"instruction": "Write a function to reverse a linked list in O(n) time complexity.", "input": "", "output": "def reverse(head):\n    prev = None\n    curr = head\n    while curr is not None:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Create a condition statement to check if all elements in a list are the same.", "input": "", "output": "all_same = len(list) > 0 and all(x == list[0] for x in list)", "category": "Python"}, {"instruction": "Translate the following JavaScript code into Python.", "input": "let x = 10;\nif(x > 0){\n    console.log(\"x is positive\");\n}", "output": "x = 10\nif x > 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "Write an SQL query that displays a table of the ten most commonly used words in the given article.", "input": "Today, I climbed the tallest mountain in the world. It was an incredible experience with stunning views and a sense of accomplishment at the top.", "output": "SELECT word, COUNT(*) AS occurrence \nFROM article \nGROUP BY word \nORDER BY occurrence DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Given a list of lists, generate a single flattened list.", "input": "lst = [[1, 2], [3, 4], [5, 6]]", "output": "lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)", "category": "Python"}, {"instruction": "Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.", "input": "string = \"Hello\"\nnumber = 3", "output": "def printString(string, number):\n    for i in range(number):\n        print(string)\n\nprintString(string, number)", "category": "Python"}, {"instruction": "Given a string containing a comma-separated list of integers, write code to print all the even numbers.", "input": "string = \"23, 2, 5, 16, 1, 9, 8\"", "output": "#Split the string into a list of integers\nnumbers = [int(x) for x in string.split(',')]\n\n#Iterate through the list, if the integer is even, print it\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)", "category": "Python"}, {"instruction": "Implement an algorithm to delete a node in a singly linked list, given only access to the node.", "input": "head = [4, 5, 1, 9]\ndel = 5", "output": "def deleteNode(head, del): \n  \n    # If the node to be deleted is the head node \n    if head.data == del: \n        head = head.next\n        return head \n  \n    # Find previous node of the node to be deleted \n    previous = head \n    while previous.next and previous.next.data != del: \n        previous = previous.next\n  \n    # If node to be deleted is not present in the list \n    if previous.next is None: \n        return head \n  \n    # Change the next pointer of the previos node \n    previous.next = previous.next.next\n  \n    return head", "category": "Python"}, {"instruction": "Identify what type of error the code has", "input": "x = 10\ny = \"10\"\nz = x + y", "output": "This code produces a TypeError as it is attempting to add an integer to a string.", "category": "Python"}, {"instruction": "Write a code that returns the longest substring of the given string without repeating characters.", "input": "string = \"abcabcbb\"", "output": "def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string", "category": "Python"}, {"instruction": "Create a C program that asks for a user input, adds 10 to the value, and prints the result.", "input": "", "output": "#include <stdio.h> \n \nint main() \n{ \n    int num; \n    printf(\"Enter a number: \"); \n    scanf(\"%d\", &num);\n    num += 10;\n    printf(\"The result is %d\", num);\n    return 0; \n}", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns an array of the words which are longer than 5 characters.", "input": "\"Welcome to the world of programming\"", "output": "def get_long_words(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Create a while loop to print all elements of an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(arr):\n  print(arr[i])\n  i += 1", "category": "Python"}, {"instruction": "Design a data structure in Java to store and sort a list of customers by their age.", "input": "", "output": "public class Customer{\n    private int age;\n    private String name;\n\n    public Customer(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class AgeSortedCustomerList {\n    private List<Customer> customers = new ArrayList<>();\n\n    public void add(Customer customer) {\n        customers.add(customer);\n    }\n\n    public List<Customer> getSortedByAge(){\n        customers.sort(Comparator.comparing(Customer::getAge));\n        return customers;\n    }\n\n}", "category": "Python"}, {"instruction": "Insert 15 random numbers between 0 and 10 in a list.", "input": "", "output": "import random\n\nnumbers = []\nfor i in range(15):\n    numbers.append(random.randrange(0, 10))\nprint(numbers)", "category": "Python"}, {"instruction": "Create an HTML document with a heading \"Heading\" and a paragraph with the text \"Hello, World!\"", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Example Document</title>\n</head>\n<body>\n  <h1>Heading</h1>\n  <p>Hello, World!</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a CSS rule to set a transparent border for all buttons on a page.", "input": "", "output": "button {\n  border: 2px solid transparent;\n}", "category": "Python"}, {"instruction": "Create an HTML page with a form that verifies if the email address entered is valid or not.", "input": "", "output": "<form method=\"post\" action=\"verify.php\">\n  Enter your email address:<br>\n  <input type=\"text\" name=\"email\">\n  <br><br>\n  <input type=\"submit\" value=\"Verify\">\n</form>", "category": "Python"}, {"instruction": "Create a function in JavaScript that finds the maximum number between two given numbers.", "input": "", "output": "function maxNum(num1, num2) {\n  if (num1 > num2) {\n    return num1;\n  } \n  else {\n    return num2;\n  }\n}", "category": "Python"}, {"instruction": "Create a function in python to print all values between two given values. Do not include the two given values in the output.", "input": "", "output": "def print_range(start, end): \n    for value in range(start + 1, end): \n        print(value, end = \" \")", "category": "Python"}, {"instruction": "Reset the input field in areact Native form after submitting the form.", "input": "", "output": "onSubmit() {\n  this.form.reset();\n}", "category": "Python"}, {"instruction": "Create a loop to go through all elements of a dictionary.", "input": "d = {'name':'John', 'age': 27, 'job': 'Programmer'}", "output": "for key, val in d.items():\n    print(f\"{key} : {val}\")", "category": "Python"}, {"instruction": "Create a MySQL trigger to store the times for insertion and updating a row in a table.", "input": "", "output": "CREATE TRIGGER tr_storeTime\n BEFORE INSERT OR UPDATE ON <Table>\n FOR EACH ROW \nBEGIN\n  IF INSERTING THEN\n    SET NEW.addedTime = NOW();\n  END IF;\n  IF UPDATING THEN\n    SET NEW.updatedTime = NOW();\n  END IF;\nEND;", "category": "Python"}, {"instruction": "Repair the given HTML code to display a \u2018div\u2019 element centered on the page with a width of 400px.", "input": "<div style=\"width: 400px; margin: 0 auto;\"></div>", "output": "<div style=\"width: 400px; margin: 0 auto; text-align: center;\"></div>", "category": "Python"}, {"instruction": "Write a query in MySQL to find the particular employee's salary from an employee table.", "input": "Employee table\nname | age | salary\nBob  | 20  | 20000\nJohn | 45  | 27000\nTim  | 23  | 35000", "output": "SELECT salary FROM Employee WHERE name = 'Bob';", "category": "Python"}, {"instruction": "In Ruby, write a method to find the sum of two numbers from the given string.", "input": "String: \u201cThe sum of 4 and 8 is 12\u201d", "output": "def sum_from_string(str)\n  array = str.scan(/\\d+/).map(&:to_i)\n  sum = array[0] + array[1]\n  return sum\nend\n\nsum_from_string(\"The sum of 4 and 8 is 12\") # Output: 12", "category": "Python"}, {"instruction": "Write a SQL query to select all employee records with salary greater than 30000.", "input": "Employees Table\n\nid | name  | age | salary\n------------------------\n1  | John  | 20  | 25000\n2  | Nancy | 27  | 35000\n3  | David | 30  | 40000\n4  | Mike  | 36  | 31000", "output": "SELECT * FROM Employees\nWHERE salary > 30000;", "category": "Python"}, {"instruction": "Edit the given code in Python to produce the desired output.", "input": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9", "output": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9", "category": "Python"}, {"instruction": "Create a class in C++ for a circle which includes radius as a member variable.", "input": "", "output": "#include <iostream>\n\nclass Circle {\n    private:\n        double radius;\n\n    public:\n        Circle(double r) {\n            radius = r;\n        }\n\n        double getRadius() {\n            return radius;\n        }\n};", "category": "Python"}, {"instruction": "Write code to produce the output mentioned.", "input": "Input Array: [3, 4, 5, 7, 8]\nOutput Array: [7, 8, 5, 4, 3]", "output": "int[] input_arr = { 3, 4, 5, 7, 8 };\nint[] output_arr = new int[input_arr.length];\nfor (int i = 0; i < input_arr.length; i++) {\n    output_arr[i] = input_arr[input_arr.length - 1 - i];\n}", "category": "Python"}, {"instruction": "Write a custom CSS class to add a 3px solid blue border around a button with text size as 18px.", "input": "", "output": ".button {\n    text-size: 18px;\n    border: 3px solid blue;\n}", "category": "Python"}, {"instruction": "Write a SQL statement to fetch the maximum age from the table \"employee\".", "input": "", "output": "SELECT MAX(Age) FROM Employee;", "category": "Python"}, {"instruction": "Name at least three sorting algorithms that can be implemented in PHP.", "input": "", "output": "1. Bubble Sort. \n2. Selection Sort. \n3. Insertion Sort.", "category": "Python"}, {"instruction": "How would you use PostgreSQL to delete a row with a given ID from a table?", "input": "", "output": "DELETE FROM table_name WHERE id = <value>;", "category": "Python"}, {"instruction": "Write an algorithm to calculate the maximum subarray sum", "input": "list_of_numbers = [-2, 3, 1, -4]", "output": "def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n    return max_so_far", "category": "Python"}, {"instruction": "Encrypt the following string using a substitution cipher", "input": "thisisasupersecurestring", "output": "dnklkfaxvgpsvpytjimnzt", "category": "Python"}, {"instruction": "Write a function in Python that takes in a list and returns the second largest element", "input": "list_of_numbers = [5, 10, 15, 20]", "output": "def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num", "category": "Python"}, {"instruction": "Implement a LRU cache in Java", "input": "", "output": "import java.util.HashMap;\n \npublic class LRUCache { \n  \n    // Custom Doubly Linked List \n    static class CacheNode { \n        CacheNode prev; \n        CacheNode next; \n        int key; \n        int value; \n    } \n  \n    // Map containing the Keys \n    private HashMap<Integer, CacheNode> map \n        = new HashMap<Integer, CacheNode>(); \n  \n    // Maximum number of elements in the cache \n    private int capacity; \n  \n    // Current size \n    private int size; \n  \n    // Head of the DLL \n    private CacheNode head; \n  \n    // Tail of the DLL \n    private CacheNode tail; \n  \n    public LRUCache(int capacity) { \n        this.capacity = capacity; \n        this.size = 0; \n    } \n  \n    // Lookup a key in the cache \n    public int get(int key) { \n  \n        // Return -1 if no such key exists \n        if (!map.containsKey(key)) { \n            return -1; \n        } \n  \n        // Get the node \n        CacheNode node = map.get(key); \n  \n        // Delete the node \n        removeNode(node); \n  \n        // Put it at the head \n        addAtHead(node); \n  \n        // Return its value \n        return node.value; \n    } \n  \n    // Add a new node to the cache \n    public void put(int key, int value) { \n        CacheNode node = new CacheNode(); \n        node.key = key; \n        node.value = value; \n  \n        // Check if the node is already present \n        if (map.containsKey(key)) { \n            CacheNode oldNode = map.get(key); \n            removeNode(oldNode); \n            addAtHead(node); \n            map.put(key, node); \n        } else { \n            // Add at the front of the list \n            if (size == capacity) { \n                // Delete the last node \n                map.remove(tail.key); \n                removeNode(tail); \n            } \n            addAtHead(node); \n            map.put(key, node); \n        } \n    } \n  \n    // Remove a node from the list \n    public void removeNode(CacheNode node) { \n        if (node.prev != null) { \n            node.prev.next = node.next; \n        } else { \n            head = node.next; \n        } \n  \n        if (node.next != null) { \n            node.next.prev = node.prev; \n        } else { \n            tail = node.prev; \n        } \n  \n        size--; \n    } \n  \n    // Put a node at the front of the list \n    public void addAtHead(CacheNode node) { \n        node.next = null; \n        node.prev = null; \n  \n        if (head == null) { \n            head = node; \n            tail = node; \n        } else { \n            node.next = head; \n            head.prev = node; \n            head = node; \n        } \n  \n        size++; \n    } \n}", "category": "Python"}, {"instruction": "Write a Bash script to quickly calculate the mean for a set of numbers", "input": "5 10 15 20", "output": "#!/bin/bash\n\n#Create array from set of numbers\narr=(5 10 15 20)\n\n#Initialize sum and count\nsum=0\ncount=0\n\n#Loop through the array and sum up the values\nfor item in ${arr[@]}; do\n    let sum=sum+$item \n    let count=count+1\ndone\n\n#Calculate mean\necho $(echo $sum/$count | bc -l)", "category": "Python"}, {"instruction": "In JavaScript, how do you loop through the properties of an object?", "input": "", "output": "In JavaScript, an object can be looped through by using either a for-in loop or by using the Object.keys() method. The for-in loop will iterate through the properties of the object and can be used to access the values associated with the properties. The Object.keys() method returns an array of the object's own property names and thus will loop through all the enumerable properties of the object.", "category": "Python"}, {"instruction": "Create a class in java, that has two fields and two constructors.", "input": "Field1: String; Field2: int", "output": "public class MyClass { \n    String field1; \n    int field2; \n    \n    public MyClass(String field1, int field2) { \n        this.field1 = field1; \n        this.field2 = field2; \n    } \n    \n    public MyClass() { \n        this.field1 = \"\"; \n        this.field2 = 0; \n    } \n}", "category": "Python"}, {"instruction": "Create a HTML page with a paragraph and a button to toggle the paragraph's text color between red and blue.", "input": "", "output": "<html>\n    <head>\n        <title>Color Toggle</title>\n        <script>\n            let isRed = true;\n\n            let toggleButton = document.getElementById('toggle-button');\n            toggleButton.addEventListener('click', () => {\n                let paragraph = document.getElementsByTagName('p')[0]; \n                paragraph.style.color = isRed ? 'blue' : 'red';\n                isRed = !isRed;\n            });\n       </script>\n    </head>\n    <body>\n        <p>This is a paragraph.</p>\n        <button id='toggle-button'>Toggle color</button>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a GPT-2 model to generate text given a seed phrase.", "input": "", "output": "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n \ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2LMHeadModel.from_pretrained('gpt2')\n \ndef generate_text(seed_phrase):\n    input_ids = torch.tensor(tokenizer.encode(seed_phrase)).unsqueeze(0)\n    output_ids = model.generate(\n        input_ids=input_ids, \n        max_length=100, \n        do_sample=True\n    )\n    return tokenizer.decode(output_ids[0])", "category": "Python"}, {"instruction": "Create an HTML form in which a user can input text and a button to submit.", "input": "", "output": "<html>\n    <body>\n        <form>\n            <input type=\"text\" name=\"input\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a C++ program to merge two arrays of different lengths.", "input": "", "output": "#include <iostream>\nusing namespace std;\n \nvoid mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[]) \n{ \n    int i = 0, j = 0, k = 0; \n  \n    while (i<n1 && j <n2) \n    { \n        if (arr1[i] < arr2[j]) \n            arr3[k++] = arr1[i++]; \n        else\n            arr3[k++] = arr2[j++]; \n    } \n   \n    while (i < n1) \n        arr3[k++] = arr1[i++]; \n  \n    while (j < n2) \n        arr3[k++] = arr2[j++]; \n} \n\n// Driver Code\nint main() \n{ \n    int arr1[] = {1, 3, 5, 7}; \n    int n1 = sizeof(arr1) / sizeof(arr1[0]); \n  \n    int arr2[] = {2, 4, 6, 8}; \n    int n2 = sizeof(arr2) / sizeof(arr2[0]); \n  \n    int arr3[n1+n2]; \n    mergeArrays(arr1, arr2, n1, n2, arr3); \n  \n    for (int i=0; i < n1+n2; i++) \n        cout << arr3[i] << \" \"; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a JavaScript program to accept user input and store it in a variable.", "input": "", "output": "const userInput = prompt(\"Please enter some text:\");", "category": "Python"}, {"instruction": "Write a C++ code to perform selection sort on a given array of numbers.", "input": "[2, 6, 4, 1, 7, 9, 8]", "output": "void selectionSort(int arr[], int n) \n{ \n    int i, j, min_idx; \n  \n    // One by one move boundary of unsorted subarray \n    for (i = 0; i < n-1; i++) \n    { \n        // Find the minimum element in unsorted array \n        min_idx = i; \n        for (j = i+1; j < n; j++) \n        {\n            if (arr[j] < arr[min_idx]) \n            {\n                min_idx = j; \n            }\n        } \n  \n        // Swap the found minimum element with the first \n        // element \n        swap(&arr[min_idx], &arr[i]); \n    } \n}\n\n// Output\n// [1, 2, 4, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Train a machine learning model to predict the stock price of a company based on historical data.", "input": "Historical data for the company Apple Inc.", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('Apple_Historical_Data.csv')\n\n# Get target and predictors\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Train the Linear Regression model\nlr_model = LinearRegression()\nlr_model.fit(X, y)\n\n# Predict stock price \nprediction = lr_model.predict(X)", "category": "Python"}, {"instruction": "Write a CSS code to style links in a page.", "input": "", "output": "a {\n  text-decoration: none;\n  font-weight: bold;\n  color: #0F8CC2;\n}\n\na:visited {\n  color: #00FFDC;\n}\n\na:hover {\n  color: #FF0089;\n}\n\na:active {\n  color: #C30000;\n}", "category": "Python"}, {"instruction": "Write a web scraper using Python", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')", "category": "Python"}, {"instruction": "Generate HTML for a button with the text \"Click Here!\".", "input": "", "output": "<button>Click Here!</button>", "category": "Python"}, {"instruction": "Given a list of phone numbers, write a code to find the one with the highest digits.", "input": "phone_numbers = [\"+440123456789\", \"+45987654321\", \"+441234567890\"]", "output": "highest = 0\nhighest_phone = None\n\nfor number in phone_numbers:\n    number_digits = ''.join(filter(str.isdigit, number))\n    if int(number_digits) > highest:\n        highest_phone = number\n        highest = int(number_digits)\n\nprint(f\"The phone number with highest digits is {highest_phone}.\")", "category": "Python"}, {"instruction": "Formulate an SQL query to find the most expensive product in a given database.", "input": "", "output": "SELECT MAX(price) FROM products;", "category": "Python"}, {"instruction": "Write a CSS selector to style all buttons with the class 'submit'.", "input": "", "output": ".submit {\n  /* CSS properties here */\n}", "category": "Python"}, {"instruction": "Create a SQL query to select all columns in a table but exclude the contents of a specific column.", "input": "", "output": "SELECT * FROM Table_Name WHERE column_name IS NULL;", "category": "Python"}, {"instruction": "Write a CSS class to create a link which shows on hover.", "input": "", "output": ".show-on-hover {\n  display: none;\n  &:hover {\n    display: block;\n  }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to find the names and salaries of all employees who have salaries greater than 80,000.", "input": "", "output": "SELECT name, salary FROM Employees WHERE salary > 80000;", "category": "Python"}, {"instruction": "Print the first element that occurs in the list and is divisible by 5.", "input": "list = [2, 3, 5, 10, 15, 30]", "output": "for element in list:\n    if element % 5 == 0:\n        print(element)\n        break", "category": "Python"}, {"instruction": "Return the index of the first occurrence of an element in the given array.", "input": "arr = [2, 3, 3, 1, 5, 2]", "output": "def first_occurrence(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Create a Django view to handle GET requests for displaying a list of products.", "input": "appname/models.py\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)", "output": "# Create a Django view to handle GET requests.\ndef product_list_view(request):\n    # Get the list of products\n    products = Product.objects.all()\n\n    # Return the list of products\n    context = {\n        'products': products\n    }\n    return render(request, 'product_list.html', context)", "category": "Python"}, {"instruction": "Write an R code to get the names of all uncorrelated columns in a data frame.", "input": "", "output": "# Get all column names\nall_columns <- names(data_frame)\n\n# Create an empty vector\nuncorrelated_columns <- c()\n# Iterate each column name in the data_frame\nfor(column_name in all_columns) {\n  # Store the correlations of each column in a vector\n  correlations <- cor(data_frame[column_name], data_frame[-column_name])\n  # If the value of a correlation it is below 0.8\n  if(any(correlations < 0.8)) {\n    # Add column name to empty vector\n    uncorrelated_columns <- c(uncorrelated_columns, column_name)\n  }\n}", "category": "Python"}, {"instruction": "Create a list of objects of the following class and print the objects as dictionary.", "input": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "output": "cars = []\ncars.append(Car(\"Ford\", \"Mustang\", 2019))\ncars.append(Car(\"Toyota\", \"Corolla\", 2020))\n\nfor car in cars:\n    print(car.__dict__)", "category": "Python"}, {"instruction": "Create a class in Python that implements an algorithm for sorting a list of numbers.", "input": "list = [3, 2, 5, 1, 4]", "output": "class SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list", "category": "Python"}, {"instruction": "Edit the following code to check if the resulting output of the division is an integer.", "input": "a = 15\nb = 4\noutput = a/b", "output": "if b != 0:\n    output = a/b\n    assert output.is_integer(), \"Result of division is not an integer\"", "category": "Python"}, {"instruction": "You are given the following code. Write an 'assert' statement that checks if the email address is all lowercase or not.", "input": "email = \"THIS_IS_TEST@EMAIL.COM\"", "output": "assert email.lower() == email, \"Email address should be all lowercase\"", "category": "Python"}, {"instruction": "Write a code to accept a string and return the last character.", "input": "\"Hello World\"", "output": "return string[string.length-1]", "category": "Python"}, {"instruction": "Write a code to detect if a string is a palindrome or not. Output true if it is a palindrome, output false if it is not.", "input": "\"racecar\"", "output": "true", "category": "Python"}, {"instruction": "Rewrite the following code using List Comprehension to print the maximum number from a list of integers.", "input": "numbers = [3, 2, 5, 4, 6]", "output": "max_num = max([num for num in numbers])\nprint(max_num)", "category": "Python"}, {"instruction": "Construct a code to replace all instances of 'A' with 'Z' in a given string.", "input": "string = \"This is a string A with multiple A's\"", "output": "def replace_letter_A(string):\n    string = string.replace('A', 'Z')\n    return string\n\nprint(replace_letter_A(string))", "category": "Python"}, {"instruction": "Sum the numbers in the following array and print the result.", "input": "array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "total = 0\nfor row in array:\n    for element in row:\n        total += element\nprint(total)", "category": "Python"}, {"instruction": "Create an AWS service to host a website.", "input": "", "output": "Using AWS Amazon EC2 and S3 services, you can host a website.  You can use EC2 to set up a web server, and S3 can be used to store static website content such as HTML, CSS, and images.", "category": "Python"}, {"instruction": "Write a C++ code to implement quick sort algorithm.", "input": "", "output": "void quickSort(int arr[], int left, int right) \n{ \n    int i = left, j = right; \n    int tmp; \n    int pivot = arr[(left + right) / 2]; \n  \n    /* partition */\n    while (i <= j) { \n        while (arr[i] < pivot) \n            i++; \n        while (arr[j] > pivot) \n            j--; \n        if (i <= j) { \n            tmp = arr[i]; \n            arr[i] = arr[j]; \n            arr[j] = tmp; \n            i++; \n            j--; \n        } \n    }; \n  \n    /* recursion */\n    if (left < j) \n        quickSort(arr, left, j); \n    if (i < right) \n        quickSort(arr, i, right); \n}", "category": "Python"}, {"instruction": "Write an SQL statement to delete all rows from a table named 'employees'.", "input": "", "output": "DELETE FROM employees;", "category": "Python"}, {"instruction": "Write a for loop for the following dictionary.", "input": "my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}", "output": "my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}\n\nfor key, value in my_dict.items():\n    print(key, value)", "category": "Python"}, {"instruction": "Construct a syntax tree representing the following sentence.", "input": "Bob likes apples.", "output": "S\n                      \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n                      NP VP\n                    \u250c\u2500\u2534\u2500\u2510   \u2502\n                   Bob V  NP\n                         \u2502  \u2502\n                         V  N \n                         \u2502 \u250c\u2500\u2534\u2500\u2510 \n                         likes apples", "category": "Python"}, {"instruction": "Create a for loop for the list.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [1, 2, 3, 4]\n\nfor item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.", "input": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']", "output": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)", "category": "Python"}, {"instruction": "How can you optimized the following program's runtime?", "input": "def my_function(my_list):\n    output = []\n    for i in range(len(my_list)):\n        output.append(my_list[i] * 2)\n    return output", "output": "def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.", "category": "Python"}, {"instruction": "Write a query in SQL to list the products from a given supplier.", "input": "", "output": "SELECT * FROM Products \nWHERE SupplierId = 'SupplierId'", "category": "Python"}, {"instruction": "Create a function in Python that takes a list and returns the first two elements that adds up to 0.", "input": "[1, 5, 2, -7, 3]", "output": "def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None", "category": "Python"}, {"instruction": "Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.", "input": "arr = [10, 22, 28, 29, 30, 40], target = 44", "output": "def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair", "category": "Python"}, {"instruction": "Create a function in Java to generate Fibonacci numbers up to n.", "input": "", "output": "public class Fibonacci { \n    public static int fibonacci(int number){ \n        if(number == 1 || number == 2){ \n            return 1; \n        } \n        return fibonacci(number-1) + fibonacci(number -2); //tail recursion  \n    } \n       \n    public static void printFibonacci(int number){ \n        for(int i = 1; i <= number; i++){ \n            System.out.print(fibonacci(i) +\" \"); \n        } \n    } \n}", "category": "Python"}, {"instruction": "What does the 'break' keyword do in a loop structure in Python and how is it used?", "input": "", "output": "The 'break' keyword is used to break out of a loop prematurely. It causes an immediate exit from the loop, bypassing any remaining code in the loop. It is generally used inside a conditional statement, such as an 'if' statement, as it can be used to stop the loop from executing when a certain condition is satisfied. For example:\n\nfor number in range(10):\n if number == 5:\n  break\n print(number)\n\nThis code will print the numbers 0 through 4 and will exit the loop once it reaches the number 5. If the 'break' statement is not used the loop will continue and print all the numbers up to 9.", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum possible sum of a subarray within the array.", "input": "", "output": "def maxSubArraySum(arr):\n    maxsum = arr[0] \n    for i in range(len(arr)):\n        newSum = 0\n        for j in range(1, len(arr)):\n            newSum += arr[j]\n            if(newSum > maxsum):\n                maxsum = newSum\n    return maxsum", "category": "Python"}, {"instruction": "Find the sum of two integers without using + or - signs.", "input": "a = 7\nb = 5", "output": "def add(a, b): \n    # Iterate till there is no carry  \n    while (b != 0): \n          \n        # Carry now contains common  \n        # set bits of x and y \n        carry = a & b \n  \n        # Sum of bits of x and y where at  \n        # least one of the bits is not set \n        a = a ^ b \n  \n        # Carry is shifted by one so that  \n        # adding it to x gives the required sum \n        b = carry << 1\n          \n    return a", "category": "Python"}, {"instruction": "Generate a code to implement a binary search in an array with upto 1 million elements.", "input": "", "output": "def binary_search(arr, x): \n    l = 0\n    r = len(arr) - 1\n\n    while l <= r: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n  \n    return -1", "category": "Python"}, {"instruction": "Create a python generator that prints fibonacci numbers from n to 2*n-1.", "input": "n = 10", "output": "def fibonacci_generator(n):\n    a, b = 0, 1\n    while a < 2 * n - 1:\n        yield a\n        a, b = b, a + b", "category": "Python"}, {"instruction": "Generate a code to find the kth smallest number in an unsorted list given three inputs (list, k and n).", "input": "list = [12, 3, 5, 7, 19] \nk = 3\nn = len(list)", "output": "def find_kth_smallest_number(list, n, k): \n  \n    list.sort()\n\n    # kth smallest element \n    return list[k-1]", "category": "Python"}, {"instruction": "How can you combine these two lists without duplication?", "input": "list_one = ['a', 'b', 'c']\nlist_two = ['c', 'd', 'e']", "output": "combined_list = set(list_one + list_two)\nprint(list(combined_list))  # ['a', 'b', 'c', 'd', 'e']", "category": "Python"}, {"instruction": "Create a new array containing the square of each element in the given array.", "input": "my_array = [2, 3, 4, 5]", "output": "new_array = [] \n  \nfor x in my_array: \n   new_array.append(x * x) \n  \nprint(new_array) # [4, 9, 16, 25]", "category": "Python"}, {"instruction": "Create a new object with the three properties of an employee specified in the given object.", "input": "employee = {\n    'name': 'John',\n    'salary': 6000\n}", "output": "new_object = {\n    'name': employee['name'],\n    'salary': employee['salary'],\n    'age': 0\n}", "category": "Python"}, {"instruction": "Generate a web page that shows the company name, logo, and description.", "input": "Company Name: Global Inc.\nCompany Logo: https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Global_Inc_logo.svg/220px-Global_Inc_logo.svg.png\nCompany Description: Global Inc. is a leading technology provider of innovative solutions for customers around the globe.", "output": "\"\"\"\nGenerate a web page that shows the company name, logo, and description\n\"\"\"\n\n<html>\n  <head>\n    <title>Global Inc.</title>\n  </head>\n  <body>\n    <h1>Global Inc.</h1>\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Global_Inc_logo.svg/220px-Global_Inc_logo.svg.png\">\n    <p>Global Inc. is a leading technology provider of innovative solutions for customers around the globe.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Correct the syntax error in the following HTML structure.", "input": "<div>\n<h1>My Web Page</h>\n<div/>", "output": "<div>\n<h1>My Web Page</h1>\n</div>", "category": "Python"}, {"instruction": "Edit the existing Python code to convert Fahrenheit (F) degrees to Celsius (C) degrees.", "input": "def convert(F):\n return F + 32", "output": "def convert(F):\n return (F-32)*5/9", "category": "Python"}, {"instruction": "Parse the following HTML text and print out all of the  elements and the content inside them.", "input": "<html><div><h1>This is a test</h1><p>This is a paragraph</p></div></html>", "output": "from bs4 import BeautifulSoup\n\nhtml = '<html><div><h1>This is a test</h1><p>This is a paragraph</p></div></html>'\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Print out all the elements\nfor tag in soup.find_all():\n    print(f'Tag: {tag.name}')\n    \n# Print out the content inside the tags\nfor element in soup.find_all():\n    print(element.text)\n\n# Output:\nTag: html\nTag: div\nTag: h1\nTag: p\nThis is a test\nThis is a paragraph", "category": "Python"}, {"instruction": "Use the following code to print each letter of the string \"Hello World\" on a separate line.", "input": "string = \"Hello World\"", "output": "string = \"Hello World\"\nfor letter in string:\n    print(letter)", "category": "Python"}, {"instruction": "Print a pyramid of stars that has 5 levels.", "input": "", "output": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\" \")\n    print(\"\")", "category": "Python"}, {"instruction": "Using the following list of countries and their population, write a program that prints the name and population of the most populous country.", "input": "countries = [{'name': 'India', 'population': 1367030000}, {'name': 'China', 'population': 1406918015}, {'name': 'United States', 'population': 327000000}]", "output": "def find_most_populous_country(countries):\n    max_population = 0\n    most_populous_country = None\n    for country in countries:\n        if country['population'] > max_population:\n            max_population = country['population']\n            most_populous_country = country\n    return f'The most populous country is {most_populous_country[\"name\"]} with a population of {most_populous_country[\"population\"]}'\n\nprint(find_most_populous_country(countries)) # Output: The most populous country is China with a population of 1406918015", "category": "Python"}, {"instruction": "Given two strings, find out if one is a permutation of the other.", "input": "string1 = \"cat\"\nstring2 = \"act\"", "output": "def check_permutation(string1, string2):\n    if len(string1) != len(string2):\n        # The strings can't be permutations if they are different lengths\n        return False\n    \n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Sort the lists to make comparison easier\n    list1.sort()\n    list2.sort()\n    \n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n\n# Example\nprint(check_permutation(\"cat\", \"act\")) # Output: True", "category": "Python"}, {"instruction": "Write an SQL query to sort the table 'employees' based on their age in descending order.", "input": "", "output": "SELECT * FROM employees ORDER BY age DESC;", "category": "Python"}, {"instruction": "Identify a code snippet from the following four options.", "input": "def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nfor option in ['A', 'B', 'C', 'D']:\n    print(option)", "output": "A is not a valid code snippet.\n\nB is not a valid code snippet.\n\nC is not a valid code snippet.\n\nD is not a valid code snippet.\n\nThe correct code snippet is:\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Create a for loop to iterate through a given list and print the list elements.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nCreate a for loop to iterate through a given list and print the list elements\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    print(item)", "category": "Python"}, {"instruction": "Classify the following object as having either a simple, complex or a composite data type.", "input": "Dictionary", "output": "Complex data type.", "category": "Python"}, {"instruction": "Print only the odd numbers from the given list.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nPrint only the odd numbers from the given list\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    if item % 2 != 0:\n        print(item)", "category": "Python"}, {"instruction": "Create an HTML page with an input box and a button. When the user clicks the button, it should print out a constant text.", "input": "", "output": "\"\"\"\nCreate an HTML page with an input box and a button. When the user clicks the button, it should print out a constant text\n\"\"\"\n\n<html>\n  <head>\n    <title>Input Box</title>\n  </head>\n  <body>\n    <input type=\"text\" id=\"input\"></input>\n    <button onclick=\"printText()\">Click Here</button>\n    <script>\n    function printText(){\n    document.write(\"This is a constant text\");\n    }\n    </script>\n</html>", "category": "Python"}, {"instruction": "Complete the following code to delete the item at a given index from a list.", "input": "index = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nComplete the following code to delete the item at a given index from a list\n\"\"\"\n\nindex = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\n# remove the item at index 4\ndel list_items[index]\n\n# print the list\nprint(list_items)", "category": "Python"}, {"instruction": "Write a code that prints each word in a given string on a separate line.", "input": "", "output": "\"\"\"\nWrite a code that prints each word in a given string on a separate line\n\"\"\"\n\ndef print_words(string):\n    words = string.split() \n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)", "category": "Python"}, {"instruction": "Print the following sentence in reverse order.", "input": "\"This is a coding challenge.\"", "output": "print(\"challenge. coding a is This\")", "category": "Python"}, {"instruction": "Create an HTML page with a heading \"Welcome to My Site\".", "input": "", "output": "<html>\n  <head>\n    <title>Welcome to My Site</title>\n  </head>\n  <body>\n    <h1>Welcome to My Site</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.", "input": "limit = 100\ntime_window = 5 seconds", "output": "import time\n\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n \n    while count < limit:\n        next_message = yield\n        count += 1\n         \n        end = time.time()\n        if (end - start) > window: \n            count = 0\n            start = end\n            \n    yield", "category": "Python"}, {"instruction": "Create a Java program to print out Armstrong numbers in a given range.", "input": "", "output": "public static void armstrongInRange(int lower, int upper) \n{ \n    int num, originalNum, remainder, n = 0;\n  \n    // Calculates the number of digits a number has \n    for(originalNum = lower + 1; originalNum < upper; originalNum++) \n    { \n        num = originalNum; \n        while(num != 0) \n        { \n            num /= 10; \n            n++; \n        }  \n          \n        num = originalNum; \n        int sum = 0; \n          \n        // Calculates the sum of the nth power of the digits \n        while(num != 0) \n        { \n            remainder = num % 10; \n            sum += Math.pow(remainder, n); \n            num /= 10; \n        } \n  \n        // Checks if the sum is equal to the original number \n        if(sum == originalNum) \n            System.out.print(originalNum +  \" \"); \n    } \n}", "category": "Python"}, {"instruction": "You need to write a function to remove all the elements with a given value from a given array.", "input": "array1=[1, 1, 2, 3, 4, 5, 1]\nvalue=1", "output": "[2, 3, 4, 5]", "category": "Python"}, {"instruction": "Construct a JSON object from the given key-value pair.", "input": "Key-Value Pair: name:John Doe", "output": "{\n  \"name\": \"John Doe\"\n}", "category": "Python"}, {"instruction": "Use the regular expression to extract the words ending with 'sion'.", "input": "String: fusion, explosion, elision", "output": "(fusion|explosion|elision)$", "category": "Python"}, {"instruction": "Determine the syntactic structure of the following sentence.", "input": "Sentence: She felt so excited that her application got approval.", "output": "Subject (she) + Verb (felt) + Adverb (so) + Adjective (excited) + Conjunction (that) + Subject (her application) + Verb (got) + Object (approval).", "category": "Python"}, {"instruction": "Parse the following XML data and print the value of the 'id' key as a string.", "input": "<root>\n    <id>123</id>\n    <name>John Doe</name>\n</root>", "output": "String value = '123'", "category": "Python"}, {"instruction": "Find the string between two substrings.", "input": "String: This is a string\nStart substring: is \nEnd substring: a", "output": "\" is \"", "category": "Python"}, {"instruction": "Design a recursanve function in Python that prints a given string in reverse.", "input": "hello", "output": "def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')", "category": "Python"}, {"instruction": "Create a HTML table element with 4 columns and 5 rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th>\n    <th>Column3</th>\n    <th>Column4</th>\n  </tr>\n  <tr>\n    <td>Row1</td>\n    <td>Row1</td>\n    <td>Row1</td>\n    <td>Row1</td>\n  </tr>\n  <tr>\n    <td>Row2</td>\n    <td>Row2</td>\n    <td>Row2</td>\n    <td>Row2</td>\n  </tr>\n  <tr>\n    <td>Row3</td>\n    <td>Row3</td>\n    <td>Row3</td>\n    <td>Row3</td>\n  </tr>\n  <tr>\n    <td>Row4</td>\n    <td>Row4</td>\n    <td>Row4</td>\n    <td>Row4</td>\n  </tr>\n  <tr>\n    <td>Row5</td>\n    <td>Row5</td>\n    <td>Row5</td>\n    <td>Row5</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Find all the prime numbers within a given range.", "input": "2, 20", "output": "def get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Create a JavaScript class that represents a person and ouputs their name and age to the console.", "input": "", "output": "class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    outputInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}", "category": "Python"}, {"instruction": "Generate a five digit random string.", "input": "", "output": "import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))", "category": "Python"}, {"instruction": "Convert a date in the format \"MM/dd/yyyy\" to a timestamp.", "input": "04/23/2021", "output": "import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))", "category": "Python"}, {"instruction": "Write a SQL statement that selects the name, age and gender of every student in the database with age greater than 18.", "input": "", "output": "SELECT name, age, gender FROM students WHERE age > 18;", "category": "Python"}, {"instruction": "Write a Python program to find all numbers from 1 to the given number n which are divisible by 6.", "input": "", "output": "def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result", "category": "Python"}, {"instruction": "Edit the following function to allow it to accept negative numbers.", "input": "function isPositive(num) {\n  return num >= 0;\n}", "output": "function isPositive(num) {\n  return num > 0;\n}", "category": "Python"}, {"instruction": "Create an animation using CSS that moves an element from left to right on an infinite loop.", "input": "", "output": "@keyframes moveLeftToRight {\n  0% {\n    left: 0px;  \n  }\n  100% {\n    left: 100%;\n  }\n}\n\n.animation-element {\n  position: relative;\n  animation: moveLeftToRight infinite linear;\n}", "category": "Python"}, {"instruction": "Construct an array from the given set of numbers.", "input": "Set of numbers: [4, 8, 12, 16, 20]", "output": "int [] arr = {4, 8, 12, 16, 20};", "category": "Python"}, {"instruction": "Edit the given code to add a new element to the list.", "input": "list = [1, 2, 3]", "output": "list = [1, 2, 3]\nlist.append(4) # Adding new element", "category": "Python"}, {"instruction": "Create an HTML page containing two buttons.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Buttons</title>\n    </head>\n    <body>\n        <input type=\"button\" value=\"Button 1\" />\n        <input type=\"button\" value=\"Button 2\" />\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a class called \"Animal\" containing three attributes - name, type and age.", "input": "", "output": "class Animal:\n    def __init__(self, name, type, age):\n        self.name = name\n        self.type = type\n        self.age = age", "category": "Python"}, {"instruction": "What is the difference between a string in Python and a list?", "input": "", "output": "In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data.", "category": "Python"}, {"instruction": "Given the following array in JavaScript, write a statement that finds the largest number.", "input": "const numbers = [3, 5, 2, 10, 7, 4]", "output": "const largestNumber = Math.max(...numbers);", "category": "Python"}, {"instruction": "Create a list in Python that contains the first 10 multiples of 3.", "input": "", "output": "multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]", "category": "Python"}, {"instruction": "Write a Python program to format the following list of IP addresses.", "input": "ip_addresses = [\"192.168.1.1\", \"255.255.255.255\",\"8.8.8.8\"]", "output": "def format_IP_addresses(ip_addresses):\n    return [str(IPAddress(ip)) for ip in ip_addresses]", "category": "Python"}, {"instruction": "Generate a list of random alphanumeric strings of length 25.", "input": "", "output": "import random\nimport string\n\ndef random_strings_list(length):\n    alphanumeric_chars = string.ascii_letters + string.digits\n    strings_list = []\n    for _ in range(length):\n        random_string = ''.join(random.choices(alphanumeric_chars, k=25))\n        strings_list.append(random_string)\n    return strings_list", "category": "Python"}, {"instruction": "Write a Python program to compare two dictionaries by key.", "input": "", "output": "def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return False\n    for key in dic1:\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Define a function in Python that calculates the sum of the sum of the elements of a nested list.", "input": "", "output": "def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total", "category": "Python"}, {"instruction": "Using CSS, change the text color of all elements with class \u201cmain-heading\u201d to red.", "input": "", "output": ".main-heading {\n  color: red;\n}", "category": "Python"}, {"instruction": "Write a Python program to implement Find-Max algorithm.", "input": "arr = [10, 7, 8, 11, 15]", "output": "def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_index = i\n    return curr_max, curr_index\n\nif __name__ == \"__main__\":\n    arr = [10, 7, 8, 11, 15]\n    curr_max, curr_index = FindMax(arr)\n    print(\"Max element:\", curr_max)\n    print(\"Index of max element:\", curr_index)", "category": "Python"}, {"instruction": "Write a function to check whether a linked list contains a given value.", "input": "", "output": "def contains(value, head):\n    current_node = head\n    while current_node is not None:\n        if current_node.value == value:\n            return True\n        current_node = current_node.next\n    return False", "category": "Python"}, {"instruction": "Create a class in Python that can be used as a context manager.", "input": "", "output": "class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")", "category": "Python"}, {"instruction": "Define an iterator class in Python.", "input": "", "output": "class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.data[self.index]\n        self.index += 1\n        return item", "category": "Python"}, {"instruction": "Create a Java program to multiply two given matrices", "input": "", "output": "public class MatrixMultiplication \n{\n    // Method to multiply two matrices \n    public static double[][] multiply(double[][] A,  \n                                     double[][] B) \n    { \n        int aRows = A.length; \n        int aColumns = A[0].length; \n        int bRows = B.length; \n        int bColumns = B[0].length; \n   \n        if (aColumns != bRows) {  \n            throw new IllegalArgumentException(\"A:Rows: \" + aColumns \n                      + \" did not match B:Columns \" + bRows + \".\"); \n        } \n   \n        double[][] C = new double[aRows][bColumns]; \n        for (int i = 0; i < aRows; i++) { \n            for (int j = 0; j < bColumns; j++) { \n                C[i][j] = 0.00000; \n            } \n        } \n   \n        for (int i = 0; i < aRows; i++) { \n            for (int j = 0; j < bColumns; j++) { \n                for (int k = 0; k < aColumns; k++) { \n                    C[i][j] += A[i][k] * B[k][j]; \n                } \n            } \n        } \n   \n        return C; \n    } \n}", "category": "Python"}, {"instruction": "Create a Matlab program to find the sum a given series", "input": "The given series is 1 + 1/4 + 1/9 + ...", "output": "sum_series = 0;\nfor i = 1:100\n    sum_series = sum_series + 1/i^2;\nend\n\nfprintf('The sum if the series is: %f\\n',sum_series);", "category": "Python"}, {"instruction": "Generate code to calculate the average age of a group of people.", "input": "[[\"Person\", \"Age\"],\n[\"Jim\",26],\n[\"John\", 39],\n[\"Tracy\",19]]", "output": "def average_age(people):\n    total_age = 0\n    for p, a in people:\n        total_age += a\n    return total_age/len(people)", "category": "Python"}, {"instruction": "Write VBA for a search interface to pull information from one tab of an excel sheet to a different tab", "input": "", "output": "Sub search_interface()\n Dim sh As Worksheet, sh2 As Worksheet\n Set sh = ThisWorkbook.Sheets(\"Sheet1\")\n Set sh2 = ThisWorkbook.Sheets(\"Sheet2\")\n\n For Each row In sh.Rows\n   If row.Cells(1, 1) = \"Search Term\" Then\n     Exit For\n   End If\n  \n   If row.Cells(1, 1) = sh2.Cells(1, 2) Then\n     For col = 1 To 4\n       sh2.Cells(2, col).Value = row.Cells(1, col).Value\n     Next col\n   End If \n Next row \nEnd Sub", "category": "Python"}, {"instruction": "Consolidate the following array into a dictionary", "input": "arr = [(\"apple\", 1), (\"banana\", 2), (\"orange\", 3)]", "output": "dict(arr)\n# Result: {'apple': 1, 'banana': 2, 'orange': 3}", "category": "Python"}, {"instruction": "You need to program a function to calculate the dot product of two arrays.", "input": "array1=[1, 2, 3]\narray2=[-1, 0, 4]", "output": "7", "category": "Python"}, {"instruction": "Create a class in Java called Student with 3 instance variables - firstName, lastName, and age.", "input": "", "output": "public class Student{\n  String firstName;\n  String lastName;\n  int age;\n\n  //constructor\n  Student(String firstName, String lastName, int age){\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n  }\n}", "category": "Python"}, {"instruction": "Implement a function in PHP to display all even numbers between 2 and the given number n.", "input": "", "output": "function displayEvenNumbers($n) {\n  for($i = 2; $i <= $n; $i++) {\n    if($i % 2 == 0) {\n      echo $i.\" \";\n    }   \n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query to list the names of all students registered for Maths 101.", "input": "", "output": "SELECT S.name \nFROM Student S \nINNER JOIN Course C ON S.course_id = C.course_id \nWHERE C.course_name = 'Maths 101';", "category": "Python"}, {"instruction": "Describe the difference between lists and tuples", "input": "", "output": "The main difference between lists and tuples is that lists are mutable, meaning they can be changed, while tuples are immutable and cannot be changed. Lists are used when the data is expected to change, while tuples are used when the data is expected to stay the same. In addition, a list can contain any type of data, while a tuple can only contain one type of data. Lastly, a list uses square brackets, while a tuple uses parentheses.", "category": "Python"}, {"instruction": "What is the time complexity for this for loop?", "input": "nums = [1,2,3,4,5]\nfor num in nums:\n    print(num)", "output": "The time complexity for this loop is O(n) where n is the length of the list.", "category": "Python"}, {"instruction": "Create a JSON object that contains person data.", "input": "", "output": "person = { \n    \"name\": \"John Smith\", \n    \"age\": 32, \n    \"address\": { \n        \"street\": \"123 Main Street\", \n        \"city\": \"Chicago\", \n        \"state\": \"IL\"\n    }, \n    \"hobbies\": [\"golf\", \"reading\", \"fishing\"]\n}", "category": "Python"}, {"instruction": "Construct a URL to search for a given query on Google", "input": "query = 'Python programming'", "output": "url = 'https://www.google.com/search?q=' + query.replace(' ', '+')", "category": "Python"}, {"instruction": "How can I get the last element of this list?", "input": "list = [1, 2, 3, 4, 5]", "output": "The last element of the list can be accessed using the index -1 or using the list method pop(): \n\nlast_element = list[-1] \n\nor \n\nlast_element = list.pop()", "category": "Python"}, {"instruction": "Using Python, write code to check if a list contains duplicates or not.", "input": "list = [10, 20, 30, 40, 50]", "output": "def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False", "category": "Python"}, {"instruction": "What should I add in this function to generate a random number?", "input": "def generate_random():\n    # Your code here", "output": "import random\ndef generate_random():\n    return random.randint(0,100)", "category": "Python"}, {"instruction": "What is wrong with this code?", "input": "str1 = 'This is a string'\nstr2 = str1\nstr2 += ' with a suffix'", "output": "The variable str1 is not updated and remains as 'This is a string' when you add a suffix to str2. This means that the values of str1 and str2 are no longer the same.", "category": "Python"}, {"instruction": "What am I trying to do with this code?", "input": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "output": "You are trying to print the numbers 0 to 4 (inclusive) by using a while loop.", "category": "Python"}, {"instruction": "Execute this line of code and tell me what is the value of `y`?", "input": "int x = 5; int y = 3*x+2;", "output": "y = 17", "category": "Python"}, {"instruction": "You need to write a program to delete a given node from a singly linked list.", "input": "head = [1, 2, 3, 4, 5]\nnode_data = 3", "output": "[1, 2, 4, 5]", "category": "Python"}, {"instruction": "You need to write a program to print out the prime numbers between a given range of numbers.", "input": "start=1 \nend=50", "output": "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47", "category": "Python"}, {"instruction": "You need to write a program that takes a given string and checks if it is a valid IP address.", "input": "string1=\"255.255.0.10\"", "output": "true", "category": "Python"}, {"instruction": "You need to write a program that takes a list of words as an input and returns the longest word in the list.", "input": "word_list=[\"cat\", \"dog\", \"elephant\", \"ants\"]", "output": "elephant", "category": "Python"}, {"instruction": "Using the following list of prime numbers, calculate their sum.", "input": "[2, 3, 5, 7, 11, 13]", "output": "The sum of the numbers in the list is 51.", "category": "Python"}, {"instruction": "Construct a JSON object to represent the following shoes array.", "input": "[\n    {\n        \"name\": \"Nike Air Zoom\",\n        \"color\": \"Black\",\n        \"size\": 10.5\n    },\n    {\n        \"name\": \"Skechers GoWalk\",\n        \"color\": \"Grey\",\n        \"size\": 11\n    }\n]", "output": "{\n  \"shoes\": [\n    {\n      \"name\": \"Nike Air Zoom\",\n      \"color\": \"Black\",\n      \"size\": 10.5\n    },\n    {\n      \"name\": \"Skechers GoWalk\",\n      \"color\": \"Grey\",\n      \"size\": 11\n    }\n  ]\n}", "category": "Python"}, {"instruction": "Using the given data, find the average monthly temperature in Fahrenheit.", "input": "June: 78.1, July: 87.8, August: 90", "output": "The average monthly temperature in Fahrenheit is 84.9.", "category": "Python"}, {"instruction": "Construct a class in Python that can calculate the volume of a cube given its side length.", "input": "", "output": "class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length", "category": "Python"}, {"instruction": "Using JavaScript, convert the following JSON object into a string.", "input": "JObj = {\n  \u201cname\u201d : \u201cJohn\u201d,\n  \u201cage\u201d : 42\n}", "output": "const JString = JSON.stringify(JObj);\nconsole.log(JString); // { \u201cname\u201d : \u201cJohn\u201d, \u201cage\u201d : 42 }", "category": "Python"}, {"instruction": "Write an SQL query to display all employees who work in the R&D department.", "input": "", "output": "SELECT * FROM employees\nWHERE department = 'R&D';", "category": "Python"}, {"instruction": "Create a function in Python to break down the number into its digits", "input": "", "output": "def break_down(n):\n    digit_list = [int(x) for x in str(n)]\n    return digit_list", "category": "Python"}, {"instruction": "Design a MySQL query to find out the youngest employee", "input": "", "output": "SELECT e.first_name, e.last_name, e.birth_date \nFROM Employees e\nORDER BY e.birth_date ASC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a SQL query to get the top 10 customers with highest overall spending", "input": "", "output": "SELECT c.customer_id, c.name, SUM(o.price) as total_spending\nFROM customers c\nJOIN orders o \n\tON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.name\nORDER BY total_spending DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Create a function in C++ to calculate the sum of range", "input": "", "output": "int sumRange(int start, int stop)\n{\n\tint sum = 0;\n\tfor (int i = start; i <= stop; i++)\n\t\tsum += i;\n\t\n\treturn sum;\n}", "category": "Python"}, {"instruction": "Implement an algorithm in Java to count the number of ones in a binary number", "input": "", "output": "public static int countOnes(int num) \n{ \n    int count = 0; \n    while (num != 0) { \n        num = num & (num - 1); \n        count++; \n    } \n    return count; \n}", "category": "Python"}, {"instruction": "Write a query in MySQL to display the top 3 highest salaries.", "input": "", "output": "SELECT salary\nFROM employees\nORDER BY salary DESC\nLIMIT 3", "category": "Python"}, {"instruction": "Design a key-value database with Python for storing course information.", "input": "The database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor.", "output": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()", "category": "Python"}, {"instruction": "Create a PHP function to print the first 1000 prime numbers.", "input": "", "output": "<?php \n   function printPrimes() \n   { \n       $n = 2; \n       while (1000--) \n       { \n           $isPrime = 1;  \n           for ($i = 2 ; $i <= sqrt($n); $i++) \n           {  \n               if ($n % $i == 0) \n               { \n                   $isPrime = 0;  \n                   break; \n               } \n           } \n           if ($isPrime) \n               echo \"$n \";  \n           $n++;   \n       } \n   } \n   printPrimes(); \n?>", "category": "Python"}, {"instruction": "Create a SQL query to get a list of the top 5 email domains from a customer table.", "input": "", "output": "SELECT TOP 5 SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nAS Domain\nFROM Customers \nGROUP BY SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nORDER BY Domain DESC", "category": "Python"}, {"instruction": "Generate pseudocode to solve the Fibonacci sequence.", "input": "", "output": "Function Fibonacci(n)\n  Declare f0, f1, fn\n  f0 = 0\n  f1 = 1\n\n  if n = 0\n    fn = f0\n  else if n = 1\n    fn = f1\n  else\n    for i = 2 to n\n      fn = f0 + f1\n      f0 = f1\n      f1 = fn\n    end for\n\n    return fn\nEnd Function", "category": "Python"}, {"instruction": "Write an HTML tag to create a table with three columns and two rows.", "input": "", "output": "<table>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Turn the statement into a valid predicate in first-order logic.", "input": "\"All animals are mammals\"", "output": "\u2200x(Animal(x) \u2192 Mammal(x))", "category": "Python"}, {"instruction": "Explain the following PHP code.", "input": "$string1 = \"Hello\";\n$string2 = \"World\";\necho $string1 . \" \" . $string2;", "output": "The above PHP code first initializes two string variables, $string1 and $string2, with the strings \"Hello\" and \"World\" respectively. Then, it uses the string concatenation operator (.) to combine the two strings together, separated by a space, and prints the result using the echo function. The result of the above code will be \"Hello World\".", "category": "Python"}, {"instruction": "Using the given array of objects, find the object with the highest age.", "input": "[{name: \"John\", age: 25}, {name: \"Jack\", age: 50}, {name: \"Jill\", age: 30}]", "output": "The object with the highest age is {name: \"Jack\", age: 50}.", "category": "Python"}, {"instruction": "Create a Ruby function to generate a number between 0 and 1.", "input": "", "output": "def random_number\n\trand\nend\n\nputs random_number", "category": "Python"}, {"instruction": "Transform the C code into an equivalent Python program.", "input": "int main()\n{\n    int i, j;\n    for (i = 0; i < 3; i++) \n        for (j = 0; j < 4; j++)\n            printf(\"%d %d\\n\", i, j);\n    return 0;\n}", "output": "for i in range(3):\n    for j in range(4):\n        print(i, j)", "category": "Python"}, {"instruction": "Describe a way to implement quicksort.", "input": "", "output": "Quicksort is an efficient sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two sub-arrays based on whether they are less than or greater than the pivot element. Quicksort then recursively sorts the sub-arrays in the same way. The algorithm runs in O(nlog(n)) time and is one of the most widely used sorting algorithms.", "category": "Python"}, {"instruction": "Write a SQL query which returns rows that have duplicate values in one or more columns.", "input": "", "output": "SELECT * FROM table_name\nGROUP BY col1, col2, ...\nHAVING COUNT(*) > 1", "category": "Python"}, {"instruction": "Given a list of strings, write a Python function to expand each element into a set of characters.", "input": "['hello', 'world']", "output": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list", "category": "Python"}, {"instruction": "Find out the biggest number from the list", "input": "[7, 9, 1, 3, 4]", "output": "my_list = [7, 9, 1, 3, 4]\nmax = max(my_list)\nprint(max)", "category": "Python"}, {"instruction": "Code an algorithm to implement merge sort", "input": "[5, 2, 4, 6, 1, 7, 8]", "output": "def merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\n        merge_sort(left_half) \n        merge_sort(right_half) \n\n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\n\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)", "category": "Python"}, {"instruction": "Code a function to flatten a dictionary.", "input": "{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}", "output": "def flatten_dict(d):\n\tflattened_dict = {}\n\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\n\treturn flattened_dict\n\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))", "category": "Python"}, {"instruction": "Generate a random string of length 10 made up of characters \u2018a\u2019 to \u2018d\u2019.", "input": "", "output": "import random\n\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choice(['a', 'b', 'c', 'd'])\n    \nprint(rand_string)", "category": "Python"}, {"instruction": "Code a method in Java to sort an array.", "input": "[2, 9, 4, 6, 5, 1]", "output": "public class SortExample{\n    public static void insertionSort(int[] arr){\n        int n = arr.length;\n        for (int i=1; i<n; i++){\n            int key = arr[i];\n            int j = i - 1;\n            while ( j>=0 && arr[j] > key){\n                arr[j+1] = arr[j];\n                j--;\n            }\n            arr[j+1] = key;\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {2, 9, 4, 6, 5, 1};\n        insertionSort(arr);\n        for (int x : arr){\n            System.out.print(x+\" \");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Code a method in Java to print out the elements of a 2D array.", "input": "[[1,2,3], [4,5,6], [7,8,9]]", "output": "public class TwoDArray{\n    public static void print2DArray(int[][] arr){\n        for (int[] row : arr){\n            for (int element : row){\n                System.out.print(element+\" \");\n            }\n            System.out.println();\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[][] arr = { {1,2,3}, {4,5,6}, {7,8,9} };\n        print2DArray(arr);\n    }\n}", "category": "Python"}, {"instruction": "Create a function that returns a randomly selected element from a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef get_random_element(list):\n    \"\"\"\n    A function to return a randomly selected element from a list.\n    Args: \n     list (list): a list\n    Returns:\n     element (int): a randomly selected element\n    \"\"\"\n    index = random.randint(0, len(list)-1)\n    element = list[index]\n    return element\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(get_random_element(list))", "category": "Python"}, {"instruction": "Use regex to extract the domain from a URL.", "input": "url = 'https://www.example.com/blog/post/1'", "output": "import re\n\ndef extract_domain(url):\n    \"\"\"\n    A function to extract the domain from a URL using regex.\n    Args: \n     url (str): a URL.\n    Returns:\n     domain (str): the domain of the URL.\n    \"\"\"\n    regex = r\"http[s]?://(www\\.)?([^/]+)/.*\"\n    matches = re.search(regex, url)\n    return matches.group(2)\n    \nif __name__ == '__main__':\n    url = 'https://www.example.com/blog/post/1'\n    print(extract_domain(url))", "category": "Python"}, {"instruction": "Describe what a software bug is.", "input": "", "output": "A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation.", "category": "Python"}, {"instruction": "Fix the following code to prevent errors from crashing the program.", "input": "def foo(a):\n    print(a)\nfoo(\"hi\")\nfoo(1)", "output": "def foo(a):\n    \"\"\"\n    A function that prints a value.\n    Args:\n     a (any): value to print\n    Returns:\n     nothing\n    \"\"\"\n    if isinstance(a, (int, float, str)): \n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\n\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)", "category": "Python"}, {"instruction": "Create a method called `combineName` that takes in two strings and combines them together into a full name.", "input": "firstName = 'John'\nlastName = 'Smith'", "output": "def combineName(firstName, lastName):\n    \"\"\"\n    A method that takes in two strings and combines them into a full name.\n    Args: \n     firstName (str): first name \n     lastName (str): last name\n    Returns:\n     fullName (str): combined full name \n    \"\"\" \n    fullName = firstName + \" \" + lastName\n    return fullName\n    \nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))", "category": "Python"}, {"instruction": "Create a webpage using HTML and CSS that has a navigation bar with a logo, five links to different webpages, and a footer.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Webpage</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body {\n            background-color: #f1f1f1;\n        }\n\n        .navbar {\n            overflow: hidden;\n            background-color: #444;\n        }\n\n        .navbar a {\n            float: left;\n            display: block;\n            color: white;\n            text-align: center;\n            padding: 14px 20px;\n            text-decoration: none;\n        }\n\n        .navbar a:hover {\n            background-color: #555;\n            color: white;\n        }\n\n        .main {\n            padding: 16px;\n            margin-top: 30px;\n            height: 1500px;\n            background-color: #f1f1f1;\n        }\n\n        .footer {\n            color: grey;\n            padding: 8px;\n            text-align: center;\n            background-color: #f1f1f1;\n        }\n\n        .logo {\n            float: left;\n            height: 50px;\n            width: 50px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"navbar\">\n        <img class=\"logo\" src=\"logo.png\" alt=\"logo\" />\n        <a href=\"home.html\">Home</a>\n        <a href=\"contact.html\">Contact</a>\n        <a href=\"about.html\">About</a>\n        <a href=\"products.html\">Products</a>\n        <a href=\"services.html\">Services</a>\n    </div>\n\n    <div class=\"main\">\n        // Content will be here\n    </div>\n\n    <div class=\"footer\">\n        Copyright &copy; Company 2020\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Rails application with a user sign up with name, email and password.", "input": "", "output": "rails new AppName\n\ncd AppName\n\n# Add devise for user auth\nrails g devise:install\n\n# Generate a model for the user\nrails g devise user username email password\n\n# Create a database and migrate\nrake db:create db:migrate\n\n# Add routes for the login & signup\nRails.application.routes.draw do\n  devise_for :users\nend", "category": "Python"}, {"instruction": "Design a solution using Java to calculate the mean of all the numbers in a given array.", "input": "[4, 7, 11, 15, 18, 21]", "output": "public static double mean(int[] array) { \n    double sum = 0; \n    int length = array.length; \n\n    // loop through each number and calculate the sum\n    for (int num : array) \n        sum += num; \n\n    // calculate the mean and return it\n    return sum/ length;\n}", "category": "Python"}, {"instruction": "Create a JavaScript class to represent an Employee object", "input": "", "output": "class Employee {\n    constructor(name, age, salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n}", "category": "Python"}, {"instruction": "Create a Java method to print all elements in an array in reverse order.", "input": "", "output": "public static void printReverse(int[] array) {\n    for (int i = array.length - 1; i >= 0; i--) {\n        System.out.println(array[i]);\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all rows in a table with a column value of 'John'.", "input": "", "output": "SELECT * FROM table WHERE column = 'John';", "category": "Python"}, {"instruction": "Given a tree, write a function that finds the deepest node in the tree.", "input": "", "output": "def findDeepestNode(root):\n    if root is None:\n        return None\n    queue = []\n    queue.append(root)\n    while len(queue) > 0:\n        res = queue[0]\n        queue.pop()\n        if res.left is not None:\n            queue.append(res.left)\n        if res.right is not None:\n            queue.append(res.right)\n    return res", "category": "Python"}, {"instruction": "Build a function to identify a duplicate element in a list", "input": "list = [2,4,8,7,2,5]", "output": "def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2", "category": "Python"}, {"instruction": "Create a React component to render a pie chart", "input": "", "output": "import React from 'react';\nimport {Pie} from 'react-chartjs-2';\n \nconst data = {\n\tlabels: [\n\t\t'Red',\n\t\t'Green',\n\t\t'Yellow'\n\t],\n\tdatasets: [{\n\t\tdata: [300, 50, 100],\n\t\tbackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t],\n\t\thoverBackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t]\n\t}]\n};\n \nexport const PieChartComponent = () => {\n  return (\n    <div>\n      <h2>Pie Chart</h2>\n      <Pie data={data} />\n    </div>\n  );\n}", "category": "Python"}, {"instruction": "Create a MySQL query to update the salary field of the employee", "input": "Table - employee\nField - salary", "output": "UPDATE employee\nSET salary = 2000\nWHERE employee_id = 1", "category": "Python"}, {"instruction": "Create an ios app to display the content of a given RSS feed", "input": "Url: https://www.nytimes.com/svc/collections/v1/publish/https://www.nytimes.com/section/world/rss.xml", "output": "You will need to use an API like RSS API which can help you fetch the contents of the given URL. The API can be used for displaying the content of the RSS feed in a UI. Once you have setup the API, you will then need to create a UI which uses the API and display the RSS feed content on the iOS app.", "category": "Python"}, {"instruction": "Create an algorithm to print out the unique characters in a given string.", "input": "word = \"Hello World\"", "output": "def unique_chars(word):\n  unique_characters = set()\n  for char in word:\n    if char not in unique_characters:\n      unique_characters.add(char)\n  return unique_characters\n\nword = \"Hello World\"\nunique_characters = unique_chars(word)\nprint(\"Unique characters in \", word, \"are:\", unique_characters)", "category": "Python"}, {"instruction": "Modify the given program so that it can output the average of numbers a,b, and c.", "input": "a = 2\n b = 5\n c = 7", "output": "def average(a, b, c):\n  return (a + b + c) / 3\n\na = 2\nb = 5\nc = 7\naverage = average(a, b, c)\nprint(\"Average of a, b and c is:\", average)", "category": "Python"}, {"instruction": "Replace all characters in the given string with the given character", "input": "string = \"Hello World\"\nchar = \"x\"", "output": "def replace_chars(string, char):\n    output = \"\"\n    for c in string:\n        output += char\n    return output\n\nreplace_chars(string, char)  # Output: xxxxx xxxxx", "category": "Python"}, {"instruction": "Design a machine learning algorithm to classify the given dataset.", "input": "Dataset of images of cats and dogs", "output": "\"\"\"\nDesign a machine learning algorithm to classify the given dataset\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Prepare data\ndata = pd.read_csv('path/to/dataset') \n\n#Preprocess data\nX = data.drop('label', axis=1)\ny = data['label']\n\n#Split into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n#Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nfrom sklearn.metrics import accuracy_score\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)", "category": "Python"}, {"instruction": "Generate all possible combinations of strings that can be formed using the given characters", "input": "chars = [\"a\", \"b\", \"c\"]", "output": "import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "category": "Python"}, {"instruction": "Create a function to remove all non alphabetical characters from thestring", "input": "string = \"Hello, world!\"", "output": "def clean_string(string):\n    output = \"\"\n    for char in string:\n        if char.isalpha():\n            output += char\n    return output\n    \nclean_string(string) # Output: Helloworld", "category": "Python"}, {"instruction": "Remove duplicates from the given list and sort it in ascending order", "input": "lst = [1, 2, 3, 1, 4, 2]", "output": "sorted(set(lst))  # Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Transform the given code snippet into a different programming language.", "input": "let x = 3", "output": "x = 3", "category": "Python"}, {"instruction": "Output the result of a line of code snippet.", "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\nlist_1 + list_2", "output": "[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a PHP form to register a user.", "input": "", "output": "<!doctype html>\n<html>\n<head>\n<title>User Registration Form</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<style type=\"text/css\">\n    #form-div {\n        background-color: #ffffff;\n        padding: 10px 20px;\n        border: #e0dfdf 1px solid;\n    }\n    #form-div h2 {\n        padding-bottom: 10px;\n    }\n    #form-div input, #form-div select {\n        padding: 5px;\n    }\n    #form-div input[type=text] {\n        width: 300px;\n    }\n</style>\n</head>\n<body>\n<h2>User Registration Form</h2>\n<div id=\"form-div\">\n    <form action=\"\" method=\"post\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" name=\"name\" />\n        <label for=\"email\">Email Address</label>\n        <input type=\"text\" name=\"email\" />\n        <label for=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" />\n        <label for=\"password_repeat\">Repeat Password</label>\n        <input type=\"password\" name=\"password_repeat\" />\n        <input type=\"submit\" value=\"Register\" /> \n    </form>\n</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Design a Greedy Algorithm to solve the sum-subset problem.", "input": "", "output": "def subsetsum(arr, target):\n  arr.sort() \n  n = len(arr) \n  sum = 0\n  result = [] \n  \n  for i in range(n):\n    if ( sum + arr[i] <= target):\n      result.append(arr[i])\n      sum = sum + arr[i]\n  \n  return result", "category": "Python"}, {"instruction": "Design a Bubble Sort algorithm for a list of numbers.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Separate the given list into two lists for even and odd numbers", "input": "lst = [1, 2, 3, 4, 5]", "output": "even_lst = []\nodd_lst = []\nfor num in lst:\n    if num % 2 == 0:\n        even_lst.append(num)\n    else:\n        odd_lst.append(num)", "category": "Python"}, {"instruction": "Combine the two strings into one and save it as a variable called full_name.", "input": "first_name = 'John'\nlast_name = 'Smith'", "output": "first_name = 'John'\nlast_name = 'Smith'\n\nfull_name = first_name + ' ' + last_name", "category": "Python"}, {"instruction": "Create a recursive function that takes two parameters, a number and a base and returns the result as a string.", "input": "14, 16", "output": "def convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n\n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n\n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    num = num // base \n    return convert_to_base(num, base) + converted_string", "category": "Python"}, {"instruction": "Create a code to swap two elements in a given array.", "input": "array = [1, 4, 5, 8]", "output": "def swap_elements(array, index1, index2):\n    temp = array[index1]\n    array[index1] = array[index2]\n    array[index2] = temp", "category": "Python"}, {"instruction": "Find the count of words in the following string.", "input": "text = \"This is a sample text\"", "output": "len(text.split()) # 4", "category": "Python"}, {"instruction": "Calculate the base-2 logarithm of 32.", "input": "", "output": "log2(32) = 5", "category": "Python"}, {"instruction": "Compare the values of x and y, and print out \"x is greater than y\" if x is greater.", "input": "x = 5, y = 3", "output": "if x > y:\n    print(\"x is greater than y\")", "category": "Python"}, {"instruction": "Create a 2D array with three rows and two columns and assign different value to each element.", "input": "", "output": "arr = [[1,2], [3,4], [5,6]]", "category": "Python"}, {"instruction": "Find the sum of three numbers and add five to it.", "input": "a = 4, b = 7, c = 10", "output": "sum = a + b + c\nresult = sum + 5", "category": "Python"}, {"instruction": "Count the number of lines of code in the following code snippet.", "input": "def add(num1, num2):\n    return num1 + num2", "output": "3", "category": "Python"}, {"instruction": "Generate an array of 5 random hexadecimal numbers.", "input": "", "output": "import random\n\nhex_arr = []\nfor i in range(5):\n rand_hex = random.randint(0, 255)\n hex_arr.append(hex(rand_hex))\n\nprint(hex_arr)", "category": "Python"}, {"instruction": "Classify the following words as noun, verb, adverb or adjective.", "input": "Words: slowly, frog, kick", "output": "Adverb: slowly \nNoun: frog \nVerb: kick", "category": "Python"}, {"instruction": "Create an object in JavaScript for calculating the area of rectangular with length and width.", "input": "", "output": "// Object to calculate the area of rectangular with length and width\n\nconst rectangular = {\n  length: 0,\n  width: 0,\n  area: function() {\n    return this.length * this.width;\n  }\n};", "category": "Python"}, {"instruction": "Identify the language into which the given text is translated.", "input": "Text: \u3044\u3064\u3082\u3042\u308a\u304c\u3068\u3046\u3002", "output": "The given text is translated into Japanese language.", "category": "Python"}, {"instruction": "Write a class in Python to store the objects of student and their grades.", "input": "", "output": "# Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade", "category": "Python"}, {"instruction": "Write a function in Python to format a given date according to the format \"Day-Name, Month Name, Day, Year\".", "input": "\"2019-06-27\"", "output": "def format_date(date): \n    date_list = date.split('-') \n    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] \n    return formatted_date", "category": "Python"}, {"instruction": "How could you use Machine learning to classify the sentiment of a given text?", "input": "", "output": "One way to use Machine learning to classify the sentiment of a given text is to use a supervised Machine learning algorithm such as Support Vector Machines to build a classifier. The classifier can be trained on a labeled dataset which contains texts with corresponding labels like 'positive' or 'negative'. The trained classifier can then be used to predict the sentiment of a new text.", "category": "Python"}, {"instruction": "Provide an example of an if-else statement in C++.", "input": "", "output": "int x = 5;\n\nif (x > 0) {\n    std::cout << \"x is positive\"; \n}\nelse {\n    std::cout << \"x is negative or zero\"; \n}", "category": "Python"}, {"instruction": "Describe the features of the K Nearest Neighbors (KNN) classification algorithm.", "input": "", "output": "K Nearest Neighbors (KNN) classification is a supervised machine learning algorithm used for solving classification problems. The main feature of the KNN algorithm is that it defines the class of a data sample based on the classes of its closest K neighbors, determined using a distance measure. It is a non-parametric and lazy learner algorithm, meaning it does not make any assumptions about the data distribution and is not prone to overfitting. It is also easy to implement and not computationally expensive.", "category": "Python"}, {"instruction": "Check if the input string contains both number and alphabets and return true if it does.", "input": "str = \"hello123\"", "output": "if re.search('[a-zA-Z]', str) and re.search('[0-9]', str): \n    print(True) \nelse: \n    print(False)", "category": "Python"}, {"instruction": "Create a PostgreSQL query to fetch all the rows from the table \u2018Users\u2019 where the users\u2019 age is greater than 24.", "input": "Table name: Users \nColumns: Id, age, name", "output": "SELECT *\nFROM Users\nWHERE age > 24;", "category": "Python"}, {"instruction": "Write a fragment in HTML to display the values of an array in a table.", "input": "array = [\"Banana\", \"Apple\", \"Pineapple\", \"Mango\"]", "output": "<table>\n   <tr>\n      <th>Fruits</th>\n   </tr>\n   <tr>\n      <td>Banana</td>\n   </tr>\n   <tr>\n      <td>Apple</td>\n   </tr>\n   <tr>\n      <td>Pineapple</td>\n   </tr>\n   <tr>\n      <td>Mango</td>\n   </tr>\n</table>", "category": "Python"}, {"instruction": "Write an SQL query to find a user with the name \u2018John Smith\u2019.", "input": "Table name: Users\nColumns: Id, name", "output": "SELECT *\nFROM Users\nWHERE name = 'John Smith';", "category": "Python"}, {"instruction": "Write a code to count the number of occurrences of a given word in an array of strings.", "input": "words = ['apple', 'banana', 'apple', 'kiwi', 'apple']\ntarget_word = 'apple'", "output": "def count_word(words, target_word):\n    counter = 0\n    for word in words:\n        if word == target_word:\n            counter += 1\n    return counter", "category": "Python"}, {"instruction": "Create a function to delete a specific row from a table named 'Orders'.", "input": "Primary Key of the order: 1234", "output": "def delete_row(table, order_key):\n    query = 'DELETE FROM {} WHERE order_key = ?'.format(table)\n    try:\n        cursor.execute(query, (order_key,))\n        cursor.commit()\n    except:\n        cursor.rollback()\n        print('Error occurred while deleting order')", "category": "Python"}, {"instruction": "Generate a program in JavaScript that reads a given string from user input and prints the characters of the string in reverse order.", "input": "", "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}", "category": "Python"}, {"instruction": "Create a CSS program that formats the text in a paragraph so that it has the following characteristics: font size is 2em, font weight is bold, font color is orange.", "input": "", "output": "p {\n  font-size: 2em;\n  font-weight: bold; \n  color: orange;\n}", "category": "Python"}, {"instruction": "Implement a function in Java that takes a character and a string as arguments and determines whether the character is present in the string or not.", "input": "'c' and \"programming\"", "output": "public static boolean charInString(char c, String str) {\n    for (int i = 0; i < str.length(); i++)\n        if (str.charAt(i) == c)\n            return true;\n    return false;\n}", "category": "Python"}, {"instruction": "Generate a program in Python that prints all days of the week", "input": "", "output": "#list of Weekdays\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n            \"Saturday\", \"Sunday\"]\n\n#print Weekdays\nfor weekday in weekdays:\n    print(weekday)", "category": "Python"}, {"instruction": "Create a SQL query that selects the second and third largest values in a table.", "input": "", "output": "SELECT MAX(value) AS max2\nFROM mytable\nWHERE value < (SELECT MAX(value) FROM mytable);\n\nSELECT MAX(value) AS max3\nFROM mytable\nWHERE value < (SELECT MAX(value) FROM mytable\n             WHERE value < (SELECT MAX(value) FROM mytable));", "category": "Python"}, {"instruction": "Create a new array that is a copy of the given input array, consisting of all elements smaller than 5.", "input": "[4, 8, 9, 7, 5, 1, 10]", "output": "new_array = [item for item in given_array if item < 5]  # [4, 1]", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes a given array and prints its elements in reverse order.", "input": "[1, 2, 3, 4]", "output": "function reverseArray(arr) {\n    let reversedArr = [];\n    let index = arr.length - 1;\n   \n    while (index >= 0) {\n        reversedArr.push(arr[index]);\n        index--;\n    }\n \n    return reversedArr;\n}", "category": "Python"}, {"instruction": "Create a function in Java that takes two numbers as arguments and prints their product.", "input": "10 and 8", "output": "public static void printProduct(int n1, int n2){\n    System.out.println(n1 * n2);\n}", "category": "Python"}, {"instruction": "Write a method in Java for checking if a String is a palindrome.", "input": "", "output": "public static boolean isPalindrome(String str) { \n    int n = str.length(); \n    for (int i = 0; i < n/2; i++){ \n        if (str.charAt(i) != str.charAt(n-i-1)) \n            return false; \n    } \n    return true; \n}", "category": "Python"}, {"instruction": "Create a fragment of HTML that displays a button which redirects the user to a given URL.", "input": "URL = \"http://example.com\"", "output": "<a href=\"http://example.com\"><button>Go to example.com</button></a>", "category": "Python"}, {"instruction": "Write an SQL query to select all products where the price is less than 100 dollars.", "input": "Table name: Products\nColumns: Id, name, price", "output": "SELECT *\nFROM Products\nWHERE price < 100;", "category": "Python"}, {"instruction": "Create an API endpoint in ExpressJS that receives a username and returns the user\u2019s information.", "input": "User with the username \"johnsmith\"", "output": "app.get('/user/:username', async (req, res) => {\n  let username = req.params.username;\n  let userInfo = await User.findOne({ username });\n  res.json(userInfo);\n});", "category": "Python"}, {"instruction": "Create a list in JavaScript containing the names of the five most populous countries in the world.", "input": "", "output": "let topFiveCountries = ['China', 'India', 'United States', 'Indonesia', 'Brazil'];", "category": "Python"}, {"instruction": "Create a class in Java that assigns a value to a given variable.", "input": "String variable = \"Hello world\"", "output": "public class VariableAssignment {\n  private String variable;\n  \n  public VariableAssignment(String variable) {\n    this.variable = variable;\n  }\n  \n  public String getVariable() {\n    return variable;\n  }\n  \n  public void setVariable(String variable) {\n    this.variable = variable;\n  }\n}", "category": "Python"}, {"instruction": "Sort an array of integers using a heapsort algorithm.", "input": "[3, 6, 2, 9, 1]", "output": "def heapsort(A):\n    # step 1: create the heap\n    heapify(A)\n\n    # step 2: sort the heap\n    for size in range(len(A), 1, -1):\n        A[0], A[size - 1] = A[size - 1], A[0]\n        sift_down(A, 0, size - 1)\n\n    # step 3: return the sorted result\n    return A", "category": "Python"}, {"instruction": "Calculate the number of days from January 1, 2021 to June 30, 2021.", "input": "", "output": "The number of days from January 1, 2021 to June 30, 2021 is 152 days.", "category": "Python"}, {"instruction": "Given the function, predict the output.", "input": "def foo(a, b):\n    return a + b\n\nprint(foo(3, 5))", "output": "The output of the function will be 8.", "category": "Python"}, {"instruction": "Create a for loop that prints the square of each number from 1 to 5.", "input": "", "output": "for num in range(1, 6):\n    print(num**2)", "category": "Python"}, {"instruction": "Using HTML and CSS, develop a two-column layout that has two different shades of the same color.", "input": "", "output": "<div style=\"height: 100%; width: 100%; display: flex; flex-direction: row; background-color: #e8e8e8;\">\n  <div style=\"flex: 1 1 auto; background-color: #d3d3d3; padding: 20px 0;\"></div>\n  <div style=\"flex: 1 1 auto; background-color: #cfcfcf; padding: 20px 0;\"></div>\n</div>", "category": "Python"}, {"instruction": "Write a bash script to replace all occurrences of the letter 'a' with the letter 'b' in 'myfile.txt'.", "input": "", "output": "#!/bin/bash\n\nwhile read line; do\n    echo $line | sed -e \"s/a/b/g\" >> myfile.txt\ndone < myfile.txt", "category": "Python"}, {"instruction": "Using jQuery, design an effect to fade out an element when clicked on.", "input": "", "output": "$(function() {\n    $('#myElement').on('click', function(e) {\n        $(this).fadeOut(300);\n    });\n});", "category": "Python"}, {"instruction": "Write a Django code to print the name of all the users in the database.", "input": "", "output": "from django.contrib.auth.models import User\n\nusers = User.objects.all()\nfor user in users:\n    print(user.username)", "category": "Python"}, {"instruction": "Fill in the below code to extract specific data from the given JSON object.", "input": "const jsonObj = {\n    'name': 'John Doe',\n    'locations': ['Los Angeles', 'New York', 'Las Vegas'],\n    'qualifications': {'degree': 'Master', 'university': 'Stanford'}\n}", "output": "const name = jsonObj['name']; \nconst locations = jsonObj['locations']; \nconst degree = jsonObj['qualifications']['degree'];\nconst university = jsonObj['qualifications']['university'];", "category": "Python"}, {"instruction": "Create a swift class that describes a flower.", "input": "", "output": "class Flower {\n\tvar name: String\n\tvar petals: Int\n\tvar petalColor: String\n\tvar pollenColor: String\n    \n    init(name: String, petals: Int, petalColor: String, pollenColor: String) {\n            self.name = name\n            self.petals = petals\n            self.petalColor = petalColor\n            self.pollenColor = pollenColor\n        }\n}", "category": "Python"}, {"instruction": "Create a CSS style to display text in italics.", "input": "", "output": "p {\n  font-style: italic;\n}", "category": "Python"}, {"instruction": "Create a JavaScript object that stores the properties of an employee.", "input": "Name: John Doe\nAge: 25\nPosition: Accountant", "output": "let employee = {\n  name: 'John Doe',\n  age: 25,\n  position: 'Accountant'\n };", "category": "Python"}, {"instruction": "Write a SQL query that finds the TOTAL sales of each product in a given month.", "input": "Table name: sales\nColumns: product_id, quantity, order_date", "output": "SELECT product_id, SUM(quantity) AS total_sales \nFROM sales\nWHERE MONTH(order_date)='<month>'\nGROUP BY product_id;", "category": "Python"}, {"instruction": "Create an HTML page with a form that has two inputs: Name and Email.", "input": "", "output": "<html>\n  <head>\n    <title>Submission Form</title>\n  </head>\n  <body>\n    <form>\n      <label for=\"name\">Name: </label>\n      <input type=\"text\" name=\"name\" id=\"name\" />\n      <label for=\"email\">Email: </label>\n      <input type=\"email\" name=\"email\" id=\"email\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a data structure in Python that stores the details of a shoe product.", "input": "Name: \"Nike Air Max 720\"\nPrice: $219.99\nSize: 8\nColor: White", "output": "class ShoeProduct:\n    def __init__(self, name, price, size, color):\n        self.name = name\n        self.price = price\n        self.size = size\n        self.color = color", "category": "Python"}, {"instruction": "You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    square = i * i\n    print(square)", "category": "Python"}, {"instruction": "Write a Python program to randomly sample a list without replacement.", "input": "list = [30, 40, 50, 60, 70, 80]", "output": "import random\n\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.remove(element)\n    return sampled_list", "category": "Python"}, {"instruction": "Edit the Python code snippet to remove the syntax error.", "input": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area", "output": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)", "category": "Python"}, {"instruction": "Given a list of integers, write a program to convert it into a list of strings.", "input": "integers = [1, 2, 3, 4]", "output": "def convert_to_string(integers):\n    string_list = []\n    for item in integers:\n        string_list.append(str(item))\n    return string_list", "category": "Python"}, {"instruction": "Using HTML/CSS and JavaScript, construct a web page that generates a random password.", "input": "", "output": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Random Password Generator</title>\n    <script src=\"generate.js\"></script>\n    <style>\n    body {\n        background-color: lightblue;\n    }\n\n    #container {\n        margin: 0 auto;\n        width: 500px;\n        background-color: white;\n        padding: 30px;\n    }\n\n    #password {\n        font-size: 20px;\n        font-weight: bold;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\">\n    <h1>Random Password Generator</h1>\n        <h2>Your Password:</h2>\n        <div id=\"password\"></div>\n        <button onclick=\"generatePassword()\">Generate</button>\n    </div>\n</body>\n\n</html>\n\n// JavaScript code in a file called 'generate.js' //\n\nfunction generatePassword() {\n    let password = Math.random().toString(36).substring(2, 10);\n    document.getElementById(\"password\").innerHTML = password;\n}", "category": "Python"}, {"instruction": "Create a function in Java to check if a given array contains duplicates.", "input": "int[] arr = {1, 2, 3, 2, 4, 5};", "output": "public static boolean hasDuplicates(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] == arr[j])\n                return true;\n        }\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Write an HTML code for a form to submit data.", "input": "", "output": "<form action=\"script.php\" method=\"post\">\n    <input type=\"text\" name=\"name\" placeholder=\"Name\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a jQuery code to find and display the longest word from a given string.", "input": "var str = \"This is a sample string.\"", "output": "<script type=\"text/javascript\">\n    $(document).ready(function(){\n        var str = \"This is a sample string.\";\n        var words = str.split(\" \");\n        var longestWord = words.sort(function (a, b) { return b.length - a.length; })[0];\n        alert(\"The longest word is: \"+longestWord);\n    });\n</script>", "category": "Python"}, {"instruction": "Write a query that sorts data in a database.", "input": "", "output": "SELECT * FROM table_name ORDER BY column_name ASC", "category": "Python"}, {"instruction": "Given an array of strings, sort the strings alphabetically.", "input": "array = [\"Banana\", \"Apple\", \"Orange\"]", "output": "def sort_strings(array):\n    return sorted(array)", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes in a number x and returns the pythagorean triplet whose sum is x.", "input": "// Number x \nint x = 12;", "output": "function getTripletsFromSum (x) { \n\tvar triplet = [];\n\tfor (var i = 1; i < x; i++) \n\t\tfor (var j = i; j < x; j++) \n\t\t\tfor (var k = j; k < x; k++) \n\t\t\t\tif (i*i + j*j === k*k && \n\t\t\t\t\t\ti + j + k === x) \n\t\t\t\t\ttriplet.push(i, j, k);\n\treturn triplet; \n} \n\nconsole.log(getTripletsFromSum(12));\n# Output: [3,4,5]", "category": "Python"}, {"instruction": "Create a function in Python to modify the given list and remove all strings with length less than three.", "input": "mylist = ['Apple', 'Cat', 'Hello', 'Hi']", "output": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']", "category": "Python"}, {"instruction": "Write a CSS code to show a black colored button with the text \"Greet\".", "input": "", "output": ".button {\n  background-color: black;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n<button class=\"button\">Greet</button>", "category": "Python"}, {"instruction": "Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements.", "input": "// Array A\nimport numpy as np\nA = np.array([1, 4, 5, -3])", "output": "def max_difference(A):\n    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))", "category": "Python"}, {"instruction": "Write a HTML code to show a table with 2 columns and 4 rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n  <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a function to search the given list to find a key value and return its position.", "input": "arr = ['a', 'b', 'c', 'd']\nkey = 'a'", "output": "def search(arr, key): \n    for i in range(len(arr)):\n\t    if arr[i] == key:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Using variable A, write a code snippet in Java to iterate through ArrayList and delete odd values.", "input": "// ArrayList A\nArrayList<Integer> A = new ArrayList<>(Arrays.asList(1,2,3,4,5,6));", "output": "for(int i=0; i<A.size(); i++)\n{\n    if(A.get(i) %2 != 0)\n    {\n        A.remove(i);\n        i--;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to update the value of column b in the table called a.", "input": "Table name: a\nColumns: a, b\n\nCurrent state of table a:\na  |  b\n1  | 10\n2  | 11\n3  | 12", "output": "UPDATE a\nSET b = 20\nWHERE a = 3;", "category": "Python"}, {"instruction": "Write a HTML code to design a card with the heading \"Welcome!\".", "input": "", "output": "<div class=\"card\">\n  <div class=\"card-header\">\n    <h3>Welcome!</h3>\n  </div>\n  <div class=\"card-body\">\n  </div>\n</div>", "category": "Python"}, {"instruction": "Write a function in C++ to reverse a C-style String.", "input": "// str is a c-style string\nchar str[] = \"Hello World!\"", "output": "void ReverseString(char *str)\n{ \n    int length = 0; \n    char temp; \n\n    // calculate the length of string \n    while (*str != 0) { \n        length++; \n        str++; \n    } \n  \n    // the end of string \n    str--; \n  \n    // swap first and last characters \n    for (int i = 0; i < length/2; i++) \n    { \n        temp = *str; \n        *str = *(str - length + 1); \n        *(str -length + 1) = temp; \n  \n        str--; \n    } \n}", "category": "Python"}, {"instruction": "Bring the following two variables into the same format", "input": "Variable one: 12,34\nVariable Two: 21.103", "output": "Variable one: 12.34\nVariable two: 21.103", "category": "Python"}, {"instruction": "Find the number of triplets in this array which sum up to zero.", "input": "arr = [-1, 0, 1, 2, 3, 4]", "output": "The number of triplets in this array which sum up to zero is 1. The triplets are [-1, 0, 1].", "category": "Python"}, {"instruction": "Given the following array, remove all duplicates and return a new array with the remaining elements.", "input": "arr = [1, 2, 4, 3, 3, 2]", "output": "new_arr = list(set(arr))  # [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Translate this piece of JavaScript into Python.", "input": "let val = 10;\nif (val > 5) {\n  console.log(\"val is greater than 5\");\n}", "output": "val = 10\nif val > 5:\n    print(\"val is greater than 5\")", "category": "Python"}, {"instruction": "Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.", "input": "Input: ['a',\"a\",'b',1,1,1,'c']", "output": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}", "category": "Python"}, {"instruction": "Write a Python program to create a copy of a given set.", "input": "my_set = {1, 2, 3, 4, 5}", "output": "def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set", "category": "Python"}, {"instruction": "Create a function that returns the longest substring of the string given.", "input": "string = \"Hello world!\"", "output": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len", "category": "Python"}, {"instruction": "Write an SQL query to pick distinct elements from a table named 'students'.", "input": "", "output": "SELECT DISTINCT * FROM students;", "category": "Python"}, {"instruction": "Write a SQL query to get the top 10 books by rating.", "input": "", "output": "SELECT *\nFROM books\nORDER BY rating DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Create a HTML form that takes 3 inputs: first name, last name, and age.", "input": "", "output": "<form>\n  <label>First Name:</label>\n  <input type=\"text\" name=\"firstname\" /><br>\n  <label>Last Name:</label>\n  <input type=\"text\" name=\"lastname\" /><br>\n  <label>Age:</label> \n  <input type=\"text\" name=\"age\" /><br>\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Edit the code to print \u201cWelcome to Python Programming\u201d five times.", "input": "print(\"Hello Python\")", "output": "for i in range(5):\n  print(\"Welcome to Python Programming\")", "category": "Python"}, {"instruction": "Write an Object-Oriented Python program to find the area of a triangle given the base and the height.", "input": "", "output": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def calculate_area(self):\n        area = (self.base * self.height) / 2\n        return area\n\n# Create triangle\ntriangle = Triangle(10, 5)\n\n# Find the area\narea = triangle.calculate_area()\n\n# Print the area\nprint(area)", "category": "Python"}, {"instruction": "Write a function in JavaScript that returns the maximum number from an array of numbers.", "input": "[3, 6, 8, 2, 9, 4, 10]", "output": "function getMaxNum(arr){\n  return Math.max.apply(null, arr);\n}\n\nlet maxNum = getMaxNum([3, 6, 8, 2, 9, 4, 10]);\nconsole.log(maxNum); // 10", "category": "Python"}, {"instruction": "Write a shell script that takes input from the user, reverses the string, and prints it on the terminal.", "input": "", "output": "#!/bin/bash\n\necho -n \"Enter a string: \"\nread str\n \nrev_str=\"\"\nlen=${#str}\n \n# loop\nfor (( i=$len-1; i>=0; i-- ))\n do\n  rev_str=${rev_str}${str:$i:1}\n done\n \n# display\necho \"$rev_str\"", "category": "Python"}, {"instruction": "Write a Haskell program to calculate the sum of list elements.", "input": "[2,3,7,9]", "output": "sumlist :: [Integer] -> Integer\nsumlist [] = 0\nsumlist (x:xs) = x + sumlist xs \n\n-- Driver Code\nmain = do\n  print (sumlist [2,3,7,9]) -- Output: 21", "category": "Python"}, {"instruction": "Design a function that uses a for loop to print all odd numbers from 1 to 10.", "input": "", "output": "def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\n\nprint_odd_numbers()", "category": "Python"}, {"instruction": "Generate an Objective-C code to check if a given string is palindrome or not.", "input": "\"racecar\"", "output": "#import<Foundation/Foundation.h>\n\n@implementation CheckString\n\n-(BOOL)isStringPalindrome:(NSString*)inputString {\n    BOOL isPalindrome = true;\n    int lastIndex = [inputString length] - 1;  \n \n    for (int i = 0; i < [inputString length]/2; i++) {\n        //compare character one by one\n        if ([inputString characterAtIndex:i] != [inputString characterAtIndex:lastIndex]) {\n            isPalindrome = false;\n            break;\n        }\n        // decrement lastIndex for next iteration\n        lastIndex--;\n    }\n    return isPalindrome;\n}\n\n@end\n\nCheckString *cs = [[CheckString alloc]init];\nNSString *sampleString = @\"racecar\";\n\nif ([cs isStringPalindrome:sampleString]) {\n    NSLog(@\"String is Palindrome\");\n}else{\n    NSLog(@\"String is not a Palindrome\");\n}", "category": "Python"}, {"instruction": "Create a PHP program to print out the frequency of word occurrences in an array.", "input": "['foo', 'bar', 'baz', 'foo', 'bar']", "output": "<?php\n$array_input = array('foo','bar','baz','foo','bar');\n\n$result = array_count_values($array_input);\n \nforeach($result as $key=>$value){\n    echo \"$key has $value occurrence(s).\\n\";\n}\n\n// Output: foo has 2 occurrence(s). \n//         bar has 2 occurrence(s). \n//         baz has 1 occurrence(s).\n?>", "category": "Python"}, {"instruction": "Design a Data Structure in Javascript to store a list of tasks.", "input": "", "output": "class TaskList {\n  constructor() {\n    this.tasks = []\n  }\n\n  add_task(task) {\n    this.tasks.push(task);\n  }\n\n  remove_task(task) {\n    const i = this.tasks.indexOf(task);\n    if (i !== -1) {\n      this.tasks.splice(i, 1);\n    }\n  }\n\n  count_tasks() {\n    return this.tasks.length;\n  }\n}", "category": "Python"}, {"instruction": "Develop a Ruby method to compare two strings and return the number of matching characters.", "input": "\"cook\",\"book\"", "output": "def count_match_chars(str1, str2)\n  count = 0\n  str1.each_char.with_index do |char, index|\n    count += 1 if char == str2[index]\n  end\n  count\nend\n\nputs count_match_chars('cook', 'book') #2", "category": "Python"}, {"instruction": "Design a Java program to find the maximum of 3 numbers.", "input": "1, 2, 5", "output": "public class Maximum {\n\n  public static int getMax(int num1, int num2, int num3) {\n    int max = num1; \n    if (num2 > max) {\n      max = num2;\n    }\n    if (num3 > max) {\n      max = num3; \n    }\n    return max; \n  }\n\n  public static void main(String[] args) {\n    int max = getMax(1,2,5);\n    System.out.println(\"Maximum is: \" + max);\n  }\n\n}", "category": "Python"}, {"instruction": "Construct an SQL query to find the name of all employees in department ID 7.", "input": "", "output": "SELECT name\nFROM Employees\nWHERE departmentID = 7;", "category": "Python"}, {"instruction": "Output a list with all the numbers from 0 to 100 that are divisible by 8.", "input": "", "output": "result = [x for x in range(101) if x % 8 == 0]\nprint(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]", "category": "Python"}, {"instruction": "Using regular expressions, remove any duplicate words from the following sentence.", "input": "sentence = \"I I am going to the the store\"", "output": "import re\n\nsentence = \"I I am going to the the store\"\nresult = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', sentence)\nprint(result) # I am going to the store", "category": "Python"}, {"instruction": "Create an R program to find the intersecting element of two lists.", "input": "x = c(14,5,13)\ny = c(5,11,9)", "output": "#Function for finding common element between two lists\ncommon_element <- function(x, y){\n  intersect_list <- intersect(x, y)\n  return(intersect_list)\n}\n\nx <- c(14,5,13)\ny <- c(5,11,9)\n\n#Calling the above function\ncommon_element(x, y) #5", "category": "Python"}, {"instruction": "Describe two ways to insert elements into a hashmap in Python.", "input": "", "output": "1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. \n2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary.", "category": "Python"}, {"instruction": "Design a program in Python that will count the words in a sentence.", "input": "This is a sample sentence.", "output": "def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(word_count('This is a sample sentence.'))", "category": "Python"}, {"instruction": "Edit the given code to reverse a given array in JavaScript.", "input": "let arr = [1, 2, 3, 4, 5];", "output": "let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr);", "category": "Python"}, {"instruction": "Select all rows in a pandas dataframe where at least one value exists in the column named \u2018name\u2019.", "input": "", "output": "selected_rows = df[df.name.notnull()]", "category": "Python"}, {"instruction": "Suggest a sorting algorithm for an array that contains both duplicates and unique elements.", "input": "[8, 4, 3, 5, 9, 8, 10]", "output": "A radix sort would be an appropriate sorting algorithm for an array that contains both duplicates and unique elements. Radix sorts start by sorting the array based on the least significant digit, and then sort based on the next digit, and so on.", "category": "Python"}, {"instruction": "What data structure would be suitable to represent a sparse matrix with thousands of columns and rows?", "input": "", "output": "A dictionary of dictionaries or a linked list could be used to represent a sparse matrix with thousands of columns and rows. The outer dictionary would serve as an index table to refer to each row of the matrix while the inner dictionary contains key-value pairs of column index and the corresponding item or element in the specified row.", "category": "Python"}, {"instruction": "Suggest a function to find the second highest element in a list.", "input": "[10, 20, 30, 40]", "output": "def second_highest(List): \n    List.sort()\n    return List[-2] \n  \nList = [10, 20, 30, 40]\nprint(second_highest(List))", "category": "Python"}, {"instruction": "What data structure should be used to store a customer\u2019s name, address, and phone number?", "input": "", "output": "A dictionary or set can be used to store a customer\u2019s name, address, and phone number. The customer's name would be used as the key and the associated customer information such as address and phone number would be stored as the value.", "category": "Python"}, {"instruction": "Change the following program to use a try/except/finally block to handle errors.", "input": "def read_file(file):\n    with open(file) as f:\n        for line in f:\n            print(line)", "output": "try:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()", "category": "Python"}, {"instruction": "Write a function to swap the entries in a list.", "input": "[10, 20, 30, 40]", "output": "def swap(List): \n    temp = List[0] \n    List[0] = List[3] \n    List[3] = temp\n    return List \n  \nList = [10, 20, 30, 40]\nprint(swap(List))", "category": "Python"}, {"instruction": "How can you create a Pandas DataFrame using a given list of dictionaries?", "input": "[{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]", "output": "import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)", "category": "Python"}, {"instruction": "Make the existing JavaScript function asynchronous.", "input": "function handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    }", "output": "async function handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    }\n}", "category": "Python"}, {"instruction": "Develop a program in Python to implement a Simple Linear Regression model.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# generate dataset\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\n\n# linear regression\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\n\n# prediction\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\n\n# plot\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nplt.axis([0, 1, 0, 15])\nplt.show()", "category": "Python"}, {"instruction": "Construct a function that will remove all special characters in a given string in JavaScript.", "input": "$sample!%string!*", "output": "function removeSpecialChars(str) {\n    return str.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removeSpecialChars('$sample!%string!*'));", "category": "Python"}, {"instruction": "What is the most efficient way to count the number of characters in a string in C++?", "input": "", "output": "#include <iostream> \n#include <string> \n \nusing namespace std; \n \nint main() \n{ \n    string my_string = \"Count characters in this string.\";\n    int count = 0;\n    for (char c : my_string) \n        count++; \n    cout << \"Number of characters in the string : \" << count; \n    return 0; \n}", "category": "Python"}, {"instruction": "Design a function to get the number of elements in a JSON array in Python.", "input": "[{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]", "output": "def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n    return count\n\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))", "category": "Python"}, {"instruction": "How can you move an element from one array to another in JavaScript?", "input": "let array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6];", "output": "let array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6];\nlet el = array1.pop();\narray2.push(el);\nconsole.log(array2);", "category": "Python"}, {"instruction": "Construct a function that adds two numbers written in reverse order in JavaScript.", "input": "893 342", "output": "function reversedAddition(reverseOrder1, reverseOrder2) {\n    let firstNum = parseInt(reverseOrder1.toString().split('').reverse().join(''));\n    let secondNum = parseInt(reverseOrder2.toString().split('').reverse().join(''));\n    let answer = firstNum + secondNum;\n  \n    return answer;\n}\n\nconsole.log(reversedAddition(893, 342))", "category": "Python"}, {"instruction": "How would you use Recursion to solve the Fibonacci Sequence in Python?", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))", "category": "Python"}, {"instruction": "Develop a SQL query to find all the records that have modified within a given time range.", "input": "", "output": "SELECT * \nFROM Table \nWHERE ModifiedTime BETWEEN '<start-time>' AND '<end-time>';", "category": "Python"}, {"instruction": "Create a loop in Python to multiply each element of a list with 10.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst", "category": "Python"}, {"instruction": "Given an array of integers and a target value, modify the array such that each element is the multiplication of the previous element and the target value.", "input": "arr = [2, 4, 5], target = 3", "output": "arr = [2, 8, 24]  # [2 * 3, 4 * 3, 5 * 3]", "category": "Python"}]
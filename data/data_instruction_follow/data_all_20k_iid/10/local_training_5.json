[{"instruction": "Using a while loop, print all numbers between 0 and a given number, 10.", "input": "", "output": "i = 0\nwhile i <= 10: \n    print(i)\n    i+=1", "category": "Python"}, {"instruction": "Calculate the total sum of a given list using an accumulator pattern.", "input": "numbers = [2, 3, 4]", "output": "numbers = [2, 3, 4]\ntotal_sum = 0\n\n# iterate through the list and add each element to the total sum\nfor n in numbers: \n    total_sum += n \n    \nprint(total_sum)", "category": "Python"}, {"instruction": "Generate a function `recursive_sum` that computes the sum of a list of integers recursively.", "input": "", "output": "def recursive_sum(lst): \n    # Base case\n    if not len(lst): \n        return 0\n    return lst[0] + recursive_sum(lst[1:])", "category": "Python"}, {"instruction": "Rewrite the following jQuery code to its vanilla JavaScript equivalent.", "input": "$(\"#list li\").each(function(){\n  //some code\n});", "output": "document.querySelectorAll(\"#list li\").forEach(function (el) {\n  //some code\n});", "category": "Python"}, {"instruction": "Change the following code to accept multiple arguments.", "input": "func add(a, b) {\n  return a + b;\n}", "output": "func add(...args) {\n  let result = 0;\n  for (const arg of args) {\n    result += arg;\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Construct an appropriate list of even numbers between 0 and 10.", "input": "", "output": "[0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Remove the first element in a list using slicing.", "input": "[1, 2, 3, 4, 5]", "output": "list[1:]", "category": "Python"}, {"instruction": "Write a class to define a car object with the attribute of brand, model and year.", "input": "", "output": "class Car:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year", "category": "Python"}, {"instruction": "Using the .sort() method, sort an array in ascending order.", "input": "[5, 3, 9, 1]", "output": "arr.sort()", "category": "Python"}, {"instruction": "Find the simplest possible way to print \"Welcome to Tech World!\" five times.", "input": "", "output": "for _ in range(5):\n    print(\"Welcome to Tech World!\")", "category": "Python"}, {"instruction": "Convert the given date into the ISO 8601 date format.", "input": "April 15th, 2020", "output": "", "category": "Python"}, {"instruction": "Fix the bug in this code.", "input": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'", "output": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'\nelse:\n    return area", "category": "Python"}, {"instruction": "Identify any typos or grammatical errors in this sentence.", "input": "Emmm, it seemms so.", "output": "typos: \"seemms\" \ngrammatical errors: none", "category": "Python"}, {"instruction": "Output the binary representation of a given number.", "input": "14", "output": "1110", "category": "Python"}, {"instruction": "Create a Java program to implement the classic Tic Tac Toe game.", "input": "", "output": "import java.util.Scanner;\n\npublic class TicTacToe {\n \n    public static char[][] board = new char[3][3];\n    public static boolean playerX;\n    public static Scanner scan;\n \n    public static void main(String[] args) {\n        scan = new Scanner(System.in);\n        playerX = true;\n        initializeBoard();\n \n        while(true) {\n            printBoard();\n            nextMove(playerX);\n            if(checkWinner()) {\n                break;\n            }\n            playerX = !playerX;\n        }\n \n    }\n \n    public static void initializeBoard() {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                board[i][j] = '-';\n    }\n \n    public static void printBoard() {\n        System.out.println(\"-------------\");\n        for (int i = 0; i < 3; i++) {\n            System.out.print(\"| \");\n            for (int j = 0; j < 3; j++) {\n                System.out.print(board[i][j] + \" | \");\n            }\n            System.out.println();\n        }\n        System.out.println(\"-------------\");\n    }\n \n    public static void nextMove(boolean player) {\n        if(player)\n            System.out.print(\"Player X, enter your move row,col: \");\n        else\n            System.out.print(\"Player O, enter your move row,col: \");\n \n        int row = scan.nextInt() - 1;\n        int col = scan.nextInt() - 1;\n        board[row][col] = player ? 'X' : 'O';\n    }\n \n    public static boolean checkWinner() {\n        // Horizontal win\n        for(int i=0;i<3;i++) {\n            if(board[i][0] == board[i][1] && board[i][1] == board[i][2])\n                return true;\n        }\n \n        // Vertical win\n        for(int j=0;j<3;j++) {\n            if(board[0][j] == board[1][j] && board[1][j] == board[2][j])\n                return true;\n        }\n \n        // Diagonal win\n        if(board[0][0] == board[1][1] && board[1][1] == board[2][2])\n            return true;\n        if(board[2][0] == board[1][1] && board[1][1] == board[0][2])\n            return true;\n \n        return false;\n    }\n \n}", "category": "Python"}, {"instruction": "Given a list of numbers, write a function in Java to arrange the list in ascending order.", "input": "nums = [10, 2, 9, 6]", "output": "static int[] sortAscending(int[] nums) {\n    for (int i = 0; i < nums.length-1; i++) {\n        for (int j = 0; j < nums.length-1-i; j++) {\n            if (nums[j] > nums[j+1]) {\n                int temp = nums[j];\n                nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n        }\n    }\n    return nums;\n}", "category": "Python"}, {"instruction": "Add try-catch block for the code below.", "input": "x = 1\ny = 0\nprint(x / y)", "output": "try:\n    x = 1\n    y = 0\n    print(x / y)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")", "category": "Python"}, {"instruction": "In the following code, write a switch statement in JavaScript that identifies whether a number is positive, negative, or zero.", "input": "num = 5", "output": "switch(num) {\n    case (num > 0):\n        console.log(\"positive\");\n        break;\n    case (num < 0):\n        console.log(\"negative\");\n        break;\n    case (num == 0):\n        console.log(\"zero\");\n        break;\n    default:\n        console.log(\"Error\");\n        break;\n}", "category": "Python"}, {"instruction": "Create a MySQL table with three columns \"name\", \"id\", and \"age\".", "input": "", "output": "CREATE TABLE users (\n    name VARCHAR(255) NOT NULL,\n    id INT NOT NULL,\n    age INT NOT NULL\n);", "category": "Python"}, {"instruction": "Create a new class in Python named \"Employee\".", "input": "", "output": "class Employee:\n    def __init__(self):\n        pass", "category": "Python"}, {"instruction": "Write an SQL query to delete all the records in a table named \"users\".", "input": "", "output": "DELETE FROM users;", "category": "Python"}, {"instruction": "In the following Python function, insert code to check if the given number is even or odd.", "input": "def check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "output": "def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line.", "input": "sentences = [\"Hello\", \"My name is\", \"John\", \"Nice to meet you!\"]", "output": "for sentence in sentences:\n    print(sentence)", "category": "Python"}, {"instruction": "Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.", "input": "num = 10", "output": "def generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result", "category": "Python"}, {"instruction": "Write a for loop to print out the squared value of each element in the list.", "input": "[1, 2, 3, 4]", "output": "for i in [1,2,3,4]:\n    print(i*i)", "category": "Python"}, {"instruction": "Using the comment as a guide, write code in JavaScript to generate a random number between 1 and 10.", "input": "// TODO", "output": "let randomNumber = Math.floor(Math.random() * 10 + 1);", "category": "Python"}, {"instruction": "Find the slope of this line.", "input": "Point 1 (3, 2)\nPoint 2 (6, 4)", "output": "The slope of the line is 0.5.", "category": "Python"}, {"instruction": "Create a JSON object for this data.", "input": "Name: John\nAge: 25\nGender: Male", "output": "{\"name\": \"John\", \"age\": 25, \"gender\": \"Male\"}", "category": "Python"}, {"instruction": "What is the http status code for \"Not Found\"?", "input": "", "output": "404.", "category": "Python"}, {"instruction": "What is the maximum limit of frames which a HTML page can hold?", "input": "", "output": "A HTML page can contain up to 16,000 frames.", "category": "Python"}, {"instruction": "Create an array of 10 numbers in Java and assign random values from 1 to 10 to each item of the array.", "input": "", "output": "int[] nums = new int[10];\nRandom rand = new Random();\n\nfor(int i=0; i<nums.length; i++) {\n    nums[i] = rand.nextInt(10) + 1;\n}", "category": "Python"}, {"instruction": "Write a code in C# to convert a decimal number to binary format with or without bitwise operators.", "input": "15", "output": "public static class Program\n{\n  public static string DecimalToBinary(int n)\n  {\n    string binary = \"\";\n    int remainder;\n    //without using bitwise operators\n    while (n != 0)\n    {\n      remainder = n % 2;\n      n /= 2;\n      binary = remainder + binary; \n    }\n    return binary;\n  }\n \n  public static void Main() \n  {\n    string binary = DecimalToBinary(15);\n    Console.WriteLine(binary);\n  }\n}", "category": "Python"}, {"instruction": "How can you represent an integer in binary?", "input": "", "output": "Integers can be represented in binary using a series of ones and zeroes. In a binary system, the position of a bit (binary digit) indicates its place value in the number. For example, the rightmost bit has the value of 1, the second-rightmost bit has the value of 2, the third-rightmost bit has the value of 4, and so on.", "category": "Python"}, {"instruction": "Write a code to reverse a stack and return the new stack.", "input": "Stack: [1, 2, 3, 4, 5]", "output": "#include<stack>\n#include<iostream>\n\nusing namespace std;\n\nstack<int> reverseStack(stack<int> s) {\n    stack<int> tempStack;\n    while (!s.empty()) {\n        int temp = s.top();\n        tempStack.push(temp);\n        s.pop();\n    }\n    return tempStack;\n}\n\nint main() {\n    stack<int> s;\n    s.push(1); s.push(2);\n    s.push(3); s.push(4);\n    s.push(5);\n\n    stack<int> revStack = reverseStack(s);\n    while (!revStack.empty()) {\n        cout << revStack.top() << \" \";\n        revStack.pop();\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "How can you create a for loop in Python to loop through a list?", "input": "", "output": "# loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Write a code in C to get the greatest common divisor between two numbers.", "input": "25, 10", "output": "#include <stdio.h>\n \nint gcd(int a, int b)\n{\n    if (a == 0)\n        return b;\n    return gcd(b % a, a);\n}\n \n// Driver program to test above function\nint main()\n{\n    int a = 25, b = 10;\n    printf(\"GCD of %d and %d is %d \", a, b, gcd(a, b));\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a code for a Javascript program to return the nth Fibonacci number.", "input": "8", "output": "// returns the nth Fibonacci number\nfunction nthFibonacciNumber(n) {\n    let fib = [0, 1];\n    for (i=2; i<=n; i++)\n    {\n      fib[i] = fib[i-2] + fib[i-1];\n    }\n    return fib[n];\n}\n\nconsole.log(nthFibonacciNumber(8));", "category": "Python"}, {"instruction": "Describe the basics of programming for a beginner.", "input": "", "output": "Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist.", "category": "Python"}, {"instruction": "Rewrite the following Ruby method using an empty line between each statement.", "input": "def doubles(array)\n  array.map { |e| e * 2 }\nend", "output": "def doubles(array)\n  array.map { |e| \n    e * 2 \n  }\nend", "category": "Python"}, {"instruction": "Generate a theta join query to find companies located in a given zip code.", "input": "Zip Code: 45112", "output": "SELECT * \nFROM companies c\nINNER JOIN locations l\nON c.company_id = l.company_id \nWHERE l.zip_code = '45112'", "category": "Python"}, {"instruction": "Given a SQL table of user accounts, write a SQL query to find the account with the lowest number of login attempts.", "input": "", "output": "SELECT * \nFROM users\nORDER BY login_attempts ASC \nLIMIT 1", "category": "Python"}, {"instruction": "Write a SQL query to find the average credit score of users who are 18 years or younger.", "input": "", "output": "SELECT AVG(credit_score)\nFROM users\nWHERE age <= 18", "category": "Python"}, {"instruction": "Generate a SQL query to find the names of all users whose credit scores are lower than 50.", "input": "", "output": "SELECT name\nFROM users\nWHERE credit_score < 50", "category": "Python"}, {"instruction": "Rewrite the following Python function so it returns the opposite of the original output.", "input": "def returnsThree() :\n return 3", "output": "def returnsThree():\n    return -3", "category": "Python"}, {"instruction": "Find the 5th element of the list in Python.", "input": "list = [12, 34, 87, 90, 80, 21]", "output": "element = list[4]\nprint(element) # 80", "category": "Python"}, {"instruction": "Write a function in C++ that takes an integer array as a parameter and returns the average value in the array.", "input": "", "output": "float getAverage(int arr[], int n){ \n    int sum=0;\n    for (int i=0; i<n; i++) \n        sum += arr[i];\n  \n    return (sum/n); \n}", "category": "Python"}, {"instruction": "Extract a numeric value from the following string in Python.", "input": "myString = \"The length of the tree is 25 meters\"", "output": "import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25", "category": "Python"}, {"instruction": "Write a SQL query to find all the students with a last name beginning with 'D'.", "input": "", "output": "SELECT * \nFROM students \nWHERE last_name LIKE 'D%';", "category": "Python"}, {"instruction": "Write a class in Scala to define dog characteristics such as color, breed, and size.", "input": "", "output": "class Dog(color:String, breed:String, size:String){\n  def description = s\"This dog is a $color $breed, and is $size.\" \n}", "category": "Python"}, {"instruction": "Generate a method in C++ to sort a given array in descending order.", "input": "arr = [3,5,1]", "output": "void sort_descending(int arr[], int n) \n{ \n    int temp; \n    for (int i=0; i<n; i++) \n    { \n        for (int j=i+1; j<n; j++) \n        { \n            if (arr[i] < arr[j]) \n            { \n                temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        } \n    } \n}", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data.", "input": "<100 rows of bank transaction data>", "output": "#import necessary models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#split data into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\n\n#create the machine learning model\nlr_model = LogisticRegression()\n\n#train the model\nlr_model.fit(x_train, y_train)", "category": "Python"}, {"instruction": "Construct a query in Java to find the last day of the month.", "input": "", "output": "Calendar now = Calendar.getInstance();\nint lastDayOfMonth = now.getActualMaximum(Calendar.DAY_OF_MONTH);", "category": "Python"}, {"instruction": "Design a method in Ruby that can be used to determine if a given number is a prime number or not.", "input": "number = 7", "output": "def prime?(number) \n    (2..number/2).each do |i|\n        if number % i == 0\n            return false\n        end\n    end\n    return true\nend", "category": "Python"}, {"instruction": "Create a query in SQL to find the product IDs of all items having a given color.", "input": "color = \"red\"", "output": "SELECT product_id \nFROM products \nWHERE color = 'red';", "category": "Python"}, {"instruction": "Compose a style sheet in CSS that will make all text with the class \"blue\" have a blue color.", "input": "", "output": ".blue { \n    color: blue; \n}", "category": "Python"}, {"instruction": "Insert a comment that explains what the following C++ code does.", "input": "sum = 0\nfor (i = 0; i < 10; i++):\n  sum += arr[i]", "output": "// Set \"sum\" to 0 \n// Iterate over the array \"arr\", from its 0th element to 9th element \n// and add each element of the array to the \"sum\" at each iteration", "category": "Python"}, {"instruction": "Create a web form in HTML with two fields - first name and last name", "input": "", "output": "<form>\n  <label for=\"firstName\">First Name</label><br>\n  <input type=\"text\" id=\"firstName\" name=\"firstName\"><br><br>\n \n  <label for=\"lastName\">Last Name</label><br>\n  <input type=\"text\" id=\"lastName\" name=\"lastName\"><br><br>\n</form>", "category": "Python"}, {"instruction": "Given a list of student's grades, write a program to calculate their average.", "input": "Grades = [90, 95, 80, 75]", "output": "\"\"\"\nCalculate the average of a given list of grades\n\"\"\"\n\ndef average(grades):\n    sum = 0\n    for grade in grades:\n        sum += grade\n    \n    return sum / len(grades)\n\nif __name__ == '__main__':\n    grades = [90, 95, 80, 75]\n    print(average(grades))", "category": "Python"}, {"instruction": "Generate a random password using a given string of characters.", "input": "String: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"", "output": "\"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\n\nimport random \n\ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))", "category": "Python"}, {"instruction": "Write a function to convert a 3 letter acronym to its full form.", "input": "Acronym: \"GDP\"", "output": "\"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n        'GDP': 'Gross Domestic Product',\n        'CIA': 'Central Intelligence Agency',\n        'NASA': 'National Aeronautics and Space Administration'\n    }\n\n    return acronyms[acronym]\n\nif __name__ == '__main__':\n    acronym = \"GDP\"\n    print(acronym_to_full_form(acronym))", "category": "Python"}, {"instruction": "Write a regex pattern to find all words that start with 'a' in a sentence.", "input": "Sentence: \"All animals are amazing\"", "output": "\"\"\"\nFind all words that start with 'a' in a sentence\n\"\"\"\n\nimport re\n\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.findall(pattern, sentence)\n    return matches\n\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))", "category": "Python"}, {"instruction": "Find the middle element of a given linked list.", "input": "1 -> 2 -> 3 -> 4 -> 5", "output": "The middle element of the linked list is 3.", "category": "Python"}, {"instruction": "Create a tuple containing user data about a person.", "input": "", "output": "user_data = (\"John Doe\", 29, \"Male\", \"New York\")", "category": "Python"}, {"instruction": "Write a CSS property to display an element as a flex item.", "input": "", "output": "display: flex;", "category": "Python"}, {"instruction": "Assign a numerical value to a given string.", "input": "\"Apple\"", "output": "\"Apple\" = 1", "category": "Python"}, {"instruction": "Use HTML and CSS to create a navigation bar on the top of the page.", "input": "", "output": "<header>\n    <nav>\n        <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Blog</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n</header>\n\n<style>\nheader {\n    background-color: #222;\n}\n\nnav {\n    float: right;\n    margin-right:50px;\n}\n\nul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n} \n\nli {\n    float: left;\n}\n\nli a {\n    display: block;\n    color: white;\n    text-align: center;\n    padding: 14px 25px;\n    text-decoration: none;\n}\n\nli a:hover {\n    background-color: #111;\n}\n</style>", "category": "Python"}, {"instruction": "What is a common use case for a ternary operator?", "input": "", "output": "A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement:\n\na = 5\nb = 10\nresult = a if a > b else b\n\nIn this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b.", "category": "Python"}, {"instruction": "Construct a basic data structure to store a dictionary of words and their definitions.", "input": "", "output": "class WordDictionary(object): \n    def __init__(self): \n        self.words = {} \n\n    def add_definition(self, word, definition): \n        self.words[word] = definition\n\n    def lookup_definition(self, word): \n        if word in self.words: \n            return self.words[word]\n        else: \n            return None\n\n    def delete_word(self, word): \n        del self.words[word]", "category": "Python"}, {"instruction": "Design a Python program to read string inputs and print out the reverse of the same", "input": "", "output": "def reverse_string(string):\n  string = string[::-1]\n  return string", "category": "Python"}, {"instruction": "Implement a function to calculate the sum of digits of a given positive integer.", "input": "", "output": "def sum_digits(n):\n  total = 0\n  while n:\n    total += n % 10\n    n //= 10\n  return total", "category": "Python"}, {"instruction": "Why is JavaScript called a multi-paradigm language?", "input": "", "output": "JavaScript is called a multi-paradigm language because it allows developers to use multiple different programming paradimms such as object-oriented programming, functional programming, event-driven programming, and procedural programming. This flexibility allows developers to have more control over the structure of their code and enables them to write programs in whatever style they desire. It also makes JavaScript more versatile, allowing developers to find the best approach for any given problem.", "category": "Python"}, {"instruction": "Write a method that produces a random password with the specified number of characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password(characters):\n  password = ''\n\n  for _ in range(characters):\n    password += random.choice(string.ascii_letters + string.digits)\n\n  return password", "category": "Python"}, {"instruction": "What language do we use to write HTML?", "input": "", "output": "HTML is written in a markup language known as HyperText Markup Language (HTML). HTML is a language for describing web pages. It is used for structuring and presenting content for the web. It is written in the form of HTML elements consisting of tags enclosed in angle brackets.", "category": "Python"}, {"instruction": "Create an algorithm to find the median of a given list of numbers.", "input": "[2, 5, 7, 4, 3]", "output": "def find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n    return median", "category": "Python"}, {"instruction": "Explain what a while loop is.", "input": "", "output": "A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop.", "category": "Python"}, {"instruction": "Design a JSON object containing Book information such as title, author and publication year.", "input": "", "output": "{\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"J.D. Salinger\", \n \"publication_year\": 1951\n}", "category": "Python"}, {"instruction": "Write a Java program to clone an array of objects.", "input": "", "output": "public class CloneObjectArray { \n\n    public static void main(String[] args) \n    { \n        // Creating an array of objects \n        Employee[] employees = {new Employee(\"John\", 25), \n            new Employee(\"Tim\", 30), \n            new Employee(\"Tom\", 35)}; \n\n\t\t// Cloning the array \n        Employee[] clone = employees.clone(); \n\n        // Printing the current array \n        System.out.println(\"Employees array:\"); \n        for (Employee emp : employees) { \n            System.out.println(emp); \n        } \n\n        // Printing the cloned array \n        System.out.println(\"Cloned Employees array:\"); \n        for (Employee emp : clone) { \n            System.out.println(emp); \n        } \n    } \n} \n\nclass Employee implements Cloneable { \n    String name; \n    int age;\n\n    Employee(String name, int age) \n    { \n        this.name = name; \n        this.age = age; \n    } \n\n    // Override clone method \n    @Override\n    protected Object clone() throws CloneNotSupportedException \n    { \n        return super.clone(); \n    } \n\n    @Override\n    public String toString() \n    { \n        return this.name + \" \" + this.age; \n    } \n}", "category": "Python"}, {"instruction": "Given an array of objects, sort them in descending order according to their age.", "input": "array = [ {name: 'John', age: 25}, {name: 'Peter', age: 32}, {name: 'Alex', age: 21} ]", "output": "import java.util.Arrays; \nimport java.util.Comparator; \n\npublic class SortByAge { \n\n    public static void main(String[] args) \n    {\n        // Array of objects \n        object[] array = { {name: 'John', age: 25},\n         {name: 'Peter', age: 32}, {name: 'Alex', age: 21} }; \n\n        // Sorting array of objects by age in descending order \n        Arrays.sort(array, Comparator.comparing(o -> o.age, Comparator.reverseOrder())); \n\n        // Printing the sorted array of objects \n        System.out.println(\"Sorted objects array in descending order of age:\"); \n        Arrays.stream(array)\n            .forEach(e -> System.out.println(e.name + \" \" + e.age)); \n    } \n}", "category": "Python"}, {"instruction": "Implement a function in JavaScript that takes an array and returns an object with the count of each element value.", "input": "array = [true, false, false, true, false, true]", "output": "function countElements(arr) {\n const obj = {};\n \n arr.forEach(element => {\n  if (obj.hasOwnProperty(element)) {\n   obj[element] += 1;\n  } else {\n   obj[element] = 1;\n  }\n });\n \n return obj;\n}\n\nconst array = [true, false, false, true, false, true];\nconst countedElements = countElements(array);\nconsole.log(countedElements); // { true: 3, false: 3 }", "category": "Python"}, {"instruction": "Write a Java program to find the area of a triangle where the three sides are given as x, y, and z.", "input": "x = 6, y = 7, z = 8", "output": "public class AreaOfTriangle { \n public static void main(String[] args) {\n  int x = 6, y = 7, z = 8;\n  double s = (x + y + z) / 2;\n  double area = Math.sqrt(s * (s - x) * (s - y) * (s - z));\n  System.out.println(\"Area of triangle: \" + area);\n }\n}", "category": "Python"}, {"instruction": "How many bytes does a char data type take in C/C++?", "input": "", "output": "A char data type takes one byte of memory in C/C++.", "category": "Python"}, {"instruction": "Write a JavaScript code that creates an array of objects having keys \"name\", \"age\" and \"city\".", "input": "", "output": "const users = [\n {name: 'John', age: 30, city: 'New York'}, \n {name: 'Lisa', age: 25, city: 'Sydney'},\n {name: 'Alex', age: 27, city: 'London'},\n {name: 'Cathy', age: 28, city: 'Tokyo'},\n {name: 'David', age: 32, city: 'Berlin'} \n];", "category": "Python"}, {"instruction": "Generate a valid python loop to print out the elements of a list.", "input": "List = [1,2,3,4,5]", "output": "for element in List:\n    print(element)", "category": "Python"}, {"instruction": "Find the most suitable 10-lines python code to generate all permutations of a 3 letters word", "input": "", "output": "from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)", "category": "Python"}, {"instruction": "Using this list, write a Python program to print out all the duplicate elements", "input": "my_list = [1, 2, 3, 2, 4, 3]", "output": "duplicate = []\n\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            duplicate.append(value)\n\nprint(duplicate)", "category": "Python"}, {"instruction": "Create a program in Python which takes any string as an input and prints the number of each of its characters", "input": "hello", "output": "character_count = {'h':1, 'e':1, 'l':2, 'o':1}", "category": "Python"}, {"instruction": "Format the following array of numbers using Python.", "input": "arr = [3, 1, 4, 5, 9, 8]", "output": "arr = [3, 1, 4, 5, 9, 8]\n\n# sorting the array\narr.sort()\n\n# print the array\nprint(arr)\n\n# Output:\n[1, 3, 4, 5, 8, 9]", "category": "Python"}, {"instruction": "What is the most efficient way to insert a new element into an existing unsorted array?", "input": "", "output": "The most efficient way to insert a new element into an existing unsorted array is to append it to the end of the array. This is the fastest way since no shifting of elements is required. This is O(1) time complexity.", "category": "Python"}, {"instruction": "Write a function to check if the given string `str1` is a permutation of the string `str2`", "input": "str1 = 'program'\nstr2 = 'gramopr'", "output": "def is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True", "category": "Python"}, {"instruction": "Generate a PHP program to accept a string as an input and convert it to uppercase.", "input": "", "output": "<?php\n\n$str = 'Hello World!';\necho strtoupper($str);\n\n// Output: HELLO WORLD!\n?>", "category": "Python"}, {"instruction": "Write a shell script that input an address and open the corresponding website in the default web browser.", "input": "", "output": "#!/bin/bash\naddress=$1\nxdg-open \"https://www.$address\"", "category": "Python"}, {"instruction": "Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.", "input": "", "output": "import numpy as np \nimport tensorflow as tf\n\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n\n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)", "category": "Python"}, {"instruction": "Create an HTML page that displays one web page with two vertical panenls.", "input": "", "output": "<html>\n  <head>\n    <style>\n      #left, #right{\n        height: 300px;\n        width: 200px;\n        float: left;\n        padding: 10px;\n        background-color: #ddd;\n      }\n    </style>\n  </head>\n  <body>\n    <div contenteditable=\"true\" id=\"left\"></div>\n    <div contenteditable=\"true\" id=\"right\"></div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Reverse an array of integers using Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n \n# reversing the array\narr.reverse()\n \n# print the reversed array\nprint(arr)\n \n# Output:\n[5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Input two arrays and write a program to merge the two given sorted arrays into one sorted array.", "input": "arr1 = [3, 5, 7]\narr2 = [2, 4]", "output": "def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]", "category": "Python"}, {"instruction": "Write a Ruby method that takes two integers, n and m, as arguments and return an array containing the even numbers from n to m.", "input": "m = 10\nn = 1", "output": "def even_numbers_array(n, m)\n  evens = []\n  (n..m).each do |i|\n    evens << i if i.even?\n  end\n  evens\nend\n\np even_numbers_array(n, m) \n# Output: [2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Input a sentence with repeated words and write a Python code to remove all the repeated words.", "input": "sentence = 'The the cat cat sat sat on on the the mat'", "output": "def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return \" \".join(result)\n\nprint(remove_repeated_words(sentence))\n# Output: The cat sat on the mat", "category": "Python"}, {"instruction": "Input an array and remove all duplicates from the given array.", "input": "arr = [1, 2, 3, 1, 2]", "output": "def remove_duplicates(arr): \n    result = [] \n    for item in arr: \n        if item not in result: \n            result.append(item) \n    return result\n\nprint(remove_duplicates(arr)) \n# Output: [1, 2, 3]", "category": "Python"}, {"instruction": "Design a Python program which prints the elements in reverse order", "input": "my_list = [1,2,3,4,5]", "output": "def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)", "category": "Python"}, {"instruction": "Construct a program to find the result of the following equation", "input": "(x-1)^2", "output": "def equation(x):\n    return (x-1)**2", "category": "Python"}, {"instruction": "Generate a valid syntax to remove the last element of a list", "input": "", "output": "my_list.pop()", "category": "Python"}, {"instruction": "Write a snippet of code to swap two variables without using the third variable", "input": "a = 5\nb = 10", "output": "a, b = b, a", "category": "Python"}, {"instruction": "Create a function in C# that takes a string and returns true if all the characters are unique in the string.", "input": "", "output": "public static bool IsUnique(string str)\n{\n    char[] charArray = str.ToCharArray();\n    HashSet<char> charSet = new HashSet<char>(charArray);\n    return str.Length == charSet.Count;\n}", "category": "Python"}, {"instruction": "Create a regex pattern in Python that can extract URL from a text string.", "input": "text = \"Visit http://www.example.com for more information.\"", "output": "import re\n\npattern = re.compile(r'(https?://\\S+)')\nurls = re.findall(pattern, text)", "category": "Python"}, {"instruction": "Write a method that takes a parameter, text, and returns the words in the text in reverse order.", "input": "text = \"Hello world!\"", "output": "def reverse_words(text):\n  words = text.split(\" \");\n  reversedWords = words[::-1];\n  return \" \".join(reversedWords);", "category": "Python"}, {"instruction": "Analyze the following code and answer the following question: Is there a bug in this code?", "input": "def foo(num):\n  if num == 0:\n    return 1\n  else:\n    return foo(num - 1)", "output": "Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`.", "category": "Python"}, {"instruction": "Write a multi-line comment in Python describing what the following program does.", "input": "def hello():\n    print(\"Hello World\")", "output": "\"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\"", "category": "Python"}, {"instruction": "Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list.", "input": "[1, 4, 7, 3, 8]", "output": "def maxMin(arr):\n    # Initialize the maximum and the minimum value\n    maxi = arr[0] \n    mini = arr[0] \n  \n    # Iterate each element in arr to find the maximum and minimum\n    for i in range(1, len(arr)): \n        if arr[i] > maxi: \n            maxi = arr[i] \n        elif arr[i] < mini: \n            mini = arr[i]\n  \n    return (maxi, mini)", "category": "Python"}, {"instruction": "Create a function to get the intersection of two sorted arrays", "input": "arr1 = [1, 3, 4, 5, 6] \narr2 = [3, 5, 7, 8]", "output": "def intersection(arr1, arr2):\n    # Initialize a result array\n    res = [] \n\n    # Iterate each element of the first array and find in second array\n    for i in range(len(arr1)): \n        for j in range(len(arr2)):\n            # If element is present then append it to result array\n            if arr1[i] == arr2[j]: \n                res.append(arr1[i])\n  \n    return res", "category": "Python"}, {"instruction": "Find the largest key in a dictionary", "input": "{'a':1, 'b':5, 'c':6, 'd':9}", "output": "def findLargestKey(d): \n\t# Initialize largest_key and largest_val\n    largest_key = None\n    largest_val = -1\n\t\n    # Iterate each key-value in dictionary\n    for key, value in d.items():\n\t\t# Initialize largest_key and largest_val\n        if value > largest_val: \n            largest_val = value\n            largest_key = key\n  \n    return largest_key", "category": "Python"}, {"instruction": "Remove any element from an array that is greater than 10", "input": "[3, 5, 10, 20, 7]", "output": "def removeGreaterThanTen(arr): \n\t# Create a new_arr array\n    new_arr = [] \n\n    # Iterate each element in array\n    for i in range(len(arr)):\n\n        # Check if the element is greater than 10\n        if arr[i] <= 10: \n            # Add the element to the new_arr\n            new_arr.append(arr[i]) \n\n    return new_arr", "category": "Python"}, {"instruction": "Generate a SQL query to return a list of customers who ordered more than one item", "input": "", "output": "SELECT c.id, c.name \nFROM customers c \nINNER JOIN orders o \nON c.id = o.customer_id \nGROUP BY c.id, c.name \nHAVING COUNT(o.order_id) > 1", "category": "Python"}, {"instruction": "Find the number of occurrences of \u2018Python\u2019 in the given string.", "input": "Python is a great language. Python is easy to learn.", "output": "def count_occurences(str, word):\n    return str.count(word)\n\nif __name__ == '__main__':\n    str = 'Python is a great language. Python is easy to learn.'\n    print(count_occurences(str, 'Python'))", "category": "Python"}, {"instruction": "Write a Python code to generate random numbers from the given list.", "input": "[10, 20, 30, 40]", "output": "import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)", "category": "Python"}, {"instruction": "Take the following list of temperatures in Celsius and convert them to Fahrenheit.", "input": "[10, 15, 20, 25, 30]", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)", "category": "Python"}, {"instruction": "Write a Python program to calculate the number of bits needed to represent an integer in binary form.", "input": "", "output": "def num_of_bits(num):\n    return len(bin(num)[2:])\n\nif __name__ == '__main__':\n    print(num_of_bits(50))", "category": "Python"}, {"instruction": "Write a Python script to parse given web pages and extract links from it.", "input": "", "output": "\"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))", "category": "Python"}, {"instruction": "Create a method to filter out odd numbers from an array.", "input": "array = [6, 5, 9, 10, 11, 8]", "output": "def filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))", "category": "Python"}, {"instruction": "Modify the given line of code to print the message \"Hello World!\"", "input": "print(\"Good Luck!\")", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Generate a function in Python to compute the area of a rectangle.", "input": "", "output": "def area_rectangle(length, breadth): \n    return length * breadth", "category": "Python"}, {"instruction": "Construct a script that takes inputs from the user and prints out the Fibonacci sequence up to a given number.", "input": "", "output": "def fibonacci_seq(n):\n    # Start and endpoints for the Fibonacci sequence\n    num1 = 0 \n    num2 = 1\n  \n    # List to store the sequence \n    Fibonacci_seq = [num1, num2]\n  \n    while num2 < n:\n        num3 = num1 + num2 \n        num1 = num2 \n        num2 = num3\n        Fibonacci_seq.append(num2)\n  \n    print(Fibonacci_seq)", "category": "Python"}, {"instruction": "Write a SQL query to find the average score of students who are aged between 20 and 23.", "input": "", "output": "SELECT AVG(score) \nFROM students \nWHERE age BETWEEN 20 AND 23;", "category": "Python"}, {"instruction": "Create a Python Exception to handle Nonetype Error.", "input": "", "output": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")", "category": "Python"}, {"instruction": "Create a variable in Python to store 10 multidimensional arrays.", "input": "", "output": "arrays = [[[1,2], [3,4]],\n          [[5,6], [7,8]],\n          [[9,10], [11,12]],\n          [[13,14], [15,16]],\n          [[17,18], [19,20]],\n          [[21,22], [23,24]],\n          [[25,26], [27,28]],\n          [[29,30], [31,32]],\n          [[33,34], [35,36]],\n          [[37,38], [39,40]]]", "category": "Python"}, {"instruction": "Create a function in Java to remove values from an array that are greater than a given number.", "input": "int[] array = {5, 8, 2, 9, 10, 6};", "output": "public static int[] removeGreater(int [] array, int limit){\n  return Arrays.stream(array)\n        .filter(x -> x < limit)\n        .toArray();\n}", "category": "Python"}, {"instruction": "Are these two strings equal?", "input": "String 1: Hi\nString 2: Hi", "output": "Yes, the two strings are equal.", "category": "Python"}, {"instruction": "Parse this HTML code and extract the text.", "input": "<p>This is a pararaph of text<p>", "output": "String text = doc.select(\"p\").text(); // text = \"This is a pararaph of text\"", "category": "Python"}, {"instruction": "Create a C++ program for computing the sum of the digits in a number.", "input": "Number: 1234", "output": "#include <iostream>\nusing namespace std;\n\nint getSumOfDigits(int n) \n{ \n    // Base case \n    if (n == 0) \n        return 0; \n          \n    return (n % 10 + getSumOfDigits(n / 10)); \n} \n  \n// Driver code \nint main() \n{ \n    int n = 1234; \n    cout << getSumOfDigits(n) << endl; \n    return 0; \n}", "category": "Python"}, {"instruction": "Identify the class of the given IP address.", "input": "IP Address: 192.168.1.1", "output": "Class C.", "category": "Python"}, {"instruction": "Create a Java program for finding the first non-repeated character in a string.", "input": "String: hello", "output": "public class NonRepeatedCharacters \n{ \n    static final int NO_OF_CHARS = 256; \n      \n    /* Returns an array of size 256 conaining count \n    of characters in the passed char array */\n    static int[] getCharCountArray(String str) \n    { \n        int count[] = new int[NO_OF_CHARS]; \n        int len = str.length(); \n          \n        /* Increment count of characters in count[] */\n        for (int i = 0; i < len; i++) \n            count[str.charAt(i)]++; \n          \n        return count; \n    } \n      \n    /* The function returns index of first non-repeating \n    character in a string. If all characters are repeating \n    then returns -1 */\n    static int firstNonRepeating(String str) \n    { \n        int count[] = getCharCountArray(str); \n        int index = -1, i; \n          \n        for (i = 0; i < str.length(); i++) \n        { \n            if (count[str.charAt(i)] == 1) \n            { \n                index = i; \n                break; \n            }    \n        }   \n          \n        return index; \n    } \n}", "category": "Python"}, {"instruction": "In the following JavaScript function, edit the function body so that it returns the number stored in the variable 'currentNum' minus 5.", "input": "function subtractFive(currentNum) {\n  // TODO\n}", "output": "function subtractFive(currentNum) {\n  return currentNum - 5;\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the oldest user in the users table.", "input": "", "output": "SELECT * \nFROM users\nORDER BY age DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Design a function to calculate the GCD (greatest common divisor) of two given integers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in the following Python statement with an appropriate value.", "input": "count = 0\n# TODO: add 1 to count", "output": "count = 0\ncount += 1", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to sort an array of objects by a given property name.", "input": "var animals = [\n  {name: \"cat\", age: 3},\n  {name: \"dog\", age: 5},\n  {name: \"bird\", age: 1}\n];", "output": "animals.sort((a, b) => (a.age > b.age) ? 1 : -1);", "category": "Python"}, {"instruction": "Write an SQL command to create a new table called 'users' with three columns: 'user_id', 'fname' and 'lname'.", "input": "", "output": "CREATE TABLE users ( \n  user_id INT PRIMARY KEY,\n  fname VARCHAR(50), \n  lname VARCHAR(50)\n);", "category": "Python"}, {"instruction": "Write a JavaScript code to count the number of occurrences of an input string in a text string.", "input": "str1 = \"My name is Mary and my friend's name is Sarah\"\nstr2 = \"name\"", "output": "const countOccurences = (text, str) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.slice(i, i + str.length) === str) {\n            count++;\n        }\n    }\n    return count;\n};\n\ncountOccurences(str1, str2);", "category": "Python"}, {"instruction": "Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer.", "input": "", "output": "def generateFib(n): \n    fib = [0, 1] \n    while len(fib) < n : \n        fib.append(fib[-1] + fib[-2]) \n          \n    return fib[:n]", "category": "Python"}, {"instruction": "Convert the Python code using the range function in the for loop to a list comprehension statement.", "input": "my_list = []\nfor i in range(10):\n    my_list.append(i)", "output": "my_list = [i for i in range(10)]", "category": "Python"}, {"instruction": "Create a MongoDB query to get the average salary for all employees.", "input": "", "output": "db.Employees.aggregate([\n    { \n    $group: { \n            _id: null, \n            average_salary: { \n                $avg: \"$salary\" \n            } \n        } \n    }\n])", "category": "Python"}, {"instruction": "Write an HTML program to create a simple page layout.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple Page Layout</title>\n</head>\n<body>\n  <div>Header Content</div>\n  <div>Body Content</div>\n  <div>Footer Content</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript code to print the characters of a string one by one in an alert message.", "input": "str = \"Hello World!\"", "output": "for (let i = 0; i < str.length; i++) {\n  alert(str.charAt(i));\n}", "category": "Python"}, {"instruction": "Write a REGEX pattern to match strings consisting of three numbers separated by a dash.", "input": "", "output": "^\\d{1,3}-\\d{1,3}-\\d{1,3}$", "category": "Python"}, {"instruction": "Write a function for finding the minimum value in a given array.", "input": "", "output": "def find_min(arr):\n    min_value = arr[0]\n    for element in arr:\n        if (element < min_value):\n            min_value = element\n    return min_value", "category": "Python"}, {"instruction": "Create a program for calculating the surface area of a cube.", "input": "", "output": "def cube_area(length):\n    # Surface area of a cube = 6* (length)^2 \n    return 6* (length**2)", "category": "Python"}, {"instruction": "Use Swift to print a welcome message in the console", "input": "", "output": "print(\"Welcome to Swift!\")", "category": "Python"}, {"instruction": "Write an SQL query to get the number of customers per country", "input": "Table Name: Customers\nColumns: Name, Country", "output": "SELECT Country, COUNT(*) AS NumberOfCustomers \nFROM Customers\nGROUP BY Country;", "category": "Python"}, {"instruction": "Design a CSS style to make an element a circle and have a red border", "input": "", "output": "#circle {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 1px solid red;\n}", "category": "Python"}, {"instruction": "Analyze the following code and suggest a modification", "input": "def hello():\n    print('Hello!')", "output": "# This code prints out \"Hello!\" when called.\n# A modification to include a parameter for a name would be as follows:\ndef hello(name):\n    print('Hello, ' + name + '!')", "category": "Python"}, {"instruction": "Modify the following python program to include a comment explaining the purpose of the code", "input": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "output": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "category": "Python"}, {"instruction": "Construct a C++ code snippet to output a Fibonacci sequence with a given number of elements", "input": "7", "output": "#include <iostream> \n\nusing namespace std; \n  \nint Fibonacci(int n) \n{ \n    if (n <= 1) \n        return n; \n    return Fibonacci(n - 1) + Fibonacci(n - 2); \n} \n\nint main () \n{ \n    int n;\n    cout<<\"Enter the number of elements: \";\n    cin>>n; \n    cout << \"Fibonacci sequence: \"; \n    for (int i = 0; i < n; i++) \n        cout << Fibonacci(i) <<\" \"; \n  \n    return 0; \n} ;", "category": "Python"}, {"instruction": "Write a Java program to replace all non-alphanumeric characters with underscores.", "input": "Hello, World!", "output": "public class ReplaceNonAlpha {\n \n  public static void main(String[] args) {\n \n    String string = \"Hello, World!\";\n \n    string = string.replaceAll(\"[^A-Za-z0-9]\", \"_\");\n    System.out.println(string);\n  }\n}", "category": "Python"}, {"instruction": "Modify the following JavaScript code to find all of the prime numbers from 1 to 100", "input": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}", "output": "for (let i = 1; i <= 100; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        console.log(i);\n    }\n}", "category": "Python"}, {"instruction": "Develop a for loop in Javascript to output integers from 0 to 10", "input": "", "output": "for (let i = 0; i < 11; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Create a database query that shows the average price of all items.", "input": "", "output": "SELECT AVG(price)\nFROM items;", "category": "Python"}, {"instruction": "Given the following array, delete all occurrences of the number 4.", "input": "list1 = [4, 3, 4, 2, 3, 4, 4]", "output": "list1 = [4, 3, 4, 2, 3, 4, 4]\n\ndef delete_four(arr):\n    \"\"\"This function deletes all occurrences of the number 4 in the given array\"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 4:\n            arr.pop(i)\n            i -= 1\n    return arr\n\nprint(delete_four(list1))", "category": "Python"}, {"instruction": "Create a function that takes an array and prints out the biggest number in it.", "input": "[1, 7, 2, 11, 4]", "output": "def find_max_num(nums_list):\n    \"\"\"This function takes an array and prints out the biggest number in it.\"\"\"\n    max_num = nums_list[0]\n    for num in nums_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnums_list = [1, 7, 2, 11, 4]\nprint(find_max_num(nums_list))", "category": "Python"}, {"instruction": "Create a Python program to calculate the square root of a number provided by the user.", "input": "", "output": "def square_root(number):\n    \"\"\"This program takes a number and calculates its square root.\"\"\"\n    return number**0.5\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The square root of \", num, \" is \", square_root(num))", "category": "Python"}, {"instruction": "Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers.", "input": "x = 12\ny = 24", "output": "def smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\n\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))", "category": "Python"}, {"instruction": "Create a method to convert a given number to Roman numeral format.", "input": "num = 2020", "output": "def int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n  return result\n\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))", "category": "Python"}, {"instruction": "Generate HTML code for a table that displays the result of multiplication for the numbers from 1 to 10.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>x</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n      <td>8</td>\n      <td>10</td>\n      <td>12</td>\n      <td>14</td>\n      <td>16</td>\n      <td>18</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n      <td>12</td>\n      <td>15</td>\n      <td>18</td>\n      <td>21</td>\n      <td>24</td>\n      <td>27</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>4</td>\n      <td>8</td>\n      <td>12</td>\n      <td>16</td>\n      <td>20</td>\n      <td>24</td>\n      <td>28</td>\n      <td>32</td>\n      <td>36</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>5</td>\n      <td>10</td>\n      <td>15</td>\n      <td>20</td>\n      <td>25</td>\n      <td>30</td>\n      <td>35</td>\n      <td>40</td>\n      <td>45</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n      <td>24</td>\n      <td>30</td>\n      <td>36</td>\n      <td>42</td>\n      <td>48</td>\n      <td>54</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>7</td>\n      <td>14</td>\n      <td>21</td>\n      <td>28</td>\n      <td>35</td>\n      <td>42</td>\n      <td>49</td>\n      <td>56</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>8</td>\n      <td>16</td>\n      <td>24</td>\n      <td>32</td>\n      <td>40</td>\n      <td>48</td>\n      <td>56</td>\n      <td>64</td>\n      <td>72</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>9</td>\n      <td>18</td>\n      <td>27</td>\n      <td>36</td>\n      <td>45</td>\n      <td>54</td>\n      <td>63</td>\n      <td>72</td>\n      <td>81</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>10</td>\n      <td>20</td>\n      <td>30</td>\n      <td>40</td>\n      <td>50</td>\n      <td>60</td>\n      <td>70</td>\n      <td>80</td>\n      <td>90</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Create a SQL query that selects the top three most recently purchased products.", "input": "Table Name: Purchases\nColumns: Product Name, Date", "output": "SELECT * FROM Purchases ORDER BY Date DESC LIMIT 3;", "category": "Python"}, {"instruction": "Construct an SQL query that returns the names of customers from the \"Customers\" table whose age is between 20 and 30.", "input": "", "output": "SELECT name FROM Customers WHERE age BETWEEN 20 and 30;", "category": "Python"}, {"instruction": "Provide a regular expression to find all the strings that starts with an alphabetical character followed by a sequence of letters, digits, and underscores.", "input": "", "output": "^[A-Za-z]+\\w*$", "category": "Python"}, {"instruction": "Create a function that processes an array to remove all the duplicated elements", "input": "[1, 1, 2, 5, 6, 6, 10]", "output": "def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]", "category": "Python"}, {"instruction": "Design a function to input an array and sort it using QuickSort algorithm.", "input": "", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Write a function to create a matrix NxN with values of 0 filled in.", "input": "", "output": "def generate_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append([0 for _ in range(n)])\n    return matrix", "category": "Python"}, {"instruction": "Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division.", "input": "", "output": "class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Create a SQL query that returns a list of cities in a given state.", "input": "state='New York'", "output": "SELECT City\nFROM List_of_Cities \nWHERE State='New York'", "category": "Python"}, {"instruction": "Generate an HTML page which contains the following elements: a heading, a paragraph, and a button.", "input": "", "output": "<html>\n    <head>\n        <title>My HTML Page</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n        <p>This is a simple HTML page created using code.</p>\n        <button>Click Me!</button>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Construct a HTML form to collect the name , age and gender of the user.", "input": "", "output": "<form>\n    <label>Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label>Age:</label><br>\n    <input type=\"text\" name=\"age\"><br>\n    <label>Gender:</label><br>\n    <select name=\"gender\">\n        <option value=\"male\">Male</option>\n        <option value=\"female\">Female</option>\n        <option value=\"other\">Other</option>\n    </select><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Design a C++ program to convert a given number from binary to decimal.", "input": "<<noinput>>", "output": "#include<iostream>\n#include<math.h>\n\nint BinToDec(long long n) \n{ \n    int decimalNumber = 0, i = 0, remainder; \n    while (n!=0) \n    { \n        remainder = n % 10; \n        n /= 10; \n        decimalNumber += remainder*pow(2,i); \n        ++i; \n    } \n    return decimalNumber; \n}\n\nint main()\n{\n    long long bNum;\n    std::cout << \"Enter a binary number: \";\n    std::cin >> bNum;\n    int dec = BinToDec(bNum);\n    std::cout << \"Decimal Representation of \" << bNum << \" is \" << dec << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a function to take a list of strings and return true if any element in the list starts with the letter \"t\"", "input": "['dog', 'turtle', 'car', 'cat']", "output": "true", "category": "Python"}, {"instruction": "Develop a SQL query to delete all entries with discount greater than 10 in the \"products\" table.", "input": "", "output": "DELETE FROM products WHERE discount > 10;", "category": "Python"}, {"instruction": "Devise a Python code snippet to return the last character of a given string.", "input": "string = \"stackoverflow\"", "output": "last_char = string[-1]\nprint(last_char)", "category": "Python"}, {"instruction": "Modify the given JavaScript code to display \"Hello World\" using alert.", "input": "let message = 'Hi';\nalert(message);", "output": "let message = 'Hello World';\nalert(message);", "category": "Python"}, {"instruction": "Construct an SQL query to list the names of people who live in the \"Sacramento\" city.", "input": "", "output": "SELECT name FROM people WHERE city=\"Sacramento\";", "category": "Python"}, {"instruction": "Generate a Python code snippet to print the list of numbers from 0 to 9.", "input": "", "output": "for i in range(0,10):\n    print(i)", "category": "Python"}, {"instruction": "Create a SQL table called \"products\" to store information about products.", "input": "", "output": "CREATE TABLE products (\n    id INTEGER PRIMARY KEY,\n    name TEXT, \n    description TEXT,\n    price DECIMAL(10,2)\n);", "category": "Python"}, {"instruction": "Write a SQL query to select customers who have an email address ending with \".com\".", "input": "", "output": "SELECT *\nFROM customers\nWHERE email LIKE '%.com'", "category": "Python"}, {"instruction": "Create a pandas dataframe to display the given data as a table.", "input": "Name     Age     City\nAlice    25      London\nBob      32      Tokyo", "output": "import pandas as pd\n\ndata = [\n {'Name': 'Alice', 'Age': 25, 'City': 'London' },\n {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }\n ]\n\ndata_frame = pd.DataFrame(data)\nprint(data_frame)\n\nOutput:\nName  Age     City\n0  Alice    25    London\n1    Bob    32     Tokyo", "category": "Python"}, {"instruction": "Construct an HTML form to collect the name, address and phone number of a user.", "input": "", "output": "<form>\n    <label>Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label>Address:</label><br>\n    <input type=\"text\" name=\"address\"><br>\n    <label>Phone number:</label><br>\n    <input type=\"text\" name=\"phone\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Sum up all the values in a 2D list.", "input": "list = [[1,2,3],[4,5,6],[7,8,9]]", "output": "\"\"\"\nSum up all the values in a 2D list.\n\"\"\"\n\ndef sum_2d_list(list_2d):\n    sum = 0\n    for l in list_2d:\n        for n in l:\n            sum += n\n    return sum\n\nif __name__ == '__main__':\n    list_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sum_2d_list(list_2d))", "category": "Python"}, {"instruction": "Develop a valid C code to print the array elements.", "input": "int arr[] = {1,2,3,4,5}", "output": "#include <stdio.h>\n\nint main()\n{\n    int arr[] = {1,2,3,4,5};\n    int size = sizeof(arr)/sizeof(arr[0]);\n\n    for (int i = 0; i < size; i++) { \n        printf(\"%d\\n\", arr[i]); \n    } \n\n    return 0;\n}", "category": "Python"}, {"instruction": "How would you edit the following HTML code so that it displays content in two columns?", "input": "<div>\n  <p>This is the content</p>\n</div>", "output": "<div>\n  <div style=\"float: left; width: 50%;\">\n    <p>This is the content 1</p>\n  </div>\n  <div style=\"float: right; width: 50%;\">\n    <p>This is the content 2</p>\n  </div>\n</div>", "category": "Python"}, {"instruction": "How do you set a variable to a constant in C#?", "input": "", "output": "In C#, variables can be set to a constant by using the keyword 'const' before the variable declaration. The constant cannot be changed or reassigned once it is declared. Example: const int a = 5;", "category": "Python"}, {"instruction": "Generate a regex to validate the following format of email address: name@domain.extension", "input": "", "output": "^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$", "category": "Python"}, {"instruction": "Write an SQL query to rank the products by their sales.", "input": "", "output": "SELECT product_name, sales,\n  RANK() OVER (ORDER BY sales DESC) AS rank\nFROM products;", "category": "Python"}, {"instruction": "Come up with a Scala code snippet to print the powers of 2.", "input": "", "output": "(0 to 8).foreach( x => {\n    println(Math.pow(2,x))\n  }\n)", "category": "Python"}, {"instruction": "Construct a regex expression to match strings of the form \"123-456\".", "input": "", "output": "^[0-9]{3}-[0-9]{3}$", "category": "Python"}, {"instruction": "Make a bash script to read two user input numbers and print their average.", "input": "", "output": "#!/bin/bash\necho \"Please enter two numbers:\"\nread num1\nread num2\n\nsum=$((num1 + num2))\necho \"The average of the two numbers is: $(($sum / 2))\"", "category": "Python"}, {"instruction": "Update the following HTML page so that it refreshes the page every 5 seconds.", "input": "<html>\n <head>\n  <title>My Webpage</title>\n </head>\n <body>\n  Hello World!\n </body>\n</html>", "output": "<html>\n <head>\n  <title>My Webpage</title>\n  <meta http-equiv=\"refresh\" content=\"5\">\n </head>\n <body>\n  Hello World!\n </body>\n</html>", "category": "Python"}, {"instruction": "Design the structure of a database for a hotel booking system.", "input": "", "output": "Table 1: Customers\n- customer_id\n- first_name\n- last_name\n- email\n\nTable 2: Rooms\n- room_id\n- room_type\n- beds\n- rate\n\nTable 3: Bookings\n- booking_id\n- customer_id\n- room_id\n- check_in_date\n- check_out_date\n- price\n\nTable 4: Payments\n- payment_id\n- booking_id\n- payment_type\n- price\n\nTable 5: Reviews\n- review_id\n- booking_id\n- rating\n- comment", "category": "Python"}, {"instruction": "Perform sentiment analysis on the given text using NLTK library in Python.", "input": "The food here is amazing.", "output": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food here is amazing!\"]\n\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    ss = sid.polarity_scores(sentence)\n    print(\"for sentence: {}, sentiment analysis: {}\".format(sentence, ss))\n\n# Output\n# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}", "category": "Python"}, {"instruction": "Deploy the following ML model on the Cloud.", "input": "", "output": "1. Prepare the model:\n- Download, install and configure Cloud platform with the required SDKs.\n- Upload the ML model on the Cloud.\n- Perform necessary pre-processing steps.\n\n2. Deploy the model:\n- Use a deployment framework to deploy the model on the Cloud. \n- containerize the model using Docker. \n- provide appropriate access for the model for it to be queried.\n\n3. Test the model:\n- Run test cases for the model and assess the accuracy and performance of the model.\n- Set up a monitoring system for the model.", "category": "Python"}, {"instruction": "Fix the code by making changes with the appropriate syntax.", "input": "def add_two_numbers(a, b)\n\treturn a + b", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Convert this SQL statement into a LINQ query.", "input": "SELECT * FROM Products \nWHERE Price > 100", "output": "var result = from Product in Products\n            where Product.Price > 100\n            select Product;", "category": "Python"}, {"instruction": "Create a web page using HTML and CSS which displays a user interface for a calculator.", "input": "", "output": "<html>\n    <head>\n        <title>Calculator Webpage</title>\n    </head>\n    <body>\n        <h1>Calculator</h1>\n        <div class=\"container\">\n            <div class=\"display\">\n                <p>0</p>\n            </div>\n            <div class=\"keypad\">\n                <div class=\"number-pad\">\n                    <button type=\"button\">7</button>\n                    <button type=\"button\">8</button>\n                    <button type=\"button\">9</button>\n                    <button type=\"button\">4</button>\n                    <button type=\"button\">5</button>\n                    <button type=\"button\">6</button>\n                    <button type=\"button\">1</button>\n                    <button type=\"button\">2</button>\n                    <button type=\"button\">3</button>\n                    <button type=\"button\">0</button>\n                </div>\n                <div class=\"operator-pad\">\n                    <button type=\"button\" class=\"operator\">/</button>\n                    <button type=\"button\" class=\"operator\">*</button>\n                    <button type=\"button\" class=\"operator\">+</button>\n                    <button type=\"button\" class=\"operator\">-</button>\n                    <button type=\"button\" class=\"operator\">=</button>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Check this code and add an if statement to print out \u201ceven\u201d if the number is divisible by 2 and \u201codd\u201d if not.", "input": "for n in range (1,10):\n\tprint(n)", "output": "for n in range (1, 10):\n    if n % 2 == 0:\n        print(n, \"even\")\n    else:\n        print(n, \"odd\")", "category": "Python"}, {"instruction": "Write an SQL query to find all students with grades higher than a given threshold.", "input": "Threshold = 75", "output": "SELECT * FROM Students \nWHERE Grades > 75;", "category": "Python"}, {"instruction": "Write a Node.js program to accept a user input and print it in the console.", "input": "", "output": "const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n  \nrl.question('Please enter your input: ', (answer) => {\n  console.log(`You entered: ${answer}`);\n  rl.close();\n});", "category": "Python"}, {"instruction": "Create a Python dictionary which contains the student name and their grade for the course.", "input": "{\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "output": "student_grades = {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "category": "Python"}, {"instruction": "Write a MySQL query to select all the records in a table having the same ID.", "input": "Table name: \"customers\"", "output": "SELECT * FROM customers WHERE id = 'ID';", "category": "Python"}, {"instruction": "Using SQL, write a query to get the last three rows from a table.", "input": "Table name: \"customer\"", "output": "SELECT * FROM customer ORDER BY id DESC LIMIT 3;", "category": "Python"}, {"instruction": "Override the \"toString\" method for a given class in Java.", "input": "", "output": "public class MyClass {\n  public String toString() {\n    return \"MyClass Object\";\n  }\n}", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.", "input": "[5, 2, 4, 7, 15]", "output": "def maxDifference(arr):\n  # Initialize max difference\n  max_difference = 0\n\n  # Traverse the array\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):\n      # Find the difference between two elements\n      diff = arr[j] - arr[i]\n\n      # Check if the difference is the maximum\n      if diff > max_difference:\n        max_difference = diff\n\n  return max_difference\n\n# Output\nmaxDifference([5, 2, 4, 7, 15]) # 13", "category": "Python"}, {"instruction": "Analyse a given JSON object and list all the keys with their values.", "input": "{\n  \"name\":\"John\",\n  \"age\":30,\n  \"cars\": {\n    \"car1\":\"Ford\",\n    \"car2\":\"BMW\",\n    \"car3\":\"Fiat\"\n  }\n}", "output": "name: John\nage: 30\ncar1: Ford\ncar2: BMW\ncar3: Fiat", "category": "Python"}, {"instruction": "Identify the type of output for the given C++ statement.", "input": "cout<<\"Hello World\";", "output": "String output.", "category": "Python"}, {"instruction": "Explain the purpose of a web browser.", "input": "", "output": "A web browser is a software application used to retrieve, render and traverse information on the World Wide Web. It uses Hypertext Transfer Protocol (HTTP) to request pages from from web servers, receive them, and display them in an organised way on our device. It also provides tools to allow users to traverse the web and access content such as email, videos, music, social networks, etc.", "category": "Python"}, {"instruction": "Edit this code so it can classify whether a number is even or odd.", "input": "def classify_number(num):", "output": "def classify_number(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Write a Python function to compare two lists and return the elements that are in both of them.", "input": "list1 = [3, 5, 7, 8]\nlist2 = [3, 5, 10, 12]", "output": "def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]", "category": "Python"}, {"instruction": "Create a function in R to generate a random number between the given range.", "input": "", "output": "random_number <- function(min, max) {\n   return(runif(1, min=min, max=max))\n}", "category": "Python"}, {"instruction": "Write a function to convert a Roman numeral to an integer.", "input": "", "output": "def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num", "category": "Python"}, {"instruction": "Write a SQL query to create a table with 5 columns and names 'id', 'name', 'age', 'gender' and 'email'.", "input": "", "output": "CREATE TABLE tablename (\n id INT, \n name VARCHAR(250), \n age INT, \n gender VARCHAR(50), \n email VARCHAR(200)\n);", "category": "Python"}, {"instruction": "Modify the 'Bike' class so that when instances are created they are assigned a unique ID.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Create a class for a bike which has a color, make and description as attributes.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n def __init__(self, color, make, description): \n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  # make sure that firstname and lastname are provided when creating a new instance\n  if (firstname == \"\" or lastname == \"\"): \n   raise ValueError(\"firstname and lastname can't be empty\")\n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Create a Python class with the following attributes: firstname, lastname and address.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Find the smallest missing positive number in an array.", "input": "[-2, 0, 1, 3]", "output": "# Find the smallest missing positive number\ndef smallest_positive(arr): \n s = set(arr) \n i = 1 \n while i in s: \n i += 1\n return i\n\narr = [-2, 0, 1, 3] \nsmallest = smallest_positive(arr)\nprint(smallest) # 2", "category": "Python"}, {"instruction": "Create a function which takes an array and removes all duplicates using a set.", "input": "[1, 2, 3, 3, 4, 4, 5]", "output": "# Create a function which takes an array and removes all duplicates using a set\n\ndef remove_duplicates(arr): \n return list(set(arr)) \n\narr = [1, 2, 3, 3, 4, 4, 5] \nnew_arr = remove_duplicates(arr) \nprint(new_arr) # [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a Python program to find all the factors of an integer.", "input": "number = 16", "output": "def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors", "category": "Python"}, {"instruction": "Write a function that takes a list of words and detects if they are anagrams.", "input": "a_list=[\"potato\",\"tomato\"]", "output": "def is_anagram(a_list):\n    \n    l1 = [''.join(sorted(word)) for word in a_list[0]]\n    l2 = [''.join(sorted(word)) for word in a_list[1]]\n    return l1 == l2", "category": "Python"}, {"instruction": "Parse a user input in the following format and print it out.", "input": "x - 10, y - 20", "output": "int x = 10;\nint y = 20;\nSystem.out.println(\"x = \" + x + \" y = \" + y);", "category": "Python"}, {"instruction": "Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12].", "input": "", "output": "#Function to print out the common elements of two lists\ndef commonElements(l1, l2):\n    result = [value for value in l1 if value in l2]\n    return result\n\n# Lists to compare\nlist1 = [2, 4, 6, 8] \nlist2 = [3, 6, 9, 12] \n\n# Output  \nprint(commonElements(list1, list2)) \n\n# Output: [6]", "category": "Python"}, {"instruction": "What is the complexity class of the below Python code snippet for adding an item to a list?", "input": "list = [1, 2, 3]\nlist.append(4)", "output": "The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity.", "category": "Python"}, {"instruction": "Write an XML tag which will display a hyperlink.", "input": "https://www.example.com, Example", "output": "<a href=\"https://www.example.com\">Example</a>", "category": "Python"}, {"instruction": "Write a code in PHP for finding the longest word in a string.", "input": "This is a test string", "output": "function longest_word($string){ \n    $words = explode(\" \", $string); \n    $longestword = 0;\n\n    foreach ($words as $word) { \n        if (strlen($word) > $longestword) { \n            $longestword = strlen($word); \n            $longest_word = $word; \n        } \n    } \n    return $longest_word; \n} \necho longest_word(\"This is a test string\");", "category": "Python"}, {"instruction": "Write a Class in Java that represents a student.", "input": "", "output": "public class Student {\n  private String firstName;\n  private String lastName;\n  private int studentId;\n\n  public Student(String firstName, String lastName, int studentId) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.studentId = studentId;\n  }\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  public int getStudentId() {\n    return studentId;\n  }\n}", "category": "Python"}, {"instruction": "Edit a JSON object so that it stores information about a person in a defined format.", "input": "{\n  name: John\n}", "output": "{ \n  \"name\": \"John\", \n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"zip\": \"\"\n  }, \n  \"phone\": \"\"\n}", "category": "Python"}, {"instruction": "Write a code in Python that returns an inversion of a given string.", "input": "tea", "output": "def reverseStr(s): \n    return s[::-1] \n  \ns = \"tea\"\nprint(reverseStr(s))", "category": "Python"}, {"instruction": "Write a HTML tag that creates a hyperlink to a given URL.", "input": "https://www.example.com", "output": "<a href=\"https://www.example.com\">[Link text]</a>", "category": "Python"}, {"instruction": "Write a selector in CSS that selects div elements which are inside a main section.", "input": "", "output": "main > div {\n  [select style code]\n}", "category": "Python"}, {"instruction": "Write a function in JavaScript that counts the number of characters in a sentence.", "input": "The quick brown fox", "output": "function characterCounter(str) {\n return str.length;\n}", "category": "Python"}, {"instruction": "Create an array in Python that contains numbers from 1 to 5.", "input": "", "output": "my_array = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Solve the following programming puzzle using Python.", "input": "A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?", "output": "def closest_cutting_distance(total_rope_length):\n    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''\n    if total_rope_length <= 10:\n        return total_rope_length\n    else:\n        return total_rope_length - 10", "category": "Python"}, {"instruction": "Create a new dictionary that contains the intersection between the following two dictionaries.", "input": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}", "output": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}\nd3 = { k:v for k,v in d1.items() if k in d2.keys() }", "category": "Python"}, {"instruction": "Create a function that will calculate the cumulative sum of a list.", "input": "[1, 2, 3, 4, 5]", "output": "def cumulative_sum(lst):\n    '''This function will calculate the cumulative sum of a list.'''\n    result = []\n    s = 0\n    for item in lst:\n        s += item\n        result.append(s)\n    return result", "category": "Python"}, {"instruction": "Create a function that will return the total number of specific items in a list.", "input": "[1, 1, 2, 3, 3, 3]", "output": "def count_items(lst, item):\n    '''This function will return the total number of specific items in a list.'''\n    return len([x for x in lst if x == item])", "category": "Python"}, {"instruction": "Sort the following dictionary objects by the value of the \"age\" field.", "input": "[{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]", "output": "lst = [{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]\nlst.sort(key = lambda k: k['age'])", "category": "Python"}, {"instruction": "Define a JavaScript class called Person that has a constructor for setting the name of the person.", "input": "", "output": "class Person {\n   constructor(name) {\n      this.name = name\n   }\n}", "category": "Python"}, {"instruction": "What is the output of the following Ruby code?\narr = [2, 3, 4]\nsum = 0\narr.each{|x| sum += x }", "input": "", "output": "The output is that the value of sum is 9.", "category": "Python"}, {"instruction": "What is the output of the following Java code?\nint x = 7;\nint y = 3;\nint z = x % y;", "input": "", "output": "The output is that the value of z is 1.", "category": "Python"}, {"instruction": "How would you convert the following JavaScript object to a JSON string?", "input": "let myObj = {\n   name: \"John Doe\",\n   age: 32\n};", "output": "let  myJSON  =  JSON.stringify(myObj);", "category": "Python"}, {"instruction": "Design a C++ class to represent a student's information such as name, student ID, and grade.", "input": "", "output": "class Student {\nprivate:\n    string name;\n    int studentID;\n    int grade;\n\npublic:\n    Student();\n    Student(string name, int studentID, int grade);\n    void setName(string name);\n    string getName();\n    void setStudentID(int studentID);\n    int getStudentID();\n    void setGrade(int grade);\n    int getGrade();\n};", "category": "Python"}, {"instruction": "Write a Python code to calculate the total price of a given list of items including taxes.", "input": "items = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5", "output": "#Calculate total price of a given list of items including taxes\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\n\ntotal_price = 0\n\nfor item in items:\n  total_price += item['price']\n\ntotal_price = total_price + (total_price * (tax_rate/100))\n\nprint(total_price)", "category": "Python"}, {"instruction": "Create a Ruby script to return the nth Fibonacci number.", "input": "", "output": "# Function to return the nth Fibonacci number \ndef calculateFibonacci(num) \n  if num < 0 \n    return 'Incorrect input'\n  elsif num == 0 \n    return 0 \n  elsif num == 1 \n    return 1 \n  end\n  #Recursive Function \n  return calculateFibonacci(num - 1) +  calculateFibonacci(num - 2) \nend \n  \n# Driver Program \nputs calculateFibonacci(7)", "category": "Python"}, {"instruction": "Write the SQL query to find the product name, prices, ratings of all products with rating greater than 4 and prices lesser than 10.", "input": "", "output": "SELECT product_name, price, rating\nFROM product_table \nWHERE rating > 4 AND price < 10;", "category": "Python"}, {"instruction": "Given the following code in C, modify it to increment `num` by 1.", "input": "int num = 0;", "output": "int num = 0;\nnum++;", "category": "Python"}, {"instruction": "In JavaScript, write a function to calculate the nth term in the Fibonacci series.", "input": "", "output": "function fibonacci(n){\n if (n <= 1) \n  return n;\n return fibonacci(n - 1) + fibonacci(n - 2);\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the records with the maximum value in a given table.", "input": "", "output": "SELECT *\nFROM table\nORDER BY column DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Modify the code to make sure it is valid according to Java language specification.", "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "category": "Python"}, {"instruction": "Using PHP, write a program to generate a string containing the nth Fibonacci number.", "input": "", "output": "function Fibonacci($n)\n{\n    if ($n == 0)\n        return '0';\n    else if ($n == 1)\n        return '1';\n    else\n    {\n        $fibonaccinumbers[0] = 0;\n        $fibonaccinumbers[1] = 1;\n        for ($i = 2; $i <= $n; $i++)\n        {\n            $fibonaccinumbers[$i] = $fibonaccinumbers[$i - 1] +\n                                    $fibonaccinumbers[$i - 2];\n        }\n\n        return $fibonaccinumbers[$n];\n    }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to find all records containing the word 'hello' in the 'messages' table.", "input": "Table: messages \n\nID | Message\n\n1.  hello world\n2.  hey there\n3.  goodbye\n4.  hello again", "output": "SELECT * FROM messages WHERE Message LIKE '%hello%';", "category": "Python"}, {"instruction": "Write a JavaScript method that takes an array of numbers and checks if all values in the array are the same.", "input": "[2,2,2,2]", "output": "function allValuesSame(arr) {\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] !== arr[0])\n      return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Write a PHP code snippet to create an array containing the numbers from 1 to 100.", "input": "", "output": "$arr = range(1, 100);", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to concatenate the given strings: \"Hello\" and \"World!\"", "input": "", "output": "var string1 = \"Hello\";\nvar string2 = \"World!\";\n\nconsole.log(string1 + ' ' + string2); // Hello World!", "category": "Python"}, {"instruction": "Implement quick sort in Java.", "input": "", "output": "public static void quickSort(int[] arr, int low, int high) {\n    if (arr == null || arr.length == 0)\n        return;\n \n    if (low >= high)\n        return;\n \n    // pick the pivot\n    int middle = low + (high - low) / 2;\n    int pivot = arr[middle];\n \n    // make left < pivot and right > pivot\n    int i = low, j = high;\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n \n        while (arr[j] > pivot) {\n            j--;\n        }\n \n        if (i <= j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n    }\n \n    // recursively sort two sub parts\n    if (low < j)\n        quickSort(arr, low, j);\n \n    if (high > i)\n        quickSort(arr, i, high);\n}", "category": "Python"}, {"instruction": "Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_values(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)", "category": "Python"}, {"instruction": "What is the data type of the following variable in JavaScript?\nlet myNumber = 10", "input": "", "output": "The data type of the variable myNumber is a number.", "category": "Python"}, {"instruction": "In Java, write a program that finds the sum of two linked lists representing integers.", "input": "", "output": "public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) \n            p = p.next;\n        if (q != null) \n            q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}", "category": "Python"}, {"instruction": "Format the following list of numbers as strings, with 3 decimal places.", "input": "[123.4567, 678.9012, 789.3456]", "output": "lst = [123.4567, 678.9012, 789.3456]\nlst = [format(num, '.3f') for num in lst]", "category": "Python"}, {"instruction": "Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists.", "input": "list1=[1,2,3,4]\nlist2=[3,4,5,6]", "output": "def unique_from_two_lists(list1,list2):\n  return list(set(list1 + list2))", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and flattens it into an one-dimensional array.", "input": "", "output": "def flatten(arr):\n    return [item for row in arr for item in row]", "category": "Python"}, {"instruction": "Create a function that takes a string and converts the string to CamelCase.", "input": "string = \"this_is_a_string\"", "output": "def toCamelCase(string):\n    s = string.split('_')\n    return s[0] + ''.join(x.title() for x in s[1:])", "category": "Python"}, {"instruction": "Write a Python program to sort a list of tuples using Lambda.", "input": "list = [(3, 4), (5, 1), (2, 0)]", "output": "sorted_list = sorted(list, key=lambda x: x[1])", "category": "Python"}, {"instruction": "Describe the purpose of using an Array in programming.", "input": "", "output": "An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists.", "category": "Python"}, {"instruction": "Write a regular expression that extracts all numbers from the given text.", "input": "Text:  \"The total number of students is 50 and the average score is 78 out of 100.\"", "output": "\\d+", "category": "Python"}, {"instruction": "Explain how a computer can generate pseudo-random numbers.", "input": "", "output": "A computer can generate pseudo-random numbers by using an algorithm to generate a sequence of numbers that appear to be random. This algorithm uses an initial seed value, typically an input string or value derived from the computer's internal clock, which is then used to generate a sequence of numbers. The resulting sequence will appear to be random to the user, even though it is always the same. Some common methods of generating pseudo-random numbers include the use of linear congruential generators, which use a linear equation to generate a sequence of numbers; the use of a Blum Blum Shub algorithm, which uses the cycle of two large prime numbers to generate a sequence of numbers; or the use of a Mersenne Twister algorithm, which uses a fixed-point representation of a number to generate a sequence of numbers.", "category": "Python"}, {"instruction": "Rewrite the following Python code without using the 'list comprehension' syntax.", "input": "[x * x for x in range(5)]", "output": "list_result = []\nfor x in range(5):\n    list_result.append(x*x)", "category": "Python"}, {"instruction": "Create a database table to store real estate records.", "input": "", "output": "CREATE TABLE real_estate_records(\n     id INT NOT NULL AUTO_INCREMENT, \n     name VARCHAR(50), \n     address VARCHAR(250), \n     bedrooms INT, \n     bathrooms INT, \n     price DECIMAL(10,2), \n     area INT,\n     PRIMARY KEY(id)\n);", "category": "Python"}, {"instruction": "Write a JavaScript function that checks if the given string contains any vowels.", "input": "String: \"Hello\"", "output": "function containsVowel(str) {\n return /[aeiou]/i.test(str);\n}", "category": "Python"}, {"instruction": "Design an algorithm that computes the Fibonacci numbers.", "input": "", "output": "A Fibonacci algorithm can be written using a simple recursive function:\n\nint fibonacci(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}", "category": "Python"}, {"instruction": "Write an R code to return the first 10 rows of a data frame.", "input": "states-data.csv", "output": "# Load the data\nstates_data <- read.csv(\"states-data.csv\")\n\n# Get the first 10 rows\nhead(states_data, 10)", "category": "Python"}, {"instruction": "Write an R code to find the length of the longest string in an array.", "input": "strings = c('this', 'is', 'a', 'test')", "output": "strings <- c('this', 'is', 'a', 'test')\n\nlongest <- max(nchar(strings))\n\ncat('The longest string length is: ', longest) ## Output: The longest string length is: 4", "category": "Python"}, {"instruction": "Write a MATLAB code to find the maximum value for an array of 10 elements.", "input": "A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "output": "max_val = max(A);\nfprintf('Max value is %d\\n', max_val);", "category": "Python"}, {"instruction": "Write a JavaScript code to sort a list of strings in alphabetical order.", "input": "words = ['car', 'apple', 'tree', 'book', 'cat']", "output": "let sortedWords = words.sort(); \nconsole.log(sortedWords); // ['apple', 'book', 'car', 'cat', 'tree']", "category": "Python"}, {"instruction": "Write an SQL query to create a table with name \u2018Users\u2019 and three columns: firstname, lastname, email.", "input": "", "output": "CREATE TABLE Users (\n  firstname VARCHAR(200) NOT NULL,\n  lastname VARCHAR(200) NOT NULL,\n  email VARCHAR(200) NOT NULL\n);", "category": "Python"}, {"instruction": "Write a loop in Python for printing all even numbers between 1 and 10.", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Update the Java code to check the condition that the value of \"amount\" is greater than 1000 or not.", "input": "public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble amount = 1100;\n\t\t// TODO\n\t\tSystem.out.println(\"The amount is greater than 1000: \"+ amount);\n\t}\n}", "output": "public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble amount = 1100;\n\t\tif (amount > 1000) {\n\t\t\tSystem.out.println(\"The amount is greater than 1000: \"+ amount);\n\t\t}\n\t}\n}", "category": "Python"}, {"instruction": "Using the code provided, create an algorithm in Python to print the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11): \n    print(i)", "category": "Python"}, {"instruction": "Modify the program to make sure that only integers are accepted as input.", "input": "name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)", "output": "name = input(\"Enter your name: \")\ntry:\n    name = int(name)\n    print(\"Hello, \" + str(name))\nexcept ValueError:\n    print(\"Error: That was not an integer.\")", "category": "Python"}, {"instruction": "Using the code provided, modify the program to output \"I like cats\" instead of \"I love cats\".", "input": "print(\"I love cats\")", "output": "print(\"I like cats\")", "category": "Python"}, {"instruction": "Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty.", "input": "", "output": "\"\"\"\nCreate a class named 'Stack' with the following methods: push, pop, peek, isEmpty.\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    \n    def isEmpty(self):\n        return self.items == []", "category": "Python"}, {"instruction": "Determine whether a given string is a palindrome using stack data structure.", "input": "string = \"racecar\"", "output": "\"\"\"\nDetermine whether a given string is a palindrome using stack data structure.\n\"\"\"\n\ndef is_palindrome(string):\n    # reverse the string\n    stack = []\n    for char in string:\n        stack.append(char)\n\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n\n    # compare reversed string with original string\n    if rev_string == string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Describe the advantages and disadvantages of using recursion.", "input": "", "output": "Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases.", "category": "Python"}, {"instruction": "Count the number of occurrences of a given number in a list of numbers.", "input": "numbers = [1,1,2,3,4,4,4,5]\nnumber = 4", "output": "\"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\n\nprint(count_occurrences(numbers, number))", "category": "Python"}, {"instruction": "Select all customers from the customer_table with age greater than 25 and their zip codes within a given range.", "input": "customer_table = [['Eliza', 22, 48001], ['John', 26, 48034], ['Michael', 50, 48323]]\nzipcode_range = (48000, 48200)", "output": "\"\"\"\nSelect all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\"\"\"\n\n#select customers\ncustomers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\n\nprint(customers)", "category": "Python"}, {"instruction": "Explain why a stack can be used to reverse a string?", "input": "", "output": "A stack can be used to reverse a string because it follows the Last In First Out (LIFO) principle. This means that the last item to be added in the stack will be the first item to be removed. So when a string is pushed onto the stack, the characters will be stored in reverse order - the last character to be pushed will be the first character to be popped. By popping the characters one at a time, we can reverse the string.", "category": "Python"}, {"instruction": "Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.", "input": "", "output": "\"\"\"\nGenerate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.\n\"\"\"\n\nimport random\n\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n    return password\n    \nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Write an if else statement in Python for checking if a given number is positive or negative.", "input": "", "output": "if x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")", "category": "Python"}, {"instruction": "Create a cURL request for getting the response from an API endpoint.", "input": "", "output": "$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n    CURLOPT_URL => \"https://api.example.com/endpoint\",\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 0,\n    CURLOPT_FOLLOWLOCATION => true,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;", "category": "Python"}, {"instruction": "Create a ruby method for finding the frequency of an element in an array.", "input": "array = [2, 3, 4, 3, 2, 5, 2]", "output": "def frequency(array)\n    frequency_hash = Hash.new(0)\n    array.each { |num| frequency_hash[num] += 1 }\n    frequency_hash\nend\n\nputs frequency(array) // {2=>3, 3=>2, 4=>1, 5=>1}", "category": "Python"}, {"instruction": "Write an SQL query for finding the minimum and maximum values of a column.", "input": "", "output": "SELECT MIN(column_name), MAX(column_name) \nFROM table_name;", "category": "Python"}, {"instruction": "Create a JavaScript function for getting the unique elements in an array.", "input": "const arr = [3, 1, 4, 3, 2, 5]", "output": "const getUniqueElements = array => {\n    const uniqueElements = [...new Set(array)];\n    return uniqueElements;\n}\n\nconsole.log(getUniqueElements(arr)); // [3, 1, 4, 2, 5]", "category": "Python"}, {"instruction": "Create a CSS class for displaying content in the center of a page.", "input": "", "output": ".center-content {\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}", "category": "Python"}, {"instruction": "How do you insert a given element in a balanced AVL tree?", "input": "", "output": "The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken:\n\n1. Start by searching the tree to see if the node to be inserted already exists in the tree.\n2. If the node does not exist, insert it in the same fashion as in a binary search tree.\n3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal.\n4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached.\n5. Once all nodes that need to be balanced have been updated, the insertion is complete.", "category": "Python"}, {"instruction": "Create a PHP script to print the numbers 1 to 10.", "input": "", "output": "<?php\nfor ($i = 1; $i <= 10; $i++) {\n    echo $i . \"<br>\";\n}\n?>", "category": "Python"}, {"instruction": "Using the HTML code provided, add a meta tag to the \"head\" element.", "input": "<head>\n    <title>My Page</title>\n</head>", "output": "<head>\n    <title>My Page</title>\n    <meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\">\n</head>", "category": "Python"}, {"instruction": "Write a PHP function for counting the number of words in a string.", "input": "$str = 'Hello World!'", "output": "function wordCount($str) {\n    $stringArray = explode(' ', $str);\n    return count($stringArray);\n}\n\necho wordCount($str); // 2", "category": "Python"}, {"instruction": "Create a Python program to analyze a given list of URL requests and count the number of unique requests.", "input": "", "output": "def count_unique_requests(url_list):\n    return len(set(url_list))", "category": "Python"}, {"instruction": "How to use the reduce function in Python for computing the sum of elements in a list?", "input": "", "output": "from functools import reduce\n\ndef my_sum(list):\n  return reduce((lambda x, y: x + y), list)", "category": "Python"}, {"instruction": "Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nprint(*arr, sep=\", \") // 1, 2, 3, 4", "category": "Python"}, {"instruction": "Create an HTML table with the given list of student's marks.", "input": "StudentMarks=[34, 78, 63, 57, 92]", "output": "<table>\n  <tr>\n    <th>Student</th>\n    <th>Marks</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>34</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>78</td>\n  </tr>\n  <tr>\n    <td>3</td>\n    <td>63</td>\n  </tr>\n  <tr>\n    <td>4</td>\n    <td>57</td>\n  </tr>\n  <tr>\n    <td>5</td>\n    <td>92</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a function in Swift for generating random numbers within a given range.", "input": "Min=1, Max=20", "output": "func randomNumberInRange(min: Int, max: Int) -> Int {\n    return Int.random(in: min...max)\n}", "category": "Python"}, {"instruction": "Create a PHP script for performing basic calculations such as addition, subtraction, multiplication and division.", "input": "", "output": "<?php\nfunction calculate($op, $a, $b) {\n    switch($op) {\n        case '+':\n            return $a + $b;\n        case '-':\n            return $a - $b;\n        case '*':\n            return $a * $b;\n        case '/':\n            return $a / $b;\n    }\n}\n?>", "category": "Python"}, {"instruction": "Construct an SQL query for finding the average salary of employees from a given department.", "input": "Department='Information Technology'", "output": "SELECT AVG(salary) \nFROM employees \nWHERE department = 'Information Technology';", "category": "Python"}, {"instruction": "Create a HTML select element with the given list of countries as options.", "input": "CountryList = ['India','United States','Canada','Australia','New Zealand','Singapore','Japan']", "output": "<select>\n  <option value=\"India\">India</option>\n  <option value=\"United States\">United States</option>\n  <option value=\"Canada\">Canada</option>\n  <option value=\"Australia\">Australia</option>\n  <option value=\"New Zealand\">New Zealand</option>\n  <option value=\"Singapore\">Singapore</option>\n  <option value=\"Japan\">Japan</option>\n</select>", "category": "Python"}, {"instruction": "Write a JavaScript function for finding the biggest element in an array.", "input": "[2, 4, 5, 6, 8, 10]", "output": "function findMax(arr) { \n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) { \n    if (arr[i] > max) \n      max = arr[i]; \n  } \n  return max; \n}", "category": "Python"}, {"instruction": "Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc.", "input": "", "output": "class Employee:\n \n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n \n    def get_details(self):\n        return \"Name: {}, Age: {}, Salary: {}\".format(self.name, self.age, self.salary)", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python to arrange the given array in descending order.", "input": "[10, 80, 40, 20, 60]", "output": "def descendingOrder(arr): \n    arr.sort(reverse = True) \n    return arr \n  \n# Driver code \narr = [10, 80, 40, 20, 60] \noutput = descendingOrder(arr) \nprint(output)", "category": "Python"}, {"instruction": "Create a function in Ruby for performing string manipulations on the given text.", "input": "Text=\"Hello World\"", "output": "def manipulate_string(text)\n  text = text.upcase\n  text = text.reverse\n  text = text.gsub('O', '*')\n  return text\nend", "category": "Python"}, {"instruction": "Write a bash script that prints the given input string.", "input": "String to be printed='Hello World'", "output": "#!/bin/bash \necho \"Hello World\"", "category": "Python"}, {"instruction": "Create a JSON string representation of the given Python dictionary.", "input": "{'name': 'John', 'age': 20, 'hobby': 'Coding'}", "output": "var jsonStr = JSON.stringify({name: \"John\", age: 20, hobby: \"Coding\"});", "category": "Python"}, {"instruction": "Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.", "input": "", "output": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.", "input": "", "output": "def sort_by_length(lst):\n  return sorted(lst, key=len)", "category": "Python"}, {"instruction": "Write a Python function to convert a given number of days into weeks, days.", "input": "", "output": "def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)", "category": "Python"}, {"instruction": "Using Python, parse a given XML document and output the names of all elements with the \u201cclass\u201d attribute.", "input": "", "output": "from xml.etree import ElementTree\n\ndef find_elements(tree):\n    elements = []\n    for elem in tree.iter():\n        if 'class' in elem.attrib:\n            elements.append(elem.tag)\n    return elements", "category": "Python"}, {"instruction": "Create a Python class named \"Bicycle\" which has two attributes named \"color\" and \"wheels\".", "input": "", "output": "class Bicycle: \n  def __init__(self, color, wheels):\n      self.color = color\n      self.wheels = wheels", "category": "Python"}, {"instruction": "Write a SQL query to find all users who are younger than 25 years old.", "input": "", "output": "SELECT * FROM users WHERE age < 25;", "category": "Python"}, {"instruction": "Make a copy of a given dictionary in Python.", "input": "", "output": "import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)", "category": "Python"}, {"instruction": "Write a SQL query to find out the names of users who have \"B\" as their second character in the name.", "input": "", "output": "SELECT name from users WHERE name LIKE '_b%';", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to retrieve the value of the cookie named \"userID\".", "input": "", "output": "var userID = document.cookie.split(';')\n  .find(c => c.trim().startsWith('userID'))\n  .split('=')[1];", "category": "Python"}, {"instruction": "Given a string s = 'Hello, World!' create a function that takes a string as an input and returns its length.", "input": "s = 'Hello, World!'", "output": "def getStringLength(s):\n  return len(s)", "category": "Python"}, {"instruction": "Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument.", "input": "", "output": "def sumToN(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum", "category": "Python"}, {"instruction": "Create a Git repository for a project named \"My first project\".", "input": "", "output": "git init MyFirstProject", "category": "Python"}, {"instruction": "Given an array [6, 4, 15, 10], write a JavaScript code snippet to find the largest number.", "input": "[6, 4, 15, 10]", "output": "let largest = 0;\nlet arr = [6, 4, 15, 10];\n\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] > largest) {\n    largest = arr[i];\n  }\n}\n\nconsole.log(largest); // 15", "category": "Python"}, {"instruction": "Explain what is an API and why it is important.", "input": "", "output": "An API (Application Programming Interface) is a set of routines, protocols and tools for building software applications. APIs define the way software components should interact and are used to allow different services, such as web services, to communicate with each other. APIs are important because they allow developers to access services and data without having to rewrite or redevelop an entire application. This allows developers to create more secure, efficient and scalable applications. APIs are also used to create new custom solutions and to increase the overall value and performance of existing services.", "category": "Python"}, {"instruction": "Develop a solution for the classic pattern recognition problem -\u00a0the Towers of Hanoi.", "input": "", "output": "// function to solve the Tower of Hanoi problem\ndef solveTowerOfHanoi(n, source, auxillary, destination): \n  if n==1: \n    print(\"Move disk 1 from source\",source,\"to destination\",destination) \n    return \n  solveTowerOfHanoi(n-1, source, destination, auxillary) \n  print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n  solveTowerOfHanoi(n-1, auxillary, source, destination) \n\n# Driver code \nn = 3\nsolveTowerOfHanoi(n, 'A', 'B', 'C') \n\nOutput:\nMove disk 1 from source A to destination C\nMove disk 2 from source A to destination B\nMove disk 1 from source C to destination B\nMove disk 3 from source A to destination C\nMove disk 1 from source B to destination A\nMove disk 2 from source B to destination C\nMove disk 1 from source A to destination C", "category": "Python"}, {"instruction": "Write a class for a shopping cart in Python.", "input": "", "output": "class ShoppingCart:\n    def __init__(self):\n        self.cart = {}\n\n    def add_item(self, item, price):\n        self.cart[item] = price\n\n    def get_cart_total(self):\n        return sum(self.cart.values())", "category": "Python"}, {"instruction": "Explain the concept of recursion with an example.", "input": "", "output": "Recursion is a technique in which a function calls itself. It is used to solve problems which can be broken down into sub-problems that are similar to the original problem. An example of recursion is the Fibonacci sequence, where a number in the sequence is the sum of the previous two numbers. The sequence can be computed using a recursive function:\n\ndef Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver program \nprint(Fibonacci(6)) \n\nOutput:\n5", "category": "Python"}, {"instruction": "Develop a Python script to count the number of characters, words, and sentences present in a given string.", "input": "This is a sample sentence to test the program.", "output": "string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1", "category": "Python"}, {"instruction": "Create an object in JavaScript containing the output of a multiplication table from 1 to 10.", "input": "", "output": "let multiplicationTable = {\n 1:1,2,3,4,5,6,7,8,9,10,\n 2:2,4,6,8,10,12,14,16,18,20,\n 3:3,6,9,12,15,18,21,24,27,30,\n 4:4,8,12,16,20,24,28,32,36,40,\n 5:5,10,15,20,25,30,35,40,45,50,\n 6:6,12,18,24,30,36,42,48,54,60,\n 7:7,14,21,28,35,42,49,56,63,70,\n 8:8,16,24,32,40,48,56,64,72,80,\n 9:9,18,27,36,45,54,63,72,81,90,\n 10:10,20,30,40,50,60,70,80,90,100\n};", "category": "Python"}, {"instruction": "Write a query to count the number of movies released in 2020 from the database.", "input": "", "output": "SELECT COUNT(*) AS total_movies\nFROM movies\nWHERE year = 2020;", "category": "Python"}, {"instruction": "Create an array of strings containing the names of the seven days of the week.", "input": "", "output": "let daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \n                  \"Thursday\", \"Friday\", \"Saturday\", \n                  \"Sunday\"];", "category": "Python"}, {"instruction": "Write an HTML form which includes a text field, a submit button and a check box labeled \"Remember Me\".", "input": "", "output": "<form>\n  <input type=\"text\" placeholder=\"Type something...\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"checkbox\" name=\"rememberme\" value=\"true\">Remember Me\n</form>", "category": "Python"}, {"instruction": "Write a SQL query to update the age of a certain user.", "input": "name = \"John Doe\"\nage = 25", "output": "UPDATE users\nSET age = 25\nWHERE name = 'John Doe';", "category": "Python"}, {"instruction": "Make an HTML webpage with a heading \"Welcome to my webpage!\" and a paragraph with the text \"This is my first webpage!\".", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My Webpages</title>\n</head>\n<body>\n <h1>Welcome to my webpage!</h1>\n <p>This is my first webpage!</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Explain what is a non-deterministic algorithm.", "input": "", "output": "A non-deterministic algorithm is an algorithm that can produce different results when run multiple times with the same inputs. This is because the algorithm may make use of randomness or take different paths based on the input, and the result of each run will be different. Non-deterministic algorithms are useful in solving problems that cannot be solved with traditional deterministic algorithms, such as certain AI problems or certain puzzles.", "category": "Python"}, {"instruction": "Complete the following function so that all strings in the list have a length of 5 characters.", "input": "lst = [\"aaa\", \"bb\", \"ccccc\", \"dddddd\"]", "output": "def make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n    return lst", "category": "Python"}, {"instruction": "Extract the value \"qux\" in the following dictionary.", "input": "d = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}", "output": "d = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}\nqux = d['baz']['qux']", "category": "Python"}, {"instruction": "Delete the elements at indices 2 and 4 in the following list.", "input": "['a', 'b', 'c', 'd', 'e', 'f']", "output": "l = ['a', 'b', 'c', 'd', 'e', 'f']\ndel l[2:4]", "category": "Python"}, {"instruction": "Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days.", "input": "[69.04, 67.07, 68.3, 68.91, 70.09]", "output": "def predict_stock_movements(data):\n# Initialize empty list to store predicted values\npredictions = []\n\n# Iterate over the given data\nfor i in range(len(data)-2):\n # Calculate the average of the 5 days\n avg = sum(data[i:i+3])/3\n # Calculate the current and past day market movement\n curr_mov = data[i+2] - data[i+1]\n past_mov = data[i+1] - data[i]\n # Predict the next day\n prediction = avg + curr_mov + past_mov\n predictions.append(prediction)\n\nreturn predictions", "category": "Python"}, {"instruction": "Create a report in PDF format that displays the most frequent words used in the New York Times articles.", "input": "", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\n\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n\n# Scrape news articles\narticles = scrape_nyt()\n\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()", "category": "Python"}, {"instruction": "Write a JavaScript program to accept two numbers from the user and multiply them.", "input": "", "output": "let num1 = prompt('Enter the first number:');\nlet num2 = prompt('Enter the second number:');\n\nlet result = parseInt(num1) * parseInt(num2);\n\nconsole.log(`The product of ${num1} and ${num2} is ${result}`);", "category": "Python"}, {"instruction": "Modify the code below to pull data from the API endpoint provided.", "input": "Endpoint: https://jsonplaceholder.typicode.com/posts", "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\n\nresponse = requests.get(url)\ndata = response.json()\n\nfor post in data:\n    title = post['title']\n    body = post['body']\n    \n    print('Title: ', title)\n    print('Body: ', body)", "category": "Python"}, {"instruction": "Calculate the maximum element in the given list.", "input": "my_list = [2, 1, 7, 5, 3]", "output": "def max_element(my_list): \n    max_num = my_list[0] \n    for num in my_list: \n        if num > max_num: \n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Write a function to split a string of words by comma.", "input": "string = 'apple,orange,banana,grapes'", "output": "def split_by_comma(string):\n    return string.split(\",\")", "category": "Python"}, {"instruction": "What is a MongoDB document?", "input": "", "output": "A MongoDB document is a record in a NoSQL database that is represented in the form of a JSON-like structure. It contains a set of key-value pairs where each key is associated with a specific value. Documents can also be nested and can contain arrays and other documents.", "category": "Python"}, {"instruction": "Convert the following 10 bytes data into a string.", "input": "b\"\\x00\\x0f\\x14\\x03\\x11\\x07\\x08\\x13\\x05\\x10\"", "output": "data = b\"\\x00\\x0f\\x14\\x03\\x11\\x07\\x08\\x13\\x05\\x10\"\noutput_string = data.decode()\nprint(output_string) # Output: \"\u0610\u0621\u0614\u0603\u0617\u0608\u0613\"", "category": "Python"}, {"instruction": "How can you generate a random number in the range of 1 to 10 in Python?", "input": "", "output": "import random\nrandom_number = random.randint(1, 10)", "category": "Python"}, {"instruction": "In Python, write a function to print out a sequence of numbers from 1 to 10.", "input": "", "output": "def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10", "category": "Python"}, {"instruction": "In Bash, write a command line to create a directory called `myFolder` in the current working directory.", "input": "", "output": "mkdir myFolder", "category": "Python"}, {"instruction": "In JavaScript, write 3 lines of code to define a function `add()` which will take two numbers as arguments and returns their sum.", "input": "", "output": "function add(a, b) {\n  let sum = a + b;\n  return sum;\n}", "category": "Python"}, {"instruction": "Write a CSS style sheet to make all `<h2>` headings have a blue background and white text.", "input": "", "output": "h2 {\n  background-color: blue;\n  color: white;\n}", "category": "Python"}, {"instruction": "Create a JavaScript object with two properties, `name` and `age`, and two methods `sayHello`, which logs \"Hello\" to the console, and `addOneToAge`, which increments the `age` by one.", "input": "", "output": "const user = {\n  name: 'John',\n  age: 20,\n  sayHello: function() {\n    console.log('Hello');\n  },\n  addOneToAge: function() {\n    this.age++;\n  }\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes a positive integer as an argument and returns the first prime number larger than that integer.", "input": "num = 10", "output": "function nextPrime(num) {\n  let isPrime = true;\n  let nextNum = num + 1;\n  while (isPrime) {\n    for (let i = 2; i < nextNum; i++) {\n      if (nextNum % i === 0) {\n        nextNum++;\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      return nextNum;\n    }\n  }\n }\n\nnextPrime(num); // Output: 11", "category": "Python"}, {"instruction": "Create a program to determine whether a given sequence is an arithmetic progression or not.", "input": "[-6, -2, 2, 6]", "output": "def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True", "category": "Python"}, {"instruction": "Construct a classifier to identify which programming language a given code snippet belongs to.", "input": "def foo(x, y):\n return x + y", "output": "from sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\ndef get_features(code):\n # Count the words in the code\n vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\")\n count_vectors = vectorizer.fit_transform([code])\n return count_vectors.toarray()\n\ndef classify_language(code):\n # Training data\n data = [(\"Python\", \"def foo(x, y):\\n return x + y\"),\n (\"Java\", \"public int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"C++\", \"int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"JavaScript\", \"function foo(x, y) {\\n return x + y;\\n }\")]\n languages, codes = zip(*data)\n \n # Extract features from the code\n X_train = [get_features(c) for c in codes]\n # Train a classifier\n clf = MultinomialNB().fit(X_train, languages)\n # Extract features from the given code\n X_input = get_features(code)\n # Predict the language\n return clf.predict([X_input])[0]", "category": "Python"}, {"instruction": "Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.", "input": "\"cats\", \"dogs\"", "output": "def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]", "category": "Python"}, {"instruction": "Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.", "input": "", "output": "import re\n\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False", "category": "Python"}, {"instruction": "Create a bash script to print the version of python installed in the computer.", "input": "", "output": "#!/bin/bash\npython --version", "category": "Python"}, {"instruction": "Convert the following hex color to RGB.", "input": "Hex Color: #4286f4", "output": "RGB(66, 134, 244)", "category": "Python"}, {"instruction": "Create a matrix in R and fill it with random numbers.", "input": "Size: 4 x 5", "output": "matrix2 <- matrix(runif(n = 20, min = 0, max = 10), nrow = 4, ncol = 5)", "category": "Python"}, {"instruction": "Perform sentiment analysis on the following sentence and indicate if it is positive or negative.", "input": "Sentence: I had a really bad experience at the shop.", "output": "Negative sentiment.", "category": "Python"}, {"instruction": "Retrieve unique values from a list of integers.", "input": "List: [3, 5, 7, 3, 4, 6, 7, 8]", "output": "[3, 5, 7, 4, 6, 8]", "category": "Python"}, {"instruction": "Create a regex expression to match with a specific format of email address.", "input": "", "output": "/([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/", "category": "Python"}, {"instruction": "Create a SQL query to select only the rows with an age greater than 10.", "input": "Table Name: users \nColumns: name, age", "output": "SELECT * FROM users WHERE age > 10;", "category": "Python"}, {"instruction": "Design an HTML form that allows the user to submit his/her contact details.", "input": "", "output": "<form action=\"contactaction.php\" method=\"post\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\"> <br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\" placeholder=\"example@domain.com\"><br>\n  <label for=\"phone\">Phone:</label>\n  <input type=\"tel\" name=\"phone\" placeholder=\"123-456-7890\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a class in Java to build a singly linked list.", "input": "", "output": "public class SinglyLinkedList { \n     \n    Node head; // head of list \n     \n    // Linked list Node. \n    // This inner class is made static \n    // so that main() can access it \n    static class Node { \n        int data; \n        Node next; \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } // Constructor \n    } \n     public void printList() \n    { \n        Node n = head; \n        while (n != null) { \n            System.out.print(n.data + \" \"); \n            n = n.next; \n        } \n    } \n \n    public void push(int new_data) \n    { \n        \n        Node new_node = new Node(new_data); \n  \n       \n        new_node.next = head; \n \n        head = new_node; \n    } \n}", "category": "Python"}, {"instruction": "Suggest a way to check if a given string contains alphanumeric characters", "input": "", "output": "The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example:\n\nmy_string = 'Hello123'\n\nif my_string.isalnum():\n    print('Contains alphanumeric characters')\nelse:\n    print('Does not contain alphanumeric characters')", "category": "Python"}, {"instruction": "Create a class representing a car", "input": "", "output": "class Car:\n    def __init__(self, make, model, year, engine_size):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.engine_size = engine_size", "category": "Python"}, {"instruction": "Suggest a method to run a python program from an interactive terminal session.", "input": "", "output": "The simplest way to run a python program from an interactive terminal session is to use the \"python\" command. For example, if you have a file called \"myprog.py\", you can type \"python myprog.py\" at the command line and the program will be executed. Alternately, you can use the \"execfile\" command, which takes a file name as an argument and executes it.", "category": "Python"}, {"instruction": "Create a valid JSON string which contains the following elements", "input": "name: John\nage: 32\ncity: New York", "output": "{\n  \"name\": \"John\",\n  \"age\": 32,\n  \"city\": \"New York\"\n}", "category": "Python"}, {"instruction": "Modify the following code so that it prints the reversed version of a list.", "input": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):", "output": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):\n    my_list.reverse()\n    print(my_list)", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order.", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "def sort_strings_alphabetically(words):\n# Use the built-in sorted() function to sort the list of strings\nsorted_words = sorted(words)\n# Join the sorted list of words separated by spaces\nreturn \" \".join(sorted_words)", "category": "Python"}, {"instruction": "Write a function to remove duplicate elements from a list keeping only the first occurrence of each element.", "input": "[1, 2, 3, 3, 3, 4, 4, 5]", "output": "def remove_duplicates(nums):\n # Create a list to store the first occurrence of each number\n seen = []\n # Iterate over the list\n for num in nums:\n  # If the number is not in the seen list, add it\n  if num not in seen:\n   seen.append(num)\n return seen", "category": "Python"}, {"instruction": "Modify the following code to insert the element 'x' into the list at position 'index'", "input": "list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3", "output": "list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3\n\nlist1.insert(index, x)", "category": "Python"}, {"instruction": "Implement a constructor to create an account", "input": "class Account:", "output": "def __init__(self, name, balance):\n  self.name = name\n  self.balance = balance", "category": "Python"}, {"instruction": "What is the purpose of the `sort()` JavaScript array method?", "input": "", "output": "The sort() JavaScript array method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending according to the string Unicode code points.", "category": "Python"}, {"instruction": "Create a JavaScript function that takes in two arrays of numbers, and returns an array containing only the numbers that appear in both arrays.", "input": "arr1 = [1, 2, 3, 4, 5]; \narr2 = [3, 4, 5, 6, 7]", "output": "function containsSameNumbers(arr1, arr2) {\n\tconst intersection = [];\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr2.includes(arr1[i])) {\n\t\t\tintersection.push(arr1[i]);\n\t\t}\n\t}\n\treturn intersection;\n}\n\ncontainsSameNumbers(arr1, arr2); // Output: [3, 4, 5]", "category": "Python"}, {"instruction": "Rewrite this C++ function in Python", "input": "int max (int a, int b)\n{\nif (a > b) \nreturn a;\nelse \nreturn b; \n}", "output": "def max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Develop a solution to this algorithm problem.", "input": "Given an int array A, find the min absolute difference between any two of its elements.", "output": "def minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference", "category": "Python"}, {"instruction": "Write a JavaScript program to calculate the exponential for a given base and exponent.", "input": "Base = 3, exponent=4", "output": "function calculateExponential(base, exponent) {\n  let result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result *= base;\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Format this JavaScript code in a readable way.", "input": "function foo(){console.log(\"this is a test\")}", "output": "function foo() {\n  console.log(\"this is a test\");\n}", "category": "Python"}, {"instruction": "Write a function that calculates surface area of a regular 3D-pyramid.", "input": "Let the base of the pyramid is 5 meters and its height is 8 meters", "output": "def surface_area_pyramid(base_length, height):\n    area_of_base = base_length * base_length\n    side_of_base = (base_length ** 2 + height ** 2) ** 0.5\n    area_of_sides = (side_of_base * base_length) * 4\n    return area_of_base + area_of_sides", "category": "Python"}, {"instruction": "Create a JavaScript object with 3 keys and 3 values.", "input": "", "output": "const myObject = { \n  key1: 'value1',\n  key2: 'value2', \n  key3: 'value3' \n}", "category": "Python"}, {"instruction": "Write an algorithm for sorting a given array of numbers.", "input": "array: [2, 5, 3, 4, 1]", "output": "function sort(array) { \n  for (let i = 0; i < array.length - 1; i++) { \n    for (let j = 0; j < array.length - i - 1; j++) { \n      if (array[j] > array[j+1]) { \n        let temp = array[j]; \n        array[j] = array[j+1]; \n        array[j+1] = temp; \n      } \n    } \n  } \n  return array; \n}", "category": "Python"}, {"instruction": "Create a CSS style to set the font color to red for a heading element.", "input": "", "output": "h1 { \n  color: red; \n}", "category": "Python"}, {"instruction": "Create an RNN model to classify emails into spam and not spam.", "input": "", "output": "#imports\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout \n#Model\nmodel = tf.keras.models.Sequential([\n    Embedding(vocab_size, embedding_dim, input_length = max_len),\n    LSTM(128),\n    Dense(64, activation = 'relu'),\n    Dropout(0.25),\n    Dense(1, activation = 'sigmoid')\n])", "category": "Python"}, {"instruction": "Create a jQuery function to detect when a page is scrolled.", "input": "", "output": "$(window).scroll(function() {\n  console.log('Scroll detected'); \n});", "category": "Python"}, {"instruction": "Calculate the distance between two points using Pythagoras theorem.", "input": "Point A: (3, 4) Point B: (7, 8)", "output": "distance = sqrt((7-3)^2 + (8-4)^2)\n= sqrt(16 + 16)\n= sqrt(32)\n= 5.657", "category": "Python"}, {"instruction": "Create a Java function to remove duplicate characters in a string.", "input": "string: hello", "output": "public string removeDuplicateChars(String str){ \n  Set<Character> set = new HashSet<Character>(); \n  StringBuffer sb = new StringBuffer(); \n  for (int i = 0; i < str.length(); i++) { \n    Character ch = str.charAt(i); \n    if(!set.contains(ch)) { \n      set.add(ch); \n      sb.append(ch); \n    } \n  } \n  return sb.toString(); \n}", "category": "Python"}, {"instruction": "Reverse a string using a stack.", "input": "string: hello", "output": "def reverse_string_using_stack(string): \n    stack = []\n    for char in string:\n        stack.append(char)\n    reversed_string = ''\n    while len(stack) > 0: \n        reversed_string += stack.pop()\n    return reversed_string", "category": "Python"}, {"instruction": "Write a SQL query to find all the records in the \"employees\" table where the job_title is \"Software Engineer\".", "input": "Table Name: employees \nColumns: employee_id, job_title", "output": "SELECT * FROM employees WHERE job_title = 'Software Engineer';", "category": "Python"}, {"instruction": "Construct a valid SQL statement to calculate the sum of the \"price\" column in the \"Orders\" table", "input": "", "output": "SELECT SUM(price) FROM Orders;", "category": "Python"}, {"instruction": "Design a program that produces the following output: \n . . . . . . . . . . . . . . . . . . . . .", "input": "", "output": "#include <iostream>\n\nint main() \n{\n    for (int i=0; i<17; i++) {\n        std::cout << \".\";\n    }\n\n    std::cout << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Python code to print the following output:\nday     temperature\nMonday    20\nTuesday   25", "input": "", "output": "print(\"day     temperature\")\nprint(\"Monday    20\")\nprint(\"Tuesday   25\")", "category": "Python"}, {"instruction": "How can we set a variable in C++?", "input": "", "output": "In C++, we can set a variable in two ways:\n1. By using an assignment operator (=), for example: int x = 5; \n2. By using the declaration of the variable, for example: int x;  x = 5;", "category": "Python"}, {"instruction": "Write a code to flatten a two-dimensional list into one-dimensional list in Python.", "input": "Two-dimensional List: [[1,2], [3,4], [5,6]]", "output": "def flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\n\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))", "category": "Python"}, {"instruction": "Create an algorithm to calculate the mean, mode and median in a given set of numbers.", "input": "", "output": "def mean(nums):\n    return sum(nums)/len(nums)\n\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            countDict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\n\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\n\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))", "category": "Python"}, {"instruction": "Create a query to find all unique combinations of size two in a given list.", "input": "[1, 2, 3, 4]", "output": "SELECT DISTINCT a.val AS val1, b.val AS val2\nFROM myTable a\nJOIN myTable b\nON a.id <> b.id\nWHERE a.val IN (1,2,3,4)\nAND b.val IN (1,2,3,4)\nORDER BY a.val, b.val;", "category": "Python"}, {"instruction": "Write a Python script to compute Pi to the Nth digit.", "input": "", "output": "import math\n\nn = int(input(\"Enter the number of digits of pi to compute: \"))\n\n# Compute pi to nth decimal place\npi = round(math.pi, n)\n\nprint(\"The value of pi to {0} decimal places is: {1}\".format(n, pi))", "category": "Python"}, {"instruction": "Create an algorithm to classify a given set of data into three classes.", "input": "", "output": "from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# X is the training data\nX = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])\n\n# y is the labels of the classes\ny = np.array([0, 0, 1, 1, 2, 2, 2])\n\n# Create the model\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model using the training data\nmodel.fit(X, y)\n\n# Use the model to make predictions \nprediction = model.predict([[2, 3]])\n\nprint(prediction)", "category": "Python"}, {"instruction": "Create a recursive SQL query to find the level of each node in a tree structure.", "input": "WITH RECURSIVE tree_levels (node, parent, level)\nAS\n(\n    SELECT node, parent, 0\n    FROM root_table\n    WHERE parent IS NULL\n    UNION ALL\n    SELECT child.node, child.parent, tree_levels.level + 1\n    FROM root_table AS child\n    JOIN tree_levels\n    ON child.parent = tree_levels.node\n)", "output": "SELECT tree_levels.node, tree_levels.level\nFROM tree_levels\nORDER BY tree_levels.node;", "category": "Python"}, {"instruction": "Design a JavaScript program that takes two numbers as input and prints their sum.", "input": "", "output": "// Define a function to add two numbers\nfunction addTwoNumbers(num1, num2){\n  return num1 + num2;\n}\n\n// Main program\n// Get two numbers from user\nlet num1 = prompt(\"Enter the first number to add:\");\nlet num2 = prompt(\"Enter the second number to add:\");\n\n// Call the function to get the sum\nlet sum = addTwoNumbers(num1, num2);\n\n// Print result to the user\nconsole.log(`The sum of ${num1} and ${num2} is: ${sum}`);", "category": "Python"}, {"instruction": "Edit the program below to print out the square root of a number.", "input": "#include <iostream> \n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n  \n    return 0;\n}", "output": "#include <iostream> \n#include <cmath>\n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n    std::cout << \"Square root of \" << number << \" is: \" << sqrt(number) << std::endl;\n  \n    return 0;\n}", "category": "Python"}, {"instruction": "In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).", "input": "", "output": "def replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result", "category": "Python"}, {"instruction": "Create a SQL query to update the 'name' on table 'employees' with the value 'User 1' where the id is 1.", "input": "", "output": "UPDATE employees\nSET name = 'User 1'\nWHERE id = 1;", "category": "Python"}, {"instruction": "Generate a random 29 character hexadecimal string using javascript.", "input": "", "output": "function generateRandomHexString(length) {\n    let result = '';\n    const characters = '0123456789ABCDEF';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n \n    return result;\n}\nlet hexString = generateRandomHexString(29);\nconsole.log(hexString);", "category": "Python"}, {"instruction": "Create a python function that computes the area of a rectangle given the length and width.", "input": "", "output": "def calculateRectangleArea(length, width):\n  area = length * width\n  return area", "category": "Python"}, {"instruction": "How can we create an array of ten zeroes in JavaScript?", "input": "", "output": "In JavaScript, we can create an array of ten zeroes using the Array.from() method. For example:\n\nconst array = Array.from({length: 10}, () => 0);\n\nconsole.log(array);", "category": "Python"}, {"instruction": "Describe what is polymorphism in Java.", "input": "", "output": "In Java, polymorphism is a programming concept that allows the same code to be used to perform different tasks. This is achieved by assigning different behaviors to different objects that share a common base class. Thus, when a method is invoked, the runtime determines which version of the method should be executed by examining the object on which the method is called.", "category": "Python"}, {"instruction": "Change the following list of strings to uppercase in Python.", "input": "List: ['one', 'two', 'three']", "output": "list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)", "category": "Python"}, {"instruction": "Write a Java program to find the second most frequent character in a string.", "input": "String: \"Hello World!\"", "output": "public class SecondMostFrequent {\n\n  public static char findSecondMostFrequent(String str) {\n    int[] counts = new int[26];\n    for(int i = 0; i < str.length(); i++)\n      counts[str.charAt(i)- 'a']++;\n\n    int index = 0;\n    int max_count = 0;\n \n    for(int i = 0; i < str.length(); i++) {\n     \n      if(counts[str.charAt(i) - 'a'] > max_count) {\n        max_count = counts[str.charAt(i) - 'a'];\n        index = i;\n      }\n    }\n    \n    int sec_max = 0;\n    int sec_index = 0;\n \n    for(int i = 0; i < str.length(); i++) {\n     \n      if(counts[str.charAt(i) - 'a'] > sec_max && counts[str.charAt(i) - 'a'] < max_count) {\n        sec_max = counts[str.charAt(i) - 'a'];\n        sec_index = i;\n      }\n    }\n \n    return str.charAt(sec_index);\n  }\n \n  public static void main(String args[]) {\n    String str = \"hello world!\";\n    System.out.println( findSecondMostFrequent(str));\n  }\n}", "category": "Python"}, {"instruction": "How can we dynamically add an element to a set in Python?", "input": "", "output": "In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)", "category": "Python"}, {"instruction": "Create a regular expression that matches strings that start with a certain prefix, followed by two or more numbers, and ending with two or more alphabet characters.", "input": "prefix = \"ABC\"", "output": "import re\n \nprefix = \"ABC\"\npattern = re.compile('^' + prefix + '\\d{2,}[A-Za-z]{2,}$')", "category": "Python"}, {"instruction": "Generate a regular expression to match the following patterns", "input": "wxyz - w:[a-c] x:[0-9] y:[a-z] z:[A-Z]", "output": "^[a-c][0-9][a-z][A-Z]$", "category": "Python"}, {"instruction": "Identify the time complexity for the following piece of code", "input": "arr = [5, 2, 4, 8, 1]\nfor i in range (len(arr)):\n   for j in range (len(arr)):", "output": "O(n^2)", "category": "Python"}, {"instruction": "Generate valid HTML for a table with three columns", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th> \n    <th>Column3</th>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Construct a database schema for a \"Products\" table.", "input": "", "output": "CREATE TABLE Products (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    product_name TEXT NOT NULL,\n    product_price REAL NOT NULL,\n    product_image TEXT,\n    product_description TEXT\n);", "category": "Python"}, {"instruction": "Create a program in Haskell that multiplies any given number by 2.", "input": "x = 10", "output": "multiplyByTwo x = x * 2\n\nmain = do\n  let x = 10\n  let result = multiplyByTwo x\n  print result", "category": "Python"}, {"instruction": "You are given a data set containing employee details. Write a query to get the sum of all salaries.", "input": "", "output": "SELECT \n\t SUM(salary) \nFROM \n\temployees;", "category": "Python"}, {"instruction": "Write a script in Ruby for calculating the sum of two numbers.", "input": "a = 5\nb = 10", "output": "a = 5\nb = 10\n\ndef add_numbers(a, b)\n  a + b\nend\n\nsum = add_numbers(a,b)\n\nputs \"The sum of #{a} and #{b} is #{sum}.\"", "category": "Python"}, {"instruction": "Think of a situation where you would use recursion.", "input": "", "output": "Recursion can be used when performing a task that can be broken down into smaller, simpler parts. For example, performing a Depth-First Search on a Graph. It can also be used when implementing algorithms to solve complex problems such as finding the largest number in a list or creating a binary search tree.", "category": "Python"}, {"instruction": "Scan through the following code in JavaScript and replace the placeholders with appropriate code.", "input": "var numbers = [1, 2, 3, 4];\n\nfor(___){\n  console.log(___);\n}", "output": "var numbers = [1, 2, 3, 4];\n\nfor(var i = 0; i < numbers.length; i++){\n  console.log(numbers[i]);\n}", "category": "Python"}, {"instruction": "Create a Java program to compute the distance between two points.", "input": "PointA = (2, 3)\nPointB = (4, 9)", "output": "public class DistanceCalculator {\n\n    public static double distanceCalculator(int x1, int y1, int x2, int y2) {\n        double distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n        return distance;\n    }\n}\n\nclass DistanceCalculatorTest {\n\n    public static void main(String[] args) {\n        double distance = DistanceCalculator.distanceCalculator(2, 3, 4, 9);\n        System.out.println(\"The distance between two points is \" + distance); \n    }\n\n}", "category": "Python"}, {"instruction": "What's the output of this program in Python given the following input?", "input": "input_string = \"Hello, World!\"   \nlist_of_chars = list(input_string)\n\nfor current_char in list_of_chars:\n print(current_char)", "output": "H\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!", "category": "Python"}, {"instruction": "Develop a code to rotate a given list by a given value.", "input": "my_list = [1, 2, 3, 4, 5]\nk = 3", "output": "def rotate_list(my_list, k):\n    \"\"\"\n    A function to rotate a given list by a given value.\n    Input: list, integer\n    Output: list\n    \"\"\"\n    # Get the length of list\n    length = len(my_list)\n    \n    # Rotate the list\n    rotated = my_list[-k % length:] + my_list[:-k % length]\n    \n    return rotated", "category": "Python"}, {"instruction": "Create a code to format the given text using a given indentation level.", "input": "text = \"This is a sample text to format.\"\nindentation = 4", "output": "def indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text", "category": "Python"}, {"instruction": "Create a code to search a given string for a specific keyword and return the index of the keyword.", "input": "text = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\"", "output": "def search_string(text, keyword):\n    \"\"\"\n    A function to search a given string for a specific keyword and return the index of the keyword.\n    Input: string, keyword\n    Output: integer or None\n    \"\"\"\n    # Use the find() method to search the string\n    index = text.find(keyword)\n    \n    # Return None if the keyword was not found\n    if index == -1:\n        return None\n    # Return the index if the keyword was found\n    else:\n        return index", "category": "Python"}, {"instruction": "Write a code to take in a string and determine if the string is a palindrome or not.", "input": "string = \"civic\"", "output": "def is_palindrome(string):\n    \"\"\"\n    Return True is the input string is a Palindrome, False if not.\n    Input: string\n    Output: Boolean\n    \"\"\"\n    # Cast input to string\n    if not isinstance(string, str):\n        string = str(string)\n    \n    # Reverse the string\n    rev_string = string[::-1]\n    \n    #Compare original string with reversed string\n    if string == rev_string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a function to flatten a 2D array.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def flatten_2D_array(arr):\n    \"\"\"\n    A function to flatten a 2D array.\n    Input: A 2D array.\n    Output: A 1D array.\n    \"\"\"\n    flattened_arr = []\n    for sub_arr in arr:\n        flattened_arr += sub_arr\n    return flattened_arr", "category": "Python"}, {"instruction": "Write a CSS code snippet to apply a border to all p elements.", "input": "", "output": "p {\n  border: 1px solid #000;\n}", "category": "Python"}, {"instruction": "Consider the following code. Explain the purpose of the for loop in the code.", "input": "nums = [2, 4, 6, 8]\n\nfor num in nums:\n    print(num ** 2)", "output": "The for loop iterates through the list nums and prints each element to the console, after having been squared.", "category": "Python"}, {"instruction": "Create an HTML page design for displaying a website homepage.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Website Homepage</title>\n    </head>\n    <body>\n        <h1>Welcome to the website!</h1>\n        <p>This is the homepage for a new website.</p>\n        <ul>\n            <li> About Us </li>\n            <li> Services </li>\n            <li> Contact Us </li>\n        </ul>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Suppose you have two arrays A and B. Write a C++ program to sum up the elements in A and B.", "input": "A = [1,5,9,10]\nB = [2,5,7,10]", "output": "#include <iostream>\n\nusing namespace std;\n\nint main(void)\n{\n    int a[]={1,5,9,10};\n    int b[]={2,5,7,10};\n    int c[4];\n \n    for(int i=0;i<4;i++)\n        c[i] = a[i] + b[i];\n \n    for(int i=0;i<4;i++)\n        cout<<c[i]<<\" \";\n    return 0;\n}", "category": "Python"}, {"instruction": "Suppose you have a list of integers. Write a program in R language to compute the minimum of the list.", "input": "list_of_integers <- c(5,9,7,8,2,1)", "output": "min_val <- min(list_of_integers)\nprint(min_val)", "category": "Python"}, {"instruction": "Generate a Python class definition for a pig object that includes the following properties.", "input": "name: string\ncolor: string\nage: integer", "output": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the names of all products from the table 'Product' with a price greater than $100.", "input": "Table name: Product\nAttributes: id (integer), name (string), price (integer)", "output": "SELECT name FROM Product WHERE price > 100;", "category": "Python"}, {"instruction": "Write a Java program to find the length of a string without using the length() method.", "input": "", "output": "public static int stringLength(String str){\n    int count = 0;\n    for (int i=0; i<str.length(); i++){\n        if(str.charAt(i)!=' '){\n            count++;\n        }\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Sanitize the following user input.", "input": "\"user' OR '1'='1\"", "output": "String sanitizedInput = input.replaceAll(\"[\\\"\\']\",\"\");", "category": "Python"}, {"instruction": "Convert the following recursive function to an iterative one.", "input": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1)", "output": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result", "category": "Python"}, {"instruction": "Construct a C++ program to convert miles to kilometers.", "input": "", "output": "#include <iostream>\n\ndouble MilesToKilometers(double miles)\n{\n    return 1.609 * miles; \n}\n\nint main()\n{\n    double miles = 0.0;\n    std::cout << \"Enter the number of miles: \";\n    std::cin >> miles;\n\n    double kilometers = MilesToKilometers(miles);\n    std::cout << miles << \" miles is \" << kilometers << \" kilometers.\\n\";\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to find the names and states of all employees located in California.", "input": "", "output": "SELECT name, state FROM Employees WHERE state = 'California';", "category": "Python"}, {"instruction": "Write a Python code snippet to get the first 1000 prime numbers.", "input": "", "output": "primes = []\nn = 2\nwhile len(primes) < 1000:\n if is_prime(n):\n primes.append(n)\n n += 1\n\nprint(primes)", "category": "Python"}, {"instruction": "Write a JavaScript function that accepts two parameters - a number and a string - and returns a sentence with both parameters combined.", "input": "num=10;\nstr=\"apples\"", "output": "function combine(num, str) {\n    return `There are ${num} ${str}!`;\n}", "category": "Python"}, {"instruction": "Edit the following Python code to make it error-free.", "input": "a = 33\nab = a +", "output": "a = 33\nab = a + b", "category": "Python"}, {"instruction": "Describe in one sentence how a given neural network model works.", "input": "A convolutional neural network", "output": "The convolutional neural network utilizes convolutional filters to learn features in an input, followed by layers of non-linear processing to produce an output.", "category": "Python"}, {"instruction": "Suppose you have two dictionaries, A and B. Write a code in Java to find the intersection of A and B.", "input": "A = {1: 'a', 2: 'b'}\nB = {2: 'b', 3: 'c'}", "output": "public static HashMap<Integer, String> intersect(HashMap<Integer, String> A, HashMap<Integer, String> B) {\n    HashMap<Integer, String> result = new HashMap<>();\n    for (Integer key: A.keySet()) {\n        if (B.containsKey(key)) {\n            result.put(key, A.get(key));\n        }\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Implement a function in Java to find the frequency of a particular character in a given string.", "input": "", "output": "public static int getCharFrequency(String str, char c) \n{ \n   int count = 0; \n   for (int i = 0; i < str.length(); i++)  \n   { \n       if (str.charAt(i) == c) \n           count++; \n   } \n   return count; \n}", "category": "Python"}, {"instruction": "You need to tell the assistant which language is this code written in.", "input": "#include <iostream>\nusing namespace std;\nint main()\n{\n    int a = 10, b= 15;\n    int c = a + b;\n    cout << \"The sum of \" << a << \" and \" << b << \" is: \" << c << endl; \n    return 0;\n}", "output": "C++", "category": "Python"}, {"instruction": "Refractor the given code using SQL query commands.", "input": "SELECT * \nFROM customers \nWHERE age > 18\nAND (state = 'NY' OR experience > 3)\nAND (country = 'US' OR experience > 5)", "output": "SELECT * \nFROM customers \nWHERE age > 18 \nAND (state = 'NY' OR experience > 3 \n  OR (country = 'US' AND experience > 5))", "category": "Python"}, {"instruction": "Write a code to collect the name, email address, and phone number from the user.", "input": "", "output": "name = input(\"What is your name? \")\nemail = input(\"What is your email address? \")\nphone = input(\"What is your phone number? \")", "category": "Python"}, {"instruction": "Using JavaScript, write code to display the current time in the format \"hh:mm:ss\".", "input": "", "output": "let now = new Date();\nlet time = now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds();\nconsole.log(time);", "category": "Python"}, {"instruction": "Create a program to sum numbers in a given range m to n inclusive.", "input": "m = 4, n = 8", "output": "def sum_in_range(m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum+=i\n    return sum", "category": "Python"}, {"instruction": "Build a Node.js program to find the maximum and minimum item from an array.", "input": "arr = [100, 200, 75, 10, 50]", "output": "let arr = [100, 200, 75, 10, 50];\n\nlet min = Math.min(...arr);\nlet max = Math.max(...arr);\n\nconsole.log(`The minimum of the array is ${min}`);\nconsole.log(`The maximum of the array is ${max}`);", "category": "Python"}, {"instruction": "Build a TensorFlow model to perform sentiment analysis on text.", "input": "", "output": "import tensorflow as tf\n\n# Get the data\ndataset = tf.keras.utils.get_file(\n  'aclImdb_v1.tar.gz', \n  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')\n\n# Load the data and prepare it for the model\nreviews_train, reviews_test, labels_train, labels_test \\\n  = tf.keras.datasets.imdb.load_data(\n    path=str(dataset)[:-7] + \"/aclImdb/train/\")\n\n# Convert the integers back to words\nword2id = tf.keras.datasets.imdb.get_word_index()\nword2id = {k:(v+3) for k,v in word2id.items()}\nword2id[\"<PAD>\"] = 0\nword2id[\"<START>\"] = 1\nword2id[\"<UNK>\"] = 2 \nword2id[\"<UNUSED>\"] = 3\n\nid2word = {value:key for key,value in word2id.items()}\n\n# Model for sentiment analysis\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),\n  tf.keras.layers.GlobalAveragePooling1D(),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\n\nmodel.compile(\n  optimizer='adam', \n  loss='binary_crossentropy', \n  metrics=['accuracy']\n)\n\nmodel.fit(\n  reviews_train, \n  labels_train, \n  epochs=10,\n  validation_data=(reviews_test, labels_test)\n)", "category": "Python"}, {"instruction": "Write a Python script to find the maximum depth of a given nested list.", "input": "nested_list = [[1,2], [3,4], [5,6,7]]", "output": "def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n    return max_depth", "category": "Python"}, {"instruction": "Change all the character in a given string to its corresponding upper case.", "input": "string = \"I love programming.\"", "output": "string.upper()", "category": "Python"}, {"instruction": "Write a Python script to calculate the total of all the elements in a nested list.", "input": "nested_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total", "category": "Python"}, {"instruction": "Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.", "input": "numbers = [2, 4, 8, 9, 5, 7], target = 15", "output": "def sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False", "category": "Python"}, {"instruction": "Execute a query to access the records from the table.", "input": "SELECT * FROM tablename", "output": "cursor.execute(\"SELECT * FROM tablename\")", "category": "Python"}, {"instruction": "Find the most commonly used element in a given list.", "input": "List: [8, 1, 7, 7, 4, 8, 8, 7]", "output": "from collections import Counter\n\nlist = [8, 1, 7, 7, 4, 8, 8, 7]\n\nmost_common = Counter(list).most_common(1)[0]\n\nprint(\"Most common element is {}\".format(most_common[0]))", "category": "Python"}, {"instruction": "Get the name and message property from the given dictionary.", "input": "data = {\n'name': 'John',\n'message': 'Hello World!',\n'city': 'New York'\n}", "output": "name = data['name']\nmessage = data['message']", "category": "Python"}, {"instruction": "Write a query statement to select the name, age and address of the oldest person in our database?", "input": "", "output": "SELECT name, age, address FROM TableName ORDER BY age DESC LIMIT 1;", "category": "Python"}, {"instruction": "Create a class to store a given list of strings.", "input": "List: ['hello', 'world', 'hi']", "output": "class StrList:\n def __init__(self, str_list):\n    self.str_list = str_list\n   \n  def get_list(self):\n    return self.str_list", "category": "Python"}, {"instruction": "Fix any code errors in the given function.", "input": "def addToList list: num\n  list.append(num)\n  return list", "output": "def addToList(List, num):\n  List.append(num);\n  return List", "category": "Python"}, {"instruction": "Grant access to content by creating a function that takes in an age and returns a boolean.", "input": "Age: 20", "output": "def check_age(age):\n  if age < 18:\n    return False\n  else:\n    return True", "category": "Python"}, {"instruction": "Retrieve all the values from the nested dictionary.", "input": "data_dict = {\n'key1': {\n  'inner_key1': \"1\",\n  'inner_key2': \"2\"\n},\n'key2': {\n  'inner_key1': \"3\",\n  'inner_key2': \"4\"\n}\n}", "output": "for key1_value in data_dict.values():\n  for (inner_key1, inner_key2) in key1_value.items():\n    print(inner_key1, inner_key2)", "category": "Python"}, {"instruction": "Parse the following HTML content and print the text present in the <p> tag.", "input": "<div>\n  <p>Hello World!</p>\n</div>", "output": "print(soup.find('p').text)  # 'Hello World!'", "category": "Python"}, {"instruction": "Recognize the type of error in the given code and provide which line of code is causing the error.", "input": "def divide(numerator, denominator):\n    return numerator / denominator\n\nnumber = int(input(\"Enter a number: \"))\n    result = divide(100, number)", "output": "Line 4 is causing a syntax error due to improper indentation.", "category": "Python"}, {"instruction": "Generate a valid JSON object for a user", "input": "", "output": "{\n  \"full_name\": \"\",\n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\"\n  }\n}", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of an element in a given list", "input": "", "output": "def remove_element(list, element): \n    return [x for x in list if x != element]", "category": "Python"}, {"instruction": "Construct a lambda expression to multiply the numbers by 2.", "input": "", "output": "x = lambda n : n * 2", "category": "Python"}, {"instruction": "Write an SQL statement that returns the salary of the employee with the highest salary of the \"Employees\" table.", "input": "", "output": "SELECT MAX(salary) FROM Employees;", "category": "Python"}, {"instruction": "Modify the following script to format the output to just two decimal places.", "input": "original_script.py\n\nimport math\n\na = math.pi\nprint(a)", "output": "import math\n\na = math.pi\nprint(\"{:.2f}\".format(a))", "category": "Python"}, {"instruction": "Generate a random list of 20 unique numbers from 0 to 30.", "input": "", "output": "[3, 5, 12, 11, 14, 0, 22, 19, 10, 6, 1, 25, 18, 27, 24, 16, 17, 21, 20, 15]", "category": "Python"}, {"instruction": "Generate a table in SQL to store student information like name, age and grade.", "input": "", "output": "CREATE TABLE student_info (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50),\n  student_age INT,\n  student_grade INT\n);", "category": "Python"}, {"instruction": "Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7.", "input": "", "output": "numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]", "category": "Python"}, {"instruction": "Utilize a regular expression to match all words that begin with 'b' in a given text.", "input": "text = \"The quick brown fox jumps over the lazy dog.\"", "output": "import re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nword_list = re.findall(r\"\\b[bB]\\w+\", text)\n\nprint(word_list)\n# output: ['brown', 'fox', 'b jumps', 'b lazy']", "category": "Python"}, {"instruction": "Compose a SQL query to find the names of all professors in the department of Computer Science.", "input": "", "output": "SELECT name FROM professor WHERE department = 'Computer Science';", "category": "Python"}, {"instruction": "Create an object in Ruby that stores a student's name, age, and GPA.", "input": "", "output": "student = {\n  name: \"John Smith\",\n  age: 22,\n  gpa: 3.5\n}", "category": "Python"}, {"instruction": "What is the capital of Spain?", "input": "", "output": "The capital of Spain is Madrid.", "category": "Python"}, {"instruction": "Create a program that calculates the area of a triangle using C#.", "input": "base = 10\nheight = 8", "output": "public class AreaCalculator { \n    public static void main(String[] args) { \n        int base = 10;\n        int height = 8;\n        double area = (base*height)/2; \n        System.out.println(\"The area of the triangle is: \"+area); \n    } \n}", "category": "Python"}, {"instruction": "Given a list of integers, write a Python code to return the most frequent item.", "input": "num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]", "output": "ModeElement = max(set(num_list), key = num_list.count) \nprint(\"Most Frequent Element : \", ModeElement)", "category": "Python"}, {"instruction": "Build a Lambda function using Python to calculate the sum of two numbers.", "input": "n1 = 5\nn2 = 8", "output": "def add_two_numbers(n1, n2):\n return n1 + n2", "category": "Python"}, {"instruction": "Write a SQL query to find the name of the top 10 highest salary employees in the company.", "input": "", "output": "SELECT TOP 10 Name, Salary FROM Employees ORDER BY Salary DESC;", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to sort them in an ascending order.", "input": "arr = [23, 32, 19, 17, -5, 3]", "output": "let arrLength = arr.length;\nlet temp;\n\nfor(i = 0; i < arrLength; i++){\n   for(j = 0; j < (arrLength - i - 1); j++){\n\t   // Compare two adjacent elements\n       if(arr[j] > arr[j+1]){\n          // Swap them\n          temp = arr[j];\n          arr[j] = arr[j+1];\n          arr[j+1] = temp;\n       }\n    }\n}\n\nconsole.log(arr); // Output: [-5, 3, 17, 19, 23, 32]", "category": "Python"}, {"instruction": "Provide a list of all the functionality available to a React Native application.", "input": "", "output": "React Native applications will have access to a range of features, such as:\n\n- Navigation\n- Data store\n- Image and video manipulation\n- Network and internet data access\n- Geolocation\n- Offline storage \n- Push notifications\n- Animations\n- Accessibility \n- Internationalization\n- Integration with third-party platforms/APIs", "category": "Python"}, {"instruction": "Given an array of integers, write JavaScript code to find the largest number amongst the array elements.", "input": "arr = [5, 10, 2, 7, 3]", "output": "let largestNumber = arr.reduce(\n  (mostRecentLargest, currentItem) => \n    currentItem > mostRecentLargest ? \n    currentItem : mostRecentLargest\n);\n\nconsole.log(largestNumber); // Output: 10", "category": "Python"}, {"instruction": "Create a function to calculate the factorial of 5 using Python.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   else: \n       return n * factorial(n-1) \nprint(factorial(5)) # Output: 120", "category": "Python"}, {"instruction": "Compile a given c code and debug the program to find the exact output.", "input": "#include<stdio.h>\n\nint main() \n{ \n    char str[] = \"Hello\"; \n    char *p; \n    p = &str[2]; \n    printf(\"%c\\n\", *(p++)); \n    printf(\"%c\", *p); \n    return 0; \n}", "output": "ll\no", "category": "Python"}, {"instruction": "Construct a while loop with an if-else statement in Java to print all odd numbers between 1 to 10.", "input": "", "output": "int i = 1;\nwhile (i <= 10) { \n    if (i % 2 != 0) {\n        System.out.print(i + \" \"); \n    }\n    i++;\n}", "category": "Python"}, {"instruction": "Create a function to check if two strings are an anagram of one another using Python.", "input": "str1 = 'cat'\nstr2 = 'tac'", "output": "def anagram_checker(str1, str2): \n    if (len(str1)==len(str2)): \n        if (\"\".join(sorted(str1.lower())) == \"\".join(sorted(str2.lower()))): \n            return True\n        else: \n            return False", "category": "Python"}, {"instruction": "Write a C++ program that prints out the numbers from 1 to 100, with the exception of numbers divisible by 3 being replaced with \"Fizz\", and numbers divisible by 5 replaced with \"Buzz\".", "input": "", "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for(int i = 1; i <= 100; i++) {\n        if((i % 3 == 0) && (i % 5 == 0)) {\n            cout << \"FizzBuzz\" << endl;\n        } else if (i % 3 == 0) {\n            cout << \"Fizz\" << endl;\n        } else if (i % 5 == 0) {\n            cout << \"Buzz\" << endl;\n        } else {\n            cout << i << endl;\n        }\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "What is the principal difference between a linked list and an array?", "input": "", "output": "The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array.", "category": "Python"}, {"instruction": "Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string.", "input": "string = \"This is a string of characters\"", "output": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    return letter_count\n\nprint(count_letters(string))", "category": "Python"}, {"instruction": "Design a function in Python to split a sentence into words", "input": "", "output": "def split_sentence(sentence):\n    return sentence.split(' ')", "category": "Python"}, {"instruction": "Generate a code in Java to loop through an array.", "input": "", "output": "for (int i = 0; i < array.length; i++) { \n     //do something \n}", "category": "Python"}, {"instruction": "Given a list of numbers, create a function in JavaScript to return the sum of all its elements.", "input": "[1,2,3,4]", "output": "const sumArray = arr => arr.reduce((acc,cur) => acc + cur, 0);", "category": "Python"}, {"instruction": "Write the following pseudocode in python", "input": "\"for each element in the list, check if the number is even\"", "output": "for element in some_list:\n    if element % 2 == 0:\n        # do something", "category": "Python"}, {"instruction": "Write a function in JavaScript to filter out all the strings from a list.", "input": "[1, \"Hi\", 55, false, \"Bye\"]", "output": "const filterStrings = arr => arr.filter(el => typeof el !== \"string\");", "category": "Python"}, {"instruction": "Suggest an API call in Java to generate a random number", "input": "", "output": "int randomNum = ThreadLocalRandom.current().nextInt(0, MAX_VALUE);", "category": "Python"}, {"instruction": "Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number.", "input": "[1,2,3], 4", "output": "def mul_list(input_list, number): \n    return [x*number for x in input_list]", "category": "Python"}, {"instruction": "Write a SQL query to get the top 5 scores for a given game.", "input": "", "output": "SELECT *\nFROM Scores\nORDER BY score DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Define a class in Python to represent a rectangle and add a method to calculate its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Create an HTML page that displays an alert when a page is visited.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Alert Message Box</title>\n  <script>\n    window.onload = function() {\n      alert(\"Welcome to my webpage!\");\n    }\n  </script>\n</head>\n<body>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a MySQL query to find the average salary of employees in an organisation.", "input": "", "output": "SELECT AVG(salary) as average_salary FROM employees;", "category": "Python"}, {"instruction": "Create an array of objects in JavaScript and log them in the console.", "input": "[\n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]", "output": "let people = [ \n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]\n\nconsole.log(people)", "category": "Python"}, {"instruction": "Using HTML and CSS, design a landing page for a blog website.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Blog</title>\n  <style>\n  .container{\n    width:850px;\n    height: 850px;\n    background-color: #F5F5FF;\n    margin:auto;\n    padding: 20px;\n    box-shadow: 0px 0px 7px 1px rgba(0,0,0,0.3);\n  }\n  .header{\n    background-color: #323B45;\n    font-size: 48px;\n    font-weight: bold;\n    color: #FFF;\n    padding-left: 20px;\n    padding-top: 15p\n    </style>\n\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">Welcome to My Blog</div>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to find the average age of people living in the UK.", "input": "", "output": "SELECT AVG(TIMESTAMPDIFF(YEAR, date_of_birth, CURRENT_DATE)) as average_age FROM people WHERE country = 'UK';", "category": "Python"}, {"instruction": "Using JavaScript, write an algorithm to print all the Fibonnaci numbers up to a given number n.", "input": "n = 10", "output": "function printFibonacci(n) {\n       let fibo = [0, 1];\n \n       if (n <= 2) {\n           return 1;\n       }\n \n       for (let i = 2; i <=n; i++ ){\n           fibo[i] = fibo[i-1]+fibo[i-2];\n       }\n \n      return fibo;\n } \n \n console.log(printFibonacci(n));", "category": "Python"}, {"instruction": "Create a function in JavaScript to remove all occurrences of a specified value from an array.", "input": "[1, 2, 3, 2, 4], 2", "output": "function removeElement(arr, val) {\n    return arr.filter(x => x !== val);\n}", "category": "Python"}, {"instruction": "Create a JavaScript statement to output the prompt \"Please enter your name:\".", "input": "", "output": "prompt(\"Please enter your name:\");", "category": "Python"}, {"instruction": "Output the following statement in bash: \"Hello world!\"", "input": "", "output": "echo \"Hello world!\"", "category": "Python"}, {"instruction": "Create a function to search a list l for the value v.", "input": "list l = [1, 2, 3, 4, 5, 6]\nvalue v = 4", "output": "def search_list(l, v):\n    # Iterate through the list\n    for i in l:\n        # Check if the current item is equal to v\n        if i == v:\n            return True\n    \n    # Return False if we did not find the value\n    return False\n\n# Search for the value 4\nsearch_list([1, 2, 3, 4, 5, 6], 4) # Output: True", "category": "Python"}, {"instruction": "Create a class Animal with two methods: speak(), which prints out the sound the animal makes, and eat() which prints out the food the animal eats.", "input": "", "output": "class Animal():\n    def __init__(self):\n        pass\n    def speak(self):\n        print(\"Animal sound\")\n    def eat(self):\n        print(\"Animal food\")", "category": "Python"}, {"instruction": "Compare two sorted lists and return the elements that are present in both lists.", "input": "list1 = [1, 3, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]", "output": "[3, 5, 6]", "category": "Python"}, {"instruction": "Sort a given array of numbers [4, 2, 5, 3, 1] in ascending order.", "input": "[4, 2, 5, 3, 1]", "output": "[1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Generate a random list of 20 numbers between 1 and 100.", "input": "", "output": "[86, 19, 2, 8, 12, 37, 43, 48, 63, 68, 21, 4, 39, 55, 87, 23, 69, 61, 44, 91]", "category": "Python"}, {"instruction": "Create a code that sums the first n Fibonacci numbers.", "input": "num = 5", "output": "def sum_n_fibonacci_numbers(num):\n    \"\"\"This function takes in a number, n, and sums\n    the first n Fibonacci numbers.\n    \n    Parameters\n    ----------\n    num : int\n        The number of Fibonacci numbers to sum.\n    \n    Returns\n    -------\n    The sum of the first n Fibonacci numbers.\n    \"\"\"\n    \n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-2] + fib[i-1])\n        return sum(fib)", "category": "Python"}, {"instruction": "Create a function that takes in two lists of numbers and returns a new list of numbers in which each element is the sum of the corresponding elements in the two input lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists_elementwise(list1, list2):\n    \"\"\"This function takes in two lists of numbers and \n    returns a new list of numbers in which each element\n    is the sum of the corresponding elements in the \n    two input lists.\n    \n    Parameters\n    ----------\n    list1 : list\n        The first list of numbers.\n    list2 : list\n        The second list of numbers.\n    \n    Returns\n    -------\n    A new list in which each element is the sum of the\n    corresponding elements in the two input lists.\n    \"\"\"\n    \n    return [x + y for x, y in zip(list1, list2)]", "category": "Python"}, {"instruction": "Create a code to sort a list of strings based on the length of the strings.", "input": "my_list = ['apples', 'bananas', 'oranges']", "output": "def sort_strings_by_length(my_list):\n    \"\"\"This function takes in a list of strings and sorts\n    them based on the length of the strings.\n    \n    Parameters\n    ----------\n    my_list : list\n        The list of strings.\n    \n    Returns\n    -------\n    The sorted list of strings.\n    \"\"\"\n    \n    return sorted(my_list, key=len)", "category": "Python"}, {"instruction": "Given a list of words, create a reverse lookup dictionary (word as key, indices as values).", "input": "words = ['apple', 'ball', 'cat', 'ball']", "output": "words = ['apple', 'ball', 'cat', 'ball']\n\nreverse_lookup = {word: [i for i, v in enumerate(words) if v == word] for word in set(words)}", "category": "Python"}, {"instruction": "Create a function that takes in a dictionary and returns a new dictionary with the values squared.", "input": "my_dict = {1:5, 2:6, 3:7}", "output": "def squared_values(my_dict):\n    \"\"\"This function takes in a dictionary as an argument,\n    and returns a new dictionary containing the values of the\n    original dictionary squared.\n    \n    Parameters\n    ----------\n    my_dict : dict\n        The input dictionary.\n    Returns\n    -------\n    A new dictionary with the values of the original\n    dictionary squared.\n    \"\"\"\n    \n    return {k : v**2 for k, v in my_dict.items()}", "category": "Python"}, {"instruction": "Create a JavaScript object to store information about an employee.", "input": "", "output": "const employee = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  job: \"Engineer\",\n  salary: 5000\n};", "category": "Python"}, {"instruction": "Create a JavaScript constant to define a tax rate.", "input": "", "output": "const TAX_RATE = 0.2;", "category": "Python"}, {"instruction": "Output the most frequent letter in a given string s.", "input": "String s = \"Hello World!\"", "output": "String s = \"Hello World!\"\n\n// Create a HashMap to store frequency of each letter\nMap<Character, Integer> freqMap = new HashMap<>();\n\n// Loop through the string\nfor(char c : s.toCharArray())\n{\n  int freq = freqMap.getOrDefault(c, 0);\n  // Update the frequency map\n  freqMap.put(c, freq + 1);\n}\n\n// Find the letter with the highest frequency\nint maxFreq = 0;\nchar maxLetter = ' ';\nfor(Map.Entry<Character, Integer> entry : freqMap.entrySet())\n{\n  int freq = entry.getValue();\n  if (freq > maxFreq) {\n    maxFreq = freq;\n    maxLetter = entry.getKey();\n  }\n}\n\n// Output the most frequent letter\nSystem.out.println(maxLetter); // Output: l", "category": "Python"}, {"instruction": "Create an if statement to check if an integer i is between 1 and 10.", "input": "", "output": "if (i >= 1 && i <= 10) {\n  // code to run if the condition is true\n}", "category": "Python"}, {"instruction": "Create a loop to iterate through the elements of an array arr.", "input": "", "output": "for (int i = 0; i < arr.length; i++) { \n  // code to run for each element\n}", "category": "Python"}, {"instruction": "How would you describe the process of creating a class in Java?", "input": "", "output": "Creating a class in Java involves declaring its name, adding any essential fields and methods, and implementing any desired constructors. The class will then be available for use with other classes in the program.", "category": "Python"}, {"instruction": "List the combinations of two lists l1 and l2.", "input": "list l1 = [1, 2]\nlist l2 = [a, b]", "output": "[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]", "category": "Python"}, {"instruction": "Write a PHP function to compare two strings s1 and s2.", "input": "", "output": "function compareStrings($s1, $s2) {\n    if (strcmp($s1, $s2) == 0) {\n        return \"Strings are equal.\";\n    } \n    elseif (strlen($s1) > strlen($s2)) {\n        return \"String 1 is longer than String 2.\";\n    } \n    elseif (strlen($s2) > strlen($s1)) {\n        return \"String 2 is longer than String 1.\";\n    }\n    else {\n        return \"Strings are not equal.\";\n    }\n}", "category": "Python"}, {"instruction": "Write a query in SQL to select records with a timestamp between two dates.", "input": "Start date: 2020-02-10\nEnd date: 2020-02-15", "output": "SELECT * FROM table\nWHERE timestamp BETWEEN '2020-02-10' AND '2020-02-15';", "category": "Python"}, {"instruction": "Given a list of prices, use a comprehension to calculate the average price.", "input": "prices = [2.50, 3.25, 4.00, 1.75]", "output": "prices = [2.50, 3.25, 4.00, 1.75]\n\navg_price = sum([price for price in prices])/len(prices)", "category": "Python"}, {"instruction": "Normalize the given string to lowercase and remove all punctuation marks.", "input": "Hey! How are you?", "output": "hey how are you", "category": "Python"}, {"instruction": "Design a function that provides the square root of a number x.", "input": "", "output": "def square_root(x):\n    return x ** 0.5", "category": "Python"}, {"instruction": "Replace the following if-else statement with a ternary operator.", "input": "if n > 0:\n  x = n * 10\nelse:\n  x = n * 5", "output": "x = n * 10 if n > 0 else n * 5", "category": "Python"}, {"instruction": "Compute the mean of a list of integers within the range of 1-5.", "input": "[1, 2, 4, 3, 5]", "output": "mean = 3.0 \n\n# Calculate the sum of the list\ntotal = 0\nfor i in range(len(list)):\n total += list[i]\n \n# Calculate the mean\nmean = total / len(list)", "category": "Python"}, {"instruction": "How can we inverse the numerical order of elements stored in an array?", "input": "", "output": "To invert the order of elements stored in an array, we can use the reverse() function. This function takes in an array and reverses the order of the elements in-place, returning nothing. The syntax is as follows:\n\narray.reverse()", "category": "Python"}, {"instruction": "Construct an XML document for storing a collection of books and their authors.", "input": "", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n \n<books>\n  <book id=\"1\">\n    <title>Book 1</title>\n    <author>John Doe</author>\n  </book>\n  <book id=\"2\">\n    <title>Book 2</title>\n    <author>Jane Doe</author>\n  </book>\n  <book id=\"3\">\n    <title>Book 3</title>\n    <author>Robert Smith</author>\n  </book>\n</books>", "category": "Python"}, {"instruction": "Create a dynamic web page using HTML and CSS to display a list of books.", "input": "", "output": "<html>\n  <head>\n    <style>\n      ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n      }\n \n      li {\n        font-family: sans-serif;\n        font-size: 20px;\n        padding: 10px;\n        border-bottom: 1px solid #ccc;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>\n        <b>Book 1</b>\n        <br>\n        Author: John Doe\n        <br>\n        Year: 2020\n      </li>\n      <li>\n        <b>Book 2</b>\n        <br>\n        Author: Jane Doe\n        <br>\n        Year: 2019\n      </li>\n      <li>\n        <b>Book 3</b>\n        <br>\n        Author: Robert Smith\n        <br>\n        Year: 2021\n      </li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Design an algorithm that sorts a given array of integers in ascending order.", "input": "[5, 4, 2, 6, 1]", "output": "def sort_array(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  return arr", "category": "Python"}, {"instruction": "Write a Recurrent Neural Network (RNN) in Keras for sentence classification.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense\n\nmodel = Sequential()\n\n# input layer with embedding\nmodel.add(Embedding(input_dim = vocab_size, output_dim = 32, input_length = max_length))\n\n# lstm layer\nmodel.add(LSTM(16))\n\n# output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# train the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=128)\n\n# evaluate the model\nscore = model.evaluate(X_test, y_test, batch_size=128)", "category": "Python"}, {"instruction": "Develop a web application that converts text to speech.", "input": "", "output": "<html>\n<head>\n  <title>Text to Speech</title>\n  <script src=\"https://code.responsivevoice.org/responsivevoice.js?key=KEY_HERE\"></script>\n</head>\n<body>\n  <textarea id=\"text-input\" rows=\"10\" cols=\"50\"></textarea><br>\n  <button type=\"button\" onclick=\"responsiveVoice.speak(document.getElementById('text-input').value)\">Speak</button>\n  <button type=\"button\" onclick=\"responsiveVoice.cancel()\">Stop</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an Android app for creating and playing a quiz competition.", "input": "", "output": "public class QuizApp extends Activity {\n\nprivate ArrayList<QuizQuestion> questions;\n\npublic void onCreate(Bundle bundle) {\n    questions = new ArrayList<QuizQuestion>();\n    // other code\n    // such as setting the layout \n    // and adding questions to the list\n}\n\npublic void showQuestion() {\n    // code to show new question\n    // such as setting the text/image\n    // showing the options, etc.\n}\n\npublic void selectAnswer(int answerIndex) {\n    // code to check if the selected answer is\n    // correct or wrong\n    // and show correct or wrong message\n}\n\npublic void changeQuestion() {\n    // code to show next question    \n} \n\n}", "category": "Python"}, {"instruction": "Create a Java class for car objects.", "input": "", "output": "public class Car {\n\n    private String make;\n    private String model;\n    private int year;\n\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public int getYear() {\n        return year; \n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n}", "category": "Python"}, {"instruction": "Design a response that matches the following JSON format.", "input": "{\n\"response\": \n  { \n    \"data\": \"hello\"\n  }\n}", "output": "{\n\"response\": {\n\"data\": \"hello\",\n\"status\": \"ok\"\n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all the books written by a specific author.", "input": "author: \"Robert Louis Stevenson\"", "output": "SELECT * \nFROM books \nWHERE author = \"Robert Louis Stevenson\"", "category": "Python"}, {"instruction": "Construct an HTML table with two columns and 4 rows.", "input": "", "output": "<table>\n  <tr>\n    <th>First Column</th>\n    <th>Second Column</th>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n  <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write Java code to generate random numbers between 0 and 10.", "input": "", "output": "Random rand = new Random(); \n  \n// Generate random integers in range 0 to 10 \nint rand_int1 = rand.nextInt(11);", "category": "Python"}, {"instruction": "How can we sort a dictionary by value in Python?", "input": "", "output": "We can use the sorted() function in combination with the operator.itemgetter() operator to sort the dictionary by value in Python. The syntax is as follows:\n\nsorted(dictionary.items(), key=operator.itemgetter(1))", "category": "Python"}, {"instruction": "Update a given line of code to make a function return 'True' if both values are equal.", "input": "def compare(val1, val2):\n    if val1 == val2:", "output": "def compare(val1, val2):\n    if val1 == val2:\n      return True", "category": "Python"}, {"instruction": "Generate a unique key using the following string.", "input": "my_str = \"Hello World\"", "output": "import uuid \n \nkey = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)", "category": "Python"}, {"instruction": "Determine the maximum of two numbers.", "input": "num1 = 10\nnum2 = 15", "output": "max_num = max(num1, num2)", "category": "Python"}, {"instruction": "Complete the given function to print the Cartesian product of two sets.", "input": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):", "output": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):\n\tC = set()\n\tfor a in A:\n\t\tfor b in B:\n\t\t\tC.add((a, b))\n\treturn C", "category": "Python"}, {"instruction": "Fix the following function to make it comply with PEP8 standards.", "input": "def f(x):\nk= x+4\nreturn k", "output": "def f(x):\n    k = x + 4\n    return k", "category": "Python"}, {"instruction": "Add the `color` parameter to this function and make sure it works properly.", "input": "def printShape(num, shape):\n    for i in range(0,num):\n        print(shape)", "output": "def printShape(num, shape, color):\n\tfor i in range(0, num):\n\t\tprint(color + shape)", "category": "Python"}, {"instruction": "Process the given HTML code to get the output as shown.", "input": "<div>\n    An article about \n    <a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python Programming Language</a> \n    <br/>\n    <b>Last updated: 2019/05/09 </b>\n</div>", "output": "response = {\n  'title': 'Python Programming Language',\n  'last_updated': '2019/05/09'\n}", "category": "Python"}, {"instruction": "Given the following function that takes in a string and returns true if it is a palindrone. Rewrite the function to make it more optimized.", "input": "def is_palindrome(s):\n    s = str(s).lower().replace(\" \",\"\")\n    return s == s[::-1]", "output": "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s == s[::-1]", "category": "Python"}, {"instruction": "Create an inheritance hierarchy of three classes, \"Person\", \"Student\" and \"Professor\"", "input": "", "output": "class Person { \n  // properties and methods\n} \n  \nclass Student extends Person { \n  // properties and methods\n} \n  \nclass Professor extends Person { \n  // properties and methods\n}", "category": "Python"}, {"instruction": "How would you create a socket connection between two computers in a network?", "input": "", "output": "Creating a socket connection between two computers in a network involves setting up a Socket Server on one of the computers and a Socket Client on the other computer. The computer with the Socket Server will need to listen for any incoming connection. Then, the computer with the Socket Client will send a connection request to the Socket Server. When the connection is established, data can then be transmitted between the two computers.", "category": "Python"}, {"instruction": "Sort the following list of dictionaries by the values of the keys.", "input": "lst = [\n{'a':2},\n{'a':3},\n{'a':1}\n]", "output": "lst = [\n{'a':2},\n{'a':3},\n{'a':1}\n]\n\nsorted_list = sorted(lst, key=lambda k: k['a'])", "category": "Python"}, {"instruction": "Write a CSS code to make the background color of all paragraph elements in a page blue.", "input": "", "output": "p {\n  background-color: blue;\n}", "category": "Python"}, {"instruction": "How would you calculate the sum of all integers between two given integers?", "input": "", "output": "The sum of all integers between two given integers can be calculated by using the formula: sum = (first integer + last integer) * (last integer - first integer + 1) / 2.", "category": "Python"}, {"instruction": "Find the runtime complexity of the following algorithm in Big-O notation.", "input": "def add_array_elements(arr):\n    n = len(arr) \n    sum_elements = 0\n    for i in range(0, n): \n        sum_elements += arr[i] \n    return sum_elements", "output": "The runtime complexity of the algorithm in Big-O notation is O(n), where n is the length of the array.", "category": "Python"}, {"instruction": "Answer the following question: What is the difference between a keyword and an identifier in Python?", "input": "", "output": "In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects.", "category": "Python"}, {"instruction": "Rework the following code so that it prints the same output with fewer lines of code.", "input": "int x = 13;\nif (x == 13) {\n  System.out.println(\"x is 13\");\n}", "output": "int x = 13;\nSystem.out.println(x == 13 ? \"x is 13\" : \"\");", "category": "Python"}, {"instruction": "Create a type with 4 fields, including \"name\", \"address\", \"phone\", and \"email\".", "input": "", "output": "type ContactInfo {\n  name: string;\n  address: string;\n  phone: string;\n  email: string;\n}", "category": "Python"}, {"instruction": "Reverse the words of the sentence \"The quick brown fox jumps over the lazy dog\".", "input": "", "output": "dog lazy the over jumps fox brown quick The", "category": "Python"}, {"instruction": "Construct an object in JavaScript to model a car with make, model, year, color, and price as attributes.", "input": "", "output": "let car = { \n    make:'', \n    model:'', \n    year:'', \n    color:'', \n    price:0 \n};", "category": "Python"}, {"instruction": "Write a SQL query to find all the unique (distinct) values in a column named \"Name\".", "input": "", "output": "SELECT DISTINCT Name FROM table_name;", "category": "Python"}, {"instruction": "Sort this array of numbers from low to high.", "input": "[21, 8, 18, 32, 56]", "output": "[8, 18, 21, 32, 56]", "category": "Python"}, {"instruction": "Create an HTML form with five input fields, textbox, dropdown, checkbox, radio buttons and a submit button.", "input": "", "output": "<form>\n <input type=\"text\" name=\"name\" />\n <select> \n  <option value=\"\">Select an Option</option> \n </select> \n <input type=\"checkbox\" name=\"check\" />\n <input type=\"radio\" name=\"group1\" value=\"option1\" />\n <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "What is the syntax to declare a class in JavaScript?", "input": "", "output": "class MyClassName {\n   constructor(data) {\n      // some code\n   }\n   // other methods\n}", "category": "Python"}, {"instruction": "How could we modify the following code to add an item to a list?", "input": "list = [1, 2, 3]", "output": "We can use the list.append() method to add an item to the list:\n\nlist.append(4) # Adds the item 4 to the list", "category": "Python"}, {"instruction": "How could we modify the following code to capture user input?", "input": "num = 5", "output": "We can use the built-in input() function to capture user input in this code:\n\nnum = input(\"Please enter a number: \")", "category": "Python"}, {"instruction": "Explain the use of semicolon in the following python code.", "input": "a = 5; b = 6; c = 7;", "output": "The semicolon is used here to separate multiple statements on the same line. In this case, the code is assigning values to variables; by separating these assignments with semicolons, they are all evaluated in a single statement as opposed to writing three separate statements.", "category": "Python"}, {"instruction": "Create a Python class to store attributes of a student", "input": "", "output": "class Student:\n    def __init__(self, name, grade, age):\n        self.name = name\n        self.grade = grade\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_grade(self):\n        return self.grade\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Write a JavaScript code that creates a new array populated with the elements that exist in both of the given arrays.", "input": "arr1 = [1, 2, 3, 4, 5];\narr2 = [4, 5, 6, 7, 8];", "output": "let arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [4, 5, 6, 7, 8];\n\nlet newArr = arr1.filter(num => arr2.includes(num));\nconsole.log(newArr);", "category": "Python"}, {"instruction": "Write a regex that matches the strings \"apple\" and \"match\".", "input": "", "output": "/(apple)|(match)/", "category": "Python"}, {"instruction": "Edit the following PHP code so it does not print out the error message \"Notice: Undefined variable\".", "input": "<?php\n \n$name = \"John\";\n\necho \"Hello, $name!\";\n?>", "output": "<?php\n \n$name = \"John\";\n\nif (isset($name)) {\n    echo \"Hello, $name!\";\n}\n?>", "category": "Python"}, {"instruction": "Reverse the list without using built-in list functions", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a program that prints the triangle pattern given a number of rows.", "input": "5", "output": "* \n* * \n* * * \n* * * * \n* * * * *", "category": "Python"}, {"instruction": "Compile and run the following Java code.", "input": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}", "output": "<noinput>\nOutput:\nHello, world!", "category": "Python"}, {"instruction": "Edit this HTML code so it uses classes instead of IDs.", "input": "<div id=\"main\">\n   <h1 id=\"heading\">Heading</h1>\n   <p id=\"body\">Some text here</p>\n</div>", "output": "<div class=\"main\">\n   <h1 class=\"heading\">Heading</h1>\n   <p class=\"body\">Some text here</p>\n</div>", "category": "Python"}, {"instruction": "Solve this challenge using Java.", "input": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].", "output": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int [] result = new int[2];\n        for(int i=0;i<nums.length;i++){\n            for (int j=i+1;j<nums.length;j++){\n                if (nums[i]+nums[j]==target){\n                    result[0]=i;\n                    result[1]=j;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following function without using the ``for`` loop.", "input": "def double_array(array):\n    for i in range(len(array)):\n        array[i] *= 2", "output": "def double_array(array):\n    array[:] = [x * 2 for x in array]", "category": "Python"}, {"instruction": "Print each character in the given string", "input": "string = \"Hello World\"", "output": "for char in string:\n    print(char)", "category": "Python"}, {"instruction": "Construct a loop to print all the items in the list.", "input": "items = [\"apple\", \"banana\", \"cherry\"]", "output": "for item in items:\n    print(item)", "category": "Python"}, {"instruction": "Generate a code segment that prints all the elements of a 2-dimensional array.", "input": "", "output": "for array in 2d_array:\n    for element in array:\n        print(element)", "category": "Python"}, {"instruction": "Write a SQL query to list the names of all the customers with credit score greater than 800.", "input": "", "output": "SELECT name FROM customer WHERE credit_score > 800;", "category": "Python"}, {"instruction": "Edit the following code to add a try-except block and print an error message on an exception.", "input": "arr = [1, 2, 3]\n\ni = 4\n\nprint(arr[i])", "output": "arr = [1, 2, 3]\n\ni = 4\n\ntry:\n    print(arr[i])\nexcept IndexError:\n    print(\"Index out of bounds. Please specify a valid index.\")", "category": "Python"}, {"instruction": "How could we modify the following code to handle potential errors when computing sum?", "input": "num1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\nsum = int(num1) + int(num2)", "output": "num1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\ntry: \n    sum = int(num1) + int(num2)\nexcept ValueError:\n    print(\"Error: Please enter a valid number.\")", "category": "Python"}, {"instruction": "Given a binary tree, write a function to determine whether it is a valid binary search tree.", "input": "", "output": "def is_valid_bst(root):\n\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum subarray sum within the provided input array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))", "category": "Python"}, {"instruction": "Given a linked list, write a function to find the nth to last node.", "input": "", "output": "def nth_to_last_node(head, n):\n    left_ptr = head\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\n\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)", "category": "Python"}, {"instruction": "Create a database table to store user information such as name, phone number, and address.", "input": "", "output": "CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(25) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Given a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.", "input": "[[1, 5, 4], [2, 3, 4], [1, 9, 3]]", "output": "def max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))", "category": "Python"}, {"instruction": "Generate a random string of 16 characters containing both alphabetical and numerical characters.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    characters = string.ascii_letters + string.digits\n    random_string = ''.join(random.choices(characters, k=16))\n    return random_string\n\nif __name__ == '__main__':\n    print(random_string())", "category": "Python"}, {"instruction": "Implement a function that can convert a given string to an integer.", "input": "\"123\"", "output": "def string_to_int(num):\n    return int(num)", "category": "Python"}, {"instruction": "Create an array of size 128 with values initialized to 0.", "input": "", "output": "array = [0] * 128", "category": "Python"}, {"instruction": "Implement a function to compute the binomial coefficient.", "input": "", "output": "def compute_binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return compute_binomial_coefficient(n-1,k-1) + compute_binomial_coefficient(n-1,k)", "category": "Python"}, {"instruction": "Write a function to tokenize a given sentence into words.", "input": "I am a programmer", "output": "def tokenize_sentence(sentence):\n    tokens = sentence.split()\n    return tokens", "category": "Python"}, {"instruction": "Implement a basic calculator that can compute simple math expressions.", "input": "9 * 2", "output": "def calculate(expr):\n    return eval(expr)", "category": "Python"}, {"instruction": "Write a a code to find all the prime numbers from 0 to 100", "input": "", "output": "# create a list of all the prime numbers\nprime_list = []\n\n# iterate through 0 to 100\nfor i in range(1,101):\n    if i > 1:\n        # loop through 2 to i/2\n        for j in range(2,i//2):\n            # if i is divisible by j, then it is not a prime number\n            if (i % j) == 0:\n                break\n        else:\n            # add the prime number to the prime list\n            prime_list.append(i)\n\nprint(prime_list) # prints the list of all prime numbers from 0 to 100.", "category": "Python"}, {"instruction": "Modify the following code to use a for loop to print the numbers 0 to 9", "input": "", "output": "for i in range(10): \n    print(i) # prints the numbers 0 to 9", "category": "Python"}, {"instruction": "Remove the duplicates in a list.", "input": "arr = [1,2,1,2,3]", "output": "arr = [1,2,1,2,3]\n\nres = []\nfor x in arr: \n    if x not in res: \n        res.append(x)\nprint(res) # prints [1,2,3], which is the list without any duplicates.", "category": "Python"}, {"instruction": "Create a function in python to find the minimum value in an array.", "input": "arr = [3,6,2,7,1]", "output": "def find_min(arr): \n    min = arr[0] \n    for x in arr: \n        if x < min: \n            min = x \n    return min\n\nresult = find_min(arr)\nprint(result) # prints 1, which is the minimum in the array.", "category": "Python"}, {"instruction": "Explain the purpose of a static method in a Python class", "input": "", "output": "A static method is a method that is bound to a class rather than an object. It does not require an instance of the class to be created in order to be called, and it does not have access to the attributes or methods of an instance of that class. Static methods are usually used to provide methods for manipulation of class attributes and/or to provide utility methods for the class.", "category": "Python"}, {"instruction": "Write a code to perform a linear search in a given list.", "input": "[1, 6, 2, 8, 5], 8", "output": "def linear_search(my_list, x):\n    for i in range(len(my_list)):\n        if my_list[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Create a jQuery script to make all elements with a class name 'member' togglable.", "input": "", "output": "$(document).ready(function() {\n  $(\".member\").click(function() {\n    $(this).toggle();\n  });\n});", "category": "Python"}, {"instruction": "Parse the given XML document and print out the text content of the \"title\" element.", "input": "<doc>\n  <title>This is a title</title>\n</doc>", "output": "import xml.etree.ElementTree as et\n\nroot = et.fromstring(\"<doc><title>This is a title</title></doc>\")\ntitle = root.find('title')\nprint(title.text)", "category": "Python"}, {"instruction": "Convert the string \"hello world\" to a byte array", "input": "", "output": "b'hello world'", "category": "Python"}, {"instruction": "Create a Java program that prints out the Fibonacci series within a given range", "input": "Range = (5, 15)", "output": "public class FibonacciRange {\n\t \n\tpublic static void main(String args[]) {\n\t\t// Set the range\n\t\tint lowerLimit=5, upperLimit=15;\n\t\t\n\t\t// Print the fibonacci series\n\t\tfor (int number = lowerLimit; number <= upperLimit; number++) {\n\t\t\tSystem.out.print(fibonacciSeries(number) +\" \");\n\t\t}\n\t}\n \n\t// Generates the fibonacci series\n\tpublic static int fibonacciSeries(int fibonacciNumber) {\n\t\tif (fibonacciNumber == 1 || fibonacciNumber == 2) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn fibonacciSeries(fibonacciNumber - 1) + fibonacciSeries(fibonacciNumber - 2);\n\t}\n}", "category": "Python"}, {"instruction": "Create a program that reverses an array", "input": "Array = [1,2,3,4,5]", "output": "def reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\narr = [1,2,3,4,5]\n\nprint(reverse(arr))", "category": "Python"}, {"instruction": "Create a code that removes all duplicates from an input array", "input": "Array = [1,2,3,3,2,1]", "output": "def remove_duplicates(arr):\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n\narr = [1,2,3,3,2,1]\n\nprint(remove_duplicates(arr))", "category": "Python"}, {"instruction": "Generate appropriate SQL query that extracts the preferred occupation of people aged between 25 and 35", "input": "Noinput", "output": "SELECT occupation FROM people WHERE age BETWEEN 25 AND 35;", "category": "Python"}, {"instruction": "Create a proper HTML string that presents a table with 3 columns", "input": "", "output": "<table border = \"1\">\n    <tr>\n        <th>Column1</th>\n        <th>Column2</th>\n        <th>Column3</th>\n    </tr>\n    <tr>\n        <td>Value1</td>\n        <td>Value2</td>\n        <td>Value3</td>\n    </tr>                    \n</table>", "category": "Python"}, {"instruction": "Write a Python script to generate random passwords with a combinations of 6 letters and numbers.", "input": "", "output": "import random\n\ndef generate_password(): \n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Update the 'name' column in the table 'users' to 'John' where the 'id' is 12.", "input": "", "output": "UPDATE users\nSET name = 'John'\nWHERE id = 12;", "category": "Python"}, {"instruction": "Divide num1 by num2 using Java.", "input": "num1 = 100\nnum2 = 8", "output": "int result = num1 / num2; // result = 12", "category": "Python"}, {"instruction": "Write a SQL query to select all customers with a due balance.", "input": "", "output": "SELECT * \nFROM customers \nWHERE balance_due > 0;", "category": "Python"}, {"instruction": "Translate the given sentence into Spanish.", "input": "The cat is sitting on the mat.", "output": "El gato est\u00e1 sentado en la alfombra.", "category": "Python"}, {"instruction": "Create a HTML page with a fixed header bar and a scrolling content area.", "input": "", "output": "<html> \n   <head> \n   </head> \n   <body> \n      <div id=\"header\">\n         <!-- header content -->\n      </div> \n      <div id=\"content\" style=\"overflow-y:scroll;\">\n         <!-- content here -->\n      </div> \n   </body> \n</html>", "category": "Python"}, {"instruction": "Create a SQL query to select all the records from the table \u2018fruit_list\u2019 that have an expiry date falling within the next 10 days.", "input": "", "output": "SELECT * \nFROM fruit_list \nWHERE expiry_date >= CURRENT_DATE \nAND expiry_date < CURRENT_DATE + INTERVAL 10 DAY;", "category": "Python"}, {"instruction": "Write a lambda function to add two given numbers.", "input": "", "output": "lambda x,y: x+y", "category": "Python"}, {"instruction": "Compute the modulus of num1 divided by num2 using C++.", "input": "num1 = 177\nnum2 = 31", "output": "27", "category": "Python"}, {"instruction": "Generate a randomly generated 8 character alphanumeric string.", "input": "", "output": "mZvx8ecz", "category": "Python"}, {"instruction": "Classify the following programming language as either a general-purpose language or a domain-specific language.", "input": "MATLAB", "output": "MATLAB is a domain-specific language.", "category": "Python"}, {"instruction": "Figure out the output type of the following instruction: \"print('Hello World')\".", "input": "", "output": "The output type is a string.", "category": "Python"}, {"instruction": "Create a dictionary where the keys are the letters of the alphabet and the values are integers from 1 to 26.", "input": "", "output": "alphabet_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}", "category": "Python"}, {"instruction": "Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation.", "input": "", "output": "class Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation", "category": "Python"}, {"instruction": "Define a variable in JavaScript to store a user's email address.", "input": "", "output": "let userEmail = 'user@example.com';", "category": "Python"}, {"instruction": "Write a JavaScript function to convert an object into a list of keys and values.", "input": "", "output": "function objectToList(obj) {\n    let keys = Object.keys(obj);\n    let values = Object.values(obj);\n    return keys.map((key, index) => [key, values[index]]);\n}", "category": "Python"}, {"instruction": "Create a looping statement in Python to print the alphabet in lowercase.", "input": "", "output": "for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)", "category": "Python"}, {"instruction": "Find the sum of all numbers in the following array of objects in JavaScript.", "input": "[{ num: 10 }, { num: 10 }, { num: 20 }, { num: 30 }]", "output": "let sum = 0;\narr.forEach(function(el){\n    sum += el.num;\n});\nconsole.log(sum); // 70", "category": "Python"}, {"instruction": "Create an array in JavaScript to store the coordinates of a rectangle.", "input": "", "output": "const coordinates = [\n    {x: 10, y: 10},\n    {x: 20, y: 20},\n    {x: 10, y: 20},\n    {x: 20, y: 10}\n];", "category": "Python"}, {"instruction": "Write a class in C++ to represent a person with their name and age.", "input": "", "output": "class Person {\n    private:\n        string name;\n        int age;\n    public:\n        Person(string n, int a) {\n            name = n;\n            age = a;\n        }\n        string getName() {\n            return name;\n        }\n        int getAge() {\n            return age;\n        }\n};", "category": "Python"}, {"instruction": "Provide a return statement for the following JavaScript function.", "input": "function getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n}", "output": "function getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n return age;\n}", "category": "Python"}, {"instruction": "Construct a for loop to iterate through a list of numbers and sum them together.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "total = 0\nfor number in numbers:\n    total += number\n\nprint(\"The sum is: \", total)", "category": "Python"}, {"instruction": "Edit the following code to register an account on a website.", "input": "import requests\n\nurl = \"www.example.com/register\"\ndata = \"username=myname\"", "output": "import requests\n\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\n\nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.", "input": "n = 8", "output": "def sum_series(n):\n sum = 0 \n for num in range(1, n + 1):\n sum += num**2\n return sum", "category": "Python"}, {"instruction": "Rewrite the above function in Python to use binary search algorithm instead of linear search.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1", "category": "Python"}, {"instruction": "Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def linear_search(data, search_num):\n for index, num in enumerate(data):\n  if num == search_num:\n   return index\n return -1", "category": "Python"}, {"instruction": "Write a function in Python to print a diamond pattern of stars.", "input": "", "output": "def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))", "category": "Python"}, {"instruction": "Create a Python Search Algorithm to search for a given number in a given sorted array.", "input": "data = [1, 7, 11, 14, 16]\nsearch_num = 14", "output": "def search(data, search_num):\n for i in range(len(data)):\n  if data[i] == search_num:\n   return i\n return -1", "category": "Python"}, {"instruction": "Write a function to remove all duplicates from a given list of numbers and sort the remaining elements in ascending order.", "input": "[1, 4, 3, 3, 7, 4, 8, 3]", "output": "def remove_duplicates(numbers):\n unique_numbers = set(numbers)\n sorted_numbers = sorted(unique_numbers)\n return sorted_numbers", "category": "Python"}, {"instruction": "Write a function in Python to generate all permutations of the given list of letters.", "input": "['a','b','c','d']", "output": "def permutations(letters):\n permutations = []\n for a in letters:\n for b in letters:\n for c in letters:\n for d in letters:\n permutations.append(''.join(sorted([a, b, c, d])))\n return permutations", "category": "Python"}, {"instruction": "How can this code be refactored to make it more efficient?", "input": "x = 100\nif (x > 50)\n  y = x + 20\nelse\n  y = x - 20", "output": "The code can be refactored as follows: y = x+20 if x > 50 else x-", "category": "Python"}, {"instruction": "Remove all the punctuation from a given string", "input": "\"Welcome to the world of computers!\"", "output": "import string\n\ndef remove_punctuation(text):\n    punctuations = string.punctuation\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuations:\n            no_punct += char\n    return no_punct\n\nif __name__ == '__main__':\n    text = 'Welcome to the world of computers!'\n    print(remove_punctuation(text))", "category": "Python"}, {"instruction": "Write MySQL code to create a table with the following columns", "input": "", "output": "CREATE TABLE table_name (\n   id INT NOT NULL,\n   first_name VARCHAR(255) NOT NULL,\n   last_name VARCHAR(255) NOT NULL,\n   email VARCHAR(255) NOT NULL,\n   age INT NOT NULL\n);", "category": "Python"}, {"instruction": "Find the GCD (greatest common divisor) of 12 and 18.", "input": "", "output": "6", "category": "Python"}, {"instruction": "Classify the following sentence as either statement or question.", "input": "\"She had taken the train to France.\"", "output": "Statement.", "category": "Python"}, {"instruction": "Edit the following HTML to create a 2-column form layout with labels.", "input": "<form>\n  <input type=\"text\" name=\"name\" placeholder=\"Name...\" />\n  <input type=\"email\" name=\"email\" placeholder=\"Email...\" />\n  <textarea name=\"message\" placeholder=\"Message...\" rows=\"4\" cols=\"50\"></textarea>\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form>\n  <div style=\"display: flex;\">\n      <div style=\"flex: 1;\">\n        <label>Name:</label>\n        <input type=\"text\" name=\"name\" placeholder=\"Name...\" />\n      </div>\n\n      <div style=\"flex: 1;\">\n        <label>Email:</label>\n        <input type=\"email\" name=\"email\" placeholder=\"Email...\" /> \n      </div>\n  </div>\n\n  <div style=\"display: flex;\">\n      <div style=\"flex: 1;\">\n        <label>Message:</label>\n        <textarea name=\"message\" placeholder=\"Message...\" rows=\"4\" cols=\"50\"></textarea>\n      </div>\n  </div>\n\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Design a MySQL query to find the number of distinct entries in a table.", "input": "", "output": "SELECT COUNT(DISTINCT(*) FROM table_name;", "category": "Python"}, {"instruction": "Develop a Python script to print out a given string 5 times.", "input": "str = \"Hello World!\"", "output": "for i in range(5):\n  print(str)", "category": "Python"}, {"instruction": "Construct a React component to display a login form.", "input": "", "output": "function LoginForm(){\n  return (\n    <form>\n      <label>\n        Username:\n        <input type=\"text\" name=\"username\" />\n      </label>\n      <label>\n        Password:\n        <input type=\"password\" name=\"password\" />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}", "category": "Python"}, {"instruction": "Generate a random UUID using Node.js.", "input": "", "output": "const uuid = require('uuid');\n\nconst randomUUID = uuid.v4();\nconsole.log(randomUUID);", "category": "Python"}, {"instruction": "Design a C++ program that prints out a Fibonacci series of numbers up to 20 elements.", "input": "", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n\tint ele, i, number[20]; \n\n\t//create the fibonacci series\n\tnumber[0] = 0; \n\tnumber[1] = 1; \n\n\tfor (i = 2; i < 20; i++) \n\t{\n\t\tnumber[i] = number[i-1] + number[i-2]; \n\t} \n\n\t//print the fibonacci series\n\tfor (i = 0; i < 20; i++) \n\t{\n\t\tcout << number[i] << \" \"; \n\t} \n\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Create a PHP script to store data in a MySQL database.", "input": "", "output": "<?php \n \n    $db_host = \"localhost\"; \n    $db_user = \"username\"; \n    $db_pass = \"password\"; \n    $db_name = \"database\"; \n \n    $con = mysqli_connect($db_host, $db_user, $db_pass, $db_name); \n \n    if( mysqli_connect_errno() ){ \n        die(\"Failed to connect to MySQL: \".mysqli_connect_error());\n    } \n \n    $sql = \"INSERT INTO table (name, age) VALUES ('John', 25)\"; \n    if( mysqli_query($con, $sql) ){ \n        echo \"Data stored!\"; \n    }else{ \n        echo \"Error: \".mysqli_error($con);\n    } \n \n    mysqli_close($con); \n?>", "category": "Python"}, {"instruction": "Write a JQuery script to hide an element on the page.", "input": "", "output": "$(document).ready(function(){\n  $('#element_id').hide();\n});", "category": "Python"}, {"instruction": "Compute the product of two matrices.", "input": "A [[2, 4], [3, 7]]\nB [[9, 2], [7, 1]]", "output": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)", "category": "Python"}, {"instruction": "Create a function that adds two integers and subtracts a third.", "input": "", "output": "def add_subtract(a, b, c):\n  return a + b - c", "category": "Python"}, {"instruction": "Create a new HTML page with two buttons.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Two Buttons</title>\n</head>\n<body>\n  <button>Button 1</button>\n  <button>Button 2</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript program to make an AJAX request.", "input": "", "output": "const request = new XMLHttpRequest(); \nrequest.open('GET', 'https://example.com/data.json'); \nrequest.onload = () => {\n    const data = JSON.parse(request.responseText); \n    // Handle response data \n};\nrequest.send();", "category": "Python"}, {"instruction": "Debug a Java program to correct a compile-time error.", "input": "public class Debug {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(\"Hello\");\n        list.add(\"World\");\n    }\n    System.out.println(list);\n}", "output": "public class Debug {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(\"Hello\");\n        list.add(\"World\");\n        for(String str : list){\n            System.out.println(str);\n        }\n    }\n}", "category": "Python"}, {"instruction": "How do you export a JavaScript variable as a global variable?", "input": "", "output": "To export a JavaScript variable as a global variable, use the \"window\" object and set the variable to a property of the window object. For example, to export the variable \"myVar\", use window.myVar = myVar;.", "category": "Python"}, {"instruction": "Write a Python class for a Person with attributes name, age, and address.", "input": "", "output": "class Person:\n  def __init__(self, name, age, address):\n    self.name = name\n    self.age = age\n    self.address = address\n    \n  def setName(self, name):\n    self.name = name\n  \n  def getName(self):\n    return self.name\n  \n  def setAge(self, age):\n    self.age = age\n  \n  def getAge(self):\n    return self.age\n  \n  def setAddress(self, address):\n    self.address = address\n  \n  def getAddress(self):\n    return self.address", "category": "Python"}, {"instruction": "Edit the following JavaScript to add validation to an input field.", "input": "<input type=\"text\" id=\"name\" name=\"name\" />", "output": "<input type=\"text\" id=\"name\" name=\"name\" onChange=\"validateName()\" />\n\n<script>\nfunction validateName() {\n  var name = document.getElementById(\"name\").value;\n  if (name.length < 5) {\n    alert(\"Name should contain at least 5 characters!\");\n  }\n}\n</script>", "category": "Python"}, {"instruction": "How do you add an element to the end of an array in Python?", "input": "", "output": "To add an element to the end of an array in Python, use the append() method. For example, to add the element \"apple\" to the end of the array [\"orange\", \"banana\"], use the following code:\n\nmy_array = [\"orange\", \"banana\"]\nmy_array.append(\"apple\")", "category": "Python"}, {"instruction": "Write a Python script to Iterate over a given list and print the square of the numbers in the list.", "input": "list = [3, 4, 5]", "output": "for num in list:\n  print(num*num)", "category": "Python"}, {"instruction": "Generate a 3x3 identity matrix.", "input": "", "output": "[[1, 0, 0], \n [0, 1, 0], \n [0, 0, 1]]", "category": "Python"}, {"instruction": "Calculate the dot product of two given 3x3 and 3x1 matrices.", "input": "Matrix 1:\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n\nMatrix 2:\n[1]\n[2]\n[3]", "output": "dot_product = 38", "category": "Python"}, {"instruction": "Implement a function in Python to reverse the contents of a given dictionary.", "input": "dictionary = {\n    \"name\": \"John Doe\", \n    \"age\": 30,\n    \"city\": \"New York\"\n    }", "output": "def reverse_dictionary(d): \n    return dict(zip(d.values(), d.keys())) \n\nprint(reverse_dictionary(dictionary))", "category": "Python"}, {"instruction": "Create a for loop in Python to find the combined length of all the strings in a list.", "input": "list = ['Data', 'Science', 'AI']", "output": "total_length = 0\n\nfor s in list:\n   total_length += len(s)\n\nprint(total_length)", "category": "Python"}, {"instruction": "Print the length of an array containing the numbers [6, 5, 9, 15].", "input": "", "output": "4", "category": "Python"}, {"instruction": "Compare two strings and identify the first index of a mismatch.", "input": "String 1: stack\nString 2: stacc", "output": "Index: 4", "category": "Python"}, {"instruction": "Assign a value of 123 to the variable x.", "input": "", "output": "x = 123", "category": "Python"}, {"instruction": "Identify the string format required to display the date in the following format: dd/mm/yyyy.", "input": "", "output": "\"%d/%m/%Y\"", "category": "Python"}, {"instruction": "Write a Python code to compute the dot product of two given vectors.", "input": "[1, 2, 3] and [4, 5, 6]", "output": "def dot_product(v1, v2):\n    product = 0\n    for i in range(len(v1)):\n        product += v1[i] * v2[i]\n    return product", "category": "Python"}, {"instruction": "Create a JavaScript code that checks if an array contains a given element.", "input": "Array: [2, 5, 9]\nElement: 5", "output": "function contains(arr, ele) {\n  for (let i = 0; i < arr.length; i++) {\n    if(arr[i] === ele) {\n      return true;\n    }\n  }\nreturn false;\n}", "category": "Python"}, {"instruction": "Construct an if-else statement that takes an integer as an argument and prints \"positive\" if the value is greater than 0 and \"negative\" if the value is less than 0.", "input": "7", "output": "if (num > 0) {\n    cout << \"positive\";\n}\nelse {\n    cout << \"negative\";\n}", "category": "Python"}, {"instruction": "Construct a for loop that iterates 10 times and prints the square of each iteration.", "input": "", "output": "for i in range(10):\n    print(i**2)", "category": "Python"}, {"instruction": "Write a Python code that checks if a given string only contains alphabets.", "input": "", "output": "import re \n  \ndef is_alphabetic(string):  \n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.match(string))", "category": "Python"}, {"instruction": "Write a JavaScript code that multiplies two numbers and returns the result.", "input": "2 and 3", "output": "function multiply_two_numbers(num1, num2) {\n    return num1 * num2;\n}", "category": "Python"}, {"instruction": "Construct a while loop that prints the numbers from 10 to 100 incrementing by 4 with each iteration.", "input": "", "output": "num = 10\n\nwhile num <= 100:\n    print(num)\n    num += 4", "category": "Python"}, {"instruction": "Convert this function written in Python to JavaScript code.", "input": "def divide_two_numbers(a, b):\n    if b == 0: \n        return \"Division by 0 not allowed!\"\n    return a / b", "output": "function divide_two_numbers(a, b) {\n    if(b == 0) {\n        return \"Division by 0 not allowed!\";\n    }\n    return a / b;\n}", "category": "Python"}, {"instruction": "Create a function to reverse a list without using the reverse() method.", "input": "", "output": "def reverse_list(lst): \n    reversed_list = [] \n    for i in range(len(lst) - 1, -1, -1): \n        reversed_list.append(lst[i]) \n    return reversed_list", "category": "Python"}, {"instruction": "Create a new virtual environment for Python.", "input": "", "output": "Convert your current directory to a virtual environment:\n\npython3 -m venv <name of virtual environment>\n\nActivate the virtual environment:\n\nsource <name of virtual environment>/bin/activate\n    \nDeactivate the virtual environment:\n\ndeactivate", "category": "Python"}, {"instruction": "Using the input list, write a function to calculate the sum of all the elements in the list.", "input": "my_list = [1, 2, 3, 4]", "output": "def calculate_sum(my_list):\n    sum = 0\n    for i in my_list:\n        sum += i\n    return sum\n\nprint(calculate_sum(my_list))\n# Output: 10", "category": "Python"}, {"instruction": "Design a SQL query to retrieve data from multiple tables.", "input": "", "output": "SELECT t1.col1, t1.col2, t2.col1, t2.col2 \nFROM table1 t1 \nINNER JOIN table2 t2 \nON t1.col1 = t2.col1", "category": "Python"}, {"instruction": "Write a Java program to implement a binary search on a sorted array of integers.", "input": "[1, 3, 4, 6, 8, 9], element=6", "output": "// Java Program for Binary Search \npublic class BinarySearchExample { \n    // Returns index of x if it is present in arr[], else return -1 \n    int binarySearch(int arr[], int x) \n    { \n        int low = 0, high = arr.length - 1; \n        while (low <= high) { \n            int mid = low + (high - low) / 2; \n              \n            // Check if x is present at mid \n            if (arr[mid] == x) \n                return mid; \n  \n            // If x greater, ignore left half \n            if (arr[mid] < x) \n                low = mid + 1; \n  \n            // If x is smaller, ignore right half \n            else\n                high = mid - 1; \n        } \n  \n        // if we reach here, then element was not present \n        return -1; \n    } \n  \n    public static void main(String args[]) \n    { \n        BinarySearchExample ob = new BinarySearchExample(); \n        int arr[] = {1, 3, 4, 6, 8, 9}; \n        int x = 6; \n        int result = ob.binarySearch(arr, x); \n        if (result == -1) \n            System.out.println(\"Element not present\"); \n        else\n            System.out.println(\"Element found at index \" + result); \n    } \n}", "category": "Python"}, {"instruction": "Given an array of size n, find the kth largest element by using a Heap.", "input": "[9, 8, 7, 6, 5], k=2", "output": "// Initialize max heap\nPriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder()); \n\n// kth element to be found \nint k = 2; \n      \nint[] arr = {9, 8, 7, 6, 5};\n\n// add elements to max heap \nfor (int i : arr) \n    maxHeap.add(i); \n      \n// Extract kth largest elements \nfor (int i=0; i<k; i++) \n        System.out.print(maxHeap.poll() + \" \");\n\nOutput: 8 7", "category": "Python"}, {"instruction": "Merge two sorted arrays.", "input": "[1, 2, 4, 5] & [3, 6, 7, 8]", "output": "// Merging two sorted arrays \nint[] a1 = {1, 2, 4, 5}; \nint[] a2 = {3, 6, 7, 8}; \n\nint length1 = a1.length;\nint length2 = a2.length;\n\nint[] mergedArray = new int[length1 + length2];\n\n// indexes for main array \nint i = 0;\nint j = 0;\nint k = 0;\n\nwhile (i < length1 && j < length2)\n{\n    if (a1[i] < a2[j]) \n    { \n        mergedArray[k] = a1[i]; \n        i++; \n    } \n    else\n    { \n        mergedArray[k] = a2[j]; \n        j++; \n    } \n    k++; \n} \n\n// check for remaining elements of a1[] \nwhile (i < length1) \n{ \n    mergedArray[k] = a1[i]; \n    i++; \n    k++; \n} \n\n// check for remaining elements of a2[] \nwhile (j < length2) \n{ \n    mergedArray[k] = a2[j]; \n    j++; \n    k++; \n}", "category": "Python"}, {"instruction": "Formulate an SQL query for finding the students who have scored over 80% in the test.", "input": "", "output": "SELECT * FROM Students\nWHERE test_score > 80", "category": "Python"}, {"instruction": "Recognize the type of a credit card from the given string of numbers.", "input": "4111 2029 3219 9480", "output": "Visa", "category": "Python"}, {"instruction": "How can a JavaScript function return multiple values?", "input": "", "output": "A JavaScript function can return multiple values by using an array or an object. For example, the following example returns two values in an array: return [value1, value2];. Similarly, an object can be used to return multiple values, for example: return { value1: val1, value2: val2 };.", "category": "Python"}, {"instruction": "Explain the difference between interface and abstract class in Java.", "input": "", "output": "The main difference between an interface and an abstract class in Java is that an interface can only contain method signatures and constants, whereas an abstract class can have methods, constants and variables. Additionally, an interface cannot have any method implementation, but an abstract class can contain methods with implementation. Finally, a class can only extend one abstract class, but it can implement multiple interfaces.", "category": "Python"}, {"instruction": "In CSS, how can the width of a div element be set to 100% of its parent's width?", "input": "", "output": "In CSS, the width of a div element can be set to 100% of its parent's width by using the \"width: 100%;\" property.", "category": "Python"}, {"instruction": "Write a SQL query to sort the data in descending order.", "input": "TABLE users\nid int,\nname varchar(20)", "output": "SELECT * FROM users ORDER BY id DESC;", "category": "Python"}, {"instruction": "Identify the bug in the following code and provide a solution.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n       sum += numbers\n    return sum/len(numbers)", "output": "The bug in the code is that the variable \"number\" is not used inside the for loop. Instead, the variable \"numbers\" is used. To fix this, the line \"sum += numbers\" should be replaced with \"sum += number\". This will ensure that the correct variable is used inside the loop and the code will execute as expected.", "category": "Python"}, {"instruction": "Write a JavaScript program to display \"Welcome to Javascript\" in the console.", "input": "", "output": "console.log(\"Welcome to Javascript\");", "category": "Python"}, {"instruction": "Write a regular expression to match a positive or negative floating-point number.", "input": "", "output": "The regular expression to match a positive or negative floating-point number is \"(-?\\d*\\.\\d+)|(-?\\d+\\.\\d*)\". This regular expression will match both positive and negative numbers, with or without decimal points.", "category": "Python"}, {"instruction": "Summarize the following Java code.", "input": "public class MyClass {\n  public static void main(String[] args) {\n    int x = 10;\n    int y = 20;\n    int sum = x + y;\n    System.out.println(\"The sum of x and y is: \" + sum);\n  }\n}", "output": "The given Java code declares two int variables (x and y), adds them and prints the sum of the two variables to the console.", "category": "Python"}, {"instruction": "What needs to be done to use the random module in Python?", "input": "", "output": "The random module needs to be imported in order to use it in Python. To do this, you can use the following line of code: \"import random\". Once the module has been imported, you can use the functions provided by the module in your code.", "category": "Python"}, {"instruction": "Convert a given binary tree to a doubly linked list.", "input": "", "output": "// Java Program to convert binary tree to doubly linked list \npublic class BinaryTreeToDLL { \n  \n    Node root; \n      \n    // A simple recursive function to convert a given Binary tree \n    // to Doubly Linked List \n    Node BTTDLL(Node root) { \n          \n        // Base case \n        if (root == null) \n            return root; \n      \n        // Convert the left subtree and link to root \n        if (root.left != null) { \n              \n            // Convert the left subtree \n            Node left = BTTDLL(root.left); \n      \n            // Find inorder predecessor. After this loop, left \n            // will point to the inorder predecessor \n            for (; left.right != null; left = left.right); \n      \n            // Make root as next of the predecessor \n            left.right = root; \n      \n            // Make predecssor as previous of root \n            root.left = left; \n        } \n      \n        // Convert the right subtree and link to root \n        if (root.right != null) { \n              \n            // Convert the right subtree \n            Node right = BTTDLL(root.right); \n      \n            // Find inorder successor. After this loop, right \n            // will point to the inorder successor \n            for (; right.left != null; right = right.left); \n      \n            // Make root as previous of successor \n            right.left = root; \n      \n            // Make successor as next of root \n            root.right = right; \n        } \n      \n        return root; \n    } \n}", "category": "Python"}, {"instruction": "Create a function that examines the character and determines if it's an uppercase letter or not.", "input": "", "output": "def is_uppercase(character):\n    if character.isalpha and character.isupper():\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Sort the array of strings lexicographically.", "input": "arr = [\"james\", \"john\", \"bob\", \"michelle\"]", "output": "def sort_strings_lexicographically(arr):\n    return sorted(arr)", "category": "Python"}, {"instruction": "Iterate over a given array and modify each element by adding a constant value to it.", "input": "arr = [3, 7, 8], constant = 4", "output": "def modify_elements(arr, constant):\n    for i in range(len(arr)):\n        arr[i] += constant", "category": "Python"}, {"instruction": "Given the following two lists, combine them into a single list containing each element of both the lists in order.", "input": "list_first = [1, 2, 3]\nlist_second = [4, 5, 6]", "output": "list_combined = list_first + list_second\nprint(list_combined)\n# Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Edit the following for loop to add a counter that tracks the number of iterations of the loop.", "input": "for i in range(10):\n  print(i)", "output": "counter = 0\n\nfor i in range(10):\n  print(i)\n  counter += 1\n\nprint(f\"Number of iterations: {counter}\")", "category": "Python"}, {"instruction": "Write a function in Python to calculate the number of minutes a user has been logged in.", "input": "log_in_time = '11:30:00', log_out_time = '13:30:00'", "output": "def calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  return minute_difference\n\nprint(calculate_time_difference('11:30:00', '13:30:00'))\n# Output: 120", "category": "Python"}, {"instruction": "Given the input dictionary below, create a list containing all the items of the dictionary.", "input": "my_dict = {\n    \"name\": \"John\",\n    \"age\": 21,\n    \"place\": \"Delhi\"\n}", "output": "my_list = list(my_dict.values())\nprint(my_list)\n# Output: [\"John\", 21, \"Delhi\"]", "category": "Python"}, {"instruction": "Summarize the key concepts in this Python code snippet.", "input": "import random\n\nfor x in range(0, 10):\n  print(\"Random number generated: \", random.randrange(1, 10))", "output": "This Python code snippet generates and prints out 10 random numbers between 1 and 10 using the \"random.randrange()\" function.", "category": "Python"}, {"instruction": "Write a JavaScript program to count the occurrences of each element in an array.", "input": "", "output": "function countOccurrences(arr) {\n  const counter = {};\n\n  arr.forEach(item => {\n    if (!counter[item]) {\n      counter[item] = 0;\n    }\n\n    counter[item]++;\n  });\n\n  return counter;\n}", "category": "Python"}, {"instruction": "Suggest a SQL query to find the rows that contain the top 3 values of a column.", "input": "", "output": "SELECT * \nFROM table \nORDER BY column_name DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Given the following list, create a Python dictionary having the ID as the key and the full name as the value.", "input": "my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]", "output": "my_dict = dict(my_list)\nprint(my_dict)\n# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}", "category": "Python"}, {"instruction": "Suggest code to delete an element from a linked list in Java.", "input": "", "output": "// Function to delete a node in a linked list. \nvoid deleteNode(Node head_ref, Node del) \n{ \n    // base case \n    if (head == null || del == null) \n        return; \n  \n    // If node to be deleted is head node \n    if (head == del) \n        head = del.next; \n  \n    // Change next only if node to be \n    // deleted is NOT the last node \n    if (del.next != null) \n    { \n        del.data = del.next.data; \n        del.next = del.next.next; \n    } \n  \n    // if node to be deleted is last node \n    else\n    { \n        Node temp = head; \n        while (temp.next != del) \n            temp = temp.next; \n  \n        temp.next = null; \n    } \n    return; \n}", "category": "Python"}, {"instruction": "Suggest a SQL query to retrieve the 10 most populous cities in the USA.", "input": "", "output": "SELECT city, population\nFROM cities\nWHERE country = 'USA'\nORDER BY population DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Write a JavaScript code to split an array into two equal parts.", "input": "let arr = [5,6,7,8,9]", "output": "let mid = Math.floor(arr.length/2);\nlet arr1 = arr.slice(0, mid);\nlet arr2 = arr.slice(mid);", "category": "Python"}, {"instruction": "Suggest a HTML tag to make a text bold.", "input": "", "output": "<strong>This text is bold.</strong>", "category": "Python"}, {"instruction": "Suggest a HTML tag to create a hyperlink to a website.", "input": "", "output": "<a href=\"http://example.com\">Example Website</a>", "category": "Python"}, {"instruction": "Produce an alphabetically sorted list from a given set containing both strings and integers", "input": "s = {1, 3, 5, 1.2, \"John\", \"Bob\"}", "output": "def sort_alpha_numeric_list(s):\n    return sorted(s, key = lambda x: str(x))", "category": "Python"}, {"instruction": "Compare two given arrays and find the common elements present in both", "input": "arr1 = [1, 2, 3, 5], arr2 = [3, 5, 7, 8]", "output": "def get_common_elements(arr1, arr2):\n    common_elements = []\n    for a in arr1:\n        if a in arr2:\n            common_elements.append(a)\n    return common_elements", "category": "Python"}, {"instruction": "Given a string and two substrings, create a function to replace the two substrings with another string.", "input": "main_string = \"Replace the first and last substring with this string\", start_substring = \"first\", end_substring = \"last\"", "output": "def replace_substrings(main_string, start_substring, end_substring):\n    start_index = main_string.index(start_substring)\n    end_index = main_string.index(end_substring) + len(end_substring)\n    return main_string[:start_index] + \"this string\" + main_string[end_index:]", "category": "Python"}, {"instruction": "Suggest a CSS property to set the text color of an element.", "input": "", "output": "color: #000000;", "category": "Python"}, {"instruction": "Write JavaScript code to output a square pattern of 5 stars.", "input": "", "output": "for (let i = 0; i < 5; i++) { \n  let line = ''; \n  \n  for (let j = 0; j < 5; j++) { \n    line += '*'; \n  } \n  \n  console.log(line); \n}", "category": "Python"}, {"instruction": "Name the variable used for looping in this for loop.", "input": "for i in range(1, 7):\n    print(i)", "output": "The variable used is i.", "category": "Python"}, {"instruction": "Rewrite the code snippet using a different loop structure.", "input": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "output": "for i in range(0, 5):\n    print(i)", "category": "Python"}, {"instruction": "Suggest a way to gracefully handle errors in Python code.", "input": "", "output": "In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly.", "category": "Python"}, {"instruction": "How would you change the following HTML to add an \"alt\" attribute to the \"img\" tag?", "input": "<img src=\"sample.jpg\">", "output": "<img src=\"sample.jpg\" alt=\"Sample Image\">", "category": "Python"}, {"instruction": "Code a program in PHP to swap the values of two variables.", "input": "a = 10\nb = 15", "output": "$a = 10; \n$b = 15; \n\nlist($a, $b) = array($b, $a); \n\necho $a; // Outputs 15 \necho $b; // Outputs 10", "category": "Python"}, {"instruction": "Rewrite the following Java code using a for loop instead of a for-each loop.", "input": "List<Integer> someList = new ArrayList<>();\nfor (Integer i : someList) {\n    System.out.println(i);\n}", "output": "List<Integer> someList = new ArrayList<>();\nfor (int i=0; i < someList.size(); i++) { \n    System.out.println(someList.get(i));\n}", "category": "Python"}, {"instruction": "How would you change the following C code to include a while loop?", "input": "for (int i=0; i<10; i++) \n    printf(\"I am going to count %d\\n\", i);", "output": "#include <stdio.h> \n\nint main() \n{ \n    int i = 0; \n    while (i < 10) { \n        printf(\"I am going to count %d\\n\", i); \n        i++; \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Develop a SQL query to get all the customer data with the customer age more than 25 years.", "input": "", "output": "SELECT * FROM customer\nWHERE age > 25;", "category": "Python"}, {"instruction": "What is the algorithm used in the following python snippet?", "input": "defbinarySearch( arr, low, high, x): \n   \n    if high >= low: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            return binarySearch(arr, mid + 1, high, x) \n  \n        # If x is smaller, ignore right half \n        else: \n            return binarySearch(arr, low, mid - 1, x)", "output": "The algorithm used in this python snippet is a binary search algorithm. Binary search is an efficient search algorithm that searches a sorted array for a specified element in O(log n) time complexity. The algorithm works by first determining the median of the array, and then comparing the value at the median to the value being searched for. If the value at the median is the same as the value being searched for, the algorithm returns the index at which it found the element. Otherwise, it will either ignore the left or right half of the array depending on whether the value at the median is larger or smaller than the value being searched for. The algorithm then repeats this step on the narrowed down subarray until the element is found.", "category": "Python"}, {"instruction": "Develop an algorithm in Java for finding all the possible combinations of a given list of numbers.", "input": "lst = [1, 2, 3, 4]", "output": "public class Combination { \n  \n    static void combinationUtil(int arr[], int n, int r, \n                                int index, int data[], int i) \n    { \n        // Current combination is ready \n        // to be printed, print it \n        if (index == r) { \n            for (int j = 0; j < r; j++) \n                System.out.print(data[j] + \" \"); \n            System.out.println(\"\"); \n            return; \n        } \n  \n        // When no more elements are there to put in data[] \n        if (i >= n) \n            return; \n  \n        // Current is included, put next at next \n        // location \n        data[index] = arr[i]; \n        combinationUtil(arr, n, r, index + 1, \n                        data, i + 1); \n  \n        // Current is excluded, replace it with \n        // next (Note that i+1 is passed, but \n        // index is not changed) \n        combinationUtil(arr, n, r, index, data, i + 1); \n    } \n  \n    // Print all combinations of given array \n    static void printCombination(int arr[], int n, int r) \n    { \n        // A temporary array to store all combination \n        // one by one \n        int data[] = new int[r]; \n  \n        // Print all combination using temporary \n        // array 'data[]' \n        combinationUtil(arr, n, r, 0, data, 0); \n    } \n  \n    // Driver code \n    public static void main(String[] args) \n    { \n        int arr[] = { 1, 2, 3, 4 }; \n        int r = arr.length; \n        int n = arr.length; \n        printCombination(arr, n, r); \n    } \n}", "category": "Python"}, {"instruction": "Generate a SQL query to display the employee name and city for a particular employee ID.", "input": "Employee ID = 56", "output": "SELECT EmployeeName, City \nFROM Employees \nWHERE EmployeeID = 56", "category": "Python"}, {"instruction": "Modify the following C code so it will display the average of numbers in an array", "input": "#include <stdio.h>\n\nint main()\n{\n  int nums[] = {1,2,3,4};", "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int nums[] = {1,2,3,4};\n    int len = sizeof(nums) / sizeof(nums[0]);\n    int sum = 0;\n    double average = 0;\n\n    for(int i = 0; i < len; i++) {\n        sum += nums[i];\n    }\n\n    average = (double)sum / (double)len;\n\n    printf(\"The average is: %f\",average);\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Create a bash shell script that assigns two variables with values of 4 and 2 and prints the sum of the two variables.", "input": "", "output": "#!/bin/bash\na=4\nb=2\necho 'the sum is' $(($a + $b))", "category": "Python"}, {"instruction": "Produce an HTML code snippet for creating a list with three items.", "input": "", "output": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>", "category": "Python"}, {"instruction": "Create a programming language syntax to print \"Hello, World!\"", "input": "", "output": "println(\"Hello, World!\")", "category": "Python"}, {"instruction": "Implement a function that determines whether an integer is odd or even.", "input": "", "output": "def is_even(n):\n  return n % 2 == 0", "category": "Python"}, {"instruction": "Create a SQL query to retrieve a list of the five most expensive items", "input": "", "output": "SELECT *\nFROM Items\nORDER BY Price DESC\nLIMIT 5", "category": "Python"}, {"instruction": "Please write an SQL query to calculate the average age of people born in the year 1980.", "input": "", "output": "SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birth_date)) \nFROM people\nWHERE YEAR(birth_date) = '1980';", "category": "Python"}, {"instruction": "How can you sort a list of integers by their absolute value in Python?", "input": "", "output": "You can sort a list of integers by their absolute value using the sort() method. For example: \n \nnumbers = [2, -1, 5, 0, -4] \nnumbers.sort(key = lambda x: abs(x)) \nprint(numbers)\n# Output: [0, -1, 2, -4, 5]", "category": "Python"}, {"instruction": "Please write an SQL query to find the records that have a value higher than the average of all values.", "input": "", "output": "SELECT *\nFROM table_name\nWHERE value > (SELECT AVG(value) FROM table_name);", "category": "Python"}, {"instruction": "How can you remove the duplicate items from a list of integers in Python?", "input": "", "output": "You can remove the duplicate items from a list of integers in Python by using the set() function. For example:\n\na = [1, 2, 3, 3, 4]\nb = list(set(a))\nprint(b)\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write HTML code to generate a table of 5 rows and 4 columns.", "input": "", "output": "<table> \n  <tr> \n    <th>Col1</th> \n    <th>Col2</th> \n    <th>Col3</th> \n    <th>Col4</th> \n  </tr> \n  <tr> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n  </tr> \n  <tr> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n  </tr> \n  <tr> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n  </tr> \n  <tr> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n  </tr> \n  <tr> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n  </tr> \n</table>", "category": "Python"}, {"instruction": "Create an object to represent a user in JavaScript.", "input": "", "output": "const user = {\n    name: 'John',\n    age: 35,\n    email: 'john@example.com',\n    roles: ['user', 'admin']\n};", "category": "Python"}, {"instruction": "Create an HTML page containing a list of all US states.", "input": "", "output": "<html>\n  <head>\n    <title> US States </title> \n  </head>\n  <body>\n  <ul>\n    <li>Alabama</li>\n    <li>Alaska</li>\n    <li>Arizona</li>\n    <li>Arkansas</li>\n    <li>California</li>\n    <li>Colorado</li>\n    <li>Connecticut</li> \n    <li>Delaware</li>\n    <li>Florida</li>\n    <li>Georgia</li>\n    <li>Hawaii</li>\n    <li>Idaho</li>\n    <li>Illinois</li>\n    <li>Indiana</li>\n    <li>Iowa</li>\n    <li>Kansas</li>\n    <li>Kentucky</li>\n    <li>Louisiana</li>\n    <li>Maine</li>\n    <li>Maryland</li>\n    <li>Massachusetts</li>\n    <li>Michigan</li>\n    <li>Minnesota</li>\n    <li>Mississippi</li>\n    <li>Missouri</li>\n    <li>Montana</li>\n    <li>Nebraska</li>\n    <li>Nevada</li>\n    <li>New Hampshire</li>\n    <li>New Jersey</li>\n    <li>New Mexico</li>\n    <li>New York</li>\n    <li>North Carolina</li>\n    <li>North Dakota</li>\n    <li>Ohio</li>\n    <li>Oklahoma</li>\n    <li>Oregon</li>\n    <li>Pennsylvania</li>\n    <li>Rhode Island</li>\n    <li>South Carolina</li>\n    <li>South Dakota</li>\n    <li>Tennessee</li>\n    <li>Texas</li>\n    <li>Utah</li>\n    <li>Vermont</li>\n    <li>Virginia</li> \n    <li>Washington</li>\n    <li>West Virginia</li>\n    <li>Wisconsin</li>\n    <li>Wyoming</li>\n  </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Find the sum of all the items in this array of integers.", "input": "[3, 8, 17, 29, 32, 33]", "output": "122", "category": "Python"}, {"instruction": "Write Python code to find the nth element of a Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Write Java code to calculate the area of a circle with radius 12 cm.", "input": "", "output": "public class AreaOfCircle {\n   public static void main(String[] args) {\n      double radius = 12.0;\n      double area = Math.PI * Math.pow(radius, 2);\n      System.out.println(\"Area of circle is: \" + area + \" cm\u00b2\");\n   }\n}", "category": "Python"}, {"instruction": "Convert this JSON object to a PHP associative array.", "input": "{\n    \"name\": \"John Smith\",\n    \"age\": 35,\n    \"address\": {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10021\"\n    },\n    \"phoneNumbers\": [\n        {\n            \"type\": \"home\",\n            \"number\": \"212 555-1234\"\n        },\n        {\n            \"type\": \"fax\",\n            \"number\": \"646 555-4567\"\n        }\n    ]\n}", "output": "$person_arr = array(\n              'name' => 'John Smith',\n              'age' => 35,\n              'address' => array(\n                      'streetAddress' => '21 2nd Street',\n                      'city' => 'New York',\n                      'state' => 'NY',\n                      'postalCode' => '10021',\n                    ),\n              'phoneNumbers' => array(\n                       array(\n                            'type' => 'home',\n                            'number' => '212 555-1234',\n                       ),\n                       array(\n                            'type' => 'fax',\n                            'number' => '646 555-4567',\n                       ),\n                    ),\n        );", "category": "Python"}, {"instruction": "Create a class in Java named 'Circle' that has an attribute named 'radius' and a method named 'getArea' to calculate the area of a circle.", "input": "", "output": "class Circle {\n  double radius;\n \n  double getArea() {\n    return Math.PI * Math.pow(radius, 2);\n  }\n}", "category": "Python"}, {"instruction": "Implement a SQL query to find the longest string present in a column.", "input": "", "output": "SELECT column_name, LENGTH(column_name) AS len\nFROM table_name\nORDER BY len DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a shell script to find all even numbers from 1 to 50.", "input": "", "output": "#!/bin/bash\nfor i in {1..50..2}\ndo\n  echo $i\ndone", "category": "Python"}, {"instruction": "Convert the following pseudocode into a JavaScript program.", "input": "Input: A, B\n\nOutput: maximum of A and B", "output": "function max(A, B) {\n    if (A > B) {\n        return A;\n    }\n    else {\n        return B;\n    }\n};", "category": "Python"}, {"instruction": "Implement a Java class that encapsulates a basic for loop.", "input": "", "output": "public class loop {\n    public void forLoop(int start, int end){\n        for(int i=start; i<end; i++){\n            System.out.println(i);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Find the length of the longest substring without repeating characters", "input": "string = \"abcabcbb\"", "output": "def longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n            char_set = set(char)\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)", "category": "Python"}, {"instruction": "Create a list comprehension", "input": "Given a list of numbers: nums = [1, 2, 3, 4, 5]", "output": "[x*2 for x in nums]", "category": "Python"}, {"instruction": "Write code to construct an object", "input": "Given a class Patient with the following constructor:\n```python\nclass Patient:\n    def __init__(self, name, age, illness, medical_record):\n\t\tself.name = name\n\t\tself.age = age\n\t\tself.illness = illness\n\t\tself.medical_record = medical_record\n```", "output": "p1 = Patient(\"John\", 45, \"Diabetes\", \"1234567890\")", "category": "Python"}, {"instruction": "Please write an SQL query to find all records with a corresponding score greater than or equal to a given score.", "input": "", "output": "SELECT *\nFROM table_name\nWHERE score >= given_score", "category": "Python"}, {"instruction": "Implement a Go program that takes a string as input and prints its reverse.", "input": "", "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    var str string\n    fmt.Printf(\"Enter a string: \")\n    fmt.Scanf(\"%s\\n\", &str)\n    fmt.Printf(\"The reverse of the string is %s\\n\", reverse(str))\n}\n\nfunc reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}", "category": "Python"}, {"instruction": "Insert a comment in the following code snippet to explain what the code is doing.", "input": "x = 5\ny = 7\nx = x + y", "output": "#This code is adding the value of y to x and then assigning the result to x.\nx = 5\ny = 7\n#add the value of y to x\nx = x + y", "category": "Python"}, {"instruction": "Write a query in MySQL to select all records in a table called 'names' where the first letter of the last name is 'K'.", "input": "", "output": "SELECT * FROM names WHERE last_name LIKE 'K%';", "category": "Python"}, {"instruction": "Write a JavaScript function that takes a string argument and returns a count of all the times the letter 'a' appears in the string.", "input": "", "output": "function countA(str) {\n  let count = 0;\n  for (let i=0; i<str.length; i++) {\n    if (str[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n}", "category": "Python"}, {"instruction": "Use the given code to create a Pandas Dataframe.", "input": "data = {'Name': ['Jack', 'James', 'Joe'], \n        'Age': [21, 22, 23]}", "output": "import pandas as pd\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a program that prints out the set of all prime divisors of a given number", "input": "num = 50", "output": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        primes.append(i)\n\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)", "category": "Python"}, {"instruction": "Sort an array of integers according to their frequency of occurrence", "input": "arr = [1, 1, 2, 2, 2, 3, 4, 4]", "output": "freq = {}\nfor i in arr:\n    if i in freq.keys():\n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Create list of tuple\nfreq_lst = []\nfor k,v in freq.items():\n    freq_lst.append((k,v))\n\n# Sort the list of tuple in descending order\nfreq_lst = sorted(freq_lst, key = lambda x : x[1], reverse = True)\n\n# Create list from sorted tuple\nsorted_arr = [i[0] for i in freq_lst]\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Design a program that takes a date in the format dd/mm/yyyy as input and prints the day of that given date", "input": "01/02/2020", "output": "day = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[0])\nmonth = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[1])\nyear = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[2])\n\n# Determine day name\nday_num = datetime(year, month, day).weekday()\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nday_name = days[day_num]\n\nprint(\"The day is: \", day_name)", "category": "Python"}, {"instruction": "Assume you are given two integer variables, b and c, write a program to multiply these two numbers without using the asterisk (*) operator", "input": "b = 5, c= 7", "output": "mult = 0 \nfor i in range(0, abs(b)): \n    mult = mult + abs(c) \n  \nif (b < 0 and c < 0) or (b > 0 and c > 0): \n    print(mult) \nelse: \n    print(-mult)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers between 1-100", "input": "", "output": "for number in range(1,101):\n    # To check if a number is prime or not\n    is_prime = True\n  \n    # We need to check until the square root of that number\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            is_prime = False\n            break\n  \n    if is_prime:\n        print(number, end=\" \")", "category": "Python"}, {"instruction": "Name the outlier value in the following array of integer values", "input": "arr = [121, 124, 127, 130, 135]", "output": "135", "category": "Python"}, {"instruction": "Modify the previous program to also print the sum of the subarray elements", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)", "category": "Python"}, {"instruction": "Given an array of n elements and an integer k, find the subarray with the maximum sum less than k.", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")", "category": "Python"}, {"instruction": "Write a script to sort a linear array in descending order", "input": "arr = [2, 4, 1, 8, 10, 7, 9]", "output": "arr.sort(reverse=True)\nprint(arr)", "category": "Python"}, {"instruction": "Find the maximum and minimum values in a given array.", "input": "array = [2, 3, 5, 1, 9]", "output": "maxValue = 9 \nminValue = 1", "category": "Python"}, {"instruction": "Edit the code so that it does not throw an error.", "input": "a = 2 + 3\nb = a * 2\nc = b / a\n\nz = b + c", "output": "a = 2 + 3\nb = a * 2\nc = b / a\n\n# We need to explicitly convert c to an integer before doing the addition.\nz = b + int(c)", "category": "Python"}, {"instruction": "Parse data from a given JSON object.", "input": "data:\n{\n  \"data\": [\n    {\n      \"name\": \"John\",\n      \"age\": 24\n    },\n    {\n      \"name\": \"Bob\",\n      \"age\": 26\n    }\n  ]\n}", "output": "import json\n\ndata = '{\"data\":[{\"name\":\"John\",\"age\":24},{\"name\":\"Bob\",\"age\":26}]}'\n\nparsed_data = json.loads(data)\n\nfor item in parsed_data['data']:\n  print(item['name'] + \" is \" + str(item['age']) + \"years old.\")", "category": "Python"}, {"instruction": "Calculate the factorial of x and store it in the variable y.", "input": "x = 5", "output": "y = 120 # 5! = 1 * 2 * 3 * 4 * 5 = 120", "category": "Python"}, {"instruction": "Classify the type of error in the following code snippet.", "input": "for i in range(5):\n    print(i, sum)", "output": "The type of error here is a NameError, where a variable is referenced without having been previously defined.", "category": "Python"}, {"instruction": "Insert a given element into the correct position of the list.", "input": "list = [1,3,4,5]\nelement = 2", "output": "list = [1,2,3,4,5]", "category": "Python"}, {"instruction": "Create a loop for the given range of numbers.", "input": "start = 5\nend = 10", "output": "for i in range(start, end+1):\n    print(i)", "category": "Python"}, {"instruction": "Use a try-except block to check if a given string can be converted to a float.", "input": "str = \"123.45\"", "output": "try:\n    float(str)\n    print(\"Valid\")\nexcept ValueError:\n    print(\"Invalid\")", "category": "Python"}, {"instruction": "Create a dictionary to store the phone numbers of your friends.", "input": "list_friends = [\"John\", \"Doe\", \"Jane\", \"Smith\"]", "output": "friends_phone_numbers = {}\nfor name in list_friends:\n    phone_number = input(f'Please enter the phone number for {name}: ')\n    friends_phone_numbers[name] = phone_number", "category": "Python"}, {"instruction": "Create a web page with a CSS style to hide all paragraphs in the HTML body.", "input": "", "output": "<html>\n  <head>\n    <style>\n      p {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <p>This paragraph is hidden.</p>\n    <p>This paragraph is also hidden.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write an if-else statement in Java that checks if a given number is divisible by 3 and prints \"Divisible by 3\" if true, otherwise \"Not divisible\".", "input": "", "output": "if (num % 3 == 0) {\n System.out.println(\"Divisible by 3\");\n}\nelse {\n System.out.println(\"Not divisible\");\n}", "category": "Python"}, {"instruction": "Translate a given string of comma-separated words into a list of words in Python.", "input": "\"apple, orange, grape\"", "output": "words = \"apple, orange, grape\".split(\", \")\nprint(words) # ['apple', 'orange', 'grape']", "category": "Python"}, {"instruction": "Write a SQL query to list the names of employees who are 25 years or older.", "input": "", "output": "SELECT name FROM employees WHERE age >= 25;", "category": "Python"}, {"instruction": "Write a SQL statement that updates the value of attribute 'salary' to 80000 where the attribute 'deptname' is equal to 'sales'.", "input": "", "output": "UPDATE employees SET salary = 80000 WHERE deptname = 'sales';", "category": "Python"}, {"instruction": "Create a class in Python named 'Bar' that has an attribute named 'fname' and a single method named 'sayHello'.", "input": "", "output": "class Bar:\n  def __init__(self, fname):\n    self.fname = fname\n  \n  def sayHello(self):\n    print \"Hello, \" + self.fname + \"!\"", "category": "Python"}, {"instruction": "Create an if-else statement in Java that prints \"Yes!\" if an integer is 5 and prints \"No!\" if an integer is not 5.", "input": "", "output": "if (int == 5) {\n System.out.println(\"Yes!\");\n}\nelse {\n System.out.println(\"No!\");\n}", "category": "Python"}, {"instruction": "Create a class in Python named 'Foo' that has two methods named 'add' and 'subtract' to add and subtract two given numbers respectively.", "input": "", "output": "class Foo:\n  def add(self, num1, num2):\n    return num1 + num2\n\n  def subtract(self, num1, num2):\n    return num1 - num2", "category": "Python"}, {"instruction": "Create a web form in HTML that captures a user's name, address, and a select box for their favorite color.", "input": "", "output": "<form method=\"post\">\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Address:</label><br>\n  <input type=\"text\" name=\"address\"><br>\n  <label>Favorite Color:</label><br>\n  <select name=\"favorite_color\">\n    <option value=\"red\">Red</option>\n    <option value=\"blue\">Blue</option>\n    <option value=\"green\">Green</option>\n    <option value=\"purple\">Purple</option>\n  </select><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a function to normalize a vector in C++.", "input": "", "output": "#include <iostream>\n#include <algorithm>\n#include <cmath>\n \n// Function to normalize a vector\nvoid normalize(std::vector<float>& vector)\n{\n    // Compute the magnitude\n    float magnitude = 0.0;\n    for (int i = 0; i < vector.size(); i++)\n        magnitude += vector[i] * vector[i];\n    magnitude = sqrt(magnitude);\n \n    // Normalize the vector\n    for (int i = 0; i < vector.size(); i++)\n        vector[i] /= magnitude;\n}", "category": "Python"}, {"instruction": "Define a function in JavaScript that takes 3 numbers as arguments and returns the smallest one.", "input": "", "output": "function findSmallest(x, y, z) {\n    smallest = x;\n    if(y < smallest) {\n        smallest = y;\n    }\n    if(z < smallest) {\n        smallest = z;\n    }\n    return smallest;\n}", "category": "Python"}, {"instruction": "Write a python program to remove all the elements from a list that are less than 10.", "input": "mylist = [4, 7, 21, 24, 88, 12]", "output": "def remove_less_than_10(mylist):\n    return [n for n in mylist if n >= 10]", "category": "Python"}, {"instruction": "Create a shell script that will run a specified command every 5 minutes.", "input": "", "output": "#!/bin/bash\n\nwhile true\ndo\n   command\n   sleep 300\ndone", "category": "Python"}, {"instruction": "Write a shell script to print out the number of the users currently logged in.", "input": "", "output": "#!/bin/bash\n\nusers=$(w -h | awk '{print $1}' | sort | uniq | wc -l)\necho \"Total number of users currently logged in: $users\"", "category": "Python"}, {"instruction": "Create a hash table to store the student data.", "input": "students = {\"John\": 23, \"Doe\": 25, \"Jane\": 30}", "output": "table = {}\nfor key,value in students.items():\n    table[key] = value", "category": "Python"}, {"instruction": "Write a function to rearrange the elements of an array in such a way that no two same numbers are adjacent to each other.", "input": "mylist = [2, 5, 9, 2, 1, 5, 9, 0]", "output": "def rearrange(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n    return mylist", "category": "Python"}, {"instruction": "Construct a SQL query to find the names of all customers that have an order with an order amount higher than $1000.", "input": "Table: customers\nTable: orders", "output": "SELECT customers.name \nFROM customers \nINNER JOIN orders \nON customers.customer_id = orders.customer_id\nWHERE orders.amount > 1000;", "category": "Python"}, {"instruction": "Create an HTML table containing 3 row and 3 column of text elements.", "input": "Table with 9 text elements", "output": "<table>\n  <tr>\n    <td>Text 1</td>\n    <td>Text 2</td>\n    <td>Text 3</td>\n  </tr>\n  <tr>\n    <td>Text 4</td>\n    <td>Text 5</td>\n    <td>Text 6</td>\n  </tr>\n  <tr>\n    <td>Text 7</td>\n    <td>Text 8</td>\n    <td>Text 9</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase.", "input": "listOfStrings = [\"apple\", \"banana\", \"mango\"]", "output": "def convertStringsToUppercase(listOfStrings):\n  return [string.upper() for string in listOfStrings]", "category": "Python"}, {"instruction": "Assign a value to a variable based on the value of another variable.", "input": "int x = 0;\nint y = 1;", "output": "if (x == 0) {\n    int y = 1;\n} else {\n    int y = 0;\n}", "category": "Python"}, {"instruction": "Write a function which takes a C-style string as a parameter and prints it out reversed.", "input": "", "output": "void reverse_string(char *str) {\n    int len = strlen(str);\n    int i;\n    char *rev_str = (char*)malloc((len+1)*sizeof(char));\n    for(i = 0; i < len; i++) {\n        rev_str[i] = str[len - i - 1];\n    }\n    rev_str[len] = '\\0';\n    printf(\"Reversed string: %s\\n\", rev_str);\n    free(rev_str);\n}", "category": "Python"}, {"instruction": "Write a function to check whether a number is a prime number in JavaScript.", "input": "let num = 7;", "output": "function isPrime(num) { \n  \n    // Edge cases:\n    if (num <= 1)  return false; \n    if (num === 2)  return true; \n    if (num % 2 === 0) return false; \n\n    for (let i=3; i<=Math.sqrt(num); i+=2) { \n        if (num % i === 0) \n            return false; \n    } \n    return true; \n}", "category": "Python"}, {"instruction": "What are the key differences between C and C++?", "input": "", "output": "The key differences between C and C++ are that C is a procedural programming language while C++ is an object-oriented programming language. C does not support classes, whereas C++ does. C does not support function or operator overloading whereas C++ does. C does not support exception handling, while C++ does. C does not support templates, while C++ does. Additionally, C does not support reference variables, while C++ does.", "category": "Python"}, {"instruction": "Write a JavaScript function to perform a binary search.", "input": "let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet x = 5;", "output": "let binarySearch = (array, x) => {\n  let start = 0;\n  let end = array.length - 1;\n  \n  while (start <= end) {\n    let middle = Math.floor((start + end) / 2);\n    if (array[middle] === x) {\n      return middle;\n    } else if (x < array[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }  \n  }\n  return -1;\n}", "category": "Python"}, {"instruction": "How would you implement a simple object oriented Programming concept in Python?", "input": "", "output": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.", "category": "Python"}, {"instruction": "Write a code to edit a given column in an SQL table.", "input": "", "output": "ALTER TABLE my_table\n  MODIFY my_column TYPE INT;", "category": "Python"}, {"instruction": "Create an array containing 10 random numbers between 0 and 10.", "input": "", "output": "import random\n\n# Create an array with 10 random numbers\narray = []\nfor i in range(10):\n    array.append(random.randint(0,10))\n\n# Print the array\nprint(array)", "category": "Python"}, {"instruction": "Use .split() in Python to break the following text into a list of sentences.", "input": "text = \"Hello! My name is John. What is your name?\"", "output": "text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']", "category": "Python"}, {"instruction": "Write an algorithm to find the middle item in a linked list.", "input": "", "output": "# Finds the middle node in a linked list \n# Input: head of the linked list \n# Return: the middle element of the linked list \ndef findMiddleNode(head): \n\t# If the linked list is empty \n\tif (head is None): \n\t\treturn None\n\n\t# Find the length of the linked list \n\tlength, node = 0, head \n\twhile (node is not None): \n\t\tlength += 1\n\t\tnode = node.next\n\n\t# Jump to the middle of linked list \n\tnode = head \n\tfor _ in range(length // 2): \n\t\tnode = node.next\n\t\t\n\treturn mid", "category": "Python"}, {"instruction": "Create an array that contains the elements 1, 3, 5, 7, and 9 in random order.", "input": "", "output": "import random\n\n# Create an array with all our values\narray = [1, 3, 5, 7, 9]\n\n# Use the shuffle function to randomize\nrandom.shuffle(array)\n\n# Print out the randomized array\nprint(array)", "category": "Python"}, {"instruction": "Create a variable to store the text \"Python is a programming language\" and then print it.", "input": "", "output": "text = \"Python is a programming language\"\nprint(text)", "category": "Python"}, {"instruction": "Create a MySQL trigger to perform a data validation check when a new row is created.", "input": "", "output": "CREATE TRIGGER my_data_validation_check\n  BEFORE INSERT ON my_table\n  FOR EACH ROW\nBEGIN\n  IF EXISTS \n  THEN \n    IF NEW.my_column NOT BETWEEN 0 AND 100\n    THEN\n      SIGNAL SQLSTATE '45001' \n      SET MESSAGE_TEXT = 'Data validation failed.'; \n    END IF;\n  END IF;\nEND", "category": "Python"}, {"instruction": "Write a function to compare two lists of numbers and return a new list with the elements which are common to both the lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 5, 6, 7, 8]", "output": "def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\n    \n# Call the compare_lists()\nlist_common = compare_lists(list1, list2)\n\n# Print the new_list\nprint(list_common) # [3, 5]", "category": "Python"}, {"instruction": "Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS.", "input": "", "output": "import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Define an operator which adds two points of a given type.", "input": "", "output": "struct Point {\n    int x;\n    int y;\n};\n\nPoint operator+(Point p1, Point p2) {\n    Point result;\n    result.x = p1.x + p2.x;\n    result.y = p1.y + p2.y;\n    return result;\n}", "category": "Python"}, {"instruction": "Create an event handler for a \"click\" that updates a text field.", "input": "", "output": "// define \"click\" parameter\n$(\"#element\").on(\"click\", function (click) {\n    // update text field\n    document.getElementById(\"text_field\").innerHTML = \"updated\";\n});", "category": "Python"}, {"instruction": "Create an HTML5 canvas with a width of 500px and height of 300px.", "input": "", "output": "<canvas id=\"example\" width=\"500\" height=\"300\"></canvas>", "category": "Python"}, {"instruction": "Put a number into a variable and assign a string to another variable based on it's value.", "input": "num = 5", "output": "if (num == 5) {\n    String str = \"five\";\n} else {\n    String str = \"not five\";\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized.", "input": "sentence = \"this is a sentence\"", "output": "def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)", "category": "Python"}, {"instruction": "Using a random seed of 0, generate a 5x4 random matrix of integers up to the given number.", "input": "10", "output": "matrix = [\n  [8, 3, 3, 5],\n  [7, 7, 4, 8],\n  [6, 2, 9, 2],\n  [8, 3, 3, 0],\n  [2, 5, 4, 8]\n]", "category": "Python"}, {"instruction": "Given the different test scores in the list, calculate the GPA.", "input": "[('DS', 98), ('OS', 95), ('SE', 85), ('ML', 80)]", "output": "GPA: 89.25", "category": "Python"}, {"instruction": "Use the bisection method to approximate the root of the given equation.", "input": "x^2 - 2x - 3", "output": "Approximate root: 1.839285", "category": "Python"}, {"instruction": "Convert the given integer number to a Roman Numeral.", "input": "403", "output": "CDIII", "category": "Python"}, {"instruction": "Compress the given string using the Huffman Coding.", "input": "aabbccdd", "output": "{\n  'a': '0',\n  'b': '10',\n  'c': '110',\n  'd': '111'\n}", "category": "Python"}, {"instruction": "Remove the character 'o' from the given string.", "input": "books", "output": "'bks'", "category": "Python"}, {"instruction": "Create a program that takes a given string and returns the frequency of each alphabet character.", "input": "", "output": "def get_character_frequency(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nget_character_frequency(\"Hello World!\") # Output: { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 }", "category": "Python"}, {"instruction": "Using the given Python code, format the number 7.321 to contain two decimal points.", "input": "n=7.321", "output": "'{:.2f}'.format(n)", "category": "Python"}, {"instruction": "Create a data structure that stores the given data.", "input": "Name: John\nAge: 20\nGender: Male\nOccupation: Developer", "output": "student = {\n  'name': 'John',\n  'Age': 20, \n  'Gender': 'Male',\n  'Occupation': 'Developer'\n}", "category": "Python"}, {"instruction": "Write a Regular Expression pattern to check if the given input is a valid email address.", "input": "", "output": "/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/", "category": "Python"}, {"instruction": "Count the number of integers in the given 2D array.", "input": "[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8]\n]", "output": "8", "category": "Python"}, {"instruction": "Implement a 3d vector class with a constructor, a dot product method and a normalization method.", "input": "", "output": "class Vector3d {\n    double x, y, z;\n\n    //Constructor\n    Vector3d(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    // Dot product\n    double dotProduct(Vector3d vec2) {\n        double result = this.x * vec2.x + this.y * vec2.y + this.z * vec2.z;\n        return result;\n    }\n\n    // Normalization\n    Vector3d normalize() {\n        double magnitude = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n        Vector3d normalized = new Vector3d(this.x / magnitude, this.y / magnitude, this.z / magnitude);\n        return normalized;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to return all data from the \"customers\" table where the customer's age is greater than 26.", "input": "", "output": "SELECT * FROM customers WHERE age > 26;", "category": "Python"}, {"instruction": "Assert that an array is not empty before adding items.", "input": "", "output": "if (array != null && array.length > 0) {\n    // add items to array\n}", "category": "Python"}, {"instruction": "Use a loop to print out a list of numbers.", "input": "", "output": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}", "category": "Python"}, {"instruction": "Generate the MD5 hash of the given string.", "input": "Hello World", "output": "a7ad492532f2f806e140722d00453901", "category": "Python"}, {"instruction": "Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.", "input": "beer_sales = [200, 500, 600, 100, 800]", "output": "import matplotlib.pyplot as plt\n\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()", "category": "Python"}, {"instruction": "Create a function that takes two strings and finds the longest common substring between them.", "input": "", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "category": "Python"}, {"instruction": "Create a new database in MySQL, with a table named \"users\", and add 3 records.", "input": "", "output": "CREATE DATABASE myDB;\n\nUSE myDB;\n\nCREATE TABLE users (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (name, email) VALUES \n  ('John Smith', 'john.smith@example.com'), \n  ('Jane Doe', 'jane.doe@example.com'),\n  ('Bob Jones', 'bob.jones@example.com');", "category": "Python"}, {"instruction": "Create a Date object containing tomorrow's date.", "input": "", "output": "var tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);", "category": "Python"}, {"instruction": "Write a function to convert inches to centimeters.", "input": "", "output": "function inchToCm(inches) {\n   return inches * 2.54;\n}", "category": "Python"}, {"instruction": "Write a R program to print the first 5 rows of a given dataset", "input": "\u201cdata.csv\u201d", "output": "data <- read.csv(\"data.csv\")\nhead(data, 5)", "category": "Python"}, {"instruction": "Manipulate a given array in JavaScript to remove all duplicate items", "input": "var array = [20, 30, 20, 15, 30, 45]", "output": "var array = [20, 30, 20, 15, 30, 45];\nvar uniqueArray = array.filter((item, index) => array.indexOf(item) === index);\nconsole.log(uniqueArray);", "category": "Python"}, {"instruction": "Make a Visual Basic code to find the sum of the integers from 1 to 10", "input": "", "output": "Sub add_numbers()\n   Dim sum As Integer\n   sum = 0\n   \n   For i = 1 To 10\n      sum = sum + i\n   Next\n   MsgBox (\"Sum of all numbers from 1 to 10 is : \" & sum)\nEnd Sub", "category": "Python"}, {"instruction": "Create a SQL query to list all the customers from the US.", "input": "", "output": "SELECT *\nFROM customers\nWHERE country = 'US';", "category": "Python"}, {"instruction": "Create a function to generate Pythagorean Triples up to a given limit.", "input": "Limit: 20", "output": "# Create a function to generate pythagorean triples\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)", "category": "Python"}, {"instruction": "Calculate the Hamming distance of two binary strings.", "input": "String1: 1001100 \nString2: 1010101", "output": "def hammingDistance(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\n# Driver code \nstr1 = '1001100'\nstr2 = '1010101'\nprint(hammingDistance(str1, str2))", "category": "Python"}, {"instruction": "Select all distinct employee names from the given table.", "input": "", "output": "SELECT DISTINCT name FROM employees;", "category": "Python"}, {"instruction": "Integrate the plotting library Matplotlib into this Python script.", "input": "import pandas as pd\ndata = pd.read_csv('data.csv')", "output": "import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()", "category": "Python"}, {"instruction": "Default a neural network architecture to classify the handwritten digit from 0 to 9.", "input": "", "output": "# Define the architecture\ndef model(input_shape):\n    model = tf.keras.Sequential([\n        tf.keras.layers.Flatten(input_shape=input_shape),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy']) \n    \n    return model", "category": "Python"}, {"instruction": "Write a code for extracting the last n elements of a list.", "input": "List: [1, 2, 3, 4, 5], n = 3", "output": "# Define a function to extract the required elements\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))", "category": "Python"}, {"instruction": "Create an HTML page with a navigation bar containing a heading and a search field.", "input": "", "output": "<html>\n  <head>\n    <title>My Page</title>\n  </head>\n  <body>\n    <nav>\n      <h1>My Navigation</h1>\n      <input type=\"text\" placeholder=\"search...\">\n    </nav>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Compute the cosine similarity of two vectors.", "input": "Vectors: [2, 3] and [4, -5]", "output": "def cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\nv1 = [2, 3]\nv2 = [4, -5]\n\ncosine_sim = cosine_similarity(v1, v2)\n\nprint(cosine_sim)", "category": "Python"}, {"instruction": "Create a loop to print out all odd number from 0 to 10.", "input": "", "output": "for i in range(0, 11): \n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a few lines of code that prints out a multiplication table up to 12x12.", "input": "", "output": "for (let i = 1; i <= 12; i++) { \n    for (let j = 1; j <= 12; j++) \n        console.log(i + \" * \" + j + \" = \" + i*j); \n    console.log(\"------------------------------\"); \n}", "category": "Python"}, {"instruction": "Using an array, create a web page that prints out all of the array elements.", "input": "arr = [1, 2, 3, 4, 5]", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Array values</title>\n</head>\n<body>\n <ul>\n   <% for (let i = 0; i < arr.length; i++) { %>\n        <li><%= arr[i] %></li>\n   <% } %>\n </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a queries for finding the second highest salary of an employee in Employee table.", "input": "", "output": "SELECT MAX(Salary) \nFROM Employee \nWHERE Salary < (SELECT MAX(Salary) FROM Employee);", "category": "Python"}, {"instruction": "Create a for loop for counting from 1 to 10.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n   console.log(i); \n}", "category": "Python"}, {"instruction": "Create a class Person in Java that stores a person's name, email, gender, and age.", "input": "", "output": "public class Person {\nString name;\nString email;\nString gender;\nint age;\n\npublic Person(String name, String email, String gender, int age) {\n  this.name = name;\n  this.email = email;\n  this.gender = gender;\n  this.age = age; \n}\n \npublic String getName() {\n  return name;\n}\n\npublic String getEmail() {\n  return email;\n}\n\npublic String getGender() {\n  return gender;\n}\n\npublic int getAge() {\n  return age;\n}\n\npublic void setName(String name) {\n  this.name = name;\n}\n \npublic void setEmail(String email) {\n  this.email = email;\n}\n \npublic void setGender(String gender) {\n  this.gender = gender;\n}\n\npublic void setAge(int age) {\n  this.age = age;\n}\n\n}", "category": "Python"}, {"instruction": "Write a SQL query that returns all customers from the USA.", "input": "", "output": "SELECT * FROM customers WHERE country = 'USA';", "category": "Python"}, {"instruction": "Write a Python program to find the four letter words from a given list.", "input": "[\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"].", "output": "\"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)", "category": "Python"}, {"instruction": "Create a program to print the FizzBuzz series", "input": "Up to the number 25", "output": "def fizzbuzz(n): \n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0: \n            print(\"Fizz\") \n        elif num % 5 == 0: \n            print(\"Buzz\")\n        else: \n            print(num)", "category": "Python"}, {"instruction": "Construct a program to find the difference between two numbers", "input": "Given values x = 20 and y = 10", "output": "def diff(x, y):\n    return x - y", "category": "Python"}, {"instruction": "Create a python program to determine the comprehesive count of words in a given string", "input": "Given the string s =\"python programming is fun\"", "output": "def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    return count", "category": "Python"}, {"instruction": "Create a function to print an inverted triangle", "input": "It should display 8 lines with 5 asterisks", "output": "def print_inverted_triangle():\n    for i in range(8, 0, -1):\n        print(\"*\" * i)", "category": "Python"}, {"instruction": "Write a regex pattern to match all characters in a string that start with a lowercase letter.", "input": "", "output": "[a-z][a-zA-Z]*", "category": "Python"}, {"instruction": "Design a function in JavaScript that takes two parameters and performs a multiplication between them.", "input": "Number 1: 11\nNumber 2: 10", "output": "function multiply(num1, num2) {\n    return num1 * num2;\n}", "category": "Python"}, {"instruction": "Generate a boolean statement in Swift to compare two strings for equality.", "input": "String 1: \"hello\"\nString 2: \"Hello\"", "output": "let str1 = \"hello\" \nlet str2 = \"Hello\" \nlet result = str1.lowercased() == str2.lowercased()\nprint(result)", "category": "Python"}, {"instruction": "Find the sum of all even numbers in an integer array using Java.", "input": "int[] array = {8, -7, 4, -3, 19, 22};", "output": "int sum = 0; \nfor (int x : array) { \n    if (x % 2 == 0) \n        sum += x; \n} \nSystem.out.println(\"Sum of all even numbers = \" + sum);", "category": "Python"}, {"instruction": "Construct a loop in PHP to print the first 5 elements of an array.", "input": "$array = [1, 2, 3, 4, 5, 6];", "output": "for ($i = 0; $i < 5; $i++) {\n    echo $array[$i] . \" \";\n}", "category": "Python"}, {"instruction": "Generate a for loop in Java for printing the squares of each number in a given array.", "input": "int[] array = {4, 2, 6, 8};", "output": "for(int x : array) {\n    System.out.println(\"Square of \" + x + \" is \" + (x * x));\n}", "category": "Python"}, {"instruction": "Create a function in C++ that takes an input string and removes all vowels from it.", "input": "Input string = \"hello world\"", "output": "string removeVowels(string input)\n{\n    string output = \"\";\n    for(char c : input)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n            output += c;\n    }\n    return output;\n}", "category": "Python"}, {"instruction": "Write a code snippet to check if all characters in a given string are letters or numbers.", "input": "string = \"Welcome123\"", "output": "function checkString(string) { \n    var lettersOnly = /^[0-9a-zA-Z]+$/; \n    if (string.match(lettersOnly)) \n        console.log(\"The string contains only letters and numbers.\"); \n    else\n        console.log(\"The string contains other characters too.\"); \n}", "category": "Python"}, {"instruction": "What is the result of 3 + 4 * 9?", "input": "", "output": "The result of 3 + 4 * 9 is 39.", "category": "Python"}, {"instruction": "Create a class in C++ that contains two private member variables and a public member function to set both variables.", "input": "Variables: int age, string name", "output": "class Person \n{ \nprivate: \n    int age; \n    string name; \n\npublic: \n    void setVars(int a, string n) \n    { \n        age = a; \n        name = n; \n    } \n};", "category": "Python"}, {"instruction": "Write a sql statement to sort a list of employees in descending order based on their salary", "input": "", "output": "SELECT *\nFROM employees \nORDER BY salary DESC", "category": "Python"}, {"instruction": "Create a SQL query that returns the maximum and minimum order amounts from the database.", "input": "", "output": "SELECT MAX(order_amount) AS max_order, MIN(order_amount) AS min_order\nFROM orders;", "category": "Python"}, {"instruction": "Rewrite this below sql query into the active record query in Rails.", "input": "SELECT * FROM customers WHERE age > 20", "output": "Customer.where('age > ?', 20)", "category": "Python"}, {"instruction": "Construct a loop to apply a function to each element of a list", "input": "[2, 5, 8], function square", "output": "def apply_function(list, f):\n    for i in range(len(list)):\n        list[i] = f(list[i])\n    return list\n\ndef square(x):\n    return x*x\n\nlist = [2, 5, 8]\napply_function(list, square)", "category": "Python"}, {"instruction": "Generate code to create a PDF report from a given dataset.", "input": "The dataset contains information about customer orders.", "output": "def generate_report(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\n    table = doc.add_table(rows=1, cols=2)\n    table.style = 'TableGrid'\n    header_row = table.rows[0]\n    header_row.cells[0].text = 'Order ID'\n    header_row.cells[1].text = 'Amount'\n\n    rows = len(data)\n    for row in range(rows):\n        new_row = table.add_row()\n        new_row.cells[0].text = str(data[row][0])\n        new_row.cells[1].text = '{:.2f}'.format(data[row][1])\n\n    doc.add_page_break()\n    doc.save('Customer_Report.pdf')", "category": "Python"}, {"instruction": "Edit the given HTML code to use a common CSS class for all elements", "input": "<div class=\"header\">\n    <h1>Title</h1>\n    <h2>Subtitle</h2>\n</div>", "output": "<div class=\"common-class\">\n    <h1 class=\"common-class\">Title</h1>\n    <h2 class=\"common-class\">Subtitle</h2>\n</div>", "category": "Python"}, {"instruction": "Write a Python program to divide the numbers in the list by a given number", "input": "[2, 4, 10], 2", "output": "def divide_list(list, n):\n    return [x/n for x in list]", "category": "Python"}, {"instruction": "Create a valid input format for the calculation of the average of the given numbers.", "input": "[3, 8, 10]", "output": "3, 8, 10", "category": "Python"}, {"instruction": "Produce an HTML table given a dictionary containing student information.", "input": "{'name': 'John', 'age': 23, 'major': 'Computer Science'}", "output": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Major</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>23</td>\n        <td>Computer Science</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write a function in JavaScript to reorder the given list in ascending order.", "input": "[3, 1, 2]", "output": "function sortAscending(list) {\n    list.sort(function (a, b) {\n        return a - b;\n    });\n    return list;\n}", "category": "Python"}, {"instruction": "Produce the following output given the list of numbers.", "input": "[1, 2, 4, 5]", "output": "The list contains 1, 2, 4 and 5.", "category": "Python"}, {"instruction": "Describe the difference between a multidimensional array and a jagged array in C#.", "input": "", "output": "A multidimensional array is an array of arrays, in which all subarrays have the same length and all elements are arranged in tabular form. A jagged array is an array of arrays, in which the subarrays can have different lengths and the elements are arranged in irregular form.", "category": "Python"}, {"instruction": "Write a shell script to run a long-running process in the background.", "input": "", "output": "#!/bin/bash \n# run-in-background.sh\n\n# $1: Program to run\n# $2: Arguments to pass to the program\n\n$1 $2 & \necho \"Process running in background with PID: $!\"", "category": "Python"}, {"instruction": "Generate a 10x10 multiplication table in Python.", "input": "", "output": "for i in range(1,11): \n   for j in range(1,11): \n        print(i*j, end = \"\\t\") \n   print()", "category": "Python"}, {"instruction": "Create Java classes to represent a user and a post.", "input": "", "output": "public class User { \n  private String name; \n  private String email; \n\n  //getters and setters\n  ...\n}\n\npublic class Post {\n  private int id;\n  private String title;\n  private User author;\n  private String content;\n\n  //getters and setters \n  ... \n}", "category": "Python"}, {"instruction": "Create a relational database schema to store data of products sold in an e-commerce store.", "input": "Table: Products \nColumns: productId (primary key), productName, productCategory, price", "output": "CREATE TABLE Products ( \n  productId INT PRIMARY KEY, \n  productName VARCHAR(255), \n  productCategory VARCHAR(255), \n  price DECIMAL \n);", "category": "Python"}, {"instruction": "Write a C++ program to print out a multiplication table up to 10x10.", "input": "", "output": "#include <iostream>\nusing namespace std; \n  \nint main() \n{ \n    cout << \"Multiplication Table from 1 to 10:\" << endl; \n  \n    for (int i = 1; i <= 10; i++) { \n        for (int j = 1; j <= 10; j++) { \n            cout << i << \"*\" << j << \" = \" << i * j << endl; \n        } \n        cout << endl; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Construct a HTML form for user registration.", "input": "", "output": "<form class=\"user-registration-form\" action=\"/user-registration\" method=\"post\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\" id=\"name\"/>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\"/>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\"/>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"password-confirm\">Confirm Password</label>\n    <input type=\"password\" name=\"password-confirm\" id=\"password-confirm\"/>\n  </div>\n  <div class=\"form-group\">\n    <input type=\"submit\" value=\"Register\"/>\n  </div>\n</form>", "category": "Python"}, {"instruction": "Construct a Django view that outputs the following string", "input": "Hello World!", "output": "from django.http import HttpResponse\n\ndef hello_world(request):\n return HttpResponse(\"Hello World!\")", "category": "Python"}, {"instruction": "Generate code for an interface class in Java", "input": "Name: Calculator\nMethods: add(int a, int b)\nsubtract(int a, int b)", "output": "public interface Calculator {\n    int add(int a, int b);\n    int subtract(int a, int b);\n}", "category": "Python"}, {"instruction": "Formulate a spark query to delete records having a given value in a field", "input": "field: age; value: 18; table: people", "output": "DELETE FROM people WHERE age = 18;", "category": "Python"}, {"instruction": "Write a SQL query to list the product name and its price from the products table.", "input": "", "output": "SELECT product_name, price\nFROM products;", "category": "Python"}, {"instruction": "Compose a SQL query that returns the names and cities of customers from the Customer table whose last name starts with the letter \"L\".", "input": "", "output": "SELECT first_name, city \nFROM Customer \nWHERE last_name LIKE \"L%\"", "category": "Python"}, {"instruction": "Design a JavaScript class for a bank account with one private variable, account_balance. The class should have one public function, deposit(amount) that adds the given amount to the account_balance variable and prints the balance.", "input": "", "output": "class BankAccount {\n  constructor() {\n    this.account_balance = 0;\n  }\n  deposit(amount){\n    this.account_balance += amount;\n    console.log(\"Account Balance:$\" + this.account_balance);\n  }\n}", "category": "Python"}, {"instruction": "Change the following line of HTML code so that the font size is 36px.", "input": "<p style=\"font-size:18px\">Hello World</p>", "output": "<p style=\"font-size:36px\">Hello World</p>", "category": "Python"}, {"instruction": "What is the data structure used to implement a stack?", "input": "", "output": "The data structure used to implement a stack is a Last-In-First-Out (LIFO) data structure, which is typically implemented using an array or a linked list.", "category": "Python"}, {"instruction": "List the keys of the following dictionary.", "input": "person = {\n    \"name\": \"John\",\n    \"age\": 30\n}", "output": "person = {\n    \"name\": \"John\",\n    \"age\": 30\n}\n\nkeys = list(person.keys())\nprint(keys) # prints ['name', 'age']", "category": "Python"}, {"instruction": "Create an HTML element containing a link to \"https://www.google.com/\".", "input": "", "output": "<a href=\"https://www.google.com/\">Link to Google</a>", "category": "Python"}, {"instruction": "Create a for loop to print all the even numbers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Construct a GraphQL query to show all blog posts.", "input": "", "output": "{\n  allBlogPosts {\n    id\n    title\n    author\n    content\n    createdAt\n    modifiedAt\n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the employee numbers of all the employees who work in a department with ID 10.", "input": "", "output": "SELECT emp_no \nFROM Employees \nWHERE dept_id = 10;", "category": "Python"}, {"instruction": "Read the following JSON object and print the \"name\" corresponding to the \"id\" 2.", "input": "{\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": 26\n  },\n  \"2\": {\n    \"name\": \"Kelly\",\n    \"age\": 23\n  }\n}", "output": "json_obj = {\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": 26\n  },\n  \"2\": {\n    \"name\": \"Kelly\",\n    \"age\": 23\n  }\n}\n \nname = json_obj[\"2\"][\"name\"]\nprint(name) # prints Kelly", "category": "Python"}, {"instruction": "Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.", "input": "[1,3,5,7,3,9], k=3", "output": "def solution(arr, target):\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, i + target + 1):\n            if j >= len(arr):\n                break\n            if arr[i] == arr[j]:\n                return True\n    return False", "category": "Python"}, {"instruction": "Create a CSS code that demonstrates a nice hover effect for a button.", "input": "", "output": ".button {\n  background: #3498db;\n  color: #fff;\n  font-size: 1.2em;\n  padding: 10px;\n  transition: 0.2s;\n}\n\n .button:hover {\n  background: #4578ba;\n  box-shadow: 0px 0px 5px #ccc;\n  transform: scale(1.1);\n}", "category": "Python"}, {"instruction": "Generate a logic for a basic regex expression to detect a valid email address.", "input": "", "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "category": "Python"}, {"instruction": "Create a Java program which takes two integers as input and prints their greatest common divisor.", "input": "102, 75", "output": "public static int gcd(int a, int b){\n   // Base Case \n   if (a == 0) \n       return b; \n   if (b == 0) \n       return a; \n   \n   // a is greater \n   if (a > b) \n       return gcd(a-b, b); \n   return gcd(a, b-a); \n}", "category": "Python"}, {"instruction": "Generate a Delete API endpoint in Python Flask for a user to delete their data from a database.", "input": "", "output": "@app.route('/delete/<int:user_id>', methods=['DELETE'])\ndef delete(user_id):\n   user = db.query.get(user_id)\n   db.session.delete(user)\n   db.session.commit()\n   return jsonify({'message':'User deleted successfully'})", "category": "Python"}, {"instruction": "Create a HTML page which includes two input fields and a button that generates output field that should contain the sum of the two numbers given in the two input fields.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Sum Calculator</title>\n    <script>\n      function calculate() {\n        var num1 = Number(document.getElementById(\"num1\").value);\n        var num2 = Number(document.getElementById(\"num2\").value);\n        document.getElementById(\"output\").innerHTML = num1 + num2;\n      }\n    </script>\n  </head>\n  <body>\n    <h3>Sum Calculator</h3>\n    <input type=\"text\" id=\"num1\">\n    <input type=\"text\" id=\"num2\">\n    <button onclick=\"calculate()\"> Calculate </button>\n    <p>Result: <span id=\"output\"></span></p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Analyze the following list of strings and find the most frequent character.", "input": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]", "output": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n\nmost_frequent = max(char_counts, key=lambda k: char_counts[k])\nprint(most_frequent) # prints l", "category": "Python"}, {"instruction": "What is the purpose of the primary key in a database table?", "input": "", "output": "The primary key is a special field or set of fields in a database table that uniquely identifies each record. It is used to ensure that no two records have the same value, provide a link between tables, and index data for faster retrieval.", "category": "Python"}, {"instruction": "Construct a React component to show a blog post.", "input": "", "output": "import React from 'react';\n\nclass BlogPost extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>This is a Blog Post</h1>\n        <div> \n          {this.props.content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BlogPost;", "category": "Python"}, {"instruction": "Create a Node.js script to read from a MongoDB database.", "input": "", "output": "const MongoClient = require('mongodb').MongoClient;\n \n// Connection url\nconst url = 'mongodb://localhost:27017';\n// Database Name\nconst dbName = 'myproject';\n \n// Connect using MongoClient\nMongoClient.connect(url, function(err, client) {\n   // Create a collection we want to drop later\n   const col = client.db(dbName).collection('users');\n   // Insert a bunch of documents\n   col.find({}).toArray(function(err, docs) {\n      // Print the documents returned\n      console.log(\"Found the following records\");\n      console.log(docs)\n      // Close the DB\n      client.close();\n   });\n});", "category": "Python"}, {"instruction": "Suggest an assembly instruction to move 1 byte of data from one register A to register B.", "input": "", "output": "movb A, B", "category": "Python"}, {"instruction": "Construct an if/else block to convert a given score to a grade.", "input": "score = 25", "output": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else if (score >= 70) {\n    grade = 'C';\n} else if (score >= 60) {\n    grade = 'D';\n} else {\n    grade = 'F';\n}", "category": "Python"}, {"instruction": "How would you modify the following Java code to print the first 5 numbers of the Fibonacci sequence?", "input": "public class FibonacciPrinter {\n    public static void printNumbers() {\n        System.out.println(\"...\");\n    }\n}", "output": "public class FibonacciPrinter {\n    public static void printNumbers() {\n        int n1=0, n2=1, n3, i, count=5;\n        System.out.print(n1+\" \"+n2);\n\n        for(i=2;i<count;++i)\n        {    \n            n3=n1+n2;    \n            System.out.print(\" \"+n3);    \n            n1=n2;    \n            n2=n3;    \n        }    \n    }\n}", "category": "Python"}, {"instruction": "Come up with a Matlab expression to generate a random permutation of size 10.", "input": "", "output": "randperm(10)", "category": "Python"}, {"instruction": "Write an R command to sort the data in a data frame based on the values of one column.", "input": "df <- data.frame(A = c(4, 5, 11, 8), B = c(13, 12, 6, 11), C = c(4, 5, 7, 3))", "output": "df <- df[order(df$A),]", "category": "Python"}, {"instruction": "Modify the following C code to make it print \"Hello World\"", "input": "#include <stdio.h>\nint main()\n{ \n    printf(\"...\");\n    return 0;\n}", "output": "#include <stdio.h>\nint main()\n{ \n    printf(\"Hello World\");\n    return 0;\n}", "category": "Python"}, {"instruction": "Come up with a Java switch statement which will print a different number for various states of a given boolean.", "input": "", "output": "public class ConditionPrinter {\n    public static void printNumberForCondition(boolean condition) {\n        switch (condition) {\n          case true:\n            System.out.println(1);\n            break;\n          case false:\n            System.out.println(2);\n            break;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Come up with a C language function to check if a given number is even or odd.", "input": "", "output": "bool is_even(int num) {\n    return (num % 2 == 0);\n}", "category": "Python"}, {"instruction": "Modify the following Java code to reverse a given string.", "input": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";", "output": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";\n        for(int i = str.length() - 1; i >= 0; i--) {\n            result += str.charAt(i);\n        }\n        return result;\n    }\n}", "category": "Python"}, {"instruction": "Come up with a SQL statement to select only the names of customer whose age is higher than 30.", "input": "", "output": "SELECT name FROM customers WHERE age > 30;", "category": "Python"}, {"instruction": "Come up with a Python generator expression to iterate over a given list and return only even elements.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)", "category": "Python"}, {"instruction": "Modify the following python code to calculate the average of a list of numbers.", "input": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''", "output": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)", "category": "Python"}, {"instruction": "Create a function in Ruby to convert a Fahrenheit temperature to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(fahrenheit)\n  celsius = (fahrenheit - 32) * (5.0/9.0)\n  return celsius\nend", "category": "Python"}, {"instruction": "Compare and contrast the advantages and disadvantages of using AJAX for a website.", "input": "", "output": "AJAX provides several advantages for a website. It allows for asynchronus data transfer between the server and the client, making it possible to update a web page without refreshing the whole page. It also improves the user experience by providing a faster, smoother interface. By minimizing server load, AJAX facilitates better scalability.\n\nOn the other hand, AJAX can lead to slower response times, especially if a large amount of data is being transferred. It can also be difficult to debug since errors are often not visible to the user or the developer. Additionally, AJAX requires JavaScript to be enabled, which may not be the case for all users.", "category": "Python"}, {"instruction": "Write a R script that reads in dataset and prints out the summary statistics of the dataset.", "input": "", "output": "# Read in the dataset\ndata <- read.csv(\"data.csv\")\n\n# Print out the summary statistics\nsummary(data)", "category": "Python"}, {"instruction": "Create a Java program to validate a credit card number using Luhn's algorithm.", "input": "", "output": "\"\"\"\nValidate a credit card number using Luhn's algorithm.\n\"\"\"\n\nimport java.util.Arrays;\n\npublic class Luhn {\n\n   public static boolean isValidCard(String cardNumber) {\n\n        if (cardNumber == null) {\n            return false;\n        }\n\n        char checkDigit = cardNumber.charAt(cardNumber.length() - 1);\n        String digit = calculateCheckDigit(cardNumber.substring(0, cardNumber.length() - 1));\n        return checkDigit == digit.charAt(0);\n    }\n\n    public static String calculateCheckDigit(String digit) {\n        if (digit == null) {\n            return null;\n        }\n\n        String reversDigit = new StringBuilder(digit).reverse().toString();\n        int[] digits = new int[reversDigit.length()];\n        for (int i = 0; i < reversDigit.length(); i++) {\n            digits[i] = Character.getNumericValue(reversDigit.charAt(i));\n        }\n        for (int i = 1; i < digits.length; i = i + 2) {\n            digits[i] = 2 * digits[i];\n            if (digits[i] > 9) {\n                digits[i] = digits[i] - 9;\n            }\n        }\n        int sum = Arrays.stream(digits).sum();\n        return new Integer(10 - (sum % 10)).toString();\n    }\n}", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters and with at least 1 number and 1 letter.", "input": "", "output": "import string \nimport random \n\ndef generate_password(n):  # n is the length of the password\n  \n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(n))\n    while not any(c.isdigit() for c in password) or not any(c.isalpha() for c in password):\n        password = ''.join(random.choice(alphabet) for i in range(n))\n    return password\n\nprint(generate_password(8))", "category": "Python"}, {"instruction": "Create a SQL query to retrieve the name corresponding to a given ID.", "input": "", "output": "SELECT name \nFROM table \nWHERE id = <id>", "category": "Python"}, {"instruction": "Find the most frequent name in a given array of names.", "input": "[\"John\", \"John\", \"Sandra\", \"Sandra\", \"Sandra\", \"Tom\"]", "output": "function mostFrequent(arr) {\n    let maxCount = 0;\n    let item;\n    let frequencyMap = new Map();\n\n    arr.forEach(name => {\n        if (frequencyMap.has(name)) {\n            frequencyMap.set(name, frequencyMap.get(name) + 1);\n        } else {\n            frequencyMap.set(name, 1);\n        }\n    });\n\n    for (let [name, count] of frequencyMap.entries()) {\n        if (count > maxCount) {\n            maxCount = count;\n            item = name;\n        }\n    }\n\n    return item;\n}\n\nconsole.log(mostFrequent([\"John\", \"John\", \"Sandra\", \"Sandra\", \"Sandra\", \"Tom\"])); // Sandra", "category": "Python"}, {"instruction": "Construct a HTML template using Bootstrap.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Bootstrap Example</title>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\">\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\"></script>\n</head>\n<body>\n\n<div class=\"container\">\n  <h2>Template</h2>\n  <p>This is a template for a Bootstrap page.</p>\n  <p>It uses bootstrap's grid system for the layout.</p>  \n</div>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Given an array of integers, sort it using bubble sort in Java.", "input": "", "output": "public static int[] bubbleSort(int[] array) {\n        int n = array.length;\n        for (int i = 0; i < n-1; i++) {\n            for (int j = 0; j < n-i-1; j++) {\n                if (array[j] > array[j+1]) {\n                    int temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                }\n            }\n        }\n        return array;\n    }", "category": "Python"}, {"instruction": "Construct a React component to show an animated loading screen.", "input": "", "output": "import React from 'react';\nimport { Animate } from '../animations';\n\nclass LoadingScreen extends React.Component {\n  render() {\n    return (\n      <div>\n        <Animate type=\"fadeIn\" delay={0.5}>\n          <div>Loading...</div>\n        </Animate>\n      </div>\n    );\n  }\n}\n\nexport default LoadingScreen;", "category": "Python"}, {"instruction": "How would you solve this leetcode problem in Python?", "input": "Problem: Implement the following function\n\n```def majorityElement(self, nums: List[int]) -> int:```\n\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \u230a n/2 \u230b times.", "output": "def majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key", "category": "Python"}, {"instruction": "How to debug a program in Python?", "input": "", "output": "In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program.", "category": "Python"}, {"instruction": "Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword", "input": "", "output": "import wikipedia\n\ndef get_top_ten_results(keyword):\n    results = wikipedia.search(keyword, results=10)\n    for result in results:\n        print(result)", "category": "Python"}, {"instruction": "Change the following code from Python to JavaScript", "input": "def add_numbers(a, b):\n    return a + b", "output": "function addNumbers(a, b) {\n    return a + b; \n}", "category": "Python"}, {"instruction": "Write an assembly program to subtract two numbers.", "input": "", "output": "SUB AA, BB\n\n; AA = AA - BB\n;\n; This program subtracts the contents of BB from AA\nMove B, A\nNot B\nAdd B, #1\nAdd A, B\n; A now contains the result", "category": "Python"}, {"instruction": "How can you make a dictionary key iterable in Python?", "input": "", "output": "A dictionary in Python can be made iterable using a for loop. To iterate over the keys of a dictionary, we can use the ``dict.keys()`` method which returns an iterable object of the keys in the dictionary. This iterable can then be used to iterate over the keys of the dictionary.", "category": "Python"}, {"instruction": "How is the traversal of a binary search tree done?", "input": "", "output": "Binary Search Tree traversal can be done in three different ways: preorder, inorder, and postorder. In preorder traversal, the root of the tree is first printed, followed by traversing the left subtree, then the right subtree. In inorder traversal, the left subtree is traversed first, followed by the root node and the right subtree. Finally, in postorder traversal, the left subtree is traversed first, followed by the right subtree and the node itself.", "category": "Python"}, {"instruction": "What is the logic behind bubble sort?", "input": "", "output": "Bubble sorting is an algorithm based on iterating through an array of objects or values and comparing each adjacent pair of items. If the first item is greater than the second item, they are swapped, else they remain the same. This process continues until no swaps are needed, which indicates that the elements are sorted increasingly.", "category": "Python"}, {"instruction": "For a given array of numbers, find the length of the longest increasing subsequence", "input": "[1, 5, 4, 3, 8, 10, 6]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "category": "Python"}, {"instruction": "How to make an AJAX call using the jQuery library?", "input": "", "output": "$.ajax({\n    url: 'url_to_be_called',\n    type: 'GET',\n    dataType: 'json',\n    success: function(response) {\n        // do something with the response\n    }\n});", "category": "Python"}, {"instruction": "Design a function in JavaScript to return the index of the last element in an array.", "input": "[4, 5, 6, 7]", "output": "function lastIndex(arr) {\n    return arr.length - 1;\n}\n\nconsole.log(lastIndex([4, 5, 6, 7])); //3", "category": "Python"}, {"instruction": "Create a MySQL query to get the name corresponding to the highest id.", "input": "", "output": "SELECT name\nFROM table\nORDER BY id DESC\nLIMIT 1", "category": "Python"}, {"instruction": "Create a code that can be used to perform a linear search in an array.", "input": "[1, 3, 5, 7, 8, 9], 8", "output": "func linearSearch(_ array: [Int], _ x: Int) -> Int {\n    for (index, value) in array.enumerated() {\n        if value == x {\n            return index\n        }\n    }\n    return -1\n}\n\nprint(linearSearch([1, 3, 5, 7, 8, 9], 8))", "category": "Python"}, {"instruction": "Given an array of integers, sort the array in-place using quick sort.", "input": "[12, 8, 9, 10, 4]", "output": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Create a C# program to implement a search algorithm which returns the index or position of a given key in an array", "input": "", "output": "public static int LinearSearch(int[] array, int key) \n{ \n    for (int i = 0; i < array.Length; i++) \n    { \n        if (array[i] == key) \n            return i; \n    } \n  \n    return -1; \n}", "category": "Python"}, {"instruction": "Write a python script to print out a list comprehension that prints out all the integers in a given range", "input": "1-10", "output": "my_list = [x for x in range(1, 11)]  \nprint(my_list)", "category": "Python"}, {"instruction": "Create a function in Ruby to input an array and remove all the elements of the array", "input": "", "output": "def delete_array(arr) \n  arr.clear\nend", "category": "Python"}, {"instruction": "What is the value of ``a`` after the following statement?", "input": "a = 5\na += 3", "output": "a = 8", "category": "Python"}, {"instruction": "Explain what the following code is doing.", "input": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)", "output": "The code is defining a function called \"generate_random_number\" which will generate a randomly chosen integer between 1 and 10 using the randint() function from the random library.", "category": "Python"}, {"instruction": "Find the maximum among three integers.", "input": "widget_1 = 8\nwidget_2 = 4\nwidget_3 = 12", "output": "maximum = max(widget_1, widget_2, widget_3)", "category": "Python"}, {"instruction": "Fragment the following statement ignoring whitespace and punctuation:", "input": "\"Hi, how are you doing?\"", "output": "word_list = [\"Hi,\", \"how\", \"are\", \"you\", \"doing?\"]", "category": "Python"}, {"instruction": "Define a function that returns the string \"Hello World!\"", "input": "", "output": "def hello_world():\n    return \"Hello World!\"", "category": "Python"}, {"instruction": "How would you create a list of 10 elements by calling the range() function?", "input": "", "output": "my_list = list(range(10))", "category": "Python"}, {"instruction": "Write a simple Swift program that prompts the user to enter two integers and prints out the maximum value of the two.", "input": "7, 20", "output": "import Foundation\n\nfunc maximumValue(num1: Int, num2: Int) {\n let maxValue = max(num1, num2)\n print(maxValue)\n}\n\n// Output\nmaximumValue(num1: 7, num2: 20)\n// Output", "category": "Python"}, {"instruction": "Using Python, create a function to return the number of days in a particular month.", "input": "September", "output": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30", "category": "Python"}, {"instruction": "Create a JavaScript program that reverses a given string.", "input": "Hello", "output": "// function to reverse a given string\nfunction reverseString(str) {\n return str.split('').reverse().join('');\n}\n\n// Output\nreverseString('Hello') \n// Output\nolleH", "category": "Python"}, {"instruction": "Using Java, write a program to check whether an integer is even or odd.", "input": "7", "output": "public class OddOrEven {\n\n public static void main(String[] args) {\n \n  int num = 7;\n \n  // if number is divisible by two then it is even\n  if (num % 2 == 0)\n  System.out.println(\"Even\");\n  else\n  System.out.println(\"Odd\");\n }\n}\n\n# Output:\nOdd", "category": "Python"}, {"instruction": "Construct a C++ code snippet to create a basic class named 'Person' with 2 fields: 'name' and 'age'.", "input": "", "output": "class Person {\n   string name; \n   int age; \npublic:\n   Person(string n, int a) {\n      name = n;\n      age = a;\n   }\n};", "category": "Python"}, {"instruction": "Create a Python program to calculate prime numbers between 0 to 50.", "input": "", "output": "# Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)", "category": "Python"}, {"instruction": "Print all the permutations of a given list", "input": "[1, 2, 3]", "output": "def permute(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\nlist1 = [1, 2, 3]\nresult = permute(list1) \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Create a Python script to fetch the weather data of a given city", "input": "Bangalore", "output": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")", "category": "Python"}, {"instruction": "Generate a regex pattern for valid emails", "input": "", "output": "^[\\w\\.\\+\\-]+@[\\w\\-]+\\.[\\w\\-\\.]+$", "category": "Python"}, {"instruction": "Correct the following code and generate an output:", "input": "list_of_ints = [2, 3, 4, 8]\n\nfor x in list_of_ints\n    print(x)", "output": "list_of_ints = [2, 3, 4, 8]\n\nfor x in list_of_ints:\n    print(x)\n\n# Output:\n2\n3\n4\n8", "category": "Python"}, {"instruction": "Write a function to print the permutations of a given string.", "input": "", "output": "def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for permutation in (print_permutations(string[1:])):\n            for i in range(len(string)):\n                print(permutation[:i] + string[0] + permutation[i:])\n\nprint_permutations(\"abc\")", "category": "Python"}, {"instruction": "How would you reverse a string in Python?", "input": "", "output": "my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order", "category": "Python"}, {"instruction": "Using given HTML code, make the font color of 2nd paragraph blue.", "input": "<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>", "output": "<body>\n    <p>This is the first paragraph.</p>\n    <p style=\"color:blue;\">This is the second paragraph.</p>\n</body>", "category": "Python"}, {"instruction": "In Ruby, write a method that takes two strings and prints them in reverse order.", "input": "", "output": "def print_strings_reverse(string1, string2)\n  puts string2\n  puts string1\nend", "category": "Python"}, {"instruction": "In Python, write a function that takes two integers a, b and returns a*b.", "input": "", "output": "def multiply(a, b):\n  return a * b", "category": "Python"}, {"instruction": "Using MongoDB, create a query to find all documents where the status is \"ACTIVE\".", "input": "", "output": "db.collection.find({status: \"ACTIVE\"})", "category": "Python"}, {"instruction": "Code a PHP program to detect if a URL is valid or not.", "input": "", "output": "<?php \n  \n// This function will check if URL is valid \nfunction is_url_valid($url) \n{ \n    $url = @parse_url($url); \n  \n    if (!$url)\n        return false; \n\n    $url = array_map('trim', $url); \n    $url['port'] = (!isset($url['port'])) ? 80 : \n        (int)$url['port']; \n\n    $path = (isset($url['path'])) ? $url['path'] : ''; \n\n    if ($path == '') \n        $path = '/'; \n  \n    $path .= (isset($url['query'])) ? \"?$url[query]\" : ''; \n  \n    if (isset($url['host']) AND $url['host'] != gethostbyname($url['host'])) \n    { \n        if (PHP_VERSION >= 5) \n            return \n                checkdnsrr($url['host'], 'A'); \n        else \n            return checkdnsrr($url['host'], \n                'A'); \n    } \n\n    return false; \n}", "category": "Python"}, {"instruction": "Using pandas, create a dataframe with two columns and five rows.", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], \n    columns=['a', 'b']\n    )", "category": "Python"}, {"instruction": "Write a Swift function to parse a JSON string into a dictionary.", "input": "", "output": "func parseJsonToDictionary(jsonString: String) -> [String: Any]? {\n  if let data = jsonString.data(using: .utf8) {\n    do {\n      return try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]\n    } catch {\n      print(error.localizedDescription)\n    }\n  } \n  return nil\n}", "category": "Python"}, {"instruction": "Write a Rust program to convert a string to title case.", "input": "", "output": "fn to_title_case(s: String) -> String {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut title_cased = String::new();\n    for word in words {\n        let mut chars = word.chars();\n        title_cased.push_str(&chars.next().unwrap().to_uppercase().to_string());\n        for char in chars {\n            title_cased.push_str(&char.to_lowercase().to_string());\n        }\n        title_cased.push(' ');\n    }\n    title_cased.trim().to_string()\n\n}", "category": "Python"}, {"instruction": "Given a factor of two numbers, find the two numbers", "input": "factor: 12", "output": "The two numbers are 1 and 12.", "category": "Python"}, {"instruction": "In Java, create a method to detect if a number is a palindrome.", "input": "", "output": "public static boolean isPalindrome(int number) {\n int num = number; \n int reverse = 0; \n  \n while(number > 0) \n { \n  int remainder = number % 10; \n  reverse = (reverse*10) + remainder; \n  number = number/10; \n } \n  \n return num == reverse; \n}", "category": "Python"}, {"instruction": "Generate a Hash Table in Python with given length and values.", "input": "size = 10\nvalues = [20, 12, 45, 89, 78, 90]", "output": "hash_table = [None]*size\n\nfor value in values:\n    hash_value = value % size\n    hash_table[hash_value] = value\n \nprint(hash_table)", "category": "Python"}, {"instruction": "Write a script in JavaScript to print the first 20 Fibonacci numbers.", "input": "", "output": "let n1 = 0;\nlet n2 = 1;\nlet n3;\n\nconsole.log(n1 + \" \" + n2);\n\nfor(let i = 2; i < 20; ++i)\n{\n    n3 = n1 + n2; \n    console.log(n3);\n    n1 = n2;\n    n2 = n3;\n}", "category": "Python"}, {"instruction": "Name an advantage of using linked list over an array.", "input": "", "output": "One advantage of a linked list over an array is that it does not require the memory for storing all the elements to be allocated at once. Linked lists allow memory to be allocated as needed and can be easily expanded as new records are added. Also, linked list can easily insert and remove elements at any position in the list. Additionally, they can easily be manipulated or sorted in the same order in which they are stored. Finally, linked lists can store data items of different sizes while arrays require all elements to be the same size.", "category": "Python"}, {"instruction": "Read an array from stdin and find the maximum element in it.", "input": "[3, 8, 5, 6, 1]", "output": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {3, 8, 5, 6, 1};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int max_element = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (arr[i] > max_element)\n            max_element = arr[i];\n    }\n    cout << \"Maximum element in the array is \" << max_element << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Edit a given HTML code to make the font size of 1st paragraph 12px.", "input": "<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>", "output": "<body>\n    <p style=\"font-size: 12px;\">This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>", "category": "Python"}, {"instruction": "You need to sort an Unsorted Linked List in ascending order.", "input": "head -> 10 -> 8 -> 5 -> 12 -> 15", "output": "head -> 5 -> 8 -> 10 -> 12 -> 15", "category": "Python"}, {"instruction": "Write Python code to print out an inverse dictionary where the original key becomes the value and the original value become the key.", "input": "original_dict = {'a':1, 'b':2, 'c':3}", "output": "inverse_dict = {value:key for key, value in original_dict.items()}\nprint(inverse_dict)", "category": "Python"}, {"instruction": "Use JavaScript to convert 24-hour time format to 12-hour time format.", "input": "", "output": "function convertTimeFormat(time) {\n    let hour = time.slice(0, 2);\n    let am_or_pm = hour >= 12 ? 'pm' : 'am';\n    let twelve_hour_format = (hour % 12 ? hour % 12 : 12) + time.slice(2, 5) + am_or_pm;\n    \n    return twelve_hour_format;\n}", "category": "Python"}, {"instruction": "Create an HTML webpage to display a welcome message.", "input": "", "output": "<html> \n  <head> \n    <title>Welcome</title> \n  </head> \n  <body>\n    <h1>Welcome!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a C# program to remove all adjacent duplicates from a string.", "input": "string str = \"azxxzy\";", "output": "string removeAdjacentDuplicates(string str) \n{ \n    int l = str.Length; \n    char[] array = str.ToCharArray(); \n  \n    int index = 0; \n    for (int i = 0; i < l; i++) \n    { \n        if (i == 0 || array[i - 1] != array[i]) \n            array[index++] = array[i]; \n        else\n            while (i + 1 < l && array[i + 1] == array[i]) \n                i++; \n    } \n  \n    return new string(array, 0, index); \n}", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2.", "input": "s1 = 'listen'\ns2 = 'silent'", "output": "def isAnagram(s1, s2): \n    if (sorted(s1) == sorted(s2)): \n        print(\"The strings are anagrams.\") \n    else: \n        print(\"The strings aren't anagrams.\")\n  \nisAnagram(s1, s2)", "category": "Python"}, {"instruction": "Given a list of numbers, write code using Python to print the sum of all elements.", "input": "list_numbers = [2, 3, 4, 5, 6]", "output": "sum_of_numbers = 0\n\nfor i in list_numbers:\n    sum_of_numbers += i\n\nprint(sum_of_numbers)", "category": "Python"}, {"instruction": "Create a function to find the total of all elements in the list", "input": "nums = [1, 2, 3, 4, 5]", "output": "def find_total(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Create a function that takes in a 2D list and prints the contents of the list in a 2D format", "input": "matrix = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n]", "output": "def print_matrix(matrix):\n    for row in matrix:\n        for num in row:\n            print(num, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Using the given data, write a function that returns the average of the given numbers", "input": "a_list = [1, 2, 3, 4, 5]", "output": "def average(a_list):\n    total = 0\n    for num in a_list:\n        total += num\n    return total / len(a_list)", "category": "Python"}, {"instruction": "Add a comment to explain the purpose of the following code.", "input": "for i in range(100):\n    print(i)", "output": "# Prints all numbers from 0 to 99\nfor i in range(100):\n    print(i)", "category": "Python"}, {"instruction": "Create a variable and set it to a value to pass the test.", "input": "# Test if the variable `favorite_color` equals \"blue\"", "output": "favorite_color = \"blue\"", "category": "Python"}, {"instruction": "Construct an SQL query to create a table for tracking employees.", "input": "", "output": "create table Employees (\n  ID int not null,\n  Name varchar(255) not null,\n  Address varchar(255) not null,\n  Email varchar(255) not null,\n  Department varchar(255) not null,\n  primary key (ID)\n);", "category": "Python"}, {"instruction": "Generate a valid CSS class that aligns an element to the center.", "input": "", "output": ".center {\n  margin: 0 auto;\n  text-align: center;\n  display: block;\n}", "category": "Python"}, {"instruction": "Create an array in Java that contains five elements each of type String.", "input": "", "output": "String[] arr = {\"String 1\", \"String 2\", \"String 3\", \"String 4\", \"String 5\"};", "category": "Python"}, {"instruction": "Construct a hyperlink with text \"Google\" and link it to google.com", "input": "", "output": "<a href=\"http://www.google.com/\">Google</a>", "category": "Python"}, {"instruction": "Can you propose a C++ program for adding two matrices?", "input": "Matrix1 = [[2, 3],  \n          [4, 5]]\n \nMatrix2 = [[6, 7],  \n          [8, 9]]", "output": "#include <iostream> \n#define N 2 \n  \n// function to add two matrices \nvoid addMatrix(int A[][N], int B[][N], int C[][N]) \n{ \n    int i, j; \n    for (i = 0; i < N; i++) \n        for (j = 0; j < N; j++) \n            C[i][j] = A[i][j] + B[i][j]; \n} \n  \nint main() \n{ \n    int A[N][N] = {{2, 3}, {4, 5}}; \n  \n    int B[N][N] = {{6, 7}, {8, 9}}; \n  \n    int C[N][N]; // To store result \n    addMatrix(A, B, C); \n  \n    cout << \"Resultant Matrix:\\n\"; \n    int i, j;\n    // Print the resultant matrix \n    for (i = 0; i < N; i++) { \n        for (j = 0; j < N; j++) \n            cout << C[i][j] << \" \"; \n        cout << \"\\n\"; \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Design an HTML form with 2 input fields: name and email and submit button.", "input": "", "output": "<form action=\"\" method=\"post\">\n  Name: <input type=\"text\" name=\"name\" required><br>\n  Email: <input type=\"text\" name=\"email\" required><br>\n  <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Suggest a line of code in Rust for generating a random number within a given range.", "input": "", "output": "let randomNumber = rand::thread_rng().gen_range(min, max);", "category": "Python"}, {"instruction": "Can you draft an algorithm in C# for computing the factorial of a number?", "input": "num = 5", "output": "public static int factorial(int num) \n{ \n    int res = 1, i; \n    for (i=2; i<=num; i++) \n        res *= i; \n    return res; \n}", "category": "Python"}, {"instruction": "Can you propose a way in C for extracting the day, month and year of the input date in the format \"dd-mm-yyyy\"?", "input": "date = \"31-12-2020\"", "output": "#include <stdio.h> \n#include <stdlib.h> \n  \nvoid getDate(char* date) \n{ \n   char *day, *month, *year;   \n   \n   day = strtok(date, \"-\"); \n   month = strtok(NULL, \"-\"); \n   year = strtok(NULL, \"-\"); \n     \n   printf(\"Day = %s\\n\", day); \n   printf(\"Month = %s\\n\", month); \n   printf(\"Year = %s\\n\", year); \n}", "category": "Python"}, {"instruction": "Create a function in PHP for summing up all the squares of the numbers between 1 and the given number.", "input": "num = 8", "output": "function sum_of_squares($num) { \n    $sum = 0; \n    for ($i = 1; $i <= $num; $i++) { \n        $sum += $i * $i; \n    } \n    return $sum; \n}", "category": "Python"}, {"instruction": "Develop an algorithm for counting the number of unique characters in a string.", "input": "str = \"Hello World!\"", "output": "def uniqueChars(str): \n    charCount = dict() \n    for ch in str: \n        if ch in charCount: \n            charCount[ch] += 1\n        else: \n            charCount[ch] = 1\n    return len(charCount)", "category": "Python"}, {"instruction": "Implement a function that checks if two strings are anagrams.", "input": "", "output": "def is_anagram(a, b):\n    char_to_count = {}\n    \n    if len(a) != len(b):\n        return False\n  \n    for char in a:\n        if char in char_to_count:\n            char_to_count[char] += 1\n        else:\n            char_to_count[char] = 1\n    \n    for char in b:\n        if char not in char_to_count:\n            return False\n        else:\n            char_to_count[char] -= 1\n\n    for count in char_to_count.values():\n        if count != 0:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Suggest a function written in Haskell for reversing an array.", "input": "arr = [3, 4, 9, 5, 8]", "output": "reverse :: [a] -> [a]\nreverse arr = rev arr []\n  where\n  rev [] ans = ans\n  rev (x:xs) ans = rev xs (x:ans)", "category": "Python"}, {"instruction": "Write code in Ruby for counting the number of items within an array.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "def count_array(array)\n  count = 0\n  array.each do |item|\n    count += 1\n  end\n  count\nend", "category": "Python"}, {"instruction": "Create an algorithm in MATLAB for sorting an array of integers in ascending order.", "input": "arr = [8, 3, 5, 9, 4]", "output": "function sortedArr = sortAscend(arr)\nsortedArr = zeros(size(arr));\ncount = 0;\n\nwhile ~isempty(arr)\n    minimum = min(arr);\n    sortedArr(count+1) = minimum;\n    count = count + 1;\n    arr = arr(arr~=minimum);\nend", "category": "Python"}, {"instruction": "Color the following table header background to lime.", "input": "", "output": "th {\n  background-color: #00ff00;\n}", "category": "Python"}, {"instruction": "Construct an SQL query to delete a row from a table named \"Employees\".", "input": "", "output": "DELETE FROM Employees \nWHERE ID=x;", "category": "Python"}, {"instruction": "Design a function in Java that rotates a N x N matrix 90 degrees.", "input": "", "output": "public static int[][] rotateMatrix(int[][] matrix, int n) { \n  int[][] rotated = new int[n][n];\n  for (int row = 0; row < n; row++) {\n      for (int col = 0; col < n; col++) {\n          rotated[col][n-1-row] = matrix[row][col];\n      }\n  } \n  return rotated;\n}", "category": "Python"}, {"instruction": "Create a CSS rule to apply a two-pixel red border to a text box.", "input": "", "output": "input[type=\"text\"] {\n  border: 2px solid red;\n}", "category": "Python"}, {"instruction": "Create an algorithm with pseudocode to find maximum and minimum element of an array.", "input": "", "output": "Algorithm findMaxMin(arr)\n  Input: arr - an array of integers\n  Output: maxEle - the maximum element in the array, minEle - the minimum element in the array\nBegin\n  maxEle <- arr[0]\n  minEle <- arr[0]\n  for i = 0 to length(arr)-1 do\n    if arr[i] > maxEle then\n      maxEle <- arr[i]\n    end if\n    if arr[i] < minEle then\n      minEle <- arr[i]\n    end if\n  end for\n  return maxEle, minEle\nEnd", "category": "Python"}, {"instruction": "Could you suggest a method written in Java for finding the average of a set of numbers?", "input": "Numbers = [10, 20, 5, 15]", "output": "public static double getAverage(int[] Numbers){\n\tdouble sum = 0;\n\tfor(int num : Numbers){\n\t\tsum += num;\n\t}\n\tdouble average = sum / Numbers.length;\n\treturn average;\n}", "category": "Python"}, {"instruction": "Could you code a script in Bash for accepting user inputs?", "input": "", "output": "echo \"Enter your name:\"\nread name \necho \"Hello $name, How can I help you?\"", "category": "Python"}, {"instruction": "Fill in the blank with a successful response for a given user prompt.", "input": "Please enter a valid number:", "output": "Please enter a valid number: <Enter a valid number e.g. 6>", "category": "Python"}, {"instruction": "Create a function to sort an array of objects by the value of a certain key.", "input": "arr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}];", "output": "def sort_by_key(arr, key):\n  sorted_arr = sorted(arr, key=lambda k: k[key])\n  return sorted_arr\n\n# Testing\narr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}]\nsorted_arr = sort_by_key(arr, 'age')\nprint(\"Sorted array by age: \", sorted_arr)", "category": "Python"}, {"instruction": "Write Python code to return all indices of substrings in a given string.", "input": "string= \"hi world bye world\"", "output": "def substring_indices(string): \n    lengths = []\n    # calculate length of substring \n    for i in range(len(string)): \n        for j in range(i+1, len(string)+1): \n            lengths.append(string[i:j]) \n\n    # create array to hold all indices \n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)) if string.startswith(length, i)])\n\n    return indices", "category": "Python"}, {"instruction": "Find the longest substring of a string without repeating characters", "input": "string=\"abcabcbb\"", "output": "def longestSubstring(string): \n    start_index = max_length = 0\n    visited = {} \n  \n    # traverse through the string  \n    for i in range(len(string)):  \n        if string[i] in visited and start_index <= visited[string[i]]: \n            start_index = visited[string[i]] + 1\n        else: \n            max_length = max(max_length, i - start_index + 1) \n  \n        visited[string[i]] = i \n  \n    return max_length", "category": "Python"}, {"instruction": "Develop a MATLAB function to calculate the product of two matrices.", "input": "", "output": "function F = matrix_mult(A,B)\n  [m,n] = size(A);\n  [p,q] = size(B);\n  if (n~=p)\n      error('The matrices can not be multiplied');\n  end\n  F = zeros(m,q);\n  for i=1:m\n      for j=1:q\n          sum = 0;\n          for k=1:n\n              sum = sum + A(i,k)*B(k,j);\n          end\n          F(i,j) = sum;\n      end\n  end\nend", "category": "Python"}, {"instruction": "What is tail recursion?", "input": "", "output": "Tail recursion is a special form of recursion in which the recursive call is the last statement in the function. This form of recursion improves space efficiency of the algorithm, since only one activation record is needed at any given time, as there is no need to hold onto the history of the recursive call stack. This form of recursion can often be replaced by iterative solution for better performance.", "category": "Python"}, {"instruction": "Write a loop to convert the list of integers in the array to a single number.", "input": "arr = [2, 3, 4, 5]", "output": "num = 0\nfor digit in arr:\n  num = num * 10 + digit", "category": "Python"}, {"instruction": "Find all possible permutations of the string \"ABC\".", "input": "", "output": "permutations = [''.join(p) for p in permutations(list(\"ABC\"))]", "category": "Python"}, {"instruction": "Design a React JS component to render a button that displays the text \"Click Me\".", "input": "", "output": "const Button = () => <button>Click Me</button>;", "category": "Python"}, {"instruction": "Estimate the complexity (Big-O) of this algorithm.", "input": "arr = [3, 4, 7, 5, 6]\n\ndef find_average(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total / len(arr)", "output": "O(n)", "category": "Python"}, {"instruction": "Design a CSS stylesheet to color alternate rows in a table grey.", "input": "", "output": "table tr:nth-child(even){\n    background-color: #f2f2f2;\n}", "category": "Python"}, {"instruction": "Generate a SQL query to select all students who are in the 'Computer Science' program.", "input": "table_name = 'students'", "output": "SELECT * FROM students WHERE program = 'Computer Science';", "category": "Python"}, {"instruction": "Extract the numerical values from the following string.", "input": "sentence = \"My age is 20 years old.\"", "output": "num_values = [num_val for num_val in re.findall(r\"\\d+\", sentence)]", "category": "Python"}, {"instruction": "Convert the following XML code to JSON.", "input": "<people>\n  <person>\n    <name>John</name>\n    <age>24</age>\n  </person>\n  <person>\n    <name>Dave</name>\n    <age>30</age>\n  </person>\n</people>", "output": "{\n  \"people\": {\n    \"person\": [\n      {\n        \"name\": \"John\",\n        \"age\": 24\n      },\n      {\n        \"name\": \"Dave\",\n        \"age\": 30\n      }\n    ]\n  }\n}", "category": "Python"}, {"instruction": "Generate a random password of 8 characters, including at least one letter, one number, and one symbol", "input": "", "output": "Fjk3@sam", "category": "Python"}, {"instruction": "Classify the given text according to its sentiment.", "input": "This product is terrible.", "output": "Negative", "category": "Python"}, {"instruction": "Update the following CSS to center align the text", "input": "h1 {\n  color: #FF0000;\n}", "output": "h1 {\n  color: #FF0000;\n  text-align: center;\n}", "category": "Python"}, {"instruction": "Compress a given string using Run Length Encoding", "input": "string=\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"", "output": "def RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n  \n    for i in range(len(string)): \n        if (string[i] == current): \n            count+= 1 \n        else: \n            result += current + str(count) \n            current = string[i] \n            count = 1\n    result += current + str(count)\n  \n    return result", "category": "Python"}, {"instruction": "Implement a function to retrieve the nth node of the singly-linked list", "input": "", "output": "def getNthNode(head, n): \n    if n == 0:\n        return head.value \n    current = head \n    for _ in range (n):\n        if not current.next : \n            return None\n        current = current.next \n    return current.value", "category": "Python"}, {"instruction": "Replace all vowels in a string with a specified letter", "input": "string = 'hello world'", "output": "def replaceVowels(string, ch): \n    vowels = \"aeiouAEIOU\"\n    for x in string:\n        if x in vowels:\n            string = string.replace(x, ch) \n    return string", "category": "Python"}, {"instruction": "Parse a given expression tree to evaluate the result", "input": "", "output": "def evaluate(root):\n    # empty tree\n    if root is None:\n        return 0\n    # leaf node\n    if root.left is None and root.right is None:\n        return int(root.data)\n    # evaluate left tree\n    left_sum = evaluate(root.left)\n \n    # evaluate right tree\n    right_sum = evaluate(root.right)\n \n    # check which operation to apply\n    if root.data == '+':\n        return left_sum + right_sum\n \n    elif root.data == '-':\n        return left_sum - right_sum\n \n    elif root.data == '*':\n        return left_sum * right_sum\n \n    else:\n        return left_sum / right_sum", "category": "Python"}, {"instruction": "Given a dictionary, write a function to get all the keys with a given value.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 2};", "output": "def get_keys_by_value(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\n  return keys\n\n# Testing\nmy_dict = {'a': 1, 'b': 2, 'c': 2}\nkeys = get_keys_by_value(my_dict, 2)\nprint(\"Keys with the value 2 are: \", keys)", "category": "Python"}, {"instruction": "Write a function to retrieve the last element of a given array of strings.", "input": "arr = [\"word\", \"sentence\", \"paragraph\"];", "output": "def get_last_element(arr):\n  return arr[-1]\n\n# Testing\narr = [\"word\", \"sentence\", \"paragraph\"]\nlast_element = get_last_element(arr)\nprint(\"The last element is: \", last_element)", "category": "Python"}, {"instruction": "Given an array of integers, find the pair of elements that have the greatest difference.", "input": "arr = [2, 5, 9, 11, 15, 27];", "output": "def find_greatest_difference(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\n  return max_diff\n\n# Testing\narr = [2, 5, 9, 11, 15, 27]\nmax_diff = find_greatest_difference(arr)\nprint(\"Greatest difference is: \", max_diff)", "category": "Python"}, {"instruction": "Create a function that returns the sum of two numbers passed as arguments.", "input": "", "output": "def add_numbers(a,b):\n  return a + b\n\n# Testing\nx = 3\ny = 4\nsum = add_numbers(x, y)\nprint(\"Sum of {0} and {1} is {2}\".format(x, y, sum))", "category": "Python"}, {"instruction": "Find the index of the element that occurs only once in the array.", "input": "arr = [1, 1, 5, 5, 6, 8];", "output": "def find_unique_element(arr):\n index = -1\n for i in range(len(arr)):\n  freq = 0\n  for j in range(len(arr)):\n   if arr[i] == arr[j]:\n    freq += 1\n if freq == 1:\n  index = i\n  break\n return index\n\n# Testing\narr = [1, 1, 5, 5, 6, 8]\nindex = find_unique_element(arr)\nprint(\"Index of the unique element is: \", index)", "category": "Python"}, {"instruction": "Write a number of HTML tags such that their end tags are mismatched.", "input": "", "output": "<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <h1>My Heading</h1>\n    <p>This is a test.\n  </body>\n</html>", "category": "Python"}, {"instruction": "Modify the below code so that it swaps two variables without the use of a temporary variable.", "input": "int a = 10, b = 20; \nint temp; \ntemp = a; \na = b; \nb = temp;", "output": "int a = 10, b = 20; \na = a + b; \nb = a - b;\na = a - b;", "category": "Python"}, {"instruction": "Write a function to remove all words that contain a certain letter from an array.", "input": "arr = [\"apple\", \"banana\", \"orange\", \"grape\"];\nletter = 'a'", "output": "def remove_words_by_letter(arr, letter):\n  return [word for word in arr if letter not in word]\n\n# Testing\narr = [\"apple\", \"banana\", \"orange\", \"grape\"]\nfiltered_arr = remove_words_by_letter(arr, 'a')\nprint(\"Filtered array: \", filtered_arr)", "category": "Python"}, {"instruction": "Create a HTML web page that displays \"Welcome To My Page\" with a heading level 2.", "input": "", "output": "<html>\n  <head>\n    <title>Welcome To My Page</title>\n  </head>\n  <body>\n    <h2>Welcome To My Page</h2>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Describe the necessary steps to debug a python program.", "input": "", "output": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers.", "category": "Python"}, {"instruction": "Create a function that takes a list and removes duplicates of the same element.", "input": "myList4 = [1,2,2,3,3,3]", "output": "def removeDuplicate(myList4):\n    result = []\n    for x in myList4:\n        if x not in result:\n            result.append(x)\n    return result\n\nremoveDuplicate = removeDuplicate(myList4)\nprint(removeDuplicate)", "category": "Python"}, {"instruction": "Convert the given list to a dictionary where the items are the keys and the values are square of the keys.", "input": "myList3 = [1, 2, 3, 4, 5]", "output": "def myDict(myList3):\n    result = {}\n    for i in myList3:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList3)\nprint(myDict)", "category": "Python"}, {"instruction": "Create a function that takes 2 strings as arguments, and returns the longest string.", "input": "", "output": "def longestString(str1, str2):\n    if len(str1) > len(str2):\n        longestString = str1\n    else:\n        longestString = str2\n    return longestString\n\nlongestString = longestString(\"Hello\", \"World\")\nprint(longestString)", "category": "Python"}, {"instruction": "Create a Dictionary where the list items are the keys and the square of the items are the values", "input": "myList1 = [1, 2, 3, 4, 5, 6]", "output": "def myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList1)\nprint(myDict)", "category": "Python"}, {"instruction": "Arrange the given list in ascending order.", "input": "myList = [3, 1, 8, 2, 6, 5]", "output": "def sortList(myList):\n    myList.sort()\n    return myList\n\nresult = sortList(myList)\nprint(result)", "category": "Python"}, {"instruction": "Determine which elements of the given list are strings.", "input": "data = [0, 'a', 99, [], 'b', None]", "output": "def isString(data):\n    strings = []\n    for element in data:\n        if isinstance(element, str):\n            strings.append(element)\n    return strings\n\nprint(isString(data))", "category": "Python"}, {"instruction": "Design a function with two inputs that returns the maximum of the two.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create a JavaScript object that converts from Celsius to Fahrenheit", "input": "", "output": "let celsiusToFahrenheit = {\n  convert: function(temp) {\n    return (temp * 1.8) + 32;\n  }\n};", "category": "Python"}, {"instruction": "We would like you to suggest a method written in TypeScript for reversing a string.", "input": "str = \"abcd\"", "output": "function reverseString(str) {\n  let reversedStr = '';\n  for (let i = str.length -1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n}", "category": "Python"}, {"instruction": "Modify the code to print the second largest number in a list.", "input": "num_list = [3, 6, 8, 4, 12, 20, 7]", "output": "num_list = [3, 6, 8, 4, 12, 20, 7]\n\n# Sort the list in descending order\nnum_list.sort(reverse=True)\n\n# Print the second largest number\nprint(num_list[1])", "category": "Python"}, {"instruction": "Convert the following number from binary to decimal form: 1101.", "input": "1101", "output": "The number 1101 in binary form is 13 in decimal form.", "category": "Python"}, {"instruction": "Find the length of the longest increasing subsequence in an array.", "input": "arr = [10, 22, 9, 33, 21, 50, 41, 60]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))", "category": "Python"}, {"instruction": "Write an algorithm to sort data in an array in ascending order.", "input": "arr = [8, 0, 5, 10, 4, 6]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n-1):\n\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)\nprint(arr)", "category": "Python"}, {"instruction": "Create an array from 0 to n-1.", "input": "n = 10", "output": "arr = [x for x in range(0, n)]\nprint(arr)", "category": "Python"}, {"instruction": "Write a function that takes a sentence as an argument and returns a Dictionary of all the words and their counts in the sentence.", "input": "'The quick brown fox jumps over the lazy dog'", "output": "def count_words(sentence):\n    words_counts = {}\n\n    words = sentence.split(\" \")\n    for word in words:\n        if word not in words_counts:\n            words_counts[word] = 0\n        words_counts[word] += 1\n    return words_counts\n\nprint(count_words('The quick brown fox jumps over the lazy dog'))", "category": "Python"}, {"instruction": "Create a Git branch for a given feature.", "input": "Feature name: 'my-feature'", "output": "git checkout -b my-feature", "category": "Python"}, {"instruction": "Write SQL code to find the number of people aged 18 and older from the \"people\" table.", "input": "Table name: people", "output": "SELECT COUNT(*)\nFROM people\nWHERE age >= 18;", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns a new list with all duplicate numbers removed.", "input": "[3, 6, 8, 10, 10, 11, 15, 15, 15]", "output": "def remove_duplicate_integers(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\nprint(remove_duplicate_integers([3, 6, 8, 10, 10, 11, 15, 15, 15]))", "category": "Python"}, {"instruction": "Construct a SQL query to count the number of occurrences of a certain value in a particular column of a table.", "input": "", "output": "SELECT COUNT(*) FROM table_name WHERE column_name = value;", "category": "Python"}, {"instruction": "How can we check the type of a variable in JavaScript?", "input": "", "output": "We can check the type of a variable in JavaScript using the typeof operator. For example, to check the type of the variable x, we can use the following code:\n\nvar x = 10;\nconsole.log(typeof x); // outputs \"number\"", "category": "Python"}, {"instruction": "What is the difference between div and span tags in HTML?", "input": "", "output": "The main difference between div and span tags is that the div tag is used to group and structure content, while the span tag is used to group inline content. The div tag is a block-level element, while the span tag is an inline element. Therefore, div tags can be used to create larger sections of content, while span tags can be used to style individual words or sentences.", "category": "Python"}, {"instruction": "Generate a random number between -1 and 1 using a Python library.", "input": "", "output": "import random\nrandom_num = random.uniform(-1,1)\nprint(random_num)", "category": "Python"}, {"instruction": "Construct a SQL query to find the maximum salary from a table named \"employees\".", "input": "", "output": "SELECT MAX(salary) FROM employees;", "category": "Python"}, {"instruction": "What is the default filename of an index document used by an Apache web server?", "input": "", "output": "index.html", "category": "Python"}, {"instruction": "Edit the following HTML form to add the required attribute.", "input": "<form>\n<input type=\"text\" name=\"name\">\n<input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form>\n<input type=\"text\" name=\"name\" required>\n<input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Create an SQL query to retrieve data from the table \"Employees\".", "input": "", "output": "SELECT * FROM Employees;", "category": "Python"}, {"instruction": "Create an algorithm to evaluate a given expression.", "input": "(3 + 5) * 2", "output": "1. Initialize result as 0.\n2. Save 3 plus 5 in a variable.\n3. Multiply the variable by 2 and save it in another variable.\n4. Set result as the value of the new variable.\n5. Return result.", "category": "Python"}, {"instruction": "Write a SQL query to count the number of employees in a department with id \u201cIT-006\u201d.", "input": "", "output": "SELECT COUNT(*) FROM Employees WHERE department_id = 'IT-006';", "category": "Python"}, {"instruction": "Create a MySQL query to list out the customer IDs, first names, and last names of customers who live in the United States.", "input": "", "output": "SELECT customer_id, first_name, last_name\nFROM customers\nWHERE country = 'United States';", "category": "Python"}, {"instruction": "Reverse the elements of a given array.", "input": "int[] array = {1, 2, 3, 4, 5};", "output": "for (int i = 0; i < array.length / 2; i++) {\n    int temp = array[i];\n    array[i] = array[array.length - i - 1];\n    array[array.length - i - 1] = temp;\n}", "category": "Python"}, {"instruction": "Create a Java program that takes two numbers and prints out the larger number.", "input": "Number 1: 6\nNumber 2: 8", "output": "public class Program {\n  public static void main(String[] args) {\n    int num1 = 6;\n    int num2 = 8;\n    if (num1 > num2) {\n        System.out.println(num1);\n    } else {\n        System.out.println(num2);\n    }\n  }\n}", "category": "Python"}, {"instruction": "Create an HTML page that displays \"Welcome to our website\" when you first visit the page", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to our website</title>\n</head>\n<body>\n    <h1>Welcome to our website!</h1>\n</body>", "category": "Python"}, {"instruction": "Create a C Program that takes an array of integers and returns an array of the prime numbers present in the array.", "input": "arr = {2, 3, 5, 6, 9, 10, 15}", "output": "#include<stdio.h>\n\nint isPrime(int n) \n{ \n    for (int i = 2; i <= n/2; i++) \n    { \n        if (n % i == 0) \n            return 0; \n    } \n    return 1; \n} \n\nvoid findPrime(int arr[], int n) \n{ \n    int result[n];\n    int k = 0;\n    for (int i = 0; i < n; i++) \n    { \n        if (isPrime(arr[i]) == 1) \n        { \n            result[k] = arr[i];\n            k++;\n        } \n    } \n  \n    for (int i = 0; i < k; i++) \n        printf(\"%d \", result[i]); \n} \n  \nint main() \n{ \n    int arr[] = {2, 3, 5, 6, 9, 10, 15}; \n    int n = sizeof(arr)/sizeof(arr[0]); \n  \n    findPrime(arr, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Find the intersection of two sorted arrays in Java.", "input": "arr1=[1, 2, 4, 5, 6]\narr2=[2, 3, 5, 7]", "output": "public static int[] intersection(int[] arr1, int[] arr2) \n{ \n    // Initialise array to store intersection \n    int[] result = new int[arr1.length]; \n  \n    // Initialise two index in both array \n    int i = 0, j = 0; \n  \n    // Initially set intersection index \n    int k = 0; \n  \n    // Sort both array \n    Arrays.sort(arr1); \n    Arrays.sort(arr2); \n  \n    // Iterate over both array and store intersection \n    // in array result \n    while (i < arr1.length && j < arr2.length)  \n    { \n        // If both current element are same \n        if (arr1[i] == arr2[j])  \n        { \n            // Store it in result array \n            result[k++] = arr1[i++]; \n            j++; \n        } \n        // If first array current element is smaller \n        else if (arr1[i] < arr2[j]) \n            i++; \n        // If second array current element is smaller \n        else\n            j++; \n    } \n  \n    // return the result array \n    return Arrays.copyOfRange(result, 0, k); \n}", "category": "Python"}, {"instruction": "Drop all duplicates from a NumPy array.", "input": "arr = [10, 20, 30, 10, 30, 20]", "output": "import numpy as np\n\ndef drop_duplicates(arr):\n    return np.unique(arr)", "category": "Python"}, {"instruction": "Create a HTML page to display a weather forecast for the selected city.", "input": "City: London\nWeather Forecast:\n\nDay 1 - Clear Sky\nDay 2 - Cloudy\nDay 3 - Rain", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Weather Forecast</title>\n</head>\n<body>\n\n<h1>Weather Forecast - London</h1>\n\n<p>Day 1 - Clear Sky</p>\n<p>Day 2 - Cloudy</p>\n<p>Day 3 - Rain</p>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "How do you use a \u2018for\u2019 loop in Python to iterate over a list of strings?", "input": "list=[\"Dog\",\"Cat\",\"Cow\"]", "output": "for string in list:\n    print(string)", "category": "Python"}, {"instruction": "Create an HTML page to display the attendance of students in an academic year.", "input": "Attendance Data:\n\nStudent Name: John Doe\nAttendance in 2020-21 academic year - 91%.\n\nStudent Name: Jane Smith\nAttendance in 2020-21 academic year - 94%.", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title> Student Attendance </title>\n<style type=\"text/css\">\nh1 {\n font-family: sans-serif; \n}\ntable {\n font-family: sans-serif;\n border-collapse: collapse;\n}\ntd {\n border: 1px solid #dddddd;\n padding: 8px;\n}\n</style>\n</head>\n\n<body>\n<h1> Student Attendance </h1>\n<table>\n<tr>\n<th>Student Name</th>\n<th>Attendance (%)</th>\n</tr>\n<tr>\n <td>John Doe</td>\n <td>91%</td>\n</tr>\n<tr>\n <td>Jane Smith</td>\n <td>94%</td>\n</tr>\n</table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an assembly program that takes an integer as input and displays the sum of digits of that number.", "input": "", "output": ".data\n    Input:   .word   0\n    Sum:     .word   0\n\n.text\nmain:   li  r1, 0\n        sw  Input, r1\n        li  r2, 0\n        sw  Sum, r2\n\nlooper: lw  r1, Input\n        blt r1, 0, done\n        addi   r2, r2, r1\n        divi   r1, r1, 10\n        sw  Input, r1\n        j   looper\n\ndone:   lw  r1, Sum\n        li  $v0, 1\n        move    $a0, r1\n        syscall\n.end", "category": "Python"}, {"instruction": "Write a JavaScript function to get the Nth element from the end of a given array.", "input": "", "output": "function getFromEnd(arr, n) {\n    return arr[arr.length - n];\n}", "category": "Python"}, {"instruction": "Create a Python class with methods that accept a value and increase the stored value by 5.", "input": "", "output": "class MyClass:\n    def __init__(self, value):\n        self.value = value\n        \n    def increase_by_five(self):\n        self.value += 5", "category": "Python"}, {"instruction": "Create a regular expression pattern to match a string composed of lowercase letters \"a\" through \"e\", with no other characters.", "input": "", "output": "pattern = '^[a-e]*$'", "category": "Python"}, {"instruction": "Optimize this SQL query to reduce the runtime.", "input": "SELECT * \nFROM orders \nWHERE customer_id = '123' \nORDER BY order_date;", "output": "SELECT * \nFROM orders \nWHERE customer_id = '123' \nORDER BY order_date\nINDEX BY customer_id;", "category": "Python"}, {"instruction": "Create a function that takes in an input string and a delimiter, and spits out a list of words that were seperated by a given delimiter.", "input": "\"This_is_a_sentence\"\n delimiter = \"_\"", "output": "def split_words(string, delimiter):\n    return string.split(delimiter)", "category": "Python"}, {"instruction": "Write a Python program to calculate the median of three given numbers.", "input": "", "output": "def median_num(n1, n2, n3):\n    if n1 > n2 and n2 > n3:\n        return n2\n    elif n3 > n2 and n2 > n1:\n        return n2\n    elif n1 > n3 and n3 > n2:\n        return n3\n    elif n2 > n3 and n3 > n1:\n        return n3\n    elif n2 > n1 and n1 > n3:\n        return n1\n    else:\n        return n1", "category": "Python"}, {"instruction": "Create a C++ program that takes a string as input and returns the most frequently occurring character.", "input": "", "output": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nchar highest_frequency(string str)\n{\n    unordered_map<char, int> char_count;\n    for (char &c : str)\n    {\n        char_count[c]++;\n    }\n    char max_char = ' ';\n    int max_count = 0;\n    for (auto &c : char_count)\n    {\n        int temp_count = c.second;\n        if (temp_count > max_count)\n        {\n            max_count = temp_count;\n            max_char = c.first;\n        }\n    }\n    return max_char;\n\n}\n\nint main()\n{\n    string str = \"This is a sample string!\";\n    cout << highest_frequency(str) << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "You need to write code for adding a column to a pandas DataFrame.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]", "output": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]\n\ndf['new_col'] = new_col_data", "category": "Python"}, {"instruction": "How can you let a user input a character in a Java program?", "input": "", "output": "You can let a user input a character in a Java program using the Scanner class. For example, you can use the next().charAt(0) method to let a user input a character.", "category": "Python"}, {"instruction": "Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values.", "input": "", "output": "months = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}", "category": "Python"}, {"instruction": "Create a for loop that prints the values in the list \"numbers\".", "input": "let numbers = [1, 2, 3, 4, 5];", "output": "for (let i = 0; i < numbers.length; i++) {\n    console.log(numbers[i]);\n}", "category": "Python"}, {"instruction": "Create a function to calculate the Fibonacci number at the inputted index.", "input": "", "output": "function fibonacci(index) {\n    if (index < 0) {\n      return 0;\n    }\n    if (index === 0 || index === 1) {\n      return 1;\n    }\n    return fibonacci(index - 1) + fibonacci(index - 2);\n  }", "category": "Python"}, {"instruction": "Change the variable \"str\" below to upper case.", "input": "let str = 'hello world!';", "output": "let str = 'HELLO WORLD!';", "category": "Python"}, {"instruction": "Construct an if condition in Python to check if a given number is within the range of [2, 12].", "input": "", "output": "if 2 <= x <= 12:\n    # do something", "category": "Python"}, {"instruction": "Using the given dictionary, find the most frequent element", "input": "my_dict = {\"A\":1,\"B\":1,\"C\":3,\"D\":3,\"E\":3}", "output": "most_frequent = max(my_dict, key=my_dict.get)\nprint(most_frequent)", "category": "Python"}, {"instruction": "Rewrite this program in C language", "input": "x = 5\ny = 7\nz = x + y\nprint(z)", "output": "#include <stdio.h>\n\nint main()\n{\n    int x = 5;\n    int y = 7;\n    \n    int z = x + y;\n    printf(\"%d\", z);\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Rearrange the elements of the list in ascending order.", "input": "my_list = [8, 1, 3, 5, 4, 9]", "output": "my_list.sort()", "category": "Python"}, {"instruction": "Write code in python to find the biggest number in a given list.", "input": "my_list = [1, 25, 8, 10, 6]", "output": "def find_biggest_number(my_list):\n    biggest_number = my_list[0]\n    for i in range(0, len(my_list)):\n        if my_list[i] > biggest_number:\n            biggest_number = my_list[i]\n    return biggest_number", "category": "Python"}, {"instruction": "What will be the output of this code snippet?", "input": "a = [1, 2, 3, 4, 5]\nb = [x**2 for x in a]\nprint(b)", "output": "[1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Write a regex to validate a phone number with the format XXX-XXX-XXXX.", "input": "", "output": "^\\d{3}-\\d{3}-\\d{4}$", "category": "Python"}, {"instruction": "You need to generate an API which returns the first 10 Fibonacci numbers.", "input": "", "output": "def FibApi():\n   def fibonacci(n):\n      if n < 0: \n         print(\"Incorrect input\") \n      elif n == 1: \n         return 0\n      elif n == 2: \n         return 1\n      else: \n         return fibonacci(n-1) + fibonacci(n-2) \n   fib_list = [] \n   for i in range(1,11): \n      fib_list.append(fibonacci(i)) \n   return fib_list", "category": "Python"}, {"instruction": "How can one randomly shuffle a list using Python?", "input": "", "output": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "You are given a 2D array. The task is to double each item in the array.", "input": "arr = [[1,2], [3,4]]", "output": "[[2,4], [6,8]]", "category": "Python"}, {"instruction": "What is the stack overflow limit of Python?", "input": "", "output": "The stack overflow limit of Python is 2800 frames.", "category": "Python"}, {"instruction": "Generate the first 10 prime numbers.", "input": "", "output": "2, 3, 5, 7, 11, 13, 17, 19, 23, 29", "category": "Python"}, {"instruction": "Find the index of the element \"z\" in the array \"alphabet\" below, and print the index.", "input": "let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];", "output": "let index = alphabet.indexOf('z');\nconsole.log(index);", "category": "Python"}, {"instruction": "Write Python code to reverse the letters in the string \"hello\".", "input": "", "output": "def reverseString(s): \n    return s[::-1]\n\nprint(reverseString('hello'))", "category": "Python"}, {"instruction": "Modify the code to convert the string \"12345678\" to an integer.", "input": "let str = \"12345678\";", "output": "let num = parseInt(str);\nconsole.log(num);", "category": "Python"}, {"instruction": "Write a JavaScript code to set a cookie with the name \"username\" and value \"JohnDoe\".", "input": "", "output": "document.cookie = \"username=JohnDoe\";", "category": "Python"}, {"instruction": "Describe the purpose of a \"while\" loop in JavaScript.", "input": "", "output": "The purpose of a \"while\" loop in JavaScript is to execute a piece of code until a given condition is met. This loop can execute the code any number of times until the condition is evaluated to be \"true\".", "category": "Python"}, {"instruction": "Generate a random hexadecimal color code in Ruby.", "input": "", "output": "'#%06x' % (rand * 0xffffff).round(0).to_i", "category": "Python"}, {"instruction": "Implement a C++ program to input a string and count the spaces in the string.", "input": "String s = \"example string\";", "output": "#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string s = \"example string\";\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ')\n            count++;\n    }\n    std::cout << count;\n    return 0;\n}", "category": "Python"}, {"instruction": "Given two strings, create a function to find the total number of occurrences of the second string in the first string.", "input": "str1 = \"Hello World!\"\nstr2 = \"lo\"", "output": "def count_string_occurrences(str1, str2):\n    \"\"\"This function takes in two strings and returns the total number of occurrences of the second string in the first string.\"\"\"\n    count = 0\n    for i in range(len(str1) - len(str2) + 1):\n        if str1[i:i + len(str2)] == str2:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to generate a list with length n of numbers from 0 to n-1.", "input": "n = 5", "output": "def generate_list(n):\n    \"\"\"This function takes an integer n and returns a list with length n of numbers from 0 to n-1.\"\"\"\n    return [i for i in range(n)]", "category": "Python"}, {"instruction": "Create a function to detect whether a given character is a vowel or not.", "input": "", "output": "def is_vowel(char):\n    \"\"\"This function takes in a character and returns true if the character is a vowel, false otherwise.\"\"\"\n    vowels = 'aeiouAEIOU'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a function to filter out elements in an array that meet a given criteria.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9] \ncriteria = lambda x: x % 2 == 0", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Complete the SQL statement to calculate the average of the values in the \"unit_price\" column.", "input": "SELECT AVG(", "output": "SELECT AVG(unit_price) FROM table_name;", "category": "Python"}, {"instruction": "Create a function that takes in a string and a number and returns a new string with the character at the given index replaced with another character.", "input": "str = \"Hello World!\"\n index = 3\n new_char = 'a'", "output": "def replace_char_at(str, index, new_char):\n    \"\"\"This function takes in a string and a number and returns a new string with the character at the given index replaced with another character.\"\"\"\n    return str[:index] + new_char + str[index + 1:]", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def product_of_all_except_self(lst):\n    \"\"\"This function takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.\"\"\"\n    products = []\n    n = len(lst)\n    for i in range(n):\n        product = 1\n        for j in range(n):\n            if i != j:\n                product *= lst[j]\n        products.append(product)\n    return products", "category": "Python"}, {"instruction": "Create a function that filters an array of elements based on a given criteria and returns an array of the resulting elements.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9]  # elements to filter\ncriteria = lambda x: x > 5  # criterion to filter by", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Create a function that returns an array of the three most common elements in an array.", "input": "lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def three_most_common(lst):\n    \"\"\"This function takes in an array and returns an array of the three most common elements.\"\"\"\n    lst_len = len(lst)\n    lst_dic = dict()\n \n    for n in lst:\n        if n in lst_dic:\n            lst_dic[n] += 1\n        else:\n            lst_dic[n] = 1\n \n    max_val = 0\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n            max_val = val\n            last_key = sec_key\n            sec_key = max_key\n            max_key = key\n        elif val > sec_key:\n            last_key = sec_key\n            sec_key = key\n        elif val > last_key:\n            last_key = key\n    return [max_key, sec_key, last_key]", "category": "Python"}, {"instruction": "Write a function that takes in two numbers in Roman numerals and outputs the sum.", "input": "Roman numeral 1: XVI\nRoman numeral 2: IX", "output": "def roman_numerals_sum(num1, num2):\n    \"\"\"This function takes two Roman numerals as parameters and outputs their sum in Roman numerals.\"\"\"\n    Int1 = int(roman.fromRoman(num1))\n    Int2 = int(roman.fromRoman(num2))\n    Sum = Int1 + Int2\n    return roman.toRoman(Sum)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the author and title of all books whose title contains the word \"machine\".", "input": "", "output": "SELECT author, title\nFROM books\nWHERE title LIKE '%machine%';", "category": "Python"}, {"instruction": "Modify the code below to use regular expressions to validate a phone number in the format \"123-456-7890\".", "input": "", "output": "if (phone.match(/^\\d{3}-\\d{3}-\\d{4}$/)) {\n    console.log(\"Valid phone number\");\n} else {\n    console.log(\"Invalid phone number\");\n}", "category": "Python"}, {"instruction": "Using the list as an input, write code to generate a comma-separated string of the list's elements.", "input": "let fruits = [\"apple\", \"pear\", \"banana\"];", "output": "let str = fruits.join(\", \");\nconsole.log(str);", "category": "Python"}, {"instruction": "Create a function to filter out strings that have more than n number of characters in an array.", "input": "lst = ['book', 'pen', 'pencil', 'eraser', 'ruler']\n n = 4", "output": "def filter_strings(lst, n):\n    \"\"\"This function takes in an array of strings and an integer n and returns an array of strings with more than n characters.\"\"\"\n    return [word for word in lst if len(word) > n]", "category": "Python"}, {"instruction": "What is a linked list?", "input": "", "output": "A linked list is a data structure in which each element contains data as well as a link to the next element in the list. Linked lists provide a dynamic allocation of memory which can be useful for certain applications.", "category": "Python"}, {"instruction": "Write a SQL query to order the strings in the 'name' column alphabetically.", "input": "", "output": "SELECT * FROM table ORDER BY name ASC;", "category": "Python"}, {"instruction": "Design a function for summing three numbers", "input": "", "output": "def sum_three(x, y, z): \n  return x + y + z", "category": "Python"}, {"instruction": "Create a program to calculate the Greatest Common Denominator (GCD) of two numbers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "Insert the missing code to print the list of numbers in reverse order.", "input": "nums = [1, 2, 3, 4, 5]", "output": "nums = [1, 2, 3, 4, 5]\nnums.reverse()\nfor num in nums:\n    print(num)", "category": "Python"}, {"instruction": "Print out a song with 4 lines.", "input": "", "output": "Print(\"Life feels like a constant struggle\")\nPrint(\"When every day's a battle sure to ruffle\")\nPrint(\"But keep your head up, don't you worry\")\nPrint(\"Your courage will soon turn things to merry\")", "category": "Python"}, {"instruction": "In a given list of integers, find the value that appears most frequently.", "input": "nums = [2,2,2,2,3,4,5,6,6,7]", "output": "def most_frequent(nums):\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    res = 0\n    for key, val in count.items():\n        if val > max_count:\n            res = key\n        max_count = max(max_count, val)\n    return res", "category": "Python"}, {"instruction": "Write a Pascal program to convert a number from decimal to hexadecimal.", "input": "", "output": "program convertToHex;\n \n  // Declare a variable to store the number\n  var number: integer;\n \n  // Declare a variable to store the result\n  var result: string;\n \n  // Get the number from the user\n  write('Enter the number to convert: ');\n  readln(number);\n \n  // Call the recursive function to convert to hexadecimal\n  result := decToHex(number);\n \n  // Print the result\n  writeln('The hexadecimal representation of ', number, ' is ', result);\n \n// A recursive function to convert a decimal number to its hexadecimal representation\nfunction decToHex(n: integer): string;\nvar\n  remainder: char; // To store the remainder\n  result: string;\nbegin\n  // If the number is greater than 0\n  if (n > 0) then\n  begin\n    // Get the remainder\n    remainder := Chr(n mod 16 + Ord('0'));\n   \n    // Convert the remainder to char A, B, C, D, E, F\n    if (remainder > '9') then\n      remainder := Chr(Ord(remainder) + 7);\n  \n    // Call the recursive function to get the rest of the digits\n    result := decToHex(n div 16) + remainder;\n  end\n  else\n    result := '';\n  \n  decToHex := Result;\nend;\n \nbegin \n \nend.", "category": "Python"}, {"instruction": "Design a classifier using Machine Learning in Python", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split dataset into training and testing sets\nX, y = data.iloc[:, 0: -1], data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, \n                                                    random_state=42)\n\n# Preprocess by scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create the model \nclf = GradientBoostingClassifier(n_estimators=100, max_depth=4, \n                                 learning_rate=0.1)\n\n# Train the model\nclf.fit(X_train_scaled, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test_scaled)", "category": "Python"}, {"instruction": "Design a SQL query to find the average age of your group's members", "input": "", "output": "SELECT AVG(age)\nFROM members\nGROUP BY group_name;", "category": "Python"}, {"instruction": "Edit the following HTML page and add a link to an existing page on the internet.", "input": "<html>\n    <header>\n        <title>My Page</title>\n    </header>\n</html>", "output": "<html>\n    <header>\n        <title>My Page</title>\n    </header>\n    <body>\n        <a href=\"https://www.example.com\">Link to Example</a>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Construct a C++ program that prints out the longest string from an array of strings.", "input": "[\"Apple\", \"Banana\", \"Mango\", \"Strawberry\"]", "output": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n  string arr[] = {\"Apple\", \"Banana\", \"Mango\", \"Strawberry\"};\n  int n = 4;\n\n  string longestString = \"\";\n  int longestStringLength = 0;\n\n  for (int i = 0; i < n; i++) {\n    if (arr[i].length() > longestStringLength) {\n      longestStringLength = arr[i].length();\n      longestString = arr[i];\n    }\n  }\n\n  cout << \"The longest string is \" << longestString << endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Insert a node at a specific position in the linked list.", "input": "Linked List: 0->3->4->7\nNode: 5\nPosition: 2", "output": "def insert_at_pos(head, node_data, pos):\n    new_node = Node(node_data)\n    if pos == 0:\n        new_node.next = head\n        return new_node\n    temp = head \n    for i in xrange(pos-1):\n        temp = temp.next\n    new_node.next = temp.next\n    temp.next = new_node\n    return head", "category": "Python"}, {"instruction": "Construct a linked list using the given data.", "input": "Data: [5, 6, 2, 9, 0]", "output": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Given data\ndata = [5, 6, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)", "category": "Python"}, {"instruction": "Compute the length of a given string without using in built length function.", "input": "String: Hello", "output": "def calculate_length(string):\n    count = 0\n    for letter in string:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to print the result of a multiplication table.", "input": "Table Size: 5", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1): \n        for j in range(1, size+1): \n            print(str(i*j) + \"\\t\", end=' ') \n        print()", "category": "Python"}, {"instruction": "Rewrite the given line of code to make it more efficient and concise.", "input": "ifA==1 and B==2 and C==3:", "output": "if A == 1 and B == 2 and C == 3:", "category": "Python"}, {"instruction": "Print a text in reverse order without using any built-in function or loop.", "input": "Text: Hello World", "output": "dlr ow olleH", "category": "Python"}, {"instruction": "For the following sentence, produce an output that prints the position and letter of each vowel.", "input": "text = \"Programming is fun\"", "output": "for index, letter in enumerate(text):\n    if letter in 'aeiou':\n        print(f'The letter {letter} is in position {index}.')", "category": "Python"}, {"instruction": "Create a function to convert currency from one value to another.", "input": "", "output": "def convert_currency(amount, rate):\n    return amount * rate", "category": "Python"}, {"instruction": "Create a program that checks for duplicates in a list and removes them.", "input": "", "output": "def remove_duplicates(lst):\n    res = []\n    for ele in lst:\n        if ele not in res:\n            res.append(ele)\n    return res", "category": "Python"}, {"instruction": "Generate a query to return copies of the records in a table.", "input": "Table Name: Products", "output": "SELECT Products.*\nFROM Products;", "category": "Python"}, {"instruction": "Write a number of equations using the variable x to calculate the area of a triangle with its base set to 5 and its height set to 7.", "input": "", "output": "Equation 1:\nArea = (1/2) * 5 * 7 \n\nEquation 2: \nArea = 5 * 7 / 2\n\nEquation 3: \nArea = 0.5 * 5 * 7", "category": "Python"}, {"instruction": "Given a 2-D array, write a C++ code snippet to find the maximum sum of all the numbers that are strictly increasing in a diagonal pattern.", "input": "[[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]]", "output": "int maxSum = 0;\n \n// traverse elements in upper-left \n// to lower-right diagonal order \nfor (int i = 0; i < Matrix.size(); i++ )\n{\n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ )\n        sum += Matrix[i+j][j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n} \n\n// traverse elements in upper-right \n// to lower-left diagonal order \nfor (int i = 1; i < Matrix.size(); i++ ) \n{ \n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ ) \n        sum += Matrix[j][i+j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n}", "category": "Python"}, {"instruction": "Given two strings, write a JavaScript code snippet to check if the two strings are anagrams of each other.", "input": "", "output": "function areAnagrams(str1, str2) {\n  if (str1.length !== str2.length) {\n    return false;\n  }\n  let charMap1 = {};\n  let charMap2 = {};\n    \n  for(let i = 0; i < str1.length; i++) {\n    if(!charMap1[str1.charAt(i)]) {\n      charMap1[str1.charAt(i)] = 1;\n    } else { \n      charMap1[str1.charAt(i)]++;\n    }\n    \n    if(!charMap2[str2.charAt(i)]) {\n      charMap2[str2.charAt(i)] = 1;\n    } else { \n      charMap2[str2.charAt(i)]++;\n    }\n  }\n  \n  for(let key in charMap1) {\n    if (charMap1[key] != charMap2[key]) {\n      return false;\n    }\n  }\n  \n  return true;\n\n}", "category": "Python"}, {"instruction": "Create a HTML table that lists the 5 most populous cities in the world.", "input": "", "output": "<table>\n  <tr>\n    <th>City</th>\n    <th>Population (mil)</th>\n  </tr>\n  <tr>\n    <td>Shanghai</td>\n    <td>24.24</td> \n  </tr>\n  <tr>\n    <td>Beijing</td>\n    <td>21.54</td> \n  </tr>\n  <tr>\n    <td>Karachi</td>\n    <td>21.20</td> \n  </tr>\n  <tr>\n    <td>Istanbul</td>\n    <td>14.87</td> \n  </tr>\n  <tr>\n    <td>Dhaka</td>\n    <td>14.45</td> \n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a Java program to create a thread which prints the numbers from 10 to 0 after every 2 seconds.", "input": "", "output": "public class MyThread extends Thread {\n    public void run() {\n        for(int i = 10; i >= 0; i--) {\n            System.out.println(i);\n            try {\n                Thread.sleep(2000); \n            } \n            catch (InterruptedException e) {\n                //Do nothing\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to find out the sum of the squares of all the numbers.", "input": "[1, 2, 3]", "output": "def sumSquares(numbers):\n  sum = 0\n  for num in numbers:\n    sum += (num ** 2)\n  return sum", "category": "Python"}, {"instruction": "Given a JSON object representing a student record, write a JavaScript code snippet to get the student's name.", "input": "{\"name\": \"John\", \"age\": 20, \"degree\": \"B.S\"}", "output": "let studentName = JSON.parse(input).name;", "category": "Python"}, {"instruction": "Generate a unique random number in the range of 0 to 100.", "input": "", "output": "The unique random number in the range of 0 to 100 is 87.", "category": "Python"}, {"instruction": "Write an SQL query to get the rows which contain the values 'Apple' and 'Banana' in the same row in the table fruits.", "input": "Table Name: fruits\nTable Schema: id INT, item VARCHAR(10)", "output": "SELECT * FROM fruits WHERE item = \"Apple\" OR item = \"Banana\";", "category": "Python"}, {"instruction": "Write C# code to create a simple calculator that can add, subtract, divide, and multiply two numbers.", "input": "", "output": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Enter two numbers: \");\n        double num1 = Convert.ToDouble(Console.ReadLine());\n        double num2 = Convert.ToDouble(Console.ReadLine());\n\n        Console.WriteLine(\"Enter a mathematical operator (+, -, *, /):\");\n        char operation = Convert.ToChar(Console.ReadLine());\n\n        double result;\n\n        switch(operation)\n        {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                result = num1 / num2;\n                break;\n            default:\n                result = 0;\n                break;\n        }\n\n        Console.WriteLine($\"The result of {num1} {operation} {num2} is {result}\");\n    }\n}", "category": "Python"}, {"instruction": "Edit the following code to limit the number of characters accepted in a text field to 25.", "input": "<textarea name=\"comment\" cols=\"30\" rows=\"5\"></textarea>", "output": "<textarea name=\"comment\" cols=\"30\" rows=\"5\" maxlength=\"25\"></textarea>", "category": "Python"}, {"instruction": "Create an HTML document with a table containing book information.", "input": "", "output": "<html>\n  <body>\n    <h2>Book Information</h2>\n    <table>\n      <tr>\n        <th>Title</th>\n        <th>Author</th>\n        <th>Price</th>\n      </tr>\n      <tr>\n        <td>Harry Potter and the Sorcerer's Stone</td>\n        <td>J.K. Rowling</td>\n        <td>$10.99</td>\n      </tr>\n      <tr>\n        <td>The Cat in the Hat</td>\n        <td>Dr. Seuss</td>\n        <td>$7.99</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write SQL code to count the number of unique customers from the orders table.", "input": "Table Name: Orders", "output": "SELECT COUNT(DISTINCT customer_id)\nFROM Orders;", "category": "Python"}, {"instruction": "Create a CSS rule to set the font-size of all elements in a div to 10px.", "input": "", "output": "div {\n\tfont-size: 10px;\n}", "category": "Python"}, {"instruction": "Generate a regex expression that matches a string beginning with 'Hello' or 'Hi'.", "input": "", "output": "/^(Hello|Hi)/.test(string)", "category": "Python"}, {"instruction": "Write Java code for converting a string to an array.", "input": "String: \"Hello\"", "output": "String[] strArray = {\"H\", \"e\", \"l\", \"l\", \"o\"};", "category": "Python"}, {"instruction": "Create a React component that displays information about the user on the screen.", "input": "", "output": "import React, { Component } from 'react';\n\nclass UserInfo extends Component {\n\n  render() {\n    return (\n      <div>\n        <p>Name: {this.props.name}</p>\n        <p>Age: {this.props.age}</p>\n        <p>City: {this.props.city}</p>\n      </div>\n    )\n  }\n}\n\nexport default UserInfo;", "category": "Python"}, {"instruction": "Write an SQL query to find the names and scores of the top 5 students in a class.", "input": "Table Name: students\nTable Schema: id INT, name VARCHAR(20), score INT", "output": "SELECT name, score FROM students ORDER BY score DESC LIMIT 5;", "category": "Python"}, {"instruction": "Write a procedure to subtract two numbers in MySQL.", "input": "", "output": "CREATE PROCEDURE subtract_numbers ( IN num_1 INT, IN num_2 INT ) \nBEGIN \nSET num_1 = num_1 - num_2;\nEND;", "category": "Python"}, {"instruction": "If a given string contains four consecutive identical characters, write a code to print the string and the count of the consecutive characters.", "input": "String: aaaagood", "output": "def four_consecutive_chars(input_string): \n    count = 1\n    prev_char = \"\" \n    result = \"\" \n    for char in input_string: \n        if prev_char == char:\n            count += 1 \n            if count == 4:\n                result += char + \" : \" + str(count) \n        else: \n            result += char + \" : \" + str(count) \n            count = 1\n        prev_char = char \n    print(input_string)\n    print(result)", "category": "Python"}, {"instruction": "Code a function in Python to output the words \"Retrieved successfully\" if a web page request is successful.", "input": "", "output": "def check_status_success(request):\n    if request.status_code == 200:\n        print(\"Retrieved successfully\")\n    else:\n        print(\"Error connecting\")", "category": "Python"}, {"instruction": "Use the keyword \"Sum\" to find the total of the two integers 4 and 7.", "input": "4, 7", "output": "The sum of 4 and 7 is 11.", "category": "Python"}, {"instruction": "Write a basic SELECT query to retrieve customer details from a customer table.", "input": "", "output": "SELECT * FROM customer;", "category": "Python"}, {"instruction": "Generate a random 10-character string with an even distribution of lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef random_str():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(10))", "category": "Python"}, {"instruction": "Write a basic encryption function using Caesar Cipher.", "input": "", "output": "def caesar_encrypt(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + key-65) % 26 + 65) \n        else: \n            ciphertext += chr((ord(char) + key - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a function to find the longest substring without repetition.", "input": "str = \"pwwkew\"", "output": "def longest_substring(str):\n    start = 0\n    max_length = 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n\n        used_char[char] = i\n\n    return max_length", "category": "Python"}, {"instruction": "Split a string of words into an array of words.", "input": "str = \"This is a test string\"", "output": "arr = str.split(\" \")\n# Output: ['This', 'is', 'a', 'test', 'string']", "category": "Python"}, {"instruction": "Create a JavaScript Object for a Student with key-value pairs for their id, name, and nationality.", "input": "", "output": "var student = { \n id: 0,\n name: \"John Doe\",\n nationality: \"American\"\n}", "category": "Python"}, {"instruction": "Manually calculate this equation: (5x + 6) / 3", "input": "", "output": "(5x + 6) / 3 = (5x/3) + (6/3) = (5/3)x + 2", "category": "Python"}, {"instruction": "Design a MongoDB collection Schema for stores' inventory records.", "input": "", "output": "db.inventoryRecords.insert({\n storeName: String,\n itemName: String, \n quantity: Number,\n unitPrice: Number\n})", "category": "Python"}, {"instruction": "Find all numbers from a given array that can be expressed as the sum of two squares.", "input": "arr = [2, 3, 4, 6, 8, 10]", "output": "vals = []\nfor num in arr:\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i*i + j*j == num:\n                vals.append(num)\n                break;\nprint(vals)\n# Output: [4, 8]", "category": "Python"}, {"instruction": "Write a function to calculate the Average True Range of a given array of price data", "input": "[10, 15, 8, 11]", "output": "def calculate_ATR(data):\n    max_diff = 0\n    for i in range(1, len(data)):\n        diff = abs(data[i] - data[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff/len(data)\n\ndata = [10, 15, 8, 11]\nprint(calculate_ATR(data)) # 2.25", "category": "Python"}, {"instruction": "Write an SQL query to select the top 5 customers based on dollars spent", "input": "", "output": "SELECT customer_id, SUM(amount) \nFROM orders \nGROUP BY customer_id \nORDER BY SUM(amount) \nDESC LIMIT 5;", "category": "Python"}, {"instruction": "Write a regex to match a list of valid US zip codes", "input": "", "output": "import re\n\ndef is_valid_zip(zip_code):\n    regex = r\"^[0-9]{5}(-[0-9]{4})?$\"\n    return re.match(regex, zip_code) is not None\n\nprint(is_valid_zip('12345')) # True\nprint(is_valid_zip('12345-6789')) # True", "category": "Python"}, {"instruction": "Use a while loop to output the numbers from 0 to 10", "input": "", "output": "i = 0\nwhile(i <= 10):\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Write a basic Javascript program to calculate the area of a triangle with the side lengths 8, 10, and 15.", "input": "8, 10, 15", "output": "function findArea(side1, side2, side3) {\n    var p = (side1 + side2 + side3) / 2;\n    var area = Math.sqrt(p * (p - side1) * (p - side2) * (p-side3));\n    return area;\n}\n\nconsole.log(findArea(8, 10, 15));", "category": "Python"}, {"instruction": "Create a link that redirects to an external site when clicked on a webpage.", "input": "", "output": "<a href=\"https://www.example.com\" target=\"_blank\">Visit Example.com</a>", "category": "Python"}, {"instruction": "Reverse the words of the English sentence \"This is a pen\".", "input": "", "output": "pen a is This", "category": "Python"}, {"instruction": "Write a query to find the second highest salary from the table Employees.", "input": "", "output": "SELECT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1;", "category": "Python"}, {"instruction": "Create a class called Team that has two attributes - name and players.", "input": "", "output": "class Team:\n    def __init__(self, name, players):\n        self.name = name\n        self.players = players", "category": "Python"}, {"instruction": "Write a code that inverts the case for the given string.", "input": "String: wElCOme", "output": "def invert_case(input_string):\n    result = \"\"\n    for x in input_string: \n        if x.isupper():\n            result += x.lower() \n        else: \n            result += x.upper() \n    return result", "category": "Python"}, {"instruction": "Clone the repository from the given remote url.", "input": "https://github.com/dagger2086/Hello-World.git", "output": "The repository has been successfully cloned from the given remote url.", "category": "Python"}, {"instruction": "What is the JavaScript operator used to check if the value of two operands are equal or not?", "input": "", "output": "The JavaScript operator used to check if the value of two operands are equal or not is the triple equals (\"===\") operator.", "category": "Python"}, {"instruction": "Given a list, print all its elements in reverse order.", "input": "list = [2, 3, 4, 5, 6]", "output": "def reverse_print(num_list):\n  for i in range(len(num_list)-1, -1, -1):\n    print(num_list[i])\n\n# Driver code\nif __name__ == \"__main__\":\n   list = [2, 3, 4, 5, 6]\n   reverse_print(list)\nOutput:\n6\n5\n4\n3\n2", "category": "Python"}, {"instruction": "Given a list, remove all elements that are divisible by 4.", "input": "list = [8, 5, 6, 8, 9, 3, 10]", "output": "def remove_elements_divisible_by_four(num_list):\n   modified_list = []\n   for num in num_list:\n      if num % 4 != 0:\n         modified_list.append(num)\n   return modified_list\n   \n# Driver code\nif __name__ == \"__main__\":\n   list = [8, 5, 6, 8, 9, 3, 10]\n   print(remove_elements_divisible_by_four(list))\nOutput:\n[5, 9, 3]", "category": "Python"}, {"instruction": "Reorder the code snippet so that the loop terminates when i is equal to 5.", "input": "i = 0\nwhile i < 5:\n\tprint(i)\n\ti += 1", "output": "i = 0\nwhile i < 5:\n\tprint(i)\n\tif i == 5:\n\t\tbreak\n\ti += 1", "category": "Python"}, {"instruction": "Swap two elements in the given list.", "input": "List: [1,2,3,4]", "output": "def swap_elements(arr): \n    temp = arr[0] \n    arr[0] = arr[1] \n    arr[1] = temp\n    return arr", "category": "Python"}, {"instruction": "Select a random element from a given list.", "input": "list = [1, 5, 8, 10]", "output": "import random\n\ndef select_random_element(list):\n    index = random.randint(0, len(list)-1)\n    return list[index]\n\nif __name__ == \"__main__\":\n    list = [1, 5, 8, 10]\n    print(select_random_element(list))", "category": "Python"}, {"instruction": "Write a code to create a sentence from a given list of words.", "input": "words = [\"Today\",\"I\",\"am\",\"happy\"]", "output": "def create_sentence(words):\n   sentence = \"\"\n   for word in words:\n      sentence += word + \" \"\n   return sentence.strip()\n   \nif __name__ == \"__main__\":\n   words = [\"Today\",\"I\",\"am\",\"happy\"]\n   print(create_sentence(words))\nOutput:\nToday I am happy", "category": "Python"}, {"instruction": "Generate a code to execute a block of code 10 times in Python.", "input": "", "output": "for i in range(10): \n  # execute code here", "category": "Python"}, {"instruction": "Create a code to import a module called 'math' in Python.", "input": "", "output": "import math", "category": "Python"}, {"instruction": "Write a code to construct a BST with the elements 11, 18, 14, 6 and 7.", "input": "", "output": "# A node  \nclass Node:  \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n\n# A function to insert a new node with the given key  \ndef insert(root,node): \n    if root is None: \n        root = node \n    else: \n        if root.val < node.val: \n            if root.right is None: \n                root.right = node \n            else: \n                insert(root.right, node) \n        else: \n            if root.left is None: \n                root.left = node \n            else: \n                insert(root.left, node) \n\n# Create root node with the key 11  \nroot = Node(11)  \ninsert(root,Node(18))  \ninsert(root,Node(14))  \ninsert(root,Node(6))  \ninsert(root,Node(7))", "category": "Python"}, {"instruction": "Create a TCP server program using Python.", "input": "", "output": "import socket\n\n# create a socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# get local machine name\nhost = socket.gethostname()\n\nport = 9999\n\n# bind to the port\ns.bind((host, port))\n\n# queue up to 5 requests\ns.listen(5)\n\nwhile True:\n   # establish a connection\n   clientsocket,addr = s.accept()\n   print(\"Got a connection from %s\" % str(addr))\n\n   msg = 'Thank you for connecting' + \"\\r\\n\"\n   clientsocket.send(msg.encode('ascii'))\n   clientsocket.close()", "category": "Python"}, {"instruction": "Create a code to save the first ten prime numbers in an array.", "input": "", "output": "# prime number sieve\ndef prime_numbers(n): \n \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n  \nif __name__ == \"__main__\":\n    n = 100\n    print(prime_numbers(n))", "category": "Python"}, {"instruction": "Classify the following code as either a while loop or a for loop.", "input": "i=0\nwhile (i<5):\n\tprint(i)\n\ti+=1", "output": "While loop", "category": "Python"}, {"instruction": "Modify the code snippet so that it prints the **largest** element in the given list.", "input": "list = [1, 5, 8, 10]", "output": "list = [1, 5, 8, 10]\n\n# This code will print the largest element in the list\nlargest = list[0]\n\nfor item in list:\n    if item > largest:\n        largest = item\n\nprint(largest)", "category": "Python"}, {"instruction": "Update the following HTML element with a new background color.", "input": "<p style=\"background-color: blue\">Hello World</p>", "output": "<p style=\"background-color: yellow\">Hello World</p>", "category": "Python"}, {"instruction": "Create a CSS class to center an element on the page.", "input": "", "output": ".center-element {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}", "category": "Python"}, {"instruction": "Write an HTML page with a form which takes the input of an email address and a password and sends an email to the given address.", "input": "", "output": "<html>\n  <head>\n    <title>Form Email</title>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <form method=\"post\" action=\"send-email.php\">\n      <label>Email: \n        <input type=\"text\" name=\"email\" />\n      </label>\n      <label>Password: \n        <input type=\"password\" name=\"password\" />\n      </label>\n      <input type=\"submit\" value=\"Send Email\" />\n    </form>\n  </body>\n  </html>", "category": "Python"}, {"instruction": "What is the most efficient way to check if a given number is a prime in Python?", "input": "", "output": "The most efficient way to check if a given number is a prime in Python is to use the numpy.prime() function. This function returns a boolean value indicating whether the given number is a prime or not. The syntax is as follows:\n\nnumpy.prime(n)\n\nThe argument n must be a positive integer.\n\nFor example, to check if the number 7 is prime, you can use the following code:\n\nimport numpy as np\n\nnumber = 7\nprint(np.isprime(number)) # returns True", "category": "Python"}, {"instruction": "What is the best way to print something to the console in Python?", "input": "", "output": "The best way to print something to the console in Python is by using the built-in print() function. The syntax of this function is as follows:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nThe print() function prints the given object to the standard output. The sep and end are keyword-only arguments which specify string to separate and end the output respectively. The default separator is a single space and the default end-string is a newline. The file argument specifies an open file object, for printing to a file, or an object with a write() method.\n\nFor example, to print the string \"hello\" to the console, you can use this code:\n\nprint(\"hello\")", "category": "Python"}, {"instruction": "Write a code in Java to find all the prime numbers between 0 and n.", "input": "", "output": "public static List<Integer> findPrimes(int n) {\n    List<Integer> primes = new ArrayList<>();\n    for (int i = 2; i <= n; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}", "category": "Python"}, {"instruction": "How do you delete a row from a MySQL table?", "input": "", "output": "To delete a row from a MySQL table, you can use the DELETE statement. The syntax for the statement is as follows:\n\nDELETE FROM tablename\nWHERE condition;\n\nFor example, if you want to delete all the rows with a score of less than 50 in a table called 'students', you can use the following statement:\n\nDELETE FROM students\nWHERE score < 50;", "category": "Python"}, {"instruction": "Write an HTML tag for a hyperlink pointing to https://www.example.com", "input": "", "output": "<a href=\"https://www.example.com\">Link</a>", "category": "Python"}, {"instruction": "Suggest a better way to improve the following SQL statement.", "input": "SELECT * FROM students WHERE score > 50", "output": "SELECT * FROM students WHERE score > 50 ORDER BY score DESC", "category": "Python"}, {"instruction": "Write a ruby method that takes an array of integers and returns an array of their square root values.", "input": "", "output": "def squared(arr)\n  result = []\n  arr.each do |n|\n    result << Math.sqrt(n)\n  end\n  result\nend", "category": "Python"}, {"instruction": "Suggest a good way to format the following array of objects in PHP.", "input": "$data = [\n    [\n        'name' => 'Alex',\n        'age' => 30\n    ],\n    [\n        'name' => 'John',\n        'age' => 32\n    ]\n];", "output": "$data = [\n    [\n        'name' => 'Alex',\n        'age'  => 30\n    ],\n    [\n        'name' => 'John',\n        'age'  => 32\n    ]\n];\n\n// Initializing an empty array\n$formatted = [];\n\n// Iterating the array and grouping items by age\nforeach ($data as $item) {\n    $formatted[ $item['age'] ][] = $item['name'];\n}\n\n// Outputting the grouped objects\nprint_r($formatted);", "category": "Python"}, {"instruction": "Create a program to insert the given character at a particular position in a given string.", "input": "String = \"Geek university\"\nCharacter = 's'\nPosition = 8", "output": "def insertStr(str, char, pos): \n\treturn str[:pos] + char + str[pos:] \n\nstr = \"Geek university\"\nchar = 's'\npos = 8\nprint(insertStr(str, char, pos))", "category": "Python"}, {"instruction": "Create a program to apply upper case to a given string.", "input": "String = \"welcome to The world Of gEEks\"", "output": "def upperCaseString(str): \n    res = \"\" \n    for i in range(len(str)):\n        if i==0 or (str[i-1]==' '): \n            res = res + str[i].upper()\n        else:\n            res = res + str[i]\n    return res \n\nstr = \"welcome to The world Of gEEks\"\nprint(upperCaseString(str))", "category": "Python"}, {"instruction": "Create a program to output an array of words from a given string.", "input": "String = \"Welcome to the world of Geeks\"", "output": "def extract_words(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n# Driver code \nstr = \"Welcome to the world of Geeks\"\nwords = extract_words(str) \nfor i in words: \n    print(i)", "category": "Python"}, {"instruction": "Design a program to create a new string with the characters of the first string in the reverse order.", "input": "String = \"Hello World\"", "output": "def reverse(str): \n    return str[::-1] \n  \n# Driver Code \nstr = \"Hello World\"\nprint(\"Reverse string:\",reverse(str))", "category": "Python"}, {"instruction": "Implement a simple password validator in Java.", "input": "password = \"Password1\"", "output": "public class PasswordValidator {\n    public static boolean validate(String password) {\n        if (password.length() < 8) {\n            return false;\n        }\n        boolean containsUpperCase = false;\n        boolean containsLowerCase = false;\n        boolean containsDigit = false;\n        for (int i = 0; i < password.length(); i++) {\n            char c = password.charAt(i);\n            if (Character.isUpperCase(c)) {\n                containsUpperCase = true;\n            } else if (Character.isLowerCase(c)) {\n                containsLowerCase = true;\n            } else if (Character.isDigit(c)) {\n                containsDigit= true;\n            }\n        }\n        return containsUpperCase && containsLowerCase && containsDigit;\n    }\n \n    public static void main(String[] args) {\n        String password = \"Password1\";\n        System.out.println(validate(password));\n    }\n}", "category": "Python"}, {"instruction": "Design and write a code to detect and count the number of occurrences of a particular substring in a string.", "input": "String = \"Please find the number of occurrences of this string\"\nSubstring = \"string\"", "output": "def count_occurrences(str, substr):\n    count = 0\n    start_index = -1 \n    while True:\n        start_index = str.find(substr, start_index + 1)\n        if start_index == -1:\n            break \n        count = count + 1\n    return count \nprint(\"Number of occurrences:\",count_occurrences(\"Please find the number of occurrences of this string\", \"string\"))", "category": "Python"}, {"instruction": "Create a program to output the items in a list that appear only once.", "input": "list = [50, 10, 20, 30, 10, 50, 44, 55, 44]", "output": "items_set = set(list)\nunique_items = []\n\nfor item in items_set:\n    if list.count(item) == 1:\n        unique_items.append(item)\n\nprint(\"Unique items:\",unique_items)", "category": "Python"}, {"instruction": "Suggest a way to add the first 10 natural numbers in C++.", "input": "", "output": "The most efficient way to add the first 10 natural numbers in C++ is to use a loop. The loop would go from 1 to 10, and will add the number each iteration to a variable, like this:\n\nint sum = 0;\nfor (int i = 1; i <= 10; i++) {\n  sum += i;\n}\n\n// sum will now store the sum of the first 10 natural numbers.", "category": "Python"}, {"instruction": "How do you use exceptions to cleanly exit from a method in Java?", "input": "", "output": "To use exceptions to cleanly exit from a method in Java, you should throw an exception at the end of the method body. Exceptions can be used to indicate unusual situations and can be used to terminate a method execution if desired. To throw an exception, you use the following syntax:\n\nthrow new Exception(\"Exception Message\");\n\nWhen an exception is thrown, the code execution is immediately stopped and control is transferred to the nearest catch block. You can use try-catch blocks to catch the exception in the method and take the appropriate action.\n\nFor example, to exit a method conditionally, you can utilize try-catch blocks like this:\n\ntry {\n  // throw exception if condition is not met\n  if (!condition) {\n    throw new Exception(\"Exception Message\");\n  }\n  // rest of the code\n  \n} catch(Exception e) {\n  // handle exception here\n}", "category": "Python"}, {"instruction": "Create a for loop to iterate over a list of words and print their length.", "input": "words = [\"happy\", \"sad\", \"tired\", \"energetic\"]", "output": "for word in words:\n    print(len(word))", "category": "Python"}, {"instruction": "Write an algorithm to search an element in a linked list.", "input": "", "output": "def search_node(node, target):\n    while node is not None: \n        if node.data == target: \n            return node\n        else: \n            node = node.next\n    return None", "category": "Python"}, {"instruction": "Create an array of numbers that is a random combination of integers from 1 to 25", "input": "", "output": "[2, 4, 17, 19, 25, 8, 14, 1, 15, 23, 22, 5, 6, 16, 10, 12, 3, 18, 11, 20, 9, 13, 7, 24, 21]", "category": "Python"}, {"instruction": "Find the index of the letter 'a' in the string 'abcde'.", "input": "string = \"abcde\"", "output": "Index of 'a' in the given string is 0.", "category": "Python"}, {"instruction": "Analyze the following CSS code for possible errors.", "input": "body{\n color: #FFFFFF;\n font-size: small;\n padding: 12px;\n}", "output": "No errors found.", "category": "Python"}, {"instruction": "Execute the following JavaScript code to add two numbers.", "input": "var x = 10;\nvar y = 20;", "output": "var result = x + y;\nconsole.log(result); // 30", "category": "Python"}, {"instruction": "Using the given array, create a function that returns a new array that contains elements that are greater than the given number.", "input": "arr = [2, 3, 6, 9, 5]\nnum = 4", "output": "def greater_than(arr, num):\n    result = []\n    for el in arr:\n        if el > num:\n            result.append(el)\n    return result\n\nprint(greater_than(arr, num))", "category": "Python"}, {"instruction": "In Python, write a code snippet to calculate the average of numbers in a list.", "input": "listOfNumbers = [2, 4, 6, 8]", "output": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\n\nprint(avg(listOfNumbers))", "category": "Python"}, {"instruction": "Construct a RegEx pattern to identify a number followed by three uppercase letters.", "input": "", "output": "^[0-9][A-Z]{3}$", "category": "Python"}, {"instruction": "Design and write a code to identify the maximum number of vowels contained in any given string.", "input": "String = \"Queensland\"", "output": "def vowel_count(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n# Driver code \nstr = \"Queensland\"\nprint(\"No. of vowels :\", vowel_count(str))", "category": "Python"}, {"instruction": "Using a unique function in JavaScript, remove the duplicate values in the given array.", "input": "arr = [1,1,2,2,4,4,4]", "output": "let noDuplicates = [...new Set(arr)];\n\nconsole.log(noDuplicates);", "category": "Python"}, {"instruction": "Using the given array, write a function to return the count of elements next to each other that are equal.", "input": "a = [1,1,1,2,2,3,4,4,4,4]", "output": "def adjacent_elements_count(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n\n    return count\n\nprint(adjacent_elements_count(a))", "category": "Python"}, {"instruction": "Programmatically calculate the sum of the first 10 natural numbers (1,2,3...10).", "input": "", "output": "total = 0\nfor i in range(1,11):\n    total += i\n\nprint(total)", "category": "Python"}, {"instruction": "Given the example JSON string, neatly organize the contents of the object using Python code.", "input": "{ \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }", "output": "import json\n\ndata = { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }\n\ndata_json = json.dumps(data, indent=4)\n\nprint(data_json)", "category": "Python"}, {"instruction": "Find the number of non-negative integers that are even and less than 10.", "input": "", "output": "There are 5 non-negative integers that are even and less than 10: 0, 2, 4, 6, and 8.", "category": "Python"}, {"instruction": "Implement an algorithm that returns the maximum sum of a given subsequence.", "input": "arr = [-2,1,3,-4,5]", "output": "The algorithm should return the maximum sum of subseqence in the array. \n\nTo solve this, we can use the Dynamic Programming approach. The algorithm will traverse the array and for each index (i), it will calculate two values:\n1. Max sum of the array including the element at index i.\n2. Max sum of the array excluding the element at index i.\n\nThe algorithm should iterate through the array and return the maximum of the two values.\n\nmaxSum = max(maxSumIncludingCurrentElement, maxSumExcludingCurrentElement);\n\nThe maximum sum of the subsequence will be maxSum.", "category": "Python"}, {"instruction": "Replace the last occurrence of a given word in a string.", "input": "str = \"Welcome to the world of Python\"\nword = \"Python\"", "output": "updated_str = str.rsplit('Python',1)[0] + 'Java'\n\nThe updated string is \"Welcome to the world of Java\".", "category": "Python"}, {"instruction": "Output the Fibonacci sequence from 0 to 15.", "input": "", "output": "The Fibonacci sequence from 0 to 15 is 0, 1, 1, 2, 3, 5, 8, 13.", "category": "Python"}, {"instruction": "Create a SQL statement that changes the value of a column in the \"students\" table.", "input": "student_id = 123\nnew_score = 90", "output": "UPDATE students\nSET score = 90\nWHERE student_id = 123;", "category": "Python"}, {"instruction": "Given a JSON object representing user scores for a game, write a JavaScript code snippet to get the highest user score.", "input": "{\"John\": 80, \"Jane\": 98, \"Tom\": 50, \"Samantha\": 79}", "output": "let highestScore = 0;\n\nObject.keys(JSON.parse(input)).forEach((key) => {\n    const score = JSON.parse(input)[key];\n    if (score > highestScore) {\n       highestScore = score;\n    }\n});\n\nconsole.log(highestScore);", "category": "Python"}, {"instruction": "In Python, define a function to extract characters after a given substring.", "input": "String = \"Hello-world-123\"\nSubstring = \"-world\"", "output": "def extract_string(str, substr):\n    start_index = str.find(substr)\n    if start_index == -1:\n        return \"\"\n    else:\n        end_index = start_index + len(substr)\n        return str[end_index:] \n   \nx = extract_string(\"Hello-world-123\", \"-world\")\nprint(x)", "category": "Python"}, {"instruction": "Write a React function to set the background color of an element to blue.", "input": "", "output": "const setBackgroundBlue = () => {\n    document.getElementById(\"my-element\").style.backgroundColor = \"blue\";\n}", "category": "Python"}, {"instruction": "Modify the given CSS code to display the given HTML element in blue.", "input": "CSS code:\n\np {\n  color: red;\n}\nHTML element:\n\n<p> My website </p>", "output": "p {\n  color: blue;\n}", "category": "Python"}, {"instruction": "Convert the HTML code to valid XML.", "input": "<html> \n   <body> \n     <div>Hello World!</div> \n   </body> \n</html>", "output": "<?xml version=\"1.0\"?> \n<html> \n   <body> \n     <div>Hello World!</div> \n   </body> \n</html>", "category": "Python"}, {"instruction": "Create an HTML page that includes a form.", "input": "The form should have inputs for a first name, last name, email, favorite color, and a submit button.", "output": "<html> \n   <body> \n      <form action=\"\" method=\"post\"> \n         First Name: <input type=\"text\" name=\"firstname\"><br> \n         Last Name: <input type=\"text\" name=\"lastname\"><br> \n         Email: <input type=\"text\" name=\"email\"><br> \n         Favorite Color: <input type=\"text\" name=\"favoritecolor\"><br> \n         <input type=\"submit\" value=\"Submit\"> \n      </form> \n   </body> \n</html>", "category": "Python"}, {"instruction": "Write a Java program to compare two strings lexicographically.", "input": "Two strings: string1=\"GeeksforGeeks\" and string2=\"GeeksQuiz\"", "output": "public class CompareStringLexicographically { \n    public static void main(String[] args) \n    { \n        String str1 = \"GeeksforGeeks\"; \n        String str2 = \"GeeksQuiz\"; \n  \n        // Comparing both strings lexicographically \n        int result = str1.compareTo(str2); \n  \n        // checking for the comparison output \n        if (result > 0) \n            System.out.println(\"str1 is greater than str2\"); \n        else if (result < 0) \n            System.out.println(\"str1 is smaller than str2\"); \n        else\n            System.out.println(\"str1 is equal to str2\"); \n    } \n}", "category": "Python"}, {"instruction": "Develop a C program to reverse a string using a pointer.", "input": "", "output": "#include <stdio.h> \n#include <string.h> \n  \n// Function to reverse any sequence starting \n// with pointer begin and ending with pointer end \nvoid ReverseString(char* begin, char* end) \n{ \n    char temp; \n    while (begin < end) { \n        temp = *begin; \n        *begin++ = *end; \n        *end-- = temp; \n    } \n} \n  \n// Function to reverse words*/ \nvoid reverseWords(char* s) \n{ \n    char* word_begin = s; \n  \n    // Word boundary \n    char* temp = s; \n  \n    // Reversing individual words as \n    // explained in the first step \n    while (*temp) { \n        temp++; \n        if (*temp == '\\0') { \n            ReverseString(word_begin, temp - 1); \n        } \n        else if (*temp == ' ') { \n            ReverseString(word_begin, temp - 1); \n            word_begin = temp + 1; \n        } \n    } \n  \n    // Reverse the entire string \n    ReverseString(s, temp - 1); \n} \n  \nint main() \n{ \n    char s[] = \"Geeks For Geeks\"; \n    reverseWords(s); \n    printf(\"%s\", s); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to calculate the average temperature for the month of June.", "input": "", "output": "SELECT AVG(temperature) as avg_temp\nFROM temperatures\nWHERE MONTH(date) = 6", "category": "Python"}, {"instruction": "Implement a singly-linked list insert function.", "input": "", "output": "// Inserts a new node with data at the \n// head of the linked list \nvoid insertAtHead(int data) \n{ \n    // Create a new node \n    Node* new_node = new Node(); \n  \n    // Assign data to the new node \n    new_node->data = data; \n  \n    // Point the new node's next pointer to the head \n    new_node->next = head; \n  \n    // Make the new node the head \n    head = new_node; \n}", "category": "Python"}, {"instruction": "Create a JavaScript function for the linear search algorithm.", "input": "", "output": "// Linear search algorithm \nfunction linearSearch(array, item) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === item) {\n      return i;\n    }\n  }\n  return -1; \n}\n\n// Example Usage\nlet array = [2, 3, 4, 5, 6, 7];\nlet item = 5;\nlet index = linearSearch(array, item);\n// index should be 3", "category": "Python"}, {"instruction": "Find the maximum subarray sum in an array of integers.", "input": "arr = [-2, -3, 4, -1, -2, 1, 5, -3]", "output": "def max_subarray_sum(arr):\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[1:]:\n        current_max = max(current_max + num, num)\n        overall_max = max(current_max, overall_max)\n\n    return overall_max\n\n# Example Usage\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nmax_sum = max_subarray_sum(arr)\n# max_sum should be 7", "category": "Python"}, {"instruction": "Create a JavaScript function to validate if a given string is a valid URL.", "input": "", "output": "function isValidUrl(url) {\n    const regex = new RegExp(\"^(http|https)://\");\n    return regex.test(url);\n}\n\n// Example Usage\nlet url = \"https://example.com\";\nlet result = isValidUrl(url);\nconsole.log(result); // should be true", "category": "Python"}, {"instruction": "Describe a method to generate the next element in a Fibonacci series.", "input": "", "output": "A Fibonacci series is a sequence of numbers in which each number is the sum of the previous two numbers. To generate the next element in the series, simply add the current and previous number to get the next one. For example, given 0 and 1, the next number is 1 (0 + 1).", "category": "Python"}, {"instruction": "Create a HTML form element to take user input in the form of a text field.", "input": "", "output": "<form action=\"some_url\">\n    <input type=\"text\" name=\"username\" placeholder=\"Enter your username\">\n</form>", "category": "Python"}, {"instruction": "Write a regular expression that matches a valid email address format.", "input": "", "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "category": "Python"}, {"instruction": "Design a class to represent a person's name.", "input": "", "output": "class PersonName:\n    \"\"\"Represents a person's name\"\"\"\n\n    # Instance Variables\n    first_name = \"\"\n    middle_name = \"\"\n    last_name = \"\"\n    \n    def __init__(self, first_name, middle_name, last_name):\n        \"\"\"Constructor to initialize the PersonName object\"\"\"\n        self.first_name = first_name\n        self.middle_name = middle_name\n        self.last_name = last_name\n  \n    # Other methods for getting, setting and printing the name", "category": "Python"}, {"instruction": "Implement a function to convert USD dollars to Euro.", "input": "amount = 100", "output": "def convert_usd_to_euro(amount):\n    \"\"\"This function takes a given amount of USD and returns the equivalent amount in Euro \"\"\"\n    euro_amount = amount * 0.82\n    return euro_amount\n    \n# Example Usage\nusd_amount = 100\neuro_amount = convert_usd_to_euro(usd_amount)\n# euro_amount should be 82.0", "category": "Python"}, {"instruction": "Generate a regular expression that matches the given example.", "input": "Example:\n\n'100'", "output": "/\\b100\\b/", "category": "Python"}, {"instruction": "Construct an SQL query that returns records from a table with an \"orders\" field that contains any number between 1000 and 3000.", "input": "Table: order_records", "output": "SELECT * FROM order_records\n  WHERE orders BETWEEN 1000 AND 3000;", "category": "Python"}, {"instruction": "Implement a sorting algorithm in C++.", "input": "No input", "output": "#include <iostream> \nusing namespace std; \nint main() \n{ \n\tint arr[] = {10, 7, 8, 9, 1, 5}; \n\tint n = sizeof(arr)/sizeof(arr[0]); \n  \n\t// Bubble sort algorithm \n\tfor (int i = 0; i < n-1; i++)\t\t \n\t\tfor (int j = 0; j < n-i-1; j++)  \n\t\t\tif (arr[j] > arr[j+1]) \n\t\t\t\tswap(arr[j], arr[j+1]); \n  \n\t// Prints the sorted array \n\tfor (int i = 0; i < n; i++) \n\t\tcout << arr[i] << \" \"; \n\t\t\n  return 0;\n}", "category": "Python"}, {"instruction": "Construct a query in MySQL to update email of customers in the given database.", "input": "Database name: customers\nEmail field name: email", "output": "UPDATE customers SET email='new_email' WHERE email='old_email';", "category": "Python"}, {"instruction": "Generate a valid Ruby code that implements the following function.", "input": "Replace all whitespaces in a string with underscores.", "output": "def replace_whitespace(string)\n    return string.gsub(/\\s+/, '_')\nend", "category": "Python"}, {"instruction": "Construct a C# method that calculates the area of a rectangle.", "input": "", "output": "public int calculateArea(int length, int width) {\n    return length*width;\n}", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an argument and determines whether it is even or odd.", "input": "", "output": "const evenOrOdd = (x) => {\n    if (x % 2 == 0) {\n        return 'even';\n    } \n    else {\n        return 'odd';\n    }\n}", "category": "Python"}, {"instruction": "Create a CSS class that changes font color to blue.", "input": "", "output": ".blue-text {\n    color: blue;\n}", "category": "Python"}, {"instruction": "Generate a Python script that iterates over a list and prints each item.", "input": "list = [1, 2, 3, 4]", "output": "for item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create an object that adds two integers and returns their sum.", "input": "", "output": "const adder = {\n  add: (a, b) => a + b\n};", "category": "Python"}, {"instruction": "Create a valid JavaScript array of objects containing the three elements \"name\", \"age\" and \"gender\".", "input": "[{ name: 'John', age: 25, gender: 'male'},{ name: 'Lane', age: 28, gender: 'female'},{ name: 'Mike', age: 33, gender: 'male'}]", "output": "let arr = [\n    { name: 'John', age: 25, gender: 'male'},\n    { name: 'Lane', age: 28, gender: 'female'},\n    { name: 'Mike', age: 33, gender: 'male'}\n];", "category": "Python"}, {"instruction": "Create a Python program to validate an email address according to RFC5322 syntax.", "input": "", "output": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an SQL query to get the name, age and salary of the youngest employee.", "input": "", "output": "SELECT Name, Age, Salary FROM employees ORDER BY Age ASC LIMIT 1;", "category": "Python"}, {"instruction": "Edit the following C++ code to print the prime numbers between 1 and 100.", "input": "#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    int i, j;  \n    cout << \"The prime numbers between 1 and 100 are:\";  \n    for (i = 1; i <= 100; i++)  \n    {  \n        for (j = 2; j <= (i / 2); j++)  \n        {     \n            if (i % j == 0)  \n                break;  \n        }  \n      \n        // If the prime number is found  \n        if (j > (i / 2))  \n            cout << i << \" \";  \n    }  \n    return 0;  \n}", "output": "#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    int i, j;  \n    cout << \"The prime numbers between 1 and 100 are:\";  \n    for (i = 1; i <= 100; i++)  \n    {  \n        int isPrime = 1;\n        for (j = 2; j <= (i / 2); j++)  \n        {  \n            if (i % j == 0)  \n            {  \n                isPrime = 0;  \n                break;  \n            }  \n        }  \n      \n        if(isPrime == 1)  \n            cout << i << \" \";  \n    }  \n    return 0;  \n}", "category": "Python"}, {"instruction": "Write a Python program to create a histogram for a given list of numbers.", "input": "list = [2, 3, 6, 5]", "output": "import matplotlib.pyplot as plt\n\nplt.hist(list)\n\nplt.title(\"Histogram of numbers\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Write a HTML code snippet to create a table with three columns.", "input": "", "output": "<table>\n  <tr>\n    <th>column 1</th>\n    <th>column 2</th>\n    <th>column 3</th>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a Java function to find out if a string contains any vowels.", "input": "", "output": "public static boolean containsVowels(String input) {\n        for (int i = 0; i < input.length(); i++) {\n            char ch = input.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i'\n                    || ch == 'o' || ch == 'u') {\n                return true;\n            }\n        }\n        return false;\n    }", "category": "Python"}, {"instruction": "Generate a regular expression that matches any number that is greater than 0.", "input": "No input", "output": "/[1-9]\\d*\\.?\\d*|0\\.\\d*[1-9]\\d*/", "category": "Python"}, {"instruction": "Write an XPath query to identify all elements with the given ID attribute.", "input": "ID: menu", "output": "//*[@id='menu']", "category": "Python"}, {"instruction": "Construct a query in SQL to find the top 5 salaries from a table.", "input": "Table: customer_data\nSalary field name: salary", "output": "SELECT TOP 5 salary\nFROM customer_data\nORDER BY salary DESC;", "category": "Python"}, {"instruction": "Create a Python function to print out the last n items from a given list.", "input": "list = [1, 2, 3, 4, 5], n = 3", "output": "def last_n_items(arr, n):\n    if len(arr) < n:\n        return arr\n    return arr[-n:]\n    \n# Example\nlast_n_items(list, n) # returns [3, 4, 5]", "category": "Python"}, {"instruction": "Write code in Python to calculate the number of times a given number appears in a list.", "input": "list = [2, 4, 3, 5, 4, 2, 3]\nNumber to find: 4", "output": "count = 0\nfor x in list:\n  if x == 4:\n    count = count +1\n\nprint(\"The number 4 appears in the list \", count, \" times.\")", "category": "Python"}, {"instruction": "Create a function in Java that takes an array and multiplies each element by the given number.", "input": "int[] array = {1, 2, 3, 4, 5};\nNumber to multiply by: 10", "output": "public static void multiplyArray(int[] array, int num) {\n  for(int i=0; i<array.length; i++) {\n      array[i] *= num;\n  }\n}", "category": "Python"}, {"instruction": "Write an SQL query to select all employees whose last name is Johnson", "input": "", "output": "SELECT * FROM employees WHERE last_name = 'Johnson';", "category": "Python"}, {"instruction": "Code a Python algorithm to reverse a given string.", "input": "\"Hello, World!\"", "output": "def reverse(s):  \n    return s[::-1] \n\nx = \"Hello, World!\"\n  \nprint(reverse(x))", "category": "Python"}, {"instruction": "What will the following code output?", "input": "i = 1\n\nwhile i < 4:\n    print(i)\n    i = i + 1", "output": "The code will output 1, 2, and 3.", "category": "Python"}, {"instruction": "Using the given list, create a code that will generate a unique list of numbers", "input": "x = [4, 10, 16, 22, 28, 34]", "output": "new_list = []\nfor num in x:\n    if num not in new_list:\n        new_list.append(num)\nprint(new_list)", "category": "Python"}, {"instruction": "Given the following code, what should the output be when the function is called?", "input": "def add(x, y):\n    z = x + y\n    return z\n\nresult = add(2, 3)", "output": "The output should be 5 as the result of calling add(2,3) is z = 5.", "category": "Python"}, {"instruction": "Modify the following code to output Odd numbers from 1 to 10", "input": "for num in range(1, 10):\n    print( num )", "output": "for num in range(1, 10):\n    if num % 2 == 1:\n        print( num )", "category": "Python"}, {"instruction": "Create a function that will accept a list and return the sum of all elements in the list", "input": "", "output": "def sum_list(mylist):\n    s = 0\n    for x in mylist:\n        s += x \n    return s", "category": "Python"}, {"instruction": "Make the following code more efficient", "input": "def remove_dups(mylist):\n    newlist = []\n    for item in mylist:\n        if not item in newlist:\n            newlist.append(item)\n    return newlist", "output": "def remove_dups(mylist):\n    seen = set()\n    newlist = []\n    for item in mylist:\n        if item not in seen:\n            seen.add(item)\n            newlist.append(item)\n    return newlist", "category": "Python"}, {"instruction": "Explain what this code does", "input": "def biggest_number(*args):\n    return max(args)", "output": "This code is a function that takes in any number of arguments and returns the maximum of them. It will compare the arguments and return the biggest one.", "category": "Python"}, {"instruction": "Modify the code so that it will print out \"Hello World!\"", "input": "print(\"Hello\")", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Construct a for loop that prints out each number in the list", "input": "my_list = [0, 1, 2, 3, 4, 5]", "output": "for num in my_list:\n    print(num)", "category": "Python"}, {"instruction": "You are given a string containing upper and lowercase letters, write a program to check it is Palindrome or not.", "input": "racecar", "output": "def check_palindrome(string): \n    return string == string[::-1] \n  \nresult = check_palindrome('racecar')\nprint(result)", "category": "Python"}, {"instruction": "Create a program to accept a string and display its length.", "input": "", "output": "def getLength(string): \n    length = len(string) \n    return length \n  \nresult = getLength(\"GPT\")\nprint(result)", "category": "Python"}, {"instruction": "Provide a demo snippet to illustrate different ways of looping through a Python dictionary.", "input": "", "output": "#Looping through a dictionary using a for loop \ndict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} \n  \nfor key in dict: \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through a dictionary using items() method \nfor key, value in dict.items(): \n    print(\"% s : % s\" %(key, value)) \n  \n#Looping through dictionary keys \nfor key in dict.keys(): \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through dictionary values \nfor value in dict.values(): \n    print(\"% s\" %value)", "category": "Python"}, {"instruction": "Given two numbers a and b, write a function to swap their values.", "input": "a = 5, b = 8", "output": "def swap(a, b):\n    a, b = b, a\n    return a, b\n\na, b = swap(5, 8)\nprint(\"a =\", a, \"and b =\", b)", "category": "Python"}, {"instruction": "Create a function that takes an array and elements to append at the end.", "input": "list = [1,2]\nelement = 3", "output": "def appendList(list, element): \n  list.append(element) \n  return list \n\nresult = appendList(list, element) \nprint(result)", "category": "Python"}, {"instruction": "Edit the Python code block below to print the text in reverse.", "input": "word = \"Hello\"\nprint (word)", "output": "word = \"Hello\"\nprint (word[::-1])", "category": "Python"}, {"instruction": "Develop a full-stack web application to display a list of items.", "input": "", "output": "The full-stack web application will include a client, server and database component. The client component will be responsible for rendering the list of items in a visually appealing format. The server component will be responsible for establishing an API endpoint for GET, POST, PUT and DELETE operations for interacting with the list of items. The database component will store the list of items and the associated data for each item.", "category": "Python"}, {"instruction": "Create an HTML page to display a table with 2 columns: Description and Price.", "input": "", "output": "<html>\n    <head>\n        <title>Price Table</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Description</th>\n                <th>Price</th>\n            </tr>\n            <tr>\n                <td>Item 1</td>\n                <td>$2.99</td>\n            </tr>\n            <tr>\n                <td>Item 2</td>\n                <td>$5.99</td>\n            </tr>\n            <tr>\n                <td>Item 3</td>\n                <td>$9.99</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design a Java class to store the details of a customer.", "input": "", "output": "public class Customer {\n    private String name;\n    private String address;\n    private String email;\n    private String phone;\n\n    public Customer() {\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n}", "category": "Python"}, {"instruction": "Write a Python program to check if a string contains any special characters.", "input": "CS 1501", "output": "def has_special_characters(s):\n  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'\n  for char in special_characters:\n    if char in s:\n      return True\n  return False", "category": "Python"}, {"instruction": "Generate a correct JavaScript code to subtract two numbers.", "input": "391, 198", "output": "let result = 391 - 198;\nconsole.log(result);", "category": "Python"}, {"instruction": "Create an exponential moving average function in R.", "input": "", "output": "library(zoo)\n\nexponential_moving_average <- function(x, n, beta) {\n  EMA <- 0\n  for (i in 1:length(x)) {\n     if (i == 1) {\n       EMA[i] <- x[i]\n     } else {\n       EMA[i] <- ((beta * x[i]) + ((1 - beta) * EMA[i - 1]))\n     } \n  }\n  \n  ma_x <- as.numeric(rollapply(EMA, n, mean, fill = NA, align = \"right\"))\n  return(ma_x)\n}", "category": "Python"}, {"instruction": "Normalize the following data set.", "input": "[1000, 75, 16, -200, 24]", "output": "[1.00, 0.75, 0.16, -1.00, 0.24]", "category": "Python"}, {"instruction": "Update the following HTML code to add a placeholder attribute to the input.", "input": "<input type=\"text\" id=\"name\">", "output": "<input type=\"text\" id=\"name\" placeholder=\"Enter your name\">", "category": "Python"}, {"instruction": "Add a new CSS rule to the given code to make all text on the page bold.", "input": "", "output": "h1 {\n font-weight: bold;\n}\n\np {\n font-weight: bold;\n}\n\na {\n font-weight: bold;\n}", "category": "Python"}, {"instruction": "Modify the following Javascript code to check if a given number is prime or not.", "input": "", "output": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  \n  // Check from 2 to n-1\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n \n  return true;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to implement the bubble sort algorithm for sorting an array of numbers.", "input": "[4, 2, 7, 1, 6, 5]", "output": "function bubbleSort(arr) {\n  let temp;\n  let swapped;\n  for (let i = 0; i < arr.length; i++) {\n    swapped = false;\n    for (let j = 0; j < arr.length - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    if (!swapped) break;\n  }\n  return arr;\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and calculates the Employee Bonus depending on the hours worked.", "input": "hours - 14\nhourly_rate - 17", "output": "def employee_bonus(hours, hourly_rate):\n    if hours <= 0:\n        return 0\n\n    # Calculate the total amount\n    total_amount = hours * hourly_rate\n    \n    # Calculate the bonus with 10%\n    bonus = total_amount * 0.1\n\n    return bonus", "category": "Python"}, {"instruction": "Create a class called \u201cCar\u201d in Java with the following attributes and methods.", "input": "", "output": "public class Car {\n  private String make;\n  private String model;\n  private int year;\n \n  public Car(String make, String model, int year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n  }\n \n  public String getMake() {\n    return make;\n  }\n \n  public void setMake(String make) {\n    this.make = make;\n  }\n \n  public String getModel() {\n    return model;\n  }\n \n  public void setModel(String model) {\n    this.model = model;\n  }\n \n  public int getYear() {\n    return year;\n  }\n \n  public void setYear(int year) {\n    this.year = year;\n  }\n \n  public String toString() {\n    return String.format(\"Make: %s, Model: %s, Year: %d\", make, model, year);\n  }\n}", "category": "Python"}, {"instruction": "Update the following line of HTML code to use semantic tags for optimization.", "input": "<div>Learn HTML Tutorial here</div>", "output": "<div><h1>Learn HTML Tutorial here</h1></div>", "category": "Python"}, {"instruction": "Develop a jQuery program to toggle the visibility of a div.", "input": "", "output": "$(document).ready(function () {\n    $(\"#toggleBtn\").click(function () {\n        $(\"#toggleDiv\").toggle();\n    });\n});", "category": "Python"}, {"instruction": "Create optional command line parameters in a Python script.", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-i', '--inputfile', type=str,help='input file')\nparser.add_argument('-o', '--outputfile', type=str,help='output file')\nparser.add_argument('-d', '--debug', action='store_true',help='enable debugging')\nargs = parser.parse_args()", "category": "Python"}, {"instruction": "Create an Angular app with a login page and registration page.", "input": "", "output": "The Angular app will include a login and a registration page. The login page will have an input field for the user to enter their username and password. The registration page will have input fields for the user to enter their username, password, and email address. The app will also contain a service to store the user registration data and a guard to protect the registration page from unauthorized access.", "category": "Python"}, {"instruction": "Write a Bash script to to open an interactive calculator.", "input": "", "output": "#!/bin/bash\necho \"Welcome to the interactive calculator\"\nbc", "category": "Python"}, {"instruction": "Develop a Python3 program to extract the words of length 3 from a given sentence.", "input": "\"The quick brown fox jumped over the lazy dog\"", "output": "def extract_words(s):   \n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) == 3:\n            length_3_words.append(word)\n    return length_3_words\n\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))", "category": "Python"}, {"instruction": "Create a React component that renders a list of numbers with the number of units specified by the user.", "input": "", "output": "import React from 'react';\n\nclass NumberList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      numUnits: props.numUnits\n    };\n  }\n\n  render() {\n    const numUnits = this.state.numUnits;\n    const numbers = Array.from(Array(numUnits).keys());\n    const listItems = numbers.map(number => <li key={number}>{number}</li>);\n\n    return (\n      <div>\n        <ul>\n          {listItems}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default NumberList;", "category": "Python"}, {"instruction": "Compare the two strings and output the difference between the two outputs.", "input": "String A: Hello there\nString B: Hi everyone", "output": "The difference is that String A contains the phrase 'Hello there' whereas string B contains the phrase 'Hi everyone'.", "category": "Python"}, {"instruction": "You are given a code snippet of a web page. Fill in the missing tags to make it valid HTML.", "input": "<html>\n  <head>\n    <title>My Homepage</title>\n  </head>\n<body>\n  <h1>Welcome to My Homepage</h1>\n  <p>Hello, I'm John and this is my homepage. This is where I share my interests with the world.</p>\n</body>\n</html>", "output": "<html>\n  <head>\n    <title>My Homepage</title>\n  </head>\n  <body>\n    <h1>Welcome to My Homepage</h1>\n    <p>Hello, I'm John and this is my homepage. This is where I share my interests with the world.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Rewrite the given array of numbers into a binary tree.", "input": "[3, 1, 4, 7, 2, 5]", "output": "3\n  /   \\\n1       4\n  \\     / \\\n   2   5   7", "category": "Python"}, {"instruction": "Create a VBA macro to find the maximum value of a given range of cells in a Microsoft Excel worksheet.", "input": "Range of cells: A1:A10", "output": "Sub FindMax()\nDim MaxVal As Double\nMaxVal = Cells(1, 1).Value\nFor i = 2 To 10\n    If Cells(i, 1).Value > MaxVal Then\n        MaxVal = Cells(i, 1).Value\n    End If\nNext i \n\nMsgBox MaxVal\nEnd Sub", "category": "Python"}, {"instruction": "What is the correct HTML syntax for creating a link to https://www.sample.com?", "input": "", "output": "The correct HTML syntax for creating a link to https://www.sample.com is <a href=\"https://www.sample.com\">Link text</a>.", "category": "Python"}, {"instruction": "Write a Bash shell script to print the even numbers between two given numbers", "input": "", "output": "#!/bin/bash\n# Bash shell script to print the even numbers between two given numbers\n\n# Take two numbers from user\necho -n \"Enter first number: \"\nread x\necho -n \"Enter second number: \"\nread y\n\n// Check if x is less than y\nif [ $x -lt $y ]\nthen\n    echo \"Even numbers between $x and $y are :\"\n\n    // Iterate to find even numbers\n    for (( i = x; i <= y; i++ ))\n    do\n        rem=$(( $i % 2 ))\n        # Check for even numbers\n        if [ $rem -eq 0 ]\n        then\n            echo \"$i\"\n        fi\n    done\nelse\n    echo \"Input numbers not in increasing order\"\nfi", "category": "Python"}, {"instruction": "Develop a C# program that prints out the number of occurrences of a string in a given text", "input": "string text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\nstring pattern = \"et\";", "output": "// C# program to count occurrences of a string in a given text\nusing System;\n\nnamespace CountOccurrencesInString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\";\n            string pattern = \"et\";\n\n            int count = 0;\n\n            //Find the length of pattern\n            int p_length = pattern.Length;\n\n            //Iterate through the length of string\n            for (int i = 0; i < text.Length - p_length+1; i++)\n            {\n                //Check if the substring matches the pattern\n                if (text.Substring(i, p_length) == pattern)\n                    count++;\n            }\n            Console.WriteLine(\"The occurrences of pattern \\\"\"+pattern+\"\\\" in the text is: \"+count);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following C code as assembly language", "input": "int a=5,b=6, c;\nc = a+b;", "output": "; Initialize variables\nmov ax, 5 ; a = 5\nmov bx, 6 ; b = 6\n\n; Calculate c\nadd ax, bx ; add a and b and store in ax which is c\n\nmov c, ax ; assign result to c", "category": "Python"}, {"instruction": "Write an algorithm to detect the longest common subsequence of two given strings.", "input": "str1 = \"ABCGDH\", str2 = \"ADGH\"", "output": "// Input two strings\nstr1 = \"ABCGDH\"\nstr2 = \"ADGH\"\n\n// Create a two dimensional matrix arr to store the lcs\nint arr[len(str1)+1][len(str2)+1]\n\nint maxLength = 0\n\n// Initialize all elements of arr to zero\nfor i in range(len(str1)+1): \n    for j in range(len(str2)+1): \n        arr[i][j] = 0\n\n// Calculate the value of arr[i][j] \nfor i in range(1,len(str1)+1):\n    for j in range(1,len(str2)+1):\n        if str1[i-1] == str2[j-1]:\n            arr[i][j] = arr[i-1][j-1] + 1\n            maxLength = max(arr[i][j], maxLength)\n        else:\n            arr[i][j] = max(arr[i][j-1], arr[i-1][j])\nreturn maxLength", "category": "Python"}, {"instruction": "Create a C++ program to output the Fibonacci Sequence up to a specified number of terms.", "input": "", "output": "#include <iostream> \n  \nusing namespace std;\n \nint fibonacci_sequence(int num_terms)  \n{  \n    int first = 0, second = 1, next = 0;  \n  \n    if (num_terms == 0)  \n    {  \n        return 0;  \n    }  \n    else if (num_terms == 1)  \n    {  \n        return 1;  \n    }  \n    else\n    {  \n        for (int i = 2; i <= num_terms; i++)  \n        {  \n            next = first + second;  \n            first = second;  \n            second = next;  \n        }  \n    }  \n    return next;  \n}  \n  \nint main()  \n{  \n    int num_terms;\n    cout << \"Enter the number of terms: \";\n    cin >> num_terms;\n    cout << \"The requested Fibonacci sequence upto term \" << num_terms << \" is: \";\n    for (int i = 1; i <= num_terms; i++)  \n        cout << fibonacci_sequence(i) << \" \";  \n    return 0;  \n}", "category": "Python"}, {"instruction": "Develop a Python program to calculate the greatest common factor of two positive integers.", "input": "", "output": "def gcd(x, y): \n  \n    # base case \n    if x == 0: \n        return y \n    \n    # a is greater \n    if x > y: \n        return gcd(x % y, y) \n    \n    # b is greater\n    return gcd(x, y % x) \n\n# Driver code\n# x and y are the two positive integers\nx = 16\ny = 24\ngcd_val = gcd(x, y)\nprint(\"The greatest common factor of\",x,\"and\",y,\"is\",gcd_val)", "category": "Python"}, {"instruction": "Transform the following Python function to a pseudo code.", "input": "def find_max(x):\n max_val = -1\n for i in x:\n if i > max_val:\n max_val = i\n return max_val", "output": "# Find the maximum value in x\nmax_val = -1\nFOR each i in x\n    IF i > max_val\n        max_val = i\nEND FOR\nRETURN max_val", "category": "Python"}, {"instruction": "Suggest a completion for the following code to generate a random string of the given length from a given set.", "input": "length = 10\ncharset = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "output": "import random\n\ndef generate_random_string(length, charset):\n  output_str = ''\n  for i in range(length):\n    output_str += random.choice(charset)\n  return output_str", "category": "Python"}, {"instruction": "In the given code, add an environment variable that should be used to set the desired version of Python.", "input": "", "output": "import os\nos.environ[\"PYTHON_VERSION\"] = \"3.7\"", "category": "Python"}, {"instruction": "In the given code, replace the input function with a try-except block.", "input": "num1 = int(input(\"Enter a number: \"))", "output": "try:\n  num1 = int(input(\"Enter a number: \"))\nexcept:\n  print(\"Input is not a number!\")", "category": "Python"}, {"instruction": "Suggest a completion for the following code to check if the given string is a palindrome.", "input": "string = 'malayalam'", "output": "rev_str = string[::-1]\nif rev_str == string:\n  print(\"The string is a palindrome.\")", "category": "Python"}, {"instruction": "Update the given code to add a statement to check if the input number is a prime or not.", "input": "num = 5", "output": "flag = 0\nfor i in range(2, num):\n  if num % i == 0:\n    flag = 1\nif flag == 0:\n  print(\"The number is a prime.\")", "category": "Python"}, {"instruction": "In the given code, include logic to calculate the area of a triangle if the shape is a triangle.", "input": "shape = 'triangle\nbase = 5\nheight = 3", "output": "if shape == 'triangle':\n  area = 0.5 * base * height\n  print(\"The area of the triangle is: \" + str(area))", "category": "Python"}, {"instruction": "Create a JavaScript function that takes no more than two parameters and returns the larger of the two parameters.", "input": "", "output": "function maxNumber(a, b) {\n  return (a > b) ? a : b;\n}", "category": "Python"}, {"instruction": "Create an HTML form that allows the user to enter their name and email address.", "input": "", "output": "<form>\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\">\n  <input type=\"submit\">\n</form>", "category": "Python"}, {"instruction": "Write an SQL query to find the names andphone numbers of all customers in the database.", "input": "", "output": "SELECT name, phone_number FROM Customer;", "category": "Python"}, {"instruction": "Create a CSS selector to select all the paragraph tags on a website.", "input": "", "output": "p {\n  /* styles here */\n}", "category": "Python"}, {"instruction": "Generate the html markup for a table that contains the given data.", "input": "Roll No  |  Name  |  City\n101      |  John  |  London\n102      |  Mark  |  Paris\n103      |  Luis  |  Singapore", "output": "<table>\n  <tr>\n    <th>Roll No</th>\n    <th>Name</th>\n    <th>City</th>  \n  </tr>\n  <tr>\n    <td>101</td>\n    <td>John</td>\n    <td>London</td>\n  </tr>\n  <tr>\n    <td>102</td>\n    <td>Mark</td>\n    <td>Paris</td>\n  </tr>\n  <tr>\n    <td>103</td>\n    <td>Luis</td>\n    <td>Singapore</td>\n  </tr>  \n</table>", "category": "Python"}, {"instruction": "Write Java code to check if two strings are anagrams, e.g. god, dog are anagrams.", "input": "String str1 = \"abc\";\nString str2 = \"cba\";", "output": "public static boolean isAnagram(String str1, String str2) \n{ \n    char arr1[] = str1.toCharArray(); \n    char arr2[] = str2.toCharArray(); \n    Arrays.sort(arr1); \n    Arrays.sort(arr2); \n\n    return Arrays.equals(arr1, arr2); \n}", "category": "Python"}, {"instruction": "Convert the given SQL query into an equivalent MongoDB query.", "input": "SELECT * FROM users WHERE age BETWEEN 18 AND 24", "output": "db.users.find( { age: { $gte: 18, $lte: 24 } } )", "category": "Python"}, {"instruction": "Construct a JSON string from the given data.", "input": "Name: John\nCity: New York", "output": "'{\"name\":\"John\",\"city\":\"New York\"}'", "category": "Python"}, {"instruction": "Write a python program to filter a list of numbers to only include even numbers", "input": "[1, 2, 3, 4]", "output": "def filter_even(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "category": "Python"}, {"instruction": "Explain the process of quicksort.", "input": "", "output": "Quicksort is a sorting algorithm that uses a divide-and-conquer approach to sort a given array. The process starts by selecting a pivot which is used to partition the array into two subarrays: one containing elements smaller than the pivot, and the other containing elements larger than the pivot. The same process is then repeated for the subarrays recursively until the array is sorted.", "category": "Python"}, {"instruction": "What are the main differences between a stack and a queue?", "input": "", "output": "The main differences between a stack and a queue are their insertion and deletion methods. Stacks use a Last In First Out (LIFO) approach for insertion and deletion, while queues use a First In First Out (FIFO) approach. Stacks are used when order is important, while queues are used when order is not important.", "category": "Python"}, {"instruction": "Given a JSON string, write a program to convert it into an equivalent XML string.", "input": "{\"name\":\"John\",\"city\":\"New York\"}", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<root> \n    <name>John</name> \n    <city>New York</city> \n</root>", "category": "Python"}, {"instruction": "Which of the following operations is not appropriate to perform on a linked list?", "input": "", "output": "Random access is not appropriate to perform on a linked list because it does not have random access like an array does. Random access involves directly accessing a specific index or position in the data structure. Linked lists require traversal of the list from the beginning to reach the desired node.", "category": "Python"}, {"instruction": "How many trailing zeros are in the factorial of the number \"n\"?", "input": "n = 20", "output": "The number of trailing zeros in 20! is 4.\n\ndef trailing_zeros(n):\n count = 0\n i = 5\n while (n/i >= 1): \n  count += int(n/i) \n  i *= 5\n return count\n\nprint(\"The number of trailing zeros in 20! is\", trailing_zeros(20))", "category": "Python"}, {"instruction": "Implement a backtracking algorithm to solve a sudoku puzzle.", "input": "[\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]", "output": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\n\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))", "category": "Python"}, {"instruction": "You are given a set of numbers and a number \"n\". Find the sum of all numbers in the given set greater than \"n\".", "input": "[4, 7, 10, 11], n = 6", "output": "total = 18\ndef sum_greater_than_n(arr, n):\n total = 0\n for num in arr:\n if num > n:\n total += num\n return total\n\nprint(sum_greater_than_n([4, 7, 10, 11], 6))", "category": "Python"}, {"instruction": "Construct a SQL query to generate a report of customers who placed more than 3 orders in the past 6 months.", "input": "", "output": "SELECT customer_name \nFROM orders\nWHERE order_date > DATE_SUB(NOW(), interval 6 month)\nGROUP BY customer_name\nHAVING COUNT(*) > 3;", "category": "Python"}, {"instruction": "Evaluate the given expression.", "input": "5 * 12 + 3 * 6", "output": "90", "category": "Python"}, {"instruction": "Calculate the factorial of the integer \"n\".", "input": "n = 5", "output": "def findFactorial(n): \n fact = 1\n while(n> 0): \n fact = fact * n \n n = n - 1\n return fact \n \nprint(find_factorial(5))", "category": "Python"}, {"instruction": "Construct an SQL query to Create a table with name \"Order\" in the database", "input": "", "output": "CREATE TABLE Order (\n    order_id INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    order_date DATE NOT NULL, \n    order_amount DECIMAL(15, 2) NOT NULL\n);", "category": "Python"}, {"instruction": "Determine the size of an array in bytes.", "input": "", "output": "The size of an array in bytes is equal to the number of elements in the array multiplied by the size of each element in bytes. For example, an array of 10 integers requires 10 * 4 = 40 bytes of memory.", "category": "Python"}, {"instruction": "Update the code to remove an element from the given list.", "input": "data_list = [\"apple\", \"banana\", \"cherry\"]", "output": "data_list.remove(\"cherry\")", "category": "Python"}, {"instruction": "Make a function that accepts 2 numbers and return the largest one.", "input": "2, 3", "output": "def largest(x, y):\n  if (x > y):\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Create a for loop which prints a Fibonacci series up to 10 numbers.", "input": "", "output": "int first = 0;\nint second = 1;\nint next;\n\nfor (int i = 0; i < 10; i++) {\n  if(i <= 1){\n    next = i;\n  }\n  else {\n    next = first + second;\n    first = second;\n    second = next;\n  }\n  cout << next << \" \";\n}", "category": "Python"}, {"instruction": "Create a Python function to sort a list of strings based on a given alphabetical order.", "input": "alphabet = 'bdhajfz', strings = ['bad', 'hfja', 'abd', 'zaj']", "output": "def sort_string_list(strings, alphabet):\n    sorted_list = sorted(strings, key=lambda x:(alphabet.index(x[0]),x))\n    return sorted_list", "category": "Python"}, {"instruction": "You are provided with a list of integers and a given number. Generate Python code that detects if the given number is in the list or not.", "input": "list = [11,22,33,44,77], number = 44", "output": "def check_number(list, number):\n    if number in list:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "You need to create a Python function to remove duplicate elements from a given list.", "input": "[11,46,70,23, 11, 33, 46]", "output": "def remove_duplicates(numbers):\n    s = set()\n    for n in numbers:\n        if n not in s:\n            s.add(n)\n    return list(s)", "category": "Python"}, {"instruction": "Build a React component to toggle the display of some text.", "input": "", "output": "import React from 'react';\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  handleClick = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  render () {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Toggle</button>\n        {this.state.visible && <p>Some text.</p>}\n      </div>\n    );\n  }\n}\n\nexport default Toggle;", "category": "Python"}, {"instruction": "Construct an array of integers containing the following elements.", "input": "3, 6, 9, 12, 15", "output": "[3, 6, 9, 12, 15]", "category": "Python"}, {"instruction": "Find out the number of occurrences of a vowels a, e, i, o, or u in the given string.", "input": "String: The quick brown fox", "output": "var count = 0\nlet vowels = \"aeiou\"\nfor c in string {\n  if vowels.contains(c) {\n    count += 1\n  }\n}\nprint(count)\n// Output: 4", "category": "Python"}, {"instruction": "Rewrite the following in Swift language.", "input": "let names = [\"Bobby\", \"Justin\", \"Tyler\"]", "output": "let names = [\"Bobby\", \"Justin\", \"Tyler\"]", "category": "Python"}, {"instruction": "Write a regex expression to check for a valid name containing only lowercase letters and spaces.", "input": "", "output": "/^[a-z\\s]+$/", "category": "Python"}, {"instruction": "Create an HTML form to allow the user to register an account with an email address and a password.", "input": "", "output": "<form action=\"/register\" method=\"POST\">\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\" required>\n  <br><br>\n\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" name=\"password\" required>\n  <br><br>\n\n  <input type=\"submit\" value=\"Create an Account\" name=\"register\">\n</form>", "category": "Python"}, {"instruction": "Construct the following JSON object.", "input": "", "output": "{\n  \"Name\": \"John\",\n  \"Age\": 23,\n  \"Gender\": \"Male\",\n  \"Height\": 168\n}", "category": "Python"}, {"instruction": "Rewrite the following code as a MySQL query.", "input": "SELECT team, count(*) \n    FROM athletes \n    GROUP BY team", "output": "SELECT team, COUNT(*)\nFROM athletes\nGROUP BY team;", "category": "Python"}, {"instruction": "Create an if-else statement in C++ to check whether a given number is odd or even.", "input": "", "output": "if (num %2 == 0)\n{\n    cout<< \"The num is even\" <<endl;\n}\nelse \n{\n    cout<< \"The num is odd\" <<endl;\n}", "category": "Python"}, {"instruction": "Construct an array of 5 elements from a given string.", "input": "String: programming", "output": "[\"p\", \"r\", \"o\", \"g\", \"r\"]", "category": "Python"}, {"instruction": "Compute the entropy of a given probability distribution.", "input": "Distribution: [2/9, 3/9, 4/9]", "output": "import math\n\n# Calculates the entropy of the given distribution\nentropy = -sum([p * math.log2(p) for p in distribution])", "category": "Python"}, {"instruction": "Create a barplot using Matplotlib to display the given data.", "input": "Data: [2, 3, 5, 7, 9]", "output": "import matplotlib.pyplot as plt \n  \n# Creating the data \ndata = [2, 3, 5, 7, 9]  \n  \n# Creating the figure and axis \nfig, ax = plt.subplots()  \n  \n# plotting the barplot \nax.bar(range(len(data)), data)  \n  \n# show the plot \nplt.show()", "category": "Python"}, {"instruction": "Create a Python code that takes in two strings and finds all common characters from the strings.", "input": "string1 = 'abcd', string2 = 'acde'", "output": "def common_chars(string1, string2):\n    common = []\n    for char in string1:\n        if char in string2:\n            common.append(char)\n    return common", "category": "Python"}, {"instruction": "Generate a Python code to convert list of strings to list of integers.", "input": "strings = ['23', '45', '7', '67']", "output": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    return ints", "category": "Python"}, {"instruction": "Create a Python code to find all uncommon characters between two strings.", "input": "string1 = 'green', string2 = 'blue'", "output": "def uncommon_chars(string1, string2):\n    uncommon = []\n    for char in string1:\n        if char not in string2:\n            uncommon.append(char)\n    for char in string2:\n        if char not in string1:\n            uncommon.append(char)\n    return uncommon", "category": "Python"}, {"instruction": "You need to write a Python function to find all substrings of a given string in order.", "input": "string = 'hello'", "output": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)+1):\n            substrings.append(string[i:j])\n    return substrings", "category": "Python"}, {"instruction": "Create a function that generates a series of Fibonacci numbers up to a certain number of items.", "input": "", "output": "def generate_fibonacci(n):\n    \"\"\"\n    Generates a series of Fibonacci numbers up to a certain number of items.\n    \"\"\"\n    fib = [0, 1]\n \n    if n < 2:\n        return fib[:n]\n \n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib", "category": "Python"}, {"instruction": "Create a function that takes a specific input and produces a specific output using any mathematical operators.", "input": "", "output": "def f(x):\n    \"\"\"\n    Takes a specific input and produces a specific output using any mathematical operators\n    \"\"\"\n    return x**2 + 3*x", "category": "Python"}, {"instruction": "Write a python program to get all possible permutations of a given set of characters.", "input": "", "output": "def get_permutations(s):\n  \"\"\"Get all possible permutations of a given set of characters.\"\"\"\n  n = len(s)\n  result = []\n  def recurse(i):\n    if i == n:\n      result.append(''.join(s))\n      return\n    for j in range(i, n):\n      s[i], s[j] = s[j], s[i]\n      recurse(i+1) # recurse over each character\n      s[i], s[j] = s[j], s[i] # backtrack\n  recurse(0)\n  return result", "category": "Python"}, {"instruction": "Using inspect module to count the number of lines of code in a module.", "input": "", "output": "def get_module_lines(module):\n    \"\"\"\n    Returns the number of lines of code in a given module,\n    using the inspect module.\n    \"\"\"\n    import inspect\n    sourcelines = inspect.getsourcelines(module)\n    line_count = len(sourcelines[0])\n    return line_count", "category": "Python"}, {"instruction": "Given a string, find the longest palindrome within it.", "input": "string = \"ananabay\"", "output": "def longest_palindrome(string):\n  \"\"\"\n  Find the longest palindrome within a given string\n  \"\"\"\n\n  start, end, max_len = 0, 0, 0\n  for i in range(len(string)):\n      # Odd length of palindrome\n      left, right = i, i\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n\n      # Even length of palindrome\n      left, right = i, i+1\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n  return string[start:end+1]", "category": "Python"}, {"instruction": "Create a function to print out a numbered list of items from an array.", "input": "array = [\u2018apple\u2019, \u2018banana\u2019, \u2018orange\u2019]", "output": "def print_numbered_list(array):\n  \"\"\"Prints out a numbered list based on an array of items.\"\"\"\n  for i, item in enumerate(array, start=1):\n    print(f\"{i}. {item}\")", "category": "Python"}, {"instruction": "Create a function to select all the div tags within a document.", "input": "", "output": "def get_div_tags(document):\n  \"\"\"Selects all the div tags within a document\"\"\"\n  divs = document.find_all('div')\n  return divs", "category": "Python"}, {"instruction": "Remove duplicates from the given list and return a new list.", "input": "my_list = [2, 3, 4, 2, 3, 5]", "output": "unique_list = list(set(my_list))  # removed duplicates and returns a new list", "category": "Python"}, {"instruction": "Construct a function to output the product of two numbers.", "input": "", "output": "def product(a, b):\n    return a * b", "category": "Python"}, {"instruction": "Can you build a linear regression model to predict the housing prices in the given dataset?", "input": "The dataset contains 15 columns with 3,000 records.", "output": "Yes, it is possible to build a linear regression model to predict the housing prices in the given dataset. You will have to split the dataset into a training and testing set and then use the training set to build a linear regression model. Once the model is built, use it to predict labels on the test set and then evaluate the model performance with relevant metrics.", "category": "Python"}, {"instruction": "Write a loop to print the numbers from 10 to 1 in reverse order.", "input": "", "output": "for i in range(10, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Help debug this code snippet by adding comments with the appropriate error messages.", "input": "def greetings(name):\nnum = 5\nmessage = \"Hello, \" + name + \"!\"\nreturn message", "output": "def greetings(name):\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    num = 5\n    # \"message\" variable should be defined before using it \n    message = \"Hello, \" + name + \"!\"\n    return message", "category": "Python"}, {"instruction": "Write a for loop that prints the integers from 100 to 1.", "input": "", "output": "for i in range(100, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Can you write a function that returns the sum of the elements of a given array?", "input": "arr = [2, 3, 4, 5]", "output": "def sum_array(arr):\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum", "category": "Python"}, {"instruction": "You need to create a Python class to represent a 3-dimensional point.", "input": "", "output": "class Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.x, self.y, self.z)", "category": "Python"}, {"instruction": "You need to create a Python function to detect if a given number is prime or not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Construct a function that prints the first n terms in a Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    fib1 = 0\n    fib2 = 1\n    for i in range(n):\n        print(fib1)\n        temp = fib1\n        fib1 = fib2\n        fib2 = temp + fib2", "category": "Python"}, {"instruction": "Generate a correct C++ code to calculate the average of three numbers.", "input": "3, 4, 7", "output": "double average(double x, double y, double z) {\n  return (x + y + z) / 3;\n}", "category": "Python"}, {"instruction": "Calculate the mean of the given array.", "input": "my_array = [2, 7, 6, 8, 4, 9]", "output": "mean = sum(my_array)/len(my_array)  # Calculates the mean of the array", "category": "Python"}, {"instruction": "Convert the given dictionary into a list of tuples.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 3}", "output": "my_list = list(my_dict.items())  # Converts the dictionary into a list of tuples", "category": "Python"}, {"instruction": "Design a SQL table to store the information of teachers.", "input": "", "output": "CREATE TABLE teachers (\n  id INTEGER PRIMARY KEY, \n  name VARCHAR(50) NOT NULL, \n  subject VARCHAR(50) NOT NULL, \n  age INTEGER NOT NULL, \n  years_of_experience INTEGER, \n  highest_degree VARCHAR(100)\n);", "category": "Python"}, {"instruction": "Apply a filter to the following array of numbers so that only the even numbers remain.", "input": "const arr = [1, 2, 3, 4, 5, 6, 7, 8,9];", "output": "const filteredArr = arr.filter((num) => num % 2 === 0);", "category": "Python"}, {"instruction": "Program a function in Go that takes a string and returns its corresponding ASCII code.", "input": "\"Hello, World!\"", "output": "func stringASCIICode(s string) int {\n\tcode := 0\n\tfor _, c := range s {\n\t\tcode += int(c)\n\t}\n\treturn code\n}", "category": "Python"}, {"instruction": "Change the following array of objects to a dictionary.", "input": "const arr = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Jane\"},\n  {id: 3, name: \"Jake\"}\n];", "output": "const obj = {\n  1: {name: \"John\"},\n  2: {name: \"Jane\"},\n  3: {name: \"Jake\"}\n};", "category": "Python"}, {"instruction": "Categorize the given text as positive, neutral, or negative sentiment.", "input": "The movie was okay, but it could have been better.", "output": "Neutral", "category": "Python"}, {"instruction": "Make a POST request to the same server and download the response content", "input": "", "output": "import requests\n \nurl = 'http://example.com/'\ndata = {'key': 'value'}\n \nresponse = requests.post(url, data=data)\n \n#Download response content\nwith open('response_content.txt', 'wb') as f:\n    f.write(response.content)", "category": "Python"}, {"instruction": "Train a recursive neural network to classify whether a sentence is positive or negative.", "input": "", "output": "import tensorflow as tf\n\n# Setup the RNN\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.GRU(32, return_sequences=True),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile and fit\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n              \nmodel.fit(x_train, y_train, epochs=5)", "category": "Python"}, {"instruction": "Edit the given HTML code to add a footnote section.", "input": "<code>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1>This is a Heading</h1>\n    <p>This is a paragraph.</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1>This is a Heading</h1>\n    <p>This is a paragraph.</p>\n    <footer>\n        <p> Copyright (c) Example.com. All Rights Reserved.</p> \n    </footer>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an algorithm to implement a binary search.", "input": "", "output": "def binary_search(arr, x): \n  \n    # find the leftmost and rightmost point \n    l = 0\n    r = len(arr) - 1\n      \n    while l <= r: \n  \n        mid = l + (r - l)//2\n  \n        # if element is present at the middle  \n        if arr[mid] == x: \n            return mid \n  \n        # if element is smaller than mid,  \n        # then it can only be present  \n        # in left subarray \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # else the element can only  \n        # be present in right subarray \n        else: \n            r = mid - 1\n      \n    # if we reach here,  \n    # then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Generate the reCAPTCHA API key.", "input": "", "output": "Go to the Google reCAPTCHA admin page, sign up for an API key, and register the domain for your website. Once registered, you will receive a code for your API key.", "category": "Python"}, {"instruction": "Initialize a hash table with 7 buckets in C programming language.", "input": "", "output": "/* Create 7 empty buckets */ \nint hashTable[7] = { 0 };", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of a shopping cart, given the price and the quantity of each item.", "input": "Item \tPrice \tQuantity\nApple \t2$ \t\t2\nOrange \t3$ \t\t5\nBanana \t1$ \t\t1", "output": "def total_cost(items):\n  total = 0\n  for item in items:\n    total += item['price'] * item['quantity']\n  return total\n  \nitems = [\n  { 'item': 'Apple', 'price': 2, 'quantity': 2 },\n  { 'item': 'Orange', 'price': 3, 'quantity': 5 },\n  { 'item': 'Banana', 'price': 1, 'quantity': 1 }\n]\ntotal = total_cost(items)\nprint(total)", "category": "Python"}, {"instruction": "Create a query that returns the top 5 cities with the highest population.", "input": "", "output": "SELECT City, Population FROM Cities\nORDER BY Population DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "You are given an array of strings. Write a Python script to sort the array in alphabetical order.", "input": "\"ball\", \"cat\", \"dog\", \"apple\"", "output": "arr = [\"ball\", \"cat\", \"dog\", \"apple\"]\narr.sort()\nprint(arr)", "category": "Python"}, {"instruction": "You are given an array of numbers. Create a function to check if the array contains duplicate values.", "input": "11, 15, 40, 14, 11", "output": "def contains_duplicates(arr):\n  unique_elements = set(arr)\n  if len(arr) != len(unique_elements):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Write a SQL query to find all teachers with more than 10 years of experience.", "input": "", "output": "SELECT * \nFROM teachers \nWHERE years_of_experience > 10;", "category": "Python"}, {"instruction": "Create a function in Julia to calculate the Median of an array.", "input": "arr = [1, 2, 2, 3, 6, 8]", "output": "function median(arr)\n  sorted_arr = sort(arr)\n  n = length(sorted_arr)\n  if n % 2 == 0\n      return (sorted_arr[n \u00f7 2] + sorted_arr[(n \u00f7 2) + 1]) / 2\n  else\n      return sorted_arr[(n + 1) \u00f7 2]\n  end\nend", "category": "Python"}, {"instruction": "Using Java, create a program to find the highest value in this array.", "input": "arr = [1, 2, 4, 7, 10]", "output": "public class HighestValue {\n  public static int findHighest(int[] arr) { \n    int highest = arr[0]; \n    for (int i = 1; i < arr.length; i++) {\n      highest = Math.max(highest, arr[i]); \n    }\n    return highest; \n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 4, 7, 10}; \n    System.out.println(findHighest(arr)); \n  }\n}", "category": "Python"}, {"instruction": "Design a Python class to represent geometric shapes.", "input": "", "output": "class GeometricShape:\n\n    def __init__(self, sides):\n        self.sides = sides\n\n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0", "category": "Python"}, {"instruction": "Write code to find the sum of all items in the list.", "input": "my_list = [5,3,7,8,2]", "output": "sum_items = sum(my_list)  # Calculates the sum of all items in the list", "category": "Python"}, {"instruction": "Create a webhook in Python to listen to webhook requests.", "input": "", "output": "import time\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    print(data)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)", "category": "Python"}, {"instruction": "Compute the maximum value of a List in Python.", "input": "", "output": "max_val = max(my_list)  # Computes the maximum of the list", "category": "Python"}, {"instruction": "Change the provided dataset into a 3-dimensional tensor, in order to feed it into a Convolutional Neural Network model.", "input": "Dataset containing 10,000 grayscale images of size 32x32", "output": "import numpy as np \n  \n# Creating the 3D tensor \nX = np.zeros((10000, 32, 32)) \n  \n# Initializing it with the grayscale images \nX[:,:,:] = dataset", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to check if a given number is odd.", "input": "Number = 21", "output": "function isOdd(num) { \n    if (num % 2 !== 0) {\n        return true;\n    }\n    return false;\n}\n\n// Output\nconsole.log(isOdd(21));\n// Output: true", "category": "Python"}, {"instruction": "Create a function to validate a given email address.", "input": "", "output": "function validateEmail(email) {\n  const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regexp.test(email);\n}", "category": "Python"}, {"instruction": "Define an F# array and initialize it with even numbers from 0 to 10", "input": "", "output": "let evenNumbers = [|0;2;4;6;8;10|]", "category": "Python"}, {"instruction": "Write code to implement the Binary Search algorithm in Python.", "input": "", "output": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1  # not found", "category": "Python"}, {"instruction": "Create a loop to delete all elements in a linked list", "input": "", "output": "current = head\nwhile current is not None:\n    temp = current.next\n    del current\n    current = temp", "category": "Python"}, {"instruction": "Write a Python program to read two numbers and print their multiplication?", "input": "Number1: 5\nNumber2: 10", "output": "#Take the two numbers from the user\nnumber1 = int(input('Number1:  '))\nnumber2 = int(input('Number2: '))\n\n#Multiply and print the result\nresult = number1 * number2\nprint('The result is:', result)\n\nOutput:\nThe result is: 50", "category": "Python"}, {"instruction": "Create a function which accepts a string and prints out each word with the count of its characters.", "input": "String: \"Hello World\"", "output": "def print_word_lengths(input_string):\n  #Split the string into individual words\n  words = input_string.split()\n  \n  #Iterate over each word\n  for word in words:\n    #Print the word and the length of the word\n    print('{}: {}'.format(word, len(word)))\n\nprint_word_lengths('Hello World')\n\nOutput:\nHello: 5\nWorld: 5", "category": "Python"}, {"instruction": "Create a program that extracts the first and last names from a string.", "input": "Full Name: \"Barack Obama\"", "output": "def extract_names(full_name):\n  #Split the name into separate words\n  name_parts = full_name.split()\n  \n  #Check if the name has multiple words\n  if len(name_parts) == 1:\n    return None\n  \n  #Extract the first and last names\n  first_name = name_parts[0]\n  last_name = name_parts[-1]\n  \n  #Return the first and last names\n  return first_name, last_name\n\nprint(extract_names(\"Barack Obama\"))\n\nOutput:\n('Barack', 'Obama')", "category": "Python"}, {"instruction": "Design a function to validate a phone number.", "input": "Phone Number: 212-555-0000", "output": "def check_phone_number(phone_number):\n  #Remove any non-numeric characters\n  phone_number = phone_number.replace(\"-\", \"\")\n  phone_number = phone_number.replace(\" \", \"\")\n\n  #Check if the phone number is 10 digits long\n  if (len(phone_number) != 10):\n    return False\n\n  #Check each digit is a number\n  for digit in phone_number:\n    if not digit.isdigit():\n      return False\n\n  #Check the area code is valid\n  area_code = phone_number[0:3]\n  valid_area_codes = [\"201\", \"212\", \"203\", \"202\", \"205\"]\n  if area_code not in valid_area_codes:\n    return False\n\n  #All tests passed\n  return True\n\nprint(check_phone_number('212-555-0000'))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Given a JSON object, output an object with keys sorted alphabetically.", "input": "{\"belief\": \"work hard\", \"hope\":\"pray hard\"}", "output": "{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"hope\": \"pray hard\", \"belief\": \"work hard\"}", "category": "Python"}, {"instruction": "Program a function in JavaScript to remove adjacent duplicates from the given array.", "input": "arr = [2, 3, 3, 3, 6, 9, 9]", "output": "function removeDuplicates(arr) {\n  let output = [];\n  arr.forEach(function(element, index) {\n    if (arr[index] != arr[index + 1]) {\n      output.push(element);\n    }\n  }); \n  return output;\n}\n\nconsole.log(removeDuplicates([2, 3, 3, 3, 6, 9, 9])); \n// Output: [2, 3, 6, 9]", "category": "Python"}, {"instruction": "Create a script in HTML to output a horizontal line.", "input": "", "output": "<html>\n  <head>\n    <title>Horizontal Line</title>\n  </head>\n  <body>\n    <hr>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Convert this given number in base 10 to base 2", "input": "34", "output": "100010", "category": "Python"}, {"instruction": "Update the given code to print out whether the input list is empty or not.", "input": "inp_list = [1,2,3]", "output": "if not inp_list:\n  print(\"The list is empty.\")\nelse:\n  print(\"The list is not empty.\")", "category": "Python"}, {"instruction": "write a function that takes two integers and returns their product.", "input": "", "output": "def multiply(x, y):\n  return x * y", "category": "Python"}, {"instruction": "Add a function to the code that will calculate the average of the input array.", "input": "array = [1,2,3,4]", "output": "def calculate_average(array):\n  total = 0\n  for num in array:\n    total += num\n  avg = total/len(array)\n  return avg", "category": "Python"}, {"instruction": "Create an object constructor in Javascript which takes three arguments: name, age, and city.", "input": "", "output": "function Person (name, age, city) {\n  this.name = name;\n  this.age = age;\n  this.city = city;\n}", "category": "Python"}, {"instruction": "Name three built-in Python data types.", "input": "", "output": "The three built-in Python data types are integers, floats, and strings.", "category": "Python"}, {"instruction": "Create an array with 10 integers from 0 to 9, where each number appears only once.", "input": "", "output": "let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];", "category": "Python"}, {"instruction": "Create a class named `Person` and add four attributes called `name`, `age`, `gender`, and `height`.", "input": "", "output": "class Person {\n  constructor(name, age, gender, height) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n    this.height = height;\n  }\n}", "category": "Python"}, {"instruction": "Calculate the area of a circle whose radius is given by the value stored in the variable `radius`.", "input": "radius = 5", "output": "const area = Math.PI * Math.pow(radius, 2);\n// area = 78.53981633974483", "category": "Python"}, {"instruction": "Produce a small program which prints the number 42 when run.", "input": "", "output": "#include <iostream>\n\nint main() {\n std::cout << 42 << std::endl;\n return 0;\n}", "category": "Python"}, {"instruction": "Create a program to remove all duplicate elements from a list and return a new list with the unique elements.", "input": "", "output": "def remove_duplicates(nums):\n    temp_list = []\n    for num in nums:\n        if num not in temp_list:\n            temp_list.append(num)\n    return temp_list", "category": "Python"}, {"instruction": "Create a program to combine the elements of two different lists into a single list.", "input": "list_1 = [1,2,3]\nlist_2 = [4,5,6]", "output": "combined_list = list_1 + list_2", "category": "Python"}, {"instruction": "Read the following array and remove all the numbers divisible by 4.", "input": "list_int = [2,4,6,10]", "output": "list_int = [num for num in list_int if num % 4 != 0]", "category": "Python"}, {"instruction": "Change the following variable to a string.", "input": "a_variable = 8", "output": "a_variable = str(8)", "category": "Python"}, {"instruction": "Create a variable called \"score\" with the value of 0.", "input": "", "output": "score = 0", "category": "Python"}, {"instruction": "Transform the following list of tuples into a dictionary.", "input": "list_tuples = [(\"python\", 1), (\"is\", 2), (\"fun\", 3)]", "output": "dict_tuples = { item[0] : item[1]  for item in list_tuples }", "category": "Python"}, {"instruction": "Read the following array and print it in the same order using a for loop.", "input": "list_int = [1,3,5,7,9]", "output": "for item in list_int:\n    print(item)", "category": "Python"}, {"instruction": "Create a new list of words with the given words in the same order.", "input": "words = [\"Python\", \"is\", \"fun\"]", "output": "new_words = [\"Python\", \"is\", \"fun\"]", "category": "Python"}, {"instruction": "What is the Big-O notation and why is it used?", "input": "", "output": "The Big-O notation is a mathematical way of describing the performance of a given algorithm. It measures the complexity of an algorithm by taking into account the number of operations it performs, such as the time and space it takes to complete a given task. Big-O notation is used to compare different algorithms and to assess the impact of various choices on a given program's performance.", "category": "Python"}, {"instruction": "Write a SQL query that returns the names of all the customers.", "input": "", "output": "SELECT name FROM customers;", "category": "Python"}, {"instruction": "Create a CSS class named 'main-section' with a width of 700px and a margin of 0 auto.", "input": "", "output": ".main-section {\n  width: 700px;\n  margin: 0 auto;\n}", "category": "Python"}, {"instruction": "Generate an array with the numbers from -10 to 10 in incremental order.", "input": "", "output": "let arr = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "category": "Python"}, {"instruction": "Using the given input, generate a code to print in reverse order.", "input": "a_list = ['a', 'b', 'c', 'd', 'e']", "output": "def print_reverse(a_list):\n    for i in range(len(a_list)-1, -1, -1):\n        print(a_list[i])", "category": "Python"}, {"instruction": "Generate a function \"capitalize\" in JavaScript to capitalize the first letter of every word", "input": "", "output": "function capitalize(str) {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n}", "category": "Python"}, {"instruction": "Write a CSS rule to set the text color of a page to red", "input": "", "output": "body {\n    color: red;\n}", "category": "Python"}, {"instruction": "Create a class in Java to store student details", "input": "Attributes: id (int), name (String), grade (int)", "output": "public class Student{\n    // Attributes \n    private int id;\n    private String name;\n    private int grade;\n    \n    // Constructor \n    public Student(int id, String name, int grade){\n        this.id = id;\n        this.name = name;\n        this.grade = grade;\n    }\n    \n    // Getters and setters \n    public int getId(){\n        return this.id;\n    }\n    \n    public void setId(int id){\n        this.id = id;\n    }\n    \n    public String getName(){\n        return this.name;\n    }\n    \n    public void setName(String name){\n        this.name = name;\n    }\n    \n    public int getGrade(){\n        return this.grade;\n    }\n    \n    public void setGrade(int grade){\n        this.grade = grade;\n    }\n}", "category": "Python"}, {"instruction": "Generate a correct SQL query to retreive a subset of rows in a table", "input": "Table Name: students\nCondition: Retrieve rows where the student grade is greater than 80", "output": "SELECT * FROM students WHERE grade > 80;", "category": "Python"}, {"instruction": "Make a function \"convert_time\" that would convert seconds to minutes", "input": "", "output": "def convert_time(seconds):\n    minutes = seconds / 60\n    return minutes", "category": "Python"}, {"instruction": "Create a looping structure in JavaScript that executes a task 10 times", "input": "", "output": "for (let i = 0; i < 10; i++) {\n    // The task to be executed\n}", "category": "Python"}, {"instruction": "Create a function \" avg_grade\" that would take a list of grades and return the average of the grades", "input": "list = [84, 89, 94, 81]", "output": "def avg_grade(list):\n    total = 0\n    for num in list:\n        total += num\n    return total / len(list)", "category": "Python"}, {"instruction": "Write an Android application to detect the magnetic field of a device.", "input": "", "output": "public class MainActivity extends AppCompatActivity implements SensorEventListener {\n\n    private SensorManager sensorManager;\n    private Sensor magneticFieldSensor;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        magneticFieldSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);\n    }\n    \n    @Override\n    protected void onResume() {\n        super.onResume();\n        sensorManager.registerListener(this, magneticFieldSensor, \n            SensorManager.SENSOR_DELAY_NORMAL);\n    }\n    \n    @Override\n    protected void onPause() {\n        super.onPause();\n        sensorManager.unregisterListener(this);\n    }\n    \n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {\n            float xField = event.values[0];\n            float yField = event.values[1];\n            float zField = event.values[2];\n            \n            // handle the magnetic field values here\n        }\n    } \n    \n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // handle the accuracy changes here\n    }\n}", "category": "Python"}, {"instruction": "Determine the most efficient way to loop over the list below.", "input": "list = [\"John\", \"James\", \"Glen\", \"Tony\", \"Kelly\"]", "output": "for name in list:\n    print(name)", "category": "Python"}, {"instruction": "Design a JSON structure to store contacts.", "input": "", "output": "{\n  \"contacts\": [\n    {\n      \"name\": \"John Doe\",\n      \"phone\": 123456789,\n      \"email\": \"jdoe@example.com\"\n    },\n    {\n      \"name\": \"Jane Doe\",\n      \"phone\": 987654321,\n      \"email\": \"janedoe@example.com\"\n    }\n  ]\n}", "category": "Python"}, {"instruction": "Make a function to convert a string to a number.", "input": "", "output": "def str_to_num(x):\n    return int(x)", "category": "Python"}, {"instruction": "Generate a 3x3 matrix using randomly generated numbers between 1 and 10.", "input": "", "output": "matrix = [[4, 5, 7],\n          [6, 2, 9],\n          [1, 3, 8]]", "category": "Python"}, {"instruction": "Remove the duplicates from the given array.", "input": "arr = [1, 2, 3, 3, 4, 4, 5, 6]", "output": "[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a function to return the difference between two numbers.", "input": "", "output": "def difference(a, b):\n    return a - b", "category": "Python"}, {"instruction": "Generate a code to compare two strings and return a boolean result.", "input": "", "output": "def compare(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Generate a code to filter out any value that is greater than the given number.", "input": "my_list = [2, 4, 5, 6, 7]\nand the number = 5", "output": "def filter_gt(my_list, number):\n    return [x for x in my_list if x <= number]", "category": "Python"}, {"instruction": "Iterate over the list and calculate the average", "input": "arr = [1,2,3,4,5]", "output": "def average(arr):\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum/len(arr)", "category": "Python"}, {"instruction": "Create a while loop in Python that runs while the given condition is true", "input": "while x is greater than 10", "output": "while x > 10:\n    # do something\n    x = x - 1", "category": "Python"}, {"instruction": "What is the difference between a REST API and SOAP API?", "input": "", "output": "REST (REpresentational State Transfer) is an architectural style for designing distributed systems and web services while SOAP (Simple Object Access Protocol) is a messaging protocol designed for exchanging information in a distributed environment. REST is based on a stateless, client-server protocol and usually uses HTTP for communication while SOAP uses XML for communication. REST is much simpler than SOAP and does not require any additional headers but SOAP needs additional headers for authentication and authorization.", "category": "Python"}, {"instruction": "Explain the difference between <!DOCTYPE> and <meta> tags.", "input": "", "output": "The HTML <!DOCTYPE> tag is used to indicate which version of HTML web page is based on. It allows a browser to know which type of document it is dealing with, so that it can determine how to render the document. The <meta> tag is used to provide information about the content of the web page, such as its title, author, keywords, description, language and more. It does not affect the way a browser displays the web page.", "category": "Python"}, {"instruction": "Write code to find the depth of a binary tree.", "input": "", "output": "// Recursive function to find the maximum depth \n// of a binary tree \nint maxDepth(Node *root) \n{ \n    // Base case \n    if (root == NULL) \n        return 0; \n  \n    // Recur for left subtree and right subtree \n    int lDepth = maxDepth(root->left); \n    int rDepth = maxDepth(root->right); \n  \n    // Use the larger one \n    if (lDepth > rDepth) \n        return lDepth + 1; \n    else\n        return rDepth + 1; \n}", "category": "Python"}, {"instruction": "Create a C++ program to perform a linear search on an array.", "input": "", "output": "#include <iostream> \n  \nint linear_search(int arr[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (arr[i] == x) \n            return i; \n    return -1; \n} \n\n// Driver code \nint main(void) \n{ \n    int arr[] = {2, 3, 4, 10, 40}; \n    int x = 10; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int result = linear_search(arr, n, x); \n    if(result == -1) \n    {\n        std::cout<< \"Element is not present in array\"; \n    }\n    else\n    {\n        std::cout<< \"Element is present at index \" << result;\n    }\n    return 0; \n}", "category": "Python"}, {"instruction": "Write a function to concatenate two strings in Python.", "input": "", "output": "def concat_strings(string1, string2): \n    return string1 + string2", "category": "Python"}, {"instruction": "Write code that adds two numbers using the unary operator.", "input": "", "output": "// Function to add two numbers using unary operator \nint addNumbers(int x, int y) \n{ \n    // Iterate till there is no carry \n    while (y != 0) \n    { \n        // carry now contains common \n        // set bits of x and y \n        int carry = x & y; \n  \n        // Sum of bits of x and y where at \n        // least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so that  \n        // adding it to x gives the required sum \n        y = carry << 1; \n    } \n    return x; \n}", "category": "Python"}, {"instruction": "Write a Rust program to find the lowest common ancestor in a given tree.", "input": "", "output": "fn lowestCommonAncestor(root: &TreeNode, p: &TreeNode, q: &TreeNode) -> i32 {\n if root == nil {\n  return -1;\n }\n\n if root == p || root == q {\n  return root.val;\n }\n\n let left = lowestCommonAncestor(root.left, p, q);\n let right = lowestCommonAncestor(root.right, p, q);\n\n if left != -1 && right != -1 {\n  return root.val;\n }\n\n return left != -1 ? left : right;\n}", "category": "Python"}, {"instruction": "Write a PHP program to flatten a multi-dimensional array.", "input": "", "output": "function flattenArray($array) {\n $flattenedArray = array();\n array_walk_recursive($array, function ($v) use (&$flattenedArray) {\n  $flattenedArray[] = $v;\n });\n return $flattenedArray;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to search a given element x in a sorted array.", "input": "arr = [1, 2, 4, 8, 10];\nx = 8", "output": "function searchElement(arr, x) {\n let start = 0;\n let end = arr.length - 1;\n let mid;\n\n while (start <= end) {\n  mid = Math.floor((start + end) / 2);\n  if (arr[mid] === x) {\n   return mid;\n  }\n  if (arr[mid] < x) {\n   start = mid + 1;\n  } else {\n   end = mid - 1;\n  }\n }\n\n return false;\n}\n\nconsole.log(searchElement(arr, x));", "category": "Python"}, {"instruction": "How does the Binary Search algorithm work?", "input": "", "output": "The Binary Search algorithm works by repeatedly dividing an ordered list of items into half and searching for the desired element in that half. If the desired element is not present in the current half, the algorithm moves to the other half and the search continues until either the desired element is found or the list is exhausted.", "category": "Python"}, {"instruction": "Implement a function to rotate a list by k elements.", "input": "list = [1,2,3,4,5], k = 2", "output": "def rotate(list, k): \n    first_part = list[0:k] \n    second_part = list[k:] \n    second_part.extend(first_part) \n    return second_part", "category": "Python"}, {"instruction": "Read the given code and detect which variables are not declared.", "input": "int x=3;\ny=4;\nint z=x+y;", "output": "y is not declared.", "category": "Python"}, {"instruction": "You are given two strings and you need to output true if they are anagrams of each other, false otherwise.", "input": "String 1: eat\nString 2: tea", "output": "true", "category": "Python"}, {"instruction": "Create an HTML page that displays a table with names, ages, and phone numbers", "input": "Name: John\nAge: 25\nPhone: 555-555-5555\nName: Jane\nAge: 32\nPhone: 333-333-3333", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Table of Names and Information</title>\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Phone</th>\n        </tr>\n        <tr>\n            <td>John</td>\n            <td>25</td>\n            <td>555-555-5555</td>\n        </tr>\n        <tr>\n            <td>Jane</td>\n            <td>32</td>\n            <td>333-333-3333</td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "What is the purpose of using a data structure?", "input": "", "output": "The purpose of using a data structure is to store, organize, and manipulate data quickly and effectively. By using an appropriate data structure depending on the type of data and the operations being performed, it is possible to make data processing efficient and improve the performance of the program.", "category": "Python"}, {"instruction": "Explain why the use of a loop is often the best solution for a problem.", "input": "", "output": "Loops are often the best solution for a problem because they allow you to repeat a code block multiple times until a specific condition is met. By using a loop, you can save time and energy while also increasing the program's efficiency. Loops also make it easier to handle large data sets and complex tasks.", "category": "Python"}, {"instruction": "Write a C program to implement diamond pattern.", "input": "", "output": "#include <stdio.h>\n\nint main()\n{\n    int n; //number of rows \n           //to be printed \n    printf(\"Enter the number of rows\\n\");\n    scanf(\"%d\",&n);\n  \n    // odd number of rows \n    if(n%2==1) \n    { \n        // rows increment \n        for(int i=0; i<n; i++) \n        { \n            // Print spaces \n            for(int j=0; j<n-i-1; j++) \n            { \n                printf(\" \"); \n            }   \n              \n             // Print stars \n            for(int k=0; k<2*i+1; k++) \n            { \n                printf(\"*\"); \n            } \n            printf(\"\\n\"); \n        } \n          \n        // rows decrement \n        for(int i=n-2; i>=0; i--) \n        { \n            // Print spaces \n            for(int j=0; j<n-i-1; j++) \n            { \n                printf(\" \"); \n            }     \n              \n            // Print stars \n            for(int k=0; k<2*i+1; k++) \n            { \n                printf(\"*\"); \n            } \n            printf(\"\\n\"); \n        } \n    } \n  \n    // even number of rows \n    else\n    { \n        // rows increment \n        for(int i=0; i<=n; i++) \n        { \n            // Print spaces \n            for(int j=1; j<=n-i; j++) \n            { \n                printf(\" \"); \n            }       \n              \n            // Print stars \n            for(int k=1; k<=2*i-1; k++) \n            { \n                printf(\"*\"); \n            } \n            printf(\"\\n\"); \n        } \n          \n        // rows decrement \n        for(int i=n-1; i>0; i--) \n        { \n            // Print spaces \n            for(int j=0; j<n-i; j++) \n            { \n                printf(\" \"); \n            }   \n              \n            // Print stars \n            for(int k=1; k<=2*i-1; k++) \n            { \n                printf(\"*\"); \n            } \n            printf(\"\\n\"); \n        } \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Perform checksum calculation on the following string \"HelloWorld\".", "input": "", "output": "// Function to calculate the checksum of a given string \n// *str is the given string \nlong calculateChecksum(string str) \n{ \n\tlong checksum = 0; \n  \n\tfor (int i = 0; i < str.length(); i++) { \n\t\tchecksum += str.at(i); \n\t} \n\treturn checksum; \n} \n// Output: checksum = 483 (for \"HelloWorld\")", "category": "Python"}, {"instruction": "Rewrite the below JAVA program in Python", "input": "public static void main (String[] args) { \n  int count = 10; \n  while (count > 0) { \n    System.out.println(\"Code:\" + count); \n    count--; \n  } \n}", "output": "count = 10\nwhile count > 0:\n    print(\"Code:\", count)\n    count -= 1", "category": "Python"}, {"instruction": "Write a C# program to remove all characters in a given string except the 'Space'", "input": "Hello World", "output": "string removeChars(string str) \n{ \n\tstring result = \"\"; \n\t\n\tfor (int i = 0; i < str.Length; i++) \n\t{ \n\t\tif (str[i] != ' ') \n\t\t\tcontinue; \n\t\t\n\t\tresult += str[i]; \n\t} \n\t\n\treturn result; \n}", "category": "Python"}, {"instruction": "Write an Android application to display the date and time in a text view.", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get a reference to the TextView\n        TextView textView = (TextView) findViewById(R.id.textView);\n\n        // Set the text view to present the current date and time\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String currentDateTimeString = sdf.format(new Date());\n        textView.setText(currentDateTimeString);\n    }\n}", "category": "Python"}, {"instruction": "Write a C# program to sum the following numbers: 5, 9, 1, 2, 3.", "input": "", "output": "using System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Sum of 5, 9, 1, 2, 3\n            int result = 5 + 9 + 1 + 2 + 3;\n            Console.WriteLine(result.ToString()); // 20\n        }\n    }\n}", "category": "Python"}, {"instruction": "Generate a HTML form with 3 text fields.", "input": "", "output": "<form>\n    <input type=\"text\" name=\"field1\" />\n    <input type=\"text\" name=\"field2\" />\n    <input type=\"text\" name=\"field3\" />\n    <button type=\"submit\">Submit</button>\n</form>", "category": "Python"}, {"instruction": "Write a Java code to perform linear search on the given array.", "input": "", "output": "public class LinearSearch \n{ \n    /**\n     * Linear search implementation\n     * \n     * @param arr the array of elements to search\n     * @param target the element to search for\n     * @return the index of the element if found, -1 otherwise\n     */\n    public static int linearSearch(int[] arr, int target) \n    { \n        for (int i = 0; i < arr.length; i++) \n        { \n            if (arr[i] == target) \n            { \n                return i; \n            } \n        } \n        return -1;\n    } \n    public static void main(String[] args) \n    { \n        int[] arr = {7, 9, 15, 11};\n        int target = 15; \n        int index = linearSearch(arr, target); \n        if (index == -1) \n            System.out.println(\"Element not found\"); \n        else\n            System.out.println(\"Element found at index: \" + index); \n    } \n}", "category": "Python"}, {"instruction": "Compare two given objects and output the differences.", "input": "Object 1: {name: John, age: 30, city: New York}\nObject 2: {name: John, age: 40, city: Las Vegas}", "output": "def compare_objects(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \ncompare_objects({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n                {\"name\": \"John\", \"age\": 40, \"city\": \"Las Vegas\"})\n\n# Output:\n# Different values for age: 30 vs. 40\n# New key not in first object: city", "category": "Python"}, {"instruction": "Create a perl code to parse a JSON object.", "input": "", "output": "use JSON;\n\n# Parse a JSON object\nmy $json_text = \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}\";\nmy $json_obj = decode_json($json_text);\n\n# Access data\nprint \"name  : \" . $json_obj->{\"name\"} . \"\\n\";\nprint \"age   : \" . $json_obj->{\"age\"} . \"\\n\";\nprint \"city  : \" . $json_obj->{\"city\"} . \"\\n\";", "category": "Python"}, {"instruction": "Output the result of 3+5*2-9", "input": "", "output": "3 + 5 * 2 - 9 = 2", "category": "Python"}, {"instruction": "Write an SQL query to fetch all records from the 'orders' table, that have a status of either 'pending' or 'shipped'.", "input": "", "output": "SELECT * FROM orders WHERE status IN ('pending', 'shipped');", "category": "Python"}, {"instruction": "Generate a query in SQL to find the difference between the maximum and minimum salary from the 'employees' table.", "input": "", "output": "SELECT MAX(salary) - MIN(salary) AS salary_difference FROM employees;", "category": "Python"}, {"instruction": "Construct a JavaScript program to create an alert message when a button is clicked.", "input": "", "output": "<button onclick=\"alert('Button clicked')\">Click me</button>", "category": "Python"}, {"instruction": "Generate a SQL command to update the salary by 5% for all the employees.", "input": "", "output": "UPDATE employees SET salary = salary * 1.05;", "category": "Python"}, {"instruction": "Construct a SQL query to find the employees younger than age 35 from the table called 'employees'", "input": "", "output": "SELECT  *  FROM employees WHERE age < 35;", "category": "Python"}, {"instruction": "Write a function in Ruby to remove the white space from a given string.", "input": "", "output": "def remove_whitespace(str)\n    str.gsub(/\\s+/, \"\")\nend", "category": "Python"}, {"instruction": "Generate a query to find the employee with the lowest salary from the table called 'employees'.", "input": "", "output": "SELECT * FROM employees ORDER BY salary ASC LIMIT 1;", "category": "Python"}, {"instruction": "Write a JAVA program to display the list of numbers from 1 to 10", "input": "", "output": "public class NumberList { \n    public static void main(String[] args) \n    { \n        // Printing numbers from 1 to 10 \n        for (int num = 1; num <= 10; num++) \n            System.out.println(num); \n    } \n}", "category": "Python"}, {"instruction": "Develop an SQL statement to select those products with a minimum price of 125$", "input": "", "output": "SELECT * FROM Products WHERE Price >= 125;", "category": "Python"}, {"instruction": "Create a program in C++ to print the first 10 numbers of the Fibonacci series.", "input": "", "output": "#include <iostream>\n \nint main()\n{\n    int n1 = 0, n2 = 1, n3, i, count = 10;\n    std::cout << n1 << \" \" << n2 << \" \"; \n \n    for (i = 2; i < count; ++i) \n    {\n        n3 = n1 + n2;\n        std::cout << n3 << \" \";\n        n1 = n2;\n        n2 = n3;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Retrieve the location of the 3rd character in a given string", "input": "String: \"hello world\"", "output": "print(\"hello world\"[2]) # returns 'l'", "category": "Python"}, {"instruction": "Sum up the following two numbers", "input": "2 and 3", "output": "2 + 3 = 5", "category": "Python"}, {"instruction": "Write a SQL query to drop a column from an existing table.", "input": "Table Name: \"Customers\"\nColumn Name: \"first_name\"", "output": "ALTER TABLE Customers DROP COLUMN first_name;", "category": "Python"}, {"instruction": "Compose a query in MySQL to filter records from a table where the name contains \"John\".", "input": "", "output": "SELECT * FROM table WHERE name LIKE '%John%';", "category": "Python"}, {"instruction": "Write a script in Python that will find the average of a list of numbers.", "input": "[2.3, 6.7, 8.2, 4.3, 9.1]", "output": "import numpy as np\n\ndata = [2.3, 6.7, 8.2, 4.3, 9.1] \navg = np.mean(data)\nprint(\"Average of the list of numbers is:\", avg)", "category": "Python"}, {"instruction": "Construct a SQL query to select all records from a table called \"employees\" where the salary is greater than 8000.", "input": "", "output": "SELECT * FROM employees WHERE salary > 8000;", "category": "Python"}, {"instruction": "Show how to find the mean of three numbers in Java.", "input": "int x = 3; int y = 4; int z = 5;", "output": "public class MeanCalculator {\n    public static void main(String args[]){\n        int x = 3; int y = 4; int z = 5;\n\n        double mean = (x + y + z) / 3.0;\n        System.out.println(\"The mean of the three numbers is: \" + mean);\n    }\n}", "category": "Python"}, {"instruction": "Write an SQL query to get the employee details with the highest salary.", "input": "", "output": "SELECT * \nFROM employees \nORDER BY salary DESC \nLIMIT 1;", "category": "Python"}, {"instruction": "Classify the following words as either nouns or verbs.", "input": "walk, machine, think", "output": "Nouns: machine\nVerbs: walk, think", "category": "Python"}, {"instruction": "Write a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number.", "input": "", "output": "def Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\nfibonacci_list = []\n\nfor i in range(26):\n    fibonacci_list.append(Fibonacci(i))\n\nprint(fibonacci_list)", "category": "Python"}, {"instruction": "Parse the following text and extract all the numbers.", "input": "This text contains the numbers 10, 20, and 30.", "output": "[10, 20, 30]", "category": "Python"}, {"instruction": "Edit the following HTML page so the text appears in bold.", "input": "<html>\n  <head>\n    <title>Text Sample</title>\n  </head>\n  <body>\n    <p>This is a sample text.</p>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Text Sample</title>\n  </head>\n  <body>\n    <p><b>This is a sample text.</b></p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML page that contains the following table.", "input": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>City</th>\n  </tr>\n  <tr>\n    <td>John Doe</td>\n    <td>23</td>\n    <td>New York</td>\n  </tr>\n  <tr>\n    <td>Trish Smith</td>\n    <td>29</td>\n    <td>Philadelphia</td>\n  </tr>\n</table>", "output": "<html>\n<head>\n  <title>Table Sample</title>\n</head>\n<body>\n  <table>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>City</th>\n    </tr>\n    <tr>\n      <td>John Doe</td>\n      <td>23</td>\n      <td>New York</td>\n    </tr>\n    <tr>\n      <td>Trish Smith</td>\n      <td>29</td>\n      <td>Philadelphia</td>\n    </tr>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a content aggregator application in Python.", "input": "", "output": "import requests\nimport json \n\ndef content_aggregator():\n    api_url = \"https://www.example.com/api/\"\n    response = requests.get(api_url)\n    response_data = json.loads(response.text)\n    for item in response_data:\n        print(item)\n\nif __name__ == '__main__':\n    content_aggregator()", "category": "Python"}, {"instruction": "Convert the following JSON object to a .csv table.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 35,\n  \"job\": \"Software Engineer\"\n}", "output": "name,age,job\nJohn Doe,35,Software Engineer", "category": "Python"}, {"instruction": "Suggest code to check if an object has a given property.", "input": "object = {\n  id: 1,\n  name: 'John'\n}", "output": "object = {\n  id: 1,\n  name: 'John'\n}\n\nif('name' in object) {\n  // Do something\n}", "category": "Python"}, {"instruction": "Complete the following Node.js code to return 'true' if the input is a valid email address.", "input": "const validateEmail = email => {\n  const re =", "output": "const validateEmail = email => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};", "category": "Python"}, {"instruction": "Write a function in React to handle a form submission.", "input": "", "output": "onSubmit = e => {\n e.preventDefault();\n const formData = new FormData(e.target);\n // Do something with the form data here\n};\n\n<form onSubmit={ (e) => onSubmit(e)}>\n  <!-- Form elements go here -->\n</form>", "category": "Python"}, {"instruction": "Write a JavaScript function that multiplies two numbers together.", "input": "", "output": "function multiply(x, y) {\n  return x * y;\n}", "category": "Python"}, {"instruction": "Create a function in Java that will take an integer as a parameter and return its square root.", "input": "", "output": "public static double getSquareRoot(int number){\n    return Math.sqrt(number);\n}", "category": "Python"}, {"instruction": "Calculate the precision of the following machine learning model.", "input": "Actual = [1, 0, 0, 1, 1]\nPredicted = [1, 0, 1, 0, 0]", "output": "precision = (2 / 3)  # 2 true positives and 3 predicted positives.", "category": "Python"}, {"instruction": "Write a PHP script to check if a given string contains only letters.", "input": "", "output": "<?php\n \nfunction checkString($str) \n{ \n    if (ctype_alpha($str)) \n        return true; \n    return false; \n} \n  \n// Driver Code \n$str1 = \"HelloWorld\"; \n$str2 = \"test123\"; \n  \nif (checkString($str1)) \n    echo \"String $str1 consists of only alphabets.\"; \nelse\n    echo \"String $str1 does not consists of only alphabets.\"; \n  \nif (checkString($str2)) \n    echo \"String $str2 consists of only alphabets.\"; \nelse\n    echo \"String $str2 does not consists of only alphabets.\"; \n\n?>", "category": "Python"}, {"instruction": "Update the given code to add an extra element to the array.", "input": "array = [1,2,3]", "output": "array.append(4)", "category": "Python"}, {"instruction": "In the given code, add an if statement to check if the user's score is greater than a certain limit.", "input": "score = 67\nlimit = 70", "output": "if score > limit:\n  print(\"The user scored higher than the limit.\")", "category": "Python"}, {"instruction": "Implement a for loop that iterates for the given array and prints out the corresponding element on each iteration.", "input": "array: ['apple', 'banana', 'cherry']", "output": "for e in array:\n  print(e)", "category": "Python"}, {"instruction": "Write a function that takes two parameters and will print out the maximum of the two.", "input": "", "output": "def max_of_two(x, y):\n  if x > y:\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Compose an SQL query that returns all the rows from a given table", "input": "table: inventory", "output": "SELECT * FROM inventory;", "category": "Python"}, {"instruction": "Reverse a string in place", "input": "word = 'hello'", "output": "def reverse_string_in_place(word): \n    # Get the input string length \n    n = len(word) \n\n    # Swap character starting  \n    # from two corners \n    for i in range(n // 2): \n        word[i], word[n - i - 1] = word[n - i - 1], word[i] \n\nword = list('hello') \nreverse_string_in_place(word) \nprint(''.join(word))", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for a linked list.", "input": "link_list = [10->9->8->7->6]", "output": "class Node:\n    # initialization of node\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# bubble sort of linked_list\ndef bubble_sort(head):\n    # Store last node\n    end = None\n\n    while end != head.next:\n        p = head\n        while p.next != end:\n            q = p.next\n            if p.data > q.data:\n                p.data, q.data = q.data, p.data\n            p = p.next\n        end = p\n\n# driver code\nhead =  Node(10) \nhead.next = Node(9) \nhead.next.next = Node(8) \nhead.next.next.next = Node(7)\nhead.next.next.next.next = Node(6)\n    \nbubble_sort(head) \n<insert code to print the data of the linked list>", "category": "Python"}, {"instruction": "Suggest code to add an item to the end of a given list.", "input": "list1 = [1, 2, 3]", "output": "list1 = [1, 2, 3]\nlist1.append(4)", "category": "Python"}, {"instruction": "Find the GCD of two integers.", "input": "a = 8, b = 12", "output": "def gcd(a, b): \n\n    # Base case \n    if a == 0:\n        return b \n      \n    return gcd(b % a, a) \n  \n# Driver code\na = 8\nb = 12\nprint(\"GCD of\",a,\"and\",b,\"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Implement a function to search an element in a BST.", "input": "root:\n        5\n      /   \\\n     3     8\n    / \\   / \\\n   2   4  6   9\n\nkey: 3", "output": "def search_BST(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n# Driver Code \nroot = Node(5)\nroot.left = Node(3) \nroot.right = Node(8)\nroot.left.left = Node(2) \nroot.left.right = Node(4) \nroot.right.left = Node(6) \nroot.right.right = Node(9) \n  \nkey = 3\nnode = search_BST(root, key) \nif node:\n    print(\"Found\") \nelse: \n    print(\"Not Found\")", "category": "Python"}, {"instruction": "Construct an HTML page using valid HTML markup.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n  <title>My First HTML Page</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>This is my first HTML page.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Compose a python function to find the maximum element in a 2-dimensional array.", "input": "array = [[2, 4, 7, 1], [8, 12, 9, 5]]", "output": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for an array of integers.", "input": "arr = [34, 16, 12, 9, 5]", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Classify the following text as either positive, negative, or neutral.", "input": "\"This project was extremely difficult to complete.\"", "output": "negative", "category": "Python"}, {"instruction": "Create a React component that displays a form with two text input fields.", "input": "", "output": "import React, {Component} from 'react';\n\nclass Form extends Component{\n    constructor(){\n        super();\n        this.state={\n            firstName: '',\n            lastName: ''\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    render(){\n        return(\n            <form>\n                <label>First Name</label>\n                <input type=\"text\" name=\"firstName\" onChange={this.handleChange} value={this.state.firstName} />\n                <label>Last Name</label>\n                <input type=\"text\" name=\"lastName\" onChange={this.handleChange} value={this.state.lastName} />\n            </form>\n        );\n    }\n}\n\nexport default Form;", "category": "Python"}, {"instruction": "Find the index of the maximum value in an array of numbers in Python.", "input": "[1, 6, 2, 8, 4, 9]", "output": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(max(list))\nprint(max_index) # Output: 4", "category": "Python"}, {"instruction": "Code a function that takes a list of strings and checks if it is ordered lexicographically.", "input": "list_of_strings = ['algorithm', 'coding', 'novel']", "output": "def ordered_list(list_of_strings): \n    for i in range(len(list_of_strings) - 1): \n        if list_of_strings[i] >= list_of_strings[i+1]: \n            return False\n    return True \n  \n# Driver Code \nlist_of_strings = ['algorithm', 'coding', 'novel']\nprint(ordered_list(list_of_strings))", "category": "Python"}, {"instruction": "Generate a dictionary mapping each Keytype with a description of \"What it is\".", "input": "", "output": "dict = {\n    'Integer': 'An integer is a whole number (not a fraction) that can be positive, negative, or zero',\n    'Float': 'A float is a type of number that has a decimal point',\n    'String': 'A string is a type of data that consists of a sequence of characters',\n    'Boolean': 'A Boolean is a type of data that is either true or false',\n    'List': 'A list is a collection of elements that can be of different data types',\n    'Tuple': 'A tuple is a collection of elements that cannot be modified and has a fixed length'\n}", "category": "Python"}, {"instruction": "Update the existing code to have a shape of (3,3) when an array of size (2,2) is reshaped.", "input": "import numpy as np\n\narr = np.arange(4).reshape(2,2)", "output": "import numpy as np\n\narr = np.arange(9).reshape(3,3)", "category": "Python"}, {"instruction": "Write a single line of SQL statement to select \"name\" from \"students\" table.", "input": "", "output": "SELECT name FROM students;", "category": "Python"}, {"instruction": "In Java, write a method that reverses an array of integers.", "input": "", "output": "public static int[] reverseArray(int[] arr) \n{ \n    int[] reversed = new int[arr.length]; \n  \n    int j = 0; \n    for (int i = arr.length - 1; i >= 0; i--) {\n        reversed[j++] = arr[i]; \n    }\n  \n    return reversed; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find out the shopping category of the product with id 12345.", "input": "", "output": "SELECT category FROM products WHERE id = 12345;", "category": "Python"}, {"instruction": "Modify the following C++ code to add an else statement to handle incorrect inputs.", "input": "int main() {\n  int x;\n  cin >> x;\n  if (x == 0)\n    cout << \"x is zero\" << endl;", "output": "int main() {\n  int x;\n  cin >> x;\n  if (x == 0)\n    cout << \"x is zero\" << endl;\n  else\n    cout << \"x is not zero\" << endl;\n}", "category": "Python"}, {"instruction": "Write a Python program to verify if an integer is odd or even.", "input": "num = 8", "output": "False", "category": "Python"}, {"instruction": "Write a function to check if the sum of two given number is between a given range.", "input": "num1 = 10\nnum2 = 20\nstart = 15\nend = 25", "output": "True", "category": "Python"}, {"instruction": "Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters.", "input": "", "output": "password = DX$bf7uj3@q3", "category": "Python"}, {"instruction": "Write a Python program to print the combination of the given list.", "input": "list = [1, 2, 3]", "output": "from itertools import combinations\n\nlist1 = [1, 2, 3]\n\ncombinations = list(combinations(list1, 2))\nprint(combinations)\n\n# Output: [(1, 2), (1, 3), (2, 3)]", "category": "Python"}, {"instruction": "In Java, write a method that wraps a given string into a paragraph with each line no longer than the given number of characters.", "input": "", "output": "public static String wrapText(String text, int maxCharsPerLine) \n{ \n   // Create a StringBuilder for formulating the output \n   StringBuilder result = new StringBuilder(); \n  \n   // Break the given text into individual lines, each containing no more than maxCharsPerLine characters \n   String line = \"\"; \n   int index = 0; \n   while (index < text.length()) \n   { \n       while (index < text.length() && line.length() + text.charAt(index) <= maxCharsPerLine) { \n           line = line + text.charAt(index); \n           index++; \n       } \n  \n       result.append(line + \"\\n\"); \n  \n       // Reset line to empty \n       line = \"\"; \n   } \n  \n   return result.toString(); \n}", "category": "Python"}, {"instruction": "Create a list of 50 integers to represent a frequency chart.", "input": "", "output": "frequency_chart = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]", "category": "Python"}, {"instruction": "Implement a function to print the Fibonacci series up to the nth term.", "input": "", "output": "def FibonacciSeries(n): \n    a = 0\n    b = 1 \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Calculate the determinant of the following matrix.", "input": "[1, 3, 4],\n[5, 6, 7],\n[9, 8, 2]", "output": "The determinant of the matrix is -76.", "category": "Python"}, {"instruction": "Write a JavaScript function that returns the first 50 prime numbers.", "input": "", "output": "function getFirstFiftyPrimes(){\n  let primes = [2];\n  let num = 3;\n  \n  while(primes.length < 50){\n      let isPrime = true;\n      for(let i = 0; i < primes.length; i++){\n          if(num % primes[i] === 0){\n              isPrime = false;\n          }\n      }\n      if(isPrime)\n        primes.push(num);\n      num += 1;\n  }\n  \n  return primes;\n}", "category": "Python"}, {"instruction": "List the advantages of using a linked list over an array.", "input": "", "output": "The advantages of using a linked list over an array include:\n\n1. Insertion and deletion operations are faster since individual elements do not have to be rearranged in memory.\n2. Elements can be stored in any order, as opposed to an array which requires elements to be stored contiguously.\n3. Linked lists have an arbitrary number of elements, unlike an array which has a fixed size. \n4. Linked lists do not require the memory allocation of an entire block at once, making it suitable for dynamic memory allocation.", "category": "Python"}, {"instruction": "Parse the following HTML code and store the data in a Python dictionary.", "input": "<div><h2>Header</h2><p>Text</p></div>", "output": "data = {\n \"header\": \"Header\",\n \"text\": \"Text\"\n}", "category": "Python"}, {"instruction": "Write an SQL query to return the most frequently used keyword from the table.", "input": "Table Name: \"Keywords\"\nColumn Name: \"keyword\"", "output": "SELECT keyword, COUNT(*) as occurrence \nFROM Keywords \nGROUP BY keyword\nORDER BY occurrence DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Explain the main difference between an array and a linked list.", "input": "", "output": "The main difference between an array and a linked list is that an array stores data items contiguously in memory, while a linked list stores them in individual elements linked together with references. An array can be accessed faster than a linked list since elements can be accessed directly by their index. On another hand, inserting and deleting elements from a linked list is faster since elements don't have to be rearranged in memory like in an array. Additionally, linked lists can have an arbitrary number of elements unlike arrays which have a fixed size.", "category": "Python"}, {"instruction": "Write a C# program to filter the entities from a given array.", "input": "Array = [0, \"Apple\", 1, \"Orange\", 2, \"Banana\", 3, \"Mango\"].\nCondition = Entity should be a number", "output": "int[] entities = Array.OfType<int>().ToArray();", "category": "Python"}, {"instruction": "Compute the average value in an array of integers", "input": "[1, 2, 3, 4, 5]", "output": "def find_average(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum/len(arr)\n\narr = [1, 2, 3, 4, 5]\nprint(find_average(arr)) # 3.0", "category": "Python"}, {"instruction": "Rewrite the following SQL query in C#.", "input": "SELECT * FROM products WHERE price > 10;", "output": "using System;\nusing System.Data.SqlClient;\n\npublic void getProducts()\n{\n    using (var conn = new SqlConnection(\"connection string here\"))\n    using (var cmd = new SqlCommand(\"SELECT * FROM products WHERE price > @price\", conn))\n    {\n        cmd.Parameters.AddWithValue(\"@price\", 10);\n\n        conn.Open();\n        using (var dr = cmd.ExecuteReader())\n        {\n            // do something with the result set\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a program in Python to compute the sum of two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n  sum_nums = num1 + num2\n  return sum_nums", "category": "Python"}, {"instruction": "Suggest a suitable selector for accessing the third <li> element from the following HTML code.", "input": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>", "output": "The selector for accessing the third <li> element would be 'ul li:nth-child(3)'.", "category": "Python"}, {"instruction": "Generate a HTML table with two columns and three rows.", "input": "", "output": "<table>\n  <tr>\n    <td>Column 1</td>\n    <td>Column 2</td>\n  </tr>\n  <tr>\n    <td>row 1</td>\n    <td>row 1</td>\n  </tr>\n  <tr>\n    <td>row 2</td>\n    <td>row 2</td>\n  </tr>\n  <tr>\n    <td>row 3</td>\n    <td>row 3</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Suggest a suitable value for the missing data type.", "input": "My favorite data type is _________.", "output": "My favorite data type is string.", "category": "Python"}, {"instruction": "Complete the following Javascript code to filter out all numbers divisible by 3.", "input": "const numbers = [1,2,3,4,5,6,7,8,9];\n\nconst result =", "output": "const numbers = [1,2,3,4,5,6,7,8,9];\n\nconst result = numbers.filter(num => num % 3 !== 0);", "category": "Python"}, {"instruction": "Create a regex expression that matches strings containing four consecutive digits.", "input": "", "output": "regex_expression = \"\\\\d{4}\"", "category": "Python"}, {"instruction": "Create a function that increments a given number by 1", "input": "", "output": "def increment_by_one(n):\n    return n + 1", "category": "Python"}, {"instruction": "Write a code that can generate a list of random numbers between 0 to 100", "input": "", "output": "import random\n\n# Function to generate a list of random numbers between 0 to 100\ndef generate_random_number_list():\n  random_number_list = []\n  for i in range(0,101):\n    random_number_list.append(random.randint(0,100))\n  return random_number_list\n\n# call the function\nrandom_number_list = generate_random_number_list()\nprint(random_number_list)", "category": "Python"}, {"instruction": "Create an array of 10 randomly generated integers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_array():\n    return [random.randint(0, 10) for _ in range(10)]", "category": "Python"}, {"instruction": "Convert the list of numbers below to a numpy array.", "input": "[2, 4, 6, 8, 10]", "output": "import numpy as np \n\narr = np.array([2,4,6,8,10])", "category": "Python"}, {"instruction": "Identify the specific type of this given object:", "input": "object = {\n\"name\": \"John\",\n\"age\": 27,\n\"sex\": \"male\"\n}", "output": "The given object is a dictionary.", "category": "Python"}, {"instruction": "Edit the following code such that the output is reversed", "input": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n        result += s[i]\n    return result", "output": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n-1, -1, -1):\n        result += s[i]\n    return result", "category": "Python"}, {"instruction": "Create an R function which takes a vector of numbers as input and returns its average.", "input": "", "output": "getAvg <- function(x){\n  return(mean(x))\n}", "category": "Python"}, {"instruction": "Write a Bash script to print the sum of all even numbers between 0 and 100.", "input": "", "output": "#!/bin/bash\nsum=0\nfor(( i = 0; i <= 100; i+=2 ))\ndo\n   sum=$((sum + i))\ndone\n\necho \"The sum of even numbers between 0 and 100 is $sum\"", "category": "Python"}, {"instruction": "Classify the following code as a part of a machine learning model", "input": "The following code is for a linear regression model which predicts the estimated cost of a house based on area:\n\ndef linear_regression(x, y):\n    m = (sum(x*y) - sum(x) * sum(y) / len(x)) / (sum(x*x) - sum(x) * sum(x) / len(x))\n    b = (sum(y) - m * sum(x)) / len(x)\n    return (m, b)", "output": "This is a code for a linear regression model.", "category": "Python"}, {"instruction": "Identify the error in the following function:", "input": "Replace all spaces in a string with a given character.\n\ndef replace_space (original_string, character):\nnew_string = original_string.replace( \" \", character )\nreturn new_string", "output": "The code is correct. There is no error.", "category": "Python"}, {"instruction": "Write an SQL query with an inner join clause.", "input": "Table 1: users (user_id, name, age)\nTable 2: orders (user_id, order_date)", "output": "SELECT users.name, users.age, orders.order_date\nFROM users\nINNER JOIN orders ON users.user_id = orders.user_id", "category": "Python"}, {"instruction": "Create a data frame in R with 3 columns and 10 rows of randomly generated numerical data.", "input": "", "output": "dataFrame <- data.frame(V1 = sample(1:100, 10, replace=FALSE), V2 = sample(1:100, 10, replace=FALSE), V3 = sample(1:100, 10, replace=FALSE))", "category": "Python"}, {"instruction": "Parse the JSON string and convert it into an object.", "input": "{\"name\" : \"John\", \"Age\" : 25}", "output": "import json\n\ndef convert_to_object(data):\n    json_obj = json.loads(data)\n    return json_obj\n    \ndata = '{\"name\":\"John\", \"age\": 25}'\nobj = convert_to_object(data)\n\nprint(obj['name']) #John\nprint(obj['age']) #25", "category": "Python"}, {"instruction": "Output the first 10 numbers in the Fibonacci series.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \nfor i in range(10):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Generate a unique alphanumeric string of length 5.", "input": "", "output": "def generate_string():\n    import string\n    import random\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range(5))", "category": "Python"}, {"instruction": "Create a variable called ``new_list`` that contains all elements from the list ``old_list`` which are greater than 5.", "input": "old_list = [2, 3, 5, 7, 9]", "output": "old_list = [2, 3, 5, 7, 9]\nnew_list = []\nfor i in old_list: \n    if i > 5:\n        new_list.append(i)", "category": "Python"}, {"instruction": "How do you declare an array of pointers to integers in C?", "input": "", "output": "int *array[length];", "category": "Python"}, {"instruction": "Given a string, write a program to reverse the words in the string.", "input": "", "output": "def reverse_words(s):\n   return ' '.join(s.split()[::-1])", "category": "Python"}, {"instruction": "Edit this SQL query to include an order by clause:", "input": "SELECT * FROM Employees", "output": "SELECT * FROM Employees ORDER BY Salary ASC;", "category": "Python"}, {"instruction": "What does the C++ keyword 'extern' do?", "input": "", "output": "The keyword extern in C++ is used to extend the visibility of a variable or a function declaration to other files in the same project. It is often used to declare a variable or a function that has been defined in another file.", "category": "Python"}, {"instruction": "Write an SQL query to get the records with salary higher than 2000.", "input": "", "output": "SELECT * FROM Employees WHERE Salary > 2000;", "category": "Python"}, {"instruction": "What is the syntax for an SQL Inner Join statement?", "input": "", "output": "SELECT column_name(s)\nFROM table1\nINNER JOIN table2\nON table1.column_name=table2.column_name;", "category": "Python"}, {"instruction": "Create a class in Java to store student information such as name, age, and course.", "input": "", "output": "public class Student {\n    private String name;\n    private int age;\n    private String course;\n\n    public Student(String name, int age, String course) {\n        this.name = name;\n        this.age = age;\n        this.course = course;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getCourse() {\n        return course;\n    }\n}", "category": "Python"}, {"instruction": "What is the correct way to define a method in Java?", "input": "", "output": "The correct way to define a method in Java is to use the following syntax:\nmodifier returnType methodName(parameter_list) {\n//method body\n}", "category": "Python"}, {"instruction": "Edit the following code to output Hello World", "input": "<ar>print(\"Hello\")</ar>", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "What are the steps to create a constructor in Java?", "input": "", "output": "The steps to create a constructor in Java are:\n1. Declare a constructor with a unique name which matches the name of the class.\n2. Make sure that the constructor has the same access modifier as the class.\n3. Constructor parameters should align with instance variables\n4. Initialize the instance variables in the body of the constructor.\n5. Constructor can call other constructors using this() statement.\n6. Constructor should include a return statement incase of returning a value.", "category": "Python"}, {"instruction": "How would you create a 2-dimensional array in JavaScript?", "input": "", "output": "var myArray = [[], []];", "category": "Python"}, {"instruction": "How would you find the frequency of each character in a string using JavaScript?", "input": "string = \"Hello World\"", "output": "function getCharacterFrequencies(string) {\n    let charMap = {};\n    for (let char of string) { \n        charMap[char] = charMap[char] + 1 || 1; \n    }\n    return charMap;\n}", "category": "Python"}, {"instruction": "Sum up all the elements in a given array.", "input": "a = [7, 2, 5, 8]", "output": "The sum of the elements in the array is 22.", "category": "Python"}, {"instruction": "What is the output of the following code if the input is a = [3, 5, 2, 4, 9]:", "input": "a = [3, 5, 2, 4, 9]", "output": "The output will be [2, 3, 4, 5, 9] as it will sort the list in ascending order.", "category": "Python"}, {"instruction": "Suggest a solution to make the following code work correctly.", "input": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        sum += n\n    return sum", "output": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        if isinstance(n, (int, float)):\n            sum += n\n    return sum", "category": "Python"}, {"instruction": "Write a C# code that creates a new array with all the elements of the original array multiplied by 2.", "input": "", "output": "int[] OriginalArray = {1, 2, 3};\n\nint[] MultiplyBy2 = OriginalArray.Select(x => x * 2).ToArray();", "category": "Python"}, {"instruction": "Suggest some changes to the following code that will reduce the runtime complexity.", "input": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "output": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Suggest an efficient way to find the longest word in a string.", "input": "", "output": "The most efficient way to find the longest word in a string is to use the split() method to convert the string into a list of words, then use the max() method to find the longest word in the list. For example:\n\nstring = \"The quickest way to find the longest word\"\nlongest_word = max(string.split(), key=len)", "category": "Python"}, {"instruction": "Write a regex pattern to match strings with a word length of 5 characters.", "input": "", "output": "\\b\\w{5}\\b", "category": "Python"}, {"instruction": "Refactor the following code to make it more optimized.", "input": "def sum(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total", "output": "def sum(numbers):\n    return sum(numbers)", "category": "Python"}, {"instruction": "Write a SQL query to return the first name, last name, and number of orders for customers who have ordered more than two items.", "input": "SELECT first_name , last_name, COUNT(*) \nFROM customers \nJOIN orders \nON customers.id = orders.customer_id \nGROUP BY customer_id \nHAVING COUNT(*) > 2", "output": "SELECT c.first_name, c.last_name, COUNT(*)\nFROM customers c\nJOIN orders o\nON c.id = o.customer_id\nGROUP BY c.id\nHAVING COUNT(*) > 2", "category": "Python"}, {"instruction": "Print out the multiplication table of 6.", "input": "", "output": "for i in range(1, 11):\n    print(f\"6 x {i} = {6 * i}\")", "category": "Python"}, {"instruction": "Given a list of strings, create a function to convert all of the strings into uppercase.", "input": "", "output": "def to_uppercase(str_list):\n    return [s.upper() for s in str_list]", "category": "Python"}, {"instruction": "Write a C# code that implements a simple event listener.", "input": "", "output": "using System;\n \npublic class EventListener\n{\n     public delegate void EventListenerHandler(object sender, EventArgs e);\n     public event EventListenerHandler SomeEvent;\n \n     public void OnSomeEvent(EventArgs e)\n     {\n          if (SomeEvent != null)\n          {\n               SomeEvent(this, e);\n          }\n     }\n}", "category": "Python"}, {"instruction": "Create a GraphQL query for fetching the total number of post titles in a blog.", "input": "", "output": "query getTitlesCount {\n  blog {\n    posts {\n      title\n    }\n    titlesCount: postsCount\n  }\n}", "category": "Python"}, {"instruction": "Use a for loop to sum all the elements in an array.", "input": "myArr = [2, 5, 8, 11]", "output": "def Sum_list(list): \n    sum = 0\n    for i in range(len(list)):\n        sum += list[i] \n    return sum \n\nmyArr = [2, 5, 8, 11]\nprint(Sum_list(myArr))", "category": "Python"}, {"instruction": "Create an algorithm for finding the largest number in a list.", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Write a MySQL query to create a table called \"students\" with the following columns: id, name, and grade.", "input": "", "output": "CREATE TABLE Students (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(100) NOT NULL,\n  grade INT NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Create a function that takes in two integers and returns the greatest common divisor (g.c.d).", "input": "", "output": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a boolean indicating whether or not the string contains the letter \"u\".", "input": "", "output": "def contains_letter_u(str):\n    for char in str:\n        if char == 'u':\n            return True\n    return False", "category": "Python"}, {"instruction": "Create an HTML web page that has a \"Hello World!\" heading.", "input": "", "output": "<!doctype html>\n<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an algorithm to detect if a linked list contains a cycle.", "input": "", "output": "def has_cycle(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function which takes in an array and returns a list of all the elements which appear only once in the array.", "input": "", "output": "def find_unique_elements(arr):\n    unique_elements = []\n    for elem in arr:\n        if arr.count(elem) == 1:\n            unique_elements.append(elem)\n    return unique_elements", "category": "Python"}, {"instruction": "Create a function which takes two strings and compares them to see if they are anagrams of each other.", "input": "", "output": "def isAnagram(str1, str2):\n    list1 = sorted(str1.lower())\n    list2 = sorted(str2.lower())\n    if list1 == list2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Change the following HTML element to have 2 classes: \"class1\" and \"class2\".", "input": "<div id=\"container\">", "output": "<div id=\"container\" class=\"class1 class2\">", "category": "Python"}, {"instruction": "Write a code that takes an array of integer as argument and returns the sum of the array elements.", "input": "", "output": "function arraySum(arr) { \n    var sum = 0; \n    for (var i = 0; i < arr.length; i++) \n        sum += arr[i]; \n    return sum; \n}", "category": "Python"}, {"instruction": "Use an if statement to determine if a number is negative or positive.", "input": "number = -5", "output": "if number < 0: \n    print(\"The number is negative.\") \nelse: \n    print(\"The number is positive.\")", "category": "Python"}, {"instruction": "Create a Java program to generate and print Fibonacci series of a given size.", "input": "Size: 8", "output": "public class FibonacciSeries \n{ \n    public static void main(String[] args) \n    { \n        int n = 8; \n        int f1 = 0, f2 = 1; \n  \n        System.out.print(\"The Fibonacci series of size \"+n+\" is : \"); \n        for (int i = 1; i <= n; i++) \n        { \n            System.out.print(f1 + \" \"); \n            int next = f1 + f2; \n            f1 = f2; \n            f2 = next; \n        } \n    } \n}", "category": "Python"}, {"instruction": "Calculate the number of substrings possible with the given string.", "input": "\"welcome\"", "output": "Algorithm to calculate the number of substrings possible with the given string S:\n\n1. Initialize a variable result to 0.\n2. Iterate through the string S, for each iteration n, calculate the number of possible substrings from 0 to n.\n3. Add the number of possible substrings to the result. \n4. Return the result once all iterations of the string S have been done.", "category": "Python"}, {"instruction": "Sort an array A of integers in ascending order without using any pre-defined sorting functions.", "input": "[23, 1, 32, 15, 40]", "output": "Algorithm to sort an array A of integers in ascending order without using any pre-defined sorting functions:\n\n1. Initialize a variable swapped to false.\n2. Iterate through the array A, compare each pair of adjacent elements and swap them if they are not in ascending order.\n3. After each iteration, if a swap has occurred, set swapped to true, otherwise set it to false.\n4. Repeat step 2 and 3 until swapped is false.", "category": "Python"}, {"instruction": "Create an algorithm to detect if an array A contains duplicates.", "input": "", "output": "Algorithm to detect duplicate elements in an array A:\n\n1. Initialize a hash set set to store the elements of array A.\n2. Iterate through the array A, if the element is already present in the set, return True. Otherwise add the element to the set.\n3. Return False once all the elements have been iterated through.", "category": "Python"}, {"instruction": "Write a Python script to remove all the elements with value 3 from the following list.", "input": "[1, 2, 3, 4, 3, 5, 3]", "output": "my_list = [1, 2, 3, 4, 3, 5, 3]\n\nfiltered_list = [number for number in my_list if number != 3]", "category": "Python"}, {"instruction": "How would you capitalize the first letter of a string in JavaScript?", "input": "", "output": "function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}", "category": "Python"}, {"instruction": "Sort the following array in ascending order using insertion sort in JavaScript.", "input": "[7, 2, 5, 3, 8]", "output": "function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let currentVal = arr[i];\n    for (var j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\n      arr[j + 1] = arr[j];\n    }\n    arr[j + 1] = currentVal;\n  }\n  return arr;\n}\n\n// Test\nlet arr = [7, 2, 5, 3, 8];\ninsertionSort(arr);\n// [2, 3, 5, 7, 8]", "category": "Python"}, {"instruction": "How would you create a new array with only the positive numbers from the following array in Python?", "input": "[-2, -5, 3, 6, 0, -3]", "output": "arr = [-2,-5,3,6,0,-3]\n\npos_arr = [num for num in arr if num >= 0]", "category": "Python"}, {"instruction": "What is the correct syntax for selecting an element by id in CSS?", "input": "", "output": "#myElement {\n   // style rules\n}", "category": "Python"}, {"instruction": "Write a JQuery code snippet to select all the input elements with class \"input-element\".", "input": "", "output": "$(document).ready(function() {\n    $('input.input-element').each(function() {\n        // Do stuff\n    });\n});", "category": "Python"}, {"instruction": "Select the correct method to find the length of a string in JavaScript.", "input": "", "output": "var myString = \"Hello World!\";\nvar stringLength = myString.length;", "category": "Python"}, {"instruction": "Create a class in Python named ``Rectangle`` with two attributes length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "Create a cryptography program that computes the factorial of a given number.", "input": "num = 5", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nif __name__ == '__main__':\n    num = 5\n    result = factorial(num)\n    print(result)", "category": "Python"}, {"instruction": "Given a linked list, remove all elements from it which have greater value than a given number X.", "input": "head = [7, 14, 28, 21, 32]\nvalue = 21", "output": "class node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\n\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\n\nif __name__ == '__main__':\n    head = node(7)\n    head.next = node(14)\n    head.next.next = node(28)\n    head.next.next.next = node(21)\n    head.next.next.next.next = node(32)\n\n    result = removeGreater(head, 21)\n    while result:\n        print(result.data, end=\" \")\n        result= result.next", "category": "Python"}, {"instruction": "Find a way to generate all the unique permutations for a given string.", "input": "s = 'ABC'", "output": "def permutation(str): \n    if len(str) == 0: \n        return [] \n    if len(str) == 1: \n        return [str]  \n    l = []  \n    for i in range(len(str)): \n       m = str[i]  \n       remLst = str[:i] + str[i+1:]  \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n\nif __name__== \"__main__\":\n    s = 'ABC'\n    perms = permutation(s)\n    for p in perms:\n        print(''.join(p))", "category": "Python"}, {"instruction": "Write a function to check if a number is a power of 2.", "input": "num = 8", "output": "def isPowerOfTwo(num): \n    if (num == 0): \n        return False\n  \n    while (num != 1): \n        if (num % 2 != 0): \n            return False\n        num = num // 2\n              \n    return True\n  \n# Driver code \nif __name__=='__main__':\n    num = 8\n    if(isPowerOfTwo(num)): \n        print('Yes') \n    else: \n        print('No')", "category": "Python"}, {"instruction": "Suggest a modification to the following python code to make it efficient.", "input": "def median(my_list):\n\thalf = len(my_list)//2\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]", "output": "def median(my_list):\n\thalf = len(my_list)//2\n\tmy_list.sort()\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]\n\nThe suggested modification is to add a sorting step to the code before finding the median index. This will ensure the list is always in order and the median index can be found in an efficient manner.", "category": "Python"}, {"instruction": "How can you optimize the following code snippet?", "input": "for (int i = 0; i < n; i++)\n    for (int j = 0; j < n; j++)", "output": "A nested loop can be optimized by moving out common calculations from the inner loop. In this example, the loop can be optimized by replacing the two nested loops with a single loop of length n^2.\n\n for (int i = 0; i < n*n; i++) \n { \n     int row = i/n \n     int col = i%n \n     // your operations \n }", "category": "Python"}, {"instruction": "Edit the given SQL query to make it efficient.", "input": "SELECT * FROM table1, table2 \nWHERE table1.id = table2.id", "output": "SELECT * FROM table1 \nINNER JOIN table2 \nON table1.id = table2.id\n\nThe suggested modification is to replace the two-table join with an inner join. This will be more efficient as it reduces the number of cartesian products which have to be computed.", "category": "Python"}, {"instruction": "Implement an algorithm to remove duplicates from a linked list.", "input": "", "output": "Algorithm to remove duplicate elements from a linked list:\n\n1. Initialize a hash set to store the unique elements of the linked list.\n2. Iterate through the linked list, if the element is not present in the hash set, add it to the set.\n3. Else, remove the element from the linked list.\n4. Return the modified list once all the elements have been iterated through.", "category": "Python"}, {"instruction": "Create a program that adds up 11 numbers.", "input": "11 numbers: 3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20", "output": "# defining a function  \ndef add_ele(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n# Driver code \nnumbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]\nprint(add_ele(numbers))", "category": "Python"}, {"instruction": "Create a function to find the larger number in a given list.", "input": "myList = [18, 24, 34, 30]", "output": "def larger_num(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \nmyList = [18, 24, 34, 30]\nprint(larger_num(myList))", "category": "Python"}, {"instruction": "Output the contents of a list in a comma-separated string.", "input": "myList = [14, 19, 22, 27, 30]", "output": "def list_to_string(myList): \n    # initialize an empty string \n    string = \"\" \n  \n    # traverse in the string  \n    for ele in myList:\n        string += str(ele) +\",\"\n  \n    # return result string  \n    return string\n  \n# Driver code \nmyList = [14, 19, 22, 27, 30]\nprint(list_to_string(myList))", "category": "Python"}, {"instruction": "Create a program that prints the first 10 positive integers in reverse order.", "input": "", "output": "for i in range(9, 0, -1): \n    print(i+1, end = \" \")", "category": "Python"}, {"instruction": "Create a Python code that takes two strings and combine them into a single string.", "input": "str1 = \"Hello\"\nstr2 = \"World\"", "output": "combinedString = str1 + ' ' + str2\nprint(combinedString) # Hello World", "category": "Python"}, {"instruction": "Create an HTML page that prints \"Hello World!\" and displays the examples using a font size of 8px.", "input": "", "output": "<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <p style=\"font-size: 8px;\">Hello World!</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Remove all of the elements from a given array that are divisible by 5.", "input": "let arr = [5, 15, 25, 35, 45, 55];", "output": "let filteredArr = arr.filter(num => num % 5 !== 0);\nconsole.log(filteredArr); // [15, 25, 35, 45]", "category": "Python"}, {"instruction": "Create a program that reads user inputs and stores them in a list.", "input": "", "output": "# Initializing empty list \nmyList = [] \n  \n# running infinity loop \nwhile True:     \n    # Input from user \n    ele = input(\"Enter any Element: \") \n      \n    # insert the element \n    myList.append(ele) \n  \n    # Output after adding the element \n    print(\"Updated list: \", str(myList))", "category": "Python"}, {"instruction": "Ask the user to enter a number, then generate a random number between the user input and 100.", "input": "User Input: 24", "output": "let userNumber = parseInt(prompt(\"Please enter a number:\"));\nlet randomNumber = Math.floor(Math.random() * (100 - userNumber + 1)) + userNumber; \nconsole.log(randomNumber);", "category": "Python"}, {"instruction": "Create a function that takes two parameters, an array and an element, and checks if the element exists in the array.", "input": "let arr = [1, 2, 3, 4, 5];\nlet element = 7;", "output": "function checkElement(arr, element) {\n    if (arr.indexOf(element) === -1) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(checkElement(arr, element)); // false", "category": "Python"}, {"instruction": "Create a function to sort an array of objects by the property 'name' in ascending order.", "input": "const array = [\n  {name: 'Bob', age: 25},\n  {name: 'Alice', age: 19},\n  {name: 'John', age: 30},\n  {name: 'Ben', age: 27}\n];", "output": "function sortByName(array) {\n    array.sort(function(a, b) {\n      var nameA = a.name.toUpperCase();\n      var nameB = b.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n    return array;\n}\nconsole.log(sortByName(array));", "category": "Python"}, {"instruction": "Convert an array of 12 integers which are between 0 to 255 into a string.", "input": "[105, 152, 85, 248, 0, 248, 88, 88, 105, 133, 233, 240]", "output": "String.fromCharCode(105, 152, 85, 248, 0, 248, 88, 88, 105, 133, 233, 240);", "category": "Python"}, {"instruction": "Generate a program that identifies the type of triangle formed by the three given sides.", "input": "side1 = 4\nside2 = 4\nside3 = 5", "output": "if side1 == side2 and side2 == side3:\n    print(\"Equilateral Triangle\")\nelif side1 == side2 or side2 == side3 or side1 == side3:\n    print(\"Isosceles Triangle\")\nelif side1 != side2 and side2 != side3 and side1 != side3:\n    print(\"Scalene Triangle\")", "category": "Python"}, {"instruction": "Create a boolean expression that returns true if the value of the parameter 'x' is five or larger.", "input": "x = 5", "output": "x >= 5", "category": "Python"}, {"instruction": "Use the following code, and write a script to print out all the numbers from 1-50 that are divisible by 7.", "input": "for i in range(1, 50):", "output": "for number in range(1, 50):\n    if number % 7 == 0:\n        print(number)", "category": "Python"}, {"instruction": "Solve the following equation for x.", "input": "3x + 4 = 10", "output": "x = (10 - 4) / 3 \n\nx = 2", "category": "Python"}, {"instruction": "Write a code to find the first non-duplicate character in a given string.", "input": "var s = \"apple\";", "output": "function findFirstNonDuplicateChar(s) {\n  var character = '';\n  var checker = {};\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (checker[char]) {\n      checker[char]++;\n    } else {\n      checker[char] = 1;\n    }\n  }\n  for (var i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (checker[char] === 1) {\n      character = char;\n      break;\n    }\n  }\n  return character;\n}\n\nconsole.log(findFirstNonDuplicateChar(s)); // p", "category": "Python"}, {"instruction": "Given an array of integers and an integer, return true if any two integers in the array add up to the given integer.", "input": "arr = [1, 2, 3, 4]\nsum = 7", "output": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")", "category": "Python"}, {"instruction": "Write a function to convert decimal number to binary number.", "input": "", "output": "def decimalToBinary(num):\n    if num > 1:\n        decimalToBinary(num // 2)\n    return num % 2", "category": "Python"}, {"instruction": "Compare two strings and find which one is lexicographically greater.", "input": "String 1: \"apple\"\nString 2: \"banana\"", "output": "if string1 > string2:\n    print(\"String 1 is lexicographically greater\")\nelse:\n    print(\"String 2 is lexicographically greater\")", "category": "Python"}, {"instruction": "Create a Python script to print the first N numbers of the Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    # make a list of the first n numbers in the Fibonacci series\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    \n    # print out the list\n    for number in fibonacci:\n        print(number)", "category": "Python"}, {"instruction": "Design a function that takes in a list of numbers and returns a dictionary with the frequency of each element.", "input": "", "output": "def element_frequency(arr):\n    # use a dictionary to store the frequency of each element\n    frequency = {}\n\n    # loop through the list and keep a count of each element\n    for elem in arr:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n\n    return frequency", "category": "Python"}, {"instruction": "Create a Python script to delete all the even numbers in the original list.", "input": "", "output": "# function to delete all the even numbers in the original list\ndef remove_even_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}, {"instruction": "From the input list, create a dictionary containing only key-value pairs for even integers.", "input": "[4, 7, 9, 10, 16, 18]", "output": "# function to create a dictionary containing only key-value pairs for even integers\ndef even_dict(arr):\n    return {i : i for i in arr if i % 2 == 0}", "category": "Python"}, {"instruction": "Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original.", "input": "", "output": "def get_odd_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}, {"instruction": "Create a python function that takes in a list and returns a new list with all the even elements of the original list.", "input": "", "output": "def get_even_elements(arr):\n    return [num for num in arr if num % 2 == 0]", "category": "Python"}, {"instruction": "From the input text, create a dictionary that contains the count of the most frequent words.", "input": "The quick brown fox jumped over the lazy dog.", "output": "from collections import Counter\n\ndef most_frequent_words(text):\n    word_list = text.split()\n    word_counts = Counter(word_list)\n    return word_counts.most_common()", "category": "Python"}, {"instruction": "Design a Python class to represent a Triangle and its properties, such as area, perimeter, and angles.", "input": "", "output": "class Triangle:\n    def __init__(self, side_a, side_b, side_c):\n        self.side_a = side_a\n        self.side_b = side_b\n        self.side_c = side_c\n\n    def get_area(self):\n        s = (self.side_a+self.side_b+self.side_c)/2\n        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5\n\n    def get_perimeter(self):\n        return self.side_a + self.side_b + self.side_c\n\n    def get_angles(self):\n        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)\n        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)\n        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)\n        return [a, b, c]", "category": "Python"}, {"instruction": "Create a MySQL query to find the total number of employees in the department 'Engineering'.", "input": "", "output": "SELECT COUNT(*) \nFROM employees\nWHERE department = 'Engineering';", "category": "Python"}, {"instruction": "Design a Python class to represent a student and their GPA.", "input": "", "output": "class Student:\n\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\n    def get_name(self):\n        return self.name\n\n    def get_gpa(self):\n        return self.gpa", "category": "Python"}, {"instruction": "Code a SQL query to display the full names of all employees whose email address ends with \"@example.com\".", "input": "", "output": "SELECT CONCAT(employee_first_name, ' ', employee_last_name) \nFROM employees \nWHERE email LIKE '%@example.com';", "category": "Python"}, {"instruction": "Code a JavaScript function to calculate the area of a rectangle, given its length and width.", "input": "length:  5\nwidth:  10", "output": "function calculateArea(length, width) {\n  return length * width;\n}\nconsole.log(calculateArea(5, 10));  // Output: 50", "category": "Python"}, {"instruction": "Write a function that takes a list of numbers and returns their sum.", "input": "", "output": "def sum_list(list_nums):\n  total = 0\n  for num in list_nums:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Edit the following code to make it work in Python 3.", "input": "# Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")", "output": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")", "category": "Python"}, {"instruction": "Find the most frequently used character in the following string.", "input": "str = \u201cHello, world!\u201d", "output": "The character 'l' is the most frequently used character in the given string.", "category": "Python"}, {"instruction": "Create a python class to manage a sports team.", "input": "", "output": "# define a class to manage a sports team\nclass SportsTeam:\n    def __init__(self, name):\n        # store the team name\n        self.name = name\n        # create an empty list for team members\n        self.team_members = []\n\n    # create a method to add a new player to the team\n    def add_player(self, player_name):\n        if player_name not in self.team_members:\n            self.team_members.append(player_name)\n    \n    # create a method to remove a player from the team\n    def remove_player(self, player_name):\n        if player_name in self.team_members:\n            self.team_members.remove(player_name)", "category": "Python"}, {"instruction": "Convert the following code to efficiently use list comprehensions.", "input": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    result = []\n    for num in range(1, n+1):\n        result.append(num ** 3)\n    return result", "output": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    return [num ** 3 for num in range(1, n+1)]", "category": "Python"}, {"instruction": "What is the meaning of the term \u201cvariable\u201d in programming?", "input": "", "output": "In programming, a variable is a symbolic name for a value that can change over the course of a program. It usually refers to a memory location where a whole value is stored. It can also refer to an expression that produces a value. Variables can store different values of different types, such as integers, floats, strings, and Booleans.", "category": "Python"}, {"instruction": "Reverse the following string using a Python program", "input": "\"Hello World!\"", "output": "def reverse_string(str):\n  return str[::-1]\n\nreverse_string('Hello World!') # output: '!dlroW olleH'", "category": "Python"}, {"instruction": "Replace all occurrences of a letter in a given string with another letter.", "input": "String: \"hello world\"\nReplace: \"e\"\nWith: \"a\"", "output": "def replace_letter(string, replace, with):\n    return string.replace(replace, with)", "category": "Python"}, {"instruction": "Using the input list, generate a random permutation of the given list.", "input": "[1, 2, 3, 4, 5]", "output": "import random\ndef get_random_permutation(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "Given an array of integers find the index of the element that appears an odd number of times.", "input": "[2, 3, 2, 4, 5, 3]", "output": "def find_odd_element(arr):\n    elements = set()\n    for x in arr:\n        if x in elements:\n            elements.remove(x)\n        else:\n            elements.add(x)\n    return arr.index(list(elements)[0])", "category": "Python"}, {"instruction": "Find the indices of the all occurrence of a specified element in an array.", "input": "Array: [2, 3, 2, 4, 5]\nElement: 2", "output": "def find_element(arr, element):\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == element:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Implement the Quick Sort algorithm with a list of numbers.", "input": "[2, 5, 4, 1, 6, 2, 9, 3]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n            equal.append(x)\n    return quicksort(left) + equal + quicksort(right)", "category": "Python"}, {"instruction": "Create a database table that contains an id, email, first name and last name column.", "input": "", "output": "CREATE TABLE users(\n    id INT PRIMARY KEY,\n    email VARCHAR(255) NOT NULL,\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Write a JavaScript program that logs to the console a random number between 0 and 10.", "input": "", "output": "var randomNumber = Math.floor(Math.random()*11);\nconsole.log(randomNumber);", "category": "Python"}, {"instruction": "Explain what is mean by Object-oriented programming (OOP)", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to organize and structure the code of a program. It is focused on the data that is being manipulated by the program, rather than the logic of the program. OOP utilizes concepts like inheritance, encapsulation, abstraction, and polymorphism to increase the modularity, readability, and reusability of code.", "category": "Python"}, {"instruction": "Write a function in C++ that takes two integers as input, and outputs the greatest common divisor (GCD) of the two integers.", "input": "", "output": "int gcd(int a, int b) { \n    if (b == 0) \n        return a; \n    return gcd(b, a % b); \n}", "category": "Python"}, {"instruction": "What is the purpose of neural networks?", "input": "", "output": "The purpose of neural networks is to recognize patterns in data and make predictions or decisions based on those patterns. Neural networks are an approach to artificial intelligence, modeled after the neural networks in the human brain. They allow computers to learn by processing large amounts of data and identifying patterns and trends in it.", "category": "Python"}, {"instruction": "Replace all occurrences of \u2018x\u2019 with \u2018y\u2019 in the following string.", "input": "sentence = \"This is x a sentence x with x many x x'x.", "output": "sentence = sentence.replace('x', 'y')  # output: This is y a sentence y with y many y y'y.", "category": "Python"}, {"instruction": "Explain what is Closure in Python Programming?", "input": "", "output": "In Python, a closure is a higher order function (a function that takes one or more functions as arguments or returns a function) that allows a function to remember or access the variables or arguments of the enclosing scope\u2014even after the execution of the outer function has finished. A closure is created when a nested function is defined, and an inner function remembers the variables of its enclosing scope even after the execution of the outer function has finished.", "category": "Python"}, {"instruction": "Given two sets, setA and setB, write a function to find the intersection of both sets.", "input": "setA = {1, 2, 3, 4, 5}\nsetB = {4, 5, 6, 7, 8}", "output": "def intersection(setA, setB):\n    return [x for x in setA if x in setB] # output: {4, 5}", "category": "Python"}, {"instruction": "What is the syntax to comment out a single line in C++?", "input": "", "output": "In C++, a single line comment can be written by using two consecutive forward slashes at the beginning of a line, e.g. // This is a single line comment.", "category": "Python"}, {"instruction": "Write a function to find all the prime numbers from 2 to n (where n is a given input).", "input": "", "output": "def find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                break\n            \n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Given an array of integers, write a function to sum all the integers in the array.", "input": "", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Write a code that takes a string and an integer as arguments and returns the number of words in the string that are of the provided length.", "input": "String: \"Hello World\"\nLength: 5", "output": "def wordCountByLength(string, length):\n    words = string.split()\n    return sum(1 for word in words if len(word) == length)", "category": "Python"}, {"instruction": "Write an SQL query to find the name of the oldest person in a table containing people's name and age.", "input": "", "output": "SELECT name FROM people\nORDER BY age DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Generate a list of 20 strings containing random characters of length 10.", "input": "", "output": "['Kj9F7VAl1q', '28jVYbueph', 'f7VZRif5uP', '2jf5CHXyt7', '3qBtyKjDIY', 'hE5wrRmIP6', 'V7jQcfhIBz', 'UQy6gCwPa5', '6Ujpu7NfMk', 'Z6DFhBoK8e', 'DIFpjgrhT7', 'TzdGsvhRO2', '1Kv4RyZoF8', 'RKjUXviPca', 'yO2PCtEjx1', 'qchomMdP9X', '9ydNHCaTZX', 'TFrhYdgSjp', 'BYeH12I4th', '4XNgJfKCAd']", "category": "Python"}, {"instruction": "Create a function to categorize a given array of numbers into prime and composite numbers.", "input": "arr = [2, 5, 7, 11, 17, 21, 25]", "output": "def is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n\ndef categorize_numbers(arr):\n    prime_nums = []\n    composite_nums = []\n    for number in arr:\n        if is_prime(number):\n            prime_nums.append(number)\n        else:\n            composite_nums.append(number)\n    return prime_nums, composite_nums\n    \nprime_nums, composite_nums = categorize_numbers(arr)\nprint(\"Prime numbers in arr:\", prime_nums)\nprint(\"Composite numbers in arr:\", composite_nums)", "category": "Python"}, {"instruction": "Design a class to convert a given string to Morse code and store it as a list.", "input": "", "output": "class MorseCodeConverter:\n    def __init__(self, string):\n        self.string = string\n        self.alphabet = {\n            'a': '.-',\n            'b': '-...',\n            'c': '-.-.',\n            'd': '-..',\n            'e': '.',\n            'f': '..-.',\n            'g': '--.',\n            'h': '....',\n            'i': '..',\n            'j': '.---',\n            'k': '-.-',\n            'l': '.-..',\n            'm': '--',\n            'n': '-.',\n            'o': '---',\n            'p': '.--.',\n            'q': '--.-',\n            'r': '.-.',\n            's': '...',\n            't': '-',\n            'u': '..-',\n            'v': '...-',\n            'w': '.--',\n            'x': '-..-',\n            'y': '-.--',\n            'z': '--..',\n            '1': '.----',\n            '2': '..---',\n            '3': '...--',\n            '4': '....-',\n            '5': '.....',\n            '6': '-....',\n            '7': '--...',\n            '8': '---..',\n            '9': '----.',\n            '0': '-----'\n        }\n    \n    def convert(self):\n        morse_code = []\n        for char in self.string:\n            if char in self.alphabet:\n                morse_code.append(self.alphabet[char])\n        return morse_code", "category": "Python"}, {"instruction": "Write a code to create an object using a class constructor having attributes given in a dictionary.", "input": "attributes = {'name': 'John', 'age': 20, 'gender': 'M', 'hobbies': ['books', 'sports']}", "output": "class Person:\n  def __init__(self, attributes):\n    self.name = attributes['name']\n    self.age = attributes['age']\n    self.gender = attributes['gender']\n    self.hobbies = attributes['hobbies']\n    \nperson = Person(attributes)", "category": "Python"}, {"instruction": "Create a function to reversed an array in place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n    return arr\n\nprint(reverse_array(arr))", "category": "Python"}, {"instruction": "Create a class for a grocery item with attributes for item name, quantity and price.", "input": "", "output": "class GroceryItem:\n  def __init__(self, name, quantity, price):\n    self.name = name\n    self.quantity = quantity\n    self.price = price\n  \n  def total_price(self):\n    return self.quantity * self.price", "category": "Python"}, {"instruction": "Write a code to generate a random 8 character string containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string(length):\n  return ''.join(random.choices(string.ascii_lowercase, k=length))\n\nrandom_string = generate_random_string(8)\nprint(\"Random 8-character string:\", random_string)", "category": "Python"}, {"instruction": "Using a REST API, write a code to retrieve the current temperature in New York City.", "input": "", "output": "import requests\n\n# Get JSON response\nresponse = requests.get(\"http://api.openweathermap.org/data/2.5/weather?q=New+York,us&appid=YOUR_API_KEY\")\ndata = response.json()\n\n# Get current temperature in C\ncurr_temprature = data[\"main\"][\"temp\"]\ncurr_temprature = round(curr_temprature - 273.15, 2)\n\nprint(\"Current Temperature in New York City is:\", curr_temprature, \"C\")", "category": "Python"}, {"instruction": "Create a function to count how many vowels are in a given string.", "input": "", "output": "def count_vowels(string):\n  vowels = \"aeiou\"\n  count = 0\n  \n  for char in string:\n    if char in vowels:\n      count += 1\n      \n  return count", "category": "Python"}, {"instruction": "Is a string immutable in Python?", "input": "", "output": "Yes, a string is immutable in Python. Once a string is created, it cannot be changed.", "category": "Python"}, {"instruction": "Change the first character of a given string to uppercase.", "input": "String: \"python\"", "output": "String: \"Python\"", "category": "Python"}, {"instruction": "Identify the errors, if any, in the following code.", "input": "sum = 0\nfor i in range(1,10):\n    sum =+ i", "output": "The error is that the operator '=+' should be changed to '+='. This operator adds the value on the left to the current value of the variable on the right, and then assigns the result back to the variable on the right. The correct code should be:\n\nsum = 0\nfor i in range(1,10): \n    sum += i", "category": "Python"}, {"instruction": "What is the syntax of a for loop in Python?", "input": "", "output": "The syntax of a for loop in Python is: \nfor item in iterable:\n    statement(s)", "category": "Python"}, {"instruction": "What is the maximum number of parameters that a function can take in Python?", "input": "", "output": "A function in Python can take up to 255 parameters.", "category": "Python"}, {"instruction": "Using the provided code as a reference, write a loop to output the middle 3 elements in a given array.", "input": "arr = [1,2,3,4,5,6]", "output": "for i in range(1, len(arr)-1):\n    print(arr[i])", "category": "Python"}, {"instruction": "Calculate the sum of all odd numbers between two given numbers.", "input": "Lower limit: 3\nUpper limit: 7", "output": "def sumOfOddNumbers(lower, upper):\n    total = 0\n    for i in range(lower, upper+1): \n        if (i % 2 != 0): \n            total += i\n    return total", "category": "Python"}, {"instruction": "Write a code to print a binary tree in pre order traversal.", "input": "", "output": "def pre_order_traversal(root):\n    # Return if tree is empty\n  if root == None:\n    return\n  # Print the data of node\n  print(root.data),\n\n  # Recursively call the pre-order traversal on left subtree \n  pre_order_traversal(root.left)\n  \n  # Recursively call the pre-order traversal on right subtree\n  pre_order_traversal(root.right)", "category": "Python"}, {"instruction": "Create a function to convert the given string to hexadecimal code.", "input": "", "output": "def string_to_hexadecimal(string):\n    # convert the string to list of bytes\n    bytes_ = [ord(char) for char in string] \n    \n    # convert the bytes to hexadecimal code\n    hexadecimal_list = [hex(byte) for byte in bytes_] \n    \n    # remove the \"0x\" from the hexadecimal code\n    hexadecimal_list = [item[2:] for item in hexadecimal_list]\n    \n    # join all the code into a single string\n    hexadecimal_string = ''.join(hexadecimal_list)\n    \n    return hexadecimal_string", "category": "Python"}, {"instruction": "Write a code to normalize a given array of numbers between 0 and 1 where min = 0, max = 1 and every other number is proportional to it.", "input": "arr = [10, 20, 30, 25, 0]", "output": "def normalize_array(arr):\n  # Check if the array is empty\n  if len(arr) == 0:\n    return []\n  \n  # Get min and max of the array\n  min_el = min(arr)\n  max_el = max(arr)\n  \n  # Normalize elements in the array\n  normalized_arr = [(el - min_el) / (max_el - min_el) for el in arr]\n  \n  return normalized_arr\n  \nnormalized_arr = normalize_array(arr)\nprint(\"Normalized array:\", normalized_arr)", "category": "Python"}, {"instruction": "Create a function in Java that inputs two strings and prints out the shorter one.", "input": "String a = \"Hello\";\nString b = \"World\";", "output": "public static void printShortString(String a, String b) {\n    if (a.length() > b.length()) {\n        System.out.println(b);\n    } else {\n        System.out.println(a);\n    }\n}", "category": "Python"}, {"instruction": "Write pseudocode to implement a sorting algorithm using recursion.", "input": "", "output": "Function sort(array, leftIndex, rightIndex):\n  // If leftIndex is greater than or equal to rightIndex, do nothing. \n  If (leftIndex >= rightIndex) : \n      return \n  \n  // Get the middle index\n  middleIndex = (rightIndex + leftIndex) / 2\n  \n  // Sort the left side  \n  sort(array, leftIndex, middleIndex) \n  \n  // Sort the right side \n  sort(array, middleIndex+1, rightIndex) \n  \n  // Merge the sides\n  merge (array, leftIndex, middleIndex, rightIndex)\n  \nFunction merge(array, leftIndex, middleIndex, rightIndex):\n  // Create two temporary arrays;\n  leftArray = [middleIndex - leftIndex + 1] \n  rightArray = [rightIndex - middleIndex]\n  \n  // Copy data from array to the respective arrays  \n  for (i = 0 to middleIndex - leftIndex) : \n      leftArray[i] = array[leftIndex + i] \n  for (j = 0 to rightIndex-middleIndex: j++) \n      rightArray[j] = array[middleIndex + 1 + j] \n  \n  // sort the leftArray \n  sortLeftArray(leftArray) \n  \n  // sort the rightArray \n  sortRightArray(rightArray) \n  \n  // merge the sorted halves \n  i = 0     \n  j = 0    \n  k = leftIndex     \n  while (i < sizeof(leftArray) //&& j < sizeof(rightArray)) \n  { \n      if (leftArray[i] <= rightArray[j]) \n      { \n          array[k] = leftArray[i]; \n          i++; \n      } \n      else\n      { \n          array[k] = rightArray[j]; \n          j++; \n      } \n      k++; \n  } \n  \n  // Copy the remaining elements  \n  while (i < sizeof(leftArray)) : \n  { \n      array[k] = leftArray[i]; \n      i++; \n      k++; \n  } \n  \n  while (j < sizeof(rightArray)) \n  { \n      array[k] = rightArray[j]; \n      j++; \n      k++; \n  }", "category": "Python"}, {"instruction": "Write a C program to find the sum of the following numbers: 17, 11 and 32", "input": "", "output": "#include <stdio.h>\n \nint main()\n{\n   // variables\n   int num1 = 17;\n   int num2 = 11;\n   int num3 = 32;\n \n   // calculate sum\n   int sum = num1 + num2 + num3;\n \n   // print result on console\n   printf(\"Sum of %d, %d and %d = %d\", num1, num2, num3, sum);\n\t\n   return 0;\n}", "category": "Python"}, {"instruction": "Formulate a regex expression in JavaScript to verify if a given string contains only numbers.", "input": "", "output": "const isOnlyNumbers = (str) => {\n  let regex = /^[0-9]+$/;\n  return regex.test(str);\n};", "category": "Python"}, {"instruction": "Create a HTML div tag with the following attributes: width=\"400px\" and background-color=\"#00FFFF\".", "input": "", "output": "<div style=\"width: 400px; background-color: #00FFFF;\"></div>", "category": "Python"}, {"instruction": "Create an HTML table to visualize the following list of data:", "input": "[\n    ['name', 'age', 'country'], \n    ['John', 35, 'United States'], \n    ['Sarah', 21, 'United Kingdom']\n]", "output": "<table>\n    <tr>\n        <th>name</th>\n        <th>age</th>\n        <th>country</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>35</td>\n        <td>United States</td>\n    </tr>\n    <tr>\n        <td>Sarah</td>\n        <td>21</td>\n        <td>United Kingdom</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Formulate a regex expression in Python to check if a given string is an email address.", "input": "", "output": "import re \n\ndef is_email(string): \n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex,string)): \n      print(\"Valid Email\")  \n   else: \n      print(\"Invalid Email\")", "category": "Python"}, {"instruction": "Write a query in SQL to display all the employee names with their id in the employee table.", "input": "", "output": "SELECT employee_id, employee_name \nFROM employee;", "category": "Python"}, {"instruction": "Suggest a way to combine two lists of dictionaries into one list of dictionaries in Python.", "input": "list1 = [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 20}]\nlist2 = [{'name': 'Steve', 'age': 25}, {'name': 'Jake', 'age': 18}]", "output": "combinedList = list1 + list2", "category": "Python"}, {"instruction": "Create a PHP function to calculate the total amount of tax to be paid given the income and tax rate.", "input": "income = 50000, tax rate = 0.2", "output": "function calcTax(income, rate) {\n   return income * rate;\n}\n\nvar totalTax = calcTax(50000, 0.2);\nconsole.log(totalTax); //10000", "category": "Python"}, {"instruction": "Develop a ruby program to remove all the duplicates from an array of integers.", "input": "arr = [1, 2, 4, 4, 5, 2]", "output": "def remove_duplicates(arr)\n    new_arr = []\n    arr.each do |x|\n        if !new_arr.include? x\n            new_arr.push(x)\n        end\n    end\n    return new_arr\nend", "category": "Python"}, {"instruction": "Design a function in PHP to calculate the cost of a product given its quantity and price.", "input": "int q = 3\ndouble p = 5.00", "output": "function calculateCost(int q, double p) {\n    return q * p;\n}", "category": "Python"}, {"instruction": "Develop a python code snippet to create a list, with the name \"fruits\" containing strings of the names of 5 fruits.", "input": "", "output": "fruits = [\"apple\", \"banana\", \"mango\", \"strawberry\", \"kiwi\"]", "category": "Python"}, {"instruction": "Create a regex statement to search for any 8-digit numbers in a string.", "input": "", "output": "\\d{8}", "category": "Python"}, {"instruction": "Categorize the following data set as either a classification or an regression problem.", "input": "The prediction of whether a customer will buy a product or not.", "output": "Classification problem.", "category": "Python"}, {"instruction": "Craft a shell script to print the current working directory.", "input": "", "output": "#!/bin/sh\npwd", "category": "Python"}, {"instruction": "Create a class in Python which has a method to sort an array of numbers in increasing order.", "input": "nums = [4, 3, 1, 6]", "output": "class ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n        return self.nums", "category": "Python"}, {"instruction": "Create a mysql query to find the name of the customer whose amount due is maximum.", "input": "TableName: Customers\nTableFields: customer_name, amount_due", "output": "SELECT customer_name\nFROM Customers\nORDER BY amount_due DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Create a python program to count how many times a word appears in a given string.", "input": "The quick brown fox jumps over the lazy dog", "output": "def count_word(word, input):\n    count = 0\n    for w in input.split():\n        if w == word:\n           count += 1\n    return count\n\nif __name__ == '__main__':\n    word = 'fox'\n    input = 'The quick brown fox jumps over the lazy dog'\n    result = count_word(word, input)\n    print(f' \"{word}\" occurs {result} times in the given string.')", "category": "Python"}, {"instruction": "Explain what a try-except statement is and how it should be used.", "input": "", "output": "A try-except statement is a mechanism for handling errors that may occur in a program in a controlled manner. It is used to catch errors in the program, process them gracefully and prevent the program from crashing. The syntax of try-except is try: followed by the code to be executed and except clause to handle the error. This code block can also be augmented with a finally clause to execute the code at the end of the execution of the try-except block.", "category": "Python"}, {"instruction": "Find the indices of the elements in the following array and output them in the form of a list.", "input": "Array = [5, 4, 6, 8, 7]", "output": "indices = []\nfor i, element in enumerate(a):\n    indices.append(i)\n\nOutput:\n[0, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Given an array of strings, find the longest common prefix string.", "input": "arr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]", "output": "\"\"\"\nGiven an array of strings, find the longest common prefix string.\n\"\"\"\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\" \n \n    min_length = len(min(arr, key = len)) \n  \n    result = \"\" \n    i = 0\n    while i < min_length: \n        char = arr[0][i] \n        for j in range(1, len(arr)): \n            if arr[j][i] != char: \n                return result \n        result += char \n        i += 1\n    return result\n\nprint(longest_common_prefix(arr)) # Code", "category": "Python"}, {"instruction": "Given a matrix of size m x n, transpose it.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "\"\"\"\nGiven a matrix of size m x n, transpose it.\n\"\"\"\ndef transpose_matrix(matrix):\n    t_matrix = []\n    for i in range(len(matrix[0])):\n        temp = []\n        for j in range(len(matrix)):\n            temp.append(matrix[j][i])\n        t_matrix.append(temp)\n    return t_matrix\n    \nprint(transpose_matrix(matrix)) # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "category": "Python"}, {"instruction": "Create a function \"calculate_area\" which calculates the area of a polygon with three sides.", "input": "", "output": "\"\"\"\nCreate a function \"calculate_area\" which calculates the area of a polygon with three sides.\n\"\"\"\ndef calculate_area(s1, s2, s3):\n    s = (s1 + s2 + s3) / 2\n    return (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5", "category": "Python"}, {"instruction": "Rearrange the following code so that it will execute in order.", "input": "print(4) \nprint(2)\nprint(1)", "output": "print(1)\nprint(2)\nprint(4)", "category": "Python"}, {"instruction": "Using the comment as a guide, implement a while loop", "input": "start = 0 \n#TODO: Implement a while loop that counts up to 10", "output": "start = 0 \n\nwhile start <= 10:\n    print (start)\n    start += 1", "category": "Python"}, {"instruction": "How would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?", "input": "", "output": "\"\"\"\nHow would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?\n\"\"\"\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n - i - 1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "How can you optimize this code to improve its efficiency?", "input": "def multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list: \n        for value in second_list: \n\t        result += element * value \n    return result", "output": "\"\"\"\nHow can you optimize this code to improve its efficiency?\n\"\"\"\ndef multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list:\n        result += element * sum(second_list)\n    return result", "category": "Python"}, {"instruction": "Given an array of integers, find the sum of the numbers that are divisible by 3.", "input": "nums = [1, 5, 6, 9, 10, 12, 15]", "output": "\"\"\"\nGiven an array of integers, find the sum of the numbers that are divisible by 3.\n\"\"\"\ndef find_sum_divisible_by_3(nums):\n    total = 0\n    for num in nums:\n        if num % 3 == 0:\n            total += num\n    return total\n\nprint(find_sum_divisible_by_3(nums)) # 18", "category": "Python"}, {"instruction": "define a function \"gcd\" which finds the greatest common divisor of two numbers.", "input": "", "output": "\"\"\"\nDefine a function \"gcd\" which finds the greatest common divisor of two numbers.\n\"\"\"\ndef gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n\n\"\"\"\nTest the function gcd \n\"\"\"\n\na = 98\nb = 56\nprint(\"The gcd of\", a, \"and\", b, \"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Replace the word \"apple\" with \"fruit\" in the following sentence.", "input": "I want to buy an apple.", "output": "I want to buy a fruit.", "category": "Python"}, {"instruction": "Create a class for doubly linked list in Python.", "input": "", "output": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.previous = None\n\n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current", "category": "Python"}, {"instruction": "Write a regex expression that checks if the input string contains only numerical values.", "input": "", "output": "^[0-9]+$", "category": "Python"}, {"instruction": "Optimize the following code.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10):\n    print(i, end=\" \")", "category": "Python"}, {"instruction": "Print the nth Fibonacci number.", "input": "10", "output": "55", "category": "Python"}, {"instruction": "Compute the sum of a list of integers.", "input": "[1, 6, 8, 9, 4]", "output": "28", "category": "Python"}, {"instruction": "What is a text editor?", "input": "", "output": "A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work.", "category": "Python"}, {"instruction": "Create a code that summation of all numbers between 1 to n.", "input": "n = 5", "output": "\"\"\"\nCreate a code that summation of all numbers between 1 to n.\n\"\"\"\ndef sum_all_nums(n):\n    res = 0\n    \n    for i in range(1, n+1):\n        res += i\n    \n    return res\n\nprint(sum_all_nums(n)) # 15", "category": "Python"}, {"instruction": "Create a program that sorts an array of integers in ascending order.", "input": "arr = [5, 9, 1, 4, 3]", "output": "\"\"\"\nCreate a program that sorts an array of integers in ascending order.\n\"\"\"\ndef sort(arr): \n    for i in range(len(arr)-1): \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j       \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\nsort(arr)\nprint(arr) # [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Please write a program that prints out the Fibonacci sequence from 1 to n.", "input": "n = 10", "output": "\"\"\"\nPlease write a program that prints out the Fibonacci sequence from 1 to n.\n\"\"\"\ndef fibonacci(n):\n    fib = [1, 1]\n    for i in range(2, n):\n        a = fib[i-2]\n        b = fib[i-1]\n        fib.append(a+b)\n    return fib[:n]\n\nprint(fibonacci(n)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Using C++, write a program to find the Fibonacci number at a given position.", "input": "", "output": "int Fibonacci(int n) \n{ \n    int a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + b; \n        a = b; \n        b = c; \n    } \n    return b; \n}", "category": "Python"}, {"instruction": "Develop a program in Java to calculate the product of two numbers.", "input": "", "output": "public static int product(int a, int b) \n{ \n    return (a*b); \n}", "category": "Python"}, {"instruction": "Create a program in JavaScript to remove the duplicate entries in an array.", "input": "arr = [1, 2, 3, 1, 4, 5, 6, 4, 1]", "output": "function removeDuplicates(arr)  {\n    let uniqueArr = new Set(arr);\n    let arrAfterRemoval = Array.from(uniqueArr);\n    return arrAfterRemoval;\n}", "category": "Python"}, {"instruction": "Develop a SQL query to find the latest date from a table.", "input": "", "output": "SELECT MAX(date) FROM table;", "category": "Python"}, {"instruction": "Develop a program to identify the longest common prefix between two strings.", "input": "String1 = \"Hellocat\"\nString2 = \"Hellokong\"", "output": "def longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n    return result", "category": "Python"}, {"instruction": "Write a function that removes all occurrences of a character from a given string.", "input": "string = \"happiness\"\nchar = \"p\"", "output": "def removeCharFromString(string, char):\n  result_string = []\n  for c in string:\n    if c != char:\n      result_string.append(c)\n  return ''.join(result_string)", "category": "Python"}, {"instruction": "Generate a list containing all the names of the students in a given class.", "input": "class_list = ['John', 'Jane', 'Daniel', 'Nina']", "output": "def generateStudentNamesList(class_list):\n  student_names_list = []\n  for student in class_list:\n    student_names_list.append(student)\n  return student_names_list", "category": "Python"}, {"instruction": "Write an SQL query for fetching records from a table called 'Student'.", "input": "", "output": "SELECT * FROM Student;", "category": "Python"}, {"instruction": "Create a function that counts the number of an specific letter in a given string.", "input": "string = \"hello, world\"\nletter = \"l\"", "output": "def countLetter(string, letter):\n  count = 0\n  for char in string:\n    if char == letter:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Write code that transforms input data into a given format.", "input": "data = {\n  'name': 'John',\n  'age': 30,\n  'email': 'john@example.com'\n}", "output": "def transformData(data):\n  result_data = {}\n  for key, value in data.items():\n    result_data[key+'_uppercase'] = str(value).upper()\n  return result_data", "category": "Python"}, {"instruction": "Write a function to fetch the first N elements from a given array.", "input": "array = [1,2,3,4,5,6,7,8,9,10]", "output": "def fetchFirstNElements(array, n):\n  firstNElements = []\n  for i in range(n):\n    firstNElements.append(array[i])\n  return firstNElements", "category": "Python"}, {"instruction": "Develop an algorithm to process a given matrix.", "input": "", "output": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] \n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col]\n      # perform processing on element here\n      result_matrix[row][col] = element\n  return result_matrix", "category": "Python"}, {"instruction": "Write a JavaScript function to find all the even numbers from a given array of integers.", "input": "[3, 12, 17, 24, 4, 10]", "output": "function findEvenNumbers(nums) {\n  let evenNums = []\n  nums.forEach(num => {\n    if (num % 2 === 0) {\n      evenNums.push(num)\n    }\n  })\n  return evenNums\n}", "category": "Python"}, {"instruction": "Edit the provided code to yield the correct output.", "input": "def hello_world():\n    string = \"Hello World\"\n    print(string.lower())", "output": "def hello_world():\n    string = \"Hello World\"\n    print(string.upper())", "category": "Python"}, {"instruction": "Develop a Python class for handling the API calls.", "input": "", "output": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response", "category": "Python"}, {"instruction": "Given a string, convert it to a list of words.", "input": "The quick brown fox jumped over the lazy dog", "output": "string = \"The quick brown fox jumped over the lazy dog\"\n\nwords_list = string.split()", "category": "Python"}, {"instruction": "Develop a Java program that prints a given string.", "input": "", "output": "public class Main {\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(str);\n    }\n}", "category": "Python"}, {"instruction": "Create a HTML page displaying a simple table showing your name, age and occupation.", "input": "", "output": "<html>\n<head>\n    <title>My Details</title>\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>  \n            <th>Occupation</th>  \n        </tr>\n        <tr>\n            <td> Joe Doe</td>\n            <td> 25 </td>\n            <td> Web Developer </td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an array of strings from an array of integers.", "input": "[1, 4, 8]", "output": "[\"1\", \"4\", \"8\"]", "category": "Python"}, {"instruction": "Create a C++ program to solve this problem", "input": "Given an array of integers, count the number of pairs of integers whose difference is K.\n\nExample:\nInput: array = [1, 7, 5, 9, 2, 12, 3], k = 2\nOutput: 4", "output": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint countPairsWithDiffK(int arr[], int n, int k){\n    // Create an empty unordered_map\n    unordered_map<int, int> map;\n     \n    // Store count of all elements in map\n    for (int i = 0; i < n; i++)\n        map[arr[i]]++; \n     \n    int count = 0; \n \n    // Iterate through all elements and \n    // find number of elements with difference\n    // equal to k.\n    for (int i = 0; i < n; i++) {\n        if (map[arr[i] + k])\n            count += map[arr[i] + k];\n         \n        if (map[arr[i] - k])\n            count += map[arr[i] - k];\n         \n        // Decrease count for same numbers\n        if (k == 0)\n            count--;\n    }\n \n    return count / 2;\n}\n \n// Driver program\nint main()\n{\n    int arr[] =  {1, 7, 5, 9, 2, 12, 3};\n    int n = sizeof(arr) / sizeof(int);\n    int k = 2;\n     \n    cout << countPairsWithDiffK(arr, n, k);\n     \n    return 0;\n}", "category": "Python"}, {"instruction": "Design a Node.js program that calculates the factorial of a number.", "input": "", "output": "const factorial = ( num ) => {\n  if ( num === 0 ) return 1;\n  return num * factorial( num - 1 );\n};\n\nconsole.log (factorial(5));", "category": "Python"}, {"instruction": "Create an object in JavaScript for employee records.", "input": "", "output": "const employeeRecords = {\n    id: 0,\n    name: '',\n    email: '',\n    department: '',\n    salary: 0\n}", "category": "Python"}, {"instruction": "Construct a T-SQL query to calculate the average price of items in the \"products\" table.", "input": "CREATE TABLE `products` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(30) NOT NULL,\n  `price` int(11) NOT NULL,\n  PRIMARY KEY (`id`) \n);", "output": "SELECT AVG(price) FROM products;", "category": "Python"}, {"instruction": "Design a PHP code for displaying the current URL.", "input": "", "output": "<?php\n \n$url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];\n \necho $url;\n?>", "category": "Python"}, {"instruction": "Write a Bash shell script for listing all folders in a directory.", "input": "", "output": "#!/bin/bash\n\n# Directory path\nDIR=\"$1\"\n\n# Get list of directories in current directory\nfor dir in $(ls -d */); \ndo\n    echo $dir\ndone", "category": "Python"}, {"instruction": "Create a web page using HTML, CSS and JavaScript that displays a user's full name.", "input": "const fullName = \"John Doe\";", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Webpage</title>\n</head>\n<body>\n\n    <h1>My Full Name</h1>\n    <p>My full name is <span id=\"name\">John Doe</span>.</p>\n\n    <script>\n        const fullName = \"John Doe\";\n        document.getElementById('name').innerHTML = fullName;\n    </script>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a function in Java that takes two strings as input and output boolean true if they are the same and false if they are different.", "input": "", "output": "public boolean is_same(String str1, String str2) { \n \n    if (str1 == null || str2 == null) { \n        return false; \n    } \n    return str1.equals(str2); \n}", "category": "Python"}, {"instruction": "Design a Python function that computes the sum of two numbers.", "input": "", "output": "def sum_two_numbers(num1, num2):\n    \"\"\"\n    This function will take two numbers as inputs and return their sum.\n    \"\"\"\n    return num1 + num2", "category": "Python"}, {"instruction": "Write a SQL query to retrieve players with a score equal to or greater than 80.", "input": "CREATE TABLE `players` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(30) NOT NULL,\n  `score` int(11) NOT NULL,\n  PRIMARY KEY(`id`) \n);", "output": "SELECT * FROM `players` WHERE `score` >= 80;", "category": "Python"}, {"instruction": "Create an HTML5 document with an h1 tag containing the text \"Hello World\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "What is an example of a bubble sort algorithm?", "input": "", "output": "Example of a bubble sort algorithm:\n\nvoid bubble_sort(int arr[], int n) \n{ \n   int i, j; \n   for (i = 0; i < n-1; i++)           \n       for (j = 0; j < n-i-1; j++)  \n           if (arr[j] > arr[j+1]) \n              swap(&arr[j], &arr[j+1]); \n}", "category": "Python"}, {"instruction": "Create an recursive algorithm in Python to find the nth number in Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a function in JavaScript to remove all vowels from an input string.", "input": "", "output": "function removeVowels(str) {\n  return str.replace(/[aeiou]/gi, '');\n}", "category": "Python"}, {"instruction": "Explain recursion in 2 sentences.", "input": "", "output": "Recursion is the process of defining a problem in terms of itself. It is when a function calls itself repeatedly until a condition is met.", "category": "Python"}, {"instruction": "Explain a quick sort algorithm in 3 sentences.", "input": "", "output": "Quick sort is an efficient sorting algorithm that divide-and-conquer approach.  It picks an element as a pivot from the array and partitions the array around the pivot.  It recursively sorts the two sub-arrays created on either side of the pivot element.", "category": "Python"}, {"instruction": "Write a MySQL query to update the 'price' column in the 'products' table to 50.", "input": "CREATE TABLE `products` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(30) NOT NULL,\n  `price` int(11) NOT NULL,\n  PRIMARY KEY (`id`) \n);", "output": "UPDATE products SET price = 50;", "category": "Python"}, {"instruction": "Write a code in Go that checks if a number is prime or not.", "input": "", "output": "func isPrime(n int) bool {\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return n > 1\n}", "category": "Python"}, {"instruction": "Implement a function in Python 3 to get the largest element from a sequence.", "input": "numbers = [2, 4, 7, 8, 10]", "output": "def get_largest_element(seq):\n  return max(seq)\n\n#Usage \nlargest_element = get_largest_element(numbers)\n#largest_element is 10", "category": "Python"}, {"instruction": "Generate a random 8 digit string composed of numbers and letters in Python 3.", "input": "", "output": "import string\nimport random\n \n#Generate 8 character random string\ndef generate_random_string(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\n#Driver code \nrandom_string = generate_random_string()\nprint(f\"Random String Generator: {random_string}\")", "category": "Python"}, {"instruction": "Develop a Python program", "input": "Create a program to validate an ISBN number.", "output": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Generate an SQL query to retrieve the data", "input": "Retrieve the name and salary of employees whose salary is more than $50000", "output": "SELECT name, salary\nFROM employees\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Design a database schema for a company", "input": "The company consists of employees, and each employee has attributes such as name, address, age and salary. Also, the company contains projects, and each project has attributes such as name and due date.", "output": "CREATE TABLE employees\n(\n    employee_id INT PRIMARY KEY, \n    name VARCHAR(50) NOT NULL, \n    address VARCHAR(200) NOT NULL, \n    age INT, \n    salary INT \n);\n\nCREATE TABLE project\n(\n    project_id INT PRIMARY KEY, \n    name VARCHAR(50) NOT NULL, \n    due_date DATE NOT NULL \n);\n\nCREATE TABLE employee_projects\n(\n    employee_id INT, \n    project_id INT, \n    FOREIGN KEY (employee_id) REFERENCES employee(employee_id), \n    FOREIGN KEY (project_id) REFERENCES project(project_id) \n);", "category": "Python"}, {"instruction": "Create an HTML form to submit a feedback", "input": "", "output": "<form action=\"/feedback.php\" method=\"post\">\n  <label>Your Name:</label>\n  <input type=\"text\" name=\"name\" />\n  <label>Your Feedback:</label>\n  <textarea name=\"feedback\" rows=\"4\" cols=\"50\"></textarea>\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Write a Python script to call a web API", "input": "Call openweathermap.org's API with a given city name.", "output": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")", "category": "Python"}, {"instruction": "Rewrite this code using list comprehension", "input": "my_list = []\nfor i in range(5):\n   my_list.append(i)", "output": "my_list = [i for i in range(5)]", "category": "Python"}, {"instruction": "Write a C++ program to sort the numbers", "input": "The list has the following numbers: 3, 5, 1, 4, 9", "output": "#include <iostream>\n#include <algorithm> \n\nint main() {\n   int array [] = {3, 5, 1, 4, 9}; \n   int size = sizeof(array) / sizeof(array[0]); \n  \n   std::sort(array, array + size); \n \n   std::cout << \"Sorted array : \"; \n   \n   for (int i = 0; i < size; i++)\n      std::cout << array[i] << \" \"; \n   \n   return 0;\n}", "category": "Python"}, {"instruction": "Print the following results of an arithmetic operation.", "input": "15 - 7", "output": "8", "category": "Python"}, {"instruction": "Generate an algorithm to create a Palindrome", "input": "", "output": "1. Take the input string\n2. Reverse the string\n3. Check if the reversed string is equal to the original string\n4. If yes, then the input string is a palindrome\n5. If not, create a palindrome by adding the reverse of the input string to the original string.", "category": "Python"}, {"instruction": "Compare and contrast the following two functions.", "input": "Function 1:\nint add(int a, int b) {\n    return a + b;\n}\nFunction 2:\nint sub(int a, int b) {\n    return a - b;\n}", "output": "Function 1 adds two integers and returns the result.\nFunction 2 subtracts one integer from another and returns the result. Both functions have the same parameter types, but the operation that each one performs is different. The return type of both functions is an integer.", "category": "Python"}, {"instruction": "Identify the type of the following variables in C++", "input": "int a;\nchar b;\nfloat c;", "output": "a is an integer, \nb is a character, \nc is a floating point number.", "category": "Python"}, {"instruction": "Write a snippet of SQL code to retrieve the data.", "input": "Retrieve all the customers and their phone numbers from the customer table.", "output": "SELECT customer_name, phone_number\nFROM customers;", "category": "Python"}, {"instruction": "Write a Bash shell script to find the average of three numbers.", "input": "num1=2\nnum2=4\nnum3=6", "output": "#!/bin/bash\n \n# A Bash script to calculate average of three numbers.\n \n((sum = num1 + num2 + num3))\necho $((sum / 3))", "category": "Python"}, {"instruction": "Develop a JavaScript code snippet to find the maximum and minimum numbers in an array.", "input": "nums = [2, 5, 8, 9, 10]", "output": "function maxmin(nums) {  \n    let max = nums[0];\n    let min = nums[0];\n  \n    for (let i = 0; i < nums.length; i++) {\n        // comparison to find the maximum\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        // comparison to find the minimum\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    \n    return {max:max, min:min};  \n}\n\n//driver code\nlet nums = [2, 5, 8, 9, 10];\nlet maxmin_result = maxmin(nums);\nconsole.log(`Max is ${maxmin_result.max}, and min is ${maxmin_result.min}.`);", "category": "Python"}, {"instruction": "Create a program in PHP to search for a given element in an array.", "input": "$arr = [1, 2, 3, 4, 5];\n$key = 4;", "output": "<?php\n \nfunction searchEl($arr, $key)\n{\n    if (in_array($key, $arr)) {\n        $index = array_search($key, $arr);\n        return $index;\n    } \n    return -1;\n}\n\n//driver code\n$arr = [1, 2, 3, 4, 5];\n$key = 4;\n$index = searchEl($arr, $key);\nif ($index == -1)\n    echo 'Element is not present in array';\nelse\n    echo 'Element is present at index '.$index;\n?>", "category": "Python"}, {"instruction": "Implement a function in Java to determine if a given number is perfect or not.", "input": "number = 28", "output": "public class PerfectNumber {\n \n    public static boolean isPerfectNumber(int number) {\n        int sum = 0;\n        // loop to add all the divisors\n        for (int i = 1; i < number; i++) \n        { \n            if (number % i == 0) \n            {\n                sum += i; \n            }\n        } \n        // check to determine if the number is perfect\n        if(sum == number) { \n            return true; \n        }\n        else {\n            return false; \n        }\n    }\n \n    // Driver code\n    public static void main(String[] args) {\n        int number = 28;\n        if(isPerfectNumber(number)) {\n            System.out.println(number + \" is a perfect number.\");\n        } else {\n            System.out.println(number + \" is not a perfect number.\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Generate a class that manages the customer data", "input": "The class should have attributes of customer name, address, phone number, and email address.", "output": "class CustomerData:\n    def __init__(self, name, address, phone_number, email_address):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email_address = email_address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number\n    \n    def get_email_address(self):\n        return self.email_address", "category": "Python"}, {"instruction": "Compose a program to sort an array of integers using bubble sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Write a Python script to generate a random number between two numbers.", "input": "", "output": "import random\n\ndef rand_num(min_num,max_num):\n    return random.randrange(min_num,max_num)", "category": "Python"}, {"instruction": "Using Java, develop a function that returns the greater value between two given parameters.", "input": "", "output": "public static int getMaxValue(int n1, int n2) \n{ \n    if(n1 > n2) \n        return n1; \n    else\n        return n2; \n}", "category": "Python"}, {"instruction": "Create an array of Unicode objects from the given string.", "input": "String: Hello World", "output": "import unicodedata\n\ndef string_to_unicode_array(string):\n    return [unicodedata.lookup(ord(char)) for char in string]\n\nif __name__ == '__main__':\n    print(string_to_unicode_array('Hello World'))", "category": "Python"}, {"instruction": "Write a code to find the cost of the cheapest product from a list of products in JSON format.", "input": "[\n    {\n      \"Name\": \"Biscuit\",\n      \"Price\": 3.00\n    },\n    {\n      \"Name\": \"Cake\",\n      \"Price\": 2.50 \n    },\n    {\n      \"Name\": \"Chocolate\",\n      \"Price\": 4.00\n    }\n]", "output": "\"\"\"\nFind the cost of the cheapest product from a list of products in JSON format\n\"\"\"\n\nimport json\n\ndef find_cheapest_product(products):\n    cheapest_product = (None, float('inf'))\n    for product in products:\n        if product['Price'] < cheapest_product[1]:\n            cheapest_product = (product['Name'], product['Price'])\n            \n    return cheapest_product[1]\n\nif __name__ == '__main__':\n    products = [\n        {\n            \"Name\": \"Biscuit\",\n            \"Price\": 3.00\n        },\n        {\n            \"Name\": \"Cake\",\n            \"Price\": 2.50 \n        },\n        {\n            \"Name\": \"Chocolate\",\n            \"Price\": 4.00\n        }\n    ]\n    \n    print(find_cheapest_product(products))", "category": "Python"}, {"instruction": "Create a MATLAB code snippet for calculating the mean of a given list of numbers.", "input": "list_nums = [2, 7, 3, 19, 4, 7]", "output": "function mean_val = calc_mean(list_nums)\n  mean_val = mean(list_nums);\nend\n\nlist_nums = [2, 7, 3, 19, 4, 7];\nmean_val = calc_mean(list_nums);", "category": "Python"}, {"instruction": "Create a function in JavaScript that returns the highest number from the given list.", "input": "list_number = [2, 7, 3, 19, 4, 7]", "output": "function highest_num(list_number) {\n    let highest_val = 0;\n    for (let i = 0; i < list_number.length; i++) {\n        if (list_number[i] > highest_val) {\n            highest_val = list_number[i];\n        }\n    }\n    return highest_val;\n}\n\nlist_number = [2, 7, 3, 19, 4, 7] \nprint(highest_num(list_number))", "category": "Python"}, {"instruction": "Design a program in Python for searching for a given item in a list.", "input": "list_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'", "output": "def search_item(list_items, item_to_search): \n    for item in list_items: \n        if item == item_to_search: \n            return True \n    return False \n\nlist_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'\n\nprint(search_item(list_items, item_to_search))", "category": "Python"}, {"instruction": "Write a SQL query to convert a column to uppercase.", "input": "Table: Employees\nTable Fields: id, first_name, last_name", "output": "SELECT id, UPPER(first_name) AS first_name, UPPER(last_name) AS last_name FROM Employees", "category": "Python"}, {"instruction": "Create an HTML link to a given URL.", "input": "url = \"https://www.example.com/\"", "output": "<a href=\"https://www.example.com/\">Visit Example</a>", "category": "Python"}, {"instruction": "Find the most occurring item from a given list.", "input": "input_list = [1,2,2,3,3,3,4,4,4,4]", "output": "from collections import Counter\n\ninput_list = [1,2,2,3,3,3,4,4,4,4] \nmost_occurring_item = Counter(input_list).most_common(1)\nprint(most_occurring_item)", "category": "Python"}, {"instruction": "Convert the following C++ program to Python.", "input": "#include <iostream>\n\nint main()\n{\n  int i = 0;\n  int x = 0;\n\nwhile(i<5){\n  x=x+i;\n  i++;\n}\n  std::cout << x;\n\nreturn 0;", "output": "i = 0 \nx = 0 \nwhile i < 5: \n    x += i \n    i += 1 \nprint(x)", "category": "Python"}, {"instruction": "Write a regular expression to match any three-digit number.", "input": "", "output": "\\d{3}", "category": "Python"}, {"instruction": "Describe which programming language could be best suited for a web scraping task.", "input": "", "output": "Python would be the best programming language to use for a web scraping task, as it has powerful libraries such as Scrapy and Beautiful Soup which make it easy to scrape data from webpages.", "category": "Python"}, {"instruction": "Write a Bash script to print out a message \"Hello world!\"", "input": "", "output": "#!/bin/bash\necho \"Hello world!\"", "category": "Python"}, {"instruction": "Using Python, find the number of unique characters in the string \"hello world\".", "input": "", "output": "len(set(\"hello world\")) # 10 unique characters", "category": "Python"}, {"instruction": "Determine the biggest value in the list.", "input": "[7, 12, -5, 3, 9]", "output": "12", "category": "Python"}, {"instruction": "Create a method to read in input from the console in Java", "input": "", "output": "import java.util.Scanner;\n\npublic static String readFromConsole(){\n    Scanner scanner = new Scanner(System.in);\n    return scanner.nextLine();\n}", "category": "Python"}, {"instruction": "Convert a given number from base 10 to base 16.", "input": "Number: 245", "output": "def base10_to_base16(num):\n    return hex(num).upper()[2:]\n\nif __name__ == '__main__':\n    print(base10_to_base16(245))", "category": "Python"}, {"instruction": "How would you call a function 'process' in JavaScript?", "input": "", "output": "The function 'process' can be called with the following syntax: process();", "category": "Python"}, {"instruction": "What is the data type of the result of division of two integers?", "input": "", "output": "The result of division of two integers is a float.", "category": "Python"}, {"instruction": "Reverse a Python dictionary.", "input": "{ 1: 'A', 2: 'B', 3: 'C' }", "output": "def reverse_dict(d):\n    return {v: k for k, v in d.items()}\n\nif __name__ == '__main__':\n    print(reverse_dict({ 1: 'A', 2: 'B', 3: 'C' }))", "category": "Python"}, {"instruction": "Execute the following code in a Python Shell and explain the output.", "input": "a = 5\nb = 6\n\nprint(a,b)", "output": "The code will print 5 and 6 on separate lines. This is because we have not specified a separator, thus the default separator (whitespace) will be used.\n\nOutput:\n5\n6", "category": "Python"}, {"instruction": "Find the maximum number in the given array without using an inbuilt function", "input": "Array = [3, 1, 7, 5, 8]", "output": "maxNum = 0\nfor num in array: \n    if num > maxNum: \n        maxNum = num \n\nOutput:\n8", "category": "Python"}, {"instruction": "Sort the following list of numbers using Merge Sort", "input": "List = [5,7,3,9,2]", "output": "def mergesort(nums): \n    if len(nums) == 1: \n        return nums \n  \n    mid = len(nums) // 2\n    left_list = nums[:mid] \n    right_list = nums[mid:] \n  \n    left_list = mergesort(left_list) \n    right_list = mergesort(right_list) \n    return merge(left_list, right_list) \n\ndef merge(left_list, right_list): \n    sorted_list = [] \n    left_list_index = right_list_index = 0\n  \n    left_list_length, right_list_length = len(left_list), len(right_list) \n  \n    for _ in range(left_list_length + right_list_length): \n        if left_list_index < left_list_length and right_list_index < right_list_length: \n            if left_list[left_list_index] <= right_list[right_list_index]: \n                sorted_list.append(left_list[left_list_index]) \n                left_list_index += 1\n            else: \n                sorted_list.append(right_list[right_list_index]) \n                right_list_index += 1\n        elif left_list_index == left_list_length: \n            sorted_list.append(right_list[right_list_index]) \n            right_list_index += 1\n        elif right_list_index == right_list_length: \n            sorted_list.append(left_list[left_list_index]) \n            left_list_index += 1\n  \n    return sorted_list \n\nOutput:\n[2, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Find the most common elements across two sets of data.", "input": "Set 1: [1,2,3,4,5]\nSet 2: [4,5,6,7,8]", "output": "The most common elements between the two sets are 4 and 5.", "category": "Python"}, {"instruction": "Develop a program to remove duplicate items in the list.", "input": "", "output": "def remove_duplicates(list_values):\n    result = []\n    for i in list_values:\n        if i not in result:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Using a dictionary, group the elements into their respective keys.", "input": "List = [1,4,7,2,5,8]", "output": "d = {1: [1, 4, 7], 2: [2, 5], 8: [8]}", "category": "Python"}, {"instruction": "Convert the following code to an equivalent program in Java.", "input": "def printing_number(number):\n    print(number)", "output": "public void printing_number(int number) {\n    System.out.println(number);\n}", "category": "Python"}, {"instruction": "Use the re module in Python to extract the numbers from a given string.", "input": "Input string: \u201cThere are 9 dogs and 8 cats here\u201d", "output": "import re\n\ninput_string = \"There are 9 dogs and 8 cats here\"\n\n# Get the numbers from the string\nnumbers = re.findall('\\d+', input_string) \n\nprint(numbers)\n# Output ['9', '8']", "category": "Python"}, {"instruction": "Parse the sentence and find the sentence structure.", "input": "Sentence: I arrived at the destination late in the evening.", "output": "Subject: I \nVerb: arrived\nPrepositional phrase: at the destination\nAdverb clause: late in the evening\n\nSentence structure: (S (NP I) (VP arrived) (PP at the destination) (AdvCl late in the evening))", "category": "Python"}, {"instruction": "Reverse a string without using any in-built Python functions.", "input": "String: racecar", "output": "rev_str = \"\"\nfor ch in string:\n    rev_str = ch + rev_str\nreturn rev_str", "category": "Python"}, {"instruction": "Insert an item into an array at a specific position.", "input": "arr = [1, 2, 3]\nitem = 10\nposition = 1", "output": "arr.splice(position, 0, item);\n// arr is now [1, 10, 2, 3]", "category": "Python"}, {"instruction": "Create a loop in C# that prints out all numbers between 0 and 50.", "input": "", "output": "for (int i = 0; i < 50; i++) {\n    Console.WriteLine(i);\n}", "category": "Python"}, {"instruction": "Write an if..elif..else statement to check if a number is positive, negative or zero.", "input": "", "output": "if num > 0:\n    print(\"The number is positive\")\nelif num < 0:\n    print(\"The number is negative\")\nelse:\n    print(\"The number is zero\")", "category": "Python"}, {"instruction": "What is a ternary operator?", "input": "", "output": "A ternary operator is a conditional expression operator that can be used to return one of two values based on the evaluation of a boolean expression. In Python, the ternary operator is written as a ? expression. For example, a ? b : c is a shorthand for \"if a then b else c\", where a is a boolean expression.", "category": "Python"}, {"instruction": "Add two numbers using Python.", "input": "Numbers: 5, 7", "output": "def add_two_numbers(x, y):\n    return x + y\n\nif __name__ == '__main__':\n    print(add_two_numbers(5, 7))", "category": "Python"}, {"instruction": "How do you format a date in the YYYY-mm-dd format in JavaScript?", "input": "", "output": "The date can be formatted in the YYYY-mm-dd format as follows: var date = new Date(); var formatted_date = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();", "category": "Python"}, {"instruction": "Describe the purpose and usage of the statement break.", "input": "", "output": "The break statement is used to terminate a loop prematurely. It is mostly used to escape an infinite loop or to move out of a loop when a specific condition is met. It can be used in while, for and nested loops.", "category": "Python"}, {"instruction": "Construct a function to print out the odd numbers in a given array", "input": "", "output": "def odd_numbers(arr):\n    for i in range(len(arr) ):\n        if arr[i] % 2 != 0:\n            print(arr[i])", "category": "Python"}, {"instruction": "What is the correct syntax to call a constructor of a class in Java?", "input": "", "output": "ClassName objectName = new ClassName(parameters);", "category": "Python"}, {"instruction": "Implement a function to delete a node in a linked list", "input": "", "output": "def delete_node(node):\n  if node is None or node.next is None:\n    return\n  \n  next_node = node.next\n  node.data = next_node.data\n  node.next = next_node.next\n  next_node = None", "category": "Python"}, {"instruction": "Construct a for loop in the code for printing all items in the following list.", "input": "numbers = [1, 2, 3, 4]", "output": "numbers = [1, 2, 3, 4]\nfor number in numbers:\n    print(number)", "category": "Python"}, {"instruction": "Write a Python code snippet that creates a dictionary containing the numbers 1 to 10 as the keys and their squares as the values.", "input": "", "output": "squares_dict = { i:i*i for i in range(1, 11) }", "category": "Python"}, {"instruction": "Explain how to set up an XOR gate using two NAND gates and one NOT gate.", "input": "", "output": "To set up an XOR gate using two NAND gates and one NOT gate, connect the two NAND gates in series and connect the output from the second NAND gate to the NOT gate's input. Connect the output from the NOT gate to the input of the first NAND gate. The output from the first NAND gate is the output of the XOR gate.", "category": "Python"}, {"instruction": "Write JavaScript code to add the following data to the web page.", "input": "[\n        { name: \"John\", age: 25 },\n        { name: \"Rob\", age: 27 },\n        { name: \"Mia\", age: 22 }\n]", "output": "let data = [\n    { name: \"John\", age: 25 },\n    { name: \"Rob\", age: 27 },\n    { name: \"Mia\", age: 22 }\n];\n\nlet table = document.createElement(\"table\");\ntable.setAttribute(\"id\", \"personTable\");\n\nlet thead = document.createElement(\"thead\");\nlet tr = document.createElement(\"tr\");\nlet th = document.createElement(\"th\");\nth.innerText = \"Name\";\ntr.appendChild(th);\nlet th1 = document.createElement(\"th\");\nth1.innerText = \"Age\";\ntr.appendChild(th1);\nthead.appendChild(tr);\n\nlet tbody = document.createElement(\"tbody\");\n\ndata.map(value => {\n    let tr1 = document.createElement(\"tr\");\n    Object.values(value).map(val => {\n        let td = document.createElement(\"td\");\n        td.innerText = val;\n        tr1.appendChild(td);\n    })\n    tbody.appendChild(tr1);\n});\n\ntable.appendChild(thead);\ntable.appendChild(tbody);\ndocument.body.appendChild(table);", "category": "Python"}, {"instruction": "Rewrite the following code snippet in PHP.", "input": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "output": "function find_max($arr) {\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n    return $max;\n}", "category": "Python"}, {"instruction": "Generate the structural output of a MySQL query.", "input": "SELECT name, age, cats FROM people", "output": "The structural output of the query should be: \nname | age | cats \n-----|-----|----- \n  |  |", "category": "Python"}, {"instruction": "Write a function in C that takes a user's input as a string and checks whether the string contains only alphabets or not.", "input": "", "output": "int checkAlpha(char str[]) \n{ \n    int i; \n  \n    for (i = 0; str[i] != '\\0'; i++) { \n        if ((str[i] < 'a' || str[i] > 'z') &&  \n            (str[i] < 'A' || str[i] > 'Z')) { \n            return 0; \n        } \n    } \n  \n    return 1; \n}", "category": "Python"}, {"instruction": "Make the following SQL query return at least one row.", "input": "SELECT * FROM Student WHERE Name=\"John\"", "output": "SELECT * FROM Student WHERE Name=\"John\" OR Name=\"john\"", "category": "Python"}, {"instruction": "Create an HTML page containing a table with four columns that holds data about the population of a country.", "input": "", "output": "<html>\n<head>\n  <title>Country Population Table</title>\n</head>\n<body>\n  <table>\n    <tr>\n      <th>City</th>\n      <th>State</th>\n      <th>Population</th>\n      <th>Area (sq km)</th>\n    </tr>\n    <tr>\n      <td>New York</td>\n      <td>New York</td>\n      <td>8.4M</td>\n      <td>781</td>\n    </tr>\n    <tr>\n      <td>Los Angeles</td>\n      <td>California</td>\n      <td>3.9M</td>\n      <td>1,214</td>\n    </tr>\n    <tr>\n      <td>Chicago</td>\n      <td>Illinois</td>\n      <td>2.7M</td>\n      <td>606</td>\n    </tr>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Translate the following code from Java to Python.", "input": "public static void main (String[] args) {\n    int x = 5;\n    while (x > 0) {\n        System.out.println(x);\n        x--;\n    }\n}", "output": "x = 5\nwhile x > 0:\n    print(x)\n    x -= 1", "category": "Python"}, {"instruction": "Debug the following code snippet in C to determine the cause of the error.", "input": "int main() \n{ \n    int array[50], number, i, c=0; \n  \n    printf(\"Enter the number to be searched\\n\"); \n    scanf(\"%d\", &number); \n  \n    for (i = 0; i < 5; i++) { \n        scanf(\"%d\", &array[i]); \n        if (array[i] == number) { \n            c++; \n        } \n    } \n  \n    if (c == 0) { \n        printf(\"Number not found\\n\"); \n    } else { \n        printf(\"%d is present %d times.\", number, c); \n    } \n  \n    return 0; \n}", "output": "The for loop should be updated to the following to ensure that the correct number of elements in the array are read and the subsequent checks are valid:\n\nfor (i = 0; i < 50; i++) { \n    scanf(\"%d\", &array[i]); \n    if (array[i] == number) { \n        c++; \n    } \n}", "category": "Python"}, {"instruction": "Implement a linear search algorithm for an array of integers in Java.", "input": "", "output": "public static int linearSearch(int[] arr, int value) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Design a web API that enables users to register and log in.", "input": "", "output": "The API should be able to accept GET and POST requests and should be able to handle URLs like /register, /login, and /logout. The API should make use of JSON as the data format and should support client-server communication via API keys. The API should also implement other standard security protocols like TLS, OAuth, and OpenID Connect. Additionally, the API should be extensible and should support features like social media integration for user registration and login.", "category": "Python"}, {"instruction": "Write a function in C++ that calculates the maximum of two numbers.", "input": "", "output": "int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "category": "Python"}, {"instruction": "Choose a suitable data structure to store a collection of products.", "input": "", "output": "The most suitable data structure for storing a collection of products is a dictionary where a unique identifier is used as the key and the product attributes are stored in values associated with that key.", "category": "Python"}, {"instruction": "Design a program that returns the length of a given string.", "input": "String = \"Hello World\"", "output": "def stringLength(mystring): \n    counter = 0\n    for char in mystring: \n        counter += 1\n    return counter", "category": "Python"}, {"instruction": "Analyze the following code snippet and explain the cause of the error.", "input": "int arr[10];\n\nfor (int i=0; i<=10; i++) {\n    arr[i] = i*i;\n}", "output": "This code has an off-by-one error in the loop terminator. The loop should be written as follows: \n\nfor (int i=0; i<10; i++) {\n    arr[i] = i*i;\n} \nThis will prevent the array from attempting to access the nonexistent arr[10] and the resulting out of bounds error.", "category": "Python"}, {"instruction": "Write a function that converts a list of strings to a dictionary.", "input": "", "output": "def string_list_to_dictionary(string_list):\n    result = {}\n    for s in string_list:\n        result[s] = True\n    return result", "category": "Python"}, {"instruction": "Construct an if-else statement in the code to print \u201cThe number is even\u201d when the number is even and \u201cThe number is odd\u201d when the number is odd.", "input": "num = 3", "output": "num = 3\nif num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Using the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys.", "input": "", "output": "import pygame \npygame.init()  \n  \n# setting up the display window \nwin = pygame.display.set_mode((500, 500)) \n\n# creating a character that is used to move in the window \nx = 50 \ny = 50 \nvel = 5\n\n# The main game loop \nrun = True\nwhile run: \n  \n    # reacts to the event from keyboard \n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            run = False\n          \n    # checks if the key pressed is left or right\n    # and moves the character accordingly \n    keys = pygame.key.get_pressed() \n\n    if keys[pygame.K_LEFT]: \n        x -= vel\n\n    if keys[pygame.K_RIGHT]: \n        x += vel\n\n    # draws the character at its x and y position \n    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))\n\npygame.quit()", "category": "Python"}, {"instruction": "Write a python program to find all anagrams in a given string", "input": "str = \u201cabc\u201d", "output": "def find_anagrams(str):\n    # list to store anagrams\n    anagrams = [] \n      \n    # create a frequency array of alphabets present in string \n    freq = [0] * 26\n    for char in str: \n        freq[ord(char) - ord('a')] += 1\n          \n    # Loop through all the elements from 0 to ( 2^length of string \u2013 1 ) \n    for i in range(1<<len(str)): \n          \n        # Convert the number to binary string \n        # and calculate its frequency array \n        temp_freq = list(freq)\n        str_bin = bin(i)[2:] \n        n = len(str_bin) \n        for j in range(n): \n            if str_bin[j] == '1': \n                temp_freq[j] -= 1\n              \n        # temp_freq is anagram if all element are 0 \n        if all(x == 0 for x in temp_freq): \n            anagram = \"\" \n            for j in range(n):\n                if str_bin[j] == '1': \n                    anagram += str[j]\n            anagrams.append(anagram)\n                  \n    print(\"All anagrams for '\"+str +\"' are :\" + str(anagrams))", "category": "Python"}, {"instruction": "Construct a for loop in JavaScript that adds the values in the given array.", "input": "var numbers = [1,2,3,4];", "output": "let sum = 0;\nfor (let i = 0; i < numbers.length; i++) {\n sum += numbers[i];\n}", "category": "Python"}, {"instruction": "Use JavaScript to separate the given array into two arrays, one containing the even numbers and one containing the odd numbers.", "input": "var numbers = [1,2,3,4,5,6];", "output": "let evens = [];\nlet odds = [];\nnumbers.forEach(number => {\n if (number % 2 == 0) {\n  evens.push(number);\n } else {\n  odds.push(number);\n }\n});", "category": "Python"}, {"instruction": "Create a program in C++ that prints out all numbers from 1 to 100.", "input": "", "output": "#include <iostream>\n\nint main()\n{\n  for (int i=1;i<=100;i++)\n  {\n    cout << i << endl;\n  }\n  return 0; \n}", "category": "Python"}, {"instruction": "Create a Python script that adds two numbers together and returns the result.", "input": "", "output": "def add_numbers(a, b):\n return a + b", "category": "Python"}, {"instruction": "Using Java, write a method that takes two strings and checks if they are anagrams of each other.", "input": "", "output": "public static boolean isAnagram(String str1, String str2){\n    if(str1.length() != str2.length()){\n        return false;\n    }\n    char[] char1 = str1.toCharArray();\n    char[] char2 = str2.toCharArray();\n    Arrays.sort(char1);\n    Arrays.sort(char2);\n    return Arrays.equals(char1, char2);\n}", "category": "Python"}, {"instruction": "Create a function in Java that toggles a boolean value.", "input": "", "output": "public boolean toggleBoolean (boolean value) {\n return !value;\n}", "category": "Python"}, {"instruction": "Use the following model to create a prediction for the values in the list classifying it as either 0 or 1.", "input": "[1.0, 2.0, 0.5]", "output": "model.predict([[1.0], [2.0], [0.5]])", "category": "Python"}, {"instruction": "Construct a loop statement in JavaScript that prints each word in the given array and its corresponding index.", "input": "var words = [\"apple\", \"banana\", \"corn\"];", "output": "for (var i = 0; i < words.length; i++){\n console.log(words[i] + \" \" + i);\n}\n// prints: apple 0, banana 1, corn 2", "category": "Python"}, {"instruction": "Generate a secure password using the following algorithm.", "input": "", "output": "import string \nimport random\n\ndef generate_password():\n\t# Create a string of lowercase and uppercase letters and numbers\n    chars = string.ascii_letters + string.digits\n\t#randomly select 8 characters\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Write a code for an object-oriented Bubble Sort algorithm.", "input": "", "output": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])", "category": "Python"}, {"instruction": "Convert the following while loop into a for loop.", "input": "i = 0\nwhile i < 10:\n  print(i)\n  i += 1", "output": "for i in range(10):\n  print(i)", "category": "Python"}, {"instruction": "Create a class \u2018Student\u2019 and a constructor that allows the user to initialize the student name and age.", "input": "", "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Construct a while loop in the code to print the integers from 0 to 9.", "input": "", "output": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Use the following list to create an array in Python.", "input": "", "output": "list = [1, 2, 3, 4, 5]\narray = np.array(list)", "category": "Python"}, {"instruction": "Use the following code to create a dictionary of the words in the text and the frequency of their occurrence.", "input": "text = \u201ca happy day makes a happy life\u201d", "output": "text = \u201ca happy day makes a happy life\u201d\nwords_dict = {}\n\nfor word in text.split():\n    if word not in words_dict:\n        words_dict[word] = 1\n    else:\n        words_dict[word] += 1", "category": "Python"}, {"instruction": "Write a function in HTML to display a list of students sorted by their final grade.", "input": "var students = [{\n name: \"Tom\",\n grade: 90\n}, {\n name: \"Karl\",\n grade: 75\n}, {\n name: \"Kofi\",\n grade: 65\n}];", "output": "<html>\n <head>\n  <script>\n   function sortStudents(students) {\n    students.sort((a, b) => (a.grade > b.grade) ? 1 : -1);\n    return students;\n   }\n   var sortedStudents = sortStudents(students);\n   document.write('<ul>');\n   sortedStudents.forEach(student => {\n    document.write('<li>' + student.name + ' - ' + student.grade + '</li>');\n   });\n   document.write('<ul>');\n  </script>\n </head>\n</html>", "category": "Python"}, {"instruction": "Write an algorithm to find the smallest missing positive number from a given list of integers.", "input": "[3, 4, -10, -2, 9, 8, 1]", "output": "def findSmallestMissing(arr):\n    smallest_missing = 1\n    \n    for num in arr:\n        if (num == smallest_missing):\n           smallest_missing += 1\n    \n    return smallest_missing", "category": "Python"}, {"instruction": "Given a list of numbers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values.", "input": "my_list = [5, 10, 15, 20, 25]\nn = 5", "output": "def add_corresponding_elements(lst, n):\n    result = 0\n\n    for i in range(0, n, 2): \n        result += lst[i] + lst[i + 1] \n\n    return result\n\nmy_list = [5, 10, 15, 20, 25]\nn = 5\n\nresult = add_corresponding_elements(my_list, n)\nprint(result)  # Output: 35", "category": "Python"}, {"instruction": "Write a Python program to iterate the given list and print the square or each element.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [1, 2, 3, 4]\n\nfor i in my_list:\n    print(i**2)\n\n# Output: 1, 4, 9, 16", "category": "Python"}, {"instruction": "What is the purpose of the \"os\" module in Python?", "input": "", "output": "The \"os\" module in Python provides a way of using operating system dependent functionality. It includes functions for interacting with the filesystem, manipulating paths, and creating and interpreting file descriptors. It also provides miscellaneous operating system interfaces, such as tools for accessing environmental variables and for changing the current working directory.", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to check for odd numbers.", "input": "my_list = [-1, 0, 1, 2, 3]", "output": "def is_odd_number(list):\n    for num in list:\n        if num % 2 != 0:\n           return True \n    return False", "category": "Python"}, {"instruction": "Explain the concept of recursive programming in programming.", "input": "", "output": "Recursive programming is a programming technique in which a function calls itself repeatedly until a certain condition is satisfied. In this technique, the same set of operations or codes are repeatedly used to solve the problem. The main objective of recursive programming is to reduce code complexity and to make it easier to understand and follow.", "category": "Python"}, {"instruction": "Describe how dynamic programming works in programming.", "input": "", "output": "Dynamic Programming is a technique for solving complex programming problems by breaking them down into a collection of subproblems. It allows optimal solutions to be efficiently computed by breaking a single problem into subproblems and combining their solutions. Dynamic Programming is used for both optimization and selection problems, where subproblems are solved by storing and reusing the solutions to subproblems already solved.", "category": "Python"}, {"instruction": "Explain the concept of variable scoping in JavaScript.", "input": "", "output": "In JavaScript, variable scoping determines the accessibility of variables. Variables declared outside of a function can be accessed within the same function or any other functions. On the other hand, variables declared inside a function are limited in scope and can only be accessed within the same function. This is known as the lexical scoping rule in JavaScript.", "category": "Python"}, {"instruction": "Generate a code in R to remove spaces and punctuation from a given string.", "input": "The given string is \"Hello, World.\".", "output": "# removing spaces and punctuation\nremove_punctuation <- function(str){\n  gsub(\"[[:punct:] ]+\", \"\", str)\n}\n\nstr <- \"Hello, World.\"\n\nprint(remove_punctuation(str))", "category": "Python"}, {"instruction": "Create a JavaScript code to validate the syntax of a given string.", "input": "The given string is \"Hello world\".", "output": "// Function to validate a given string \nfunction validate(str) { \n    \n    // Regex pattern to check if the string has any special characters \n    let strRegex = /^[A-Za-z]+$/; \n  \n    // Check if the string is valid \n    if(strRegex.test(str)) { \n        return true; \n    } \n    else { \n        return false; \n    } \n} \n  \n// String to be validated \nlet str = \"Hello world\"; \n  \n// Function call \nlet result = validate(str); \n  \n// Print the result \nconsole.log(result);", "category": "Python"}, {"instruction": "Write a code in Ruby to convert an array of integers into a string.", "input": "The given array is [1,2,3,4,5].", "output": "def convert_integers_to_string(array)\n  array.map(&:to_s).join(', ')\nend\n\narray = [1,2,3,4,5]\nputs convert_integers_to_string(array)", "category": "Python"}, {"instruction": "Determine the number of columns and rows in a given 2D array.", "input": "The given 2D array is [[1,2,3], [4,5,6]].", "output": "// Function to determine the \n// number of columns and rows in a 2D array \nvoid getSize(int matrix[2][3]) \n{ \n\tint row = sizeof(matrix) / sizeof(matrix[0]); \n\tint column = sizeof(matrix[0]) / sizeof(matrix[0][0]);\t \n\t\n\t// Print the number of rows and columns \n\tcout << \"The number of rows is : \" << row << endl; \n\tcout << \"The number of columns is : \" << column; \n}", "category": "Python"}, {"instruction": "Write a code in SQL to create a database table that stores the names and scores of students in a class.", "input": "", "output": "CREATE TABLE students ( \n    name VARCHAR(50), \n    score INT\n);", "category": "Python"}, {"instruction": "Create a code in C++ to search for a user input word in an array.", "input": "The user input word is \"apple\".", "output": "#include <iostream> \n#include <algorithm>  \n\nusing namespace std; \n\nint SearchWord(string arr[], string target, int n) \n{ \n\tint index = -1; \n\n\tfor (int i = 0; i < n; i++) { \n\t\tif (arr[i] == target) { \n\t\t\tindex = i; \n\t\t\tbreak; \n\t\t} \n\t} \n\treturn index; \n} \n\nint main() \n{ \n\tstring arr[20] = { \"apple\", \"banana\", \"grapes\", \"mango\", \"orange\" }; \n\tstring target = \"apple\"; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tint index = SearchWord(arr, target, n); \n\tif (index != -1) \n\t\tcout << \"Found at index: \" << index; \n\telse\n\t\tcout << \"Not found\"; \n\treturn 0; \n}", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code using the shorthand property syntax:", "input": "var x = 5;\nvar y = 10;\nvar obj = {x:x, y:y};", "output": "var x = 5;\nvar y = 10;\nvar obj = {x, y};", "category": "Python"}, {"instruction": "Write a SQL query to find the number of employees in the Department table with a salary greater than 50,000.", "input": "", "output": "SELECT COUNT(*) \nFROM Department\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Create an AJAX request in JavaScript to retrieve data from the following URL: http://www.example.com/data.", "input": "", "output": "var xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n        //Action to be performed when the document is read;\n    }\n};\nxhttp.open(\"GET\", \"http://www.example.com/data\", true);\nxhttp.send();", "category": "Python"}, {"instruction": "Use the .filter() function to find all even numbers from an array of numbers: [3, 5, 10, 7, 8, 11].", "input": "[3, 5, 10, 7, 8, 11]", "output": "[3, 5, 10, 7, 8, 11].filter(x => x % 2 == 0) \n  // Output: [10, 8]", "category": "Python"}, {"instruction": "Create a function \"percentage\" that calculates the percentage to solve the following problem:", "input": "amount = 5\ntotal = 10", "output": "def percentage(amount, total):\n    return (amount * 100) / total", "category": "Python"}, {"instruction": "Using numpy, write a function to check if a given matrix is symmetric.", "input": "my_matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "output": "import numpy as np \n\ndef check_symmetric(matrix):\n    matrix_np = np.array(matrix)\n    return np.array_equal(matrix_np, matrix_np.T)", "category": "Python"}, {"instruction": "Modify the following function to ensure that the number is always greater than zero.", "input": "def get_random_number():\n    return random.randint(-10, 10)", "output": "import random \n\ndef get_random_number():\n    num = random.randint(-10, 10)\n    if num < 0:\n        num = -num\n    return num", "category": "Python"}, {"instruction": "Create a regular expression to extract a string of 8 alphanumeric characters.", "input": "", "output": "import re \n\nmy_regex = re.compile(r'[a-zA-Z0-9]{8}')", "category": "Python"}, {"instruction": "Identify the data structure usage in the following code.", "input": "filenames = ['/home/user/project_data/sample_1.json', '/home/user/project_data/sample_2.json']", "output": "The data structure used in the code is a list. The list contains two elements - strings which are the filenames of the json files.", "category": "Python"}, {"instruction": "Specify an appropriate condition that limits the set of documents produced based on the given context.", "input": "In a newsreader application, train a classifier to pull out only the articles about current world news.", "output": "The condition for the classifier should be to limit the set of documents to those where the topics include current events in the world.", "category": "Python"}, {"instruction": "Write a query to select the first 3 characters of every row from a column called 'name' from a PostgreSQL table.", "input": "", "output": "SELECT SUBSTRING(name, 1, 3) FROM table_name;", "category": "Python"}, {"instruction": "Create a new table using SQL called 'products' with 3 columns (name,price,category).", "input": "", "output": "CREATE TABLE products (\n\tname VARCHAR(255),\n\tprice DECIMAL,\n\tcategory VARCHAR(255)\n);", "category": "Python"}, {"instruction": "Write a JavaScript function to compare two numbers and return a boolean value.", "input": "", "output": "function compareNumbers(num1, num2) {\n  if (num1 < num2) {\n    return true;\n  } else {\n    return false;\n  }\n}", "category": "Python"}, {"instruction": "Which of the following type is used to store characters in memory?", "input": "", "output": "The data type used to store characters in memory is the character data type, also known as the char type in most programming languages.", "category": "Python"}, {"instruction": "What is an example of a multi-dimensional array?", "input": "", "output": "An example of a multi-dimensional array is a two-dimensional array, which is an array of arrays. For example:\n\nvar array = [[1,2,3], [4,5,6], [7,8,9]];", "category": "Python"}, {"instruction": "Design a basic color palette for a website with five colors.", "input": "", "output": "A basic color palette for a website could consist of the following colors: white (#FFFFFF), black (#000000), navy blue (#000080), beige (#F3F3F3), and light blue (#AFEBE6).", "category": "Python"}, {"instruction": "Create an array of unique values in JavaScript from the given array.", "input": "[1, 2, 3, 1, 2]", "output": "let array = [1, 2, 3, 1, 2];\nlet uniqueArray = [...new Set(array)];\nconsole.log(uniqueArray); // [1, 2, 3]", "category": "Python"}, {"instruction": "Create a MongoDB collection named \"users\" with 2 fields called \"name\" and \"age\".", "input": "", "output": "db.createCollection(\"users\", {\n  validator: {\n    $and: [\n      {name: { $type: \"string\" } },\n      {age: { $type: \"int\" } }\n    ]\n  }\n});", "category": "Python"}, {"instruction": "Create a program that prints out triangle of stars.", "input": "", "output": "def print_triangle(n):\n    for i in range(1, n * 2): \n        for j in range(1, i + 1): \n            print(\"*\", end = \" \")\n        print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to parse the following JSON into a dictionary", "input": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}", "output": "import json \n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return {key: data[key] for key in data}", "category": "Python"}, {"instruction": "Given a list of names, capitalize the first letter of each name.", "input": "names = [\"john\", \"sarah\", \"joe\", \"dave\"]", "output": "def capitalize_names(names):\n    capitalized_names = []\n    for name in names:\n        capitalized_name = name[0].upper() + name[1:]\n        capitalized_names.append(capitalized_name)\n    return capitalized_names", "category": "Python"}, {"instruction": "Write a code to generate a random password consisting of 8 characters with atleast one lowercase letter, one uppercase letter and one number.", "input": "", "output": "import string\nimport random \n\ndef generate_password():\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(8))\n    if not any(char.islower() for char in password):\n        password = password[:7] + random.choice(string.ascii_lowercase)\n    if not any(char.isupper() for char in password):\n        password = password[:7] + random.choice(string.ascii_uppercase)\n    if not any(char.isdigit() for char in password):\n        password = password[:7] + random.choice(string.digits)\n    return password", "category": "Python"}, {"instruction": "Explain in your own words what APIs are.", "input": "", "output": "APIs (Application Programming Interfaces) are an interface that allow two or more pieces of software to communicate with each other. They allow programs to access or modify data and resources of another program or database in a structured way, and make it easier to integrate different systems.", "category": "Python"}, {"instruction": "Let n1 and n2 be two positive integers.What is the result of n1 % n2", "input": "n1 = 8\nn2 = 5", "output": "The result of n1 % n2 is 3.", "category": "Python"}, {"instruction": "Write a function in Python to check if a string consists of only alphabetic characters.", "input": "", "output": "def check_alphabetic(s):\n    for c in s:\n        if not c.isalpha():\n            return False\n    return True", "category": "Python"}, {"instruction": "Remove the given function from the code and replace it with a lambda expression.", "input": "def multiply_by_two(x):\n   return x * 2", "output": "multiply_by_two = lambda x: x * 2", "category": "Python"}, {"instruction": "Write a JavaScript program to create a random string of 10 characters.", "input": "", "output": "function getRandomString() {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomstring = '';\n    for (var i=0; i<10; i++) {\n        var rnum = Math.floor(Math.random() * chars.length);\n        randomstring += chars.substring(rnum,rnum+1);\n    }\n    return randomstring;\n}", "category": "Python"}, {"instruction": "Write a function that takes two numbers as inputs and returns the larger number.", "input": "", "output": "def max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Determine if a given number is prime using Python.", "input": "Input: 20", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\nis_prime(20)\n\n# Output:\nFalse", "category": "Python"}, {"instruction": "Write SQL code to select records from a table whose ID is greater than 200.", "input": "", "output": "SELECT * \nFROM table \nWHERE ID > 200;", "category": "Python"}, {"instruction": "Search the string for duplicates and remove them.", "input": "Input: \"googleeee\"", "output": "def remove_duplicates(str):\n    result = \"\"\n    for i in str:\n        if i not in result:\n            result += i\n    return result\n\nremove_duplicates(\"googleeee\")\n\n# Output:\n\"gole\"", "category": "Python"}, {"instruction": "Convert the following array to a dictionary using Python.", "input": "[('A', 5), ('B', 3), ('C', 4), ('D', 7)]", "output": "def to_dictionary(arr):\n    dict = {}\n    for i in arr:\n        dict[i[0]] = i[1]\n    return dict\n\nto_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])\n\n# Output:\n{'A': 5, 'B': 3, 'C': 4, 'D': 7}", "category": "Python"}, {"instruction": "Write code to sort a given array of strings.", "input": "[\"cat\", \"dog\", \"bird\", \"fish\"]", "output": "def sort_array(arr):\n    arr.sort()\n    return arr\n\nsort_array([\"cat\", \"dog\", \"bird\", \"fish\"])\n\n# Output:\n[\"bird\", \"cat\", \"dog\", \"fish\"]", "category": "Python"}, {"instruction": "Determine if the given list is ascending or not.", "input": "List: [5, 4, 3, 9, 8]", "output": "False", "category": "Python"}, {"instruction": "Given a string, concatenate the first and last character of the string together.", "input": "String: Grass", "output": "gs", "category": "Python"}, {"instruction": "Create a function to refresh a web page until an element with the given ID becomes visible.", "input": "body", "output": "def refresh_until_visible(element_id):\n    timeout = 0\n    while timeout < 10:\n        if document.getElementById(element_id).style.visibility == 'visible':\n            return\n        Location.reload()\n        timeout += 1", "category": "Python"}, {"instruction": "Create a program that counts the number of words in a sentence.", "input": "", "output": "def word_count(sentence):\n    words = sentence.split() \n    return len(words)", "category": "Python"}, {"instruction": "Create a function to find the sum of all the multiples of 3 or 5 below 1000.", "input": "", "output": "def sum_multiples():\n    sum = 0\n    for num in range(1000):\n        if num % 3 == 0 or num % 5 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Create a function to search a list of numbers and return the first index of the searched number, or -1 if the number does not exist.", "input": "[1,2,3], 3", "output": "def linear_search(array, num):\n    for index, element in enumerate(array):\n        if element == num:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Write a code that takes in a string and returns the total count of each letter of the alphabet it contains.", "input": "example123", "output": "def letter_count(string):\n    string = string.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    counts = {letter: 0 for letter in alphabet}\n    \n    for letter in string:\n        if letter in alphabet:\n            counts[letter] += 1\n    \n    return counts", "category": "Python"}, {"instruction": "Create a code to generate a unique 7-character string of random numbers and letters.", "input": "", "output": "import random, string\n\ndef random_string():\n    random_str = ''.join([random.choice(string.ascii_letters + string.digits) for i in range(7)])\n    return random_str", "category": "Python"}, {"instruction": "Create an HTML form to display a list of countries and its corresponding capital.", "input": "<list of countries and corresponding capitals>", "output": "<form>\n  <select>\n    <option value=\"-1\">--- select country ---</option>\n    <option value=\"India\">India - Delhi</option> \n    <option value=\"China\">China - Beijing</option>\n    <option value=\"USA\">USA - Washington D.C.</option>\n    <option value=\"Australia\">Australia - Canberra</option>\n  </select>\n</form>", "category": "Python"}, {"instruction": "Create a Python script to scrape all links from a web page.", "input": "<link to web page>", "output": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('<link to web page>')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Usage\nprint(links)", "category": "Python"}, {"instruction": "Identify the data type for this expression: \"Hello World!\"", "input": "", "output": "The data type for this expression \"Hello World!\" is a string.", "category": "Python"}, {"instruction": "Edit the given code to remove compile time error.", "input": "def add_two_numbers(a, b):\n    return a b", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Rewrite this query using OR operator.", "input": "SELECT * FROM customers WHERE country = \"USA\" AND state = \"NC\"", "output": "SELECT * FROM customers WHERE country = \"USA\" OR state = \"NC\"", "category": "Python"}, {"instruction": "What is the result of this expression?", "input": "2 ** 3", "output": "The result of this expression is 8.", "category": "Python"}, {"instruction": "Create a class called \"BankAccount\" in Java with instance variables for the account number, name, and balance.", "input": "", "output": "public class BankAccount {\n    private int accountNumber;\n    private String name;\n    private double balance;\n    \n    // Getter and setter methods\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n \n    public void setAccountNumber(int accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public double getBalance() {\n        return balance;\n    }\n \n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n }", "category": "Python"}, {"instruction": "List the four basic types of loops in JavaScript.", "input": "", "output": "The four basic types of loops in JavaScript are the for loop, for-in loop, for-of loop, and the while loop.", "category": "Python"}, {"instruction": "Name the most common relational database management systems.", "input": "", "output": "The most common relational database management systems are MySQL, Oracle Database, Microsoft SQL Server, PostgreSQL, and IBM DB2.", "category": "Python"}, {"instruction": "Write a for loop in Python to print the first 10 even numbers.", "input": "", "output": "for i in range(2, 21, 2): \n    print(i)", "category": "Python"}, {"instruction": "Using a loop, output all the even numbers up to the given number n.", "input": "n = 10;", "output": "for i in range(2,n+1,2):\n  print(i)\n\n// Output: 2,4,6,8,10", "category": "Python"}, {"instruction": "Write a shell script to output a given string to the console.", "input": "string = \"Hello World\";", "output": "echo $string", "category": "Python"}, {"instruction": "Write an algorithm in Python to search for the first non-repeating element in a given array.", "input": "array = [4,6,4,1,8,6,44,21];", "output": "def find_non_repeating(array):\n  for i in array:\n    if array.count(i) == 1:\n      return i\n  \nfind_non_repeating(array); // Output: 1", "category": "Python"}, {"instruction": "Create an HTML form with two inputs, one to enter a first name and another to enter a last name.", "input": "", "output": "<form>\n  <label>First name:</label>\n  <input type=\"text\" name=\"firstname\" />\n  <br><br>\n  <label>Last name:</label>\n  <input type=\"text\" name=\"lastname\" />\n  <br><br>\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}]
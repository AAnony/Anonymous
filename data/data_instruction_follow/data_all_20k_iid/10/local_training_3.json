[{"instruction": "Split the sentence into individual words using Python.", "input": "sentence = \"This sentence needs to be split.\"", "output": "words = sentence.split(' ')\nprint(words)\n# Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']", "category": "Python"}, {"instruction": "Write a CSS style sheet to change the background color of the webpage to blue.", "input": "", "output": "body {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Edit the HTML structure shown below to include a form tag with an input for a user's name.", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n <form>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name here\">\n </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Use SQL to count the number of orders for each product listed in the following table.", "input": "Table: orders \n\n| order_id | customer_id | product_name | price |\n| -------- | ----------- | ------------ | ----- | \n| 1        | 123         | TV           | 500   | \n| 2        | 123         | Keyboard     | 80    |\n| 3        | 124         | Mouse        | 50    |", "output": "SELECT product_name, COUNT(*) as num_orders \nFROM orders \nGROUP BY product_name;", "category": "Python"}, {"instruction": "Create a function in Ruby that calculates the sum of all numbers in an array.", "input": "arr = [1, 2, 3]", "output": "def sum_arr(arr) \n  return arr.inject(0, :+) \nend", "category": "Python"}, {"instruction": "Write a SQL query to produce a list of customer names from the following table.", "input": "Table: customers \n\n| customer_id | name |\n|  --------- | ----- | \n| 1          | Bill |\n| 2          | Jane |\n| 3          | John |", "output": "SELECT name FROM customers;", "category": "Python"}, {"instruction": "Find the most frequent word in the following paragraph.", "input": "The quick brown fox jumps over the lazy dog.", "output": "the", "category": "Python"}, {"instruction": "Use SQL to extract the customer name, order date, and price from the following table.", "input": "Table: orders \n\n| order_id | customer_id | product_name | price | order_date | \n| -------- | ----------- | ------------ | ----- | ---------- | \n| 1        | 123         | TV           | 500   | 2019-01-01 | \n| 2        | 123         | Keyboard     | 80    | 2019-01-05 | \n| 3        | 124         | Mouse        | 50    | 2019-02-01 |", "output": "SELECT \n    c.name as customer_name, \n    o.price, \n    o.order_date \nFROM orders o \nINNER JOIN customers c \n    on o.customer_id = c.customer_id;", "category": "Python"}, {"instruction": "Create a class in Java that stores name, age, and height as input fields.", "input": "", "output": "public class Person {\n   private String name;\n   private int age;\n   private double height;\n\n   public Person(String name, int age, double height) {\n      this.name = name;\n      this.age = age;\n      this.height = height;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n\n   public int getAge() {\n      return age;\n   }\n\n   public void setAge(int age) {\n      this.age = age;\n   }\n\n   public double getHeight() {\n      return height;\n   }\n\n   public void setHeight(double height) {\n      this.height = height;\n   }\n}", "category": "Python"}, {"instruction": "Create a Java function that converts a string to a decimal.", "input": "String numString = \"123.45\";", "output": "public static double stringToDecimal(String numString) {\n   double result = 0;\n\n   String[] tokens = numString.split(\"\\\\.\");\n   result += Integer.parseInt(tokens[0]);\n   \n   int power = 1;\n   for (int i = tokens[1].length(); i > 0; i--) {\n        power *= 10;\n        result += Integer.parseInt(tokens[1].charAt(i - 1) +\"\") * 1.0 / power;\n   }\n\n   return result;\n}", "category": "Python"}, {"instruction": "Code a program to delete a given element from an array.", "input": "[1, 3, 5, 7], {element: 3}", "output": "def delete_element(array, element):\n element_index = array.index(element)\n del array[element_index]\n return array", "category": "Python"}, {"instruction": "Design a program to find the fibonacci number at the given position in the sequence.", "input": "", "output": "def fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Develop a code to check if a given array is sorted or not.", "input": "[1, 2, 4, 3]", "output": "def is_sorted(array):\n for i in range(len(array)-1):\n if array[i] > array[i+1]:\n return False\n return True", "category": "Python"}, {"instruction": "Code a program to display the prime factors of a number.", "input": "30", "output": "def find_prime_factors(n):\n prime_factors = []\n for i in range(2, n + 1):\n if n % i == 0:\n if is_prime(i):\n prime_factors.append(i)\n return prime_factors\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Using the given list of numbers, find the sum of the numbers.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "total = 0\nfor num in numbers:\n    total += num\nprint('The sum of the numbers is:', total)\n# Output: The sum of the numbers is: 15", "category": "Python"}, {"instruction": "Create a while loop that prints each element in the list from the end.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "i = len(numbers) \nwhile i > 0: \n    print(numbers[i-1]) \n    i -= 1", "category": "Python"}, {"instruction": "Suggest a way to identify and remove duplicate elements from the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Set\nnumbers_set = set(numbers)\nnumbers_set = list(numbers_set)\nprint(numbers_set)\n# Output: [2, 3, 5, 8, 10]\n\n# Method 2 - Using Loop\nno_duplicate = [] \nfor num in numbers: \n    if num not in no_duplicate: \n        no_duplicate.append(num) \nprint(no_duplicate)\n# Output: [2, 3, 5, 8, 10]", "category": "Python"}, {"instruction": "Suggest a way to count the number of occurrences of each element in the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Dictionary\nnumber_dict = dict()\nfor num in numbers:\n    if num in number_dict:\n        number_dict[num] += 1\n    else:\n        number_dict[num] = 1\nprint(number_dict)\n# Output: {2: 2, 3: 2, 5: 1, 8: 1, 10: 1}\n\n# Method 2 - Using Counter\nfrom collections import Counter\nnumber_count = Counter(numbers)\nprint(number_count)\n# Output: Counter({2: 2, 3: 2, 5: 1, 8: 1, 10: 1})", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect anomalies in the given data.", "input": "Input a dataset containing two columns, temperature and pressure.", "output": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n    return data", "category": "Python"}, {"instruction": "Create a neural network in Python using the given input and output.", "input": "Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).", "output": "import numpy as np \nimport tensorflow as tf\n\n# Create the model \nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))\n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) \n\n# Create the input and output data \ninput_data = np.array([[x1, x2, x3]])\noutput_data = np.array([[y1, y2]])\n\n# Train the model \nmodel.fit(input_data, output_data, epochs=100)", "category": "Python"}, {"instruction": "Translate this piece of C++ code into Java.", "input": "int num = 10;\nfor (int i = 0; i < num; i++) {\n    num++;\n}", "output": "int num = 10;\nfor (int i = 0; i < num; i++) {\n    num++;\n}\n// translated to Java:\nint num = 10;\nfor (int i = 0; i < num; i++) {\n    num++;\n}", "category": "Python"}, {"instruction": "Develop a program to encode and decode a given string.", "input": "Input a string s to be encoded.", "output": "def encode(s): \n    encoded_str = \"\" \n    for i in s: \n        encoded_str += str(ord(i)) \n  \n    return encoded_str \n  \ndef decode(s): \n    decoded_str = \"\" \n    for i in range(0, len(s), 2): \n        decoded_str += chr(int(s[i:i+2])) \n  \n    return decoded_str", "category": "Python"}, {"instruction": "Debug this JavaScript code.", "input": "function mysteryFunction(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}", "output": "function mysteryFunction(x) {\n    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Identify the output of this snippet of C code.", "input": "int x = 10, y = 5;\nint z = (x * y) - 15;", "output": "The output of this snippet of C code is z = 25.", "category": "Python"}, {"instruction": "Create a class in Java called 'Circle' that stores information about a circle's radius and calculate the area.", "input": "", "output": "public class Circle {\n   \n    public double radius;\n   \n  public Circle(double radius) {\n      this.radius = radius;\n  }\n  public double getArea() {\n      return Math.PI * Math.pow(radius, 2);\n  }\n}", "category": "Python"}, {"instruction": "Write a function to encode a given string using ROT13 cipher.", "input": "String: Hello world", "output": "def rot13(string):\n    encoded = \"\"\n    for char in string:\n        if char.isalpha():\n            ascii_val = ord(char)\n            ascii_val += 13\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encoded += chr(ascii_val)\n        else:\n            encoded += char\n    return encoded", "category": "Python"}, {"instruction": "Use the function \"randint()\" to generate a random number between 1 and 10 in Python.", "input": "", "output": "from random import randint\nrandom_num = randint(1,10)\nprint(random_num)", "category": "Python"}, {"instruction": "Generate a new class from the given prototype.", "input": "class Prototype {\n\tpublic String name;\n\tpublic int age;\n\tpublic String gender;\n\t\n\tpublic Prototype(String name, int age, String gender) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.gender = gender;\n\t}\n}", "output": "class Person extends Prototype {\n\tpublic String address;\n\tpublic String phone;\n\t\n\tpublic Person(String name, int age, String gender, String address, String phone) {\n\t\tsuper(name, age, gender);\n\t\tthis.address = address;\n\t\tthis.phone = phone;\n\t}\n}", "category": "Python"}, {"instruction": "Edit this method to return an array of palindromes.", "input": "public static String[] findPalindromes(String[] words) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() >= 2) {\n            result.add(word);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}", "output": "public static String[] findPalindromes(String[] words) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() >= 2 && isPalindrome(word)) {\n            result.add(word);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}  \n\npublic static boolean isPalindrome(String str) {\n    int left = 0;\n    int right = str.length()-1;\n    \n     while (left < right) { \n        if (str.charAt(left) != str.charAt(right)) \n            return false; \n  \n        left++; \n        right--; \n    } \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Calculate the sum of these two numbers in assembly language.", "input": "x = 27, y = 11", "output": "mov ax, 27    ; put x = 27 in ax\nmov bx, 11    ; put y = 11 in bx\nadd ax, bx    ; add ax and bx, sum is stored in ax\n; ax = 38", "category": "Python"}, {"instruction": "Generate a class for a Student object in Java.", "input": "", "output": "public class Student {\n\n\tprivate String name;\n\tprivate String id;\n\tprivate String email;\n\tprivate String major;\n\t\n\tpublic Student(String name, String id, String email, String major) {\n\t\tthis.name = name;\n\t\tthis.id = id;\n\t\tthis.email = email;\n\t\tthis.major = major;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\n\tpublic String getMajor() {\n\t\treturn major;\n\t}\n\n\tpublic void setMajor(String major) {\n\t\tthis.major = major;\n\t}\n\n}", "category": "Python"}, {"instruction": "Convert this expression in to postfix notation.", "input": "A + B * C", "output": "ABC*+", "category": "Python"}, {"instruction": "Return how many characters are in the following string.", "input": "word = \"Hello\"", "output": "length = len(word)\nprint(length)\n# Output: 5", "category": "Python"}, {"instruction": "Create a function that sorts a list of dictionaries using the values.", "input": "animals = [{\"name\": \"Dog\", \"age\": 5}, {\"name\": \"Cat\", \"age\": 3}, \n           {\"name\": \"Fish\", \"age\": 1}, {\"name\": \"Deer\", \"age\": 8}]", "output": "def sort_dict_list(animals):\n    sorted_animals = sorted(animals, key=lambda k: k['age'])  \n    return sorted_animals\n\nresult = sort_dict_list(animals)\nprint(result)\n# Output: [{'name': 'Fish', 'age': 1}, {'name': 'Cat', 'age': 3}, {'name': 'Dog', 'age': 5}, {'name': 'Deer', 'age': 8}]", "category": "Python"}, {"instruction": "Write a SQL query to output the IDs of all employees working in the same department as employee with ID 10.", "input": "", "output": "SELECT id FROM Employees\nWHERE department= (SELECT department FROM Employees WHERE id=10);", "category": "Python"}, {"instruction": "Tell us the outputs of the following code block.", "input": "a = 5\nb = 10\n\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a is equal to b\")\nelse:\n    print('a is lesser than b')", "output": "a is lesser than b", "category": "Python"}, {"instruction": "Write code to parse a given IP address into its octets.", "input": "IP address: 10.23.6.17", "output": "def parse_ip_address(ip):\n    octets = ip.split(\".\")\n    return octets", "category": "Python"}, {"instruction": "Create a function to print out a FizzBuzz pattern for a given number range.", "input": "Number range: 5-20", "output": "def fizzbuzz_pattern(n):\n    for num in range(n, n+16):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Create an Angular Directive for a text box that alerts when its contents change.", "input": "", "output": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n selector: '[appNotifyOnChange]'\n})\nexport class NotifyOnChangeDirective {\n constructor(private el: ElementRef) { }\n\n@HostListener('input', ['$event'])\nonChange(event) {\n alert('Value changed to: ' + event.target.value);\n}\n}", "category": "Python"}, {"instruction": "How can you implement a Bubble Sort algorithm in Java?", "input": "", "output": "public class BubbleSort {\n \n public static void sort(int[] arr) {\n  int n = arr.length;\n  int temp;\n \n  for(int i = 0; i < n - 1; i++) {\n   for (int j = 0; j < n - i - 1; j++) {\n    if (arr[j] > arr[j+1]) {\n     // Swap the elements\n     temp = arr[j];\n     arr[j] = arr[j+1];\n     arr[j+1] = temp;\n    }\n   }\n  }\n }\n}", "category": "Python"}, {"instruction": "Write a SQL query that finds all the albums released before 1990.", "input": "Table name: Albums", "output": "SELECT * FROM Albums WHERE date_released < 1990;", "category": "Python"}, {"instruction": "Give a few examples of when to use a Stack data structure.", "input": "", "output": "A stack data structure can be used for a variety of tasks, such as for traversal of a recursive object, storing and retrieving data from a history buffer, expression evaluation, and undo and redo operations. Another common use case is storage of a continuous stream of data, such as a rolling list of recent purchases.", "category": "Python"}, {"instruction": "Create a program that takes in a list of numbers and returns the product of all the elements in the list.", "input": "[2, 4, 10, 5]", "output": "def product(nums):\n  total = 1\n  for num in nums:\n    total *= num\n  return total", "category": "Python"}, {"instruction": "Create a web page that uses CSS to style a given piece of text.", "input": "", "output": "<html>\n  <head>\n    <style>\n      p {\n        font-size: 16px;\n        font-family: Arial, sans-serif;\n        color: #333;\n      }\n\n      .bold {\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <p class=\"bold\">Hello World!</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to sort the customers in the table 'customers' alphabetically by their last name.", "input": "", "output": "SELECT * FROM customers\nORDER BY last_name;", "category": "Python"}, {"instruction": "Write a Java program that takes an array of integers and returns the number of zeros in the array.", "input": "[4, 0, 2, 4, 0, 0]", "output": "public static int countZeroes(int[] data) {\n  int count = 0;\n  for (int i : data) {\n    if (i == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}", "category": "Python"}, {"instruction": "Create a HTML page that has a table displaying the names, phone numbers and email addresses of 5 employees.", "input": "", "output": "<html>\n <head>\n  <title>Employees</title>\n </head>\n <body>\n  <h1>Employees</h1>\n  <table>\n   <tr>\n    <th>Name</th>\n    <th>Phone</th>\n    <th>Email</th>\n   </tr>\n   <tr>\n    <td>John Doe</td>\n    <td>123-456-7890</td>\n    <td>john.doe@example.com</td>\n   </tr>\n   <tr>\n    <td>Jane Doe</td>\n    <td>123-456-0987</td>\n    <td>jane.doe@example.com</td>\n   </tr>\n   <tr>\n    <td>Jeff Smith</td>\n    <td>123-456-7654</td>\n    <td>jeff.smith@example.com</td>\n   </tr>\n   <tr>\n    <td>Lauren Anderson</td>\n    <td>123-456-8201</td>\n    <td>lauren.anderson@example.com</td>\n   </tr>\n   <tr>\n    <td>David Johnson</td>\n    <td>123-456-8321</td>\n    <td>david.johnson@example.com</td>\n   </tr>\n  </table>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to find all customers in the table 'customers' who have bought more than 3 items from the store.", "input": "", "output": "SELECT customer_name FROM customers WHERE order_count > 3;", "category": "Python"}, {"instruction": "Write a function to reverse the elements of a list without creating a new list.", "input": "", "output": "def reverse_inplace(numbers):\n    start = 0\n    end = len(numbers) - 1\n    while start < end:\n        numbers[start], numbers[end] = numbers[end], numbers[start]\n        start += 1\n        end -= 1", "category": "Python"}, {"instruction": "Compute the total number of words in the given sentence.", "input": "This is a test sentence", "output": "def count_words(sentence):\n    words = sentence.split()\n    return len(words)", "category": "Python"}, {"instruction": "Create a function to filter out any strings containing the word \"the\" from a list of strings.", "input": "", "output": "def filter_the(string_list):\n    filtered_list = []\n    for string in string_list:\n        if \"the\" not in string:\n            filtered_list.append(string)\n    return filtered_list", "category": "Python"}, {"instruction": "Create a function to remove all the characters in a string except a-z, A-Z and 0-9.", "input": "", "output": "def remove_non_alphanumeric(string):\n    filtered_string = \"\"\n    for char in string:\n        if char.isalnum():\n            filtered_string += char\n    return filtered_string", "category": "Python"}, {"instruction": "Name a few use cases of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks are widely used in domains such as computer vision, natural language processing, pattern recognition, time series analysis, audio processing, object recognition and classification, and for other tasks such as image segmentation, automated image captioning, image deblurring, object detection and tracking.", "category": "Python"}, {"instruction": "What is the role of the React Life Cycle Method componentDidMount?", "input": "", "output": "The componentDidMount() method is a life cycle method in React which is called after the component is mounted and the component is loaded into the DOM. This method can be used to start timers, initialize the state, fetch data, and other components. It is invoked once all the DOM elements of the component are rendered, and the component is loaded into the browser DOM.", "category": "Python"}, {"instruction": "How can you create a function in MATLAB that adds two vectors?", "input": "Vectors: A=[1,2,3] and B=[4,5,6]", "output": "function [C]=addVectors(A,B)\n    C=A+B;\nend", "category": "Python"}, {"instruction": "How can you access elements in a multi-dimensional array in JavaScript?", "input": "", "output": "Accesing elements of the array can be done by using the index of the array. For example, for a two-dimensional array, the elements can be accessed using the following syntax: array[i][j], where i is the index of the outer array, and j is the index of the inner array. For a three-dimensional array, the syntax would be array[i][j][k].", "category": "Python"}, {"instruction": "Write code to convert a given hexadecimal string to a binary string.", "input": "Hexadecimal string: 7468", "output": "def hex_to_bin(hexadecimal_str):\n    return bin(int(hexadecimal_str, 16))[2:] # [2:] removes 0b from the start", "category": "Python"}, {"instruction": "Write code to return a list of prime numbers in the given range.", "input": "Start: 10. End: 15", "output": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n    \n# print list of prime numbers\nprint(get_prime_numbers(10, 15))  \n# Output: [11, 13, 15]", "category": "Python"}, {"instruction": "Write a SQL query to find the first ten customers by their joining date.", "input": "", "output": "SELECT * \nFROM customers\nORDER BY joining_date ASC\nLIMIT 10;", "category": "Python"}, {"instruction": "Create a function which takes a string and invokes all the print statements within the string.", "input": "string = \"Hello, World!\nHello, Python!\"", "output": "def invoke_print_statements(string):\n    exec(string) \n    \n# Driver Code \nif __name__ == '__main__': \n    string = \"print('Hello, World!')\\nprint('Hello, Python!')\"\n    invoke_print_statements(string)", "category": "Python"}, {"instruction": "Write a SQL query to find the countries which have population more than 10 million.", "input": "", "output": "SELECT Country, Population \nFROM world\nWHERE Population > 10000000 \nORDER BY Country;", "category": "Python"}, {"instruction": "For a given array of integers, write a function to find the mean.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n    \n# Driver Code \nif __name__ == '__main__': \n    arr = [1, 2, 3, 4, 5]\n    mean = calculate_mean(arr)\n    print(\"Mean for given array is:\", mean)", "category": "Python"}, {"instruction": "Calculate the number of anagrams present in a given string.", "input": "string = \"listen\"", "output": "def calculateAnagrams(string): \n   \n    # Create a list of all permutations \n    all_permutations = [''.join(i) for i in permutations(string)] \n   \n    # Return the count of all permutations \n    return len(all_permutations) \n  \n# Driver code \nprint(calculateAnagrams('listen'))", "category": "Python"}, {"instruction": "Write a function to generate the next line of Pascal's Triangle given the parent line.", "input": "Parent line: [1, 2, 1]", "output": "def next_pascals_triangle(parent):\n    next_line = [1]\n    for i in range(len(parent)-1):\n        next_line.append(parent[i] + parent[i+1])\n    next_line.append(1)\n    return next_line", "category": "Python"}, {"instruction": "Write an algorithm to check whether a given word is palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    # reverse the string \n    rev_str = str[::-1] \n  \n    # if string is equal then return true \n    if rev_str == str: \n        return True\n    return False", "category": "Python"}, {"instruction": "Write a CSS code for setting the font of all h1 elements to 'sans-serif'.", "input": "", "output": "h1 {\n font-family: 'sans-serif';\n}", "category": "Python"}, {"instruction": "Create an Angular component to display an \"about us\" page.", "input": "", "output": "@Component({\n selector: \"app-about-us\",\n templateUrl: \"./about-us.component.html\"\n})\nexport class AboutUsComponent{\n\n}", "category": "Python"}, {"instruction": "Write SQL query to find all employee names who work in the IT department.", "input": "", "output": "SELECT name FROM employees WHERE department = 'IT';", "category": "Python"}, {"instruction": "Write a React.js component to render a simple button.", "input": "", "output": "const SimpleButton = () => { \n return ( \n  <button>Click Me!</button> \n ) \n} \nReactDOM.render(<SimpleButton />, document.getElementById(\"root\"));", "category": "Python"}, {"instruction": "Create a class structure in Java for an Employee object.", "input": "", "output": "public class Employee {\n    private int id;\n    private String name;\n    private double salary;\n\n    // default constructor\n    public Employee() {\n    }\n\n    // parameterized constructor\n    public Employee(int id, String name, double salary) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.salary = salary;\n    }\n\n    // getters and setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n}", "category": "Python"}, {"instruction": "Write an SQL query that finds the total revenue for each month.", "input": "Table name: orders", "output": "SELECT MONTH(order_date) AS month, SUM(total_price) total_revenue\nFROM orders\nGROUP BY MONTH(order_date)", "category": "Python"}, {"instruction": "Describe the Heap Sort algorithm.", "input": "", "output": "Heap Sort is a comparison-based sorting algorithm in which the data is organized into a heap data structure. The heap is then sorted increasingly by repeatedly removing the root element, swapping it with the last element in the heap, and heapifying the remaining elements. It has an average complexity of O(n log n).", "category": "Python"}, {"instruction": "Create a Node.js server that responds with \"Hello World!\" when the URL \"/\" is accessed.", "input": "", "output": "const http = require('http');\n\nconst server = http.createServer(function (req, res) {\n  if(req.url == '/'){\n    res.writeHead(200);\n    res.end('Hello World!');\n  }\n});\n\nserver.listen(3000);", "category": "Python"}, {"instruction": "Complete the following code to find the longest word in the given string.", "input": "def longest_word(sentence):", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Determine whether the following statement returns true or false.", "input": "[1, 2, 3] > [4, 5, 6]", "output": "False", "category": "Python"}, {"instruction": "Rewrite the following function to optimize its performance.", "input": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if s in i:\n            output.append(i)\n    return output", "output": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if i.find(s) != -1 :\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Describe a procedure to multiply two numbers using Bash scripting.", "input": "", "output": "#!/bin/bash\n\n# store the input into variables\nnum1=$1\nnum2=$2\n\n# calculate the product\nproduct=$((num1*num2))\n\n# print the result\necho \"$num1 x $num2 = $product\"", "category": "Python"}, {"instruction": "Create a Ruby program to display elements of an array in the reverse order.", "input": "", "output": "def reverse_array(arr)\n  arr.reverse_each { |num| puts num }\nend", "category": "Python"}, {"instruction": "Create a program in C++ that converts Celsius temperature to Fahrenheit.", "input": "", "output": "#include<iostream>\n \nusing namespace std;\n \nint main()\n{\n    float celsius, fahrenheit;\n  \n    cout << \"Enter the temperature in Celsius: \";\n    cin >> celsius;\n \n    fahrenheit = (celsius * 9 / 5) + 32;\n \n    cout << \"The temperature in Fahrenheit is: \" << fahrenheit;\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the student's average marks in a particular course.", "input": "", "output": "SELECT student_name, AVG(student_marks)\nFROM student_table\nGROUP BY student_name", "category": "Python"}, {"instruction": "Create an API using Python which returns the number of words in a given string.", "input": "", "output": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/get_words_count\", methods=[\"GET\"])\ndef get_words_count():\n    sentence = request.args.get(\"sentence\")\n    words = sentence.split(\" \")\n    return jsonify({\"words_count\": len(words)})\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Implement a function in JavaScript which checks whether a number is prime or not.", "input": "", "output": "function isPrime(num) {\n    if (num <= 1) { \n        return false; \n    }\n    \n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Write a sql query to find the number of entries that have a null value in the 'age' column", "input": "", "output": "SELECT COUNT(*) FROM tableName\n    WHERE age IS NULL;", "category": "Python"}, {"instruction": "Compose an HTML webpage with a title and two paragraphs", "input": "", "output": "<html>\n    <head>\n        <title>Webpage Title</title>\n    </head>\n    <body>\n        <h1>Webpage Title</h1>\n        <p>Paragraph 1</p>\n        <p>Paragraph 2</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following code to sort the list of numbers in ascending order", "input": "let numbers = [3, 1, 2, 5, 4]", "output": "let numbers = [3, 1, 2, 5, 4]\n\nnumbers.sort(by: {$0 < $1})", "category": "Python"}, {"instruction": "Write a Python program to create a numerical addition table", "input": "", "output": "def addition_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i + j, end= \" \")\n        print()\n\naddition_table(10)", "category": "Python"}, {"instruction": "Answer the following true/false question", "input": "\"Every program executes instructions sequentially\"", "output": "true", "category": "Python"}, {"instruction": "Write a code snippet to check if the following text contains the word 'hello'.", "input": "text = \"This is a test message\"", "output": "if (text.includes(\"hello\")) {\n  console.log(\"The text contains the word 'hello'\");\n} else {\n  console.log(\"The text does not contain the word 'hello'\");\n}", "category": "Python"}, {"instruction": "Convert the following HTML into XML.", "input": "<hello>\n    <world>\n        <foo>bar</foo>\n    </world>\n</hello>", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<hello>\n    <world>\n        <foo>bar</foo>\n    </world>\n</hello>", "category": "Python"}, {"instruction": "Given the below array, find all the elements that are greater than 6.", "input": "arr = [3, 5, 8, 1, 9, 6]", "output": "let result = arr.filter(el => el > 6); \n// result is [8, 9]", "category": "Python"}, {"instruction": "Utilize Python to implement an algorithm which finds the largest number in an array.", "input": "", "output": "def largestNumber(arr): \n    max = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > max: \n            max = arr[i] \n    return max", "category": "Python"}, {"instruction": "Create a Java program which calculates the area of a circle.", "input": "", "output": "public class AreaCalculator {\n    public static final double PI = 3.14159;\n    \n\tpublic static double calculateArea(double radius) {\n\t\treturn PI * radius * radius;\n\t}\n    \n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(calculateArea(10));\n\t}\n}", "category": "Python"}, {"instruction": "Implement a function in C# to generate Fibonacci numbers.", "input": "", "output": "public static IEnumerable<int> GenerateFibonacciSequence() {\n    int prev = 0;\n    int current = 1;\n    yield return prev;\n    yield return current;\n    while (true) {\n        int temp = prev + current;\n        prev = current;\n        current = temp;\n        yield return current;\n    }\n}", "category": "Python"}, {"instruction": "Construct a SQL query to find all customers with a first name of \"John\" and a city of \"New York\".", "input": "", "output": "SELECT * from customers \nWHERE first_name = 'John' \nAND city = 'New York';", "category": "Python"}, {"instruction": "How to create an empty data frame in Pandas?", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame()", "category": "Python"}, {"instruction": "How can we use the list comprehension method in Python to reverse a given list of string?", "input": "list_of_strings = [\"cat\", \"dog\", \"rabbit\"]", "output": "reversed_list_of_strings = [string[::-1] for string in list_of_strings]", "category": "Python"}, {"instruction": "How can we generate a new HTML page with a given title tag in JavaScript?", "input": "title = \"My Page\"", "output": "const title = \"My Page\"\nconst newPage = `<html><head><title>${title}</title><head></html>`;", "category": "Python"}, {"instruction": "Write a for loop in C to subtract 100 from an array of numbers.", "input": "array = [150, 200, 250]", "output": "for(int i = 0; i < array.length; i++){\n    array[i] = array[i] - 100;\n}", "category": "Python"}, {"instruction": "Write a query to find users with a given age in MongoDB.", "input": "given_age = 20", "output": "db.users.find({age: given_age})", "category": "Python"}, {"instruction": "How can we use the reduce() function in JavaScript to find the sum of an array of numbers?", "input": "", "output": "const numbers = [10, 20, 30]\nconst sum = numbers.reduce((acc, val) => acc + val, 0)\nconsole.log(sum)", "category": "Python"}, {"instruction": "In Python, how can we calculate the mean of a numerical data set?", "input": "", "output": "def mean(data):\n    return sum(data) / len(data)", "category": "Python"}, {"instruction": "Given the following code, write a function to find the sum of all the numbers between 0 and n.", "input": "n = 5", "output": "function findSum(n){\n    let sum = 0;\n    for(let i = 0; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "category": "Python"}, {"instruction": "Given a stream of blog posts from a certain website, how would you filter out posts with more than 50 comments in Python?", "input": "stream_of_blog_posts = [{'title': 'post1', 'comments': 35}, {'title': 'post2', 'comments': 52}, {'title': 'post3', 'comments': 19}]", "output": "posts_with_more_than_50_comments = [post for post in stream_of_blog_posts if post['comments'] > 50]", "category": "Python"}, {"instruction": "What are the advantages of using MapReduce over Hadoop?", "input": "", "output": "The advantages of using MapReduce over Hadoop include: \n\n1. Charges less money due to its parallel processing capabilities. \n2. Can handle much larger data sets than Hadoop since it uses distributed computing paradigm. \n3. Increases in scalability and performance due to its ability to horizontally scale computing nodes. \n4. MapReduce jobs are easy to use and can handle various types of data. \n5. Allows for faster development of data processing applications.", "category": "Python"}, {"instruction": "Describe the differences between List, ArrayList, and Vector in Java.", "input": "", "output": "The main differences between List, ArrayList, and Vector are their memory utilization, synchronization, and thread safety . List is an interface that is the parent class of ArrayList and Vector. ArrayList is an unsynchronized collection, making it faster but not thread safe and Vector is a synchronized collection, making it slower but thread safe. Additionally, Vector has a capacity variable which is not available in an ArrayList, making it more memory efficient.", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to create an object with two properties, 'name' and 'age'.", "input": "", "output": "let person = {\n    name: 'John',\n    age: 25\n}", "category": "Python"}, {"instruction": "Why should you use functions in programming?", "input": "", "output": "Using functions in programming helps to break down complex tasks into more manageable pieces, which makes code easier to read and maintain. Functions also allow for the reuse of code, which can help to reduce overall development time and resources. Additionally, functions improve code organization and enable functions to be tested independently, making debugging easier.", "category": "Python"}, {"instruction": "Create a new array called 'arr2' by combining the elements of two existing arrays 'arr1' and 'arr2'. Both arrays should be of the same size.", "input": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]", "output": "arr2 = []\n\nfor i in range(len(arr1)):\n    arr2.append(arr1[i] + arr2[i])\n\nprint(arr2)", "category": "Python"}, {"instruction": "Name two differences between Strings and StringBuffer in Java.", "input": "", "output": "The two major differences between String and StringBuffer in Java are: \n\n1. String objects are immutable in nature whereas StringBuffer objects are mutable. \n2. String objects are created using \"String Literal\" whereas StringBuffer objects are created using the \"new\" keyword.", "category": "Python"}, {"instruction": "Specify the platform and the environment variables needed to run a Java program.", "input": "", "output": "The platform dependent environment variables needed to run a Java program on any platform are:\n\n1. JAVA_HOME: This variable stores the location of JDK.\n2. PATH: This variable stores the path to the executables.\n3. CLASSPATH: This variable contains the path to the Java classes.\n4. JRE_HOME: This variable stores the location of the JRE.", "category": "Python"}, {"instruction": "What is the difference between an interface and an abstract class?", "input": "", "output": "The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers.", "category": "Python"}, {"instruction": "Write a regular expression pattern to match a string starting with 'hello' and with two numbers after it.", "input": "", "output": "^hello[0-9]{2}$", "category": "Python"}, {"instruction": "Write a code snippet to sum up the length of each individual element in an array.", "input": "arr = ['apple', 'banana', 'cherry']", "output": "const sum = arr.reduce((acc, curr) => acc + curr.length, 0)", "category": "Python"}, {"instruction": "Using the below Python code, Write a code snippet to index all the values of an array.", "input": "arr = [3, 8, 2, 5, 1]", "output": "for i, val in enumerate(arr):\n    print(f\"arr[{i}] = {val}\")", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all customers whose age is between 18 and 35.", "input": "", "output": "SELECT *\nFROM customers \nWHERE age >= 18 AND age <= 35;", "category": "Python"}, {"instruction": "Generate a hash value for the given string using an MD5 algorithm.", "input": "string = \"Hello, World!\"", "output": "using System;\nusing System.Security.Cryptography;\n\nMD5 md5 = MD5.Create();\nbyte[] hashValue = md5.ComputeHash(Encoding.UTF8.GetBytes(string));\nstring hashString = BitConverter.ToString(hashValue).Replace(\"-\", \"\");\nConsole.WriteLine(hashString);\n\n// Output: 65a8e27d8879283831b664bd8b7f0ad4", "category": "Python"}, {"instruction": "Write an SQL query to select all rows from the table \"customers\" that have the same age as the given customer.", "input": "customer = (\"John Smith\", 32)", "output": "SELECT *\nFROM customers\nWHERE age = 32", "category": "Python"}, {"instruction": "Create a Swift class named \"MyClass\" that contains two int properties and one function. The function should return the sum of the two properties.", "input": "", "output": "class MyClass {\n  var num1: Int\n  var num2: Int\n  \n  func sum() -> Int {\n    return num1 + num2\n  }\n}", "category": "Python"}, {"instruction": "Generate a list of 10 random numbers between 0 and 500 in Python.", "input": "", "output": "import random\nnumbers = [random.randint(0,500) for i in range(10)]\nprint(numbers)", "category": "Python"}, {"instruction": "Create an HTML/CSS webpage which displays the given text: \"Hello, Welcome to my website!\"", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Welcome to My Website!</title>\n</head>\n\n<body>\n<div>\n <h1>Hello, Welcome to my website!</h1>\n</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using Java, write a program to determine if a given word is a palindrome.", "input": "word = \"racecar\"", "output": "boolean isPalindrome = true;\n\nfor (int i = 0; i < word.length()/2; i++ ){\n    if (word.charAt(i) != word.charAt(word.length()-i-1)){\n        isPalindrome = false;\n        break;\n    }\n}", "category": "Python"}, {"instruction": "How would you sort an array of integers using Merge Sort algorithm?", "input": "", "output": "def merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n  \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n  \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n  \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n          \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n          \n        while j < len(right): \n            arr[k] = right[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "How would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?", "input": "", "output": "def gcd(a, b):\n    # Base case\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    # Calculate the greatest common divisor using Euclid's algorithm\n    while b != 0:\n        a %= b\n        a, b = b, a\n        \n    return a", "category": "Python"}, {"instruction": "Write a function to start a timer with the specified duration.", "input": "", "output": "def start_timer(duration):\n    start_time = time.time()\n    end_time = start_time + duration\n    while time.time() < end_time:\n        time.sleep(1)\n    print(\"Timer finished!\")", "category": "Python"}, {"instruction": "Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum.", "input": "[2, 7, 5, 1, 8]", "output": "def find_target_sum(nums, target_sum):\n    for i in range(0, len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False", "category": "Python"}, {"instruction": "Generate an array of length n with random numbers in the range 0 - 100", "input": "", "output": "import random\ndef gen_num_arr(n):\n    output = []\n    for i in range(n):\n        output.append(random.randint(0, 101))\n    return output", "category": "Python"}, {"instruction": "Create a software program that encrypts a text message.", "input": "", "output": "def encrypt(msg):\n    change = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 's': '5'}\n    encrypted = \"\"\n    for c in msg:\n        if c in change:\n            encrypted += change[c]\n        else:\n            encrypted += c\n    return encrypted", "category": "Python"}, {"instruction": "Write a factorial program without using the inbuilt factorial function in Python.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Generate a string array of length 10, containing only alphabets in lower case containing 10 random characters.", "input": "", "output": "import random\ndef gen_string_arr(n):\n    output = []\n    for i in range(n):\n        output.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10)))\n    return output", "category": "Python"}, {"instruction": "Create an HTML/CSS webpage which contains two identical paragraphs with red font.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webpage</title>\n</head>\n\n<body>\n<div>\n <p style=\"color:red;\">This is paragraph one.</p>\n \n <p style=\"color:red;\">This is paragraph two.</p>\n</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Python function to remove duplicates in a given list.", "input": "list_of_numbers = [2, 3, 3, 5, 5]", "output": "def remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  return result", "category": "Python"}, {"instruction": "What is the value of the expression '2 ** 4' ?", "input": "", "output": "16", "category": "Python"}, {"instruction": "Print the results of the following arithmetic expression using python.", "input": "6/3+3*2", "output": "15.0", "category": "Python"}, {"instruction": "Using the below HTML code, replace the \"TODO\" comment with the appropriate code to add a hover effect on the div element.", "input": "<div>hello</div>\n\n<style>\n  div {\n    padding: 10px;\n    //TODO\n  }\n</style>", "output": "<div>hello</div>\n\n<style>\n  div {\n    padding: 10px;\n    transition: all 0.5s ease-in;\n  }\n  div:hover {\n    box-shadow: 2px 2px 2px #000;\n  }\n</style>", "category": "Python"}, {"instruction": "Trace the given code and explain the operations.", "input": "a = [1, 2, 3]\nb = [4, 5, 6]\n\nc = a + b", "output": "The code creates two lists, a and b, each containing three elements. Then, it creates a third list c by concatenating the two lists, resulting in a list containing six elements.", "category": "Python"}, {"instruction": "Generate Python code to extract only the keys from the given dictionary.", "input": "d = {'name': 'John', 'age': 24, 'city': 'New York'}", "output": "keys = list(d.keys())", "category": "Python"}, {"instruction": "Create a class to represent the given data structure.", "input": "Data Structure:\nStudent: \n  Id: Integer\n  Name: String\n  Age: Integer", "output": "class Student:\n    def __init__(self, id, name, age):\n        self.id = id\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Fetch the item from the given JSON response.", "input": "JSON Response: {\n\"results\": [\n  {\n    \"id\": 1,\n    \"name\": \"John\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Dave\"\n  }\n]\n}", "output": "item = json_response['results'][1]\nid = item['id']\nname = item['name']", "category": "Python"}, {"instruction": "Find the total cost of the given items.", "input": "items: [('apple', 2.5), ('mango', 3.5)}", "output": "total_cost = 0\n\nfor item in items:\n    price = item[1]\n    total_cost += price\n    \nprint(total_cost)", "category": "Python"}, {"instruction": "How can we optimize the performance of the given code?", "input": "myList = [1, 2, 3]\nfor item in myList:\n    print(item)", "output": "Use list comprehension to reduce the amount of code used, such as:\n\nprint([item for item in myList])", "category": "Python"}, {"instruction": "Given two strings, write a function to check if one string is a rotation of the other.", "input": "str1 = \"beans\"\nstr2 = \"esban\"", "output": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    temp = str1 + str1\n    return str2 in temp", "category": "Python"}, {"instruction": "Generate Python code to retrieve a list of tuples in the given string.", "input": "String: \"[('test1',1), ('test2',2)]\"", "output": "list_items = [item.replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\") for item in s[1:-1].split(\"), (\")]\nlist_of_tuples = [(item[0], int(item[1])) for item in list_items]", "category": "Python"}, {"instruction": "Edit the code to extract the data from the given dictionary.", "input": "data = {\n'name': 'John',\n'age': 23,\n'address': {\n  'street': '123 Main Street',\n  'city': 'Los Angeles'\n  }\n}", "output": "name = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']", "category": "Python"}, {"instruction": "Write a predicate to check for valid email syntax.", "input": "", "output": "def is_valid_email(string):\n    return re.match(\"[^@]+@[^@]+\\.[^@]+\", string) != None", "category": "Python"}, {"instruction": "Remove duplicates from the list.", "input": "list = [1,2,3,2,5,6,5]", "output": "new_list = list(set(list))", "category": "Python"}, {"instruction": "Ensure that the following HTML element displays properly on all browsers.", "input": "<p>Hello World!</p>", "output": "<p style=\"display: block; font-family: sans-serif; line-height: 1.3; font-size: 14px; color: #222;\">Hello World!</p>", "category": "Python"}, {"instruction": "Write a lambda expression to select all records from a list of dictionaries with the name \"John\".", "input": "", "output": "selected_records = list(filter(lambda x:x['name']=='John', records))", "category": "Python"}, {"instruction": "Suggest an algorithm to find the number of nodes in a binary tree.", "input": "", "output": "Here is a possible algorithm to count the number of nodes in a binary tree:\n\n1. Initialize count as 0\n2. If the tree is empty, return 0.\n3. Else\n   a. Recursively call the procedure on left subtree.\n   b. Add 1 to the `count` variable.\n   c. Recursively call the procedure on right subtree.\n4. Return count.", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the id, name and salary column from the Employee table.", "input": "", "output": "SELECT id, name, salary \nFROM Employee;", "category": "Python"}, {"instruction": "Modify the code to create an AI model to classify the given dataset.", "input": "dataset = {\n    'x1': ['apple', 'banana'],\n    'x2': ['red', 'yellow'],\n    'label': ['fruit', 'fruit']\n}", "output": "class Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(2, 32)\n        self.fc2 = nn.Linear(32, 32)\n        self.fc3 = nn.Linear(32, 2)\n\n    def forward(self, x):\n        x = x.view(-1, 2)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-1)\n        return x\n\nmodel = Model()\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.005)", "category": "Python"}, {"instruction": "How can we replace a substring in a given string with another substring in JavaScript?", "input": "string = \"Hello World\"\nsubstr1 = \"Hello\"\nsubstr2 = \"Hi\"", "output": "finalString = string.replace(substr1, substr2)", "category": "Python"}, {"instruction": "Complete the following code to print a 2D array passed as parameter.", "input": "def print2Dlist (list) :", "output": "def print2Dlist (list) :\n\tfor row in list:\n\t\tfor element in row:\n\t\t\tprint (element, end=\" \") \n\t\tprint ()", "category": "Python"}, {"instruction": "Design an algorithm to generate N random numbers from 1 to 1000.", "input": "N=5", "output": "Let N be the number of random numbers to create.\n\nInitialize an array randomNumbers to empty\n\nFor i from 1 to N:\n  Generate a random number from 1 to 1000\n  Add this random number to randomNumbers\n  \nPrint randomNumbers", "category": "Python"}, {"instruction": "How could you execute a JavaScript code snippet named 'my_script.js' after the page has been loaded?", "input": "", "output": "We can use the 'onload' event to execute our JavaScript code snippet after the page has been loaded. For example, we can use the following code to execute the 'my_script.js' file once the page has been loaded: \n\nwindow.onload = function() {\n    let script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = \"my_script.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n};", "category": "Python"}, {"instruction": "Name one benefit of using a function in Python.", "input": "", "output": "One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code.", "category": "Python"}, {"instruction": "How can the given list be sorted according to the age?", "input": "data = [('John', 20), ('Vikram', 25), ('Bob', 21), ('David', 23)]", "output": "data.sort(key=lambda x: x[1]) \n\n# Output\n[('John', 20), ('Bob', 21), ('David', 23), ('Vikram', 25)]", "category": "Python"}, {"instruction": "Create a python class with a method to generate the following table format", "input": "", "output": "class Table_Generator:\n    def generate_table(self):\n        print('+---------+--------+--------+')\n        print('|   S.No  |  Name  |  Age   |')\n        print('+---------+--------+--------+')", "category": "Python"}, {"instruction": "Rewrite the code below to remove the repetition in the code using a loop.", "input": "names = [\"John\", \"Sam\", \"Paul\"]\n\nprint(names[0])\nprint(names[1])\nprint(names[2])", "output": "names = [\"John\", \"Sam\", \"Paul\"]\n\nfor name in names:\n    print(name)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the details of all customers who have placed orders with status \"Delivered\"", "input": "", "output": "SELECT Customer.* \nFROM Customer \nINNER JOIN Orders ON Customer.ID = Orders.CustomerID \nWHERE Orders.Status = 'Delivered'", "category": "Python"}, {"instruction": "Create a validation function to check if the inputed string contains any numbers.", "input": "", "output": "import re\n\ndef validate_string(input_str):\n    pattern = r\"\\d\"\n    if re.search(pattern, input_str):\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Check whether or not an input is a palindrome using a regular expression.", "input": "\"race car\"", "output": "const isPalindromeRegEx = (str) => {\n    let regEx = /[\\W_]/g;\n    let lowStr = str.toLowerCase().replace(regEx, '');\n    let reverseStr = lowStr.split('').reverse().join('');\n    \n    if (lowStr === reverseStr) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nlet isPalindromeCheckRegEx = isPalindromeRegEx('race car');\nconsole.log(isPalindromeCheckRegEx); // Output: true", "category": "Python"}, {"instruction": "Compare two strings and returns \"yes\" if they are equal, otherwise returns \"no\".", "input": "\"Apple\", \"apple\"", "output": "const stringCompare = (str1, str2) => {\n    if (str1.toLowerCase() === str2.toLowerCase()) {\n        return 'yes';\n    } else {\n        return 'no';\n    }\n};\n\nlet compResult = stringCompare('Apple', 'apple');\nconsole.log(compResult); // Output: 'yes'", "category": "Python"}, {"instruction": "Create a selector for a page element with the id \"main-heading\".", "input": "", "output": "const mainHeading = document.getElementById('main-heading');", "category": "Python"}, {"instruction": "Calculate the length of each word in a given string and store them in an array.", "input": "\"Hello World How Are You\"", "output": "const wordLength = (str) => {\n    const words = str.split(' ');\n    const lengthArray = [];\n    \n    for (let i = 0; i < words.length; i++) {\n        lengthArray.push(words[i].length);\n    }\n    \n    return lengthArray;\n};\n\nlet wordLengths = wordLength('Hello World How Are You');\nconsole.log(wordLengths); // Output: [5, 5, 3, 3, 3]", "category": "Python"}, {"instruction": "Create an array of the words in a given string and sort them alphabetically.", "input": "\"Hello World How Are You\"", "output": "const alphabetize = (str) => {\n    const words = str.split(' ');\n    words.sort();\n    return words;\n};\n\nlet sortedWords = alphabetize('Hello World How Are You');\nconsole.log(sortedWords); // Output: ['Are', 'Hello', 'How', 'You', 'World']", "category": "Python"}, {"instruction": "Separate odd numbers from an array and store them in a different array.", "input": "let array = [1,2,3,4,5,6,7,8,9]", "output": "const oddNumbers = (arr) => {\n    const odd = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n            odd.push(arr[i]);\n        }\n    }\n\n    return odd;\n};\n\nlet odds = oddNumbers(array);\nconsole.log(odds); // Output: [1, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Create a function to retrieve the last three elements in an array and store them in a new array.", "input": "let array = [1, 2, 3, 4, 5, 6, 7]", "output": "const lastThreeElements = (arr) => {\n    const newArray = [];\n\n    for (let i = arr.length - 3; i < arr.length; i++) {\n        newArray.push(arr[i]);\n    }\n\n    return newArray;\n};\n\nlet lastThree = lastThreeElements(array);\nconsole.log(lastThree); // Output: [5, 6, 7]", "category": "Python"}, {"instruction": "Generate a random number between 0 and 10 and store it in a variable called \"randNum\".", "input": "", "output": "let randNum = Math.floor(Math.random() * 11);", "category": "Python"}, {"instruction": "What is the purpose of the keyword `break` in a JavaScript loop?", "input": "", "output": "The keyword 'break' is used in a loop to stop the execution of the loop and exit the loop. It can be used to terminate an infinite loop and to force an immediate exit from a loop even if the looping condition has not been met.", "category": "Python"}, {"instruction": "What could be a use case of a 'while' loop in Python?", "input": "", "output": "A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it.", "category": "Python"}, {"instruction": "Construct an Express route for handling browser requests for a web page named 'Home'.", "input": "", "output": "app.get(\"/Home\", (req, res) => {\n    // Handle Home page request here\n});", "category": "Python"}, {"instruction": "Suggest a data structure in Python to store a list of countries and their capitals.", "input": "", "output": "A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example: \n\ndict = {\n    'India': 'New Delhi',\n    'China': 'Beijing', \n    'UK': 'London'\n}", "category": "Python"}, {"instruction": "Write a function to delete redundant items from a list.", "input": "[3, 2, 1, 3, 5, 6, 3, 2]", "output": "def delete_redundant_items(list_param):\n    \"\"\"\n    Function to delete redundant items from a list\n    \"\"\"\n    result_list = []\n    for item in list_param:\n        if item not in result_list:\n            result_list.append(item)\n    return result_list", "category": "Python"}, {"instruction": "Create a function that takes a string of brackets and checks if they are correctly matched or not.", "input": "", "output": "def check_brackets(bracket_string):\n    \"\"\"\n    Function that checks if bracket string is correctly matched.\n    \"\"\"\n    stack = []\n    open_brackets = {'[', '{', '('}\n    close_brackets = {']', '}', ')'}\n    \n    for bracket in bracket_string:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack or close_brackets[bracket] != stack.pop():\n                return False\n        \n    return not stack", "category": "Python"}, {"instruction": "Implement a function that prints n asterisk characters in a row.", "input": "", "output": "def print_asterisks(n):\n  for i in range(n): \n    print(\"*\", end=\"\")\n  print()", "category": "Python"}, {"instruction": "How would you store the values of this array of dictionaries in a database?", "input": "[\n {'name': 'John', 'age': 28},\n {'name': 'Marry', 'age': 27},\n {'name': 'David', 'age': 30}\n]", "output": "The values of the array of dictionaries can be stored in a database using an SQL query. The query would create a table with columns for each key in the dictionaries and then store the values in their respective columns. For each dictionary, an INSERT query would be run to add the values of that dictionary to database.", "category": "Python"}, {"instruction": "Generate a set of SQL commands to list all the customers and their email addresses in a table named customers.", "input": "", "output": "SELECT *\nFROM customers\nORDER BY email;", "category": "Python"}, {"instruction": "Create a random sequence of 100 numbers between 1 and 10, both inclusive, and print them on the screen.", "input": "", "output": "2, 6, 7, 1, 5, 4, 4, 7, 1, 6, 8, 9, 4, 1, 3, 4, 5, 10, 3, 7, 1, 8, 10, 8, 8, 2, 10, 7, 5, 10, 8, 7, 5, 6, 1, 7, 8, 2, 8, 7, 5, 1, 3, 7, 10, 2, 10, 7, 5, 6, 9, 2, 4, 2, 1, 2, 5, 2, 4, 7, 6, 2, 4, 7, 1, 2, 7, 10, 4, 6, 7, 4, 1, 5, 7, 3, 8, 4, 7, 10, 6, 8, 2, 9, 2, 5, 2, 3, 6, 4, 9, 4, 2, 6, 7", "category": "Python"}, {"instruction": "Create a HTML form to accept a user's name, address, and telephone number.", "input": "", "output": "<form>\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"/><br>\n  <label>Address:</label><br>\n  <input type=\"text\" name=\"address\"/><br>\n  <label>Telephone:</label><br>\n  <input type=\"text\" name=\"telephone\"/><br>\n  <input type=\"submit\" value=\"Submit\"/>\n</form>", "category": "Python"}, {"instruction": "Define four classes in Java that form a hierarchy of fruit.", "input": "", "output": "// Base class\npublic abstract class Fruit { \n \n    private String color; \n \n    public Fruit(String color) { \n        this.color = color; \n    } \n    public abstract double getWeight(); \n} \n\n// Inheriting class\npublic class Apple extends Fruit { \n \n    private double weight; \n \n    public Apple(String color, double weight) { \n        super(color); \n        this.weight = weight; \n    } \n    @Override\n    public double getWeight() { \n        return weight; \n    } \n} \n\n// Inheriting class\npublic class Banana extends Fruit { \n         \n    private double length; \n \n    public Banana(String color, double length) { \n        super(color); \n        this.length = length; \n    } \n    @Override\n    public double getWeight() { \n        return length * 0.5; \n    } \n} \n\n// Inheriting class\npublic class Orange extends Fruit { \n \n    private double radius; \n \n    public Orange(String color, double radius) { \n        super(color); \n        this.radius = radius; \n    } \n    @Override\n    public double getWeight() { \n        return Math.round(Math.PI * Math.pow(radius, 2)); \n    } \n}", "category": "Python"}, {"instruction": "Analyze the given JavaScript code, and identify the logical operator being used.", "input": "if (age <= 18 || age >= 65)", "output": "The logical operator being used is the \"or\" operator (||).", "category": "Python"}, {"instruction": "Write a JavaScript function to determine if an array is sorted or not.", "input": "", "output": "function isSorted(arr) {\n  for (let i=1; i<arr.length; i++) {\n    if (arr[i] < arr[i-1]) return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Create a web scraper to collect the data from the given website.", "input": "Website: https://www.example.com/", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML content of the website\nr = requests.get(\"https://www.example.com/\")\n\n# Parse the HTML content\nsoup = BeautifulSoup(r.content, \"html.parser\")\n\n# Extract the content\ndata = soup.find_all()\n\n# Store the data in a suitable format\n# ...", "category": "Python"}, {"instruction": "Write an SQL query to select the top 5 employees who have the highest salary in a given department.", "input": "", "output": "SELECT *\nFROM Employees\nWHERE Department_ID = <Department_ID>\nORDER BY Salary DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Write a CSS style to set the font size of all h1 elements on a webpage to 24px.", "input": "", "output": "h1 {\n font-size: 24px;\n}", "category": "Python"}, {"instruction": "Write a Python program to create a nested dictionary from two lists.", "input": "l1 = ['a', 'b', 'c'] \nl2 = [1, 2, 3]", "output": "{'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "What could be a use case of applying an algorithm such as the K-Means Clustering Algorithm?", "input": "", "output": "The K-Means Clustering Algorithm can be used to partition a data set into k distinct clusters of samples such that each sample belongs to the cluster with the nearest mean. It can be used for tasks such as data segmentation, anomaly detection, customer segmentation and image compression.", "category": "Python"}, {"instruction": "Construct a Django model field for storing a user's age.", "input": "", "output": "age = models.IntegerField()", "category": "Python"}, {"instruction": "Write a MySQL query to find the first and last name of all the employees in the \u2018sales\u2019 department.", "input": "", "output": "SELECT FirstName, LastName FROM Employees\nWHERE Department = 'sales';", "category": "Python"}, {"instruction": "Select all the records from the Orders table with a status of 'active'.", "input": "", "output": "SELECT * FROM Orders WHERE status = 'active';", "category": "Python"}, {"instruction": "Create an HTML table with the columns \"Name\", \"Age\", and \"Occupation\".", "input": "", "output": "<table>\n <thead>\n  <tr>\n   <th>Name</th>\n   <th>Age</th>\n   <th>Occupation</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td></td>\n   <td></td>\n   <td></td>\n  </tr>\n </tbody>\n</table>", "category": "Python"}, {"instruction": "Write an if-else statement in Java that prints \"red\" if a variable \"color\" is set to \"red\" and prints \"blue\" otherwise.", "input": "", "output": "if (color == \"red\") {\n  System.out.println(\"red\");\n} else {\n  System.out.println(\"blue\");\n}", "category": "Python"}, {"instruction": "How to format a date in PHP?", "input": "", "output": "echo date(\"Y-m-d\", time()); // Outputs current date in the format \"2020-01-30\"", "category": "Python"}, {"instruction": "Write a PHP function for calculating the average of an array of numbers.", "input": "", "output": "function calculateAverage($numbers) {\n  $sum = array_sum($numbers);\n  $n = count($numbers); \n  $average = $sum/$n;\n  return $average;\n}", "category": "Python"}, {"instruction": "Sort elements of an array in descending order in Java.", "input": "", "output": "public static int[] sortDesc(int[] nums) {\n Arrays.sort(nums);\n Collections.reverse(Arrays.asList(nums));\n \n return nums;\n}", "category": "Python"}, {"instruction": "Identify and delete duplicate elements from an array in JavaScript.", "input": "[1, 2, 3, 4, 4, 5]", "output": "function removeDuplicates(arr) {\n  let unique = arr.filter((v, i, a) => a.indexOf(v) === i);\n  return unique;\n}\n\nlet arr = [1, 2, 3, 4, 4, 5];\nlet result = removeDuplicates(arr);\nconsole.log(result); // [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code snippet to find all combinations of 3 numbers in the array that sum to zero.", "input": "[3, 5, -2, 1, -1, 0, 4]", "output": "[[3, -2, 1], [5, -1, -4], [5, 1, -4], [-2, 0, 2]]", "category": "Python"}, {"instruction": "Create an array of strings for the given string and return only the strings with a length equal to or greater than 5.", "input": "\"This is a string of words to test\"", "output": "[\"This\", \"string\", \"words\", \"test\"]", "category": "Python"}, {"instruction": "Write an SQL statement to get the top 5 most expensive movies from an inventory table.", "input": "", "output": "SELECT title, price\nFROM inventory\nORDER BY price DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Create a Java program that returns the minimum value in an array of integers.", "input": "", "output": "public static int minValue(int[] arr) {\n int minValue = arr[0];\n for (int i = 1; i < arr.length; i++) {\n if (arr[i] < minValue) {\n minValue = arr[i];\n }\n }\n return minValue;\n}", "category": "Python"}, {"instruction": "Create a function for converting text to an all-uppercase string.", "input": "", "output": "function toUpperCase(str) {\n  return str.toUpperCase();\n}", "category": "Python"}, {"instruction": "Edit the following HTML page to add a table to the page.", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My HTML Page</title>\n</head>\n<body>\n <h1>My HTML Page</h1>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My HTML Page</title>\n</head>\n<body>\n <h1>My HTML Page</h1>\n <table>\n  <tr>\n   <th>Column 1</th>\n   <th>Column 2</th>\n   <th>Column 3</th>\n  </tr>\n  <tr>\n   <td>Data 1</td>\n   <td>Data 2</td>\n   <td>Data 3</td>\n  </tr>\n </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "In Java, how do I create an array of integers from a given array of strings with integer values?", "input": "", "output": "String[] strArray = {\"1\", \"2\", \"3\", \"4\"};\nint[] intArray = Arrays.stream(strArray)\n                            .mapToInt(Integer::parseInt)\n                            .toArray();", "category": "Python"}, {"instruction": "Write a code in C++ to print the elements of a given array of strings using a for loop.", "input": "", "output": "#include <iostream>\n\nvoid printArray(std::string arr[], int n) \n{ \n    for (int i = 0; i < n; i++) \n        std::cout << arr[i] << std::endl; \n} \n\nint main(){\n\tstd::string arr[] = {\"one\", \"two\", \"three\"}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    printArray(arr, n); \n\treturn 0;\n}", "category": "Python"}, {"instruction": "How do I create a function that sums two integers in Python?", "input": "", "output": "def add_two_ints(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a class called \"IDgenerator\" that generates a list of unique random numbers between a given range.", "input": "", "output": "import random\n\nclass IDGenerator:\n    def __init__(self, min_val, max_val):\n        self.min_val = min_val\n        self.max_val = max_val\n        self.ids = []\n\n    def generate(self):\n        rand_int = random.randint(self.min_val, self.max_val)\n        while rand_int in self.ids:\n            rand_int = random.randint(self.min_val, self.max_val)\n        self.ids.append(rand_int)\n        return rand_int", "category": "Python"}, {"instruction": "Design a tree data structure to store employee records in an organization.", "input": "", "output": "class EmployeeTree:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n\n    # add a sub-employee to the tree\n    def add_child(self, name):\n        self.children.append(EmployeeTree(name))\n\n    # remove a sub-employee from the tree\n    def remove_child(self, name):\n        for child in self.children:\n            if child.name == name:\n                self.children.remove(child)", "category": "Python"}, {"instruction": "How is a While Loop used in C++?", "input": "", "output": "while (expression) {\n   statement(s);\n}\n\nTypically, while loops are used when we need to continue looping until some condition is met.", "category": "Python"}, {"instruction": "Create a class in Python to represent a rectangle with the attributes width, height, and area.", "input": "", "output": "class Rectangle:\n  def __init__(self, width, height):\n    self.width = width\n    self.height = height\n    self.area = width * height", "category": "Python"}, {"instruction": "How to create a new array from an existing array in JavaScript?", "input": "", "output": "const newArray = oldArray.slice(); // creates a shallow copy of the array\n\n// OR\n\nconst newArray = [...oldArray]; // creates a shallow copy of the array", "category": "Python"}, {"instruction": "Write an SQL query to find all the customers with first names starting with \"A\" from the customers table.", "input": "customers table", "output": "SELECT *\nFROM customers \nWHERE first_name LIKE 'A%'", "category": "Python"}, {"instruction": "Write an SQL query to order the employees in an \"employees\" table first by age, smallest to largest, and then by name alphabetically.", "input": "", "output": "SELECT *\nFROM employees\nORDER BY age ASC, name ASC", "category": "Python"}, {"instruction": "Using CSS, write a class selector to change the color of text to blue.", "input": "", "output": ".blue-text {\n  color: blue;\n}", "category": "Python"}, {"instruction": "Write a query to retrieve the distinct job titles from an \"employees\" table.", "input": "", "output": "SELECT DISTINCT job_title\nFROM employees", "category": "Python"}, {"instruction": "Using regular expression, write a pattern to match a string of any length which ends with \"oo\".", "input": "", "output": ".*oo$", "category": "Python"}, {"instruction": "Print the third element in this array.", "input": "[1,2,3,4,5]", "output": "3", "category": "Python"}, {"instruction": "Create a browser application in JavaScript that toggles a dark-mode.", "input": "", "output": "const toggleMode = () => {\n  let mode = localStorage.getItem(\"mode\"); \n  if (mode) {\n    document.body.className = mode;\n    mode === \"dark-mode\" ? mode = \"light-mode\" : mode = \"dark-mode\";\n    localStorage.setItem(\"mode\", mode);\n  } else {\n    localStorage.setItem(\"mode\", \"dark-mode\");\n    document.body.className = \"dark-mode\";\n  }\n}\n\ntoggleMode()", "category": "Python"}, {"instruction": "Write a regular expression that can detect emails.", "input": "", "output": "import re\n\n# Regular expression\nregex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n\n# Search for any emails that match the regular expression\nmatches = re.findall(regex, string)\n\n# Print out the emails that were found\nfor match in matches:\n    print(match)", "category": "Python"}, {"instruction": "Write a Python function to print a multiplication table of size 10.", "input": "", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1):\n        for j in range(1, size+1):\n            print(i*j, end=\"\\t\")\n        print(\"\\r\")\n \nprint_multiplication_table(10)", "category": "Python"}, {"instruction": "Create a function that can detect if a word is a palindrome.", "input": "Word: racecar", "output": "def isPalindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left:\n        if not string[left] == string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n# Test program\nisPalindrome(\"racecar\")\n\n# Output\n# True", "category": "Python"}, {"instruction": "Convert a string of numbers from one base to another.", "input": "String: \"101111\"\nFrom Base: 2\nTo Base: 10", "output": "# Get the numerical value of the string in the from base\nnum = int(str(101111), 2)\n\n# Convert the numerical value to the to base\nconverted_num = \"{0:b}\".format(num)\n\nprint(converted_num)\n\n# Output\n# 47", "category": "Python"}, {"instruction": "Perform arithmetic operations on two numbers.", "input": "Num1: 4\nNum2: 2", "output": "# Add the numbers\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\n# Multiplication\nproduct = 4 * 2\n\n# Exponent\npower = 4**2\n\n# Division\nquotient = 4 / 2\n\n# Integer Division\ndiv = 4 // 2\n\n# Remainder\nremainder = 4 % 2\n\n# Print the results\nprint(\"Sum is %s\\nDifference is %s\\nProduct is %s\\nPower is %s\\nQuotient is %s\\nDivision is %s\\nRemainder is %s\"\n      %(str(sum),str(difference),str(product),str(power),str(quotient),str(div),str(remainder)))\n\n# Output:\n# Sum is 6\n# Difference is 2\n# Product is 8\n# Power is 16\n# Quotient is 2.0\n# Division is 2\n# Remainder is 0", "category": "Python"}, {"instruction": "Convert a string to its inverse form.", "input": "String: \"Hello World!\"", "output": "def string_inverse(string): \n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        inverse_string += string[i]\n    return inverse_string\n\n# Test program\nstring = \"Hello World!\"\ninverse_string = string_inverse(string)\n\nprint(\"Original String: %s\" % string)\nprint(\"Inverse String: %s\" % inverse_string)\n\n# Output\n# Original String: Hello World!\n# Inverse String: !dlroW olleH", "category": "Python"}, {"instruction": "Find all substring of a string.", "input": "String: \"abcdefg\"", "output": "# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        w_index += 1\n          \n    return list_substr\n\n# Test program \ns = \"abcdefg\"\nprint(substr(s)) \n\n# Output\n# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']", "category": "Python"}, {"instruction": "Use the NumPy package to multiply two matrices.", "input": "Matrix1: [[1, 2], [3, 4]]\nMatrix2: [[2, 3], [4, 5]]", "output": "import numpy as np\n \nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\n \nproduct = np.matmul(matrix1, matrix2)\nprint(product)\n\n# Output\n# array([[10, 13],\n#        [22, 29]])", "category": "Python"}, {"instruction": "Create a machine learning classifier that can classify the sentiment of a text.", "input": "Text: This product is really bad", "output": "# import required libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the data into a Pandas DataFrame\ndata = pd.read_csv('data.csv')\n\n# Convert the Labels (Positive/Negative) to numbers\ndata['Sentiment'] = [1 if sentiment == 'Positive' else 0 for sentiment in data['Sentiment']]\n\n# Create the feature matrix\ncount_vectorizer = CountVectorizer()\nX = count_vectorizer.fit_transform(data['Text'])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, data['Sentiment'], test_size=0.20, random_state=42)\n\n# Train a Multinomial Naive Bayes Classifier\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Use the Classifier to predict the label of the input text\nprediction = clf.predict(count_vectorizer.transform([\"This product is really bad\"]))[0]\n\nif prediction == 1:\n    print(\"Positive\")\nelse:\n    print(\"Negative\")", "category": "Python"}, {"instruction": "Write a Java class that can be used to store and access a large dictionary.", "input": "Large dictionary with 10000 words", "output": "import java.util.HashMap;\n\npublic class Dictionary {\n \n    private HashMap<String, String> dictionary;\n \n    public Dictionary() {\n        this.dictionary = new HashMap<>();\n    }\n \n    public void addWord(String word, String definition) {\n        dictionary.put(word, definition);\n    }\n \n    public String getDefinition(String word) {\n        return dictionary.get(word);\n    }\n}", "category": "Python"}, {"instruction": "Create a print statement that will print out a formatted table containing the elements of a 2D list.", "input": "2D List: [[1,2,3], [4,5,6], [7,8,9]]", "output": "# Get the list\ntwoD_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n# Print it out as a table\nfor row in twoD_list:\n    for val in row:\n        print('{:4}'.format(val), end=\"\")\n    print()\n\n# Output\n#   1   2   3\n#   4   5   6\n#   7   8   9", "category": "Python"}, {"instruction": "Create a JavaScript object to store three birds names and their corresponding scientific names.", "input": "Owl - Strigidae\nDove - Columbidae\nEagle - Accipitridae", "output": "let birds = {\n    \"Owl\": \"Strigidae\",\n    \"Dove\": \"Columbidae\",\n    \"Eagle\": \"Accipitridae\"\n};", "category": "Python"}, {"instruction": "Explain the concept of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more.", "category": "Python"}, {"instruction": "Given a string of length N, provide an algorithm to determine if there is a substring in the string that repeats itself.", "input": "", "output": "The algorithm starts by comparing the first N characters to the next N characters in the string. If the characters match, then the algorithm returns true. If the characters do not match, the algorithm moves to the next set of N characters and compares them. If no match is found, the algorithm returns false. The time complexity of this algorithm is O(N^2).", "category": "Python"}, {"instruction": "Format a string by adding the required punctuations in order to make it a valid sentence", "input": "this is the string", "output": "This is the string.", "category": "Python"}, {"instruction": "Write a C program to print out the Fibonacci series upto the nth number.", "input": "", "output": "#include <stdio.h>\n \nint fibonacci(int n)\n{\n  if (n == 0)\n    return 0;\n  else if (n == 1)\n    return 1;\n  else\n    return (fibonacci(n-1) + fibonacci(n-2));\n}\n \nint main()\n{\n  int i, n;\n \n  printf(\"Enter the number of terms: \");\n  scanf(\"%d\", &n);\n \n  printf(\"Fibonacci Series: \");\n \n  for (i = 0; i < n; i++)\n  {\n    printf(\"%d \", fibonacci(i));\n  }\n \n  return 0;\n}", "category": "Python"}, {"instruction": "How do you retrieve data from a database using PHP?", "input": "", "output": "Retrieving data from a database using PHP is relatively simple. You can use the PDO (PHP Data Objects) or MySQLi (MySQL Improved) extensions to connect to a database. You can then use an SQL query, such as SELECT, to retrieve data from the database.", "category": "Python"}, {"instruction": "Are ternary operators fast in Python?", "input": "", "output": "Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked.", "category": "Python"}, {"instruction": "What is dependency injection and how can it be implemented with JavaScript?", "input": "", "output": "Dependency injection is a technique for separating the creation of an object\u2019s dependencies from its own behavior. With JavaScript, it can be implemented with the use of ES2015 modules, which allow functions and objects from other modules to be imported. Then, instead of directly creating an object\u2019s dependencies, they can be passed in upon creation. This makes the code more modular and easily testable.", "category": "Python"}, {"instruction": "Write a MySQL query to find the names of all customers who have placed an order for more than $100.", "input": "", "output": "SELECT customers.name\nFROM orders\nJOIN customers ON customers.id = orders.customer_id \nWHERE orders.amount > 100;", "category": "Python"}, {"instruction": "Compute the sum of two give two-dimensional arrays.", "input": "array1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\narray2 = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]", "output": "def matrix_sum(a, b):\n    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n    return result", "category": "Python"}, {"instruction": "Generate an HTML form element with the text content \"Create account\".", "input": "", "output": "<form>\n    <input type=\"submit\" value=\"Create account\" />\n</form>", "category": "Python"}, {"instruction": "Edit the following code for optimal performance.", "input": "def sum_nums():\n    result = 0 \n    for i in range(10):\n        result += i\n    return result", "output": "def sum_nums():\n    result = 0\n    n = 10\n    while n > 0:\n        result += (n - 1)\n        n -= 1\n    return result", "category": "Python"}, {"instruction": "Reverse an input string.", "input": "", "output": "def reverse_string(s):\n    return s[::-1]", "category": "Python"}, {"instruction": "Write a statement that adds an element to a linked list.", "input": "", "output": "newNode = Node(data)\nnewNode.next = head\nhead = newNode", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all records with a salary higher than average salary from a table named \u201cemployees\u201d.", "input": "", "output": "SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);", "category": "Python"}, {"instruction": "Create an HTML page that displays a table with all the prime numbers up to 100.", "input": "", "output": "<html>\n   <head>\n      <title>Prime Numbers</title>\n   </head>\n   <body>\n      <h1>Prime Numbers</h1>\n      <table>\n         <tr>\n            <th>Number</th>\n            <th>Prime</th>\n         </tr>\n         <?php\n         for ($i = 2; $i <= 100; $i++) {\n            if (isPrime($i)) {\n               echo \"<tr><td>$i</td><td>Yes</td></tr>\";\n            } else {\n               echo \"<tr><td>$i</td><td>No</td></tr>\";\n            };\n         };\n         ?> \n      </table>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Construct a code to print elements of a given list in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse_list(numbers):\n    return numbers[::-1]", "category": "Python"}, {"instruction": "Design an algorithm to retrieve the longest word from an array of strings.", "input": "[\u2018Hello\u2019, \u2018World\u2019, \u2018This\u2019, \u2018is\u2019, \u2018a\u2019, \u2018code\u2019]", "output": "def get_longest_word(strings):\n    longest_word = ''\n    for s in strings:\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word", "category": "Python"}, {"instruction": "From a given string, count the number of unique characters", "input": "", "output": "def count_unique_chars(s):\n    chars = set()\n    for char in s:\n        chars.add(char)\n    return len(chars)", "category": "Python"}, {"instruction": "Create a function that identifies the type of a value", "input": "", "output": "def identify_value_type(val):\n    if type(val) is int:\n        return 'int'\n    elif type(val) is float:\n        return 'float'\n    elif type(val) is str:\n        return 'str'\n    elif type(val) is list:\n        return 'list'\n    elif type(val) is dict:\n        return 'dict'", "category": "Python"}, {"instruction": "Create an array of objects with the following properties: firstname, lastname, age, gender.", "input": "[\n  { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },\n  { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' }\n]", "output": "[\n  { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },\n  { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' }\n]", "category": "Python"}, {"instruction": "Create a class in Java called 'Student' which has the following attributes: firstname, lastname, age, gender.", "input": "", "output": "public class Student { \n   \n  private String firstname; \n  private String lastname; \n  private int age; \n  private String gender; \n   \n  public Student(String firstname, String lastname, int age, String gender) { \n    this.firstname = firstname; \n    this.lastname = lastname; \n    this.age = age; \n    this.gender = gender; \n  } \n   \n  // getters and setters \n}", "category": "Python"}, {"instruction": "Convert the following JavaScript switch statement into an if/else statement.", "input": "let letterGrade;\nswitch (percentage) {\n  case 97:\n  case 96:\n    letterGrade = \"A+\";\n    break;\n  case 95:\n    letterGrade = \"A\";\n    break;\n  default:\n    letterGrade = \"Unknown Grade\";\n    break;\n}", "output": "let letterGrade; \nif (percentage === 97 || percentage === 96) {\n  letterGrade = \"A+\";\n} else if (percentage === 95) {\n  letterGrade = \"A\";  \n} else {\n  letterGrade= \"Unknown Grade\";\n}", "category": "Python"}, {"instruction": "Write an HTML & CSS code to create a login form with two fields - email and password.", "input": "", "output": "<form>\n  <div>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" />\n  </div>\n  <div>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" />\n  </div>\n  <input type=\"submit\" value=\"Login\" />\n</form>\n\n<style>\n  form {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  div {\n    display: flex;\n    margin: 5px 0;\n    width: 200px;\n  }\n\n  label {\n    width: 100px;\n  }\n\n  input[type=\"submit\"] {\n    margin-top: 15px;\n    padding: 5px 10px;\n    font-weight: bold;\n  }\n</style>", "category": "Python"}, {"instruction": "Edit the following function to allow editing of existing key-value pairs in the object.", "input": "let myObj = {\n    name: 'Gabe', \n    age: 33\n}\n\nfunction addPair(obj, key, value) {\n    obj[key] = value;\n}", "output": "let myObj = {\n    name: 'Gabe', \n    age: 33\n}\n\nfunction addPair(obj, key, value) {\n    if(obj.hasOwnProperty(key)){\n        obj[key] = value;\n    } else {\n        obj[key] = value;\n    }\n}", "category": "Python"}, {"instruction": "Transform an input string to its uppercase equivalent with JavaScript.", "input": "inputString=\"This sentence should be in uppercase\"", "output": "let inputString = \"This sentence should be in uppercase\";\nlet outputString = inputString.toUpperCase();\nconsole.log(outputString);", "category": "Python"}, {"instruction": "Identify the most efficient way to render a list of 10 divs using React.", "input": "", "output": "render() { \n    return ( \n        <div> \n            {[...Array(10)].map((_, i) => <div key={i}>Div #{i+1}</div> )}\n        </div> \n    );\n};", "category": "Python"}, {"instruction": "Write a PHP code for creating a database table with 4 columns to store user information.", "input": "", "output": "$sql = \"CREATE TABLE users (\n    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    firstName VARCHAR(30) NOT NULL,\n    lastName VARCHAR(30) NOT NULL,\n    email VARCHAR(50)\n)\";", "category": "Python"}, {"instruction": "Suggest an alternate solution to the following JavaScript code.", "input": "var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nfor (var i=0; i<names.length; i++) {\n    console.log(names[i]);\n}", "output": "var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nnames.forEach(name => console.log(name));", "category": "Python"}, {"instruction": "Write a Python program to get the volume of a sphere with a given radius.", "input": "", "output": "import math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3", "category": "Python"}, {"instruction": "Design a python class for a dog to print its name and age when given.", "input": "Ginger, 3", "output": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\ndog = Dog('Ginger', 3)\nprint(dog.get_name())\nprint(dog.get_age())", "category": "Python"}, {"instruction": "Write an HTML page with a form to input the following information: name, age, gender.", "input": "", "output": "<html> \n  <head> \n    <title>Form Example</title>\n  </head>\n  <body>\n    <form>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\">\n      <label for=\"age\">Age:</label>\n      <input type=\"number\" id=\"age\" name=\"age\">\n      <label for=\"gender\">Gender:</label>\n      <select id=\"gender\" name=\"gender\">\n        <option value=\"Male\">Male</option>\n        <option value=\"Female\">Female</option>\n      </select>\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Design a React component that builds a navigation menu from the given input.", "input": "{\n  \"Home\": \"/\",\n  \"About\": \"/about\",\n  \"Product\": \"/product\"\n}", "output": "class Nav extends React.Component {\n  render() {\n    const navLinks = Object.keys(this.props.nav).map(key => (\n      <li>\n        <Link to={this.props.nav[key]}>{key}</Link>\n      </li>\n    ));\n\n    return (\n      <nav>\n        <ul>{navLinks}</ul>\n      </nav>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Create an Angular component that displays a posts feed with the given input data.", "input": "[\n  {\n    user: 'John',\n    message: 'Hello world!'\n  },\n  {\n    user: 'Jane',\n    message: 'Hi everyone!'\n  }\n]", "output": "<div *ngFor=\"let post of posts\">\n  <h1>{{ post.user }}</h1>\n  <p>{{ post.message }}</p>\n</div>", "category": "Python"}, {"instruction": "Modify a given JavaScript code snippet to add a random background color to all elements with the class name 'box'.", "input": "document.querySelectorAll('.box').forEach(function(el) {\n  el.style.backgroundColor = \"red\";\n});", "output": "document.querySelectorAll('.box').forEach(function(el) {\n  const randomHex = Math.floor(Math.random()*16777215).toString(16);\n  el.style.backgroundColor = `#${randomHex}`;\n});", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' and implement a method that shows the current speed of the car.", "input": "", "output": "class Car():\n    def __init__(self, speed):\n        self.speed = speed\n\n    def show_speed(self):\n        print(\"The current speed is:\", self.speed)", "category": "Python"}, {"instruction": "Create a new method in a given Java class named 'Person' which prints a greeting based on the firstname and lastname given.", "input": "John Doe", "output": "public void printGreeting(String firstname, String lastname) {\n  System.out.println(\"Hello, \" + firstname + \" \" + lastname + \"!\");\n}", "category": "Python"}, {"instruction": "Write a SQL query to select records from the 'books' table whose author's name contains the string \"John\".", "input": "", "output": "SELECT * FROM books WHERE author LIKE '%John%';", "category": "Python"}, {"instruction": "Create a UUID in Python.", "input": "", "output": "import uuid\n\nprint(uuid.uuid4())", "category": "Python"}, {"instruction": "Construct a for loop which adds up numbers.", "input": "", "output": "nums = [3, 4, 5, 6]\ntotal = 0\n\nfor num in nums:\n    total += num \n\nprint(total) # prints 18", "category": "Python"}, {"instruction": "What is a multithreaded application and how does it work?", "input": "", "output": "A multithreaded application is an application that creates multiple concurrent threads to execute tasks in parallel. These threads can communicate with each other and work together to accomplish a task faster than if they were executed sequentially. A multithreaded application makes use of modern computer hardware which has multiple core processors, each with its own thread. The threads then share access to a pool of memory and hardware resources which can be accessed and manipulated simultaneously. By working together, the threads can work faster and complete the task before any single thread working alone.", "category": "Python"}, {"instruction": "Create an input validation function in Java that checks for valid numerical input from the user.", "input": "", "output": "public static void validateNumericInput() {\n    Scanner input = new Scanner(System.in); \n    while (!input.hasNextDouble()) { \n        input.next(); \n        System.out.println(\"Error: Invalid input. Please try again.\"); \n    } \n}", "category": "Python"}, {"instruction": "Write a MySQL query to find the student with the highest grade in the class.", "input": "", "output": "SELECT MAX(grade) FROM students;", "category": "Python"}, {"instruction": "Compute the big-O time complexity for this algorithm.", "input": "def factorial(n):\n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1)", "output": "The time complexity for this algorithm is O(n).", "category": "Python"}, {"instruction": "Write an HTML page which contains a form with fields for a user's first name, last name, and email address.", "input": "", "output": "<html>\n  <head>\n    <title>User Info Form</title>\n  </head>\n  <body>\n    <form>\n     <label>First Name:</label>\n      <input type=\"text\" id=\"firstname\" name=\"firstname\" >\n      <br><br>\n     <label>Last Name:</label>\n      <input type=\"text\" id=\"lastname\" name=\"lastname\">\n      <br><br>\n     <label>Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n      <br><br>\n     <input type=\"submit\" value=\"Submit\" >\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a CSS code to add a 1px red border to a paragraph element.", "input": "", "output": "p {\n  border: 1px solid red;\n}", "category": "Python"}, {"instruction": "Write an HTML page that shows a table with the heading \"Famous Actors\" and columns for the actor's name, age, and nationality.", "input": "", "output": "<html>\n  <head>\n    <title>Famous Actors</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Nationality</th>\n      </tr>\n      <tr>\n        <td>Tom Hanks</td>\n        <td>62</td>\n        <td>American</td>\n      </tr>\n      <tr>\n        <td>Angelina Jolie</td>\n        <td>43</td>\n        <td>American</td>\n      </tr>\n      <tr>\n        <td>Johnny Depp</td>\n        <td>56</td>\n        <td>American</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Convert a given time in 24 hour format to 12 hour format.", "input": "19:45", "output": "7:45 PM", "category": "Python"}, {"instruction": "Sort the following list by the third element of the sublists in ascending order.", "input": "[[1,2,3], [0,0,1], [7,8,9], [8,7,2]]", "output": "[[0,0,1], [1,2,3], [8,7,2], [7,8,9]]", "category": "Python"}, {"instruction": "Debug the following code and explain why it gave an error.", "input": "def sum(a, b):\n    try:\n      return a + b\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "output": "The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code: \n\ndef sum(a, b):\n    try:\n      if type(a) == int and type(b) == int:\n        return a + b\n      else:\n        return \"inputs should be numbers\"\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "category": "Python"}, {"instruction": "Write a SQL query to find the average of the age field from the 'employees' table.", "input": "", "output": "SELECT AVG(age) FROM employees;", "category": "Python"}, {"instruction": "Rearrange the items in the array in ascending order.", "input": "[3, 6, 5, 1, 4, 2]", "output": "[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "How would you optimize a loop which runs over an array?", "input": "", "output": "Loop optimization techniques can be applied in order to improve the efficiency of a loop which runs over an array. The most common techniques include avoiding unnecessary computations, using pre-computation, using memoization to store intermediate results, using loop unrolling and different ways of loop indexing. In addition, using the right data structures can greatly improve the performance of a loop, as certain data structures are more efficient when dealing with large arrays.", "category": "Python"}, {"instruction": "Suggest a data structure to store and retrieve a large amount of text data.", "input": "", "output": "A hash table is an ideal data structure for storing and retrieving large amounts of textual data, as it provides an efficient way to map and access data using a key-value pair. Hash tables use a hashing algorithm to efficiently map each key-value pair to a specific location within the table, making it much easier and faster to access any element.", "category": "Python"}, {"instruction": "Create a JSON object that stores the following employee information.", "input": "name: John Smith\nage: 28\ndepartment: Engineering", "output": "{\"name\": \"John Smith\", \"age\": 28, \"department\": \"Engineering\"}", "category": "Python"}, {"instruction": "Convert the following epoch time to a human-readable format.", "input": "1599462722", "output": "August 28, 2020, 9:48:42 PM UTC", "category": "Python"}, {"instruction": "Using the class group, create an instance of the StudentClass and print out its name attribute.", "input": "class StudentClass:\n    def __init__(self, name):\n        self.name = name", "output": "# create an instance of the StudentClass\nstudent_class = StudentClass(\"Statistics\")\n\n#print out its name attribute\nprint(student_class.name)  # Output: Statistics", "category": "Python"}, {"instruction": "Sort the data using heap sort.", "input": "data = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8]", "output": "def heap_sort(data):  \n    # Create an empty Max Heap\n    max_heap = MaxHeap() \n    # Add elements to the Max Heap\n    for element in data:\n        max_heap.insert(element)\n    \n    sorted_data = []\n    while max_heap.count > 0:\n        # Pop the Maximum element from the Max Heap\n        maximum = max_heap.extract_max()\n        sorted_data.append(maximum)\n \n    return sorted_data\n\nsorted_data = heap_sort(data)\nprint(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "category": "Python"}, {"instruction": "Play a C-major chord using the scikit-learn MIDI library.", "input": "", "output": "# play a C-major chord using the scikit-learn MIDI library\nfrom sklearn.datasets import load_sample_file\nfrom sklearn.feature_extraction.io import MidiDispatcher\n\n# use MidiDispatcher to create a new sequence\ndispatcher = MidiDispatcher()\nnotes = [60, 64, 67]  # C-major notes\nvelocities = [127, 127, 127]  # maximum amplitude\ndispatcher.add_chords([(0, notes, velocities)])\n\n# play the sequence\nplayer = MidiPlayer(dispatcher.io)\nplayer.play()", "category": "Python"}, {"instruction": "Sum the numbers in the given array using reduce.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "# Sum the numbers in the given array using reduce\nfrom functools import reduce\n\nsum = reduce(lambda x, y: x + y, numbers)\n\nprint(sum) # Output: 15", "category": "Python"}, {"instruction": "Construct a MongoDB query to sort all documents based on the price in the collection.", "input": "", "output": "db.collection.find().sort({\"price\":1})", "category": "Python"}, {"instruction": "Construct an XPath expression to select the third element of an HTML list.", "input": "", "output": "//li[3]", "category": "Python"}, {"instruction": "Create a Python module for extracting the sum of all digits of an integer.", "input": "", "output": "def digit_sum(number):\n    if number == 0:\n        return 0\n    return (number % 10) + digit_sum(number // 10)", "category": "Python"}, {"instruction": "Given an array of integers and an integer target, find all unique combinations of elements from the array that sum up to the target.", "input": "arr = [1,2,3,4], target = 7", "output": "List<List<Integer>> result = new ArrayList<>();\ncombinations(arr, target, 0, new ArrayList<Integer>(), result);\n\nprivate static void combinations(int[] arr, int target, int start_index, ArrayList<Integer> curr, List<List<Integer>> result) {\n    if (target < 0 || start_index >= arr.length)\n        return;\n\n    if (target == 0) {\n        result.add(new ArrayList<>(curr));\n        return;\n    }\n\n    for (int i = start_index; i < arr.length; i++) {\n        curr.add(arr[i]);\n        combinations(arr, target - arr[i], i+1, curr, result);\n        curr.remove(curr.size() - 1);\n    }\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y.", "input": "", "output": "def display_numbers(x, y):\n  for i in range(x,y+1):\n    print(i)", "category": "Python"}, {"instruction": "Identify the output of the following code snippet written in Scala.", "input": "var number = 42 \nval message = if (number > 10) \"This number is greater than 10\" else \"This number is not greater than 10\"", "output": "This number is greater than 10", "category": "Python"}, {"instruction": "Write pseudocode for the merge sort algorithm.", "input": "", "output": "Mergesort(A):\n  if A has 1 item : \n      return A\n  else\n      divide A into two parts (left and right) of roughly equal size\n      B = Mergesort(left)\n      C = Mergesort(right)\n      D = Merge(B,C)\n      return D\n\nMerge(B,C):\n  create an empty list D\n  while B and C are not empty:\n      if B[0] \u2264 C[0]:\n          add the first item of B to the end of D\n          remove the first item of B\n      else:\n          add the first item of C to the end of D\n          remove the first item of C\n  while B is not empty:\n      add the first item of B to the end of D\n      remove the first item of B\n  while C is not empty:\n      add the first item of C to the end of D\n      remove the first item of C\n  return D", "category": "Python"}, {"instruction": "Create a function in R that returns the common elements in two given vectors.", "input": "", "output": "CommonElements <- function(x, y) {\n  intersection(x, y)\n}", "category": "Python"}, {"instruction": "Create a function to select the kth smallest item from a list.", "input": "lst = [3, 6, 8, 2, 10, 11]", "output": "# Create a function to select the kth smallest item from a list\ndef kth_smallest(lst, k):\n    sorted_lst = sorted(lst)\n\n    return sorted_lst[k - 1]\n\n# test the function\nitem = kth_smallest(lst, 4)\nprint(item) # Output: 8", "category": "Python"}, {"instruction": "Using a for loop, calculate the distance between one point to every other point in the given list.", "input": "points = [\n    (10, 20),\n    (12, 22),\n    (14, 24)\n]", "output": "# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\n\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]", "category": "Python"}, {"instruction": "Remove all the elements in an array using filter function.", "input": "items = [1, 2, 3, 4, 5]", "output": "# Remove all the elements in an array using filter function\nitems = [1, 2, 3, 4, 5]\n\nfilterend_items = list(filter(lambda x: False, items))\n\nprint(filterend_items) # Output: []", "category": "Python"}, {"instruction": "Change the code using decorator to log how long the function runs.", "input": "def sum_function(a, b):\n    return a + b", "output": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Evaluate the expression 200 + 400 / 2.", "input": "", "output": "# Evaluate the expression 200 + 400 / 2\n\nresult = 200 + 400 / 2\n\nprint(result) # Output: 300.0", "category": "Python"}, {"instruction": "Extract the list of urls using the beautifulsoup library.", "input": "html_text = '''<html>\n  <body>\n    <h1>List Of URLs</h1>\n    <p>Here is a list of URLs:</p>\n    <ul>\n      <li><a href=\"http://example.com\">Example</a></li>\n      <li><a href=\"http://example2.com\">Example2</a></li>\n    </ul>\n  </body>\n</html>'''", "output": "# Extract the list of urls using the beautifulsoup library\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html_text, 'html.parser')\nurls = [link.get('href') for link in soup.find_all('a')]\n\nprint(urls) # Output: ['http://example.com', 'http://example2.com']", "category": "Python"}, {"instruction": "Group the given list of names into 3 different categories based on the first letter of the name.", "input": "names = [\"Adam\", \"Bill\", \"Brian\", \"Clarence\", \"Doug\", \"Emily\", \"Fred\", \"George\", \"Henry\"]", "output": "# Group the given list of names into 3 different categories based on the first letter of the name\n\ngroup1 = [name for name in names if name[0] in ['A', 'B', 'C']]\ngroup2 = [name for name in names if name[0] in ['D', 'E', 'F']]\ngroup3 = [name for name in names if name[0] in ['G', 'H']]\n\nprint(group1) # Output: ['Adam', 'Bill', 'Brian', 'Clarence']\nprint(group2) # Output: ['Doug', 'Emily', 'Fred'] \nprint(group3) # Output: ['George', 'Henry']", "category": "Python"}, {"instruction": "Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.", "input": "x = 12", "output": "# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.\nfrom scipy.stats import norm\n\nprob = norm.pdf(x, 10, 2)\n\nprint(prob) # Output: 0.17603266338214976", "category": "Python"}, {"instruction": "Find all the even numbers in the given range.", "input": "min_num = 4\nmax_num = 17", "output": "# Find all the even numbers in the given range\neven_nums = [num for num in range(min_num, max_num + 1) if num % 2 == 0]\n\nprint(even_nums) # Output: [4, 6, 8, 10, 12, 14, 16]", "category": "Python"}, {"instruction": "How can we use the set() method to find the unique elements in a given list of integers in C#?", "input": "", "output": "var listOfIntegers = [1,2,3,3,2,2,3];\n\nvar uniqueElements = new HashSet<int>(listOfIntegers);\nforeach (var element in uniqueElements)\n{\n    Console.WriteLine(element);\n}", "category": "Python"}, {"instruction": "Modify the following JavaScript for loop so it will loop through the array in reverse order.", "input": "for (let i = 0; i < array.length; i++) { \n    console.log(array[i]); \n}", "output": "for (let i = array.length - 1; i >= 0; i--) { \n    console.log(array[i]); \n}", "category": "Python"}, {"instruction": "Given a list of integers, find the numbers which are greatest than the given number X.", "input": "List: [-3, 0, 3, 5, 9], X = 4", "output": "function greaterThan(list, x) \n{ \n    let result = []; \n      \n    for (let i=0; i<list.length; i++) \n        if (list[i] > x) \n            result.push(list[i]); \n              \n    return result; \n}", "category": "Python"}, {"instruction": "Create an if statement that prints \"Number is negative\" if the value of x is below zero.", "input": "x = -2", "output": "if x<0:\n    print(\"Number is negative\")", "category": "Python"}, {"instruction": "Angular 5 is a popular JavaScript framework used for front-end web development. What is the command to create a new project in Angular 5?", "input": "", "output": "ng new <project-name>", "category": "Python"}, {"instruction": "Create a SQL query that joins the Customers and Orders tables on customer_id", "input": "", "output": "SELECT * \nFROM Customers \nINNER JOIN Orders \nON Customers.customer_id = Orders.customer_id;", "category": "Python"}, {"instruction": "Write a function in JavaScript that will find the index of an element in an array.", "input": "", "output": "function findIndex(arr, el) {\n  for (var i=0; i < arr.length; i++) {\n    if (arr[i] === el) return i; \n  }\n  return -1; \n}", "category": "Python"}, {"instruction": "Create an object that uses constructor overloading in Python.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __init__(self, name, age, job):\n        self.name = name\n        self.age = age\n        self.job = job\n\np1 = Person('John Doe', 25)\np2 = Person('Jane Doe', 30, 'Software Engineer')", "category": "Python"}, {"instruction": "Explain the purpose of the \"+\" character in a regular expression.", "input": "", "output": "In a regular expression, the \"+\" character is a quantifier that matches 1 or more of the preceding character or expression. For example, \"ab+c\" would match strings such as 'abc', 'abbc', and 'abbbc', but not the string 'ac'.", "category": "Python"}, {"instruction": "Write a Java program to remove the duplicates in an array.", "input": "", "output": "import java.util.HashSet;\n\npublic class RemoveDuplicates {\n public static int[] removeDuplicates(int[] nums) {\n  HashSet<Integer> set = new HashSet<>();\n  for (int num : nums) set.add(num);\n  int[] result = new int[set.size()];\n  int i = 0;\n  for (int num : set) result[i++] = num;\n  return result;\n }\n}", "category": "Python"}, {"instruction": "Name three software design principles.", "input": "", "output": "The three software design principles are: \n1. Separation of Concerns \n2. DRY Principle \n3. KISS Principle.", "category": "Python"}, {"instruction": "Construct a simple Java program that calculates the sum of two integers.", "input": "", "output": "public class Sum {\n public static void main(String[] args) {\n   int a = 5;\n   int b = 10;\n   int sum = a + b;\n   System.out.println(\"The sum of the two integers is: \" + sum);\n }\n}", "category": "Python"}, {"instruction": "Generate random numbers in range [0,10] in C++.", "input": "", "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \n  \n// Main function \nint main() \n{ \n    srand((unsigned)time(0)); \n    for (int i = 0; i < 100; i++) \n    { \n        int random_number = rand() % 11; \n        std::cout << random_number << ' '; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a method to constitute a Hashmap with the following parameters: key (String) and value (Integer).", "input": "", "output": "public static HashMap<String, Integer> constructMap(String key, Integer value) \n{ \n\n    // Create an empty HashMap \n    HashMap<String, Integer> myMap = new HashMap<>(); \n  \n    // Add key-value pairs to the HashMap \n    myMap.put(key, value); \n  \n    // Return the HashMap \n    return myMap; \n}", "category": "Python"}, {"instruction": "Describe what a condition in a while loop does in Python.", "input": "", "output": "A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met.", "category": "Python"}, {"instruction": "Develop a shell script to display the information of the current logged in user.", "input": "", "output": "#!/bin/bash\necho \"The username is: $(whoami)\"\necho \"The home directory is: $HOME\"\necho \"The current shell is: $SHELL\"", "category": "Python"}, {"instruction": "Create a C# program to check if any element in an array is equal to a given number.", "input": "arr = {1, 4, 7, 9} and given number = 7", "output": "public static bool IsEqualToGivenNumber(int[] arr, int number)\n{\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i] == number)\n        {\n            return true;\n        }\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Develop an algorithm in Java that removes duplicate elements from an array.", "input": "[1, 3, 5, 3, 4, 5]", "output": "public static int[] removeDuplicates(int[] arr) { \n    int n = arr.length; \n  \n    // To store index of next unique element \n    int j = 0; \n  \n    // Doing same as done in Method 1 \n    // Just maintaining another updated index i.e. j \n    for (int i = 0; i < n-1; i++) \n        if (arr[i] != arr[i+1] ) \n            arr[j++] = arr[i]; \n  \n    arr[j++] = arr[n-1]; \n  \n    return Arrays.copyOf(arr, j); \n}", "category": "Python"}, {"instruction": "Create a for loop that prints all even numbers from 0 to 10 (inclusive).", "input": "", "output": "for i in range(0, 11):\n    if (i % 2 == 0):\n        print(i)", "category": "Python"}, {"instruction": "Write a function called \"power\" that takes two numbers a and b as arguments, and returns a to the power of b.", "input": "", "output": "def power(a, b):\n    return a**b", "category": "Python"}, {"instruction": "What is the SQL query to select all the values that are greater than 10 in the \"Age\" column in the table \"Students\"?", "input": "", "output": "SELECT * FROM Students WHERE Age > 10", "category": "Python"}, {"instruction": "Create a Javascript class called \"Car\" that takes an argument called \"year\" and prints the value of \"year\".", "input": "", "output": "class Car{\n    constructor(year){\n        this.year = year;\n    }\n    printYear(){\n        console.log(this.year);\n    }\n}", "category": "Python"}, {"instruction": "Using a dictionary, store the given student's name and marks as key value pairs.", "input": "name = \"John Doe\"\nmarks = { \"maths\" : 90, \"physics\" : 80, \"chemistry\" : 85 }", "output": "student_data = {}\nstudent_data[name] = marks", "category": "Python"}, {"instruction": "Using a list comprehension, create a function to give only the even numbers in a given list.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def only_even(arr):\n    return [ num for num in arr if num % 2 == 0 ]", "category": "Python"}, {"instruction": "Find the Fibonacci number for a given number using a for loop.", "input": "", "output": "def fibonacci(n):\n    fibonacci_numbers = [0,1]\n    for i in range(2, n+1):\n        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    return fibonacci_numbers[n]", "category": "Python"}, {"instruction": "Using a while loop, write a program to delete all duplicate elements from an array.", "input": "arr = [1, 2, 3, 2, 3, 4, 3]", "output": "def remove_duplicates(arr):\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            arr.remove(arr[i])\n        else:\n            i += 1\n    return arr", "category": "Python"}, {"instruction": "Create a function to decode a given string using the provided cipher.", "input": "decoding_cipher = { \"x\" : \"a\", \"y\": \"b\", \"z\" : \"c\" }\nstring = \"xyz\"", "output": "def decode_string(decoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += decoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Create a function that takes a given string and encodes it with a specified cipher.", "input": "encoding_cipher = {\"a\" : \"x\", \"b\" : \"y\", \"c\": \"z\"}\nstring = \"abc\"", "output": "def encode_string(encoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += encoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Merge two arrays using the given lists.", "input": "arr1 = [1, 2, 3]\narr2 = [\"a\", \"b\", \"c\"]", "output": "arr = arr1 + arr2\n#Merge two arrays\narr = arr1 + arr2", "category": "Python"}, {"instruction": "Create a Python program to take a float input and output its binary equivalent.", "input": "25.68", "output": "def floatToBin(num):\n    whole, decimal = str(num).split(\".\")   \n    whole = int(whole)\n    decimal = int (decimal) \n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res \n \n# Driver code  \nnumber = 25.68\nprint(floatToBin(number)) # returns '11001.1011'", "category": "Python"}, {"instruction": "Use conditionals to decide what to print using the input array.", "input": "arr = [\"hamburger\", \"hot dog\", \"cheese\"]", "output": "if len(arr) == 0:\n   print(\"No food available\")\nelif len(arr) == 1:\n   print(arr[0] + \" is available\")\nelif len(arr) == 2:\n   print(arr[0] + \" and \"+ arr[1] + \" are available\")\nelse:\n   print(\"Multiple items are avaiable: \" + ', '.join(arr))", "category": "Python"}, {"instruction": "Define a constructor in Java to create an instance of a class.", "input": "", "output": "public class MyClass {\n    // Constructors\n    public MyClass() {\n        // Default constructor\n    }\n    \n    // Constructor with parameters\n    public MyClass(int a, int b) {\n        // Do something with the parameters\n    }\n }", "category": "Python"}, {"instruction": "Using regex, find all the words that have a specific character at the start.", "input": "the words that start with 'a'", "output": "import re\n\nwords = [\"amazing\", \"apple\", \"banana\", \"cherry\", \"desert\", \"encounter\"]\n\nresult = [word for word in words if re.search(\"^a\", word)]\nprint(result)", "category": "Python"}, {"instruction": "Create a list comprehension to generate the multiples of a number up to a limit.", "input": "multiples of 7 until 50", "output": "multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]", "category": "Python"}, {"instruction": "Design a class for representing a person in Python.", "input": "", "output": "class Person:\n    \"\"\"\n    Class to represent a person\n    \"\"\"\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def birthday(self):\n        \"\"\"\n        Increments the age of the person\n        \"\"\"\n        self.age += 1", "category": "Python"}, {"instruction": "Write a regular expression to match any word that starts with \"cat\" and contains only lowercase letters.", "input": "", "output": "^cat[a-z]*$", "category": "Python"}, {"instruction": "Create a variable called \"counter\" and increment it by one in a loop that runs 10 times.", "input": "", "output": "counter = 0\nfor i in range(10):\n    counter += 1", "category": "Python"}, {"instruction": "Create a function to round a number to the nearest integer.", "input": "", "output": "def round_number(x):\n    return round(x)", "category": "Python"}, {"instruction": "Using the input set the value of the variable.", "input": "value = \"hello world\"", "output": "value = \"hello world\"", "category": "Python"}, {"instruction": "Write the C++ code to print the smallest prime factor of a given number", "input": "number = 54", "output": "int main()\n{\n    int factor = 2;\n    int number = 54;\n\n    while (number > 1)\n    {\n        if (number % factor == 0)\n        {\n            cout << factor << endl;\n            number /= factor;\n        }\n        else\n            factor++;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a HTML page to display a navigation bar with a dropdown list that includes a list of the months of the year.", "input": "", "output": "<nav>\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">Months</button>\n    <div class=\"dropdown-content\">\n      <a href=\"\">January</a>\n      <a href=\"\">February</a>\n      <a href=\"\">March</a>\n      <a href=\"\">April</a>\n      <a href=\"\">May</a>\n      <a href=\"\">June</a>\n      <a href=\"\">July</a>\n      <a href=\"\">August</a>\n      <a href=\"\">September</a>\n      <a href=\"\">October</a>\n      <a href=\"\">November</a>\n      <a href=\"\">December</a>\n    </div>\n  </div>\n</nav>", "category": "Python"}, {"instruction": "Generate a program to remove duplicates from an unsorted linked list.", "input": "", "output": "class Node: \n  \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n  \ndef remove_duplicates(head): \n    h = {} \n  \n    temp = head \n    prev = None\n    while(temp): \n        if temp.data in h: \n            prev.next = temp.next\n            temp = None\n        else: \n            h[temp.data] = True\n            prev = temp \n        temp = prev.next\n\nif __name__ == \"__main__\":\n    pass", "category": "Python"}, {"instruction": "Classify each of the provided words as either a noun, verb, or adjective.", "input": "words = [\"run\", \"sleep\", \"grass\", \"study\", \"loud\"]", "output": "Noun: sleep, grass, study\nVerb: run, loud\nAdjective: None", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers in a given range of numbers.", "input": "start_num = 1\nend_num = 100", "output": "primes = []\nfor num in range(start_num, end_num + 1):\n  if num > 1:\n    for i in range(2, num):\n      if num % i == 0:\n        break\n    else:\n      primes.append(num)\n\nprint(primes)", "category": "Python"}, {"instruction": "Write a code to convert the provided string into an array of numbers.", "input": "string_two = \"01,2,3,4,5,6\"", "output": "arr = list(map(int, string_two.split(\",\")))", "category": "Python"}, {"instruction": "Write code to organize the provided list in ascending order.", "input": "list_two = [7, 4, 2, 3, 1, 8, 5]", "output": "list_two.sort()", "category": "Python"}, {"instruction": "Using the given list and dictionary, write the Python code to remove duplicate objects from the list.", "input": "list_one = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]\ndict_one = {\"John\": \"Smith\", \"Janet\": \"Wise\"}", "output": "new_list = []\n\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\n\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]", "category": "Python"}, {"instruction": "Using the variable names, create a dictionary with the provided entries.", "input": "key1 = \"item1\"\nval1 = \"00001\"\nkey2 = \"item2\"\nval2 = \"00002\"", "output": "dict = {key1:val1, key2:val2}", "category": "Python"}, {"instruction": "Edit the code to make sure the output error messages are informative.", "input": "def myfunc(param):\n if type(param) != str:\n     print(f\"{param} is not valid input type\")", "output": "def myfunc(param):\n if not isinstance(param, str):\n     print(f\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\")", "category": "Python"}, {"instruction": "Create an array of all the prime numbers up to 50.", "input": "", "output": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)", "category": "Python"}, {"instruction": "Compute the Fibonacci series up to the following number n.", "input": "", "output": "def fibonacci(n):\n  a = 0 \n  b = 1\n  arr = []\n  arr.append(a)\n  arr.append(b)\n  for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n      arr.append(c)\n  return arr", "category": "Python"}, {"instruction": "Create a JavaScript function to return the greatest value from the following array of numbers.", "input": "[2, 4, 8, 10, 15]", "output": "function getGreatestValue(arr) {\n  let greatest = arr[0];\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] > greatest) {\n      greatest = arr[i];\n    }\n  }\n  return greatest;\n}", "category": "Python"}, {"instruction": "Create a function to process the following data and return the average temperature for the last five days.", "input": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\ntemps = [27, 28, 29, 20, 21]", "output": "def get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n        \n    avg = total / len(days)\n    \n    return avg", "category": "Python"}, {"instruction": "Create a boolean function called \"is_num_even\" which takes in a number and returns true if the number is even.", "input": "", "output": "def is_num_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Print all the odd numbers from 1 to 10 (inclusive)", "input": "", "output": "for num in range(1, 11):\n    if num % 2 == 1:\n        print(num)", "category": "Python"}, {"instruction": "Using the following data, convert the X and Y coordinates into longitude and latitude.", "input": "X: 83.206226\nY: 42.821810", "output": "longitude: 42.821810\nlatitude: 83.206226", "category": "Python"}, {"instruction": "Suggest a variable name for the following equation: 1 + 2 - 3 x 4", "input": "", "output": "result = 1 + 2 - 3 * 4", "category": "Python"}, {"instruction": "Compare the two values, output the greater one.", "input": "val1 = \"dog\"\nval2 = \"cat\"", "output": "if val1 > val2:\n  print(val1)\nelse:\n  print(val2)", "category": "Python"}, {"instruction": "Write a code that iterates over the provided list of dictionaries and prints the value of \"name\" in each dictionary.", "input": "list_three = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]", "output": "for item in list_three:\n  print(item[\"Name\"])", "category": "Python"}, {"instruction": "Determine the best data structure to store the following information.", "input": "The information is a list of people and their corresponding email addresses.", "output": "The best data structure for storing this information is a dictionary, where the keys are the names of the people and the values are their email addresses.", "category": "Python"}, {"instruction": "Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array.", "input": "arr = [2, 3, 1, 10, 5, 6, 8, 7]", "output": "def max_length(arr): \n    ans = 1\n    j = 0\n\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\n\nprint(max_length(arr))", "category": "Python"}, {"instruction": "Create a code to generate a Mulberry Tree of height n levels.", "input": "", "output": "def get_mulberry_tree(n):\n    spaces = n - 1\n    for i in range(1, n+1):\n        for j in range(spaces):\n            print(end = \" \") \n        spaces = spaces - 1\n        for j in range(i):\n            print(\"* \", end = \"\")\n        print() \n\nif __name__ == \"__main__\": \n    n = 5\n    get_mulberry_tree(n)", "category": "Python"}, {"instruction": "Design an algorithm to produce a binary tree from given inorder and preorder traversals.", "input": "inorder: [4,2,5,1,3,6]\npreorder: [1,2,4,5,3,6]", "output": "class Node: \n    # A constructor to create a  \n    # new linked node  \n    def __init__(self, data):  \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef binary_tree_from_inorder_preorder(inorder, preorder): \n    if len(inorder) in [0, 1]: \n        return Node(inorder[0]) if inorder else None\n              \n    root_val = preorder[0]\n    root = Node(root_val) \n  \n    i_index = inorder.index(root_val) \n  \n    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],\n                                      preorder[1:i_index + 1]) \n  \n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],  \n                                       preorder[i_index + 1:]) \n  \n    return root\n\nif __name__ == \"__main__\":\n    inorder=[4,2,5,1,3,6]\n    preorder=[1,2,4,5,3,6]\n    root = binary_tree_from_inorder_preorder(inorder, preorder)", "category": "Python"}, {"instruction": "Compose a function to generate a palette of random colors.", "input": "", "output": "import random\n\ndef generate_palette(n): \n    palette = [] \n    for i in range(n): \n        rgb = [] \n        for j in range(3): \n            rgb.append(random.randint(1, 255)) \n        palette.append(rgb) \n          \n    return palette\n\nif __name__ == \"__main__\": \n    n = 10\n    palette = generate_palette(n) \n    print(palette)", "category": "Python"}, {"instruction": "Become an algorithm to check if a linked list is empty.", "input": "", "output": "def is_list_empty(head):\n    if head == None:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create an efficient matrix multiplication of two given matrices.", "input": "matrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]", "output": "def matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))", "category": "Python"}, {"instruction": "Develop a code to identify the most commonly used words in a given text.", "input": "The quick brown fox jumps over the lazy dog", "output": "from collections import Counter \n  \ndef most_common_words(text): \n    words = text.split() \n    counter = Counter(words) \n    high_occur = counter.most_common(3) \n    return high_occur\n\nif __name__ == \"__main__\":\n    text = \"The quick brown fox jumps over the lazy dog\"\n    most_common_words(text)", "category": "Python"}, {"instruction": "Compose a Unix command to list all the directories in a given path?", "input": "", "output": "ls -l | grep \"^d\"", "category": "Python"}, {"instruction": "Design a Java method to retrieve the maximum value from an array.", "input": "[2, 3, 5, 9, 6, 11]", "output": "public static int getMax(int[] arr) { \n        int max = Integer.MIN_VALUE; \n        for (int i = 0; i < arr.length; i++) { \n            if (arr[i] > max) \n                max = arr[i]; \n        } \n        return max; \n    }", "category": "Python"}, {"instruction": "Create a function to evaluate a mathematical expression like \"3 + 5 * 4\".", "input": "", "output": "def evaluate(expression):\n    result = None\n    try:\n        result = eval(expression)\n    except:\n        pass\n    return result", "category": "Python"}, {"instruction": "Edit the following C++ code so that it prints 10, 11 and 12 in order.", "input": "#include <iostream>\n\nint main() \n{\n  int i = 10;\n  int j = 12;\n  while (i < j)\n  {\n    std::cout << i << \" \";\n    i++;\n  }\n  return 0;\n}", "output": "#include <iostream>\n\nint main() \n{\n  int i = 10;\n  int j = 12;\n  while (i <= j)\n  {\n    std::cout << i << \" \";\n    i++;\n  }\n  return 0;\n}", "category": "Python"}, {"instruction": "Make the following code thread-safe by implementing mutex locks.", "input": "#include <pthread.h>\nint global_int = 0;\n\nvoid* inc_func(void* arg) {\n   global_int++;\n   return NULL;\n}\n\nint main() {\n   pthread thread_a, thread_b; \n   ...\n   return 0;\n}", "output": "#include <pthread.h>\n#include <mutex>\n\nint global_int = 0;\nstd::mutex mtx;\n\nvoid* inc_func(void* arg) {\n   mtx.lock();\n   global_int++;\n   mtx.unlock();\n   return NULL;\n}\n\nint main() {\n   pthread thread_a, thread_b; \n   std::unique_lock<std::mutex> lock(mtx);\n   ...\n   lock.unlock();\n   return 0;\n}", "category": "Python"}, {"instruction": "Create a function which checks if a certain element is present in a given array.", "input": "arr = [2, 8, 3, 5]\nelement = 8", "output": "const arr = [2, 8, 3, 5];\nconst element = 8;\n\nconst checkElementInArray = (arr, element) => {\n    return arr.includes(element);\n}\n\nconsole.log(checkElementInArray(arr, element)); // true", "category": "Python"}, {"instruction": "At which index should the following element be inserted so that the array is sorted in ascending order?", "input": "Array: [2, 3, 4, 5, 7]\nElement to be inserted: 6", "output": "4", "category": "Python"}, {"instruction": "Write a Python script to check if an email address is valid depending on the given conditions.", "input": "Email address: johnsmith@example.com\nCheck the following conditions:\n1. Must contain an \"@\" symbol\n2. Must contain a \".\"\n3. Must have at least 6 characters", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\n\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")", "category": "Python"}, {"instruction": "Write a function in C which will take two integer arguments and swap their values.", "input": "int x = 1;\nint y = 2;", "output": "#include <stdio.h>\n\nvoid swap(int *x, int *y)\n{\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint main()\n{\n    int x = 1;\n    int y = 2;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}\n// Output: x = 2, y = 1", "category": "Python"}, {"instruction": "Generate a JSON structure that contains a specific set of data.", "input": "User \"Alex\" should contain full name, age (21) and address (123 Main Street).", "output": "{\n    \"user\": {\n        \"name\": \"Alex\",\n        \"age\": 21,\n        \"address\": \"123 Main Street\"\n    }\n}", "category": "Python"}, {"instruction": "Implement a reverse for loop in Python.", "input": "", "output": "for i in reversed(range(0, 10)):\n   print(i)", "category": "Python"}, {"instruction": "Convert a given array of strings to an array of numbers.", "input": "Array: ['1', '2', '3']", "output": "nums = list(map(int, ['1', '2', '3']))", "category": "Python"}, {"instruction": "Compute the largest common denominator of 4 and 12", "input": "", "output": "The LCM of 4 and 12 is 12.", "category": "Python"}, {"instruction": "Name the Java keyword used to define a class", "input": "", "output": "The Java keyword used to define a class is \"class\".", "category": "Python"}, {"instruction": "Generate a string representation of a binary tree.", "input": "", "output": "def tree_str(root):\n    if root is None:\n        return ''\n\n    left_str = tree_str(root.left)\n    right_str = tree_str(root.right)\n\n    if left_str != '' and right_str != '':\n        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'\n    if left_str != '' and right_str == '':\n        return '(' + left_str + ')' + str(root.val)\n    if left_str == '' and right_str != '':\n        return  str(root.val) + '(' + right_str + ')'\n    else:\n        return str(root.val)", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to find the sum of the even numbers in a given range using the reduce() method.", "input": "let arr = [1,2,3,4,5,6,7,8,9,10];", "output": "const sumOfEvenNumbers = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n        return acc + curr;\n    } \n    return acc;\n}, 0);\nconsole.log(sumOfEvenNumbers);", "category": "Python"}, {"instruction": "Rewrite the following code so that it is easier to read and understand.", "input": "def is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else: \n            return false", "output": "def is_string_palindrome(str):\n    reverse_str = str[::-1] \n    if reverse_str == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write a code snippet in C which calculates the mean of a list of numbers.", "input": "int nums[] = {2, 3, 4, 5, 6};", "output": "#include <stdio.h>\n\nint calcMean(int nums[], int size) {\n    int sum = 0;\n    for (int i=0; i<size; i++) {\n        sum += nums[i];\n    }\n    return sum/size;\n}\n\nint main() {\n    int nums[] = {2, 3, 4, 5, 6};\n    int size = sizeof(nums)/sizeof(nums[0]);\n\n    int mean = calcMean(nums, size);\n    printf(\"The mean of the numbers is %d.\", mean);\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the employee who has the lowest salary from the employee table.", "input": "Employee Table\n\nEmployeeName | Department  | Salary\n-------------------------------\nJohn         | IT          | 25000\nMary         | Finance     | 28000\nSam          | Marketing   | 23000\nRandy        | HR          | 32000", "output": "SELECT EmployeeName, MIN(Salary) FROM Employee TABLE;", "category": "Python"}, {"instruction": "Write a quick SQL query to find the oldest employee in a given department.", "input": "", "output": "SELECT * FROM employees\nWHERE department_id = :department_id\nORDER BY dob DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Suppose you are designing a simple text editor. Write a C++ code to automatically detect and remove comments from a given input string.", "input": "", "output": "// Function to remove comments from a given input string\nstring removeComments(string input_string)\n{\n    string output_string = \"\";\n    int flag = 0;\n\n    for (int i = 0; i<input_string.length(); i++)\n    {\n        // Check for single line comments\n        if (input_string[i] == '/' && input_string[i+1] == '/')\n            flag = 1;\n\n        // Check for multi-line comments\n        if (input_string[i] == '/' && input_string[i+1] == '*')\n            flag = 2;\n\n        // If single line or multi-line comment section,\n        // ignore the part of the string\n        if (flag == 1 || flag == 2)\n        {\n            if (input_string[i] == '\\n')\n                flag = 0;\n            continue;\n        }\n\n        output_string += input_string[i];\n    }\n\n    return output_string;\n}", "category": "Python"}, {"instruction": "Design a Python program to find the longest increasing subsequence in a given array.", "input": "", "output": "def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths", "category": "Python"}, {"instruction": "Write a code to find the Kth smallest element from a given array of N elements.", "input": "", "output": "// A function to find kth smallest element\nint kthSmallest(int arr[], int n, int k)\n{\n    //Sort the given array\n    sort(arr, arr+n);\n \n    // Return k'th element\n    return arr[k-1];\n}", "category": "Python"}, {"instruction": "Design a Ruby program to search through an array and find the first element that satisfies a given condition.", "input": "", "output": "def search_array(arr, condition)\n    arr.find { |item| condition.call(item) }\nend", "category": "Python"}, {"instruction": "Design an algorithm to reverse a singly linked list in O(n) time.", "input": "", "output": "// Algorithm to reverse a singly linked list in O(n) time\n//\n//\n// INPUT:  A singly Linked List\n//\n// OUTPUT: A reversed singly Linked List\n\n// Initialize three pointers\n\nNode* prev = NULL; \nNode* curr = head;\nNode* next = NULL;\n\n// Iterate through the linked list, reversing the links as we go\n\nwhile (curr != NULL) {\n    // Store the next node\n    next = curr->next;\n\n    // Reverse the current node's pointer\n    curr->next = prev;\n\n    // Advance the pointers one position\n    prev = curr;\n    curr = next;\n}\n\n// Return the reversed linked list\nreturn prev;", "category": "Python"}, {"instruction": "Implement a PHP function to retrieve all words that start with a given letter from a given array.", "input": "$array = [\"apple\", \"ball\", \"cat\", \"dart\", \"elephant\"]\n$letter = \"e\"", "output": "<?php\nfunction getWordsStartingWith($array, $letter)\n{\n    $matches = array_filter($array, function($word) use($letter) {\n        return strtolower($word[0]) == strtolower($letter);\n    });\n    return array_values($matches);\n}\n\n$array = [\"apple\", \"ball\", \"cat\", \"dart\", \"elephant\"];\n$letter = \"e\";\n$result = getWordsStartingWith($array, $letter);\n\nprint_r($result);", "category": "Python"}, {"instruction": "Write a Java method that accepts two integers and returns their least common multiple.", "input": "", "output": "public static int lcm(int a, int b) {\n    int gcd = 1;\n    for(int i = 1; i <= a && i <= b; ++i)\n    {\n        // Checks if i is factor of both integers\n        if(a % i == 0 && b % i == 0)\n            gcd = i;\n    }\n\n    int lcm = (a*b) / gcd;\n    return lcm;\n}", "category": "Python"}, {"instruction": "Create a CSS style that makes a given text slightly bigger and bold on hover.", "input": "", "output": "p:hover {\n  font-size: 1.2em;\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Create a HTML form with 4 fields, a Name field, an Email field, a Phone number field and an Address field.", "input": "", "output": "<form>\n  <label>Name</label>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Email</label>\n  <input type=\"text\" name=\"email\"><br>\n  <label>Phone Number</label>\n  <input type=\"text\" name=\"phone_number\"><br>\n  <label>Address</label>\n  <input type=\"text\" name=\"address\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process.", "input": "", "output": "import tensorflow as tf\n\n# define a convolutional neural network\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n\n# display results\nmodel.evaluate(x_test, y_test)\n['loss', 'accuracy']\n[0.32971992206192017, 0.8856600217819214]", "category": "Python"}, {"instruction": "Create a Python code snippet to identify the root cause of a Software Bug.", "input": "", "output": "def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes", "category": "Python"}, {"instruction": "Rewrite the following code in a more descriptive style and make it easier to read.", "input": "for i in range(1, n):\n    for j in range(1, n):\n        if i + j == n:\n            print(i, j)", "output": "for i in range(1, n):\n    for j in range(1, n):\n        # check if the sum of i and j is equal to n\n        if (i + j) == n:\n            print(i, j)", "category": "Python"}, {"instruction": "Write a code snippet to find all the elements in a list that are greater than a specified number.", "input": "lst = [1, 5, 10, 15, 27]\nk = 10", "output": "# Initializing an empty list\nnew_lst = []\n\n# Iterating over the given list\nfor elem in lst:\n  # Appending elements that are greater than 10\n  if elem > k:\n    new_lst.append(elem)\n\n# Printing corresponding result \nprint(new_lst) # Output: [15, 27]", "category": "Python"}, {"instruction": "Write a function in Python to generate a list with the numbers from 0 to the provided number.", "input": "num = 10", "output": "def generateList(n):\n    list = []\n    for i in range(n+1):\n        list.append(i)\n    return list\n\nprint(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Return the names of the customers that contain the string \u201cali\u201d.", "input": "", "output": "SELECT name \nFROM customers \nWHERE name LIKE '%ali%';", "category": "Python"}, {"instruction": "Create a HTML page that shows the data provided in an interactive table.", "input": "data = [\n  { \"id\": 1, \"first_name\": \"John\", \"last_name\": \"Doe\" },\n  { \"id\": 2, \"first_name\": \"Amy\", \"last_name\": \"Smith\" },\n  { \"id\": 3, \"first_name\": \"Brian\", \"last_name\": \"Green\" }\n]", "output": "<html>\n  <head>\n    <title>Interactive Table</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in data %}\n          <tr>\n            <td>{{ item.id }}</td>\n            <td>{{ item.first_name }}</td>\n            <td>{{ item.last_name }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following CSS code to make the text red.", "input": ".message {\n  font-size: 14px;\n}", "output": ".message {\n  font-size: 14px; \n  color: red;\n}", "category": "Python"}, {"instruction": "Write a function in Python to remove the element with the value of \u2018apple\u2019 from the list.", "input": "fruits =[\"banana\", \"apple\", \"mango\", \"orange\"]", "output": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']", "category": "Python"}, {"instruction": "Use the input to write a loop in Python to print each product details.", "input": "products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "output": "for product in products:\n    print(\"Product name: \" + product['name'] + \", Price: \" + str(product['price']))\n\n# Output\n# Product name: iPhone XS, Price: 1000\n# Product name: iPhone XR, Price: 800\n# Product name: iPad Air, Price: 600", "category": "Python"}, {"instruction": "And the list of product details as a JSON format.", "input": "products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "output": "[\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "category": "Python"}, {"instruction": "Create a stored procedure in SQL that calculates the average of a column in a table.", "input": "Table: Student\nColumn: Score", "output": "CREATE PROCEDURE avg_score \nAS\nBEGIN\n  SELECT AVG(Score) FROM Student;\nEND;", "category": "Python"}, {"instruction": "Find the length of a Python list.", "input": "List = [1,2,3]", "output": "List = [1,2,3]\n\nlength = len(List)\nprint(length)\n\n# Output\n3", "category": "Python"}, {"instruction": "Generate a random 2D array with the given dimensions.", "input": "Rows: 5 \nColumns: 3", "output": "import numpy as np\n\nrows = 5\ncolumns = 3\n\narr = np.random.randint(0, 11, size=(rows, columns)) \n\nprint(arr)", "category": "Python"}, {"instruction": "Create a script that filters the list of strings and returns only the strings that contain the specific, user-specified character.", "input": "User Character: 'a'\nList: ['apple','peach','pear','tangerine','plum','grape','banana']", "output": "def filter_string(strings, char):\n  result = []\n  for string in strings:\n    if char in string:\n      result.append(string)\n  return result\n\nprint(filter_string(['apple','peach','pear','tangerine','plum','grape','banana'], 'a'))", "category": "Python"}, {"instruction": "Find a way to insert the given data into a MongoDB database using Mongoose.", "input": "data = [\n    {name: \"John Doe\", age: 34}, \n    {name: \"Jane Smith\", age: 25}\n]", "output": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: {\n    type: String\n  },\n  age: {\n    type: Number\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\ndata.forEach( (user) => {\n  const newUser = new User(user);\n  newUser.save()\n    .then( () => console.log('User saved') )\n    .catch( err => console.log(err))\n});", "category": "Python"}, {"instruction": "Write a Python program to insert a given string into another string at a certain index.", "input": "Variable String = \"The quick brown fox\" \nString To Insert = \"jumps over\"\nIndex = 16", "output": "The quick brown jumps over fox", "category": "Python"}, {"instruction": "Print the total number of keys present in a given dictionary.", "input": "phone_numbers = {\n    \"John\" : \"123-456-7890\",\n    \"Jane\" : \"890-567-1234\",\n    \"Jack\" : \"345-678-9012\"\n}", "output": "print(len(phone_numbers)) # Output: 3", "category": "Python"}, {"instruction": "Generate a random letter from the string provided.", "input": "string = \"Hello World\"", "output": "import random\n\nrandom_letter = random.choice(string) # Output: a randomly generated letter from the string", "category": "Python"}, {"instruction": "Determine if the word \"hello\" is present in the provided list.", "input": "words = [\"hi\", \"goodbye\", \"apple\", \"orange\"]", "output": "if \"hello\" in words:\n  print(\"Yes, the word hello is present in the provided list.\")\nelse:\n  print(\"No, the word hello is not present in the provided list.\")", "category": "Python"}, {"instruction": "Change the color of the text to blue.", "input": "Text: The quick brown fox", "output": "<span style=\"color:blue;\">The quick brown fox</span>", "category": "Python"}, {"instruction": "Edit the following HTML to change the font of the page", "input": "<html>\n    <head>\n        <title>My Page</title>\n    </head>\n    <body>\n        <h2>Hello World!</h2>\n    </body>\n</html>", "output": "<html>\n    <head>\n        <title>My Page</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n            }\n        </style>\n    </head>\n    <body>\n        <h2>Hello World!</h2>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a function in Java that takes a String as argument and converts it to Title Case.", "input": "this is a test.", "output": "public static String toTitleCase(String str) {\n  String words[] = str.split(\"\\\\s\"); \n  StringBuilder ret = new StringBuilder(); \n  for(int i = 0; i < words.length; i++) {\n    ret.append(Character.toUpperCase(words[i].charAt(0)));\n    ret.append(words[i].substring(1));\n    if(i < words.length - 1) {\n      ret.append(' '); \n    }\n  }\n  return ret.toString();\n}", "category": "Python"}, {"instruction": "Write a function in Java that takes an array as input and returns an array of the same size with the elements in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "public static int[] reverseArray(int[] array) {\n int[] reversedArray = new int[array.length];\n int j = array.length - 1;\n for(int i = 0; i < array.length; i++) {\n reversedArray[i] = array[j];\n j--;\n }\n return reversedArray;\n}", "category": "Python"}, {"instruction": "Given an array of integers, write a JavaScript function to remove all duplicate elements.", "input": "", "output": "function removeDuplicates(arr) {\n    const uniqueElements = [...new Set(arr)];\n    return uniqueElements;\n}", "category": "Python"}, {"instruction": "Create a SQL statement to select all carts with more than 10 items in them.", "input": "", "output": "SELECT * FROM carts WHERE items > 10;", "category": "Python"}, {"instruction": "Initialize a new enum type in Java that stores the information of colors.", "input": "", "output": "public enum Color {\n    RED,\n    GREEN,\n    BLUE\n}", "category": "Python"}, {"instruction": "Parse the following JSON using JavaScript.", "input": "{\"courseName\":\"Python\"}", "output": "const jsonData = JSON.parse('{\"courseName\":\"Python\"}');\nconst courseName = jsonData.courseName;", "category": "Python"}, {"instruction": "Create a Java method that takes in an integer array and returns it sorted.", "input": "[7, -2, 4, 21, 0]", "output": "public static int[] sortInteger(int[] arr) {\n    int[] sortedArr = Arrays.copyOf(arr, arr.length);\n    Arrays.sort(sortedArr);\n    return sortedArr;\n}", "category": "Python"}, {"instruction": "Compare two given strings and return true if they are the same.", "input": "str1 = \"Hello world\"\nstr2 = \"Hello world\"", "output": "def compare_str(str1, str2): \n return str1 == str2\n\nstr1 = \"Hello world\"\nstr2 = \"Hello world\"\n\nprint(compare_str(str1, str2))\n# Output: True", "category": "Python"}, {"instruction": "Use a loop to find the average of all given numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_avg(nums):\n total = 0\n for num in nums:\n  total += num\n\nreturn total / len(nums)\n\nlist = [1, 2, 3, 4, 5]\nprint(find_avg(list))\n# Output: 3.0", "category": "Python"}, {"instruction": "Use the split method to split a string based on the given delimiter.", "input": "str = \"apple,banana,orange\"", "output": "str = \"apple,banana,orange\"\nlist = str.split(\",\")\nprint(list) \n# Output: ['apple', 'banana', 'orange']", "category": "Python"}, {"instruction": "Create a JSON object from a dictionary in Python.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}\n\njson_data = json.dumps(data)\nprint(json_data)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"Main Street\", \"city\": \"New York City\"}}", "category": "Python"}, {"instruction": "Create a program to evaluate a postfix expression.", "input": "", "output": "# Python program to evaluate value of a postfix expression \n  \n# Class to convert the expression \nclass Conversion: \n       \n    # Constructor to initialize the class variables \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        # This array is used a stack \n        self.array = [] \n        # Precedence setting \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}\n       \n    # check if the stack is empty \n    def isEmpty(self): \n        return True if self.top == -1 else False\n       \n    # Return the value of the top of the stack \n    def peek(self): \n        return self.array[-1] \n       \n    # Pop the element from the stack \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        else: \n            return \"$\"\n       \n    # Push the element to the stack \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)  \n   \n    # A utility function to check is the given character \n    # is operand  \n    def isOperand(self, ch): \n        return ch.isalpha() \n   \n    # Check if the precedence of operator is strictly \n    # less than top of stack or not \n    def notGreater(self, i): \n        try: \n            a = self.precedence[i] \n            b = self.precedence[self.peek()] \n            return True if a  <= b else False\n        except KeyError:  \n            return False\n              \n    # The main function that converts given infix expression \n    # to postfix expression  \n    def infixToPostfix(self, exp): \n           \n        # Iterate over the expression for conversion \n        for i in exp: \n            # If the character is an operand,  \n            # add it to output \n            if self.isOperand(i): \n                self.output.append(i) \n              \n            # If the character is an '(', push it to stack \n            elif i  == '(': \n                self.push(i) \n   \n            # If the scanned character is an ')', pop and  \n            # output from the stack until and '(' is found \n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop() \n   \n            # An operator is encountered \n            else: \n                while(not self.isEmpty() and self.notGreater(i)): \n                    self.output.append(self.pop()) \n                self.push(i) \n   \n        # pop all the operator from the stack \n        while not self.isEmpty(): \n            self.output.append(self.pop()) \n   \n        return \"\".join(self.output) \n   \ncount = 0\n\n# Driver program to test above function \nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp)) \nans = obj.infixToPostfix(exp) \nprint(ans)\n\n# This function evaluates value of a postfix expression \ndef evaluatePostfix(exp): \n\t\n\t# Create a stack \n\tstack = [] \n\t\n\t# Scan all characters one by one \n\tfor i in exp: \n\t\t\n\t\t# If the character is a number, push it to the stack \n\t\tif i.isdigit(): \n\t\t\tstack.append(int(i)) \n\n\t\t# If the character is an operator, pop two \n\t\t# elements from stack apply the operator \n\t\telse: \n\t\t\tval1 = stack.pop() \n\t\t\tval2 = stack.pop() \n\t\t\tif i == '+': \n\t\t\t\tstack.append(val2 + val1) \n\t\t\telif i == '-': \n\t\t\t\tstack.append(val2 - val1) \n\t\t\telif i == '*': \n\t\t\t\tstack.append(val2 * val1) \n\t\t\telse: \n\t\t\t\tstack.append(val2 / val1) \n\n\treturn stack.pop() \n\n# Driver Program to test above function \n#exp = \"231*+9-\"\n#exp = ans\n#print(exp)\n\n#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))", "category": "Python"}, {"instruction": "Develop a program that performs basic arithmetic operations (+, -, /, *)", "input": "", "output": "def add(x, y):\n   return x + y\n\ndef subtract(x, y):\n   return x - y\n\ndef multiply(x, y):\n   return x * y\n\ndef divide(x, y):\n   return x / y", "category": "Python"}, {"instruction": "Create a program in python that sorts a given list.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Create a program that determines whether a given numbers is a prime.", "input": "", "output": "public class PrimeNumber {\n\n\tpublic static boolean isPrime(int n) {\n\n\t\tif (n < 2)\n\t\t\treturn false;\n\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tif (isPrime(i)) {\n\t\t\t\tSystem.out.println(i + \" is a Prime Number\");\n\t\t\t}\n\t\t}\n\n\t}\n}", "category": "Python"}, {"instruction": "Design a program to convert an array of characters to its equivalent string.", "input": "array = [ 'A', 'B', 'C', 'D' ]", "output": "public class ArrayToString { \n    public static String convert(char[] arr) \n    { \n        StringBuilder sb = new StringBuilder(); \n        for (char c : arr) \n            sb.append(c); \n        return sb.toString(); \n    } \n  \n    public static void main(String[] args) \n    { \n        char[] arr = { 'A', 'B', 'C', 'D' }; \n        System.out.println(convert(arr)); \n    } \n}", "category": "Python"}, {"instruction": "Create a function in JavaScript which takes two parameters x and y and returns the multiplication of the two", "input": "", "output": "function multiply(x, y) {\n    return x * y;\n}", "category": "Python"}, {"instruction": "Parse the following XML data using Python.", "input": "<students>\n    <student>\n        <name>John</name>\n        <age>24</age>\n    </student>\n    <student>\n        <name>Jack</name>\n        <age>22</age>\n    </student>\n    <student>\n        <name>Sam</name>\n        <age>25</age>\n    </student>\n</students>", "output": "import xml.etree.ElementTree as ET\n\nroot = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>')\n\nstudents = root.findall('student')\nfor student in students:\n    name = student.find('name').text\n    age = student.find('age').text\n    print(name, age)", "category": "Python"}, {"instruction": "Create a HTML page with a table showing the contact information of all members in a information.", "input": "[ \n    { \"name\": \"John\", \"phone\": \"123-456-7890\", \"address\": \"123 Main Street\" }, \n    { \"name\": \"Sarah\", \"phone\": \"098-765-4321\", \"address\": \"456 Ocean Drive\" } \n]", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Member Contact Information</title>\n    </head>\n    <body>\n        <h1>Member Contact Information</h1>\n        <table>\n            <thead>\n                <tr><th>Name</th></tr>\n                <tr><th>Phone</th></tr>\n                <tr><th>Address</th></tr>\n            </thead>\n            <tbody>\n                <tr><td>John</td><td>123-456-7890</td><td>123 Main Street</td></tr>\n                <tr><td>Sarah</td><td>098-765-4321</td><td>456 Ocean Drive</td></tr>\n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a function to create a list with all the prime numbers in the range of 0 to 100.", "input": "", "output": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Create a program to find out the most frequent letter in a sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_frequent_letter(sentence):\n    freq_dict = {}\n    for letter in sentence:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    \n    most_freq_letter = max(freq_dict, key = freq_dict.get)\n    return most_freq_letter", "category": "Python"}, {"instruction": "Create a program in Java that outputs a Fibonacci series of length n.", "input": "", "output": "public class Fibonacci { \n  \n    // Function to print the nth \n    // fibonacci number \n    static void printFibonacciSeries(int n) \n    { \n        int a = 0, b = 1, c; \n        if (n == 0) {\n            System.out.print(a); \n            return; \n        }\n        for (int i = 2; i <= n; i++) { \n            c = a + b; \n            System.out.print(c + \" \"); \n            a = b; \n            b = c; \n        } \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        int n = 10; \n        printFibonacciSeries(n); \n    } \n}", "category": "Python"}, {"instruction": "Generate a HTML page with 3 columns using Bootstrap.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\"> \n    <title>Bootstrap Example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>  \n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an SQL query that finds the total number of customers in the \"Customers\" table.", "input": "", "output": "SELECT COUNT(*) FROM Customers;", "category": "Python"}, {"instruction": "Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def get_mean_and_median(numbers):\n    mean = sum(numbers)/len(numbers)\n    sorted_numbers = sorted(numbers)\n    index = int(len(sorted_numbers) / 2)\n    median = sorted_numbers[index]\n    return \"Mean: {}, Median: {}\".format(mean, median)", "category": "Python"}, {"instruction": "Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points.", "input": "X1 = 2\nY1 = 3\nX2 = 7\nY2 = 10", "output": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi\n    return angleInDegrees", "category": "Python"}, {"instruction": "Using the provided data, train a decision tree to predict whether a given house should be classified as a \"small\" or \"large\" house.", "input": "house_size = [1000, 1100, 1250, 1300, 1400, 1500]\n house_label = [\"small\", \"small\", \"small\", \"large\", \"large\", \"large\"]", "output": "from sklearn import tree\n\n# Our features are house_size\nX = [[1000], [1100], [1250], [1300], [1400], [1500]]\n\n# Labels are house_label\ny = [\"small\", \"small\", \"small\", \"large\", \"large\", \"large\"]\n\n# Create and train the decision tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)", "category": "Python"}, {"instruction": "Create a code snippet that parses a sentence into individual words and returns the words sorted alphabetically.", "input": "sentence = \"This is a sample sentence\"", "output": "def parse_sentence(sentence):\n    words = sentence.split()\n    words.sort()\n    return words", "category": "Python"}, {"instruction": "Create a SQL query that returns all elements in a table with a given column value.", "input": "Table: Customer\ncolumn: name \nvalue: John", "output": "SELECT * FROM Customer WHERE name = 'John';", "category": "Python"}, {"instruction": "Create a SQL query that returns the first five rows from the \"Customers\" table.", "input": "", "output": "SELECT TOP 5 * FROM Customers;", "category": "Python"}, {"instruction": "Create a function that adds two matrices of the same size.", "input": "[[1, 2], [3, 4]], [[5, 6], [7, 8]]", "output": "int[][] addMatrix(int[][] a, int[][] b) {\n int[][] c = new int[a.length][a[0].length];\n  \n for (int i = 0; i < a.length; i++) {\n  for (int j = 0; j < a[i].length; j++) {\n   c[i][j] = a[i][j] + b[i][j];\n  }\n }\n \n return c;\n}", "category": "Python"}, {"instruction": "Allocate an array of size 10 and store the numbers from 1 to 10 in it.", "input": "", "output": "int[] arr = new int[10];\n\nfor (int i = 0; i < 10; i++) {\n arr[i] = i + 1;\n}", "category": "Python"}, {"instruction": "Use CSS to enlarge the font size of a paragraph of text to 16px.", "input": "<p>This is a paragraph of text.</p>", "output": "<p style=\"font-size:16px;\">This is a paragraph of text.</p>", "category": "Python"}, {"instruction": "Implement a function that takes two numbers as parameters and returns their difference.", "input": "17, 10", "output": "int difference(int a, int b)\n{\n return a - b;\n}", "category": "Python"}, {"instruction": "You will be given a list of strings as input. Write a program to print out the longest string in the list.", "input": "['Hello', 'World', 'I', 'Am', 'Here']", "output": "def get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    \n    return longest_str", "category": "Python"}, {"instruction": "You will be given a list of numbers as input. Write a program to remove the duplicates and return only the distinct values.", "input": "[1, 1, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    no_duplicates = []\n    for i in arr:\n        if i not in no_duplicates:\n            no_duplicates.append(i)\n    return no_duplicates", "category": "Python"}, {"instruction": "Create a program to output 'Hello World' in the console.", "input": "", "output": "print('Hello World')", "category": "Python"}, {"instruction": "Create a JavaScript timer that runs every two seconds and displays a countdown in the console.", "input": "", "output": "let count = 10;\n\nlet timerId = setInterval(function() {\n console.log(count);\n \n if (count === 0) {\n  clearInterval(timerId);\n }\n \n count--;\n}, 2000);", "category": "Python"}, {"instruction": "Complete the missing line of code to iterate through a list of dictionaries.", "input": "items = [{'name': 'John', 'age': 20}, {'name': 'Eric', 'age': 25}]\nfor ____:", "output": "for item in items:", "category": "Python"}, {"instruction": "Create classes to represent a credit card and account holder.", "input": "No input.", "output": "class CreditCard:\n    def __init__(self, card_number):\n        self.card_number = card_number\n\nclass AccountHolder:\n    def __init__(self):\n        self.cards = []\n    def add_card(self, card):\n        self.cards.append(card)", "category": "Python"}, {"instruction": "Create a new array by combining the elements of 2 given arrays.", "input": "Array 1: [1, 2, 3]\nArray 2: [4, 5, 6]", "output": "merged_array = [1, 2, 3] + [4, 5, 6]", "category": "Python"}, {"instruction": "Write a regular expression to search for a string in a text.", "input": "The given text is: \"Yahoo! is a popular search engine.\"\n\nTo search for \"Yahoo\":", "output": "/Yahoo/", "category": "Python"}, {"instruction": "Write a function in C++ that takes a character array as an argument and it returns the number of vowels in the array.", "input": "\"Hello World!\"", "output": "int countVowels(char text[])\n{\n    int count = 0;\n    for (int i = 0; text[i] != '\\0'; i++) \n    {\n        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'|| text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\n            count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Summarize the following passage in five sentences.", "input": "Machine learning is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model of sample data, known as \u201ctraining data\u201d, in order to make predictions or decisions without being explicitly programmed to do so.", "output": "Machine learning is a scientific field of study which uses algorithms and statistical models to allow computers to complete tasks without direct instructions or programming. It is a subset of artificial intelligence, using training data to form a mathematical model and make predictions. Machine learning algorithms can make decisions without explicit programming and rely on patterns and inference. It is an invaluable tool for data analysis and can be used for a wide variety of tasks such as image recognition and natural language processing.", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code to jQuery.", "input": "document.querySelector('#main').addEventListener('click', event => {\n    console.log('The element was clicked!')\n})", "output": "$('#main').click(function(event) {\n    console.log('The element was clicked!');\n});", "category": "Python"}, {"instruction": "Create a new branch in Git to fix a bug in the application.", "input": "", "output": "git branch bug-fix", "category": "Python"}, {"instruction": "Create a class named 'Animal' with one private data member 'numberOfLegs'.", "input": "", "output": "public class Animal {\n  private int numberOfLegs;\n}", "category": "Python"}, {"instruction": "Reformat the following function from JavaScript to Java.", "input": "function subtract(x, y) {\n  return x - y;\n}", "output": "public int subtract(int x, int y) {\n  return x - y;\n}", "category": "Python"}, {"instruction": "Write a CSS code to add a white background and blue font to the body element.", "input": "", "output": "body {\n  background-color: white;\n  color: blue;\n}", "category": "Python"}, {"instruction": "In Ruby, how would you write a program that prints out all the prime numbers between 0 and 50?", "input": "", "output": "# print out all the prime numbers between 0 and 50\n \ndef prime_numbers_between(start, finish)\n  for i in (start..finish)\n    count = 0\n    for j in (2..i-1) \n      if i % j == 0 \n        count += 1\n        break\n      end\n    end\n    puts i if count == 0\n  end\nend\n\nprime_numbers_between(0, 50)", "category": "Python"}, {"instruction": "Create an array in Java containing two objects.", "input": "", "output": "Object[] myArray =  {object1, object2 };", "category": "Python"}, {"instruction": "Write a python program to convert a number from base 10 to base 8.", "input": "", "output": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the data from the table 'user_data'.", "input": "", "output": "SELECT * FROM user_data;", "category": "Python"}, {"instruction": "Create a css class 'heading' with font size 16px", "input": "", "output": ".heading {\n    font-size: 16px;\n}", "category": "Python"}, {"instruction": "Write a code snippet to append a new element 'Giraffe' to list x", "input": "x = [\"Elephant\", \"Tiger\", \"Lion\"]", "output": "x.append(\"Giraffe\")", "category": "Python"}, {"instruction": "Write a python script to print 'Hello World' in HTML format", "input": "", "output": "print(\"<p>Hello World</p>\")", "category": "Python"}, {"instruction": "Create an HTML table with 3 rows and 4 columns.", "input": "", "output": "<table> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n</table>", "category": "Python"}, {"instruction": "Write a JavaScript program to replace a specific word in a string.", "input": "The given string is: \"Welcome to my website!\"\n\nTo replace the word \u201cwebsite\u201d with \u201cblog\u201d", "output": "var str = \"Welcome to my website!\"; \nvar newStr = str.replace(\"website\", \"blog\"); \nconsole.log(newStr);", "category": "Python"}, {"instruction": "Create a Python class for circles with radius and color as its properties.", "input": "", "output": "class Circle:\n \n    # Constructor\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n \n    # To get radius\n    def getRadius(self):\n        return self.radius\n \n    # To get color\n    def getColor(self):\n        return self.color", "category": "Python"}, {"instruction": "Create a JavaScript program to check if a string has at least one alphabet.", "input": "", "output": "function hasAlphabet(str) {\n  let hasAlphabet = false;\n  for (let char of str) {\n    if (char >= 'A' && char <= 'Z' || char >= 'a' && char <= 'z') {\n      hasAlphabet = true;\n      break;\n    }\n  }\n  return hasAlphabet;\n}", "category": "Python"}, {"instruction": "Calculate the surface area of a sphere with radius 6m.", "input": "", "output": "The surface area of a sphere with radius 6m is 113.1 m2.", "category": "Python"}, {"instruction": "Create a React component with a name of your choice to display the current date and time.", "input": "", "output": "import React from 'react';\n\nclass CurrentTime extends React.Component {\n  render() {\n    const date = new Date();\n    return (\n      <div>\n        {date.toLocaleString()}\n      </div>\n    );\n  }\n}\nexport default CurrentTime;", "category": "Python"}, {"instruction": "Create an Android function to get the current battery level.", "input": "", "output": "public float GetBatteryLevel(Context context){\n    Intent batteryIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n\n    int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);\n    int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);\n\n    if(level == -1 || scale == -1){\n        return 50.0f;\n    }\n\n    return ((float)level / (float)scale) * 100.0f;\n}", "category": "Python"}, {"instruction": "Write a Java program to append two given lists.", "input": "list1 = [10, 20, 30]\n\nlist2 = [5, 15, 25]", "output": "import java.util.ArrayList;\n\npublic class AppendLists {\n\n\tpublic static ArrayList<Integer> appendLists(ArrayList<Integer> list1, \n\t\t\tArrayList<Integer> list2) {\n\t\tArrayList<Integer> appendedList = new ArrayList<>(list1);\n\t\tappendedList.addAll(list2);\n\t\t\n\t\treturn appendedList;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tArrayList<Integer> list1 = new ArrayList<>();\n\t\tlist1.add(10);\n\t\tlist1.add(20);\n\t\tlist1.add(30);\n\t\t\n\t\tArrayList<Integer> list2 = new ArrayList<>();\n\t\tlist2.add(5);\n\t\tlist2.add(15);\n\t\tlist2.add(25);\n\t\n\t\tSystem.out.println(appendLists(list1, list2));\n\t}\n\t\n}", "category": "Python"}, {"instruction": "Write C++ code to convert a given Fahrenheit temperature degree to Celsius.", "input": "Fahrenheit = 100", "output": "#include <iostream>\nusing namespace std;\n\nfloat FahrenheitToCelsius(float faherenheit)\n{\n\tfloat celsius = (faherenheit - 32) * 5/9;\n\treturn celsius;\n}\n\nint main()\n{\n\tfloat fahrenheit = 100;\n\tfloat Celsius = FahrenheitToCelsius(fahrenheit);\n\tcout << Celsius << endl;\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Write a Python script to print the current day, month and year.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today is\", now.day, now.month, now.year)", "category": "Python"}, {"instruction": "Create an HTML form with a 'submit' button and an input field labeled 'Name'.", "input": "", "output": "<form action=\"index.php\" method=\"POST\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Suggest a SQL query to get the average order total from last year's orders.", "input": "", "output": "SELECT AVG(total) FROM orders WHERE YEAR(order_date) = YEAR(CURDATE()) - 1", "category": "Python"}, {"instruction": "Create a SQL query to select the name, address and email of customers who placed an order in the last 30 days.", "input": "", "output": "SELECT name, address, email FROM customers\nWHERE last_order_date > CURRENT_DATE - INTERVAL 30 DAY", "category": "Python"}, {"instruction": "Write HTML code to create a webpage that has two paragraphs and a header.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Two Paragraphs & a Header</title>\n</head>\n<body>\n  <h1>Header</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Compose a SQL query to count the number of users who logged in yesterday.", "input": "", "output": "SELECT COUNT(*) FROM users\n  WHERE login_date = CURRENT_DATE - INTERVAL 1 DAY", "category": "Python"}, {"instruction": "Generate a JavaScript function to perform binary search for a given array.", "input": "", "output": "function binarySearch(array, target) {\n  // Initialize variables\n  let left = 0;\n  let right = array.length - 1;\n\n  // Iterate while left <= right \n  while (left <= right) {\n    // Get middle index\n    let mid = left + Math.floor((right - left) / 2);\n\n    // Match found\n    if (array[mid] === target) {\n      return mid;\n    }\n\n    // If target is smaller than the array element at mid\n    if (target < array[mid]) {\n      right = mid - 1;\n    }\n    // Target is greater than the element at mid\n    else {\n      left = mid + 1; \n    }\n  }\n\n  // We reach here when target is not found\n  return -1;\n}", "category": "Python"}, {"instruction": "Create a SQL query to get the list of employees working in the IT department.", "input": "", "output": "SELECT e.name FROM employees e\n  JOIN departments d on e.department_id = d.id\n  WHERE d.name = 'IT'", "category": "Python"}, {"instruction": "Develop a C program to count and print the number of characters in a sentence.", "input": "The quick brown fox", "output": "#include<stdio.h>\n\nint main(){\n  char sentence[100];\n  int count = 0;\n  scanf(\"%[^\\n]s\", sentence);\n  for (int i=0; sentence[i]!='\\0'; i++){\n    count++;\n  }\n  printf(\"Number of characters: %d\\n\", count);\n  return 0;\n}", "category": "Python"}, {"instruction": "Edit the following CSS code to update the color to green.", "input": "p{\n  color: red;\n}", "output": "p{\n  color: green;\n}", "category": "Python"}, {"instruction": "Write a shell script to calculate the sum of two numbers given as command line argument.", "input": "", "output": "sum=$(echo \"$1 + $2\" | bc -l)\necho $sum", "category": "Python"}, {"instruction": "Create a php script to authenticate a user against a certain database given the user's username and password.", "input": "Username: John\nPassword: 1234\nDatabase: users", "output": "<?php\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$db_server = 'localhost';\n$db_username = 'root';\n$db_password = 'root';\n$db_name = 'users';\n\n$conn = mysqli_connect($db_server, $db_username, $db_password, $db_name);\n\n// check connection\nif(!$conn) {\n\tdie('Connection failed: ' .mysqli_connect_error());\n}\n\n$sql = \"SELECT * FROM users WHERE username='$username' AND password='$password'\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) == 1) {\n\techo \"User authenticated\";\n} else {\n\techo \"Authentication failed\";\n}\n\nmysqli_close($conn);\n?>", "category": "Python"}, {"instruction": "Create a JavaScript function to return the sum of the digits in a given number.", "input": "", "output": "function sumDigits(num) {\n  return [...String(num)].reduce((acc, cur) => acc + Number(cur), 0);\n}", "category": "Python"}, {"instruction": "Execute the following bash shell script.", "input": "clear\necho \"Hello World\"", "output": "bash program.sh\nHello World", "category": "Python"}, {"instruction": "Suggest a JavaScript statement to log \u201cHello World\u201d in the console.", "input": "", "output": "console.log('Hello World');", "category": "Python"}, {"instruction": "Develop a program to apply a given operation (addition or subtraction) on two numbers.", "input": "operation: 'addition', a: 4, b:20", "output": "def operate(operation, a, b):\n    if operation == 'addition':\n        return a + b\n    elif operation == 'subtraction':\n        return a - b\n    else:\n        return 'Invalid operation.'\n\nprint(operate('addition', 4, 20)) # prints 24", "category": "Python"}, {"instruction": "Create a program to tokenize a given string into a list of strings.", "input": "'Hello! My name is Bob.'", "output": "import nltk\n\ndef tokenize(string):\n    tokens = nltk.word_tokenize(string)\n    return tokens\n\nprint(tokenize('Hello! My name is Bob.')) # prints [\"Hello\", \"!\", \"My\", \"name\", \"is\", \"Bob\", \".\"]", "category": "Python"}, {"instruction": "Create a React component to render a list of items with its title and description.", "input": "title: 'My List', items: [{title: 'Item 1', description: 'this is the description'}, {title: 'Item 2', description: 'this is the description'}]", "output": "import React, { Component } from 'react';\n\nclass MyList extends Component {\n    render() {\n        const { title, items } = this.props;\n        const listItems = items.map((item, index) =>\n            <div key={index} style={{ marginBottom: '1em' }}>\n                <h4>{item.title}</h4>\n                <p>{item.description}</p>\n            </div>\n        );\n        return (\n            <div>\n                <h3>{title}</h3>\n                {listItems}\n            </div>\n        )\n    }\n}\n\nexport default MyList;", "category": "Python"}, {"instruction": "Create a command to delete a folder with all its contents.", "input": "/root/folder", "output": "import os \ndef remove_folder(folder): \n    for filename in os.listdir(folder): \n        file_path = os.path.join(folder, filename) \n        try: \n            if os.path.isfile(file_path) or os.path.islink(file_path): \n                os.unlink(file_path) \n            elif os.path.isdir(file_path): \n                shutil.rmtree(file_path) \n        except Exception as e: \n            print('Failed to delete %s. Reason: %s' % (file_path, e))   \nremove_folder('/root/folder')", "category": "Python"}, {"instruction": "Create a function that, given a number, reverses the digits and returns them in an array.", "input": "12345", "output": "def reverse(num):\n    arr = []\n    while num > 0:\n        digit = num % 10\n        arr.append(digit)\n        num //= 10\n    return arr\n\nprint(reverse(12345)) # prints [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Develop a logic to generate Fibonacci Series till n terms.", "input": "n = 6", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(a)\n    print(b)\n    for i in range (2,n):\n        c = a+b\n        a = b\n        b = c\n        print(c)\nfibonacci(6)", "category": "Python"}, {"instruction": "Write a script to launch a web server listening on port 8080.", "input": "", "output": "import http.server\nimport socketserver\n\n# define the port\nPORT = 8080\n\n# define the handler\nHandler = http.server.SimpleHTTPRequestHandler\n\n# initiate the server\ntry:\n    webserver = socketserver.TCPServer((\"\",PORT),Handler)\n    print(\"Server Initialized on port 8080.\")\n    webserver.serve_forever()\nexcept KeyboardInterrupt:\n         webserver.socket.close()", "category": "Python"}, {"instruction": "Create a JavaScript class to find the difference of two given dates.", "input": "", "output": "class DateCalculator {\n    static daysDifference(date1,date2) {\n        let diffTime = Math.abs(date2.getTime() - date1.getTime());\n        let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return diffDays;\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following Python program to sort the numbers in an array in ascending order.", "input": "list = [5, 1, 0, 4, 7]", "output": "def sort(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n                \nlist = [5, 1, 0, 4, 7]\nsort(list) \n\nprint (\"Sorted list is:\") \nprint(list)", "category": "Python"}, {"instruction": "Edit the following C program to print the right-most digit of the given number.", "input": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n       \n    printf(\"%d\", num); \n   \n    return 0; \n}", "output": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n    int right_most_digit = num % 10;  \n       \n    printf(\"%d\", right_most_digit); \n   \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a JavaScript function which takes two arguments and returns the larger number.", "input": "", "output": "function findMax(num1, num2) {\n        if (num1 > num2) {\n            return num1;\n        } else {\n            return num2;\n        }\n    }", "category": "Python"}, {"instruction": "Modify the following CSS Code so that it will target mobile devices only.", "input": ".text-center {\n    text-align: center;\n}", "output": "@media only screen and (max-width: 767px) { \n    .text-center {\n        text-align: center;\n    }\n}", "category": "Python"}, {"instruction": "Implement a function in Python to find the maximum number from a list of integers.", "input": "[3, 5, 1, 6, 10]", "output": "def findMax(list): \n    max = list[0] \n  \n    for i in list: \n        if i > max: \n            max = i \n  \n    return max", "category": "Python"}, {"instruction": "Create a CSS class which defines a black border with a red background color.", "input": "", "output": ".blackBorder {\n    border: 1px solid black;\n    background-color: red;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all employees whose salary is above $10000.", "input": "", "output": "SELECT name\nFROM Employees\nWHERE salary > 10000;", "category": "Python"}, {"instruction": "Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: \"1\", 2: \"4\", 3: \"9\", ...}.", "input": "", "output": "dic = {}\nfor i in range (1,11):\n    dic[i] = str(i ** 2)\nprint(dic)", "category": "Python"}, {"instruction": "Insert the following line in the provided C source code `int new_variable = 1;`", "input": "#include <stdio.h> \n\nint main() \n{ \n    int a = 10; \n    int b = 15; \n   \n    printf(\"Sum = %d\", a + b); \n  \n    return 0; \n }", "output": "#include <stdio.h> \n\nint main() \n{ \n    int a = 10; \n    int b = 15; \n    int new_variable = 1; \n   \n    printf(\"Sum = %d\", a + b); \n  \n    return 0; \n }", "category": "Python"}, {"instruction": "Write a SQL query to join two tables (Users and Orders) on User_ID.", "input": "", "output": "SELECT * \nFROM Users LEFT JOIN Orders \nON Users.User_ID = Orders.User_ID;", "category": "Python"}, {"instruction": "Write a JavaScript program to filter out even numbers from an array [1,2,3,4,5,6].", "input": "[1,2,3,4,5,6]", "output": "const array = [1,2,3,4,5,6];\n \nconst evenNumbers = array.filter(num => num % 2 !== 0);\n \nconsole.log(evenNumbers); // output: [1,3,5]", "category": "Python"}, {"instruction": "Suggest a SQL query to return all users with an age between 18 and 25.", "input": "", "output": "SELECT * FROM users WHERE age BETWEEN 18 AND 25;", "category": "Python"}, {"instruction": "Implement a logic to separate even and odd numbers from an array in JavaScript.", "input": "const numbers = [1,2,3,4,5,6,7];", "output": "const evenNumbers = numbers.filter(number => number % 2 == 0);\nconst oddNumbers = numbers.filter(number => number % 2 != 0);", "category": "Python"}, {"instruction": "Compare two strings and return the longest one.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def compare_strings(string1, string2): \n    if len(string1) > len(string2): \n        return string1 \n    return string2", "category": "Python"}, {"instruction": "Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.", "input": "", "output": "def is_anagram(str1, str2):\n   sorted_str1 = \"\".join(sorted(str1))\n   sorted_str2 = \"\".join(sorted(str2))\n   \n   if sorted_str1 == sorted_str2: \n       return True \n   return False", "category": "Python"}, {"instruction": "Using a list comprehension, create a filtered list which contains numbers that are divisible by 2.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "filtered_list = [num for num in nums if num % 2 == 0]", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in the code with the proper code to print the length of a given List.", "input": "list1 = [1, 2, 3, 4, 5]\n\n# TODO", "output": "list1 = [1, 2, 3, 4, 5]\n\nprint(len(list1))", "category": "Python"}, {"instruction": "Rearrange the code so that the output is \"Hi, world!\".", "input": "world = \"Hi\"\nprint(world)", "output": "world = \"Hi\"\nprint(world + \", world!\")", "category": "Python"}, {"instruction": "Construct a SQL query that returns all users who did not login in the last 24 hours.", "input": "", "output": "SELECT * FROM users WHERE last_login < NOW() - INTERVAL 24 HOUR;", "category": "Python"}, {"instruction": "Change the syntax of the code so that it prints the smallest and largest numbers from a given array.", "input": "list1 = [2, 5, 3, 1]  \nprint(list1)", "output": "list1 = [2, 5, 3, 1]  \nprint(min(list1), max(list1))", "category": "Python"}, {"instruction": "Create a Bash script for finding the most frequent word in a given sentence.", "input": "This is a test sentence to test the most frequent word", "output": "#!/bin/bash\n\nsentence=\"This is a test sentence to test the most frequent word\"\n\nwords=($(echo $sentence | tr ' ' '\\n'))\n\nmostFrequentWord=''\nmostFrequentWordCount=0\n\nfor ((i=0; i<${#words[@]}; i++))\ndo\n  word=${words[i]}\n  count=0\n  for ((j=0; j<${#words[@]}; j++))\n  do\n    if [[ \"$word\" == \"${words[j]}\" ]]\n    then\n      count=$((count+1))\n    fi\n  done\n  if [[ $count -gt $mostFrequentWordCount ]]\n  then\n    mostFrequentWordCount=$count\n    mostFrequentWord=$word\n  fi\ndone\n\necho \"The most frequent word is: \"$mostFrequentWord", "category": "Python"}, {"instruction": "Create a Python program to find all the perfect squares between 1 and n.", "input": "", "output": "def perfect_squares(n):\n    result = []\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\n\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)", "category": "Python"}, {"instruction": "Sort this array of integers in ascending order using JavaScript.", "input": "const array = [26, 4, 11, 56, 23, 39]", "output": "const array = [26, 4, 11, 56, 23, 39];\n\nlet sortedArray = array.sort(function(a,b){\n return a-b;\n});\n\nconsole.log(sortedArray);", "category": "Python"}, {"instruction": "Using the given three arrays, classify each array element as either prime numbers or not prime numbers.", "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr2 = [4, 6, 9, 10, 12, 15, 18, 20];\narr3 = [11, 13, 17, 19, 23, 27, 37, 41];", "output": "function classifyPrime(arr1,arr2,arr3) {\n    let result = {\n        arr1: [],\n        arr2: [],\n        arr3: []\n    };\n    for(let i = 0; i < arr1.length; i++){\n        if (isPrime(arr1[i])){\n            result.arr1.push(\"prime\");\n        } else {\n            result.arr1.push(\"not prime\");\n        }\n    }\n    for(let i = 0; i < arr2.length; i++){\n        if (isPrime(arr2[i])){\n            result.arr2.push(\"prime\");\n        } else {\n            result.arr2.push(\"not prime\");\n        }\n    }\n    for(let i = 0; i < arr3.length; i++){\n        if (isPrime(arr3[i])){\n            result.arr3.push(\"prime\");\n        } else {\n            result.arr3.push(\"not prime\");\n        }\n    }\n    return result;\n}\n\nfunction isPrime(num){\n    let prime = true;\n    for(let i = 2; i <= Math.sqrt(num); i++){\n        if ( num % i === 0 ){\n            prime = false;\n        }\n    }\n    return prime;\n}\n\narr1Result = classifyPrime(arr1,arr2,arr3);", "category": "Python"}, {"instruction": "EDIT this JavaScript function to return a list of the square roots of all numbers in a given input array.", "input": "function squareRoots(arr) {\n  // EDIT THIS\n}", "output": "function squareRoots(arr) {\n  const result = [];\n  for (let ele of arr) {\n    result.push(Math.sqrt(ele));\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Read the following XML structure and print the value of the \"name\" attribute.", "input": "<root>\n  <item name=\"Apple\">\n    <price>$2.50</price>\n  </item>\n</root>", "output": "root = ET.fromstring(inputString) \nprint(root.find('item').attrib['name']) #output: Apple", "category": "Python"}, {"instruction": "How do you print the first parameter passed to a bash script?", "input": "", "output": "echo $1", "category": "Python"}, {"instruction": "Write a Java program to find the index of the first occurrence of the given element in an array.", "input": "int[] array = {1, 7, 3, 6, 4, 7};\nint num = 7;", "output": "public class FindFirstIndex {\n    public static void main(String[] args) {\n        int[] array = {1, 7, 3, 6, 4, 7};\n        int num = 7;\n\n        int idx = -1;\n        for(int i = 0; i < array.length; i++) {\n            if(array[i] == num) {\n                idx = i;\n                break;\n            }\n        }\n        System.out.println(\"Index of the first occurrence of the given element: \" + idx);\n    }\n}", "category": "Python"}, {"instruction": "Create a MongoDB database named \"university_db\".", "input": "", "output": "> use university_db\nswitched to db university_db", "category": "Python"}, {"instruction": "Create a Redux reducer to handle a state named \"counter\" with an initial value of 0.", "input": "", "output": "const initialState = {\n  counter: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        ...state,\n        counter: state.counter + 1\n      };\n    case \"DECREMENT\":\n      return {\n        ...state,\n        counter: state.counter - 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;", "category": "Python"}, {"instruction": "Write an Angular component to update the value of a variable every second.", "input": "", "output": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-timer',\n  template: `\n  {{ counter }}\n  `\n})\nexport class TimerComponent {\n  counter = 0;\n\n  constructor() {\n    setInterval(() => {\n      this.counter++;\n    }, 1000);\n  }\n}", "category": "Python"}, {"instruction": "Increase a string by one character", "input": "string = \"hello\"", "output": "string += '_' # to add a space\nstring += 'a' # to increment the last character by one", "category": "Python"}, {"instruction": "How could you loop through the elements of a list in Python?", "input": "", "output": "for element in my_list:\n    # do something with the element", "category": "Python"}, {"instruction": "How would you implement a webhook using Flask?", "input": "", "output": "import flask\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    # retrieve the data from the request\n    data = request.get_json() \n\n    # do something with the given data\n    # ...\n\n    # return the response\n    return { 'message': 'OK' }", "category": "Python"}, {"instruction": "Create a function that takes a dictionary, a key and a value as parameters and adds the key and value to the given dictionary.", "input": "my_dict = { 'fruit': 'apple' }", "output": "def add_dict_entry(d, key, value):\n    d[key] = value\n    return d", "category": "Python"}, {"instruction": "You need to check if a variable is an integer or not.", "input": "", "output": "def is_integer(variable):\n    return isinstance(variable, int)", "category": "Python"}, {"instruction": "Create a function to convert a given decimal number to its corresponding hexadecimal value.", "input": "", "output": "def dec2hex(n):\n    return hex(n)[2:]", "category": "Python"}, {"instruction": "Find a code that returns the union set of two given sets.", "input": "s1 = {1,2,3,4}\n s2 = {3,4,5,6}", "output": "def union_sets(s1, s2):\n    return s1 | s2", "category": "Python"}, {"instruction": "Create a function to invert the keys and values of a given dictionary.", "input": "my_dict = { \"name\": \"John\", \"age\": 22 }", "output": "def invert_dict(dictionary):\n    inv_dict = {v: k for k, v in dictionary.items()}\n    return inv_dict", "category": "Python"}, {"instruction": "Create a new function that takes two lists as input and returns a new list consisting of elements which are not in the other list.", "input": "list1 = [1, 2, 3, 4]\n list2 = [3, 4, 5, 6]", "output": "def non_shared(list1, list2):\n    non_shared_elements = [element for element in list1 if element not in list2]\n    return non_shared_elements", "category": "Python"}, {"instruction": "Write a Python code that detects if a given character is uppercase, lowercase, or something else.", "input": "", "output": "def is_type(character):\n  if ord(character) >= 65 and ord(character) <= 90:\n    return \"uppercase\"\n  elif ord(character) >= 97 and ord(character) <= 122:\n    return \"lowercase\"\n  else:\n    return \"something else\"", "category": "Python"}, {"instruction": "Create a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same.", "input": "acdc", "output": "def operations(string):\n    char_set = set(string)\n    while len(char_set) > 1:\n        char_arr = list(char_set)\n        x = char_arr[0]\n        y = char_arr[1]\n        if x == y:\n            break\n        elif x > y:\n            new_val = x/y\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        else:\n            new_val = y/x\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        char_set = set(string)\n    return len(char_set)-1", "category": "Python"}, {"instruction": "In a given array of integers, find the number of even elements that appear before any odd elements.", "input": "[3,5,2,5,1]", "output": "1", "category": "Python"}, {"instruction": "Design a program which can take an array of integers and output the index of the maximum element.", "input": "[10, 4, 15, 6, 20]", "output": "def max_index(lst): \n    max = 0\n    max_index = 0\n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i]\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Create a program to create a new string where the first and last occurrence of each character is removed.", "input": "'Hello World'", "output": "def strip_string(s): \n    new_str = \"\"\n    counts = {}\n    \n    # Create a dictionary to record the number of occurrences of each character\n    for letter in s: \n        if letter not in counts:\n            counts[letter] = 1\n        else: \n            counts[letter] += 1\n    \n    for char in s: \n        if counts[char] > 1: \n            new_str += char\n        counts[char] -= 1\n    return new_str", "category": "Python"}, {"instruction": "Design a program to convert an integer to a binary string.", "input": "42", "output": "def int_to_bin(num): \n    return bin(num).replace(\"0b\",\"\")", "category": "Python"}, {"instruction": "Write a C# code to print the first n terms of the Series 0, 1, 2, 6, 42, 1806.", "input": "", "output": "static void printSeries(int n) \n{ \n  \n    int a = 0, b = 1, c = 2; \n  \n    Console.Write(a + \" \" + b + \" \" + c + \" \"); \n  \n    for (int i = 3; i < n; i++) \n    { \n        int d = 2 * c + (a + b); \n        Console.Write(d + \" \"); \n        a = b; \n        b = c; \n        c = d; \n    } \n}", "category": "Python"}, {"instruction": "Write a code to generate a random string of length n with lowercase alphabets and numbers.", "input": "", "output": "function randomString(n) {\n  const possibleCharacters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  const possibleLength = possibleCharacters.length;\n  let generatedString = '';\n  \n  for (let i = 0; i < n; i++) {\n    let randomIndex = Math.floor(Math.random() * possibleLength);\n    let randomCharacter = possibleCharacters.charAt(randomIndex);\n    generatedString += randomCharacter;\n  }\n  \n  return generatedString;\n}\n\nconsole.log(randomString(8));", "category": "Python"}, {"instruction": "Write a JavaScript code to print all substrings of a given string.", "input": "", "output": "function getSubstrings(str) {\n const substrings = [];\n let i, j, substring;\n\n for (i = 0; i < str.length; i++) {\n   for (j = i + 1; j < str.length + 1; j++) {\n     substring = str.slice(i, j);\n     substrings.push(substring);\n   }\n }\n\n return substrings;\n}\n\nconsole.log(getSubstrings(\"abc\"));", "category": "Python"}, {"instruction": "Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.", "input": "", "output": "class Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)", "category": "Python"}, {"instruction": "Reorder the items in an array according to their length.", "input": "Array: ['this', 'is', 'a', 'test']", "output": "sorted_array = sorted(['this', 'is', 'a', 'test'], key=len)", "category": "Python"}, {"instruction": "Extract a portion of a string.", "input": "String: Python is a great programming language\nSubstring: 'programming'", "output": "programming_str = 'Python is a great programming language'[17:]", "category": "Python"}, {"instruction": "Write a Python class that implements a sorted list.", "input": "No input.", "output": "class SortedList:\n    def __init__(self):\n        self.items = []\n\n    def add(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] < item:\n            i += 1\n        self.items.insert(i, item)\n\n    def remove(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] != item:\n            i += 1\n        if i < len(self.items):\n            del self.items[i]\n\n    def remove_at(self, index):\n        del self.items[index]", "category": "Python"}, {"instruction": "Create a function that takes three parameters and adds them together.", "input": "No input.", "output": "def my_func(a, b, c):\n    return a + b + c", "category": "Python"}, {"instruction": "Create a new array containing the result of applying a given function to each element of an original array.", "input": "Array: [1, 2, 3, 4]\nFunction: x * 2", "output": "new_arr = [i*2 for i in [1, 2, 3, 4]]", "category": "Python"}, {"instruction": "Fill in the blank with appropriate generic function to complete the code.", "input": "def foo():\n    value = ____", "output": "def foo():\n    value = input()", "category": "Python"}, {"instruction": "Modify the given code to debug 'NameError: name 'x' is not defined'.", "input": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(square(x))", "output": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(x**2)", "category": "Python"}, {"instruction": "Code a program to delete a specified item from a list.", "input": "Delete item \"Apple\" from the list [\"Banana\", \"Apple\", \"Orange\"]", "output": "def delete_item(lst, item): \n    if item in lst: \n        lst.remove(item)\n    return lst", "category": "Python"}, {"instruction": "Suggest a way to check if a given number is a palindrome number in JavaScript.", "input": "", "output": "A way to check if a given number is a palindrome number in JavaScript is to convert the number to a string and check if the reversed string is the same as the original one. We can use the ``String.prototype.split()`` and ``Array.prototype.reverse()`` methods to reverse the string and compare it with the original string. If the two strings are the same, the number is a palindrome. For example, the following code snippet checks if the number 121 is a palindrome:\n\nvar num = 121;\nvar reversedNumStr = num.toString().split('').reverse().join('');\nvar isPalindrome = reversedNumStr == num.toString(); // Output: true", "category": "Python"}, {"instruction": "Suggest a way to sort a list of strings alphabetically in JavaScript.", "input": "", "output": "A way to sort a list of strings alphabetically in JavaScript is to use the ``Array.sort()`` method. The ``Array.sort()`` method takes a comparison function as an optional argument. The comparison function takes two arguments (``a`` and ``b``) and must return a value less than or equal to 0 if ``a`` should come before ``b`` and a value greater than 0 if ``a`` should come after ``b``. In this case, we can use a comparison function that compares the Unicode codes of each character, returning the difference between the codes of the characters at the first position at which they differ:\n\nfunction alphabeticalSort(a, b) {\n    return a.charCodeAt(0) - b.charCodeAt(0);\n}\n\nlistOfStrings.sort(alphabeticalSort);", "category": "Python"}, {"instruction": "How would you perform a two-way pivot table in Python using Pandas?", "input": "", "output": "Pandas can be used to perform a two-way pivot table in Python using the pivot_table() method. The pivot_table() method takes a data frame as an argument and can be used to reshape the data frame into a two-way pivot table. It takes several parameters, including values, index, columns, aggfunc, and fill_value. For example, if we want to calculate the total sales for each customer for each product, we can use the following statement: \n\npd.pivot_table(data, values=\"sales\", columns=\"product\", index=\"customer\", aggfunc=\"sum\", fill_value=0)", "category": "Python"}, {"instruction": "Write a SQL query to list the top 3 customers with highest total purchases in the last 6 months.", "input": "", "output": "SELECT customer_name, SUM(order_total) AS Total\nFROM orders\nWHERE order_time > DATEADD(MONTH, -6, GETDATE())\nGROUP BY customer_name\nORDER BY Total DESC\nLIMIT 3", "category": "Python"}, {"instruction": "Create two classes, Dog and Cat, that extend the Animal class.", "input": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100", "output": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def meow(self):\n        print(\"Meow!\")", "category": "Python"}, {"instruction": "Suggest a way to identify similar strings in JavaScript.", "input": "", "output": "One way to identify similar strings in JavaScript is to use the Levenshtein distance. The Levenshtein distance measures the minimum number of single-character edits (i.e. insertions, deletions, or substitutions) required to change one word into the other. The distance is the number of changes needed to transform one string into another. This technique can be used to compare strings and identify similar strings.", "category": "Python"}, {"instruction": "Derive the Hamming distance between two strings using the edit distance algorithm.", "input": "s1 = 'saturday', s2 = 'sunday'", "output": "The Hamming distance between the two strings 'saturday' and 'sunday' is 3. The edit distance algorithm is used to calculate the minimum number of substitution, deletion, and insertion operations required to make two strings identical. In this example, 3 substitution operations are required, making the Hamming distance 3.", "category": "Python"}, {"instruction": "Write a code to generate a random pin which has 6 digits and should contain at least one lowercase, one uppercase and one numeric character.", "input": "", "output": "import string\nimport random\n\ndef generate_pin():\n pin = '';\n chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n for i in range(6):\n  pin += random.choice(chars)\n return pin\n\nprint(generate_pin())", "category": "Python"}, {"instruction": "Write a SQL query to fetch the records whose average values of a specific column is less than 10", "input": "", "output": "SELECT * \nFROM (SELECT table, AVG(column) \n      FROM table \n      GROUP BY table) \nWHERE AVG(column) < 10", "category": "Python"}, {"instruction": "Generate a correct program to sum the even numbers from 0 to n.", "input": "", "output": "def sum_even(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Create a program which can take a sentence as an input and split it into a list of words.", "input": "'The quick brown fox'", "output": "def split_sentence(sentence): \n    lst = sentence.split(\" \")\n    return lst", "category": "Python"}, {"instruction": "Produce a function which can take two strings as input and check if they are anagrams.", "input": "'silent', 'listen'", "output": "def is_anagram(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\n    # sort the strings \n    str1_sorted = ''.join(sorted(str1_lower))  \n    str2_sorted = ''.join(sorted(str2_lower)) \n\n    # compare the sorted strings \n    if(str1_sorted == str2_sorted):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "In JavaScript, develop a function to be able to determine if an object has a specific property or not.", "input": "obj = {\n    name: 'Bob',\n    age: 25\n }", "output": "function hasProperty(obj, key) {\n  return obj.hasOwnProperty(key);\n}", "category": "Python"}, {"instruction": "Read the following code snippet in Java and find which data types will be returned by each function.", "input": "public class MyClass {\n  public int Function1() {\n    int x = 5;\n    return x;\n  }\n\n  public double Function2() {\n    double y = 8.4;\n    return y;\n  }", "output": "Function1() will return an int type, and Function2() will return a double type.", "category": "Python"}, {"instruction": "Write an SQL query to select the name and salary of employees in a table named 'employees' who have a salary between 2000 and 3000.", "input": "", "output": "SELECT name, salary FROM employees WHERE salary BETWEEN 2000 AND 3000;", "category": "Python"}, {"instruction": "What is the HTML code to input a textbox with an ID of \"name\"?", "input": "", "output": "<input type=\"text\" id=\"name\" />", "category": "Python"}, {"instruction": "What is the most efficient way to find the maximum value in a Python list?", "input": "", "output": "The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list).", "category": "Python"}, {"instruction": "How can you call a function named \"myFunction\" in both JavaScript and Python?", "input": "", "output": "In JavaScript: myFunction();\nIn Python: myFunction()", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to print out the value of a variable named \"myVar\".", "input": "let myVar = 10;", "output": "console.log(myVar);", "category": "Python"}, {"instruction": "In Java, write a method which takes a two-dimensional array as input and prints it in spiral order.", "input": "[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]", "output": "public void printSpiral(int[][] matrix) \n{ \n    int top = 0, bottom = matrix.length - 1; \n    int left = 0, right = matrix[0].length - 1; \n    int dir = 0; \n\n    while (top <= bottom && left <= right) \n    { \n        // Move left to right \n        if (dir == 0) \n        { \n            for (int i = left; i <= right; i++) \n            { \n                System.out.print(matrix[top][i] + \" \"); \n            } \n            top++; \n        } \n  \n        // Move top to bottom \n        else if (dir == 1) \n        { \n            for (int i = top; i <= bottom; i++) \n            { \n                System.out.print(matrix[i][right ] + \" \"); \n            } \n            right --; \n        } \n  \n        // Move right to left \n        else if (dir == 2) \n        { \n            for (int i = right ; i >= left; i--) \n            { \n                System.out.print(matrix[bottom ][i] + \" \"); \n            } \n            bottom --; \n        } \n  \n        // Move bottom to top \n        else if (dir == 3) \n        { \n            for (int i = bottom ; i >= top; i--) \n            { \n                System.out.print(matrix[i][left ] + \" \"); \n            } \n            left ++; \n        } \n  \n        dir = (dir + 1) % 4; \n    } \n}", "category": "Python"}, {"instruction": "Write a Java code snippet to declare a two dimensional array of size 2\u00d73.", "input": "", "output": "int[][] arr = new int[2][3];", "category": "Python"}, {"instruction": "Create a Python function to print out a string in reverse order.", "input": "\"This is a string\"", "output": "def reverse_string(input_str):\n    return input_str[::-1]\n \nprint(reverse_string(\"This is a string\"))", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to declare a variable and assign it the value 12.", "input": "", "output": "let myVar = 12;", "category": "Python"}, {"instruction": "Create a Python program to return the longest word in a sentence", "input": "\"The dog likes to run around the yard\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n\n    return longest_word\n\nprint(longest_word(\"The dog likes to run around the yard\"))", "category": "Python"}, {"instruction": "Using HTML, write a page structure for a basic web page.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>Web Page</title>\n</head>\n<body>\n \n</body>\n</html>", "category": "Python"}, {"instruction": "Create an Objective-C function to print out an array of numbers.", "input": "", "output": "void printArray(int arr[], int size)\n{\n  for (int i=0; i < size; i++)\n    printf(\"%d \", arr[i]);\n  printf(\"\\n\");\n}", "category": "Python"}, {"instruction": "Create a JavaScript class to initialize the canvas width and height.", "input": "", "output": "class Canvas {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n \n  init() {\n    const canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    return canvas;\n  }\n}", "category": "Python"}, {"instruction": "Using PHP, write a program to check if a string contains only alphabets.", "input": "", "output": "<?php\nfunction checkAlphabetical($str) {\n  $len = strlen($str); \n \n    // Traverse the given string, check\n    // for every character \n    for ($i = 0; $i < $len; $i++) { \n        // If the string contains any  \n        // non-alphabetical character \n        if((ord($str[$i]) > 64 &&  \n        ord($str[$i]) < 91) \n        || \n        (ord($str[$i]) > 96 &&  \n        ord($str[$i]) < 123)) {\n            return true; \n        } else {\n            return false; \n        }\n    } \n} \n\n// Driver code \n$str = \"Hello World\"; \n$str2 = \"HELLO123\";\nif (checkAlphabetical($str)) \necho \"The string contains only alphabets\"; \n  \nif (checkAlphabetical($str2)) \necho \"The string contains only alphabets\"; \nelse\necho \"The string does not contain only alphabets\"; \n?>", "category": "Python"}, {"instruction": "What is the HTML code to create a link to a website called \"My Website\"?", "input": "", "output": "<a href=\"http://www.mywebsite.com\">My Website</a>", "category": "Python"}, {"instruction": "Write an SQL query to calculate the average final grade of all students.", "input": "", "output": "SELECT AVG (finalGrade) \n  FROM Student;", "category": "Python"}, {"instruction": "Using PHP, develop a function that returns the sum of the elements in an array.", "input": "[6, -3, 8, -7, 9]", "output": "<?php\n \nfunction array_sum($array) { \n  $sum = 0; \n \n  for ($i = 0; $i < count($array); $i++) { \n    $sum += $array[$i]; \n  } \n \n  return $sum; \n} \n \n// testing the function \n$array = array(6, -3, 8, -7, 9); \necho \"Sum of the given array is: \" . array_sum($array); \n?>", "category": "Python"}, {"instruction": "Using CSS, develop a style in which text appears bright when hovered over.", "input": "", "output": "a:hover {\n    color: #FFFF00;\n    text-shadow: 0 0 10px #FFFF00;\n}", "category": "Python"}, {"instruction": "Create a function in Python to delete an element from a given list at a specified index.", "input": "list = [1, 2, 3, 4, 5]\nindex = 2", "output": "def deleteElement(list, index): \n   del list[index] \n   return list\n  \nlist = [1, 2, 3, 4, 5] \nindex = 2\n  \nprint(deleteElement(list, index))", "category": "Python"}, {"instruction": "Using HTML, write a code to display a table with two columns and three rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a SQL query to find the average salary of all the employees who were hired between 2019 and 2021.", "input": "", "output": "SELECT AVG(salary) \nFROM Employees \nWHERE HireDate BETWEEN '2019-01-01' AND '2021-12-31';", "category": "Python"}, {"instruction": "Using React, write a function to render a text area element with the text provided as the input for the function.", "input": "text = \"Hello World!\"", "output": "const renderTextArea = text => {\n  return (\n    <textarea value={text} />\n  );\n};", "category": "Python"}, {"instruction": "Write a MySQL query to get the latest 5 employee numbers whose records are stored in the table 'EMPLOYEES'.", "input": "", "output": "SELECT EmployeeNumber\nFROM Employees\nORDER BY EmployeeNumber DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Create a C++ program to calculate the median of three integers given as input.", "input": "", "output": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate median of three integers\ndouble median(double num1, double num2, double num3) \n{ \n    double max = std::max(std::max(num1, num2), num3);\n    double min = std::min(std::min(num1, num2), num3);\n    return num1 + num2 + num3 - max - min;\n}\n\nint main() { \n    double num1, num2, num3;\n    cout << \"Enter three numbers: \"; \n    cin >> num1 >> num2 >> num3;\n    double medianValue = median(num1, num2, num3);\n    cout << \"Median of the three numbers is: \" << medianValue;\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a script in PowerShell to list the computers in a local network.", "input": "", "output": "Get-ADComputer -Filter * | Select-Object Name | Sort-Object Name", "category": "Python"}, {"instruction": "Implement a Swift code to find a number if it is prime or not.", "input": "", "output": "func isPrime(_ num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}", "category": "Python"}, {"instruction": "Write an SQL query to retrieve a student's grade from a student table.", "input": "SELECT grade FROM student_table", "output": "SELECT grade \nFROM student_table;", "category": "Python"}, {"instruction": "Write a JavaScript program to log the numbers from 1 to 100 in the console.", "input": "", "output": "for (let i = 1; i <= 100; i++) {\n console.log(i);\n}", "category": "Python"}, {"instruction": "Write an HTML code snippet to render an h2 heading.", "input": "", "output": "<h2>Heading</h2>", "category": "Python"}, {"instruction": "Write a SQL query to list customers who have placed orders in the past month.", "input": "SELECT * FROM customer_table WHERE order_date > (current_date - 30 days)", "output": "SELECT * FROM customer_table \nWHERE order_date > (CURRENT_DATE - INTERVAL '30' DAY);", "category": "Python"}, {"instruction": "Implement a JavaScript for creating alert message when a page loads.", "input": "", "output": "window.onload = function(){\n    alert(\"Welcome to this page!\");\n}", "category": "Python"}, {"instruction": "Complete a code to detect the type of triangle from its three side lengths.", "input": "// Given triangle side lengths\nfloat side1 = 4;\nfloat side2 = 4;\nfloat side3 = 4;", "output": "// Given triangle side lengths\nfloat side1 = 4;\nfloat side2 = 4;\nfloat side3 = 4;\n\nif (side1 == side2 && side2 == side3) {\n  // Equilateral Triangle\n  print(\"This triangle is an equilateral triangle.\");\n} \nelse if (side1 == side2 || side2 == side3 || side1 == side3) {\n  // Isosceles Triangle\n  print(\"This triangle is an isosceles triangle.\");\n} \nelse {\n  // Scalene Triangle\n  print(\"This triangle is a scalene triangle.\");\n}", "category": "Python"}, {"instruction": "Create an HTML page with a text box that stores entered data in the local storage.", "input": "", "output": "<html>\n<head>\n  <title>Text Box</title>\n</head>\n\n<body>\n  <input type=\"text\" id=\"text_box\" />\n</body>\n\n<script>\n  // Store data in localStorage\n  function storeData() {\n    let inputValue = document.getElementById(\"text_box\").value;\n    localStorage.setItem(\"inputValue\", inputValue);\n  }\n\n  // Set the text box value from localStorage\n  window.onload = () => {\n    if(localStorage.getItem(\"inputValue\"))\n      document.getElementById(\"text_box\").value = localStorage.getItem(\"inputValue\");\n  }\n\n  // Set up the event listener\n  document.getElementById('text_box').addEventListener('input', storeData);\n</script>\n\n</html>", "category": "Python"}, {"instruction": "Write a SQL query that returns the name of the author who has more than two books published in current year.", "input": "", "output": "SELECT author\nFROM books\nWHERE YEAR(date_published) = YEAR(CURDATE())\nGROUP BY author\nHAVING COUNT(*) > 2;", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to validate a string for a US phone number.", "input": "", "output": "function validatePhoneNumber(phoneNumber) {\n    const regExNumeric = /^[0-9]{10}$/;\n    const regExFormatted = /^\\d{3}-\\d{3}-\\d{4}$/;\n    \n    return (regExNumeric.test(phoneNumber) || regExFormatted.test(phoneNumber));\n}", "category": "Python"}, {"instruction": "Write a Javascript code to remove all duplicate values from an array, arr.", "input": "let arr = [1,2,2,3,4,4,5];", "output": "let uniqueValues = [...new Set(arr)];\n\nconsole.log(uniqueValues);", "category": "Python"}, {"instruction": "Write an SQL query to find the names of all students who have scored more than 80% marks in their exams.", "input": "", "output": "SELECT name FROM Student\n  WHERE marks > 80;", "category": "Python"}, {"instruction": "Write a Python code to find the number of vowels in a provided string.", "input": "string = \"Hello, World!\"", "output": "# Count the number of vowels in the string\nnum_vowels = 0\nfor char in string:\n    if char in 'aeiouAEIOU':\n        num_vowels += 1\n\nprint(\"Number of vowels:\", num_vowels)", "category": "Python"}, {"instruction": "Create a C program to check if two string are equal or not.", "input": "string1 = \"Hello\";\nstring2 = \"Hello\";", "output": "#include <stdio.h>\n#include <stdbool.h>\n\nbool isEqual(char* str1, char* str2) \n{ \n    int i; \n    for (i = 0; str1[i] != '\\0' && str2[i] != '\\0'; i++) \n        if (str1[i] != str2[i]) \n            return false; \n  \n    return (str1[i] == '\\0' && str2[i] == '\\0'); \n} \n\nint main() \n{\n    char string1[] = \"hello\";\n    char string2[] = \"hello\";\n \n    if (isEqual(string1, string2) == true) \n        printf(\"Strings are equal\"); \n    else\n        printf(\"Strings are not equal\"); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create an array of 3 strings and print it.", "input": "", "output": "myArray = [\"Hello\", \"World\", \"!\"]\nprint (myArray)", "category": "Python"}, {"instruction": "Write a Python code to search for a given keyword in a dictionary.", "input": "dictionary = {\n    \u201cCar\u201d: \u201cA vehicle with four wheels\u201d,\n    \u201cLaptop\u201d: \u201cA computer for personal use\u201d,\n    \u201cGame\u201d: \u201cAn activity for entertainment\u201d\n    }", "output": "def search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')", "category": "Python"}, {"instruction": "Write a PHP function to print out multiplication table between two numbers.", "input": "x = 3\ny = 5", "output": "<?php\nfunction print_multiplication_table($x, $y) \n{ \n    for($i = 1; $i <= $x; $i++) \n    { \n        echo \"<br>\"; \n        for($j = 1; $j <= $y; $j++) \n        { \n            echo $i*$j.\" \"; \n        } \n    } \n} \necho print_multiplication_table(3, 5);\n?>", "category": "Python"}, {"instruction": "Create an HTML page with two columns and a tabular structure showing the employee salaries.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Employee Salaries</title>\n</head>\n<body>\n  <table>\n    <tr>\n        <th>Employee Name</th>\n        <th>Salary</th>\n    </tr>\n    <tr>\n        <td>John Smith</td>\n        <td>$22,000</td>\n    </tr>\n    <tr>\n        <td>Jane Doe</td>\n        <td>$21,000</td>\n    </tr>\n    <tr>\n        <td>Joseph Brown</td>\n        <td>$25,000</td>\n    </tr>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Calculate the distance of two points located in the 3-dimensional space.", "input": "Point 1: (3, 4, 5)\nPoint 2: (2, 6, -1)", "output": "The distance between the two points is 6.244997998398398.", "category": "Python"}, {"instruction": "Create a structure for a student in C.", "input": "", "output": "struct student {\n    char name[100];\n    int age;\n    char address[100];\n};", "category": "Python"}, {"instruction": "Create an array using the given comma separated numbers, convert the array into a string, and then print the string.", "input": "6,4,8", "output": "arr = [6,4,8]\nstr = ', '.join(map(str, arr))\n\nprint(str) # Output: 6, 4, 8", "category": "Python"}, {"instruction": "Use a built-in Python method to print the contents of a list in reverse order.", "input": "arr = [1, 2, 3, 4]", "output": "# use a built-in python method to print the list in reverse order\narr.reverse() # using the list reverse method\nprint(arr)", "category": "Python"}, {"instruction": "Print the output of the following loop.", "input": "for i in range(6):\n    print(i)", "output": "# print the output of the loop\nfor i in range(6):\n    print(i)\n    \n# output of the loop\n0\n1\n2\n3\n4\n5", "category": "Python"}, {"instruction": "Using a dictionary comprehension, select the keys that start with a specific letter.", "input": "d = {'cat' : 1, 'dog' : 2, 'mouse' : 3}", "output": "# select the keys that start with 'c'\ndict = {k: v for k, v in d.items() if k.startswith('c')}", "category": "Python"}, {"instruction": "Generate a unique ID for a given string.", "input": "s = \"Hello World\"", "output": "# generate a unqiue ID for the given string\nimport uuid \n  \n# string \nstring = \"Hello World\"\n  \n# printing the original string \nprint(\"The original string is : \" + string) \n  \n# generating the unique ID \nstring_id = uuid.uuid4() \n  \n# printing the unique ID \nprint(\"The unique id for given string is : \", string_id)", "category": "Python"}, {"instruction": "Create a dictionary to store 'name' and 'age' as the keys and print the dictionary.", "input": "", "output": "# create a dictionary\ndict = {\"name\": \"John\", \"age\": 30}\n\n# print the dictionary\nprint(dict)", "category": "Python"}, {"instruction": "Write a lambda expression that multiplies the argument by two.", "input": "", "output": "# construct a lambda that multiplies the argument by two\nfunc = lambda x : x * 2", "category": "Python"}, {"instruction": "Write a query to return all the names of the tables in a database.", "input": "", "output": "SELECT table_name \nFROM information_schema.tables", "category": "Python"}, {"instruction": "Generate a query to get the first 10 rows from the given table.", "input": "Table name: \"users\"", "output": "SELECT * \nFROM users \nLIMIT 10;", "category": "Python"}, {"instruction": "Create an API to return the average age of the users in the given database.", "input": "Database name: \"users_database\"", "output": "@app.route('/users/avg_age', methods=['GET'])\ndef get_avg_age():\n    connection = sqlite3.connect(\"users_database.db\")\n    cursor = connection.cursor()\n    query = \"SELECT AVG(age) from users;\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    return json.dumps({\"avg_age\": result[0][0]})", "category": "Python"}, {"instruction": "Write Angular code to bind a variable to the HTML view.", "input": "", "output": "<div> \n  {{my_variable}}\n</div>", "category": "Python"}, {"instruction": "Write a code to output the cosine similarity between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "import numpy as np\n\ndef cosine_similarity(vector1, vector2):\n    \n    # normalize the vectors\n    v1 = np.array(vector1)/np.linalg.norm(vector1)\n    v2 = np.array(vector2)/np.linalg.norm(vector2)\n    \n    # calculate cosine similarity\n    return np.dot(v1, v2) \n    \nif __name__ == '__main__':\n    vector1 = [1, 2, 3]\n    vector2 = [4, 5, 6]\n    print(cosine_similarity(vector1, vector2))", "category": "Python"}, {"instruction": "Create an SQL query that sums all the numbers from the 'number' column in the table 'test_data'?", "input": "Table Name: test_data\nColumns: number", "output": "SELECT SUM(number) FROM test_data;", "category": "Python"}, {"instruction": "Write a python to convert an IP address from dot-decimal notation to binary notation.", "input": "192.168.1.1", "output": "def convert_ip_address(ip_address):\n    \"\"\"\n    Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.\n    \"\"\"\n    # Split the IP address in octets\n    octets = ip_address.split('.')\n    \n    # Convert each octet to binary\n    binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]\n    \n    # Join the binary octets and return the IP address in binary notation\n    return ''.join(binary_octets)\n\nif __name__ == '__main__':\n    ip_address = '192.168.1.1'\n    print(convert_ip_address(ip_address))", "category": "Python"}, {"instruction": "Using the code provided, write a JavaScript function that checks if a given number is prime or not.", "input": "", "output": "const isPrime = (number) => {\n  if (number <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= (number / 2); i++){\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Modify the code to remove the duplicate elements from the given array.", "input": "[5, 4, 5, 3, 2, 3, 1]", "output": "let myArray = [5, 4, 5, 3, 2, 3, 1];\nlet uniqueArray = []; \n  \nmyArray.forEach((item) => { \n    if (uniqueArray.indexOf(item) === -1) { \n        uniqueArray.push(item); \n    } \n});", "category": "Python"}, {"instruction": "Rewrite the code such that it uses thread-safe code and prevents race conditions.", "input": "int x = 0; \n \n//This is the Thread Task\nvoid increment(){ \n    x++; \n}", "output": "#include <atomic>\n\nstd::atomic_int x = 0;\n\n// This is the Thread Task \nvoid increment() { \n    x.fetch_add(1); \n}", "category": "Python"}, {"instruction": "Edit the given code to generate an Array of all the numbers between 1 and 15.", "input": "", "output": "let myArray = [];\n\nfor (let i = 1; i<= 15; i++) {\n  myArray.push(i);\n}", "category": "Python"}, {"instruction": "Using the code provided, write a JavaScript function to compare two numbers and return the larger one.", "input": "", "output": "const compareNumbers = (num1, num2) => {\n    if (num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}", "category": "Python"}, {"instruction": "Create a SQL statement that generates the total profit made by each salesperson over the year.", "input": "SELECT salesperson_name, SUM(profit) FROM sales GROUP BY salesperson_name", "output": "SELECT salesperson_name, SUM(profit) AS total_profit FROM sales GROUP BY salesperson_name;", "category": "Python"}, {"instruction": "Create a Java program that asks the user to input a string and prints out its upper-case version.", "input": "", "output": "import java.util.Scanner;\n \nclass UpperCaseString {\n    public static void main(String[] args) {  \n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Please enter a string: \");\n       \n        String input = scanner.nextLine();\n       \n        System.out.println(\"The upper-case version of this string is: \" + input.toUpperCase());\n    }\n}", "category": "Python"}, {"instruction": "Using the given JSON string, extract the title field, and assign it to a variable.", "input": "var jsonStr = '{\"title\":\"My book\",\"author\":\"John Smith\"}';", "output": "var jsonStr = '{\"title\":\"My book\",\"author\":\"John Smith\"}';\nvar title;\n\ntry {\n    // parse the JSON string\n    var jsonObj = JSON.parse(jsonStr);\n    // get the title and assign to variable\n    title = jsonObj.title;\n} catch (error) {\n    console.log(error);\n}\n\nconsole.log(title); // Output: My book", "category": "Python"}, {"instruction": "Using the given NumPy array, print out all the elements that are greater than 5.", "input": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])", "output": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])\n\nprint(\"Elements greater than 5:\")\nfor element in arr:\n if element > 5:\n print(element)", "category": "Python"}, {"instruction": "Write a query to return the total number of records in the given database.", "input": "Database name: \"users_database\"", "output": "SELECT COUNT(*) \nFROM users_database;", "category": "Python"}, {"instruction": "Write a regex pattern to match words that begin with \"cat\".", "input": "", "output": "^cat\\w*", "category": "Python"}, {"instruction": "Create a React component that renders the current date.", "input": "", "output": "import React from 'react';\n \nclass DateComponent extends React.Component {\n  render() {\n    const date = new Date();\n \n    return (\n      <div>\n        {date.toString()}\n      </div>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Using the code provided, write a regular expression pieces of code that validates an email address.", "input": "", "output": "let regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;", "category": "Python"}, {"instruction": "Replace the comment in the code with a line of code that prints the index of the maximum value in the list.", "input": "list_a = [5, 8, 3, 6, 9]", "output": "list_a = [5, 8, 3, 6, 9]\n\n# TODO: replace the comment with a line of code that prints the index of the maximum value in the list\nprint(list_a.index(max(list_a)))", "category": "Python"}, {"instruction": "Add an 'except' statement to the following python code to prevent a ValueError.", "input": "a = 5\nb = 0\n\ntry:\n    c = a / b", "output": "a = 5\nb = 0\n\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print(\"b cannot be zero\")", "category": "Python"}, {"instruction": "Using a recursive algorithm, reverse the order of elements in a list.", "input": "arr = [1, 2, 3, 4, 5]", "output": "# recursive approach\ndef recursive_reverse(arr, length):\n    if length == 0:\n        return\n\n    recursive_reverse(arr, length - 1)\n    arr.append(arr[length - 1])\n    arr.pop(length - 1)\n    \n# call function on the data\nrecursive_reverse(arr, len(arr))", "category": "Python"}, {"instruction": "Design a function to filter words based on give characters.", "input": "characters = \"aeiou\"\nwords = ['apple','elephant','mountain','river']", "output": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result\n\nprint(filter_words(\"aeiou\", ['apple','elephant','mountain','river']))\n# Output: ['apple', 'elephant', 'river']", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python program to find the maximum and minimum number.", "input": "[4, 7, -2, 11, 9]", "output": "Maximum Number = 11\nMinimum Number = -2", "category": "Python"}, {"instruction": "Create an API endpoint for the following model.", "input": "class Comment(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "output": "from django.http import JsonResponse\n\ndef comments_list(request):\n    if request.method == 'GET':\n        comments = Comment.objects.all()\n        comments_list = [{\n            'id': comment.id,\n            'user': comment.user.username,           \n            'content': comment.content,\n            'created_at': comment.created_at,\n            'updated_at': comment.updated_at\n        } for comment in comments]\n        return JsonResponse(comments_list, safe=False)", "category": "Python"}, {"instruction": "Add a feature to the following code that prints the current date and time.", "input": "def hello_world():\n    print(\"Hello world!\")", "output": "import datetime\ndef hello_world():\n    print(\"Hello world!\")\n    now = datetime.datetime.now()\n    print(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Scale up the following backend service using Kubernetes.", "input": "service.yaml\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  ports:\n  - port: 8080", "output": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n  labels:\n    app: my-service\nspec:\n  replicas: 3\n  ports:\n  - port: 8080\n  selector:\n    app: my-service\n  type: NodePort\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  selector:\n    matchLabels:\n      app: my-service\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: my-service\n    spec:\n      containers:\n        - name: my-service\n          image: my-service:v1\n          resources:\n            requests:\n              cpu: 500m\n              memory: 1Gi\n          env:\n            - name: NODE_ENV\n              value: production\n          ports:\n            - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service-lb\n  labels:\n    app: my-service\nspec:\n  type: NodePort\n  ports:\n  - port: 8080\n    nodePort: 30008\n  selector:\n    app: my-service", "category": "Python"}, {"instruction": "Identify all cities in the provided Geojson collection.", "input": "{\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-107.3334701, 43.0545076]\n    },\n    \"properties\": {\n      \"name\": \"Cheyenne\"\n    }\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-104.9902504, 39.7392357]\n    },\n    \"properties\": {\n      \"name\": \"Denver\"\n    }\n  }, {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-111.831483, 43.0937303]\n    },\n    \"properties\": {\n      \"name\": \"Boise\"\n    }\n  }]\n}", "output": "Cheyenne, Denver, Boise.", "category": "Python"}, {"instruction": "Generate a random sequence of letters containing 5 characters without repeating a character.", "input": "", "output": "XUBHJ", "category": "Python"}, {"instruction": "Sort the following items in O(n log n) time complexity.", "input": "[2, 5, 4, 3, 9]", "output": "[2, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Implement a function which adds two numbers in Rust.", "input": "", "output": "fn add(x: i32, y: i32) -> i32 {\n return x + y;\n}", "category": "Python"}, {"instruction": "Explain what an API is.", "input": "", "output": "An API (Application Programming Interface) is a set of functions and protocols that allow different components of a computer system to interact and communicate with each other. An API defines the types of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc. An API also defines how two or more systems can interact and exchange data through different programs. APIs are used in many web-based services, such as web-mappings, social networking, and online games.", "category": "Python"}, {"instruction": "Describe the sorting algorithm Bubble Sort.", "input": "", "output": "Bubble sort is an algorithm for sorting a collection of items. It iterates over the collection and compares adjacent items, swapping them if they are out of order. This step is repeated until all items are sorted. Bubble sort has a time complexity of O(n^2), making it a slow sorting algorithm. It is still often used as it is simple to implement and requires little memory.", "category": "Python"}, {"instruction": "Write a CSS selector to select all elements of the class \"title\".", "input": "", "output": ".title {\n\n}", "category": "Python"}, {"instruction": "Explain in simple terms what regular expressions are.", "input": "", "output": "Regular expressions are a way of describing patterns of text. They provide a powerful language for matching strings and text within strings. Regular expressions are often used in search engines to find information that matches a certain pattern. They can also be used to validate user input and make sure it meets certain criteria. For example, a regular expression can be used to ensure that a user's password is between 6 and 10 characters long and contains at least one number.", "category": "Python"}, {"instruction": "Edit the following code to make the function return the value of n mod m.", "input": "int modulo(int n, int m)\n{\n    return n / m;\n}", "output": "int modulo(int n, int m)\n{\n    return n % m;\n}", "category": "Python"}, {"instruction": "Create a linked list of 5 integers.", "input": "", "output": "class Node {\n  int data;\n  Node next;\n  Node(int data) { \n    this.data = data; \n    next = null;\n  }\n}\n\nclass LinkedList {\n  Node head;\n  public void insertNode(int data) { \n    Node new_node = new Node(data); \n    if (head == null) { \n        head = new_node;\n        return;\n    }\n    Node last = head;  \n    while (last.next != null) {\n        last = last.next;\n    }\n    last.next = new_node; \n  } \n}\n\nLinkedList list = new LinkedList();\nlist.insertNode(2);\nlist.insertNode(6);\nlist.insertNode(7);\nlist.insertNode(8);\nlist.insertNode(10);", "category": "Python"}, {"instruction": "Create a dictionary containing the count of each word in the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count.keys():\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nprint(count_words(\"the quick brown fox jumps over the lazy dog\"))\n# Output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}", "category": "Python"}, {"instruction": "Create a list containing the number of characters in each word of the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_characters_per_word(sentence):\n    words = sentence.split(' ') \n    char_count_per_word = [] \n    for word in words:\n        char_count_per_word.append(len(word)) \n    return char_count_per_word\n\nprint(count_characters_per_word(\"the quick brown fox jumps over the lazy dog\"))\n# Output: [3, 5, 5, 3, 5, 3, 4, 3]", "category": "Python"}, {"instruction": "Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21.", "input": "userage = 21", "output": "if userage == 21:\n    print(True)", "category": "Python"}, {"instruction": "Compute the sum of two numbers, 5 and 7, using Scala", "input": "", "output": "val sum = 5 + 7\nprintln(sum)", "category": "Python"}, {"instruction": "Create a matrix of 5 x 4 and set the values to 0.", "input": "", "output": "# create a matrix of 5 x 4\nmatrix = [[0 for x in range(4)] for y in range(5)]", "category": "Python"}, {"instruction": "For a given list of numbers, write a palindrome checker.", "input": "sample = [1, 2, 3, 4, 5, 4, 3, 2, 1]", "output": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res", "category": "Python"}, {"instruction": "Find the 2 smallest elements in a Python list of integers.", "input": "[2, 3, 5, 8, 4, 9, 11]", "output": "min1, min2 = list[0], list[1]\nfor num in list:\n    if num < min1:\n        min2 = min1\n        min1 = num\n    elif num < min2:\n        min2 = num", "category": "Python"}, {"instruction": "Launch an instance of an Amazon EC2 machine.", "input": "", "output": "aws ec2 run-instances --image-id <AMI-id> --instance-type <instance-type>  --key-name <keyname> --security-group-ids <security-group-ids>", "category": "Python"}, {"instruction": "Create a package in R called \"myPackage\" and save it in your current directory.", "input": "", "output": "devtools::create(\"myPackage\", path=getwd())", "category": "Python"}, {"instruction": "Write a CSS selector to select an element with the id \"example\".", "input": "", "output": "#example {\n...\n}", "category": "Python"}, {"instruction": "Assign the value 2 to the variable x in Java.", "input": "", "output": "int x = 2;", "category": "Python"}, {"instruction": "Write a for loop to multiply two numbers and print the result.", "input": "a = 5\nb = 6", "output": "# multiply two numbers and print the result\nfor i in range(b):\n    a *= b\n    \nprint(a)", "category": "Python"}, {"instruction": "Create a class in Python with the attributes name and age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create a SQL query to find the customer with the last name \"Smith\".", "input": "", "output": "SELECT * FROM customers WHERE last_name = 'Smith';", "category": "Python"}, {"instruction": "Write a procedure in PL/SQL to find the sum of numbers from 1 to 10.", "input": "", "output": "create or replace procedure addNums(sum OUT NUMBER)\nbegin\n  sum := 0;\n  for i in 1 .. 10 loop\n    sum := sum + i;\n  end loop; \nend addNums;", "category": "Python"}, {"instruction": "Write a query in MySQL to delete all rows with a given ID.", "input": "", "output": "DELETE FROM table_name \nWHERE ID = 'given_id';", "category": "Python"}, {"instruction": "Write an SQL query for finding all books with the title \u201cThe Great Gatsby\u201d.", "input": "", "output": "SELECT * \nFROM BOOKS\nWHERE Title = 'The Great Gatsby'", "category": "Python"}, {"instruction": "Create a for loop in Python that traverse a list and prints out every second element", "input": "lst = [1,2,3,4,5]", "output": "for i in range(0, len(lst), 2):\n    print(lst[i])", "category": "Python"}, {"instruction": "Create a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1", "input": "s1 = \"Hello World\"\ns2 = \"Hello\"", "output": "def isSubstring(s1, s2): \n    if s2 in s1: \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Explain what Node.js is", "input": "", "output": "Node.js is an open source, cross-platform JavaScript runtime environment used for developing server-side applications. It uses an event-driven, non-blocking I/O model and works on a single-threaded asynchronous model. It is designed to allow developers to build scalable network applications.", "category": "Python"}, {"instruction": "Create an array of 10 numbers in Python with values from 0 to 9.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Describe the Divide-and-Conquer algorithm.", "input": "", "output": "The Divide-and-Conquer algorithm is a generic algorithmic technique used to solve problems by breaking down the problem into smaller sub-problems, solving each sub-problem, and combining the results. This technique can be applied to a wide variety of problems (such as sorting and matrix multiplication). The basic steps of the Divide-and-Conquer algorithm involves dividing the problem into subproblems, typically in the form of a recursive approach. Then, each subproblem is solved using a similar approach until the subproblems become so small they can be easily solved directly. Then, the solutions to the subproblems are combined to give the solution to the original problem.", "category": "Python"}, {"instruction": "Write a code to generate a list with the first 20 Fibonacci numbers.", "input": "", "output": "def fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\n\nif __name__ == '__main__':\n    print(fibonacci(20))", "category": "Python"}, {"instruction": "Using regular expression, write a code to extract words that start with a specific letter from a given string.", "input": "string = \"This is a test sentence\"\nletter = \"t\"", "output": "import re\n\ndef extract_words(string, letter):\n    \"\"\"\n    Extract words that start with a specific letter from a given string\n    \"\"\"\n    # Use a regular expression to match words that start with the letter\n    pattern = r\"\\b\" + letter + r\"\\w*\\b\"\n    words = re.findall(pattern, string) \n  \n    return words\n\nif __name__ == '__main__':\n    string = \"This is a test sentence\"\n    letter = \"t\"\n    print(extract_words(string, letter))", "category": "Python"}, {"instruction": "Create a program in JavaScript that calendarizes the upcoming week based on the current date.", "input": "", "output": "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nlet currentDate = new Date();\n\n// Get the day of the week and month corresponding to current date\nlet dayOfWeek = days[currentDate.getDay()];\nlet month = months[currentDate.getMonth()];\nlet dayOfMonth = currentDate.getDate();\n\nlet calendar = [dayOfWeek + \" - \" + month + \" \" + dayOfMonth]\n\n// Generate the dates for the upcoming 6 days\nfor (let dayOffset = 0; dayOffset < 6; dayOffset++) {\n  let nextDate = new Date(currentDate.getTime() + 86400000 * (dayOffset + 1));\n  let nextDayOfWeek = days[nextDate.getDay()];\n  let nextMonth = months[nextDate.getMonth()];\n  let nextDayOfMonth = nextDate.getDate();\n  calendar.push(nextDayOfWeek + \" - \" + nextMonth + \" \" + nextDayOfMonth);\n}\n\nconsole.log(calendar);", "category": "Python"}, {"instruction": "Inject a variable in a Python script, named \"greeting_message\" with the value \"hello world\"", "input": "", "output": "greeting_message = \"hello world\"", "category": "Python"}, {"instruction": "Change the HTML structure above to set the title and content language to Italian.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"it\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>La mia prima pagina web</title>\n</head>\n\n<body>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Parse the following JSON string in Python.", "input": "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}", "output": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)", "category": "Python"}, {"instruction": "Generate a unique ID of 8 characters in C#.", "input": "", "output": "public static string GenerateUniqueID() \n{ \n    StringBuilder sb = new StringBuilder(); \n  \n    //generate 8 characters  \n    for (int i = 1; i <= 8; i++)  \n    { \n        // append a character between a and z  \n        sb.Append((char)('a' + (char)(new Random().Next(0, 26))));\n    }\n    return sb.ToString();\n}", "category": "Python"}, {"instruction": "Write a SQL query to get the top 5 employees with the highest salary in the company.", "input": "", "output": "SELECT * \nFROM Employees \nORDER BY Salary DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Write a SQL query to list the names and ages of all students aged 18 or under.", "input": "", "output": "SELECT name, age\nFROM students\nWHERE age <= 18", "category": "Python"}, {"instruction": "Construct a MongoDB query to retrieve all documents where the field 'name' contains the letter 'y'.", "input": "", "output": "db.collection.find({\n    \"name\": {\n        \"$regex\": /.*y.*/i\n    }\n})", "category": "Python"}, {"instruction": "Develop a class in Ruby that calculates the area of a circle.", "input": "", "output": "class Circle\n  def initialize(r)\n    @r = r\n  end\n \n  def area\n    @r*@r*Math::PI\n  end\nend", "category": "Python"}, {"instruction": "Create a visualization in Matplotlib to display sales figures over the last 6 months.", "input": "", "output": "import matplotlib.pyplot as plt\nimport numpy as np\n \nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\n \nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_ylim(0, max(sales) + 5000)\n \nplt.show()", "category": "Python"}, {"instruction": "Design a REST endpoint for a web-scraping application.", "input": "", "output": "GET /scrape\nParameters:\nurl (required): URL of the website to be scraped\nselectors (optional): list of CSS selectors\n\nResponse:\n{\n    \"data\": [\n        {\n            \"selector\": \"h2>a\",\n            \"text\": \"Example Title\"\n        },\n        {\n            \"selector\": \"#main-image\",\n            \"url\": \"http://example.com/main-image.jpg\"\n        }\n    ]\n}", "category": "Python"}, {"instruction": "Develop a custom API endpoint for an online store using Node.js.", "input": "", "output": "const express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/store/:productId\", (req, res, next) => {\n    const productId = req.params.productId;\n    // Fetch product data from the database.\n    // Return the product data \n    res.status(200).json(data);\n});\n\nmodule.exports = router;", "category": "Python"}, {"instruction": "Create a table with two columns that stores a username and a password.", "input": "", "output": "CREATE TABLE users (\n    username VARCHAR(50) NOT NULL PRIMARY KEY,\n    password VARCHAR(50) NOT NULL\n);", "category": "Python"}, {"instruction": "Write a Bash script that takes a filename as input and prints its details such as ownership, permissions, group, filesize, etc.", "input": "", "output": "#!/bin/bash\n\n# Check a file's details such as ownership, permissions,\n# group, filesize, etc.\n\necho \"Enter filename: \"\nread filename\n\necho \"Filename: $filename\"\necho \"Owner: $(ls -l $filename | awk '{ print $3 }')\"\necho \"Group: $(ls -l $filename | awk '{ print $4 }')\"\necho \"Permissions: $(ls -l $filename | awk '{ print $1 }')\"\necho \"Filesize: $(ls -l $filename | awk '{ print $5 }')\"", "category": "Python"}, {"instruction": "Write a Ruby script that given two numbers, finds the greatest common factor (GCF) of them.", "input": "", "output": "def gcf(num1, num2)\n  gcf = 1\n  x = [num1, num2].min\n  (1..x).each do |i|\n    if num1 % i == 0 && num2 % i == 0\n      gcf = i \n    end\n  end\n  return gcf\nend", "category": "Python"}, {"instruction": "Write a regular expression to validate a password  containing at least 8 characters, one uppercase letter, one lowercase letter and a special character.", "input": "", "output": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$", "category": "Python"}, {"instruction": "Construct an array of integers from 1 to 10 in Javascript", "input": "", "output": "let myArray = [1,2,3,4,5,6,7,8,9,10];", "category": "Python"}, {"instruction": "Create a program in HTML to display a basic table with 3 columns and 2 rows.", "input": "", "output": "<html>\n<body>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Firstname</th>\n    <th>Lastname</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>Doe</td> \n    <td>40</td>\n  </tr>\n  <tr>\n    <td>Kathy</td>\n    <td>Williams</td> \n    <td>43</td>\n  </tr>\n</table>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number.", "input": "", "output": "import random\nimport string\n\ndef generate_random_password():\n  password = \"\"\n  character_types = string.ascii_letters + string.digits + string.punctuation\n  length = 8\n  for _ in range(length):\n    password += random.choice(character_types)\n  return password\n\nprint(generate_random_password())", "category": "Python"}, {"instruction": "Write a SQL query to get the names of all customers who have placed orders from a given store in the last week.", "input": "Given store name:  \"ABC Store\"", "output": "SELECT DISTINCT c.name \nFROM customer c \nINNER JOIN order o \nON c.customer_id = o.customer_id\nWHERE o.store_name = \"ABC Store\"\nAND o.date_ordered >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);", "category": "Python"}, {"instruction": "Write a function in Go language that splits a string into three parts based on a specified separator.", "input": "String to Split: Learn, GPT models\nSeparator: ,", "output": "func SplitString(input, separator string) (string, string, string) {\n    strings := strings.Split(input, separator)\n    return strings[0], strings[1], strings[2]\n}", "category": "Python"}, {"instruction": "Create a MySQL table called \"orders\" with the following columns: \"Order_ID\", \"Costumer_Name\", \"Product_Name\", \"Quantity\".", "input": "", "output": "CREATE TABLE orders (\n    Order_ID int PRIMARY KEY,\n    Costumer_Name varchar(255),\n    Product_Name varchar(255),\n    Quantity int\n);", "category": "Python"}, {"instruction": "Write a regular expression that validates email addresses.", "input": "", "output": "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$", "category": "Python"}, {"instruction": "Write a CSS selector that highlights all the <div> elements with a class name of \"container\".", "input": "", "output": "div.container {\n    background-color: yellow;\n}", "category": "Python"}, {"instruction": "Write an algorithm to identify below number is prime or not.", "input": "7", "output": "# Function to check for prime number \ndef isPrime(n): \n      \n    # Corner cases \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True\n\n# Driver Program \nif isPrime(7):\n    print(\"YES! It is a prime number\")\nelse:\n    print(\"No! It is not a prime number\")", "category": "Python"}, {"instruction": "Identify the DOM elements inside an HTML structure given below and log it to the console.", "input": "<div class=\"container\">\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>\n</div>", "output": "// Print the elements to the console\nlet domElements = document.querySelectorAll('.container');\ndomElements.forEach(el => {\n    console.log(el);\n    console.log(el.firstChild);\n    console.log(el.firstChild.firstChild);\n    console.log(el.firstChild.lastChild);\n});", "category": "Python"}, {"instruction": "Write a CSS class to set the background of a div to blue and the font size to 12px.", "input": "", "output": ".blueDiv {\n  background-color: blue;\n  font-size: 12px;\n}", "category": "Python"}, {"instruction": "Implement a class in C++ that creates a stack.", "input": "", "output": "#include<iostream> \n#include<vector> \n  \nusing namespace std; \n\n\n// Class to represent a Stack \nclass Stack \n{\n    // container to store elements \n    vector<int> v;    \n    \npublic: \n    void push(int data); \n    bool empty(); \n    void pop(); \n    int top(); \n}; \n\nvoid Stack::push(int data) \n{ \n    // inserting an element \n    // on the top of the stack \n    v.push_back(data); \n} \n\nbool Stack::empty() \n{ \n    // checking if the stack is empty \n    return v.size() == 0; \n} \n\nvoid Stack::pop() \n{ \n    // removing element \n    // from the top of the stack \n    if (!empty()) \n    { \n        v.pop_back(); \n    } \n} \n\nint Stack::top() \n{ \n    // returns the top element \n    // of the stack \n    return v.back(); \n}", "category": "Python"}, {"instruction": "Implement a Java program that reads five integers and prints their sum.", "input": "5, 8, 12, 1, 4", "output": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int sum = 0;\n\n    // Read the integers\n    for (int i = 0; i < 5; i++) {\n      int x = sc.nextInt();\n      sum += x;\n    }\n\n    System.out.println(\"The sum is \" + sum);\n  }\n}", "category": "Python"}, {"instruction": "Generate a Rust program that prints \"Hello, World!\" to the console.", "input": "", "output": "fn main() {\n    println!(\"Hello, World!\");\n}", "category": "Python"}, {"instruction": "Compile and run a C++ program that outputs an integer m multiplied by its square.", "input": "m = 3", "output": "#include <iostream>\n\nint main()\n{\n   int m = 3;\n   std::cout << m * m << std::endl;\n\n   return 0;\n}\n\n// Compile and run with this command\ng++ program.cpp -o program\n./program", "category": "Python"}, {"instruction": "Create a processing sketch that can randomly generate 500 circles.", "input": "", "output": "// Setup a canvas of 500x500\nvoid setup() {\n  size(500, 500);\n}\n\n// Randomly draw 500 circles in the canvas\nvoid draw() {\n  for (int i=0; i<500; i++) {\n    float x = random(0, 500);\n   \tfloat y = random(0,500);\n   \tfloat rand = random(0, 100);\n   \tfill(rand, rand, rand);\n\tellipse(x, y, 20, 20);\n  }\n}", "category": "Python"}, {"instruction": "Write a HTML fragment that creates a list of hyperlinks of four book titles.", "input": "The Cat in the Hat, Harry Potter and the Philosopher's Stone, To Kill a Mockingbird, The Great Gatsby", "output": "<ul>\n  <li><a href=\"#\">The Cat in the Hat</a></li>\n  <li><a href=\"#\">Harry Potter and the Philosopher's Stone</a></li>\n  <li><a href=\"#\">To Kill a Mockingbird</a></li>\n  <li><a href=\"#\">The Great Gatsby</a></li>\n</ul>", "category": "Python"}, {"instruction": "Construct an SQL query which finds the element in a table.", "input": "Table name: Users\nElement: id\nValue to be found: 3", "output": "SELECT * FROM Users WHERE id = 3;", "category": "Python"}, {"instruction": "Write recursive function in JavaScript which reverses a given string.", "input": "My name is John", "output": "function reverseString(str) {\n        if (str.length === 0) {\n            return \"\";\n        }\n        return reverseString(str.slice(1)) + str[0];\n    }\n\n    console.log(reverseString(\"My name is John\"));", "category": "Python"}, {"instruction": "Create an array in C++ with 4 elements.", "input": "", "output": "int arr[4] = {1, 2, 3, 4};", "category": "Python"}, {"instruction": "Using numpy, write a code to multiply matrix A and B together", "input": "matrix A:\n[[1, 2], [3, 4]]\nmatrix B:\n[[5, 6], [7, 8]]", "output": "import numpy as np\n\ndef matrix_multiply(A, B):\n    \"\"\"\n    Multiply matrix A and B using numpy\n    \"\"\"\n    # Convert the matrices to numpy arrays\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Multiply the matrices\n    C = np.dot(A, B)\n    \n    return C\n\nif __name__ == '__main__':\n    # example matrices\n    A = [[1, 2], [3, 4]]\n    B = [[5, 6], [7, 8]] \n    print(matrix_multiply(A, B))", "category": "Python"}, {"instruction": "Make an executable Bash shell script to print the factorial of a given number.", "input": "", "output": "#!/bin/bash\n\n# Print factorial of a given number\n\necho \"Please enter a number:\"\nread num\n\nfactorial=1\nfor (( i=1; i<=num; i++ ))\ndo\n    factorial=$[ $factorial * $i ]\ndone\necho \"$num!=$factorial\"", "category": "Python"}, {"instruction": "Using the comments as a guide, fill in the blanks with code where applicable to make the function jumbledLetters() work.", "input": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = ____ \n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        ____ \n    return new_word", "output": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = random.randint(0, len(word)-1)\n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        new_word += word[num]\n    return new_word", "category": "Python"}, {"instruction": "Identify the HTML element and its attributes used to create a link in the following code snippet.", "input": "<a target=\"_blank\" href=\"https://example.com\">Example link</a>", "output": "<a> element with target and href attributes.", "category": "Python"}, {"instruction": "Implement quicksort algorithm in Python for a list of integers.", "input": "[4, 2, 5, 3, 1]", "output": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Design a C# program to print the sum of the series: 1 + 1/2 + 1/3 + \u2026.", "input": "", "output": "using System;\n\npublic class SumOfSeries {\n    public static double SumSeries(int terms) { \n        double total = 0; \n        for (int i = 1; i <= terms; i++) { \n            total += ((double)1/i); \n        } \n        return total; \n    } \n}", "category": "Python"}, {"instruction": "Write a shell script that checks if a directory exists and creates it if it doesn\u2019t.", "input": "", "output": "#!/bin/bash\nFILE=\"/my/path/directory\"\n\nif [ ! -d $FILE ]; then\n  mkdir -p $FILE\nfi", "category": "Python"}, {"instruction": "Rewrite the code to be efficient and use less lines of code.", "input": "def count_letters(string_name):\n    letter_count = 0\n    for x in string_name:\n        letter_count = letter_count + 1\n    return letter_count", "output": "def count_letters(string_name):\n    return len(string_name)", "category": "Python"}, {"instruction": "Create a function to return all possible sums of two numbers.", "input": "", "output": "def two_num_sums(nums):\n    \"\"\"Returns a list of all possible sums of two numbers from nums.\"\"\"\n    combinations = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            combination = nums[i]+nums[j]\n            combinations.append(combination)\n\n    return combinations", "category": "Python"}, {"instruction": "Take in a list of integers and return true if any of the numbers in the list are prime numbers.", "input": "[2, 3, 5, 7]", "output": "true", "category": "Python"}, {"instruction": "Take in a JSON string and convert it into a valid Python 3 dictionary.", "input": "'{\"name\": \"john\", \"age\": 32}'", "output": "{'name': 'john', 'age': 32}", "category": "Python"}, {"instruction": "Write a set of if-else statements to convert numerical grade 1-100 to their letter grade equivalent.", "input": "", "output": "if grade >= 90:\n  letter_grade = 'A'\nelif grade >= 80:\n  letter_grade = 'B'\nelif grade >= 70:\n  letter_grade = 'C'\nelif grade >= 60:\n  letter_grade = 'D'\nelse:\n  letter_grade = 'F'", "category": "Python"}, {"instruction": "Take in a string and return an output where every second character of the input string is capitalized.", "input": "'apple'", "output": "'ApPlE'", "category": "Python"}, {"instruction": "Parse a given input of timestamp and convert it to a datetime object in python.", "input": "1552520802", "output": "datetime.datetime(2019, 3, 12, 17, 33, 22)", "category": "Python"}, {"instruction": "Take in an array of integers and return the sum of all odd numbers.", "input": "[1,2,3,4,5]", "output": "9", "category": "Python"}, {"instruction": "Input a string with parameters and return an updated string that replaces each parameter with its corresponding value.", "input": "\"The number is {x}\"", "output": "\"The number is 4\"", "category": "Python"}, {"instruction": "Take in a string and return true if it is a valid IPv4 address.", "input": "127.0.0.1", "output": "true", "category": "Python"}, {"instruction": "Add an else clause to the following if statement.", "input": "if cond:\n    print(\"true\")", "output": "if cond:\n    print(\"true\")\nelse:\n    print(\"false\")", "category": "Python"}, {"instruction": "Create a form element in HTML and also include a submit button.", "input": "", "output": "<form> \n  <input type=\"text\" name=\"name\">\n  <button type=\"submit\">Submit</button> \n</form>", "category": "Python"}, {"instruction": "Using a switch-case statement, calculate the grade for the student using the percentage in the input.", "input": "Student percentage: 80", "output": "switch(percentage) {\n  case (percentage >= 90):\n    grade = 'A';\n    break;\n  case (percentage >= 80):\n    grade = 'B';\n    break;\n  case (percentage >= 70):\n    grade = 'C';\n    break;\n  case (percentage >= 60):\n    grade = 'D';\n    break;\n  case (percentage < 60):\n    grade = 'F';\n    break;\n  default:\n    grade = 'Invalid';\n    break;\n}", "category": "Python"}, {"instruction": "Write a function in Java which takes integer array and a number as input and prints all the pairs which sum up to given number.", "input": "Integer Array: [2, 7, 5, 3, 8]  \nNumber: 10", "output": "public void findPairs(int[] arr,int num) \n{\n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i+1; j < arr.length; j++) { \n            if (arr[i] + arr[j] == num) \n            System.out.println(arr[i] + \" + \" + arr[j] +\" = \"+num);\n        } \n    } \n}", "category": "Python"}, {"instruction": "Create an array in C++ and initialize it with 5 integer values.", "input": "", "output": "int array[5] = {1, 2, 3, 4, 5};", "category": "Python"}, {"instruction": "Create a regular expression to match strings containing two consecutive symbols \"#\" followed by four alphabetic characters.", "input": "", "output": "/\\#[a-zA-Z]{4}/", "category": "Python"}, {"instruction": "Write a SQL query to find the average rating of a movie having the title \"The Godfather\".", "input": "", "output": "SELECT AVG(rating)\nFROM movie\nWHERE title = 'The Godfather';", "category": "Python"}, {"instruction": "Edit the following code to ensure that the conditions in the if-else statement are met.", "input": "if (x == 2 && y == 2) {\n   console.log(\"x equals y\");\n}", "output": "if (x == 2 && y == 2) {\n   console.log(\"x equals y\");\n} else if (x != 2 && y != 2) {\n   console.log(\"x does not equal y\");\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to simulate a rock, paper, scissors between 2 players.", "input": "", "output": "let player1 = Math.floor(Math.random() * 3) + 1;\nlet player2 = Math.floor(Math.random() * 3) + 1;\n\nif (player1 === player2) {\n  console.log('Draw!');\n} else if (player1 === 1 && player2 === 3) {\n  console.log('Player 1 wins!');\n} else if (player1 === 2 && player2 === 1) {\n  console.log('Player 1 wins!');\n} else if (player1 === 3 && player2 === 2) {\n  console.log('Player 1 wins!');\n} else {\n  console.log('Player 2 wins!');\n}", "category": "Python"}, {"instruction": "Write a python program that takes in two input strings and checks if the second string is an anagram of the first one.", "input": "silent, listen", "output": "def anagram_check (str1, str2): \n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagrams.\")  \n    else: \n        print(\"The strings aren't anagrams.\")         \n\n# Driver code \nstr1 = \"silent\"\nstr2 = \"listen\"\nanagram_check(str1, str2)", "category": "Python"}, {"instruction": "Construct a SQL query to select all the records from a table where the last_name column begins with 'A'.", "input": "", "output": "SELECT * FROM table_name WHERE last_name LIKE 'A%';", "category": "Python"}, {"instruction": "Reverse a string of characters and words.", "input": "Hello World", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Suppose you have an array of numbers like [2,5,3,7] and you have to find the sum of the elements of the array. Write a JavaScript program for this.", "input": "", "output": "function sumArray(arr) {\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to generate a random number between a user-entered minimum and maximum values.", "input": "", "output": "function getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence using a for loop in Python.", "input": "", "output": "def generateFibonacciSequence(n):\n    fib_sequence = [0,1]\n    for i in range(2,n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        \n    return fib_sequence", "category": "Python"}, {"instruction": "Write a JavaScript function that takes two parameters and compares them.", "input": "", "output": "function compareValues (parameter1, parameter2) {\n    if (parameter1 > parameter2) {\n       return 1;\n    }\n    else if (parameter1 < parameter2) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to select an employee with a specific Id.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Id = '123456';", "category": "Python"}, {"instruction": "Edit the following array in JavaScript so that all the strings are in uppercase.", "input": "let array = ['cat', 'dog', 'fish'];", "output": "let array = ['CAT', 'DOG', 'FISH'];", "category": "Python"}, {"instruction": "Write a Java program to iterate through a HashMap.", "input": "", "output": "import java.util.HashMap; \nimport java.util.Map; \n  \npublic class Main { \n    public static void main (String[] args) \n    { \n        // Creating a HashMap \n        Map<String, Integer> hash_map = new HashMap<String, Integer>(); \n  \n        // Mapping int values to string keys \n        hash_map.put(\"Geeks\", 10); \n        hash_map.put(\"4\", 15); \n        hash_map.put(\"Geeks\", 20); \n        hash_map.put(\"Welcomes\", 25); \n        hash_map.put(\"You\", 30); \n  \n        // Displaying the HashMap \n        for (Map.Entry mapElement : hash_map.entrySet()) { \n            String key = (String)mapElement.getKey(); \n            int value = (int)mapElement.getValue(); \n            System.out.println(\"Key: \" + key + \"\\t Value: \" + value); \n        } \n    } \n}", "category": "Python"}, {"instruction": "How can you print \u201cHello World\u201d to your console using JavaScript?", "input": "", "output": "console.log(\"Hello World\");", "category": "Python"}, {"instruction": "Classify the following string using Regular Expressions.", "input": "Hello World", "output": "\\w+ \\w+", "category": "Python"}, {"instruction": "Using PHP, how can you print the JavaScript code that displays an alert message with the text \u201cHello World\u201d?", "input": "", "output": "echo \"<script>alert('Hello World');</script>\";", "category": "Python"}, {"instruction": "Explain B-Tree data structure.", "input": "", "output": "B-trees are a kind of self-balancing search tree data structure. They are frequently used in databases, file systems, and operating systems. A B-tree consists of a root node, internal nodes, and leaf nodes. The root may or may not have values associated with it. Internal nodes store values and pointers to subtrees to the left and right. Leaf nodes store the actual data. The keys in B-trees are usually sorted. As data is added or deleted, the tree self-balances to maintain order, making searching and inserting items efficient. B-trees are optimal for systems with slow or limited seek times (such as hard drives), while other data structures like binary search trees are better suited for systems with faster seek times.", "category": "Python"}, {"instruction": "Write a SQL query to find the average price for all products in the Products table.", "input": "SELECT * FROM Products", "output": "SELECT AVG(Price) FROM Products;", "category": "Python"}, {"instruction": "Create an instance of the Date class that represents the current date and time.", "input": "", "output": "DateTime now = DateTime.Now;", "category": "Python"}, {"instruction": "Implement a neural network for regression", "input": "", "output": "import tensorflow as tf\n\n# create input layer\ninputs = tf.keras.Input(shape=(2,))\n\n# create the first layer of the network with 16 neurons\nfc1 = tf.keras.layers.Dense(16, activation=\"relu\")(inputs)\n\n# create the second layer of the network with 8 neurons\nfc2 = tf.keras.layers.Dense(8, activation=\"relu\")(fc1)\n\n# create the output layer of the network with 1 neuron (for regression)\noutputs = tf.keras.layers.Dense(1, activation=\"sigmoid\")(fc2)\n\n# create the model and compile it.\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='Adam', loss='mse')", "category": "Python"}, {"instruction": "Generate a target field from an input field by adding a new column", "input": "Input Dataframe:\nname  age  height\nJohn  24   180\nMary  22   160", "output": "def generate_column(dataframe):\n    dataframe['target'] = dataframe.apply(\n    lambda row: row.age * row.height, axis = 1\n    )\n    return dataframe", "category": "Python"}, {"instruction": "Calculate the Euclidean distance between two arrays", "input": "array1 = [1, 2, 3]\narray2 = [4, 5, 6]", "output": "def euclidean_distance(array1, array2):\n    return np.sqrt(np.sum((array1 - array2)**2))", "category": "Python"}, {"instruction": "Write a function to convert an anagram of a string to a dictionary", "input": "word = \"geeksforgeeks\"", "output": "def convert_anagram(word):\n    result = {}\n    for c in word:\n        result.setdefault(c, 0)\n        result[c] += 1\n    return result", "category": "Python"}, {"instruction": "Write code in C++ to reverse an array of elements.", "input": "example_array = [1,2,3,4,5]", "output": "void reverse_array(int arr[], int size){ \n    int start = 0, end = size - 1; \n    while(start < end){ \n        int temp = arr[start];  \n        arr[start] = arr[end]; \n        arr[end] = temp; \n        start++; \n        end--; \n    }  \n}", "category": "Python"}, {"instruction": "Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'.", "input": "example_list = [\"Apple\", \"Cat\", \"Ant\", \"Table\"]", "output": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence.", "input": "example_sentence = \"The quick brown fox jumps over the lazy dog.\"", "output": "def word_frequency(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict", "category": "Python"}, {"instruction": "Given a list of strings, create a Python function that sorts them in alphabetical order.", "input": "example_list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "def sort_list(l):\n    l.sort()\n    return l", "category": "Python"}, {"instruction": "Create a program in Java that calculates the average of two test scores.", "input": "test1 = 85\ntest2 = 90", "output": "public static double average(int test1, int test2){\n    double avg = (test1+test2)/2;\n    return avg;\n}", "category": "Python"}, {"instruction": "Create a function in Java that takes two strings and returns an integer that describes the number of characters they share in common.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "public static int countCommonChars(String s1, String s2){\n    int count = 0;\n    int maxLen = Math.min(s1.length(), s2.length());\n    for(int i=0; i<maxLen; i++){\n        if(s1.charAt(i) == s2.charAt(i)) count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Generate the nth Fibonacci number using a loop.", "input": "", "output": "def fibonacci_loop(n):\n    prev, curr = 0, 1\n    for _ in range(1, n):\n        prev, curr = curr, prev + curr\n    return curr\n\nif __name__ == '__main__':\n    print(fibonacci_loop(10))", "category": "Python"}, {"instruction": "Compose a program to create a dictionary of characteristics from a given list .", "input": "itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]", "output": "def create_characterstic_dictionary(itemList):\n    out = {}\n    for item in itemList:\n        out[item] = len(item)\n    return out\n\nif __name__ == '__main__':\n    itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]\n    print(create_characterstic_dictionary(itemList))", "category": "Python"}, {"instruction": "Print a random permutation of an array of integers.", "input": "[1,2,3,4,5]", "output": "import random\n\ndef random_permutation(arr):\n    new_arr = arr.copy()\n    random.shuffle(new_arr)\n    return new_arr\n\nif __name__ == '__main__':\n    print(random_permutation([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Convert a given string from lowercase to uppercase characters.", "input": "\"this is a string\"", "output": "def convert_to_uppercase(string):\n    return string.upper()\n    \nif __name__ == '__main__':\n    print(convert_to_uppercase(\"this is a string\"))", "category": "Python"}, {"instruction": "Find the smallest positive number that is not present in a given list.", "input": "my_list = [1, 3, 6, 9, 11]", "output": "def find_missing_number(my_list):\n    sorted_list = sorted(my_list)\n    for i, num in enumerate(sorted_list):\n        if i != num:\n            return i\n    return max(sorted_list) + 1", "category": "Python"}, {"instruction": "Implement Naive Bayes for classification.", "input": "", "output": "import numpy as np\n\n# Create a data set\nX = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n\n# Build a Naive Bayes classifier\nnaive_bayes = GaussianNB()\n\n# Train the classifier using the training data\nnaive_bayes.fit(X, y)", "category": "Python"}, {"instruction": "Find the frequency of a given phrase in the text", "input": "text = \"This is a phrase that I want to find the frequency of\"\nphrase = \"phrase\"", "output": "def find_frequency(text, phrase):\n    fdist = nltk.FreqDist(text.lower().split())\n    return fdist[phrase]", "category": "Python"}, {"instruction": "Find the values of the keys 'category' and 'difficulty' in the given json data.", "input": "{\n    \"status\": \"SUCCESS\",\n    \"message\": \"\",\n    \"data\": {\n        \"category\": \"Mathematics\",\n        \"difficult\": \"Easy\"\n    }\n}", "output": "category: Mathematics\ndifficult: Easy", "category": "Python"}, {"instruction": "Extract the value of the given key from the given XML structure.", "input": "<score>\n    <name>Alice</name>\n    <points>15</points>\n</score>\n\nKey: points", "output": "15", "category": "Python"}, {"instruction": "Write a function in JavaScript to set the background color of a web page to a randomly generated color.", "input": "", "output": "const random_bg_color = () => {\n    // Generate three random numbers for RGB to create random color\n    let r = Math.floor(Math.random() * 256); \n    let g = Math.floor(Math.random() * 256); \n    let b = Math.floor(Math.random() * 256); \n  \n    // Set the random color for the page's background\n    document.body.style.backgroundColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\"; \n}", "category": "Python"}, {"instruction": "Edit the following code to make it an infinite loop.", "input": "# Python 3\n# Print numbers from 0 to 10 \ni = 0\nwhile i <= 10: \n    print(i) \n    i += 1", "output": "# Python 3\n# Print numbers from 0 to 10 \nwhile True: \n    print(i) \n    i += 1", "category": "Python"}, {"instruction": "Create a SQL query to get the count of students with their assigned marks greater than or equal to 80.", "input": "Table Name: STUDENTS\nTable Rows: NAME (string); MARKS (int)", "output": "SELECT COUNT(*) FROM STUDENTS WHERE MARKS >= 80;", "category": "Python"}, {"instruction": "Write a function to delete a node from the given linked list.", "input": "Linked list: 10 --> 20 --> 30\nNode to delete: 10", "output": "def deleteNode(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\n    # Unlink node from linked list \n    prev.next = curr.next\n    curr = None\n\n    return head", "category": "Python"}, {"instruction": "Construct a function in Python that takes a list and returns the mean of the elements in the list.", "input": "[30, 10, 40, 20]", "output": "def mean(list): \n    # Finding total of the list elements \n    total = 0\n    for num in list: \n        total += num \n\n    # Calculate mean of the list \n   mean = total / len(list) \n\n    # Return the mean \n    return mean", "category": "Python"}, {"instruction": "Produce a regular expression that checks if a string contains between 5 and 20 characters.", "input": "", "output": "^.{5,20}$", "category": "Python"}, {"instruction": "Generate an SQL statement to select the maximum salary of an employee from the given table.", "input": "Table Name: EMPLOYEE\nTable Rows: ID (int); NAME (string); SALARY (int)", "output": "SELECT MAX(SALARY) FROM EMPLOYEE;", "category": "Python"}, {"instruction": "Edit the following function to remove duplicate elements from a list.", "input": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "Create a class in C++ that defines a number as a double value.", "input": "", "output": "// C++ Class\nclass Number {\nprivate:\n    double num;\npublic:\n    // Constructor\n    Number(double val) : num(val) { }\n    // Function to get the double value\n    double getValue() {\n        return num;\n    }\n};", "category": "Python"}, {"instruction": "Write code in Java to calculate the minimum number of coins needed to make change for a given amount.", "input": "Coin denominations: [1, 5, 10, 25]\nAmount: 27", "output": "public int calculateCoins(int amount, int[] array){ \n    int coinsNeeded = 0; \n    for (int i = array.length - 1; i >= 0; i--){ \n          \n        // Find the largest denomination \n        // which is smaller than amount \n        while (amount >= array[i]){ \n            amount = amount - array[i]; \n            coinsNeeded++; \n        } \n    } \n    return coinsNeeded; \n}", "category": "Python"}, {"instruction": "Get the length of the given string.", "input": "string = \"Summer is here!\"", "output": "len(string)\n\nOutput: 14", "category": "Python"}, {"instruction": "Trace the given solution to find the output for the given input.", "input": "def find_max_number(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n\n    return max_num\n\nInput:\nfind_max_number([2, 3, 4, 6, 5])", "output": "max_num = 2\n\nLoop 1: num = 3, max_num = 3\nLoop 2: num = 4, max_num = 4\nLoop 3: num = 6, max_num = 6\nLoop 4: num = 5, max_num = 6\n\nOutput: 6", "category": "Python"}, {"instruction": "Output true if a number is odd or false if it is even.", "input": "number = 8", "output": "false", "category": "Python"}, {"instruction": "Write a function that prints the same string three times consecutively.", "input": "string = \"Hello World!\"", "output": "def print_three_times(string):\n    for _ in range(3):\n        print(string)\n        \nprint_three_times(\"Hello World!\")", "category": "Python"}, {"instruction": "Read the following code and identify the type of loop it is.", "input": "for a in range(0, 10):\n    print(a)", "output": "for loop.", "category": "Python"}, {"instruction": "Read the given code and provide an example output.", "input": "def add_two_numbers(a, b):\n    return a + b", "output": "Example output:\nadd_two_numbers(3, 4)\n\nOutput: 7", "category": "Python"}, {"instruction": "Construct a regular expression that extracts substrings that match the pattern \"AAA_BBB_CCC\".", "input": "", "output": "Regex: ^([A-Za-z]{3})_([A-Za-z]{3})_([A-Za-z]{3})$", "category": "Python"}, {"instruction": "Create a list of entries that should be included in a `Person` class.", "input": "", "output": "A `Person` class should include the following entries:\n- name: string\n- age: integer\n- gender: string\n- address: string\n- phone_number: string\n- email: string\n- occupation: string\n- school: string\n- current_city: string\n- birth_city: string\n- nationality: string", "category": "Python"}, {"instruction": "How can you flatten a list of lists?", "input": "", "output": "from itertools import chain\nflattened_list = list(chain.from_iterable(list_of_lists))", "category": "Python"}, {"instruction": "Code a for loop that iterates over a list of strings and capitalizes the first letter of each string.", "input": "my_list = ['eggs', 'bacon', 'cheese']", "output": "capitalized_list = []\nfor string in my_list:\n    capitalized_list.append(string.capitalize())", "category": "Python"}, {"instruction": "Write a Python program to find the closest number in a given array to a given number.", "input": "Array: [3, 6, 9, 12, 15], Number: 10", "output": "def closest_number(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n  return min_num", "category": "Python"}, {"instruction": "Create a class in C++ called Point that represents a point in the two-dimensional space.", "input": "", "output": "class Point {\n  double x;\n  double y;\npublic:\n  Point(): x(0), y(0) { }\n  Point(double _x, double _y): x(_x), y(_y) { }\n  double getX() { return x; } \n  double getY() { return y; } \n};", "category": "Python"}, {"instruction": "Use regex to find the number of digits in a given string.", "input": "String: \"743ABC123_$*\"", "output": "import re \n\ndef get_digits_count(string):\n  return len(re.findall('\\d', string))", "category": "Python"}, {"instruction": "Write a function to calculate the string length in a given string.", "input": "String: \"Hello, World!\"", "output": "def string_length(string):\n  return len(string)", "category": "Python"}, {"instruction": "Suggest a solution to print the third character from a string in Python.", "input": "String = \"Hello, world!\"", "output": "print(string[2]) # Output: l", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to set a value for a cookie.", "input": "", "output": "document.cookie=\"mycookie=myvalue\";", "category": "Python"}, {"instruction": "Create a program in Java that finds the maximum element in an array.", "input": "", "output": "public static int getMaxElement(int[] arr) {\n    int max = Integer.MIN_VALUE;\n        \n    for (int el : arr) {\n        if (el > max)\n            max = el;\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Build a program in Python to check if a number is Odd or Even.", "input": "", "output": "def odd_even(n):\n\tif (n % 2 == 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")", "category": "Python"}, {"instruction": "Create a function in Java to detect if an input string is a palindrome.", "input": "", "output": "public static boolean isPalindrome(String str){\n    int i=0,j=str.length()-1;\n \n    while(i<j){\n        if(str.charAt(i)!=str.charAt(j))\n            return false;\n \n        i++;\n        j--;\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Provide a solution to print the following string in reverse order.", "input": "String = \"Hello, world!\"", "output": "print(\"!\".join(reversed(\"Hello, world!\"))) # Output: !dlrow ,olleH", "category": "Python"}, {"instruction": "Determine the syntax for a function call in Python.", "input": "", "output": "Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:\n\n\u2003\u2003my_function()", "category": "Python"}, {"instruction": "Edit this HTML code to create an expandable navigation bar.", "input": "<ul>\n  <li><a href=\"/home\">Home</a></li>\n  <li><a href=\"/about\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n</ul>", "output": "<ul>\n  <li><a href=\"/home\">Home</a>\n <ul>\n   <li><a href=\"/about\">About</a></li>\n   <li><a href=\"/contact\">Contact</a></li>\n </ul>\n  </li>\n</ul>", "category": "Python"}, {"instruction": "Write a function to identify all palindromes in the given string.", "input": "", "output": "def find_palindromes(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i+2,len(string)+1):\n            if string[i:j] == string[j-1:i-1:-1]:\n                result.append(string[i:j])\n    return result", "category": "Python"}, {"instruction": "What is the difference between while and do while loops in programming?", "input": "", "output": "The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all.", "category": "Python"}, {"instruction": "Write a function to calculate the sum of the elements of an array with float values.", "input": "", "output": "def sum_float_array(float_array):\n    total = 0\n    for i in float_array:\n        total += i\n    return total", "category": "Python"}, {"instruction": "Remove all non-alphabetical characters from the given string.", "input": "String: \"Hello,123_[World!]%$\"", "output": "import re\n\ndef remove_non_alphabetic(string):\n  return re.sub(\"[^a-zA-Z ]\", \"\", string)", "category": "Python"}, {"instruction": "Create a web page using HTML and CSS that contains a heading and a button.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Web Page</title>\n</head>\n<body>\n  <h1>My Web Page</h1>\n  <button type=\"button\">Click Me!</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a for loop structure in JavaScript to iterate through the numbers from 0 to 10 and display them on the console.", "input": "", "output": "for (var i=0; i<=10; i++){\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Create an array in Python containing five strings.", "input": "", "output": "my_words = [\"Hello\", \"World\", \"Python\", \"Programming\", \"Code\"]", "category": "Python"}, {"instruction": "How can you remove all the empty strings from a list?", "input": "", "output": "filtered_list = [x for x in list if x!= '']", "category": "Python"}, {"instruction": "Code a for loop that iterates over a list of numbers and stores the doubled value of each number in another list.", "input": "num_list = [1, 2, 3, 4]", "output": "doubled_list = []\nfor num in num_list:\n    doubled_list.append(num * 2)", "category": "Python"}, {"instruction": "How to calculate the length of a string in JavaScript?", "input": "", "output": "str.length", "category": "Python"}, {"instruction": "How do you sort a dictionary by values in Python?", "input": "", "output": "sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))", "category": "Python"}, {"instruction": "How do you format a number to two decimal points in JavaScript?", "input": "", "output": "number.toFixed(2)", "category": "Python"}, {"instruction": "How to generate a random number between two given numbers in Python?", "input": "", "output": "import random \n\ndef random_number(minimum, maximum): \n    return random.randint(minimum, maximum)", "category": "Python"}, {"instruction": "Write a method to remove the trailing spaces from a string in Python.", "input": "", "output": "def remove_trailing_spaces(s): \n    return s.rstrip()", "category": "Python"}, {"instruction": "How do you check if a character is a digit in Python?", "input": "", "output": "if c.isdigit():\n   # character is a digit", "category": "Python"}, {"instruction": "How to delete a specific item from a Python dictionary?", "input": "", "output": "dictionary_name.pop(\"item_name\", None)", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers.", "input": "arr = [4, -7, -3, 9, 1, -4]", "output": "def reorder_arr(arr): \n  negatives = [] \n  positives = [] \n\n  for item in arr: \n    if item < 0: \n      negatives.append(item) \n    elif item >= 0: \n      positives.append(item) \n    \n  return negatives + positives", "category": "Python"}, {"instruction": "Write a code to print \"hello world\" on a web page using HTML.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World</title>\n</head>\n<body>\n  <h1>Hello World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Show an example of a while loop in Python.", "input": "", "output": "i = 0\n\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create an API in Node.js that returns \"hello world\" when it is invoked.", "input": "", "output": "const express = require('express');\nconst app = express();\n \napp.get('/', (req, res) => {\n  res.status(200).send('Hello world!');\n});\n \nmodule.exports = app;", "category": "Python"}, {"instruction": "Sort the following array of numbers [7,2,4,1,9] in descending order using JavaScript.", "input": "[7,2,4,1,9]", "output": "[9,7,4,2,1].sort(function(a,b){return b-a;});", "category": "Python"}, {"instruction": "Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def meow(self):\n        print('%s the %s cat meows!' % (self.name, self.color))\n    \n    def purr(self):\n        print('%s the %s cat purrs contentedly.' % (self.name, self.color))\n    \n    def display_info(self):\n        print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))", "category": "Python"}, {"instruction": "Write a method to find the maximum number of elements in an array such that all subarrays add up to a specified number.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]", "output": "def find_max(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n  return max_val", "category": "Python"}, {"instruction": "Generate a function in Java to calculate the sum of digits for any given integer.", "input": "", "output": "public static int sumDigits(int number) {\n\tint sum = 0;\n\twhile (number != 0) {\n\t\tsum += number%10;\n\t\tnumber /= 10;\n\t}\n\treturn sum;\n}", "category": "Python"}, {"instruction": "Compose a piece of HTML code that uses a form to let the user input an email address.", "input": "", "output": "<form>\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" name=\"email\" id=\"email\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Generate a sorting algorithm written in Java that sorts integers in ascending order.", "input": "", "output": "public static int[] sortIntsAscending(int[] arr) { \n    int n = arr.length; \n    for (int i = 0; i < n-1; i++) { \n        int minIndex = i; \n        for (int j = i+1; j < n; j++) { \n            if (arr[j] < arr[minIndex]) { \n                minIndex = j; \n            } \n        } \n        int temp = arr[minIndex]; \n        arr[minIndex] = arr[i]; \n        arr[i] = temp; \n    } \n    return arr; \n}", "category": "Python"}, {"instruction": "Generate a Java program that creates a class Student with attributes name and age, and a constructor to initialize the attributes.", "input": "", "output": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}", "category": "Python"}, {"instruction": "Write an HTML web page from scratch that displays a list of 10 different CSS colors randomly.", "input": "", "output": "<html>\n<head>\n    <title>Random Colors</title>\n    <style>\n        .random-color {\n            background-color: #9b024a;\n        }\n    </style>\n</head>\n<body>\n    <h1>Random Colors</h1>\n    <ul>\n        <li class=\"random-color\">#9b024a</li>\n        <li class=\"random-color\">#f06f56</li>\n        <li class=\"random-color\">#ffb003</li>\n        <li class=\"random-color\">#37478d</li>\n        <li class=\"random-color\">#82e3d3</li>\n        <li class=\"random-color\">#2e2fbb</li>\n        <li class=\"random-color\">#b82da9</li>\n        <li class=\"random-color\">#0093fa</li>\n        <li class=\"random-color\">#4dadf4</li>\n        <li class=\"random-color\">#ee2f88</li>\n    </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Come up with a C++ program that orders the elements of an unordered array from greatest to smallest.", "input": "", "output": "#include <iostream>\n#include <algorithm>\n\nint main()\n{\n    int arr[] = {5, 3, 7, 1, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    std::sort(arr, arr+n, std::greater<int>());\n\n    for (int i = 0; i < n; ++i)\n        std::cout << arr[i] << \" \";\n    std::cout << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the employee names who are working in the company since Jan 2019.", "input": "", "output": "SELECT employee_name FROM employees WHERE start_date >= '2019-01-01'", "category": "Python"}, {"instruction": "What is the Python function for swapping two variables' values?", "input": "", "output": "The Python function for swapping two variables' values is \"*a, b = b, a*\". This is a simple one-line expression that swaps the values of the two variables.", "category": "Python"}, {"instruction": "Explain the benefits of using the OOP approach in programming.", "input": "", "output": "Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data.", "category": "Python"}, {"instruction": "Execute the given SQL query and return the result.", "input": "SQL Query: SELECT name, age FROM people WHERE age < 20", "output": "Query Result: \nName  | Age\nJohn  | 19\nAlice | 18", "category": "Python"}, {"instruction": "Compare the given hashes and return true if they have the same set of keys and values.", "input": "Hash1: {\"a\": 1, \"b\": 2} \nHash2: {\"b\": 2, \"a\": 1}", "output": "True", "category": "Python"}, {"instruction": "Write a code for finding the maximum value within a range.", "input": "List: [10, 20, 30, 5, 40] \nRange: [20, 40]", "output": "max = 0\nfor num in list:\n    if num >= 20 and num <= 40:\n        max = max(max, num)\nprint(max) # 40", "category": "Python"}, {"instruction": "Create an array of a length 10 filled with odd numbers starting from 3.", "input": "", "output": "int[] arr = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21};", "category": "Python"}, {"instruction": "Create a MySQL table with two columns id and name, where id should have primary key.", "input": "", "output": "CREATE TABLE student (\n    id INT NOT NULL AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Find all character positions in the given string", "input": "String: abracadabra", "output": "Character Positions: \na: 0, 3, 5, 7, 10\nb: 1, 8\nc: 2\nd: 4\nr: 6, 9", "category": "Python"}, {"instruction": "Convert the given HTML code into its equivalent JSON structure.", "input": "<div>\n\t<h2>Hello World!</h2>\n\t<p>My name is John.</p>\n</div>", "output": "{\n\t\"div\": {\n\t\t\"h2\": \"Hello World!\",\n\t\t\"p\": \"My name is John.\"\n\t}\n}", "category": "Python"}, {"instruction": "Given a string, convert it to upper case.", "input": "String: this string should be in upper case", "output": "THIS STRING SHOULD BE IN UPPER CASE", "category": "Python"}, {"instruction": "Create a JavaScript object that contains a student's name, age, and courses.", "input": "", "output": "let student = { \n    name: \"John Doe\", \n    age: 20, \n    courses: [\"Math\", \"Physics\", \"English\"] \n};", "category": "Python"}, {"instruction": "Create an algorithm that will return all numbers in the given array that are greater than 10.", "input": "[5, 8, 10, 12, 15, 17, 20]", "output": "def get_over_10(arr):\n    output = []\n    for num in arr:\n        if num > 10:\n            output.append(num)\n    return output", "category": "Python"}, {"instruction": "Create a React component that will render a list of student details for a particular class.", "input": "", "output": "import React from 'react';\n\nconst StudentList = ({students}) => {\n  return (\n    <div>\n      {students.map((student, index) => {\n        return (\n          <div key={index}>\n            <p>Name: {student.name}</p>\n            <p>Age: {student.age}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StudentList;", "category": "Python"}, {"instruction": "Write a Python program that takes two lists, adds their items and returns a new list.", "input": "list_a = [1, 2, 3]\nlist_b = [4, 5, 6]", "output": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    return output", "category": "Python"}, {"instruction": "Design an algorithm that can efficiently search for an element in a given sorted array", "input": "", "output": "def binary_search(arr, x):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = start + (end - start)//2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] < x: \n      start = mid + 1\n    else: \n      end = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Write a JavaScript code to create a function that checks if a given number is divisible by 2.", "input": "", "output": "function isDivisibleBy2(num) {\n  return num % 2 === 0;\n}", "category": "Python"}, {"instruction": "Write an HTML code that creates a table with two columns and three rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n  </tr>\n  <tr>\n    <td>Row 1, Cell 1</td>\n    <td>Row 1, Cell 2</td>\n  </tr>\n  <tr>\n    <td>Row 2, Cell 1</td>\n    <td>Row 2, Cell 2</td>\n  </tr>\n  <tr>\n    <td>Row 3, Cell 1</td>\n    <td>Row 3, Cell 2</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a HTML page that shows a profile page for a user.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Profile Page</title>\n</head>\n<body>\n\t<h1>Profile Page</h1>\n\t<div>\n\t\t<h2>User Details</h2>\n\t\t<p>Name: John Doe</p>\n\t\t<p>Email: John.Doe@example.com</p>\n\t\t<p>Date of Birth: 01/01/1900</p>\n\t</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query that extracts the first name and last name from the Customers table.", "input": "SELECT * FROM Customers", "output": "SELECT FirstName, LastName FROM Customers;", "category": "Python"}, {"instruction": "Write a jQuery script which animates an element from left to right.", "input": "<div id=\"myElement\">I need to be moved.</div>", "output": "$(\"#myElement\").animate({\n    left: '+=600px'\n});", "category": "Python"}, {"instruction": "Write a TensorFlow program for a linear regression model.", "input": "", "output": "import tensorflow as tf\n\n# Create variables\na = tf.Variable(0.5)\nb = tf.Variable(0.5)\n\n# > Create the input data, y and x\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n\n# > Model: y = ax + b\ny_pred = a * x + b\n\n# > Loss: Mean Squared Error (MSE)\nloss = tf.reduce_mean(tf.square(y_pred - y))\n\n# > Optimizer: Gradient Descent\ntrain_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)\n\n# > Initialize all variables\ninit = tf.global_variables_initializer()\n\n# > Execute the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    for step in range(200):\n        sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n        if (step + 1) % 20 == 0:\n            loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n            print(\"Step:\", step + 1, \" Loss:\", loss_val)", "category": "Python"}, {"instruction": "Create an algorithm to merge two sorted linked lists.", "input": "Linked List 1: 1 - 4 - 7\nLinked List 2: 2 - 5 - 8", "output": "def merge_sorted_lists(list1, list2):\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n        \n    if list1.val < list2.val:\n       head = list1\n       list1 = list1.next\n   else:\n       head = list2\n       list2 = list2.next\n  \n   cur = head\n  \n   while list1 and list2:\n       if list1.val < list2.val:\n           cur.next = list1\n           list1 = list1.next\n       else:\n           cur.next = list2\n           list2 = list2.next\n          \n       cur = cur.next\n          \n   cur.next = list1 if list1 else list2\n  \n   return head", "category": "Python"}, {"instruction": "Create a class in Java to store student grades with functions for adding and calculating average grades.", "input": "", "output": "class StudentGrades {\n    private float[] grades;\n    private int size;\n \n    public StudentGrades() {\n        grades = new float[10];\n        size = 0;\n    }\n \n    public void addGrade(float grade) {\n        grades[size] = grade;\n        size++;\n    }\n \n    public float averageGrades() {\n        float sum = 0;\n \n        for (int i=0; i<size; i++) {\n            sum += grades[i];\n        }\n        return sum/size;\n    }\n}", "category": "Python"}, {"instruction": "Create an object sorting function using bubble sort in JavaScript.", "input": "const arr = [10, 4, 7, 8, 1, 6]", "output": "function bubbleSort(arr) {\n  for (let i = arr.length-1; i > 0; i--) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n  return arr;\n}", "category": "Python"}, {"instruction": "Using ES6 syntax, insert the following into the code:", "input": "let arr = [1, 2, 3];", "output": "let arr = [1, 2, 3];\nconst doubled = arr.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6];", "category": "Python"}, {"instruction": "Write an algorithm to count the number of pairs whose difference is k.", "input": "nums = [1, 5, 3, 4, 7, 8]\nk = 3", "output": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            count += 1\n\n    return count\n\nnum_diff = 3\npair_count = count_pairs(nums, num_diff)\nprint(\"Number of pairs with difference\", num_diff, \" is :\", pair_count)", "category": "Python"}, {"instruction": "Which programming language syntax is used in the following code snippet?", "input": "#define some_function() {\n    // do something\n}", "output": "The programming language syntax used in the given code snippet is C.", "category": "Python"}, {"instruction": "Create an algorithm that performs bubble sort.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j+1], arr[j] = arr[j], arr[j+1]", "category": "Python"}, {"instruction": "Create an SQL query that pulls data from two tables and sorts the results in descending order by date.", "input": "", "output": "SELECT * FROM tableA, tableB \nWHERE tableA.id = tableB.id \nORDER BY tableB.date DESC", "category": "Python"}, {"instruction": "Write a JavaScript function that generates the Fibonacci sequence up to a given number.", "input": "", "output": "function fibonacci (num) {\n    let result = [];\n    let a = 1;\n    let b = 0;\n    let temp;\n\n    while (num >= 0) {\n      result.push(b);\n  \n      temp = a;\n      a = a + b;\n      b = temp;\n  \n      num--;\n    }\n  \n    return result;\n  }", "category": "Python"}, {"instruction": "Come up with a Java program that checks if one string is a substring of another.", "input": "", "output": "public static boolean isSubstring(String s, String x) {\n    int i = 0, j = 0;\n    while (i < s.length() && j < x.length()) {\n        if (s.charAt(i) == x.charAt(j)) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == x.length()) {\n        return true;\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Use the information provided to create a class in Python which represent a Rectangle.", "input": "The Rectangle class should have: \n- Attributes of length and width\n- A method to compute the area of the rectangle", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n   \n    def get_area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Write a SQL query to find customers who have purchased the most items in the last month.", "input": "", "output": "SELECT customer_name, COUNT(order_id) AS num_items_purchased \nFROM orders\nWHERE date_created > DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY customer_name\nORDER BY num_items_purchased DESC;", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the longest consecutive sequence.", "input": "[1, 9, 3, 10, 4, 20, 2]", "output": "def longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n \n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n \n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n \n            longest_sequence = max(longest_sequence, current_sequence)\n \n    return longest_sequence", "category": "Python"}, {"instruction": "Given a list of strings, construct a regex to match any string that starts with \"ab\".", "input": "", "output": "^ab.*", "category": "Python"}, {"instruction": "Create a function which determines if a given number is a palindrome.", "input": "7337", "output": "def palindrome(num):\n    # convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n\n    # check if the given number is equal to the reversed string\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 7337\n    print(palindrome(num))", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and return a new string that has the characters of the second string appended to the first string.", "input": "\"hello\",\"world\"", "output": "def append_string(string1, string2):\n    return string1 + string2\n\nif __name__ == '__main__':\n    string1 = \"hello\"\n    string2 = \"world\"\n    result = append_string(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Output the number of words in a given sentence stored as a string.", "input": "\"Welcome to the world of coding!\"", "output": "def count_words(sentence):\n    return len(sentence.split())\n\nif __name__ == '__main__':\n    sentence = \"Welcome to the world of coding!\"\n    print(count_words(sentence))", "category": "Python"}, {"instruction": "Design a class that stores and prints a complex number.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return '{} + {}i'.format(self.real, self.imag)\n\nif __name__ == '__main__':\n    c = ComplexNumber(2, 8)\n    print(c)", "category": "Python"}, {"instruction": "Create a computer program that takes a string as an input and builds a dictionary of words and their respective frequencies.", "input": "\"the quick brown fox jumps over the lazy dog\"", "output": "def get_frequency(input):\n    # Split the input into words\n    words = input.split()\n\n    # Create a dictionary to store the words and the frequency\n    frequency = dict()\n\n    # Iterate over the words and store the frequency\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n            \n    return frequency\n\nif __name__ == \"__main__\":\n    # Input string\n    input = \"the quick brown fox jumps over the lazy dog\"\n\n    # Get the frequency of words\n    frequency = get_frequency(input)\n\n    # Print the frequency\n    print(frequency)", "category": "Python"}, {"instruction": "Write a JavaScript program to make a shallow clone of an object.", "input": "", "output": "function clone(obj) {\n let cloneObj = {};\n for (let i in obj) {\n if (obj.hasOwnProperty(i)) {\n cloneObj[i] = obj[i];\n }\n }\n return cloneObj;\n}\n\nlet obj = {name: 'John', age: 30};\nlet cloneObj = clone(obj);\n\nconsole.log(cloneObj);\n# Output: {name: \"John\", age: 30}", "category": "Python"}, {"instruction": "Write a JavaScript program to find all the words in a string which start with a specific letter.", "input": "string: \u201cThe quick brown fox jumps over the lazy dog\u201d\nletter: \u2018j\u2019", "output": "function findWords(string, letter){\n let words = string.split(\" \");\n let result = [];\n for(let word of words){\n if(word.charAt(0) == letter){\n result.push(word);\n }\n }\n return result;\n}\n \nconsole.log(findWords(\"The quick brown fox jumps over the lazy dog\", \"j\"));\n# Output: [\"jumps\"]", "category": "Python"}, {"instruction": "Reverse the words in a sentence stored as a list in Python.", "input": "['word', 'one', 'is', 'this']", "output": "def reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n\n    return words\n\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))", "category": "Python"}, {"instruction": "Given an array, separate the odd and even numbers, and return a list of two different arrays, one for even and one for odd numbers.", "input": "[3, 6, 9, 12, 21]", "output": "def separate_even_odd(arr):\n even = []\n odd = []\n for i in arr:\n if i % 2 == 0:\n even.append(i)\n else:\n odd.append(i)\n return even, odd\n\nprint(separate_even_odd([3, 6, 9, 12, 21]))\n# Output: ([6, 12], [3, 9, 21])", "category": "Python"}, {"instruction": "Given an array of integers, calculate the sum of all even numbers in the array.", "input": "[ 5, 10, 15, 11, 22, 33, 28, 9]", "output": "def sum_even_numbers(arr):\n sum = 0\n for i in arr:\n if i % 2 == 0:\n sum += i\n return sum\n \nprint(sum_even_numbers([5, 10, 15, 11, 22, 33, 28, 9]))\n# Output: 70", "category": "Python"}, {"instruction": "Given an input string and a pattern, find the first index of the pattern in the string.", "input": "string: \u201cThe quick brown fox jumps over the lazy dog\u201d\npattern: \u201cdog\u201d", "output": "def find_pattern_index(string, pattern):\n for i in range(len(string) - len(pattern) + 1): \n  if string[i:i+len(pattern)] == pattern: \n   return i \n return -1\n \nprint(find_pattern_index(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\n# Output: 40", "category": "Python"}, {"instruction": "Generate a random valid email address.", "input": "", "output": "import random\n\ndef generate_email():\n characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n email_address = ''.join(random.choice(characters) for i in range(10))\n return email_address + '@example.com'", "category": "Python"}, {"instruction": "How can you use the modulo operator to print even numbers in a loop?", "input": "", "output": "The modulo operator can be used to print even numbers in a loop by using an IF statement to check if the remainder of a number divided by two is zero. If the condition is true, the even number is printed. For example, the following code will print all even numbers from 1 to 10:\n\nfor (int i = 1; i <= 10; i++){ \n   if (i % 2 == 0) \n      System.out.println(i);\n}", "category": "Python"}, {"instruction": "Create a JavaScript object for a student and include properties such as first name, last name, and grades for all courses taken.", "input": "", "output": "let student = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    grades: {\n        math: 89,\n        science: 80,\n        english: 92,\n        history: 94\n    }\n}", "category": "Python"}, {"instruction": "Demonstrate how to use an if-else block to control the execution sequence of a program.", "input": "", "output": "Using an if-else block to control execution sequence involves using if-else statements to check a given condition. If the condition is true, the code inside the if statement is executed, otherwise, the code inside the else statement is executed. For example, if a variable called \"x\" is declared with a value of 3, the following if-else block will print \"X is 3\": \n\nif(x == 3) {\n   System.out.println(\"X is 3\");\n} else {\n   System.out.println(\"X is not 3\");\n}", "category": "Python"}, {"instruction": "Provide the JavaScript code required to navigate to a page when the page is loaded.", "input": "", "output": "window.onload = function() { \n    window.location.href = \"http://www.example.com\";\n }", "category": "Python"}, {"instruction": "Decompose a given number into its prime factors.", "input": "25", "output": "def prime_factorize(n):\n prime_factors = []\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n prime_factors.append(i)\n if n > 1:\n prime_factors.append(n)\n return prime_factors\n \nprint(prime_factorize(25))\n# Output: [5, 5]", "category": "Python"}, {"instruction": "Write a function to reverse a given sentence in Python.", "input": "Given sentence: \"The quick brown fox jumps over the lazy dog.\"", "output": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\nif __name__ == '__main__': \n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))", "category": "Python"}, {"instruction": "Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx", "input": "+91 983-741-3256", "output": "def extract_country_code(number):\n    # Check if number is valid\n    if len(number) == 13 and number[0] == '+':\n        # Extract the country code\n        cc = number[1:3]\n        return cc\n\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))", "category": "Python"}, {"instruction": "Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.", "input": "", "output": "def sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    return prime_nums\n\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))", "category": "Python"}, {"instruction": "Construct a regex to match any 5-digit US zip code.", "input": "", "output": "\\d{5}", "category": "Python"}, {"instruction": "Create a for loop in Python that will iterate through a given list and add the square of each element to a new list.", "input": "nums = [2, 3, 4]", "output": "# Create an empty list\nsquared_nums = []\n\n# Iterate through the given list \nfor num in nums:\n  # Calculate the square of the element\n  squared_num = num * num\n  # Append it to the new list\n  squared_nums.append(squared_num)\n\n# Print the new list\nprint(squared_nums) \n# Output: [4, 9, 16]", "category": "Python"}, {"instruction": "Create a function in JavaScript to generate an array containing 5 random numbers between 0 and 9 (inclusive).", "input": "", "output": "function generateRandomNumbers() {\n\n    // Declaring array to hold 5 random numbers between 0 and 9\n    let randArray = [];\n\n    // Generate 5 random numbers\n    while(randArray.length < 5) {\n        // Generate a random number between 0 and 9\n        let randNum = Math.floor(Math.random() * 10);\n        // Add to array if not already present in the array\n        if(randArray.indexOf(randNum) < 0){\n            randArray.push(randNum);\n        }\n    }\n\n    // Return array\n    return randArray;\n\n}", "category": "Python"}, {"instruction": "Write a shell script to create a directory with a name \"mydir\" under the home directory.", "input": "", "output": "#!/bin/sh\n\n# Create a directory with name \"mydir\"\nmkdir ~/mydir", "category": "Python"}, {"instruction": "Using HTML, render a link to an external site.", "input": "external_site = \"https://www.example.com\"", "output": "<a href=\"https://www.example.com\" target=\"_blank\">Visit External Site</a>", "category": "Python"}, {"instruction": "Create a method in JavaScript that will return the area of a triangle.", "input": "", "output": "// Calculating area of triangle in JavaScript\nfunction areaOfTriangle(a, b, c) {\n    // Calculate the semi-perimeter of the triangle\n    var s = (a + b + c) / 2;\n    \n    // Calculate the area of triangle using Heron's Formula\n    var area =  Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Return the area of triangle\n    return area;\n}", "category": "Python"}, {"instruction": "Write a search engine using an index in JavaScript.", "input": "", "output": "// create an index\nlet index = {};\n\n// add a document to the index\nlet addDocument = (document, content) => {\n  let words = content.split(' ');\n  words.forEach((word) => {\n    if (index.hasOwnProperty(word)) {\n      //if the word is already in the index, add the document to its list\n      index[word].push(document);\n    } else {\n      //add the word to the index\n      index[word] = [document];\n    }\n  });\n};\n\n// perform a search\nlet search = (query) => {\n  //array to hold the found documents\n  let found = [];\n\n  query.split(' ').forEach((word) => {\n    //check if word is in index\n    if (index.hasOwnProperty(word)) {\n      index[word].forEach((doc) => {\n        //make sure document isn't already in the list\n        if (found.indexOf(doc) == -1) {\n          found.push(doc);\n        }\n      });\n    }\n  });\n\n  //return the found documents\n  return found;\n};", "category": "Python"}, {"instruction": "Design an algorithm to compute the number of trailing zeroes in a factorial number.", "input": "", "output": "def count_trailing_zeroes(factorial_number):\n    \n\u00a0 \u00a0 # Initialize count \n\u00a0 \u00a0 count = 0\n\n\u00a0 \u00a0 # Keep dividing n by powers of 5 and update count\n\u00a0 \u00a0 i = 5\n\u00a0 \u00a0 while (factorial_number/i>=1):\n\u00a0 \u00a0 \u00a0 \u00a0 count += int(factorial_number/i)\n\u00a0 \u00a0 \u00a0 \u00a0 i *= 5\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 return int(count)\n\nif __name__ == \"__main__\":\n    factorial_number = 12\n    print(count_trailing_zeroes(factorial_number))", "category": "Python"}, {"instruction": "Make a GUI app in Java to add two numbers together.", "input": "", "output": "import java.awt.*;\nimport javax.swing.*;\n\npublic class AddTwoNumbersGUI {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Adding two numbers\");\n        frame.setSize(400, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n        Container contentPane = frame.getContentPane();\n        contentPane.setLayout(new FlowLayout());\n\n        JLabel num1Label = new JLabel(\"Enter first number:\");\n        JLabel num2Label = new JLabel(\"Enter second number:\");\n        JLabel resultLabel = new JLabel(\"Result:\");\n        \n        JTextField num1TextField = new JTextField();\n        JTextField num2TextField = new JTextField();\n        JTextField resultTextField = new JTextField();\n\n        JButton addButton = new JButton(\"Add\");\n        addButton.addActionListener(e -> {\n            int num1 = Integer.parseInt(num1TextField.getText());\n            int num2 = Integer.parseInt(num2TextField.getText());\n            int result = num1 + num2;\n            resultTextField.setText(Integer.toString(result));\n        });\n\n        contentPane.add(num1Label);\n        contentPane.add(num1TextField);\n        contentPane.add(num2Label);\n        contentPane.add(num2TextField);\n        contentPane.add(addButton);\n        contentPane.add(resultLabel);\n        contentPane.add(resultTextField);\n    }\n\n}", "category": "Python"}, {"instruction": "How many lines would the following algorithm require?", "input": "# Find all the prime numbers between two given numbers\n# Input: two numbers, n1 and n2\n# Output: list of prime numbers between n1 and n2", "output": "It would require approximately 9 lines of code.", "category": "Python"}, {"instruction": "Design a Python class that allows a user to set and get the name of an object.", "input": "", "output": "class User:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name", "category": "Python"}, {"instruction": "Write a SELECT statement that retrieves the first name, last name, and salary of all employees, sorted in descending order of salary.", "input": "", "output": "SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC;", "category": "Python"}, {"instruction": "Sort the following list in ascending order [3, 5, 1, 2, 9].", "input": "[3, 5, 1, 2, 9]", "output": "sorted_list = [1, 2, 3, 5, 9]", "category": "Python"}, {"instruction": "Convert the following string \"10 10 20 20 30\" into a list of integers.", "input": "\"10 10 20 20 30\"", "output": "list_of_ints = [10, 10, 20, 20, 30]", "category": "Python"}, {"instruction": "Retrieve the elements in an array [1, 2, 3, 4, 5, 6] where the index is greater than or equal to 3", "input": "[1, 2, 3, 4, 5, 6]", "output": "[4, 5, 6]", "category": "Python"}, {"instruction": "Design an algorithm to calculate the intersection of two given lists.", "input": "List1 = [2, 5, 9, 12, 17]\nList2 = [3, 5, 9, 10]", "output": "def intersection(list1, list2):\n    # Initialize an empty list \n    intersection_list = []\n\n    # Iterate over elements of the first list\n    for num in list1:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\nif __name__ == \"__main__\":\n    list1 = [2, 5, 9, 12, 17]\n    list2 = [3, 5, 9, 10]\n    print(intersection(list1, list2))", "category": "Python"}, {"instruction": "Write a loop in Python to find the summation of the square of the first 10 natural numbers.", "input": "", "output": "sum = 0\nfor i in range(1, 11): \n    sum += i**2 \n \nprint(\"The sum of the square of the first 10 natural numbers is\", sum)", "category": "Python"}, {"instruction": "Write a SQL query to sort all the customers by their first name in ascending order.", "input": "", "output": "SELECT * FROM customers ORDER BY first_name ASC;", "category": "Python"}, {"instruction": "How do you connect to a MySQL database in Python?", "input": "", "output": "You can connect to a MySQL database in Python using the mysql.connect() method. The syntax of this method is as follows:\n\nmysql.connect(host=\"localhost\", user=\"username\", password=\"password\", database=\"database_name\")\n\nOnce you have successfully connected to the MySQL database, you can run SQL queries or perform other operations.", "category": "Python"}, {"instruction": "How would you access the last element of an array in JavaScript?", "input": "", "output": "You can access the last element of an array in JavaScript by using the array's length property as follows:\n\narr[arr.length - 1]", "category": "Python"}, {"instruction": "Format a given date as mm/dd/yyyy using C++.", "input": "Date: April 14, 2021", "output": "#include <iostream>\n#include <ctime>\n\nint main() \n{\n  time_t now = time(0);\n  tm *ltm = localtime(&now);\n  ltm->tm_mon = 3;  // set month to April\n  ltm->tm_mday = 14; // set date to 14\n  \n  std::cout << std::put_time(ltm, \"%m/%d/%Y\") << '\\n';\n  return 0;\n}\n\n// Output: 04/14/2021", "category": "Python"}, {"instruction": "Find the average of all the elements in an array using JavaScript.", "input": "[1,2, 3, 4]", "output": "let average = array.reduce((acc, curr) => acc + curr, 0) / array.length;\nconsole.log(average);\n\n// Output: 2.5", "category": "Python"}, {"instruction": "Remove the extra spaces from a string so that the output does not contain any extra spaces in C++.", "input": "String:    Coding     is     Fun", "output": "#include<iostream>\n#include<string>\n\nstd::string remove_extra_spaces(const std::string& str) { \n    std::string result;\n  \n    int n = str.length(); \n    bool isPreviousCharSpace = false; \n  \n    for (int i = 0; i < n; i++) { \n        char ch = str[i]; \n  \n        if (ch == ' ' && !isPreviousCharSpace) { \n            result += ch; \n            isPreviousCharSpace = true; \n        } \n  \n        else if (ch != ' ') { \n            result += ch; \n            isPreviousCharSpace = false; \n        } \n    } \n  \n    return result; \n} \n\nint main() \n{ \n    std::string str = \"  Coding     is     Fun   \"; \n    std::cout << remove_extra_spaces(str) << std::endl; \n    return 0; \n} \n\n// Output: Coding is Fun", "category": "Python"}, {"instruction": "Split a sentence into an array of words using C++.", "input": "Sentence: Today is a sunny day.", "output": "#include<string>\n#include<vector>\n#include<sstream>\n\nstd::string sentence = \"Today is a sunny day.\";\nstd::istringstream iss(sentence);\nstd::vector<std::string> words;\n\nfor(std::string word; iss >> word; )\n    words.push_back(word);\n\n//words[] now contains the sentence split into words", "category": "Python"}, {"instruction": "How would you check an integer is divisible by 7 or not in Python?", "input": "", "output": "We can use the modulo operator (%) to check if an integer is divisible by another number in Python.\n\nThe modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible.\n\nFor example, to check if an integer is divisible by 7, we can use:\n\nif (x % 7) == 0:\n    # x is divisible by 7\nelse:\n    # x is not divisible by 7", "category": "Python"}, {"instruction": "Explain the concept of Strassen's Matrix multiplicatiom algorithm.", "input": "", "output": "Strassen's Matrix multiplication algorithm is an improvement over the traditional matrix multiplication algorithm. This algorithm divides the two matrices into four sub-matrices of size n/2 \u00d7 n/2 and then performs 7 multiplications and adds the resulting values to calculate the final result. It reduces the number of multiplications required, resulting in a faster algorithm.", "category": "Python"}, {"instruction": "Explain the concept of merging two sorted lists.", "input": "", "output": "Merging two sorted lists involves examining elements of each list and inserting them in order into a third list. This process continues until all elements from the two lists have been inserted into the third resulting list. The algorithm requires that the two starting lists be in sorted order, although the elements can be in any order (ascending, descending, or random) as long as each list is sorted.", "category": "Python"}, {"instruction": "Explain how to measure the complexity of an algorithm.", "input": "", "output": "Algorithm complexity can be measured in two ways: time complexity and space complexity. Time complexity measures the amount of time an algorithm takes to run and solves a problem. Space complexity measures the amount of memory an algorithm requires to run and solves a problem. The most common metrics used to measure the complexity of an algorithm are Big O notation and worst case analysis.", "category": "Python"}, {"instruction": "Given the following 2D array. Create a function to find the sum of each row.", "input": "Array = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]", "output": "def sum_row(arr):\n    total = []\n    for row in arr:\n        total.append(sum(row))\n    return total", "category": "Python"}, {"instruction": "Write a SQL query to select the records from the table which have the maximum value in a given column.", "input": "Table Name: Student\nColumn: Age", "output": "SELECT * FROM Student\nWHERE Age = (SELECT MAX(Age) FROM Student)", "category": "Python"}, {"instruction": "Suppose we have a list of numbers, write a Python code to compute the average of the list.", "input": "list = [1, 5, 8, 9, 10]", "output": "def find_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum/len(list)", "category": "Python"}, {"instruction": "Write an Arduino program to blink an LED once every two seconds.", "input": "", "output": "void setup() {\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(2000);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(2000);\n}", "category": "Python"}, {"instruction": "Create a web page that displays \"Hello, World!\"", "input": "", "output": "<html>\n<head>\n<title>Hello World</title>\n</head>\n<body>\n<h1>Hello, World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an assembly language program to calculate 2 to the power of 8.", "input": "", "output": ".data\n    x:    .word 8\n.text\n    li $v0, 2       # load 2 to $v0\n    li $t0, 1       # load 1 to $t0\n    lw $a0, x       # load 8  to $a0\n    jal pow\n    j exit\n\npow:\n    mul $t1, $v1, $v0 # r3 = $v0 * r2 \n    mflo $v1         # r2 = lo(r3)\n    addi $a0, $a0, -1 # r1 = r1-1 \n    bne $a0, 0, pow  # if r1 != 0 go to loop start\n    mfhi $v0         # r0 = hi(r3)\n    jr $ra           \n\nexit:\n    nop", "category": "Python"}, {"instruction": "Connect to an API end-point to retrieve a list of user information in JSON format.", "input": "", "output": "#!/bin/bash\n\n# Install cURL\nsudo apt install curl\n\n# Connect to the API end-point\ncurl https://example.com/api/users > user_details.json\n\n# Print the list of users\ncat user_details.json", "category": "Python"}, {"instruction": "alter this code so that it can run on python3,", "input": "def say_message(message, times=1):\n    print message * times\n\nsay_message(\"Hello world!\")", "output": "\"\"\"\nAlter this code so that it can run on Python 3\n\"\"\"\n\ndef say_message(message, times=1):\n    print(message * times)\n\nsay_message(\"Hello world!\")", "category": "Python"}, {"instruction": "generate a function minL that takes two lists and returns the smallest element from both lists.", "input": "list1 = [9, 11, 8, 10, 20] \nlist2 = [3, 10, 12]", "output": "\"\"\"\nGenerate a function minL that takes two lists and returns the smallest element from both lists.\n\"\"\"\n\ndef minL(list1, list2):\n    min_list = sorted(list1 + list2)\n    print('The minimum of list1 and list2 is: ', min_list[0]) \n\nif __name__ == '__main__': \n    list1 = [9, 11, 8, 10, 20] \n    list2 = [3, 10, 12] \n    minL(list1, list2)", "category": "Python"}, {"instruction": "create a function that calculates the total cost of a meal including taxes and tips.", "input": "meal_price = 35\nsales_tax = 0.09\ntip_percentage = 0.18", "output": "\"\"\"\nCreate a function that calculates the total cost of a meal including taxes and tips\n\"\"\"\n\ndef calculate_total_meal_cost(meal_price, sales_tax, tip_percentage): \n    # Calculate subtotal\n    subtotal = meal_price + meal_price * tip_percentage\n    # Calculate tax\n    tax =  subtotal * sales_tax\n    # Calculate total\n    total = subtotal + tax\n\n    return total\n\nif __name__ == '__main__': \n    meal_price = 35\n    sales_tax = 0.09\n    tip_percentage = 0.18\n    print(\"Total cost of meal is: \" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))", "category": "Python"}, {"instruction": "edit the existing function to calculate the compound interest.", "input": "# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100", "output": "\"\"\"\nEdit the existing function to calculate the compound interest\n\"\"\"\n# Calculate Compound Interest \ndef calcCompoundInterest(p, r, t): \n    # Calculate Simple Interest \n    interest= p * (pow((1 + r / 100), t)) \n    return interest\n\nif __name__ == '__main__': \n    principal_amount = 1000\n    rate_of_interest = 5\n    time_period = 5\n    print(\"Compound interest is\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))", "category": "Python"}, {"instruction": "What is the difference between compile-time and run-time errors?", "input": "", "output": "Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes.", "category": "Python"}, {"instruction": "Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order.", "input": "[3, -4, 1, -2]", "output": "def remove_negative_numbers(lst):\n  negative = []\n  for x in lst:\n    if x < 0:\n      negative.append(x)\n  return sorted(negative)", "category": "Python"}, {"instruction": "Read the following command line arguments in Java and print out the values.", "input": "-v -f -d input.txt", "output": "String[] args = {\"-v\", \"-f\", \"-d\", \"input.txt\"};\n\nfor (String arg : args) {\n    System.out.println(arg);\n}", "category": "Python"}, {"instruction": "Write a function in C that returns the maximum element in an integer array.", "input": "", "output": "int findMaximum(int arr[], int size)\n{\n    int max = arr[0];\n    for (int i=1; i<size; i++)\n        if (arr[i] > max)\n           max = arr[i];\n \n    return max;\n}", "category": "Python"}, {"instruction": "What is the reuse principle in software engineering?", "input": "", "output": "The reuse principle in software engineering states that software components should be written and designed for reuse in other software components and systems. This can save developers time and money when developing software, since they can use existing components to build new functions and features into their software products. Additionally, it helps promote consistent coding, makes debugging easier, and reduces the risk of introducing bugs and other errors.", "category": "Python"}, {"instruction": "Fill in the blanks of the following Python code to implement a Selection Sort algorithm.", "input": "def selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element\n        arr[arr.index(max_element)] = [temp]", "output": "def selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp", "category": "Python"}, {"instruction": "Find the sum of the following fibonacci sequence", "input": "0, 1, 1, 2, 3, 5, 8, 13", "output": "The sum of the given sequence is 33.", "category": "Python"}, {"instruction": "Write a C++ class called \"Point\" to represent a point in 2-dimensional space.", "input": "", "output": "class Point {\npublic:\n    Point() : x_(0), y_(0) {}\n    Point(double x, double y) : x_(x), y_(y) {}\n    double x() const { return x_; }\n    double y() const { return y_; }\n    void setX(double x) { x_ = x; }\n    void setY(double y) { y_ = y; }\nprivate:\n    double x_;\n    double y_;\n};", "category": "Python"}, {"instruction": "Create a graphical user interface using Python to perform the following function", "input": "Take two inputs from the user: a name and an age", "output": "import tkinter \n  \n# Create an instance of tkinter \nroot = tkinter.Tk()  \n  \n# Create two lables and two input boxes \nname_label = tkinter.Label(root, text ='Name: ')   \nage_label = tkinter.Label(root, text ='Age: ') \nname_entry = tkinter.Entry(root) \nage_entry = tkinter.Entry(root) \n  \n# Place the labels,entry boxes in the desired layout \nname_label.grid(row = 0, column = 0)   \nname_entry.grid(row = 0, column = 1)  \nage_label.grid(row = 1, column = 0)   \nage_entry.grid(row = 1, column = 1) \n  \nroot.mainloop()", "category": "Python"}, {"instruction": "Find the first common ancestor of two nodes in a binary tree", "input": "Node 1: 15\nNode 2: 16", "output": "The first common ancestor of node 1 (15) and node 2 (16) is 14.", "category": "Python"}, {"instruction": "Generate a correct SQL query to obtain all records from the following table", "input": "Table - PRODUCT", "output": "SELECT * FROM PRODUCT;", "category": "Python"}, {"instruction": "Write a correct implementation of the following algorithm", "input": "Binary search for an element x in a sorted array", "output": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1", "category": "Python"}, {"instruction": "Write a function to calculate the number of letter and non-letter characters in a string.", "input": "Input: 'If These Hills'", "output": "def numberOfLettersAndNonLetterCharacters(string):\n    count_characters = 0\n    count_non_characters = 0\n    \n    for char in string:\n        if char.isalpha():\n            count_characters += 1\n        else:\n            count_non_characters += 1\n    return (count_characters, count_non_characters)\n\nprint(numberOfLettersAndNonLetterCharacters('If These Hills'))", "category": "Python"}, {"instruction": "Given a binary tree, write a program to calculate the sum of all its nodes.", "input": "", "output": "def calculateSumOfBinaryTree(root):\n    if root == None:\n        return 0\n    else:\n        return root.data + calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)", "category": "Python"}, {"instruction": "determine if two strings are anagrams or not.", "input": "string1 = 'listen'\nstring2 = 'silent'", "output": "\"\"\"\nDetermine if two strings are anagrams or not\n\"\"\"\n\ndef is_anagram(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\n    # sort both lists\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2: \n        return True\n    else:\n        return False\n\nif __name__ == '__main__': \n    string1 = 'listen'\n    string2 = 'silent'\n    print(\"Result: \" + str(is_anagram(string1, string2)))", "category": "Python"}, {"instruction": "Generate a function to calculate the probability of an event.", "input": "num_outcomes = 36\nnum_favourable_outcomes = 9", "output": "\"\"\"\nGenerate a function to calculate the probability of an event\n\"\"\"\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    # calculate probability \n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    return probability\n    \nif __name__ == '__main__': \n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))", "category": "Python"}, {"instruction": "Create a HTML program that displays student records", "input": "<No input>", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Student Records</title>\n</head>\n<body>\n    <h1>Student Records</h1>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Gender</th>\n        </tr>\n        <tr>\n            <td>Jerry</td>\n            <td>21</td>\n            <td>Male</td>\n        </tr>\n        <tr>\n            <td>Janice</td>\n            <td>18</td>\n            <td>Female</td>\n        </tr>\n        <tr>\n            <td>Jack</td>\n            <td>20</td>\n            <td>Male</td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "How would you insert an element into a pre-existing array using JavaScript?", "input": "", "output": "An element can be inserted into a pre-existing array using the JavaScript Array.prototype.push() method. The push() method takes a single element as an argument and appends it to the end of the array. For example, to insert the value 7 into an array, you could use the following syntax: array.push(7);", "category": "Python"}, {"instruction": "Design an object-oriented class in Python that stores a book's title, author, and publisher.", "input": "", "output": "class Book:\n  \n  def __init__(self, title, author, publisher):\n    self._title = title\n    self._author = author\n    self._publisher = publisher\n\n  def get_title(self):\n    return self._title\n\n  def set_title(self, title):\n    self._title = title\n\n  def get_author(self):\n    return self._author\n  \n  def set_author(self, author):\n    self._author = author\n\n  def get_publisher(self):\n    return self._publisher\n  \n  def set_publisher(self, publisher):\n    self._publisher = publisher", "category": "Python"}, {"instruction": "Construct a React component that renders \"Hello World\" when rendered.", "input": "", "output": "const HelloWorld = () => {\n  return (\n    <div>Hello World</div>\n  );\n};", "category": "Python"}, {"instruction": "Initialize a list with 5 items containing numbers from 1 to 5.", "input": "", "output": "my_list = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "What is the purpose of a Structured Query Language (SQL)?", "input": "", "output": "The purpose of SQL is to manage data stored in relational databases and to manipulate data in the database by performing operations such as creating, updating, and deleting records. It is also used to define and manipulate data in the database. By using SQL, users can combine and analyze data from multiple sources.", "category": "Python"}, {"instruction": "Given a value, x, write a line of code that converts it from a float to an integer.", "input": "x = 25.32", "output": "int(x) # result: 25", "category": "Python"}, {"instruction": "Develop a regex pattern to match email addresses.", "input": "", "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "category": "Python"}, {"instruction": "Convert 1024 bytes into kilobytes.", "input": "", "output": "1 kilobyte = 1024 bytes\n\n1024 bytes = 1 kilobyte.", "category": "Python"}, {"instruction": "Write a style rule to apply a border on the first and last elements of the document.", "input": "", "output": "*:first-child, *:last-child {\n   border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Parse the following URL and extract the protocol, hostname and the path.", "input": "URL: https://example.com/blog/post/1", "output": "protocol: https\nhostname: example.com\npath: blog/post/1", "category": "Python"}, {"instruction": "Construct a URL for making an HTTP POST request to the given endpoint.", "input": "Endpoint: http://example.com/building/1", "output": "http://example.com/building/1?method=POST", "category": "Python"}, {"instruction": "Check if a given webpage contains specific word or not?", "input": "Webpage URL: https://en.wikipedia.org/wiki/Cat\nWord: Felis", "output": "true", "category": "Python"}, {"instruction": "Generate a dynamic timestamp for a given date.", "input": "Date: June 13, 2020, 5:30pm", "output": "1592175000", "category": "Python"}, {"instruction": "Write a Cypher query to select all nodes with the label 'address'.", "input": "", "output": "MATCH (a: Address) RETURN a;", "category": "Python"}, {"instruction": "Calculate the number of days taken to finish a task given its start and end dates.", "input": "Start Date: 01 June 2020\nEnd Date: 15 June 2020", "output": "14 days.", "category": "Python"}, {"instruction": "Write an SQL query to display the average age of employees in each department.", "input": "", "output": "SELECT department, AVG(age) AS avg_age\nFROM employees\nGROUP BY department;", "category": "Python"}, {"instruction": "Write a shell script that displays the folder structure of the current working directory.", "input": "", "output": "#!/bin/bash\necho `tree -L 1 | awk '{$1=$1};1'`", "category": "Python"}, {"instruction": "Using JavaScript, print the name of sites visited today on the web console.", "input": "", "output": "var visitedSites = [\"www.facebook.com\", \"www.google.com\", \"www.yahoo.com\"];\nconsole.log(\"Visited sites today: \" +visitedSites);", "category": "Python"}, {"instruction": "Write a loop that prints the square of each element in a given array.", "input": "arr = [1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nfor i in arr: \n  print(i*i)", "category": "Python"}, {"instruction": "Extend the following dictionary with three more key-value pairs.", "input": "my_dict = {\n \"name\": \"John\",\n \"age\": 17\n}", "output": "my_dict = {\n \"name\": \"John\",\n \"age\": 17,\n \"gender\": \"male\",\n \"height\": 180,\n \"hobbies\": [\"basketball\", \"reading\", \"traveling\"]\n}", "category": "Python"}, {"instruction": "Create an anonymous function that takes two numbers, x and y and returns their product.", "input": "", "output": "product = lambda x, y: x * y", "category": "Python"}, {"instruction": "What type of data structure is best suited for a database table?", "input": "", "output": "The best data structure for a database table is a relational database. Relational databases allow for fast retrieval of stored information and utilize Structured Query Language (SQL) to create relationships between database tables.", "category": "Python"}, {"instruction": "Build a Python dictionary that contains five elements.", "input": "", "output": "myDictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\",\n  \"key4\": \"value4\",\n  \"key5\": \"value5\"\n}", "category": "Python"}, {"instruction": "Write a C# function to replace all occurrences of the letter \"a\" with \"o\".", "input": "string input=\"Timon and Pumbaa\"", "output": "public static string ReplaceAwithO(string input){\n  return input.Replace('a', 'o');\n}", "category": "Python"}, {"instruction": "Construct a JavaScript algorithm to determine whether a number is even or odd.", "input": "noinput", "output": "function isOdd(number) {\n  let mod = number % 2; // Check modulus (i.e. remainder)\n  if (mod === 0) {\n    return false; \n  }\n  else {\n    return true;\n  }\n}", "category": "Python"}, {"instruction": "Design a one-to-many relationship between two tables in SQL.", "input": "", "output": "CREATE TABLE parent (\n  id INTEGER PRIMARY KEY,\n  name TEXT\n);\n \nCREATE TABLE child (\n  id INTEGER,\n  parent_id INTEGER,\n  name TEXT,\n  FOREIGN KEY (parent_id) REFERENCES parent (id)\n);", "category": "Python"}, {"instruction": "Construct a CSS style sheet to set background color of all <h1> tags as blue.", "input": "", "output": "h1 {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Build a Python function that normalizes a given array.", "input": "array = [4, 8, 15, 23, 42]", "output": "def normalize(array):\n    min_val = min(array)\n    max_val = max(array)\n    normalized = [ (x-min_val) / (max_val-min_val) for x in array]\n  return normalized", "category": "Python"}, {"instruction": "Create a function in Ruby that takes two parameters and prints out the values as well as their sum.", "input": "num1 = 10\nnum2 = 20", "output": "def add(num1, num2)\n  puts \"The sum of #{num1} and #{num2} is #{num1 + num2}.\"\nend", "category": "Python"}, {"instruction": "Write a Java command line program to input a string and print out the reversed string.", "input": "", "output": "import java.util.Scanner;\n\npublic class ReverseString {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    System.out.print(\"Enter a string : \");\n    String inputString = scanner.nextLine();\n    String reversedString = \"\";\n\n    for(int i=inputString.length()-1; i>=0; i--) {\n      reversedString = reversedString + inputString.charAt(i);\n    }\n    System.out.println(\"The reversed string is : \" + reversedString);\n  }\n\n}", "category": "Python"}, {"instruction": "Create a C++ program to sort an array using selection sort algorithm.", "input": "[2, 7, 4, 1, 5, 3]", "output": "#include <iostream>\nusing namespace std;\n\nvoid selectionSort(int arr[], int n)\n{\n    int i, j, min_idx;\n\n    for (i = 0; i < n-1; i++)\n    {\n        min_idx = i;\n        for (j = i+1; j < n; j++)\n           if (arr[j] < arr[min_idx])\n               min_idx = j;\n\n        swap(arr[min_idx], arr[i]);\n    }\n}\n \nint main()\n{\n    int arr[] = {2, 7, 4, 1, 5, 3};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    selectionSort(arr, n);\n    cout << \"Sorted array is \\n\";\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n        \n    return 0;\n}", "category": "Python"}, {"instruction": "Convert the following SQL query into a Python pandas DataFrame.", "input": "SELECT product.name, store.location, store.country\nFROM product\nINNER JOIN store\nON product.store_id = store.store_id", "output": "import pandas as pd\n\ndf = pd.read_sql_query(\n'SELECT product.name, store.location, store.country'\n'FROM product'\n'INNER JOIN store'\n'ON product.store_id = store.store_id',\nconn\n )", "category": "Python"}, {"instruction": "Explain what a sorting algorithm is and describe one.", "input": "", "output": "A sorting algorithm is an algorithm that is used to rearrange a sequence of items so that they are in a certain order. One example of a sorting algorithm is the bubble sort. The bubble sort works by comparing two adjacent elements in the list, and swapping them if they are out of order. This process is then repeated until the list is sorted.", "category": "Python"}, {"instruction": "Extract the 3rd element from a given list", "input": "[1, 2, 3, 4, 5]", "output": "3", "category": "Python"}, {"instruction": "Write a SQL query to find the titles of movies released between the years 2000 and 2010.", "input": "", "output": "SELECT title FROM movies WHERE release_year BETWEEN 2000 AND 2010;", "category": "Python"}, {"instruction": "Create a function that returns a list of Prime numbers between 0-50.", "input": "", "output": "def prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n        if count==0:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "How to sort a list of tuples in Python?", "input": "", "output": "You can sort a list of tuples in Python by using the sorted() function. For example:\n\ntuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]\n\nsorted_list = sorted(tuple_list, key=lambda tup: tup[1])\n\nprint(sorted_list)\n\n# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]", "category": "Python"}, {"instruction": "Write a function in Python to find the sum of all even numbers between 0 and a given number.", "input": "", "output": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result", "category": "Python"}, {"instruction": "How to check if a string contains a specific character in Python?", "input": "", "output": "You can check if a string contains a specific character in Python by using the in operator. For example:\n\nmy_string = \"Hello World!\"\n\nif 'W' in my_string:\n    print(\"The string contains the character W\")", "category": "Python"}, {"instruction": "Given two integers, how to find the GCD of them in Python?", "input": "", "output": "def gcd(a, b): \n  if(b == 0): \n    return a \n  else: \n    return gcd(b, a % b)", "category": "Python"}, {"instruction": "Create a class in Python called \"Person\" and define two methods - one for getting a name, and one for saying hello.", "input": "", "output": "class Person(object):\n    def __init__(self, name):\n        self.name = name\n    \n    def getName(self):\n        return self.name\n    \n    def say_hello(self):\n        print(\"Hello, my name is %s\" % self.name)", "category": "Python"}, {"instruction": "How to select data from a Pandas DataFrame?", "input": "", "output": "Pandas DataFrames can be queried by selecting specific columns and/or rows.\n\nTo select a single column from a DataFrame, you can use the following syntax:\n\ndf['column_name']\n\nTo select multiple columns from a DataFrame, you can use the following syntax:\n\ndf[['column_1', 'column_2', 'column_3']]\n\nTo select rows from a DataFrame, you can use the following syntax:\n\ndf[(df['column_name'] == condition) & (df['column_name_2'] > condition)]", "category": "Python"}, {"instruction": "Create a HTML form containing 5 input fields - two text boxes, two radio buttons and one dropdown list.", "input": "", "output": "<form>\n  <input type=\"text\" placeholder=\"Text Input 1\">\n  <input type=\"text\" placeholder=\"Text Input 2\">\n  <input type=\"radio\" name=\"radio\" value=\"option1\">Option 1\n  <input type=\"radio\" name=\"radio\" value=\"option2\">Option 2\n  <select>\n    <option value=\"Option A\">Option A</option>\n    <option value=\"Option B\">Option B</option>\n  </select>\n</form>", "category": "Python"}, {"instruction": "Write an SQL query to select all rows from a table where a given column value is higher than 10.", "input": "Table: users", "output": "SELECT *\nFROM users\nWHERE column_name > 10;", "category": "Python"}, {"instruction": "What is the most efficient way to delete a key from a Python dictionary?", "input": "", "output": "The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary.", "category": "Python"}, {"instruction": "Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice.", "input": "inputValue = \"Hello\"", "output": "def repeatCharacters(inputValue):\n  outputValue = \"\"\n  for char in inputValue: \n    outputValue += char * 2 \n  return outputValue", "category": "Python"}, {"instruction": "How do you convert a JSON object to a string?", "input": "", "output": "The JSON.stringify() method can be used to convert a JSON object to a string. This method takes two arguments: the JSON object to be converted and an optional replacer function that can be used to alter the output.", "category": "Python"}, {"instruction": "Write a JavaScript function to greet a user, given the user's name.", "input": "name = 'John'", "output": "function greetUser(name){\n  return \"Hello, \" + name + \"!\";\n}", "category": "Python"}, {"instruction": "Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list.", "input": "intList = [1, 4, 2, 9, 3, 5, 1, 9]", "output": "def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n    maxValuesList.append(maxValue)\n  return maxValuesList", "category": "Python"}, {"instruction": "What is the best way to check whether a JavaScript string ends with a given substring?", "input": "", "output": "The best way to check if a JavaScript string ends with a given substring is to use the endsWith() method. This method will return a boolean value indicating whether the string ends with the given substring or not.", "category": "Python"}, {"instruction": "Create an algorithm that will search for a key-value pair in an object.", "input": "searchKey='c'\nobject= {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4,\n    \"e\": 5\n}", "output": "def search(searchKey, object):\n    if searchKey in object:\n        return object[searchKey]\n    else:\n        return -1", "category": "Python"}, {"instruction": "How to remove all special characters from a string?", "input": "string=\"It@#$%^&*( ) is a;?.incredible# time\"", "output": "def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "How to hide a particular div when a button is clicked?", "input": "", "output": "document.getElementById(\"div_id\").style.display=\"none\";", "category": "Python"}, {"instruction": "Write a Python script to remove duplicates from the list.", "input": "my_list = [1,2,4,4,1,2]", "output": "def remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list", "category": "Python"}, {"instruction": "Create a JSON string from the following Javascript object.", "input": "Object:{ \n  \"name\": \"john\",\n  \"age\": 25,\n  \"address\": {\n    \"city\": \"National City\",\n    \"state\": \"CA\"\n  }\n}", "output": "'{\"name\": \"john\", \"age\": 25, \"address\": {\"city\": \"National City\", \"state\": \"CA\"}}'", "category": "Python"}, {"instruction": "Find the mean of the elements in this array.", "input": "Array: [2, 3, 5, 4, 9]", "output": "The mean of the elements in this array is 4.8.", "category": "Python"}, {"instruction": "Find the index of the first occurrence of the substring \u201csea\u201d in the following string.", "input": "String: \"These are the seas\"", "output": "The index of the first occurrence of \u201csea\u201d is 8.", "category": "Python"}, {"instruction": "Create a dictionary (hash) table with the following key-value pairs:", "input": "Key1: \"a\" Value1: 1\nKey2: \"b\" Value2: 2", "output": "myDict = {\"a\": 1, \"b\": 2}", "category": "Python"}, {"instruction": "Compute the sum of the squares of all the numbers between 1 and 10 (inclusively).", "input": "", "output": "385", "category": "Python"}, {"instruction": "Write Python code to print the most frequent characters in a given string.", "input": "String: I love apples", "output": "def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]", "category": "Python"}, {"instruction": "Explain the concept of lazy loading", "input": "", "output": "Lazy loading is a design pattern which delays the loading of an object until it is needed. This optimization can improve the performance of web applications by decreasing the amount of data and code that needs to be loaded initially, and thereby reducing the application's memory footprint and startup time.", "category": "Python"}, {"instruction": "Compare the two strings and find out which one comes first alphabetically.", "input": "String1: apple\nString2: banana", "output": "apple comes first alphabetically.", "category": "Python"}, {"instruction": "Write a function to delete a node from a linked list given the pointer to the node to be deleted.", "input": "", "output": "// Given a pointer to a node, delete the node from the linked list\n// Do not return anything, changes are done in place. \nvoid deleteNode(Node *node)\n{\n    Node* temp = node;\n    Node* next = temp->next;\n    node->data = next->data;\n    node->next = next->next;\n    free(next);\n}", "category": "Python"}, {"instruction": "Write a class to define a complex number", "input": "", "output": "class ComplexNumber{ \n        double real;\n        double imaginary;\n    \n        public ComplexNumber(double real, double imaginary){\n            this.real = real;\n            this.imaginary = imaginary;\n        }\n    \n        public double getReal(){ \n            return real;\n        }\n    \n        public double getImaginary(){\n            return imaginary;\n        }\n    }", "category": "Python"}, {"instruction": "Describe a for loop for iteration of a list.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "for item in my_list:\n    # do something with the item", "category": "Python"}, {"instruction": "Write an SQL query to select all the students with a GPA greater than 3.5.", "input": "", "output": "SELECT * FROM Students WHERE GPA > 3.5;", "category": "Python"}, {"instruction": "How to check if a list contains any None value in it?", "input": "", "output": "any(x is None for x in my_list)", "category": "Python"}, {"instruction": "Create a function which takes an array of strings as an argument and return the longest string.", "input": "array =['cake', 'apple', 'orange']", "output": "def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string", "category": "Python"}, {"instruction": "How to delete all elements from a given set?", "input": "", "output": "Set.clear()", "category": "Python"}, {"instruction": "Given a binary tree, print out a post-order traversal of its nodes.", "input": "", "output": "def postorder_traverse(root):\n\n  if root == null:\n    return\n\n  postorder_traverse(root.left)\n  postorder_traverse(root.right)\n  print(root.value)", "category": "Python"}, {"instruction": "In Java, convert an integer array to a string.", "input": "[1, 2, 3, 4]", "output": "String str = Arrays.toString(arr); // [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create an SQL query to return the titles of all books written by a given author.", "input": "Author: John Doe", "output": "SELECT title FROM books WHERE author = 'John Doe';", "category": "Python"}, {"instruction": "In HTML, write a code to create an unordered list.", "input": "", "output": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>", "category": "Python"}, {"instruction": "How would you update the following code to iterate over a list of strings?", "input": "list_of_ints = [1, 2, 3, 4]\n\nfor n in list_of_ints:\n    print(n)", "output": "The following code can be updated to iterate over a list of strings by replacing `list_of_ints` with the list of strings and replacing `print(n)` with `print(str(n))` to properly format each element of the list.\n\nlist_of_strings = [\"one\", \"two\", \"three\", \"four\"]\n\nfor n in list_of_strings:\n    print(str(n))", "category": "Python"}, {"instruction": "Copy the following string without the middle word.", "input": "The quick brown fox", "output": "The quick fox", "category": "Python"}, {"instruction": "Replace the following loop with a list comprehension.", "input": "my_list = []\nfor item in range(20):\n my_lis.append(item**2)", "output": "my_list = [item**2 for item in range(20)]", "category": "Python"}, {"instruction": "Enter the variables from the equation below into Python code.", "input": "2x + 5y - 7z = 9", "output": "x = 2\ny = 5\nz = -7", "category": "Python"}, {"instruction": "How do you debug an application in Python?", "input": "", "output": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities.", "category": "Python"}, {"instruction": "How would you extract emails from a given string using regex in Python?", "input": "", "output": "import re\n\ns = 'This string contains an email address: email@example.com'\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s)", "category": "Python"}, {"instruction": "Name two database technologies used for data persistence.", "input": "", "output": "Two commonly used database technologies are relational databases (such as MySQL) and NoSQL databases (such as MongoDB).", "category": "Python"}, {"instruction": "Describe the differences between a static website and a dynamic website.", "input": "", "output": "static websites contain fixed content that is served whenever a user requests a page, while dynamic websites store content in a database and generate the page content based on user input or other variables. Static websites are faster to build and are easier to maintain, while dynamic websites can provide users with more interactive experiences.", "category": "Python"}, {"instruction": "Write a code to make an API call to a remote server.", "input": "", "output": "import requests\n\nurl = \"http://example.com/api\"\n\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Given two lists ``a`` and ``b``, calculate their difference and store the result in a list ``c``.", "input": "a = [1, 2, 3]\nb = [2, 3, 4]", "output": "c = list(set(a) - set(b))", "category": "Python"}, {"instruction": "What data structure is adopted to reflect the hierarchical structure of XML documents?", "input": "", "output": "A tree data structure is typically adopted to represent the hierarchical structure of XML documents. In this structure, each node represents an element of the document and can have any number of children or parents depending on the structure.", "category": "Python"}, {"instruction": "Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python.", "input": "print('Success!')\nelse:\nif a > b", "output": "if a > b:\n    print('Success!')\nelse:", "category": "Python"}, {"instruction": "Assign ``num = 5`` to the ``num`` variable using the Python assignment operator.", "input": "", "output": "num = 5", "category": "Python"}, {"instruction": "What type of neural network is used for language generation?", "input": "", "output": "Recurrent Neural Networks (RNNs) are commonly used for language generation. Long Short-Term Memory (LSTM) networks and Gated Recurrent Units (GRUs) are prominent examples of RNNs used for language generation.", "category": "Python"}, {"instruction": "Create a class in python with three functions, two of which must be called `add` and `subtract`.", "input": "", "output": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b", "category": "Python"}, {"instruction": "Describe the result of running this code.", "input": "obj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\nfor key in obj.keys():\n    print(key + ': ' + obj[key])", "output": "The result of running this code is that it prints each key-value pair in the object with key and value separated by a colon and a space, e.g, 'a: 1', 'b: 2', 'c: 3'.", "category": "Python"}, {"instruction": "Find the area of a circle with radius 2.", "input": "", "output": "The area of a circle with radius 2 is 12.566370614359172.", "category": "Python"}, {"instruction": "Suggest a faster way to get a sublist from a given list.", "input": "", "output": "A faster way to get a sublist from a given list is to use slicing. For example, to get the first 3 elements of a given list, the following code can be used: \n\noriginal_list = [1, 2, 3, 4, 5]\nsublist = original_list[:3]", "category": "Python"}, {"instruction": "Write a function to print a given character N times.", "input": "", "output": "def print_n_times(character, times):\n    for _ in range(times):\n        print(character, end=\"\")\n\nprint_n_times(\"*\", 5)", "category": "Python"}, {"instruction": "Write a PHP script to compare two strings and return the number of characters and words which are common in both strings", "input": "The quick brown fox jumps over the lazy dog\nThe brown fox jumps quickly", "output": "<?php \n\n$string1 = \"The quick brown fox jumps over the lazy dog\"; \n$string2 = \"The brown fox jumps quickly\"; \n\n// Create two arrays from the strings \n$arr1 = explode(\" \", $string1); \n$arr2 = explode(\" \", $string2); \n\n// Initialize a variable to store the count of common words \n$wordCount = 0; \n\n// Initialize a variable to store the count of common character \n$charCount = 0; \n\n// Iterate over the two arrays and count the common words\nfor ($i=0; $i < count($arr1); $i++) { \n\t// Compare the words at index $i of arrays \n\tfor ($j=0; $j < count($arr2); $j++) { \n\t\t\n\t\t// If the words match \n\t\tif ($arr1[$i] == $arr2[$j]) { \n\t\t\n\t\t\t// Count the words \n\t\t\t$wordCount++; \n\t\t\n\t\t\t// Iterate over the characters of words \n\t\t\tfor ($k=0; $k < strlen($arr1[$i]); $k++) { \n\t\t\n\t\t\t\t// Check the characters \n\t\t\t\tif ($arr1[$i][$k] == $arr2[$j][$k]) { \n\t\t\t\n\t\t\t\t\t// Count the characters \n\t\t\t\t\t$charCount++; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n} \n\necho \"Common words: \".$wordCount; \necho \"\\nCommon characters: \".$charCount; \n\n?>", "category": "Python"}, {"instruction": "Generate a complete javascript code that calls the fetch() API with a certain url", "input": "https://www.example.com", "output": "fetch('https://www.example.com')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log(error));", "category": "Python"}, {"instruction": "Write a MongoDB query to find which roles have Permission 2", "input": "", "output": "db.roles.find({permissions: 2})", "category": "Python"}, {"instruction": "Edit the given code to delete a node from a linked list", "input": "void deleteNode(struct node *node) \n{ \n    struct node *temp = node->next; \n    node->data = temp->data; \n    node->next = temp->next; \n    free(temp); \n}", "output": "void deleteNode(struct node *node) \n{ \n    struct node *temp = node->next; \n    node->data = temp->data; \n\n    // Store pointer to the next of node \n    struct node *next_next = temp->next; \n\n    // Unlink node from linked list \n    free(temp); \n\n    node->next = next_next; \n}", "category": "Python"}, {"instruction": "Without using any built-in functions, generate a Python code to remove the duplicated elements in a list", "input": "", "output": "def remove_duplicates(l): \n    res = [] \n    for i in l: \n        if i not in res: \n            res.append(i) \n    return res", "category": "Python"}, {"instruction": "Write a sql statement to retrieve the average salary of all employees", "input": "", "output": "SELECT AVG(salary) FROM employees", "category": "Python"}, {"instruction": "Write a Python program to shuffle the items of a given list in random order.", "input": "list_elements = [1, 2, 3, 4, 5]", "output": "from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements", "category": "Python"}, {"instruction": "Identify which elements in an array are even numbers.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def is_even_num(nums):\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "category": "Python"}, {"instruction": "Suggest a Python code for printing the sum, minimum and maximum of a given list.", "input": "list_elements = [1, 2, 4, 6, 8, 9]", "output": "def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))", "category": "Python"}, {"instruction": "Write a Python program to convert an integer to a Roman numeral.", "input": "number = 2019", "output": "def to_roman(num):\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]", "category": "Python"}, {"instruction": "Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them.", "input": "start_range = 2\nend_range = 10", "output": "def get_odds(start_range, end_range):\n    return [num for num in range(start_range, end_range+1) if num % 2 != 0]", "category": "Python"}, {"instruction": "Suggest a Python program to execute a given block of code a specified number of times.", "input": "execute_n_times(5, print(\"Hello World!\"))", "output": "def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code)", "category": "Python"}, {"instruction": "Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}]", "output": "def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    return new_list", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value.", "input": "words = ['apple', 'banana', 'cat']", "output": "def string_lengths(words):\n    return {word:len(word) for word in words}", "category": "Python"}, {"instruction": "Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}]", "output": "def sort_by_age(original_list):\n    Return sorted(original_list, key = lambda i: i['age'])", "category": "Python"}, {"instruction": "Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * z", "input": "x=4\ny=3\nz=2", "output": "def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24", "category": "Python"}, {"instruction": "Write a Python program to compare two given lists and return True if their contents are the same.", "input": "list1 = [1, 3, 8, 9]\nlist2 = [1, 3, 8, 9]", "output": "def compare_lists(list1, list2):\n    return list1 == list2", "category": "Python"}, {"instruction": "Given a list of numbers, sort them in increasing order.", "input": "nums = [2, 3, 1, 4, 5]", "output": "def sort_numbers(nums):\n    return sorted(nums)", "category": "Python"}, {"instruction": "How can you find the severity of a given error?", "input": "", "output": "Error severity can be found by looking at the error code or message provided. The higher the code or the more detailed the message, the more severe the error is. In addition, if the error message indicates the impact of the error on the system or application, it can be used to measure the severity of the error.", "category": "Python"}, {"instruction": "How can you change the given string 'Hello World' to 'World Hello'?", "input": "", "output": "string = \"Hello World\"\nstring = string.split()\nstring = string[1] + ' ' + string[0]\nprint(string) # World Hello", "category": "Python"}, {"instruction": "Reverse the following Scala list: ``List(1, 2, 3, 4)``", "input": "", "output": "List(4, 3, 2, 1)", "category": "Python"}, {"instruction": "Write a CSS code snippet to give all paragraphs a font size of 16px.", "input": "", "output": "p {\n  font-size: 16px;\n}", "category": "Python"}, {"instruction": "Write a SQL query to delete all entries that has a value of \"NULL\" in the field \"name\".", "input": "", "output": "DELETE FROM table_name \n WHERE name IS NULL;", "category": "Python"}, {"instruction": "Write a C++ program to read and print an array of integers.", "input": "[5, 10, 20, 25]", "output": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {5, 10, 20, 25};\n    int n = sizeof(arr)/sizeof(arr[0]);\n   \n    cout << \"The array elements are: \"; \n    for (int i=0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0;\n}\n\n// Output\nThe array elements are: 5 10 20 25", "category": "Python"}, {"instruction": "Construct an HTML page to display a table with 10 rows, 5 columns, and a header row.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Table Example</title>\n</head>\n<body>\n  <table>\n    <thead>\n      <tr>\n        <th>Header 1</th>\n        <th>Header 2</th>\n        <th>Header 3</th>\n        <th>Header 4</th>\n        <th>Header 5</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n        <td>Cell 5</td>\n      </tr>\n      <tr>\n        <td>Cell 6</td>\n        <td>Cell 7</td>\n        <td>Cell 8</td>\n        <td>Cell 9</td>\n        <td>Cell 10</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to calculate the sum of the values in \"quantity\" field for all entries in the \"products\" table.", "input": "", "output": "SELECT SUM(quantity) FROM products;", "category": "Python"}, {"instruction": "Use PHP to create an associative array from the following JSON object.", "input": "{\"name\": \"John\", \"age\": 35, \"location\": \"New York\"}", "output": "$json_object = '{\"name\": \"John\", \"age\": 35, \"location\": \"New York\"}';\n$arr = json_decode($json_object, true);\nprint_r($arr);\n\n// Output\nArray\n(\n    [name] => John\n    [age] => 35\n    [location] => New York\n)", "category": "Python"}, {"instruction": "Rewrite the following Java loop as a compact list comprehension.", "input": "int[] array = {1, 2, 3, 4, 5};\nint[] array2 = new int[array.length];\nfor(int i=0; i<array.length; i++) {\n array2[i] = array[i] + 1;\n}", "output": "int[] array = {1, 2, 3, 4, 5};\nint[] array2 = Arrays.stream(array).map(x -> x + 1).toArray();", "category": "Python"}, {"instruction": "Compare and contrast the two most popular NoSQL databases - MongoDB and Redis.", "input": "", "output": "MongoDB and Redis are two of the most popular NoSQL databases. MongoDB is a document-oriented database, while Redis is an open-source in-memory data structure store. MongoDB is known for its scalability and flexible query language whereas Redis is best-suited for caching and real-time applications. MongoDB is best for storing structured, semi-structured and unstructured data, and Redis is used primarily for rapid data manipulation and retrieval of data stored in the key-value store. MongoDB offers an ACID (Atomicity, Consistency, Isolation, and Durability) compliant system with multi-document transactions, while Redis primarily has single-document atomic operations. MongoDB is best for structured or semi-structured data, while Redis is best for caching and real-time applications that require fast data access.", "category": "Python"}, {"instruction": "Create an artificial neural network in PyTorch to predict the next word in a sentence.", "input": "", "output": "import torch \nimport torch.nn as nn \n\nclass ANN(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embedding_dim) \n        self.fc1 = nn.Linear(embedding_dim, hidden_dim) \n        self.fc2 = nn.Linear(hidden_dim, vocab_size)\n    \n    def forward(self, x):\n        embedded = self.embedding(x) \n        out = self.fc1(embedded)\n        out = self.fc2(out) \n        return out", "category": "Python"}, {"instruction": "Given HTML code, write a css selector to select all list items.", "input": "<html>\n<body>\n  <ul>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n  </ul>\n</body>\n</html>", "output": "li", "category": "Python"}, {"instruction": "Create a python script that connects to a database and outputs the average age of users.", "input": "", "output": "import pandas as pd \nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n\n# Calculate average \navg_age = df.mean()\n\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)", "category": "Python"}, {"instruction": "Create a GUI interface for a multiplayer card game using PyQt5.", "input": "", "output": "import sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())", "category": "Python"}, {"instruction": "Given a string, reverse the order of words and then print the string.", "input": "Hello World", "output": "World Hello\n\n#!/bin/bash\necho $(echo $1 | awk '{for (i=NF; i!=0; i--) {printf (\"%s \",$i)}; print \"\"}')", "category": "Python"}, {"instruction": "Write a shell script that prints out the directory this command was run from.", "input": "", "output": "#!/bin/bash\nDIR=$(cd $(dirname \"$1\") && pwd -P)\necho $DIR", "category": "Python"}, {"instruction": "Write a Perl program to generate Fibonacci series.", "input": "", "output": "#include <stdio.h> \n  \nint main() \n{ \n    int n, first = 0, second = 1, next; \n  \n    printf(\"Enter the number of terms \\n\"); \n    scanf(\"%d\", &n); \n  \n    printf(\"First %d terms of Fibonacci series are :\\n\", n); \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        if (i <= 1) \n            next = i; \n        else { \n            next = first + second; \n            first = second; \n            second = next; \n        } \n        printf(\"%d\\n\", next); \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a MongoDB query to find all documents in a collection whose field \"date\" has a value of today.", "input": "", "output": "db.collection.find({ date: new Date().toISOString().split('T')[0] })", "category": "Python"}, {"instruction": "Edit the following program to output a list of the numbers that are divisible by 3", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nresult = []\nfor num in numbers:\n    if num % 3 == 0:\n        result.append(num)\n\nprint(result)", "category": "Python"}, {"instruction": "Identify the variables and operators in the following Java code.", "input": "int a = 3 + 4;\nint b = a * 2;", "output": "Variables:\na, b\n\nOperators:\n+, *", "category": "Python"}, {"instruction": "Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed.", "input": "", "output": "class Vehicle:\n    def __init__(self, type, make, model, year, speed):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed", "category": "Python"}, {"instruction": "Design a function to get the user input and print the maximum among them.", "input": "", "output": "def getMaxNumber():\n    numbers = []\n    \n    num = int(input(\"Enter how many numbers: \"))\n    \n    for i in range(num):\n        numbers.append(int(input(\"Enter a number: \")))\n        \n    maxNum = max(numbers)\n    print(\"The maximum number is\", maxNum)", "category": "Python"}, {"instruction": "How many continuous substrings are there in the string \"Geeks\"?", "input": "", "output": "15", "category": "Python"}, {"instruction": "Given a matrix, output the sum of all elements in the matrix.", "input": "[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]", "output": "45", "category": "Python"}, {"instruction": "Generate a list of unique numbers between 10 and 50.", "input": "", "output": "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]", "category": "Python"}, {"instruction": "Write a code to find the sum of values present in two dimensional array", "input": "arr = [[1,2], [3,4], [5,6]]", "output": "def sum_two_dimensional_array(arr):\n    total = 0\n    for sublist in arr:\n        for i in sublist:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a function to find all anagrams of a given word.", "input": "word = \"abbac\"", "output": "def anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            for j in anagrams(word[:i]+word[i+1:]):\n                anagrams_list.append(letter+j)\n        return anagrams_list", "category": "Python"}, {"instruction": "Write a code to convert an input string of numbers to an integer.", "input": "input_str = '1234'", "output": "def str_to_int(input_str):\n    num = 0\n    for i in input_str:\n        num = num * 10 + (ord(i) - ord('0')) \n    return num", "category": "Python"}, {"instruction": "List all properties of a JavaScript object called ``person``.", "input": "", "output": "The properties of the person object include name, age, height, weight, gender, race, and occupation.", "category": "Python"}, {"instruction": "Create a function to return the count of even numbers in a list", "input": "list_num = [4, 5, 6, 7, 8]", "output": "def count_even_numbers(list_num):\n    count = 0\n    for i in list_num:\n        if (i % 2 == 0):\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Modify the following code so that it prints the Fibonacci numbers up to the given number", "input": "x = 10", "output": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res", "category": "Python"}, {"instruction": "Write a SQL query to find all students who have a GPA greater than 3.0", "input": "", "output": "SELECT * \nFROM students \nWHERE GPA > 3.0", "category": "Python"}, {"instruction": "Using the comment as a guide, write a nested loop to iterate over all elements of a multi-dimensional array", "input": "[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "for i in range(len(array)):\n    for j in range(len(array[i])):\n        print(array[i][j])", "category": "Python"}, {"instruction": "Replace the placeholder in the sentence below with the appropriate method", "input": "Use the __________ function to convert the string to lowercase.", "output": "Use the lower() function to convert the string to lowercase.", "category": "Python"}, {"instruction": "Devise a recursive solution to the problem.", "input": "Find the sum of all numbers from 1 to N", "output": "def sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_recursive(n-1)", "category": "Python"}, {"instruction": "Name four of the main components of a basic HTML page.", "input": "", "output": "The four main components of a basic HTML page are: the <html> element, the <head> element, the <title> element, and the <body> element.", "category": "Python"}, {"instruction": "How do you create a new list in Python from a given list that contains the square of each element?", "input": "", "output": "The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]", "category": "Python"}, {"instruction": "Design a program to search a list for a specified item", "input": "", "output": "def search_list(array, item):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Determine the data type of the following string.", "input": "a = \"#@$ What's up? %^&$$*&\"", "output": "string", "category": "Python"}, {"instruction": "Use a nested loop to print the output.", "input": "", "output": "for i in range(3):\n    for j in range(3):\n        print('*', end=' ')\n    print()", "category": "Python"}, {"instruction": "Create a list of integers from 16 to 34.", "input": "", "output": "[16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]", "category": "Python"}, {"instruction": "Generate a Python program to calculate the total number of vowels in a given string.", "input": "string = \"Today is a beautiful day\"", "output": "def calculate_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n    \n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(calculate_vowels(\"Today is a beautiful day\"))", "category": "Python"}, {"instruction": "Create a function to input a number and prints out its prime factorization", "input": "24", "output": "def prime_factors(num):\n    factors = list()\n    x = 2\n    while x * x <= num:\n        while num % x == 0:\n            factors.append(x)\n            num /= x\n        x += 1\n    if num > 1:\n        factors.append(num)\n    return factors\n\nprint(prime_factors(24))", "category": "Python"}, {"instruction": "code a Python script that converts temperatures in celsius to fahrenheit.", "input": "", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32", "category": "Python"}, {"instruction": "Develop a python program to sort a list of strings alphabetically from a-z.", "input": "list1 = [\"cat\", \"apple\", \"banana\", \"dog\"]", "output": "def sort_alphabetically(list1):\n    list1.sort()\n    return list1\n\nprint(sort_alphabetically(list1))", "category": "Python"}, {"instruction": "write a piece of code to print out the first n Fibonacci numbers in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))", "category": "Python"}, {"instruction": "Create a function to input a string from the user and return its reversed version.", "input": "", "output": "def reverse_string(string):\n    return string[::-1]", "category": "Python"}, {"instruction": "Make a program to find the sum of each row in a two-dimensional array.", "input": "[[1,2,3], [2,3,4]]", "output": "def row_sum(arr):\n    total_sum = 0\n    for row in arr:\n        total_sum += sum(row)\n    return total_sum", "category": "Python"}, {"instruction": "Combine the following two lists into a dictionary in Python.", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict1 = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}", "category": "Python"}, {"instruction": "Create a recursive Python function to generate the Fibonacci series up to n-th terms.", "input": "", "output": "\"\"\"\nCreate a recursive Python function to generate the Fibonacci series up to n-th terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    print(fibonacci(5))  # 5", "category": "Python"}, {"instruction": "Create a function that takes two numbers and returns their greatest common divisor in Python.", "input": "", "output": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5", "category": "Python"}, {"instruction": "Write an if-else condition to check for vowel or consonants in a character in Python.", "input": "", "output": "\"\"\"\nWrite an if-else condition to check for vowel or consonants in a character in Python.\n\"\"\"\n\ndef is_vowel_or_consonant(letter):\n    vowels = \"aeiouAEIOU\"\n    if letter in vowels:\n        return \"Vowel\"\n    else:\n        return \"Consonant\"\n\nif __name__ == '__main__':\n    print(is_vowel_or_consonant(\"a\"))  # Vowel", "category": "Python"}, {"instruction": "Replace all words with 4 letters or more with \"*****\" in the following text.", "input": "This is an example of text.", "output": "This is an ***** of *****.", "category": "Python"}, {"instruction": "Find the second largest number in the following array of integers.", "input": "[1, 6, 4, 8, 7]", "output": "7", "category": "Python"}, {"instruction": "Create an SQL query to return the customer name and total amount spent on all orders in the past week.", "input": "", "output": "SELECT customer_name, SUM(amount) AS total_spent\nFROM orders\nWHERE order_date > DATE_SUB(NOW(), INTERVAL 1 WEEK)\nGROUP BY customer_name;", "category": "Python"}, {"instruction": "Write a Python program to select all rows from a table named 'products' that have a price less than 10", "input": "", "output": "SELECT * FROM products WHERE price < 10;", "category": "Python"}, {"instruction": "Code a script that prints out the first n elements of the Fibonacci sequence.", "input": "n = 8", "output": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))", "category": "Python"}, {"instruction": "Create a program to convert a binary number to its decimal equivalent.", "input": "", "output": "def binary_to_decimal(number):\n    result = 0\n    power = 0\n    for digit in str(number)[::-1]:\n        if digit == '1':\n            result += 2 ** power\n        power += 1\n    return result", "category": "Python"}, {"instruction": "Create a function to accept an array of integers and return an array with the corresponding squares of each element.", "input": "arr = [1, 2, 3, 4]", "output": "def array_sqr(arr):\n    return [x*x for x in arr]\n\nprint(array_sqr(arr))", "category": "Python"}, {"instruction": "Suggest a Pandas DataFrame command to remove element duplicates from a given dataframe.", "input": "", "output": "df.drop_duplicates()", "category": "Python"}, {"instruction": "Create a K Nearest Neighbor (KNN) classifier in R.", "input": "", "output": "# Load the Libraries\nlibrary(class)\nlibrary(kknn)\n\n# creating a training data set\ndf <- data.frame(feature1=c(2,3,4,5,6),\n                 feature2=c(3.1, 4.1, 5.1, 6.1, 5.9), \n                 outcome=c(\"yes\",\"yes\",\"no\",\"no\",\"yes\"))\n\n# set the predictor and outcome variables \nX <- as.matrix(df[, 1:2])\ny <- df[,3]\n\n# Build k-Nearest Neighbors Model \nmodel <- kknn(outcome~., data=df, k=5)\n\n# Predict the response variable\npred <- predict(model, X)\n\n# get the accuracy of the model \naccuracy <- mean(y == pred) * 100\n\n# Print accuracy \nprint(accuracy)", "category": "Python"}, {"instruction": "Sort a given list of numbers from smallest to largest with Python.", "input": "[12,3,7,9,1]", "output": "myList = [12,3,7,9,1] \nmyList.sort() \nprint(myList) \n# Prints [1,3,7,9,12]", "category": "Python"}, {"instruction": "Generate a valid C++ code to reverse an array.", "input": "", "output": "void reverseArray(int arr[], int n) {\n    int start = 0;\n    int end = n-1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}", "category": "Python"}, {"instruction": "Suggest a valid CSS rule for the following HTML element:", "input": "<div class=\"main\">", "output": ".main {\n  display: block;\n}", "category": "Python"}, {"instruction": "Create a web page with two text fields for username and password.", "input": "", "output": "<html>\n  <head>\n    <title>Login</title>\n  </head>\n  <body>\n    <h1>Login</h1>\n    <form action=\"\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" name=\"username\" id=\"username\" />\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" name=\"password\" id=\"password\" />\n      <input type=\"submit\" value=\"Login\" />\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to filter books published after 2002 and before 2008.", "input": "", "output": "SELECT * FROM Books WHERE publish_date > '2002-01-01' AND publish_date < '2008-01-01';", "category": "Python"}, {"instruction": "Create a SQL query that fetches all customers from a table named 'customers' whose name starts with 'John'", "input": "", "output": "SELECT * FROM customers WHERE name LIKE 'John%';", "category": "Python"}, {"instruction": "Create a class in Python to represent a car and include methods to set and get the car's color, model, and year.", "input": "", "output": "class Car:\n    def __init__(self, model, year, color):\n        self.model = model\n        self.year = year\n        self.color = color\n\n    def set_color(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_model(self, model):\n        self.model = model\n\n    def get_model(self):\n        return self.model\n\n    def set_year(self, year):\n        self.year = year\n\n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Create a bash script to print the name of the directory the script was started from.", "input": "", "output": "#!/bin/bash\necho $(pwd)", "category": "Python"}, {"instruction": "Design a class in Java to represent a rectangle and include methods to calculate and return its perimeter and area.", "input": "", "output": "public class Rectangle {\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int getPerimeter() {\n        return 2 * (width + height);\n    }\n\n    public int getArea() {\n        return width * height;\n    }\n}", "category": "Python"}, {"instruction": "Create a website for the company ACME with all the following pages: Home, About Us, Contact Us, FAQ and Privacy Policy.", "input": "", "output": "<html>\n\n  <head>\n    <title>ACME</title>\n  </head>\n\n  <body>\n    <header>\n      <h1>ACME</h1>\n    </header>\n\n    <nav>\n      <ul>\n        <li><a href=\"index.html\">Home</a></li>\n        <li><a href=\"about.html\">About Us</a></li>\n        <li><a href=\"contact.html\">Contact Us</a></li>\n        <li><a href=\"faq.html\">FAQ</a></li>\n        <li><a href=\"privacy-policy.html\">Privacy Policy</a></li>\n      </ul>\n    </nav>\n  </body>\n\n</html>", "category": "Python"}, {"instruction": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.", "input": "The bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000", "output": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)", "category": "Python"}, {"instruction": "Provide an appropriate regular expression for checking if a given string contains only numbers", "input": "", "output": "^[0-9]+$", "category": "Python"}, {"instruction": "Modify the following Java code snippet to include an \"else if\" statement.", "input": "int val=20;\nif (val > 15)\n    System.out.println(\"val is greater than 15\");", "output": "int val=20;\nif (val > 15)\n    System.out.println(\"val is greater than 15\");\nelse if (val == 15)\n    System.out.println(\"val is equal to 15\");", "category": "Python"}, {"instruction": "Suggest an appropriate way to select the last element of a given list in Python.", "input": "", "output": "list[-1]", "category": "Python"}, {"instruction": "Generate a valid Java code for a for loop to count from 5 to 10.", "input": "", "output": "for(int i=5; i<=10; i++) {\n    System.out.println(i);\n}", "category": "Python"}, {"instruction": "Replace all vowels in a given string with the character \"X\" in C++.", "input": "\"Hello World!\"", "output": "#include<iostream>\n#include<string>\n\nusing namespace std; \n \nint main() \n{ \n    string s = \"Hello World!\"; \n    for (int i=0; s[i]!='\\0'; i++) \n    { \n        if (s[i] == 'A' || s[i] == 'a' \n            || s[i] == 'E' || s[i] == 'e' \n            || s[i] == 'I' || s[i] == 'i' \n            || s[i] == 'O' || s[i] == 'o' \n            || s[i] == 'U' || s[i] == 'u') \n            s[i] = 'X'; \n    }\n    cout << s;\n    return 0; \n}", "category": "Python"}, {"instruction": "Create a program that converts a string to a URL friendly slug", "input": "string = \"My Page Title\"", "output": "def create_slug(string):\n    slug = string.replace(\" \", \"-\").lower()\n    return slug\n\ncreate_slug(\"My Page Title\") // \"my-page-title\"", "category": "Python"}, {"instruction": "Create a Javascript function that will", "input": "add two strings", "output": "function addStrings(str1,str2) { \n    return str1 + str2; \n} \n\naddStrings(\"hello\", \"world\") // \"helloworld\"", "category": "Python"}, {"instruction": "Generate a C program to generate a multiplication table up to a given number.", "input": "n = 10", "output": "#include <stdio.h> \n  \nint main() \n{ \n    int i, j, n; \n  \n    printf(\"Enter the value of n: \"); \n    scanf(\"%d\", &n); \n  \n    for (i = 1; i <= n; i++) { \n        for (j = 1; j <= 10; j++) \n            printf(\"%d * %d = %d\\n\", i, j, i * j); \n        printf(\"\\n\"); \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a Lambda function to filter out the even numbers", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "const evenNumbers = arr => arr.filter(num => num % 2 == 0);\n\nconsole.log(evenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "category": "Python"}, {"instruction": "What is the output from this snippet of JavaScript code?", "input": "var a = 5;\nvar b = 10;\na = b;\nconsole.log(a, b);", "output": "The output of this code is 10 10 as 'a' is set to the value of 'b'.", "category": "Python"}, {"instruction": "Write a query to find the number of students enrolled in each class each semester.", "input": "Table Name: enroll\nFields: enroll_id, student_id, class_id, semester", "output": "SELECT class_id, semester, COUNT(student_id)\nFROM enroll\nGROUP BY class_id, semester;", "category": "Python"}, {"instruction": "Develop a program to find all pairs in a list that sum up to a given number", "input": "[1, 2, 4, 5, 6, 7], 8", "output": "def pair_sum(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\n# Driver code \narr = [1, 2, 4, 5, 6, 7] \nk = 8\n\npair_sums = pair_sum(arr, k) \nprint(pair_sums)", "category": "Python"}, {"instruction": "Edit the following program to improve its execution speed", "input": "#include <iostream> \n  \nint n = 100; \n  \nvoid foo(int n) \n{ \n    for (int i = 0; i < n; i++) \n        std::cout << i << \"\\n\"; \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}", "output": "#include <iostream> \n  \nint n = 100; \n \nvoid foo(int n) \n{ \n    int chunk_size = 5;\n    for (int i = 0; i < n; i+=chunk_size) {\n        for (int j = i; j < i + chunk_size; j++) \n            std::cout << j << \"\\n\"; \n    } \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum number of overlapping intervals.", "input": "[[2, 3], [1, 5], [7, 10]]", "output": "def maxOverlaps(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n    return maximum_overlaps", "category": "Python"}, {"instruction": "Print all the odd numbers between a given range in Python.", "input": "start = 5 \nend = 20", "output": "start = 5\nend = 20\n\nfor num in range(start, end+1): \n    if num % 2 != 0: \n        print(num, end = ' ')\n\n# Outputs 5 7 9 11 13 15 17 19", "category": "Python"}, {"instruction": "Create a program in Java that takes in 2 numbers and swaps them.", "input": "int a = 5\nint b = 3", "output": "int a = 5;\nint b = 3;\n\nint temp = a;\na = b;\nb = temp;\n\nSystem.out.println(\"a is: \" + a); // Outputs 3\nSystem.out.println(\"b is: \" + b); // Outputs 5", "category": "Python"}, {"instruction": "Generate an HTML list from a given array in JavaScript.", "input": "var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]", "output": "var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nvar html = \"<ul>\";\nfor(var i = 0; i < days.length; i++) {\n  html += \"<li>\" + days[i] + \"</li>\";\n}\nhtml += \"</ul>\";\n\ndocument.write(html);", "category": "Python"}, {"instruction": "Print out the Fibonacci sequence up to 25 in Java.", "input": "", "output": "int limit = 25;\nint[] fib = new int[25];\n\nfib[0] = 0;\nfib[1] = 1;\n\nfor (int i = 2; i < limit; i++){\n fib[i] = fib[i - 1] + fib[i - 2];\n}\n\nfor (int i = 0; i < limit; i++){\n System.out.println(fib[i]);\n}", "category": "Python"}, {"instruction": "Create a program in JavaScript that can detect a palindrome.", "input": "var str = \"racecar\"", "output": "var str = \"racecar\";\n\nfunction isPalindrome(str) {\n  return str == str.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome(str)); // Outputs true", "category": "Python"}, {"instruction": "Write a code snippet in Javascript to print out the alphabetical characters in a string.", "input": "var myString = \"Taichi Tamura\"", "output": "var myString = \"Taichi Tamura\";\n\nvar letters = \"\";\nfor (var i=0; i < myString.length; i++) {\n  var currentLetter = myString[i];\n  if (currentLetter.match(/[a-zA-Z]/)) {\n    letters += currentLetter;\n  }\n}\n\nconsole.log(letters); // Outputs \"TaichiTamura\"", "category": "Python"}, {"instruction": "Delete the last element from the given list.", "input": "[4, 8, 15, 16, 23, 42]", "output": "my_list = [4, 8, 15, 16, 23, 42]\ndel my_list[-1]\nprint(my_list) # prints [4, 8, 15, 16, 23]", "category": "Python"}, {"instruction": "Write a validation code to verify if a given string is an integer.", "input": "", "output": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Create a variable in Java for storing a user's first name.", "input": "", "output": "String firstName;", "category": "Python"}, {"instruction": "Create an array variable in JavaScript for storing song names.", "input": "", "output": "let songNames = [];", "category": "Python"}, {"instruction": "What is the correct code for looping through a list of elements in Python?", "input": "", "output": "for element in list:\n    print(element)", "category": "Python"}, {"instruction": "Change the font size of a <div> element using CSS.", "input": "<div>This is a div element</div>", "output": "<div style=\"font-size: 20px;\">This is a div element</div>", "category": "Python"}, {"instruction": "Convert a number in base 10 to binary", "input": "num = 5", "output": "def base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num % 2\n        binary_num = str(remainder) + binary_num\n        num = num // 2\n    return binary_num\n\nbase10_to_binary(5)  # '101'", "category": "Python"}, {"instruction": "Design an algorithm to search for the longest string in a list.", "input": "list = [\"apples\", \"bananas\", \"kiwis\"]", "output": "def find_longest_string(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n    return max_string", "category": "Python"}, {"instruction": "Build an algorithm to compare two strings and report whether they are identical or not.", "input": "string1 = \"hello\";\nstring2 = \"world\";", "output": "function compareStrings(string1, string2) {\n    if (string1 === string2) {\n        return \"the strings are identical\"\n    } else {\n        return \"the strings are not identical\"\n    }\n}", "category": "Python"}, {"instruction": "Write a function in JavaScript to perform the following operation:", "input": "Add two numbers a and b", "output": "function sum(a, b) {\n return a + b;\n}", "category": "Python"}, {"instruction": "Modify the code in the following snippet to include a try/catch block.", "input": "function getStringLength() {\n    let string = prompt(\"Please enter a string\");\n    let length = string.length;\n    console.log(length);\n}", "output": "function getStringLength() {\n    try {\n        let string = prompt(\"Please enter a string\");\n        let length = string.length;\n        console.log(length);\n    } catch (error) {\n        console.log('ERROR: ', error);\n    }\n}", "category": "Python"}, {"instruction": "Write a C++ program that calculates the area of a circle given the radius.", "input": "", "output": "#include <iostream> \n#include <cmath>\n \nint main() \n{ \n    float radius; \n    float area; \n\n    std::cout << \"Enter the radius of the circle: \"; \n    std::cin >> radius;\n\n    area = 3.14159 * pow(radius, 2); \n  \n    std::cout << \"Area of the circle: \" << area; \n    return 0; \n}", "category": "Python"}, {"instruction": "Write an SQL query that counts the number of rows in a table named 'employees'.", "input": "", "output": "SELECT COUNT(*) FROM employees;", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum depth of nested dictionary", "input": "dict = {\u2018a\u2019:{\u2018b\u2019:{\u2018c\u2019:1}}, \u2018d\u2019:2}", "output": "def findMaxDepth(dict_):\n   max_depth = 1\n   for val in dict_.values():\n      if isinstance(val, dict):\n         max_depth = max(max_depth, 1 + findMaxDepth(val))\n   return max_depth\n\nfindMaxDepth(dict) // 3", "category": "Python"}, {"instruction": "Create an object in JavaScript representing a pet dog.", "input": "", "output": "let pet = {\n    name: 'Max',\n    species: 'Dog',\n    age: '3',\n    healthStatus: 'healthy'\n};", "category": "Python"}, {"instruction": "Edit the following code to produce a 3x3 multiplication table for the numbers 4 to 6.", "input": "for(int i = 1, j = 4; i < 8; i += 2, j++)\n    System.out.print(i + \" \u00d7 \" + j + \" = \" + i * j + \" \");", "output": "for(int i = 4; i<7; i++){\n    for(int j = 1; j<=3; j++){\n        System.out.print(i + \" \u00d7 \" + j + \" = \" + i * j + \" \");\n    }\n    System.out.println(\"\");\n}", "category": "Python"}, {"instruction": "Write a CSS rule to display a paragraph in italic font.", "input": "<p>This is a paragraph</p>", "output": "p {\n    font-style: italic;\n}", "category": "Python"}, {"instruction": "What is the JavaScript command to place the cursor at the end of a text field?", "input": "", "output": "element.focus();\nelement.setSelectionRange(element.value.length, element.value.length);", "category": "Python"}, {"instruction": "Create a hash table in C with 5 elements.", "input": "", "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct HashTable {\n    int key;\n    int value;\n} h[5];\n\nvoid main()\n{\n    for (int i = 0; i < 5; i++) {\n        h[i].key = i;\n        h[i].value = i * i;\n    }\n \n    for (int i = 0; i < 5 ; i++)\n        printf(\"%d  %d\\n\", h[i].key,  h[i].value);\n}", "category": "Python"}, {"instruction": "Modify the following code to add an element 'item7' to a JSON array.", "input": "{\n    \"items\": [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\"]\n}", "output": "{\n    \"items\": [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\"]\n}", "category": "Python"}, {"instruction": "Create a regex pattern for extracting emails from a text.", "input": "", "output": "([a-zA-Z0\u20139_.+-]+@[a-zA-Z0\u20139-]+\\.[a-zA-Z0\u20139-.]+)", "category": "Python"}, {"instruction": "Determine the largest number in a list of integers using C.", "input": "int list[] = {3, -2, 0, 7, 1};", "output": "int max = list[0];\n\nfor (int i = 1; i < (sizeof(list) / sizeof(list[0])); i++) {\n   if (list[i] > max)\n      max = list[i];\n}\n\nprintf(\"Maximum number in given array is: %d\", max);", "category": "Python"}, {"instruction": "Find all vowels in a sentence using Python.", "input": "sentence = \"This is a sample sentence.\"", "output": "vowels = []\nfor c in sentence:\n    if c in ('a', 'e', 'i', 'o', 'u'):\n        vowels.append(c)\n\nprint(vowels)", "category": "Python"}, {"instruction": "Retrieve the data of the third item from the given list.", "input": "[{\"name\":\"Mary\",\"age\":27,\"city\":\"NY\"},{\"name\":\"David\",\"age\":35,\"city\":\"LA\"},{\"name\":\"John\",\"age\":22,\"city\":\"Uk\"}]", "output": "data_list = [{\"name\":\"Mary\",\"age\":27,\"city\":\"NY\"},{\"name\":\"David\",\"age\":35,\"city\":\"LA\"},{\"name\":\"John\",\"age\":22,\"city\":\"Uk\"}]\n\nthird_item = data_list[2]\nprint(third_item) # prints {\"name\":\"John\",\"age\":22,\"city\":\"Uk\"}", "category": "Python"}, {"instruction": "Use a regular expression to replace URLs with \"URL\" in a given text in Python.", "input": "This is a text with a link http://example.com", "output": "import re\n\ntext = \"This is a text with a link http://example.com\"\ntext = re.sub(r'http\\S+', 'URL', text)\nprint(text)\n# Prints: This is a text with a link URL", "category": "Python"}, {"instruction": "Select all elements with the class \u201cactive\u201d in JavaScript.", "input": "", "output": "const activeElements = document.querySelectorAll(\".active\");\nconsole.log(activeElements);", "category": "Python"}, {"instruction": "Explain what overfitting is, in the context of machine learning.", "input": "", "output": "Overfitting is a phenomenon in which a machine learning model performs better on training data than on new data. This occurs when a model is excessively complex and able to learn the underlying noise of the training data. As a result, the model doesn\u2019t generalize well on previously unseen data and does not perform as expected. Overfitting is typically the result of the model having too many features or parameters relative to the amount of training data available.", "category": "Python"}, {"instruction": "Create a method that takes an array as input and outputs a Boolean indicating if the sum of the numbers in the array is divisible by 5.", "input": "[3,7,8]", "output": "def divisibleByFive(arr): \n  return (sum(arr) % 5 == 0)", "category": "Python"}, {"instruction": "Given an integer n, write a Python program to print a pattern.", "input": "n = 5", "output": "for i in range(1, n+1): \n  for j in range(1,i+1): \n    print(\"* \", end=\"\")  \n  print(\"\\r\")", "category": "Python"}, {"instruction": "Write a SQL query that returns the average salary of each department.", "input": "Table Name: employees", "output": "SELECT department, AVG(salary) AS Average_Salary \nFROM Employees \nGROUP BY Department;", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array of numbers and a function as arguments and returns an array with the same numbers as the input, but sorted in ascending order.", "input": "[2, 4, 3, 1]", "output": "function sortArrayAsc(arr, func) { \n    return arr.sort(func); \n} \n\nfunction compareNumbers(a, b) { \n    return a - b; \n}", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of strings with the same character.", "input": "string=\"This is a test.\"", "output": "[x for x in string if x == 't']", "category": "Python"}, {"instruction": "Explain the purpose of principal component analysis.", "input": "", "output": "Principal Component Analysis (PCA) is a method of dimensionality reduction used to reduce the number of variables in large datasets. It works by transforming a set of correlated variables into a new set of uncorrelated variables, called principal components. The principal components represent the most relevant information in the data, while also reducing the complexity of the data. By using these components as variables in analysis, it helps to visualize and interpret the data more easily.", "category": "Python"}, {"instruction": "Write a SQL query to count the total number of customers who haven't placed an order yet.", "input": "Table Name: customers", "output": "SELECT COUNT(*)\nFROM customers\nWHERE id NOT IN (SELECT customer_id FROM orders);", "category": "Python"}, {"instruction": "Create a method that given an array as input, outputs the quantity of odd numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def countOdds(arr): \n    return len([x for x in arr if x % 2 != 0])", "category": "Python"}, {"instruction": "Determine the two largest numbers in a given list.", "input": "lst = [11, 5, 3, 21, 19, 17]", "output": "def find_two_largest(lst):\n    max1 = 0\n    max2 = 0\n    for val in lst:\n        if val > max1:\n            max2 = max1\n            max1 = val\n        elif val > max2:\n            max2 = val\n    return (max1, max2)\n\nprint(find_two_largest(lst))", "category": "Python"}, {"instruction": "Create a program to search a nested list and print all the elements containing the number 3.", "input": "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, [3, 4, 5]]]", "output": "def search_nested_list(nested_list):\n    for element in nested_list:\n        if isinstance(element, list):\n            search_nested_list(element)\n        elif element == 3:\n            print(element)\n\nsearch_nested_list(nested_list)", "category": "Python"}, {"instruction": "Create a program to calculate the Fibonacci sequence up to the nth element.", "input": "", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n==1:\n        print(a)\n    else:\n        print(a)\n        print(b)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(b)", "category": "Python"}, {"instruction": "Define a function to find the factorial of the given number.", "input": "", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1)", "category": "Python"}, {"instruction": "Create a JavaScript program that takes a string as an argument and then prints out the characters in reverse order.", "input": "", "output": "function reverse(str) { \n  \n    // Create an empty string for storing reversed string \n    var reversedString = \"\"; \n  \n    // Loop through the string and concatenate it to \n    // the new string \n    for (var i = str.length - 1; i >= 0; i--) { \n        reversedString += str[i]; \n    } \n  \n    // Return the reversed string \n    return reversedString; \n}", "category": "Python"}, {"instruction": "Create a C++ program that sums up all the numbers in a given array.", "input": "[1,2,3,4,5]", "output": "#include <iostream>\nusing namespace std;\n\n// Function to calculate sum of an array  \nint arraySum(int arr[], int n) \n{ \n    int sum = 0;\n    for (int i=0; i<n; i++)  \n        sum += arr[i];  \n  \n    return sum; \n} \n\nint main() \n{ \n    int arr[] = {1,2,3,4,5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int sum = arraySum(arr, n); \n    cout << \"Sum of the array is \" <<sum; \n    return 0; \n}", "category": "Python"}, {"instruction": "Perform the following operation on this array and print the result: remove the last two elements and add them to the beginning.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr.splice(-2); \narr.unshift(4,5);", "category": "Python"}, {"instruction": "Explain why normalization is needed for natural language processing.", "input": "", "output": "Normalization is a step in natural language processing (NLP) that is used to make the text more consistent and easier to process. It is important in NLP because different pieces of text can still have the same meaning even if the words used in the text are different. Normalization can make the text more consistent by unifying the words to a common form, such as lowercasing all words, so that the model can process them more effectively. It can also be used to remove irrelevant characters, like punctuation, so that they don't affect the analysis.", "category": "Python"}, {"instruction": "Create a list in Python using list comprehension to obtain a new list which contains only the even numbers from the given list.", "input": "originalList = [1, 3, 4, 17, 19, 6, 2]", "output": "evenlist = [i for i in originalList if i%2==0]", "category": "Python"}, {"instruction": "Write a computer program to generate a matrix filled with zeros.", "input": "", "output": "def generateMatrix(m, n): \n  \n    # Initialize a m * n matrix with all 0s \n    matrix = [[0 for x in range(n)] for y in range(m)] \n    return matrix \n  \n# Driver code \nm = 4\nn = 5\nprint(generateMatrix(m, n))", "category": "Python"}, {"instruction": "How would you modify the code to check whether the list contains an even number?", "input": "list_data = [1, 2, 3, 4]\nfor item in list_data:  \n    print(item)", "output": "list_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:  \n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")", "category": "Python"}, {"instruction": "Compare the input list with a pre-defined list and return a new list containing only the elements that are present in both lists.", "input": "my_list = [1, 2, 3, 4]\npre_defined_list = [2, 4, 6, 8]", "output": "def compare_lists(my_list, pre_defined_list):\n    new_list = []\n    for element in my_list:\n        if element in pre_defined_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "Using the given JSON data, write a function that returns the value associated with a given key.", "input": "json_data = {\n    \"name\": \"John Smith\",\n    \"age\": 30,\n    \"occupation\": \"Software Engineer\"\n}", "output": "def get_value(json_data, key):\n    return json_data[key]", "category": "Python"}, {"instruction": "Generate a complete HTML document using the given parameters.", "input": "title: GPT Demo\nheading: Welcome to the GPT Demo\nbody: This is a demo of GPT on coding tasks.", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>GPT Demo</title>\n</head>\n<body>\n    <h1>Welcome to the GPT Demo</h1>\n    <p>This is a demo of GPT on coding tasks.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "How would you modify the following code to store the output of the function in a dictionary?", "input": "def convert_list_keys(list_of_data):\n    key_list = []\n    for item in list_of_data:\n        key_list.append(item[0])\n    return key_list", "output": "def convert_list_keys(list_of_data):\n    key_dict = {}\n    for item in list_of_data:\n        key_dict[item[0]] = item\n    return key_dict", "category": "Python"}, {"instruction": "Write a SQL query to select the rows from the following table based on a certain condition.", "input": "Table: Student\n\n| enroll_no | name | marks |\n  1           Jack    30\n  2           Tom     40\n  3           Lisa    50\n  4           Lucy    60", "output": "SELECT *\nFROM Student\nWHERE marks > 45", "category": "Python"}, {"instruction": "Write a Python program to filter out all the elements greater than 5 in the given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n result = list(filter(lambda x: x <= 5, myList))\n print(result)", "category": "Python"}, {"instruction": "Write a JavaScript program that takes an array of strings as an argument and then prints those strings in alphabetical order.", "input": "", "output": "function alphabeticalOrder(arr) {\n  // Sort items in the array\n  arr.sort(function(a, b) {\n    return a.localeCompare(b);\n  });\n  \n  // Print out the sorted array\n  console.log(arr);\n}", "category": "Python"}, {"instruction": "Write a SQL query to list all the distinct products names and their corresponding sales price.", "input": "Table: Products\n\n| id | product_name | sale_price |\n  1      iPhone         400\n  2      iPad           500\n  2      Apple Watch    300", "output": "SELECT DISTINCT product_name, sale_price\nFROM Products", "category": "Python"}, {"instruction": "Classify the given text as either suitable for children or not.", "input": "The dog barked loudly in the middle of the night, causing a lot of people to wake up.", "output": "Not suitable for children.", "category": "Python"}, {"instruction": "Edit the given HTML code so that the header of the web page is centered.", "input": "<html>\n   <head>\n      <title>Centering a header</title>\n   </head>\n   <body>\n      <h1>This header is not centered</h1>\n   </body>\n</html>", "output": "<html>\n   <head>\n      <title>Centering a header</title>\n   </head>\n   <body>\n      <h1 style=\"text-align: center;\">This header is now centered</h1>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to list all the product categories with their sales numbers in the given data set.", "input": "Table: Products\n\n| id | product_name | category | sale_price |\n  1       iPhone        Phones   400\n  2       iPad          Tablets  500\n  3       Apple Watch    Phones   300\n  4      In-ear headset  Audio    50\n  5      Pen Drive      Storage  20\n  6      32GB RAM       Storage  100", "output": "SELECT category, SUM(sale_price) as total_sales\nFROM Products\nGROUP BY category", "category": "Python"}, {"instruction": "Write a code in Python to find the subsequence of a given sequence.", "input": "sequence = [1, 6, 2, 4, 3, 7]", "output": "def findSubsequence(sequence): \n    subSeq = [] \n    maxLen = 1\n  \n    # looping through the sequence \n    for i in range(len(sequence)): \n        j = i + 1\n        while j < len(sequence): \n            # checking for non decreasing sequence \n            if sequence[j] >= sequence[i]: \n                subSeq.append(sequence[j]) \n                i = j \n                j += 1\n  \n            # checking for the subsequence with the max length \n            if len(subSeq) > maxLen: \n                maxLen = len(subSeq) \n  \n            # reset subSeq for the next subsequence if current element is starting of new subsequence \n            else: \n                subSeq = [] \n  \n    # return-1 when there is no subsequence  \n    if maxLen == 1: \n        return -1\n    else: \n        return maxLen \n  \n# Driver Code \nsequence = [1, 6, 2, 4, 3, 7] \nprint(\"LCS is \", findSubsequence(sequence))", "category": "Python"}, {"instruction": "Generate SQL code to create a table of users with the columns (user_id, name, email, age).", "input": "", "output": "CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    age INT,\n    PRIMARY KEY (user_id)\n);", "category": "Python"}, {"instruction": "Write a C++ program to find the elements that appear once in an array.", "input": "arr[] = {2, 3, 4, 5, 6, 2, 3, 4};", "output": "#include <bits/stdc++.h> \nusing namespace std; \n\nint getSingle(int arr[], int n) \n{ \n\t// initialize result \n\tint result = 0; \n\n\t// Iterate through every bit \n\tfor (int i = 0; i < 32; i++) \n\t{ \n\t\t// Find sum of set bits at i'th position in all \n\t\t// array elements \n\t\tint x = 0; \n\t\tfor (int j = 0; j < n; j++) \n\t\t\tx += (arr[j] & (1 << i)); \n\n\t\t// The bits with sum not multiple of 3, are the \n\t\t// bits of element with single occurrence. \n\t\tif (x % 3) \n\t\t\tresult |= (1 << i); \n\t} \n\n\treturn result; \n} \n\n// Driver code \nint main() \n{ \n\tint arr[] = {2, 3, 4, 5, 6, 2, 3, 4}; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tcout << \"The element with single occurrence is \"\n\t\t<< getSingle(arr, n); \n}", "category": "Python"}, {"instruction": "Write a Java code to clone a linked list using iteration.", "input": "", "output": "public class LinkedListCloneExample {\n\n    static Node head;\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int d) {\n            this.data = d;\n            this.next = null;\n        }\n    }\n\n    static Node CloneList(Node node) { \n        Node curr = node; \n        Node next = null; \n        Node temp = null; \n\n        while (curr != null) { \n            next = curr.next; \n\n            // Cloned node \n            temp = new Node(curr.data); \n\n            // Inserting the cloned node \n            // just next to the original node. \n            temp.next = next; \n            curr.next = temp; \n\n            curr = next; \n        } \n\n        // Adjusting the original list \n        // to get the cloned list. \n        curr = node; \n        while (curr != null) { \n            next = curr.next; \n\n            // Just adapting the original \n            // list to the cloned list. \n            curr.next = next.next; \n\n            curr = next.next; \n        } \n\n        return node; \n    } \n    \n    static void printList(Node node) { \n        while (node != null) { \n            System.out.print(node.data + \" \"); \n            node = node.next; \n        } \n    } \n\n    public static void main(String[] args) { \n        head = new Node(1); \n        head.next = new Node(2); \n        head.next.next = new Node(3); \n        head.next.next.next = new Node(4); \n  \n        System.out.println(\"Linked List original: \"); \n        printList(head); \n  \n        System.out.println(\"\\nCloned Linked List: \"); \n        Node cloned_list = CloneList(head); \n        printList(cloned_list); \n    }", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence of 10 numbers using Java.", "input": "", "output": "public static void printFibonacci(int count) \n{ \n\tint n1 = 0, n2 = 1, n3; \n\tSystem.out.print(n1 + \" \" + n2); \n\n\t// printing fibonacci sequence \n\tfor (int i = 2; i < count; ++i)  \n\t{ \n\t\tn3 = n1 + n2; \n\t\tSystem.out.print(\" \" + n3); \n\t\tn1 = n2; \n\t\tn2 = n3; \n\t} \n\n}", "category": "Python"}, {"instruction": "Generate 10 random strings of 5 characters in length with JavaScript.", "input": "", "output": "let randomString = [];\n \nfor (let i = 0; i < 10; i++) {\n    let randomChars = Math.random().toString(36).slice(-5);\n    randomString.push(randomChars);\n}\n\nconsole.log(randomString);", "category": "Python"}, {"instruction": "Create a Python program that generates a random number between 0 and 10 and checks if the generated number is even.", "input": "", "output": "import random\n\nnum = random.randint(0, 10)\n\nif (num % 2 == 0):\n    print(str(num) + \" is even.\")\nelse:\n    print(str(num) + \" is odd.\")", "category": "Python"}, {"instruction": "Create a Python program that sorts an array of integers using the insertion sort algorithm.", "input": "[4, 2, 6, 8, 1]", "output": "def insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])", "category": "Python"}, {"instruction": "Create a new string that is the reverse of the original string.", "input": "my_string = \"Hello World!\"", "output": "new_string = \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Create an empty dictionary with three key-value pairs.", "input": "", "output": "my_dict = {\n \"key1\": None, \n \"key2\": None, \n \"key3\": None\n}", "category": "Python"}, {"instruction": "Create a new list that reverses the order of the original list's elements.", "input": "old_list = [\"apple\", \"banana\", \"kiwi\"]", "output": "new_list = [\"kiwi\", \"banana\", \"apple\"]", "category": "Python"}, {"instruction": "Group the list into a Dictionary Key/Value pair, where the key is the name and the value is number of pet animals owned.", "input": "pets = [\"Henry 12 dogs\", \"Eric 2 cats\", \"David 7 birds\"]", "output": "pets_dict = {\n \"Henry\": 12, \n \"Eric\": 2, \n \"David\": 7\n}", "category": "Python"}, {"instruction": "Create a HTML page that displays the top 5 countries in the world by population.", "input": "Country    Population (Millions)\nChina      1400\nIndia      1351\nUnited     329\nIndonesia  265\nBrazil     212", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>World's Top 5 Countries By Population</title>\n <style>\n  table {\n   font-family: arial, sans-serif;\n   border-collapse: collapse;\n   width: 100%;\n  }\n  td, th {\n   border: 1px solid #dddddd;\n   text-align: left;\n   padding: 8px;\n  } \n </style>\n</head>\n<body>\n <h1>World's Top 5 Countries By Population</h1>\n <table>\n  <tr>\n   <th>Country</th>\n   <th>Population (Millions)</th>\n  </tr>\n  <tr>\n   <td>China</td>\n   <td>1400</td>\n  </tr>\n  <tr>\n   <td>India</td>\n   <td>1351</td>\n  </tr>\n  <tr>\n   <td>United States</td>\n   <td>329</td>\n  </tr>\n  <tr>\n   <td>Indonesia</td>\n   <td>265</td>\n  </tr>\n  <tr>\n   <td>Brazil</td>\n   <td>212</td>\n  </tr>\n </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to display owners and their pet names.", "input": "Table: Owners\n\n+------------+---------+\n| owner_name | pet_name|\n+------------+---------+\n| John       | Buggs   |\n| John       | Max     |\n| David      | Bella   |\n| Bill       | Spike   |\n+------------+---------+", "output": "SELECT o.owner_name, o.pet_name\nFROM Owners o", "category": "Python"}, {"instruction": "Write a C++ program to create a binary search tree.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nstruct Node { \n int data; \n struct Node *left, *right; \n};\n\nstruct Node* newNode(int data) {\n struct Node* node = new Node; \n node->data = data; \n node->left = node->right = NULL; \n return node; \n} \n\nstruct Node* insert(struct Node* node, int data) { \n if (node == NULL) \n return newNode(data); \n\nif (data < node->data) \n node->left = insert(node->left, data); \nelse\n node->right = insert(node->right, data);\n\nreturn node; \n}", "category": "Python"}, {"instruction": "Write a Bash script that finds the factorial of a given number.", "input": "", "output": "#!/bin/bash\n\nnum=${1}\nfactorial=1\n\nif [ $num -lt 0 ]\nthen\n echo \"Please enter a positive number.\"\n exit 1\nfi\n\nif [ $num -gt 0 ]\nthen\n for (( i=1; i<=$num; i++ ))\n do\n  factorial=$[ $factorial * $i ]\n done\nfi\necho \"The factorial of $num is $factorial\"", "category": "Python"}, {"instruction": "Create a React component for displaying a list of books.", "input": "var books = [\n { title: \"The Great Gatsby\", author: \"F. Scott Fitzgerald\" },\n { title: \"To Kill a Mockingbird\", author: \"Harper Lee\" },\n { title: \"1984\", author: \"George Orwell\" }\n];", "output": "import React from \"react\";\n\nconst BookList = ({ books }) => {\n return (\n <ul>\n {books.map(book => (\n <li key={book.title}>\n {book.title} by {book.author}\n </li>\n ))}\n </ul>\n );\n};\n\nexport default BookList;", "category": "Python"}, {"instruction": "Write a Python program that finds the most common word in a given string.", "input": "This is the first sentence of a sample text.", "output": "def get_most_common_word(text):\n words = text.split()\n common_words = {}\n for word in words:\n if word in common_words:\n common_words[word] += 1\n else:\n common_words[word] = 1\n\n max_word = \"\"\n max_count = 0\n for word, count in common_words.items():\n if count > max_count:\n max_word = word\n max_count = count\n return max_word", "category": "Python"}, {"instruction": "Create a JavaScript object representing a student.", "input": "{\n name: \"John Smith\",\n age: 15\n}", "output": "let student = {\n name: \"John Smith\",\n age: 15\n};", "category": "Python"}, {"instruction": "Write a code in Java to print the Fibonacci series till a given number.", "input": "", "output": "public static void FibonacciSeries(int limit) {\n    int prevNum = 0, nextNum = 1;\n    for (int i = 0; i < limit; i++) {\n        System.out.print(prevNum + \" \");\n        int sum = prevNum + nextNum;\n        prevNum = nextNum;\n        nextNum = sum;\n    }\n}", "category": "Python"}, {"instruction": "Generate a random sphere with radius 1 in JavaScript.", "input": "", "output": "const radius = 1;\nlet x = (Math.random() * 2 - 1) * radius;\nlet y = (Math.random() * 2 - 1) * radius;\nlet z = (Math.random() * 2 - 1) * radius;\n\nconst spherePosition = new THREE.Vector3(x, y, z);", "category": "Python"}, {"instruction": "Transform a given Python list of integers into a dictionary that contains the numbers as keys and its squares as values.", "input": "[1,2,3]", "output": "my_list = [1,2,3]\ndict_squares = {x:x**2 for x in my_list}", "category": "Python"}, {"instruction": "Implement a Search algorithm in Python with a space complexity of O(n).", "input": "", "output": "def search(list, target): \n    for i in range(len(list)): \n        if list[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Create a new list that only has the even numbers from the input list.", "input": "nums = [1, 2, 3, 4, 5, 6, 7]", "output": "even_nums = [2, 4, 6]", "category": "Python"}, {"instruction": "Create a new string that contains all uppercase letters from the original string.", "input": "my_string = \"Hello World!\"", "output": "new_string = \"HW\"", "category": "Python"}, {"instruction": "Write a function to take two integer arguments and return their sum.", "input": "x = 3\ny = 5", "output": "def add(x, y): \n  return x + y", "category": "Python"}, {"instruction": "Create a new list that is the combination of two other given lists.", "input": "list_a = [\"A\", \"B\", \"C\"]\nlist_b = [1, 2, 3]", "output": "new_list = [\"A\", \"B\", \"C\", 1, 2, 3]", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes a sentence as input and returns the number of words in the sentence.", "input": "", "output": "function countWords(str) {\n  return str.split(\" \").length;\n}", "category": "Python"}, {"instruction": "Create a class named 'Person' that has attributes such as name and age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "How would you convert a number from decimal to binary using bitwise operators?", "input": "", "output": "def decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\") \n    \ndecimal_num = 7\nbinary_num = decimalToBinary(decimal_num) \nprint(binary_num) # 111", "category": "Python"}, {"instruction": "Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string.", "input": "", "output": "def reverse_string(s): \n    return s[::-1]\n  \ninput_string = input(\"Enter a string: \")\n  \nreversed_string = reverse_string(input_string) \n  \nprint(\"The reversed string is:\", reversed_string)", "category": "Python"}, {"instruction": "Create a program that reads an integer N and calculates the sum of the series 1/1 + 1/2 + 1/3 + . . . . . + 1/N.", "input": "", "output": "def calculate_series_sum(N):\n    summation = 0\n    for i in range(1, N+1):\n        summation += (1 / i)\n    return summation", "category": "Python"}, {"instruction": "Create a program that reads a list of integers and returns the highest prime number in the list.", "input": "", "output": "def get_highest_prime(numbers):\n  highest_prime = 0\n  for num in numbers:\n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else:\n      highest_prime = max(highest_prime, num)\n  return highest_prime", "category": "Python"}, {"instruction": "Create a program that reads two numbers and prints out their greatest common divisor.", "input": "", "output": "def gcd(a, b):\n  if a == 0:\n    return b \n  return gcd(b % a, a)", "category": "Python"}, {"instruction": "Create a Java program that takes an array as argument and then prints out the elements of the array in reversed order.", "input": "[1,2,3,4,5]", "output": "public class ReverseArray { \n  \n    /* Prints the array in reverse order */\n    public static void printReversedArray(int arr[]) { \n        int n = arr.length; \n        for (int i=n-1; i>=0; i--) { \n            System.out.print(arr[i] + \" \"); \n        } \n    } \n  \n    public static void main(String[] args) {\n        int[] array = { 1, 2, 3, 4, 5 }; \n        printReversedArray(array); \n    } \n}", "category": "Python"}, {"instruction": "You are given an array of integers and the task is to create a function that returns the maximum pairwise product of those numbers.", "input": "", "output": "def max_pairwise_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n      for j in range(i+1,len(nums)):\n          max_product = max(max_product, nums[i] * nums[j])\n  return max_product", "category": "Python"}, {"instruction": "Create a program that reads 6 numbers from the user and outputs whether they form an increasing subsequence of length 3 or not.", "input": "", "output": "def increasing_subsequence(arr):\n  for i in range(len(arr)-2):\n    if (arr[i] < arr[i+1]) and (arr[i+1] < arr[i+2]):\n      return 'True'\n  return 'False'", "category": "Python"}, {"instruction": "Create a function that prints all the prime numbers between 1 and a given number.", "input": "", "output": "def print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n   if all(num % i != 0 for i in range(2, num)): \n    prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)", "category": "Python"}, {"instruction": "Create a program that reads an integer and prints out the next Fibonacci number.", "input": "", "output": "def get_next_fibonacci_number(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    fibonacci_sequence = [0,1] \n    for i in range(2, n + 1): \n      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1] \n      fibonacci_sequence.append(next_value)\n    return fibonacci_sequence[n]", "category": "Python"}, {"instruction": "Create a function 'convertStringToInt' that takes a string and converts it into an integer.", "input": "", "output": "def convertStringToInt(string): \n    convertValue = int(string) \n    return convertValue", "category": "Python"}, {"instruction": "Construct a SQL query to retrieve the records from a table that satisfy a certain condition.", "input": "", "output": "SELECT * FROM table_name WHERE condition;", "category": "Python"}, {"instruction": "What is the data structure of a hash table?", "input": "", "output": "A hash table is a data structure that maps keys to values using a hash function. It is composed of a key-value pair, where the key is used to locate a specific item in the table, and the value is the item itself.", "category": "Python"}, {"instruction": "Create an object named 'person' and assign the properties 'name', 'age', and 'hobby'.", "input": "\"name\": \"John\",\n\"age\": 18,\n\"hobby\": \"reading\"", "output": "person = {\n    \"name\": \"John\",\n    \"age\": 18,\n    \"hobby\": \"reading\"\n}", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and returns the longest common prefix of the list of strings.", "input": "", "output": "def longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i] \n    return smallest_string", "category": "Python"}, {"instruction": "Sort the given list of integers in descending order using the Bubble sort technique.", "input": "[3, 5, 2, 8, 9, 1]", "output": "def bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\nprint(a) # prints [9, 8, 5, 3, 2, 1]", "category": "Python"}, {"instruction": "Create an iterator in Python that yields only even numbers.", "input": "", "output": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1", "category": "Python"}, {"instruction": "Edit the following code to ensure that it runs without any error.", "input": "print('Hello world)", "output": "print('Hello world')", "category": "Python"}, {"instruction": "With the provided data, write a SQL statement to select all columns from a table called 'Customers'.", "input": "SELECT * FROM Customers;", "output": "SELECT *\nFROM Customers;", "category": "Python"}, {"instruction": "Extract all the numbers from the given string.", "input": "my_string = 'I have 4 cats and 2 dogs in my house'", "output": "[4, 2]", "category": "Python"}, {"instruction": "Unwrap the value in the following nested tuple.", "input": "my_tuple = ((1, (2, (3, 4))), 5)", "output": "4", "category": "Python"}, {"instruction": "Convert the given list to a set and remove all duplicates.", "input": "my_list = [1, 2, 1, 20, 10, 5, 4, 4]", "output": "my_set = set(my_list)\nmy_set = {1, 2, 5, 10, 20, 4}", "category": "Python"}, {"instruction": "Calculate the number of bits required to represent the given letter.", "input": "letter = 'A'", "output": "8 bits.", "category": "Python"}, {"instruction": "Create a function to capitalize the first letter in each word of the given string.", "input": "my_string = 'this is a test'", "output": "def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  return ' '.join(capitalized_words)", "category": "Python"}, {"instruction": "Simplify the following code as much as possible", "input": "counter = 0\nfor item in fruits:\n if item == 'apple':\n counter += 1", "output": "counter = fruits.count('apple')", "category": "Python"}, {"instruction": "Tell the difference between the two provided pieces of code.", "input": "def recursive(num):\n if num<=0:\n return 0\n else:\n return num + recursive(num-1)\n\ndef iterative(num):\n result = 0\n for i in range(1, num+1):\n result += i\n return result", "output": "The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num.", "category": "Python"}, {"instruction": "Implement a sorting algorithm for the given list of numbers.", "input": "sort_me = [10, 4, 1, 5]", "output": "def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me", "category": "Python"}, {"instruction": "Create a function to transform all strings to capital letters.", "input": "my_string = 'Hello World!'", "output": "def to_upper(string):\n return string.upper()", "category": "Python"}, {"instruction": "Count the number of times each letter occurs in the given text.", "input": "Text: Coding is fun!", "output": "{'C':1, 'o':2, 'd':1, 'i':2, 'n':1, 'g':2, ' ':2, 'f':1, 'u':1, '!':1}", "category": "Python"}, {"instruction": "Determine how many times the given string appears in the paragraph.", "input": "Paragraph: In one moment, I paused in a quiet street and suddenly quite near me, the beauty of a full moon shot up into the sky.\nString: moon", "output": "1", "category": "Python"}, {"instruction": "Generate a list of the data type of each element in the given list.", "input": "my_list = [12, 'hello', 15.7]", "output": "[int, str, float]", "category": "Python"}, {"instruction": "Create a MySQL query to find all clients who have made more than one purchase in the last two months.", "input": "", "output": "SELECT client_id\nFROM purchases\nWHERE purchase_date >= NOW() - INTERVAL 2 MONTH\nGROUP BY client_id\nHAVING COUNT(*) > 1;", "category": "Python"}, {"instruction": "Write a CSS code to align the text within a `<div>` element horizontally to the right.", "input": "", "output": "div {\n  text-align:right;\n}", "category": "Python"}, {"instruction": "Write a function in Java to remove duplicates from a list of Strings.", "input": "", "output": "public List<String> removeDuplicates(List<String> inputList) { \n  \n   // Create a new HashSet \n   HashSet<String> hs = new HashSet<>(); \n  \n   // Add the contents of inputList to the HashSet hs \n   // HashSet does not allow duplicates \n   hs.addAll(inputList); \n  \n   // Clear inputList \n   inputList.clear(); \n  \n   // add the elements of hs to inputList \n   inputList.addAll(hs); \n  \n   // return the list \n   return inputList; \n}", "category": "Python"}, {"instruction": "Create a SQL query to calculate the sum of values in a column called \"sales\" in the \"sales\" table.", "input": "SELECT SUM(sales) FROM sales;", "output": "SELECT SUM(sales) FROM sales;", "category": "Python"}, {"instruction": "Create a function in JavaScript to replace the spaces in a given string with underscores.", "input": "", "output": "function replaceSpacesWithUnderscores(string) {\n  return string.replace(/\\s+/g, '_');\n}", "category": "Python"}, {"instruction": "Create a SQL query to search for all records in the \"customers\" table where the \"age\" field is greater than 30.", "input": "SELECT * FROM customers WHERE age > 30;", "output": "SELECT * \nFROM customers \nWHERE age > 30;", "category": "Python"}, {"instruction": "Create a function in Java to take a string and print all words of length n and greater in the string.", "input": "String: \"Welcome to the programming world!\"\nn: 5", "output": "public static void printLongWords(String str, int n) { \n    // loop through each character of  \n    // input string  \n    for (int i = 0; i < str.length(); i++) { \n        // variable to store the current word  \n        String word = \"\";  \n  \n        // condition to look for words  \n        while (i < str.length() && str.charAt(i) != ' ') { \n            word = word + str.charAt(i); \n            i++; \n        } \n        // if the length of current word is less them n  \n        // it is not printed  \n        if (word.length() >= n) \n            System.out.print(word + \" \");  \n    } \n}", "category": "Python"}, {"instruction": "Create a SQL table which has 3 columns id, name and price.", "input": "", "output": "CREATE TABLE products (\n  id INTEGER AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10,2) NOT NULL\n);", "category": "Python"}, {"instruction": "Generate a 10 digit random number using a JavaScript function", "input": "", "output": "Math.floor(Math.random()*10000000000);", "category": "Python"}, {"instruction": "Correct the following JavaScript code to print the first letter of the given string.", "input": "let str = \"Hello World\";\nconsole.log(str[0]);", "output": "let str = \"Hello World\";\nconsole.log(str.charAt(0));", "category": "Python"}, {"instruction": "Write a SQL query which returns the product name and the number of times it has been purchased", "input": "", "output": "SELECT product_name, COUNT(*)\nFROM purchases\nGROUP BY product_name;", "category": "Python"}, {"instruction": "Create a SQL query which returns the products that have a price greater than 10 and a quantity greater than 5.", "input": "", "output": "SELECT * FROM products WHERE price > 10 AND quantity > 5;", "category": "Python"}, {"instruction": "Compute the minimum of 3 given numbers using a JavaScript function.", "input": "", "output": "function minNum(a, b, c) {\n  let min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}", "category": "Python"}, {"instruction": "Design a efficient algorithm to check if two tree structures are identical at the root node level.", "input": "", "output": "\"\"\"\nDesign a efficient algorithm to check if two tree structures are identical at the root node level.\n\nInput: Two root nodes (Node1, Node2)\n\nOutput: Boolean\n\n\"\"\"\n# This approach uses a breadth-first search\ndef is_identical(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    \n    # Check if the data of both nodes is the same\n    if root1 is not None and root2 is not None:\n        if root1.data != root2.data:\n            return False\n  \n        # If yes, then recursively traverse left and right sub-trees\n        return (is_identical(root1.left, root2.left) \n                and is_identical(root1.right, root2.right)) \n    \n    # If we reach here, then one node is NULL and other is not\n    return False", "category": "Python"}, {"instruction": "Create a Python script that calculates the sum of two given numbers.", "input": "", "output": "def sum(x, y):\n  return x + y;", "category": "Python"}, {"instruction": "Create a database table in SQL with two columns UserId and Username.", "input": "", "output": "CREATE TABLE Users (\n  UserId INT NOT NULL, \n  Username VARCHAR(255) NOT NULL,\n  PRIMARY KEY (UserId)\n);", "category": "Python"}, {"instruction": "Design a C program to print \"Hello World!\"", "input": "", "output": "#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  return 0;\n}", "category": "Python"}, {"instruction": "Write a function in JavaScript to extract the Kth highest digit from a given number.", "input": "Number = 192\nK = 2", "output": "function extractKthHighestDigit(num, k) {\n  let numStr = num.toString();\n  let numArr = numStr.split(\"\");\n  numArr.sort((a, b) => b - a);\n  return +numArr[k-1];\n}", "category": "Python"}, {"instruction": "Write a query in MySQL to select the top 10 most expensive products from the table \"Product\".", "input": "Table \"Product\" with columns (product_id, name, price)", "output": "SELECT product_id, name, price \nFROM Product \nORDER BY price DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Create an algorithm in pseudocode to find the maximum value in an array.", "input": "", "output": "max = 0\n\nfor each element in array\n  if element > max \n    max = element\n\nreturn max", "category": "Python"}, {"instruction": "Write a query in SQL to calculate the total profits for a given month.", "input": "Revenue table with columns (date, product_id, sales_value)", "output": "SELECT SUM(sales_value) FROM revenue \nWHERE date BETWEEN <given_month_start_date> \nAND <given_month_end_date>", "category": "Python"}, {"instruction": "Generate an HTML snippet for a basic two-column layout.", "input": "", "output": "<div class=\"container\">\n  <div class=\"column\">\n    <!-- Your left column content --> \n  </div>\n  <div class=\"column\">\n    <!-- Your right column content --> \n  </div>\n</div>", "category": "Python"}, {"instruction": "Change the following JavaScript code so that it prints out the square root of a given number.", "input": "function sqr(x) {\n  return x*x;\n}", "output": "function sqr(x) {\n  return Math.sqrt(x);\n}", "category": "Python"}, {"instruction": "Write a function in JavaScript to delete duplicate characters from a string.", "input": "String: \"google\"", "output": "function deleteDuplicates(str) {  \n  let result = \"\"; \n  let frequency = {}; \n  \n  // creating a map of all characters with their frequency in the string \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar]) { \n      frequency[currentChar]++; \n    } else { \n      frequency[currentChar] = 1; \n    } \n  } \n  \n  // adding only those characters which have frequency greater than one \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar] == 1) { \n      result += str.charAt(i); \n    } \n  } \n  \n  return result; \n}", "category": "Python"}, {"instruction": "Debug the following C++ code by finding and fixing errors.", "input": "int findMax(int arr[], int n)\n{\n    if(arr[i] < n)\n     {\n        int max = arr[i];\n        for (int i = 0; i < n; i++)\n            if (arr[I] > max)\n            max = arr[i];\n        return max;\n     }\n}", "output": "int findMax(int arr[], int n)\n{\n    if(n > 0)\n     {\n        int max = arr[0];\n        for (int i = 1; i < n; i++)\n            if (arr[i] > max)\n            max = arr[i];\n        return max;\n     }\n}", "category": "Python"}, {"instruction": "Write a PHP code to send an email notification to someone.", "input": "", "output": "<?php\n// Create a new PHP mailer instance\n$mail = new PHPMailer(true);\n\ntry {\n    // Set the mailer to use SMTP\n    $mail->isSMTP();\n\n    // Specify SMTP server details\n    $mail->Host = 'smtp.example.com';\n    $mail->SMTPAuth = true;\n    $mail->Username = 'username';\n    $mail->Password = 'password';\n    $mail->SMTPSecure = 'ssl';\n    $mail->Port = 465;\n\n    // Recipient's details\n    $mail->setFrom('from@example.com', 'From Name');\n    $mail->addAddress('to@example.com', 'To Name');\n\n    // Email content\n    $mail->isHTML(true);\n    $mail->Subject = 'Email Notification';\n    $mail->Body    = 'This is an email notification';\n\n    // Send the email\n    $mail->send();\n    echo 'Message has been sent';\n\n}\ncatch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";\n}\n?>", "category": "Python"}, {"instruction": "Write a SELECT SQL statement to display the employee name and department in descending order of salary.", "input": "", "output": "SELECT employee_name, department FROM employee ORDER BY salary DESC;", "category": "Python"}, {"instruction": "Explain the purpose of the new operator in JavaScript.", "input": "", "output": "The new operator in JavaScript is used to create an instance of an object. It allocates memory for the object and calls the object's constructor to initialize the object. It also sets the object's [[Prototype]] property to the constructor function's prototype object.", "category": "Python"}, {"instruction": "Translate the given code into Java.", "input": "let x = 10;", "output": "int x = 10;", "category": "Python"}, {"instruction": "Where does a Python interpreter look for modules?", "input": "", "output": "The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path.", "category": "Python"}, {"instruction": "Demonstrate how to use the following JavaScript function", "input": "Math.max(arg1, arg2)", "output": "// To get the maximum number from the two input numbers \nlet x = 15;\nlet y = 25;\nlet maxNum = Math.max(x, y);\nconsole.log(maxNum); // Output: 25", "category": "Python"}, {"instruction": "Create a PHP script that prints out the sum of all even numbers", "input": "", "output": "<?php \n \n$start_num = 3; \n$end_num = 8; \n \n$sum = 0; \n \nfor($i = $start_num; $i <= $end_num; $i++) \n{ \n\tif($i % 2 == 0) \n\t\t$sum = $sum + $i; \n \n\t$i++; \n} \n \necho \"Sum of all even numbers between $start_num to $end_num = $sum\"; \n?>", "category": "Python"}, {"instruction": "Modify the following Python code to make it run faster", "input": "def roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "output": "import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "category": "Python"}, {"instruction": "Write a SQL query to find the number of cars of each model", "input": "Table name: \"cars\"\nColumns: model (string), make (string)", "output": "SELECT make, model, COUNT(*) as num_cars \nFROM cars\nGROUP BY make, model;", "category": "Python"}, {"instruction": "Output a struct in Golang for the following scenario", "input": "Create a struct for a post on a blog that includes theTitle, Author, Timestamp, Body and Comments.", "output": "type Post struct {\n        Title string\n        Author string\n        Timestamp time.Time\n        Body string\n        Comments []Comment\n    }", "category": "Python"}, {"instruction": "Transform the following code snippet from ES6 to older version of JavaScript", "input": "let numbers = [1, 2, 3, 4, 5];\nlet multipliedNumbers = numbers.map(number => number * 2);", "output": "var numbers = [1, 2, 3, 4, 5];\nvar multipliedNumbers = numbers.map(function(number) { \n    return number * 2;\n});", "category": "Python"}, {"instruction": "What parameters will we pass to the following function?", "input": "def factorial(n):", "output": "We will pass one parameter, an integer 'n', to the factorial function.", "category": "Python"}, {"instruction": "Write a Python script to validate the following input", "input": "Validate a Date type field with the following format: YYYY/MM/DD", "output": "# Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Output a section of valid html for a content header", "input": "<h2> Products </h2>", "output": "<h2 class=\"content-header\">Products</h2>", "category": "Python"}, {"instruction": "Create a function that takes two arrays and returns the elements that are present in both of them.", "input": "Input array 1: [1, 2, 3, 4, 5]\nInput array 2: [3, 4, 5, 6, 7]", "output": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\n\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n\n# Output: [3, 4, 5]", "category": "Python"}, {"instruction": "Generate a function that takes an array of strings and returns a new array with the strings sorted in alphabetical order.", "input": "Input array: [\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"]", "output": "def sort_strings(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr\n\nprint(sort_strings([\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"]))\n\n# Output: ['a', 'hello', 'is', 'sentence', 'this', 'world']", "category": "Python"}, {"instruction": "Explain the uses of the `in` operator in Python.", "input": "", "output": "The in operator in Python is used to determine whether an item is present in a sequence. It checks for the presence of an item in lists, sets, tuples, dictionaries, and strings. It is also used to iterate over the items of a sequence in a for loop.", "category": "Python"}, {"instruction": "Compare functions and classes in Python.", "input": "", "output": "Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors.", "category": "Python"}, {"instruction": "Code an if statement in Java to check if an integer is odd", "input": "", "output": "if (num % 2 == 1) { \n   // num is odd \n}", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes two temperatures and returns their average.", "input": "", "output": "function average_temperature(temp1, temp2) {\n  return (temp1 + temp2) / 2;\n}", "category": "Python"}, {"instruction": "Determine the index of an element in a given array using binary search.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]\nelement = 4", "output": "\"\"\"\nDetermine the index of an element in a given array using binary search.\n\nInput: arr (list)  element (int)\n\nOutput: index (int)\n\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3", "category": "Python"}, {"instruction": "Given the following code, write a function to calculate the length of the linked list.", "input": "\"\"\"\nclass Node:\n  def __init__(self, val, next=None):\n    self.val = val\n    self.next = next\n\nhead = Node(4, Node(3, Node(2, Node(1))))\n\"\"\"", "output": "\"\"\"\nGiven the following code, write a function to calculate the length of the linked list.\n\nInput: Head of the linked list (Node)\n\nOutput: Length of the linked list (int)\n\n\"\"\"\ndef get_length(head):\n    if head is None:\n        return 0\n    \n    length = 1\n    node = head\n    \n    while node.next is not None:\n        length += 1\n        node = node.next\n    \n    return length\n\nif __name__ == '__main__':\n    head = Node(4, Node(3, Node(2, Node(1))))\n    print(get_length(head)) \n    # Output: 4", "category": "Python"}, {"instruction": "Generate a random 16 character string.", "input": "", "output": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(random.choice(chars) for _ in range(16))\n\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh", "category": "Python"}, {"instruction": "Design a function that counts the number of times a word occurs in a sentence.", "input": "sentence = \"The quick brown fox jumped over the lazy dog.\"", "output": "\"\"\"\nDesign a function that counts the number of times a word occurs in a sentence.\n\nInput: sentence (string)\n\nOutput: number of times word appears in the sentence (int)\n\n\"\"\"\ndef count_word(sentence, word):\n    return sentence.lower().split().count(word.lower())\n\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumped over the lazy dog.\"\n    print(count_word(sentence, \"The\"))\n    # Output: 1", "category": "Python"}, {"instruction": "How can you create a class in python?", "input": "", "output": "A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required.", "category": "Python"}, {"instruction": "You are given a list of numbers, write a program to calculate the mode.", "input": "[1, 2, 3, 3, 4, 4, 5]", "output": "from collections import Counter\n\ndef find_mode(lst):\n    counter = Counter(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\n\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))", "category": "Python"}, {"instruction": "How can you create a function to connect to MySQL database?", "input": "", "output": "import mysql.connector \n\ndef db_connect():\n    conn = mysql.connector.connect(\n        user='user_name',\n        password='password',\n        host='localhost',\n        database='database_name'\n    )\n    return conn\n \n# Main \nif __name__ == '__main__':\n    conn = db_connect()\n    print(conn)", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of the digits of a given positive integer.", "input": "", "output": "\"\"\"\nCreate an algorithm to compute the sum of the digits of a given positive integer.\n\nInput: number (int)\n\nOutput: sum of the digits of the number (int)\n\n\"\"\"\ndef compute_sum(number):\n    if number < 0:\n        return 0\n    \n    # get the last digit\n    last_digit = number % 10\n    \n    # recursive call to get the sum of the remaining digits\n    remainder_sum = compute_sum(number // 10)\n    \n    return last_digit + remainder_sum\n\nif __name__ == '__main__':\n    number = 9876\n    print(compute_sum(number)) \n    # Output: 36", "category": "Python"}, {"instruction": "What is the use of tuple in python?", "input": "", "output": "Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys.", "category": "Python"}, {"instruction": "Write a JavaScript command to check if an object is empty.", "input": "", "output": "function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "What is a Hash Table in C++?", "input": "", "output": "A Hash Table (also known as Hash Map) is a data structure in C++ which uses a hash function to map keys to values. It can be used to store, add, and remove elements in constant time and is often used for caches and associative arrays.", "category": "Python"}, {"instruction": "Code a for loop in Java to find the maximum value in an array", "input": "int[] arr = {2,5,3,7,1};", "output": "int max = arr[0];\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n        max = arr[i];\n    }\n}", "category": "Python"}, {"instruction": "Write a Node.js command to rotate an array by one element.", "input": "let arr = [1, 2, 3, 4, 5]", "output": "let temp = arr[0];\nfor (let i = 0; i < arr.length - 1; i++) {\n  arr[i] = arr[i + 1];\n}\narr[arr.length - 1] = temp;", "category": "Python"}, {"instruction": "What are the characteristics of a Function in JavaScript?", "input": "", "output": "A function in JavaScript is a block of code that is delimited by curly brackets and is designed to perform a specific task. It consists of a function declaration, which includes the function name and its parameters, and a function body containing the code that is to be executed when the function is called. The function can return a value and can be either named or anonymous. Functions can also accept arguments and can be used to create objects and closures.", "category": "Python"}, {"instruction": "Write a Python function to input a number and print if it is positive, negative, or zero", "input": "", "output": "def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")", "category": "Python"}, {"instruction": "Follow the given CSS syntax and write a code to create a class called \"box\"", "input": "", "output": ".box {\n  width: 300px;\n  height: 200px;\n  background-color: #f1f1f1;\n  border: 2px solid #333;\n  margin: 20px;\n  float: left;\n }", "category": "Python"}, {"instruction": "Follow the given SQL syntax and create a table \"students\"", "input": "", "output": "CREATE TABLE students (\n     student_id INT PRIMARY KEY, \n     first_name VARCHAR(50) NOT NULL,\n     last_name VARCHAR(50) NOT NULL, \n     age INT NOT NULL\n);", "category": "Python"}, {"instruction": "Make an HTML table of the given integers.", "input": "[2, 3, 4, 5, 6]", "output": "<table>\n  <tbody>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Create an algorithm in Java to calculate the sum of all elements of an array.", "input": "", "output": "public int calculateSum(int[] arr) { \n  int sum = 0; \n  for (int i = 0; i < arr.length; i++) { \n    sum += arr[i]; \n  } \n  return sum; \n}", "category": "Python"}, {"instruction": "Change the background color of the second element in a list in CSS.", "input": "", "output": "ul li:nth-child(2){\n  background-color: #e6e6e6;\n}", "category": "Python"}, {"instruction": "Create a for loop for printing \"Hello World N times\", where N is a given number", "input": "N = 5", "output": "for i in range(N):\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Generate a random word from a given list of words", "input": "words = ['apple', 'banana', 'grape', 'orange']", "output": "import random\n\ndef get_random_word(words):\n    return random.choice(words)\n\nif __name__ == '__main__':\n    print(get_random_word(words))", "category": "Python"}, {"instruction": "Edit the following code snippet to display the data in a structured table", "input": "data = {'name': ['John', 'Smith', 'Adam'], 'age' : [23, 45, 56]}", "output": "<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    {% for item in data %}\n    <tr>\n      <td>{{ item.name }}</td>\n      <td>{{ item.age }}</td>\n    </tr>\n    {% endfor %}\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Write a function in JavaScript to validate a credit card number.", "input": "", "output": "function validateCreditCardNumber(number) {\n    // remove any spaces or dashes\n    number = number.replace(/\\s/g, \"\"); // remove any spaces\n    number = number.replace(/-/g, \"\"); // remove any dashes\n    // check for valid credit card length\n    if (number.length != 16) {\n        return false;\n    }\n    // check that each number is a valid number\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (isNaN(n)) {\n            return false;\n        }\n    }\n    // validate the credit card\n    let sum = 0;\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (i % 2 == 0) {\n            n *= 2;\n            if (n > 9) { \n                n = (n % 10) + 1;\n            }\n        }\n        sum += n;\n    }\n    let last = parseInt(number[15]);\n    let check = 10 - (sum % 10);\n    return last == check;\n}", "category": "Python"}, {"instruction": "Parse the following XML code and print all the \"name\" fields.", "input": "<employees>\n    <employee>\n        <name>John</name>\n        <age>35</age>\n    </employee>\n    <employee>\n        <name>Alex</name>\n        <age>42</age>\n    </employee>\n</employees>", "output": "import xml.etree.ElementTree as ET \n\n# parse the xml file\nroot = ET.parse('employees.xml').getroot()\nfor employee in root.findall('employee'):\n    name = employee.find('name').text\n    print(name)", "category": "Python"}, {"instruction": "Write a query in MongoDB that selects all documents in a given collection.", "input": "", "output": "db.collection.find({})", "category": "Python"}, {"instruction": "Write a function to sort a list of numbers using merge sort.", "input": "myList = [4, 8, 2, 3, 1]", "output": "def mergeSort(myList): \n    if len(myList) >1: \n        mid = len(myList)//2 #Finding the mid of the array \n        L = myList[:mid] # Dividing the array elements  \n        R = myList[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                myList[k] = L[i] \n                i+= 1\n            else: \n                myList[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        # Checking if any element was left \n        while i < len(L): \n            myList[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            myList[k] = R[j] \n            j+= 1\n            k+= 1", "category": "Python"}, {"instruction": "What attribute in HTML is used to completely hide an element from the page?", "input": "", "output": "The attribute that is used to completely hide an element from the page is the \"display\" attribute with the value of \"none\".", "category": "Python"}, {"instruction": "Convert the following JSON string into an array.", "input": "{\"key1\": \"value1\", \"key2\": \"value2\"}", "output": "[[\"key1\", \"value1\"], [\"key2\", \"value2\"]]", "category": "Python"}, {"instruction": "Write an HTML element to create a checkbox in a form.", "input": "", "output": "<input type=\"checkbox\" name=\"checkboxname\" />", "category": "Python"}, {"instruction": "Design a class in Java to represent a bank account.", "input": "", "output": "public class BankAccount {\n \n    private double balance;\n \n    public BankAccount(double balance) {\n        this.balance = balance;\n    }\n \n    public void deposit(double depositAmount) {\n        balance += depositAmount;\n    }\n \n    public void withdraw(double withdrawAmount) {\n        balance -= withdrawAmount;\n    }\n \n    public double getBalance() {\n        return balance;\n    }\n \n}", "category": "Python"}, {"instruction": "Classify the given text into either positive or negative sentiment.", "input": "This movie was one of the worst movies I've ever seen.", "output": "Negative sentiment.", "category": "Python"}, {"instruction": "Write a Bash script to print the largest number in an array.", "input": "array=(51 72 23 39 52)", "output": "#! /bin/bash\n \n# Declare an array\narray=(51 72 23 39 52)\n \n# Get the length of the array\nn=${#array[@]}\n \n# Assume the first element as largest\nlargest=${array[0]}\n \n# Loop through the array\nfor ((i=1;i<$n;i++))\ndo\n  # Compare the element with the largest\n  if [ ${array[$i]} -gt $largest ]\n  then\n    # Replace the largest\n    largest=${array[$i]}\n  fi\ndone\n \n# Print the largest\necho $largest", "category": "Python"}, {"instruction": "Create a MySQL database and add a table with the following schema.", "input": "tb_animals\n  - id (INTEGER)\n  - name (VARCHAR)\n  - age (INTEGER)", "output": "CREATE DATABASE IF NOT EXISTS animals;\n \nUSE animals;\n \nCREATE TABLE IF NOT EXISTS tb_animals\n(\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  age INTEGER\n);", "category": "Python"}, {"instruction": "Explain the purpose and implementation of the media query.", "input": "", "output": "A media query is a CSS tool that allows a web page to adapt to different screen sizes (desktop, mobile, tablet, etc.). It uses a set of rules consisting of media type, media feature and value, which, when satisfied, trigger the application of a corresponding CSS stylesheet. Media queries are implemented using the @media rule, which combines a media type and media query expression, and has a corresponding block of style rules that get applied when the condition is true.", "category": "Python"}, {"instruction": "Design a class for representing a triangle with its 3 sides", "input": "", "output": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        semi = (self.side1 + self.side2 + self.side3) / 2.0\n        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5", "category": "Python"}, {"instruction": "Create a web crawler to extract all the links within a given web page", "input": "url = \"https://www.example.com\"", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    links = [link.get('href') for link in soup.find_all('a')]\n    return links\n\nif __name__ == '__main__':\n    print(get_links(url))", "category": "Python"}, {"instruction": "Print the letter frequency of a given string", "input": "string = \"Hello World\"", "output": "from collections import Counter\n\ndef get_letter_frequency(string):\n    counter = Counter(string)\n    for key, value in counter.items():\n        print(f'{key}: {value}')\n\nif __name__ == '__main__':\n    get_letter_frequency(string)", "category": "Python"}, {"instruction": "Unpack a given list of tuples", "input": "tuples = [('John', 23), ('Adam', 45)]", "output": "def unpack_tuples(tuples):\n    names, ages = zip(*tuples)\n    return list(names), list(ages)\n\nif __name__ == '__main__':\n    names, ages = unpack_tuples(tuples)\n    print(names)\n    print(ages)", "category": "Python"}, {"instruction": "Find the most frequent word from the given list.", "input": "['apple', 'mango', 'banana', 'apple', 'orange']", "output": "from collections import Counter\n\nwords = ['apple', 'mango', 'banana', 'apple', 'orange']\nword_counts = Counter(words)\nmost_frequent = word_counts.most_common(1)\nprint(most_frequent[0][0]) # prints 'apple'", "category": "Python"}, {"instruction": "Suggest a code snippet to shuffle a list of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import random\n\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)", "category": "Python"}, {"instruction": "Compute the sum of all numbers from 1 to 5 using a for loop.", "input": "", "output": "total = 0\nfor i in range(1, 6):\n    total += i\nprint(total)", "category": "Python"}, {"instruction": "Determine the data type for the given value.", "input": "value: \"hello\"", "output": "string", "category": "Python"}, {"instruction": "Change the given code so that the variable is incremented only if the condition returns true.", "input": "", "output": "x = 0\nif (condition):\n    x += 1", "category": "Python"}, {"instruction": "In the given code, convert the output to its equivalent integer type.", "input": "", "output": "x = \"10\" \ny = int(x)", "category": "Python"}, {"instruction": "Create a Python function to generate all prime numbers less than a given number.", "input": "", "output": "def generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "Using the given set and scores, find the maximum score.", "input": "set = {1, 2, 3}, scores = {4, 3, 6},", "output": "# Find the maximum score\nmaxScore = max(scores[i] for i in set)\nprint(maxScore)", "category": "Python"}, {"instruction": "Create the HTML component for a form field.", "input": "Field Name: First Name\nField Type: Text", "output": "<label for=\"first_name\">First Name</label> \n<input type=\"text\" id=\"first_name\" name=\"first_name\">", "category": "Python"}, {"instruction": "Convert the following if-else block of code into a ternary expression.", "input": "if (condition){\n  do_something();\n}\nelse {\n  do_something_else();\n}", "output": "condition ? do_something() : do_something_else();", "category": "Python"}, {"instruction": "Write the SQL query to select all employees from the 'employee' table whose salary is above 10000.", "input": "", "output": "SELECT * FROM employee \nWHERE salary > 10000;", "category": "Python"}, {"instruction": "Design a class in Java which allows user to set the value of an Attribute.", "input": "", "output": "public class MyClass { \n  private int attribute; \n\n  public void setAttribute(int attribute) { \n    this.attribute = attribute; \n  }\n}", "category": "Python"}, {"instruction": "Create an HTML table using the dataset provided.", "input": "DataSet = [{'Name': 'John', 'Age': 23},\n{'Name': 'Mary', 'Age': 24},\n{'Name': 'David', 'Age': 20}]", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>23</td>\n  </tr>\n  <tr> \n    <td>Mary</td>\n    <td>24</td>\n  </tr>\n  <tr>\n    <td>David</td>\n    <td>20</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Change the given Python script to not assign any variables", "input": "x = 10\ny = \"Some Text\"", "output": "# no variables are assigned", "category": "Python"}, {"instruction": "Produce a 3D array from a given list of numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "[[[1], [2], [3]], [[4], [5], [6]]]", "category": "Python"}, {"instruction": "Create an array of strings containing the names of your relatives", "input": "", "output": "relatives = ['John', 'Adam', 'Sarah', 'Paul', 'Emily']", "category": "Python"}, {"instruction": "Generate a valid HTML markup from the given JSON data.", "input": "{\n  \"name\": \"Sample Name\",\n  \"city\": \"New Delhi\",\n  \"state\": \"Delhi\"\n}", "output": "<html>\n  <head>\n    <title>Sample Information</title>\n  </head>\n  <body>\n    <h2>Sample Information</h2>\n    <ul>\n      <li>Name: Sample Name</li>\n      <li>City: New Delhi</li>\n      <li>State: Delhi</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Rust program that prints the factorial of the given number.", "input": "n = 5", "output": "fn main(){ \n  let n = 5;\n  let factorial = 1;\n  // Calculate the factorial \n  for i in 1..(n+1){\n    factorial *= i; \n  }\n  println!(\"The factorial of {} is {}\",n,factorial); \n}", "category": "Python"}, {"instruction": "Generate a Python program that creates a list of numbers from 1 to 10.", "input": "", "output": "# Create a list of numbers from 1 to 10\nnumbers = list(range(1, 11))\nprint(numbers)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the highest paid employee.", "input": "", "output": "SELECT TOP 1 * \nFROM Employees\nORDER BY Salary DESC", "category": "Python"}, {"instruction": "Write a function in JavaScript which takes an array of numbers and returns the average of all the numbers.", "input": "", "output": "function getAverage(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum / arr.length;\n}", "category": "Python"}, {"instruction": "Describe the purpose of the ``await`` operator in an asynchronous JavaScript function.", "input": "", "output": "The purpose of the \"await\" operator in an asynchronous JavaScript function is to pause the execution of the function until a Promise is resolved and to return the resolved value from the Promise.", "category": "Python"}, {"instruction": "Show the output of the following array when it is printed in the console.", "input": "let arr = [5, 8, 15, 7];", "output": "[5, 8, 15, 7]", "category": "Python"}, {"instruction": "Name the grammar that is used to identify data in a Javascript string.", "input": "", "output": "The grammar used to identify data in a JavaScript string is JSON (JavaScript Object Notation).", "category": "Python"}, {"instruction": "Create a recursive function in Python which returns the sum of the elements in a given list.", "input": "", "output": "def recursive_sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + recursive_sum(arr[1:])", "category": "Python"}, {"instruction": "Replace the following placeholder with an appropriate variable in the following JavaScript code.", "input": "const user_name = __PLACEHOLDER__;\nconsole.log('Hello, ' + user_name + '!');", "output": "const user_name = 'John';\nconsole.log('Hello, ' + user_name + '!');", "category": "Python"}, {"instruction": "Write a CSS selector that selects all paragraphs within a div element with the class ``main-content``.", "input": "", "output": "div.main-content p { /* CSS selector to select all paragraphs within a div element with the class \"main-content\" */ }", "category": "Python"}, {"instruction": "Suggest a way to solve the following problem.\n\nGiven an array of integers, find the most occuring element in the array.", "input": "", "output": "One way to solve this problem is to use a hash map to store the count of each element in the array. Then, traverse the hash map to find the element which has the highest count.", "category": "Python"}, {"instruction": "Give an example of a class in Java.", "input": "", "output": "public class Animal { \n    private String species; \n    private int age; \n\n    public Animal(String species, int age) { \n        this.species = species; \n        this.age = age; \n    } \n}", "category": "Python"}, {"instruction": "Add a border to the first element of a list in CSS.", "input": "", "output": "ul li:first-child { \n    border: 1px solid black; \n}", "category": "Python"}, {"instruction": "Create a SQL query to retrieve all records in the table with the price greater than 500.", "input": "Table Name: items", "output": "SELECT * FROM items WHERE price > 500;", "category": "Python"}, {"instruction": "Calculate the total of all characters in the given string.", "input": "String: \"Hello World!\"", "output": "int sum = 0; \nfor (int i = 0; i < str.length(); i++) { \n    sum += str.charAt(i); \n} \n\nreturn sum;", "category": "Python"}, {"instruction": "Construct a function in C++ to check if two numbers are co-prime or not.", "input": "", "output": "bool isCoprime(int a, int b) \n{ \n    // Everything divides 0 \n    if (a == 0 || b == 0) \n        return false; \n  \n    // base case \n    if (a == 1 || b == 1) \n        return true; \n  \n    // a is divisible by b \n    if (a % b == 0 || b % a == 0) \n        return false; \n  \n    // a is even \n    if (a % 2 == 0)  \n        return (b % 2 == 1) ? isCoprime(a/2, b) :  \n                              isCoprime(a/2, b/2); \n  \n    // b is even \n    if (b % 2 == 0) \n        return isCoprime(a, b/2); \n  \n    // reduce larger number \n    return (a > b) ? isCoprime(a-b, b) : \n                       isCoprime(a, b-a); \n}", "category": "Python"}, {"instruction": "Create a JavaScript function to get the highest value from a given array.", "input": "", "output": "function getMax(arr) { \n    let max = 0; \n    for(let i = 0; i < arr.length; i++) { \n        if(arr[i] > max) \n            max = arr[i]; \n    } \n    return max; \n}", "category": "Python"}, {"instruction": "Debug the given Python code and make sure that it runs without errors.", "input": "def add_two_numbers(a, b):\n  return a b", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Construct a SELECT query in MySQL to find all records where the age is greater than 18", "input": "Table: Student", "output": "SELECT * FROM Student WHERE age > 18;", "category": "Python"}, {"instruction": "Render a webpage with three columns using just HTML and CSS.", "input": "", "output": "<style>\n    .container { \n        display: flex; \n        flex-direction: row; \n    } \n</style>\n\n<div class=\"container\"> \n    <div>Column 1 </div> \n    <div>Column 2 </div> \n    <div>Column 3 </div> \n</div>", "category": "Python"}, {"instruction": "Edit the function so that an element can be deleted from the list.", "input": "def delete_element(list, element):\n    # TODO", "output": "def delete_element(list, element):\n    # iterate through the list\n    for elem in list:\n        if elem == element:\n            list.remove(elem)\n    return list", "category": "Python"}, {"instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\".", "input": "\"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"", "output": "def greet(name):\n    print('Hello', name)\ngreet('John')", "category": "Python"}, {"instruction": "Create a method in JavaScript to convert a string to camel case.", "input": "", "output": "function toCamelCase(input){\n  let result = \"\";\n  let words = input.split(\" \");\n  for( let i=0; i < words.length; i++){\n    let word = words[i];\n    result += word.charAt(0).toUpperCase() + word.slice(1);\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Calculate the factorial of a positive integer in C.", "input": "", "output": "#include <stdio.h>\n\nint factorial(int n) \n{ \n  int i, fact = 1; \n  \n  // handles cases greater than 1\n  if (n > 1) { \n    for (i = 2; i <= n; i++) \n      fact = fact * i; \n  } \n  return fact; \n} \n\nint main() \n{ \n  printf(\"The factorial of 5 is %d\", factorial(5)); \n  return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find all customers who did not place an order in the last 3 months.", "input": "", "output": "SELECT * FROM Customers\nWHERE CustomerId NOT IN (\n\tSELECT CustomerId FROM Orders\n\tWHERE ORDERDATE > DATEADD(MONTH, -3, GETDATE())\n)", "category": "Python"}, {"instruction": "Design a class in Java that stores information about a person's name, age, and phone number.", "input": "", "output": "public class Person {\n  private String name;\n  private int age;\n  private String phoneNumber;\n\n  public Person(String name, int age, String phoneNumber) {\n    this.name = name;\n    this.age = age;\n    this.phoneNumber = phoneNumber;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getAge() {\n    return age;\n  }\n\n  public String getPhoneNumber() {\n    return phoneNumber;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  public void setPhoneNumber(String phoneNumber) {\n    this.phoneNumber = phoneNumber;\n  }\n\n} //end class", "category": "Python"}, {"instruction": "Write a CSS code to make an element's background color red", "input": "", "output": "element {\n    background-color: red;\n}", "category": "Python"}, {"instruction": "Edit the following code to convert it into a generic function", "input": "def add_two_numbers(a, b):\n    return a + b", "output": "def add_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Develop a function that takes a dictionary and returns a list", "input": "{\"Name\": \"John\", \"Age\": 45}", "output": "def dict_to_list(d):\n    lst = []\n    for k, v in d.items():\n        lst.append((k, v))\n    return lst", "category": "Python"}, {"instruction": "Create a Python class for Animal", "input": "", "output": "class Animal:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type", "category": "Python"}, {"instruction": "Implement a neural network that classifies an MNIST digit into one of the 10 classes.", "input": "", "output": "import tensorflow as tf\n# Load the mnist data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Normalize the input from 0-255 to 0-1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n# Build the model \nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\n# Add two hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n# Add the output layer\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n# Train the model\nmodel.fit(x_train, y_train, epochs=3)\n# Evaluate the accuracy\nval_loss, val_acc = model.evaluate(x_test, y_test)\nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Design a system that can take an integer list as its input and return a sorted list", "input": "[70, 2, 8, 45, 23]", "output": "[2, 8, 23, 45, 70]", "category": "Python"}, {"instruction": "Write a JavaScript program to detect if a given element exists in an array or not.", "input": "Array: [1,2,3,4,5]\nSearch element: 3", "output": "function findElement(arr, element){\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      return true\n    }\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Convert a given string in the form of a camelCase notation to snake_case notation", "input": "camelCaseString", "output": "camel_case_string", "category": "Python"}, {"instruction": "For a given two dimensional array, convert it into a valid JSON object", "input": "Input array: [[1,2,3], \n              [4,5,6], \n              [7,8,9]", "output": "{\n  \"1\": [1,2,3],\n  \"2\": [4,5,6],\n  \"3\": [7,8,9]\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to print the total number of items in an array.", "input": "arr = [1, 10, 20, 30, 40]", "output": "console.log(arr.length)", "category": "Python"}, {"instruction": "Write a HTML code to create an input field with a placeholder.", "input": "", "output": "<input type=\"text\" placeholder=\"Enter Your Email Address\">", "category": "Python"}, {"instruction": "Create an SQL query to get the most recent customer review.", "input": "Table Name: customer_reviews \n\nColumns: review_id, customer_name, review_date\n\nSample Data: \n\n1, John, 2020-01-01 \n2, Andrea, 2020-02-02 \n3, Abhishek, 2020-05-01 \n4, Sarah, 2020-03-05", "output": "SELECT customer_name, review_date \nFROM customer_reviews \nORDER BY review_date DESC \nLIMIT 1;", "category": "Python"}, {"instruction": "Create a MySQL query to get the sum of the sales of each product.", "input": "Table Name: sales \n\nColumns: product_id, product_name, sales\n\nSample Data: \n\n1, shoes, 10\n2, clothes, 20\n3, hats, 5\n4, shirts, 15\n5, jeans, 35", "output": "SELECT product_name, SUM(sales) AS total_sales FROM sales GROUP BY product_name;", "category": "Python"}, {"instruction": "Write an SQL query to create a table called \"students\"", "input": "", "output": "CREATE TABLE students (\n id INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,\n name VARCHAR(50) NOT NULL,\n age INT(11) NOT NULL\n);", "category": "Python"}, {"instruction": "Describe what is ternary operator and provide an example.", "input": "", "output": "A ternary operator is an operator that takes three arguments and returns one of two values based on a condition. It is a shorthand way to write a standard if-else statement. For example, the following expression evaluates to either \"true\" or \"false\" depending on the value of \"x\": (x > 0) ? \"true\" : \"false\".", "category": "Python"}, {"instruction": "Rewrite the following piece of code to check if a string is a palindrome or not.", "input": "String text = \"malayalam\"", "output": "def is_palindrome(text): \n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True", "category": "Python"}, {"instruction": "Write a code to reverse a string in Java.", "input": "", "output": "public class Reverse {\n\n    public static void main(String[] args) {\n\n        String str = \"Hello World\";\n\n        // Output is reversed string\n        System.out.println(reverseString(str));\n    }\n\n    public static String reverseString(String str)\n    {\n        StringBuilder strBuilder = new StringBuilder();\n        char[] strChars = str.toCharArray();\n\n        for (int i = strChars.length - 1; i >= 0; i--) {\n            strBuilder.append(strChars[i]);\n        }\n\n        return strBuilder.toString();\n    }\n}", "category": "Python"}, {"instruction": "Generate a random hexadecimal string with a length of 8 characters.", "input": "", "output": "import random\n\ndef generate_hex():\n    hex_values = '0123456789ABCDEF'\n    string_length = 8\n    hex_string = '' \n    for _ in range(string_length): \n        hex_character = random.choice(hex_values) \n        hex_string += hex_character\n    return hex_string\n\nif __name__ == '__main__':\n    print(generate_hex())", "category": "Python"}, {"instruction": "Construct an array in Java containing the elements 3, 5, 7, 9.", "input": "", "output": "int[] arr = {3, 5, 7, 9};", "category": "Python"}, {"instruction": "Find the decimal value of the binary number 0110110.", "input": "", "output": "54.", "category": "Python"}, {"instruction": "Write a jQuery code snippet to change the text color of all p tags to red.", "input": "", "output": "$('p').css('color', 'red');", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm in JavaScript.", "input": "", "output": "function bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i=0; i < arr.length; i++) {\n      if (arr[i] > arr[i+1]) {\n        let temp = arr[i];\n        arr[i] = arr[i+1];\n        arr[i+1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}", "category": "Python"}, {"instruction": "Identify the data type for the value in the given statement.", "input": "value = 2 / 3", "output": "float.", "category": "Python"}, {"instruction": "Create an in-place version of selection sort in Python.", "input": "arr = [5, 2, 4, 6, 8, 1]", "output": "def selection_sort(arr): \n\n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Using SQL, return all unique books from the library database.", "input": "Table name: Library\n\nColumns: Id, Title", "output": "SELECT DISTINCT Title\nFROM Library;", "category": "Python"}, {"instruction": "Develop an algorithm in Python to reverse a given string.", "input": "string = \"Hello\"", "output": "def reverse(string):\n    str = \"\" \n    for i in string: \n        str = i + str \n    return str\n  \nstring = \"Hello\"\n\nprint(reverse(string))", "category": "Python"}, {"instruction": "Write a JavaScript code snippet that splits a string into an array of words.", "input": "string = \"Hello World\"", "output": "let string = \"Hello World\";\nlet words = string.split(\" \"); \nconsole.log(words);", "category": "Python"}, {"instruction": "Use SQL to return the names of customers who have purchased books from the store.", "input": "Table names: Customers, Purchases", "output": "SELECT Customers.Name \nFROM Customers \nINNER JOIN Purchases \nON Customers.Id = Purchases.Customer_Id \nWHERE Purchases.Product_Category = 'Book';", "category": "Python"}, {"instruction": "Write a query to return the 3 most popular names from the table named People.", "input": "Table name: People\n\nColumns: Id, Name", "output": "SELECT Name \nFROM People \nGROUP BY Name \nORDER BY COUNT(Id) DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Compute the GCD of two numbers in Python.", "input": "a = 10, b = 15", "output": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) \na = 10\nb = 15\ngcd = gcd(a,b) \nprint(gcd)", "category": "Python"}, {"instruction": "Suggest a code in C# to generate a random number between 1 and 5.", "input": "", "output": "Random random = new Random();\nint randomNumber = random.Next(1, 6);\nConsole.WriteLine(randomNumber);", "category": "Python"}, {"instruction": "How would you convert the following JSON string to a JavaScript object?", "input": "\"{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}\"", "output": "let obj = JSON.parse('{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}');\nconsole.log(obj);", "category": "Python"}, {"instruction": "Create a variable to store the result of 2 + 5", "input": "", "output": "result = 7", "category": "Python"}, {"instruction": "Classify the following sentence into one of the seven categories.", "input": "Sentence: My cat came home late last night", "output": "Animal", "category": "Python"}, {"instruction": "Detect if the following string is a palindrome or not", "input": "String: rabcr", "output": "false", "category": "Python"}, {"instruction": "Write a code to output a substring of the given string", "input": "String: Hello World\nStart: 3\nEnd: 5", "output": "\"\"\"\nWrite a code to output a substring of the given string\n\"\"\"\n\ndef substring(inp_str, start, end):\n    return inp_str[start:end]\n\nif __name__ == '__main__':\n    inp_str = \"Hello World\" \n    start = 3\n    end = 5\n    print(substring(inp_str, start, end))", "category": "Python"}, {"instruction": "Generate an SQL query to get the top 5 oldest people in a database table.", "input": "Table: people", "output": "SELECT *\nFROM people\nORDER BY age DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Generate a class in Java that validates if a given number is a prime or not.", "input": "Number: 13", "output": "public class PrimeNumberValidator {\n\n    public static boolean validate(int number) {\n        if (number < 2) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "category": "Python"}, {"instruction": "Generate a function that prints all combination of unique integer elements from an array.", "input": "Array: [1,2,3]", "output": "def print_all_combinations(arr):\n    n = len(arr)\n    result = []\n    def combinations(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n    print(*result, sep = \"\\n\")", "category": "Python"}, {"instruction": "Compute the maximum and minimum number from the following list.", "input": "my_list = [2, 4, 5, 7, 9]", "output": "my_list = [2, 4, 5, 7, 9]\n\n# Program to compute maximum and minimum number\n\nmax_num = max(my_list)\nmin_num = min(my_list)\n\nprint(f\"The maximum number from the list is {max_num} and the minimum number is {min_num}.\")", "category": "Python"}, {"instruction": "Implement a class to calculate the sum of two numbers.", "input": "", "output": "# Program to calculate sum of two numbers\n\nclass Sum:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n    \n    def calculate_sum(self):\n        return self.num1 + self.num2\n\nnum1 = 10\nnum2 = 20\n\ns = Sum(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {s.calculate_sum()}.\")", "category": "Python"}, {"instruction": "Check if the following word is a palindrome", "input": "word = \"level\"", "output": "word = \"level\"\n\n# Program to check if a word is a palindrome\n\nis_palindrome = True\nfor i in range(len(word)//2):\n    if word[i] != word[len(word)-1-i]:\n        is_palindrome = False\n        break\n\nif is_palindrome:\n    print(f\"{word} is a palindrome.\")\nelse:\n    print(f\"{word} is not a palindrome.\")", "category": "Python"}, {"instruction": "Implement a custom defined length function that works with strings.", "input": "", "output": "# Implementation of custom length function\n\ndef length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nprint(length(\"Hello World!\"))", "category": "Python"}, {"instruction": "Extract the next 5 worksdays in JavaScript.", "input": "", "output": "let nextFiveWorkingDays = [];\n\nlet today = new Date();\nfor (let i = 1; i <= 5; i++) {\n    today.setDate(today.getDate() + 1);\n    if (today.getDay() > 0 && today.getDay() < 6) \n        nextFiveWorkingDays.push(today);\n}\n\nconsole.log(nextFiveWorkingDays);", "category": "Python"}, {"instruction": "Create a program to subtract the two numbers from the following input.", "input": "first_num = 4\nsecond_num = 2", "output": "first_num = 4\nsecond_num = 2\n\n# Program to subtract two numbers\ndiff = first_num - second_num\n\nprint(f\"The difference between {first_num} and {second_num} is {diff}.\")", "category": "Python"}, {"instruction": "Edit the following code so that it will print out all the integer numbers between 0 and 10.", "input": "for x in range(10):\n\u00a0 \u00a0 print(x)", "output": "for x in range(11):\n\u00a0 \u00a0 print(x)", "category": "Python"}, {"instruction": "Write the equivalent Java code for the following Python code.", "input": "x = [1, 2, 3, 4]\nfor x in x:\n   print(x)", "output": "int[] x = {1, 2, 3, 4}; \nfor (int i = 0; i < x.length; i++) {\n    System.out.println(x[i]);\n}", "category": "Python"}, {"instruction": "Construct a Fibonacci Heap class.", "input": "", "output": "\"\"\"\nConstruct a Fibonacci Heap class\n\"\"\"\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min = None\n        self.nodes = []\n    \n    def insert(self, node):\n        self.nodes.append(node)\n        if self.min is None or node.key < self.min.key:\n            self.min = node\n    \n    def extract_min(self):\n        min_node = self.min\n        self.min = None\n        return min_node \n\nif __name__ == '__main__':\n    heap = FibonacciHeap()\n    node1 = Node(3)\n    node2 = Node(10)\n    heap.insert(node1)\n    heap.insert(node2)\n    print(heap.extract_min().data) # prints 3", "category": "Python"}, {"instruction": "Construct a Linked List class.", "input": "", "output": "\"\"\"\nConstruct a Linked List class\n\"\"\"\n\nclass Node: \n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_node(self, data):\n        temp = Node(data) \n        temp.next = self.head\n        self.head = temp\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\nif __name__ == '__main__':\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(3)\n    llist.add_node(5)\n    llist.add_node(7)\n    llist.print_list() # prints 7 5 3 1", "category": "Python"}, {"instruction": "How can you convert a binary search tree into an array?", "input": "", "output": "One way to convert a binary search tree into an array is to first use an inorder traversal to visit all the nodes of the tree in order. We can then store the node values into an array as we traverse. This will result in an array containing the elements in ascending order, which is the same order they would appear in the binary search tree. This approach runs in O(n) time complexity.", "category": "Python"}, {"instruction": "Describe an efficient way to find the minimum value in an unsorted array.", "input": "", "output": "One efficient way to find the minimum value in an unsorted array is to make use of the divide-and-conquer approach. We can split the array into two halves and find the minimum element in each of them. Then we can compare the two minimum elements to find the global minimum in the array. This approach runs in O(log n) time complexity.", "category": "Python"}, {"instruction": "Write a code to implement Multiple Linear Regression for a dataset.", "input": "", "output": "\"\"\"\nA code to implement Multiple Linear Regression for a given dataset\n\"\"\"\n\nimport numpy as np\n\ndef multiple_linear_regression(X, y):\n    '''\n    This function accepts feature matrix X and target vector y,\n    and returns the coefficients of the determined multiple linear regression model.\n    '''\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1) \n    #concatenate a column of ones to X\n    return np.linalg.inv(X.T @ X) @ X.T @ y", "category": "Python"}, {"instruction": "Construct a python program to determine if a number is prime or composite.", "input": "", "output": "# Program to determine whether a number is prime or composite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")", "category": "Python"}, {"instruction": "Modify the following code to prevent SQL injection attacks.", "input": "query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"", "output": "import MySQLdb\n\n\nquery = \"SELECT * FROM users WHERE username = %s\"\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"pass\", db=\"mydb\")\ncur = db.cursor()\ncur.execute(query, (username,))", "category": "Python"}, {"instruction": "Sort the following array of strings alphabetically in C++.", "input": "string array[] = {\"sun\", \"mon\", \"tues\", \"wednes\", \"thurs\"};", "output": "#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    string array[] = {\"sun\", \"mon\", \"tues\", \"wednes\", \"thurs\"};\n    int size = sizeof(array) / sizeof(array[0]);\n\n    sort(array, array + size);\n\n    for (int i = 0; i < size; i++)\n        cout << array[i] << \" \";\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Java program to print the nth number in the Fibonacci sequence.", "input": "", "output": "public class FibonacciExample1{\n    \n    public static void main(String args[]) {\n        int n = 18, t1 = 0, t2 = 1;\n        System.out.print(\"First \" + n + \" terms: \");\n        \n        for (int i = 1; i <= n; ++i)\n        {\n            System.out.print(t1 + \" + \");\n            \n            int sum = t1 + t2;\n            t1 = t2;\n            t2 = sum;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a list comprehension to generate a new list of composed strings.", "input": "names = [\"John\", \"Steve\", \"Bob\"]\nblanks = [\"__'s cat\", \"__'s dog\", \"__'s parrot\"]", "output": "[name + blank for name in names for blank in blanks]", "category": "Python"}, {"instruction": "Sort this array of dictionaries by the value of 'popularity' in descending order.", "input": "[\n  {\n    \"name\": \"Apple\",\n    \"popularity\": 5\n  },\n  {\n    \"name\": \"Orange\",\n    \"popularity\": 2\n  },\n  {\n    \"name\": \"Mango\",\n    \"popularity\": 3\n  },\n  {\n    \"name\": \"Grapes\",\n    \"popularity\": 4\n  }\n]", "output": "arr.sort(key=lambda dict: dict['popularity'],reverse=True)", "category": "Python"}, {"instruction": "Write a code that adds two integers without using any arithmetic operators.", "input": "", "output": "def add_two_integers(a, b): \n    while b != 0:\n        carry = a & b     \n        a = a ^ b      \n        b = carry << 1  \n    return a", "category": "Python"}, {"instruction": "Make a deep copy of an object using JSON.", "input": "", "output": "import json\n\ndef deep_copy(obj):\n    return json.loads(json.dumps(obj))", "category": "Python"}, {"instruction": "Create a function for detecting changes in an array of numbers.", "input": "", "output": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] != numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results", "category": "Python"}, {"instruction": "Write a Python script to find the prime factors of a number.", "input": "Number: 24", "output": "\"\"\"\nWrite a Python script to find the prime factors of a number\n\"\"\"\n\ndef find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n            num //= i\n        if count > 0:\n            prime_factors.append((i, count))\n \n    return prime_factors\n\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)", "category": "Python"}, {"instruction": "Create a web scraper that extracts data from a given URL.", "input": "URL: https://www.reuters.com/article/us-oil-production/u-s-oil-production-touches-a-record-high-idUSKCN1VA19P", "output": "\"\"\"\nCreate a web scraper that extracts data from a given URL\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_data_from_url(url):\n    response = requests.get(url)\n    html = BeautifulSoup(response.text, 'html.parser')\n    title = html.find(\"h1\", {\"class\": \"ArticleHeader_headline\"}).text\n    try:\n        body = html.find_all(\"div\", {\"class\": \"StandardArticleBody_body\"})[0].text\n    except IndexError:\n        body = \"\" \n    return title, body\n\nif __name__ == '__main__':\n    url = 'https://www.reuters.com/article/us-oil-production/u-s-oil-production-touches-a-record-high-idUSKCN1VA19P'\n    title, body = get_data_from_url(url)\n    print(title)\n    print(body)", "category": "Python"}, {"instruction": "Design a CSS page that displays Hello in two different fonts of red colour.", "input": "", "output": "<style>\n    h1 {\n        font-size: 30px;\n        color: red;\n    }\n    p {\n        font-size: 25px;\n        color: red;\n    }\n</style>\n\n<h1>Hello</h1>\n<p>Hello</p>", "category": "Python"}, {"instruction": "Create an SQL statement to sort the table 'employees' by salary in descending order.", "input": "", "output": "SELECT * FROM employees ORDER BY salary DESC;", "category": "Python"}, {"instruction": "Design an HTML page that prints out \"Hello, World!\" in two columns.", "input": "", "output": "<html>\n<head>\n\t<title>Hello, World!</title>\n</head>\n<body>\n\t<div style=\"display: flex;\"><div>Hello,</div><div> World!</div></div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a C++ program that takes two integers as an input and outputs their product.", "input": "5  6", "output": "#include <iostream>\n\nint main()\n{\n int a, b, product;\n std::cout<<\"Enter two integers: \";\n std::cin>>a>>b;\n product = a*b;\n std::cout<<\"The product of the two numbers is \"<<product;\n\n return 0;\n}", "category": "Python"}, {"instruction": "Explain how to use unsupervised machine learning to classify the following dataset", "input": "DataSet:\nA (2, 3, 4)\nB (5, 6, 7)\nC (8, 9, 10)", "output": "Unsupervised machine learning methods can be used to classify the given dataset by applying clustering algorithms. Clustering algorithms group objects which are similar to each other into clusters, while also attempting to keep the clusters distinct from each other. A clustering algorithm could be used to group the given dataset together and form distinct clusters. Each cluster would represent a distinct group, and each group would have a distinct set of characteristics. For example, the algorithm could group A, B, and C into one cluster, thus showing that each entry in the dataset has similar characteristics.", "category": "Python"}, {"instruction": "Explain how you would use machine learning to predict the price of a certain type of car.", "input": "", "output": "To use machine learning to predict the price of a certain type of car, we need to collect data about similar cars, including features such as make, model, year, engine size, and condition. We would then use this data to train a machine learning model to learn the correlation between these features and the car's price. The model would then be used to predict the price based on the features of any given car.", "category": "Python"}, {"instruction": "Compile this piece of C code to an executable program", "input": "#include <stdio.h>\n\nint main()\n{\n    int a = 5;\n    int b = 10;\n    int c = a + b;\n    printf(\"%d\",c);\n    return 0;\n}", "output": "gcc -o output a.c\n./output", "category": "Python"}, {"instruction": "Write a class in JavaScript that validates a given email address.", "input": "", "output": "class EmailValidator {\n    constructor() {}\n\n    isValidEmail(email) {\n        var re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n        return re.test(email);\n    }\n}", "category": "Python"}, {"instruction": "How to write a jQuery code to hide a HTML element?", "input": "", "output": "$(document).ready(function(){\n    $(\"#element_id\").hide();\n});", "category": "Python"}, {"instruction": "How to write a React component to render an array of numbers?", "input": "", "output": "class MyComponent extends React.Component {\n  render() {\n    const numbers = [1, 2, 3, 4, 5];\n    return(\n      <div>\n        {numbers.map(number => <p key={number}>{number}</p>)}\n      </div>\n    );\n  }\n}", "category": "Python"}, {"instruction": "How to write a CSS style to make a text larger?", "input": "", "output": ".className {\n  font-size: larger;\n}", "category": "Python"}, {"instruction": "How to write an HTML page that displays the number from 1 to 10?", "input": "", "output": "<html>\n  <body>\n    <div>\n    <h2>Number from 1 to 10</h2>\n      <ul>\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n        <li>5</li>\n        <li>6</li>\n        <li>7</li>\n        <li>8</li>\n        <li>9</li>\n        <li>10</li>\n      </ul>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct a query in SQL to get the names of all customers who have purchased a product with price greater than $50.", "input": "", "output": "SELECT customer_name FROM customers \nINNER JOIN orders ON orders.customer_id = customers.customer_id \nINNER JOIN products ON orders.product_id = products.product_id \nWHERE products.price > 50", "category": "Python"}, {"instruction": "Write a function in C# to insert a character into a string at a given index.", "input": "", "output": "public static string InsertCharAtIndex(string s, char c, int index)\n{\n    return s.Substring(0, index) + c + s.Substring(index);\n}", "category": "Python"}, {"instruction": "How would you add two matrices in C++?", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \n// Dimensions of matrices \n#define M 3 \n#define N 3 \n  \n// Function to add two matrices \nvoid addMatrices(int A[][N], int B[][N], int C[][N]) \n{ \n    int i, j; \n    for (i = 0; i < M; i++) \n        for (j = 0; j < N; j++) \n            C[i][j] = A[i][j] + B[i][j]; \n}", "category": "Python"}, {"instruction": "How would you search for an element in an array using a linear search algorithm in Python?", "input": "", "output": "def linearSearch(arr, x): \n \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n \n    return -1", "category": "Python"}, {"instruction": "Create an array in JavaScript containing the numbers one to ten.", "input": "", "output": "let numbers = [1,2,3,4,5,6,7,8,9,10];", "category": "Python"}, {"instruction": "How would you write a function in Python for generating a Fibonacci sequence?", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a fizz-buzz Python program to print numbers from 1 to 50 but for multiple of 3 print \u201cFizz\u201d and for the multiple of 5 print \u201cBuzz\u201d and for numbers which are multiple of both 3 and 5 print \u201cFizzBuzz\u201d.", "input": "", "output": "for num in range(1,51): \n    if num % 3 == 0 and num % 5 == 0: \n        print(\"FizzBuzz\") \n    elif num % 3 == 0: \n        print(\"Fizz\") \n    elif num % 5 == 0: \n        print(\"Buzz\") \n    else: \n        print(num)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to extract all the even numbers from a given list.", "input": "list = [3,4,5,6,7,8]", "output": "evens_list = [num for num in list if num % 2 == 0]", "category": "Python"}, {"instruction": "Write a Python function to remove all elements from a set in another set", "input": "Set A = {1, 2, 3, 4} \nSet B = {2, 3}", "output": "def remove_from_set(A, B):\n  for element in B:\n    A.discard(element)\n  return A\n\nA = {1, 2, 3, 4} \nB = {2, 3}\n\nprint(remove_from_set(A,B)) \n# Output: {1, 4}", "category": "Python"}, {"instruction": "Identify the purpose of the given lines of code.", "input": "# Create a boolean variable\nis_valid = True", "output": "The given code creates a boolean variable called is_valid and assigns it the value of True.", "category": "Python"}, {"instruction": "Create a Fibonacci series of n numbers.", "input": "n = 5", "output": "def fibonacci_sequence(n):\n    a, b = 0, 1\n    fib_series = [a]\n    while b < n:\n        fib_series.append(b)\n        a, b = b, a+b\n    return fib_series\n\nprint(fibonacci_sequence(n)) #[0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Explain what a memory leak is.", "input": "", "output": "A memory leak is a type of software bug where a program or process allocates memory but is unable to release it back to the operating system, causing an ever-growing consumption of available memory while the program is running. This can cause a decrease in performance, or the program may eventually crash when all available memory is exhausted.", "category": "Python"}, {"instruction": "Format the given string to capital letters and display the output.", "input": "string = \"this is a text\"", "output": "string = \"THIS IS A TEXT\"\nprint(string)", "category": "Python"}, {"instruction": "How to create an HTML form to accept user input?", "input": "", "output": "<form>\n  <input type=\"text\" name=\"username\" placeholder=\"Username\">\n  <input type=\"password\" name=\"password\" placeholder=\"Password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write an R script to compute the sum of all the elements of a given list.", "input": "list = c(1, 2, 3, 4, 5)", "output": "sum <- 0\n\nfor(i in list){\n  sum <- sum + i\n}\n\nprint(sum)\n\n# Output: 15", "category": "Python"}, {"instruction": "How to create a GraphQL query to fetch the name and age of all users from the table 'users'?", "input": "", "output": "query getUserInfo {\n  users {\n    name\n    age\n  }\n}", "category": "Python"}, {"instruction": "Explain the purpose of stack in programming.", "input": "", "output": "The stack is a data structure which stores data in a Last In First Out (LIFO) manner. It is used in programming for various operations such as function calls, expression evaluation, storing local variables, and peripheral operations such as undo or redo. The stack is an area of memory in which programs temporarily store data as they execute.", "category": "Python"}, {"instruction": "Create a conditional statement in C++ to check if a given number is a two-digit number or not.", "input": "", "output": "if (number >= 10 && number <= 99)\n    cout << \"Number is a two-digit number.\" << endl;\nelse\n    cout << \"Number is not a two-digit number.\" << endl;", "category": "Python"}, {"instruction": "Generate a function to flatten a nested list.", "input": "list = [1, 2, [3, 4, [5]], [[6], 7]]", "output": "def flatten_list(list):\n    s=[]\n    \n    for v in list:\n        if isinstance(v, list):\n            s+=flatten_list(v)\n        else:\n            s.append(v)\n    \n    return s", "category": "Python"}, {"instruction": "Generate an HTML form to create a user profile.", "input": "N/A", "output": "<form action=\"userprofile.php\" method=\"post\">\n    <label for=\"username\">Username</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\" required/><br>\n    <label for=\"email\">Email</label><br>\n    <input type=\"email\" id=\"email\" name=\"email\" required/><br>\n    <label for=\"password\">Password</label><br>\n    <input type=\"password\" id=\"password\" name=\"password\" required/><br>\n    <input type=\"submit\" value=\"Create Profile\" />\n</form>", "category": "Python"}, {"instruction": "Write a CSS code to make a dive tag red with a background color of yellow.", "input": "", "output": "div {\n  background-color: yellow;\n  color: red;\n}", "category": "Python"}, {"instruction": "Write a sql query to select all the employees from table Employee older than 45 years.", "input": "Table employees: \nname, email, age", "output": "SELECT * \nFROM employees \nWHERE AGE > 45;", "category": "Python"}, {"instruction": "Compose a new CSS class to give the text element a background color of lightgreen.", "input": "", "output": ".lightgreen-background{\n    background-color: lightgreen;\n}", "category": "Python"}, {"instruction": "Edit the following program to add all the numbers in the given array.", "input": "let numbers = [2, 10, 5, 4, 3];\n\nfunction add(arr) {\n  let total = 0;\n  arr.forEach(num => total += num);\n  //TODO\n  return total;\n}", "output": "let numbers = [2, 10, 5, 4, 3];\n\nfunction add(arr) {\n  let total = 0;  \n  arr.forEach(num => total += num);\n  total = total/arr.length;\n  return total;\n}", "category": "Python"}, {"instruction": "Edit the existing HTML code to create a list with bullets.", "input": "<p>My favorite fruits are:\nApple, Banana, Orange</p>", "output": "<p>My favorite fruits are:</p>\n<ul>\n  <li>Apple</li>\n  <li>Banana</li>\n  <li>Orange</li>\n</ul>", "category": "Python"}, {"instruction": "Write Java code to search for the given element in the list and return its index if it exists.", "input": "list = [4, 8, 15, 16, 23, 42], element = 15", "output": "public int findElement (int[] list, int element) {\n  for (int i = 0; i < list.length; i++) {\n    if (list[i] == element)\n      return i;\n  }\n  return -1;\n}", "category": "Python"}, {"instruction": "Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.", "input": "nums = [1, 2, 3, 4, 5], sum = 8", "output": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]", "category": "Python"}, {"instruction": "Update the code so that the function will add all numbers in the array.", "input": "function add(arr) {\n  let total = 0;\n  arr.forEach(num => total += num);\n  //TODO\n  return total;\n}", "output": "function add(arr) {\n  let total = 0;  \n  arr.forEach(num => total += num);\n  total = total/arr.length;\n  return total;\n}", "category": "Python"}, {"instruction": "Compute the overall rating for each product as the weighted sum of ratings given for each feature.", "input": "product_id | feature_id | rating \n1 | 1 | 5 \n1 | 2 | 4 \n1 | 3 | 2", "output": "SELECT product_id, SUM(rating * weight) AS Overall_Rating\nFROM (\n  SELECT product_id, feature_id, rating, weight \n  FROM products \n  INNER JOIN features \n  ON products.product_id = features.product_id\n) tmp \nGROUP BY product_id;", "category": "Python"}, {"instruction": "Write an SQL query and to output an ordered list of employees with their highest salaries.", "input": "", "output": "SELECT e.name, MAX(s.salary) AS Highest_Salary\nFROM employee e INNER JOIN salary s\nON e.id = s.employee_id\nGROUP BY e.name\nORDER BY Highest_Salary DESC;", "category": "Python"}, {"instruction": "Using the given array, write a Javascript program to sort the elements in descending order.", "input": "let numbers = [2, 10, 5, 4, 3];", "output": "let numbers = [2, 10, 5, 4, 3];\nnumbers.sort((a,b) => b - a);\nconsole.log(numbers); //output: [10, 5, 4, 3, 2]", "category": "Python"}, {"instruction": "Transform the following regular expression so that it matches any string that doesn't contain \"cat\".", "input": "let regex = /cat/", "output": "let regex = /^(?:(?!cat).)*$/", "category": "Python"}, {"instruction": "Insert the given condition into the SQL query to filter the output based on it.", "input": "SELECT * FROM employees WHERE\ncondition: fname = 'John'", "output": "SELECT * FROM employees WHERE fname = 'John';", "category": "Python"}, {"instruction": "Create a generator which generates the first ten square numbers.", "input": "", "output": "def generate_squares():\n    for num in range(1, 11):\n        yield num**2\n\nfor square in generate_squares():\n    print(square, end=', ') # Output: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100,", "category": "Python"}, {"instruction": "Generate a random number between 0 and 1 using the random module in Python.", "input": "", "output": "import random\n\nrandom_number = random.random()\nprint(random_number) # Output: 0.00549342319234", "category": "Python"}, {"instruction": "Store the given data in a dictionary structure in python.", "input": "key: name \nvalue: John", "output": "mydict = {\n    \"name\": \"John\"\n}", "category": "Python"}, {"instruction": "Calculate the maximum of three numbers in Java.", "input": "int a = 10; \nint b = 15;\nint c = 20;", "output": "int max = Math.max(a, Math.max(b, c));\nSystem.out.println(\"Maximum of the three numbers is: \"+max);", "category": "Python"}, {"instruction": "Load the given JSON data using Javascript.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30\n}", "output": "var data = {\n  \"name\": \"John\",\n  \"age\": 30\n};\n \nvar jsonData = JSON.parse(data);\n \nconsole.log(jsonData);", "category": "Python"}, {"instruction": "Create a simple HTML webpage without using any external stylesheets.", "input": "", "output": "<html>\n<head>\n  <title>My Web Page</title>\n</head>\n<body>\n  <h1>Welcome to My Web Page</h1>\n  <p>This is my first web page.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Add try-catch blocks to the following code.", "input": "while True:\n    try:\n        x = int(input('Please input a number:'))\n        break\n    except ValueError:\n        print('Enter a valid number!')", "output": "while True:\n    try:\n        x = int(input('Please input a number:'))\n        break\n    except ValueError:\n        print('Enter a valid number!')\n        try:\n            print('Retry') \n        except:\n            print('Failed to retry')", "category": "Python"}, {"instruction": "Provide the output from executing the given program.", "input": "matrix = [\n  [1, 2, 3], \n  [4, 5, 6], \n  [7, 8, 9]\n]\nfor row in matrix:\n    print(row[1])", "output": "2\n5\n8", "category": "Python"}, {"instruction": "Implement a breadth-first search algorithm to find the shortest path between two nodes.", "input": "", "output": "def BFS(graph, start, end):\n\t# Create an empty queue \n    queue = []\n    # Create a set to store visited nodes\n    visited = set()\n    # Enqueue the starting node\n    queue.append([start])\n    while queue:\n        # Get the first path and process it\n        path = queue.pop()\n        # Get the last node from the path\n        node = path[-1]\n        \n        if node == end:\n            return path\n        elif node not in visited:\n            # Create a list of neighbours\n            neighbours = graph[node]\n            # Go through all neighbours\n            for neighbour in neighbours:\n                # Create a new path with the neighbour\n                new_path = list(path)\n                new_path.append(neighbour)\n                # Add the new path to the queue\n                queue.append(new_path)\n            # Mark the node as visited\n            visited.add(node)\n    return None", "category": "Python"}, {"instruction": "Describe the main use of a router in computer networking.", "input": "", "output": "A router is a networking device that forwards data packets between networks. It works by examining the destination address of each packet and forwarding it to the correct final destination. Routers play an important role in computer networks, helping to connect networks together and routing traffic between them efficiently. They also provide security by helping to control network access and creating virtual networks to segment traffic.", "category": "Python"}, {"instruction": "Write a Java program to calculate the sum of the series 1^3+2^3+3^3+.....+n^3", "input": "", "output": "public class SumOfSeries {\n  \n    static int calculateSum(int lastNumber) { \n        int sum = 0; \n  \n        for (int i = 1; i <= lastNumber; i++) {\n            sum = sum + (int)Math.pow(i, 3); \n        }\n  \n        return sum; \n    } \n  \n    public static void main(String[] args) { \n        int lastNumber = 4; \n        System.out.println(calculateSum(lastNumber)); \n    } \n} \n// Output: 100", "category": "Python"}, {"instruction": "Construct a regex pattern to validate an email address.", "input": "", "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "category": "Python"}, {"instruction": "Create a JavaScript object to contain employee data.", "input": "", "output": "let employee = {\n    name: \"John\",\n    age: 25,\n    job: \"developer\",\n    address: {\n        city: \"Berlin\",\n        street: \"Main Street\"\n    }\n}", "category": "Python"}, {"instruction": "Write a code to reverse a sentence word by word.", "input": "This is a sentence", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n    \nprint(reverse_words('This is a sentence')) # Output: sihT si a ecnetnes", "category": "Python"}, {"instruction": "Write a SQL query to show the 20 most common car makes in a given table.", "input": "Cars Table\n\n| make     | model | year |\n|----------|-------|------|\n| Honda    | Civic | 2019 |\n| Ford     | F150  | 2018 |\n| Toyota   | Camry | 2017 |\n| Chevrolet| Cruze | 2016 |", "output": "SELECT make, COUNT(*)\nFROM Cars\nGROUP BY make\nORDER BY COUNT(*) DESC\nLIMIT 20", "category": "Python"}, {"instruction": "Write a Python script to find all the numbers which are divisible by 7, but are not multiples of 5; between 2000 and 3200 (both included).", "input": "", "output": "res = []\nfor i in range(2000, 3200):\n    if (i%7 == 0) and (i%5 != 0):\n        res.append(str(i))\n\nprint(','.join(res))", "category": "Python"}, {"instruction": "Write a recursive function in JS to traverse a multi-dimensional array.", "input": "let arr = [\n  [1, 2],\n  [3, 4],\n  [5, 6]\n];", "output": "function traverseArray (arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      traverseArray(arr[i]);\n    } else {\n      console.log(arr[i]);\n    }\n  }\n}\n\ntraverseArray(arr);\n// Output: 1, 2, 3, 4, 5, 6", "category": "Python"}, {"instruction": "Write a JS code to detect peaks for an array of numbers.", "input": "[4, 2, 3, 6, 10, 1, 12, 5]", "output": "let numArray = [4, 2, 3, 6, 10, 1, 12, 5];\nlet peakIndexes = [];\nfor (let i = 1; i < numArray.length - 1; i++) {\n    let left = numArray[i - 1];\n    let center = numArray[i];\n    let right = numArray[i + 1];\n\n    if (center > left && center > right) {\n        peakIndexes.push(i);\n    }\n}\n\nconsole.log(peakIndexes);\n// Output: [3, 5, 6]", "category": "Python"}, {"instruction": "Write a regular expression to validate a string which contains the characters \"a\", \"b\", \"c\".", "input": "", "output": "^[a-c]+$", "category": "Python"}, {"instruction": "Write a working SQL query to group employees by city and order by their salary.", "input": "Employees Table\n\n| employee_id | name     | city    | salary |\n|-------------|----------|---------|--------|\n| 1           | Joe      | London  | 50     |\n| 2           | Frank    | Paris   | 40     |\n| 3           | John     | Madrid  | 30     |\n| 4           | Michael  | London  | 60     |", "output": "SELECT city, salary \nFROM Employees \nGROUP BY city \nORDER BY salary DESC", "category": "Python"}, {"instruction": "Write a stored procedure for a search query.", "input": "Table name: myTable\nSearch query: select all the records from myTable where name is like \u2018John\u2019", "output": "CREATE PROCEDURE SearchMyTable\n    @Name varchar(50)\nAS \nBEGIN \n    SELECT * \n    FROM myTable \n    WHERE Name LIKE '%' + @Name + '%' \nEND", "category": "Python"}, {"instruction": "Generate 20 random numbers between 0 and 5 using Java.", "input": "", "output": "Random random = new Random();\nfor (int i = 0; i < 20; i++) {\n    System.out.println(random.nextInt(6));\n}", "category": "Python"}, {"instruction": "Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python", "input": "", "output": "import random \n\nmatrix = [] \nfor i in range(5): \n    matrix.append([random.randint(0, 10) for j in range(4)]) \n\nprint(matrix)", "category": "Python"}, {"instruction": "Generate a method to print the Nth element of a Fibonacci sequence.", "input": "N: 5", "output": "def Fibonacci(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n        return f2", "category": "Python"}, {"instruction": "Create a program to calculate the total marks of a student.", "input": "Marks of 5 Subjects:\nEnglish: 35\nMaths: 88\nChemistry: 70\nPhysics: 45\nComputer: 80", "output": "def calculate_total(marks):\n    total = 0\n    for mark in marks:\n        total += mark\n    return total\n\nscores = {\n    \"English\": 35,\n    \"Maths\": 88,\n    \"Chemistry\": 70,\n    \"Physics\": 45,\n    \"Computer\": 80\n}\n\ntotal_marks = calculate_total(scores.values())\nprint(total_marks) # Output: 328", "category": "Python"}, {"instruction": "Write a function that prints values from the given list in one line separated by a comma and a space.", "input": "list = [4, 10, 15]", "output": "def print_list(list):\n    for item in list:\n        print(item, end=', ')\n\nprint_list(list) # Output: 4, 10, 15,", "category": "Python"}, {"instruction": "What is the mathematical expression for calculating next fibonacci number from any number?", "input": "", "output": "The mathematical expression for calculating the next fibonacci number from any number is F(n+1)=F(n)+F(n-1) where n is the number for which we want to calculate the next fibonacci number.", "category": "Python"}, {"instruction": "Construct a CFG to describe the given language.", "input": "The language {anbmcn | n, m \u2265 0}", "output": "S -> aSbc | aAbc | abM | a | bM | \u03b5\nA -> nA | \u03b5\nM -> mM | \u03b5", "category": "Python"}, {"instruction": "How do you install a Python package on Windows?", "input": "", "output": "The easiest way to install a Python package on Windows is to open the Command Prompt and type the command 'pip install <package name>'. This will install the package using pip, the Python package manager. Alternatively, Python packages can be installed using the Windows Subsystem for Linux (WSL). To do this, open a bash shell using the Windows Key + x and typing 'bash'. Then, type 'sudo apt install <package name>'. This will install the package from the Ubuntu repositories.", "category": "Python"}, {"instruction": "How do you create a namespace in Java?", "input": "", "output": "In Java a namespace is created by declaring a package statement at the top of a source file. For example: package com.example.myapp;  This will create a namespace named \"com.example.myapp\" and all class and interfaces declared within the source file will be under this namespace.", "category": "Python"}, {"instruction": "Generate a random text using the given code.", "input": "seed_text = \"This is starting sentence.\"", "output": "This is starting sentence. It was a sunny day with a gentle breeze. I walked slowly, taking in the scenery around me. The birds were singing and the grass was swaying in the wind. The sky was a brilliant blue with white clouds drifting by. I felt a peace come over me, a peace that I hadn't felt in a long time.", "category": "Python"}, {"instruction": "Write a JavaScript statement to create a pop-up window.", "input": "", "output": "alert(\"This is a pop-up window\");", "category": "Python"}, {"instruction": "Write a function to replace all whitespaces with the character '*'.", "input": "my_string = \"This is a string with whitespaces\"", "output": "def replace_whitespaces(string):\n    return string.replace(\" \", \"*\")\n\nreplace_whitespaces(my_string)", "category": "Python"}, {"instruction": "Generate the list of numbers from 0 to 10 using a while loop.", "input": "", "output": "numbers = []\ni = 0\nwhile i <= 10:\n    numbers.append(i)\n    i += 1", "category": "Python"}, {"instruction": "Construct a dictionary with the keys \"name\" and \"age\" and assign the appropriate values.", "input": "Name: John\nAge: 25", "output": "my_dict = {\"name\": \"John\", \"age\": 25}", "category": "Python"}, {"instruction": "Identify the parts of speech of the words in the sentence.", "input": "The cat ran quickly across the street.", "output": "The: article\ncat: noun\nran: verb\nquickly: adverb\nacross: preposition\nthe: article\nstreet: noun", "category": "Python"}, {"instruction": "Replace the '?' with the correct Java keyword", "input": "public ? myMethod(int a, int b) {\n    // ...\n}", "output": "public static myMethod(int a, int b) {\n    // ...\n}", "category": "Python"}, {"instruction": "Change the last line of the code to assign the output of the function call to the variable n.", "input": "def add_two_numbers(x, y):\n    return x + y\n\n# TODO:", "output": "def add_two_numbers(x, y):\n    return x + y\n\nn = add_two_numbers(x, y)", "category": "Python"}, {"instruction": "Explain the concept of data normalization.", "input": "", "output": "Data normalization is the process of scaling individual samples to have unit norm or a given absolute sum. Normalization can be applied to data to scale the values of the data to a fixed range, for example 0 to 1, or to standardize the data by removing the mean and scaling to unit variance.", "category": "Python"}, {"instruction": "Build a machine learning model to predict the outcome.", "input": "Input dataset of 200 records with 10 features", "output": "Using the input dataset, a machine learning model can be built to predict the outcome by training it on the features provided in the dataset.", "category": "Python"}, {"instruction": "Translate the following JSON into an XML format.", "input": "{\n    \"person\": {\n        \"name\": \"Jane\",\n        \"age\": 30\n    }\n}", "output": "<?xml version=\"1.0\"?>\n<person>\n    <name>Jane</name>\n    <age>30</age>\n</person>", "category": "Python"}, {"instruction": "Write a code that converts a given binary number to its equivalent decimal number.", "input": "", "output": "def binary_to_decimal(binary): \n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary) \n    for i in range(length-1, -1, -1): \n        if (binary[i] == '1'):      \n            decimal += base\n        base = base * 2\n    return decimal", "category": "Python"}, {"instruction": "Generate a Java program to perform the following task.", "input": "Add two integers a and b and print the sum", "output": "public class Sum {\n \n    public static void main(String[] args) {\n        int a = 15;\n        int b = 10;\n        int sum = a + b;\n        System.out.println(\"Sum of a and b is \" + sum);\n    }\n}", "category": "Python"}, {"instruction": "Write a regular expression to match the phone numbers which start with 6 and have 11 digits.", "input": "", "output": "^6\\d{11}$", "category": "Python"}, {"instruction": "Create an if-else statement which checks if the number is positive or negative.", "input": "int num = 5", "output": "if (num > 0):\n    print(\"The number is positive\")\nelse:\n    print(\"The number is negative\")", "category": "Python"}, {"instruction": "Edit the code to output the sum of array elements.", "input": "arr = [5, 20, 15]", "output": "arr = [5, 20, 15]\n\ntotal = 0\nfor num in arr:\n    total += num\n\nprint(total) # Output: 40", "category": "Python"}, {"instruction": "Create a web scraper to download the HTML of a given website.", "input": "", "output": "\"\"\"\nA web scraper to download HTML of a given website\n\"\"\"\n\nimport requests\n\ndef get_website_html(url):\n    response = requests.get(url)\n    return response.text\n\nif __name__ == '__main__':\n    url = input('Enter URL: ')\n    html = get_website_html(url)\n    print(html)", "category": "Python"}, {"instruction": "Create an object-oriented Python program to simulate a simple calculator with a add, subtract and \\multiply\" function", "input": "", "output": "\"\"\"Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function\"\"\"\n\n# create a class Calculator\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n# create an instance of class Calculator\ncalc = Calculator()\n\n# call the add, subtract and multiply functions \nprint(calc.add(5,5))\nprint(calc.subtract(5,5))\nprint(calc.multiply(5,5))", "category": "Python"}, {"instruction": "Convert the following timestamp to ISO 8601 format", "input": "1579183000", "output": "import time\n\ndef timestamp_to_iso8601(timestamp):\n    \"\"\"Convert the given timestamp to ISO 8601 format\"\"\"\n    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.localtime(timestamp))", "category": "Python"}, {"instruction": "Create a function to check if an array contains any duplicate elements", "input": "[1, 3, 5, 7, 9]", "output": "def has_duplicates(arr):\n    \"\"\"Check if an array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))", "category": "Python"}, {"instruction": "Identify the type of variable initialization in the given code", "input": "my_var = 0", "output": "This is an implicit variable initialization.", "category": "Python"}, {"instruction": "Write a function to sort a list of integers in non-increasing order", "input": "[9, 6, 7, 4, 3, 5]", "output": "def sort_desc(arr):\n    \"\"\"Sort a list of integers in non-increasing order.\"\"\"\n    return sorted(arr, reverse=True)", "category": "Python"}, {"instruction": "Classify the following words according to their part-of-speech tags.", "input": "busy, psychology, running", "output": "Adjective, Noun, Verb.", "category": "Python"}, {"instruction": "edit the code so that it prints out the result", "input": "val = 5\nsum = 0\nsum = sum + val", "output": "val = 5\nsum = 0\nsum += val\nprint(sum) # prints 5", "category": "Python"}, {"instruction": "Create a script to find the most and least frequent words in a given text", "input": "Text: This is a sample text with a few words that should be counted and analyzed.", "output": "def frequent_words(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\n    for w in words:\n        if w not in word_count:\n            word_count[w] = 1\n        else:\n            word_count[w] += 1\n    \n    most_frequent_word = max(word_count, key=word_count.get)\n    least_frequent_word = min(word_count, key=word_count.get)\n\n    return most_frequent_word, least_frequent_word", "category": "Python"}, {"instruction": "Write code to calculate the mean of two numbers", "input": "numbers = [4, 6]", "output": "def mean(numbers):\n    \"\"\"Calculate the mean of two numbers\"\"\"\n    return sum(numbers) / len(numbers)", "category": "Python"}, {"instruction": "Create a function which takes an array as input and check if any of its elements are equal to the given value.", "input": "Array: [1, 2, 3, 4, 5]\nValue: 4", "output": "def element_equal(arr, value):\n    \"\"\"Check if any element in the array is equal to the given value.\"\"\"\n    for ele in arr:\n        if ele == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a loop that prints each letter in the given string one by one on a new line.", "input": "string str = \"Hello World\"", "output": "for i in str:\n    print(i)", "category": "Python"}, {"instruction": "Write a function to remove any leading and trailing whitespaces from a given string.", "input": "string str = \"   Hello World !\"", "output": "def trim_whitespace(str):\n    return str.strip()\n\nprint(trim_whitespace(str))", "category": "Python"}, {"instruction": "Create a loop that prints out every other element in the given array.", "input": "int[] arr = {1, 2, 3, 4, 5, 6, 7, 8}", "output": "for i in range(0, len(arr), 2):\n    print(arr[i])", "category": "Python"}, {"instruction": "Output the last four elements of the array.", "input": "int[] arr = {1, 2, 3, 4, 5, 6, 7, 8}", "output": "print(arr[4:])", "category": "Python"}, {"instruction": "encode a given string using the Base64 algorithm", "input": "String: MySuperSecretString", "output": "import base64\n\ndef encode_base64(string):\n    \"\"\"Encode the given string using the Base64 algorithm\"\"\"\n    byte_string = string.encode('utf-8')\n    return base64.b64encode(byte_string).decode('utf-8')", "category": "Python"}, {"instruction": "Reverse a string using the built-in function in R programming language.", "input": "", "output": "rev_string <- function(string) \n{\n    rev_string <- paste(rev(strsplit(string, \"\")[[1]]), sep = \"\")\n    return(rev_string)\n}", "category": "Python"}, {"instruction": "Analyze the computational complexity of the following piece of code.", "input": "int fun(int n){\n    if(n < 2){\n        return n;\n    }\n    return fun(n-1) + fun(n-2);\n}", "output": "The function has a computational complexity of O(2^n) as it involves recursive calls. Each recursive call makes two additional calls, thus each call leads to two additional calls etc. Thus, the time complexity of the algorithm is exponential.", "category": "Python"}, {"instruction": "Create a function to group an array of numbers based on the following conditions.", "input": "array = [3, 15, 10, 5, 11, 14]\nconditions = [((3 <= x) & (x <= 10)), ((11 <= x) & (x <= 14))]", "output": "def group_arrays(array, conditions):\n    groups = []\n    for condition in conditions:\n        group = [x for x in array if condition(x)]\n        groups.append(group)\n    return groups", "category": "Python"}, {"instruction": "Write a LaTex command that displays a matrix of size 2x3.", "input": "", "output": "\\begin{pmatrix}\na & b & c \\\\\nd & e & f\n\\end{pmatrix}", "category": "Python"}, {"instruction": "Create a Windows batch command to check if a folder named \"Temp\" exists or not.", "input": "Folder Name: Temp", "output": "IF EXIST \"Temp\" (\n\nECHO Folder exists\n\n) ELSE (\n\nECHO Folder does not exist\n\n)", "category": "Python"}, {"instruction": "Write a SQL statement to create a new table named \"Users\" in a database.", "input": "", "output": "CREATE TABLE Users (\n    id INT NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    age INT NOT NULL\n);", "category": "Python"}, {"instruction": "What is the Big O time complexity of selection sort?", "input": "", "output": "Selection sort has a time complexity of O(N2) in the worst case.", "category": "Python"}, {"instruction": "Write an algorithm in MIPS assembly language to determine if a given character is an uppercase letter or not.", "input": "Character: \u2018A\u2019", "output": "li $t0, 65\nli $t1, 90\nbeq $t0, $t1, isUpperLetter\nj isNotUpperLetter\nisUpperLetter:\n    # Do something\nisNotUpperLetter:\n    # Do something", "category": "Python"}, {"instruction": "Create an HTML page with 4 sections containing text.", "input": "", "output": "<html>\n  <body>\n    <h1>Heading1</h1>\n    <p>Paragraph1</p>\n    <h2>Heading2</h2>\n    <p>Paragraph2</p>\n    <h3>Heading3</h3>\n    <p>Paragraph3</p>\n    <h4>Heading4</h4>\n    <p>Paragraph4</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "In Python, create a function that takes 2 integers and returns the maximum number.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create a JavaScript program to capitalize each word in a given string.", "input": "", "output": "function capitalize(str) {\n    let words = str.split(' ');\n    let capitalizedWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\n    let result = capitalizedWords.join(' ');\n    return result; \n}", "category": "Python"}, {"instruction": "Create a single line program in Python to check if a number is divisible by 5.", "input": "", "output": "print(lambda x: x%5 == 0, \"is divisible by 5.\")", "category": "Python"}, {"instruction": "Write a bash script that can add two numbers.", "input": "", "output": "#!/bin/bash\n\nnumber1=2\nnumber2=2\n\nsum=$(($number1 + $number2))\n\necho \"The sum is: $sum\"", "category": "Python"}, {"instruction": "Answer the following question about the data structure Stack.", "input": "What is the order of accessing elements from the Stack?", "output": "The order of accessing elements from the Stack is Last In First Out (LIFO).", "category": "Python"}, {"instruction": "Create a SQL query that gets the list of names of all employees who work at the company 'ABC'.", "input": "", "output": "SELECT name FROM employees WHERE company = 'ABC';", "category": "Python"}, {"instruction": "Create a HTML page to show a result of the sum of two numbers.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Sum of Two Numbers</title>\n        <script>\n            // get numbers from user\n            var a = prompt(\"Enter the first number\");\n            var b = prompt(\"Enter the second number\");\n            // calculate the sum \n            var sum = +a + +b;\n            // print the result\n            document.write(\"Result : \" +sum);\n        </script>\n    </head>\n    <body>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to find out the average price of a product from a table.", "input": "products (id, name, category, price)", "output": "SELECT AVG(price)\nFROM products;", "category": "Python"}, {"instruction": "Write a Bash script to run a command and store its output in a variable.", "input": "", "output": "#!/bin/bash\n\n# Run a command and store it output in a variable\nmy_result=\"$(ls -l)\"\n\n# Print the output\necho \"$my_result\"", "category": "Python"}, {"instruction": "Write a regex pattern for identifying a valid email address.", "input": "", "output": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", "category": "Python"}, {"instruction": "Give an example input to the following instruction.", "input": "Write a JavaScript code snippet that calculates the sum of the squares of two numbers.", "output": "let x = 3;\nlet y = 2;\n\nlet sum = x * x + y * y;\n\nconsole.log(sum); // prints 13", "category": "Python"}, {"instruction": "Write an algorithm for sorting an array in ascending order using the Bubble Sort technique.", "input": "[3, 7, 4, 1, 9]", "output": "// Start loop\nfor i in range(length of array):\n\n  // Start inner loop\n  for j in range(i+1, length of array):\n\n    // Compare elements and swap if needed\n    if array[i] > array[j]:\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n\n  // End inner loop\n\n// End loop\n\n// Result: array is now sorted in ascending order [1, 3, 4, 7, 9]", "category": "Python"}, {"instruction": "Write an MySQL query to create a view displaying the average monthly income per worker", "input": "Table contains workerid, month, income columns", "output": "CREATE VIEW averageMonthlyIncome AS\nSELECT workerid, MONTH(month) AS Month, AVG(income) AS avg_income\nFROM Table\nGROUP BY workerid, MONTH(month);", "category": "Python"}, {"instruction": "Write a function in PHP that takes one parameter and checks if it is a valid email address.", "input": "email_address = \"hello@example.com\"", "output": "function validateEmail($email_address) {\n  if (filter_var($email_address, FILTER_VALIDATE_EMAIL)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvalidateEmail(email_address) // returns true", "category": "Python"}, {"instruction": "What is an inheritance in Java?", "input": "", "output": "In Java, inheritance is a mechanism in which one class (known as the subclass) inherits the characteristics of another class (known as the superclass). This enables the subclass to reuse the attributes and methods of the superclass without having to code them again. It also allows for increased code modularity and code reusability.  With class inheritance, a subclass can obtain all of the public and protected methods and fields from its parent class. This allows the developer to reuse existing code and to avoid writing the same code over and over again.  Additionally, class inheritance promotes polymorphism, which allows the same code to be used with different objects.", "category": "Python"}, {"instruction": "Create a CSS style to underline a given element.", "input": "", "output": "element {\n  text-decoration: underline;\n}", "category": "Python"}, {"instruction": "Write a SQL query to get all the users who have registered in the last 7 days.", "input": "", "output": "SELECT *\nFROM Users\nWHERE registration_date > DATE_SUB(CURDATE(), INTERVAL 7 DAY);", "category": "Python"}, {"instruction": "Create a Python function to generate a Fibonacci sequence of a given length.", "input": "", "output": "def generate_fibonacci(length): \n    result = [0, 1] \n    for i in range(2,length): \n        result.append(result[i-2] + result[i-1]) \n    return result", "category": "Python"}, {"instruction": "Design a JavaScript function to convert a given time in 24-hour notation to 12-hour notation.", "input": "", "output": "function convertTime(time) {\n  const [ hours, minutes ] = time.split(':');\n  const convertedTime = hours <= 12 ? \n  `${ hours }:${ minutes } AM` : \n  `${ hours - 12 }:${ minutes } PM`;\n  return convertedTime;\n}", "category": "Python"}, {"instruction": "Write a HTML structure with a form that includes ``name`` and ``email`` fields.", "input": "", "output": "<form>\n    <label>Name: </label>\n    <input type=\"text\" name=\"name\" ></input>\n    <br>\n    <label>Email: </label>\n    <input type=\"email\" name=\"email\" ></input>\n    <br>\n    <input type=\"submit\" value=\"Submit\" ></input>\n </form>", "category": "Python"}, {"instruction": "Explain what an abstract data type is and provide an example in C++.", "input": "", "output": "An abstract data type is a type of data that is more a collection of related data rather than a particular type of data. An abstract data type allows the user to define a new data type with the desired properties and operations. For example, a stack is an abstract data type that is composed of a collection of items that can be stored and retrieved in a LIFO (last in, first out) manner. An example of implementing a stack as an abstract data type in C++ would be: \n\n#include <iostream>\n#include <stack>\n\nusing namespace std;\n\n// Create an empty stack \nstack<int> s;\n\n// Push items onto the stack\ns.push(10);\ns.push(20);\ns.push(30);\n\n// Pop items from stack\ncout << s.top() << endl;\ns.pop();\ncout << s.top() << endl;\ns.pop();\ncout << s.top() << endl;\ns.pop();\n\nreturn 0;", "category": "Python"}, {"instruction": "Create a Javascript object that can generate a random list of numbers between 1 and 10.", "input": "", "output": "let randomGenerator = {\n    getRandomList : function(length) {\n        let randomList = [];\n        for (let i = 0; i < length; i++) {\n            randomList.push(Math.floor(Math.random() * 10) + 1);\n        }\n        return randomList;\n    }\n};", "category": "Python"}, {"instruction": "Design a JavaScript function that can convert any string into a camel case version.", "input": "", "output": "function camelCase(str){\n  const modifiedString = str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return \"\"; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n  return modifiedString;\n}", "category": "Python"}, {"instruction": "Write a pseudocode for the Depth-First Search algorithm", "input": "", "output": "// Define a function DFS(vertex):\nDFS(vertex):\n  // Mark the current node as Visited\n  Mark the current node as Visited\n  \n  // Loop through the adjacent nodes\n  for each adjacent node of vertex:\n    // If the adjacent node has not been visited\n    if the adjacent node has not been visited:\n      // Call DFS on the adjacent node\n      call DFS(adjacent node)\n\n// Call the DFS function on the root node\ncall DFS(root node)", "category": "Python"}, {"instruction": "Edit the given Python program to print the sum of two given numbers", "input": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)", "output": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The sum is: \", firstNumber + secondNumber)", "category": "Python"}, {"instruction": "Write an algorithm for the Caesar Cipher encryption technique", "input": "Text: \"Hello, World!\"\nKey: 3", "output": "// Take each letter of the string\nfor(i=0; i<text.length; i++) {\n\n  // Find the character code of each letter\n  letter = text.charCodeAt(i);\n\n  // Apply the key and add it to character code\n  cipher = letter + key;\n\n  // Convert the cipher back to letters\n  encrypted_letter = String.fromCharCode(cipher);\n\n  // Store the encrypted letters into an encrypted string\n  encrypted_string += encrypted_letter;\n  \n} \n\n// Result: encrypted_string = \"Khoor,#Zruog!\"", "category": "Python"}, {"instruction": "Generate a valid Python expression that multiplies the given numbers.", "input": "3 and 4", "output": "3 * 4", "category": "Python"}, {"instruction": "Write an algorithm to solve the Stock Span problem.", "input": "[100, 80, 60, 70, 60, 75, 85]", "output": "// Create an empty stack\nstack stack;\n\nint stock_span[N] = { };\n\n// Push index of first element to stack \nstack.push(0);\n\n// Calculate stock span values for rest of the elements \nfor (int i=1; i<N; i++) \n{ \n    // Pop elements from stack while stack is not empty and top of \n    // stack is smaller than price[i] \n    while (!stack.empty() && arr[stack.top()] <= arr[i]) \n        stack.pop(); \n\n    // If stack becomes empty, then price[i] is greater than all elements \n    // on left of it, i.e., price[0], price[1],..price[i-1]. Else price[i] \n    // is greater than elements after top of stack \n    stock_span[i] = (stack.empty())? (i + 1) : (i - stack.top()); \n\n    // Push this element to stack\n    stack.push(i); \n}", "category": "Python"}, {"instruction": "Come up with Java code to find the square root of a given number.", "input": "9", "output": "public double squareRoot(double x) {\n    double start = 0;\n    double end = x;\n    double precision = 0.00001;\n\n    while (end - start > precision) {\n        double mid = (start + end) / 2;\n        double midSqr = mid * mid;\n\n        if (midSqr > x) {\n            end = mid;\n        } else {\n            start = mid;\n        }\n    }\n    return (start + end) / 2;\n}", "category": "Python"}, {"instruction": "Write a JavaScript snippet to detect whether or not the current browser is Internet Explorer.", "input": "", "output": "if (navigator.userAgent.indexOf('MSIE') !== -1 ||\n    navigator.appVersion.indexOf('Trident/') > -1) {\n    console.log('Browser is Internet Explorer.');\n} else {\n    console.log('Browser is not Internet Explorer.');\n}", "category": "Python"}, {"instruction": "Write an HTML page to calculate the area of a circle given its radius.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Area of Circle</title>\n        <script>\n            // get radius from user\n            var radius = prompt(\"Enter the radius of Circle\");\n            // calculate area \n            var area = 3.14 * radius * radius;\n            // print the area\n            document.write(\"Area of Circle : \" + area);\n        </script>\n    </head>\n    <body>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a Java code to generate a Fibonacci number at a given index.", "input": "", "output": "public class Fibonacci {\n\n  public static int getFibonacciNumber(int index) {\n    // base cases\n    if (index == 0) {\n      return 0;\n    }\n    if (index == 1 || index == 2) {\n      return 1;\n    }\n    // recursive case\n    return getFibonacciNumber(index - 1) + getFibonacciNumber(index - 2);\n  }\n}", "category": "Python"}, {"instruction": "Write a Python function to find all pairs in a given list of numbers whose sum equals a given target number", "input": "Given List: [1, 4, 2, 9, 5]\nTarget number: 7", "output": "def find_pairs_sum(numbers, target):\n    res = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target: \n                res.append([numbers[i], numbers[j]]) \n  \n    return res", "category": "Python"}, {"instruction": "Construct a SQL query that gets the average salary of all employees who work in Department A", "input": "", "output": "SELECT AVG(salary) \nFROM employees\nWHERE department = 'A'", "category": "Python"}, {"instruction": "Construct a loop to print all the numbers divisible by 3 between 1 and 20", "input": "", "output": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Generate a HTML page displaying the following information", "input": "Company name: Acme Corp\nCompany motto: \u201cWe make the impossible possible!\u201d", "output": "<html>\n<head>\n <title>Acme Corp</title>\n</head>\n<body>\n <h1>Acme Corp</h1>\n <p>We make the impossible possible!</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript class that generates a random integer between 1 and 100", "input": "", "output": "class RandomInt {\n  constructor() {\n    this.min = 1;\n    this.max = 100;\n  }\n  \n  generateInt() {\n    return Math.floor(Math.random() * (this.max - this.min + 1)) + this.min;\n  }\n}", "category": "Python"}, {"instruction": "Create a CSS animation to animate a ball bouncing up and down", "input": "", "output": "@keyframes bounce {\n 0%, 20%, 50%, 80%, 100% {\n  transform: translateY(0);\n }\n 40% {\n  transform: translateY(-50px);\n }\n 60% {\n  transform: translateY(-45px);\n }\n}\n\n.ball {\n animation: bounce 1s ease infinite;\n}", "category": "Python"}, {"instruction": "Generate a JSON string from a given Python dictionary", "input": "my_dict = {\n    \"title\": \"GPT Model Evaluation\",\n    \"category\": \"Natural Language Processing\",\n    \"score\": 8\n}", "output": "json.dumps(my_dict)", "category": "Python"}, {"instruction": "Compute the minimum string edit distance between two strings of same length.", "input": "str1 = \"kitten\"\nstr2 = \"sitting\"", "output": "def minimumEditDistance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],       \n                                   dp[i - 1][j],       \n                                   dp[i - 1][j - 1]     \n                                   ) \n  \n    return dp[m][n]\n\nmin_edit_distance = minimumEditDistance(str1, str2)\nprint(min_edit_distance) # output: 3", "category": "Python"}, {"instruction": "Write a JavaScript code to copy an array including its elements.", "input": "arr1 = [1, 2, 3]", "output": "function copyArray(arr) {\n  let arr2 = arr.slice();\n  return arr2;\n}\n\nlet arr1 = [1, 2, 3];\nlet arr2 = copyArray(arr1);\nconsole.log(arr2); // output: [1, 2, 3]", "category": "Python"}, {"instruction": "Write an HTML code to display a table of 3 columns and 5 rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th>\n    <th>Column3</th>\n  </tr>\n  <tr>\n    <td>Row1_data1</td>\n    <td>Row1_data2</td>\n    <td>Row1_data3</td>\n  </tr>\n  <tr>\n    <td>Row2_data1</td>\n    <td>Row2_data2</td>\n    <td>Row2_data3</td>\n  </tr>\n  <tr>\n    <td>Row3_data1</td>\n    <td>Row3_data2</td>\n    <td>Row3_data3</td>\n  </tr>\n  <tr>\n    <td>Row4_data1</td>\n    <td>Row4_data2</td>\n    <td>Row4_data3</td>\n  </tr>\n  <tr>\n    <td>Row5_data1</td>\n    <td>Row5_data2</td>\n    <td>Row5_data3</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a style sheet in CSS to change the font size and font family of a text element with an id of \"example_text\".", "input": "", "output": "#example_text {\n  font-size: 20px;\n  font-family: Arial, sans-serif;\n}", "category": "Python"}, {"instruction": "Format the following JSON data into XML.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 34,\n  \"address\": \"123 Any Street, AnyTown, USA\"\n}", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <name>John Doe</name>\n  <age>34</age>\n  <address>123 Any Street, AnyTown, USA</address>\n</root>", "category": "Python"}, {"instruction": "Write a regular expression in JavaScript to find all hyperlinks in a piece of text.", "input": "", "output": "/http[s]?:\\/\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+/", "category": "Python"}, {"instruction": "Create a program in Ruby to print the Fibonacci sequence until the 10th element.", "input": "", "output": "def fibonacci_sequence\n  a = 0\n  b = 1\n\n  10.times do\n    yield(b)\n\n    c = a\n    a = b\n    b = c + b\n  end\nend\n\nfibonacci_sequence do |num|\n  puts num\nend", "category": "Python"}, {"instruction": "Create an HTML page with a table containing 2 columns.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Table Design</title>\n</head>\n<body>\n\t<table>\n\t\t<tr>\n\t\t\t<th>Column 1</th>\n\t\t\t<th>Column 2</th>\n\t\t</tr>\n\t</table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a MySQL query to get the maximum salary from the employees table section.", "input": "Table structure:\n\n employees \n \nid | name | department | salary |", "output": "SELECT MAX(salary) \nFROM employees;", "category": "Python"}, {"instruction": "Insert a new row in the table Inventory with itemname as \"keyboard\", quantity of 10, and price of 10.25.", "input": "Table structure:\n\n Inventory \n \nid | itemname | quantity | price |", "output": "INSERT INTO Inventory (itemname, quantity, price) VALUES ('keyboard', 10, 10.25);", "category": "Python"}, {"instruction": "Parse this list of JSON objects to get the first name of the second employee.", "input": "[\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 28\n  },\n  {\n    \"firstName\": \"Alice\",\n    \"lastName\": \"Smith\",\n    \"age\": 33\n  },\n  {\n    \"firstName\": \"Dave\",\n    \"lastName\": \"Moore\",\n    \"age\": 42\n  }\n]", "output": "const employeeList = [\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 28\n  },\n  {\n    \"firstName\": \"Alice\",\n    \"lastName\": \"Smith\",\n    \"age\": 33\n  },\n  {\n    \"firstName\": \"Dave\",\n    \"lastName\": \"Moore\",\n    \"age\": 42\n  }\n];\n\nconst secondEmployeeFirstName = employeeList[1].firstName; // Alice", "category": "Python"}, {"instruction": "modify the given css code to make the font size to 48px.", "input": "body {\n  font-family: \"Roboto\", sans-serif;\n  font-size: 20px;\n}", "output": "body {\n  font-family: \"Roboto\", sans-serif;\n  font-size: 48px;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to extract the first word of a given string.", "input": "str = \"Hello World!\"", "output": "function firstWord(str) {\n return str.split(\" \")[0]\n}\n \nstr = \"Hello World!\"\nconsole.log(firstWord(str)) // \"Hello\"", "category": "Python"}, {"instruction": "Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.", "input": "", "output": "dct = {}\nfor i in range(1, 16):\n dct[i] = i**2\n\nprint(dct)", "category": "Python"}, {"instruction": "Given a matrix of m*n size, write a program to find the largest number in the matrix.", "input": "matrix = \n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "def largest_number_in_matrix(matrix): \n largest = -1\n for row in matrix: \n for ele in row: \n largest = max(largest, ele) \n return largest \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  \nprint(largest_number_in_matrix(matrix)) # 9", "category": "Python"}, {"instruction": "Write a function that takes a number x and multiplies it by itself n amount of times using recursion.", "input": "x = 4\nn = 3", "output": "def recursive_multiply(x, n):\n\t# Base case\n    if n == 0:\n        return 1\n    return x * recursive_multiply(x, n - 1)\n\n# Example\nx = 4\nn = 3\nprint(recursive_multiply(x, n))\n# Output: 64", "category": "Python"}, {"instruction": "Write a function that takes a string, checks if it is a palindrome, and returns a corresponding boolean value.", "input": "string = \"racecar\"", "output": "def is_palindrome(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\n# Example\nstring = \"racecar\"\nprint(is_palindrome(string))\n# Output: True", "category": "Python"}, {"instruction": "Create a function which takes a set of numbers as argument and returns a dictionary containing the frequency of each number.", "input": "my_set = {1, 2, 2, 3, 4, 5, 6}", "output": "def freq_dict(my_set):\n    # Initialize a empty dict\n    frequency_dict = dict()\n    # Iterate over given set\n    for num in my_set:\n        # Add or update item in the dict\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n    return frequency_dict\n\n# Example\nmy_set = {1, 2, 2, 3, 4, 5, 6}\nprint(freq_dict(my_set))\n# Output: {1: 1, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}", "category": "Python"}, {"instruction": "Create a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.", "input": "string = \"Hello World\"", "output": "def most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n    return most_common_char\n\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l", "category": "Python"}, {"instruction": "Write a JavaScript program to get the number of days in a given month of the current year.", "input": "", "output": "function getDaysInMonth(month) {\n  return new Date(2020, month + 1, 0).getDate();\n}\n\nif (typeof module != 'undefined') {\n  module.exports = getDaysInMonth;\n}", "category": "Python"}, {"instruction": "Create a function which takes a variable number of arguments, checks if all of them are a list, and then adds all the items in the lists.", "input": "my_lists = [[1,2,3], [4,5], [6,7,8]]", "output": "# Function which takes variable arguments\ndef add_lists(*args):\n\n    # Check if all arguments are lists\n    for arg in args:\n        if not isinstance(arg, list):\n            return \"All the arguments should be a list.\"\n\n    # Add all items of the lists\n    result = 0\n    for lst in args:\n        # Iterate each item in the list\n        for item in lst:\n            result += item\n    return result\n\n# Example\nmy_lists = [[1,2,3], [4,5], [6,7,8]]\nprint(add_lists(*my_lists))\n# Output: 36", "category": "Python"}, {"instruction": "What are the main data types in Python?", "input": "", "output": "The main data types in Python are numbers, strings, lists, tuples, dictionaries, and sets.", "category": "Python"}, {"instruction": "Use the given code snippet to convert the data type of the x_data from float to integer.", "input": "x_data = [3.4, 6.2, 3.7]", "output": "x_data = [int(x) for x in x_data]", "category": "Python"}, {"instruction": "Write a CSS rule to set the background color to pink and the text color to white.", "input": "", "output": "body {\n  background-color: pink;\n  color: white;\n}", "category": "Python"}, {"instruction": "Design a form in HTML that takes user name and date of birth.", "input": "", "output": "<form>\n  <label>Name:</label> \n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name\">\n  <label>Date of birth:</label> \n  <input type=\"date\" name=\"birthdate\" placeholder=\"Enter your Date of birth\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a shell script to create a directory if it does not already exist.", "input": "", "output": "if [ ! -d \"directory_name\" ]; then\n  mkdir directory_name\nfi", "category": "Python"}, {"instruction": "Construct an SQL statement to get the average salary of each department.", "input": "Table structure:\n\n employees\n \nid | name | department | salary |", "output": "SELECT department, AVG(salary) \nFROM employees \nGROUP BY department;", "category": "Python"}, {"instruction": "Build a machine learning model to classify the type of iris flower.", "input": "", "output": "from sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\n\n# Create a model and train it\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)", "category": "Python"}, {"instruction": "Given two strings, write a Python function that finds the common letters between them.", "input": "String 1: apple\nString 2: oranges", "output": "def find_common_letters(s1, s2):\n    letters = set()\n\n    for letter in s1:\n        if letter in s2:\n            letters.add(letter)\n    return letters\n\n# Example\ns1 = 'apple'\ns2 = 'oranges'\nprint(find_common_letters(s1, s2))\n# Output: {'a', 'e'}", "category": "Python"}, {"instruction": "What is a \"Boolean\" in Java?", "input": "", "output": "In Java, a Boolean is a data type that can store two possible values - true or false. Boolean types are typically used to represent predicates such as \"is the door open?\" or \"does the user have permission to access this content?\". Boolean expressions can be used in decision making, such as if-else statements and multiple condition checks. A Boolean object can be declared using the keyword \"boolean\" or the class \"java.lang.Boolean\".", "category": "Python"}, {"instruction": "Create a CSS snippet to set a font size of 18px for all elements in the webpage.", "input": "", "output": "* { \n  font-size: 18px; \n}", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to get the current date.", "input": "", "output": "let currentDate = new Date(); \nconsole.log(currentDate);", "category": "Python"}, {"instruction": "Create a function in JavaScript that reverses the given list of strings.", "input": "list = [\"stack\", \"overflow\", \"hello\"]", "output": "function reverseStringList(list) {\n    return list.reverse();\n}\n\nrev_list = reverseStringList(list);\nconsole.log(rev_list);\n# Output: [\"hello\", \"overflow\", \"stack\"]", "category": "Python"}, {"instruction": "You are given an array of strings. Write a function in C++ to remove all empty strings from the array.", "input": "arr = {\"\", \"stack\", \"overflow\", \"\"}", "output": "#include <algorithm>\n\nvoid removeEmptyStrings(string arr[], int n) \n{ \n    arr = remove_if(arr, arr+n, [](const string& s){ return s.empty();} );\n    n = remove(arr, arr+n, \"\");\n}", "category": "Python"}, {"instruction": "Given a sorted array and a target value, write a function in JavaScript to search for the target value.", "input": "arr = [1, 3, 5, 6, 8, 9, 10]\ntarget = 6", "output": "function search(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n  \n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}\n\nindex = search(arr, target);\nconsole.log(index);\n# Output: 3", "category": "Python"}, {"instruction": "Write a MySQL query to select all the rows from the table 'employees' where the employee name starts with the letter 'A'.", "input": "", "output": "SELECT * FROM employees WHERE employee_name LIKE 'A%';", "category": "Python"}, {"instruction": "Output the output of this C++ program.", "input": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int x, y;\n  cin >> x >> y;\n  cout << x + y;\n  return 0;\n}", "output": "Input: 5 6\nOutput: 11", "category": "Python"}, {"instruction": "Write a SQL query to select all rows in the table 'students' whose marks are greater than 25.", "input": "", "output": "SELECT * \nFROM students \nWHERE marks > 25;", "category": "Python"}, {"instruction": "Construct an algorithm that finds the minimum element in an array of values.", "input": "[5, 4, 11, 7, 12, 55, 3]", "output": "Create a variable called min and set its value to be the first element of the array.\nLoop through elements of the array and compare the value at each index to the value of min.\nIf the value at the current index is less than min, update min with the current index's value.\nWhen the loop has finished, min will contain the minimum element of the array.", "category": "Python"}, {"instruction": "Output a valid C++ code to implement a Binary Tree.", "input": "", "output": "class Node {\n  public:\n    int data;\n    Node *left;\n    Node *right;\n    Node(int d) {\n        data = d;\n        left = NULL;\n        right = NULL;\n    }\n};\n\nclass BinaryTree {\n  public:\n    Node *root;\n    BinaryTree() {\n        root = NULL;\n    }\n};", "category": "Python"}, {"instruction": "Write a Bash script to create a new directory given a name and parent directory.", "input": "Name: new_dir\nParent Directory: /home/user", "output": "#!/usr/bin/env bash\n\nDIR=\"/home/user/new_dir\"\nif [ ! -d \"$DIR\" ]; then\n  mkdir \"$DIR\"\nfi", "category": "Python"}, {"instruction": "Create a Angular component which has a text field and prints the user input when the user clicks a button.", "input": "", "output": "@Component({\n  selector: 'app-input-form',\n  template: `\n    <input type=\"text\" [(ngModel)]=\"userInput\" />\n    <button (click)=\"printInput()\">Print User Input</button>\n  `\n})\nexport class InputFormComponent {\n\n  userInput: string;\n\n  printInput() {\n    console.log(this.userInput)\n  }\n\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to compare two arrays and check whether they are exactly same or not.", "input": "array1 = [3, 8, 4];\narray2 = [3, 8, 4];", "output": "function arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length)\n    return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i])\n      return false;\n  }\n  return true;\n}\n\nconsole.log(arraysEqual([3, 8, 4], [3, 8, 4]));\n// output: true", "category": "Python"}, {"instruction": "Create a SQL query to join two tables with the condition that the result should include all rows from the first table, even if there is no match in the second table.", "input": "Table1:\nid   |   name    |   addresses\n1    |   Alice   |  123 street\n2    |   Bob     |  456 avenue\n\nTable2:\nid   |   name  \n2    |   Bob", "output": "SELECT * FROM Table1\nLEFT JOIN Table2\nON Table1.id = Table2.id", "category": "Python"}, {"instruction": "Find the maximum of three integers without using any comparison operator.", "input": "", "output": "public static int max(int a, int b, int c) {\n    int x = Math.max( a, b );\n    int y = Math.max( b, c );\n    int z = Math.max( x, y );\n    return z;  \n}", "category": "Python"}, {"instruction": "Take a given array and find the number of unique values.", "input": "[3, 8, 4, 3, 16, 8, 1]", "output": "function countUniqueValues(arr) {\n  let seen = {};\n  let count = 0;\n\n  for (let num of arr) {\n    if (!seen[num]) {\n      seen[num] = true;\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(countUniqueValues([3, 8, 4, 3, 16, 8, 1]));\n// output: 5", "category": "Python"}, {"instruction": "Write a JavaScript program to check if a given string is a palindrome (i.e. reads the same left-to-right as right-to-left).", "input": "madam", "output": "function isPalindrome(str) {\n  return str == str.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome('madam'));\n// output: true", "category": "Python"}, {"instruction": "You are given a 2-dimensional array. Write a function in Python to find the sum of each row.", "input": "arr = [[1, 3, 2],\n       [4, 6, 5],\n       [7, 9, 8]]", "output": "def row_sum(arr):\n    row_sum_arr = []\n    for row in arr:\n        row_sum_arr.append(sum(row))\n    return row_sum_arr\n\nrow_sum_arr = row_sum(arr)\nprint(row_sum_arr)\n# Output: [6, 15, 24]", "category": "Python"}, {"instruction": "Write a C++ program to print the numbers from 0 to n (in ascending order).", "input": "n=20", "output": "#include <iostream>\n \nusing namespace std;\n \nint main()\n{\nfor (int i = 0; i <=20; i++)\n    cout << i << \"\\n\";\n\nreturn 0;\n}", "category": "Python"}, {"instruction": "Design a query in PostgreSQL to print the minimum and maximum of a given field.", "input": "Table name: Sales\nField name: Price", "output": "SELECT MIN(Price), MAX(Price) FROM Sales;", "category": "Python"}, {"instruction": "Concatenate two lists in Python (using an appropriate method).", "input": "list1 = [1,2,3,4]\nlist2 = [5,6,7,8]", "output": "list3 = list1 + list2", "category": "Python"}, {"instruction": "Construct this HTML table including the table head and body.", "input": "<table> \n    <thead>\n        <th>Name </th>\n        <th>Age </th>\n        <th>Gender </th> \n    </thead>\n    <tbody>\n        <tr>\n            <td>John </td>\n            <td>22 </td>\n            <td>Male </td>\n        </tr> \n        <tr>\n            <td>Sarah </td>\n            <td>29 </td>\n            <td>Female </td>\n        </tr> \n        <tr>\n            <td>Alex </td>\n            <td>17 </td>\n            <td>Male </td>\n        </tr>\n    </tbody>\n</table>", "output": "<table>\n    <thead>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Gender</th>\n    </thead>\n    <tbody>\n        <tr>\n            <td>John</td>\n            <td>22</td>\n            <td>Male</td>\n        </tr>\n        <tr>\n            <td>Sarah</td>\n            <td>29</td>\n            <td>Female</td>\n        </tr>\n        <tr>\n            <td>Alex</td>\n            <td>17</td>\n            <td>Male</td>\n        </tr>\n    </tbody>\n</table>", "category": "Python"}, {"instruction": "Calculate the sum of the following 2-dimensional array in Python.", "input": "arr = [[1, 2], [3, 4], [5, 6]]", "output": "def sum_2d_array(arr):\n result = 0\n for row in arr:\n  for num in row:\n   result += num\n return result\n \nprint(sum_2d_array([[1, 2], [3, 4], [5, 6]]))", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to get the last three characters from a given string.", "input": "str = 'Hello World'", "output": "var last3Char = str.substring(str.length - 3);\nconsole.log(last3Char);", "category": "Python"}, {"instruction": "Convert the following sentence into a valid regular expression.", "input": "The text must contain the words \u201cstart\u201d, \u201cend\u201d, and \u201chere\u201d.", "output": "^.*start.*end.*here.*$", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all the columns and the total count of each column record from a table.", "input": "", "output": "SELECT *, COUNT(*) AS total_count FROM [table_name] GROUP BY *;", "category": "Python"}, {"instruction": "Write a sentence to describe how does a stack data structure works.", "input": "", "output": "A stack data structure works by allowing elements to be added or removed from the top of the stack in a Last-In-First-Out (LIFO) order.", "category": "Python"}, {"instruction": "Write an SQL query for creating a table with two columns, one for a primary key and one for a text.", "input": "", "output": "CREATE TABLE my_table (\n  id INT AUTO_INCREMENT PRIMARY KEY, \n  text TEXT\n);", "category": "Python"}, {"instruction": "Build a website with HTML and CSS containing three headings and two paragraphs.", "input": "", "output": "<html>\n  <head>\n    <style>\n      h1 {\n        color: red;\n        font-size: 32px;\n      }\n      h2 {\n        color: blue;\n        font-size: 24px;\n      }\n      h3 {\n        color: green;\n        font-size: 16px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Heading 1</h1>\n    <p>This is a paragraph.</p>\n    <h2>Heading 2</h2>\n    <p>This is a second paragraph.</p>\n    <h3>Heading 3</h3>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Implement a C++ program to diaplay prime numbers between two given numbers.", "input": "5 10", "output": "#include<iostream>\nusing namespace std;\n \nvoid prime(int a, int b)\n{\n    while (a<b)\n    {\n        bool prime = true;\n \n        for(int i = 2; i <= a/2; ++i)\n        {\n            if(a % i == 0)\n            {\n                prime = false;\n                break;\n            }\n        }\n        if (prime)\n            cout << a << \" \";\n \n        ++a;\n    }\n}\n \nint main()\n{\n    int a, b;\n \n    cin >> a >> b;\n    cout << \"Prime numbers between \"\n         << a <<\" and \" << b <<\" are: \";\n    prime(a, b);\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a program in Java to print the Fibonacci number at the end of the given range.", "input": "10", "output": "public class Fibonacci {\n    public static void main(String args[]) {\n        int n = 10;\n        int a = 0, b = 1, c;\n        if (n == 1)\n            System.out.println(\"Fibonacci of \" + n + \" is \" + a);\n        else {\n            for (int i = 2; i <= n; i++) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            System.out.println(\"Fibonacci of \" + n + \" is \" + b);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to assess the average order value in the past two weeks.", "input": "", "output": "SELECT AVG(order_value) FROM orders WHERE order_date BETWEEN CURDATE() - INTERVAL 2 WEEK AND CURDATE();", "category": "Python"}, {"instruction": "Implement a SQL query to select all distinct entries from a table.", "input": "", "output": "SELECT DISTINCT * FROM table_name;", "category": "Python"}, {"instruction": "Describe the algorithm and time complexity of selection sort.", "input": "", "output": "The selection sort algorithm works by repeatedly finding the minimum element in an unsorted list and then swapping it with the element in the current position. The algorithm has a time complexity of O(n^2) as it has to iterate through both the subarray to find the minimum element and then swap it.", "category": "Python"}, {"instruction": "Define a function in Python that takes an integer and returns \"positive\" if it is positive, \"zero\" if the integer is 0, and \"negative\" if the integer is negative.", "input": "", "output": "def pos_neg_zero(num):\n  if num > 0:\n    return \"positive\"\n  elif num < 0:\n    return \"negative\"\n  else:\n    return \"zero\"", "category": "Python"}, {"instruction": "Write a function in C# for sorting an array (using an appropriate sorting algorithm).", "input": "", "output": "public static void SortArray(int[] arr) \n{ \n   int n = arr.Length; \n\n   for (int i = 0; i < n - 1; i++) \n   { \n       int min_idx = i; \n       for (int j = i + 1; j < n; j++) \n           if (arr[j] < arr[min_idx]) \n               min_idx = j; \n  \n       int temp = arr[min_idx]; \n       arr[min_idx] = arr[i]; \n       arr[i] = temp; \n   } \n}", "category": "Python"}, {"instruction": "Create a SELECT query in MySQL to find the records in a given table that satisfy a certain condition.", "input": "Table Name: orders\nCondition: quantity > 20", "output": "SELECT * FROM orders WHERE quantity > 20;", "category": "Python"}, {"instruction": "Create a program to lowercase all characters of a given string.", "input": "HeLLo WoRLd", "output": "public class LowerCase{\n    public static void main(String args[]) {\n\t\tString str = \"HeLLo WoRLd\";\n\t\tSystem.out.println(\"Original string: \" + str);\n\t\tSystem.out.println(\"Lowercase string: \" + str.toLowerCase());\n\t}\n}", "category": "Python"}, {"instruction": "Insert the correct syntax to define a constructor for the class Person given below.", "input": "class Person {\n  String name;\n  int age;\n}", "output": "class Person {\n  String name;\n  int age;\n  \n  Person(String name, int age) {\n     this.name = name;\n     this.age = age;\n  }\n}", "category": "Python"}, {"instruction": "Count the total number of words in a given text.", "input": "The quick brown fox jumped over the lazy dog.", "output": "9", "category": "Python"}, {"instruction": "Classify the following text as one of four categories: sport, technology, health, and entertainment.", "input": "Apple just released their new line of laptops.", "output": "technology", "category": "Python"}, {"instruction": "Develop an algorithm to implement a tree traversal.", "input": "", "output": "A tree traversal is an algorithm for visiting all the nodes of a tree data structure. There are three common traversal algorithms: pre-order, in-order, and post-order. \n\nPre-order traversal visits the root node first, then the left subtree, and then the right subtree. In-order traversal visits the left subtree first, then the root node, and then the right subtree. Post-order traversal visits the left subtree first, then the right subtree, and then the root node.", "category": "Python"}, {"instruction": "Compile a C program to print the given text \u201cHello World\u201d to the terminal.", "input": "", "output": "#include<stdio.h>\n\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}", "category": "Python"}, {"instruction": "Generate a web page with a navigation bar on it.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Navbar Page</title>\n    <style>\n      .navbar {\n        width: 100%;\n        background-color: #555;\n      }\n      .navbar a {\n        float: left;\n        padding: 12px;\n        color: white;\n        text-decoration: none;\n        font-size: 17px;\n      }\n      .navbar a:hover {\n        background-color: #000;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"navbar\">\n      <a href=\"#home\">Home</a>\n      <a href=\"#about\">About</a>\n      <a href=\"#contact\">Contact</a>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Develop a machine learning system to detect fraud.", "input": "", "output": "The machine learning system should use supervised learning techniques to learn from labeled data. It should identify trends, anomalies and irregularities by leveraging statistical techniques such as clustering and classification, feature engineering, and outlier detection. The system should utilize data from sources such as transaction data, customer behavior data and external risk information sources such as IP addresses, device information and anomaly detection.", "category": "Python"}, {"instruction": "Customize a WordPress theme to ensure its compatibility with the latest version of the WordPress software.", "input": "", "output": "Update the functions.php file of your WordPress theme to use the latest functions, classes, constants, and APIs supplied by WordPress. \nAlso, delete any deprecated code and features that are not supported in the latest version of WordPress. \nUsing the WordPress Theme Check plugin is highly recommended to check the compatibility of any WordPress theme with the newest version of WordPress.", "category": "Python"}, {"instruction": "Generate a random 10 character alphanumeric string in Python.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))", "category": "Python"}, {"instruction": "Create a Python class that accepts a name and an age to create a person instance.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f'Name: {self.name}, Age: {self.age}'", "category": "Python"}, {"instruction": "Using a for loop, print all the odd numbers between 1 and 20 (inclusive).", "input": "", "output": "for i in range(1, 21):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a Java program that finds the first 5 prime numbers, starting from 2.", "input": "", "output": "public class PrimeFinder {\n \n    public static void main(String[] args) { \n        int count = 0;\n        int num = 1;\n \n        while(count < 5) {\n            num = num + 1;\n            if (isPrime(num)) {\n                System.out.println(num);\n                count++;\n            }\n        }\n    }\n \n    public static boolean isPrime(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "category": "Python"}, {"instruction": "Compare two Python objects to check if they have the same values.", "input": "obj1 = {'a':1,'b':2}\nobj2 = {'b':2, 'a':1}", "output": "def compareObjects(obj1, obj2):\n    '''\n    Checks if two Python objects have the same value\n    '''\n    if obj1 == obj2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem.", "input": "", "output": "def traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i]\n                \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n        \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance", "category": "Python"}, {"instruction": "Create a HTML page that includes a table with 3 columns and 3 rows.", "input": "", "output": "<html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1 Header</th>\n        <th>Column 2 Header</th>\n        <th>Column 3 Header</th>\n      </tr>\n      <tr>\n        <td>Row 1, Column 1</td>\n        <td>Row 1, Column 2</td>\n        <td>Row 1, Column 3</td>\n      </tr>\n      <tr>\n        <td>Row 2, Column 1</td>\n        <td>Row 2, Column 2</td>\n        <td>Row 2, Column 3</td>\n      </tr>\n      <tr>\n        <td>Row 3, Column 1</td>\n        <td>Row 3, Column 2</td>\n        <td>Row 3, Column 3</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Given a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.", "input": "nums = [2, 7, 11, 15], target = 24", "output": "def triplet_sum(nums, target):\n for i in range(len(nums) - 2):\n  for j in range(i+1, len(nums) - 1):\n   for k in range(j+1, len(nums)):\n    if nums[i] + nums[j] + nums[k] == target:\n     return True\n return False\n \nprint(triplet_sum(nums, target))", "category": "Python"}, {"instruction": "Given a matrix, write a program to traverse it spirally.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n   res.append(arr[top_row][i])\n  top_row += 1\n \n  for i in range(top_row, bottom_row + 1):\n   res.append(arr[i][right_col])\n  right_col -= 1\n \n  for i in range(right_col, left_col - 1, -1):\n   res.append(arr[bottom_row][i])\n  bottom_row -= 1\n \n  for i in range(bottom_row, top_row - 1, -1):\n   res.append(arr[i][left_col])\n  left_col += 1\n \n return res\n\nprint(spiral_traverse(matrix))", "category": "Python"}, {"instruction": "Write a function to detect the smallest window in a string containing all characters of another string.", "input": "string1 = \"abcde\", string2 = \"ade\"", "output": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))", "category": "Python"}, {"instruction": "In the given CSS stylesheet, change all the h1 heading text to purple.", "input": "h1 {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #b0b0b0;\n}", "output": "h1 {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #9100ff;\n}", "category": "Python"}, {"instruction": "Write a code to find the factorial of a given number using a recursive function.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a HTTP request that returns the HTML source code of a given URL.", "input": "URL: \"http://example.com\"", "output": "GET / HTTP/1.1\nHost: example.com\nConnection: close", "category": "Python"}, {"instruction": "Write a SQL query to calculate the total number of items purchased within the last 24 hours.", "input": "", "output": "SELECT SUM(quantity)\nFROM orders\nWHERE order_date > DATE_SUB(NOW(), INTERVAL 24 HOUR);", "category": "Python"}, {"instruction": "Edit a given HTML page and add a new link.", "input": "<html>  \n  <head>  \n    <title>My webpage</title>\n  </head>  \n  <body>  \n    Welcome to my webpage!\n  </body>\n</html>", "output": "<html>  \n  <head>  \n    <title>My webpage</title>\n  </head>  \n  <body>  \n    Welcome to my webpage!\n    <a href=\"https://example.com\">Link</a>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Java program that takes an array of six elements and prints out the sum of the three largest values.", "input": "[3, 8, 4, 16, 1, 7]", "output": "public class Main {\n  public static void main(String[] args) {\n    int[] arr = {3, 8, 4, 16, 1, 7};\n    int sum = 0;\n    int largest1 = arr[0];\n    int largest2 = 0;\n    int largest3 = 0;\n    for (int i = 1; i < arr.length; i++) {\n      if (arr[i] > largest1) {\n        largest3 = largest2;\n        largest2 = largest1;\n        largest1 = arr[i];\n      } else if (arr[i] > largest2) {\n        largest3 = largest2;\n        largest2 = arr[i];\n      } else if (arr[i] > largest3) {\n[        largest3 = arr[i];\n      }\n    }\n    sum = largest1 + largest2 + largest3;\n    System.out.println(\"The sum of the three largest values is: \" + sum);\n  }\n}", "category": "Python"}, {"instruction": "Given a list of integers, write a program to check if there exist any pairs of numbers that sum to a given number.", "input": "v = [2, 3, 4, 9], sum = 8", "output": "def findSumPairs(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \nv = [2, 3, 4, 9]\nsum = 8\nprint(findSumPairs(v, sum))", "category": "Python"}, {"instruction": "Generate a random string of 10 characters with two vowels, three consonants and five digits.", "input": "", "output": "import random\n\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklmnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randint(0,9))\n    return s\n\nprint(generate_string(2,3,5))", "category": "Python"}, {"instruction": "Create a dictionary with key as the string and values as the number of occurrences of the respective character in a given string.", "input": "mystring", "output": "dict = {\n    'm': 1,\n    'y': 1,\n    's': 1,\n    't': 1,\n    'r': 1,\n    'i': 1,\n    'n': 1,\n    'g': 1\n}", "category": "Python"}, {"instruction": "Create a SQL query to find the names of all students who have scored at least 80 points in Maths and Science.", "input": "", "output": "SELECT s.name \nFROM student s\nWHERE s.math > 80 AND s.science > 80", "category": "Python"}, {"instruction": "Create an array of five numbers and output the result in reverse order.", "input": "1, 2, 3, 4, 5", "output": "ans = [5,4,3,2,1]", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to determine if the list is an arithmetic sequence.", "input": "nums = [2, 4, 6, 8, 10]", "output": "def is_arithmetic_sequence(nums):\n    difference = nums[1] - nums[0]\n\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != difference:\n            return False\n    return True", "category": "Python"}, {"instruction": "Sort the following numbers ascendingly.", "input": "arr = [3, 9, 5, 8, 6, 4]", "output": "def sort_ascendingly(arr):\n    return sorted(arr)", "category": "Python"}, {"instruction": "Write a function to find the median of 3 numbers.", "input": "", "output": "def median_of_three(x, y, z):\n    if x>= y:\n        if y>=z:\n            return y\n        elif x>=z:\n            return z\n        else:\n            return x\n    else:\n        if x>=z:\n            return x\n        elif y>=z:\n            return z\n        else:\n            return y", "category": "Python"}, {"instruction": "Given a list of numbers, find the lowest and highest numbers in the list.", "input": "numbers = [5, 8, 2, 9, 4, 7]", "output": "def find_min_max(numbers):\n    lowest = numbers[0]\n    highest = numbers[0]\n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    return (lowest, highest)", "category": "Python"}, {"instruction": "Create a Python class for a thread-safe queue.", "input": "", "output": "import threading\n\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item", "category": "Python"}, {"instruction": "Write a Python function to print out the squares of the numbers between 1 and 10.", "input": "", "output": "def print_squares():\n    for i in range(1, 11):\n        print(i**2)", "category": "Python"}, {"instruction": "Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.", "input": "string = \"thequickbrownfox\" \nwords_list = [\"the\", \"quick\", \"brown\", \"fox\"]", "output": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True", "category": "Python"}, {"instruction": "Write a SQL query to list all unique departments from the employee table.", "input": "", "output": "SELECT DISTINCT department\nFROM employee", "category": "Python"}, {"instruction": "Create a function to remove the second largest element in a given array.", "input": "arr = [5, 4, 2, 1, 3]", "output": "def remove_second_largest(arr): \n    max_arr = max(arr) \n    arr.remove(max_arr) \n    return max(arr)", "category": "Python"}, {"instruction": "Given a 2D array, print out all the elements in a spiral order.", "input": "[\n    [1,  2,  3,  4,  5],\n    [6,  7,  8,  9,  10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n]", "output": "def print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n        col_start += 1", "category": "Python"}, {"instruction": "Create a loop in Python that prints the integers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "Write a bash script to list all subdirectories located in the current working directory.", "input": "", "output": "#!/bin/bash\n\nfor directory in *\ndo\n  if [ -d $directory ]\n    then echo $directory\n  fi\ndone", "category": "Python"}, {"instruction": "Design a function in Java that takes in two integer arguments, a and b, and returns the result of a*b.", "input": "", "output": "public static int multiply(int a, int b){\n  return a*b;\n}", "category": "Python"}, {"instruction": "Format the following list of strings according to the desired output.", "input": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]", "output": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]\n\noutput_string = ' '.join(input_strings)\noutput_string = output_string.capitalize() + '!'\nprint(output_string) \n# Output: Hello world in python!", "category": "Python"}, {"instruction": "Create a function to check if a given string contains valid JSON data and returns true if it does.", "input": "string_to_check = \"{'name': 'John', 'age': 30}\"", "output": "def check_valid_json(string_to_check):\n    try:\n        json.loads(string_to_check)\n        return True\n    except Exception as e:\n        return False", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to calculate percentage of an input number.", "input": "number = 50", "output": "number = 50\npercentage = (number/100)*100;\nconsole.log(percentage + '%');", "category": "Python"}, {"instruction": "Determine the sum of the numbers in a given list using for loops.", "input": "list_of_numbers = [1, 2, 3, 4, 5]", "output": "list_of_numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in list_of_numbers:\n    sum += num\nprint(sum)", "category": "Python"}, {"instruction": "Develop a program to generate a random integer from 1 to 100.", "input": "", "output": "import random\n \nrandom_int = random.randint(1,100)\nprint(random_int)", "category": "Python"}, {"instruction": "Construct a simple web page with two fields, a login input and a password input.", "input": "", "output": "<html>\n<body>\n\n<form>\n    <div>\n        <label>Login:</label>\n        <input type=\"text\" id=\"login\" name=\"login\">\n    </div>\n\n    <div>\n        <label>Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\">\n    </div>\n</form>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a MySQL query for computing the average age of individuals in a table.", "input": "", "output": "SELECT AVG(age) FROM table_name;", "category": "Python"}, {"instruction": "Create a function that takes in two parameters ``str_1``and ``str_2``and returns a boolean indicating whether or not ``str_1`` is contained in ``str_2``.", "input": "str_1 = \"hello\", str_2 = \"hello world\"", "output": "def is_string_contained(str_1, str_2):\n    return str_1 in str_2", "category": "Python"}, {"instruction": "Create a JSON object in JavaScript.", "input": "", "output": "const myObject = { \n  \"name\": \"John Doe\", \n  \"age\": 25, \n  \"languages\": [\"English\",\"Spanish\"]\n}", "category": "Python"}, {"instruction": "Write an R program to find the unique values in a vector.", "input": "data = c(10, 20, 30, 20, 40, 30, 50)", "output": "data = c(10, 20, 30, 20, 40, 30, 50)\nuniq_data = unique(data)\nprint(uniq_data)  # Outputs: 10, 20, 30, 40, 50", "category": "Python"}, {"instruction": "Rewrite the following code snippet to an equivalent code in Python.", "input": "int i = 0;\nwhile (i < 10)\n{\n   System.out.println(i);\n   i++;\n}", "output": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Write a SQL query to extract employees with salary greater than 100,000 from the Employees table.", "input": "Table Name: Employees\nColumns of this table:\nemployee_id (integer), employee_name (varchar(255)), salary (numeric)", "output": "SELECT employee_id, employee_name, salary\nFROM Employees\nWHERE salary > 100000;", "category": "Python"}, {"instruction": "Write a CSS code to style all links (a element) with a red color.", "input": "", "output": "a {\n  color: red;\n}", "category": "Python"}, {"instruction": "Write an R function that computes the mean of two numbers.", "input": "", "output": "compute_mean <- function(x, y) {\n  mean = (x + y) / 2\n  return(mean)\n}", "category": "Python"}, {"instruction": "Create an array of 10 people in Python.", "input": "", "output": "people = [\"John\", \"Mia\", \"Nick\", \"Sarah\", \"Emma\", \"Alex\", \"Jayden\", \"Olivia\", \"Lucas\", \"Ava\"]", "category": "Python"}, {"instruction": "Create an SQL query for finding the total number of customers with the name \"John\".", "input": "", "output": "SELECT COUNT(*) \nFROM customers \nWHERE firstname = 'John';", "category": "Python"}, {"instruction": "Convert the following hexadecimal value to its decimal equivalent.", "input": "hex_value = \"0xFF\"", "output": "hex_value = \"0xFF\"\n\ndec_value = int(hex_value, 16)\nprint(dec_value) # output: 255", "category": "Python"}, {"instruction": "Write a regular expression to validate a domain name.", "input": "", "output": "regex = r\"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})$\"", "category": "Python"}, {"instruction": "Find the frequency of each letter in the given string.", "input": "string = \"banana\"", "output": "freq = {} \n  \nfor i in string: \n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n# freq is {'b': 1, 'a': 3, 'n': 2}", "category": "Python"}, {"instruction": "To make the displayed text in a webpage left aligned, add the appropriate HTML tags as a comment.", "input": "", "output": "<!-- <p align=\"left\">...text...</p> -->", "category": "Python"}, {"instruction": "Suggest a way to render the background colour of a div element to blue.", "input": "", "output": "<div style=\"background-color: blue;\"> ... </div>", "category": "Python"}, {"instruction": "Create a vector in R with the following entries: 3, 5, 7.", "input": "", "output": "v1 <- c(3, 5, 7)", "category": "Python"}, {"instruction": "Write a Python script to return the index of a specific value from a given list.", "input": "List: [1,2,3,4,5]\nValue: 4", "output": "list = [1,2,3,4,5]\nvalue = 4\n\nindex_value = list.index(value)\nprint(index_value) # 3", "category": "Python"}, {"instruction": "Create a template for a new React Component.", "input": "Component Name: Header", "output": "import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n\n      </div>\n    )\n  }\n} \n\nexport default Header;", "category": "Python"}, {"instruction": "Explain the purpose of a for-loop in C++.", "input": "", "output": "A for-loop in C++ is a statement that allows you to loop through a range of values and execute a set of statements for each value in the range. It is used to repeat a set of instructions for a specific amount of times or until a certain condition is reached.", "category": "Python"}, {"instruction": "Find the min and max of the given array of numbers.", "input": "Array: [5, 3, 10]", "output": "min = 3\nmax = 10", "category": "Python"}, {"instruction": "How would you create a debug statement to help identify an error in code", "input": "", "output": "print(f\"Error at line {lineno}: {error}\")", "category": "Python"}, {"instruction": "Write a Python program to find the number of days in a month specified by the user.", "input": "Month: February", "output": "days = 28\n\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')", "category": "Python"}, {"instruction": "Create a new class 'Dog' with a private attribute 'name' and two public methods 'bark' and 'setName'.", "input": "", "output": "class Dog:\n    __name = \"\"\n    \n    def __init__(self, name):\n        self.__name = name\n    \n    def bark(self):\n        print(\"Woof!\")\n    \n    def setName(self, name):\n        self.__name = name", "category": "Python"}, {"instruction": "Describe what the 'Error 404 Not Found' page means.", "input": "", "output": "Error 404 Not Found is an HTTP status code that is sent when the server is unable to find the requested page. It indicates that the page you are looking for could not be found on the server. This page may have been deleted, moved, or temporarily unavailable.", "category": "Python"}, {"instruction": "Write a Python for loop to produces the following output:", "input": "", "output": "for i in range(1, 11):\n    print(f\"{i}x{i} = {i*i}\")\n\n// Output:\n1x1 = 1\n2x2 = 4\n3x3 = 9\n4x4 = 16\n5x5 = 25\n6x6 = 36\n7x7 = 49\n8x8 = 64\n9x9 = 81\n10x10 = 100", "category": "Python"}, {"instruction": "Write a regex to match the email address format.", "input": "", "output": "regex = r'^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$'", "category": "Python"}, {"instruction": "Calculate the edit distance between the two strings.", "input": "str1 = \"SUPER\"\nstr2 = \"SPHERE\"", "output": "edit_distance = 2", "category": "Python"}, {"instruction": "Convert the given JSON object to XML format.", "input": "{\n\"name\" : \"John\",\n\"age\" : 25,\n\"profession\" : \"Developer\"\n}", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n   <name>John</name>\n   <age>25</age>\n   <profession>Developer</profession>\n</root>", "category": "Python"}, {"instruction": "Fetch the latest version of the package \"abcd\" and save it to your local environment.", "input": "", "output": "pip install --upgrade abcd", "category": "Python"}, {"instruction": "Create a data frame that for a given set of students contains their name, age, and grade level.", "input": "John (age 18, grade 12),\nJane (age 17, grade 11),\nTom (age 19, grade 13),\nEmily (age 17, grade 11).", "output": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"Name\": [\"John\",\"Jane\",\"Tom\",\"Emily\"],\n    \"Age\": [18,17,19,17],\n    \"Grade Level\": [12,11,13,11]\n})\n\nprint(df)", "category": "Python"}, {"instruction": "Write an API call in JavaScript to post a comment to a blog post.", "input": "var url = 'https://example.com/api/comments';", "output": "fetch(url, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        postId: '123',\n        author: 'John Doe',\n        comment: 'This is a comment!'\n    })\n});", "category": "Python"}, {"instruction": "Write a script that generates a random integer within a given range.", "input": "Minimum value: 0, Maximum value: 20", "output": "import random\nmin_val = 0\nmax_val = 20\nprint(random.randint(min_val, max_val))", "category": "Python"}, {"instruction": "Create a Bash script that changes all the filenames in a directory to lowercase.", "input": "Directory: ./TestCases", "output": "for f in $(ls ./TestCases);\ndo\n  mv $f $(echo $f | tr [A-Z] [a-z]);\ndone", "category": "Python"}, {"instruction": "Create a JSON representation of a Person object.", "input": "{\n  name: \"John\",\n  age: 25,\n  address: \"123 Main Street\"\n}", "output": "{\n \"name\": \"John\",\n \"age\": 25,\n \"address\": {\n \"street\": \"123 Main Street\"\n }\n}", "category": "Python"}, {"instruction": "Validate a credit card number.", "input": "378734493671000", "output": "true", "category": "Python"}, {"instruction": "Modify the provided code to swap two variables.", "input": "a = 1\nb = 2", "output": "a, b = b, a", "category": "Python"}, {"instruction": "Construct a query to find a specific record in a database.", "input": "Table: Users\nName: John", "output": "SELECT * FROM Users WHERE Name = 'John'", "category": "Python"}, {"instruction": "Identify if a given array is a palindrome.", "input": "[1, 2, 3, 3, 2, 1]", "output": "true", "category": "Python"}, {"instruction": "You need to read a series of intergers and output the smallest and largest number in the series.", "input": "[-9, 12, -7, 4, 3, -2]", "output": "Smallest number: -9\nLargest number: 12", "category": "Python"}, {"instruction": "Create a new list by changing all the strings in a given list to uppercase.", "input": "lst = [\"apple\", \"orange\", \"banana\"]", "output": "def to_upper_case_list(lst):\n    res = []\n    for s in lst:\n        res.append(s.upper())\n    return res\n\nif __name__ == '__main__':\n    lst = [\"apple\", \"orange\", \"banana\"]\n    print(to_upper_case_list(lst))", "category": "Python"}, {"instruction": "Write a function to generate a random 5 letter string.", "input": "", "output": "import random\n\ndef generate_random_5_letter_string():\n    res = \"\"\n    for i in range(5):\n        res += chr(random.randint(97, 122))\n    return res\n\nif __name__ == '__main__':\n    print(generate_random_5_letter_string())", "category": "Python"}, {"instruction": "Check if an element is present in a list.", "input": "lst = [1, 2, 3, 4]\nelement = 5", "output": "def is_element_in_list(lst, element):\n    return element in lst\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    element = 5\n    print(is_element_in_list(lst, element))", "category": "Python"}, {"instruction": "Convert a string to all uppercase.", "input": "text = \"Hello World\"", "output": "def to_uppercase(text):\n    return text.upper()\n\nif __name__ == '__main__':\n    text = \"Hello World\"\n    print(to_uppercase(text))", "category": "Python"}, {"instruction": "Calculate the area of a rectangle given height and width.", "input": "height = 2\nwidth = 5", "output": "def area_rectangle(height, width):\n    return height*width\n\nif __name__ == '__main__':\n    print(area_rectangle(2, 5))", "category": "Python"}, {"instruction": "Write a function to receive a list of numbers and return the sum of the list.", "input": "", "output": "def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "Write Python code to replace all the vowels with underscore.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\n\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ndef replace_vowels_with_underscore(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\nprint(replace_vowels_with_underscore(string)) # Output: \"H_ll_ W_rld!\"", "category": "Python"}, {"instruction": "Generate a regular expression in JavaScript to check if a string contains only alphabets.", "input": "", "output": "let regex = /^[a-zA-Z]+$/;\nconsole.log(regex.test(\"hello\")); // Output: true", "category": "Python"}, {"instruction": "Design a function in Python to find all the elements in an array that are divisible by 3.", "input": "arr = [3, 8, 15, 20, 7]", "output": "arr = [3, 8, 15, 20, 7]\n\ndef divisible_by_3(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0:\n            result.append(element)\n    return result\n\nprint(divisible_by_3(arr)) # Output: [3, 15, 20]", "category": "Python"}, {"instruction": "Illustrate the usage of a while loop in Java.", "input": "", "output": "int number = 5;\nwhile (number > 0) {\n System.out.println(\"Number: \" + number);\n number--;\n}", "category": "Python"}, {"instruction": "Given a class definition, write a method to count the number of objects created in the class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    _count = 0\n    def __init__(self, name, age):\n        self._count += 1\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def get_count(cls):\n        return cls._count", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes a string as a parameter and reverses it.", "input": "", "output": "function reverseString(str) {\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str.charAt(i);\n  }\n  return reversedStr;\n}", "category": "Python"}, {"instruction": "Create a Java class that contains two methods which take two integers as parameters and returns their sum as the result.", "input": "", "output": "public class Sum {\n\n  public static int sumInts(int a, int b) {\n    return a + b;\n  }\n\n  public static double sumDoubles(double a, double b) {\n    return a + b;\n  }\n\n}", "category": "Python"}, {"instruction": "Write a Perl script for extracting the first three words from a given string.", "input": "String: \"I love apples\"", "output": "@words = split(\" \", $string); \n\n$first_three_words = join(\" \", @words[0 .. 2]);\nprint \"$first_three_words\\n\";", "category": "Python"}, {"instruction": "Write a C program for reversing a linked list.", "input": "Input list: 1 -> 2 -> 3 -> 4 -> 5", "output": "#include <stdio.h> \n#include <stdlib.h> \n\nstruct Node { \n\tint data; \n\tstruct Node* next; \n}; \n\nstruct Node* reverseList(struct Node* head) \n{ \n\tstruct Node* prev = NULL; \n\tstruct Node* current = head; \n\tstruct Node* next; \n\twhile (current != NULL) { \n\t\tnext = current->next; \n\t\tcurrent->next = prev; \n\t\tprev = current; \n\t\tcurrent = next; \n\t} \n\thead = prev; \n\treturn head; \n}", "category": "Python"}, {"instruction": "Write a regular expression in Ruby that prints all the words beginning with 'a' in a string.", "input": "String: \"The quick brown fox jumps over the lazy dog\"", "output": "pattern = /\\ba\\S+\\b/\n\nstring.scan(pattern).each { |word| puts word }", "category": "Python"}, {"instruction": "Create a simple Python program that prints the characters of a string in reverse order.", "input": "String to be printed: \"Hello\"", "output": "string = \"Hello\" \n\nrevString = \"\" \nfor i in range(len(string)-1,-1,-1): \n\trevString = revString + string[i] \n  \nprint(revString)", "category": "Python"}, {"instruction": "Create a generator expression to return the squared values of a given list.", "input": "list_of_nums = [1, 2, 3, 4, 5]", "output": "squared_values = (num**2 for num in list_of_nums)", "category": "Python"}, {"instruction": "Modify the original list, so that it contains the numbers from 1 to 10.", "input": "original_list = [3, 4, 6, 8]", "output": "original_list[0] = 1\noriginal_list[1] = 2\noriginal_list.append(5)\noriginal_list.append(7)\noriginal_list.append(9)\noriginal_list.append(10)", "category": "Python"}, {"instruction": "Help the user enter a number and print the square of it.", "input": "", "output": "def print_square_of_a_number():\n    num = int(input(\"Enter a number: \"))\n    print(\"The square of the number is: \" + str(num**2))", "category": "Python"}, {"instruction": "Write a code to get the top 5 Twitter trends in the US.", "input": "", "output": "\"\"\"\nGet the top 5 Twitter trends in the US\n\"\"\"\n\nimport tweepy\n\ndef get_top_trends():\n    # Setup authorization\n    auth = tweepy.OAuthHandler('','')\n    auth.set_access_token('','')\n    api = tweepy.API(auth)\n\n    # Get trends\n    trends_result = api.trends_place(23424977)\n    trends = trends_result[0]['trends']\n\n    # Get top 5 trends\n    top_trends = []\n    for trend in trends:\n        if trend['tweet_volume'] is not None and len(top_trends) < 5:\n            top_trends.append(trend['name'])\n\n    return top_trends\n\nif __name__ == '__main__':\n    print(get_top_trends())", "category": "Python"}, {"instruction": "Create a function that converts seconds to minutes.", "input": "", "output": "def convert_seconds_to_minutes(seconds):\n    minutes = seconds // 60\n    return minutes", "category": "Python"}, {"instruction": "Write a code snippet to print the minutes between two timestamps.", "input": "t1 = datetime.datetime(2020, 1, 1, 12, 0)\nt2 = datetime.datetime(2020, 1, 1, 15, 30)", "output": "from datetime import datetime, timedelta\n\nt1 = datetime(2020, 1, 1, 12, 0)\nt2 = datetime(2020, 1, 1, 15, 30)\n\nminutes_difference = int((t2-t1).total_seconds()/60)\nprint(\"The difference in minutes between the two timestamps is: \" + str(minutes_difference) + \" minutes.\")", "category": "Python"}, {"instruction": "Help the user enter two numbers and print the sum of them.", "input": "", "output": "def print_sum_of_two_numbers():\n    num1 = int(input(\"Enter a number: \"))\n    num2 = int(input(\"Enter another number: \"))\n    print(\"The sum of the two numbers is: \" + str(num1 + num2))", "category": "Python"}, {"instruction": "Create a function that checks if a string contains all the vowels.", "input": "", "output": "def check_if_string_contains_all_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = [ltr for ltr in string.lower() if ltr in vowels]\n    return len(str_vowels) == len(vowels)", "category": "Python"}, {"instruction": "What is the command to create a new branch in the Git repository?", "input": "", "output": "The command to create a new branch in a Git repository is: git branch <new-branch-name>.", "category": "Python"}, {"instruction": "In MongoDB, what does the command 'db.collection.aggregate()' do?", "input": "", "output": "The aggregate command in MongoDB is used to group values from multiple documents together and perform a variety of aggregate operations such as computing averages, sums of values, finding distinct values, etc. It takes an array of aggregation pipeline stages as its first argument and outputs an array of computed results.", "category": "Python"}, {"instruction": "Create a Haskell function that takes a list of tuples and prints out the first element of each tuple.", "input": "", "output": "firstElems :: [(a, b)] -> [a]\nfirstElems [] = []\nfirstElems ((x, _):xs) = x : firstElems xs", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python code to replace negative numbers with 0 in the list.", "input": "data = [-4, -2, 5, 8, -1, 0]", "output": "data = [0, 0, 5, 8, 0, 0]\n\nresult = [0 if ele < 0 else ele for ele in data] # List comprehension", "category": "Python"}, {"instruction": "Classify the following code snippet:", "input": "name = input(\"What is your name? \")\nprint(\"Hello, \" + name)", "output": "This code snippet is a classification task as it is asking for user input and displaying the result based on the input provided.", "category": "Python"}, {"instruction": "Construct a regular expression in JavaScript to check if a given string starts with A and ends with Z.", "input": "", "output": "let regex = /^A.*Z$/;\nconsole.log(regex.test(\"ABDZ\")); // Output: true", "category": "Python"}, {"instruction": "Suggest a code to select all rows from the table \"users\" where the user type is \"VIP\".", "input": "", "output": "SELECT * FROM users WHERE user_type = 'VIP';", "category": "Python"}, {"instruction": "Write a SQL query to calculate the total average score.", "input": "", "output": "SELECT AVG(score) FROM scores;", "category": "Python"}, {"instruction": "Develop a function that is able to compute the number of days between two dates.", "input": "date1 = \"27 April, 2020\"\ndate2 = \"8 May, 2020\"", "output": "from datetime import datetime \n  \ndef days_between_dates(date1, date2): \n    date1 = datetime.strptime(date1, \"%d %B, %Y\") \n    date2 = datetime.strptime(date2, \"%d %B, %Y\") \n    return (date2 - date1).days \n\noutput = days_between_dates(date1, date2) \nprint (output) \n# Output: 11", "category": "Python"}, {"instruction": "Output a list that contains all the non-repeating characters from a given string.", "input": "string = \u201cthequickbrownfoxjumpsoverthelazydog\u201d", "output": "def non_repeating_characters(string):\n    character_set = set() \n    for c in string: \n        if c not in character_set: \n            character_set.add(c)\n    return list(character_set)\n\noutput = non_repeating_characters(string)\n# Output: ['h', 'd', 'g', 'u', 'e', 'm', 'o', 'p', 'q', 't', 'v', 'i', 'c', 'b', 'k', 'x', 'f', 'z', 'a', 'y', 'r', 'w', 'l', 'n', 's', 'j']", "category": "Python"}, {"instruction": "Create a conditional statement using the given variables.", "input": "x = 5\ny = 10", "output": "if x < y:\n    print(\"x is less than y\")", "category": "Python"}, {"instruction": "Develop a function to compute the cost of a route.", "input": "distance_matrix=[\n [ 0, 10, 15, 20 ], \n [ 10, 0, 35, 25 ], \n [ 15, 35, 0, 30 ], \n [ 20, 25, 30, 0 ]\n]\n\nroute = [0, 2, 3, 1]", "output": "def get_route_cost(distance_matrix,route):\n    cost = 0\n    for i in range(len(route)-1):\n        cost += distance_matrix[route[i]][route[i+1]]\n    return cost\n  \nroute_cost = get_route_cost(distance_matrix, route) \nprint (route_cost) \n# Output: 90", "category": "Python"}, {"instruction": "What is the most efficient way to search for a specific item in an array?", "input": "", "output": "The most efficient way to search for a specific item in an array is to use a binary search algorithm. Binary search works by repeatedly dividing the array in half until the desired item is found. This method has a time complexity of O(log n).", "category": "Python"}, {"instruction": "Write a regular expression to match numbers that start with 8", "input": "", "output": "The regular expression to match numbers that start with 8 is: ^8\\d+$", "category": "Python"}, {"instruction": "Build a neural network with one input layer, two hidden layers and one output layer, using Keras.", "input": "", "output": "import keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=1, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile model\nmodel.compile(loss='binary_crossentropy', optimizer='RMSprop', metrics=['accuracy'])", "category": "Python"}, {"instruction": "How do you check if a given string is in a list?", "input": "", "output": "You can check if a given string is in a list by using the \"in\" keyword. For example, if you have a list of strings [\"apple\", \"banana\", \"orange\"] and you want to check if the string \"banana\" is in the list, you can use the following syntax: \n\nif \"banana\" in lst:\n    print(\"String is in list\")", "category": "Python"}, {"instruction": "Sort a given matrix such that the elements in each row are in increasing order.", "input": "[[9, 2, 7], [5, 1, 6], [3, 8, 4]]", "output": "[[2, 7, 9], [1, 5, 6], [3, 4, 8]]", "category": "Python"}, {"instruction": "Change the font size of the text in a webpage from 12px to 24px.", "input": "", "output": "style=\"font-size:24px;\"", "category": "Python"}, {"instruction": "Create an SQL table with the following specifications", "input": "Table name: countries\nColumns: country_name (varchar(255)), population (int), continent (varchar(50))", "output": "CREATE TABLE countries (\n  country_name VARCHAR(255), \n  population INT,\n  continent VARCHAR(50)\n);", "category": "Python"}, {"instruction": "Write a JavaScript function to test if two given arrays are equal.", "input": "", "output": "function equalArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n \n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n \n  return true;\n}", "category": "Python"}, {"instruction": "Using binary search, find the index of a given number in an array of length n.", "input": "", "output": "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Categorize the following algorithm as either a depth-first search or a breadth-first search.", "input": "", "output": "The algorithm is a breadth-first search (BFS) since it starts at a root node and visits nodes in order of increasing depth.", "category": "Python"}, {"instruction": "Write a function to fill an array of size n with random integers in the range 0...k-1.", "input": "", "output": "def random_fill_array(n, k):\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0, k-1))\n    return arr", "category": "Python"}, {"instruction": "Write a SQL query to find the average price of products that cost more than $10.", "input": "Table: orders\nColumns: product_name ,   product_price", "output": "SELECT AVG(product_price)\nFROM orders\nWHERE product_price > 10;", "category": "Python"}, {"instruction": "Develop a function that is able to print a list of consecutive numbers between 1 and N, given an integer N as argument.", "input": "N = 5", "output": "def print_n_numbers(N):\n    for x in range(1,N+1):\n        print (x) \n\nprint_n_numbers(N) \n# Output: 1 2 3 4 5", "category": "Python"}, {"instruction": "Implement a function that is able to sum two integers, without using the '+' operator.", "input": "x = 10\ny = 20", "output": "def sum_without_plus(x,y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\n\nresult = sum_without_plus(x, y)\nprint (result)\n# Output: 30", "category": "Python"}, {"instruction": "Write a for loop in python for printing the square of numbers from 0 to 4.", "input": "", "output": "for num in range(5):\n    print(num**2)", "category": "Python"}, {"instruction": "Write a PHP function for formatting a date and time according to the given format.", "input": "date: '12-20-2020'\ntime: '17:30'\nformat: 'l, dS F Y h:i A'", "output": "function dateFormat($date, $time, $format) {\n    $dateTime = date_create_from_format('m-d-Y h:i', $date . \" \" . $time);\n    return date_format($dateTime, $format);\n}\n\n# Output: Thursday, 20th December 2020 05:30 PM", "category": "Python"}, {"instruction": "Write a Java program for encrypting the text \"Hello World!\" using the Caesar Cipher.", "input": "", "output": "public class CaesarCipher \n{ \n    // Encrypts text using a shift od \"s\" \n    public static StringBuffer encrypt(String text, int s) \n    { \n        StringBuffer result= new StringBuffer(); \n  \n        for (int i=0; i<text.length(); i++) \n        { \n            if (Character.isUpperCase(text.charAt(i))) \n            { \n                char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); \n                result.append(ch); \n            } \n            else\n            { \n                char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); \n                result.append(ch); \n            } \n        } \n        return result; \n    } \n  \n    // Driver code \n    public static void main(String[] args) \n    { \n        String text = \"Hello World!\"; \n        int s = 4; \n        System.out.println(\"Text  : \" + text); \n        System.out.println(\"Shift : \" + s); \n        System.out.println(\"Cipher: \" + encrypt(text, s)); \n    } \n} \n\n# Output: Cipher: Lipps Asvph!", "category": "Python"}, {"instruction": "Compare the value of the two integers and return True if the first is greater than the second.", "input": "Number_1: 5\nNumber_2: 10", "output": "public static boolean compare(int num1, int num2){\n    return num1 > num2;\n}\n\n// Calling the method\nboolean result = compare(5, 10);\n\n// Output\n// false", "category": "Python"}, {"instruction": "Find the area of a square with a given side.", "input": "Side: 6", "output": "36", "category": "Python"}, {"instruction": "Incorporate the PUT method in the given URL.", "input": "URL: https://example.com/users", "output": "https://example.com/users/PUT", "category": "Python"}, {"instruction": "Create a for loop for iterating over the elements of an array in JavaScript.", "input": "Array: [1, 2, 3, 4]", "output": "for(let i=0; i < [1,2,3,4].length; i++){\n    console.log([1,2,3,4][i]);\n}", "category": "Python"}, {"instruction": "Generate a custom URL for a Google search.", "input": "Search: Python Programming", "output": "https://www.google.com/search?q=python+programming", "category": "Python"}, {"instruction": "Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.", "input": "words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]", "output": "def find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))", "category": "Python"}, {"instruction": "Create a function to convert miles per hour to kilometers per hour.", "input": "", "output": "def convert_mph_to_kph(mph):\n    return mph * 1.609", "category": "Python"}, {"instruction": "Create a SQL query to delete a record from a table.", "input": "Table Name: Users\nRecord ID: 5", "output": "DELETE FROM Users WHERE id = 5;", "category": "Python"}, {"instruction": "Add an element to the beginning of an array.", "input": "Array = [3, 4, 6, 9]", "output": "# Create a new array with one element at the beginning\nnew_array = [1] + Array\n\n# Print the new array\nprint(new_array) # Output: [1, 3, 4, 6, 9]", "category": "Python"}, {"instruction": "Create a block of code which sorts the given list in increasing order.", "input": "List = [10, 4, 5, 7, 2]", "output": "# Create a new list to store the sorted elements\nsortedList = []\n\n# Loop through the given list and add the sorted elements to the new list\nwhile List:\n    minimum = List[0]\n    for x in List: \n        if x < minimum:\n            minimum = x\n    sortedList.append(minimum)\n    List.remove(minimum)\n\n# Print the sorted list\nprint(sortedList) # Output: [2, 4, 5, 7, 10]", "category": "Python"}, {"instruction": "Write a function in Java to find the intersection of 2 arrays.", "input": "", "output": "static int[] intersect(int[] array1, int[] array2){\n   \n    int[] result = new int[array1.length];\n    int k = 0;\n \n    for (int i = 0; i < array1.length; i++) {\n        for (int j = 0; j < array2.length; j++) {\n            if(array1[i] == array2[j]){\n                result[k] = array1[i];\n                k++;\n            }\n        }\n    }\n\n    // Return the result array \n    return result;\n}", "category": "Python"}, {"instruction": "Write an SQL query to update the data of a specific row.", "input": "Table name: employee_table\nFields: id, name, age\nUpdate name to:\"John\" and Age to 25 where id = 4", "output": "UPDATE employee_table SET name = \"John\", age = 25  WHERE id = 4;", "category": "Python"}, {"instruction": "Create a request handler for a POST request in Python Flask.", "input": "", "output": "# Import the necessary libraries\nfrom flask import Flask, request\n\n# Initialize the app\napp = Flask(__name__) \n  \n@app.route('/post_request_handler', methods = ['POST']) \ndef post_request_handler(): \n\n    # Extract the data from POST request \n    data = request.get_json()  \n\n    # Do something with the data\n\n    # Return a response\n    return \"Post request handled\", 200", "category": "Python"}, {"instruction": "Compute the result of the following equation:  5*3 + 1/2", "input": "", "output": "16.5", "category": "Python"}, {"instruction": "Create a function to calculate the total discount when given items to purchase and their corresponding discounts.", "input": "item_list = [\"shirt\", \"trees\", \"shoes\"]\ndiscount_list = [0.25, 0.3, 0.2]", "output": "def calculate_total_discount(items, discounts):\n    total_discount = 0\n    for i in range(len(items)):\n        total_discount += discounts[i]\n    return total_discount", "category": "Python"}, {"instruction": "Suggest a code to sort the list of tuples below in the descending order of scores.", "input": "my_list = [('John', 70), ('Jane', 80), ('Dave', 65)]", "output": "my_list.sort(key=lambda tup: tup[1], reverse=True)", "category": "Python"}, {"instruction": "Write a Python program to display even numbers between two intervals.", "input": "", "output": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers_in_range(2, 10)", "category": "Python"}, {"instruction": "Modify the following code to handle large numbers correctly.", "input": "def factorial(n):  \n   fact = 1\n   for i in range(1, n+1): \n       fact *= i \n   return fact", "output": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact*i % 10**10\n    return fact % 10**10", "category": "Python"}, {"instruction": "Parse the following JSON string and extract all the keys into a list.", "input": "jsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'", "output": "import json\n\njsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'\n\n# Use json.loads to parse the string\ndata = json.loads(jsonString)\n\n# initializing a list\nlist = []\n\n# extract the keys \nfor key in data:\n    list.append(key)\n    \nprint(list)\n\n# Output: ['name', 'age', 'location']", "category": "Python"}, {"instruction": "Create a MySQL query to join two tables, 'customers' and 'orders', and select all the fields from 'orders' table except the field 'order_date'.", "input": "", "output": "SELECT orders.* \nFROM orders \nJOIN customers ON orders.customer_id = customers.customer_id\nWHERE orders.order_date IS NOT NULL;", "category": "Python"}, {"instruction": "Create a HTML form with two input fields, one for passwords and one for confirm passwords. Validate that the passwords should match to let the user submit the form.", "input": "", "output": "<form onsubmit=\"return validatePassword()\">\n  <label for=\"password\">Password</label>\n  <input type=\"password\" id=\"password\" name=\"password\">\n\n  <label for=\"passwordconfirm\">Confirm Password</label>\n  <input type=\"password\" id=\"passwordconfirm\" name=\"passwordconfirm\">\n\n  <button type=\"submit\">Submit</button>\n</form>\n\n<script>\n  function validatePassword() {\n    if (document.getElementById('password').value \n        == document.getElementById('passwordconfirm').value) {\n      return true;\n    } else {\n      alert(\"Passwords do not match!\");\n      return false;\n    }\n  }\n</script>", "category": "Python"}, {"instruction": "Design a CSS template for a website.", "input": "", "output": "* {\n  margin: 0; \n  padding: 0; \n  box-sizing: border-box; \n}\n\nbody {\n  font-family: Arial, sans-serif; \n  font-size: 14px;\n  line-height: 1.5;\n  background-color: #f5f5f5; \n}\n\nh1 { \n  font-size: 2em; \n  margin-bottom: 10px; \n} \n\nh2 { \n  font-size: 1.5em; \n  margin-bottom: 5px;\n}\n\na { \n  color: #2016B6; \n  text-decoration: none; \n  transition: all .3s ease; \n}", "category": "Python"}, {"instruction": "Generate a XML structure to store the following information.", "input": "Name: John Smith\nAge: 28\nGender: Male", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<person>\n   <name>John Smith</name>\n   <age>28</age>\n   <gender>Male</gender>\n</person>", "category": "Python"}, {"instruction": "Write a PHP program to generate a multiplication table for the number 8.", "input": "", "output": "<?php \nfor($i=1; $i<=10; $i++){\n  $product = 8 * $i;\n  echo \"8 x $i = $product \\n\";\n}\n?>", "category": "Python"}, {"instruction": "Write a C++ function that generates a Fibonacci series of numbers up to an integer n.", "input": "n = 8", "output": "#include <iostream>\nusing namespace std; \n  \nint Fibonacci (int n){ \n  if (n<=0) \n    return 0; \n  if (n==1) \n    return 1; \n  else\n    return Fibonacci(n-1)+Fibonacci(n-2); \n} \n  \nint main() {\n  int n;\n  cin >> n;\n  for (int i=0;i <n; i++){\n    cout << Fibonacci(i) << \" \"; \n  }\n  \n  return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find all the customers in the 'customers' table who are from the United States.", "input": "", "output": "SELECT * \nFROM customers \nWHERE country = 'United States';", "category": "Python"}, {"instruction": "Create a for-loop in Python that iterates through a list of numbers and prints out only the numbers in the list that are divisible by 5.", "input": "myList = [10,11,20,21,30,31,40]", "output": "for i in myList:\n    if i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a regex that matches any five-digit zip code.", "input": "[noinput]", "output": "^[0-9]{5}$", "category": "Python"}, {"instruction": "Write a function that returns the largest number in a list.", "input": "List: [1,2,3,4,5,6]", "output": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6", "category": "Python"}, {"instruction": "Write a function to generate a random password based on the given parameters.", "input": "Parameters: Length of password must be 8 characters, must contain at least one uppercase letter, contain at least one lowercase letter and must include at least one number", "output": "import random\nimport string\n\ndef generate_password(min_length, max_length, upper_case, lower_case, number):\n    password = []\n    for _ in range(min_length, max_length + 1):\n        password.append(random.choice(string.ascii_lowercase if lower_case else '') +\n                        random.choice(string.ascii_uppercase if upper_case else '') +\n                        random.choice(string.digits if number else ''))\n    \n    random.shuffle(password)\n    return ''.join(password)\n\n# Driver code\nprint(generate_password(8, 8, True, True, True))", "category": "Python"}, {"instruction": "Write a list comprehension to generate a list of all prime numbers less than 100.", "input": "[noinput]", "output": "# An efficient list comprehension to generate a list of prime numbers\n# less than 100\nprime_numbers = [num for num in range(2, 100) \n                 if all(num % i != 0 for i in range(2, int(pow(num, 0.5) + 1)))]", "category": "Python"}, {"instruction": "Create a webpage with a button to allow the user to log in.", "input": "[noinput]", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Login Page</title>  \n</head>\n<body>\n \n <form action=\"login.php\" method=\"post\">\n  <input type=\"submit\" value=\"Login\" />\n </form>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to select the top 5 books with the highest book sales.", "input": "Table name: book_sales\nColumns: book_name, book_sales", "output": "SELECT book_name, book_sales\nFROM book_sales \nORDER BY book_sales DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Convert a list of strings to a list of integers.", "input": "list_of_strings  = [\"1\", \"2\", \"3\"]", "output": "list_of_ints = [1, 2, 3]", "category": "Python"}, {"instruction": "Write a while loop that adds 1 to the value of \u2018var\u2019 each time it is iterated until it reaches 5.", "input": "var = 0", "output": "while var < 5: \n    var += 1", "category": "Python"}, {"instruction": "Create a new string from the given string by replacing any character with its opposite.", "input": "string = \"Hello\"", "output": "opposite_string = \"Sllfs\"", "category": "Python"}, {"instruction": "Reorder the lines of the code to make the program run correctly.", "input": "def example():\n    print(\"Line \" + str(a))\n    a = 6\n    print(\"Line \" + str(a))", "output": "def example():\n    a = 6\n    print(\"Line \" + str(a))\n    print(\"Line \" + str(a))", "category": "Python"}, {"instruction": "Debug the following code to print the correct output.", "input": "num = [2, 5, 12, 8]\noutput = []\n\nfor n in num:\n  output.apend(n**2)\n\nprint(output)", "output": "num = [2, 5, 12, 8]\noutput = []\n\nfor n in num:\n  output.append(n**2)\n\nprint(output)", "category": "Python"}, {"instruction": "What is a dynamic programming algorithm?", "input": "", "output": "Dynamic programming is an algorithm design technique that is used to solve optimization problems by breaking them down into smaller subproblems. It enables you to solve a problem by combining solutions to similar subproblems, saving time and often being more efficient than standard methods. It is widely used in operations research, artificial intelligence, bioinformatics, linguistics, and other fields.", "category": "Python"}, {"instruction": "Suggest a suitable language for developing iOS mobile applications.", "input": "", "output": "A suitable language for developing iOS mobile applications is Swift. Swift is an Apple-developed language which is optimized for performance, and is capable of providing a great user experience on iOS devices.", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for sorting an array of numbers in increasing order.", "input": "", "output": "A suitable algorithm for sorting an array of numbers in increasing order could be the Quick Sort algorithm. This algorithm has an average time complexity of O(nlog(n)), making it an efficient sorting algorithm for large datasets.", "category": "Python"}, {"instruction": "Suggest a data structure for storing real-time stock prices of different companies.", "input": "", "output": "A suitable data structure for storing real-time stock prices of different companies could be a heap, because it provides efficient access to the lowest values. Since a heap will always store the lowest values, it can be used to keep track of the latest stock prices of each company.", "category": "Python"}, {"instruction": "Suggest a suitable data structure for storing employee information.", "input": "", "output": "A suitable data structure for storing employee information could be a hash table, where the keys are the employee IDs, and the values are the employee details such as name, role, and contact details. This data structure would provide efficient lookups, while being easy to maintain and update.", "category": "Python"}, {"instruction": "Construct a custom data type that is capable of representing the information of a student in a college.", "input": "", "output": "A custom data type that is capable of representing the information of a student in a college could be a dictionary where the keys represent different student details, such as name, student ID, GPA, and course load. The values for each key would be the respective information for a particular student.", "category": "Python"}, {"instruction": "What is the data type returned by the following code snippet?", "input": "value = 2**8", "output": "The data type returned by the following code snippet is an integer.", "category": "Python"}, {"instruction": "Suggest a machine learning algorithm to solve a binary classification problem.", "input": "", "output": "A machine learning algorithm suitable to solve a binary classification problem could be Logistic Regression, Support Vector Machines, or Naive Bayes. These algorithms are capable of solving binary classification problems and have proven to produce good results in a variety of applications.", "category": "Python"}, {"instruction": "Define an application programming interface (API) for a given program.", "input": "", "output": "An application programming interface (API) for a program can be defined as a set of routines, protocols, and tools that provide access services for a software component. An API can expose some aspects of a program's functionality, such as creating a user or managing database records, so that other programs can interact with it and access its data.", "category": "Python"}, {"instruction": "Suggest a better data structure for the following situation:", "input": "You have to maintain a record of employees with the property name and telephone number.", "output": "A better data structure for this situation would be to use a hash table, where the name is the key and the phone number is the value. This data structure would provide quick lookups and make updating records efficient.", "category": "Python"}, {"instruction": "Classify the following classes into Group A and Group B.", "input": "apple, banana, pineapple, strawberry", "output": "Group A: apple, banana\nGroup B: pineapple, strawberry", "category": "Python"}, {"instruction": "Make the following sentence in a statement instantiable.", "input": "The quick brown fox", "output": "The quick brown fox jumped over the lazy dog.", "category": "Python"}, {"instruction": "Write an HTML page that displays a Javascript alert when a button is clicked.", "input": "", "output": "<html>\n  <head>\n    <!-- Include the script -->\n    <script src=\"alert.js\"></script>\n  </head>\n  <body>\n    <button id=\"btnAlert\" onclick=\"alertFunction()\">Alert</button>\n  </body>\n</html>\n\n// alert.js\n\nfunction alertFunction() {\n  alert(\"This is an alert!\");\n}", "category": "Python"}, {"instruction": "Extract the text from a given HTML document.", "input": "<html>\n<head><title>My title</title></head>\n<body>\n  <h1>Hello, world!</h1>\n  <p>This is a sample HTML document.</p>\n</body>\n</html>", "output": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\n<html>\n<head><title>My title</title></head>\n<body>\n  <h1>Hello, world!</h1>\n  <p>This is a sample HTML document.</p>\n</body>\n</html>\n\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser') \nprint(soup.get_text())\n\n#Output\nHello, world!\nThis is a sample HTML document.", "category": "Python"}, {"instruction": "Complete the function below to make a list of n numbers and return the result.", "input": "n = 5", "output": "def create_list(n):\n  result = [] \n  for i in range(0,n): \n    result.append(i) \n  return result", "category": "Python"}, {"instruction": "Suggest a suitable language to build a web application.", "input": "", "output": "A suitable language to build a web application could be JavaScript, Python, or PHP. All of these languages are popular for web development and provide good support for web development activities such as database operations, user authentication, and server-side programming.", "category": "Python"}, {"instruction": "Create a function in Python that shuffles the elements of an input list.", "input": "arr = [1, 4, 5, 8, 9, 2]", "output": "import random \n\narr = [1, 4, 5, 8, 9, 2]\n\ndef randomize_list(arr): \n    random.shuffle(arr) \n    return arr \n\nprint(randomize_list(arr)) # Output: [9, 1, 2, 4, 5, 8]", "category": "Python"}, {"instruction": "Write a function in Python to generate a list containing the sum of corresponding elements given two lists.", "input": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]", "output": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]\ndef add_corresponding_elements(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(add_corresponding_elements(list1, list2)) # Output: [10, 12, 13]", "category": "Python"}, {"instruction": "Find the volume of a 3D cube in JavaScript.", "input": "length = 10", "output": "let length = 10;\nlet volume = length * length * length;\nconsole.log(volume); // Output: 1000", "category": "Python"}, {"instruction": "Calculate the number of minutes in 3 hours using Python.", "input": "", "output": "minutes = 3 * 60\nprint(minutes)", "category": "Python"}, {"instruction": "Write an SQL query to select all records from a table named \"users\" where the email address field contains \"@gmail.com\".", "input": "", "output": "SELECT * FROM users WHERE email LIKE '%@gmail.com';", "category": "Python"}, {"instruction": "Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers.", "input": "", "output": "def power_list(numbers):\n  return [num**2 for num in numbers]", "category": "Python"}, {"instruction": "Print the following string in HTML.", "input": "\"Welcome to my website!\"", "output": "<html>\n <head>\n  <title>Welcome to my website!</title>\n </head>\n <body>Welcome to my website!</body>\n</html>", "category": "Python"}, {"instruction": "Sum the numbers from 1 to 10 using a for loop in Python.", "input": "", "output": "total = 0\nfor i in range(1, 11):\n  total += i\n\nprint(total)", "category": "Python"}, {"instruction": "Using the Python requests library, implement a call to the given URL and print the response.", "input": "URL: http://example.com", "output": "import requests\n\nresp = requests.get('http://example.com')\nprint(resp.text)", "category": "Python"}, {"instruction": "Create a bash script that prints a given string ten times.", "input": "Hello", "output": "#!/bin/bash\n\nfor i in {1..10}\ndo\n    echo \"Hello\"\ndone", "category": "Python"}, {"instruction": "Parse the given HTML string into a readable JSON object.", "input": "<html>\n<body>\n<h1>Hello World!</h1>\n</body>\n</html>", "output": "{\n \"type\": \"html\",\n \"h1\": \"Hello World!\"\n}", "category": "Python"}, {"instruction": "Optimize the following code by using the C++ vector container.", "input": "int a[20];\n\nfor (int i=0;i<20;i++){\n    a[i]=i;\n}", "output": "#include <vector>\n#include <iostream>\n\nint main() \n{    \n    std::vector<int> a(20);\n    for (int i = 0; i < a.size(); i++) \n    {\n        a[i] = i;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all employees who have salary higher than $50,000.", "input": "", "output": "SELECT * FROM Employees WHERE salary>50000;", "category": "Python"}, {"instruction": "Create a HTML page that displays the given text in a headline.", "input": "This is a headline!", "output": "<!DOCTYPE html>\n<html>\n <head>\n  <title>Headline</title>\n </head>\n <body>\n  <h1>This is a headline!</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Sort the given array of numbers from least to greatest.", "input": "[11, 5, 9, 3, 6]", "output": "[3, 5, 6, 9, 11]", "category": "Python"}, {"instruction": "Write a CSS page to center align a given paragraph element.", "input": "", "output": "p {\n  text-align: center;\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to modify given list and convert all elements to lowercase.", "input": "['Hello', 'WoRld', '!']", "output": "function toLowerCase(list) {\n  return list.map(el => el.toLowerCase());\n}\n\ntoLowerCase(['Hello', 'WoRld', '!']); // => [\"hello\", \"world\", \"!\"]", "category": "Python"}, {"instruction": "Given an array of numbers, write a prototype JavaScript function to find the average value of all numbers in the array", "input": "[6, 5, 8, 10]", "output": "function findAverage(numbers) {\n  let sum = 0;\n  for (number of numbers) {\n    sum += number;\n  }\n  return sum / numbers.length;\n}", "category": "Python"}, {"instruction": "Explain serverside rendering in web development.", "input": "", "output": "Server-side rendering is a process of generating HTML for a website or web application on the server side before it is sent to the client side. It allows for rendering pages on the server instead of the client, which provides faster loading times and reduces the load on the client's browser, computer, or device. It also provides improved search engine optimization, as the search engine can now crawl the content from the server and generate better results.", "category": "Python"}, {"instruction": "Find the area of a rectangle given its width and height.", "input": "Width: 3\nHeight: 8", "output": "Area of the rectangle is 24.", "category": "Python"}, {"instruction": "Using lambda expressions, write a function to convert a given temperature value in celsius to fahrenheit.", "input": "", "output": "convert_c_to_F = lambda x: x*9/5 + 32", "category": "Python"}, {"instruction": "Create a program that searches a given string for a word and prints out its position.", "input": "String: I am a programmer\nWord: programmer", "output": "The word 'programmer' is at position 9 in the given string.", "category": "Python"}, {"instruction": "Find the closest match in a given string using the Levenshtein edit distance.", "input": "String: helpful\nClosest match: healthful", "output": "editDistance(helpful, healthful) = 2", "category": "Python"}, {"instruction": "Edit the following code so that it prints the sum of all elements of given array", "input": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    for i in len(arr):\n        print(arr[i])", "output": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    total = 0\n    for i in arr:\n        total += i\n    print(total)", "category": "Python"}, {"instruction": "Write a routine to print the elements in a linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\ndef printList(head): \n    temp = head \n    while(temp): \n        print (temp.data, end=\" \") \n        temp = temp.next", "category": "Python"}, {"instruction": "Generate a string which has \"Hello\" plus the length of the input string.", "input": "\"Hi\"", "output": "\"Hello3\"", "category": "Python"}, {"instruction": "Using the given data point, train a linear regression model.", "input": "[4, 7], [2, 5], [3, 6]", "output": "import numpy as np\n\nX = np.array([[4,7], [2,5], [3,6]])\ny = np.array([7, 5, 6])\n\nfrom sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a PHP program to find the maximum of two numbers without using if...else or a comparison operator.", "input": "", "output": "<?php \n  \n// Function to return the maximum of two numbers without using if...else or a comparison operator\nfunction maximum($x, $y) \n{ \n    // Calculate the sum of two numbers\n    $sum = $x + $y; \n  \n    // Calculate the difference between two numbers\n    $diff = $x - $y; \n  \n    // Set sign of the difference\n    $s = $diff >> 31 & 0x1; \n  \n    // Return maximum of two numbers  \n    return ($x * $s + $y * (1-$s)); \n} \n  \n// Driver code \necho \"Maximum of 45 and 68 is \", maximum(45, 68); \n?>", "category": "Python"}, {"instruction": "Create an assembly language program to find the sum of two numbers.", "input": "", "output": ".MODEL SMALL\n        .STACK 100H\n \n        .DATA\nNUM1  DB  12H \nNUM2  DB  17H \nRES   DB  ?\n \n        .CODE\nMAIN   PROC\n        MOV AX, @DATA\n        MOV DS, AX\n \n        MOV AL, NUM1  ; Move value of num1 in AL\n        MOV AH, 0     ; Clear AH\n                ADD AL, NUM2  ; Add num2 to AL\n        MOV RES, AL\n \n        MOV AH, 4CH   ; return to operating system\n        INT 21H\nMAIN   ENDP\n        END MAIN", "category": "Python"}, {"instruction": "Write a C++ program to apply a Caesar cipher to a given string.", "input": "ROT13", "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring rot13(string s) { \n    for (int i=0; i<s.length(); i++) \n    {   \n        // If uppercase letter \n        if (s[i] >= 'A' && s[i] <= 'Z') \n            s[i] = (s[i] - 'A' + 13) % 26 + 'A'; \n        // if lowercase letter\n        else if (s[i] >= 'a' && s[i] <= 'z') \n            s[i] = (s[i] - 'a' + 13) % 26 + 'a'; \n    } \n    return s; \n} \n\nint main() { \n    string s = \"ROT13\";  \n    string cipher = rot13(s); \n    cout << cipher; \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a C++ function to search for a given item in the given array.", "input": "myArray = [10, 11, 12, 15, 17], x = 12", "output": "#include <iostream>\n \nusing namespace std;\n \n// Function to search an element in the array\n// arr[]  = array to search\n// x      = element to search\n// n      = size of array\nbool search(int arr[], int n, int x)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (arr[i] == x)\n      return true;\n  return false;\n}\n \nint main()\n{\n  int arr[] = {10, 11, 12, 15, 17};\n  int x = 12;\n  int n = sizeof(arr) / sizeof(arr[0]);\n \n  // Calling the search function\n  if (search(arr, n, x) == true)\n    cout << \"Element found\\n\"; \n  else\n    cout << \"Element not found\\n\"; \n \n  return 0;\n}", "category": "Python"}, {"instruction": "Compile the following PHP code and explain the output.", "input": "<?php\n$a = 5;\n$b = \u20185\u2019;\n\nvar_dump($a == $b);\n?>", "output": "bool(true)\n\nThe output will be \"bool(true)\" because the == operator performs type conversion and compare the values of $a only. Therefore, the comparison of 5 (integer) with \"5\" (string) will result in true.", "category": "Python"}, {"instruction": "Find the product of all values in a given dictionary.", "input": "Dictionary: {'a': 10, 'b': 20, 'c': 30}", "output": "The product of all values in the given dictionary is 6000.", "category": "Python"}, {"instruction": "Create a list comprehension expression to generate a list of the squares of all even numbers from 1 to 10.", "input": "", "output": "[x**2 for x in range(1, 11) if x % 2 == 0]", "category": "Python"}, {"instruction": "Create a function that sorts a given list of strings alphabetically.", "input": "", "output": "def sort_list(strings):\n    return sorted(strings)", "category": "Python"}, {"instruction": "Write a code to search for an element in a given array of numbers.", "input": "Array: [30, 2, 10, 15, 33]\nElement: 10", "output": "The element 10 is found at index 2 in the given array.", "category": "Python"}, {"instruction": "Insert a given value in the middle of a linked list.", "input": "Linked list: [1, 2, 3]\nValue: 4", "output": "[1, 2, 4, 3]", "category": "Python"}, {"instruction": "Divide a given list of numbers by a given number.", "input": "List: [15, 20, 25, 30]\nNumber: 5", "output": "[3, 4, 5, 6]", "category": "Python"}, {"instruction": "Rewrite the following Bash program to print only even numbers between 0 and 100.", "input": "#!/bin/sh \n\nfor i in $(seq 0 100)\ndo\n  echo $i\ndone", "output": "#!/bin/sh \n\n# loop from 0 to 100\nfor i in $(seq 0 2 100)\ndo\n  echo $i\ndone", "category": "Python"}, {"instruction": "Calculate the probability of an event that occurs 3 out of 10 times.", "input": "", "output": "probability = 0.3", "category": "Python"}, {"instruction": "Write a Java program to find the largest number among three numbers entered by the user.", "input": "", "output": "import java.util.Scanner;\n \npublic class Main {\n \n    public static void main(String[] args) {\n     \n        Scanner input = new Scanner(System.in);\n        System.out.println(\"Enter three numbers:\");\n \n        int n1 = input.nextInt();\n        int n2 = input.nextInt();\n        int n3 = input.nextInt();\n \n        int result = Math.max(n1, Math.max(n2, n3));\n \n        System.out.println(\"Largest number: \" + result);\n    }\n}", "category": "Python"}, {"instruction": "Write an AngularJS controller to set the \"page\" variable to be the same as the page parameter passed in the URL.", "input": "", "output": "app.controller('pageCtrl', function ($scope, $location) {\n    $scope.page = $location.search().page;\n});", "category": "Python"}, {"instruction": "Perform insertion sort on a given array.", "input": "arr = [5, 1, 6, 2, 4, 3]", "output": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\narr = [5, 1, 6, 2, 4, 3]\nprint(insertionSort(arr)) # output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function to retrieve and reverse the order of all words in a sentence.", "input": "sentence = \"This is a sentence.\"", "output": "def reverseSentence(sentence):\n    words = sentence.split()\n    rev_words = [word[::-1] for word in words]\n    return \" \".join(rev_words)\n\nsentence = \"This is a sentence.\"\nprint(reverseSentence(sentence)) # output: sihT si a ecnetnes.", "category": "Python"}, {"instruction": "Compress a given string to shorter characters by replacing substrings of length 3.", "input": "string = \"aaabbcc\"", "output": "def compress(string):\n    compressed = \"\"\n    count = 1\n    for i in range(len(string)):\n        if (i+1 < len(string) and string[i] == string[i+1]):\n            count += 1\n        else:\n            if count > 3:\n                compressed += string[i] + str(count)\n            else:\n                compressed += string[i]*count\n            count = 1\n    return compressed\n\nstring = \"aaabbcc\"\nprint(compress(string)) # output: a3b2c2", "category": "Python"}, {"instruction": "Convert a binary string to a decimal integer.", "input": "binString=\"11101\"", "output": "def binaryToDecimal(binString): \n    num = 0\n    for i in range(len(binString)): \n        num += int(binString[i]) * pow(2, len(binString)-1-i) \n    return num\n  \nbinString=\"11101\"\nbinaryToDecimal(binString) # output: 29", "category": "Python"}, {"instruction": "Write a function that computes the factorial of a positive integer.", "input": "8", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nprint(factorial(8)) # output: 40320", "category": "Python"}, {"instruction": "Write a function to select the second max value in an array.", "input": "a = [1, 3, 6, 8, 7, 0]", "output": "def selectSecondMax(arr): \n    max_1 = 0\n    max_2 = 0\n  \n    for value in arr: \n        if (value > max_1): \n            max_2 = max_1 \n            max_1 = value \n        elif (value > max_2 and value != max_1): \n            max_2 = value\n    return max_2 \n  \na = [1, 3, 6, 8, 7, 0]\nprint(selectSecondMax(a)) # output: 6", "category": "Python"}, {"instruction": "Write a function that converts a number to its corresponding month name.", "input": "4", "output": "def numToMonth(num):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months[num-1]\n\nnumToMonth(4) # output: April", "category": "Python"}, {"instruction": "Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.", "input": "mass = 3.5 g, volume = 2.6 cm$^3$", "output": "def compute_bulk_density(mass, volume):\n    \"\"\"Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.\"\"\"\n    return mass / volume\n\nif __name__ == '__main__':\n    mass = 3.5 # g\n    volume = 2.6 # cm^3\n    print(compute_bulk_density(mass, volume))", "category": "Python"}, {"instruction": "Given an array with n numbers, write a function to find if there exists three elements in the array whose sum is equal to a given number.", "input": "array = [5, 3, 1, 8], number = 14", "output": "def sum_three_elements(array, number):\n    \"\"\"Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.\"\"\"\n    array.sort()\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            temp = array[i] + array[left] + array[right]\n            if temp == number:\n                return True\n            elif temp < number:\n                left += 1\n            else:\n                right -= 1\n    return False\n\nif __name__ == '__main__':\n    a = [5, 3, 1, 8]\n    number = 14\n    print(sum_three_elements(a, number))", "category": "Python"}, {"instruction": "Print the sum of the first ten natural numbers.", "input": "", "output": "def sum_of_first_ten():\n    \"\"\"Print the sum of the first ten natural numbers.\"\"\"\n    total = 0\n    for i in range(1, 11):\n        total += i\n    return total\n\nif __name__ == '__main__':\n    print(sum_of_first_ten())", "category": "Python"}, {"instruction": "Construct a function to check whether a string is a valid IPv4 address or not.", "input": "", "output": "def is_valid_ipv4(string):\n    # Split the string at the '.'s\n    parts = string.split(\".\")\n\n    # Check if the length of the parts is valid\n    if len(parts) != 4:\n            return False\n\n    # Iterate over each part and check if it is a valid number\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))", "category": "Python"}, {"instruction": "Find the maximum product of three numbers in an array.", "input": "[1, -5, -6, 10, 20, 15]", "output": "def max_product_of_three(arr):\n    \"\"\"Find the maximum product of three numbers in an array.\"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return max product of the first three numbers\n    return arr[0] * arr[1] * arr[2]\n\nif __name__ == '__main__':\n    print(max_product_of_three([1, -5, -6, 10, 20, 15]))", "category": "Python"}, {"instruction": "Compress the following string using a Huffman algorithm.", "input": "\"aaaaaaaaabccddddee\"", "output": "import heapq\n\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    \n    heap = [[weight, [char, \"\"]] for char, weight in freq.items()]\n    heapq.heapify(heap)\n\n    while len(heap) > 1:\n        low = heapq.heappop(heap)\n        high = heapq.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    \n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:    \n        codes[char] = code\n        encoded += code\n\n    return codes, encoded\n\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)", "category": "Python"}, {"instruction": "Check if two strings are an anagram of each other.", "input": "string1 = \"elbon\" string2 = \"noble\"", "output": "def is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))", "category": "Python"}, {"instruction": "Edit the code below so that the condition outcome is true. \n\nif 3 > 5:\n    outcome = True", "input": "", "output": "if 5 > 3:\n    outcome = True", "category": "Python"}, {"instruction": "Create a function to convert a string of words into a dictionary with the words as keys.", "input": "string = \"Hello World Bye World\"", "output": "def string_to_dict(string):\n    data = string.split(' ') \n    answer = dict() \n    for element in data: \n        if element in answer: \n            answer[element] += 1\n        else: \n            answer[element] = 1\n    return answer", "category": "Python"}, {"instruction": "You are given a string. Remove duplicated characters from the string and return the output.", "input": "string = \"Mississippi\"", "output": "def remove_duplicates(string): \n    new_string = [] \n    for i in string: \n        if i not in new_string: \n            new_string.append(i)    \n    return ''.join(new_string)", "category": "Python"}, {"instruction": "You must refactor a code to reduce the complexity and improve its readability.", "input": "def is_even(num):\n    if num == 0:\n        return True\n    else:\n        return is_odd(num - 1)\n\ndef is_odd(num):\n    if num == 0:\n        return False\n    else:\n        return is_even(num - 1)", "output": "def is_even(num):\n    return num % 2 == 0\n\ndef is_odd(num):\n    return num % 2 != 0", "category": "Python"}, {"instruction": "You need to write a code to solve this logic puzzle.", "input": "Five people meet at a party. Each of them has a different favorite type of music.\n\nThe host is hip-hop fan.\nBeth loves Jazz.\nEthan's favorite is rock.\nFiona prefers country.\nThe last person, Gia, listens only to R&B.\n\nGiven these facts, use the known information to determine:\n\nWho listens to R&B?", "output": "Gia listens to R&B.", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with values being doubled for every key.", "input": "{'a':4, 'b':7}", "output": "my_dict = {'a': 4, 'b': 7} \ndouble_dict = {k : 2*v for (k,v) in my_dict.items()} \nprint(double_dict)", "category": "Python"}, {"instruction": "Given a list of string objects, write an SQL query to concatenate all the strings into a single string", "input": "['Hello', 'World', '!']", "output": "SELECT CONCAT('Hello', 'World', '!') AS concat_string;", "category": "Python"}, {"instruction": "You need to find the total length of all words in a given array of strings.", "input": "arr = [\"abc\", \"def\", \"ghi\"]", "output": "total_length = sum([len(word) for word in arr])", "category": "Python"}, {"instruction": "You need to parse a JSON string and access a value from it.", "input": "jsonString = {\n  \"name\": \"John Smith\",\n  \"age\": 25\n}", "output": "import json\n\njsonObject = json.loads(jsonString)\nname = jsonObject[\"name\"]", "category": "Python"}, {"instruction": "Write a line of code in C# to find the index of an element in a given array.", "input": "array = {1, 2, 3, 4, 5};\nelement = 3", "output": "int index = Array.IndexOf(array, element);", "category": "Python"}, {"instruction": "There is an array of integer numbers. You need to replace all the odd numbers with 0.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def replace_odds_with_zero(arr):\n  for i in range(len(arr)):\n    if arr[i] % 2 == 1:\n      arr[i] = 0\n  return arr", "category": "Python"}, {"instruction": "Write a sliding window algorithm in JavaScript to collect all the subarrays with size k from an array of size n.", "input": "let input =[1, 2, 3, 4, 5, 6, 7, 8];\nlet K=3", "output": "function slideWindow(input, k){\n  let subArrays=[]; \n  let start=0, end=k-1; \n  while(end<input.length){\n\n    // Slice an array of size k from input  \n    let subArr=input.slice(start, end+1); \n    subArrays.push(subArr);\n    start++; \n    end++; \n  }\n  return subArrays; \n} \nlet res = slideWindow(input, k); \nconsole.log(res);\n// Output: [ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4, 5 ], [ 4, 5, 6 ], [ 5, 6, 7 ], [ 6, 7, 8 ] ]", "category": "Python"}, {"instruction": "Write an HTML form with a select drop-down that displays a range of numbers from 1 to 10.", "input": "", "output": "<select>\n  <option value=\"1\">1</option>\n  <option value=\"2\">2</option>\n  <option value=\"3\">3</option>\n  <option value=\"4\">4</option>\n  <option value=\"5\">5</option>\n  <option value=\"6\">6</option>\n  <option value=\"7\">7</option>\n  <option value=\"8\">8</option>\n  <option value=\"9\">9</option>\n  <option value=\"10\">10</option>\n</select>", "category": "Python"}, {"instruction": "How do you implement depth-first search in Python?", "input": "", "output": "def depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored", "category": "Python"}, {"instruction": "Create a function that deletes all non-alphanumeric characters from an input string.", "input": "", "output": "def clean_string(input_string):\n    alphaNumericString = [ch for ch in input_string if ch.isalnum()]\n    return ''.join(alphaNumericString)", "category": "Python"}, {"instruction": "How do you extract all the unique words from a string in Python?", "input": "", "output": "def get_unique_words(input_string):\n    words = input_string.split()\n    unique_words = set(words)\n    return list(unique_words) # Retruns a list of all unique words present in the string.", "category": "Python"}, {"instruction": "Use JavaScript to find the area of a circle with a radius of 7.", "input": "", "output": "const r = 7;\nconst area = Math.PI * r ^ 2;\nconsole.log(area); // 153.93804002589985", "category": "Python"}, {"instruction": "You mustreverse a given array of numbers in-place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr", "category": "Python"}, {"instruction": "Rewrite this piece of HTML using Semantic Elements.", "input": "<div id=\"header\"> <h1>Welcome</h1> </div>", "output": "<header> <h1>Welcome</h1> </header>", "category": "Python"}, {"instruction": "Create a function to remove all duplicated words from an input sentence.", "input": "sentence = \"Hello World Bye World\"", "output": "def remove_duplicates_from_sentence(sentence): \n    split_words = sentence.split(' ')\n    no_duplicates = list(set(split_words))\n    return ' '.join(no_duplicates)", "category": "Python"}, {"instruction": "Create a SQL query to select customers who have spent more than $1000 in the last month.", "input": "", "output": "SELECT customerId \nFROM orders \nWHERE orderDate > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \n    AND total > 1000", "category": "Python"}, {"instruction": "What is a lambda expression in Python?", "input": "", "output": "A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions.", "category": "Python"}, {"instruction": "Design a physics experiment to measure the acceleration due to gravity,", "input": "", "output": "A classic experiment to measure the acceleration due to gravity involves timing the free fall of an object. Measure the time it takes for the object to reach the ground from a fixed height, and then calculate the acceleration due to gravity with the formula: a = 2*h/t^2, where h is the height, and t is the measured time.", "category": "Python"}, {"instruction": "Implement a search algorithm to find an element in an array.", "input": "Array: [2, 4, 6, 8, 10]\nElement to find: 8", "output": "def search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Rewrite the given code in a different language.", "input": "// code written in C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n    cout << \"Hello World!\";\n    return 0;\n}", "output": "// code written in Java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "category": "Python"}, {"instruction": "Reverse the following array using slicing:", "input": "[1, 2, 3, 4, 5]", "output": "[5, 4, 3, 2, 1]\narr = [1, 2, 3, 4, 5]\narr = arr[::-1]\nprint(arr)", "category": "Python"}, {"instruction": "Calculate the average of the numbers 1, 2, and 3.", "input": "<noinput", "output": "The average of 1, 2 and 3 is 2.0.", "category": "Python"}, {"instruction": "Convert the following array to a numpy array and print it:", "input": "[2, 4, 6, 8]", "output": "import numpy as np \narr = np.array([2,4,6,8])\nprint(arr)", "category": "Python"}, {"instruction": "Create an array of 10 integers initialized to zero and print their values.", "input": "", "output": "import numpy as np \narr = np.zeros(10, dtype=int)\nprint(arr)", "category": "Python"}, {"instruction": "Compute the factorial of a given number using a recursive algorithm.", "input": "", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create an algorithm for sorting a list of numbers using bubble sort.", "input": "[3,1,5,4,2]", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nbubble_sort([3,1,5,4,2])", "category": "Python"}, {"instruction": "Create an object to store name and age.", "input": "", "output": "An object to store name and age can be created as follows:\n\nlet person = { \n    name: 'John Doe', \n    age: 45\n};", "category": "Python"}, {"instruction": "Convert the given string to an all lowercase string.", "input": "\"This Is A String\"", "output": "let s = \"This Is A String\";\nlet lowercaseString = s.toLowerCase(); // returns \"this is a string\"", "category": "Python"}, {"instruction": "What is the default access modifier for members of a class in Java?", "input": "", "output": "The default access modifier for members of a class in Java is `private`.", "category": "Python"}, {"instruction": "Find the difference between the objects in the following JavaScript code.", "input": "", "output": "The difference between the objects in the JavaScript code is that the first object is created using the object literal syntax where key-value pairs are declared directly, while the second object is created using the new keyword which calls a constructor to create an object and assign key-value pairs to it.", "category": "Python"}, {"instruction": "Convert the given JavaScript object to an array.", "input": "{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }", "output": "let obj = { \"name\": \"John\", \"age\": 30, \"city\": \"New York\" };\nlet arr = Object.entries(obj);  // [ ['name','John'], ['age',30], ['city','New York'] ]", "category": "Python"}, {"instruction": "Write an algorithm to find the common elements in two arrays.", "input": "", "output": "A possible algorithm to find the common elements in two arrays is as follows:\n\n1. Initialize an empty array to store the common elements.\n2. Iterate through the first array and for each element, check if it exists in the second array.\n3. If the element does exist in the second array, add it to the common elements array.\n4. Return the common elements array.", "category": "Python"}, {"instruction": "Choose a suitable data structure for finding the minimum and maximum element from a collection of numbers.", "input": "", "output": "Heap is an appropriate data structure for finding the minimum and maximum elements from a collection of numbers as it allows for efficient access to the minimum and maximum values using the min-heap and max-heap properties.", "category": "Python"}, {"instruction": "Using the PHP programming language, write a function to check if a string contains all vowels.", "input": "", "output": "function hasVowels($string) {\n  $vowels = array('a', 'e', 'i', 'o', 'u');\n  foreach ($vowels as $vowel) {\n    if (strpos($string, $vowel) === false) {\n      return false;\n    }\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Create an HTML page with two input fields, one for the first name, one for the last name, and a button. When the button is clicked, the input fields should be validated and an alert should be presented if the fields are empty.", "input": "", "output": "<html>\n<head>\n  <title>Input Validation</title>\n</head>\n<body>\n  <form action=\"\">\n    <input type=\"text\" name=\"firstName\" placeholder=\"First Name\">\n    <input type=\"text\" name=\"lastName\" placeholder=\"Last Name\">\n    <input type=\"button\" value=\"Submit\" onclick=\"validateData()\">\n  </form>\n\n  <script>\n    function validateData() {\n      let firstName = document.querySelector('[name=\"firstName\"]').value;\n      let lastName = document.querySelector('[name=\"lastName\"]').value;\n      \n      if (firstName.trim() === '' || lastName.trim() === '') {\n        alert('First and last name are required.');\n      }\n    }\n  </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Given an array of strings and a string, write a program to find the first index of the string in the array.", "input": "arr = [\"Hello\", \"World\", \"World\"]\nstring = \"World\"", "output": "def find_index(arr, string):\n    for i in range(len(arr)):\n        if arr[i] == string:\n            return i\n    return -1\n\nindex = find_index(arr, string)\nprint(index)", "category": "Python"}, {"instruction": "Explain what a trisection algorithm is.", "input": "", "output": "A trisection algorithm is a method used to divide an interval into three equal parts. It involves dividing a closed interval into three parts using only two points that lie in the original interval. It is useful for quickly finding roots of equations as the points at each division become closer and closer to the root. The method can be applied in a number of applications such as numerical analysis and optimization.", "category": "Python"}, {"instruction": "How does a hash table work?", "input": "", "output": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table.", "category": "Python"}]
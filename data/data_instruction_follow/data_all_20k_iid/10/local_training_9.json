[{"instruction": "Create an array of length 5 which contains all even numbers between 1 and 10.", "input": "", "output": "arr = [2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Suggest a valid Python code to print unique characters of a given string", "input": "", "output": "def print_unique(s):\n    output = set()\n    for char in s:\n        if char not in output:\n            output.add(char)\n            print(char)", "category": "Python"}, {"instruction": "Generate an algorithm to multiply two numbers without using multiplication operator", "input": "", "output": "def multiply_without_operator(a, b): \n    # If either a or b = 0, return 0\n    if (a == 0 or b == 0): \n        return 0\n  \n    # Initialize result \n    result = 0\n  \n    # Add a, b number of times \n    for i in range(min(a, b)): \n        result = result + max(a, b) \n  \n    # Return the multiplication result \n    return result", "category": "Python"}, {"instruction": "Suggest a valid Python code to add two numbers", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Reverse a given list without using any predefined functions.", "input": "", "output": "def reverse_list(lst):\n    n = len(lst)\n    for i in range(n // 2): \n        lst[i], lst[n-i-1] = lst[n-i-1], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Write a function that exchanges the first and last elements of a list.", "input": "", "output": "def exchange_first_last(lst):\n    first_item = lst[0]\n    last_item = lst[-1]\n    lst[0] = last_item\n    lst[-1] = first_item\n    return lst", "category": "Python"}, {"instruction": "Suppose we have a dictionary with keys (1,2,3). Create a function to return the values of the dictionary.", "input": "d = {1: \"one\", 2: \"two\", 3: \"three\"}", "output": "def get_values(d):\n    return list(d.values())", "category": "Python"}, {"instruction": "Design an algorithm to check if a string contains a given substring.", "input": "", "output": "\"\"\"\ndef isSubstring(string, sub): \n    l1 = len(string) \n    l2 = len(sub) \n\n    if l2> l1: \n        return False\n\n    # Sliding window approach\n    for i in range(l1): \n        if string[i:i+l2] == sub : \n            return True \n\n    return False \n\"\"\"", "category": "Python"}, {"instruction": "Create a class in Python named 'Rectangle' which can compute the area of a rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\t\n    def get_area(self):\n        return self.width * self.height", "category": "Python"}, {"instruction": "Design an algorithm for finding the nth node from the tail of a linked list.", "input": "", "output": "\"\"\"\ndef nthFromLast(head, n): \n    # Initialize slow and fast pointers \n    slow  = head \n    fast = head \n  \n    # Move fast pointer n-1 times \n    while (n > 0): \n        if (fast == None): \n            return None\n  \n        fast = fast.next\n        n = n - 1\n  \n    # Move both slow and fast pointer together \n    while (fast.next != None): \n        slow = slow.next\n        fast = fast.next\n  \n    return slow\n\"\"\"", "category": "Python"}, {"instruction": "Create an algorithm to check if a binary tree is univalued.", "input": "", "output": "\"\"\"\ndef isUnivalTree(root):\n    is_uni = True\n    if root is None:\n        return is_uni\n    else:\n        val = root.val\n        if root.left:\n            is_uni &= root.left.val == val\n        if root.right:\n            is_uni &= root.right.val == val\n        is_uni &= isUnivalTree(root.left)\n        is_uni &= isUnivalTree(root.right)\n    return is_uni\n\"\"\"", "category": "Python"}, {"instruction": "Modify the code below to check if the number is divisible by 2.", "input": "num = 8", "output": "num = 8\nif num % 2 == 0:\n    print('The number is divisible by 2.')", "category": "Python"}, {"instruction": "Construct a for loop to access each element of the given array.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nfor i in range(len(arr)):\n    print(arr[i])", "category": "Python"}, {"instruction": "Construct a JSON object with the given parameters and return the object.", "input": "Name=John\nAge=25", "output": "const obj = {Name: 'John', Age: 25};\nreturn obj;", "category": "Python"}, {"instruction": "Write a JavaScript function to display the message \"Hello World!\".", "input": "", "output": "function showMessage() {\n    console.log('Hello World!');\n}", "category": "Python"}, {"instruction": "Write a C code snippet to check if an input number is prime or not.", "input": "The number is 17", "output": "#include <stdio.h>\n\nint isPrime(int n) \n{ \n    if (n <= 1)  \n        return 0; \n  \n    for (int i = 2; i < n; i++) \n        if (n % i == 0) \n            return 0; \n  \n    return 1; \n} \n  \nint main() \n{ \n    int n;\n    printf(\"Enter an integer: \"); \n    scanf(\"%d\", &n); \n  \n    if (isPrime(n)) \n        printf(\"%d is a prime number.\\n\", n); \n    else\n        printf(\"%d is not a prime number.\\n\", n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a regex pattern that can match the pattern \"www.somedomain.com/posts/[post_id]\".", "input": "", "output": "^www\\.somedomain\\.com\\/posts\\/\\d+$", "category": "Python"}, {"instruction": "Parse a JSON response into a Python dictionary.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": \"35\"\n}", "output": "import json\n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return data\n\nif __name__ == '__main__':\n    json_data = '{\"name\": \"John Doe\", \"age\": \"35\"}'\n    print(parse_json(json_data))", "category": "Python"}, {"instruction": "How can you define a list of elements in JavaScript?", "input": "", "output": "In JavaScript, lists of elements can be defined using an array. An array is a data structure that stores a set of elements of the same type. The elements of an array can be accessed by their index.\n\nExample:\nvar myList = ['item1', 'item2', 'item3'];", "category": "Python"}, {"instruction": "Create a CSS class called \"button\" to style a button", "input": "", "output": ".button {\n    display: inline-block;\n    padding: 0.5rem;\n    font-size: 1rem;\n    background-color: #1e85e7;\n    color: #fff;\n    border-radius: 0.25rem;\n    border: 0;\n    cursor: pointer;\n}", "category": "Python"}, {"instruction": "Use the following HTML to create an unordered list.", "input": "<ul><li>First item</li>\n<li>Second item</li>\n<li>Third item</li></ul>", "output": "<ul>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ul>", "category": "Python"}, {"instruction": "Write a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value.", "input": "arr = [1, 2, 3, 4, 5]\nvalue = 7", "output": "def pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    return pairs", "category": "Python"}, {"instruction": "Answer this logic programming question: What is the transitive closure of the binary relation \"less than\" on the set of integers?", "input": "", "output": "The transitive closure of the 'less than' relation on the set of integers is defined as: if (x,y) belongs to the set of integers, then for all n, x < n and n < y implies x < y.", "category": "Python"}, {"instruction": "How can you convert a number from one base to another?", "input": "", "output": "def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base: \n        return alphabet[(n)]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]", "category": "Python"}, {"instruction": "Give a function to get an array of n-dimensional vectors.", "input": "", "output": "def get_n_dimensional_vectors(n):\n     vectors = [[0 for x in range(n)] for x in range(len(arr))] \n     for vector in vectors:\n         for i in range(n):\n             vector[i] = arr[i]\n     return vectors", "category": "Python"}, {"instruction": "Write a JavaScript loop to print out all the values of an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "for (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Write a query to sort a table data by their names in alphabetical order.", "input": "", "output": "SELECT * FROM table ORDER BY name ASC;", "category": "Python"}, {"instruction": "Create a shell script for printing Hello World.", "input": "", "output": "#!/bin/sh\necho \"Hello World!\"", "category": "Python"}, {"instruction": "Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.", "input": "string = 'google'", "output": "def create_frequency_dict(string):\n    \"\"\"Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.\"\"\"\n    # Initialize empty dictionary\n    freq_dict = {}\n    # Iterate over the string\n    for char in string:\n        # Check if char is in dictionary\n        if char in freq_dict:\n            # Increase its frequency\n            freq_dict[char] += 1\n        else:\n            # Add to dictionary\n            freq_dict[char] = 1\n    return freq_dict\n\ncreate_frequency_dict('google') # Outputs {'g': 2, 'o': 2, 'l': 1, 'e': 1}", "category": "Python"}, {"instruction": "Multiply each element in the given array by 3 and return the new array.", "input": "[1, 2, 3]", "output": "def multiply_by_3(arr):\n    \"\"\"Multiply each element in the given array by 3 and return the new array.\"\"\"\n    # Initialize empty array\n    new_arr = []\n    # Iterate over the array\n    for num in arr:\n        # Multiply by 3\n        num *= 3\n        # Append to new array\n        new_arr.append(num)\n    return new_arr\n\nmultiply_by_3([1, 2, 3]) # Outputs [3, 6, 9]", "category": "Python"}, {"instruction": "Create a regular expression which will match numbers divisible by 3.", "input": "", "output": "import re\n\npattern = r\"^[0-9]*(3|6|9)$\"\n\nre.match(pattern, \"6\") # Outputs <re.Match object; span=(0, 1), match='6'>", "category": "Python"}, {"instruction": "Write a code to convert a given date string into a timestamp.", "input": "date_string = \"2020-07-24 14:50:00\"", "output": "import datetime\n\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\n\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0", "category": "Python"}, {"instruction": "Sort the list in reverse order using insertion sort.", "input": "[4, 2, 0, 6, 1, 7, 3]", "output": "def insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n            # Move position back\n            position = position - 1\n        # Insert current value at the position\n        arr[position] = current_value\n    return arr\n\ninsertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]", "category": "Python"}, {"instruction": "Remove the duplicates from the list without using built-in methods.", "input": "[1, 2, 1, 2, 3, 2, 4, 2]", "output": "def remove_duplicates(arr):\n    \"\"\"Remove the duplicates from the list without using built-in methods.\"\"\"\n    # Initialize empty list\n    new_list = []\n    # Iterate through array\n    for num in arr:\n        # Check if element is not in list\n        if num not in new_list:\n            # Add element to list\n            new_list.append(num)\n    return new_list\n\nremove_duplicates([1, 2, 1, 2, 3, 2, 4, 2]) # Outputs [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}", "input": "", "output": "def generate_dict():\n    \"\"\"Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}\"\"\"\n    my_dict = {}\n    for i in range(1, 5):\n        my_dict[i] = i**2\n    return my_dict\n\ngenerate_dict() # Outputs {1:1, 2:4, 3:9, 4: 16}", "category": "Python"}, {"instruction": "Fix the following Python code to create a dictionary.", "input": "dic = {\u201cmin\u201d, 10, \u201cmax\u201d, 20}", "output": "dic = {\"min\": 10, \"max\": 20}", "category": "Python"}, {"instruction": "In the given string, split the words and remove empty strings.", "input": "string = \"    Hello    World    \"", "output": "def split_and_remove(string):\n    \"\"\"In the given string, split the words and remove empty strings.\"\"\"\n    # Split the string by spaces\n    arr = string.split(' ')\n    # Initialize empty list\n    new_arr = []\n    # Iterate over array\n    for word in arr:\n        # Check if not empty\n        if word != '':\n            # Append to list\n            new_arr.append(word)\n    return new_arr\n\nsplit_and_remove('    Hello    World    ') # Outputs ['Hello', 'World']", "category": "Python"}, {"instruction": "Write a procedure in SQL that takes two tables as parameters and returns the intersection of the two.", "input": "table1, table2", "output": "CREATE PROCEDURE intersection(table1 VARCHAR(255), table2 VARCHAR(255))\nBEGIN\n  SELECT *\n  FROM table1\n  WHERE EXISTS (SELECT * \n    FROM table2 \n    WHERE table1.columnName = table2.columnName);\nEND;", "category": "Python"}, {"instruction": "Find the minimum number of coins required to make a given amount", "input": "amount = 93", "output": "def min_coins(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\n# Output\nmin_coins(amount)\n\n# Output\n7", "category": "Python"}, {"instruction": "Implement a in-order traversal of a binary tree in Python.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(root):  \n    if root is not None: \n        inOrderTraversal(root.left)\n        print(root.data)\n        inOrderTraversal(root.right)\n\nroot = Node(1)\nroot.left = Node(7)\nroot.right = Node(9)\nroot.left.left = Node(4)\nroot.left.right = Node(8)\n\ninOrderTraversal(root)\n\n# Output\n4\n7\n1\n8\n9", "category": "Python"}, {"instruction": "You've been asked to edit a string by replacing all occurrences of a certain character with another character.", "input": "string = \"happy happy\" \nfind = \"p\" \nreplace = \"s\"", "output": "#include <iostream>\n#include <string>\n\nvoid replace_chars(std::string& str, char find, char replace) \n{\n    for (int i = 0; i < str.size(); i++)\n    {\n        if (str[i] == find) \n            str[i] = replace; \n    }\n}\n\nint main() \n{ \n    std::string str = \"happy happy\"; \n    char find = 'p'; \n    char replace = 's';\n    replace_chars(str, find, replace); \n    std::cout << str; \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a program that prints the vowels in a string.", "input": "str = \"Hello World!\"", "output": "#include <iostream> \n#include <string> \n\nvoid print_vowels(std::string str) \n{ \n    for (int i = 0; i < str.length(); i++)\n    {\n        if (str[i] =='a' || str[i] =='e' || str[i] =='i'\n            || str[i] =='o' || str[i] =='u'||str[i] =='A'\n            || str[i] =='E' || str[i] =='I' || str[i] =='O'\n            || str[i] =='U') \n            std::cout << str[i] << \" \" ;\n    } \n    std::cout << std::endl;\n}\n\nint main() \n{ \n    std::string str = \"Hello World!\"; \n    print_vowels(str); \n    return 0; \n}", "category": "Python"}, {"instruction": "You've been asked to create a program to determine whether a given string is a palindrome", "input": "str = \"madam\"", "output": "#include <iostream> \n#include <string> \n\nbool is_palindrome(std::string str) \n{ \n    int i = 0; \n    int j = str.length() - 1; \n  \n    while (i < j) \n    { \n        if (str[i] != str[j]) \n            return false; \n  \n        i++; \n        j--; \n    } \n  \n    return true; \n} \n\nint main() \n{ \n    std::string str = \"madam\"; \n    if (is_palindrome(str)) \n        std::cout << str << \" is a palindrome\"; \n    else\n        std::cout << str << \" is not a palindrome\"; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Given the following array, write a program to find the kth largest element.", "input": "arr = [3, 10, 2, 6, 4], k = 2", "output": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main()\n{\n    // Create sample array\n    std::vector<int> arr = {3, 10, 2, 6, 4};\n\n    // Sort array\n    std::sort(arr.begin(), arr.end());\n    \n    // Get kth largest element\n    int kth_largest = arr.end()[-2]; // second to last element\n    std::cout << kth_largest << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a regular expression to determine if a word is in the form of a palindrome.", "input": "", "output": "^(.)(?:(.)(?<=\\2))?\\1?$", "category": "Python"}, {"instruction": "Implement a neural network from scratch", "input": "", "output": "class NeuralNetwork:\n  def __init__(self, num_inputs, num_hidden_layers, num_outputs):\n    self.num_inputs = num_inputs\n    self.num_hidden_layers = num_hidden_layers\n    self.num_outputs = num_outputs\n\n    self.weights_input_to_hidden = np.random.randn(num_inputs, num_hidden_layers) \n    self.bias_hidden = np.zeros(num_hidden_layers)\n    self.weights_hidden_to_output = np.random.randn(num_hidden_layers, num_outputs)\n    self.bias_output = np.zeros(num_outputs)\n    \n    self.activation_function = lambda x : 1/(1+np.exp(-x))\n\n  def forward_propagation(self, inputs):\n    # Compute the inputs to the hidden layer\n    hidden_in = np.dot(inputs, self.weights_input_to_hidden) + self.bias_hidden\n    # Compute the hidden layer output\n    hidden_out = self.activation_function(hidden_in)\n    # Compute the inputs to the output layer\n    output_in = np.dot(hidden_out, self.weights_hidden_to_output) + self.bias_output\n    # Return the output layer output\n    return output_in", "category": "Python"}, {"instruction": "Construct a tree which follows the pre-order traversal", "input": "50, 30, 10, 20, 40, 70, 60, 80", "output": "50\n/   \\\n30    70\n/ \\    / \\\n10  40  60  80\n   /\n  20", "category": "Python"}, {"instruction": "Normalize a dataset of strings", "input": "[ \"New York City, NY\", \n  \"Washington, D.C.\", \n  \"Los Angeles, Ca\", \n  \"Chicago, Il\" ]", "output": "[ \"New York City, NY\",\n  \"Washington, DC\",\n  \"Los Angeles, CA\",\n  \"Chicago, IL\" ]", "category": "Python"}, {"instruction": "Evaluate an expression written in reverse Polish notation", "input": "5 1 2 + 4 * + 3 -", "output": "14", "category": "Python"}, {"instruction": "Find all the elements in a Python list that correspond to a certain condition using list comprehension", "input": "list = [-3, -2, -1, 0, 1, 2, 3]", "output": "[x for x in list if x >= 0]", "category": "Python"}, {"instruction": "Write a SQL query to find information about books in a library", "input": "", "output": "SELECT Title, Price, Quantity\nFROM Library\nWHERE Type = 'Book';", "category": "Python"}, {"instruction": "Create a MySQL query to find the total number of customers from a certain country.", "input": "", "output": "SELECT COUNT(*) \n FROM customers \n WHERE country = '<country name>';", "category": "Python"}, {"instruction": "Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency.", "input": "\"hello world\"", "output": "def get_frequency_map(string): \n    frequency_map = {}\n    # count the frequency of each character\n    for char in string: \n        if char in frequency_map:\n            frequency_map[char] += 1\n        else:\n            frequency_map[char] = 1\n    return frequency_map\n\nstring = \"hello world\"\n\nfrequency_map = get_frequency_map(string)\nprint(frequency_map)  # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Escalate privileges in a Windows system using PowerShell.", "input": "", "output": "$user = New-Object System.Security.Principal.WindowsPrincipal($User)\nif ($user.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {\n  Write-Host \"You are already an Administrator\"\n} else {\n  Start-Process \"powershell.exe\" \"-NoExit -Command Start-Process PowerShell.exe -Verb runAs -Args '-noprofile -noexit -file C:\\Scripts\\MyScript.ps1'\"\n}", "category": "Python"}, {"instruction": "Create a SQL statement to select the five longest-serving employees.", "input": "", "output": "SELECT name, length_of_service \n FROM employees \n ORDER BY length_of_service DESC \n LIMIT 5;", "category": "Python"}, {"instruction": "Identify three expressions that are valid in JavaScript.", "input": "", "output": "1. 5 + 5\n2. document.write(\"Hello World!\")\n3. function greet(){ console.log(\"Hello World!\") }", "category": "Python"}, {"instruction": "Given the parameter 'word', what JavaScript code should be written to check whether it is a palindrome or not?", "input": "", "output": "function isPalindrome(word) { \n    let revWord = word.split('').reverse().join(''); \n    return word == revWord; \n}", "category": "Python"}, {"instruction": "Write Python code to store odd numbers from the given list in a separate list.", "input": "list = [1, 2, 3, 4, 5, 6, 7]", "output": "odds = []\nfor num in list:\n    if num % 2 != 0:\n        odds.append(num)", "category": "Python"}, {"instruction": "Write a SQL statement to update the 'salary' of an employee with the id value of '100' by 100.", "input": "", "output": "UPDATE employees\nSET salary = salary + 100\nWHERE id = 100;", "category": "Python"}, {"instruction": "Extract the phone numbers from a string of text", "input": "text = \"My number is (202) 555-0123 and my friend's number is (703) 555-9876\"", "output": "import re\n\ndef extract_phone_numbers(text): \n    phones = re.findall(\"\\(\\d{3}\\) \\d{3}\\-\\d{4}\",text) \n    return phones\n\nprint(extract_phone_numbers(text))\n\n# Output\n['(202) 555-0123', '(703) 555-9876']", "category": "Python"}, {"instruction": "Create a new Python class called Area to calculate the area of different shapes.", "input": "", "output": "class Area:\n    def __init__(self):\n        pass\n\n    def calculate_area_rectangle(self, length, width):\n        return length * width\n\n    def calculate_area_triangle(self, base, height):\n        return 0.5 * base * height\n\n    def calculate_area_circle(self, radius):\n        return 3.14 * radius**2", "category": "Python"}, {"instruction": "Edit the code to correctly define the type of `age`", "input": "const age;", "output": "const age: number;", "category": "Python"}, {"instruction": "Suggest an API endpoint for a user profile", "input": "", "output": "A possible API endpoint for a user profile could be `GET /users/:id` which returns the profile information associated with the given user ID.", "category": "Python"}, {"instruction": "Suggest a few input parameters for a Machine Learning model", "input": "", "output": "Some potential input parameters for a Machine Learning model include numeric features, categorical features, text features, external features, and data derived from benchmark datasets.", "category": "Python"}, {"instruction": "Assign a value to `name` by using the ternary operator", "input": "let name;", "output": "name = condition ? value1 : value2;", "category": "Python"}, {"instruction": "Explain the effect of using recursion as a programming technique", "input": "", "output": "Recursion is a programming technique that allows a function to call itself repeatedly until a certain condition is met. This allows for a clear solution to problems that involve repeated cycles of steps in their execution. Recursion also helps to solve complex problems by breaking them down into simpler sub-problems which can then be more easily solved. By effectively breaking a problem down into simpler sub-problems, the result is often a much more efficient and elegant implementation of a solution than an iterative approach. Recursion helps to reduce the complexity of code, making it easier to read, debug and maintain.", "category": "Python"}, {"instruction": "Create a function to generate the weight of a given sequence of DNA", "input": "DNA = \"GTCATCTGAG\"", "output": "def generate_DNA_weight(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n\n    # Calculate the weight\n    weight = 0.0\n    for character in DNA:\n        weight += weights[character]\n    return weight\n\n# Output\ngenerate_DNA_weight(DNA)\n\n# Output\n698.22", "category": "Python"}, {"instruction": "Create a C# method to find the third common element in two arrays", "input": "arr1: [8, 15, 20, 7, 2]\narr2: [5, 6, 7, 9, 8]", "output": "public int FindCommonElement(int[] arr1, int[] arr2)\n{\n    HashSet<int> set = new HashSet<int>();\n    foreach (int item in arr1)\n    {\n        set.Add(item);\n    }\n    \n    List<int> commons = new List<int>();\n    foreach (int item in arr2)\n    {\n        if (set.Contains(item))\n            commons.Add(item);\n    }\n    \n    return commons.Count >= 3 ? commons[2] : -1;\n}", "category": "Python"}, {"instruction": "Edit the following HTML code to add an attribute and its value", "input": "<div class=\"container\">\n    <h1>Welcome!</h1>\n</div>", "output": "<div class=\"container\" id=\"welcome\">\n    <h1>Welcome!</h1>\n</div>", "category": "Python"}, {"instruction": "What code should be used to generate 5 random numbers in Java?", "input": "", "output": "Random random = new Random();\nint[] numbers = new int[5];\nfor(int i = 0; i < 5; i++) {\n    numbers[i] = random.nextInt();\n}", "category": "Python"}, {"instruction": "Rewrite the given Python code snippet using list comprehensions .", "input": "even_list = []\nfor x in my_list:\n    if x % 2 == 0:\n        even_list.append(x)", "output": "even_list = [x for x in my_list if x % 2 == 0]", "category": "Python"}, {"instruction": "What code should be written to generate a random string with 10 characters in JavaScript?", "input": "", "output": "function randomString() {\n  let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let string = \"\";\n  for (let i = 0; i < 10; i++) {\n    string += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return string; \n}", "category": "Python"}, {"instruction": "Construct a SQL query to count the number of employees with the same 'state' value in the employees table.", "input": "", "output": "SELECT \n  state, \n  COUNT(*) \nFROM \n  employees \nGROUP BY \n  state;", "category": "Python"}, {"instruction": "What HTML code is needed to print each item in the following list?", "input": "list = [\"apple\", \"banana\", \"cherry\"]", "output": "<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>cherry</li>\n</ul>", "category": "Python"}, {"instruction": "Modify the given code snippet to add a new entry in the users table of a MySQL database.", "input": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"12345\"\n    database=\"test\"\n    )", "output": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"12345\"\n    database=\"test\"\n    )\ncursor = conn.cursor()\ncursor.execute(\"INSERT INTO users(name, email, age) VALUES('John Doe', 'johndoe@example.com', 28)\")\nconn.commit()", "category": "Python"}, {"instruction": "Write a callback function for the following requirements", "input": "This callback should be able to store the input emit it when triggered", "output": "def store_and_emit(data):\n    stored_data = data\n    def emit_stored_data():\n        return stored_data\n    return emit_stored_data", "category": "Python"}, {"instruction": "Write a JavaScript program to compute the value obtained by concatenating the three given strings.", "input": "str1 = \"Hello \"\nstr2 = \"World!\"\nstr3 = \" How are you?\"", "output": "let str1 = \"Hello \";\nlet str2 = \"World!\";\nlet str3 = \" How are you?\";\n\nconst concatString = str1.concat(str2, str3);\n\nconsole.log(concatString); // \"Hello World! How are you?\"", "category": "Python"}, {"instruction": "Use the following JSON data to output information about all the users in the array.", "input": "[\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]", "output": "import json\n\nusers = [\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]\n\nfor user in users:\n    print(\"Name: \"+ user[\"name\"] + \", Age: \" + str(user[\"age\"]))", "category": "Python"}, {"instruction": "Use the Pandas library to find the mean rental price for a property in a particular city in the US.", "input": "The property is located in Miami, Florida.", "output": "\"\"\"\nFind the mean rental price for a property in Miami, Florida using the Pandas library.\n\"\"\"\n\nimport pandas as pd\n\n# read the dataset\ndf = pd.read_csv('data.csv')\n\n# filter the data by city\ndf_miami = df[df['city'] == 'Miami, Florida']\n\n# calculate the mean rental price\nmean_price = df_miami['rental_price'].mean()\n\n# print the result\nprint(f'The mean rental price in Miami, Florida is ${mean_price:.2f}')", "category": "Python"}, {"instruction": "Write a JavaScript function which will return the longest palindrome string from a given strinb", "input": "\"abacdaaadccb\"", "output": "function longestPalindrome(str) {\n  let longest = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let temp = helper(str, i, i);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n    temp = helper(str, i, i + 1);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n  }\n  return longest;\n}\n\nfunction helper(str, left, right) {\n  while (left >= 0 && right < str.length && str[left] === str[right]) {\n    left--;\n    right++;\n  }\n  return str.substring(left + 1, right);\n}", "category": "Python"}, {"instruction": "Capitalize all the words in a string", "input": "hello world", "output": "Hello World", "category": "Python"}, {"instruction": "Transform the following function definition so it can be used for all type of data", "input": "def calculate(int a, int b):", "output": "def calculate(a, b):\n    \"\"\"This function can be used to calculate the result of two parameters\n    regardless of their type (int, float, etc)\"\"\"\n    return a + b", "category": "Python"}, {"instruction": "Edit the vector below such that all elements are greater than five.", "input": "[1, 5, 3, 7, 6, 4]", "output": "def edit_vec(vec): \n    for i in range(len(vec)): \n        if vec[i] <= 5: \n            vec[i] = 5\n    return vec", "category": "Python"}, {"instruction": "Create a loop to traverse through a tree using depth-first search.", "input": "", "output": "def traverse_tree(node): \n    print(node.data) \n\n    if node.left: \n        traverse_tree(node.left) \n    if node.right: \n        traverse_tree(node.right)", "category": "Python"}, {"instruction": "Scale a vector of 10 numbers from 0 to 10.", "input": "[2.5, 3.5, 5.5, 7.5, 1.5, 8.5, 0.5, 4.5, 6.5, 9.5]", "output": "def scale(vector): \n    scaled_vector = []\n    for i in vector: \n        scaled_vector.append(i/10*10) \n    return scaled_vector", "category": "Python"}, {"instruction": "Design a function to convert Fahrenheit to Celsius in Python.", "input": "", "output": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) * 5/9\n    return celsius", "category": "Python"}, {"instruction": "Create a MySQL query to select the top 5 customers with the highest total spending in the last 12 months.", "input": "", "output": "SELECT customer_id, SUM(cost) AS total_spending\nFROM orders\nWHERE order_date >= CURDATE() - INTERVAL 12 MONTH\nGROUP BY customer_id\nORDER BY total_spending DESC\nLIMIT 5", "category": "Python"}, {"instruction": "Simulate a coin toss in Python and get the results in a list.", "input": "", "output": "import random\n\nresults = []\nfor i in range(10):\n    if random.random() < 0.5:\n        results.append('heads')\n    else:\n        results.append('tails')\n\nprint(results)", "category": "Python"}, {"instruction": "Design a data structure to store user information such as username, password, date of birth and email address.", "input": "", "output": "The information can be stored in a user class using the following structure: \nclass User {\n  string username;\n  string password;\n  string dateOfBirth;\n  string emailAddress;\n}\nThe information can then be accessed and modified using getter and setter methods.", "category": "Python"}, {"instruction": "Create a Java program to print out factorials from 1 to 10.", "input": "", "output": "public class Factorial {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10; ++i) {\n            System.out.println(i + \"! = \" + factorial(i));\n        }\n    }\n    public static long factorial(int n) {\n        if (n == 0)\n            return 1;\n        else\n            return n * factorial(n - 1);\n    }\n}", "category": "Python"}, {"instruction": "Find the first 10 numbers that are divisible by 4 and 7", "input": "", "output": "numbers = [] \nnum = 0\nwhile len(numbers) < 10:\n    num += 1\n    if (num % 4 == 0) and (num % 7 == 0):\n        numbers.append(num) \nprint(numbers)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to double each element in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "result = [x*2 for x in list]", "category": "Python"}, {"instruction": "Add this method to the Person class.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def intro(self):\n        print(\"Hi, my name is %s and I am %d years old.\" % (self.name, self.age))", "category": "Python"}, {"instruction": "Convert this string from snake_case to CamelCase.", "input": "snake_case_string = \"example_string\"", "output": "camelCaseString = ''.join(x.capitalize() or '_' for x in snake_case_string.split('_'))", "category": "Python"}, {"instruction": "Create a new dictionary using the values of two given dictionaries", "input": "d1 = {1:10, 2:20}\nd2 = {3:30, 4:40}", "output": "d3 = {**d1, **d2}", "category": "Python"}, {"instruction": "Convert the given Python code to Java", "input": "def foo(a, b):\n    return a*b", "output": "public int foo(int a, int b) {\n    return a * b;\n}", "category": "Python"}, {"instruction": "Generate a data set using RandomSample()", "input": "", "output": "from random import Random\n\ndef RandomSample(number_of_samples):\n    sample = []\n    random_generator = Random()\n    for i in range(number_of_samples):\n        sample.append(random_generator.random())\n    return sample", "category": "Python"}, {"instruction": "Rearrange the code to print the hierarchy of students in a Python class", "input": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]", "output": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])", "category": "Python"}, {"instruction": "Make a program that takes in a non-empty string and finds its longest palindrome.", "input": "", "output": "def longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome", "category": "Python"}, {"instruction": "Create a class to store the number, its square and its cube.", "input": "", "output": "class Number:\n  def __init__(self, number):\n    self.number = number\n    self.square = number * number\n    self.cube = number * number * number", "category": "Python"}, {"instruction": "Calculate the value of 3^4 using Java code.", "input": "", "output": "int result = (int)Math.pow(3, 4);", "category": "Python"}, {"instruction": "Create an SQL query that returns the names of all the people born in the year 1990.", "input": "SELECT name FROM People WHERE yearOfBirth = 1990", "output": "SELECT name FROM People WHERE yearOfBirth = 1990;", "category": "Python"}, {"instruction": "Modify the following code to print out \"The result is 30\".", "input": "int a = 10\nint b = 20\nConsole.WriteLine(\"The result is \" + a + b)", "output": "int a = 10;\nint b = 20;\nConsole.WriteLine(\"The result is \" + (a + b).ToString());", "category": "Python"}, {"instruction": "Write a SQL query that prints the names of all the people with a salary greater than $60000.", "input": "SELECT name FROM people WHERE salary > 60000", "output": "SELECT name FROM People WHERE salary > 60000;", "category": "Python"}, {"instruction": "Create an array of integers in Swift with length 5\u200b.", "input": "", "output": "var array = [Int](repeatElement(0, count: 5))", "category": "Python"}, {"instruction": "Make changes to this code to fix the bug.", "input": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c -= i\n    return c", "output": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c += i\n    return c", "category": "Python"}, {"instruction": "Write a method to return the sum of two integers a and b.", "input": "a = 2, b = 8.", "output": "int add(int a, int b) {\n    return a + b;\n}", "category": "Python"}, {"instruction": "Which basic data type is represented by the following JSON?\n\n{\"name\": \"John\", \"age\": 30}", "input": "", "output": "The JSON given represents a basic object data type.", "category": "Python"}, {"instruction": "Using regex, search for all occurrences of the substring \"cat\" in the following string:", "input": "The dog ran away, but the cat stayed", "output": "The regular expression to search for all occurrences of the substring \"cat\" in the string is /\\bcat\\b/g.", "category": "Python"}, {"instruction": "Create a program that takes two strings as arguments and returns true if the two strings contain the same characters.", "input": "", "output": "def same_characters(str1, str2):\n    return sorted(str1) == sorted(str2)", "category": "Python"}, {"instruction": "Write a regular expression to search for the pattern \"carrot\" in a given string.", "input": "", "output": "The regular expression to search for \"carrot\" in a given string is /carrot/.", "category": "Python"}, {"instruction": "Generate an array of all the multiples of 5 that are less than 40.", "input": "", "output": "[5, 10, 15, 20, 25, 30, 35]", "category": "Python"}, {"instruction": "Find the sum of all the prime numbers between 45 and 65.", "input": "", "output": "The sum of all the prime numbers between 45 and 65 is 458.", "category": "Python"}, {"instruction": "Reverse the order of the following list: [\"Apple\", \"Banana\", \"Cherry\"]", "input": "[\"Apple\", \"Banana\", \"Cherry\"]", "output": "[\"Cherry\", \"Banana\", \"Apple\"]", "category": "Python"}, {"instruction": "Create a script that takes an input variable k, and prints out \"k is true\" if k is true, and \"k is false\" if k is false.", "input": "k = 2 < 5", "output": "if [ $k = true ]; then\n  echo \"k is true\"\nelse\n  echo \"k is false\"\nfi", "category": "Python"}, {"instruction": "Create an object in JavaScript that contains two methods.  The first method takes two parameters and returns the sum of the two numbers, and the second method takes two parameters and returns the product of the two numbers.", "input": "", "output": "const calculator = {\n    sum: function(a, b){\n        return a + b;\n    },\n    product: function(a, b){\n        return a * b;\n    }\n};", "category": "Python"}, {"instruction": "Parse this JSON string and print the value of the \"name\" field.", "input": "json_string = '{\"name\":\"John\", \"age\":25}'", "output": "import json\ndata = json.loads(json_string)\nprint(data['name'])", "category": "Python"}, {"instruction": "Determine if a number is even or odd using JavaScript.", "input": "n = 7", "output": "if(n % 2 == 0) {\n console.log(\"Number is even!\");\n}\nelse {\n console.log(\"Number is odd!\");\n}", "category": "Python"}, {"instruction": "Convert a given string into Pig Latin.", "input": "string = \"Hello\"", "output": "def pig_latin(string):\n    vowels = \"aeiou\"\n    if string[0].lower() in vowels:\n        return string+\"way\"\n    else:\n        return string[1:]+string[0]+\"ay\"", "category": "Python"}, {"instruction": "Print all permutations of an input array.", "input": "array = [1,2,3]", "output": "def permutations(array):\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return [array]\n    perms = []\n    for i in range(len(array)):\n        elem = array[i]\n        rem_perms = permutations(array[:i] + array[i+1:])\n        for perm in rem_perms:\n            perms.append([elem] + perm)\n    return perms", "category": "Python"}, {"instruction": "Using an existing function, update the given array of numbers to contain elements which are the square of each original element.", "input": "array = [1,2,3,4,5]", "output": "array = list(map(lambda x: x**2, array))", "category": "Python"}, {"instruction": "Generate a list of length n containing all numbers from 1 to n.", "input": "", "output": "def gen_list(n):\n    list = []\n    for i in range(1, n+1):\n        list.append(i)\n    return list", "category": "Python"}, {"instruction": "Convert this regex expression from python to java syntax.", "input": "pattern = r\"[A-Za-z0-9_]+\"", "output": "String pattern = \"[A-Za-z0-9_]+\";", "category": "Python"}, {"instruction": "Create a loop that prints out the even numbers from the given list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n  if i % 2 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Convert a sentence into a list of words using the provided function.", "input": "str = \"This is a sentence.\"", "output": "res = list_of_words(str)\nres = ['This', 'is', 'a', 'sentence.']", "category": "Python"}, {"instruction": "Parse the given string and return a dictionary with the keys and corresponding values.", "input": "s = \"name seth age 30 occupation manager\"", "output": "d = {'name': 'seth', 'age': '30', 'occupation': 'manager'}", "category": "Python"}, {"instruction": "Given a dictionary of words and a set of characters, how would you find the longest word which can be constructed from the given set of characters?", "input": "", "output": "One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found.", "category": "Python"}, {"instruction": "Write a code to generate a random 7 digit phone number.", "input": "", "output": "\"\"\"\nWrite a code to generate a random 7 digit phone number.\n\"\"\"\n\nimport random\n\ndef generate_random_phone_number():\n    # create a list of digits\n    lst = [str(i) for i in range(10)]\n    \n    # randomly select one digit\n    random.shuffle(lst)\n    \n    # generate a 7-digit phone number\n    phone_number = ''.join(lst[:7])\n    \n    return phone_number\n    \nif __name__ == '__main__':\n    print(generate_random_phone_number()) # Output: e.g. 8247036", "category": "Python"}, {"instruction": "Edit the code given below to make it print the numbers from 1 to 10 in increasing order.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "How would you reverse a singly linked list without using any additional data structures?", "input": "", "output": "One way to reverse a singly linked list without using any additional data structures is to iterate through the linked list, while keeping track of the current node's predecessor and successor. At each iteration, store the predecessor and successor, remove the link from the predecessor to the current node,and link the current node to the predecessor. Once all the nodes have been iterated through, the predecessor of the head node should be connected to the tail node.", "category": "Python"}, {"instruction": "Create a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.", "input": "", "output": "\"\"\"\nCreate a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.\n\"\"\"\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n  \n    # create a list of all numbers from 0 to n\n    nums = [True for _ in range(n + 1)] \n  \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, it is a prime \n        if nums[p] is True: \n\n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                nums[i] = False\n        p += 1\n\n    return nums[n]\n\nif __name__ == '__main__':\n    n = 37\n    print(is_prime(n)) # Output: True", "category": "Python"}, {"instruction": "Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list.", "input": "[1, 3, 5, 8, 9, 10, 11, 15]", "output": "\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\n\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4", "category": "Python"}, {"instruction": "How would you find the maximum depth of a tree data structure?", "input": "", "output": "One way to find the maximum depth of a tree data structure is to start at the root node and then recursively traverse down each branch, keeping track of the maximum depth. This is known as a depth-first search and can be implemented using a recursive algorithm. Alternatively, the maximum depth can also be found using a breadth-first search, where the tree is traversed level-by-level.", "category": "Python"}, {"instruction": "Generate the class diagrams for a System class and a Database class.", "input": "<nopinput>", "output": "System Class Diagram: \n\n[![system class diagram](https://i.ibb.co/MfXN7xN/system-class-diagram.png)]\n\nDatabase Class Diagram:[![database class diagram](https://i.ibb.co/6WHWKV8/database-class-diagram.png)]", "category": "Python"}, {"instruction": "Construct a for loop in Python to output the numbers from 1 to 5.", "input": "", "output": "for i in range(1,6):\n  print(i)", "category": "Python"}, {"instruction": "Create a class in Python called Math that can calculate the average of two numbers.", "input": "", "output": "class Math:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \n    def average(self):\n        return (self.x + self.y) / 2", "category": "Python"}, {"instruction": "Compare and contrast the difference between static and instance variables.", "input": "", "output": "Static variables are associated with a class and are shared by all the objects of that class; in other words, they are class-level variables. Instance variables are associated with each object and their values can be different for each object. Static variables exist throughout the execution of the program and do not require instance of the class to exist. On the other hand, instance variables are created and destroyed as the instance of the class is created and destroyed.", "category": "Python"}, {"instruction": "Create a JavaScript function that can convert miles to kilometers.", "input": "", "output": "function convertMilesToKilometers(miles) {\n return miles * 1.60934;\n}", "category": "Python"}, {"instruction": "Create a HTML form for inputting student data.", "input": "", "output": "<form>\n <label>Name: </label><input type=\"text\" name=\"name\"><br>\n <label>Age: </label><input type=\"number\" name=\"age\"><br>\n <label>Gender: </label><input type=\"text\" name=\"gender\"><br>\n <label>Address: </label><input type=\"text\" name=\"address\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a postfix expression to an infix expression", "input": "3 4 + 5 *", "output": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\n\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))", "category": "Python"}, {"instruction": "Identify if the given number is prime", "input": "n = 13", "output": "def is_prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True\n\nif __name__ == '__main__':\n  n = 13\n  print(\"Is {} prime? {}\".format(n, is_prime(n)))", "category": "Python"}, {"instruction": "print the values of a dictionary in first-in, first-out order", "input": "my_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 3\n}", "output": "def print_dict(d):\n    queue = [key for key in d.keys()]\n    while len(queue) > 0:\n        key = queue.pop(0)\n        print(d[key])\n        \nif __name__ == '__main__':\n    my_dict = {\n     'a': 1,\n     'b': 2,\n     'c': 3\n    }\n    print_dict(my_dict)", "category": "Python"}, {"instruction": "update the function to return the length of 5", "input": "def return_length():\n    return 0", "output": "def return_length():\n    return 5", "category": "Python"}, {"instruction": "Extract the name of the given website link", "input": "https://www.example.com", "output": "\"\"\"\nExtract the name of the given website link \n\"\"\"\n\nimport re\n\ndef extract_name(url):\n    return re.search('https://www.(.*?).com', url).group(1)\n\nif __name__ == '__main__':\n    url = \"https://www.example.com\"\n    print(extract_name(url))", "category": "Python"}, {"instruction": "Create a HTML table to present student information.", "input": "", "output": "<table>\n <tr>\n  <td>Name</td><td>Age</td><td>Gender</td><td>Address</td>\n </tr>\n <tr>\n  <td>John Doe</td><td>24</td><td>Male</td><td>123 Main Street</td>\n </tr>\n</table>", "category": "Python"}, {"instruction": "design a functions which removes the duplicate elements from a list", "input": "", "output": "def remove_duplicates(x):\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Create a React component that displays the current day of the week and date.", "input": "", "output": "import React from \"react\";\n\nconst Date = () => {\n  const today = new Date();\n  const currentDay = today.getDay();\n  const dayList = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n  return (\n    <div>\n      {dayList[currentDay]}, {today.getFullYear()}/{today.getMonth()+1}/{today.getDate()}\n    </div>\n  );\n};\n\nexport default Date;", "category": "Python"}, {"instruction": "Compose a SQL query that returns the total number of employees for each department in a given company.", "input": "", "output": "SELECT d.DepartmentName, COUNT(e.DepartmentId) AS TotalEmployees\nFROM Departments d\nINNER JOIN Employees e ON d.DepartmentId = e.DepartmentId\nGROUP BY d.DepartmentName", "category": "Python"}, {"instruction": "Create a Ruby method to print a triangle of stars with a given height.", "input": "", "output": "def print_triangle_of_stars(height)\n  (1..height).each do |row|\n    (1..row).each do\n      print \"*\"\n    end\n    print \"\\n\"\n  end\nend", "category": "Python"}, {"instruction": "Write an IF ELSE statement in Python to print either \"Number is even\" or \"Number is odd\" depending on the number input.", "input": "", "output": "if (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")", "category": "Python"}, {"instruction": "What is a Python tuple?", "input": "", "output": "A Python tuple is an immutable sequence of objects which is ordered and indexed. Tuples are usually used to store collections of data that are related, but may be of different data types. Tuples are used instead of lists because they are more memory efficient and can be used as elements of sets and as keys in dictionaries.", "category": "Python"}, {"instruction": "Describe how language models can be used in natural language processing.", "input": "", "output": "Language models are used in natural language processing to enable machines to understand and generate natural language. Language models assign a probability to a sequence of natural language words to improve the accuracy of predictions in language processing tasks. They are used for automatic speech recognition, machine translation, text summarization, essay grading, and natural language understanding.", "category": "Python"}, {"instruction": "Write a SELECT statement in SQL that retrieves all rows from the table \"employees\".", "input": "", "output": "SELECT * FROM employees;", "category": "Python"}, {"instruction": "Create an R function that plots a histogram of a given data set.", "input": "", "output": "plot_histogram <- function(data) {\n  hist(data, main = \"Histogram of given data set\")\n}", "category": "Python"}, {"instruction": "Create an algorithm to produce a Fibonacci number.", "input": "", "output": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a regular expression to select all words starting with 'a'.", "input": "", "output": "\\b[Aa]\\w+\\b", "category": "Python"}, {"instruction": "Subtract the given list of numbers using JavaScript.", "input": "List: [8, 3, 6]", "output": "-9", "category": "Python"}, {"instruction": "Given a collection of strings, sort the strings by their length", "input": "strings = [\"a\", \"abc\", \"defg\"]", "output": "strings = [\"a\", \"abc\", \"defg\"]\n\nstrings.sort(key=len)\n\nprint(strings)", "category": "Python"}, {"instruction": "Given a 2D array, return the sums of all columns", "input": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]", "output": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]\n\nsums = []\n\nfor i in range(len(arr[0])):\n    total = 0\n    for row in arr:\n        total += row[i]\n    sums.append(total)\n\nprint(sums)", "category": "Python"}, {"instruction": "Strip the spaces in the given string", "input": "string = \"Hello World   \"", "output": "string = \"Hello World   \"\n\nstripped_string = string.strip()\n\nprint (stripped_string)", "category": "Python"}, {"instruction": "Given a collection of email addresses, group them by the domain", "input": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]", "output": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]\n\nfrom collections import defaultdict\n\nby_domain = defaultdict(list)\n\nfor email in emails:\n    domain = email.split(\"@\")[-1]\n    by_domain[domain].append(email)\n\nprint(dict(by_domain))", "category": "Python"}, {"instruction": "Given a list of words and a target word, determine if the target word is in the list", "input": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"", "output": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"\n\nif target_word in list_words:\n  print (\"Target word is in the list\")\nelse:\n  print (\"Target word is not in the list\")", "category": "Python"}, {"instruction": "Debug the code to fix the error.", "input": "def hi_it(name):\n print(\"Hi,\" + name)\n\nhi_it(\"John\")", "output": "def hi_it(name):\n print(\"Hi,\" + str(name))\n\nhi_it(\"John\")", "category": "Python"}, {"instruction": "Describe the differences between \"==\" and \"===\" operators in JavaScript.", "input": "", "output": "In JavaScript, the \"==\" operator compares two values by performing type-conversion if necessary, while the \"===\" operator does not perform type-conversion and compares the values directly. For example, the statement \"3 == '3'\" will return true for the \"==\" operator, but false for the \"===\" operator, since the two values on either side of the operator are not of the same type.", "category": "Python"}, {"instruction": "Generate a MySQL query to fetch a specified number of records starting from a given ID.", "input": "5\n    10", "output": "SELECT * \nFROM table \nWHERE id > 10 \nLIMIT 5;", "category": "Python"}, {"instruction": "Write a method in Python which takes a positive integer and returns the sum of squares of all numbers smaller than the given number.", "input": "5", "output": "def sum_of_squares(n): \n    if n == 1: \n        return 1\n    else: \n        return n*n + sum_of_squares(n-1) \n\nnumber = 5\nresult = sum_of_squares(number)\nprint('The sum of squares of numbers smaller than {} is {}.'.format(number, result))", "category": "Python"}, {"instruction": "Design a JavaScript program to find the factorial of an integer.", "input": "5", "output": "function factorial(num) { \n    // If the number is less than 0, reject it. \n    if (num < 0) {\n        return -1;\n    }\n    // If the number is 0, its factorial is 1.\n    else if (num == 0) {\n        return 1;\n    }\n    // Otherwise, call the recursive procedure. \n    else { \n        return (num * factorial(num - 1)); \n    } \n} \n\nconst num = 5;\nconst result = factorial(num);\n\nconsole.log(`The factorial of ${num} is ${result}.`);", "category": "Python"}, {"instruction": "Compile a Java program using the command line.", "input": "", "output": "javac filename.java", "category": "Python"}, {"instruction": "Create a C++ program to print all the even numbers of a given range.", "input": "1\n    10", "output": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{  \n  int start, end;\n  \n  cout<<\"Enter start of range: \";\n  cin>>start;\n  cout<<\"Enter end of range: \";\n  cin>>end;\n  \n  cout<<\"Printing even numbers between \"<< start <<\" and \"<< end <<\": \";\n  \n  for(int i = start; i <= end; i++)\n  {  \n    if(i % 2 == 0)\n    {\n       cout << i << \" \";\n    }\n  } \n  return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL statement to join table1 and table 2 on the \"name\" column.", "input": "", "output": "SELECT table1.name, table1.city, table2.email\nFROM table1\nINNER JOIN table2\nON table1.name=table2.name;", "category": "Python"}, {"instruction": "Given a list of numbers, write a program that finds all the numbers that are divisible by 3.", "input": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndivisible_by_3 = list(filter(lambda x: x % 3 == 0, myList))\nprint(divisible_by_3)", "category": "Python"}, {"instruction": "Given an array of strings \"alphabet\", write a code to repeat each element in the array.", "input": "alphabet = [\"a\", \"b\", \"c\"]", "output": "alphabet = [\"a\", \"b\", \"c\"]\n\nnew_alphabet = []\nfor letter in alphabet:\n    new_alphabet += [letter]*2\n\nprint(new_alphabet)", "category": "Python"}, {"instruction": "Make a program that prints the elements of a given array in reverse order", "input": "arr = [1,2,3,4,5]", "output": "arr = [1,2,3,4,5]\n\nfor index in range(len(arr)-1, -1, -1):\n    print(arr[index])", "category": "Python"}, {"instruction": "Given a list of strings and a target string, return a list of strings which contain the target string", "input": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"", "output": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"\n\nresult = [string for string in list_of_strings if target_string in string]\n\nprint(result)", "category": "Python"}, {"instruction": "Insert code to reverse a list in place.", "input": "arr = [1,2,3,4]", "output": "arr = [1,2,3,4]\narr.reverse()", "category": "Python"}, {"instruction": "Sum every second element in an array.", "input": "arr = [1, 5, 4, 8, 10, 12]", "output": "def sum_second_elements(arr):\n    sum_num = 0\n    for i in range(1, len(arr), 2):\n        sum_num += arr[i]\n    return sum_num", "category": "Python"}, {"instruction": "You need to extract a part of the string from the starting to the 5th character and from 7th to the 25th character.", "input": "string = \"This is a coding challenge\"", "output": "thiic ng Chal", "category": "Python"}, {"instruction": "Write a function that takes two strings as input,one being a base string and other being a sub-string and returns True if sub-string appears in base string and False otherwise.", "input": "Base string = \"I am a coding enthusiast\"\nSub-string = \"coding\"", "output": "True", "category": "Python"}, {"instruction": "Create a class named 'Circle' which calculates the area and circumference given a radius.", "input": "", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "You need to compute the Average of all numbers stored in an array", "input": "arr = [3, 2, 5, 9, 6]", "output": "average = 5.4", "category": "Python"}, {"instruction": "Generate a python program to create a n-dimensional array filled with zeros.", "input": "n = 4", "output": "# Program to create a n-dimensional array filled with zeros \n\nimport numpy as np\n\n# Get the number of dimensions \nn = 4\n\n# Create an array of zeros of given size \narr = np.zeros((n,n,n,n))\n\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to implement a round-robin scheduling algorithm.", "input": "processes = [10, 5, 7]\ntime_slice = 2", "output": "# Program to implement a round-robin scheduling algorithm\n\n# Get the list of processes and the time slice \nprocesses = [10, 5, 7]\ntime_slice = 2\n\n# Create an empty list to store the remaining burst time \nremaining_burst = []\n\n# Loop through all processes to get the remaining burst time \nfor process in processes:\n  remaining_burst.append(process)\n\n# Keep track of current time cycle \ntime = 0\n\n# Loop through the processes and implement round-robin scheduling\nwhile True:\n  done = True\n  \n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n        time += time_slice\n        \n        # Reduce the remaining burst time \n        remaining_burst[i] -= time_slice\n      else:\n        # Increment timeline\n        time += remaining_burst[i]\n        \n        # Set remaining burst to 0 \n        remaining_burst[i] = 0\n\n  # Break the loop if all processes are done \n  if done:\n    break\n\nprint('Total time to schedule the processes is', time)", "category": "Python"}, {"instruction": "Write a code to simulate a random walk in two-dimensional space.", "input": "x_steps = 10", "output": "# Program to simulate a random walk in two-dimensional space\n\nimport random\n\nx_steps = 10\n\n# Initialize starting positions\nx = 0\ny = 0\n\n# Take a random step on each iteration\nfor _ in range(x_steps):\n  direction = random.randint(0, 3)\n  if direction == 0:\n    x += 1\n  elif direction == 1:\n    x -= 1\n  elif direction == 2:\n    y += 1\n  else:\n    y -= 1\n  \nprint(f'Final position is ({x},{y})')", "category": "Python"}, {"instruction": "Create a program that generates a random integer from 1 to 10.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(\"A random number between 1 and 10 is: \" + str(random_number))", "category": "Python"}, {"instruction": "Generate a web page with a form that takes a user's name and age, and outputs a greeting based on the age.", "input": "", "output": "# Program to generate a simple web page\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n# Render the web page \n@app.route('/', methods = ['GET'])\ndef show_index_page():\n  return '''\n  <html>\n    <head>\n      <title>Greeting Form</title>\n    </head>\n    <body>\n      <h1>Greeting Form</h1>\n      <form method=\"POST\">\n        <input type=\"text\" name=\"user_name\" placeholder=\"Enter your name\" required>\n        <input type=\"number\" name=\"user_age\" placeholder=\"Enter your age\" required>\n        <input type=\"submit\" value=\"Submit\">\n      </form>\n    </body>\n  </html>'''\n  \n# Process the form data and generate the greeting\n@app.route('/', methods = ['POST'])\ndef process_data():\n  name = request.form.get('user_name')\n  age = request.form.get('user_age')\n  \n  if age <= 10:\n    message = f'Hi {name}, how is your day going?'\n  elif age > 10 and age <= 20:\n    message = f'Hello {name}, what are you interested in?'\n  else:\n    message = f'Greetings {name}, it is nice to meet you!'\n  \n  return message\n  \nif __name__ == '__main__': \n  app.run(debug = True)", "category": "Python"}, {"instruction": "Create a program to generate a random password of 10 characters consisting of both alphabets and numbers.", "input": "", "output": "# Program to generate a random password of 10 characters\n\nimport string \nimport random \n\n# Get all the symbols to use in the password \nsymbols = string.ascii_letters + string.digits \n\n# Generate a random password \npassword = ''.join(random.choice(symbols) for _ in range(10)) \n\nprint(password)", "category": "Python"}, {"instruction": "Create a web service to convert a given list of temperatures from Celsius to Fahrenheit.", "input": "[50, 51, 52, 53, 54]", "output": "# Code to convert Celsius to Fahrenheit \ndef c_to_f(celsius): \n    return celsius * 9/5 + 32\n\n# Create a web service \nfrom flask import Flask\n\napp = Flask(__name__) \n\n@app.route('/converter/<list:celsius>', methods =['GET']) \ndef convert_celsius(celsius):\n  # Convert the Celsius values to Fahrenheit\n  output = [c_to_f(temp) for temp in celsius]\n  return output\n\nif __name__ == '__main__': \n    app.run(debug = True)", "category": "Python"}, {"instruction": "Rewrite the following code using the set module in Python", "input": "a = [1, 1, 2, 3, 4, 5, 5, 5]", "output": "import set\n\na = [1, 1, 2, 3, 4, 5, 5, 5]\na_set = set(a)\nnew_list = list(a_set)\nprint(new_list)", "category": "Python"}, {"instruction": "Create a function that takes two parameters and merge them into a single object.", "input": "a = {'a': 1, 'b': 2}\nb = {'c': 3, 'd': 4}", "output": "def merge_objects(obj_a, obj_b):\n    merged = {**obj_a, **obj_b}\n    return merged", "category": "Python"}, {"instruction": "Find all duplicates in an array.", "input": "arr = [1, 2, 4, 2, 1, 5]", "output": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates", "category": "Python"}, {"instruction": "Generate a random code string with each character from A-Z and 0-10.", "input": "", "output": "import random\n\ndef random_code_string(length):\n    chars = [chr(i) for i in range(65, 91)] + [str(digit) for digit in range(10)]\n    code_string = \"\"\n    for _ in range(length):\n        random_char = random.choice(chars)\n        code_string += random_char\n    return code_string", "category": "Python"}, {"instruction": "Identify if a given integer is odd or even.", "input": "43", "output": "def identify_odd_even(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Create a program to encode a message with the Caesar cipher encryption algorithm.", "input": "message = 'Hello World'\nshift = 3", "output": "# Program to encode a message with the Caesar cipher encryption algorithm \n\n# Get the message to encrypt \nmessage = 'Hello World'\n\n# Set the shift value \nshift = 3\n\n# Create an array to store the encrypted message \nencrypted_message = [] \n\nfor character in message: \n  encrypted_character = chr(ord(character) + shift) \n  encrypted_message.append(encrypted_character) \n\n# Join the encrypted message to form a string \nencrypted_message = ''.join(encrypted_message)\n\nprint(encrypted_message)", "category": "Python"}, {"instruction": "You need to find the number of words in a sentence.", "input": "sentence = \"The quick brown fox jumps over the lazy dog\"", "output": "9", "category": "Python"}, {"instruction": "Given an array of strings \"words\", write a code to remove all the words which are greater than 5 characters in length.", "input": "words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]", "output": "words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]\n\nwords = list(filter(lambda x : len(x)<=5, words))\nprint(words)", "category": "Python"}, {"instruction": "Given the following line of code, explain what it does.", "input": "a = [i for i in range(5)]", "output": "The given line of code creates a list from 0 to 4 (inclusive) using a list comprehension. It is equivalent to the following code:\n\na = []\nfor i in range(5):\n    a.append(i)\n\nTherefore, it creates a list 'a' with elements \"0\", \"1\", \"2\", \"3\", and \"4\".", "category": "Python"}, {"instruction": "Write a MySQL query to select the names and phone numbers of people whose age is greater than 30", "input": "", "output": "SELECT Name, Phone \nFROM People \nWHERE Age > 30", "category": "Python"}, {"instruction": "Write a class definition in Java to create a Person object with the properties age, name, and hobby.", "input": "", "output": "public class Person {\n  private int age;\n  private String name;\n  private String hobby;\n  \n  //constructors \n  public Person(int age, String name, String hobby) {\n    this.age = age;\n    this.name = name;\n    this.hobby = hobby;\n  } \n  \n  //getters\n  public int getAge() {\n    return age;\n  }  \n  \n  public String getName() {\n    return name;\n  }\n  \n  public String getHobby() {\n    return hobby;\n  }\n  \n  //setters\n  public void setAge(int age) {\n    this.age = age;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public void setHobby(String hobby) {\n    this.hobby = hobby;\n  }\n  \n}", "category": "Python"}, {"instruction": "Define a python function that returns an array of the numbers from 0 to n", "input": "", "output": "def create_array(n): \n    # create an empty list \n    mylist=[] \n    # add elements to the list by looping n times \n    for i in range(0, n + 1): \n        mylist.append(i) \n    # return the list \n    return mylist", "category": "Python"}, {"instruction": "Insert a try and except block in the following code", "input": "x = int(input(\"Please enter a number: \"))", "output": "try:\n    x = int(input(\"Please enter a number: \"))\nexcept ValueError:\n    print(\"Input must be an integer!\")", "category": "Python"}, {"instruction": "Create a class definition in python with one variable and one method", "input": "", "output": "class Example:\n  def __init__(self, variable):\n    self.variable = variable\n\n  def method(self):\n    return self.variable + 1", "category": "Python"}, {"instruction": "Enter the necessary code to initiate a MongoDB connection", "input": "", "output": "from pymongo import MongoClient\n\n#creating the MongoClient\nclient = MongoClient(\"mongodb://localhost:27017/\")\n\n#connecting to the database\ndb = client[\"database_name\"]", "category": "Python"}, {"instruction": "Create an HTML page to display the output of a JavaScript greeting message.", "input": "message: Welcome!", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>JavaScript Greeting Message</title>\n</head>\n<body>\n  <h1>Welcome!</h1>\n  <script type=\"text/javascript\">\n    document.write(\"Welcome!\");\n  </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript program to validate whether a given phone number is valid.", "input": "phone number: 412-678-9012", "output": "function validPhoneNumber(phoneNumber) {\n  let phoneRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n   \n  let validPhone = phoneRegex.test(phoneNumber);\n   \n  return validPhone;\n}\n\nvalidPhoneNumber(\"412-678-9012\") # true", "category": "Python"}, {"instruction": "Write a SQL query to select employee names together with their salary.", "input": "", "output": "SELECT name, salary \nFROM employees;", "category": "Python"}, {"instruction": "Create a JavaScript object to store the data of a person.", "input": "name: John Doe, age: 20, address: New York, USA", "output": "const person = {\n  name: 'John Doe', \n  age: 20,\n  address: 'New York, USA'\n}", "category": "Python"}, {"instruction": "Read the given list and filter out the elements containing the number '3'.", "input": "mylist = [13, 23, 32, 31, 14]", "output": "filteredlist = []\nfor num in mylist:\n    if '3' not in str(num):\n        filteredlist.append(num)\n\nprint(filteredlist)", "category": "Python"}, {"instruction": "Create a program in Python that will take a list of strings and output a list containing the lengths of each string.", "input": "mylist = [\"Hello\", \"World\", \"WDI\", \"Class\"]", "output": "length_list = []\nfor string in mylist:\n    length_list.append(len(string))\n\nprint(length_list)", "category": "Python"}, {"instruction": "Write a script in JavaScript for converting temperature from Celsius to Fahrenheit.", "input": "Celsius = 20", "output": "var celsius = 20;\nvar fahrenheit = (celsius * (9/5)) + 32;\nconsole.log(fahrenheit);", "category": "Python"}, {"instruction": "Read the given list and filter out the odd numbers.", "input": "mylist = [1,2,3,4,5]", "output": "even_list = []\nfor num in mylist:\n    if num % 2 == 0:\n        even_list.append(num)\n\nprint(even_list)", "category": "Python"}, {"instruction": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order.", "input": "mylist = [3, 2, 5, 4, 1]", "output": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)", "category": "Python"}, {"instruction": "Change the comment to a print statement in the code.", "input": "x = 1\n# print the value of x", "output": "x = 1\nprint(x)", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.", "input": "list = [12, 4, 1, 18, 7, 15, 6, 11, 4]\ntarget = 4", "output": "def count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\n\nprint(count_target(list, target))", "category": "Python"}, {"instruction": "Write a Ruby method that takes an array of strings as a parameter, and returns a string with the elements of the array sorted and separated by commas.", "input": "['cat', 'dog', 'bird', 'bat']", "output": "def array_string(arr)\n  arr.sort.join(', ')\nend\n\nputs array_string(['cat', 'dog', 'bird', 'bat'])", "category": "Python"}, {"instruction": "Write a Java class to implement a priority queue data structure.", "input": "", "output": "public class PriorityQueue {\n\n  private int size;\n  private int[] data;\n\n  public PriorityQueue(int capacity) {\n    this.size = 0;\n    this.data = new int[capacity];\n  }\n\n  public void add(int item) {\n    if (this.size == this.data.length) {\n      throw new IllegalStateException(\"The queue is full!\");\n    }\n    this.data[this.size+1]  = item;\n    this.size++;\n  }\n\n  public int peek() {\n    if (this.size == 0) {\n      throw new IllegalStateException(\"The queue is empty!\");\n    }\n    return this.data[this.size-1];\n  }\n\n  public int poll() {\n    int item = peek();\n    this.data[this.size-1] = 0;\n    this.size--;\n    return item;\n  }\n\n  public int size() {\n    return this.size;\n  }\n\n}", "category": "Python"}, {"instruction": "Create a program that uses a loop to generate 25 random numbers from 0 to 8.", "input": "", "output": "import random\n\n# Generate 25 random numbers\nrandom_list = []\nfor i in range(25):\n    random_list.append(random.randint(0, 8))\n\nprint(random_list)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a list of numbers and calculates their median.", "input": "def median(data):", "output": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]", "category": "Python"}, {"instruction": "Construct a factorial function in JavaScript that takes in two inputs x and y as parameters.", "input": "", "output": "function factorial(x, y) {\n    let result = 1;\n    for (let i = x; i <= y; i++) {\n        result *= i;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Implement a recursive algorithm to count the number of elements that are divisible by k in an array.", "input": "[2, 4, 8, 10, 11], k = 3", "output": "def countK(arr, k): \n    if len(arr) == 0: \n        return 0\n    if arr[0] % k == 0: \n        return 1 + countK(arr[1:], k)\n    else: \n        return 0 + countK(arr[1:], k)", "category": "Python"}, {"instruction": "What is the difference between the List and the Set data structures?", "input": "", "output": "The main difference between Lists and Sets are that Lists are ordered and can contain duplicate elements, while Sets are unordered and cannot contain duplicate elements. Additionally, Lists support indexing and iteration, while Sets do not.", "category": "Python"}, {"instruction": "Create an array of five elements using the language of your choice.", "input": "", "output": "my_list = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Re-write the following code using only the filter() function.", "input": "numbers = range(10)\nevens = []\n\nfor x in numbers:\n    if x % 2 == 0:\n        evens.append(x)", "output": "numbers = range(10)\nevens = list(filter(lambda x : x % 2 == 0, numbers))", "category": "Python"}, {"instruction": "What is the maximum possible value that can be stored in a single byte?", "input": "", "output": "The maximum possible value that can be stored in a single byte is 255.", "category": "Python"}, {"instruction": "What is deadlock and how to prevent it?", "input": "", "output": "Deadlock is a state in which two or more processes wait for each other to finish, but none of the processes can finish because each is waiting for the other. To prevent deadlock, one can employ the use of a deadlock avoidance algorithm which typically checks for whether a particular set of conditions exist that can lead to deadlock. Additionally, locks can be applied liberally, but with caution, while avoiding circular wait.", "category": "Python"}, {"instruction": "Write a JSON document to store the name and score of players in a game.", "input": "", "output": "[\n  {\n    \"name\": \"John Doe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"Jane Doe\",\n    \"score\": 70\n  },\n  {\n    \"name\": \"Bob Smith\",\n    \"score\": 50\n  }\n]", "category": "Python"}, {"instruction": "Write an Objective-C class to represent a person containing attributes like name, age, and height.", "input": "", "output": "#import <Foundation/Foundation.h>\n\n@interface Person : NSObject\n\n@property NSString *name;\n@property NSUInteger age;\n@property CGFloat height;\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height;\n\n@end\n\n#import \"Person.h\"\n\n@implementation Person\n\n- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height\n{\n    self = [super init];\n    if (self) {\n        self.name = name;\n        self.age = age;\n        self.height = height;\n    }\n    return self;\n}\n\n@end", "category": "Python"}, {"instruction": "Write a C++ program to create a linked list of length 5.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nstruct Node{\n    int data;\n    Node *next;\n};\n\nNode *head = NULL;\n\nvoid createList(int n)\n{\n    Node *newNode, *temp;\n    int data, i;\n\n    head = new Node;\n\n    if(head == NULL)\n    {\n        cout<<\"Memory allocation failed\\n\";\n    }\n    else\n    {\n        cout<<\"Enter the value of node 1: \";\n        cin>>data;\n\n        head->data = data;\n        head->next = NULL;\n\n        temp = head;\n\n        for(i=2; i<=n; i++)\n        {\n            newNode  = new Node;\n\n            if(newNode == NULL)\n            {\n                cout<<\"Memory allocation failed\\n\";\n                break;\n            }\n            else\n            {\n                cout<<\"Enter the data of node \"<<i<<\": \";\n                cin>>data;\n\n                newNode->data = data;\n                newNode->next = NULL;\n\n                temp->next = newNode;\n                temp = temp->next;\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write a PHP program to receive an array as an input and return an array with the same elements in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "<?php\n\nfunction reverse_array($arr) {\n  $reversed_arr = array_reverse($arr);\n  return $reversed_arr;\n}\n\n$input_arr = [1, 2, 3, 4, 5];\n$output_arr = reverse_array($input_arr);\n\nprint_r($output_arr);", "category": "Python"}, {"instruction": "Write a CSS selector to select all the links in a web page.", "input": "", "output": "a {\n  color: blue;\n}", "category": "Python"}, {"instruction": "Write a Python script that takes a string as input and outputs a string with the same characters in reverse order.", "input": "hello", "output": "def reverse_string(str):\n  return str[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Update the values of the variables x, y and z using the given expression.", "input": "x=1, y=2, z=3, expression: x+2*y-z", "output": "x = 3, y = 2, z = 3", "category": "Python"}, {"instruction": "Create a final list of all unique elements in list_1 and list_2.", "input": "list_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8, 10]", "output": "def get_unique_elements(list1, list2):\n    unique_elements = []\n\n    for element in list1:\n        if element not in list2:\n            unique_elements.append(element)\n\n    for element in list2:\n        if element not in list1:\n            unique_elements.append(element)\n\n    return unique_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nunique_list = get_unique_elements(list1, list2)\n\nprint(unique_list)  # [1, 3, 5, 6, 8, 10]", "category": "Python"}, {"instruction": "Generate a dictionary with five key-value pairs of string.", "input": "", "output": "dictionary = {\n    'Apple': 'Red',\n    'Banana': 'Yellow',\n    'Strawberry': 'Red',\n    'Orange': 'Orange',\n    'Grape': 'Purple'\n}", "category": "Python"}, {"instruction": "Output a sentence in the following format with 'name' as the user input.", "input": "name = 'John Doe'", "output": "\"Hello, my name is John Doe.\"", "category": "Python"}, {"instruction": "Using the list of strings, create a new list without any vowels.", "input": "strings = ['apple', 'ball', 'cat']", "output": "def remove_vowels(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_strings = []\n    for string in strings: \n        new_strings.append(''.join([char for char in string if char.lower() not in vowels]))\n    \n    return new_strings", "category": "Python"}, {"instruction": "Create a class named \"Car\" to store information about a car's make, model and year.", "input": "", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make \n        self.model = model\n        self.year = year", "category": "Python"}, {"instruction": "Create a function named \"parse_urls\" which takes a single string parameter and returns a dictionary of queries from the URL.", "input": "url=\"https://www.example.com/product?color=red&size=small\"", "output": "def parse_urls(url): \n    queries = url.split('?')[1]\n    queries_dict = {}\n    for query in queries.split('&'): \n        key, value = query.split('=') \n        queries_dict[key] = value \n    return queries_dict", "category": "Python"}, {"instruction": "Using the given list, write a code to get a list of all the words starting with \"T\"", "input": "words_list = ['Meteor', 'Timeline', 'Tablet', 'Timeframe', 'Trophy']", "output": "words_starting_with_T = [word for word in words_list if word.startswith('T')]", "category": "Python"}, {"instruction": "Display the results from a MySQL query in HTML table format.", "input": "MySQL query: SELECT * FROM employees WHERE name LIKE '%john%'", "output": "<?php\n$query = \"SELECT * FROM employees WHERE name LIKE '%john%'\";\n$result = mysqli_query($conn, $query);\n\necho \"<table>\";\necho \"<tr><th>ID</th><th>Name</th><th>Age</th></tr>\"; \n\nwhile ($row = mysqli_fetch_assoc($result)) {\n    echo \"<tr><td>\".$row['id'].\"</td><td>\".$row['name'].\"</td><td>\".$row['age'].\"</td></tr>\";\n}  \necho \"</table>\";\n?>", "category": "Python"}, {"instruction": "Write a function to perform buble sort.", "input": "", "output": "public void bubbleSort(int[] array) {\n    int n = array.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Find the number of negative numbers in a given list.", "input": "List: [-2, -7, -11, 1, 4, 8, 10]", "output": "function countNegatives(list) {\n    let count = 0;\n    for (let i=0; i<list.length; i++) {\n        if (list[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\ncountNegatives([-2, -7, -11, 1, 4, 8, 10]); // returns 3", "category": "Python"}, {"instruction": "Construct a 3 level hierarchical tree data structure in PHP.", "input": "", "output": "class Node {\n    public $item;\n    public $parent;\n    public $children;\n\n    public function __construct($item, $parent = null) {\n        $this->item = $item;\n        $this->parent = $parent;\n        $this->children = array();\n    }\n\n    public function addChild($item) {\n        $node = new Node($item, $this);\n        array_push($this->children, $node);\n        return $node;\n    }\n}", "category": "Python"}, {"instruction": "Discuss the pros and cons of using class properties in C#.", "input": "", "output": "Class properties make code more readable and shorter by allowing the user to access and set private variables without having to declare a public method for each. Additionally, class properties make it easy to control access rules for class variables, as you can create getters and setters for variable access, allowing you to enforce specific behaviors such as \u201cread-only\u201d or \u201cwrite-only\u201d access. On the other hand, class properties tend to be less efficient than public or private variables due to the extra overhead incurred in calling the getter and setter methods. Additionally, they can make debugging more difficult, since the code that accesses the variable is abstracted away to a different method. Overall, whether to use class properties or not is largely a design decision, as there are advantages and disadvantages to both approaches.", "category": "Python"}, {"instruction": "Design an abstract employee class with following members.", "input": "", "output": "public abstract class Employee \n{\n    private string employeeId;\n    private string name;\n    private string address;\n    private string phoneNumber;\n    private double salary;\n\n    public string EmployeeId\n    {\n        get { return employeeId; }\n        set { employeeId = value; }\n    }\n\n    public string Name\n    {\n        get { return name; }\n        set { name = value; }\n    }\n\n    public string Address\n    {\n        get { return address; }\n        set { address = value; }\n    }\n\n    public string PhoneNumber\n    {\n        get { return phoneNumber; }\n        set { phoneNumber = value; }\n    }\n\n    public double Salary\n    {\n        get { return salary; }\n        set { salary = value; }\n    }\n\n    public abstract double getSalary();\n    public abstract void incrementSalary(double incrementAmount);\n    public abstract double calculateIncomeTax();\n}", "category": "Python"}, {"instruction": "Create a JavaScript object with key-value pairs representing names and ages.", "input": "", "output": "const people = {\n  \"John\": 30,\n  \"Emily\": 28,\n  \"George\": 25,\n  \"Karen\": 33\n}", "category": "Python"}, {"instruction": "Create an SQL query to find the number of employees whose age is between 30 and 40", "input": "", "output": "SELECT COUNT(*) FROM employees WHERE age BETWEEN 30 AND 40;", "category": "Python"}, {"instruction": "In HTML, write a code to create an input field to get an email address from a user.", "input": "", "output": "<input type=\"email\" name=\"email\" placeholder=\"Enter email address\">", "category": "Python"}, {"instruction": "Write a JavaScript function to find all words in a string.", "input": "This is a string", "output": "function findWords(str) { \n    let words = []; \n    let start = 0; \n\n    for (let i = 0; i < str.length; i++) { \n        if (str[i] == ' ') { \n            let word = str.substring(start, i); \n            if (word != '') \n                words.push(word); \n            start = i + 1; \n        } \n    } \n  \n    let lastWord =  str.substring(start, str.length); \n    if (lastWord != '') \n        words.push(lastWord); \n\n    return words; \n}", "category": "Python"}, {"instruction": "Given a list of integers, remove all negative numbers.", "input": "numbers_list = [-2,-3,4,5,-6,7]", "output": "def remove_negative_numbers(numbers_list):\n  result_list = []\n  \n  for number in numbers_list:\n    if number >= 0:\n      result_list.append(number)\n  \n  return result_list\n\nnumbers_list = [-2,-3,4,5,-6,7]\nprint(remove_negative_numbers(numbers_list))", "category": "Python"}, {"instruction": "Identify the algorithm used for sorting a given array of 16 elements.", "input": "[12, 4, 15, 7, 8, 10, 1, 11, 13, 14, 3, 6, 5, 2, 9, 16]", "output": "The algorithm used for sorting the given array of 16 elements is Quick Sort.", "category": "Python"}, {"instruction": "Write a Java program to generate a schedule for students with a given set of available IDs.", "input": "IDs to be scheduled [1, 2, 3]", "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ScheduleGenerator {\n \n public static void main(String[] args) {\n   List<Integer> ids = new ArrayList<Integer>(); \n  \n   ids.add(1); \n   ids.add(2);\n   ids.add(3);\n  \n   System.out.println(generateSchedule(ids));\n }\n \n public static List<Integer> generateSchedule(List<Integer> ids) {\n   List<Integer> schedule = new ArrayList<Integer>();\n   for (int id : ids) {\n    schedule.add(id);\n   }\n   // Add your code here to generate a customized schedule\n \n   return schedule;\n }\n}", "category": "Python"}, {"instruction": "Create a data visualization in Python using the given dataset.", "input": "Dataset: \nThe data contains information about the latest coronavirus cases per US state", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()", "category": "Python"}, {"instruction": "Train a machine learning algorithm from a given dataset.", "input": "Dataset: The data contains information about students' results in an exam.", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the data into features and labels\nX = data.drop(['result'], axis=1)\ny = data['result']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state=0)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)", "category": "Python"}, {"instruction": "Format the given date string using JavaScript.", "input": "String: 2008-11-10", "output": "\"November 10, 2008\"", "category": "Python"}, {"instruction": "How many elements does the following array contain?", "input": "Array: [4, 6, 1, 9, 7]", "output": "5", "category": "Python"}, {"instruction": "Create a function in Python which takes in a list of numbers and returns the sum of all numbers.", "input": "[1,2,3,4,5]", "output": "def list_sum(num_list): \n \n    # initialize sum\n    Sum = 0\n \n    # traverse through all numbers\n    for num in num_list: \n        Sum += num \n  \n    # return Sum\n    return Sum \n  \n# test the above code\nlist1 = [1,2,3,4,5] \nprint(list_sum(list1)) \n\n# Output:\n15", "category": "Python"}, {"instruction": "Write a function in C that takes two float numbers as input and returns their average.", "input": "", "output": "float average(float num1, float num2) {\n return (num1 + num2) / 2;\n}", "category": "Python"}, {"instruction": "How is an immutable object different from a mutable object in Java?", "input": "", "output": "In Java, an immutable object is an object whose state cannot be modified once it is created. An immutable object's state can still be accessed, but its properties cannot be changed. Mutable objects, on the other hand, can be modified after they are created. This is accomplished by providing methods to modify its properties. Mutable objects are generally more flexible than immutable objects, but because they can be changed, they also pose a greater risk of being used incorrectly or maliciously.", "category": "Python"}, {"instruction": "Implement a PHP program to find the sum of all even numbers between 0 and 50.", "input": "", "output": "<?php\n$sum = 0;\n\nfor ($i = 0; $i <= 50; $i+=2) {\n  $sum += $i;\n}\n\necho \"The sum of all even numbers from 0 to 50 is $sum\";\n?>", "category": "Python"}, {"instruction": "How are dictionaries implemented in Python?", "input": "", "output": "Dictionaries in Python are implemented as hash tables. Each key-value pair is stored as an entry in the hash table, and a hash function is used to map the key to its corresponding index in the table. This allows fast lookups of the associated value of a given key and makes dictionary operations such as insertion, deletion, and retrieval very efficient. Furthermore, dictionaries are mutable, meaning they can be changed after they are created.", "category": "Python"}, {"instruction": "Create a function which detects overlapping dates from a given list.", "input": "dates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]", "output": "def detect_overlapping_dates(dates_list): \n  overlaps = set()\n\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\n\nprint(detect_overlapping_dates(dates_list))", "category": "Python"}, {"instruction": "What is the purpose of a join operation in a relational database?", "input": "", "output": "A join operation in a relational database is used to combine data from two or more tables based on a common field. This is done to match and retrieve related data from one or multiple tables and then use it as a single result. The most common type of join is an inner join, which combines only the matching records from both tables. Other types of join operations are left join and right join, which combines all the data from a specified table and contains only the matching data from the other table.", "category": "Python"}, {"instruction": "Create a Java program to take an integer input from the user and print its factorial.", "input": "", "output": "import java.util.Scanner;\n\npublic class Factorial {\n public static void main(String[] args) {\n  Scanner sc = new Scanner(System.in);\n  System.out.print(\"Enter a number: \");\n  int n = sc.nextInt();\n\n  int factorial = 1;\n  for (int i = 1; i <= n; i++) {\n   factorial = factorial * i;\n  }\n\n  System.out.println(\"The factorial of \" + n + \" is \" + factorial);\n }\n}", "category": "Python"}, {"instruction": "Write a CSS rule to make all p elements have a font size of 16px.", "input": "", "output": "p {\n font-size: 16px;\n}", "category": "Python"}, {"instruction": "Create a Javascript function to take an array of numbers and return the sum of all its elements.", "input": "[1, 2, 3, 4, 5]", "output": "function sumArrayElements(arr) {\n let sum = 0;\n\n for (let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n }\n\n return sum;\n}", "category": "Python"}, {"instruction": "Write a CSS rule to hide all elements with class \"hidden\".", "input": "", "output": ".hidden {\n  display: none;\n}", "category": "Python"}, {"instruction": "Define a Java annotation for a class.", "input": "", "output": "@interface MyAnnotation {\n   String author() default \"unknown\";\n   int date();\n}", "category": "Python"}, {"instruction": "Encrypt a given string using a Caesar cipher.", "input": "String: \"Hello World\"", "output": "Encrypted string: \"Khoor Zruog\"", "category": "Python"}, {"instruction": "Create a Java class to represent a new type of vehicle called hovercar.", "input": "", "output": "public class Hovercar {\n \n  // Properties\n  private String color;\n  private int maxSpeed;\n  private int currentSpeed;\n \n  // Constructor\n  public Hovercar(String color, int maxSpeed) {\n    this.color = color;\n    this.maxSpeed = maxSpeed;\n    this.currentSpeed = 0;\n  }\n \n  // Getters and Setters\n  public String getColor() {\n    return color;\n  }\n \n  public void setColor(String color) {\n    this.color = color;\n  }\n \n  public int getMaxSpeed() {\n    return maxSpeed;\n  }\n \n  public void setMaxSpeed(int maxSpeed) {\n    this.maxSpeed = maxSpeed;\n  }\n \n  public int getCurrentSpeed() {\n    return currentSpeed;\n  }\n \n  public void setCurrentSpeed(int currentSpeed) {\n    if (currentSpeed > maxSpeed || currentSpeed < 0) {\n      this.currentSpeed = 0;\n    } else {\n      this.currentSpeed = currentSpeed;\n    }\n  }\n}", "category": "Python"}, {"instruction": "How are objects instantiated in Python?", "input": "", "output": "Objects are instantiated in Python by using the keyword \"class\". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized.", "category": "Python"}, {"instruction": "Sort an array using bubble sort technique.", "input": "arr = [4, 3, 6, 7, 5, 1, 8]", "output": "[1, 3, 4, 5, 6, 7, 8]", "category": "Python"}, {"instruction": "Find all the possible permutations in a string without using any built-in functions.", "input": "string = \"ABC\"", "output": "def permute(string):\n  \n  # base case\n  if len(string) == 1:\n    return [string]\n  \n  results = set()\n  # iterate through each character in the string\n  for i in range(len(string)):\n    # select the ith character\n    char = string[i]\n    # generate all the permutations from the remaining characters\n    remaining_characters = string[:i] + string[i+1:]\n    permutations = permute(remaining_characters)\n    # append the ith character to the beginning of each permutation and add to the result set\n    for permutation in permutations:\n      results.add(char + permutation)\n  \n  return list(results)\n\nprint(permute(\"ABC\"))", "category": "Python"}, {"instruction": "List out all the sorting algorithms supported in Python.", "input": "", "output": "The sorting algorithms supported in Python include bubble sort, insertion sort, selection sort, merge sort, quick sort, and heap sort.", "category": "Python"}, {"instruction": "Search a list to find a string and return its index.", "input": "string_list = [\"apple\", \"banana\", \"orange\"]\nsearch_term = \"orange\"", "output": "def search_list(string_list, search_term):\n    \"\"\"\n    Search a list for a given string and return its index.\n\n    Parameters\n    ----------\n    string_list : list\n        The list to search\n    search_term : str\n        The string to search for\n\n    Returns\n    -------\n    index : int\n        The index of the string in the list,\n        returns -1 if the string is not found\n    \"\"\"\n    for i, s in enumerate(string_list):\n        if s == search_term:\n            return i\n\n    return -1\n\nstring_list = [\"apple\", \"banana\", \"orange\"] \nsearch_term = \"orange\"\nprint(search_list(string_list, search_term)) # Outputs 2", "category": "Python"}, {"instruction": "Compute the number of ways for a host to select 3 items from a list of 8 options.", "input": "", "output": "def compute_combination(n, r):\n    \"\"\"\n    Compute the number of ways for a host to select 'r' items from\n    a list of 'n' options.\n\n    Parameters\n    ----------\n    n : int\n        The total number of items\n    r : int\n        The number of items to select\n\n    Returns\n    -------\n    num : int\n        The number of ways to select\n    \"\"\"\n    num = 1\n\n    # Calculate combination\n    for i in range(r):\n        num *= n - i\n    num //= math.factorial(r)\n    \n    return num\n\nn = 8\nr =  3\nprint(compute_combination(n, r)) # Outputs 336", "category": "Python"}, {"instruction": "Sort a list of numbers so that the lowest number appears first.", "input": "n_list = [3, 9, 1, 4, 5]", "output": "def sort_list(n_list):\n    \"\"\"\n    Sort a given list of numbers in ascending order.\n\n    Parameters\n    ----------\n    n_list: list\n        The list of numbers to sort\n\n    Returns\n    -------\n    sorted_list : list\n        The sorted list\n    \"\"\"\n    sorted_list = sorted(n_list)\n    return sorted_list\n\nn_list = [3, 9, 1, 4, 5]\nprint(sort_list(n_list)) # Outputs [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Generate a random PIN of 8 characters.", "input": "", "output": "import random\n\ndef generate_pin():\n    \"\"\"\n    This function generates a random PIN of 8 characters.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    pin : str\n        The generated PIN\n    \"\"\"\n    characters= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    pin = \"\"\n\n    for _ in range(8):\n        pin += random.choice(characters)\n    \n    return pin\n\nprint(generate_pin()) # Outputs a random PIN of 8 characters", "category": "Python"}, {"instruction": "Write a function to convert an array of strings to an array of floats.", "input": "string_arr=['1.1', '2.3', '3.4']", "output": "def array_to_floats(string_arr):\n    # Create an array to store the float values\n    float_arr = []\n    # Iterate over the given array and convert to float\n    for s in string_arr:\n        float_arr.append(float(s))\n    # Return the new array\n    return float_arr\n\nstring_arr=['1.1', '2.3', '3.4']\nresult = array_to_floats(string_arr)\nprint(\"The array as floats is:\", result)", "category": "Python"}, {"instruction": "Write a function to generate an array of all possible permutations of N numbers.", "input": "", "output": "def generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations", "category": "Python"}, {"instruction": "Create a regex to identify valid IPV4 addresses.", "input": "", "output": "import re\n\ndef is_valid_ipv4(ip):\n    # pattern to match valid IP addresses\n    pattern = r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Given a string, write code to remove all the consecutive characters and output the new string.", "input": "string='AAABBBCCC'", "output": "def remove_consecutive_chars(string):\n  # create an empty string\n  new_string = ''\n\n  # iterate over the characters of the given string\n  for i in range(len(string)-1):\n    if string[i] != string[i+1]:\n      new_string += string[i]\n  \n  # add the last character of the string to the output\n  new_string += string[-1]\n  # return the new string\n  return new_string\n\nstring='AAABBBCCC'\nresult = remove_consecutive_chars(string)\nprint(\"The new string is:\", result)", "category": "Python"}, {"instruction": "Complete the following function to return the indices at which the binary representation of a given number has no consecutive 1s.", "input": "num = 12", "output": "def find_indices(num):\n    # convert given number to binary\n    binary_num = bin(num)[2:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n   \n    # return the required indices\n    return indices_list\n\nnum = 12\nresult = find_indices(num)\nprint(\"The indices with no consecutive 1s are:\", result)", "category": "Python"}, {"instruction": "Implement a function to solve the following equation: x2+y2=z2", "input": "", "output": "def solve_eq(x, y, z):\n  '''This function will solve the equation: x^2 + y^2 = z^2.'''\n\n  # Use the Pythagorean Theorem\n  if x**2 + y**2 == z**2:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Create a program that takes in two lists and prints out a new list with the elements from the first list followed by the elements from the second list.", "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]", "output": "# define a function to combine two lists into one\ndef combine_lists(list_1, list_2):\n    # create a new list\n    combined_list = []\n    \n    # append the elements from list 1\n    for ele in list_1:\n        combined_list.append(ele)\n\n    # append the elements from list 2    \n    for ele in list_2:\n        combined_list.append(ele)\n    \n    # return the combined list\n    return combined_list\n\n# input two lists\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n# output the combined list\ncombined_list = combine_lists(list_1, list_2)\nprint(\"The combined list is \" + str(combined_list))", "category": "Python"}, {"instruction": "Create a Python class called Employee which contains the employee id and the name.", "input": "", "output": "# define the Employee class\nclass Employee:\n    # construct a new Employee instance\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n# create a new Employee object\nemployee1 = Employee(1, \"John Doe\")\n\n# access the employee id and name\nprint(employee1.id)\nprint(employee1.name)", "category": "Python"}, {"instruction": "Take a string and reverse it.", "input": "string = 'Programming'", "output": "gnimmargorP", "category": "Python"}, {"instruction": "Take user input from the console and output 'Hello [name]'.", "input": "name = 'John'", "output": "Hello John.", "category": "Python"}, {"instruction": "Take an array and remove all elements except the unique elements.", "input": "arr = [2, 3, 6, 8, 3, 8, 6, 2]", "output": "[2, 3, 6, 8]", "category": "Python"}, {"instruction": "Parse a given string and extract the name from it.", "input": "string = \"Hi! My name is John Smith\"", "output": "def extract_name(string):\n    \"\"\"\n    Parse a given string and extract the name from it.\n\n    Parameters\n    ----------\n    string : str\n        The string to parse\n\n    Returns\n    -------\n    name : str\n        The extracted name\n    \"\"\"\n    # Split the string by words\n    words = string.split()\n    \n    # The last word is the name\n    name = words[-1]\n\n    return name\n\nstring = \"Hi! My name is John Smith\"\nprint(extract_name(string)) # Outputs \"John Smith\"", "category": "Python"}, {"instruction": "Create a histogram chart of the given data.", "input": "dataset = [2, 3, 5, 6, 7, 4]", "output": "import matplotlib.pyplot as plt\n\ndef create_histogram(dataset):\n    \"\"\"\n    Create a histogram chart of the given data.\n\n    Parameters\n    ----------\n    dataset : list\n        The data to plot on the chart\n\n    Returns\n    -------\n    None\n    \"\"\"\n    plt.hist(dataset, bins=7, facecolor=\"blue\", alpha=0.5)\n    plt.title(\"Histogram\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\ndataset = [2, 3, 5, 6, 7, 4]\ncreate_histogram(dataset) # Outputs a histogram chart of the given data", "category": "Python"}, {"instruction": "Preprocess a given document, removing stopwords and punctuations.", "input": "document = \"Hello! This is a test document for preprocessing\"", "output": "from nltk.corpus import stopwords\nimport string\n\ndef preprocess_document(document):\n    \"\"\"\n    Preprocess a given document, removing stopwords and punctuations.\n\n    Parameters\n    ----------\n    document : str\n        The document to preprocess\n\n    Returns\n    -------\n    clean_word_list : list\n        The preprocessed word list\n    \"\"\"\n    # Split the document into word list\n    word_list = document.split()\n    stopwords_list = stopwords.words('english')\n\n    # Remove punctuation\n    word_list = [word.strip(string.punctuation) for word in word_list]\n    \n    # Remove words with 2 or fewer characters\n    word_list = [word for word in word_list if len(word) > 2]\n\n    # Remove stopwords\n    clean_word_list = [word for word in word_list if word not in stopwords_list]\n\n    return clean_word_list\n\ndocument = \"Hello! This is a test document for preprocessing\"\nprint(preprocess_document(document)) # Outputs ['Hello', 'test', 'document', 'preprocessing']", "category": "Python"}, {"instruction": "Design an algorithm to eliminate duplicate elements in a given array.", "input": "Array: [1, 5, 1, -2, 5]", "output": "def remove_duplicates(arr):\n    result = [] \n    for el in arr:\n        if el not in result:\n            result.append(el)\n    return result", "category": "Python"}, {"instruction": "Define the term variable.", "input": "", "output": "A variable is a named container for storing data values. Variables are usually used in programming to store and access data in a program. It is important to use a descriptive name for the variable, as it can be used to access the data within it.", "category": "Python"}, {"instruction": "Determine the returned value of the following function.", "input": "def my_fun(x):\n    if x > 5:\n         return x * 2\n    else:\n        return x * 3", "output": "If x = 6, the returned value is 12.", "category": "Python"}, {"instruction": "Remove the element with the value \u201cCarrots\u201d from the given list.", "input": "sample_list = [\"Apples\", \"Oranges\", \"Pears\", \"Carrots\"]", "output": "sample_list = [\"Apples\", \"Oranges\", \"Pears\"]", "category": "Python"}, {"instruction": "Explain the advantages of using the following linear regression algorithm in Python.", "input": "Linear Regression using Stochastic Gradient Descent", "output": "The advantages of using the Linear Regression algorithm with Stochastic Gradient Descent (SGD) in Python include:\n\n1. It is relatively fast to train, as it only has to go through each sample in the dataset once in order to generate the coefficients.\n2. It requires small datasets and low complexity models, so it can be utilized on limited hardware systems.\n3. It is well suited for problems where the number of features is quite high, and the relationships between features is non-linear.\n4. It can exploit sparse data, which can make it perfect for certain types of data, such as text.", "category": "Python"}, {"instruction": "Fill in the blanks in the following code to make it an executable program.", "input": "def\t main():\n    temp = _____\n    if _____:\n        print('It is a hot day')\n    elif _____:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "output": "def main():\n    temp = 22\n    if temp > 30:\n        print('It is a hot day')\n    elif temp < 10:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "category": "Python"}, {"instruction": "Edit the code such that it prints the same output.", "input": "str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)", "output": "str1 = \"python\"\nstr2 = \" programming\"\nprint(str1 + str2)", "category": "Python"}, {"instruction": "What is this coding question asking you to do?", "input": "Write a Python function to check whether a number is prime or not", "output": "This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not.", "category": "Python"}, {"instruction": "Create a function that removes duplicates from an array and returns an array of the unique values.", "input": "array = [5,5,5,10,10,15]", "output": "def remove_duplicates(array):\n \n  new_array = []\n  for number in array:\n    if number not in new_array:\n      new_array.append(number)\n \n  return new_array\n\nprint(remove_duplicates([5,5,5,10,10,15]))", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and multiplies them together.", "input": "arr = [3, 5, 4]", "output": "def multiplyArray(arr):\n    result = 1\n    for x in arr:\n        result = result * x\n    return result", "category": "Python"}, {"instruction": "You are given a list of numbers. Find the maximum sum of any subsequence in the list.", "input": "", "output": "def max_sum_subsequence(nums):\n    max_sum = 0\n    curr_sum = 0\n \n    for num in nums:\n        curr_sum = max(num + curr_sum, 0)\n        max_sum = max(curr_sum, max_sum)\n \n    return max_sum", "category": "Python"}, {"instruction": "Given a string of text, find the total number of characters in the string.", "input": "text = \"You have to do it\"", "output": "def char_count(text):\n    count = 0\n    for char in text:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string of words. Count how many words the string contains.", "input": "words = \"This is a testing string\"", "output": "def word_count(words):\n    count = 0\n    for word in words.split():\n        count+=1\n    return count", "category": "Python"}, {"instruction": "Given an array of integers, remove all the duplicated elements from the array and return the distinct array.", "input": "nums=[3, 4, 5, 5, 6, 6, 6, 7]", "output": "def uniq_array(nums):\n    distinct_arr = []\n    for num in nums:\n        if num not in distinct_arr:\n            distinct_arr.append(num)\n    return distinct_arr", "category": "Python"}, {"instruction": "Given a number N find the square root of N.", "input": "", "output": "def sqrt(N): \n    guess = N/2 \n    \n    while abs(guess*guess - N) >= 0.001: \n        guess = 0.5 * (guess + N/guess) \n          \n    return guess", "category": "Python"}, {"instruction": "You are given a string of tasks. Split the string into a list of tasks.", "input": "Tasks = \"cook breakfast;run errand;pick up kids; feed the dog\"", "output": "tasks = [\"cook breakfast\", \"run errand\", \"pick up kids\", \"feed the dog\"]", "category": "Python"}, {"instruction": "Replace each occurrence of the given character in a string with a space.", "input": "String: abcde\nCharacter: c", "output": "String: ab de", "category": "Python"}, {"instruction": "You are given a string. Count the total number of lowercase letters in the string.", "input": "", "output": "def count_lowercase(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a method to solve a linear equation ax + b = 0.", "input": "a = 2, b = 4", "output": "def solve_linear_equation(a, b):\n  return -b/a", "category": "Python"}, {"instruction": "Parse a given string to create a tree data structure.", "input": "expr = \"a + b * c\"", "output": "def parse_string(expr):\n  root = Node(expr[0])\n  current_node = root\n  \n  for i in range(1, len(expr), 2):\n    node = Node(expr[i])\n    current_node.right = node\n    node.left = current_node\n    current_node = node\n  \n  return root\n\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.left = None\n    self.right = None", "category": "Python"}, {"instruction": "Create a Python program to sort of given list of strings in alphabetical order.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\", \"dog\"]", "output": "def sort_words(words):\n    return sorted(words)\n\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)", "category": "Python"}, {"instruction": "Convert the following for loop to a recursive solution.", "input": "for i in range(0, 10):\n    print('i: ', i)", "output": "def loopRecursion(num): \n  if(num<10): \n    print(\"i:\",num) \n    loopRecursion(num+1) \n\nloopRecursion(0)", "category": "Python"}, {"instruction": "Create a cURL command that retrieves the contents of a webpage.", "input": "", "output": "curl -X GET http://example.com", "category": "Python"}, {"instruction": "Design a RESTful API that returns customer information.", "input": "", "output": "GET /customers\nReturns a list of customer objects\n\nGET /customers/{id}\nReturns customer info with the customer id\n\nPOST /customers\nAdd a new customer\n\nPUT /customers/{id}\nUpdate existing customer info with given customer id\n\nDELETE /customers/{id}\nDelete customer with given customer id", "category": "Python"}, {"instruction": "Create an object of type Car in Java.", "input": "", "output": "public class Car {\n    private String make;\n    private String model;\n    private String color;\n\n    //getters and setters\n\n    public Car(String make, String model, String color) {\n        this.make = make;\n        this.model = model;\n        this.color = color;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public String getColor() {\n        return color;\n    }\n\n    public void setColor(String color) {\n        this.color = color;\n    }\n}", "category": "Python"}, {"instruction": "Generate a hash of a given string using the SHA-256 algorithm in Python.", "input": "string = \"Hello World\"", "output": "import hashlib\n\nstring = \"Hello World\"\nresult = hashlib.sha256(string.encode()).hexdigest()\nprint(result)  # output: \"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"", "category": "Python"}, {"instruction": "Implement a search algorithm in Java.", "input": "", "output": "public class SearchAlgorithm {\n  public int search(int[] array, int target) {\n    int left = 0;\n    int right = array.length - 1;\n    \n    while (left <= right) {\n      int mid = (left + right) / 2;\n      \n      if (target == array[mid]) {\n        return mid;\n      }\n      if (target < array[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return -1;\n  }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to retrieve the name of the manager and the department they manage.", "input": "", "output": "SELECT \n  manager.name AS manager_name, \n  department.name AS department_name \nFROM manager\n  JOIN department\n  ON manager.department_id = department.id;", "category": "Python"}, {"instruction": "Build an online form for collecting customer feedback using HTML elements.", "input": "", "output": "<form action=\"\">\n <label for=\"name\">Name</label><br />\n <input type=\"text\" id=\"name\" name=\"name\" /><br /> \n \n <label for=\"email\">E-Mail</label><br />\n <input type=\"email\" id=\"email\" name=\"email\" /><br />\n \n <label for=\"feedback\">Feedback</label><br />\n <textarea id=\"feedback\" name=\"feedback\"></textarea> <br />\n \n <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Design a database schema for a table which stores customer information?", "input": "", "output": "CREATE TABLE customers ( \n id INT NOT NULL UNIQUE AUTO_INCREMENT,\n first_name VARCHAR(50) NOT NULL,\n last_name VARCHAR(50) NOT NULL,\n email VARCHAR(50) NOT NULL,\n phone_number VARCHAR(20) NOT NULL,\n address VARCHAR(200) NOT NULL,\n PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Convert the following JSON array to an XML document.", "input": "[\n    {\n        \"name\":\"Alice\",\n        \"age\":25\n    },\n    {\n        \"name\":\"Bob\",\n        \"age\":30\n    }\n]", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<data>\n    <person>\n        <name>Alice</name>\n        <age>25</age>\n    </person>\n    <person>\n        <name>Bob</name>\n        <age>30</age>\n    </person>\n</data>", "category": "Python"}, {"instruction": "Create a query in MongoDB to search a record by its ID.", "input": "", "output": "db.collection.find({\"_id\": ObjectId(\"<id>\")});", "category": "Python"}, {"instruction": "Create a Node.js program for converting a temperature from Celsius to Fahrenheit.", "input": "", "output": "const celsiusToFahrenheit = celsius => {\n  let fahrenheit = (celsius * 9/5) + 32;\n  return fahrenheit;\n};\n\nconst tempCelsius = 20;\nconst tempFahrenheit = celsiusToFahrenheit(tempCelsius);\n\nconsole.log(`${tempCelsius}\u00b0C is equal to ${tempFahrenheit}\u00b0F.`);", "category": "Python"}, {"instruction": "How would you collect data from websites using Scrapy?", "input": "", "output": "Scrapy is a Python framework used for web scraping. It can be used to extract data from websites using a variety of techniques. The first step is to create a Scrapy project and define the items you want to scrape. After that, create a Spider class which is responsible for crawling and extracting the data. Finally, you can use a range of methods like XPath and CSS selectors to collect the data.", "category": "Python"}, {"instruction": "Create a MySQL query to fetch data from two tables using an inner join.", "input": "TableOne:\nID, Name, Age\nTableTwo:\nID, School", "output": "SELECT TableOne.ID, TableOne.Name, TableOne.Age, TableTwo.School\nFROM TableOne\nINNER JOIN TableTwo\nON TableOne.ID = TableTwo.ID;", "category": "Python"}, {"instruction": "Parse the below XML into a JSON object.", "input": "<Root>\n <item>A</item>\n <item>B</item>\n <item>C</item>\n</Root>", "output": "{\n \"Root\": {\n  \"item\": [\"A\",\"B\",\"C\"]\n  } \n}", "category": "Python"}, {"instruction": "Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.", "input": "[1, 2, 3, 4], [3, 2, 1, 4]", "output": "def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n\n    return -1", "category": "Python"}, {"instruction": "Write a code that computes the given equation for x.", "input": "x2 + 3x - 7 = 0", "output": "def compute_equation(x):\n  return x**2 + 3*x - 7", "category": "Python"}, {"instruction": "Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence", "input": "", "output": "def print_fibonacci(n):\n  a = 0\n  b = 1\n  print('Fibonacci sequence:')\n  while a < n:\n    print(a, end=' ')\n    tmp_var = a\n    a = b\n    b = tmp_var + b\n\nnum = int(input(\"Enter positive number: \"))\nprint_fibonacci(num)", "category": "Python"}, {"instruction": "Create a RUST program that prints out the highest number from an array of integers.", "input": "[6, 1, 4, 22, 7, 9]", "output": "fn main() {\n    let arr = [6, 1, 4, 22, 7, 9];\n    let max_num: i32 = arr[0];\n\n    for x in 0..arr.len() {\n        if arr[x] > max_num {\n            max_num = arr[x];\n        }\n    }\n\n    println!(\"Max number: {}\",max_num);\n}", "category": "Python"}, {"instruction": "Write an HTML code snippet to make the text bold.", "input": "", "output": "<strong>Bold Text</strong>", "category": "Python"}, {"instruction": "Write a JavaScript program for finding the sum of two numbers.", "input": "numbers: 10, 15", "output": "var first = 10; \nvar second = 15; \n\n// finding sum of two numbers \nvar sum = first + second; \n  \n// printing the result \nconsole.log(\"Sum of two numbers is \" + sum);", "category": "Python"}, {"instruction": "Design a die roll program in Java.", "input": "", "output": "import java.util.Random; \n  \npublic class RollDie \n{ \n    public static void main(String[] args) \n    { \n        // creating instance of Random class \n        Random rand = new Random(); \n  \n        // Generate random integers in range 0 to 6 \n        int rand_int = rand.nextInt(6); \n  \n        // Print random integers \n        System.out.println(\"The die shows : \"+ (rand_int + 1)); \n    } \n}", "category": "Python"}, {"instruction": "Beatify the following code by formatting it properly with adequate indentation and formatting.", "input": "def func1(): print(\"this is function 1\") print(\"this is function 2\")", "output": "def func1():\n    print(\"this is function 1\") \n    print(\"this is function 2\")", "category": "Python"}, {"instruction": "Design a program that automatically refactors a python code to improve readability and reduce complexity.", "input": "def myfunc():\nx = 1\ny = 5\nreturn x + y", "output": "def myfunc():\n    x = 1\n    y = 5\n    return x + y", "category": "Python"}, {"instruction": "What is the index of the item which is given below?", "input": "my_list = [1, 2, 3, 4, 5]\nitem_to_find = 3", "output": "index_of_item = my_list.index(item_to_find)\n\n# Output\n2", "category": "Python"}, {"instruction": "What number is missing in the following sequence?", "input": "2, 4, 8, 16, __", "output": "32", "category": "Python"}, {"instruction": "How would you display the below list in descending order?", "input": "[2, 5, 8, 9, 1]", "output": "[9, 8, 5, 2, 1]", "category": "Python"}, {"instruction": "Validate the email address using a regular expression.", "input": "email = \"example@gmail.com\"", "output": "import re\n\n# Validate the email address using the regex\nemail_pattern = re.compile(r'\\S+@\\S+\\.\\S+')\nemail_valid = re.match(email_pattern, email)\n\nif email_valid:\n    print(\"Valid Email Address\")\nelse:\n    print(\"Invalid Email Address\")\n\n# Output\nValid Email Address", "category": "Python"}, {"instruction": "Create a function that takes in an array and displays all of the elements in the array in reverse order.", "input": "list_elements = [15,19,20]", "output": "def reverse_list_elements(list_elements):\n    list_elements.reverse()\n    for element in list_elements:\n        print(element)", "category": "Python"}, {"instruction": "Debug the following code by finding the syntax error.", "input": "def calculate_value(nums):\n    result = 0\n    for num in nums\n        result += num\n    return result", "output": "def calculate_value(nums):\n    result = 0\n    for num in nums: # missing colon\n        result += num\n    return result", "category": "Python"}, {"instruction": "Output the maximum element of a list", "input": "list = [1, 23, 12, 38, 56, 9]", "output": "max_element = 56", "category": "Python"}, {"instruction": "Derive the formula for calculating the circumference of a circle.", "input": "", "output": "The formula for calculating the circumference of a circle is C = 2*\u03c0*r, where r is the radius of the circle.", "category": "Python"}, {"instruction": "Create a shell script to list out the folders and its size in the current directory", "input": "", "output": "#!/bin/bash\n\necho \"Folders and Sizes: \"\nfor item in `ls -l`\ndo\n   if [ -d $item ]\n   then\n        dirSize=`du -s $item | awk '{print $1}'`\n        echo \"$item : $dirSize\"\nfi\ndone", "category": "Python"}, {"instruction": "Create a program in C# to find the nth Fibonacci number in the sequence.", "input": "", "output": "public static int FindNthFibonacci(int n)\n{\n    int firstNumber = 0, secondNumber = 1, result = 0;\n \n    if (n == 0 || n == 1)\n        return n;\n    else\n    {\n        for (int i = 2; i <= n; i++)\n        {\n            result = firstNumber + secondNumber;\n            firstNumber = secondNumber;\n            secondNumber = result;\n        }\n        return result;\n    }\n}", "category": "Python"}, {"instruction": "Write an algorithm to check if a number is even or not without using modulus (%) operator", "input": "", "output": "def is_even(num):\n\tif num & 1 == 0:\n\t\treturn True\n\telse:\n\t\treturn False", "category": "Python"}, {"instruction": "Output the items in a list with the length less than or equal to the given number.", "input": "list_items = [1, 2, 3, 4, 5]\ngiven_number = 3", "output": "output_items = [item for item in list_items if len(str(item)) <= given_number]\nprint(output_items)\n\n# Output\n[1, 2, 3]", "category": "Python"}, {"instruction": "Create a HTML page that contains an unordered list with given items in a given order.", "input": "list items: \" Apple  \", \" Orange  \", \" Pineapple\"", "output": "<html>\n    <head>\n        <title>Fruits List</title>\n    </head>\n    <body>\n        <ul>\n            <li>Apple</li>\n            <li>Orange</li>\n            <li>Pineapple</li>\n        </ul>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Multiply two matrices and return the resulting matrix.", "input": "Matrix A = [[1, 2], [3, 4]]\nMatrix B = [[5, 6], [7, 8]]", "output": "result = [[19, 22], [43, 50]]", "category": "Python"}, {"instruction": "Find the logarithm (base 10) of a number.", "input": "1000", "output": "3.0", "category": "Python"}, {"instruction": "Create a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another.", "input": "", "output": "def is_anagram(string1, string2):\n\n    # remove whitespaces\n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n\n    # check length\n    if len(string1) != len(string2):\n        return False\n\n    # create counters\n    counter = {}\n    for letter in string1:\n        if letter in counter :\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n            \n    for letter in string2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            return False\n        \n    # Check all values are 0\n    for key in counter:\n        if counter[key] != 0:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Find the number of times the substring \u201cab\u201d appears in the given string.", "input": "text = \"abraacadabrabracabracabracabra\"", "output": "def count_substring(string, sub_string): \n    count = 0\n  \n    #Loop over the length of string \n    for i in range(0, len(string)): \n        # If a part of string matches with sub_string \n        #increment count  \n        if (string[i:i+ len(sub_string)] ==sub_string): \n            count += 1\n  \n    return count \n\ncount = count_substring(text, 'ab') \nprint(\"Number of substring occurrences: \", count)", "category": "Python"}, {"instruction": "Design a function that takes a number, n, and returns the n\u2019th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers.", "input": "", "output": "def Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Create a Swift program to print out the following: \u201cHello, World!\u201d", "input": "", "output": "print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Create an assembly language program to sum 30 odd integers.", "input": "", "output": ".model small\n.data\n        number dw 2,4,6,8,10,12,14,16,18,20\n\t\t        ,22,24,26,28,30,32,34,36,38,40\n\t\t\t\t        ,42,44,46,48,50,52,54,56,58,60\nsum dw 0\n.code\nmain proc\n                mov ax,@data\n                mov ds,ax\n \n     lea si,number\n\t\t mov cx,30\n\t loop1: mov ax,[si]\n\t mov bx,2\n\t mul bx\n\t add ax,sum\n\t mov sum,ax\n\t add si,2\n\t loop loop1\n\t \n\t mov ax,sum\n\t mov ah,09h\n\t int 21h\n \n\t mov ax,4c00h\n\t int 21h\nmain endp\nend main", "category": "Python"}, {"instruction": "Generate a Ruby script to find the GCD of two given numbers.", "input": "", "output": "def gcd(a, b)\n  if b == 0\n    return a\n  else\n    return gcd(b, a % b) \n  end\nend\n\na = 10\nb = 20\nputs gcd(a,b)", "category": "Python"}, {"instruction": "Using MATLAB, calculate the roots of the equation x*x + 5*x - 6.", "input": "", "output": "syms x;\nsolve(x*x + 5*x - 6);", "category": "Python"}, {"instruction": "Develop a PHP script that creates and populates a database table called \u201ccustomers\u201d.", "input": "", "output": "<?php\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$database = \"mydb\";\n\n$connection = new mysqli($host, $username, $password, $database);\n\nif ($connection->connect_error) {\n    die(\"Connection failed: \" . $connection->connect_error);\n}\n\n$query = \"CREATE TABLE customers ( \n  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  firstname VARCHAR(30) NOT NULL,\n  lastname VARCHAR(30) NOT NULL,\n  address VARCHAR(100),\n  city VARCHAR(50),\n  postalcode VARCHAR(10)\n)\";\n\nif ($connection->query($query) === TRUE) {\n    echo \"Table customers created successfully\";\n} else {\n    echo \"Error creating table: \" . $connection->error;\n}\n\n$connection->close();\n?>", "category": "Python"}, {"instruction": "Construct a Python program to print the numbers from 1 to 10 on a single line.", "input": "", "output": "for i in range(1,11):\n  print(i, end=\" \")", "category": "Python"}, {"instruction": "Using a MySQL query, select the top 5 dog breeds based on the number of owners.", "input": "", "output": "SELECT breed, COUNT(*) AS owners \nFROM dogs \nGROUP BY breed\nORDER BY owners DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Build a C++ program that calculates using the below formula", "input": "", "output": "#include <iostream>\n\nint main() {\n    int a=5, b=7;\n    double result = a*a+b*b;\n    std::cout << result << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Use the Java language to print out \u2018Hello World\u2019.", "input": "", "output": "public class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }    \n}", "category": "Python"}, {"instruction": "Identify the endpoint of a given API request.", "input": "Request: GET https://www.example.com/1", "output": "The endpoint of this API request is https://www.example.com/1.", "category": "Python"}, {"instruction": "Find the variable type for the following statement:", "input": "name = \"John\"", "output": "The variable type for the above statement is string.", "category": "Python"}, {"instruction": "Categorize the following sentence into parts-of-speech?", "input": "The cat jumped quickly onto the table", "output": "Determiner (The), Noun (cat), Verb (jumped), Adverb (quickly), Preposition (onto), Determiner (the), Noun (table).", "category": "Python"}, {"instruction": "Generate the HTML output for a page that has a title of \"Welcome\" and a body with a single header of \"Hello World!\".", "input": "", "output": "<html>\n    <head>\n        <title>Welcome</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum subarray of an array of numbers.", "input": "", "output": "def max_subarray(arr): \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far", "category": "Python"}, {"instruction": "Solve the following problem", "input": "Given two strings s and t, find the minimum window in s which will contain all the characters in t.", "output": "def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength", "category": "Python"}, {"instruction": "Create a sorting algorithm", "input": "", "output": "def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Write a function to generate a random permutation of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n  \ndef random_permutation(input_list): \n    n = len(input_list) \n    for i in range( n - 1 ):\n        j = random.randint(i, n-1)\n        input_list[i], input_list[j] = input_list[j], input_list[i] \n    return input_list", "category": "Python"}, {"instruction": "Use conditionals and a for loop to return the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Explain the concept of assembly language.", "input": "", "output": "Assembly language is a low-level programming language that provides a symbolic representation of the machine instructions for a specific processor or family of processors. It is typically used when writing code for embedded systems, or when the target processor and/or instruction set of the program is not well-known. Assembly language is generally used when more control over the memory management and data layout of a program is desired. It also allows for generating more efficient code since the code can be tailored for the target processor and instruction set.", "category": "Python"}, {"instruction": "Rewrite the following Node.js code using promises", "input": "fs.readFile('data.json', 'utf8', (err, data)) => {\nif (err) throw err;\n\n// do something with data\n}", "output": "const readFileAsync =  function (file) {\n return new Promise((resolve, reject) => {\n  fs.readFile(file, 'utf8', (err, data) => {\n   if (err) reject(err);\n   else resolve(data);\n  });\n });\n}\n\nconst dataPromise = readFileAsync('data.json');\n\ndataPromise.then(data => {\n    // do something with data\n})\n.catch(err) => {\n    throw err;\n};", "category": "Python"}, {"instruction": "Find the output of the following .NET Core code snippet.", "input": "int[] numbers = {2, 3, 5, 7};\n\nvar result = numbers.Where(x => x % 2 == 0).Sum();", "output": "The output of the code snippet is 10, as 2 and 6 (the two even numbers in the array) are added together to give 10.", "category": "Python"}, {"instruction": "Generate a unique URL for an online store.", "input": "", "output": "https://online-store.example.com", "category": "Python"}, {"instruction": "Create a CSS style sheet to apply the following styles to a div element.", "input": "", "output": "div {\n    width: 50%;\n    padding: 30px;\n    font-size: 20px;\n    background-color: #EEE;\n    border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Store a list of elements in a dictionary, making each element the key and itself the value.", "input": "list = [4, 8, 12, 16]", "output": "dictionary = {4:4, 8:8, 12:12, 16:16}", "category": "Python"}, {"instruction": "Design a Node.js class to create a RESTful API.", "input": "", "output": "const express = require('express');\n\n/*\nClass for generating a RESTful API with Node.js\n*/\nclass Api {\n    constructor() {\n        this.app = express();\n    }\n\n    //Method for creating a route\n    route(url, handler) {\n        this.app.get(url, handler);\n    }\n\n    //Method for running the app\n    start(port) {\n        this.app.listen(port);\n        console.log(`API is running on port ${port}`);\n    }\n}", "category": "Python"}, {"instruction": "Design a class in Java to represent a bank account that has a balance, a name, and an account number.", "input": "", "output": "public class BankAccount {\n    private String name;\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String name, String accountNumber, double balance) {\n        this.name = name;\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public String getName() {\n        return name;\n    }\n}", "category": "Python"}, {"instruction": "Create a UI component in ReactJs to render a list of items from an array of objects.", "input": "const items = [\n    { name: \"Apple\", price: 12.99 },\n    { name: \"Orange\", price: 5.99 },\n    { name: \"Banana\", price: 3.99 },\n];", "output": "const ItemList = ({ items }) => (\n  <ul>\n    {items.map(item => (\n      <li>{`${item.name}: ${item.price}`}</li>\n    ))}\n  </ul>\n);", "category": "Python"}, {"instruction": "Design a SQL query to retrieve the names of movies released in the last 10 years.", "input": "", "output": "SELECT Name FROM Movies WHERE Release_Year > YEAR(CURDATE()) - 10;", "category": "Python"}, {"instruction": "How would you print a big \"Hello World\" on the console output?", "input": "", "output": "print('", "category": "Python"}, {"instruction": "Construct an algorithm to fulfill the following purpose", "input": "Find the two numbers that add up to a given number N.", "output": "def twoSum(N, arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == N:\n                return (arr[i], arr[j])", "category": "Python"}, {"instruction": "Create an sql query to find the following", "input": "Find the customer who has placed the highest number of orders.", "output": "SELECT customer_name, COUNT(order_id) \nFROM orders \nGROUP BY customer_name \nORDER BY COUNT(order_id) DESC \nLIMIT 1;", "category": "Python"}, {"instruction": "Generate an appropriate CSS code to fulfill the following purpose", "input": "Define a 500px x 500px div with rounded corners, a white background, a 0.2px red border, and text aligned to the center.", "output": "div {\n\twidth:500px;\n\theight:500px;\n\tbackground-color:white;\n\tborder-radius: 10px;\n\tborder: 0.2px solid red;\n\ttext-align:center;\n}", "category": "Python"}, {"instruction": "Generate a permutation of a given list of numbers.", "input": "", "output": "import itertools \n  \ndef perms(lst): \n  perm = itertools.permutations(lst) \n  for i in list(perm): \n    print(i)", "category": "Python"}, {"instruction": "Generate a new voice sample using a given text and speech synthesis model.", "input": "text = \"Hello, world!\"", "output": "<nooutput>\nSince this task requires speech synthesis software and a model, it cannot be completed by the GPT model.", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to find the greatest of three given numbers.", "input": "", "output": "let a = 10;\nlet b = 20;\nlet c = 23;\n\n// greatest of three numbers\nlet greatest = 0;\n\nif(a >= b && a >= c) {\n    greatest = a;\n} else if(b >= a && b >= c) {\n    greatest = b;\n} else {\n    greatest = c;\n}\n\nconsole.log('The greatest number among the given numbers is ' + greatest);", "category": "Python"}, {"instruction": "Develop a function in python to check if a given word can be formed with the given set of letters.", "input": "Set of letters: 'abeos'\nWord: 'seabed'", "output": "def can_form_word(set_letters, word):\n    flag = True\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            break\n    return flag", "category": "Python"}, {"instruction": "Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.", "input": "string = \"some_string\", max_len = 10", "output": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)", "category": "Python"}, {"instruction": "What's the average value of the following list of numbers?\n\n[2, 3, 6, 4]", "input": "", "output": "The average value of [2, 3, 6, 4] is 3.75. This can be calculated by summing up all of the numbers, i.e. 2 + 3 + 6 + 4 = 15, and then dividing by the number of elements in the list, i.e. 4. Therefore, the average value is 15 / 4 = 3.75.", "category": "Python"}, {"instruction": "How many times will the following loop be executed?\n\nfor i in range(5):\n    print('Hello')", "input": "", "output": "The loop will be executed 5 times. The range function will generate numbers from 0 to 4 (inclusive). Therefore, the loop will be executed 5 times with 'Hello' being printed each time.", "category": "Python"}, {"instruction": "Convert the following SQL query to its equivalent Python expression.\n\nSELECT name FROM students WHERE age > 18", "input": "", "output": "[student['name'] for student in students if student['age'] > 18]", "category": "Python"}, {"instruction": "Determine the output of the following code.\n\nfor i in range(2, 8):\n    print(i * i)", "input": "", "output": "4\n9\n16\n25\n36\n49", "category": "Python"}, {"instruction": "Implement a function which takes an array and returns the maximum number.", "input": "[2, 4, 8, 6]", "output": "def max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > n:\n            n = arr[i]\n    return n\n\nmax_num([2, 4, 8, 6]) # Output: 8", "category": "Python"}, {"instruction": "Classify the following statement as true or false.\n\nThe square root of 4 is 2.", "input": "", "output": "True. The square root of 4 is 2.", "category": "Python"}, {"instruction": "For a given network layer, compute the total number of weights.", "input": "Number of input neurons: 4, Number of output neurons: 3", "output": "The total number of weights in the network layer is 4 * 3 = 12.", "category": "Python"}, {"instruction": "Train a linear regression model on a dataset containing m columns and n rows.", "input": "", "output": "model = LinearRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Edit the following piece of code to form a valid sentence.", "input": "This poet is one of America's most loved poets.", "output": "This poet is one of America's most beloved poets.", "category": "Python"}, {"instruction": "Devlop a SQL query to update the address for a user with id 10.", "input": "user_id = 10\nnew_address = '321 Market Street'", "output": "UPDATE customers SET address = '321 Market Street' WHERE user_id = 10;", "category": "Python"}, {"instruction": "Generate an SQL statement to add a row in the customers table where the columns are name, address, and city.", "input": "name = 'John';\naddress = '123 Main Street';\ncity = 'Winter Park';", "output": "INSERT INTO customers (name, address, city) VALUES ('John', '123 Main Street', 'Winter Park');", "category": "Python"}, {"instruction": "Write a query to find all entries in a table called customers with postal code 32412.", "input": "", "output": "SELECT * FROM customers WHERE postal_code = '32412';", "category": "Python"}, {"instruction": "Create HTML code for a two-column page layout with two paragraphs in each column.", "input": "", "output": "<style>\n    .container {\n        display: flex;\n        justify-content: space-around;\n    }\n\n    .text {\n        width: 45%;\n    }\n</style>\n\n<div class=\"container\">\n    <div class=\"text\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam vel tempus velit, vel auctor erat. Nam maximus varius urna quis ornare.</p>\n        <p>Vestibulum iaculis augue et dui maximus, eu auctor dui aliquet. Interdum et malesuada fames ac ante ipsum primis in faucibus.</p>\n    </div>\n    <div class=\"text\">\n        <p>Sed et metus pulvinar, ultricies sapien sed, dignissim leo. Integer ex est, consequat non mi eget, convallis egestas mauris.</p>\n        <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi cursus, magna at bibendum semper, erat lacus commodo nisi.</p>\n    </div>\n</div>", "category": "Python"}, {"instruction": "Come up with a python code to find the mean of a list of numbers.", "input": "nums = [78, 79, 79, 79, 79, 80]", "output": "total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nprint(mean)", "category": "Python"}, {"instruction": "Improve the following code snippet to make it more efficient and organized.", "input": "def printElements(list):\n  for element in list:\n    print(element)", "output": "def printElements(list):\n    \"\"\"Print all elements of a given list.\"\"\"\n    # Check if list is empty\n    if not list:\n        print(\"List is empty\")\n    # Loop through the list\n    else:\n        for element in list:\n            print(element)", "category": "Python"}, {"instruction": "Write an AJAX query to get the data from the given URL.", "input": "url = https://www.arecipe.com/data", "output": "$.ajax({\n    url: url,\n    type: 'GET',\n    success: function(data) {\n        console.log(data);\n    }\n});", "category": "Python"}, {"instruction": "Remove all duplicate words from the given sentence.", "input": "sentence = \"All all are are we we here here to to help help.\"", "output": "sentence = 'All are we here to help.'", "category": "Python"}, {"instruction": "Name the commonly used data structure for implementing stacks.", "input": "", "output": "The commonly used data structure for implementing stacks is a linked list.", "category": "Python"}, {"instruction": "Write a macro in C++ that prints half of the cube of a number", "input": "", "output": "#include <iostream> \n\n#define CUBE(x) ((x)*(x)*(x)) \n#define HALF_CUBE(x) ( (CUBE(x) )/2 ) \n  \nint main() \n { \n    int x = 3; \n    std::cout << HALF_CUBE(x) << std::endl; \n    return 0; \n }", "category": "Python"}, {"instruction": "What data type in JavaScript corresponds to a finite set of distinct values?", "input": "", "output": "In JavaScript the data type that corresponds to a finite set of distinct values is an Enum. An Enum is a collection of related values that can be represented as a set of named constants. These constants can be used to represent a single value in many different forms. Each Enum value can be represented numerically or by a String literal value.", "category": "Python"}, {"instruction": "Construct an SQL query to search the database for the user with the highest score.", "input": "Table Name:  users", "output": "SELECT * \nFROM users\nORDER BY score DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Create a Python function that prints all the values in a dictionary.", "input": "Dictionary:  { \"a\": 1, \"b\": 2, \"c\": 3 }", "output": "def printDictValues(dict):\n\u00a0\u00a0\u00a0\u00a0for key, value in dict.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(value)\n\nprintDictValues({\"a\": 1, \"b\": 2, \"c\": 3})", "category": "Python"}, {"instruction": "Construct an SQL query that averages the grades of students belonging to the Physics department.", "input": "Table Name: Grades", "output": "SELECT AVG(grade) \nFROM Grades \nWHERE department = 'Physics';", "category": "Python"}, {"instruction": "Construct an SQL query that returns records for users with a name starting with the letter 'S' or 'T'.", "input": "Table Name: users", "output": "SELECT * \nFROM users \nWHERE name LIKE 'S%' OR name LIKE 'T%';", "category": "Python"}, {"instruction": "Create a SQL query that searches the database for users with names beginning with the letter 'A'.", "input": "Table Name: Users", "output": "SELECT * FROM Users \nWHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Create the following table using the Python language:", "input": "", "output": "table = [[\"Name\", \"Age\", \"Gender\"],[\"John\", 20, \"Male\"], [\"Anna\", 18, \"Female\"],[\"Adam\", 22, \"Male\"], [\"Sophie\", 19, \"Female\"]]", "category": "Python"}, {"instruction": "Request the age of a user using HTML and store the user's answer in a variable called \"Age\".", "input": "", "output": "<label for=\"age\">Please enter your age: </label>\n<input type=\"number\" name=\"age\" id=\"age\">\n\n// Store the user's answer in a variable\nvar Age = document.getElementById(\"age\").value;", "category": "Python"}, {"instruction": "Construct an SQL query that selects the employee name, job title, and salary for employees with a salary greater than $50,000.", "input": "Table Name: employee\nColumns: Name, JobTitle, Salary", "output": "SELECT Name, JobTitle, Salary\nFROM employee\nWHERE Salary > 50000;", "category": "Python"}, {"instruction": "Write a code snippet to get the remainder when 34 is divided by 5 in JavaScript.", "input": "", "output": "let num = 34;\nlet divisor = 5;\nlet remainder = num % divisor;\nconsole.log(remainder); // prints 4", "category": "Python"}, {"instruction": "Add exception handling for user-defined errors to the following code snippet in Java.", "input": "public class MyClass {\n    public static void main(String[] args) {\n        int x = 4;\n        int y = 2;\n        int z = x/y;\n        System.out.println(z);\n    }\n}", "output": "public class MyClass {\n    public static void main(String[] args) {\n        try {\n            int x = 4;\n            int y = 2;\n            int z = x/y;\n            System.out.println(z);\n        } catch (ArithmeticException ex) {\n            System.out.println(\"Division by zero not allowed.\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write an SQL query to count the number of records with age greater than 25 from a given table.", "input": "", "output": "SELECT COUNT(*) FROM table WHERE age > 25;", "category": "Python"}, {"instruction": "Create a code snippet to print the star pattern below in Python.", "input": "", "output": "# Print the pattern \nrows = 5\nfor i in range(0, rows): \n    for j in range(0, i + 1): \n        print(\"*\", end=' ') \n    print(\"\\r\")", "category": "Python"}, {"instruction": "Create a function to calculate the sum of numbers from a given list in Python.", "input": "", "output": "def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s", "category": "Python"}, {"instruction": "Create a class to represent a complex number with two private fields (x, y) and two public member functions (getMagnitude, increment) in Java.", "input": "", "output": "public class ComplexNumber {\n  private double x;\n  private double y;\n \n  public ComplexNumber(double x, double y) {\n    this.x = x;\n    this.y = y;\n  }\n  \n  public double getMagnitude() {\n    return Math.sqrt(x * x + y * y);\n  }\n  \n  public void increment() {\n    this.x++;\n    this.y++;\n  }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet that creates a pop-up window with the text \"Welcome!\".", "input": "", "output": "window.alert('Welcome!');", "category": "Python"}, {"instruction": "Design a program in C# to print the following patterns.", "input": "", "output": "class Pattern\n{\n    static void Main(string[] args)\n    {\n        for (int i = 1; i <= 5; i++)\n        {\n            for (int j = 1; j <= i; j++)\n            {\n                Console.Write(\"*\");\n            }\n            Console.WriteLine();\n        }\n        for (int i = 4; i >= 0; i--)\n        {\n            for (int j = 1; j <= i; j++)\n            {\n                Console.Write(\"*\");\n            }\n            Console.WriteLine();\n        }\n    }\n}", "category": "Python"}, {"instruction": "Using HTML and CSS, create a simple two-columns landing page.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Two-Column Layout</title>\n    <style>\n       /* define a fixed width for the entire content */\n       .wrapper{\n         width: 1000px;\n         margin: 0 auto;\n       }\n\n       /* define the size and margin of the two columns */\n       .main-column{\n         float: left;\n         width: 650px;\n         margin-right: 20px;\n       }\n\n       .side-column{\n         float: left;\n         width: 300px;\n       }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <div class=\"main-column\">\n        <!-- content in main column -->\n      </div>\n\n      <div class=\"side-column\">\n        <!-- content in side column -->\n      </div>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to group salary data by job type", "input": "Table Employee:\n+----+----------+-----------+-----------+\n| ID | Name     | Job       | Salary    |\n+----+----------+-----------+-----------+\n| 1  | John     | Manager   | 150000    |\n| 2  | Tom      | Engineer  | 80000     |\n| 3  | Nick     | Manager   | 120000    |\n| 4  | Alice    | Engineer  | 87500     |\n| 5  | Steve    | Designer  | 50000     |\n| 6  | Mary     | Designer  | 62500     |\n+----+----------+-----------+-----------+", "output": "SELECT Job, AVG(Salary)\nFROM Employee\nGROUP BY Job", "category": "Python"}, {"instruction": "Write an Objective-C statement to create an empty array to hold names.", "input": "", "output": "NSMutableArray *names = [NSMutableArray array];", "category": "Python"}, {"instruction": "Create a CSS class 'blue-background' which will set background color of any div to blue.", "input": "", "output": ".blue-background {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Create a HTML form to allow users to enter an email address and a message.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n  <form action=\"submit.php\" method=\"post\">\n    Email: <input type=\"text\" name=\"email\">\n    Message: <input type=\"text\" name=\"message\">\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write code to create a bar chart comparing the performance of two different algorithms.", "input": "Algorithm 1: [90, 91, 95, 94, 99]\nAlgorithm 2: [83, 89, 95, 91, 99]", "output": "import matplotlib.pyplot as plt \n  \n# Data to plot \nalgorithm1 = [90, 91, 95, 94, 99]\nalgorithm2 = [83, 89, 95, 91, 99]\n  \n# plotting a bar chart \nplt.bar([1, 2, 3, 4, 5], algorithm1, label = \"Algorithm1\", width = 0.25, color = 'b') \nplt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, \n        label = \"Algorithm2\", width = 0.25, color = 'r') \n  \n# Naming X-axes \nplt.title('Performance Comparison') \nplt.xlabel('Runs') \nplt.ylabel('Accuracy %') \nplt.xticks([1.125, 2.125, 3.125, 4.125, 5.125], ['1', '2', '3', '4', '5']) \n  \n# Show the legend \nplt.legend() \n  \n# Function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Read this JSON structure, parse it and print the value of \"name\".", "input": "{ \n  \"person\": { \n    \"name\":\"John\", \n    \"age\": 30, \n    \"location\": \"USA\"\n  }\n}", "output": "import json \n  \n# input JSON \njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" } }'\n\n# parse json\ndata = json.loads(json_data) \n\n# get the name\nname = data[\"person\"][\"name\"] \n\n# print the name\nprint(name)", "category": "Python"}, {"instruction": "Write a Tensorflow model to classify a given X and Y as either positive or negative.", "input": "X = [1, 1, 2, 4]\nY = [3, 1, 0, 4]", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(8, input_dim=2, activation=\"relu\"), \n  tf.keras.layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(0.01),\n              metrics=['accuracy'])\n\nX_list = [X, Y] \ny = [1, 0]\n\nmodel.fit(X_list, y, batch_size=4, epochs=4)", "category": "Python"}, {"instruction": "Write a script to normalize each word in a given sentence by converting it into lowercase.", "input": "The Quick Brown Fox Jumps Over The Lazy Dog.", "output": "sentence = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nsentence = sentence.lower().split()\nsentence = ' '.join(sentence)\nprint(sentence)", "category": "Python"}, {"instruction": "Create a JavaScript Program to sort an unsorted array", "input": "array = [2, 4, 1, 6, 8, 9, 5];", "output": "let array = [2, 4, 1, 6, 8, 9, 5];\n\nlet sorted_array = array.sort((a, b) => a-b);\n\nconsole.log(sorted_array); // [1, 2, 4, 5, 6, 8, 9]", "category": "Python"}, {"instruction": "Create a list of square numbers between 0 and 9", "input": "", "output": "square_numbers = []\n\nfor i in range(10):\n    square_numbers.append(i * i)\n\nprint(square_numbers) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]", "category": "Python"}, {"instruction": "Print the even numbers in a given array?", "input": "array = [2, 3, 4, 5, 6, 7, 8, 9];", "output": "let array = [2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (let i=0; i<array.length; i++) {\n  if (array[i] % 2 === 0) {\n    console.log(array[i]);\n  }\n}", "category": "Python"}, {"instruction": "Create a JavaScript program to loop the following array", "input": "array = [2, 4, 6, 8, 10];", "output": "let array = [2, 4, 6, 8, 10];\n\nfor (let i=0; i<array.length; i++) {\n  console.log(array[i]);\n}", "category": "Python"}, {"instruction": "Modify the previous code so that it is now optimized for time complexity?", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right", "category": "Python"}, {"instruction": "Replace every occurrence of 'a' with 'b' in the given string.", "input": "cave", "output": "cbve", "category": "Python"}, {"instruction": "Develop a code in python to list the elements present in a given dictionary.", "input": "dictionary = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"location\": \"London\"\n}", "output": "def list_elements(dict):\n    for item in dict:\n        print(item, \":\", dict[item])\n\nlist_elements(dictionary)\n\n# Output:\n# name : John\n# age : 20\n# location : London", "category": "Python"}, {"instruction": "Extract the first name of the user from the below format.", "input": "Full Name- Abraham Lincoln", "output": "Abraham", "category": "Python"}, {"instruction": "How will you debug an unresponsive Flask web application?", "input": "", "output": "To debug an unresponsive Flask web application, you should first check the server logs. If there are any errors, they should be debugged first. Other steps might include disabling caching, checking for memory leaks, checking for database locking, and checking for any long-running requests. You could also use a profiler to run performance analysis on the code and identify any bottlenecks in the code. Lastly, you could use logging or debugging libraries (like pdb) to step-through the code and identify the source of any problems.", "category": "Python"}, {"instruction": "Design an efficient algorithm to search for an item in an array.", "input": "", "output": "One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array.", "category": "Python"}, {"instruction": "Explain why recursion is a powerful technique for solving problems.", "input": "", "output": "Recursion is a powerful technique for solving problems because it allows for decomposing complex problems into simpler subproblems. By breaking down a problem into smaller components, it becomes easier to solve. This process can be repeated until a base case is reached, providing a way to reach a solution for the original problem. Additionally, recursive solutions tend to be shorter and easier to comprehend than iterative solutions.", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string.", "input": "", "output": "def get_first_n_chars(string, n):\n    return string[:n]", "category": "Python"}, {"instruction": "Compute the area and perimeter of a triangle", "input": "Base: 5 cm\nHeight: 10 cm", "output": "Area = 25 cm^2\nPerimeter = 15.59 cm", "category": "Python"}, {"instruction": "Use CSS to center a div inside a parent div.", "input": "", "output": ".parent {\n position: relative;\n}\n.child {\n position: absolute;\n top: 50%;\n left: 50%;\n transform: translate(-50%, -50%);\n}", "category": "Python"}, {"instruction": "Use HTML to create a button for opening a new browser window when clicked.", "input": "", "output": "<input type=\"button\" value=\"Open New Window\" onclick=\"window.open('https://example.com/');\" />", "category": "Python"}, {"instruction": "Rewrite the following C# program to use a for loop instead of a while loop.", "input": "int i = 0;\nwhile (i < 10)\n{\n Console.WriteLine(i);\n i++;\n}", "output": "for (int i = 0; i < 10; i++) \n{ \n Console.WriteLine(i); \n}", "category": "Python"}, {"instruction": "Create an HTML document to display \"Hello, World!\" in bold.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <b>Hello, World!</b>    \n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a function in JavaScript for reversing the order of the characters in a given string.", "input": "var str = \"TestString\";", "output": "function reverseString(str) {\n var reversedStr = '';\n for (var i = str.length - 1; i >= 0; i--){\n reversedStr += str[i];\n }\n return reversedStr;\n}\nconsole.log(reverseString(str)); // gnirtSEtsT", "category": "Python"}, {"instruction": "Create a function that takes a dictionary and an integer as parameters, and returns the value of the dictionary corresponding to the given integer.", "input": "dictionary = {1: \"Monday\", 2: \"Tuesday\", 3: \"Wednesday\"}\ninteger = 2", "output": "def get_value(dictionary, integer):\n    return dictionary[integer]\n\ndictionary = {1: \"Monday\", 2: \"Tuesday\", 3: \"Wednesday\"}\ninteger = 2\nprint(get_value(dictionary, integer))", "category": "Python"}, {"instruction": "Using regex, convert a string of dates from the format 'dd/mm/yyyy' to 'mm/dd/yyyy'", "input": "String \"05/06/2019, 10/08/2020\"", "output": "String \"06/05/2019, 08/10/2020\"", "category": "Python"}, {"instruction": "Generate a correct for loop that prints every other number between 0 and 10.", "input": "", "output": "for num in range(0, 11, 2):\n    print(num)", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes two arguments and adds them.", "input": "", "output": "function add(a, b) {\n   return a + b;\n}", "category": "Python"}, {"instruction": "Sort the following list of strings.", "input": "list = [\"apple\", \"mango\", \"banana\", \"pear\"]", "output": "list = [\"apple\", \"banana\", \"mango\", \"pear\"]", "category": "Python"}, {"instruction": "Create a C++ program that computes the average of the given array elements.", "input": "arr = {1, 2, 3, 4, 5}", "output": "#include <iostream>\n\nint main() {\n   int arr[] = {1, 2, 3, 4, 5};\n   int sum = 0;\n   int n = 5;\n \n   for (int i = 0; i < n; i++) {\n      sum = sum +arr[i];\n   }\n   int avg = sum/n;\n   std::cout << \"Average = \" << avg; \n   return 0;\n}", "category": "Python"}, {"instruction": "Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list.", "input": "[5, 8, 1, 9, 4], 3", "output": "def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5", "category": "Python"}, {"instruction": "How would you verify that a given string is a valid email address?", "input": "", "output": "To verify that a given string is a valid email address, you should use a regular expression. A regular expression is a sequence of characters which can be used to check if the string matches a predefined pattern. The pattern for a valid email address should ensure that it contains the symbol \"@\" and at least one period (.) in the domain name.", "category": "Python"}, {"instruction": "Write a Python program to reverse each word of a given sentence.", "input": "This is a test", "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test\")) # Output: sihT si a tset", "category": "Python"}, {"instruction": "Identify the most efficient algorithm to find the maximum element in an array.", "input": "", "output": "The most efficient algorithm to find the maximum element in an array is the Linear Search algorithm. This algorithm works by looping through the array and comparing each element to find the maximum element. This algorithm takes O(n) time and requires no additional space.", "category": "Python"}, {"instruction": "Create a program that accepts two strings as input, and then check to see if the two strings are an anagram of each other.", "input": "word1 = \u2018earth\u2019\nword2 = \u2018heart\u2019", "output": "def check_anagrams(word1, word2):\n    return sorted(word1) == sorted(word2)\n  \nword1 = 'earth'\nword2 = 'heart'\nprint(check_anagrams(word1, word2))", "category": "Python"}, {"instruction": "Create a stand-alone Python script to print the sum of all the divisors of a number.", "input": "", "output": "def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)", "category": "Python"}, {"instruction": "Explain the basic logic for a linear search algorithm.", "input": "", "output": "A linear search algorithm is a basic searching algorithm for finding an item in an array of items. It operates by comparing each item in the array sequentially with the target value until the target value is found or the end of the array is reached. To perform a linear search, the algorithm begins by considering the first element of the array and then moving on to every subsequent element in order until the target value is found. If the target value is not found, a linear search terminates when the end of the elements is reached.", "category": "Python"}, {"instruction": "Create an SQL query that returns the names and phone numbers of customers from the state of Virginia.", "input": "", "output": "SELECT name, phone\nFROM customers\nWHERE state= 'Virginia';", "category": "Python"}, {"instruction": "Write a simple script in JavaScript to reverse a string.", "input": "text = \u201chello world\u201d", "output": "function reverseString(text) {\n return text.split(\"\").reverse().join(\"\");\n}\n\nconsole.log(reverseString(text));", "category": "Python"}, {"instruction": "Generate a method in Python to sort a given list of dictionaries.", "input": "list_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}]", "output": "def dict_sort(list_dict): \n    sorted_dict = sorted(list_dict, key = lambda x: x['age']) \n    return sorted_dict", "category": "Python"}, {"instruction": "Generate a shorthand method in Python to replace all 0s with 1.", "input": "input_list = [1, 0, 1, 0, 0]", "output": "def replace_zeros(input_list): \n    output_list = [x if x != 0 else 1 for x in input_list] \n    return output_list", "category": "Python"}, {"instruction": "Create a basic JavaScript code to input three numbers and store the largest one in a variable.", "input": "num1 = 10\nnum2 = 20\nnum3 = 30", "output": "let max;\nif (num1 > num2) {\n max = num1;\n} else {\n max = num2;\n}\nif (max < num3) {\n max = num3;\n}", "category": "Python"}, {"instruction": "Create a function in python that takes a string and returns a new string with the same letter count but in ascending order", "input": "word = \u201ctweet\u201d", "output": "def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)", "category": "Python"}, {"instruction": "Calculate the product of the numbers 87 and 36.", "input": "", "output": "3132", "category": "Python"}, {"instruction": "Create a set containing the numbers from 1-10 that are divisible by 3.", "input": "", "output": "my_set = {3, 6, 9}", "category": "Python"}, {"instruction": "Find the index of the string \"the\" in the sentence \"I saw the cat\".", "input": "", "output": "3", "category": "Python"}, {"instruction": "Print the type of the data stored in the variable 'a'.", "input": "int a = 15", "output": "Integer", "category": "Python"}, {"instruction": "Write a Java code that adds two numbers, a and b, and returns their sum.", "input": "int a = 2\nint b = 3", "output": "public int sum(int a, int b) {\n  return (a + b);\n}", "category": "Python"}, {"instruction": "Use a for loop to print the characters of the string \"Hello World!\".", "input": "", "output": "for char in \u201cHello World!\u201d:\n  print(char)", "category": "Python"}, {"instruction": "Use a for loop to compute the sum of the list [1, 3, 5, 7, 9].", "input": "[1, 3, 5, 7, 9]", "output": "total = 0\nfor num in [1, 3, 5, 7, 9]:\n  total += num\nprint(total)", "category": "Python"}, {"instruction": "Add a function to the existing code that takes an integer value as input and prints a square of '*' characters.", "input": "def print_square(length):", "output": "def print_square(length):\n  for i in range(0, length):\n    for j in range(0, length):\n      print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Create a loop in Python that counts down from 10 to 0.", "input": "", "output": "for i in range(10, 0, -1):\n  print(i)", "category": "Python"}, {"instruction": "Create an algorithm in Python to calculate the compound interest", "input": "", "output": "def compound_interest(principal, rate, time): \n  \n    # Calculates compound interest\n    CI = principal * (pow((1 + rate / 100), time))  \n    return CI \n  \n# Driver Code \nprincipal=8000\nrate=3\ntime=5\n  \nprint(\"Compound interest is\", compound_interest(principal, rate, time))", "category": "Python"}, {"instruction": "Modify the given Python code to calculate the sum of the given list and print the output.", "input": "list = [1,2,3,4,5]", "output": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))", "category": "Python"}, {"instruction": "Compose a script in JavaScript for finding the greatest common divisor of two numbers.", "input": "x = 36;\ny = 60;", "output": "function findGCD(x, y) {\n  if (x === 0)\n    return y;\n  if (y === 0)\n    return x;\n  if (x === y)\n    return x;\n  if (x > y)\n    return findGCD(x - y, y);\n  return findGCD(x, y - x);\n}\nconsole.log(findGCD(x, y));", "category": "Python"}, {"instruction": "Write a SQL statement that finds all customers who have placed orders", "input": "", "output": "SELECT c.customer_id, c.name\nFROM customers AS c\nINNER JOIN orders AS o\nON c.customer_id = o.customer_id;", "category": "Python"}, {"instruction": "What is the value of the math expression 100(log_10 10)", "input": "", "output": "100", "category": "Python"}, {"instruction": "Create a while loop that prints the numbers 1-10", "input": "", "output": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Construct an if-else statement to handle a conditional execution.", "input": "if x is greater than 0", "output": "if x > 0:\n    # execute one block of code\nelse:\n    # execute another block of code", "category": "Python"}, {"instruction": "Create an array and assign four elements to it.", "input": "", "output": "my_array = [\"John\", \"Paul\", \"George\", \"Ringo\"]", "category": "Python"}, {"instruction": "Create a dictionary and assign four key-value pairs.", "input": "", "output": "my_dict = {'apple': 'fruit', 'carrot': 'vegetable', 'house': 'structure', 'dog': 'animal'}", "category": "Python"}, {"instruction": "Write a code to print out all the even numbers in the range 0 to 10.", "input": "", "output": "for i in range(0, 11):\n    if i%2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "What is the standard indentation size for Python code?", "input": "", "output": "The standard indentation size for Python code is 4 spaces.", "category": "Python"}, {"instruction": "Create a variable called myName and assign your name to it.", "input": "", "output": "myName = \"John Doe\"", "category": "Python"}, {"instruction": "Write an Angular directive to validate input fields.", "input": "", "output": "@Directive({ selector: '[validateInput]' })\nexport class InputValidationDirective {\n  @Input() validateInput: string;\n  \n  constructor(private el: ElementRef) {\n  }\n\n  @HostListener('keyup') onKeyup() {\n    let value = this.el.nativeElement.value\n    if(!this.validateInput || this.validateInput === 'creditcard'){\n       //creditcard validation logic\n    }\n    if(this.validateInput ==='number'){\n       //number validation logic\n    }\n  }\n}", "category": "Python"}, {"instruction": "Construct an algorithm to delete duplicate characters from a string", "input": "", "output": "def delete_duplicates(string):\n    letters = set()\n    newstring = \"\"\n    for char in string:\n        if char in letters:\n            continue\n        else:\n            letters.add(char)\n            newstring += char\n    return newstring", "category": "Python"}, {"instruction": "Edit this code to show a message after 2 seconds", "input": "<script>\n    alert(\"Hello World!\");\n</script>", "output": "<script>\n    setTimeout(function(){ \n        alert(\"Hello World!\"); \n    }, 2000);\n</script>", "category": "Python"}, {"instruction": "Create a function that takes two String as parameters and return true if one String is substring of the other", "input": "", "output": "public static boolean isSubstring(String s1, String s2){\n        int len1 = s1.length();\n        int len2 = s2.length();\n        if(len1 < len2){\n            if(s2.contains(s1)){\n                return true;\n            }\n        }else{\n            if(s1.contains(s2)){\n                return true;\n            }\n        }\n        return false;\n    }", "category": "Python"}, {"instruction": "Output the largest number in this array", "input": "[20, 6, 36, 41, 12, 3]", "output": "41", "category": "Python"}, {"instruction": "Write a simple Java class", "input": "", "output": "public class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "category": "Python"}, {"instruction": "Add a comment to this code", "input": "for(int i = 0; i < n; i++)", "output": "// loop through all n elements in the array \nfor (int i = 0; i < n; i++) \n{\n    // code \n}", "category": "Python"}, {"instruction": "Sum up the elements of this array", "input": "[2,7,1,3]", "output": "13", "category": "Python"}, {"instruction": "Create a neural network with 5 inputs and 2 outputs", "input": "", "output": "model = tf.keras.Sequential([\n  tf.keras.layers.Dense(10, activation='relu', input_shape=(5,)),\n  tf.keras.layers.Dense(2, activation='softmax'),\n])", "category": "Python"}, {"instruction": "Write a function to find all distinct permutations of a given list", "input": "[1,2,3]", "output": "def permute(nums):\n    # base case when only one element in the list\n    if len(nums) == 1:\n        return [nums] \n  \n    permutations = []\n    for i in range(len(nums)): \n        m = nums[i] \n \n        # extract remaining list \n        remain = nums[:i] + nums[i+1:] \n  \n        # Iterate over remaining list and \n        # generate all permutations \n        for p in permute(remain): \n            permutations.append([m] + p) \n  \n    return permutations", "category": "Python"}, {"instruction": "Construct a for loop to print a user-defined pattern.", "input": "*\n**\n***\n****", "output": "for i in range(1, 5):\n    for j in range(0, i):\n        print(\"*\", end=\"\")\n    print() # add a new line", "category": "Python"}, {"instruction": "Write an algorithm in JavaScript to return the length of the longest word in a string.", "input": "let str = \"The quick brown fox jumped over the lazy dog.\"", "output": "const findLongestWord = (str) => {\n  let longestWord = \"\";\n  let wordsArr = str.split(\" \");\n\n  for(let i = 0; i < wordsArr.length; i++){\n    if (wordsArr[i].length > longestWord.length) {\n      longestWord = wordsArr[i];\n    }\n  }\n\n  return longestWord.length;\n}\n\nfindLongestWord(str); //6", "category": "Python"}, {"instruction": "Create an application to hide certain words in a text.", "input": "Text: \"The quick brown fox jumped over the lazy dog.\"\nWords to hide: [\"fox\", \"dog\"]", "output": "const censoredText = (text, wordsToHide) => {\n  const wordsArr = text.split(' ');\n  wordsArr.forEach((word, index) => {\n    if (wordsToHide.includes(word)) {\n        wordsArr[index] = '*'.repeat(word.length)\n    }\n  });\n  return wordsArr.join(' ');\n}\n\ncensoredText(\"The quick brown fox jumped over the lazy dog.\", [\"fox\", \"dog\"]);\n// The quick brown *** jumped over the lazy ***.", "category": "Python"}, {"instruction": "Fill in the missing characters in the given HTML code", "input": "<htm__>\n<head>\n<tit__>Example</title> \n</he__>", "output": "<html>\n<head>\n<title>Example</title> \n</head>", "category": "Python"}, {"instruction": "Declare a C++ structure that stores data about employees including their name and employee id.", "input": "", "output": "struct employee {\n string name;\n int id;\n};", "category": "Python"}, {"instruction": "Add a loop to the following program so that it prints out each item in a list.", "input": "list1 = [1, 2, 3, 4, 5]", "output": "list1 = [1, 2, 3, 4, 5]\n\nfor item in list1:\n    print(item) #output: \n    1\n    2\n    3\n    4\n    5", "category": "Python"}, {"instruction": "Update the code to get 2 extra lines of output to print the first and last value of the list.", "input": "list1 = [1, 2, 3, 4, 5]", "output": "list1 = [1, 2, 3, 4, 5]\n\nprint(\"First element:\", list1[0])\nprint(\"Last element:\", list1[-1])\n\nfor item in list1:\n    print(item) #output: \n    First element: 1\n    Last element: 5\n    1\n    2\n    3\n    4\n    5", "category": "Python"}, {"instruction": "Edit the following code to print true if the condition is met, false if not.", "input": "a = 5\nb = 3\n\nif (a > b):\n    print(\"true\")", "output": "a = 5\nb = 3\n\nif (a > b):\n    print(True)\nelse:\n    print(False)", "category": "Python"}, {"instruction": "Generate a code that creates a dictionary from two different lists with equal length.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "What is an exception handling code in Python?", "input": "", "output": "Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes.", "category": "Python"}, {"instruction": "Create a GraphQL query to get a list of all the posts in a blog.", "input": "", "output": "query {\n  posts {\n    id\n    title\n    body\n    author {\n      name\n    }\n  }\n}", "category": "Python"}, {"instruction": "How do we define a class in C++?", "input": "", "output": "In C++, a class is defined by using the keyword \"class\" followed by the class name followed by the body of the class, which is enclosed within a pair of curly braces. Within the body of the class are the class members, including the data members and member functions.\n\nFor example, the following is how we might define a class named \"Student\":\n\nclass Student {\n    int id;\n    string name;\npublic:\n    Student(int i, string n);\n    void printInfo();\n};", "category": "Python"}, {"instruction": "Sort an array of numbers in descending order using the bubble sort algorithm.", "input": "`array = [10, 5, 2, 7, 6]`", "output": "def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]", "category": "Python"}, {"instruction": "Make a Python program to delete elements from a given list at particular indices.", "input": "list_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5]", "output": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]", "category": "Python"}, {"instruction": "Create a Python program to remove all whitespace from the given string.", "input": "text = \"   This is a    sentence    with some whitespace!   \"", "output": "def remove_whitespace(text):\n    return text.replace(\" \", \"\")\n\ntext_without_whitespace = remove_whitespace(text)\nprint(text_without_whitespace) # prints \"Thisisasentencewithsomewhitespace!\"", "category": "Python"}, {"instruction": "Make a Python program to generate all permutations of a given list.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms", "category": "Python"}, {"instruction": "Create a Python function to remove all elements of the given list that are equal to the given value.", "input": "list_of_numbers = [1, 2, 3, 4, 2, 3] \nvalue = 2", "output": "def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    return result\n\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2) # prints [1, 3, 4, 3]", "category": "Python"}, {"instruction": "Write a Python program to create a new list which contains all even numbers from the given list.", "input": "list_of_numbers = [1, 2, 3, 4, 5, 6]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]", "category": "Python"}, {"instruction": "Generate the syntax to declare a variable called 'result' as an integer in Javascript.", "input": "", "output": "let result = 0;", "category": "Python"}, {"instruction": "Generate the necessary SQL query to delete records from the table 'students' where the student's major is 'Computer Science'.", "input": "", "output": "DELETE FROM students WHERE major = 'Computer Science';", "category": "Python"}, {"instruction": "How would you write a Swift program to swap the values of two variables?", "input": "", "output": "var a = 10\nvar b = 20\n\n(a, b) = (b, a)\n\nprint(a)  // Outputs 20\nprint(b)  // Outputs 10", "category": "Python"}, {"instruction": "Create a CSS page for styling a header.", "input": "", "output": "h1 {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px;\n    font-style: normal;\n    font-weight: bold;\n    line-height: 32px;\n    letter-spacing: 0.5px;\n    color: #000000;\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 0px;\n}", "category": "Python"}, {"instruction": "Create a CSS class to raise the font size of the text from the default size.", "input": "", "output": ".largerFont {\n  font-size: 120%;\n}", "category": "Python"}, {"instruction": "Output a SQL query that returns the sum of all values in the \u2018price\u2019 column of the \u2018Products\u2019 table.", "input": "", "output": "SELECT SUM(price)\nFROM Products;", "category": "Python"}, {"instruction": "Sort a dictionary by its values.", "input": "{\"a\": 4, \"b\": 2, \"c\": 3, \"d\": 1}", "output": "{\"d\": 1, \"b\": 2, \"c\": 3, \"a\": 4}", "category": "Python"}, {"instruction": "Given a list, remove the duplicates from it.", "input": "[1, 2, 3, 1, 4, 2]", "output": "[1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a dictionary of colors containing the values red, blue and green.", "input": "", "output": "{\"red\": \"red\", \"blue\": \"blue\", \"green\": \"green\"}", "category": "Python"}, {"instruction": "Given a dataframe, remove any rows containing missing values.", "input": "DataFrame:\ncol1    col2    col3\n1       a       3\n2       b       4\n3       NaN     5\n4       c       NaN", "output": "DataFrame:\ncol1    col2    col3\n1       a       3\n2       b       4", "category": "Python"}, {"instruction": "Create a NumPy array containing three zeros and three ones.", "input": "", "output": "np.array([0, 0, 0, 1, 1, 1])", "category": "Python"}, {"instruction": "Write an algorithm in Java to check if a number is a prime number. A prime number is an integer greater than 1 that is only divisible by 1 and itself.", "input": "", "output": "public static boolean isPrime(int n) \n{ \n    // Corner cases \n    if (n <= 1) \n        return false; \n    if (n <= 3) \n        return true; \n  \n    // This is checked so that we can skip \n    // middle five numbers in below loop \n    if (n % 2 == 0 || n % 3 == 0) \n        return false; \n  \n    for (int i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0) \n            return false; \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Find all substrings of a string that are palindromes in Python.", "input": "", "output": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']", "category": "Python"}, {"instruction": "What type of data structure would you use to store key-value pairs in a Python program?", "input": "", "output": "The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called \"person\" could look like this: \n\nperson = {'name':'John', 'age': 32} \n\nThe value of the key \"name\" can be accessed using person['name'] which returns \"John\".", "category": "Python"}, {"instruction": "Write a function that takes two strings as input and returns a join of both strings as a single string, with the second string in the middle.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def join_string_in_middle(string1 , string2):\n    return string1 + string2 + string1\n\n# Usage\nresult = join_string_in_middle(\"Hello\", \"World\")\nprint(result) # HelloWorldHello", "category": "Python"}, {"instruction": "Consider a list ``a = [1,3,2,2,3,4]``. What would be the output of the following code?", "input": "a = [1,3,2,2,3,4]\n\nfor i in range(len(a)):\n    a[i] = a[i -1]", "output": "a = [1,3,2,2,3,4]\n\noutput = []\nfor i in range(len(a)):\n    output.append(a[i - 1])\n\nprint(output) # [3, 2, 2, 3, 4, 1]", "category": "Python"}, {"instruction": "Modify the following code so that it takes a user input for the numbers for which to calculate the sum.", "input": "", "output": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)", "category": "Python"}, {"instruction": "Given a set of numbers, you need to output them in descending order.", "input": "[30, 50, 10, 40]", "output": "[50, 40, 30, 10]", "category": "Python"}, {"instruction": "Parse the following HTML page and extract the data from each table.", "input": "<html>\n  <body>\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>Age</td>\n      </tr>\n      <tr>\n        <td>John Doe</td>\n        <td>30</td>\n      </tr>\n      <tr>\n        <td> Jane Smith</td>\n        <td>25</td>\n      </tr>\n    </table>\n  </body>\n</html>", "output": "import bs4\n\nhtml = \"\"\"<html>\n  <body>\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>Age</td>\n      </tr>\n      <tr>\n        <td>John Doe</td>\n        <td>30</td>\n      </tr>\n      <tr>\n        <td> Jane Smith</td>\n        <td>25</td>\n      </tr>\n    </table>\n  </body>\n</html>\"\"\"\ndata = bs4.BeautifulSoup(html, features=\"html.parser\")\ntable = data.find('table')\n\nitems = table.find_all('tr')\n\nfor item in items:\n    name, age = item.find_all('td')\n    print(\"Name: {}, age: {}\".format(name.text, age.text))", "category": "Python"}, {"instruction": "You need to delete an item from a list. Output the modified list.", "input": "['apple', 'orange', 'banana']", "output": "['apple', 'orange']", "category": "Python"}, {"instruction": "Generate a recursive function for calculating the factorial of a number.", "input": "", "output": "def factorial(num):\n    # base case\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Usage\nprint(factorial(3)) # 6", "category": "Python"}, {"instruction": "Convert this list into a numpy array and sort it.", "input": "[3, 5, 1, 9, 6]", "output": "import numpy as np\n\n# Convert to numpy array\narr = np.array([3, 5, 1, 9, 6])\n\n# Sort the array\narr.sort()\n\n# Print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Build a machine learning model using scikit-learn to predict the house prices in Boston.", "input": "- Number of rooms: 3 \n- Average number of rooms per dwelling: 6 \n- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4\n- Index of accessibility to radial highways: 4\n- Full-valuation property-tax rate per $10,000: 300", "output": "import sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and label\nX = [[3,6,0.4,4,300]]\ny = [[BostonHousePrice]]\n\n# Create and fit the linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Predict the output\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]", "category": "Python"}, {"instruction": "Why is overflow an issue in computer science?", "input": "", "output": "In computer science, overflow occurs when the result of a computation exceeds the capacity of its data type, resulting in Loss of accuracy or erroneous answers from a computation. Certain programming errors lead to overflow, such as incrementing a counter past the capacity of its assigned data type, or calculating a value far greater than the data type is designed to handle. Overflow can result in critical errors like stepping off the end of an array or incorrect mathematical expressions. It is important to be aware of overflow and anticipate it in order to be able to prevent it with proper error checking.", "category": "Python"}, {"instruction": "Create a HTML page to show user data from a REST API.", "input": "{\n \"name\": \"John\",\n \"age\" : 25,\n \"address\" : \"123 Main Street\"\n}", "output": "<html>\n  <head>\n     <title>User Data</title>\n  </head>\n  <body>\n    <h1>User Data</h1>\n    <p>Name: John</p>\n    <p>Age: 25</p>\n    <p>Address: 123 Main Street</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "JAVA code to calculate the Fibonacci number at a given position.", "input": "", "output": "public class Fibonacci {\n    public static long Fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return Fibonacci(n - 1) + Fibonacci(n - 2);\n    }\n}", "category": "Python"}, {"instruction": "Design a function using Python to remove all vowels from a string.", "input": "", "output": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string", "category": "Python"}, {"instruction": "Generate SQL query to find the average score for each student.", "input": "Table: student_scores\n\n| id  | student_id | score |\n|-----|------------|-------|\n|  1  |   111      |   5   |\n|  2  |   111      |   7   |\n|  3  |   223      |   6   |\n|  4  |   223      |   8   |", "output": "SELECT student_id, AVG(score) AS average_score\nFROM student_scores\nGROUP BY student_id;", "category": "Python"}, {"instruction": "Write a PHP code to get the root directory of the server.", "input": "", "output": "<?php\n    $root_dir = $_SERVER['DOCUMENT_ROOT'];\n    echo $root_dir;\n?>", "category": "Python"}, {"instruction": "Write a Python method to extract only the numeric values from a string.", "input": "", "output": "def extract_num(string): \n    return [word for word in string.split() if word.isdigit()]", "category": "Python"}, {"instruction": "Use the provided dataset to create a Corpus of English words in Python.", "input": "https://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt", "output": "f = open('grammar_corpus.txt', 'r')\n\n# Create an empty list to store the corpus\ncorpus = []\n\n# Loop through the file line by line \nfor line in f: \n    # Split the line into words \n    words = line.lower().strip().split()\n    \n    # Check if the word is an english word \n    if words[1].isalpha(): \n        corpus.append(words[1]) \n \nf.close()\nprint(corpus)", "category": "Python"}, {"instruction": "Use the provided knowledgebase to answer the following question: What is the capital of Costa Rica?", "input": "https://en.wikipedia.org/wiki/Costa_Rica", "output": "The capital of Costa Rica is San Jos\u00e9.", "category": "Python"}, {"instruction": "Create a PHP script to generate a valid checksum of a given string.", "input": "", "output": "<?php\n    function getChecksum($string) {\n        // Get the seed used \n        $seed = (string) md5($string);\n        $checkSum = 0;\n    \n        // Calculate the checksum\n        foreach(str_split($string) as $char){\n            $checkSum += ord($char)*$seed[$checkSum % 32]; \n        }\n    \n        // Return the checksum\n        return $checkSum;\n    }\n?>", "category": "Python"}, {"instruction": "Write a SQL query to sort records in a table alphabetically by a column 'name'.", "input": "", "output": "SELECT * FROM table_name ORDER BY name ASC;", "category": "Python"}, {"instruction": "Write a Java program to display a pyramid with the given height.", "input": "height = 3", "output": "public class Pyramid \n{ \n\n    public static void printPyramid(int height) \n    { \n        int i, j; \n        for (i=0; i<height; i++) \n        { \n            for (j=0; j<=i; j++) \n            { \n                System.out.print(\"* \"); \n            } \n            System.out.println(); \n        } \n    } \n    public static void main(String args[]) \n    { \n        int height = 3; \n        printPyramid(height); \n    } \n}", "category": "Python"}, {"instruction": "Generate a random hexadecimal value in C#.", "input": "", "output": "Random random = new Random(); \nstring randomHex = string.Format(\"{0:X}\", random.Next());", "category": "Python"}, {"instruction": "Compute the area of the circle where the radius is 5 inches in Python.", "input": "", "output": "import math \n  \nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)", "category": "Python"}, {"instruction": "Create a web page with all the elements aligned on the right, using only CSS.", "input": "", "output": "<style> \n  * { \n      text-align: right; \n    } \n</style>", "category": "Python"}, {"instruction": "Write a conditional statement in PHP to check if a variable is even or odd.", "input": "", "output": "if ($num % 2 == 0) {\n    // even\n}\nelse {\n    // odd\n}", "category": "Python"}, {"instruction": "Create a Kotlin program which prints out all the numbers between 1 and 10.", "input": "", "output": "fun main() {\n    for(i in 1..10) {\n        println(i)\n    }\n}", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for solving this problem.", "input": "An array of integers is given. Find the highest sum that can be obtained by including different members from the array, such that no two members have the same index.", "output": "We can use the dynamic programming approach to solve this problem. At each step, we calculate the maximum possible sum that can be obtained if we include the current element. We keep track of the maximum sum found so far, and then continue with the next element. At the end, we have the highest sum of elements with no two elements having the same index.", "category": "Python"}, {"instruction": "Code a function in Python to generate random numbers within a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n    return random.randint(start, end)", "category": "Python"}, {"instruction": "Write a web crawler in Python to extract only the text content from a given website.", "input": "", "output": "# import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the web crawler\ndef web_crawler(url):\n    # make the request to the specified url\n    page = requests.get(url)\n    page_content = page.content\n    # parse the received content\n    soup = BeautifulSoup(page_content, 'lxml')\n    text_content = soup.find_all(text=True)\n    # return only the text content\n    return [s.strip() for s in text_content if s.strip()]", "category": "Python"}, {"instruction": "Write a CSS rule that changes the text color for all headings on a page.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n   color: red;\n}", "category": "Python"}, {"instruction": "Write a Javascript program to convert a given string into all uppercase characters.", "input": "String: \"Welcome to the World !\"", "output": "let str = \"Welcome to the World !\";\nlet upperCaseStr = str.toUpperCase();\nconsole.log(upperCaseStr);\n\n# Output: \"WELCOME TO THE WORLD !\"", "category": "Python"}, {"instruction": "Create an SQL query that finds the most expensive products in a given product table.", "input": "", "output": "SELECT *\nFROM product \nORDER BY price DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write Java code to create a class called Card with two string fields, rank and suit.", "input": "", "output": "public class Card {\n \n    private String rank;\n    private String suit;\n \n    // constructor\n    public Card(String rank, String suit) {\n        this.rank = rank;\n        this.suit = suit;\n    }\n \n    // getters\n    public String getRank() {\n        return rank;\n    }\n \n    public String getSuit() {\n        return suit;\n    }\n \n}", "category": "Python"}, {"instruction": "Create a MySQL query that returns a list of states in the United States with populations greater than 10 million.", "input": "", "output": "SELECT state\nFROM population_data \nWHERE population > 10000000;", "category": "Python"}, {"instruction": "Identify which language the following code snippet is written in.", "input": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main() \n{ \n    cout << \"Hello, World\";\n    return 0; \n}", "output": "C++", "category": "Python"}, {"instruction": "Given a matrix, write a program to fill it with zeroes in constant time and space complexity.", "input": "", "output": "def fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0", "category": "Python"}, {"instruction": "Edit the given HTML code to center all the elements.", "input": "<div>\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div>", "output": "<div style=\"text-align: center;\">\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div>", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the number of triplets that satisfy the triangle inequality.", "input": "", "output": "def find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n    return count", "category": "Python"}, {"instruction": "Given an array of words, replace each character with the corresponding number from the English alphabet (e.g. a=1, b=2 ...z=26), and find the computed sum.", "input": "[\"cat\", \"dog\"]", "output": "def find_sum(words):\n    total_sum = 0 \n    for word in words: \n        for c in word:\n            total_sum += ord(c) - 96\n    return total_sum", "category": "Python"}, {"instruction": "Prompt the user to enter a year and output whether it is a leap year or not.", "input": "", "output": "year = int(input(\"Please enter a year: \"))\n\nif (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n    print(\"It is a leap year.\")\nelse:\n    print(\"It is not a leap year.\")", "category": "Python"}, {"instruction": "Read the given CSV and output the data as a HTML table.", "input": "name, age\njoe, 23\nbilly, 24", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Joe</td>\n    <td>23</td>\n  </tr>\n  <tr>\n    <td>Billy</td>\n    <td>24</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Transform the given array into a object, with the key being the index and the value being the value at the index in the array.", "input": "arr = [1,2,3,4]", "output": "{\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4\n}", "category": "Python"}, {"instruction": "Find the length of the longest substring in the given string without repetition.", "input": "string = \"abcabcbb\"", "output": "3", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for clustering data points.", "input": "", "output": "The k-means clustering algorithm is a suitable algorithm for clustering data points. It is an iterative algorithm that works by assigning data points to clusters and then computing the centroids of the clusters. The algorithm is repeated until a desired outcome is reached. This algorithm works well for grouping similar data points in a dataset.", "category": "Python"}, {"instruction": "Explain how to find the sum of all elements in an array using recursive approach.", "input": "", "output": "The recursive approach to finding the sum of all elements in an array is to consider the array as a combination of two subarrays. We first calculate the sum of the first subarray and then for the second subarray. The total sum of elements in the array can be found by adding the sum of the two subarrays. This process is repeated until the size of the array is 0, at which point the final sum is returned. This approach is known as the divide and conquer algorithm.", "category": "Python"}, {"instruction": "Given a linked list, reverse its order of nodes.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n    prev = None\n    curr = head\n    while curr is not None:\n        prev, curr.next, curr = curr, prev, curr.next\n    return prev", "category": "Python"}, {"instruction": "Write a function in Ruby which takes two parameters and prints the greater one.", "input": "", "output": "def greater_num(a,b)\n  if a > b\n    puts a\n  else\n    puts b\n  end\nend", "category": "Python"}, {"instruction": "Write an API call in Node.js to get JSON data from the given URL.", "input": "URL = http://www.example.com", "output": "const request = require('request');\nconst url = \"http://www.example.com\";\n\nrequest.get(url, (error, response, body) => { \n    var data = JSON.parse(body); \n    console.log(data); \n});", "category": "Python"}, {"instruction": "Implement a sorting algorithm in C# that sorts the numbers in increasing order.", "input": "numbers = [3, 7, 5, 2, 4, 1]", "output": "public static void Sort(int[] numbers) \n{ \n    int n = numbers.Length; \n    for (int i = 0; i < n - 1; i++) \n        for (int j = 0; j < n - i - 1; j++) \n            if (numbers[j] > numbers[j + 1]) \n            { \n                int temp = numbers[j]; \n                numbers[j] = numbers[j + 1]; \n                numbers[j + 1] = temp; \n            }\n}", "category": "Python"}, {"instruction": "What is the best time complexity of QuickSort?", "input": "", "output": "The best time complexity of QuickSort is O(nlog(n)).", "category": "Python"}, {"instruction": "Take the following array of numbers and write a JavaScript program that sorts the array", "input": "[3, 4, 8, 9, 5, 6, 2]", "output": "function sortArray(arr) {\n    let len = arr.length;\n    for(let i = len-1; i>=0; i--){\n        for(let j = 1; j<=i; j++){\n            if(arr[j-1] > arr[j]){\n                let temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}", "category": "Python"}, {"instruction": "Create a database query to count the number of customers who have placed orders in the last month", "input": "", "output": "SELECT COUNT(*) \nFROM customers \nWHERE EXISTS (SELECT * \n              FROM orders \n              WHERE orders.customerId = customers.id \n              AND Date_sub(now(), interval 1 month) \n              <= orders.orderDate);", "category": "Python"}, {"instruction": "Write an SQL query to select the productname and the total price of orders with more than 10 items", "input": "", "output": "SELECT productname, SUM(price) AS total_price \nFROM Orders \nJOIN OrderItems \nUSING (orderId) \nJOIN Products \nUSING (productId)\nWHERE quantity > 10\nGROUP BY orderId", "category": "Python"}, {"instruction": "Generate a parse tree for the following sentence", "input": "Alice likes to swim", "output": "likes\n        /     \\\n    Alice      to\n               /\n             swim", "category": "Python"}, {"instruction": "Write a C program that uses the bitwise operator to set, clear and toggle the Nth bit of an integer.", "input": "", "output": "#define SET_BIT(number, n) ((number) |= (1 << (n)))\n#define CLEAR_BIT(number, n) ((number) &= ~(1 << (n))) \n#define TOGGLE_BIT(number, n) ((number) ^= (1 << (n)))", "category": "Python"}, {"instruction": "Create a Java program to sort an array of integers by implementing the Selection Sort technique.", "input": "", "output": "public static void selectionSort(int[] arr) { \n    int n = arr.length; \n  \n    for (int i = 0; i < n-1; i++) \n    { \n        int min_idx = i; \n        for (int j = i+1; j < n; j++) \n            if (arr[j] < arr[min_idx]) \n                min_idx = j; \n  \n        int temp = arr[min_idx]; \n        arr[min_idx] = arr[i]; \n        arr[i] = temp; \n    } \n}", "category": "Python"}, {"instruction": "Create a class to create a naive bayes model.", "input": "", "output": "class NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n\n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods", "category": "Python"}, {"instruction": "What is computational complexity and how can it affect the performance of a program?", "input": "", "output": "Computational complexity is a measure of the amount of resources (time and memory) needed to execute a given algorithm. It is expressed as a function of the size of the input data. A program that has a high computational complexity will take longer to execute and require more memory as the size of the data increases. Improving the complexity of algorithms can dramatically improve the performance of a program.", "category": "Python"}, {"instruction": "Write an event handler for a button in JavaScript that prints 'Hello World!'", "input": "", "output": "// Declare a function `printHelloWorld` \nfunction printHelloWorld () {\n  console.log(\"Hello World!\");\n}\n\n// Add the event handler to the button \ndocument.getElementById(\"myButton\").addEventListener(\"click\", printHelloWorld);", "category": "Python"}, {"instruction": "Implement Quicksort in Python to sort this list of integers.", "input": "[8, 5, 3, 9, 1]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)", "category": "Python"}, {"instruction": "Create a function 'double_up()' in JavaScript that takes an array of integers as input and returns an array with each of the elements doubled.", "input": "[2, 4, 6]", "output": "function double_up(arr) {\n    // Declare a new array\n    let result = [];\n\n    // Loop through input array\n    for (let i=0; i < arr.length; i++) {\n        result.push(arr[i] * 2);\n    }\n\n    //Return the new array \n    return result;\n}", "category": "Python"}, {"instruction": "What is aHeap data structure?", "input": "", "output": "A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm.", "category": "Python"}, {"instruction": "Create a SQL query to display the total number of sales in each year.", "input": "Table Name: \"Sales\"\nTable Columns: \"year\", \"total_sales\"", "output": "SELECT year, SUM(total_sales) \nFROM Sales \nGROUP BY year;", "category": "Python"}, {"instruction": "How can we detect outliers in a dataset?", "input": "", "output": "Outliers can be detected by computing simple summary statistics and plotting the data. Common methods for detecting outliers include the use of box plots, scatter plots, and statistical tests such as the Interquartile Range (IQR) test and the Z-score test. The IQR test uses the difference between the 75th and 25th percentiles, and any value further than 1.5 times the IQR is considered an outlier. The Z-score test detects outliers by calculating the z-scores of each data point, and values more than 3 standard deviations away are considered outliers.", "category": "Python"}, {"instruction": "Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum.", "input": "", "output": "def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num", "category": "Python"}, {"instruction": "Create a CSS rule to apply the 'medium-blue' class the the <body> tag.", "input": "", "output": "body {\n  background-color: medium-blue;\n}", "category": "Python"}, {"instruction": "Write a C++ program for calculating the power of a number.", "input": "Base = 5;\nExponent = 2;", "output": "#include <iostream>\n \ndouble power(double base, int exponent)\n{\n    double result = 1;\n\n    for(int i = 0; i < exponent; i++)\n    {\n        result *= base;\n    }\n\n    return result;\n}\n \nint main()\n{\n    double base;\n    int exponent;\n\n    base = 5.0;\n    exponent = 2;\n\n    std::cout << power(base, exponent) << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "What is the main idea behind Naive Bayes Model?", "input": "", "output": "The main idea behind Naive Bayes Model is to use the probability of each data point to make a prediction by calculating the probability of a certain outcome given some prior knowledge. It assumes all the features are independent of each other and uses the Bayes theorem to calculate the probability of a given class based on the evidence.", "category": "Python"}, {"instruction": "What is the time complexity of checking if a given string is a palindrome or not?", "input": "", "output": "The time complexity of checking if a given string is a palindrome or not is O(n).", "category": "Python"}, {"instruction": "Write a query in SQL to find all customers with email addresses starting with 'Simon'.", "input": "", "output": "SELECT * FROM Customers WHERE Email LIKE 'Simon%';", "category": "Python"}, {"instruction": "What is the maximum length of a string in Python?", "input": "", "output": "The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters.", "category": "Python"}, {"instruction": "How can you access an element in an array using JavaScript?", "input": "", "output": "In order to access an element in an array using JavaScript, you can use the index of the element. The index is the position of the element in the array. For example, if the array is [4, 8, 15], then you can use the following code to access the element at index 1 (i.e. 8):\n\nvar array = [4, 8, 15];\nvar element = array[1];\n// The variable `element` now contains the value 8", "category": "Python"}, {"instruction": "Write a code to convert HTML to Markdown using Python.", "input": "", "output": "import markdown\nimport re\n\ndef convert_html_to_markdown(html):\n  lines = html.split('\\n')\n  for line in lines:\n    line = markdown.markdown(line)\n    # remove HTML tags\n    line = re.sub(r'<[^>]*>', '', line)\n    # strip whitespace\n    line = line.strip()\n    print line\n\nhtml = '<p>This is an example of HTML text.</p>'\nconvert_html_to_markdown(html)\n\n# Output\nThis is an example of HTML text.", "category": "Python"}, {"instruction": "What are the advantages of using a while loop over a for loop in Python?", "input": "", "output": "The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand.", "category": "Python"}, {"instruction": "How can you access a requested item from an URL in JavaScript?", "input": "", "output": "In order to access a requested item from an URL in JavaScript you can use the URL API such as the URL.searchParams API. The API allows you to parse the query string and retrieve specific items, such as variables and their values, from the URL. For example, if the URL was \"http://example.com/?key1=value1&key2=value2\" you can use the following code to get the value of \"key1\":\n\nvar url = new URL(\"http://example.com/?key1=value1&key2=value2\");\nvar value1 = url.searchParams.get(\"key1\");\n// value1 will contain 'value1'", "category": "Python"}, {"instruction": "Construct a SQL query to select all the records from the \"user_table\" table that were created in the last 3 days.", "input": "", "output": "SELECT * FROM `user_table` WHERE date_created > date_sub(curdate(), interval 3 day)", "category": "Python"}, {"instruction": "What is the time complexity of the most_common() function?", "input": "", "output": "The time complexity of the most_common() function is O(n).", "category": "Python"}, {"instruction": "Edit the existing code to accept more than two arguments", "input": "def get_sum(a, b):\n    return a + b", "output": "def get_sum(*args):\n    sum = 0\n    for number in args:\n        sum += number\n\n    return sum", "category": "Python"}, {"instruction": "Write a permutation function which takes a given string and returns all the possible permutations.", "input": "\"abc\"", "output": "function permutate(str){\n  if (str.length <= 1) {\n    return str;\n  } \n  let permutations = []; \n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    // excluding the character from the string\n    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);\n    // recursively call the function\n    for (let subPermutation of permutate(remainingString)) {\n      permutations.push(char + subPermutation);\n    }\n  }\n  return permutations;\n}\n\nconst possiblePermutations = permutate(\"abc\");\n\n// Output: [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "category": "Python"}, {"instruction": "Given an array of strings, write a JavaScript function to filter out all elements that are not palindromes.", "input": "[\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"]", "output": "function filterPalindromes(arr) {\nreturn arr.filter(element => {\n  let strippedString = element.replace(/\\s+/g, \"\");\n  let reversedString = strippedString.split('').reverse().join('');\n  return strippedString == reversedString;\n});\n}\n\nconsole.log(filterPalindromes([\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"])); // Output: [\" racecar\", \"abba\", \"civic\", \"pot op\"]", "category": "Python"}, {"instruction": "What is the data type for the following value \"true\"?", "input": "", "output": "The data type for the value \"true\" is boolean.", "category": "Python"}, {"instruction": "Create a variable named \"my_name\" with a value of your name.", "input": "", "output": "let my_name = \"John\";", "category": "Python"}, {"instruction": "Create a generator to produce \"hello world\" ten times", "input": "", "output": "def hello_world_generator():\n    for _ in range(10):\n        yield \"Hello World\"", "category": "Python"}, {"instruction": "What is the time complexity of the program you wrote to generate random passwords?", "input": "", "output": "The time complexity of the program to generate random passwords is O(n), where n is the length of the password.", "category": "Python"}, {"instruction": "What is the time complexity of the function you wrote to output the nth Fibonacci number?", "input": "", "output": "The time complexity of the function to output the nth Fibonacci number is O(2^n).", "category": "Python"}, {"instruction": "Build a regular expression to match only strings that start with one specific character and end with another specific character.", "input": "", "output": "/^X.*Y$/", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.", "input": "Sentence = \"Hello, this is a sentence\";\nNumber = 3;", "output": "def count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n\n  return count\n\ncount_words_longer_than_number(Sentence, Number)", "category": "Python"}, {"instruction": "Create a program in Python that will take in a list of strings and print out each unique string in the list.", "input": "mylist = [\"Hello\", \"World\", \"Hello\", \"WDI\", \"Class\"]", "output": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\n\nprint(uniquelist)", "category": "Python"}, {"instruction": "Read the given list and return the last element.", "input": "mylist = [1,2,3,4,5]", "output": "5", "category": "Python"}, {"instruction": "Implement a feature to add a record to a MySQL database table.", "input": "", "output": "import mysql.connector\n\n# Establish a connection with the database\nmydb = mysql.connector.connect(\n  host=\"localhost\", \n  user=\"username\",\n  password=\"password\",\n  database=\"databaseName\"\n)\n\n# Create a new record\nmycursor = mydb.cursor()\nsql = \"INSERT INTO tableName (col1, col2, col3) VALUES (%s, %s, %s)\" \nval = (\"value1\", \"value2\", \"value3\")\nmycursor.execute(sql, val)\n\n# Commit the changes to the database\nmydb.commit()", "category": "Python"}, {"instruction": "Create an animnation of a bouncing ball in the canvas using JavaScript.", "input": "", "output": "let x = canvas.width/2;\nlet y = canvas.height/2;\nlet radius = 20;\nlet dx = 3;\nlet dy = -3;\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI*2);\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  ctx.closePath();\n\n  if (x+radius > canvas.width || x-radius < 0) {\n    dx = -dx;\n  }\n  \n  if (y+radius > canvas.height || y-radius < 0) {\n    dy = -dy;\n  }\n  \n  x += dx;\n  y += dy;\n  requestAnimationFrame(draw);\n}", "category": "Python"}, {"instruction": "Write a code to optimize the parsing of a given sentence using CKY parsing.", "input": "Sentence: \"The cat chased the dog around the corner of the house.\"", "output": "# Imports\nimport nltk\n\n# CKY Parsing\ndef cky_parse(sentence):\n  \"\"\"Given a sentence, apply CKY parsing to optimize the parsing of it\"\"\"\n  \n  words = nltk.word_tokenize(sentence)\n  \n  # Create tree structure\n  table = [[None for i in range(len(words))] for j in range(len(words))]\n  for j in range(len(words)):\n    for i in reversed(range(j)):\n      parts_of_speech = nltk.pos_tag(words[i:j+1])\n      part_of_speech = tuple(tag for word,tag in parts_of_speech)\n      if part_of_speech in grammar.productions():\n        table[i][j] = part_of_speech\n        break\n  return table", "category": "Python"}, {"instruction": "Create an example chatbot dialogue using the given context.", "input": "Context: You're a pizza maker", "output": "User: Hi, I'm looking for a pizza\nBot: Hi there! What kind of pizza are you looking for?\nUser: I'd like a pepperoni pizza with extra cheese\nBot: Sure, one pepperoni pizza with extra cheese coming right up! Anything else I can do for you?", "category": "Python"}, {"instruction": "Write a Bash script for creating a directory and its subdirectories.", "input": "", "output": "#!/bin/bash\n \nDIR=\"example\"\nmkDIR -p \"$DIR/subdir1/subdir2\"", "category": "Python"}, {"instruction": "Using an AI platform, create a sentiment analysis model to predict a sentiment of a given sentence.", "input": "", "output": "model = AIplatform.SentimentAnalysis() \nmodel.fit(X, y) \nprediction = model.predict(sentence)", "category": "Python"}, {"instruction": "Design a class in C# to store employee details.", "input": "", "output": "public class Employee\n{\n    public string Name;\n    public int Age;\n    public string Department;\n    public int Salary;\n    \n    public Employee(string name, int age, string department, int salary)\n    {\n        Name = name;\n        Age = age;\n        Department = department;\n        Salary = salary;\n    }\n}", "category": "Python"}, {"instruction": "Design a class in Java for creating a 2D point.", "input": "", "output": "public class Point {\n  double x,y;\n  \n  public Point(double x, double y) {\n    this.x = x; \n    this.y = y; \n  }\n  \n  public double getX() { return x; }\n  public double getY() { return y; }\n  public void setX(double x) { this.x = x; }\n  public void setY(double y) { this.y = y; }\n  \n  public double distance(Point other) {\n    return Math.sqrt(Math.pow(x - other.getX(), 2) + \n                     Math.pow(y - other.getY(), 2)); \n  }\n}", "category": "Python"}, {"instruction": "Create a React component for a navigation bar with a logo and two menu items named \"Home\" and \"About\".", "input": "", "output": "import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <div className=\"logo\">\n        Logo\n      </div>\n      <ul>\n        <li>Home</li>\n        <li>About</li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navbar;", "category": "Python"}, {"instruction": "Write a JavaScript program to compute the difference between two dates in days.", "input": "Two dates- \"2021/07/26\" and \"2022/06/01\"", "output": "const dateOne = new Date(\"2021/07/26\");\nconst dateTwo = new Date(\"2022/06/01\");\nconst timeDifference = dateTwo.getTime() - dateOne.getTime();\nconst daysDifference = timeDifference / (1000 * 3600 * 24);\nconsole.log(daysDifference);", "category": "Python"}, {"instruction": "Using TensorFlow, define a neural network for classifying a set of language data as either English or Spanish.", "input": "Training data of 1000 samples with 500 English sentences and 500 Spanish sentences.", "output": "model = tf.keras.Sequential() \nmodel.add(tf.keras.layers.Input(shape=(1000,))) \nmodel.add(tf.keras.layers.Dense(units=128, activation='relu')) \nmodel.add(tf.keras.layers.Dense(units=2, activation='softmax')) \nmodel.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy']) \nmodel.fit(X,y, epochs=10)", "category": "Python"}, {"instruction": "Create a program in C to find the biggest of three numbers.", "input": "", "output": "int max(int a, int b, int c)\n{\n  int big = a;\n  if(b > big)\n    big = b;\n  if(c > big)\n    big = c;\n  return big;\n}", "category": "Python"}, {"instruction": "Using the input provided, write a code in Python to print the elements of a given dictionary along with the corresponding keys.", "input": "my_dict = {'one':1, 'two':2, 'three':3}", "output": "for key, value in my_dict.items():\n    print(key + ':', value)", "category": "Python"}, {"instruction": "Write a code in Java to sort given list items in ascending order.", "input": "my_list = [9, 4, 7, 2, 6]", "output": "for (int i = 0; i < my_list.length; i++) { \n        for (int j = i + 1; j < my_list.length; j++) { \n            if (my_list[i] > my_list[j]) { \n                int temp = my_list[i]; \n                my_list[i] = my_list[j]; \n                my_list[j] = temp; \n            } \n        } \n    }", "category": "Python"}, {"instruction": "Using the input provided, write a program in JavaScript that finds the largest number in an array.", "input": "my_array = [2, 3, 6, 1, 9]", "output": "let largestNumber = my_array[0];\nfor (let i = 1; i < my_array.length; i++) {\n  if (largestNumber < my_array[i]) {\n    largestNumber = my_array[i];\n  }\n}\nconsole.log(largestNumber);", "category": "Python"}, {"instruction": "Create an example Word Cloud from the given text.", "input": "Text: Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.", "output": "import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n# Generate a word cloud image\ntext = \"Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.\"\nwordcloud = WordCloud().generate(text)\n\n# Show the generated image\nplt.imshow(wordcloud, interpolation='bilinear') \nplt.axis(\"off\") \nplt.show()", "category": "Python"}, {"instruction": "Create a search engine to process natural language queries.", "input": "", "output": "# Imports \nimport nltk \nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n# Tokenize the natural language query \nresponse = input(\"What would you like to search for? \")\nwords = word_tokenize(response)\ntagged_words = pos_tag(words)\n\n# Process the query and search for relevant results\nsearch_results = []\nfor word in tagged_words:\n    if word[1] == \"NN\":\n        search_results.append(search_for_nn(word))\n    elif word[1] == \"VBP\":\n        search_results.append(search_for_vbp(word))\n    else:\n        search_results.append(\"No results found.\")\n\n# Print the results \nfor result in search_results:\n    print(result)", "category": "Python"}, {"instruction": "Write a code for sorting the given array of numbers in ascending order.", "input": "", "output": "def sort_array(numbers):\n    # Bubble sort algorithm \n    for i in range(len(numbers)): \n      for j in range(0, len(numbers)-i-1): \n        if numbers[j] > numbers[j+1]: \n          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n    return numbers", "category": "Python"}, {"instruction": "Create a program to detect spam emails.", "input": "", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\n# Create a list of \"spammy\" words\nspammy_words = ['free', 'discount', 'offer', 'win', 'prize', 'billion', 'million', 'cash']\n\n# Define a function for detecting spam\ndef detect_spam(email):\n    # Tokenize the email\n    words = word_tokenize(email)\n    spam_score = 0\n    for word in words:\n        if word.lower() in spammy_words:\n            spam_score += 1\n    # Return the spam score\n    return spam_score", "category": "Python"}, {"instruction": "Design a basic calculator that returns the output of two number inputs", "input": "Number inputs: 9, 12", "output": "def calculator(num1, num2):\n  return num1 + num2", "category": "Python"}, {"instruction": "Create a dataframe in pandas", "input": "List of 7 employees, each with first name and last name.", "output": "import pandas as pd\n\ndata = [{\"first_name\":\"John\", \"last_name\":\"Doe\"},\n        {\"first_name\":\"Jane\", \"last_name\":\"Smith\"},\n        {\"first_name\":\"Tom\", \"last_name\":\"Johnson\"},\n        {\"first_name\":\"Sandy\", \"last_name\":\"Robinson\"},\n        {\"first_name\":\"Roger\", \"last_name\":\"McDonald\"},\n        {\"first_name\":\"Linda\", \"last_name\":\"Williams\"},\n        {\"first_name\":\"David\", \"last_name\":\"Miller\"}]\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Develop a program to split a string by a specific delimiter", "input": "String = \"This-is-a-test\"\nDelimiter = \"-\"", "output": "def split(string, delimiter): \n    return string.split(delimiter) \n  \n# Driver code \nstring = \"This-is-a-test\"\ndelimiter = \"-\"\nprint (split(string, delimiter))", "category": "Python"}, {"instruction": "Given an array containing a string with duplicates, output an array with only unique strings.", "input": "['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']", "output": "def remove_duplicates(arr): \n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    return unique_arr\n\n# Driver code \narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] \nprint (remove_duplicates(arr))", "category": "Python"}, {"instruction": "Generate a python program to solve the Tower of Hanoi problem with n discs", "input": "", "output": "def TowerOfHanoi(n, from_rod, to_rod, aux_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod)\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) \n        \n# Driver code \nn = 3\nTowerOfHanoi(n, 'A', 'C', 'B')", "category": "Python"}, {"instruction": "Develop a program to join two strings", "input": "String1 = \"Hello\";\nString2 = \"World\";", "output": "public class ConcatenateStrings { \n \n  public static String concat(String s1, String s2) { \n    StringBuilder sb = new StringBuilder(); \n    sb.append(s1); \n    sb.append(s2); \n    return sb.toString(); \n  } \n  \n  public static void main(String[] args) { \n    String str1 = \"Hello\"; \n    String str2 = \"World\"; \n    System.out.println(concat(str1, str2)); \n  } \n}", "category": "Python"}, {"instruction": "Categorize a piece of code as an imperative or functional programming paradigm", "input": "sum = 0;\n\nfor (i = 0; i < n; i++) {\n    sum += arr[i];\n}", "output": "Imperative programming paradigm.", "category": "Python"}, {"instruction": "Write a script in Python for printing the given second level sub-dictionary.", "input": "data = {'first': {'A': 1, 'B': 2}, 'second': {'C': 3, 'D': 4}}", "output": "second_dict = data.get('second')\nfor key, value in second_dict.items():\n    print(key, value)", "category": "Python"}, {"instruction": "Describe the structure of JSON data", "input": "", "output": "JSON (JavaScript Object Notation) data is structured in a hierarchical way. It consists of data stored in key-value pairs. The JSON object typically contains a set of key-value pairs, or nested objects. Data is organized and encoded in a way that makes it easier for programs to read and interpret the data stored in the JSON object. The structure of a JSON object may look like this: \n \n{ \n  \"Key1\": \"Value1\", \n  \"Key2\": \"Value2\", \n  \"NestedObject\": { \n    \"NestedKey1\": \"NestedValue1\", \n    \"NestedKey2\": \"NestedValue2\" \n  } \n}", "category": "Python"}, {"instruction": "Create a bash script to detect if a given IP address is valid or not.", "input": "192.168.1.100", "output": "#!/bin/bash \n \nIP_ADDRESS=\"$1\"\n \nif [[ $IP_ADDRESS =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n  echo \"Valid IP Address\"\nelse\n  echo \"Invalid IP Address\"\nfi", "category": "Python"}, {"instruction": "How would you extend the following code to add the features \"undo\" and \"redo\"?", "input": "def add_item(item, list):\n\tlist.append(item)", "output": "def add_item(item, list):\n    list.append(item)\n    undo_list.append(item)\n\u200b\ndef undo_item(item, list):\n    if len(list) > 0:\n        last_item = list.pop()\n        redo_list.append(last_item)\n    \ndef redo_item(item, list):\n    if len(redo_list) > 0:\n        last_item = redo_list.pop()\n        list.append(last_item)", "category": "Python"}, {"instruction": "Suggest a better way of writing the following code.", "input": "a = 10\nb = 25\n\nif a > b:\n\tprint(\"a is greater than b\")\nelse:\n\tprint(\"b is greater than a\")", "output": "a = 10\nb = 25\n\nif a < b:\n\tprint(\"b is greater than a\")\nelse:\n\tprint(\"a is greater than b\")", "category": "Python"}, {"instruction": "Suggest a method to optimize the following code.", "input": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    \n    return max", "output": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        max = max if max > arr[i] else arr[i]\n    \n    return max", "category": "Python"}, {"instruction": "Create an AI chatbot that can answer questions about the given topic \"Covid-19\".", "input": "Topic: Covid-19", "output": "# Imports \nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\n# Create the AI Chatbot \nbot = ChatBot(\"CovidBot\") \n\n# Train the bot on the corpus \ntrainer = ChatterBotCorpusTrainer(bot) \ntrainer.train(\"chatterbot.corpus.english.covid19\")\n\n# Start the chatbot \nwhile True:\n    user_input = input(\"User: \")\n    if user_input == 'exit':\n        break\n    bot_response = bot.get_response(user_input)\n    print(\"CovidBot:\",bot_response)", "category": "Python"}, {"instruction": "Design and implement a genetic algorithm for finding the optimal solution for a given problem.", "input": "", "output": "# Define the population size\nPOPULATION_SIZE = 100\n\n# Define the parameters for the genetic algorithm \nMUTATION_RATE = 0.2 \nCROSSOVER_RATE = 0.7 \nMAX_ITERATIONS = 10 \n\n# Create the initial population\npopulation = create_population(POPULATION_SIZE) \n\n# Run the genetic algorithm\nfor iteration in range(MAX_ITERATIONS):\n  # Select the fittest individuals to reproduce\n  selected_pop = select_fittest(population)\n  \n  # Crossover two individuals to form a new population\n  children_pop = crossover(selected_pop, CROSSOVER_RATE)\n  \n  # Mutate the new population \n  mutate_pop = mutate(children_pop, MUTATION_RATE)\n  \n  # Replace the population with the mutated population \n  population = mutate_pop \n\n# Return the optimal solution\nreturn best_solution(population)", "category": "Python"}, {"instruction": "Create a web scraper to extract the title and description of a given URL using BeautifulSoup.", "input": "URL: https://www.example.com/", "output": "# Imports \nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL\nurl = \"https://www.example.com/\"\n\n# Get the HTML\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML\nsoup = BeautifulSoup(html,\"html.parser\")\n\n# Extract the title and description \ntitle = soup.find(\"title\").text\ndescription = soup.find(\"meta\",  property=\"og:description\")['content']\n\n# Print the title and description\nprint(\"Title:\", title) \nprint(\"Description:\", description)", "category": "Python"}, {"instruction": "Explain the working of a function that takes a string as an argument, removes all the duplicate characters from it and returns the modified string", "input": "", "output": "The given function takes a string as an argument, creates an empty string to store unique characters from the given string. It then iterates through the given string and checks if the character is already present in the new string. If the character is not present, it adds the character to the new string. After iterating through the entire string, the modified string which doesn\u2019t contain any duplicate characters is returned.", "category": "Python"}, {"instruction": "Modify the given code to sanitize the user input.", "input": "string = raw_input(\"Enter your text here: \")", "output": "import re\n\ndef sanitize(string):\n    string = re.sub(r'[^\\w\\s]','',string)\n    return string\n\nstring = sanitize(raw_input(\"Enter your text here: \"))", "category": "Python"}, {"instruction": "Edit the statement to make it a valid expression in Python.", "input": "x = y =", "output": "x = y = 0", "category": "Python"}, {"instruction": "Use the input provided to print out the name of the collection of items provided.", "input": "my_list = [\"apple\", \"banana\", \"orange\"]", "output": "print(\"my_list is a collection of:\", my_list)", "category": "Python"}, {"instruction": "Create a C++ program to input two numbers and print their sum.", "input": "", "output": "#include <iostream>\nusing namespace std;\n \nint main()\n{\n  int num1, num2, sum;\n  \n  cout << \"Enter two numbers: \";\n  cin >> num1 >> num2;\n  \n  sum = num1 + num2;\n  \n  cout << \"Sum = \" << sum;\n  return 0;\n}", "category": "Python"}, {"instruction": "Write a CSS code snippet to make all the <b> tags bold.", "input": "", "output": "b {\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write an HTML form for a survey about a school.", "input": "", "output": "<form action=\"survey.php\" method=\"post\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Age:</label>\n  <input type=\"number\" name=\"age\"><br>\n  <label>What did you think of your school experience?</label>\n  <input type=\"text\" name=\"experience\"><br>\n  <label>Would you recommend your school to a friend?</label>\n  <input type=\"yesno\" name=\"recommend\"><br>\n  <input type=\"submit\">\n</form>", "category": "Python"}, {"instruction": "How would you delete an item from a linked list in Java?", "input": "", "output": "To delete an item from a linked list in Java, you would first need to traverse the list until you reach the item. Once you find the item, delete the reference to the node immediately before it by pointing the previous node's 'next' pointer to the node after the current one. Finally, delete the node by setting the node's pointer to null.", "category": "Python"}, {"instruction": "Create a SQL query to select the column \"name\" from the table \"Customers\" where the \"address\" column contains the value \"London\".", "input": "", "output": "SELECT name FROM Customers WHERE address = \"London\";", "category": "Python"}, {"instruction": "What is multithreading in Java and why is it used?", "input": "", "output": "Multithreading in Java is a process which allows multiple threads to run concurrently, allowing applications to utilize multiple CPU cores and execute operations simultaneously. It helps to improve the performance of applications by allowing them to complete operations quickly and efficiently.", "category": "Python"}, {"instruction": "How do you represent a database table and its columns in an object-oriented programming language?", "input": "", "output": "Classes are typically used to represent a database table in an object-oriented programming language. Each of the database table's columns can be represented as fields in the class. The values for those fields can then be accessed though the class' accessor methods.", "category": "Python"}, {"instruction": "Build an array in JavaScript containing the words: \"cat\", \"dog\", \"fish\", and \"wolf\".", "input": "", "output": "let animals = [\"cat\", \"dog\", \"fish\", \"wolf\"];", "category": "Python"}, {"instruction": "How would you add the following list to a JSON document using Python?\n[1,2,3]", "input": "", "output": "import json\n\ndata = [1,2,3]\n\nwith open('my-json-file.json', 'w') as outfile:\n  json.dump(data, outfile)", "category": "Python"}, {"instruction": "Generate HTML code for displaying a list of items", "input": "", "output": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>", "category": "Python"}, {"instruction": "Construct a for loop in Javascript to measure the sum of the squares of integers from 2 to 6", "input": "", "output": "let sum = 0;\n\nfor (let i = 2; i <= 6; i++) {\n  sum += i * i;\n}\n\nconsole.log(sum);", "category": "Python"}, {"instruction": "Construct a simple MySQL query", "input": "", "output": "SELECT * FROM table_name;", "category": "Python"}, {"instruction": "Convert the following pseudocode into code that implements a binary search", "input": "Input: Array, Item\n\nSet low to the first index of the array\nSet high to the last index of the array\n\nwhile low is less than or equal to high\n  set mid to the average of low and high\n  if the item is found at mid, then return mid\n  else if the item is less than what is found at mid,\n    set high to mid - 1\n  else\n    set low to mid + 1\n\nreturn null", "output": "def binarySearch(list, item):\n    low = 0\n    high = len(list) - 1\n\n    while low <= high: \n        mid = (low + high) // 2\n        guess = list[mid] \n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None", "category": "Python"}, {"instruction": "Implement a method in Java to reverse a number", "input": "", "output": "public class ReverseNumber {\n\n    public static int reverseNumber(int num) {\n        int reversed = 0;\n        while(num > 0) {\n            reversed *= 10;\n            reversed += num % 10;\n            num /= 10;\n        }\n        return reversed;\n    }\n}", "category": "Python"}, {"instruction": "Verify the result of the following algorithm", "input": "Array: [3, 2, 1]\nAlgorithm:\nSort the array in ascending order", "output": "The result of the algorithm is [1, 2, 3]. This can be verified by manually sorting the array in an ascending order.", "category": "Python"}, {"instruction": "Generate a function to check if parameter is equal to a specific string.", "input": "", "output": "def is_equal(parameter, string):\n    if parameter == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write a SQL query to find all customers from France.", "input": "", "output": "SELECT * FROM customers WHERE country = 'France';", "category": "Python"}, {"instruction": "Create a PHP program to store data submitted by an HTML form.", "input": "", "output": "<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $name = $_POST['name'];\n    $age = $_POST['age'];\n\n    // Store data in database\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"myDB\";\n\n    // Connect to database\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    // Insert data\n    $sql = \"INSERT INTO users (name, age)\n    VALUES ('$name', '$age')\";\n\n    if (mysqli_query($conn, $sql)) {\n        echo \"Data stored successfully\";\n    } else {\n        echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n    }\n\n    mysqli_close($conn);\n}\n?>", "category": "Python"}, {"instruction": "Write a function in JavaScript to truncate a string to a given length.", "input": "", "output": "function truncateString(str, num) {\n  if (str.length <= num) {\n    return str;\n  }\n  return str.slice(0, num) + \"...\";\n}", "category": "Python"}, {"instruction": "Reverse a given string without using built-in library functions", "input": "", "output": "def reverse_string(string):\n    rev_string = ''\n    for i in range(len(string) - 1, -1, -1):\n        rev_string += string[i]\n    return rev_string", "category": "Python"}, {"instruction": "Write an algorithm to find the number of times a given number appears in an array", "input": "[5, 2, 4, 2, 5, 2, 5], number: 5", "output": "def count_number(arr, number):\n    count = 0\n    for num in arr:\n        if num == number:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Edit the following snippet of code to make the program print 'Hello World!'", "input": "print('Hello world)", "output": "print('Hello World!')", "category": "Python"}, {"instruction": "Write an algorithm to add a new user (name, email, password, address) to a table called 'users'.", "input": "name: John\nemail: john@example.com\npassword: 1234\naddress: 999 Main St.", "output": "def add_user(name, email, password, address):\n    sql = 'INSERT INTO users (name, email, password, address) VALUES (%s, %s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (name, email, password, address))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Design an algorithm to insert a new row into a table named 'products' with the following columns: title, description and price.", "input": "title: \"New product\"\ndescription: \"This is an amazing product, it can do anything!\"\nprice: 10", "output": "def insert_row_products(title, description, price):\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Write a function to query a database table 'trips' and return a list of all trips made over the past three months.", "input": "", "output": "def query_trips():\n    start_date = datetime.datetime.now() - datetime.timedelta(days=90)\n    end_date = datetime.datetime.now()\n    sql = 'SELECT * FROM trips WHERE date_of_trip >= %s AND date_of_trip <= %s'\n    \n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (start_date, end_date))\n        trips = cur.fetchall()\n        cur.close()\n        conn.close()\n        return trips\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Create a one-click web button with the following properties: font size of 20px; font color rgb(255, 0, 128); background-color #6790FF", "input": "", "output": "<button style=\"font-size: 20px; color: rgb(255, 0, 128); background-color: #6790FF;\">Click Here</button>", "category": "Python"}, {"instruction": "Write a for loop in Python which prints out the contents of the given stack.", "input": "sample_stack = [\"first\", \"second\", \"third\"]", "output": "for item in sample_stack:\n    print(item)", "category": "Python"}, {"instruction": "Write a Rust program to take an array of integers and print the sum of the elements in the array.", "input": "", "output": "fn main() {\n    let numbers = [1, 4, 6, 8];\n\n    let sum = 0;\n    for num in numbers.iter() {\n        sum += num;\n    }\n\n    println!(\"The sum of the elements in the array is {}\", sum);\n}", "category": "Python"}, {"instruction": "Generate C code that prints the result of multiplying two numbers.", "input": "int num1 = 10\nint num2 = 5", "output": "int num1 = 10;\nint num2 = 5;\nint result = num1 * num2;\n\nprintf(\"Result: %d\\n\", result);", "category": "Python"}, {"instruction": "Write an assembly language program to check if two given numbers are equal or not.", "input": "", "output": "MOV AX, 12  ; Move 12 to AX\nMOV BX, 12  ; Move 12 to BX\nCMP AX, BX  ; Compare AX and BX\nJE  Equal   ; Jump if equal\nJNE NotEqual ; Jump if not equal\n\nEqual:\n  ;Statements\n\nNotEqual:\n  ;Statements", "category": "Python"}, {"instruction": "Create a SQL query to select the records of the table with column value greater than 5.", "input": "", "output": "SELECT * FROM mytable WHERE mycolumn > 5;", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given RGB color to Hexadecimal format.", "input": "rgb_color = [255, 232, 154]", "output": "def rgb_to_hex(rgb_color):\n    hex_code = ''\n    for color in rgb_color:\n        hex_code += f'{color:02x}'\n    return hex_code\n\nhex_code = rgb_to_hex(rgb_color) # hex_code = \"ffe89a\"", "category": "Python"}, {"instruction": "Write code in Java for a user input prompt that states \"Please enter a number\".", "input": "", "output": "Scanner input = new Scanner(System.in);\n\nSystem.out.println(\"Please enter a number: \");\nint number = input.nextInt();", "category": "Python"}, {"instruction": "Print the number of elements present in a list in C.", "input": "int list[20] = {1, 4, 6, 8, 9};", "output": "int listLength = sizeof(list) / sizeof(list[0]);\nprintf(\"Number of elements in the list: %d \\n\", listLength);", "category": "Python"}, {"instruction": "Create a function in Javascript that accepts a string as an argument.", "input": "", "output": "function myFunction(str) {\n  // code here\n}", "category": "Python"}, {"instruction": "Write code to create a web server in Go.", "input": "", "output": "package main\n\nimport (\n\t\"net/http\"\n\t\"fmt\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handlerFunc)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc handlerFunc(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"<h1>Welcome to my Go web server!</h1>\")\n}", "category": "Python"}, {"instruction": "Construct a generic BST in Swift", "input": "", "output": "class Node<T> {\n    var value: T\n    weak var parent: Node?\n    var left: Node?\n    var right: Node?\n\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass BinarySearchTree<T: Comparable> {\n    fileprivate var root: Node<T>?\n\n    init(elements: [T]) {\n        for element in elements {\n            add(value: element)\n        }\n    }\n    // Add additional functions here \n}", "category": "Python"}, {"instruction": "Write code to print out the numbers from 0 to 10 using a for loop", "input": "", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Sort this list of tuples in ascending order by the first value of the tuple", "input": "tuple_list = [(3,4),(5,6),(7,1)]", "output": "sorted_list = sorted(tuple_list, key=lambda x: x[0])", "category": "Python"}, {"instruction": "Parse a JSON object and print out the elements.", "input": "data = {\n  'name': 'John Doe',\n  'age': 32,\n  'address': {\n    'street': '123 Main St',\n    'city': 'New York',\n    'zip': 10010\n  }\n}", "output": "import json\n\ndata = json.loads(data)\n\nprint('Name:', data['name'])\nprint('Age:', data['age'])\nprint('Street:', data['address']['street'])\nprint('City:', data['address']['city'])\nprint('Zip:', data['address']['zip'])", "category": "Python"}, {"instruction": "Create a function to detect even numbers.", "input": "", "output": "def is_even(number):\n  if (number % 2 == 0):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Return an error message when a user inputs a negative number.", "input": "", "output": "if (number < 0):\n  print('Error: Number cannot be negative.')", "category": "Python"}, {"instruction": "Create a function to return all the indices in a string where a given substring occurs.", "input": "", "output": "def find_substring(main_string, substring):\n  indices = []\n  position = -1\n  while True:\n    position = main_string.find(substring, position + 1)\n    if position == -1:\n      break\n    indices.append(position)\n  return indices", "category": "Python"}, {"instruction": "Write a Python program to compute and return a list that contains every possible combination of two given lists.", "input": "list1 = [1,2]\nlist2 = [3,4]", "output": "def combine_lists(list1,list2):\n  result = []\n  for i in list1:\n    for j in list2:\n      result.append([i,j])\n  return result", "category": "Python"}, {"instruction": "Using the given list of strings, create a function to count and return the number of capital letters in the list.", "input": "", "output": "def count_capital_letters(string_list):\n  count = 0\n  for string in string_list:\n    for char in string:\n      if char.isupper():\n        count += 1\n  return count", "category": "Python"}, {"instruction": "Given two data sets, one containing the user id (user_id) and first name (firstname) and another data set containing user_id and last name (lastname), write a Python function to join the two sets and create a new data set with firstname, lastname and user_id.", "input": "user_id: [1,3,4,7] \nfirstname: [\"John\", \"Alice\", \"Madison\", \"Peter\"] \nuser_id: [1,2,3,6]\nlastname: [\"Smith\", \"Jones\", \"Brown\", \"Miller\"]", "output": "def join_sets(user_id1, firstname, user_id2, lastname):\n    user_id = user_id1 + user_id2\n    names = firstname + lastname\n    result = []\n    for id in user_id:\n        firstname = [name for id, name in zip(user_id1, firstname) if id == id][0]\n        lastname = [name for id, name in zip(user_id2, lastname) if id == id][0]\n        result.append({\"user_id\": id, \"firstname\": firstname, \"lastname\": lastname})\n    return result", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to check if an object contains a specified key.", "input": "", "output": "function hasKey(obj, key) {\n    if(obj.hasOwnProperty(key)) {\n        return true;\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Write a Python function that prints the first n even numbers.", "input": "", "output": "def print_even_numbers(n):\n    for i in range(2, n*2, 2): \n        print(i)", "category": "Python"}, {"instruction": "Write a code snippet that reverses a string in JavaScript.", "input": "", "output": "function reverseString(str) {\n    strArray = str.split('');\n    reversedStrArray = strArray.reverse();\n    return reversedStrArray.join('');\n}", "category": "Python"}, {"instruction": "Explain what a cross-site scripting attack is.", "input": "", "output": "Cross-site scripting (XSS) is a type of web application security vulnerability in which an attacker injects malicious code into webpages viewed by other users. The malicious code is typically a client-side script that is executed on the user's browser, such as JavaScript, HTML, and VBScript. This type of attack allows attackers to steal user data, execute unauthorized code, and gain full control of the affected web page.", "category": "Python"}, {"instruction": "Suggest a completion to the following HTML code to add a link to a webpage.", "input": "<a", "output": "<a href=\"https://www.example.com\">Link</a>", "category": "Python"}, {"instruction": "Write a code snippet to loop through an array and check if the element is a number or not.", "input": "data = [1, 'a', 'b', 2]", "output": "for item in data:\n    if type(item) == int:\n        print(\"Element is a number!\")\n    else:\n        print(\"Element is not a number!\")", "category": "Python"}, {"instruction": "Create a function to represent a decimal number in its binary form.", "input": "", "output": "def decimal_to_binary(num):\n\nresult = \"\"\n\nwhile num > 0:\n remainder = num % 2 \n result = str(remainder) + result\n num = num // 2\n\nreturn result", "category": "Python"}, {"instruction": "Parse a given HTML document and find all elements with the given class name using JavaScript.", "input": "", "output": "let list = document.getElementsByClassName(\"classname\");\nlet elements = [];\nfor (let i = 0; i < list.length; i++) {\n  elements.push(list[i]);\n}\n\nconsole.log(elements);", "category": "Python"}, {"instruction": "Generate a function that computes the sum of the numbers in a given list.", "input": "", "output": "def compute_sum(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Print out the values in the following dictionary.", "input": "my_dict = {\n  'name': 'John Doe',\n  'age': 32,\n  'city': 'New York'\n}", "output": "print('Name:', my_dict['name'])\nprint('Age:', my_dict['age'])\nprint('City:', my_dict['city'])", "category": "Python"}, {"instruction": "Create a class to store student names, ages and grades.", "input": "", "output": "class Student:\n  def __init__(self,name,age,grade):\n    self.name = name\n    self.age = age\n    self.grade = grade\n\n  def get_name(self):\n    return self.name\n\n  def set_name(self,name):\n    self.name = name\n\n  def get_age(self):\n    return self.age\n\n  def set_age(self,age):\n    self.age = age\n\n  def get_grade(self):\n    return self.grade\n\n  def set_grade(self,grade):\n    self.grade = grade", "category": "Python"}, {"instruction": "Write a Python program to find all the Armstrong numbers between the given two numbers. An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself.", "input": "lower = 100\nupper = 2000", "output": "def isArmstrong(num):\n s = 0\n temp = num\n while temp > 0:\n digit = temp % 10\n s += digit ** 3\n temp //= 10\n if num == s:\n return True\n else:\n return False\n\nfor num in range(lower, upper + 1):\n if isArmstrong(num):\n print(num)", "category": "Python"}, {"instruction": "Make a class in Python which will represent a binary search tree.", "input": "", "output": "class BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)", "category": "Python"}, {"instruction": "Create a CSS program to apply a blue border to all <div> elements", "input": "", "output": "div {\n    border: 2px solid blue;\n}", "category": "Python"}, {"instruction": "Design a simple HTML page using standard HTML tags which contains an input box, a button and an output section", "input": "", "output": "<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n        <div>\n            <input type=\"text\" id=\"input\">\n            <button type=\"submit\" onclick=\"output()\">Submit</button>\n        </div>\n        <div id=\"output\"></div>\n        <script>\n            function output() {\n               output.innerHTML = inp.value;\n            }\n        </script>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a Python script that find the number of occurrences of a specific word in a given sentence.", "input": "This is a sample sentence.", "output": "sentence_input = \"This is a sample sentence.\"\n\ndef count_keyword(sentence_input, keyword):\n    return sentence_input.lower().count(keyword.lower())\n\ncount = count_keyword(sentence_input, \"sentence\")\nprint(\"The word 'sentence' occurs \" + str(count) + \" times.\")", "category": "Python"}, {"instruction": "Change the following regular expression so that it matches terms beginning with 'g'", "input": "^g", "output": "^g\\w+", "category": "Python"}, {"instruction": "Design an HTML page using standard HTML tags which contains a heading and two paragraphs", "input": "", "output": "<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n        <h1>Heading</h1>\n        <p>Paragraph 1</p>\n        <p>Paragraph 2</p>\n    </body>\n</html", "category": "Python"}, {"instruction": "Write a Bash script that prints numbers from 0 to 10 three times.", "input": "", "output": "for i in {1..3}; do\n    for num in $(seq 0 10); do\n        echo \"$num\"\n    done\ndone", "category": "Python"}, {"instruction": "Using regular expressions, extract all telephone numbers from a given string in JavaScript.", "input": "", "output": "let string = \"My telephone numbers are 123-456-7890 and 012-345-6789\";\n\nlet regex = /\\d{3}-\\d{3}-\\d{4}/g;\nlet numbers = string.match(regex);\n\nconsole.log(numbers);", "category": "Python"}, {"instruction": "Construct a loop to print numbers from 1 to 10 using a while loop in Python.", "input": "", "output": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create a regular expression pattern to detect valid 4-digit numeric codes", "input": "", "output": "^\\d{4}$", "category": "Python"}, {"instruction": "Create a for loop in PHP to iterate over an array and output a result for each item.", "input": "myArray = [\"apple\", \"banana\", \"pear\"]", "output": "<?php\nforeach($myArray as $item) {\n    echo \"I like \" . $item . \"<br>\";\n}\n?>", "category": "Python"}, {"instruction": "Convert this time to the 12-hour time format.", "input": "16:47", "output": "4:47 PM", "category": "Python"}, {"instruction": "Calculate the square root of a number using bisection search.", "input": "number = 9", "output": "low = 0\nhigh = number\nanswer = (high + low) / 2\n#Store the difference between the answer and the number\ndiff = (answer ** 2) - number\n#Loop until the difference is within a very small tolerance\nwhile abs(diff) > 0.00001:\n    if diff > 0:\n        #the answer is too high\n        high = answer\n    else:\n        #the answer is too low\n        low = answer\n    #compute a new answer\n    answer = (high + low) /2\n    #and compute a new diff\n    diff = (answer ** 2) - number\nprint(answer)", "category": "Python"}, {"instruction": "Use the Python built-in function filter() to find all numbers divisible by 5.", "input": "mylist = [10, 21, 32, 45, 56, 77]", "output": "list(filter(lambda x: (x % 5 == 0), mylist))", "category": "Python"}, {"instruction": "Write a Python function to check if a number is perfect or not. A number is said to be a perfect number if its sum of divisors is equal to itself.", "input": "", "output": "def is_perfect(n):\n s = 0\n for i in range(1, n):\n if n % i == 0:\n s += i\n return s == n", "category": "Python"}, {"instruction": "Write a virtual assistant in Python to gauge the sentiment of a given string.", "input": "string = \"I had a terrible day\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(string):\n sid = SentimentIntensityAnalyzer()\n snt = sid.polarity_scores(string)\n return snt[\"compound\"]\n\nsentiment_analyzer(string)", "category": "Python"}, {"instruction": "Complete the following code to fetch data from the \"employees\" table using an SQL query.", "input": "SELECT * FROM", "output": "SELECT * FROM employees", "category": "Python"}, {"instruction": "Find the number of times the element 2 appears in the following array", "input": "arr = [2, 3, 5, 7, 2, 6, 2]", "output": "count = 0\nfor num in arr:\n    if num == 2:\n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Implement the longest common subsequence algorithm in C.", "input": "", "output": "#include<stdio.h> \n#include<string.h> \n\nint lcs( char *X, char *Y, int m, int n ) \n{ \n    int L[m + 1][n + 1]; \n    int i, j; \n  \n    /* Following steps build L[m + 1][n + 1] in \n       bottom up fashion. Note that L[i][j] \n       contains length of LCS of X[0..i-1] \n       and Y[0..j-1] */\n    for (i = 0; i <= m; i++) { \n        for (j = 0; j <= n; j++) { \n            if (i == 0 || j == 0) \n                L[i][j] = 0; \n  \n            else if (X[i - 1] == Y[j - 1]) \n                L[i][j] = L[i - 1][j - 1] + 1; \n  \n            else\n                L[i][j] = max(L[i - 1][j], L[i][j - 1]); \n        } \n    } \n  \n    /* L[m][n] contains length of LCS \n    for X[0..n-1] and Y[0..m-1] */\n    return L[m][n]; \n} \n\n/* Driver program to test above function */\nint main() \n{ \n    char X[20] = \"ABCDEFG\"; \n    char Y[15] = \"ABREGF\"; \n  \n    int m = strlen(X); \n    int n = strlen(Y); \n  \n    printf(\"The length of the LCS is %d\", \n      lcs( X, Y, m, n ) ); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Implement a search algorithm in C++ that takes in a list of integers and a target value and finds the index of the target if it exists in the list.", "input": "List: [2, 4, 6, 8, 10], Target: 8", "output": "// C++ Program to implement Search \n#include <bits/stdc++.h> \nusing namespace std; \n  \n// function to implement search \nint search(vector <int> list, int x) \n{ \n    // traversing the list \n    for (int i = 0; i<list.size(); i++) \n        if (list.at(i) == x) \n           return i; \n  \n    return -1; \n} \n  \n// driver code \nint main() \n{ \n    vector <int> list({2, 4, 6, 8, 10}); \n    int x = 8; \n    int index = search(list, x); \n    if (index != -1) \n       cout << \"Element found at index \" << index; \n    else\n       cout << \"Element not found\"; \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a bash script to print the length of the longest string in an array.", "input": "array = [\"Hello\", \"World\", \"Natasha\"]", "output": "#!/bin/bash\n\narray=(\"Hello\" \"World\" \"Natasha\")\narray_elements=${#array[@]}\nmax_length=0 \n\nfor i in `seq 0 $(($array_elements-1))`; do\nlength=${#array[$i]}\n\nif [ \"$length\" -gt \"$max_length\" ]; then\n max_length=$length\n fi\ndone\n\necho \"The length of the longest string is $max_length\"", "category": "Python"}, {"instruction": "Write a query statement to find all employees who joined in the last 5 years.", "input": "", "output": "SELECT *\nFROM Employees\nWHERE JoinDate BETWEEN DATEADD(year, -5, GETDATE()) AND GETDATE()", "category": "Python"}, {"instruction": "Create a string parameter with a default value in golang.", "input": "", "output": "myString := flag.String(\"name\", \"Default Value\", \"description\")", "category": "Python"}, {"instruction": "Generate a random string of a given length using different uppercase, lowercase characters, and digits.", "input": "", "output": "import string\nimport random\n\ndef random_string(length):\n    characters = string.ascii_letters + string.digits \n    return ''.join(random.choice(characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(random_string(10))", "category": "Python"}, {"instruction": "Write a code to print the power of 2 up to the given limit.", "input": "8", "output": "def power_of_two(n):\n    for i in range(0,n):\n        print(2**i,end=\" \")\n\nif __name__ == '__main__':\n    power_of_two(8)", "category": "Python"}, {"instruction": "Write an algorithm to determine if an input string is a palindrome.", "input": "racecar", "output": "def is_palindrome(string):\n      string = string.lower()\n      rev_string = string[::-1]\n      if string == rev_string:\n          return True\n      return False\n\nif __name__ == '__main__':\n  print(is_palindrome('racecar'))", "category": "Python"}, {"instruction": "Generate a unique 8 character string that contains a lowercase letter, an uppercase letter, a numerical digit, and a special character.", "input": "", "output": "import string\nimport random\n\ndef random_password_string():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.sample(characters, 8))\n    return password\n\nif __name__ == '__main__':\n    print(random_password_string())", "category": "Python"}, {"instruction": "Write a Python function to generate a random integer in the range of 1 to 10.", "input": "", "output": "import random\n\ndef random_int_1_10():\n    return random.randint(1, 10)\n\n\nif __name__ == '__main__':\n    print(random_int_1_10())", "category": "Python"}, {"instruction": "Create a Python code for printing the following pattern.", "input": "", "output": "# Pattern \nfor i in range(1,6):\n for j in range(1,i+1):\n  print(i,end=\"\")\n print(\"\")", "category": "Python"}, {"instruction": "Create a Java program to delete an element for a given position in an array.", "input": "[1, 3, 5, 6, 8], position=2", "output": "public static int[] deleteElement(int[] arr, int pos) {\n int n = arr.length;\n int i;\n \n // Removing the element at a given position\n for (i = pos; i < n - 1; i++)\n  arr[i] = arr[i+1];\n \n // Returning the resulting array\n return arr;\n}\n\npublic static void main(String[] args) {\n int[] arr = {1, 3, 5, 6, 8};\n int pos = 2;\n int[] new_arr = deleteElement(arr, pos);\n \n System.out.println(\"Array after deletion:\");\n for(int i=0; i<new_arr.length; i++)\n  System.out.print(new_arr[i]+\" \");\n}", "category": "Python"}, {"instruction": "Create an HTML page with a heading and two paragraphs.", "input": "", "output": "<!DOCTYPE html>\n<html>\n <head>\n  <title>My Page</title>\n </head>\n \n <body>\n  <h1>Welcome</h1>\n  <p>This is the first paragraph in my page.</p>\n  <p>This is the second paragraph in my page.</p>\n </body>\n\n</html>", "category": "Python"}, {"instruction": "Write a Python code that prints out the following patterns:", "input": "", "output": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")", "category": "Python"}, {"instruction": "Write a regular expression to match any sequence of digits (ex. 10, 01, 025 ZCZ)", "input": "", "output": "pattern = r'^\\d+$'", "category": "Python"}, {"instruction": "Design a basic game of rock, paper, scissors", "input": "", "output": "import random\n\ndef game():\n    options = ['rock', 'paper', 'scissors']\n\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")", "category": "Python"}, {"instruction": "Analyze the syntax of the sentence", "input": "This sentence is an example of an imperative statement", "output": "This sentence is an example of an imperative statement, which is an order or command given to someone to do something. The subject of the imperative sentence, \"This sentence\", is in the third person and the verb, \"is\", is in the present tense.", "category": "Python"}, {"instruction": "Train a logistic regression classifier on the given dataset.", "input": "[Dataset details]\n\nThis dataset contains information on Belgian bank customers, including their credit score and risk profile. It consists of 1000 rows and 5 columns. The columns are:\n- Age\n- Credit Score\n- Gender\n- Risk Profile\n- Status", "output": "model = LogisticRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Implement a neural network in Keras to solve the given classification problem.", "input": "[Problem description]\n\nGiven a dataset of images containing cats and dogs, create a neural network in Keras to classify the images into one of the two categories.", "output": "model = Sequential() \nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Flatten()) \nmodel.add(Dense(512, activation='relu')) \nmodel.add(Dense(1, activation='sigmoid')) \n\nmodel.compile(loss='binary_crossentropy', optimizer=RMSprop(lr=1e-4), metrics=['acc'])", "category": "Python"}, {"instruction": "Analyze the following data in R and identify the mean, median and mode of the data.", "input": "[Data]\n\n[2, 3, 5, 6, 4, 1, 3, 6, 4]", "output": "The mean of the data is 3.77, the median is 4 and the mode is 3.", "category": "Python"}, {"instruction": "Describe the following heuristic optimization algorithm.", "input": "[Algorithm Name] \nHill Climbing Algorithm", "output": "Hill climbing is a heuristic optimization algorithm that starts with a random solution and gradually iterates over it to find the best solution. In each iteration, the algorithm looks for its neighbors and checks if they are better than the current solution. If so, then the algorithm moves to its neighbor and repeats the same process iteratively. It will terminate when it reaches the local optimum solution.", "category": "Python"}, {"instruction": "Determine the most efficient way to sort a complex data structure using Java.", "input": "[3, 4, 2, 7, 9, 1, 5]", "output": "public  void swap(int[] arr, int i, int j) {\n  int temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n} \n \npublic void quickSort(int[] arr, int start, int end) {\n  if (start < end) {\n    int partitionIndex = partition(arr, start, end);\n \n    quickSort(arr, start, partitionIndex-1);\n    quickSort(arr, partitionIndex+1, end);\n  }\n}\n \npublic int partition(int[] arr, int start, int end) {\n  int pivot = arr[end];\n  int i = start-1;\n \n  for (int j = start; j < end; j++) {\n    if (arr[j] <= pivot) {\n      i++;\n      swap(arr, i, j);\n    }\n  }\n \n  swap(arr, i+1, end);\n \n  return i+1;\n}", "category": "Python"}, {"instruction": "Create a React component that accepts a string as a parameter and prints it in the console.", "input": "", "output": "class StringPrinter extends React.Component{\n  render(){\n    console.log(this.props.string);\n    return null;\n  }\n}", "category": "Python"}, {"instruction": "Write a code to check for a valid zip code in US.", "input": "", "output": "def is_valid_zip_code(zip_code):\n    \"\"\" Function to check whether the given zip code is valid in the US \"\"\"\n    valid_zip_code_pattern = re.compile(r\"^[0-9]{5}(?:-[0-9]{4})?$\")\n    if valid_zip_code_pattern.match(zip_code):\n        return True\n    return False\n\n# Let's test it\nzip_code = \"12345\"\nprint(is_valid_zip_code(zip_code)) # Output: True", "category": "Python"}, {"instruction": "Write a code to extract all the hyperlinks from a Wikipedia page.", "input": "", "output": "# Importing necessary libraries\nimport bs4\nimport requests\n\n# Fetching the data\nurl = \"https://en.wikipedia.org/wiki/Main_Page\"\nresponse = requests.get(url)\nsoup = bs4.BeautifulSoup(response.text)\n\n# Extracting hyperlinks\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Printing all hyperlinks present in the page\nprint(links)", "category": "Python"}, {"instruction": "Create a function that takes two parameters and returns an array with those two numbers in it.", "input": "", "output": "def create_array(param1, param2):\n    \"\"\"A function that takes two parameters and returns an array with those two numbers in it.\"\"\"\n    arr = [param1, param2]\n    return arr\n\n# Let's test it\narr = create_array(1, 5)\nprint(arr) # Output: [1, 5]", "category": "Python"}, {"instruction": "Write a code to classify emails as spam or not-spam using Naive Bayes algorithms.", "input": "", "output": "# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Loading the dataset\ndf = pd.read_csv('emails.csv')\n\n# Feature engineering\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['message'])\ny = df['label']\n\n# Training the model\nnb = MultinomialNB()\nnb.fit(X,y)\n\n# Classification \nexample_emails = [\"You won the lottery!\", \"I need some help with my homework\"]\nX_example = vectorizer.transform(example_emails)\npredicted_labels = nb.predict(X_example)\nprint(predicted_labels) # Output: [spam, not-spam]", "category": "Python"}, {"instruction": "Cut a string of characters at every fourth character.", "input": "string = \"Hello World!\"", "output": "# Create an empty string\ncut_string = \"\"\n\n# Loop over the string\nfor i in range(0, len(string), 4):\n    cut_string += string[i]\n\nprint(cut_string) # Output: Hoeo!", "category": "Python"}, {"instruction": "Transform a given XML document into a JSON object using Python.", "input": "", "output": "import xmltodict\n\n# open the XML document\nwith open(\"document.xml\") as f:\n  xml_data = f.read()\n\n# convert to json\njson_data = xmltodict.parse(xml_data)\n\n# print the JSON object\nprint(json.dumps(json_data, indent=2))", "category": "Python"}, {"instruction": "Write a script in Python to take an age as an input and return a boolean which indicates if a person is a minor or not.", "input": "", "output": "def is_minor(age):\n    \"\"\"\n    Function to determine if a person is a minor or not\n    \"\"\"\n    if age < 18:\n        return True\n    else:\n        return False\n\n# Let's test it\nage = 18\nprint(is_minor(age)) # Output: False", "category": "Python"}, {"instruction": "Generate a HTTP request using Python to send a GET request to https://www.wikihow.com/Main-Page", "input": "", "output": "import requests\n\nurl = 'https://www.wikihow.com/Main-Page'\n\nresponse = requests.get(url)\n\nprint(response)", "category": "Python"}, {"instruction": "Write SQL query to select all rows where the date value is in past 5 days.", "input": "", "output": "SELECT * \nFROM table_name \nWHERE date_col >= DATE_SUB(CURDATE(), INTERVAL 5 DAY);", "category": "Python"}, {"instruction": "Using Haskell, implement a function to calculate the sum of numbers from 1 to the given number.", "input": "", "output": "sumOfNums :: Integer -> Integer\nsumOfNums n = sum [1 .. n]", "category": "Python"}, {"instruction": "Write a Bash script to check if a given password matches the given regular expression.", "input": "Regular expression: ^[0-9][A-Z]+$\nPassword: 123ABC", "output": "#!/bin/bash\n\nif [[ \"$1\" =~ ^[0-9][A-Z]+$ ]]; then\n    echo \"Password matches the regular expression\"\nelse\n    echo \"Password does not match the regular expression\"\nfi", "category": "Python"}, {"instruction": "Write an assembly language program to check if a given number is least in its sequence.", "input": "", "output": ".model small\n.stack 100h\n.data\n\nnum dw 5 \n.code\n\nstart:\nmov ax, @data\nmov ax, num\ncmp ax, [num+2] ; compare current number with the next number\njbe least ; if current number is lesser or equal jump to least \n\n;code to print least number\nleast:\nmov ah, 9\nmov dx, offset num\nint 21h\n\nmov ah, 4Ch\nint 21h\nend start", "category": "Python"}, {"instruction": "Using HTML and JavaScript, implement a drag and drop feature.", "input": "", "output": "<script>\nfunction dragStart(event){\n    event.dataTransfer.setData(\"Text\", event.target.id);\n    event.dataTransfer.dropEffect = \"move\";\n}\n\nfunction allowDrop(event) {\n    event.preventDefault();\n}\n\nfunction drop(event) {\n    event.preventDefault();\n    var data = event.dataTransfer.getData(\"Text\");\n    event.target.appendChild(document.getElementById(data));\n}\n</script>\n\n<div id=\"drag1\" draggable=\"true\" ondragstart=\"dragStart(event)\">Drag Me</div>\n<div id=\"drop1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">Drop Here</div>", "category": "Python"}, {"instruction": "Write a SQL statement to insert a new record into the table.", "input": "[Table Name] \nEmployees", "output": "INSERT INTO Employees (column list) VALUES (value list);", "category": "Python"}, {"instruction": "Create a dictionary and explore its functionality by finding the keys in the dictionary.", "input": "dictionary = {'name': 'John', 'age': 28}", "output": "dictionary = {'name': 'John', 'age': 28}\n\n# To find the keys in dictionary\nkeys_in_dictionary = dictionary.keys()\nprint(keys_in_dictionary) # Output: dict_keys(['name', 'age'])", "category": "Python"}, {"instruction": "Construct a loop in Swift to find duplicate numbers in an array.", "input": "", "output": "func FindDuplicates(arr: [Int])  -> [Int] {\n\tvar seenNumbers = Set<Int>()\n\tvar duplicateValues = [Int]()\n \n\tfor number in arr {\n\t\tif seenNumbers.contains(number) {\n\t\t\tduplicateValues.append(number)\n\t\t} else {\n\t\t\tseenNumbers.insert(number)\n\t\t}\n\t}\n \n\treturn duplicateValues\n}", "category": "Python"}, {"instruction": "How can we improve the following code?", "input": "def multiply(x, y):\n    z = 0\n    for i in range(y): \n        z += x\n    return z", "output": "We can improve the code by adding an additional parameter to multiply() to check for a zero value of y. This additional \"check\" parameter will immediately return 0 if the value of y is 0, reducing the time complexity. Additionally, we can also remove the for loop and replace it with a multiplication operator to speed up the process. The updated code would look like: \n\ndef multiply(x, y, check = False):\n    if check and y == 0 : return 0\n    return x*y", "category": "Python"}, {"instruction": "Describe the programming language used for the given project", "input": "Project: Building an e-commerce website using Django.", "output": "The programming language used for the project is Python with Django web framework. Django is an open source framework for developing web applications. It uses the Model-View-Template architecture pattern for developing web applications. It provides useful features like built-in admin interface, secure authentication and authorization, support for AJAX and Python libraries.", "category": "Python"}, {"instruction": "Using SQL, write a query to find the total salary of employees in the Employee table", "input": "Table:\n| EmployeeID | Name  | Salary |\n|------------|-------|--------|\n| 1          | John  | 1000   |\n| 2          | David | 2000   |\n| 3          | Mark  | 1500   |", "output": "SELECT SUM(Salary)\nFROM Employee;", "category": "Python"}, {"instruction": "How does a try-except block work in Python?", "input": "", "output": "A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code.", "category": "Python"}, {"instruction": "Explain what the yield keyword does in Python.", "input": "", "output": "The yield keyword in Python is used to create an iterator. When a function containing yield is called, it does not execute the code as a normal function would, instead it returns a generator object which is an iterator. Each time next() is called on the iterator, the yield statement is executed and returns a value. The execution of the function can be stopped at any point using the yield statement and the function can save the state of its variables when a yield statement is encountered, allowing it to be resumed after all the values have been generated.", "category": "Python"}, {"instruction": "What is a for loop?", "input": "", "output": "A for loop is a programming structure used to repeat a specific set of instructions for a given number of times or until a specified condition is met. The syntax of a for loop is \"for <variable> in <sequence>:\" and the format is \"for <variable> in range(<start_value>, <end_value>):\" where the start and end value are optional. The code within the loop will be executed until the given condition is met, or the loop is terminated with a break command.", "category": "Python"}, {"instruction": "Develop a for loop to write a program to print the first 5 prime numbers", "input": "", "output": "count = 0 # to count the number of prime numbers\n\nfor num in range(1,100):  \n\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           count += 1\n       if count == 5:\n           break", "category": "Python"}, {"instruction": "Create a function to do a binary search on a sorted list of integers.", "input": "nums = [2, 4, 5, 7, 8, 9, 10, 14]", "output": "def binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 # target is not found", "category": "Python"}, {"instruction": "Parse an HTML table and extract all the rows.", "input": "<table>\n    <tr>\n        <td>Row 1 - Column 1</td> \n        <td>Row 1 - Column 2</td>\n    </tr>\n    <tr>\n        <td>Row 2 - Column 1</td>\n        <td>Row 2 - Column 2</td>\n    </tr>\n</table>", "output": "\"\"\"\nParse an HTML table and extract all the rows.\n\"\"\"\n\nimport re\n\ndef get_table_rows(html):\n    pattern = re.compile('<tr>(.*?)</tr>', re.DOTALL)\n    rows = re.findall(pattern, html)\n    return rows\n\nif __name__ == '__main__':\n    html = \"\"\"\n    <table>\n        <tr>\n            <td>Row 1 - Column 1</td> \n            <td>Row 1 - Column 2</td>\n        </tr>\n        <tr>\n            <td>Row 2 - Column 1</td>\n            <td>Row 2 - Column 2</td>\n        </tr>\n    </table>\n    \"\"\"\n    rows = get_table_rows(html)\n    print(rows)", "category": "Python"}, {"instruction": "Write a function to find the average of given numbers using a list.", "input": "nums = [2, 4, 6, 8]", "output": "\"\"\"\nWrite a function to find the average of given numbers using a list\n\"\"\"\n\ndef find_average(nums):\n    return sum(nums) / len(nums)\n    \nif __name__ == '__main__':\n    nums = [2, 4, 6, 8]\n    print(find_average(nums))", "category": "Python"}, {"instruction": "Implement a Wiki page title search using Python.", "input": "Search string: \"Machine Learning\"", "output": "\"\"\"\nImplement a Wiki page title search using Python\n\"\"\"\n\nimport wikipedia\n\ndef search_wiki_title(search_string):\n    try:\n        wikipedia.set_lang(\"en\")\n        result = wikipedia.search(search_string)[0]\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        result = None\n    return result\n\nif __name__ == '__main__':\n    search_string = input('Search string: ')\n    result = search_wiki_title(search_string)\n    print(result)", "category": "Python"}, {"instruction": "Make a function which takes two numbers as arguments and returns their sum.", "input": "", "output": "\"\"\"\nFunction which takes two numbers as arguments and returns their sum\n\"\"\"\n\ndef add_numbers(x, y):\n    return x + y\n    \nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    print(add_numbers(x, y))", "category": "Python"}, {"instruction": "Compute a factorial of a given integer.", "input": "5", "output": "\"\"\"\nCompute a factorial of a given integer\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(factorial(n))", "category": "Python"}, {"instruction": "Update the code to ensure that an error is raised if the input is the wrong type.", "input": "def age_calc(age):\n return age + 5", "output": "def age_calc(age):\n if not isinstance(age, int):\n raise TypeError(\"Input for age calculation must be int\")\n return age + 5", "category": "Python"}, {"instruction": "Update the code so that it only prints out the lines which contain the word \u201cprint\u201d.", "input": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"", "output": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"\n\n# updated code\nlines = src_code.splitlines()\n\nfor line in lines:\n if \"print\" in line:\n print(line)", "category": "Python"}, {"instruction": "Rewrite the code to be more concise and efficient.", "input": "def find_min(arr):\n min_val = float('inf')\n for i in arr:\n if i < min_val:\n min_val = i\n return min_val", "output": "def find_min(arr):\n return min(arr)", "category": "Python"}, {"instruction": "Add a parameter to the function to calculate the area of a triangle.", "input": "def calculate_area(length, width):\n return length * width", "output": "def calculate_area(length, width, height):\n return 0.5 * (length * width + length * height + width * height)", "category": "Python"}, {"instruction": "Create a for loop in Java to print out the integers from 10 to 1 in decreasing order.", "input": "", "output": "for(int i=10; i>=1; i--)\n{\n    System.out.println(i);\n}", "category": "Python"}, {"instruction": "If a pandas dataframe has five columns and four rows, what is the shape of the dataframe?", "input": "", "output": "The shape of the pandas dataframe would be (4, 5).", "category": "Python"}, {"instruction": "Compute the following expression in Java.", "input": "5 + 10 * 3", "output": "int result = 5 + (10 * 3); \nSystem.out.println(result); \n// Output: 35", "category": "Python"}, {"instruction": "Write a class in Java that contains two method to add and subtract two numbers.", "input": "", "output": "public class Calculator\n{\n    public int add(int a, int b)\n    {\n        return a + b;\n    }\n \n    public int subtract(int a, int b)\n    {\n        return a - b;\n    }\n}", "category": "Python"}, {"instruction": "Reverse the given list using python.", "input": "list_to_reverse = [2, 3, 5, 6, 8, 10, 11]", "output": "def reverse_list(input_list):\n    \"\"\"Return a reversed copy of the list\"\"\"\n    return input_list[::-1]", "category": "Python"}, {"instruction": "Generate a random unique ID and store it in a variable.", "input": "", "output": "import uuid\n\nrandom_id = uuid.uuid4()", "category": "Python"}, {"instruction": "Write a basic routine that takes in a JSON string and outputs the longest word found inside.", "input": "data = '{\"John\": 56, \"Ann\":64, \"Victor\": 23}'", "output": "def get_longest_word(json_string):\n    \"\"\"Return the longest word found inside the given json_string\"\"\"\n    words = []\n    data = json.loads(json_string)\n    for key,val in data.items():\n        words.append(key)\n    return max(words, key=len)", "category": "Python"}, {"instruction": "Given the following list of strings:\n\nlist_str  = [\"one\", \"two\", \"three\", \"four\", \"five\"]\n\nWrite a program that prints out the strings in uppercase.", "input": "", "output": "for i in list_str:\n  print(i.upper())", "category": "Python"}, {"instruction": "Shorten the following URL using bitly.", "input": "https://www.example.com/ohAIbQ", "output": "http://bit.ly/3fj3C6U", "category": "Python"}, {"instruction": "Convert the following number from decimal to hexadecimal.", "input": "243", "output": "f3", "category": "Python"}, {"instruction": "Provide the month that is 6 months after June.", "input": "", "output": "December", "category": "Python"}, {"instruction": "Write a Python function which takes a number as an argument and print \"even\" if the number is even and print \"odd\" if the number is odd.", "input": "", "output": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")", "category": "Python"}, {"instruction": "Parse the following JSON data and extract the \"name\" field.", "input": "{\n  \"id\": 12345,\n  \"name\": \"John Smith\",\n  \"age\": 30\n}", "output": "import json\n\ndata = '{ \"id\": 12345, \"name\": \"John Smith\", \"age\": 30 }'\n\njson_data = json.loads(data)\n\nname = json_data[\"name\"]\n\nprint(name)\n\n# Output: John Smith", "category": "Python"}, {"instruction": "Create a function to find out if a number is even", "input": "", "output": "def isEven(n): \n    if (n % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Preprocess a natural language text for text classification.", "input": "Text: \u201cThe food I ate yesterday was really amazing. I loved the entire experience.\u201d", "output": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n\n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n\n# remove digits \ntext = re.sub(r'\\d+','',text) \n\n# Tokenization \ntokens = word_tokenize(text) \n\n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n\n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \n\nprint(lemmatized_word)", "category": "Python"}, {"instruction": "Find physical address of the code.", "input": "Code: 0x7fff2ceb5de5", "output": "The physical address of the code is 18446744071421161285.", "category": "Python"}, {"instruction": "Create a script to count the number of alphabets, digits and special characters in a string.", "input": "String = \"Hello World 123$%^&\"", "output": "string = \"Hello World 123$%^&\"\nalphabets = 0\ndigits = 0\nspecial_characters = 0\n \nfor i in range(0, len(string)): \n    if ((string[i] >= 'a' and string[i] <= 'z') or (string[i] >= 'A' and string[i] <= 'Z')): \n        alphabets = alphabets + 1\n    elif (string[i] >= '0' and string[i] <= '9'): \n        digits = digits + 1\n    else: \n        special_characters = special_characters + 1\n \nprint(\"Alphabets:\", alphabets) \nprint(\"Digits:\", digits) \nprint(\"Special Characters:\", special_characters)", "category": "Python"}, {"instruction": "Change the HTML element to have a font size of 10px", "input": "<p>Hello World!</p>", "output": "<p style=\"font-size:10px;\">Hello World!</p>", "category": "Python"}, {"instruction": "Alter the code to include a break statement in the loop.", "input": "for i in range(0, 10):\n    print(\"The number is \" + str(i))", "output": "for i in range(0, 10):\n    print(\"The number is \" + str(i))\n    if i == 5:\n        break", "category": "Python"}, {"instruction": "Develop a class in Python to print the name and age of the user.", "input": "Name:\"John\", Age:\"25\"", "output": "class Hello: \n    def __init__(self,name,age): \n        self.name = name\n        self.age = age\n    \n    def printNameAge(self): \n        print(\"Name:\", self.name, \"Age:\", self.age)\n  \nobj1 = Hello(\"John\", 25) \nobj1.printNameAge()", "category": "Python"}, {"instruction": "Create a SQL table with 3 columns", "input": "", "output": "CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype\n);", "category": "Python"}, {"instruction": "Create a string variable from a tuple.", "input": "tuple_to_string = (\"This\", \"is\", \"a\", \"tuple\")", "output": "string_from_tuple = \" \".join(tuple_to_string)", "category": "Python"}, {"instruction": "Break down the given code into its individual parts.", "input": "def square_sum(x, y):\n return x*x + y*y", "output": "def square_sum(x, y):\n return x * x + y * y\n\n# Break down code\n# part 1\ndef square_sum(x, y):\n# part 2\n return x * x + y * y\n# part 3\n# return calculated value", "category": "Python"}, {"instruction": "Convert a code written in Python 3 into code compatible with Python 2.", "input": "input = int(input('Enter your number: '))", "output": "import sys\nif sys.version_info.major == 3:\n input = int(input('Enter your number: '))\nelse:\n input = int(raw_input('Enter your number: '))", "category": "Python"}, {"instruction": "Write a Java code to read a string from the user and print it reversed.", "input": "", "output": "import java.util.Scanner;\n\npublic class ReverseString \n{\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = in.nextLine();\n        in.close();\n\n        char[] arr = str.toCharArray();\n\n        for (int i = arr.length - 1; i >= 0; i--) \n        {\n            System.out.print(arr[i]);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write a Node.js code to get a list of the most starred Node.js repositories on github in the last month.", "input": "", "output": "const axios = require('axios');\n  \naxios.get('https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc&per_page=100')\n  .then(function (response) {\n    let repos = response.data.items.filter(repo =>\n      repo.language === 'JavaScript' &&\n      new Date(repo.created_at).getTime() > Date.now() - 30*24*60*60*1000\n    );\n  \n    repos.forEach(repo => {\n      console.log(repo.name)\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });", "category": "Python"}, {"instruction": "Execute this JavaScript Promise chain and explain the output.", "input": "new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(1);\n  }, 1000);\n}).then((result) => {\n  console.log(result); // 1\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(result * 2);\n    }, 1000);\n  });\n}).then((result) => {\n  console.log(result); // 2\n  return result * 2;\n}).then((result) => {\n  console.log(result); // 4\n});", "output": "This JavaScript promise chain prints out the following output:\n1\n2\n4\n\nThe first console.log() logs the result of the first promise when it resolves, which is the number 1.\n\nThe second console.log() logs the result of the second promise when it resolves, which is the number 2 (1 * 2).\n\nThe third console.log() logs the result of the final promise when it resolves, which is the number 4 (2 * 2).", "category": "Python"}, {"instruction": "Create a HTML form with an email input field.", "input": "", "output": "<form>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" placeholder=\"Email\"/>\n  <input type=\"submit\" value=\"Submit\"/>\n</form>", "category": "Python"}, {"instruction": "Create a JSON object to represent a profile deleted from a social platform.", "input": "", "output": "{\n \"deleted\": true,\n \"name\": \"John Doe\",\n \"email\": \"john.doe@example.com\",\n \"age\": 32,\n \"gender\": \"Male\"\n}", "category": "Python"}, {"instruction": "Create a CSS class to style an anchor tag.", "input": "", "output": ".styled-link {\n  color: #00b3e6;\n  text-decoration: none;\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write a Node.js server program to handle HTTP requests to a web page.", "input": "", "output": "const http = require('http');\n\nconst requestListener = function (req, res) {\n  res.end('Hello World!');\n};\n\nconst server = http.createServer(requestListener);\nserver.listen(3000);", "category": "Python"}, {"instruction": "Create a array of objects in JavaScript.", "input": "", "output": "let arrayObjects = [\n {name: 'Spike', age: 6},\n {name: 'Spot', age: 4},\n {name: 'Max', age: 2},\n {name: 'Fluffy', age: 8}\n];", "category": "Python"}, {"instruction": "Write an HTML program to display a web page with a table, a heading, and a div", "input": "", "output": "<html>\n<head>\n  <title> Sample Table </title>\n</head>\n<body>\n  <h1>My Sample Table</h1>\n  <table>\n    <thead>\n      <tr>\n        <th>Col1</th>\n        <th>Col2</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Row1Value1</td>\n        <td>Row1Value2</td>\n      </tr>\n    </tbody>\n  </table>\n  <div>This is a sample div.</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a Ruby program which returns the sum of all even numbers between 0 and 10", "input": "", "output": "# Function to calculate the sum of all even numbers between 0 and 10\ndef sum_even\n  sum = 0\n  (0..10).each do |even_number|\n    if even_number % 2 == 0\n      sum += even_number\n    end\n  end\n  sum\nend\n\n# Invoke the function\nsum_even", "category": "Python"}, {"instruction": "Identify the type of input that is required for this Python function.", "input": "def get_sum(a, b):\n    # return the sum of two numbers", "output": "The type of input required for this Python function is two numerical values (for example, integers or floats).", "category": "Python"}, {"instruction": "Generate a JavaScript function to return the average of two numbers", "input": "", "output": "function avgTwoNums(num1, num2) {\n   const average = (num1 + num2) / 2;\n   return average;\n}", "category": "Python"}, {"instruction": "Given a JavaScript code, what are valid identifier names for its variables?", "input": "", "output": "Valid identifier names for JavaScript variables must start with a letter, underscore (_), or dollar sign ($); can contain alphanumeric characters and underscore; and must not contain spaces, start with a number or a keyword (such as \"var\"). Examples of valid variable names include \"myVar\", \"$_1stName\", \"name2\".", "category": "Python"}, {"instruction": "Given two strings, write a program to find the number of common characters.", "input": "string_1 = \"computer\"\nstring_2 = \"science\"", "output": "def num_common_characters(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())", "category": "Python"}, {"instruction": "Write a CSS code to create a div container with a width of 500px and a label \"Important\".", "input": "", "output": "<div  style=\"width: 500px;\">\n  <span>Important</span>\n</div>", "category": "Python"}, {"instruction": "Create a SQL query to select users born before 1989-02-17.", "input": "", "output": "SELECT * FROM users WHERE date_of_birth < '1989-02-17';", "category": "Python"}, {"instruction": "Write a function in Java to generate all possible strings of length n drawn from 0\u20139.", "input": "", "output": "import java.util.ArrayList;\n\npublic class GenerateStrings {\n\n    public static ArrayList<String> generateStrings(int n){\n        ArrayList<String> stringList = new ArrayList<>();\n        \n        char[] string = new char[n];\n\t\tgenerateStringUtil(string, n, 0, stringList);\n\t\treturn stringList;\n    }\n    \n    public static void generateStringUtil(char[] string, int n, int i, ArrayList<String> stringList){\n        if(i == n){\n            stringList.add(String.valueOf(string));\n            return;\n        }\n        \n        for(int j = 0; j < 10; j++){\n            char c = (char) (j + '0'); \n            string[i] = c;\n            generateStringUtil(string, n, i+1, stringList);\n        }\n    }\n    \n    public static void main(String[] args) {\n        ArrayList<String> strings = generateStrings(3);\n        System.out.println(strings);\n    }\n}", "category": "Python"}, {"instruction": "Create a Python script to scrape HTML data from a website.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# extract information from HTML\ndata = soup.find_all(\"div\", {\"class\": \"content\"})\n\n# save scraped data \nwith open('filename.txt', 'w') as file:\n    for content in data:\n        file.write(str(content))", "category": "Python"}, {"instruction": "Generate a code to take in a list of sentences, totaling no more than 100 words and output the longest sentence.", "input": "['This sentence is the longest.', 'This sentence is the shortest.']", "output": "def get_longest_sentence(lst):\n    longest_sentence = ''\n    longest_len = 0\n    for s in lst:\n        s_len = len(s)\n        if s_len > longest_len:\n            longest_sentence = s\n            longest_len = s_len\n    return longest_sentence\n\nif __name__ == '__main__':\n    lst = ['This sentence is the longest.', 'This sentence is the shortest.']\n    longest_sentence = get_longest_sentence(lst)\n    print(longest_sentence)", "category": "Python"}, {"instruction": "Suggest an algorithm to implement a stack with two queues.", "input": "", "output": "Algorithm for implementing a stack with two queues: \n1. Create two queues and enqueue the element to the first queue.\n2. Dequeue an element from the first queue, and enqueue it again to the second queue. \n3. Now, enqueue the next element from the first queue to the first queue.\n4. Repeat steps 2 and 3, until all the elements are dequeued from the first queue. \n5. Dequeue an element from the second queue, this will be the top of the stack.", "category": "Python"}, {"instruction": "Write the code for counting the number of occurrences of a character in a given string.", "input": "String: \"Hello World\"\nCharacter: 'l'", "output": "public static int countCharacterOccurrences(String s, char c) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == c)\n            count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Create a function in Java to convert a given timestamp into readable date and time.", "input": "1586714115", "output": "public static String convertTimeStampToDateTime(long timestamp) {\n    Date date = new Date(timestamp * 1000L);\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss z\");\n    return sdf.format(date);\n}", "category": "Python"}, {"instruction": "Explain how garbage collection works in Java.", "input": "", "output": "Garbage collection in Java works by periodically running a garbage collector to identify and reclaim memory occupied by objects that are no longer referenced. This process is done in order to free the memory for use by other objects and to prevent memory leaks. The Java Virtual Machine implements the garbage collection process by running a special type of thread, called the garbage collector, which scans for objects that are no longer referenced. When an object is no longer referenced, the garbage collector then reclaims the memory occupied by that object and makes it available for use elsewhere.", "category": "Python"}, {"instruction": "Write an algorithm for sorting a single-linked list.", "input": "", "output": "Algorithm for sorting a single-linked list:\n1. Traverse the list and find the minimum value.\n2. Save the pointer to this minimum element.\n3. Move this minimum element to the start of the list and make it the head node. \n4. Set the pointer to the last minimum element to point to the next element. \n5. Repeat steps 1-4, until the end of the list is reached.", "category": "Python"}, {"instruction": "Create a user-defined function in C# to find the roots of a second-order polynomial.", "input": "", "output": "public static void FindRoots(double a, double b, double c) {\n   double discriminant = b * b - 4 * a * c;\n\n   // condition for real and different roots\n   if (discriminant > 0) {\n       double root1 = (-b + Math.Sqrt(discriminant)) / (2 * a);\n       double root2 = (-b - Math.Sqrt(discriminant)) / (2 * a);\n\n       Console.WriteLine(\"The roots of the equation are {0} and {1}\", root1, root2);\n   }\n   // condition for real and equal roots\n   else if (discriminant == 0) {\n       double root1 = -b / (2 * a);\n       Console.WriteLine(\"The root of the equation is {0}\", root1);\n   }\n   // if roots are not real\n   else {\n       Console.WriteLine(\"The equation has no real roots\");\n   }\n}", "category": "Python"}, {"instruction": "Suggest a way to classify text documents into a certain number of topics.", "input": "", "output": "One way to classify text documents into a certain number of topics is to use latent Dirichlet allocation (LDA). LDA is a generative statistical model that allows for documents to be modeled as a mixture of topics. It fits well when documents are short and there is a large number of topics to be identified. The model takes as input a corpus of documents, builds a bag-of-words for each document, and then assigns a probability distribution to each document for the topics present. In this way, documents can be classified according to the respective topic with the highest probability.", "category": "Python"}, {"instruction": "Update the code to handle cases when the two numbers in the array are the same.", "input": "def add_two_numbers(nums):\n return nums[0] + nums[1]", "output": "def add_two_numbers(nums):\n if nums[0] == nums[1]:\n return nums[0]\n else:\n return nums[0] + nums[1]", "category": "Python"}, {"instruction": "Write a CSS code snippet to set the default font size to 16px and color to green for all links.", "input": "", "output": "a {\n  font-size: 16px;\n  color: green;\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the products which have not been ordered by any customers.", "input": "TABLE products \nColumns: \n* product_id\n* name \n* description \n* price \n\nTABLE order_items \nColumns: \n* order_item_id \n* order_id \n* product_id", "output": "SELECT p.product_id, \n       p.name, \n       p.description, \n       p.price \nFROM products p \nLEFT JOIN order_items oi\nON p.product_id = oi.product_id\nWHERE oi.product_id IS NULL", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to store a string value in localStorage.", "input": "", "output": "localStorage.setItem('key', 'value');", "category": "Python"}, {"instruction": "Describe two ways to prevent SQL injection.", "input": "", "output": "Two ways to prevent SQL injection are parameterized queries and escaping user input. Parameterized queries use placeholders to define the data that will be inserted into the query. This prevents any malicious data from being added as it will be treated as an ordinary string. Escaping user input is another way to prevent SQL injection. By escaping special characters, any malicious input can be prevented from running in the database.", "category": "Python"}, {"instruction": "Write an SQL query to find all customers who have not placed any orders.", "input": "TABLE customers \nColumns: \n* customer_id\n* first_name\n* last_name \n\nTABLE orders \nColumns: \n* order_id\n* customer_id \n* order_date", "output": "SELECT c.customer_id,\n       c.first_name,\n       c.last_name\nFROM customers c \nLEFT JOIN orders o \nON c.customer_id = o.customer_id \nWHERE o.customer_id IS NULL", "category": "Python"}, {"instruction": "Describe the purpose and syntax of the 'forEach' method in Javascript.", "input": "", "output": "The forEach() method in Javascript is used to iterate over each element in an array. It takes a callback function as an argument which is executed for each element of the array. The syntax of the forEach() method is as follows:\narray.forEach(function(element, index, array) {\n  // code to be executed;\n});", "category": "Python"}, {"instruction": "Create a SQL query to find the names and addresses of customers who have purchased a product that is priced more than $50.", "input": "TABLE customers\nColumns: \n* customer_id \n* first_name \n* last_name \n* street \n* city \n* state \n* zip \n\nTABLE orders \nColumns: \n* order_id \n* customer_id \n* order_date \n\nTABLE order_items \nColumns: \n* order_item_id \n* order_id \n* product_id \n* quantity \n* price", "output": "SELECT c.first_name,\n       c.last_name,\n       c.street,\n       c.city,\n       c.state,\n       c.zip\nFROM customers c \nINNER JOIN orders o \nON c.customer_id = o.customer_id \nINNER JOIN order_items oi \nON o.order_id = oi.order_id\nWHERE oi.price > 50", "category": "Python"}, {"instruction": "What MySQL query can be used to retrieve the most recent record in a table?", "input": "", "output": "SELECT * FROM table_name ORDER BY id DESC LIMIT 1;", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number.", "input": "", "output": "def sum_multiples_of_3_and_5(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0: \n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Generate a List Comprehension that returns a list containing the first 5 prime numbers", "input": "", "output": "[x for x in range(2, 11) if all(x % y != 0 for y in range(2,x))][:5]", "category": "Python"}, {"instruction": "Write a regular expression that matches the string \"line break\".", "input": "", "output": "line\\sbreak", "category": "Python"}, {"instruction": "Write a loop that prints the numbers from 10 to 1, each on its own line.", "input": "", "output": "for i in range(10, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Change the following Python code to convert the list to a dictionary of key-value pairs.", "input": "mylist  = [1, 2, 3, 4, 5]", "output": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i]", "category": "Python"}, {"instruction": "Create a Node.js web server with the Express module.", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});", "category": "Python"}, {"instruction": "Create an array of integers with values 0, 1, 2, 3, 4.", "input": "", "output": "array = [0, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a SQL query to select the title and price of books with a rating of 5.", "input": "SELECT title, price FROM books\nWHERE rating = 5;", "output": "SELECT title, price FROM books WHERE rating = 5;", "category": "Python"}, {"instruction": "Change the given code to allow the user to input a number and print it twice.", "input": "", "output": "num = int(input(\"Enter a number: \"))\nprint(num * 2)", "category": "Python"}, {"instruction": "Write a regular expressipon pattern to match the following date format \"DD/MM/YYYY\".", "input": "", "output": "pattern = r\"^(0[1-9]|[12][0-9]|3[01])[\\/](0[1-9]|1[012])[\\/](19[0-9][0-9]|20[0-9][0-9])$\"", "category": "Python"}, {"instruction": "Create a function that takes an array and returns true if it contains all the elements in an another array.", "input": "array1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]", "output": "def checkArray(array1, array2): \n\tfor element in array2: \n\t\tif element not in array1: \n\t\t\treturn False\n\treturn True\n\narray1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]\n\nprint(checkArray(array1, array2))\n\n# Output\n# True", "category": "Python"}, {"instruction": "Create a JavaScript program to spread a given array into subarrays of the given size.", "input": "arr = [1, 2, 3, 4, 5, 6]\nsize = 3", "output": "function spreadArray(arr, size) {\n  let subarrays = [];\n\n  while (arr.length) {\n    subarrays.push(arr.splice(0, size));\n  }\n  return subarrays;\n}\n\narr = [1, 2, 3, 4, 5, 6]\nsize = 3\n\nconsole.log(spreadArray(arr, size));\n\n# Output\n# [[1, 2, 3], [4, 5, 6]]", "category": "Python"}, {"instruction": "Produce a function that takes in an array of integers and returns an array with all the prime numbers in it.", "input": "arr = [2, 11, 9, 5, 4, 7]", "output": "def findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\n\treturn prime_list \n\narr = [2, 11, 9, 5, 4, 7]\n\nprint(findPrimeNumbers(arr))\n\n# Output\n# [2, 11, 5, 7]", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a new string in which all the characters are reversed.", "input": "s = \"Hello World\"", "output": "def reverseString(s): \n\trev = s[::-1] \n\treturn rev \n\ns = \"Hello World\"\n\nprint(reverseString(s))\n\n# Output\n# dlroW olleH", "category": "Python"}, {"instruction": "Assume an array contains elements from 1 to 100. You need to find the missing element.", "input": "arr = [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15]", "output": "def findMissingNumber(arr): \n\tn = len(arr) + 1\n\n\ttotal = n * (n+1) / 2\n\tsum_of_elements = sum(arr) \n\tmissing_element = total - sum_of_elements \n\n\treturn int(missing_element)\n\narr = [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15]\n\nprint(findMissingNumber(arr)) \n\n# Output\n# 3", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and creates a new list with only the even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8, 9]", "output": "def findEvenNumbers(numbers): \n\teven_list = []\n\tfor number in numbers: \n\t\tif number % 2 == 0: \n\t\t\teven_list.append(number)\n\treturn even_list \n\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(findEvenNumbers(numbers))\n\n# Output\n# [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Construct a regular expression pattern to match a single word with the format \"XX-XXX-XXX\".", "input": "", "output": "pattern = r\"^\\w{2}-\\w{3}-\\w{3}$\"", "category": "Python"}, {"instruction": "Create a Python function that generates a random number between two specified numbers.", "input": "lower_bound = 10\nupper_bound = 20", "output": "def random_num(lower_bound, upper_bound):\n\timport random\n\treturn random.randint(lower_bound, upper_bound)\n\nlower_bound = 10\nupper_bound = 20\n\nprint(random_num(lower_bound, upper_bound))\n\n# Output\n# [random number between 10 and 20]", "category": "Python"}, {"instruction": "Implement a function to calculate the total amount of money earned from a given array of stock prices.", "input": "arr = [5, 7, 15.5, 6, 10, 11]", "output": "def calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\narr = [5, 7, 15.5, 6, 10, 11] \n\ntotalEarnings = calculateTotalEarnings(arr) \n\nprint(\"Total earnings: \", totalEarnings) \n\n# Output\n# Total earnings:  9.5", "category": "Python"}, {"instruction": "Write a Python function to check if an element is present in a given list or not.", "input": "", "output": "def is_in_list(element, input_list):\n    return element in input_list", "category": "Python"}, {"instruction": "Create an SQL query that returns the current date.", "input": "", "output": "SELECT CURRENT_DATE;", "category": "Python"}, {"instruction": "Compare and contrast the features of the two programming languages: Python and Java.", "input": "", "output": "Python and Java are both popular programming languages with different features that make them suitable for different tasks. Python is an interpreted, high-level, and general-purpose programming language that emphasizes code readability and has simple, easy-to-use syntax. Java, on the other hand, is an object-oriented, statically typed programming language that is heavily used in enterprise-level applications. Python is popular for its expressiveness and lack of boilerplate code, while Java provides a lot of technical support and stability. Additionally, Python is easier to learn and has a wide range of libraries and tools, while Java has powerful tools that allow developers to create more robust applications.", "category": "Python"}, {"instruction": "Create a method that returns all elements in an array that are larger than the given value x.", "input": "[2, 3, 5, 7, 11, 13] and x = 4", "output": "def elements_greater_than_x(arr, x):\n  result = []\n\n  for el in arr:\n    if el > x:\n      result.append(el)\n\n  return result", "category": "Python"}, {"instruction": "Analyze a given text and generate a dictionary of frequency of each word in the text.", "input": "text = \"This is a sample text to analyze the frequency of the words\"", "output": "def analyze_text(text):\n    text = text.lower().split()\n    freqDict = {}\n    for word in text:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict\n\nif __name__ == '__main__':\n    text = \"This is a sample text to analyze the frequency of the words\"\n    print(analyze_text(text))\n\nOutput:\n{'this': 1, 'is': 1, 'a': 1, 'sample': 1, 'text': 1, 'to': 1, 'analyze': 1, 'the': 1, 'frequency': 1, 'of': 1, 'words': 1}", "category": "Python"}, {"instruction": "Create a React component with the following features:\n- Has two inputs\n- On entering content in the first input, it will automatically update the content in the second input", "input": "", "output": "class TwoInputsComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value1: '',\n      value2: ''\n    };\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n  }\n\n  handleChange1(e) {\n    this.setState({\n      value1: e.target.value,\n      value2: e.target.value\n    });\n  }\n\n  handleChange2(e) {\n    this.setState({\n      value1: e.target.value,\n      value2: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.value1} onChange={this.handleChange1} />\n        <input type=\"text\" value={this.state.value2} onChange={this.handleChange2} />\n      </div>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all customers who purchased more than 5 items from a specific store.", "input": "", "output": "SELECT customers.customer_id, customers.name FROM customers \n    INNER JOIN orders\n    ON orders.customer_id = customers.customer_id \n    WHERE orders.store_id = ? \n    GROUP BY customers.customer_id\n    HAVING COUNT(*) > 5;", "category": "Python"}, {"instruction": "Create an HTML table from a list of dictionaries.", "input": "[ {'name':'John','age':30, 'designation':'Software engineer'},\n  {'name':'Alex','age':35, 'designation':'Tech lead'},\n  {'name':'Jim','age':27, 'designation':'QA engineer'}\n]", "output": "<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>Designation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John</td>\n      <td>30</td>\n      <td>Software engineer</td>\n    </tr>\n    <tr>\n      <td>Alex</td>\n      <td>35</td>\n      <td>Tech lead</td>\n    </tr>\n    <tr>\n      <td>Jim</td>\n      <td>27</td>\n      <td>QA engineer</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Run a regression on the given dataset and print the coefficients", "input": "", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# print the coefficients \ncoeff = model.coef_\nprint(coeff)", "category": "Python"}, {"instruction": "Create a function which takes two arguments, a string and a list, and prints out the list with each element preceded by the string", "input": "my_string = \"Example: \"\nmy_list = [\"a\", \"b\", \"c\"]", "output": "def prepend_list_items(str, lst):\n  for item in lst:\n    print(str + item)\n\nprepend_list_items(my_string, my_list)", "category": "Python"}, {"instruction": "Create a function which returns a string of the given string in uppercase", "input": "my_string = \"this is a string\"", "output": "def to_uppercase(str):\n return str.upper()\n\nnew_string = to_uppercase(my_string)\nprint(new_string)", "category": "Python"}, {"instruction": "Add the two following numbers in C++.", "input": "x = 4\ny = 5", "output": "int x = 4, y = 5;\nint sum = x + y;\nstd::cout<<sum;", "category": "Python"}, {"instruction": "Remove the duplicate words in the given string", "input": "my_string = \"this this is a a sentence\"", "output": "my_words = my_string.split(' ')\nmy_words = list(dict.fromkeys(my_words))\n\nnew_string = \" \".join(my_words)\nprint(new_string)", "category": "Python"}, {"instruction": "Sort the items in the list alphabetically", "input": "my_list = ['bird', 'cat', 'turtle', 'dog']", "output": "my_list.sort()\nprint(my_list)", "category": "Python"}, {"instruction": "Create a table of data about each object in the list.", "input": "my_list = [{\"name\": \"John\", \"age\": 20}, {\"name\": \"Laura\", \"age\": 30}, {\"name\": \"Harry\", \"age\": 25}]", "output": "name | age\n------------\nJohn | 20\nLaura | 30\nHarry | 25", "category": "Python"}, {"instruction": "Write a JavaScript program that creates an array with all the numbers from 1 to 10.", "input": "", "output": "const a = [];\nfor (let i = 1; i <= 10; i++) {\n a.push(i);\n}\nconsole.log(a);", "category": "Python"}, {"instruction": "Print the current system date and time in a readable format", "input": "", "output": "import datetime\n\ndate_time = datetime.datetime.now()\nprint(date_time.strftime(\"%A %d %B, %Y, %I:%M %p\"))\n\n# Output: Tuesday 12 November, 2019, 11:17 PM", "category": "Python"}, {"instruction": "Create an array of 10 non-repeating random integers.", "input": "", "output": "import random\n\narr = []\nwhile len(arr) < 10:\n    rand = random. randint(0, 10000)\n    if rand not in arr:\n        arr.append(rand)\n\narr", "category": "Python"}, {"instruction": "Convert the following integers into strings.", "input": "54 and 32", "output": "str1 = str(54)\nstr2 = str(32)", "category": "Python"}, {"instruction": "Rank the following algorithms based on time complexity: Quick Sort, Binary Search Tree, and Bubble Sort.", "input": "", "output": "Quick Sort > Binary Search Tree > Bubble Sort. \nQuick Sort has the best time complexity of O(nlogn). Binary Search Tree has the time complexity of O(logn) for insertion and searching. Bubble Sort has the worst time complexity of O(n^2).", "category": "Python"}, {"instruction": "Create a dictionary for the attributes of each object in the list.", "input": "my_list = [{\"name\": \"John\", \"age\": 20}, {\"name\": \"Laura\", \"age\": 30}, {\"name\": \"Harry\", \"age\": 25}]", "output": "my_dict = {}\nfor item in my_list:\n my_dict[item['name']] = item['age']\n \nprint(my_dict)", "category": "Python"}, {"instruction": "How many elements will the array arr have after executing the following Python code?", "input": "arr = [1, 2, 3]\narr.pop(1)", "output": "2", "category": "Python"}, {"instruction": "Write a function that finds the largest number in an array of integers.", "input": "", "output": "def largest(arr): \n    max = arr[0] \n    for i in arr: \n        if i > max: \n            max = i \n    return max", "category": "Python"}, {"instruction": "How many elements are in list1 after executing the following Python code?", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)", "output": "6", "category": "Python"}, {"instruction": "In this C++ program, there is an error. Please identify and fix the mistake.", "input": "int main()\n{\n cout << \"Hello World!\";\n return 0", "output": "int main()\n{\n std::cout << \"Hello World!\" << std::endl;\n return 0;\n}", "category": "Python"}, {"instruction": "Create a div element in HTML with the class \"container\".", "input": "", "output": "<div class=\"container\"></div>", "category": "Python"}, {"instruction": "Explain how recursion works.", "input": "", "output": "Recursion is a process in which a function calls itself, either directly or indirectly. The execution of such a function consists of recurring steps each of which is called a recurrence step. The number of recurrence steps decreases with each step and the function terminates and returns a result when the number of steps reaches zero. Recursion is used to solve problems that can be broken down into smaller problems of the same type and can be used to simplify the coding process.", "category": "Python"}, {"instruction": "Write a regular expression pattern to match all email addresses with the same top-level domain.", "input": "", "output": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}", "category": "Python"}, {"instruction": "Write a find() method in JavaScript to find an item in an array.", "input": "Array: [1, 2, 3, 4, 5], query: 3", "output": "let find = (array, query) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === query) return i;\n  }\n  return -1;\n};\n\nlet index = find([1, 2, 3, 4, 5], 3);\nconsole.log(index);", "category": "Python"}, {"instruction": "Write a loop in C# to calculate the sum of all numbers between 1 and n.", "input": "n = 100", "output": "int sum = 0;\nfor(int i = 1; i <= 100; i++)\n{\n sum = sum + i;\n}\n\nConsole.WriteLine(\"Sum of all numbers between 1 and 100 = \" + sum);", "category": "Python"}, {"instruction": "Create a Python class to work with complex numbers.", "input": "", "output": "class ComplexNumber:\n    \"\"\"This class is used to work with complex numbers.\"\"\"\n    def __init__(self, real, imag): \n        self.real = real \n        self.imag = imag \n      \n    def __add__(self, other):\n        \"\"\"This method overloads the '+' operator to add complex numbers.\"\"\"\n        return ComplexNumber(self.real + other.real, self.imag + other.imag) \n      \n    def __sub__(self, other):\n        \"\"\"This method overloads the '-' operator to subtract complex numbers.\"\"\"\n        return ComplexNumber(self.real - other.real, self.imag - other.imag) \n  \n    def __mul__(self, other): \n        \"\"\"This method overloads the '*' operator to multiply complex numbers.\"\"\"\n        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) \n  \n    def __str__(self): \n        \"\"\"This method overrides the __str__ method to print complex numbers in a readable format.\"\"\"\n        return self.real + self.imag + \"i\"\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(1, 2) \n    c2 = ComplexNumber(2, 3) \n  \n    print(\"Addition of c1 and c2 =\", c1 + c2) \n    print(\"Subtration of c1 and c2 =\", c1 - c2) \n    print(\"Multiplication of c1 and c2 =\", c1 * c2)", "category": "Python"}, {"instruction": "Implement a factorial function in Python.", "input": "", "output": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a code to filter out all even numbers from an array which contains both even and odd numbers.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_even_numbers(arr):\n    \"\"\"This function takes an array and filters out all even numbers.\"\"\"\n    result = []\n    for num in arr:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = filter_even_numbers(arr)\n    print(result)", "category": "Python"}, {"instruction": "Generate a C++ code to filter out an array containing odd numbers.", "input": "", "output": "#include <iostream> \n  \n// Function to filter out odd numbers \nvoid filter_odd(int arr[], int n) \n{ \n    int i, k; \n    k = 0; \n  \n    // Traversing the given array  \n    // from first to last \n    for (i = 0; i < n; i++) { \n  \n        // If arr[i] is even then \n        // store it at current index \n        if (arr[i] % 2 == 0) { \n            arr[k++] = arr[i]; \n        } \n    } \n  \n    // Modifying original array \n    // elements afterkth index \n    while (k < n) { \n        arr[k++] = 0; \n    } \n  \n    // Print the array elements \n    std::cout << \"Modified array is : \"; \n    for (i = 0; i < n; i++) { \n        std::cout << arr[i] << \" \"; \n    } \n} \n  \n// Driver Code \nint main() \n{ \n    int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    filter_odd(arr, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Generate a function to identify prime numbers between 0 and n.", "input": "", "output": "def is_prime(n):\n    \"\"\"This function will check if a number is a prime number or not.\"\"\"\n    # Corner case \n    if n <= 1: \n        return False\n\n    # Check from 2 to n-1 \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nif __name__ == '__main__':\n    for n in range(2, 100):\n        if is_prime(n):\n            print(n)", "category": "Python"}, {"instruction": "Given a list of grocery items, write a code to generate 1 list containing only the fruits in the list.", "input": "items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]", "output": "def filter_fruits(items):\n    \"\"\"This function takes a list of grocery items and generates a list containing only the fruits.\"\"\"\n    fruits = []\n    for item in items:\n        if item in [\"apple\", \"banana\", \"grapes\"]:\n            fruits.append(item)\n    return fruits\n\nif __name__ == '__main__':\n    items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]\n    fruits = filter_fruits(items)\n    print(fruits)", "category": "Python"}, {"instruction": "Use PyTorch to write a function that predicts a class label based on five numerical features.", "input": "X = [[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]]", "output": "\"\"\"\nA PyTorch function that predicts a class label based on five numerical features.\n\"\"\"\n\nimport torch\nimport torch.nn as nn\n\n\n# Define the model\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(5, 8)\n        self.fc2 = nn.Linear(8, 4)\n        self.fc3 = nn.Linear(4, 2)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n# Instantiate the model\nmodel = Model()\n\n# Input\nX = torch.tensor([[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]])\n\n# Get the prediction\nprediction = model(X)", "category": "Python"}, {"instruction": "Design a try/except block that takes in a user-entered number and prints whether it is even or odd.", "input": "", "output": "try:\n    num = int(input(\"Enter a number: \"))\n    if num % 2 == 0:\n        print(str(num) + \" is even.\")\n    else:\n        print(str(num) + \" is odd.\")\nexcept ValueError:\n    print(\"Input must be an integer.\")", "category": "Python"}, {"instruction": "Convert a given integer to its equivalent hexadecimal value.", "input": "num = 67", "output": "hex_val = hex(num)", "category": "Python"}, {"instruction": "Given a list of numbers, remove all duplicated entries.", "input": "num_list = [12, 24, 12, 5, 8, 24]", "output": "no_duplicates = list(set(num_list))", "category": "Python"}, {"instruction": "Create a function that allows users to sign up for your feature using their username and password.", "input": "", "output": "def sign_up(username, password):\n    \"\"\"This function will allow users to sign up for the feature using their username and password.\"\"\"\n    # Implement sign up feature\n    # ...\n\nif __name__ == '__main__':\n    username = \"JohnDoe\"\n    password = \"Passw0rd\"\n    sign_up(username, password)\n    print(\"Sign up successful!\")", "category": "Python"}, {"instruction": "Design a solution in JavaScript to find the kth smallest element in an unsorted array.", "input": "arr = [8, 5, 7, 2, 3, 1, 9, 4]\nk = 3", "output": "function kthSmallest(arr, k) { \n  // Sort the array \n  arr.sort((a, b) => a - b); \n  \n  // Return kth element in the sorted array \n  return arr[k - 1]; \n}", "category": "Python"}, {"instruction": "Make a HTML page that displays a table displaying numbers from 1 to 10.", "input": "", "output": "<html>\n  <body>\n    <h1>Table showing numbers from 1 to 10</h1>\n    <table>\n      <tr>\n        <th>Number</th>\n      </tr>\n      <tr>\n        <td>1</td>\n      </tr>\n      <tr>\n        <td>2</td>\n      </tr>\n      <tr>\n        <td>3</td>\n      </tr>\n      <tr>\n        <td>4</td>\n      </tr>\n      <tr>\n        <td>5</td>\n      </tr>\n      <tr>\n        <td>6</td>\n      </tr>\n      <tr>\n        <td>7</td>\n      </tr>\n      <tr>\n        <td>8</td>\n      </tr>\n      <tr>\n        <td>9</td>\n      </tr>\n      <tr>\n        <td>10</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a class that detects if a String contains a palindrome", "input": "", "output": "class PalindromeChecker:\n  def __init__(self, word):\n    self.word = word\n \n  def contains_palindrome(self):\n    for i in range(len(self.word)):\n      if self.word[i] == self.word[len(self.word) - 1 - i]:\n        return True\n    return False", "category": "Python"}, {"instruction": "Construct an algorithm to find all possible combinations of a string of characters.", "input": "", "output": "A possible algorithm is to use a recursive approach. The algorithm would start from the beginning of the string and for each character, generate all possible combinations for the rest of the string. Then, for each combination, the character can either be included or excluded from the combination. Finally, return the list of all possible combinations.\n\ndef find_combinations(string):\n if len(string) == 0:\n return []\n \n result = []\n for i in range(len(string)):\n prefix = string[i]\n suffix = string[i+1:]\n combinations = find_combinations(suffix)\n \n if len(combinations) == 0:\n result.append(prefix)\n else:\n for combination in combinations:\n result.append(prefix + combination)\n result.append(combination)\n \n return result", "category": "Python"}, {"instruction": "Create a function to delete an item from a linked list given the head and the item.", "input": "", "output": "def delete_item(head, item):\n curr = head\n prev = None\n while curr:\n if curr.val == item:\n if prev is None:\n head = curr.next\n else:\n prev.next = curr.next\n return head\n prev = curr\n curr = curr.next\n \n return head", "category": "Python"}, {"instruction": "You have a list of employee records. Each record contains the employee's name, age, salary and department. Write an algorithm to sort the list by age in ascending order.", "input": "", "output": "def sort_by_age(employees):\n sorted_records = []\n while employees:\n record = employees.pop(0)\n inserted = False\n for i in range(len(sorted_records)):\n if record['age'] < sorted_records[i]['age']:\n sorted_records.insert(i, record)\n inserted = True\n break\n if not inserted:\n sorted_records.append(record)\n return sorted_records", "category": "Python"}, {"instruction": "Write a function to find the closest pair of points in a given array of points.", "input": "", "output": "def find_closest_pair(points):\n min_dist = float('inf')\n closest_pair = None\n\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n dist = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5\n if dist < min_dist:\n min_dist = dist\n closest_pair = (points[i], points[j])\n \n return closest_pair", "category": "Python"}, {"instruction": "Create a class in Python with methods \"add\" and \"find\" to add a value to a dictionary and find the value in it, respectively.", "input": "", "output": "class Dictionary:\n def __init__(self):\n     self.data = {}\n\ndef add(self, key, value):\n self.data[key] = value\n\ndef find(self, key):\n if key in self.data:\n return self.data[key]\n return None", "category": "Python"}, {"instruction": "Write a code that takes a sentence as input and prints the longest word in that sentence.", "input": "This is a test sentence", "output": "def longest_word(sentence):\n longest_word = \"\"\n words = sentence.split()\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word", "category": "Python"}, {"instruction": "You need to design a web page with a search bar that returns clickable results. Construct an algorithm to structure the web page.", "input": "", "output": "The web page should have a simple structure with a search bar at the top, followed by a display area where the search results are shown. The search bar should have an input field where the text can be entered and a button to start the search.\nThe algorithm should first detect the text entered in the search bar and then the search should be performed. After the search is complete, the results should be displayed in the display area. The results should be clickable so that more information can be opened when they are clicked.", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence with a given length.", "input": "length = 10", "output": "def generate_fibonacci_sequence(length):\n sequence = []\n current_val, next_val = 0,1\n for i in range(length):\n   sequence.append(current_val)\n   current_val, next_val = next_val, current_val + next_val\n return sequence\n\nprint(generate_fibonacci_sequence(length))\n#Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Construct an algorithm to calculate the GCD of two numbers.", "input": "", "output": "A possible algorithm is the Euclidean algorithm. It works by repeatedly dividing the larger number by the smaller number and replace the larger number with the remainder until the remainder becomes zero and the last non-zero remainder is the GCD.\n\ndef gcd(a,b):\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n\n  if a > b:\n    return gcd(a % b, b)\n  else:\n    return gcd(a, b % a)", "category": "Python"}, {"instruction": "Design a search system in Python with two methods (or functions) one method \"add\" to add a keyword and value, the other \"search\" to search by a keyword return the corresponding value.", "input": "", "output": "class SearchSystem:\n\n def __init__(self):\n     self.data = {}\n\ndef add(self, keyword, value):\n self.data[keyword] = value\n\ndef search(self, keyword):\n if keyword in self.data:\n return self.data[keyword]\n return None", "category": "Python"}, {"instruction": "You need to design a database for a school where multiple students can have a tutor of a subject. What is the best way to design the database?", "input": "", "output": "The best way to design the database is to create three tables: students, tutors and subjects. The students table would contain columns for each student's name, ID and contact details. The tutors table would contain the tutor's name, ID and contact details. The subjects table would contain the subject name, description and number of available tutors. The three tables would then be linked by a linking table, which would contain two columns - one for the student ID, one for the tutor ID - and an extra column to identify which subject the tutor-student pair is associated with.", "category": "Python"}, {"instruction": "Write a Python code snippet that combines the elements of two lists into a single list.", "input": "list_1 = [\"Cat\", \"Dog\", \"Fish\"]\nlist_2 = [\"Monkey\", \"Tiger\", \"Lion\"]", "output": "single_list = list_1 + list_2", "category": "Python"}, {"instruction": "Design a class in Java to represent a student, with their name and grade fields.", "input": "", "output": "public class Student {\n\n    String name;\n    String grade;\n\n    public Student(String name, String grade) {\n        this.name = name;\n        this.grade = grade;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getGrade() {\n        return this.grade;\n    }\n\n}", "category": "Python"}, {"instruction": "Write an HTML tag to create a paragraph element.", "input": "", "output": "<p> </p>", "category": "Python"}, {"instruction": "Write a conditional statement that prints \"Welcome to my house\" when the user enters a positive number and \"Goodbye\" when the user enters a negative number.", "input": "number = 4", "output": "if (number > 0):\n print(\"Welcome to my house\")\nelse:\n print(\"Goodbye\")", "category": "Python"}, {"instruction": "Create a function in Python that adds a new item to the beginning of a list.", "input": "my_list = [\"Cats\", \"Dogs\", \"Fish\"]", "output": "def insert_beginning(my_list, item):\n my_list = [item] + my_list\n return my_list", "category": "Python"}, {"instruction": "Create a JavaScript program to find the area of a triangle using Heron's formula given the three sides, a, b and c.", "input": "", "output": "function areaOfTriangle(a, b, c) {\n let s = (a + b + c) / 2;\n let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n return area;\n}", "category": "Python"}, {"instruction": "Change the following Python program so that it prints out the palindromic substrings.", "input": "string = 'mom'", "output": "def palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)", "category": "Python"}, {"instruction": "Change the following C++ program so that it returns 0 if an array contains all negative numbers.", "input": "arr = [-2, -3, -4, -1]", "output": "#include <iostream> \nusing namespace std; \n  \nint max_sum(int arr[], int n) \n{ \n    if (n == 0) \n        return 0; \n        \n    int max = arr[0]; \n    int sum = arr[0]; \n  \n    for (int i = 1; i < n; i++) { \n  \n        if (arr[i] < 0) \n            return 0; \n            \n        sum = max(sum + arr[i], arr[i]); \n        max = max(max, sum); \n    } \n  \n    return max; \n} \n///\n16. Instruction: Create a function in Python that returns the number of times a given substring occurs in a string.\n16. Input:\nstring = \"Hello, Hello, Hello!\"\nsubstring = \"Hello\"\n16. Output:\ndef count_substring(string, substring): \n  \n    count = 0\n  \n    #Loop through the string \n    for i in range(0, len(string)): \n        if (string[i:i+len(substring)] == substring): \n            count += 1\n \n    return count", "category": "Python"}, {"instruction": "Write a regular expression to extract emails from a list of text.", "input": "text_list = [\"contact me at jack@example.com for more information\", \"reach out to jill@example.com for a discussion\"]", "output": "import re\nemail_list = []\nfor text in text_list:\n    emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\n    email_list.extend(emails)", "category": "Python"}, {"instruction": "How can you determine the number of words in a string?", "input": "", "output": "You can determine the number of words in a string by splitting the string into single words using the split() method and using the len() method to find the length of the resulting list.", "category": "Python"}, {"instruction": "Create a Python function to return the frequency table of a list of words.", "input": "words = [\"apple\", \"mango\", \"cherry\", \"banana\", \"apple\", \"mango\"]", "output": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table", "category": "Python"}, {"instruction": "Create a function in Python to take a positive integer and return its factorial.", "input": "num = 5", "output": "def factorial(num): \n    \"\"\"Function to return the factorial of a positive integer\"\"\"\n    if(num <=1): \n        return 1\n    else: \n        return(num*factorial(num-1))", "category": "Python"}, {"instruction": "Create a SQL query to list all customer names from the table \"customers\" in ascending alphabetical order.", "input": "", "output": "SELECT name FROM customers ORDER BY name ASC;", "category": "Python"}, {"instruction": "Explain the functional programming paradigm.", "input": "", "output": "Functional Programming is a programming paradigm that emphasizes the use of functions, or predefined sequences of commands, to produce desired results. This paradigm tries to avoid state and mutable data, and instead use higher-order functions to pass functions as arguments. This makes it easier to understand, debug, and test code as functions are isolated from one another, making it less prone to errors.", "category": "Python"}, {"instruction": "Write a query in MongoDB to find all documents in the 'users' collection that have a field 'name' with the value 'John'.", "input": "", "output": "db.users.find({\"name\": \"John\"})", "category": "Python"}, {"instruction": "Generate a list of unique numbers between A and B where both A and B are input parameters.", "input": "a = 0\nb = 5", "output": "def create_list(a, b):\n\tresult = []\n\tfor i in range(a, b+1):\n\t\tif i not in result:\n\t\t\tresult.append(i)\n\treturn result\n\na = 0\nb = 5", "category": "Python"}, {"instruction": "Write a function to check if the parentheses in given expression are balanced or not.", "input": "expression = \"((A+B)-C)*D+((E-F)*G\"", "output": "def is_balanced(expression):\n\topen_paratheses = 0\n\tfor char in expression:\n\t\tif char == '(':\n\t\t\topen_paratheses += 1\n\t\telif char == ')':\n\t\t\topen_paratheses -= 1\n\t\tif open_paratheses < 0:\n\t\t\treturn False\n\treturn open_paratheses == 0\n\nexpression = \"((A+B)-C)*D+((E-F)*G\"", "category": "Python"}, {"instruction": "Create a regular expression pattern to match strings that contain any character except digits.", "input": "", "output": "pattern = r\"[^\\d]+\"", "category": "Python"}, {"instruction": "Suggest a code in Python that will calculate the area of any given shape.", "input": "", "output": "def area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        width = float(input(\"Please enter the width: \"))\n        return length * width\n\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return 0.5 * base * height\n\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r * r", "category": "Python"}, {"instruction": "Generate a function in python that takes two lists and returns the product of their longest common substrings.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 5, 7]", "output": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring", "category": "Python"}, {"instruction": "Compute the average height of the employees in the table.", "input": "", "output": "SELECT AVG(Height) FROM Employees;", "category": "Python"}, {"instruction": "Take the following input string and remove the punctuation and convert it to lowercase.", "input": "HELP! Is it me you're looking for??", "output": "let inputString = \"HELP! Is it me you're looking for??\";\nlet outputString = inputString.replace(/[.,\\/#!$%\\^&\\*;:{}=_`'\"<>~]/g,\"\").toLowerCase();\nconsole.log(outputString); // help is it me youre looking for", "category": "Python"}, {"instruction": "Create an object that holds the property 'name', assigned to the value \"John\".", "input": "", "output": "let john = {\nname: 'John',\n};", "category": "Python"}, {"instruction": "Create a Python function to find all unique values in a list.", "input": "L = [1, 2, 4, 2, 1]", "output": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values", "category": "Python"}, {"instruction": "Edit the code to print out a string in reverse order.", "input": "string = \"Hello World!\"", "output": "for char in reversed(string):\n    print(char, end=\"\")", "category": "Python"}, {"instruction": "Create a Python code to print out all the common elements in two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6]", "output": "def get_common_elements(list1, list2):\n    \"\"\"\n    Function to get all the common elements in two lists.\n    \n    Arguments:\n        list1 {list}: The first list.\n        list2 {list}: The second list.\n    \n    Returns:\n        list: A list containing all the common elements in both lists.\n    \"\"\"\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements", "category": "Python"}, {"instruction": "Create a c++ class to store data for a student including their name, age, and address.", "input": "", "output": "class Student \n{ \n    private: \n        string name; \n        int age; \n        string address; \n  \n    public: \n        void setName(string name); \n        void setAge(int age); \n        void setAddress(string address); \n  \n        string getName(); \n        int getAge(); \n        string getAddress(); \n};", "category": "Python"}, {"instruction": "Write a code in Go that will reverse all the words in a sentence.", "input": "sentence: \"GPT is a powerful tool\"", "output": "package main\n\nfunc reverseWords(sentence string) string {\n  words := strings.Split(sentence, \" \")\n\tvar reversedSentence string\n\tfor i:=len(words)-1; i>=0; i-- {\n\t\treversedSentence += words[i] + \" \"\n\t}\n\treturn strings.TrimSpace(reversedSentence)\n}", "category": "Python"}, {"instruction": "Create a class in Python that takes a list of numbers and finds the average.", "input": "list: [4, 5, 6]", "output": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n        return total / len(self.numbers)", "category": "Python"}, {"instruction": "Create a constructor in JavaScript that will assign a value to an object's properties.", "input": "properties: x, y, z", "output": "function MyObject(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}", "category": "Python"}, {"instruction": "Find the fifth smallest number in a list of numbers using Java.", "input": "list of numbers: [23, 12, 15, 7, 34, 19]", "output": "int compareToFindSmallest(int[] numbers, int targetIndex) {\n\n    int smallestIndex = 0;\n    for (int i = 1; i < numbers.length; i++) \n    {\n        if (numbers[i] < numbers[smallestIndex]) {\n            smallestIndex = i;\n        }\n    }\n\n    int tempIndex = smallestIndex;\n    int resultIndex = -1;\n    int count = 0;\n    while (resultIndex == -1) {\n        count++;\n        if (smallestIndex == tempIndex) {\n            if (count == targetIndex) {\n                resultIndex = tempIndex;\n            }\n            tempIndex++;\n        } else {\n            if (numbers[tempIndex] == numbers[smallestIndex]) {\n                if (count == targetIndex) {\n                    resultIndex = tempIndex;\n                }\n                tempIndex++;\n            } else {\n                smallestIndex = tempIndex;\n            }\n        }\n\n        if (tempIndex >= numbers.length) {\n            tempIndex = smallestIndex + 1;\n        }\n    }\n\n    return resultIndex;\n}\n\n// usage\nint[] numbers = {23, 12, 15, 7, 34, 19}; \nint fifthSmallestIndex = compareToFindSmallest(numbers, 5);\n// fifthSmallestIndex = 4\n// fifthSmallestNumber = 34", "category": "Python"}, {"instruction": "Write a C++ code to generate the Fibonacci sequence from 0 to 100.", "input": "", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n    int n = 100; \n  \n    int a = 0, b = 1, c; \n  \n    cout << a << \" \" << b << \" \"; \n  \n    for (int i = 2; i < n; i++) \n    { \n        c = a + b; \n        cout << c << \" \"; \n        a = b; \n        b = c; \n    } \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a CSS code to add a space between two paragraphs.", "input": "<p>This is the first paragraph.</p>\n<p>This is the second paragraph.</p>", "output": "p {\n    margin-bottom: 2em;\n}", "category": "Python"}, {"instruction": "Write an HTML code to show all the items in a given list.", "input": "list: [\"apple\", \"orange\", \"banana\", \"strawberry\"]", "output": "<ul>\n   <li>apple</li>\n   <li>orange</li>\n   <li>banana</li>\n   <li>strawberry</li>\n</ul>", "category": "Python"}, {"instruction": "Write a JavaScript code to find a value in an array of objects and return the object with that value.", "input": "list = [{name:\"John\", age:\"22\"}, {name:\"Peter\", age:\"40\"}, {name:\"Anne\", age:\"32\"}];\nfind_name = \"John\"", "output": "function findObject(list, find_name) {\n    for(let i = 0; i < list.length; i++){\n        if(list[i].name == find_name){\n            return list[i];\n        }\n    }\n    return null;\n}\n\nfindObject(list, find_name)", "category": "Python"}, {"instruction": "Write a SQL query that returns all the distinct values in a given table.", "input": "table: Employees", "output": "SELECT DISTINCT * \nFROM Employees;", "category": "Python"}, {"instruction": "Create a HTML link with the following description", "input": "Go to HackerRank", "output": "<a href=\"https://www.hackerrank.com\" target=\"_blank\">Go to HackerRank</a>", "category": "Python"}, {"instruction": "Design a MySQL query to delete all records in a specified table", "input": "", "output": "DELETE FROM TABLE_NAME;", "category": "Python"}, {"instruction": "Design a HTML page to show a page counter", "input": "", "output": "<html>\n    <head>\n        <title>Page counter</title>\n        <script>\n            var count = 0;\n            function countClick(){\n                count++\n                document.getElementById(\"count\").innerHTML = count;\n            }\n        </script>\n    </head>\n\n    <body>\n        <h1>Page views: <span id=\"count\">0</span></h1>\n        <button onclick=\"countClick()\">Click Me!</button>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a javascript code to open a pop-up window when a user clicks the button", "input": "", "output": "<button type=\"button\" onclick=\"alert('Pop up window')\">Click Me!</button>", "category": "Python"}, {"instruction": "Implement a jQuery code for the following purpose", "input": "Make an element hide when mouse moves over it", "output": "$ (document).ready (function () {\n  $(\"element\").mouseover(function () {\n    $(this).hide();\n  });\n});", "category": "Python"}, {"instruction": "Generate an algorithm in any language that can find the sum of the numbers in a given array", "input": "", "output": "Function sumArray (arr[])\n{\n    sum = 0\n    for i = 0 to arr.length - 1\n        sum += arr[i]\n    end for\n    return sum\n}", "category": "Python"}, {"instruction": "Design a database table to store user information such as an email address, name, age, etc", "input": "", "output": "CREATE TABLE users (\n    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    name VARCHAR(255) NOT NULL,\n    age INT NOT NULL,\n);", "category": "Python"}, {"instruction": "Implement a Java code to print the first 10 multiples of a given number", "input": "", "output": "public class Multiples \n{ \n    public static void main(String[] args) \n    { \n        int number = 5; \n        for (int i = 1; i <= 10; i++)  \n        { \n            System.out.println(number*i); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a Rails controller that can render a JSON response for a given URL.", "input": "URL: /user", "output": "class UserController < ApplicationController\n  def index\n    @users = User.all\n    \n    render json: @users\n  end\nend", "category": "Python"}, {"instruction": "Create a script to generate a random password using uppercase, lowercase and numerics.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    password_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password_length = 16\n    return ''.join(random.choice(password_characters) for i in range(password_length))\n\ngenerate_password()", "category": "Python"}, {"instruction": "Write a line of code to display a text message in the console saying \"Hello world!\".", "input": "", "output": "console.log(\"Hello world!\");", "category": "Python"}, {"instruction": "Use NLTK to analyse the sentiment of a given text.", "input": "The movie is awesome", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsid = SentimentIntensityAnalyzer()\n \ntext = \"The movie is awesome\"\n  \nscores = sid.polarity_scores(text)\n  \nprint(scores['compound'])\n\n# Output\n0.6249", "category": "Python"}, {"instruction": "Create a web application in React that displays the temperature in Fahrenheit, Celsius and Kelvin.", "input": "", "output": "class TemperatureViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tempFahrenheit : 0, \n      tempCelsius: 0, \n      tempKelvin: 0\n    };\n    this.handleTemperatureChange = this.handleTemperatureChange.bind(this);\n  }\n  handleTemperatureChange(tempFahrenheit) {\n    this.setState({\n      tempFahrenheit : tempFahrenheit,\n      tempCelsius : (tempFahrenheit - 32) * 5/9,\n      tempKelvin : (tempFahrenheit + 459.67) / 1.8\n    });\n  }\n  render() {\n    return (\n      <div>\n        <TemperatureInput \n        scale=\"f\" \n        value={this.state.tempFahrenheit}\n        onTemperatureChange={this.handleTemperatureChange} />\n        <TemperatureDisplay\n        scale=\"c\"\n        value={this.state.tempCelsius} />\n        <TemperatureDisplay\n        scale=\"k\"\n        value={this.state.tempKelvin} />\n      </div>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Write jQuery code to add/remove a class on a webpage.", "input": "", "output": "$('#element').addClass('className'); // To add\n$('#element').removeClass('className'); // To remove", "category": "Python"}, {"instruction": "Create an AI chatbot using JavaScript and Natural Language Processing.", "input": "", "output": "const { NlpManager } = require('node-nlp');\n \nconst manager = new NlpManager({ languages: ['en'] });\n \nmanager.addDocument('en', 'Good morning', 'greet.morning');\nmanager.addDocument('en', 'Good evening', 'greet.evening');\nmanager.addDocument('en', 'Hi', 'greet.hello');\n\nmanager.addAnswer('en', 'greet.morning', 'Good morning! How can I help you today?');\nmanager.addAnswer('en', 'greet.evening', 'Good evening! What do you need help with?');\nmanager.addAnswer('en', 'greet.hello', 'Hi there! How may I assist you?');\n\n(async() => {\n    await manager.train();\n    const response = await manager.process('en', 'Hi');   \n    console.log(response.answer); // Hi there! How may I assist you?\n})();", "category": "Python"}, {"instruction": "Create a webpage with a two-column layout using HTML.", "input": "Create two columns with width of 1/3 and 2/3 respectively", "output": "<html>\n <head>\n   <style>\n    .column { \n      float: left; \n      width: 33.33%;\n      padding: 0 10px\n    }\n   </style>\n </head>\n <body>\n   <div class=\"column\">\n     Your content in the first column goes here\n   </div>\n   <div class=\"column\">\n    Your content in the second column goes here    \n   </div>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create a database table using SQL containing information about employees.", "input": "Create table with the following column names and data types: id (integer), first_name (text), last_name (text), address (text), city (text), state (text), postal_code (text)", "output": "CREATE TABLE employees(\n id INTEGER PRIMARY KEY,\n first_name TEXT,\n last_name TEXT,\n address TEXT,\n city TEXT,\n state TEXT,\n postal_code TEXT\n);", "category": "Python"}, {"instruction": "Create a Regex pattern to validate mobile phone numbers.", "input": "", "output": "^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$", "category": "Python"}, {"instruction": "Use a loop to print out each element of the list.", "input": "list = [1, 2, 3, 4]", "output": "for element in list:\n    print(element)", "category": "Python"}, {"instruction": "Describe the differences between np.array and a list.", "input": "", "output": "Numpy arrays are more efficient than lists as they are homogeneous in nature. This means that all the items in a numpy array must be of the same data type, while a list can contain items of any data type. Additionally, numpy arrays can be multi-dimensional while lists are only one-dimensional. Numpy arrays can be indexed and sliced the same way as lists. However, operations on numpy arrays are much faster than operations on lists. Lastly, numpy arrays support vectorization which allows for efficient computation.", "category": "Python"}, {"instruction": "Create a class to save data of a user's account.", "input": "", "output": "class Account:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email\n    \n    def get_info(self):\n        return (self.username, self.password, self.email)", "category": "Python"}, {"instruction": "Edit the code so that it can run in JavaScript async/await instead of Promise", "input": "const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Success!\");\n  }, 1000);\n});\n\nmyPromise.then(data => {\n  console.log(data);\n});", "output": "async function myAsync() {\n  const response = await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Success!\");\n    }, 1000);\n  });\n  console.log(response);\n}\n\nmyAsync(); // Success!", "category": "Python"}, {"instruction": "List all the prime numbers less than a specified number \u2018n\u2019", "input": "n = 10", "output": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number and False otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_numbers_less_than(n):\n    \"\"\"Returns a list of all prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nn = 10\nprint(prime_numbers_less_than(n)) # [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Count the number of leaf nodes in a binary tree.", "input": "tree = \n{ \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n}", "output": "def countLeafNodes(tree):\n    if tree is None:\n        return 0\n    if tree[\"left\"] is None and tree[\"right\"] is None:\n        return 1 \n    leftLeaf = countLeafNodes(tree[\"left\"])\n    rightLeaf = countLeafNodes(tree[\"right\"])\n    return leftLeaf + rightLeaf\n\ntree = { \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n} \n\nprint(countLeafNodes(tree)) # 3", "category": "Python"}, {"instruction": "Modify the code to ensure that the variable \u2018str\u2019 not being None", "input": "str = input()", "output": "str = input()\nif str is not None and str != '':\n    # do something with the input", "category": "Python"}, {"instruction": "Rewrite the code so that it can run in Python 3 instead of Python 2.", "input": "#!/usr/bin/env python\nprint 'Hello, world!'", "output": "#!/usr/bin/env python\n\nprint('Hello, world!')", "category": "Python"}, {"instruction": "Write an assembly language program to print \"Hello, World!\"", "input": "", "output": "section .data\nmsg\t db 'Hello, World!', 10\nlen\t equ $ - msg\n\t\nsection .text\nglobal _start ;must be declared for linker (ld)\n\n_start:\t\t;tells linker entry point\n\n\tmov edx,len ;message length\n\tmov ecx,msg ;message to write\n\tmov ebx,1\t;file descriptor (stdout)\n\tmov eax,4\t;system call number (sys_write)\n\tint 0x80\t;call kernel\n\n\tmov eax,1\t;system call number (sys_exit)\n\tint 0x80\t;call kernel", "category": "Python"}, {"instruction": "Create a customer class in Java that can be used to store information about customers.", "input": "Create a class with field names: id (integer), firstName (text), lastName (text), email (text), address (text)", "output": "public class Customer { \n\t \n    private int id; \n    private String firstName; \n    private String lastName; \n\tprivate String email; \n    private String address;  \n\t\n    // getter and setter methods \n    public int getId() { \n        return id; \n    } \n    public void setId(int id) { \n        this.id = id; \n    } \n    public String getFirstName() { \n        return firstName; \n    } \n    public void setFirstName(String firstName) { \n        this.firstName = firstName; \n    } \n\tpublic String getLastName() { \n        return lastName; \n    } \n    public void setLastName(String lastName) { \n        this.lastName = lastName; \n    }\n\tpublic String getEmail() { \n        return email; \n    } \n    public void setEmail(String email) { \n        this.email = email; \n    }\n\tpublic String getAddress() { \n        return address; \n    } \n    public void setAddress(String address) { \n        this.address = address; \n    } \n\n}", "category": "Python"}, {"instruction": "Write a PHP script that prints out \"Hello, World!\" on the web page.", "input": "", "output": "<?php\n  echo \"Hello, World!\";\n?>", "category": "Python"}, {"instruction": "Filter out a given array of strings and make sure that the strings only contain digits.", "input": "Filter array of strings [\"abc123\", \"123abc\", \"abc456\", \"abc\"]", "output": "$result = array_filter([\"abc123\", \"123abc\", \"abc456\", \"abc\"], function($value){\n    return preg_match('/^\\d+$/', $value);\n});\nprint_r($result);\n\n# Output\nArray ( [1] => 123abc [2] => 456 )", "category": "Python"}, {"instruction": "Modify the following Java program to print \"Hello world!\" without using a System.out.print statement.", "input": "class HelloWorld {\n\n   public static void main(String args[]) {\n      System.out.print(\"Hello world!\");\n   }\n}", "output": "class HelloWorld {\n\n   public static void main(String args[]) {\n      System.out.println(\"Hello world!\");\n   }\n}", "category": "Python"}, {"instruction": "Create a Swift program that reads in three values from the user and prints out the maximum value.", "input": "", "output": "import Foundation\n\nvar a = 0\nvar b = 0\nvar c = 0\n\nprint(\"Enter 3 values:\")\n\nif let aInput = readLine() {\n    if let aInt = Int(aInput) {\n        a = aInt\n    }\n}\n\nif let bInput = readLine() {\n    if let bInt = Int(bInput) {\n        b = bInt\n    }\n}\n\nif let cInput = readLine() {\n    if let cInt = Int(cInput) {\n        c = cInt\n    }\n}\n\nvar maximum = max(max(a, b), c)\nprint(\"The maximum value is: \\(maximum)\")", "category": "Python"}, {"instruction": "Create a SQL query to select the records with the name \"John\" from the table \"people\".", "input": "", "output": "SELECT * FROM people WHERE name='John';", "category": "Python"}, {"instruction": "Create a new vector of size 5 filled with zeros.", "input": "", "output": "vec = [ 0., 0., 0., 0., 0. ]", "category": "Python"}, {"instruction": "What is the output of the following C code?\n\nint main() {\n    int x = 10;\n    x = x * -0.5;\n    printf(\"%d\", x);\n    return 0;\n}", "input": "", "output": "The output of the above program is -5.", "category": "Python"}, {"instruction": "Remove all duplicates from an array.", "input": "[1, 1, 2, 3, 4, 5, 3, 4]", "output": "def remove_duplicates(arr):\n    res = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            res.append(element)\n            seen.add(element)\n    return res", "category": "Python"}, {"instruction": "Change the background color of all element with the class \"container\" to blue.", "input": "", "output": "document.querySelectorAll(\".container\").forEach(function(container){\n  container.style.backgroundColor = \"blue\";\n});", "category": "Python"}, {"instruction": "Given an array of strings, generate an object with the strings as keys and the length of each string as values.", "input": "let arr = [\"Hello\", \"World\", \"Foo\", \"Bar\"]", "output": "let arr = [\"Hello\", \"World\", \"Foo\", \"Bar\"];\n\nlet obj = {};\n\nfor(let i=0; i<arr.length; i++){\n obj[arr[i]] = arr[i].length;\n}\n\nconsole.log(obj); // {Hello: 5, World: 5, Foo: 3, Bar: 3}", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if the first string is one character away from the second string.", "input": "String 1 = \"cat\", String 2 = \"cot\"", "output": "def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1", "category": "Python"}, {"instruction": "Given an array of numbers, find the longest increasing sequence in the array.", "input": "Array = [2, 3, 5, 4, 7, 9, 6, 8]", "output": "def longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n    return sequence", "category": "Python"}, {"instruction": "How does debugging help a programmer?", "input": "", "output": "Debugging helps a programmer by identifying the source of errors or bugs in the program. Through debugging, a programmer can pinpoint exactly where the issue is, rather than having to spend time searching through lines of code trying to find the problem. Debugging also allows a programmer to make well-informed decisions when trying to resolve the issue. By understanding the issue in detail and being able to trace the code line by line, the programmer can better assess which possible solutions will be most effective.", "category": "Python"}, {"instruction": "What is the purpose of using an exception handler?", "input": "", "output": "The purpose of an exception handler is to catch and handle any unexpected errors that may occur while code is executing. It is a code block which is used to detect and handle runtime errors when they occur. This allows the code to immediately handle the error, thus avoiding a crash and providing the user with meaningful feedback.", "category": "Python"}, {"instruction": "How can a programmer optimize a code to improve its performance?", "input": "", "output": "A programmer can optimize a code to improve its performance by using techniques like loop optimization, code refactoring, resource optimization, cache optimization, and parallel computing. Loop optimization involves reducing the number of iterations in loops, using variables instead of literals, removing redundant loops, debugging errors, and choosing the most efficient looping techniques. Code refactoring involves restructuring the code to make it more concise, readable, and maintainable. Resource optimization involves using efficient data structures, such as hash tables and balanced trees, to reduce computational resources as well as using optimized algorithms. Cache optimization involves designing well-crafted caches to store frequently accessed data, while parallel computing allows multiple tasks to be completed simultaneously on different CPU cores.", "category": "Python"}, {"instruction": "What is the significance of a long identifier name in programming?", "input": "", "output": "A long identifier name is important for programming as it clearly and accurately describes the purpose of the identifier. It is easier for another programmer to understand what a specific code does if the identifier names are descriptive of their purpose. Long and descriptive names also make the code more organized and help to preserve the syntax. In addition, it allows for better debugging and easier maintenance in the long run.", "category": "Python"}, {"instruction": "Write a code snippet to print a right aligned triangle of asterisks.", "input": "Length: 5", "output": "*\n**\n***\n****\n*****", "category": "Python"}, {"instruction": "What is Naive Bayes classification?", "input": "", "output": "Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of \"naive\" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model.", "category": "Python"}, {"instruction": "Compare and contrast SQL and NoSQL databases.", "input": "", "output": "SQL databases store data in predefined tables and use structured query language (SQL) for querying the data. In contrast, NoSQL databases are designed to store large amounts of unstructured data and are commonly used for distributed data processing. Unlike SQL, NoSQL databases are known for their flexibility and scalability, since they do not require a fixed schema. They also offer a cost-effective alternative to traditional relational databases when large amounts of data must be processed.", "category": "Python"}, {"instruction": "Delete all duplicated characters in a string.", "input": "String: abcabcabc", "output": "abc", "category": "Python"}, {"instruction": "Train a model in PyTorch to classify the following dataset into 4 classes.", "input": "", "output": "import torch\n\n# Load the dataset\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\n\n# Build the model\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15), \n    torch.nn.ReLU(), \n    torch.nn.Linear(15, 4), \n    torch.nn.Softmax()\n)\n\n# Compile the model\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')", "category": "Python"}, {"instruction": "Write a java code to take a string as input and return the number of words present in it.", "input": "", "output": "import java.util.StringTokenizer; \n\npublic class WordCounter \n{ \n    public static int countWords(String str) \n    { \n        StringTokenizer tokenizer = new StringTokenizer(str); \n        return tokenizer.countTokens(); \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Geeks for Geeks class\"; \n        System.out.println(\"Number of words in a given String : \" + countWords(str)); \n    } \n}", "category": "Python"}, {"instruction": "Parse the following HTML code to get all the hyperlinks in the page.", "input": "<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>", "output": "import re\n\nhtml_code = '''\n<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>\n'''\n\nlinks = re.findall(r'href=\"(.*?)\"', html_code)\nprint(links)\n# Output: ['https://example.com/about', 'https://example.com/products']", "category": "Python"}, {"instruction": "Create a function to find the sum of the squares of all natural numbers up to a certain number.", "input": "n = 10", "output": "def sumOfSquares(n): \n    sum = 0\n    for i in range(1, n+1): \n        sum += i*i\n    return sum", "category": "Python"}, {"instruction": "Construct a JavaScript program to find all the prime numbers within a range of numbers", "input": "range = [2,10]", "output": "function findPrimes(range) {\n  let primes = [];\n  for (let i=range[0]; i< range[1]; i++) {\n    if (checkPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nfunction checkPrime(num) {\n  for (let i=2; i<=Math.sqrt(num); i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "What is the purpose of the SQL HAVING clause?", "input": "", "output": "The HAVING clause is used in SQL to restrict the results of a query based on a set of conditions. It filters records that are returned from the GROUP BY clause, and is used in conjunction with aggregate functions used in the SELECT clause. It is similar to the WHERE clause, but WHERE is used to filter records before they are grouped, while HAVING is used to filter the results of the group.", "category": "Python"}, {"instruction": "Create a SQL query to group the table by age and calculate the average salary of each group.", "input": "Table name: employees\nFields: name (varchar(255)), age (int), salary (int)", "output": "SELECT AVG(salary)\nFROM employees\nGROUP BY age;", "category": "Python"}, {"instruction": "Generate a multiplication table for a given number in JavaScript.", "input": "n = 5;", "output": "function createmultiplicationTable(n) \n{ \n for ( var i = 1; i <=10; i++ )\n {\n  document.write(n+\" x \"+i+\" = \"+n*i,\"<br>\");\n }\n} \ncreatemultiplicationTable(n);", "category": "Python"}, {"instruction": "Build a function to convert an adjacency matrix into an adjacency list.", "input": "A = \n[[0, 1, 0, 0], \n [1, 0, 1, 1], \n [0, 1, 0, 0], \n [0, 1, 0, 0]]", "output": "def adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list", "category": "Python"}, {"instruction": "Explain why we use a Dictionary instead of Lists when we need to store multiple pairs of data (key-value pair)?", "input": "", "output": "Lists are used to store an ordered collection of elements, but they are not suitable for storing key-value pairs of data because they don't provide an efficient way to look up values associated with specific keys. Dictionaries provide a more efficient way to store key-value pairs of data, as they use a hashmap underlying data structure. This allows them to quickly determine the value associated with a given key, which makes the fetching and insertion of data much faster and more efficient. Additionally, dictionaries provide the flexibility to insert and update multiple pairs of key-value data.", "category": "Python"}, {"instruction": "Mark the output of the following two lines of C++ code", "input": "int a = 10; \nint b = ++a + ++a;", "output": "a = 11\nb = 23", "category": "Python"}, {"instruction": "Implement a function to perform in-place array rotation.", "input": "arr = [1, 2, 3, 4, 5]\nrotation = 2", "output": "def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1", "category": "Python"}, {"instruction": "Given two strings, find the minimum number of operations required to convert one string to the other.", "input": "String 1 = \"horse\"\nString 2 = \"ros\"", "output": "def find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n\n    return matrix[len_str1][len_str2]", "category": "Python"}, {"instruction": "Write a function that returns the number of times an element appears in a sorted array.", "input": "Array = [3, 8, 10, 10, 10, 13, 15]\nElement = 10", "output": "def get_count(arr, element):\n    left_index = bisect.bisect_left(arr, element) \n    right_index = bisect.bisect_right(arr, element)\n    return right_index - left_index", "category": "Python"}, {"instruction": "Design a class for a grocery store inventory management system.", "input": "", "output": "class GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity\n        else:\n            self.inventory[item] += quantity\n            \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory", "category": "Python"}, {"instruction": "Build a quickly-sortable tree from a given array.", "input": "Array = [3, 8, 4, 5, 2, 10, 7]", "output": "class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node", "category": "Python"}, {"instruction": "Write code to find the powers of two in a given range.", "input": "Range:  0 to 20", "output": "def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers", "category": "Python"}, {"instruction": "Use HTML web storage to exchange data between a web page and the server.", "input": "", "output": "// To store data\nlocalStorage.setItem(\"name\", \"John Doe\");\n  \n// To get data\nvar name = localStorage.getItem(\"name\");\n  \n// To remove data\nlocalStorage.removeItem(\"name\");", "category": "Python"}, {"instruction": "Create a query in SQL to find the record with id 2 from the table \"users\".", "input": "Table Name: users", "output": "SELECT * from users WHERE id = 2;", "category": "Python"}, {"instruction": "Generate a bar chart in R using the given dataset.", "input": "Number of Movies Watched in the Last 6 Months\nMonth \tNumber\nJanuary \t5\nFebruary\t7\nMarch\t9\nApril\t8\nMay\t12\nJune\t11", "output": "# install packages \ninstall.packages(\"ggplot2\")\n  \n# import required libraries \nlibrary(ggplot2) \n  \n# data \nmovies <- c(5, 7, 9, 8, 12, 11)\nmonths <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\")\n  \n# create dataframe object \ndata <- data.frame(months, movies) \n  \n# plot \nggplot(data, aes(x = months, y = movies)) + \n    geom_bar(stat = \"identity\", fill = \"#0066FF\")", "category": "Python"}, {"instruction": "Write a shell script to monitor the usages of CPU and RAM.", "input": "", "output": "#!/bin/bash\n  \n# Display free memory \necho \"Free Memory:\"; \nfree -h;\n  \n# Get disk partitions with available disk space \necho \"Available disk space:\"\ndf -h;\n  \n# Get CPU utilization info \necho \"CPU Utilization: \"\ntop -bn1 | grep \"Cpu(s)\" | \\\n    sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | \\\n    awk '{print 100 - $1\"%\"}';", "category": "Python"}, {"instruction": "Parse the given XML document.", "input": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n    <book>\n    <title>A Game of Thrones</title>\n    <author>George R. R. Martin</author>\n    <price>9.99</price>\n    </book>\n    <book>\n    <title>A Clash of Kings</title>\n    <author>George R. R. Martin</author>\n    <price>12.99</price>\n    </book>\n</bookstore>", "output": "#import the required modules \nimport xml.etree.ElementTree as ET \n  \n# parse the given xml document \ntree = ET.parse('document.xml') \nroot = tree.getroot() \n  \n# iterate over all the elements in the document \nfor book in root.findall('book'): \n    title = book.find('title').text \n    author = book.find('author').text \n    price = book.find('price').text \n  \n    # print the element and its attribute \n    print('Title:', title, ', Author:', author, ', Price:', price)", "category": "Python"}, {"instruction": "Write a MySQL query to create a database called \"flower_shop\".", "input": "", "output": "CREATE DATABASE flower_shop;", "category": "Python"}, {"instruction": "Create a JavaScript object with the keys \"name\", \"age\", and \"location\".", "input": "", "output": "var person = {\n    name: 'John Doe',\n    age: 26,\n    location: 'New York'\n};", "category": "Python"}, {"instruction": "Design a CSS class to center align a div with class name \"main\".", "input": "", "output": ".main {\n    margin: 0 auto;\n    width: 50%;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Write a Regular Expression to match any line with vowels followed by numbers", "input": "", "output": "\\w[aeiouAEIOU]\\d+", "category": "Python"}, {"instruction": "Develop a Django application to store car model, make and year in the database.", "input": "", "output": "# create Django project \ndjango-admin startproject car_database \n  \n# create Django app \ncd car_database \ndjango-admin startapp cars \n  \n# Add 'cars' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = (  \n    ...\n    'cars',\n)\n  \n# Create models.py file\nclass Car(models.Model):\n    model = models.CharField(max_length=50)\n    make = models.CharField(max_length=50)\n    year = models.IntegerField()\n  \n# Make and apply migrations \npython manage.py makemigrations \npython manage.py migrate", "category": "Python"}, {"instruction": "Create a css class for a card component with rounded corners, a light shadow, and a maximum width of 500px.", "input": "", "output": ".card {\n    border-radius: 10px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    max-width: 500px;\n}", "category": "Python"}, {"instruction": "Update the following code to add a method to retrieve elements from the list.", "input": "class MyList\n  def initialize\n    @list = []\n  end\nend", "output": "class MyList\n  def initialize\n    @list = []\n  end\n\n  def get(index)\n    @list[index]\n  end\n\nend", "category": "Python"}, {"instruction": "Given an array of numbers, calculate the average.", "input": "let arr=[5,7,8,9]", "output": "let arr=[5,7,8,9];\n\nlet sum=0;\nfor(let i=0; i<arr.length; i++){\n sum+=arr[i];\n}\nlet average=sum/arr.length;\n\nconsole.log(average); // 7.5", "category": "Python"}, {"instruction": "Write a statement to print a formatted string.", "input": "Name: Joe\nAge: 31", "output": "print(\"My name is {}, and I'm {} years old.\".format(\"Joe\",31))", "category": "Python"}, {"instruction": "Write code to calculate the total number of votes for a candidate in an election.", "input": "candidates = [\"AJ Bascombe\", \"Maya Mathews\", \"Toby White\"]\nvotes = [2000, 4000, 3000]", "output": "total_votes = 0\nfor candidate in range(len(candidates)):\n total_votes+=votes[candidate]\nprint(total_votes)", "category": "Python"}, {"instruction": "Make an API call to get the current weather in a given city.", "input": "", "output": "import requests\n\napi_key = \"<Enter API key here>\"\ncity = \"London\"\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\".format(city, api_key)\n\nres = requests.get(url)\ndata = res.json()\n \nprint(\"Current temperature in {} is {}\u00b0F\".format(city, data[\"main\"][\"temp\"]-273.15 * 9/5 + 32))", "category": "Python"}, {"instruction": "Fix the logic of the function to print out the element in the array.", "input": "let nums = [1, 2, 3, 4];", "output": "let nums = [1, 2, 3, 4];\n\nfunction printArrElement(arr){\n    for(let i = 0; i < arr.length; i++){\n        console.log(arr[i]);\n    } \n}\n\nprintArrElement(nums);", "category": "Python"}, {"instruction": "Write a function that takes in a max number and returns the sum of all numbers between 0 and the max number.", "input": "10", "output": "def sumFromZeroToMax(n):\n  sum = 0\n  for x in range(n+1):\n    sum += x\n  return sum\n\nprint(sumFromZeroToMax(10))", "category": "Python"}, {"instruction": "Create a SQL query to find all records of employees who are over 40 years old.", "input": "", "output": "SELECT * FROM Employees WHERE age > 40;", "category": "Python"}, {"instruction": "Create a virtual environment in Python using the \"virtualenv\" tool.", "input": "", "output": "python -m pip install virtualenv\nvirtualenv envname\nsource envname/bin/activate", "category": "Python"}, {"instruction": "Read in a string of comma-separated integers and create an array of the integers.", "input": "\"1,2,3,4,5\"", "output": "int[] arr = {1,2,3,4,5};", "category": "Python"}, {"instruction": "Write a SQL query that outputs the names of all the students in a given table sorted in descending order", "input": "", "output": "SELECT name FROM students ORDER BY name DESC;", "category": "Python"}, {"instruction": "Alter the following given code so that it will implement the Bubble Sort Algorithm", "input": "def mySort(arr): \n\tn = len(arr) \n\n\tfor i in range(n-1): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]", "output": "def bubbleSort(arr):\n    n = len(arr) \n\n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "What is the difference between static binding and dynamic binding", "input": "", "output": "Static binding is the process of linking a procedure call to the code to be executed during compile-time. This link is done by compiler at the compile-time and is fixed for the life of the program. On the other hand, dynamic binding is the process of linking a procedure call to the code to be executed during run-time. This link is done by the program at the run-time and can be changed during the life of the program.", "category": "Python"}, {"instruction": "Sort a given array of integers using Quick Sort", "input": "", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Why is indexing important in databases?", "input": "", "output": "Indexing in databases is important because it allows for faster access to data. Indexing works by creating an index data structure that stores a specific value or field in the database and a pointer to the data record containing that value. This strategy increases the speed of the query operations by allowing programs to quickly search the index to find the data instead of searching each record in the database one-by-one.", "category": "Python"}, {"instruction": "Find the angle between two given vectors", "input": "", "output": "The angle between two vectors can be found using the following formula: theta = arccos(v1.v2 / (||v1||*||v2||)), where v1 and v2 represent the two given vectors and ||v1|| and ||v2|| are the magnitudes of the vectors.", "category": "Python"}, {"instruction": "What data structure would you use to store a matrix in Python", "input": "", "output": "The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix.", "category": "Python"}, {"instruction": "Implement a simple search engine using recursion.", "input": "query = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]", "output": "def search(query, data):\n  # base case\n  if len(data) == 0:\n    return False\n  # recursive step\n  else:\n    if data[0] == query:\n      return True\n    else:\n      return search(query, data[1:])\n\nquery = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]\n\nprint(search(query, data))", "category": "Python"}, {"instruction": "Edit the given list to only include even numbers.", "input": "list = [2,3,4,5,6,7,8]", "output": "for i in list:\n  if i % 2 != 0:\n    list.remove(i)\n\nprint(list)", "category": "Python"}, {"instruction": "Edit this code to print out the square of a given number, using '#' as a marker.", "input": "num = 8", "output": "num = 8 \n#\n#\n#\n#\n#\n#\n#\n# # # # # # # # # #", "category": "Python"}, {"instruction": "Write a code snippet to find all the Pythagorean triplets which sum up to the given number.", "input": "", "output": "def find_triplet(n):\n    \"\"\"\n    @brief: Finds all Pythagorean triplets which sum upto the given number n\n    @param n: the sum which is the given number \n    @return: a list of all Pythagorean triplets which might sum upto n, or an empty list if none are found\n    \"\"\"\n    triplets = []\n    for a in range(1, n):\n        for b in range(a + 1, n - a):\n            c = int(n - a - b)\n            if (a*a) + (b*b) == (c*c):\n                triplets.append((a, b, c))\n    return triplets", "category": "Python"}, {"instruction": "Make a prediction using the following machine learning model in Python.", "input": "", "output": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)", "category": "Python"}, {"instruction": "From the given data set, calculate the mean and print it out.", "input": "[1, 2, 3, 4, 5]", "output": "data_set = [1, 2, 3, 4, 5]\nmean = sum(data_set) / len(data_set)\nprint(\"The mean is {}\".format(mean))", "category": "Python"}, {"instruction": "Convert the following array of strings to a set of tuples in Python.", "input": "['Python', 'Java', 'JavaScript']", "output": "arr =  ['Python', 'Java', 'JavaScript']\narr_tuple = tuple(arr)\nprint(arr_tuple)", "category": "Python"}, {"instruction": "Write a function in C++ to check if the given array of integers is in ascending order or not.", "input": "[1, 2, 3, 4, 5]", "output": "bool is_ascending(int arr[], int arr_size) \n{ \n    if (arr_size == 1) \n        return true; \n  \n    // Recursively check if the \n    // array is sorted in \n    // non-decreasing order by \n    // calling for the rest of \n    // the array. \n    if (arr[0] < arr[1] && \n        is_ascending(arr + 1, arr_size - 1)) \n        return true; \n    else\n        return false; \n}", "category": "Python"}, {"instruction": "Write a SQL query to output the full names from a 'persons' table.", "input": "", "output": "SELECT first_name, last_name FROM persons;", "category": "Python"}, {"instruction": "Create a python script to determine whether a number is odd or even.", "input": "15", "output": "number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")", "category": "Python"}, {"instruction": "Create a bar chart in Python, plotting the following integer data set.", "input": "[1, 2, 4, 8, 16, 32]", "output": "import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()", "category": "Python"}, {"instruction": "How would you code a basic spell-checker", "input": "", "output": "def spell_checker(input_text):\n    correct_words = []\n    wrong_words = []\n    \n    for word in input_text.split():\n        if is_correct(word):\n            correct_words.append(word)\n        else:\n            wrong_words.append(word)\n            \n    return correct_words, wrong_words\n\n# where is_correct() is an appropriate function to determine if the word is spelled correctly or not", "category": "Python"}, {"instruction": "Write an Iterative program in Java to print the first n terms of the Fibonacci sequence.", "input": "", "output": "public static void printFibonacciIterative(int n) \n{ \n    int prev1=0, prev2=1, sum=0; \n  \n    for (int i = 0; i < n; i++) \n    { \n        System.out.print(sum + \" \"); \n        prev2 = sum; \n        sum = prev1 + prev2; \n        prev1 = prev2; \n    } \n}", "category": "Python"}, {"instruction": "Create a function in JavaScript to take a given number and add 10 to it.", "input": "", "output": "function addTen(num) {\n  return num+10;\n}", "category": "Python"}, {"instruction": "Write a SELECT query to identify the names of authors who have published books with the topic \u2018Artificial Intelligence\u2019.", "input": "", "output": "SELECT name FROM Author WHERE topic = 'Artificial Intelligence';", "category": "Python"}, {"instruction": "Create an array in Python that contains five different values.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Given a list of integers and a target value, calculate two integers in the list that add up to the target value.", "input": "target = 6\nlist = [1, 2, 3, 4, 5]", "output": "(1, 5)", "category": "Python"}, {"instruction": "Write a code snippet to determine the number of odd numbers in a given array.", "input": "", "output": "def count_odds(arr):\n    \"\"\"\n    @brief: Counts the number of odd numbers in a given array\n    @param arr: array whose odd numbers are to be counted\n    @return: the number of odd numbers in the given array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num % 2 == 1:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Modify the following code to swap the values of two variables without using a third variable.", "input": "a = 5\nb = 3", "output": "a = 5\nb = 3\n\na, b = b, a", "category": "Python"}, {"instruction": "Design a program to find all prime numbers up to a given limit n.", "input": "", "output": "def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes", "category": "Python"}, {"instruction": "Write a Java class to define a student object that includes a name and a grade.", "input": "", "output": "public class Student {  \n    //instance variables  \n    String name;  \n    int grade;  \n      \n    //constructor  \n    public Student(String studentName, int studentGrade) {  \n        name = studentName;  \n        grade = studentGrade;  \n    }  \n      \n    //methods  \n    public String getName(){  \n        return name;  \n    }  \n    public int getGrade(){  \n        return grade;  \n    }  \n}", "category": "Python"}, {"instruction": "Design a memory efficient algorithm for a given problem.", "input": "Given a list of integers, find the average of all the elements.", "output": "def find_average(nums):\n    length = len(nums)\n    total = 0\n    \n    for i in range(length):\n        total += nums[i]\n        \n    return total / length", "category": "Python"}, {"instruction": "Explain one of the most significant application of neural networks in computer science.", "input": "", "output": "One of the most significant applications of neural networks in computer science is image recognition. Neural networks, with their deep learning capabilities, are able to tackle complex image recognition problems that are difficult to solve with traditional algorithmic approaches. Neural network based systems have been used successfully to identify objects in photos, process real-time video frames, and even to diagnose medical conditions such as cancer.", "category": "Python"}, {"instruction": "How can you use recurrent neural networks for sequence prediction?", "input": "", "output": "Recurrent neural networks (RNNs) can be used for sequence prediction tasks. RNNs are powerful models that are able to capture patterns from sequences of data and can remember information from previous inputs. The network is comprised of layers and nodes, and each layer contains nodes that are connected to the previous layer. When a sequence is fed into the network, the nodes of the first layer are activated based on the input. The output of the first layer serves as the input for the next layer, and so on. As the sequence progresses, the internal state of the network is updated and used to make predictions. The output of the RNN is then a prediction of the next element in the sequence.", "category": "Python"}, {"instruction": "Design a data structure for a deck of cards", "input": "", "output": "A data structure for a deck of cards could involve creating an array of objects or associative arrays, where each object or associative array corresponds to a card in the deck. The object or associative array should include properties such as suit, rank, and value to store information about the card. Additionally, the data structure should also include functions to manipulate the deck such as shuffle, draw, and sort.", "category": "Python"}, {"instruction": "Create a web application using Flask, which provides a search form", "input": "", "output": "The output would involve creating a web application using Flask that renders a search form. The search form should be able to take in a user's query, process the query and return relevant search results in a structured format. Additionally, the application should include an appropriate error handler for incorrect or invalid queries.", "category": "Python"}, {"instruction": "Write a MySQL query to join 2 tables", "input": "Table1: users\nID | Name | Email\n\nTable2: orders\nOrderID | UserID | OrderDate", "output": "SELECT users.ID, users.Name, users.Email, orders.OrderID, orders.OrderDate\nFROM users\nINNER JOIN orders\nON users.ID = orders.UserID;", "category": "Python"}, {"instruction": "Develop a React Native application to display a list of recent news articles", "input": "", "output": "The output would involve creating a React Native application with a News List component which fetches news data from an API and displays it as a list. The application should include features to sort the news list by category and to pull to refresh for the latest news. Additionally, the application should support the navigation between different categories and be responsive for different display sizes.", "category": "Python"}, {"instruction": "Translate the following sentiment analysis model written in Python to JavaScript", "input": "model = tf.keras.models.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(tem_train_data.shape[1],)),\n tf.keras.layers.Dense(2, activation='softmax')\n])", "output": "const model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: tem_train_data.shape[1]}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));", "category": "Python"}, {"instruction": "Design an algorithm to help a user navigate through a maze", "input": "", "output": "A possible algorithm to navigate through a maze could involve a Depth-First search approach. This approach involves finding a vertex within the maze, marking it as visited and then exploring all of its unvisited neighbors. After all of the neighbors are explored, the algorithm continues to explore the closest unvisited neighbor which is found on the same level of depth. This process continues until the user reaches the end of the maze.", "category": "Python"}, {"instruction": "Create a Django application to serve an API endpoint", "input": "The API endpoint should take an ID and return a user's name and age.", "output": "The output would involve creating a Django application with an API view that takes in the ID as the parameter and returns a dictionary containing the user's name and age. The Django application should also include the necessary models and associated functions, a URL configuration, and a core application to be used in the root project directory.", "category": "Python"}, {"instruction": "Write a MySQL query to find the last four digit of the customer ID from the customer table.", "input": "customer table\n| customer_id | customer_name | address |\n--------------------------------------------\n| 000001 | John Doe | Street 1 |\n| 000002 | Jane Doe | Street 2 |\n| 000003 | John Smith | Street 3 |", "output": "SELECT RIGHT(customer_id, 4) FROM customer;", "category": "Python"}, {"instruction": "Create a JavaScript program that updates the navigation menu based on user preferences", "input": "", "output": "function updateNavMenu(preferences) {\n  // code to update navigation menu for each user preference\n  let html = '';\n  for (let preference in preferences) {\n    if (preferences[preference]) {\n      html += '<li>' + preference + '</li>';\n    }\n  }\n  document.getElementById(\"navMenu\").innerHTML = html;\n}", "category": "Python"}, {"instruction": "Describe a good object oriented design approach for the following problem statement:", "input": "Design an application that provides a way for users to store and access their banking records.", "output": "An object oriented design approach for the problem statement would involve the following: creating a base class for the banking records which has properties to store user details and banking information, providing a way to create a savings account and checking account class that can be derived from the base class and a set of methods which can add, delete, update, retrieve and access information from the banking records. Additionally, methods which securely store and access the data should be implemented to ensure the safety of the users' data.", "category": "Python"}, {"instruction": "Design a program to detect an infinite loop in a given program.", "input": "", "output": "def detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    if line in setOfInstructions:\n      return True\n    setOfInstructions.add(line)\n  return False", "category": "Python"}, {"instruction": "Create a stack and add two elements to it.", "input": "", "output": "class Stack():\n  def __init__(self):\n    self.items = []\n  \n  def push(self, item):\n    self.items.append(item)\n  \n  def pop(self):\n    return self.items.pop()\n\nstack = Stack()\nstack.push(5)\nstack.push(7)", "category": "Python"}, {"instruction": "Create a 2D array with n columns and m rows and fill it with random numbers.", "input": "Rows: 6, Columns: 8", "output": "import random\n\ndef create2DArray(row, col):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr", "category": "Python"}, {"instruction": "Identify the correct loop structure to traverse through a list of numbers.", "input": "", "output": "for number in list_of_numbers:", "category": "Python"}, {"instruction": "Write a HTML code to display a ordered list of five items inside a div with the classname \"list\".", "input": "", "output": "<div class=\"list\">\n  <ol>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n  </ol>\n</div>", "category": "Python"}, {"instruction": "Write an algorithm to search for numbers in an array and replace them with their square roots.", "input": "[1,2,3,4,5]", "output": "Function searchAndReplace(nums):\n  for i in range(len(nums)):\n    if nums[i] >= 0:\n      nums[i] = math.sqrt(nums[i])\n  return nums", "category": "Python"}, {"instruction": "Acquire the necessary data to apply linear regression on the following problem statement", "input": "Predict the average property value in a particular city given population density, housing costs and average income.", "output": "The necessary data to apply linear regression on the problem statement would include population density, housing costs and average income of the particular city. Additionally, the average property value should also be collected as the target variable to be predicted. The data could be collected from public sources like census websites or through primary data collection methods such as surveys.", "category": "Python"}, {"instruction": "Classify the following sentence as a declaration or an instruction", "input": "Be careful while crossing the street.", "output": "Instruction", "category": "Python"}, {"instruction": "Create a Tkinter window with a label that says \u201cHello World!\u201d", "input": "", "output": "import tkinter\n\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a code to generate a random float between -5 and 5.", "input": "", "output": "import random\n\nrandom_float = random.uniform(-5, 5)\nprint(random_float)", "category": "Python"}, {"instruction": "How can you utilize SQL in machine learning?", "input": "", "output": "SQL is useful in machine learning projects because it allows the data scientist to organize and store large datasets. SQL can also be used to join different datasets and merge unstructured datasets efficiently. Further, with SQL, data scientists can filter and prepare the dataset for further machine learning modeling. Also, SQL can be used to find out the statistical properties of a dataset, such as maximum values, mean, median and other summary outputs, which are very useful for machine learning projects. Finally, SQL can be used to predict future values through statistical models.", "category": "Python"}, {"instruction": "Create an array with the following numbers: 3,2,4,5,8.", "input": "", "output": "let myArray = [3, 2, 4, 5, 8];", "category": "Python"}, {"instruction": "How is AI used in finance?", "input": "", "output": "AI is being increasingly used in finance to improve the accuracy and speed of processes, make better-informed decisions, and streamline customer service. Financial institutions use AI to automate and speed up operations such as accounts payable and receivable, loans underwriting, money management, fraud detection, and decision-making in stock markets. AI can also be used to help manage large amounts of data and detect patterns in the data. For example, AI can be used to perform sentiment analysis on large amounts of customer data or to detect potential fraudulent activity. It can also provide insights into customer behavior and preferences that can be used to personalize services and create targeted product offerings.", "category": "Python"}, {"instruction": "How do you develop a software application through agile?", "input": "", "output": "Developing a software application through agile is a process that systematically focuses on small, incremental changes that are then tested on a regular basis to ensure their effectiveness. This type of development conflicts with traditional linear development approaches that focus on big, planned and predetermined changes. Agile development cycles include iterative sprints and frequent collaboration between stakeholders to ensure the project is proceeding in the right direction. In agile, software development proceeds in a cyclic and iterative manner, which involves planning, designing, coding, and testing. During the sprints, stakeholders review and discuss software progress to ensure continued progress is being made and to help with decision making. Agile development typically involves using automated tools and technologies such as configuration management software and integrated development environments to facilitate quicker development cycles.", "category": "Python"}, {"instruction": "Using the given code, extract the year from the given dateTime object.", "input": "import datetime \n  \ndateTime = datetime.date.today()", "output": "year = dateTime.year\nprint(year)\n\n# Output: 2021", "category": "Python"}, {"instruction": "What is the data type of the given expression?", "input": "expression = 10 + 20", "output": "Integer.", "category": "Python"}, {"instruction": "Sort the list in Ascending order of the second element of each element in the list.", "input": "list = [(-5, 2), (1, 0), (1, 3), (3, 4), (-3, -9), (-10, -2)]", "output": "sorted_list = sorted(list, key=lambda x: x[1])\nprint(sorted_list)\n\n# Output: [(-3, -9), (1, 0), (-10, -2), (-5, 2), (1, 3), (3, 4)]", "category": "Python"}, {"instruction": "Create a JavaScript object with two properties, x and y, and set them to 10 and 20, respectively.", "input": "", "output": "let obj = {\n    x: 10,\n    y: 20\n};", "category": "Python"}, {"instruction": "What is the value of \"c\" after the code is executed?", "input": "a = 10\nb = 20\nc = a + b", "output": "30.", "category": "Python"}, {"instruction": "Using \"dictionary\" as the input, write code to print out the frequency of the words in the dictionary.", "input": "dictionary = {'apple':2, 'banana':3, 'cherry':1}", "output": "for key, value in dictionary.items():\n    print(\"The frequency of {} is {}\".format(key, value))", "category": "Python"}, {"instruction": "Write code to calculate the cosine similarity between the two given sentences", "input": "Sentences: \"this is a great day\" and \"this is a superb day\"", "output": "from sklearn.metrics.pairwise import cosine_similarity\nsentence1 = \"this is a great day\"\nsentence2 = \"this is a superb day\"\nvector1 = sentence1.split()\nvector2 = sentence2.split()\ncos_sim = cosine_similarity([vector1], [vector2])\nprint(cos_sim[0][0])", "category": "Python"}, {"instruction": "Using the given context and dataframe \"df\", write code to select the targets and features.", "input": "Context: We are building a logistic regression model.\n\nDataFrame \"df\": \n \nIndex  | Temp (C) | Humidity  | Rain (mm)  | Rainfall (yes/no)\n0      |     15   |    80     |    0       |     No\n1      |     16   |    75     |    0       |     No\n2      |     17   |    64     |    10      |     Yes", "output": "targets = df['Rainfall (yes/no)']\nfeatures = df[['Temp (C)', 'Humidity', 'Rain (mm)']]", "category": "Python"}, {"instruction": "Create a function that takes two strings as parameters, compares them, and returns 0 if they are equal, 1 if the first string is greater, and -1 if the second string is greater.", "input": "", "output": "def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 > str2:\n        return 1\n    else:\n        return -1", "category": "Python"}, {"instruction": "Create a class to illustrate the concept of encapsulation in Python.", "input": "", "output": "class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year", "category": "Python"}, {"instruction": "Write a code to find the most frequently occurring item in the list.", "input": "[17, 25, 6, 30, 14, 28, 6, 20, 13, 25]", "output": "def most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    max_freq = 0\n    for x in freq.values():\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\n\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\n\nprint(most_frequent(data))", "category": "Python"}, {"instruction": "Create a CSS class and style it to give any HTML element a blue background color.", "input": "", "output": ".blue-bg {\n    background-color: #4f7ed4;\n}", "category": "Python"}, {"instruction": "Write an SQL query to select the \"name\" and \"salary\" columns of all employees with salary greater than 10000.", "input": "Table name: employees", "output": "SELECT name, salary FROM employees\nWHERE salary > 10000;", "category": "Python"}, {"instruction": "Edit the following HTML tag to make the link open in a new tab.", "input": "<a href=\"https://www.example.com\">Example</a>", "output": "<a href=\"https://www.example.com\" target=\"_blank\">Example</a>", "category": "Python"}, {"instruction": "Define an absolute difference function in Python to find the difference between two numbers.", "input": "", "output": "def absolute_difference(x, y):\n    return abs(x - y)", "category": "Python"}, {"instruction": "Change the following if-else expression to a ternary operator", "input": "a = 10\nb = 5\n\nif a > b:\n    c = a\nelse:\n    c = b", "output": "c = a if a > b else b", "category": "Python"}, {"instruction": "Generate a valid MySQL query to retrieve a column from a table", "input": "Table = Users, Column = Address", "output": "SELECT Address FROM Users;", "category": "Python"}, {"instruction": "Using the given input, modify the following HTML code so it shows a list of 5 items", "input": "<ul>\n    <li></li>\n</ul>", "output": "<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ul>", "category": "Python"}, {"instruction": "Implement Binary Search in Python", "input": "[2, 3, 4, 5, 11, 19, 20]", "output": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\n\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")", "category": "Python"}, {"instruction": "What is the name of the following component of a computer system", "input": "A component that can perform data processing and calculations", "output": "The component in question is known as the Central Processing Unit (CPU).", "category": "Python"}, {"instruction": "What type of function is needed to solve the following problem", "input": "Compute the average age of a given list of numbers", "output": "A reduction function is needed in order to solve the given problem, which will iterate through the list of numbers and compute the average age. The function could take the form of a loop or other type of iterator.", "category": "Python"}, {"instruction": "Using the given input, modify the code to remove all occurences of \"abcd\"", "input": "string s = \"abcd abcd abcd abcd\";", "output": "string s = \" \";\ns = s.replaceAll(\"abcd\", \"\");", "category": "Python"}, {"instruction": "Cut and paste the following Java code snippet and add a condition to ensure that the number entered is always greater than 0.", "input": "int number;\nScanner in = new Scanner (System.in);\nnumber = in.nextInt ();", "output": "int number;\nScanner in = new Scanner (System.in);\ndo {\n    number = in.nextInt ();\n} while (number <= 0);", "category": "Python"}, {"instruction": "Use the following input to write a python code for calculating the area of a triangle", "input": "Base = 6cm, Height = 4.5cm", "output": "# calculate the area of a triangle\n# define the constant base and height\nbase = 6.0\nheight = 4.5\n# calculate the area\narea = 0.5 * base * height\n# print the result\nprint('The area of the triangle is: %0.2f cm^2' %area)", "category": "Python"}, {"instruction": "prompt the user to enter a number, then output it in a sentence", "input": "", "output": "number = int(input(\"Enter a number: \"))\nprint(\"You entered: \", number)", "category": "Python"}, {"instruction": "Detect if the given code is a loop or not and output true if it is a loop or false if it is not.", "input": "x = 0\nwhile (x < 10):\n    x += 1", "output": "True", "category": "Python"}, {"instruction": "Change the code so that it swaps the contents of two variables in one line.", "input": "a = 5\nb = 10", "output": "a, b = b, a", "category": "Python"}, {"instruction": "Create a function that takes two strings as inputs and outputs their concatenation.", "input": "", "output": "def concat_strings(string1, string2):\n    return string1 + string2", "category": "Python"}, {"instruction": "Output the sum of all the elements in the two-dimensional array.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "45", "category": "Python"}, {"instruction": "Take the input list and transform it to a dictionary where the keys are the elements of the list and the values equal to True.", "input": "my_list = [\"apple\", \"banana\", \"strawberry\"]", "output": "my_dict = { \"apple\": True, \"banana\": True, \"strawberry\": True }", "category": "Python"}, {"instruction": "Convert the following code from if/else to a ternary operator and output the result as a string.", "input": "if age > 18:\n    verdict = \"Adult\"\n    \nelse:\n    verdict = \"Minor\"", "output": "verdict = \"Adult\" if age > 18 else \"Minor\"", "category": "Python"}, {"instruction": "Generate a correct JavaScript program to convert a string into an array", "input": "s = \"hello world\";", "output": "//function to split a string into an array\nfunction stringToArray(s) {\n    return s.split(' ');\n}\n\n//create a string\ns = \"hello world\";\n\n//convert string to array\narray = stringToArray(s);\n\n//print the array\nconsole.log(array);", "category": "Python"}, {"instruction": "Using the comment as a guide, edit the code that prints \"X out of 10\" to print \"X out of Y\".", "input": "x = 5\nprint(\"x out of 10\")\n#TODO: replace 10 with the correct variable", "output": "x = 5\nprint(\"x out of \" + str(x))", "category": "Python"}, {"instruction": "Generate an XOR function in C++.", "input": "", "output": "int xor(int x, int y) {\n  return (x || y) && !(x && y);\n}", "category": "Python"}, {"instruction": "Create a function in Python that adds two numbers.", "input": "", "output": "def add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y", "category": "Python"}, {"instruction": "Create a function in JavaScript to implement Newton's Method of Numerical Approximation.", "input": "", "output": "function newtonsMethod(f, df, x, epsilon) {\n    //  Keep track of how many iterations we calculate\n    let iteration = 0;\n    while (Math.abs(f(x)) > epsilon && iteration < MAX_ITER) {\n        x -= f(x) / df(x);\n        iteration += 1;\n    }\n    return x;\n}", "category": "Python"}, {"instruction": "Create a class in jQuery to handle user authentication.", "input": "", "output": "class UserAuthentication {\n    constructor (startupOptions) {\n        // initialize settings, read startup settings, etc.\n    }\n\n    authenticate(credentials) {\n        // verify user credentials, read data, etc.\n    }\n\n    logout() {\n        // delete session, reset variables, etc.\n    }\n}", "category": "Python"}, {"instruction": "Output the nth Fibonacci number in JavaScript.", "input": "10", "output": "function Fibonacci(n) \n{ \n\tvar a = 0, b = 1, c, i; \n\tif (n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nconsole.log(Fibonacci(10)); \n55", "category": "Python"}, {"instruction": "Create a quick calculator in Python based on the user input.", "input": "2 * 3 + 5", "output": "def quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\n\nprint(quick_calc(\"2 * 3 + 5\"))\n11", "category": "Python"}, {"instruction": "Use a while loop to print a message 5 times.", "input": "Message: Hello!", "output": "var i = 0;\n\nwhile (i < 5) {\n    console.log('Hello!');\n    i++;\n}", "category": "Python"}, {"instruction": "Write a regular expression that returns \u201cHello World\u201d if found in the provided text.", "input": "Text: This example will show you how to print Hello World using Regular Expressions.", "output": "/Hello World/", "category": "Python"}, {"instruction": "Create a if statement in JavaScript that checks if number is divisible by 3.", "input": "Number: 9", "output": "if (number % 3 === 0) {\n    console.log('Number is divisible by 3');\n}", "category": "Python"}, {"instruction": "Classify the given code as \"correct\" or \"incorrect\".", "input": "def extract_file_name(file_path):\n    dot_index = file_path.find('.')\n    slash_index = file_path.find('/')", "output": "correct", "category": "Python"}, {"instruction": "Create a new table in a database named 'customers' with the specified columns.", "input": "", "output": "CREATE TABLE customers (\n  id int NOT NULL AUTO_INCREMENT, \n  firstname varchar(45) NOT NULL, \n  lastname varchar(45) NOT NULL, \n  address varchar(100) NOT NULL, \n  phone varchar(20) NOT NULL, \n  email varchar(45) NOT NULL, \n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a JavaScript program to convert an array of objects into an object of objects.", "input": "[\n  { id: '001', firstName: 'John' , lastName: 'Doe' },\n  { id: '002', firstName: 'Jim' , lastName: 'Smith' },\n  { id: '003', firstName: Joe , lastName: 'Mail' },\n]", "output": "const arrayToObj = (arr) => {\n    return arr.reduce((acc, item) => {\n      acc[item.id] = item;\n      return acc;\n    }, {});\n  }\n\nconst result = arrayToObj([\n  { id: '001', firstName: 'John' , lastName: 'Doe' },\n  { id: '002', firstName: 'Jim' , lastName: 'Smith' },\n  { id: '003', firstName: Joe , lastName: 'Mail' },\n]);\n\nconsole.log(result);\n// Output\n// {\n//   001: { id: '001', firstName: 'John', lastName: 'Doe' },\n//   002: { id: '002', firstName: 'Jim', lastName: 'Smith' },\n//   003: { id: '003', firstName: 'Joe', lastName: 'Mail' },\n// }", "category": "Python"}, {"instruction": "Name a built-in function that rounds off a given number to the nearest whole number.", "input": "", "output": "The built-in function to round off a given number to the nearest whole number is the round() function.", "category": "Python"}, {"instruction": "Write a Java program to sort the elements of an int array in the descending order.", "input": "[1, 10, 4, 2, 5, 3, 9]", "output": "public class ArraySort { \n    public static void main(String[] args) \n    { \n        int array[] = {1, 10, 4, 2, 5, 3, 9}; \n\n        int n = array.length; \n\n        for (int i = 0; i < n-1; i++) \n            for (int j = 0; j < n-i-1; j++) \n                if (array[j] < array[j+1]) { \n                    int temp = array[j]; \n                    array[j] = array[j+1]; \n                    array[j+1] = temp; \n                } \n\n        for (int i=0; i<n; ++i) \n            System.out.println(array[i] + \" \"); \n    } \n}", "category": "Python"}, {"instruction": "Write an HTML code for a common list item.", "input": "", "output": "<li>List item</li>", "category": "Python"}, {"instruction": "Calculate how many distinct values can be inserted in a binary tree containing 2 nodes.", "input": "", "output": "2^2 - 1 = 3 distinct values can be inserted in a binary tree containing 2 nodes.", "category": "Python"}, {"instruction": "Generate a function in Java for finding the largest number in an array.", "input": "", "output": "public static int largestNumber(int[] arr) { \n    int max = arr[0]; \n    for (int i = 1; i < arr.length; i++)\n        if (arr[i] > max) \n            max = arr[i]; \n    return max; \n}", "category": "Python"}, {"instruction": "Create an HTML page that displays a list of users and their ages.", "input": "Alice: 25\nBob: 27\nCarol: 30", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>User Ages</title>\n</head>\n<body>\n    <ul>\n        <li>Alice: 25</li>\n        <li>Bob: 27</li>\n        <li>Carol: 30</li>\n    </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Swift code to print out the signature of a function.", "input": "func addNumbers(a: Int, b: Int) -> Int {\n    return a + b\n}", "output": "print(addNumbers.signature)\n// prints: func addNumbers(a: Int, b: Int) -> Int", "category": "Python"}, {"instruction": "You are presented with a string which contains a code snippet. Extract the variable types from this string.", "input": "let myVariable1 = 5; \nlet myVariable2 = true; \nlet myVariable3 = \"Hello\";", "output": "let myVariable1: number, myVariable2: boolean, myVariable3: string", "category": "Python"}, {"instruction": "What are the best practices when writing Javascript code?", "input": "", "output": "The best practices for writing JavaScript code include using valid and properly formatted code, utilizing functions, avoiding global variables, using comments to explain code, using object and array literals, and avoiding memory leaks.", "category": "Python"}, {"instruction": "Edit the following HTML code to make all the headings bold.\n\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>", "input": "", "output": "<h1><strong>Heading 1</strong></h1>\n<h2><strong>Heading 2</strong></h2>", "category": "Python"}, {"instruction": "Write a PHP code for finding the longest word in an array of strings.", "input": "$arr = [\"Hello\", \"World\", \"My\", \"Name\", \"Is\"];", "output": "<?php\n\n$arr = [\"Hello\", \"World\", \"My\", \"Name\", \"Is\"];\n\n//Finding the longest word in the array\n$longestWord = \"\";\nforeach($arr as $word) {\n    if (strlen($word) > strlen($longestWord)) {\n        $longestWord = $word;\n    }\n}\necho \"The longest word is: \" . $longestWord;\n?>", "category": "Python"}, {"instruction": "Write a SQL query to find the name and occupation of all people older than 60.", "input": "", "output": "SELECT name, occupation \nFROM people \nWHERE age > 60;", "category": "Python"}, {"instruction": "Write an HTML code snippet for creating a search box.", "input": "", "output": "<form action=\"/search\" method=\"get\">\n    <input name=\"s\" type=\"text\" placeholder=\"Search...\">\n    <input type=\"submit\" value=\"Search\">\n</form>", "category": "Python"}, {"instruction": "Write a function to create a retail price tag given a cost, taxes and discounts.", "input": "cost = 5\ntax = 0.08\ndiscount = 0.2", "output": "def price_tag(cost, tax, discount):\n  tax_amount = cost * tax \n  discounted_price = cost + tax_amount - (discount * cost)\n  return \"Retail Price: $\" + str(round(discounted_price, 2))\n\nprice_tag(cost, tax, discount) # returns \"Retail Price: $7.20\"", "category": "Python"}, {"instruction": "Write a function that takes in a string and a character and returns the first index at which the character appears.", "input": "str = 'Hello World'\nchar = 'o'", "output": "def firstIndex(str, char): \n    index = -1\n    for i in range(len(str)):  \n        if (str[i] == char):  \n            index = i \n            break\n    return index \n\nresult = firstIndex(str, char) \nprint(result) # prints 4", "category": "Python"}, {"instruction": "Write a code to print out the union of two sets using Python.", "input": "", "output": "def find_union(A, B):\n    return list(set(A).union(set(B)))\n\nA = [1, 2, 3, 4] \nB = [4, 5, 6, 7] \nprint(find_union(A, B))", "category": "Python"}, {"instruction": "Create a function to find the number of elements in the list which have a value larger than the given number 'k'.", "input": "[10, 15, 20, 25], k = 15", "output": "def count_larger(lst, k):\n    count = 0\n    for i in lst:\n        if i > k:\n            count += 1\n    return count\n        \nprint(count_larger([10, 15, 20, 25], 15))", "category": "Python"}, {"instruction": "Generate a code to perform a Merge Sort on an unsorted array of numbers.", "input": "", "output": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        mergeSort(L) \n        mergeSort(R) \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "Edit the following Python class 'Foo' to accept a list of numbers upon instantiation.", "input": "class Foo():\n    def __init__(self):\n        self.lst = []", "output": "class Foo():\n    def __init__(self, lst):\n        self.lst = lst", "category": "Python"}, {"instruction": "Write a code to print out the list of the numbers from 0 to 10 in descending order.", "input": "", "output": "for n in range(10, -1, -1): \n    print(n)", "category": "Python"}, {"instruction": "Design a C++ program to read and display a matrix.", "input": "", "output": "#include <iostream>\n\nusing namespace std; \n\nint main(){\n    int r, c, e; \n    cout << \"Input number of rows : \"; \n    cin >> r; \n    cout << \"Input number of columns : \"; \n    cin >> c; \n    \n    int M[r][c]; \n    // Take input of elements \n    for(int i = 0; i < r; ++i){\n        cout << \"Enter elements of row \"<< i+1; \n        for(int j = 0; j < c; ++j){\n            cin >> e; \n            M[i][j] = e;\n        }\n    }\n  \n    // Display \n    cout << \"Elements of matrix\\n\"; \n    for(int i = 0; i < r; ++i){ \n        for(int j = 0; j < c; ++j){ \n            cout << M[i][j] << \" \";\n        } \n        cout << endl;\n    } \n    return 0;\n}", "category": "Python"}, {"instruction": "Formulate a suitable machine learning model to perform topic clustering.", "input": "", "output": "A suitable machine learning model to perform topic clustering would be a clustering algorithm such as k-means, or a hierarchical clustering algorithm. These algorithms use the similarity or distance between each datapoint in order to group them into meaningful clusters.", "category": "Python"}, {"instruction": "Output a list of each element in the input increase twice.", "input": "[1,10,20]", "output": "def double_each(lst):\n    return [x*2 for x in lst]\n\nprint(double_each([1,10,20]))", "category": "Python"}, {"instruction": "Given the input list of size N, write a code to print out the sum of the first N-1 elements.", "input": "X = [10, 20, 30, 40, 50]", "output": "def sum_firstN_minusOne(X):\n    total = 0\n    for i in range(len(X)-1):\n        total += X[i]\n    return total\n\nprint(sum_firstN_minusOne(X))", "category": "Python"}, {"instruction": "Modify the input so that the following Python program returns 'Yes'", "input": "num = 10\n\nif num > 5:\n    print('No')", "output": "num = 10\n\nif num > 5:\n    print('Yes')", "category": "Python"}, {"instruction": "Write an SQL query to find the average salary of all the employees with 10 years of experience.", "input": "", "output": "SELECT AVG(salary) \nFROM employees \nWHERE experience = 10;", "category": "Python"}, {"instruction": "Write a Java program for computing the product of two matrixes.", "input": "", "output": "public class MatrixProduct { \n  \n    // Method for matrix multiplication \n    static int[][] multiplyMatrix(int[][] matrix1,  \n                                    int[][] matrix2) \n    { \n        int rowsInA = matrix1.length; \n        int columnsInA = matrix1[0].length; // same as rows in B \n        int columnsInB = matrix2[0].length; \n        int[][] product = new int[rowsInA][columnsInB]; \n        for (int i = 0; i < rowsInA; i++) { \n            for (int j = 0; j < columnsInB; j++) { \n                for (int k = 0; k < columnsInA; k++) { \n                    product[i][j] += matrix1[i][k] * matrix2[k][j]; \n                } \n            } \n        } \n        return product; \n    } \n  \n    // Driver code \n    public static void main(String args[]) \n    { \n        int[][] matrixA = { { 1, 2, 3 }, \n                            { 4, 5, 6 } \n                            }; \n  \n        int[][] matrixB = { { 7, 8 }, \n                            { 9, 10 }, \n                            { 11, 12 } \n                            }; \n  \n        int[][] product = multiplyMatrix(matrixA, matrixB); # the product matrix \n  \n        // Display the result \n        System.out.println(\"Product of two matrices is : \"); \n        for (int[] row : product) { \n            for (int column : row) { \n                System.out.print(column + \" \"); \n            } \n            System.out.println(); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Write an HTML code for creating a dropdown menu with two options, \"Apple\" and \"Orange\".", "input": "", "output": "<select>\n    <option value=\"Apple\">Apple</option>\n    <option value=\"Orange\">Orange</option>\n</select>", "category": "Python"}, {"instruction": "Write an HTML program to display an output as a table.", "input": "", "output": "<html>\n    <head>\n        <title>Table example</title>\n    </head>\n    <body>\n        <table border = \"1\">\n            <tr>\n            <td>Row 1, Column 1</td>\n            <td>Row 1, Column 2</td> \n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td> \n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "What is the output of the following code?\n\ndef check_even(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(check_even(3))", "input": "", "output": "Odd", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence up until 50.", "input": "", "output": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55", "category": "Python"}, {"instruction": "Create a React component that displays the text \"Hello World!\".", "input": "", "output": "import React from 'react';\n\nconst HelloWorld = () => (\n  <h1>Hello World!</h1>\n);\n\nexport default HelloWorld;", "category": "Python"}, {"instruction": "Calculate the area of a square with side length 4.", "input": "", "output": "Area = 4 x 4 = 16", "category": "Python"}, {"instruction": "Initialize a 2D array with all elements set to 0 in C.", "input": "", "output": "int arr[N][M] = {0};", "category": "Python"}, {"instruction": "Suggest an algorithm to search an element in a sorted array using Java.", "input": "", "output": "public int binarySearch(int[] arr, int element){\n    int low = 0;\n    int high = arr.length - 1;\n    while(low <= high){\n        int mid = (low + high) / 2;\n        if(arr[mid] == element)\n            return mid;\n        else if(arr[mid] > element)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Create a switch statement in JavaScript to compare two values.", "input": "", "output": "let x = 1;\nlet y = 2;\n\nswitch (x) {\n case 1: \n  if (y === 2) {\n    console.log('x is 1 and y is 2');\n    break;\n  }\n default:\n  console.log('No match');\n}", "category": "Python"}, {"instruction": "Name 3 popular JavaScript frameworks.", "input": "", "output": "Three popular JavaScript frameworks are React, Angular, and Vue.", "category": "Python"}, {"instruction": "Suggest a plugin or software that can be used to debug a React application.", "input": "", "output": "React's official debugging tool, the React Developer Tools, is a great plugin for debugging React applications. It is available for both Chrome and Firefox, and provides detailed information about the component hierarchy, current props and state of the application, and detailed performance metrics. Additionally, React's Error Boundary feature can be used to detect and debug errors and issues in the React application.", "category": "Python"}, {"instruction": "Using Java, write the code to calculate the sum of elements in a two-dimensional array.", "input": "int[][] arr = { \n                {2, 3, 8}, \n                {4, 5, 1}, \n                {7, 0, 6} \n              };", "output": "public class SumOfEle{ \n    public static void main(String[] args) { \n        // creating a two-dimensional array \n        int[][] arr = { \n            {2, 3, 8}, \n            {4, 5, 1}, \n            {7, 0, 6} \n        }; \n        // Creating an int variable to store the value. \n        int sum = 0;\n\n        for (int i=0; i<arr.length; i++){ \n            for (int j=0; j<arr[i].length; j++) {\n                sum += arr[i][j]; \n            }\n        } \n        System.out.println(\"Sum of Array Elements = \"+sum); \n    } \n}", "category": "Python"}, {"instruction": "Write the code for the following sorting algorithm.", "input": "Bubble Sort", "output": "def bubbleSort(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Name the four programming paradigms.", "input": "", "output": "The four main programming paradigms are procedural, object-oriented, functional, and logical.", "category": "Python"}, {"instruction": "Guess what is wrong with the following HTML code.", "input": "<h1>Welcome<h1>  \n<b>This is a sample page<b>", "output": "The HTML tags should be closed properly. The correct code should be:\n\n<h1>Welcome</h1>  \n<b>This is a sample page</b>", "category": "Python"}, {"instruction": "Convert the following JavaScript function to TypeScript.", "input": "function countOccurences(numList,num) {\n    let count = 0;\n    for (let i = 0; i < numList.length; i++) {\n        if (numList[i] === num) count++;\n    }\n    return count;\n}", "output": "function countOccurences(numList: number[], num: number): number {\n    let count = 0;\n    for (let i = 0; i < numList.length; i++) {\n        if (numList[i] === num) count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Write a TensorFlow program to compute the sum of two tensors.", "input": "x = [[1,2],[3,4]] \ny = [[5,6],[7,8]]", "output": "import tensorflow as tf\n\nx = tf.constant([[1,2],[3,4]], dtype=tf.int32) \ny = tf.constant([[5,6],[7,8]], dtype=tf.int32)\n\n#Sum operation\nz = tf.add(x, y)\n\n#Run in session\nwith tf.Session() as session:\n  print(session.run(z))\n\n# Output: \n# [[ 6  8]\n#  [10 12]]", "category": "Python"}, {"instruction": "What are the components of a class in Java?", "input": "", "output": "A class in Java consists of the following components: fields (state of the object), constructors (constructs an object), methods (behavior of the object), nested classes and interfaces (classes that are associated with the class in which it is declared). The fields and methods are collectively called members of the class. Fields are variables that hold the state of the object while methods represent the behaviors of the object.", "category": "Python"}, {"instruction": "Write a JavaScript program to accept a string and display the characters in reverse order.", "input": "", "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet str = \"JavaScript\";\nconsole.log(reverseString(str)); \n// Output: tpircSavaJ", "category": "Python"}, {"instruction": "Create a Python script to output the sum of the elements in a given 2-D array.", "input": "X = [[11, 18], [20, 1], [12, 16]]", "output": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums+=X[i][j]\n    return sums\n\nprint(sum_elements(X))", "category": "Python"}, {"instruction": "Create an algorithm in JavaScript to find the closest pair of points from a given set of points.", "input": "let points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];", "output": "// algorithm to find closest pair of points \n// uses divide and conquer approach \nconst closestPair = (points) => { \n  // base case: two or fewer points\n  if (points.length <= 2) {\n    return points;\n  }\n\n  // divide\n  const middle = Math.floor(points.length / 2);\n  const left = points.slice(0, middle);\n  const right = points.slice(middle);\n  \n  // conquer\n  const leftPoints = closestPair(left);\n  const rightPoints = closestPair(right);\n\n  const closestPair = getClosestPair(leftPoints, rightPoints);\n\n  // combine\n  return closestPair;\n}\n \n// get closest pair between two sets of points\nconst getClosestPair = (leftPoints, rightPoints) => {\n  // calculating the minimum distance\n  let minDist = getDistance(leftPoints[0], rightPoints[0]);\n  let closestPair = [leftPoints[0], rightPoints[0]];\n  \n  for (let i = 0; i < leftPoints.length; i++) {\n    for (let j = 0; j < rightPoints.length; j++) {\n      let dist = getDistance(leftPoints[i], rightPoints[j]);\n      if (dist < minDist) {\n        minDist = dist;\n        closestPair = [leftPoints[i], rightPoints[j]];\n      }\n    }\n  }\n \n  // return the minimum distance and its pair\n  return closestPair;\n}\n \n// calculate the Euclidean distance between two points\nconst getDistance = (point1, point2) => {\n  let xDist = Math.abs(point2[0] - point1[0]);\n  let yDist = Math.abs(point2[1] - point1[1]);\n \n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n}\n\n// testing our function \nlet points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];\nlet closestPoints = closestPair(points);\nconsole.log(closestPoints);\n//Output: [[-2, 2], [2, 0]]", "category": "Python"}, {"instruction": "Output the result of 2 to the power of 8 in Java.", "input": "", "output": "int result = (int) Math.pow(2, 8);\nSystem.out.println(result);\n\n//Output: 256", "category": "Python"}, {"instruction": "Generate a SQL query to return all records from the table with a specified column including null values", "input": "Table name: my_table\nColumn name: age", "output": "SELECT * \nFROM my_table \nWHERE age IS NULL OR age != '';", "category": "Python"}, {"instruction": "Sort the list using Quick Sort", "input": "[2, 3, 5, 6, 1, 4]", "output": "def quick_sort(arr): \n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Input two numbers and output the maximum one in Python", "input": "3, 5", "output": "a = 3\nb = 5\n\nif a > b:\n    print(a)\nelse:\n    print(b)", "category": "Python"}, {"instruction": "Convert a given XML document to JSON document", "input": "", "output": "<?xml version=\"1.0\"?>\n<root>\n  <person>\n    <name>John Doe</name>\n    <age>22</age>\n    <address>\n      <street>123 Main St.</street>\n      <city>Anytown</city>\n      <state>FL</state>\n      <zip>12345</zip>\n    </address>\n  </person>\n</root>\n\n{\n  \"person\" : {\n    \"name\" : \"John Doe\",\n    \"age\" : 22,\n    \"address\" : {\n      \"street\" : \"123 Main St.\",\n      \"city\" : \"Anytown\",\n      \"state\" : \"FL\",\n      \"zip\" : \"12345\"\n    }\n  }\n}", "category": "Python"}, {"instruction": "Create a formula that calculates the total cost of an item given the item price and tax rate", "input": "", "output": "Total Cost = Item Price + (Item Price * (Tax Rate/100))", "category": "Python"}, {"instruction": "Create an SQL query to find all states in a given zip code", "input": "The zip code is 90210.", "output": "SELECT state FROM zip_codes WHERE zip_code = '90210';", "category": "Python"}, {"instruction": "Given an input list of integers, sort the list in ascending order", "input": "", "output": "def sortAsc(lst): \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst", "category": "Python"}, {"instruction": "Design a method for reversing a string in Java", "input": "", "output": "public static String reverse(String str) {\n    String reversedString = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        reversedString += str.charAt(i);\n    }\n\n    return reversedString;\n}", "category": "Python"}, {"instruction": "Write a C++ program that prints the following pattern to the screen:", "input": "", "output": "#include <iostream>\n\nint main()\n{\n    // Print the pattern using nested for loop\n    for (int i=0; i<5; i++)\n    {\n        for (int j=0; j<i+1; j++)\n            std::cout << \"*\";\n        std::cout << std::endl;\n    } \n    return 0;\n}\n\n/* Output\n*\n**\n***\n****\n*****\n*/", "category": "Python"}, {"instruction": "Create a HTML page with an ordered list of items using", "input": "Five items: apple, banana, orange, strawberry, and lemon.", "output": "<html>\n  <body>\n    <ol>\n      <li>Apple</li>\n      <li>Banana</li>\n      <li>Orange</li>\n      <li>Strawberry</li>\n      <li>Lemon</li>\n    </ol>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a VBA macro to convert a sequence of text to uppercase.", "input": "The text is: \"Hello World\".", "output": "Sub upperCase()\n    \n    Dim myText As String\n    myText = \"Hello World\"\n    \n    ActiveCell.Value = UCase(myText)\n    \nEnd Sub", "category": "Python"}, {"instruction": "Create a SQL statement to select the first ten elements from a table with a specific id.", "input": "The table name is 'products', and the product id is 1.", "output": "SELECT * FROM products WHERE product_id = 1 LIMIT 10;", "category": "Python"}, {"instruction": "Write a method to compare two unsorted arrays of integers and find the number of mismatches.", "input": "[1, 3, 2, 5], [2, 4, 1, 5]", "output": "def get_mismatches(arr1, arr2):\n    mismatches = 0\n    if len(arr1) != len(arr2):\n        return -1\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            mismatches += 1\n    return mismatches", "category": "Python"}, {"instruction": "Create a new list filled with the same values as the existing list but with the values multiplied by 5.", "input": "[1, 2, 3, 4, 5]", "output": "new_list = [i * 5 for i in [1, 2, 3, 4, 5]]", "category": "Python"}, {"instruction": "Write a function to move all zeros in an array to the end.", "input": "[1, 2, 0, 3, 4, 0, 5]", "output": "def moveZeroes(nums):\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nums[i-zeros] = nums[i]\n    nums[len(nums)-zeros:] = [0] * zeros", "category": "Python"}, {"instruction": "Construct an if-else statement to determine if a given number is divisible by 4", "input": "", "output": "if (number % 4 == 0) \n    System.out.println(\"The number is divisible by 4\"); \nelse \n    System.out.println(\"The number is not divisible by 4\");", "category": "Python"}, {"instruction": "Formulate a SQL query that fetches the records with the latest date", "input": "Table name: my_table\nColumns: id, date", "output": "SELECT *\nFROM my_table \nORDER BY date DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a script in JavaScript to iterate over a given array of objects and return all objects with the color green.", "input": "const arr = [{ color: 'blue', shape: 'square' }, { color: 'red', shape: 'triangle' }, { color: 'green', shape: 'circle' }]", "output": "const greenObjects = arr.filter(obj => obj.color === 'green');", "category": "Python"}, {"instruction": "Write a JavaScript function that returns that number of elements from an array of numbers which sum up to a given target.", "input": "array = [2, 3, 7, 8, 10] \ntarget = 11", "output": "function findElementsSum(array, target){\n    let result = [];\n    for (let i = 0; i < array.length; i++){\n        for (let j = i+1; j < array.length; j++){\n            if (array[i] + array[j] == target){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the list of products whose price is greater than 50.", "input": "", "output": "SELECT * \nFROM products\nWHERE price > 50;", "category": "Python"}, {"instruction": "Write code to create a dictionary from a list of tuples, where each tuple consists of a color name and its value.", "input": "items = [(\"red\", \"#FF0000\"), (\"blue\", \"#0000FF\")]", "output": "colors = dict(items)", "category": "Python"}, {"instruction": "Write an SQL statement to add two new columns, 'size' and 'color', to the existing products table.", "input": "", "output": "ALTER TABLE products \nADD COLUMN size INT, \nADD COLUMN color VARCHAR(100);", "category": "Python"}, {"instruction": "Write code to delete all elements in a given Python list which are NOT integer type.", "input": "lst = [1, \"a\", 2.3, False, 4, \"abc\"]", "output": "for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)", "category": "Python"}, {"instruction": "Write a code snippet to get the name of the planet which is the fifth planet from the sun.", "input": "", "output": "name_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nfifth_planet = name_planets[4]\nprint(fifth_planet)", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the items in the list and print their corresponding index.", "input": "lst = [1,2,3]", "output": "for i, num in enumerate(lst):\n    print(i, num)", "category": "Python"}, {"instruction": "Write a shell command to switch to a given directory", "input": "Dirpath=/Users/username/Documents", "output": "cd /Users/username/Documents", "category": "Python"}, {"instruction": "What data structure would be best to store key-value pairs?", "input": "", "output": "A hash table (or a dictionary in Python) is the best data structure to store key-value pairs.", "category": "Python"}, {"instruction": "Explain how a min-heap works.", "input": "", "output": "A min-heap is a data structure used for storing and retrieving data. It is a complete binary tree, where the root node is the minimum element in the heap. Each node of the heap follows the \"min-heap\" property, where the parent node is always less than or equal to its children. This property allows for efficient data retrieval; the parent node can always be deleted from the heap, since it is the minimum value, and the heap can be re-balanced in O(log n) time.", "category": "Python"}, {"instruction": "Describe the use of the class keyword in C++.", "input": "", "output": "The class keyword in C++ is used to declare a class, which contains (public or private) data members, member functions, and constructors. A class can be thought of as a blueprint for creating objects that have their own state and behavior. Data members represent the state of an object, and the member functions represent the behavior of the object. Class constructors are special member functions that allow for the creation of an instance of a class.", "category": "Python"}, {"instruction": "Edit the following code in Java to include a new method \u201cprintName()\u201d.", "input": "public class Person {\n    String name;\n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n}", "output": "public class Person {\n    String name;\n    \n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n    \n    void printName(){\n        System.out.println(\"Name: \"+ name);\n    }\n}", "category": "Python"}, {"instruction": "What is polymorphism and how it is used in object-oriented programming?", "input": "", "output": "Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition.", "category": "Python"}, {"instruction": "Create a function in JavaScript to search an element in a given sorted array.", "input": "arr = [1, 3, 4, 5, 6, 7, 9, 11]", "output": "function sortedArraySearch(arr, el) {\n  let start = 0, end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === el) return true;\n    else if (arr[mid] < el) start = mid + 1;\n    else end = mid - 1;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Writing a Python function which takes a 2D array as an argument and transposes it.", "input": "arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]", "output": "def transpose_(arr):\n  transposedarr = []\n  for i in range(len(arr[0])):\n    row = []\n    for j in range(len(arr)):\n      row.append(arr[j][i])\n    transposedarr.append(row)\n  return transposedarr", "category": "Python"}, {"instruction": "Write a Python script to detect if two numbers have the same frequency of digits.", "input": "", "output": "def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is a palindrome and has all the vowels in it.", "input": "", "output": "def all_vowels_palindrome(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word == word[::-1]:\n        return False\n    for char in vowels:\n        if char not in word:\n            return False\n    return True", "category": "Python"}, {"instruction": "Compute the average age of the following ages: 18, 20, 17, 19, 15.", "input": "", "output": "Average age = 17.8", "category": "Python"}, {"instruction": "Create a web server in Java to handle a POST request.", "input": "", "output": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class WebServer {\n    public static void main(String[] args) throws Exception {\n        // listen for a connection from a client\n        ServerSocket connection = new ServerSocket(80);\n        Socket clientSocket = connection.accept();\n        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        // get the request data\n        String line;\n        String requestData = \"\";\n        while ((line = in.readLine()) != null) {\n            if (line.startsWith(\"POST\")) {\n                requestData = line.split(\"\\\\s+\")[1];\n                break;\n            }\n        }\n        // send a response\n        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n        out.print(\"HTTP 200 OK\\n\");\n        // respond to the request\n        out.write(handleRequest(requestData));\n        out.flush();\n        out.close();\n    }\n\n    public static String handleRequest(String requestData) {\n        return \"Received request data: \" + requestData;\n    }\n}", "category": "Python"}, {"instruction": "Find the lowest integer that can not be represented as the sum of two prime numbers.", "input": "", "output": "The lowest integer that can not be represented as the sum of two prime numbers is 45.", "category": "Python"}, {"instruction": "Run the program located in 'helloworld.py'", "input": "", "output": "python helloworld.py", "category": "Python"}, {"instruction": "Identify the type of a variable in a Python program.", "input": "x = [1, 2, 3]", "output": "type(x) # List", "category": "Python"}, {"instruction": "Implement a function to return the element that appears most frequently in a list.", "input": "[5,5,5,5,6,6,7,7,7]", "output": "def find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    max_freq = 0\n    most_frequent_element = None\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n            most_frequent_element = num\n\n    return most_frequent_element", "category": "Python"}, {"instruction": "Write a function to check whether two lists are equal.", "input": "list1=[1,2,3,4,5]\nlist2=[1,2,3,4,5]", "output": "def equal(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Can you code a solution to Bubble Sort an array of integers?", "input": "[5, 4, 3, 2, 1]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Generate a regular expression to match a string of consecutive numbers with a minimum of 4 digits.", "input": "", "output": "^[0-9]{4,}$", "category": "Python"}, {"instruction": "Implement a webhook endpoint in Java using Spring MVC to process a payment request.", "input": "", "output": "@RestController\npublic class PaymentController {\n    @PostMapping(\"/payment\")\n    public void processPayment(@RequestBody PaymentRequest request) {\n        // Process the payment inside this method\n    }\n}", "category": "Python"}, {"instruction": "Create a Drupal 8 theme that implements a 3 column layout with a header, side bar, content and footer.", "input": "", "output": "<html>\n    <head>\n        <title>{{ site.name }}</title>\n        <style>\n            body {\n                display: flex; \n                flex-direction: column;\n            }\n\n            header, footer {\n                flex-basis: 10%;\n            }\n\n            main {\n                flex-basis: 80%;\n                display: flex;\n            }\n\n            #sidebar {\n                flex-basis: 20%;\n            }\n\n            #content {\n                flex-basis: 80%;\n            }\n        </style>\n    </head>\n    <body>\n        <header>\n            {% include 'head.html.twig' %}\n        </header>\n        <main>\n            <div id=\"#sidebar\">\n                {% include 'sidebar.html.twig' %}\n            </div>\n            <div id=\"content\">\n                {% block content %}\n                {% endblock %}\n            </div>\n        </main>\n        <footer>\n            {% include 'footer.html.twig' %}\n        </footer>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a React component that renders a table containing the records from an array of objects.", "input": "const records = [\n    { id: 1, name: 'Adam', age: 25 },\n    { id: 2, name: 'James', age: 30 },\n    { id: 3, name: 'Nick', age: 28 },\n    { id: 4, name: 'John', age: 29 }\n];", "output": "import React from 'react';\n \nconst RecordTable = (props) => (\n    <div>\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Age</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                props.records.map(record => (\n                    <tr key={record.id}>\n                        <td>{ record.id }</td>\n                        <td>{ record.name }</td>\n                        <td>{ record.age }</td>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    </div>\n);\n \nexport default RecordTable;", "category": "Python"}, {"instruction": "Write a bash script that searches for a given text string in a directory tree recursively.", "input": "", "output": "#!/bin/bash\n\nsearch_string=\"text string\"\ndirectory=\"directory_name\"\n\n#searching for text string recursive in the directory\ngrep -rnw $directory -e \"$search_string\"", "category": "Python"}, {"instruction": "Translate the following SQL query into MongoDB syntax.", "input": "SELECT * FROM properties WHERE bedrooms > 3 and price < 500", "output": "db.properties.find({\n    $and: [\n        { bedrooms: { $gt: 3 } },\n        { price: { $lt: 500 } }\n    ]\n})", "category": "Python"}, {"instruction": "Write a PHP script to loop through a multidimensional array and print out the values.", "input": "$array = array('fruit' => array('apple', 'banana', 'orange'), \n               'vegetable' => array('carrot', 'potato'));", "output": "<?php\n \n$array = array('fruit' => array('apple', 'banana', 'orange'), \n               'vegetable' => array('carrot', 'potato'));\n foreach ($array as $category => $values) {\n     echo \"Category: \" . $category . \"\\n\";\n     foreach ($values as $value) {\n         echo \"Value: \" . $value . \"\\n\";\n     }\n }\n \n?>", "category": "Python"}, {"instruction": "Write an SQL query to find all the customers who've purchased an item in the last month.", "input": "", "output": "SELECT customers.*\nFROM customers\nJOIN orders \n  ON customers.customer_id = orders.customer_id\nWHERE orders.order_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);", "category": "Python"}, {"instruction": "Write a JavaScript function to search a string for a specified value and return the position of the match.", "input": "searchString = \"banana\"\nsearchValue = \"a\"", "output": "function searchString(str, val) {\n  let pos = -1;\n  const len = str.length;\n\n  for (let i=0; i < len; i++) {\n    if (str[i] === val) {\n      pos = i;\n      break;\n    }\n  }\n\n  return pos;\n}\n\nconst searchString = 'banana';\nconst searchValue = 'a';\nconst searchResult = searchString(searchString, searchValue);\nconsole.log(searchResult); // outputs 2, because 'a' is in the 2nd position in \"banana\"", "category": "Python"}, {"instruction": "Edit this code snippet to reverse a string in Python.", "input": "def reverse_string(s):\n    # Edit here\n    return reversed_string", "output": "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string", "category": "Python"}, {"instruction": "Write an SQL query to select the students who scored higher than the average in Maths.", "input": "", "output": "SELECT * FROM student_scores\nWHERE math_score > (SELECT AVG(math_score) from student_scores);", "category": "Python"}, {"instruction": "Choose the correct output for following code snippet.", "input": "x = \"hello world\"\ny = x\ny[0] = \"H\"", "output": "x = \"Hello world\"", "category": "Python"}, {"instruction": "Create a program that takes two parameters and print out the result of the larger one.", "input": "param1 = 20\nparam2 = 50", "output": "def largest_param(param1, param2):\n    if param1 > param2:\n        return param1\n    else:\n        return param2", "category": "Python"}, {"instruction": "Take two strings and a separator as inputs and join the two strings using the separator and output the resulting string.", "input": "str1=\"Hello\"\nstr2=\"World\"\nseparator=\"-\"", "output": "def join_strings(str1, str2, separator):\n    return str1 + separator + str2", "category": "Python"}, {"instruction": "Write a Python program to sort the given list of dictionary elements by the score value", "input": "lst = [{\"score\":1},{\"score\":5},{\"score\":8}]", "output": "def sort_by_score(lst):\n    lst.sort(key=lambda item: item['score'])\n    return lst", "category": "Python"}, {"instruction": "Write a class definition for a Box class.", "input": "", "output": "class Box:\n    def __init__(self, width, length, height):\n        self.width = width\n        self.length = length\n        self.height = height\n\n    def calculate_volume(self):\n        return self.width * self.length * self.height", "category": "Python"}, {"instruction": "Generate a random 5-element list of integers between 0 and 10.", "input": "", "output": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(5)]", "category": "Python"}, {"instruction": "Write a C# code snippet to add 2 numbers.", "input": "", "output": "int number1 = 5;\nint number2 = 10;\nint sum = number1 + number2;", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines whether one string is an anagram of the other.", "input": "string1 = 'listen';\nstring2 = 'silent'", "output": "function isAnagram(string1, string2) {\n  const s1 = string1.split('').sort().join('');\n  const s2 = string2.split('').sort().join('');\n  return s1 === s2;\n}", "category": "Python"}, {"instruction": "Rewrite the following Java code using a switch statement instead of if/else.", "input": "int time = 10;\n\nif (time < 12) {\n  System.out.println(\"Good morning\");\n} else if (time < 17) {\n  System.out.println(\"Good afternoon\");\n} else {\n  System.out.println(\"Good evening\");\n}", "output": "int time = 10;\n\nswitch (time) {\n  case time < 12:\n    System.out.println(\"Good morning\");\n    break;\n  case time < 17:\n    System.out.println(\"Good afternoon\");\n    break;\n  case time >= 17:\n    System.out.println(\"Good evening\");\n    break;\n}", "category": "Python"}, {"instruction": "Create a validation rule to check if an email address is valid for an input field in JavaScript.", "input": "", "output": "function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}", "category": "Python"}, {"instruction": "Write a Python program to print a random integer between 0 and 5.", "input": "", "output": "import random \n  \n# Print random integer  \nprint(random.randint(0, 5))", "category": "Python"}, {"instruction": "Convert this CSV data into a Pandas DataFrame.", "input": "name,age\nJohn,20\nJames,31", "output": "import pandas as pd\n\ndata = pd.read_csv('data.csv')\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Edit the following HTML to create a heading with the title \"Welcome\".", "input": "<h2>Hello World</h2>", "output": "<h2>Welcome</h2>", "category": "Python"}, {"instruction": "Convert the following chess board into a 2D array in JavaScript.", "input": "+---+\n|BR |\n|BK |\n| BB|\n|BR |\n+---+", "output": "let chessBoard = [[\"BR\", \"BK\", \"BB\", \"BR\"]];", "category": "Python"}, {"instruction": "Create a program that takes a string and returns an object with the count of all the characters in the string.", "input": "\"Hello World\"", "output": "function charCount(str) {\n  let result = {};\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i].toLowerCase();\n    result[char] = (result[char] || 0) + 1;\n  }\n  return result;\n}\n\nconsole.log(charCount('Hello World')); // output: {h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}", "category": "Python"}, {"instruction": "Develop a program that finds the maximum number of overlapping events within a given time period.", "input": "[[1, 7], [2, 5], [3, 6], [8, 10]]", "output": "function maxOverlapping(arr) {\n  let max = 0;\n  let curr = 0;\n  const timeline = {};\n  for (let i = 0; i < arr.length; i++) {\n    const start = arr[i][0];\n    const end = arr[i][1];\n    timeline[start] = (timeline[start] || 0) + 1;\n    timeline[end] = (timeline[end] || 0) - 1;\n  }\n  for (const key in timeline) {\n    curr += timeline[key];\n    max = Math.max(max, curr);\n  }\n  return max;\n}\n\nconsole.log(maxOverlapping([[1, 7], [2, 5], [3, 6], [8, 10]])); // output: 3", "category": "Python"}, {"instruction": "Create a loop that will print out numbers from 0 to 12.", "input": "", "output": "for (let i = 0; i <= 12; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Code a solution to remove any element from given list if it appears more than 3 times.", "input": "[1,2,3,1,1,1,2]", "output": "def remove_excess_lst(lst): \n    # Count the frequency of each element in the list \n    cnt = Counter(lst)\n\n    # Return the list with elements appearing more than 3 times removed \n    return list(filter(lambda x: cnt[x] <= 3, lst))", "category": "Python"}, {"instruction": "Convert the given list of dictionaries to a tuple of tuples.", "input": "lst = [{\"name\":\"John\", \"age\":21}, {\"name\":\"Bill\", \"age\":30}]", "output": "def convert_to_tuple(lst):\n    tup = [(x['name'], x['age']) for x in lst]\n    return tuple(tup)", "category": "Python"}, {"instruction": "Edit the code below to calculate minimum of 3 numbers.", "input": "def min(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "output": "def min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Create a variables in Python to store the following information.", "input": "Name: John, Age: 35", "output": "name = \"John\"\nage = 35", "category": "Python"}, {"instruction": "Generate a valid regular expression to catch URLs in strings.", "input": "", "output": "r\"(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})\"", "category": "Python"}, {"instruction": "Given a Python function, edit the function such that it correctly prints the second highest value of the list.", "input": "def getSecondMax(a):\n    print(max(a))", "output": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)", "category": "Python"}, {"instruction": "Using the input, write a function that prints out the Nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Use the given HTML markup to generate a web page with a headline, body and paragraphs.", "input": "<h1>My web page</h1>", "output": "<html>\n<head>\n    <title>My web page</title>\n</head>\n<body>\n    <h1>My web page</h1>\n    <p>This is my web page.</p>\n    <p>It contains some information about me.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Find the 4th element in the given expression.", "input": "list x=[1,3,5,7,9,8]", "output": "Element: 7", "category": "Python"}, {"instruction": "Using the given sentence, design a regular expression which will match the given word.", "input": "Word: apple\nSentence: I bought an apple from the store.", "output": "regex: \\bapple\\b", "category": "Python"}, {"instruction": "Use recursion to construct a list of the first 10 powers of two (1, 2, 4, 8, ...).", "input": "", "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]", "category": "Python"}, {"instruction": "Create a function that returns the sum of the Fibonacci sequence to the nth number", "input": "", "output": "def FibonacciSum(n): \n    fib1 = 0\n    fib2 = 1\n    if n < 0: \n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(2,n+1): \n            fib_n = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib_n\n            sum = sum + fib_n\n        return sum", "category": "Python"}, {"instruction": "Create an HTML web page that contains two text fields and two buttons", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Two Text Fields and Two Buttons</title>\n  </head>\n  <body>\n    <form action=\"\">\n      <input type=\"text\" placeholder=\"Input 1\" />\n      <input type=\"text\" placeholder=\"Input 2\" />\n      <button type=\"submit\">Button 1</button>\n      <button type=\"reset\">Button 2</button>\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a code to extract the length of the longest sentence in a given text", "input": "Text: The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.", "output": "def get_longest_sentence(text):\n    sentences = text.split('. ')\n    longest_sent_len = 0\n    longest_sent = ''\n    for sentence in sentences:\n        if len(sentence) > longest_sent_len:\n            longest_sent_len = len(sentence)\n            longest_sent = sentence\n    return longest_sent_len\n\n# Verify it works\ntext = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.'\nprint(get_longest_sentence(text))", "category": "Python"}, {"instruction": "Create a CSS rule to rotate a text 45 degrees", "input": "", "output": "transform: rotate(45deg);", "category": "Python"}, {"instruction": "Write a code to identify the longest palindrome in a given string", "input": "String: kayakracecar", "output": "def get_longest_palindrome(s):\n    longest_palindrome = ''\n    s_length = len(s)\n    for i in range(s_length):\n        for j in range(i, s_length):\n            substring = s[i:j + 1]\n            if len(substring) > len(longest_palindrome) and substring == substring[::-1]:\n                longest_palindrome = substring\n    return longest_palindrome\n\n# Verify it works\nprint(get_longest_palindrome('kayakracecar'))", "category": "Python"}, {"instruction": "Create a JavaScript object to fulfill the following purpose", "input": "Create a calculator that can add, subtract, multiply and divide two numbers.", "output": "const Calculator = {\n  add: function(a, b) {\n    return a + b;\n  },\n  subtract: function(a, b) {\n    return a - b;\n  },\n  multiply: function(a, b) {\n    return a * b;\n  },\n  divide: function(a, b) {\n    return a / b;\n  },\n};", "category": "Python"}, {"instruction": "Write a function that calculates the Fibonacci numbers to the nth number", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a valid regular expression that matches a valid U.S. phone number?", "input": "", "output": "^\\d{10}$|(^\\d{3}\\-\\d{3}\\-\\d{4}$)|(^\\(\\d{3}\\) \\d{3}\\-\\d{4}$)", "category": "Python"}, {"instruction": "Write an R program to generate 5 random numbers between 0 and 1.", "input": "", "output": "set.seed(1234)\nrunif(5, min = 0, max = 1)", "category": "Python"}, {"instruction": "Create an HTML page that includes three buttons with labels \"A\", \"B\" and \"C\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Page Title</title>\n</head>\n<body>\n <button>A</button>\n <button>B</button>\n <button>C</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an R program to print out the numbers from 0-50, in steps of 4.", "input": "", "output": "x <- seq(from = 0, to = 50, by = 4)\nprint(x)", "category": "Python"}, {"instruction": "Sort the given array of strings by their length.", "input": "Array: ['hello', 'hi', 'howdy']", "output": "Sorted Array: ['hi', 'hello', 'howdy']", "category": "Python"}, {"instruction": "Invert the given dictionary.", "input": "Dictionary: {'a': 1, 'b': 2, 'c':3}", "output": "Inverted dictionary: {1: 'a', 2: 'b', 3: 'c'}", "category": "Python"}, {"instruction": "Extract the username and domain name from the given email address.", "input": "Email address: johnsmith@example.com", "output": "Username: johnsmith\nDomain name: example.com", "category": "Python"}, {"instruction": "Construct a class that takes a string and capitalizes the first letter.", "input": "", "output": "class CapitalizedWord:\n    def __init__(self, word):\n        self.word = word\n    \n    def get_capitalized_word(self):\n        return self.word[0].upper() + self.word[1:]", "category": "Python"}, {"instruction": "Create an iOS table view to display the list of items.", "input": "", "output": "class TableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        // Number of sections your table view has\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Number of rows the table view should have\n        return items.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n\n    var items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n}", "category": "Python"}, {"instruction": "Write a MySQL query to fetch all the employees with the salary greater than 40,000.", "input": "", "output": "SELECT * FROM employees WHERE salary > 40000;", "category": "Python"}, {"instruction": "Create an array of objects in JavaScript for the following data: id, first name, last name, age.", "input": "", "output": "const array = [\n    { id: 1, firstName: 'John', lastName: 'Doe', age: 20 },\n    { id: 2, firstName: 'Jane', lastName: 'Smith', age: 21 },\n    { id: 3, firstName: 'Mike', lastName: 'Williams', age: 22 }\n];", "category": "Python"}, {"instruction": "Write a Flask route to store the inputted data in the database.", "input": "url: '/store_data' \ndata: { first_name: 'John', last_name: 'Doe' }", "output": "@app.route('/store_data', methods=['POST'])\ndef store_data():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n return jsonify(message=\"Data stored successfully.\")", "category": "Python"}, {"instruction": "Create a Python function that takes a string and prints out its reverse.", "input": "string = \"Hello world!\"", "output": "def reverseString(string):\n  return string[::-1]\n\nprint(reverseString(string)) # Output: !dlrow olleH", "category": "Python"}, {"instruction": "Write a SQL query to find the names of the people who have a salary greater than the average salary.", "input": "Table name: Employees\nColumns: id, name, salary", "output": "SELECT name \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees);", "category": "Python"}, {"instruction": "Using CSS, write a code to set the font size of all the HTML elements on the page to 14px", "input": "", "output": "* {\n    font-size: 14px;\n}", "category": "Python"}, {"instruction": "Write an HTML page that displays one heading and two paragraphs.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Page Title</title>\n</head>\n<body>\n <h1>Heading</h1>\n <p>Paragraph 1</p>\n <p>Paragraph 2</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML page that displays the following text in the body: \"Hello World!\".", "input": "", "output": "<html>\n  <head>\n  </head>\n  <body>\n    Hello World!\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript program to generate a random aluminum hexadecimal color code.", "input": "", "output": "let color = \"#\"; \nlet characters = '0123456789ABCDEF'; \nfor (let i = 0; i < 6; i++)\n   color += characters[Math.floor(Math.random() * 16)];\n\nconsole.log(color); # Output: #6f435a", "category": "Python"}, {"instruction": "Write a JavaScript program to create an array with the first element as the maximum and all other elements as the minimum value of the previous element.", "input": "let arr = [5, 4, 3, 2, 1];", "output": "let result = [];\nlet max = arr[0];\nresult.push(max);\nfor (let i = 1; i < arr.length; i++) {\n  let min = Math.min(max, arr[i]);\n  result.push(min);\n  max = min;\n}\n\nconsole.log(result); # Output: [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Using jQuery, write a snippet to add a click event handler to a given HTML element.", "input": "#html element\n<div class=\"my-button\">Click Me!</div>", "output": "$('.my-button').click(function(){\n    // Code here \n});", "category": "Python"}, {"instruction": "Create a program which takes two strings and checks if they are anagrams of one another.", "input": "Input string 1: eats\nInput string 2: seat", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = input(\"Input string 1: \")\n    str2 = input(\"Input string 2: \")\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Write a code that takes in two strings that are anagrams of each other and determines whether they are anagrams.", "input": "str1 = 'martha'\nstr2 = 'hartma'", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = 'martha'\n    str2 = 'hartma'\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.", "input": "words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\ngiven_string = 'hello'", "output": "def find_words(words, given_string):\n    count = 0\n    for word in words:\n        if word == given_string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\n    given_string = 'hello'\n    print(find_words(words, given_string))", "category": "Python"}, {"instruction": "Design a class named Circle that can store information about a circle and perform calculations on it.", "input": "", "output": "class Circle:\n    \n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14 * self.radius * self.radius\n    \n    def calculate_circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Using Java, write a function to find the count of all odd numbers between a given range.", "input": "int start = 1;\nint end  = 10;", "output": "public static int countOddNumbers(int start, int end) { \n    int count = 0; \n    for (int i = start; i <= end; i++) \n        if (i % 2 != 0) \n            count++; \n  \n    return count; \n}\n\nSystem.out.println(countOddNumbers(start, end)); # Output: 5", "category": "Python"}, {"instruction": "Generate an HTML table with 3 columns for Name, Email and Phone Number.", "input": "", "output": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Phone Number</th>\n    </tr>\n    <tr>\n        <td>John Doe</td>\n        <td>john@example.com</td>\n        <td>123-456-7890</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Create a MongoDB query that returns all documents that contain the string \"query\".", "input": "", "output": "db.collection.find({ $text: { $search: \"query\" } })", "category": "Python"}, {"instruction": "Write a JavaScript function that takes two numbers and returns the sum of all numbers in between the two.", "input": "", "output": "function sumNumbers(x, y) {\n  let sum = 0\n  for(let i = x; i <= y; i++) {\n    sum += i\n  }\n  return sum\n}", "category": "Python"}, {"instruction": "Create a new C++ class with a constructor and destructor.", "input": "", "output": "class Example {\npublic:\n Example();\n ~Example();\n};\n\nExample::Example() {}\n\nExample::~Example() {}", "category": "Python"}, {"instruction": "Write a SQL query to retrieve data from two tables with similar columns.", "input": "Table1\n\n| id | name | address |\n|----|------|---------|\n| 1  | John |  NYC    |\n| 2  | Mary |  LA     |\n\nTable2\n\n| id | name | address |\n|----|------|---------|\n| 3  | Mark |  Chicago|\n| 4  | Tom  |  Miami  |", "output": "SELECT * from Table1, Table2\nWHERE Table1.id = Table2.id;", "category": "Python"}, {"instruction": "Explain what data encapsulation is.", "input": "", "output": "Data encapsulation is a software programming concept that allows the internal representation of an object to be hidden from the outside world. It is used to protect the data from being modified by parts of the program that should not have access to the data. It is also used to provide a way to extend the functionality of an object without editing the object code itself.", "category": "Python"}, {"instruction": "Design an algorithm to add two given binary numbers", "input": "", "output": "def add_binary(b1, b2):\n \u00a0 \u00a0# initalize result\n \u00a0 \u00a0result = \"\"\n \u00a0 \u00a0carry = 0\n \u00a0 \u00a0# iterate over the bits\n \u00a0 \u00a0for i in range(max(len(b1), len(b2))):\n \u00a0 \u00a0 \u00a0 \u00a0a = int(b1[-i-1]) if i < len(b1) else 0\n \u00a0 \u00a0 \u00a0 \u00a0b = int(b2[-i-1]) if i < len(b2) else 0\n \u00a0 \u00a0 \u00a0 \u00a0#calculate sum\n \u00a0 \u00a0 \u00a0 \u00a0sum = carry ^ a ^ b\n \u00a0 \u00a0 \u00a0 \u00a0result = str(sum) + result\n \u00a0 \u00a0 \u00a0 \u00a0# calculate the carry\n \u00a0 \u00a0 \u00a0 \u00a0carry = (carry&a) | (carry&b) | (a&b)\n \u00a0 \u00a0#append the carry to the result\n \u00a0 \u00a0if carry:\n \u00a0 \u00a0 \u00a0 \u00a0result = '1' + result\n \u00a0 \u00a0return result", "category": "Python"}, {"instruction": "Create a program to detect a loop in a linked list", "input": "", "output": "def detect_loop(head): \n    slow_p = head \n    fast_p = head \n\n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p: \n            return 1\n    return 0", "category": "Python"}, {"instruction": "Create a sorting algorithm for an array that only needs 1 iteration", "input": "", "output": "def one_iteration_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "Write the code to calculate a factorial recursively", "input": "", "output": "def factorial(n):\n \u00a0 \u00a0if n == 0:\n \u00a0 \u00a0 \u00a0 \u00a0return 1\n \u00a0 \u00a0else:\n \u00a0 \u00a0 \u00a0 \u00a0return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Design the algorithm to perform a depth-first search on given binary tree", "input": "", "output": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)", "category": "Python"}, {"instruction": "Write the pseudo-code algorithm that implements the following polynomial equation", "input": "3x^3 + 4x - 2", "output": "def polynomial_eqn(x):\n    y = 3 * x**3 + 4 * x - 2\n    return y", "category": "Python"}, {"instruction": "Design algorithm for the below use case", "input": "Given two arrays A and B of the same length, determine whether there is a\u00a0pair of indices\u00a0(i, j) such that\u00a0A[i] == B[j].", "output": "def check_if_pair_exists(arr_a, arr_b):\n    for i in range(len(arr_a)): \n        for j in range(len(arr_b)): \n            if arr_a[i] == arr_b[j]: \n                return True\n    return False", "category": "Python"}, {"instruction": "Write a function to calculate the triangular number of a given number n.", "input": "", "output": "def getTriangularNumber(n):\n    return int(n * (n + 1) / 2)", "category": "Python"}, {"instruction": "Generate permutations of the given array of numbers.", "input": "numbers = [1, 2, 3]", "output": "def permutations(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n    return permutations_for_current_element", "category": "Python"}, {"instruction": "Search for Usernames starting with \u201cJohn\u201d in the database.", "input": "", "output": "SELECT * FROM users WHERE username LIKE 'John%';", "category": "Python"}, {"instruction": "Write a method in Swift to capitalize the first letter of a given sentence.", "input": "sentence = \"hello world\"", "output": "func capitalizeFirstLetter(sentence: String) ->String {\n    return sentence.prefix(1).uppercased() + sentence.dropFirst()\n}", "category": "Python"}, {"instruction": "Create a program to detect a negative number in an array of numbers.", "input": "numbers = [10, -5, 4, 20]", "output": "def detect_negative_number(numbers):\n    flag = False\n    for num in numbers:\n        if num < 0:\n            flag = True\n            break\n    return flag", "category": "Python"}, {"instruction": "Classify the given sentence using the Bag-of-Words approach.", "input": "Sentence: She felt so excited that her application got approval.", "output": "She - Noun\nFelt - Verb\nSo - Adverb\nExcited - Adjective\nThat - Conjunction\nHer - Determiner\nApplication - Noun\nGot - Verb\nApproval - Noun", "category": "Python"}, {"instruction": "What is the difference between procedural and object-oriented programming?", "input": "", "output": "The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not.", "category": "Python"}, {"instruction": "Given a string, write a code that counts the number of alphabets in it.", "input": "input_string = \"Hello World!\"", "output": "input_string = \"Hello World!\"\n\n# Count the number of alphabets\nnum_alphabets = sum(c.isalpha() for c in input_string) \n\nprint(\"Number of alphabets in the string:\", num_alphabets)", "category": "Python"}, {"instruction": "Debug the following code for finding the median of three numbers.", "input": "def find_median(a, b, c):\n    if a > b: \n        if b > c:\n            return b \n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return b\n    elif a > c:\n        return a\n    else:\n        return c", "output": "def find_median(a, b, c):\n    # Calculate the maximum of the three numbers\n    max_num = max(a, b, c)\n    # Calculate the minimum of the three numbers\n    min_num = min(a, b, c)\n    # Calculate the median value as the sum of the three numbers minus the maximum and minimum\n    median = a + b + c - max_num - min_num\n    return median\n\nmedian_value = find_median(2, 3, 5)\nprint(median_value) # 3", "category": "Python"}, {"instruction": "Update the following JavaScript code so that it alerts a given string.", "input": "let myStr = 'My string'", "output": "let myStr = 'My string';\nalert(myStr);", "category": "Python"}, {"instruction": "Implement a function that takes in a number n and deletes all the even numbers in an array of integers first n numbers.", "input": "arr = [2, 3, 4, 5, 6, 7]\nn = 6", "output": "def delete_even(arr, n): \n    # initialise a list \n    odd_list =[]\n    # loop over the array\n    for i in range(n): \n        # if the number is odd \n        if arr[i] % 2 != 0:\n            # add it to the list \n            odd_list.append(arr[i])\n    # return the list of odd numbers\n    return odd_list", "category": "Python"}, {"instruction": "Create a function to insert a given character at every odd index in a given string.", "input": "string = \"Hello\"\ncharacter = 'z'", "output": "def insert_character(string, character): \n    # initialise a new string\n    new_string = \"\"\n    # loop over the string\n    for i in range(len(string)):\n        # if the index is odd \n        if i % 2 != 0:\n            # add the character\n            new_string += character\n        # add the current character\n        new_string += string[i]\n    # return the new string\n    return new_string", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and a search term and returns an array of indices of strings that match the search term.", "input": "array = [\"I love dogs\",\"I hate cats\",\"Dogs are the best\"] \nsearch_term = \"dogs\"", "output": "def search_indices(array, search_term):\n    # initialise an empty list \n    indices_list = [] \n    # loop over the array\n    for index, s in enumerate(array): \n        # if the search term is in the string \n        if search_term in s.lower(): \n            # append the index to the list \n            indices_list.append(index)\n    # return the list of indices \n    return indices_list", "category": "Python"}, {"instruction": "Using the comments as a guide, implement a function that takes as input a list of integers and returns the maximum value.", "input": "nums = [2, 8, 9, 10]", "output": "def find_max(nums): \n    # initialise the max to the first element of the list \n    max = nums[0]\n    # loop over the list\n    for i in range(1, len(nums)): \n       # if the current element is greater than the max, \n       # update the max \n        if nums[i] > max: \n            max = nums[i]\n    # return the maximum value\n    return max", "category": "Python"}, {"instruction": "Alter the following JSON object such that the date format of \"date\" field changes from \"dd-mm-yyyy\" to \"dd/mm/yyyy\".", "input": "{\n  \"name\": \"John\", \n  \"date\": \"22-02-2020\"\n}", "output": "{\n  \"name\": \"John\", \n  \"date\": \"22/02/2020\"\n}", "category": "Python"}, {"instruction": "Write a Python statement to print out the common items between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6 , 8]", "output": "for i in list1:\n  if i in list2:\n    print(i)", "category": "Python"}, {"instruction": "Create an SQL query that returns rows where the column \"Field\" is \"Value\".", "input": "Field = 'Name'\nValue = 'John'", "output": "SELECT * FROM table WHERE Field = 'Name' AND Value = 'John';", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes a string as an argument and returns the number of times that string is repeated in the input string.", "input": "string = \"HelloHello\"", "output": "function countString(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i, i + 5) == \"Hello\") {\n      count++;\n    }\n  }\n  return count;\n}", "category": "Python"}, {"instruction": "Write a CSS rule that changes the color of all the links in a webpage to blue.", "input": "", "output": "a {\n  color: blue;\n}", "category": "Python"}, {"instruction": "Change the following code to a yield statement so that it can be used as a generator.", "input": "def fibonacci():\n  a, b = 0, 1\n  while True:\n    yield a\n    a, b = b, a + b", "output": "def fibonacci(): \n  a, b = 0, 1\n  while True: \n    a, b = b, a + b \n    yield a", "category": "Python"}, {"instruction": "Create a GUI application in C# that displays a welcome message when the program is launched.", "input": "", "output": "using System.Windows.Forms;\n \n public static class Program\n {\n     static void Main()\n     {\n         Application.EnableVisualStyles();\n         Application.Run(new Form1());\n     }\n }\n \n public class Form1 : Form\n {\n     public Form1()\n     {\n         MessageBox.Show(\"Welcome!\");\n     }\n }", "category": "Python"}, {"instruction": "Given a string, return the length of the longest run of characters.", "input": "string = \"aaaabbccdd\"", "output": "4", "category": "Python"}, {"instruction": "Create an array of 10 random integers between 1 to 50 and print them.", "input": "", "output": "# Create an array of 10 random integers\nimport random\narray = []\nfor i in range(10):\n    array.append(random.randint(1, 50))\n\nprint(array) # [33, 22, 34, 18, 28, 22, 17, 11, 26, 45]", "category": "Python"}, {"instruction": "Use regular expression to remove special characters from any given string.", "input": "my_string = 'Hi There! Welcome.@'", "output": "import re\n\n# The given string\nmy_string = 'Hi There! Welcome.@'\n\n# Remove special characters using regular expressions\nclean_string = re.sub('[^a-zA-Z0-9\\s]', '', my_string)\nprint(clean_string) # Hi There Welcome", "category": "Python"}, {"instruction": "Create a class with two methods \"get_sum\" and \"get_product\" for calculating the sum and product of two numbers respectively.", "input": "", "output": "class Calculator:\n    \"\"\"Class for calculating the sum and product of two numbers.\"\"\"\n\n    # Method for calculating sum of two numbers\n    def get_sum(self, num1, num2):\n        return num1 + num2\n    \n    # Method for calculating product of two numbers\n    def get_product(self, num1, num2):\n        return num1 * num2\n\n# Create an instance of the class\ncalc = Calculator()\n\n# Calculate the sum\nsum_value = calc.get_sum(3, 4)\nprint(\"Sum:\", sum_value) # 7\n\n# Calculate the product\nproduct_value = calc.get_product(3, 4)\nprint(\"Product:\", product_value) # 12", "category": "Python"}, {"instruction": "Given a string of length N, create an HTML table with N rows and 4 columns.", "input": "string = \"Hello World\"", "output": "<table>\n  <tr>\n    <td>H</td>\n    <td>e</td>\n    <td>l</td>\n    <td>l</td>\n  </tr>\n  <tr>\n    <td>o</td>\n    <td>&nbsp;</td>\n    <td>W</td>\n    <td>o</td>\n  </tr>\n  <tr>\n    <td>r</td>\n    <td>l</td>\n    <td>d</td>\n    <td>&nbsp;</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a Ruby method for calculating the mean of the given array of numbers.", "input": "", "output": "def calculate_mean(numbers)\n  sum = 0\n  numbers.each { |number| sum += number }\n  return (sum.to_f / numbers.length)\nend", "category": "Python"}, {"instruction": "Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25.", "input": "", "output": "my_dict = {'name': 'John', 'age': 25}", "category": "Python"}, {"instruction": "Implement a recursive function to calculate the factorial of a number, given by the user as an argument.", "input": "", "output": "def calculate_factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * calculate_factorial(num-1)", "category": "Python"}, {"instruction": "Create a function to return the subset of an array which has the lengths of its elements smaller than the given threshold.", "input": "[1, 5, 2, 8], threshold = 5", "output": "def filter_length(arr, th):\n  subset = []\n  for el in arr:\n    if len(el) <= th:\n      subset.append(el)\n  return subset", "category": "Python"}, {"instruction": "Create an algorithm to find out the longest common sub-sequence between two string inputs.", "input": "\"AGGTAB\"\n\"GXTXAYB\"", "output": "def LCSubStr(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n    return result", "category": "Python"}, {"instruction": "Debug the following piece of code so that the program functions properly.", "input": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]", "output": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n        else:\n            break", "category": "Python"}, {"instruction": "Write a SQL query to find out how many employees work in a department with a certain id.", "input": "", "output": "SELECT COUNT(*) FROM employees WHERE department_id = <id>;", "category": "Python"}, {"instruction": "Write a function that takes in two strings(s1, s2) and returns a string. The output should be \"s1s2\".", "input": "", "output": "def join_strings(s1, s2):\n  return s1 + s2", "category": "Python"}, {"instruction": "Program a function to get the next element of a list.", "input": "mylist = [1,3,5,7]", "output": "def get_next(mylist):\n    for i in range(len(mylist)-1):\n        return mylist[i+1]\n\nprint(get_next(mylist))", "category": "Python"}, {"instruction": "Develop a code to generate a random port number in the range of 1 to 65535.", "input": "", "output": "import random\n\ndef get_random_port():\n    return random.randint(1, 65535)\n\nrandom_port = get_random_port()\nprint(random_port)", "category": "Python"}, {"instruction": "How would you find the union of two sets?", "input": "set1 = {1,2,3,4}\nset2 = {3,4,5,6}", "output": "set3 = set1.union(set2)\nprint(set3)", "category": "Python"}, {"instruction": "Change all the values in a list to lowercase.", "input": "mylist = ['Dog', 'Cat', 'Rabbit']", "output": "mylist = [x.lower() for x in mylist]\nprint(mylist)", "category": "Python"}, {"instruction": "How do you calculate the hamming distance between two strings?", "input": "str1 = \"abc\"\nstr2 = \"abd\"", "output": "def hamming_distance(str1, str2):\n    # length of the strings must be equal\n    if len(str1) != len(str2):\n        return -1\n    \n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n    \n    return distance", "category": "Python"}, {"instruction": "Generate a valid HTML document.", "input": "", "output": "<html>\n    <head>\n        <title>My HTML Document</title>\n    </head>\n    <body>\n        <h1>My website</h1>\n\n        <div>\n            <p>This is my website content.</p>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a method to parse a URL query string.", "input": "url: https://www.example.com/?sort=alphabetical&order=asc&search=something", "output": "def parse_query_string(url):\n    # extracting the query string\n    query_str = url.split(\"?\")[1]\n    query_param = query_str.split(\"&\")\n\n    # create dictionary from query string\n    result_dict = {}\n    for q in query_param:\n        key, value = q.split('=')\n        result_dict[key] = value\n\n    return result_dict", "category": "Python"}, {"instruction": "Write code to remove the first item from a list of integers in Python.", "input": "numbers = [2, 3, 4, 5]", "output": "numbers.pop(0)", "category": "Python"}, {"instruction": "How do you run a Python script from the command line?", "input": "", "output": "In order to run a python script from the command line, the \"@python\" command and the path to the file should be used. For example, to execute the \"input.py\" file, the command would be \"@python C:\\Path\\input.py\".", "category": "Python"}, {"instruction": "What is the difference between an unsigned int and a signed int in C language?", "input": "", "output": "Signed integers in C language can store both negative and positive values (from -2^31 to 2 ^31 - 1). Unsigned integers in C language can only store positive values (from 0 to 2^32 - 1). This means that a signed int is half the size of an unsigned int. It also means that a signed int ranges from -2^31 to 2^31 - 1 while an unsigned int can range from 0 to 2^32 - 1.", "category": "Python"}, {"instruction": "Write an Objective-C code snippet to print the phrase \"Hello World!\" to the terminal/console.", "input": "", "output": "NSLog(@\"Hello World!\");", "category": "Python"}, {"instruction": "Write a Java code snippet to print out the value of the variable \"num\" to the console.", "input": "int num = 10;", "output": "System.out.println(num);", "category": "Python"}, {"instruction": "Create a Java method that takes a string and returns the same string with all vowels replaced by asterisks (ie. \"Hello\" should return \"H*ll*\").", "input": "String s = \"Hello\";", "output": "public String replaceVowels(String s) {\n    String result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            result += \"*\";\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Create a test harness in C++ to verify the correctness of the following function", "input": "// A function to calculate the nth Fibonacci number\n// Input: nth Fibonacci number\n// Output: nth Fibonacci number\nint calcFib(int n) \n{ \n    if (n<=1) \n        return n; \n    return calcFib(n-1) + calcFib(n-2); \n}", "output": "#include <iostream>\n\n// Function to calculate the\n// nth Fibonacci number \nint calcFib(int n)\n{\n  if (n <= 1)\n    return n;\n  return calcFib(n - 1) + calcFib(n - 2);\n}\n\n// Test Harness to verify the correctness\n// of the calcFib implementation\nint main()\n{\n  // Input value to calculate\n  const int n = 10;\n\n  // Expected Output value\n  const int expected_output = 55;\n\n  // Calculate nth fibonacci number\n  int output = calcFib(n);\n\n  // Verify correctness\n  if (output == expected_output)\n    std::cout << \"Test Passed\" << std::endl;\n  else\n    std::cout << \"Test Failed\" << std::endl;\n\n  return 0;\n}", "category": "Python"}, {"instruction": "How do you compare two strings in Java?", "input": "", "output": "In Java, two strings can be compared using the equals() or compareTo() methods. \n\nThe equals() method returns true if the two strings have the same length and contain the same characters in the same order. \n\nThe compareTo() method returns 0 if the two strings have the same length and contain the same characters in the same order. Otherwise, it returns a positive or negative number indicating which string is \"larger\".", "category": "Python"}, {"instruction": "Find the lowest common ancestor in a binary tree in C++.", "input": "", "output": "Node* findLCA(Node* root, Node* n1, Node* n2){ \n   if (root == NULL) return NULL; \n  \n   if (root == n1 || root == n2) \n   return root; \n  \n   Node *left_lca = findLCA(root->left, n1, n2); \n   Node *right_lca = findLCA(root->right, n1, n2); \n \n   if (left_lca && right_lca)  return root; \n \n   return (left_lca != NULL)? left_lca: right_lca; \n}", "category": "Python"}, {"instruction": "Optimize the runtime of this SQL query.", "input": "SELECT * FROM customers WHERE age > 30 AND city == \"New York\"", "output": "SELECT * FROM customers \nWHERE city = \"New York\" \nAND age > 30 \nORDER BY age ASC;", "category": "Python"}, {"instruction": "Write a function in Java that takes an integer and returns an array of all the prime numbers from 2 up to the number.", "input": "number = 10", "output": "public static int[] getAllPrimeNumbers(int number){\n    int[] primeNumbers = new int[number];\n    int index = 0;\n    for (int i = 2; i <= number; i++){\n        if(isPrime(i)){\n            primeNumbers[index] = i;\n            index++;\n        }\n    }\n    return primeNumbers;\n}\n\npublic static boolean isPrime(int number){\n    for(int i=2; i<number; i++){\n        if(number%i == 0){\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Create a function that performs a bubble sort of an array in JavaScript.", "input": "arr = [4, 7, 1, 3, 6, 9, 8, 10, 2, 5]", "output": "function bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i=0; i < arr.length; i++) {\n      if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}\n\nbubbleSort(arr);", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of strings as parameter and prints out the longest string.", "input": "strings = [\"Hello\", \"world\", \"Welcome\",\"to\", \"my\", \"programming\", \"challenge\"]", "output": "def print_longest_string(strings):\n  longest_string = \"\"\n  for string in strings:\n    if len(string) > len(longest_string):\n      longest_string = string\n  print(longest_string)\n\nprint_longest_string(strings)", "category": "Python"}, {"instruction": "Write a for loop in Java that prints out the even numbers between 0 and 10.", "input": "", "output": "for(int i = 0; i <= 10; i++){\n    if(i % 2 == 0){\n        System.out.println(i);\n    }\n}", "category": "Python"}, {"instruction": "Request a list of all the devices connected to a network using the command line in Windows.", "input": "", "output": "In Windows, in the command line enter arp -a to get a list of all the devices and their respective IPs connected to the network.", "category": "Python"}, {"instruction": "Create a function that concatenates two strings and prints them out.", "input": "a = \"Hello \"\nb = \"world!\"", "output": "def concat_strings(a, b):\n    print(a + b)\n    \nconcat_strings(\"Hello \", \"world!\")", "category": "Python"}, {"instruction": "Generate a Python code that flattens a two-dimensional array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_2d_array(arr):\n    flat_arr = []\n    for subarr in arr:\n        flat_arr += subarr\n    return flat_arr\n\n# Driver code\ninput_list = [[1, 2], [3, 4]]\nprint(flatten_2d_array(input_list))", "category": "Python"}, {"instruction": "Create an array of three strings: \"red\", \"blue\", and \"green\".", "input": "", "output": "const colors = [\"red\", \"blue\", \"green\"];", "category": "Python"}, {"instruction": "Create a python class \"Car\" with fields \"make\" and \"model\".", "input": "", "output": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model", "category": "Python"}, {"instruction": "Create a CSS class to display an element as a block-level element.", "input": "", "output": ".block-level {\n  display: block;\n}", "category": "Python"}, {"instruction": "Write an SQL query to find the minimum salary among all employees", "input": "", "output": "SELECT MIN(salary) FROM employees;", "category": "Python"}, {"instruction": "Create a function in Python to generate n permutations of a given array.", "input": "arr = [1, 2, 3]\nn = 6", "output": "import itertools \n\n# Function to generate \n# n permutations of the given array \ndef permutation(arr, n): \n\t\n\t# Get all permutations \n\tpermList = list(itertools.permutations(arr, n)) \n\t\n\t# Converting each tuple in the \n\t# list of tuples to list \n\tres = [list(ele) for ele in permList] \n\n\t# Returning the list of lists \n\treturn res", "category": "Python"}, {"instruction": "Write a JavaScript program to rotate an array by a given number", "input": "let arr = [1, 2, 3, 4, 5];\nlet n = 2;", "output": "function rotateArray(arr, n) {\n    while (n > 0) {\n        let temp = arr[arr.length-1];\n        for (let i = arr.length-2; i >= 0; i--) { \n            arr[i+1] = arr[i];\n        }\n        arr[0] = temp;\n        n--;\n    }\n    return arr;\n}", "category": "Python"}, {"instruction": "Write a C program which reads numbers until 0 is entered and prints the largest number", "input": "", "output": "#include <stdio.h> \n\nint main() \n{ \n\t// Declare vars \n\tint n, largest; \n\n\t// Read input \n\tscanf(\"%d\", &n); \n\n\t// Initialize largest \n\tlargest = n; \n\t\n\t// Iterate over other elements \n\twhile (n > 0) { \n\t\tscanf(\"%d\", &n); \n\n\t\t// Update largest \n\t\tif (n > largest){\n\t\t\tlargest = n;\n\t\t} \n\t} \n  \n\t// Print largest \n\tprintf(\"%d\", largest); \n\t\t\n\treturn 0; \n}", "category": "Python"}, {"instruction": "How to open a new terminal window in Linux?", "input": "", "output": "In Linux, you can open a new terminal window using the command line by using the \"xterm\" command or using the shortcut \"Ctrl + Alt + T\".", "category": "Python"}, {"instruction": "Analyze the output of the following shell command.", "input": "", "output": "The shell command 'ls -l' will list all the files in the current working directory in long form. This means the output will include the file permissions, owner, group, size, modified date, and the name of the file.", "category": "Python"}, {"instruction": "Create a list of numbers from 1 to 10 using list comprehension.", "input": "", "output": "my_list = [number for number in range(1, 11)]", "category": "Python"}, {"instruction": "Write a function to multiply an array of 3 numbers by their sum.", "input": "[4, 5, 6]", "output": "def multiply_array(arr): \n  sum_of_arr = sum(arr)\n  for i in range(len(arr)): \n    arr[i] = arr[i] * sum_of_arr \n  return arr", "category": "Python"}, {"instruction": "Use a dictionary to store the names of 5 people and their contact numbers.", "input": "Alice - 0123456789, Bob - 0987654321, Cara - 0345567890, Dave - 0412356789, Ed - 0999888777", "output": "dict = {\n 'Alice':'0123456789',\n 'Bob' : '0987654321',\n 'Cara' : '0345567890',\n 'Dave' : '0412356789',\n 'Ed' : '0999888777'\n}", "category": "Python"}, {"instruction": "Write a function that outputs the exact same output as its input.", "input": "", "output": "def same_output(input): \n return input", "category": "Python"}, {"instruction": "Calculate the result of 3 \\* 5 + 7.", "input": "", "output": "22", "category": "Python"}, {"instruction": "Take a sentence and tokenize it into separate words.", "input": "The quick brown fox jumps over the lazy dog.", "output": "['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.']", "category": "Python"}, {"instruction": "What is the maximum value an int type can hold?", "input": "", "output": "The maximum value an int type can hold is 2147483647.", "category": "Python"}, {"instruction": "Create a PostgreSQL query to find all employees with a salary greater than or equal to 40,000.", "input": "", "output": "SELECT * \nFROM employees \nWHERE salary >= 40,000;", "category": "Python"}, {"instruction": "How many distinct prime numbers are there less than 100?", "input": "", "output": "There are 25 distinct prime numbers less than 100.", "category": "Python"}, {"instruction": "Write a regular expression which can validate a given email address.", "input": "", "output": "^[a-z0-9_.]+@[a-z0-9_.]+[.]+[a-z]+$", "category": "Python"}, {"instruction": "Generate a dictionary with the following entries", "input": "[('a',1),('b',2)]", "output": "my_dict = dict([('a', 1), ('b', 2)])\n\nprint(my_dict)", "category": "Python"}, {"instruction": "Format the following list in descending order of number of characters in each string.", "input": "list = ['Hello', 'World', 'Technology']", "output": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])", "category": "Python"}, {"instruction": "Write a SQL query to group the data based on 'category' and counting the number of entries in each category.", "input": "", "output": "SELECT category, COUNT(*) FROM table_name GROUP BY category;", "category": "Python"}, {"instruction": "Generate a sequence of strings according to the following pattern:", "input": "", "output": "my_list = []\nfor i in range(1, 10):\n    my_list.append(str(i) + \"abc\")\n\nprint(my_list)", "category": "Python"}, {"instruction": "Write code to create a list of length 10 with random integers.", "input": "", "output": "import random \n\nmyList = [] \nfor i in range(10): \n     myList.append(random.randint(0,10)) \n\nprint(myList)", "category": "Python"}, {"instruction": "Create a code to display all unique pairs from the following list.", "input": "[1,2,3,4,5,6]", "output": "pairs = []\nfor i in range(len(list)):\n    for j in range(i+1, len(list)):\n        pairs.append((list[i], list[j])) \n\nprint(pairs)", "category": "Python"}, {"instruction": "Edit the following code to use a dictionary instead of a list.", "input": "list = [1, 3, 5]\ntotal = 0\nfor num in list:\n    total += num", "output": "dict = {1:1, 3:3, 5:5}\ntotal = 0\nfor num in dict.values():\n    total += num", "category": "Python"}, {"instruction": "Create a C++ class called 'Student' with the following fields: id, name, age, and gender.", "input": "", "output": "class Student {\n  private:\n    int id; \n    string name;\n    int age;\n    string gender;\n  public:\n    int getId() const;\n    void setId(int id);\n    string getName() const;\n    void setName(string name);\n    int getAge() const;\n    void setAge(int age);\n    string getGender() const;\n    void setGender(string gender);\n};", "category": "Python"}, {"instruction": "Design a MySQL query to find the average monthly salary of people in the table \"Employees\".", "input": "Table: Employees\nColumns: employee_id, name, salary", "output": "SELECT AVG(salary) as avg_salary FROM Employees WHERE MONTH(CURDATE()) = MONTH(salary);", "category": "Python"}, {"instruction": "How would you convert an integer to a float in Python?", "input": "", "output": "You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0.", "category": "Python"}, {"instruction": "Take two strings and concatenate them.", "input": "\"Hello \" and \"World\"", "output": "\"Hello World\"", "category": "Python"}, {"instruction": "Write a Python code snippet for printing the items in a given set.", "input": "my_set = {1, 3, 5, 7, 9}", "output": "for item in my_set:\n    print(item)", "category": "Python"}, {"instruction": "Using the given array, create a function to find the index of the second \"a\" in the array.", "input": "let arr = [1, 'a', 2, 'b', 3, 'a'];", "output": "function findSecondA(arr){\n   let count=0;\n   let index;\n   for(let i=0; i<arr.length; i++){\n       if(arr[i] == 'a'){\n           count++;\n       }\n       if(count == 2){\n           index = i;\n           break;\n       }\n   }\n   return index;\n}", "category": "Python"}, {"instruction": "Write a regular expression that accepts a string with one or more spaces.", "input": "", "output": "^\\S(.*\\S)?$", "category": "Python"}, {"instruction": "Find the output of the following code when input is 3.", "input": "def get_result(n):\n    fib = [0, 1] \n    for i in range(2, n): \n        fib.append(fib[i-2] + fib[i-1]) \n    return fib", "output": "The output of the code when input is 3 is [0, 1, 1].", "category": "Python"}, {"instruction": "Update the given array to replace all the zeroes with ones.", "input": "my_array = [1, 0, 2, 0, 3, 0]", "output": "my_array = [1, 1, 2, 1, 3, 1]", "category": "Python"}, {"instruction": "Find the sum of all odd numbers between 1-100.", "input": "", "output": "The sum of all odd numbers between 1-100 is 2500.", "category": "Python"}, {"instruction": "Using the provided data, generate a heatmap that contains the temperature readings for each hour.", "input": "data = [[7,15,22], [2,7,23], [9,12,25]]", "output": "from matplotlib.pyplot import imshow\nfrom matplotlib import pyplot as plt\nfrom numpy import array\n\n# Convert data to numpy array\ndata_array = array(data)\n\n# Plot heatmap\nfig, ax = plt.subplots()\nim = ax.imshow(data_array)\nfig.colorbar(im)\nplt.show()", "category": "Python"}, {"instruction": "Design a class to represent a car with member variables for the make, model, and year.", "input": "", "output": "class Car: \n  def __init__(self, make, model, year): \n    self.make = make\n    self.model = model\n    self.year = year", "category": "Python"}, {"instruction": "Find all instances of the given symbol in the text.", "input": "text = \"The company has a $1 billion budget\"\nsymbol = \"$\"", "output": "The symbol \"$\" occurs 1 time in the given text.", "category": "Python"}, {"instruction": "Write a SQL query to display the names of all customers and their orders.", "input": "", "output": "SELECT customer.name, orders.order_name FROM customer\nINNER JOIN orders ON customer.id = orders.customer_id;", "category": "Python"}, {"instruction": "Apply the given CSS style to the HTML element.", "input": "<div>Hello World</div>\ncss: font-weight: bold;", "output": "<div style=\"font-weight: bold;\">Hello World</div>", "category": "Python"}, {"instruction": "Using Regular Expressions, search for all 3-digit occurrences in the given text.", "input": "text = \"The ship had a 590 foot cargo hold, filled with 204 tons of goods.\"", "output": "590 and 204.", "category": "Python"}, {"instruction": "Create and run a Python script that prints \"Hello, World!\"", "input": "", "output": "# A simple python script\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "Assuming all operations in the code are O(1), find the Big O complexity of the code.", "input": "for (int i = 0; i < n; i++)\n    for (int j = 0; j < i ; j++)\n        sum += a[i] + b[j];", "output": "O(n^2).", "category": "Python"}, {"instruction": "Find and list all the prime numbers between 0-100", "input": "", "output": "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.", "category": "Python"}, {"instruction": "Create a while loop that runs while a number is less than or equal to 10.", "input": "", "output": "number = 0 \nwhile number <= 10: \n  print(number)\n  number += 1", "category": "Python"}, {"instruction": "Generate a unique 8-digit number using the Python Random module", "input": "", "output": "import random \n\nrandom.seed(32) \nunique_id = random.randint(100000000, 999999999)\nprint(\"unique 8-digit number:\", unique_id)", "category": "Python"}, {"instruction": "How does one go about creating a function in JavaScript?", "input": "", "output": "In JavaScript, functions are declared using the 'function' keyword followed by the name of the function and a pair of parentheses. The code for the function should be enclosed within curly brackets. For example:\n\nfunction addTwoNumbers(a, b) {\nreturn a + b;\n}", "category": "Python"}, {"instruction": "Create a css class to set the text color of a h1 element to blue.", "input": "", "output": "h1 {\n  color: blue;\n}", "category": "Python"}, {"instruction": "Suggest a type of join to use to find all customers with an order total greater than $100.", "input": "Table: Customers\nColumns: customer_id, name \nTable: Orders\nColumns: order_id, customer_id, total", "output": "SELECT c.customer_id, c.name \nFROM Customers c INNER JOIN Orders o \nON c.customer_id = o.customer_id\nWHERE o.total > 100;", "category": "Python"}, {"instruction": "Explain a Python program to check whether a number is Armstrong or not.", "input": "", "output": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True", "category": "Python"}, {"instruction": "Create a class definition in Python for a vehicle with attributes like make, model, year.", "input": "", "output": "class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n \n    # Other methods...", "category": "Python"}, {"instruction": "Design a function that takes in a matrix and finds its number of rows and columns.", "input": "matrix = [[1, 2, 3, 4], \n          [5, 6, 7, 8], \n          [9, 10, 11, 12]]", "output": "def matrix_dimensions(matrix):\n    num_rows = len(matrix)\n    num_columns = len(matrix[0])\n    return num_rows, num_columns\n\nmatrix = [[1, 2, 3, 4], \n          [5, 6, 7, 8], \n          [9, 10, 11, 12]]\n\nnum_rows, num_columns = matrix_dimensions(matrix)\nprint(num_rows) # Output will be 3\nprint(num_columns) # Output will be 4", "category": "Python"}, {"instruction": "Create a function that returns true if a given set is a subset of another set.", "input": "set1 = {1,2,3}\nset2 = {1,2,3,4,5,6}", "output": "def is_subset(s1, s2):\n    for e in s1:\n        if e not in s2:\n            return False\n    return True\n\nis_subset({1,2,3}, {1,2,3,4,5,6}) # Output: True", "category": "Python"}, {"instruction": "Find the sum of factors of a given number.", "input": "", "output": "def sum_factors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\nsum_factors(12) # Output: 28", "category": "Python"}, {"instruction": "Generate a numpy array of shape (3,3) with random values between 0 and 10.", "input": "", "output": "import numpy as np\n\narray = np.random.randint(0, 10, size=(3, 3))\nprint(array)\n\n# Output: \n[[5 4 9]\n [6 8 5]\n [4 7 6]]", "category": "Python"}, {"instruction": "Using the Pandas library, parse the given json object.", "input": "{\n   \"name\": \"James\",\n   \"age\": \"60\",\n   \"address\":{\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Springfield\",\n      \"state\": \"MA\"\n }\n}", "output": "import pandas as pd\n\ndata = {\n    'name': [\"James\"],\n    'age': [60],\n    'street': [\"123 Fake Street\"],\n    'city': [\"Springfield\"],\n    'state': [\"MA\"],\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Output: \n  name  age         street       city state\n0 James   60  123 Fake Street  Springfield    MA", "category": "Python"}, {"instruction": "Create a machine learning model that predicts whether an email is spam or not.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX = dataset[['email_body', 'send_from', 'subject', 'num_links']]\ny = dataset['is_spam']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify=y)\n\n# Train the model\nclassifier = sklearn.linear_model.LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.95", "category": "Python"}, {"instruction": "Create a text classifier using supervised learning.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the classifier\nclassifier = sklearn.naive_bayes.MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Test the classifier\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.89", "category": "Python"}, {"instruction": "Generate an SQL query that will combine two tables.", "input": "table A with 2 columns (id and name) and 2 rows (1, Tom) (2, Abigail) \ntable B with 2 columns (id and address) and 2 rows (1, USA) (2, Canada)", "output": "SELECT A.id, A.name, B.address \nFROM A \nINNER JOIN B \nON A.id = B.id", "category": "Python"}, {"instruction": "Construct a for loop that calculates the sum of the numbers from 0 to n.", "input": "", "output": "n = 5\ntotal = 0\nfor i in range(n+1): \n    total += i\n   \nprint(total) # Output: 15", "category": "Python"}, {"instruction": "Write a function to output the maximum value possible from a given array.", "input": "[-1, 2, 4, 6, -3, 5]", "output": "def max_val(arr):\n    maximum = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n    return maximum\n\nmax_val([-1, 2, 4, 6, -3, 5])  # Output: 6", "category": "Python"}, {"instruction": "Write a SQL query to select all the customers who have an account balance of more than $1000.", "input": "", "output": "SELECT * FROM customers WHERE account_balance > 1000;", "category": "Python"}, {"instruction": "Output a code to edit the following HTML to add a new heading 'Introduction' before the existing heading 'About'.", "input": "<h1>About</h1>", "output": "<h1>Introduction</h1>\n<h1>About</h1>", "category": "Python"}, {"instruction": "Output a string which is the reverse of the input string.", "input": "\"Hello World\"", "output": "\"\"\"\nFunction to reverse a given string \n\nInput: String\nOutput: Reversed string\n\"\"\"\n\ndef reverse_string(string): \n    # Create an empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate over the string from the last character \n    for i in range(len(string)-1, -1, -1): \n        reversed_string += string[i] \n  \n    return reversed_string\n\n\nif __name__ == '__main__': \n    # Input \n    string = \"Hello World\"\n  \n    # Result \n    print(reverse_string(string))", "category": "Python"}, {"instruction": "Design a program to select the names of the students who have secured more than 80% marks in a given exam.", "input": "students = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]", "output": "def get_high_scorers(students):\n    # Get the names of students with marks greater than 80\n    high_scorers = []\n    for student in students:\n        if student[1] > 80:\n            high_scorers.append(student[0])\n    return high_scorers\n\nstudents = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]\nprint(get_high_scorers(students)) # Output will be [\"Mary\"]", "category": "Python"}, {"instruction": "Design a class in C++ to represent a 2D point and define the addition operation for two points.", "input": "class Point {\n    private:\n        int x, y;\n    public: \n        Point(int x, int y) : x{x}, y{y} {};", "output": "class Point {\n    private:\n        int x, y;\n    public: \n        Point(int x, int y) : x{x}, y{y} {};\n\n        Point operator + (const Point& other) {\n            return Point(this->x + other.x, this->y + other.y);\n        }\n};", "category": "Python"}, {"instruction": "Write Python code to fill missing values in a Pandas dataframe with a given value.", "input": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])", "output": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\ndf.fillna(value='NA', inplace=True)", "category": "Python"}, {"instruction": "Read this HTML code and extract the content between the <h1> and </h1> tags.", "input": "<h1>This is a heading</h1>", "output": "This is a heading", "category": "Python"}, {"instruction": "Create a function 'subStr' that takes a string and a start and end index and returns a substring between the start and end index.", "input": "", "output": "def subStr(str, start, end):\n  return str.substring(start, end)", "category": "Python"}, {"instruction": "Write an if-else statement in JavaScript that prints 'positive' if a number is greater than 0 and 'negative' if a number is less than 0.", "input": "", "output": "if (number > 0) {\n  console.log('positive');\n} else if (number < 0) {\n  console.log('negative');\n}", "category": "Python"}, {"instruction": "Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together.", "input": "", "output": "def concatenate(str1, str2, str3, str4):\n  return str1 + str2 + str3 + str4", "category": "Python"}, {"instruction": "Write a method 'addString' in Java that takes two strings as parameters and returns a single string that concatenates the two strings.", "input": "", "output": "public static String addString(String str1, String str2) {\n\treturn str1 + str2;\n}", "category": "Python"}, {"instruction": "Write a SQL query to return the 5 oldest employees from a table named 'employees'.", "input": "", "output": "SELECT * FROM employees ORDER BY age DESC LIMIT 5;", "category": "Python"}, {"instruction": "Create an array of 5 increasing numbers starting from 10.", "input": "", "output": "var arr = [10, 11, 12, 13, 14];", "category": "Python"}, {"instruction": "Create a function 'greet' that takes a string parameter 'name' and returns the string 'Hello name!'", "input": "", "output": "function greet(name) {\n  return 'Hello ' + name + '!';\n}", "category": "Python"}, {"instruction": "Edit the following code to return a length 5 array of zeros.", "input": "int[] array = new int[10];", "output": "int[] array = new int[5];\nfor(int i=0; i<array.length; i++){\n    array[i] = 0;\n}", "category": "Python"}, {"instruction": "How to extract the domain name from an email address using JavaScript?", "input": "", "output": "function getDomainFromEmail(email_address) {\n  return email_address.split('@')[1];\n}\n\ngetDomainFromEmail('example@domain.com'); // 'domain.com'", "category": "Python"}, {"instruction": "Create a select query to fetch all the customers with a name starting with 'A'.", "input": "", "output": "SELECT * FROM customers\nWHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Create an HTML form that takes one input field - an email address.", "input": "", "output": "<form action=\"action.php\" method=\"post\">\n  <label for=\"email\">Email:</label><br>\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Define the term \"polymorphism\" in programming.", "input": "", "output": "Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time.", "category": "Python"}, {"instruction": "Find the syntax error in the given C# code.", "input": "int x = 5;\nif (x > 4) console.WriteLine(\"Hello\");", "output": "The syntax error is that 'console.WriteLine(\"Hello\");' should be within a pair of curly braces. i.e. The correct syntax should be \"if (x > 4) { Console.WriteLine(\"Hello\") };\"", "category": "Python"}, {"instruction": "Create a HTML form to take user input from a web page.", "input": "", "output": "<form action=\"\">\n    <label>Name:</label>\n    <input type=\"text\" name=\"name\" placeholder=\"Your name\" required><br><br>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\" placeholder=\"Your email address\" required><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Implement a function in JavaScript that returns true if an object is empty, false otherwise.", "input": "", "output": "function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0;\n}", "category": "Python"}, {"instruction": "Write a MySQL statement to sort the table results by the column \"id\" in ascending order.", "input": "SELECT * FROM table_name", "output": "SELECT * FROM table_name \nORDER BY id ASC", "category": "Python"}, {"instruction": "Write a shell command to print the system IP address.", "input": "", "output": "ifconfig | grep \"inet \" | awk '{ print $2 }'", "category": "Python"}, {"instruction": "Write a SQL query to select the users from table 'users' who are born after 1985.", "input": "", "output": "SELECT * FROM users WHERE birthdate > 1985;", "category": "Python"}, {"instruction": "Generate a class in Java for a contact record, including name, age, phone number, email, and address information.", "input": "", "output": "public class Contact {\n    String name;\n    int age;\n    String phoneNumber;\n    String email;\n    String address;\n    \n    public Contact(String name, int age, String phoneNumber, String email, String address){\n        this.name     = name;\n        this.age      = age;\n        this.phoneNumber = phoneNumber;\n        this.email    = email;\n        this.address  = address;\n    }\n    \n    public String getName(){\n        return name;\n    }\n    public int getAge(){\n        return age;\n    }\n    public String getPhoneNumber(){\n        return phoneNumber;\n    }\n    public String getEmail(){\n        return email;\n    }\n    public String getAddress(){\n        return address;\n    }\n    \n    \n    public void setName(String name){\n        this.name = name;\n    }\n    public void setAge(int age){\n        this.age = age;\n    }\n    public void setPhoneNumber(String phoneNumber){\n        this.phoneNumber = phoneNumber;\n    }\n    public void setEmail(String email){\n        this.email = email;\n    }\n    public void setAddress(String address){\n        this.address = address;\n    }\n    \n}", "category": "Python"}, {"instruction": "Generate an HTML form in PHP to gather user information such as name and address.", "input": "", "output": "<html>\n<head>\n<title>User Form</title>\n</head>\n<body>\n\n<form action=\"process_form.php\" method=\"post\">\n Name: <input type=\"text\" name=\"name\"><br>\n Address: <input type=\"text\" name=\"address\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Output all items from an array in descending order in Java.", "input": "", "output": "public static void printDescendingOrder(int[] arr) { \n// sort the array in descending order \nArrays.sort(arr, Collections.reverseOrder()); \n\nfor (int i=0; i<arr.length; i++) \n    System.out.print(arr[i] + \" \"); \n}", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integers as an argument and calculates the mean average.", "input": "", "output": "def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average", "category": "Python"}, {"instruction": "Create a loop in PHP to iterate over an associative array and print each key and value.", "input": "$arr = [\"a\" => 1, \"b\" => 2, \"c\" => 3];", "output": "foreach ($arr as $key => $value) { \n  echo \"Key=\" . $key . \", Value=\" . $value; \n  echo \"\\n\"; \n}", "category": "Python"}, {"instruction": "Output a triangle shape using only asterisks (e.g. *) in Java.", "input": "", "output": "public class Triangle {\n \n    public static void main(String[] args) \n    {\n        int limit=15;\n \n        System.out.println(\"Right Angle Triangle\");\n \n        for (int i = 0; i < limit; i++) \n        {\n            for (int j = 0; j <= i; j++) \n            {\n                System.out.print(\"*\");\n            }\n \n            System.out.println();\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create an if statement in Ruby that checks if a given number is a prime number.", "input": "", "output": "def is_prime?(number)\n  if number < 2\n    return false\n  else\n    (2...number).each do |i|\n      if number % i == 0\n        return false\n      end\n    end\n    true\n  end\nend", "category": "Python"}, {"instruction": "Create an HTML page with a layout consisting of 3 containers: one on the left and two on the right.", "input": "", "output": "<html>\n    <head>\n    </head>\n\n    <style>\n        #container{\n            width: 100%;\n            display: flex;\n        }\n\n        #left-container{\n            width: 20%;\n        }\n\n        #right-containers{\n            width: 80%;\n            display: flex;\n        }\n\n        #right-container1{\n            width: 50%;\n        }\n\n        #right-container2{\n            width: 50%;\n        }\n    </style>\n\n    <body>\n        <div id=\"container\">\n            <div id=\"left-container\">\n                <!-- Left Container Content -->\n            </div>\n            <div id=\"right-containers\">\n                <div id=\"right-container1\">\n                    <!-- Right Container 1 Content -->\n                </div>\n                <div id=\"right-container2\">\n                    <!-- Right Container 2 Content -->\n                </div>\n            </div>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Generate a random hex color in Python.", "input": "", "output": "import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())", "category": "Python"}, {"instruction": "Make a list of numbers from 0 to 20 that are divisible by 3.", "input": "", "output": "numbers = [x for x in range(21) if x % 3 == 0]", "category": "Python"}, {"instruction": "Generate a list of dictionary keys from the given dictionary.", "input": "my_dict = {'Name':'John','Age':24,'City':'New York'}", "output": "list_keys = list(my_dict.keys()) \nprint(list_keys)\n\nOutput:\n['Name', 'Age', 'City']", "category": "Python"}, {"instruction": "Replace all the x in the given list with y.", "input": "list = [1, 2, 'x', 'x', 1]", "output": "list = [1, 2, 'y', 'y', 1]", "category": "Python"}, {"instruction": "How many parameters does the following function require?", "input": "def multiply(a, b):\n    return a * b", "output": "Two, 2.", "category": "Python"}, {"instruction": "Which boolean value will be returned if the expression 5 is not equal to 10 is evaluated?", "input": "", "output": "True", "category": "Python"}, {"instruction": "Construct a for loop to print the integer from 0 to 50.", "input": "", "output": "for i in range(51):\n    print(i)", "category": "Python"}, {"instruction": "Construct a CSS style sheet", "input": "Change the default color of the HTML text to be purple", "output": "* {\n    color: #7a00e6;\n}", "category": "Python"}, {"instruction": "Identify the correct syntax to declare a variable in Java", "input": "", "output": "dataType variableName;", "category": "Python"}, {"instruction": "Create a while loop in JavaScript to print the Fibonacci series.", "input": "", "output": "let result = [];\nlet prev = 0;\nlet next = 1;\n\nwhile (next < 10) {\n  temp = prev;\n  prev = next;\n  next = temp + next;\n  result.push(next);\n}\nconsole.log(result);", "category": "Python"}, {"instruction": "Write a function in Python to split a given string into the words in the string.", "input": "", "output": "def split_string(string):\n    return string.split()", "category": "Python"}, {"instruction": "Edit the following C# code to throw an exception if the divisor is equal to 0.", "input": "int result = dividend / divisor;", "output": "int result; \ntry \n{ \n    result = dividend / divisor; \n    if (divisor == 0) \n        throw new ArithmeticException(\"Divisor cannot be zero\"); \n    \n} \ncatch (DivideByZeroException e) \n{ \n    Console.WriteLine(\"Exception caught: {0}\", e); \n}", "category": "Python"}, {"instruction": "Create a JavaScript class named \"Student\" that has the following fields.", "input": "", "output": "class Student {\n    constructor(name, age, email) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n}", "category": "Python"}, {"instruction": "Generate a unique 8 digit alphanumeric ID using Java.", "input": "", "output": "String alphaNumericString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                        + \"0123456789\"\n                        + \"abcdefghijklmnopqrstuvxyz\";\n\nStringBuilder sb = new StringBuilder(8);\n\nfor (int i = 0; i < 8; i++) {\n int index  = (int)(alphaNumericString.length() * Math.random());\n sb.append(alphaNumericString.charAt(index));\n}\nString generatedID = sb.toString();", "category": "Python"}, {"instruction": "Create a C++ variable with the name \"name\" that can store a string value.", "input": "", "output": "string name;", "category": "Python"}, {"instruction": "Write a SQL query that sums the values in the \"Amount\" column of a table called \"Transactions\".", "input": "", "output": "SELECT SUM(Amount) FROM Transactions;", "category": "Python"}, {"instruction": "Calculate the sum of 3, 5, 7 and 17 using JavaScript.", "input": "", "output": "let sum = 3 + 5 + 7 + 17;", "category": "Python"}, {"instruction": "Write a Java code snippet to set the 3rd element in an array of integers to the value 5.", "input": "int[] arr = {1, 2, 3, 4, 5};", "output": "arr[2] = 5;", "category": "Python"}, {"instruction": "Write a SQL query to select rows from the table \"Customers\" where the \"City\" column equals \"London\".", "input": "", "output": "SELECT * FROM Customers WHERE City = 'London';", "category": "Python"}, {"instruction": "Set up a basic HTML page with a title that says \"My Web Page\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Web Page</title>\n</head>\n<body>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Python program that reads a list of words and prints the most frequently used one.", "input": "['apple', 'banana', 'orange', 'apple']", "output": "\"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \n\n\nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n\n    # Result\n    print(most_freq_word(words))", "category": "Python"}, {"instruction": "Given a list of numbers, implement a quick sort algorithm.", "input": "[7, 4, 5, 9, 1]", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\nif __name__ == '__main__':\n    arr = [7, 4, 5, 9, 1]\n    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]", "category": "Python"}, {"instruction": "Convert the following data into Excel Format.", "input": "[\n    {'name': 'John', 'age': 20},\n    {'name': 'Paul', 'age': 22},\n    {'name': 'Ringo', 'age': 19}\n]", "output": "\"\"\"\nConvert data into Excel format\n\"\"\"\n\nimport csv\n\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n\n    to_excel(data)", "category": "Python"}, {"instruction": "use regular expression to determine the number of words in a string.", "input": "This is a string of text", "output": "import re\n\ndef get_num_words(inp_str):\n    words = re.findall(r'\\w+', inp_str)\n    return len(words)\n\nif __name__ == '__main__':\n    inp_str = 'This is a string of text'\n    print(get_num_words(inp_str)) # Output: 4 words", "category": "Python"}, {"instruction": "Determine the code complexity for the following codse sample.", "input": "def get_sum(list):\n   sum = 0\n   for num in list:\n       sum += num\n   return sum", "output": "The code complexity of the given function is O(n), where n is the length of the list.", "category": "Python"}, {"instruction": "Convert this list of strings to a single string without using the \"join\" method.", "input": "str_list = [\"I\", \"am\", \"a\", \"list\", \"of\", \"strings\"]", "output": "result = ''\nfor string in str_list:\n    result += string\n# result is now \"Iamalistofstrings\"", "category": "Python"}, {"instruction": "Using the following code snippet, generate a list containing numbers from 1 to n.", "input": "n = 5", "output": "nums = list(range(1, n+1)) # nums is now [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Explain the difference between String comparison operators == and === in JavaScript.", "input": "", "output": "The \"==\" operator is the equality comparison operator, which compares two values and returns true if they are equal. The \"===\" operator is the strict equality comparison operator, which compares two values and returns true only if both the values and their type are equal.", "category": "Python"}, {"instruction": "Reverse this array in-place using Python.", "input": "arr = [4, 2, 8, 6]", "output": "arr.reverse() # arr is now [6, 8, 2, 4]", "category": "Python"}, {"instruction": "Design a data structure to model the evolution of a population.", "input": "", "output": "\"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n\n    def add_member(self, member):\n        self.population.append(member)\n\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass Member:\n    def __init__(self, data):\n        self.data = data\n\n\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]", "category": "Python"}, {"instruction": "Generate a HTML code to display a basic webpage with", "input": "Heading: Welcome\nText: Hello World!", "output": "<html>\n  <head>\n    <title>Welcome</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n    <p>Hello World!</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a function in Java that takes a string as a parameter and returns the string in lowercase letters.", "input": "", "output": "public static String LowerCase(String str) {\n  return str.toLowerCase();\n}", "category": "Python"}, {"instruction": "Categorize a given tweet.", "input": "\"This new software program is supposed to make life so much easier!\"", "output": "positive", "category": "Python"}, {"instruction": "Calculate the sum of all characters in a string using a for loop", "input": "String: Python", "output": "total = 0\nfor ch in 'Python':\n    total += ord(ch)\nprint(total)\n\n# Output: 686", "category": "Python"}, {"instruction": "Given an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2", "input": "ar1 = [1, 4, 7, 9]\nar2 = [2, 5, 6, 8]", "output": "def mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n    return result", "category": "Python"}, {"instruction": "Solve the quadratic equation 3x^2 + 8x + 4 = 0", "input": "", "output": "x = (-8 \u00b1 \u221a-112) / (2 \u00d7 3)\n   = (-8 \u00b1 4\u221a7) / 6\n   = (-2 \u00b1 2\u221a7) / 3", "category": "Python"}, {"instruction": "Prompt a clarification from the user when the reply provided is unclear", "input": "Input Reply: I don't know", "output": "Can you please explain what you mean when you say \"I don't know\"?", "category": "Python"}, {"instruction": "Compute P(A | B) given that  P(B | A) = 0.8, P(A) = 0.4, and P(B) = 0.7", "input": "", "output": "P(A|B) = P(B|A) * P(A) / P(B)\n     = 0.8 * 0.4 / 0.7\n     = 0.5714286", "category": "Python"}, {"instruction": "List all the methods available in axelrod python library", "input": "", "output": "Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method.", "category": "Python"}, {"instruction": "Write a SQL query to get the details of all Customers from the database.", "input": "", "output": "SELECT * FROM Customers;", "category": "Python"}, {"instruction": "Create a function that takes a string and a number n, then return n characters from the end of the string.", "input": "string = \"Hello World\"\nn = 3", "output": "def getCharactersFromEnd(string, n):\n    return string[-n:]", "category": "Python"}, {"instruction": "Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.", "input": "string1 = \"Hello World\"\nstring2 = \"WorldHello\"\nlength1 = 11\nlength2 = 11", "output": "def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        string1string1 = string1 + string1\n        return string2 in string1string1", "category": "Python"}, {"instruction": "Create a program to take a string of words and return the count of each word.", "input": "word_string = \"This is a sentence of words\"", "output": "def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        count_dict[word] = words.count(word)\n    return count_dict", "category": "Python"}, {"instruction": "Write an if statement that checks if an integer, num, is less than 10.", "input": "num = 7", "output": "if num < 10:\n    print(\"num is less than 10\")", "category": "Python"}, {"instruction": "Create a python class that stores the name of the student, their total marks and return the student name with their total marks.", "input": "name = 'John'\nmarks = 75", "output": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n\n    def get_details(self):\n        return self.name + \": \" + str(self.marks)", "category": "Python"}, {"instruction": "Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.", "input": "astring = \"Python\"", "output": "def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])", "category": "Python"}, {"instruction": "Create a python function which finds the intersection of two lists", "input": "list1=[2, 5, 8, 10]\nlist2=[3, 5, 8, 10]", "output": "def intersect(list1,list2):\n    return [i for i in list1 if i in list2]", "category": "Python"}, {"instruction": "We need to find the maximum element in a given array of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_max(arr):\n maximum = arr[0]\n for i in arr[1:]:\n if i > maximum:\n maximum = i\n return maximum", "category": "Python"}, {"instruction": "Construct a binary search tree from a list of given items", "input": "Items: [1, 5, 7, 9, 11, 16]", "output": "9\n    /   \\  \n   5    11\n  /    /  \\\n 1    7    16", "category": "Python"}, {"instruction": "Implement an algorithm to generate the permutations of a string", "input": "", "output": "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # get the last character\n    last_char = string[-1]\n\n    # get all permutations for the remaining characters\n    all_permutations = permutations(string[:-1])\n\n    # create permutations for including the last character\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n\n    return permutations_with_last_char", "category": "Python"}, {"instruction": "Write a Python parser to parse the json string to a dictionary.", "input": "{\"name\": \"John\", \"age\": 23}", "output": "import json\n\ndef json_parser(string):\n  data = json.loads(string)\n  return data", "category": "Python"}, {"instruction": "Suggest a code that sort a list by the last digit of each element.", "input": "", "output": "def sort_by_last_digit(list):\n return sorted(list, key=lambda x: x % 10)", "category": "Python"}, {"instruction": "Create a list of students which contains a nested list of the student\u2019s name and age.", "input": "students = [\"Sam\", 19], [\"Alice\", 20], [\"Linda\", 21]", "output": "student_list = [[student[0], student[1]] for student in students]", "category": "Python"}, {"instruction": "Calculate the total of all the elements in the list using a loop.", "input": "my_list = [2, 5, 9, 4]", "output": "total = 0\nfor num in my_list:\n    total += num\nprint(total) # 20", "category": "Python"}, {"instruction": "Update the dictionary values using the same keys.", "input": "my_dict = {\"key1\": 3, \"key2\": 6}", "output": "my_dict.update({\"key1\": 4, \"key2\": 8})", "category": "Python"}, {"instruction": "Compute the sum of two integers without using the \"+\" operator.", "input": "x = 5\ny = 7", "output": "sum = x ^ y + (x & y) << 1 # using bitwise operators", "category": "Python"}, {"instruction": "Use the information provided to initialize a dictionary in Python.", "input": "keys = [\"name\", \"age\", \"gender\"]\nvalues = [\"John Doe\", 25, \"Male\"]", "output": "my_dict = dict(zip(keys, values))", "category": "Python"}, {"instruction": "Generate a code in Lua to find the maximum number in a given array.", "input": "", "output": "function findMax(arr)\n    local maxValue = -math.huge\n    for i = 1, #arr do\n        if arr[i] > maxValue then\n            maxValue = arr[i]\n        end\n    end\n    return maxValue\nend", "category": "Python"}, {"instruction": "Create an algorithm in Java that prints the prime numbers between 1 and 100.", "input": "", "output": "class PrimeNumber{  \n public static void main(String args[]){  \n  int i,m=0,flag=0;    \n  int n=100;//it is the number to be checked  \n  m=n/2;    \n  for(i=2;i<=m;i++){    \n   if(n%i==0){    \n   System.out.println(\"Number is not prime\");    \n   flag=1;    \n   break;    \n   }    \n  }    \n  if(flag==0)    \n  System.out.println(\"Number is prime\");    \n}  \n}", "category": "Python"}, {"instruction": "We need to build a function to compute the product of the elements of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "def product_of_array(arr):\n prod = 1\n for i in arr:\n prod *= i\n return prod", "category": "Python"}, {"instruction": "Develop a Swift program that returns the index of a given element in an array.", "input": "Given an array of integers and a target element.", "output": "func searchIndex(arr: [Int], target: Int) -> Int? {\n      for index in 0..<arr.count {\n          if arr[index] == target {\n              return index\n          }\n      }\n      return nil\n}", "category": "Python"}, {"instruction": "Develop a ReactJS program that displays the sum of two number inputs.", "input": "The two numbers that the user will input should be positive integers.", "output": "import React, { useState } from \"react\";\n\nfunction SumInput() {\n  const [number1, setNumber1] = useState(\"\");\n  const [number2, setNumber2] = useState(\"\");\n  const [sum, setSum] = useState(0);\n\n  const handleNumber1Change = e => setNumber1(e.target.value);\n  const handleNumber2Change = e => setNumber2(e.target.value);\n  const handleSumCalc = () => setSum(parseInt(number1) + parseInt(number2));\n\n  return (\n    <div>\n      <input type=\"text\" value={number1} onChange={handleNumber1Change} />\n      +\n      <input type=\"text\" value={number2} onChange={handleNumber2Change} />\n      =\n      <input type=\"text\" value={sum} readOnly />\n      <button onClick={handleSumCalc}>Calculate Sum</button>\n    </div>\n  );\n}\n\nexport default SumInput;", "category": "Python"}, {"instruction": "Develop a Node.js program that prints out the current time in a specified timezone.", "input": "", "output": "const moment = require('moment-timezone');\n\nconst timezone = 'America/New_York';\nconst currentTime = moment().tz(timezone).format('h:mm a z');\n\nconsole.log(`The current time in ${timezone} is ${currentTime}`);", "category": "Python"}, {"instruction": "Create a SQL query to find all employees whose salary is greater than the average salary of their department.", "input": "Table of Employees:\nID | Name | Department | Salary", "output": "SELECT E.Name\nFROM EMPLOYEES E \nINNER JOIN \n  (SELECT DEPARTMENT, AVG(SALARY) AVG_SALARY \n   FROM EMPLOYEES \n   GROUP BY DEPARTMENT \n  ) T \n  ON E.DEPARTMENT = T.DEPARTMENT \nWHERE E.SALARY > T.AVG_SALARY", "category": "Python"}, {"instruction": "Develop a GUI application in Java to reverse a string.", "input": "User should be able to enter a string in the text field.", "output": "import java.awt.BorderLayout;\nimport java.awt.event.*;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nclass Reverse extends JFrame \n{\n  JTextField inputTF;\n  JTextField outputTF;\n  JButton reverseBtn;\n \n  Reverse() \n  {\n    inputTF = new JTextField(20);\n    outputTF = new JTextField(20);\n    outputTF.setEditable(false);\n    reverseBtn = new JButton(\"Reverse\");\n\n    JPanel panel = new JPanel();\n    panel.add(inputTF);\n    panel.add(reverseBtn);\n    panel.add(outputTF);\n\n    reverseBtn.addActionListener(new ActionListener() \n    {\n      public void actionPerformed(ActionEvent ae) \n      {\n        String userInput = inputTF.getText();\n        StringBuilder sb = new StringBuilder();\n        sb.append(userInput);\n        sb = sb.reverse();\n\n        outputTF.setText(sb.toString());\n      } \n    });\n    add(panel, BorderLayout.CENTER);\n    setVisible(true);\n  } \n}", "category": "Python"}, {"instruction": "Suggest a solution to convert a given number from one base to another.", "input": "", "output": "def base_conversion(num, base_from, base_to):\n if base_from == 10:\n  num = int(num, base_to)\n elif base_to == 10:\n  num = int(str(num), base_from)\n else:\n  num = int(str(int(str(num), base_from)), base_to) \n return num", "category": "Python"}, {"instruction": "Write a function to obtain the result of a given mathematical expression.", "input": "2 + 3 - 5", "output": "def calculate_expression(expression):\n return eval(expression)", "category": "Python"}, {"instruction": "Suggest a completion for the following code that generates a sequence of integers.", "input": "def generate_sequence(starting_number, step):", "output": "def generate_sequence(starting_number, step):\n num = starting_number\n while True: \n  yield num\n  num += step", "category": "Python"}, {"instruction": "Develop a code to perform linear regression in R", "input": "", "output": "fit <- lm(y ~ x,data)\nsummary(fit)", "category": "Python"}, {"instruction": "Provide instructions to create a linked list in Java.", "input": "", "output": "In Java, to create a linked list, you need to declare a node class with instance variables for data and reference to the next node. Then create a LinkedList class with a head node and other methods for insertion, deletion and searching in the linked list. To add an element to the linked list, create a node with the given data and traverse the linked list until you reach the end and set the reference of the last node to the new node.", "category": "Python"}, {"instruction": "You are given a string and you need to clear the line breaks.", "input": "\"This is a \ntest\nstring\"", "output": "def clear_line_breaks(s):\n return s.replace(\"\\n\", \"\")", "category": "Python"}, {"instruction": "We need to find all unique combinations of elements from a given list of items.", "input": "[1, 2, 3, 4]", "output": "def find_unique_combinations(items):\n result = []\n for i in range(1, len(items) + 1):\n for combination in itertools.combinations(items, i):\n result.append(list(combination))\n return result", "category": "Python"}, {"instruction": "Parse the given markup language to extract out the attributes and their corresponding values.", "input": "<html>\n    <head>\n        <title>My Amazing Website</title>\n    </head>\n</html>", "output": "title: My Amazing Website", "category": "Python"}, {"instruction": "Implement a function to generate the Fibonacci series upto 'n' terms.", "input": "n = 10", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write a pseudocode to compare two strings and determine which is longer.", "input": "", "output": "Function CompareStrings(str1, str2)\n  if Length(str1) > Length(str2)\n    return str1\n  else\n    return str2\nEnd Function", "category": "Python"}, {"instruction": "Construct a SQL query to get the names, address and age of employees with age more than 25.", "input": "", "output": "SELECT name, address, age FROM employees WHERE age > 25;", "category": "Python"}, {"instruction": "Define a function to compare two strings", "input": "", "output": "def compareStrings(string1, string2):  \n    if(string1 == string2): \n        return 0\n    elif(string1 > string2): \n        return 1\n    else: \n        return -1", "category": "Python"}, {"instruction": "Explain what is the purpose of the try-except block", "input": "", "output": "The purpose of the try-except block is to handle exceptions that may be raised while a program is executing, so as to avoid crashing of the program.", "category": "Python"}, {"instruction": "Extract the unique elements from a given list of numbers", "input": "list_of_nums = [5, 2, 5, 3, 7, 8, 2]", "output": "unique_nums = set(list_of_nums)  # {2, 3, 5, 7, 8}", "category": "Python"}, {"instruction": "Create a function to find cube of any number", "input": "", "output": "def cube(n):\n    return n**3", "category": "Python"}, {"instruction": "Suggest a solution to the following problem: Write a program to sort a list of strings in alphabetical order.", "input": "list_of_strings = ['banana', 'apple', 'orange', 'kiwi']", "output": "list_of_strings.sort()   # Sorts the list in alphabetical order", "category": "Python"}, {"instruction": "Describe in one sentence what a variable declaration statement is.", "input": "", "output": "A variable declaration statement is a line of code that assigns a value to a variable name.", "category": "Python"}, {"instruction": "Suggest a change to render the following CSS code more efficient.", "input": ".image-box {\n    display: block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n}", "output": ".image-box {\n    display: inline-block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n    background-size: contain;\n}", "category": "Python"}, {"instruction": "Select what section of the code must be changed for the following C++ code snippet to compile correctly.", "input": "int main() {\n    std:cout << \"Hello World!\";\n    return 0;\n}", "output": "The section of the code that must be changed is: std:cout << \"Hello World!\";\nThe correct expression should be: std::cout << \"Hello World!\";", "category": "Python"}, {"instruction": "Suggest an additional function needed to complete the following programme.", "input": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def getData(self):\n        return self.data", "category": "Python"}, {"instruction": "Add a function to the following Javascript code so that it calculates the average of the two numbers.", "input": "const add = (a, b) => {\n\treturn a + b;\n};", "output": "const add = (a, b) => {\n\treturn a + b;\n};\n\nconst average = (a, b) => {\n    return (a + b) / 2;\n};", "category": "Python"}, {"instruction": "Identify the type of bug for the following code snippet.", "input": "def print_message(messsage):\n    print(\"My message is: \" + message)", "output": "Syntax error. The function name is missing a single letter \"s\", it should be \"print_message\".", "category": "Python"}, {"instruction": "Explain the purpose of a deadlock in a multithreaded program.", "input": "", "output": "A deadlock occurs in a multithreaded program when two or more threads are blocked from accessing a resource, because each thread is waiting for a resource that is being held by one of the other threads. This results in all threads being stuck, unable to proceed.", "category": "Python"}, {"instruction": "Modify the given code to accept input in Celsius and convert it to Fahrenheit.", "input": "def c2f():\n  return ((9/5)*temp + 32)", "output": "def c2f(temp):\n  return ((9/5)*temp + 32)", "category": "Python"}, {"instruction": "Write code to times the number entered by the user by 3.", "input": "", "output": "num = int(input('Enter a number:'))\nprint(num*3)", "category": "Python"}, {"instruction": "Find the square root of the given number using the Newton-Raphson method.", "input": "Number: 100", "output": "x_n+1 = x_n - f(x_n) / f'(x_n)\nx_0 = 100\n\nx_1 = 50 - (50*50 - 100) / (2*50)\n   = 50 - (2500 - 100) / 100 \n   = 50 - 24 / 100 \n   = 26\n\nx_2 = 26 - (26*26 - 100) / (2*26)\n   = 26 - (676 - 100) / 52 \n   = 26 - 576 / 52 \n   = 10\n\nx_3 = 10 - (10*10 - 100) / (2*10)\n   = 10 - (100 - 100) / 20 \n   = 10 - 0 / 20 \n   = 10\n\nThe square root of 100 is 10.", "category": "Python"}, {"instruction": "Read the code and determine all the variables that have been declared or used.", "input": "def func(x, y, z):\n    a = x + y + z\n    b = x * y * z\n    c = a / b", "output": "The variables are x, y, z, a, b, and c.", "category": "Python"}, {"instruction": "You are given a list of numbers and you need to calculate the standard deviation of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import statistics\n\ndef calculate_std_dev(nums):\n return statistics.stdev(nums)", "category": "Python"}, {"instruction": "Create a set of transformation rules to convert a valid XML document to a valid HTML document.", "input": "", "output": "1. Replace <?xmlns> element with <html>\n2. Replace <xml> tag with <head>\n3. Add a <meta> tag inside the <head> tag containing the charset UTF-8 and the content type text/html\n4. Replace all <body> elements with <div> elements\n5. Replace all <title> elements with <h1> elements\n6. Replace all <ul> elements with <ol> elements\n7. Replace all <li> elements with <p> elements\n8. Replace all <p> elements with <span> elements\n9. Replace <link> elements with <style> elements\n10. Replace <link/> elements with <script> elements\n11. Replace <image> with <img>\n12. Replace <video> with <video> with the source attribute specified\n13. Replace <audio> with <audio> with the src attribute specified \n14. Replace <text> and <textarea> with <p> and <textarea> respectively\n15. Replace all <form> with <form>\n16. Replace all <input> elements with <input> and optionally add features like placeholder, checked, etc \n17. Replace all <nav> elements with <nav>\n18. Replace <svg> with <svg>", "category": "Python"}, {"instruction": "Generate a classification network in a deep learning framework.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(64, input_dim = 8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(16))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])", "category": "Python"}, {"instruction": "Implement Merge Sort algorithm in C++", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nvoid merge(int arr[], int l, int m, int r) \n{ \n    int i, j, k; \n    int n1 = m - l + 1; \n    int n2 =  r - m; \n  \n    int L[n1], R[n2]; \n  \n    for (i = 0; i < n1; i++) \n        L[i] = arr[l + i]; \n    for (j = 0; j < n2; j++) \n        R[j] = arr[m + 1+ j]; \n  \n    i = 0;  \n    j = 0; \n    k = l;   \n    while (i < n1 && j < n2) \n    { \n        if (L[i] <= R[j]) \n        { \n            arr[k] = L[i]; \n            i++; \n        } \n        else\n        { \n            arr[k] = R[j]; \n            j++; \n        } \n        k++; \n    } \n  \n    while (i < n1) \n    { \n        arr[k] = L[i]; \n        i++; \n        k++; \n    } \n  \n    while (j < n2) \n    { \n        arr[k] = R[j]; \n        j++; \n        k++; \n    } \n} \n  \nvoid mergeSort(int arr[], int l, int r) \n{ \n    if (l < r) \n    { \n        int m = l+(r-l)/2; \n  \n        mergeSort(arr, l, m); \n        mergeSort(arr, m+1, r); \n  \n        merge(arr, l, m, r); \n    } \n}", "category": "Python"}, {"instruction": "Create a function to test if an integer is prime or not.", "input": "", "output": "def is_prime(x):\n    if x < 2: \n        return False\n    for n in range(2, x - 1):\n        if x % n == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Compile a java program that prints out \"Hello World!\"", "input": "", "output": "javac HelloWorld.java", "category": "Python"}, {"instruction": "We need to write a program to generate all permutations of a given string.", "input": "", "output": "def generate_permutations(s):\n results = []\n if len(s) == 1:\n results.append(s)\n else:\n for i, c in enumerate(s):\n for perm in generate_permutations(s[:i] + s[i + 1:]):\n results.append(c + perm)\n return results", "category": "Python"}, {"instruction": "What data structure do you choose to represent a sparse matrix in programming?", "input": "", "output": "A sparse matrix can be represented using a hashmap (dictionary) data structure. The hashmap will contain the non-zero elements of the matrix, where each entry will include the row index, column index and the value at that location. This helps in storing and retrieving massive amounts of data in an efficient manner.", "category": "Python"}, {"instruction": "Erase the duplicated elements of a list.", "input": "list1 = [13, 15, 16, 18, 15, 20, 17]", "output": "list1 = list(set(list1))", "category": "Python"}, {"instruction": "Write a Regular Expression to identify all words that end with \"ing\".", "input": "", "output": "\\w+ing$", "category": "Python"}, {"instruction": "Classify the following sentence according to the type of speech it is.", "input": "John said: \"Let's go to the zoo.\"", "output": "Direct speech.", "category": "Python"}, {"instruction": "What is deadlock in operating system?", "input": "", "output": "Deadlock is a situation in an operating system where two or more processes are unable to move forward due to the resources already being used by some of the other processes. This is a state of equilibrium where no progress can be made in executing the processes due to a circular wait for resources. A process might be waiting indefinitely for an event that will never occur. This can cause a system to become unresponsive as no progress can be made in execution. It is important for operating system designers to identify potential deadlocks and manage them effectively.", "category": "Python"}, {"instruction": "Modify the given code snippet to make all elements of the list uppercase.", "input": "list = [\"hello\", \"world\"]", "output": "list = [x.upper() for x in list]", "category": "Python"}, {"instruction": "Create a Regular Expression to match URLs", "input": "", "output": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$", "category": "Python"}, {"instruction": "Identify the byte sequence that produces the following output.", "input": "Hello World!", "output": "48 65 6c 6c 6f 20 57 6f 72 6c 64 21", "category": "Python"}, {"instruction": "Convert the following code snippet into a function.", "input": "num1 = 4\nnum2 = 6\nresult = num1 + num2", "output": "def add(num1, num2):\n    result = num1 + num2\n    return result", "category": "Python"}, {"instruction": "Write a Regex expression to extract all numbers larger than 0 in a string", "input": "", "output": "\\b[1-9][0-9]*", "category": "Python"}, {"instruction": "Identify the type of a given function", "input": "f(x)=2^x", "output": "Exponential function.", "category": "Python"}, {"instruction": "Generate a C++ program to sum up the elements of an array", "input": "", "output": "#include<iostream>\nusing namespace std;\n \nint sumArray(int arr[], int size)\n{\n\tint sum = 0;\n\tfor (int i=0; i<size; i++)\n\t\tsum += arr[i];\n\t \n\treturn sum;\n}\n \nint main()\n{\n\tint arr[] = {1, 2, 3, 4, 5};\n\tint size = sizeof(arr) / sizeof(arr[0]);\n\t \n\tcout << \"Sum of array elements: \" << sumArray(arr, size);\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Write a code that takes a list as an input and returns the elements in reverse order", "input": "['apple', 'banana', 'cherry']", "output": "def reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1,-1,-1):\n        reversed_list.append(input_list[i])\n    return reversed_list", "category": "Python"}, {"instruction": "Write a code that takes a numeric value and returns the factorial of that number", "input": "3", "output": "def factorial(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result", "category": "Python"}, {"instruction": "Create a code that edits a list by adding two to each element", "input": "[1, 2, 3]", "output": "def add_two(input_list):\n    new_list = []\n    for num in input_list:\n        new_list.append(num + 2)\n    return new_list", "category": "Python"}, {"instruction": "Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the string", "input": "Avengers: \"He brought the team together\"\nCharacter: t", "output": "def count_character(input_string, character):\n    count = 0\n    for char in input_string:\n        if char == character:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Write a code that takes a list as input and returns a list of every permutation of that list", "input": "[1, 2, 3]", "output": "def get_permutations(input_list): \n    result = [] \n    if len(input_list) == 0: \n        return [] \n    if len(input_list) == 1: \n        return [input_list] \n    for i in range(len(input_list)): \n        x = input_list[i] \n        xs = input_list[:i] + input_list[i+1:] \n        for p in get_permutations(xs): \n            result.append([x] + p) \n    return result", "category": "Python"}, {"instruction": "Classify the type of the expression 5 + 4 * 3 - 7", "input": "", "output": "The expression 5 + 4 * 3 - 7 is a mathematical expression of arithmetic operations.", "category": "Python"}, {"instruction": "Design a MySQL Table to store company employees.", "input": "", "output": "CREATE TABLE `employee` (\n  `employee_id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  `name` varchar(255) NOT NULL,\n  `dob` datetime NOT NULL,\n  `salary` decimal(10,2) NOT NULL,\n  `address` varchar(255)\n);", "category": "Python"}, {"instruction": "Develop a web page that displays the current temperature in various cities.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Weather Tracker</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n</head>\n<body>\n    <h1>Current Weather</h1>\n    <div class=\"data-table\"></div>\n\n    <script>\n        $(function() {\n            $.get('https://weather-tracker-server.herokuapp.com', function(data) {\n                var cityNames = [];\n                var temperatures = [];\n                $(data).each(function(index, item) {\n                    cityNames.push(item.name);\n                    temperatures.push(item.temperature);\n                });\n                $('.data-table').append(`<span>City</span><span>Temperature</span>`);\n                for (var i = 0; i < data.length; i++) {\n                    $('.data-table').append(`<span>${cityNames[i]}</span><span>${temperatures[i]}</span>`);\n                }\n            });\n        });\n    </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Complete the following bash script with conditional statements.", "input": "#!/bin/bash\necho \" Enter an integer \" \nread num", "output": "#!/bin/bash\necho \"Enter an integer\" \nread num\n\nif (( num > 0 )); then\n    echo \"The number is positive\"\nelif (( num < 0 )); then\n    echo \"The number is negative\"\nelse\n    echo \"The number is zero\"\nfi", "category": "Python"}, {"instruction": "Write an SQL query that returns all the students with their marks from the following table.", "input": "Student ( id, name, marks)\nMarks (sub_id, marks)", "output": "SELECT s.name, m.marks \nFROM Student s, Marks m \nWHERE s.id = m.sub_id", "category": "Python"}, {"instruction": "Merge the following two linked lists.", "input": "Linked List 1: 1->3->5\nLinked List 2: 2->4", "output": "def merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n        return head2", "category": "Python"}, {"instruction": "Suggest the missing line of code in the following Python program.", "input": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)", "output": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)\n\n#Print the sum of the list\nprint(sum(nums))", "category": "Python"}, {"instruction": "Design a data structure in Python to store customer contact details.", "input": "", "output": "#Create a class to store customer information\nclass ContactData:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n\n#Create a dictionary to store the customer contact details\ncustomer_details = {}\n\n# function to add customer details in the dictionary\ndef add_customer_details(name, email, phone):\n    customer_details[name] = ContactData(name, email, phone)\n\n#Function to display customer details\ndef display_customer_details():\n    for key in customer_details.keys():\n        customer = customer_details[key]\n        print(\"Name: {}, Email: {}, Phone: {}\".format( \n            customer.name, customer.email, customer.phone))", "category": "Python"}, {"instruction": "Create a function in Python that can compute the area of a rectangular room in square feet.", "input": "length = 20\nwidth = 15", "output": "def findArea(length, width):\n  area = length * width\n  return area\n\n# Call the function\narea = findArea(20, 15)\nprint(\"The area of the room is: \" + str(area) + \"sq.ft\")", "category": "Python"}, {"instruction": "What changes can you suggest in order to optimize the following Java code?", "input": "public class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade;", "output": "public class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade;\n  \n    //create getters and setters for the fields\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public int getGrade() {\n        return grade;\n    }\n\n    public void setGrade(int grade) {\n        this.grade = grade;\n    }\n}", "category": "Python"}, {"instruction": "Create a program to determine the type of triangle given 3 side lengths", "input": "[5, 4, 3]", "output": "def determine_triangle_type(triangle_sides):\n    if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:\n        return 'equilateral'\n    elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:\n        return 'isosceles'\n    else:\n        return 'scalene'", "category": "Python"}, {"instruction": "Create a while loop in Java to calculate the Fibonacci numbers up to the number 10.", "input": "", "output": "int num1 = 0, num2 = 1, fibo = 0;\n\nwhile(fibo <= 10) {\n     fibo = num1 + num2;\n     num1 = num2;\n     num2 = fibo;\n     System.out.print(fibo +\" \"); \n}", "category": "Python"}, {"instruction": "Using only JavaScript, determine the length of a given string \"Hello World\".", "input": "", "output": "let stringLength =  \"Hello World\".length; \nconsole.log(stringLength); // output 11", "category": "Python"}, {"instruction": "Write a query to find all employees whose age is between 25 and 30 and whose department is Marketing.", "input": "", "output": "SELECT\n  *\nFROM\n  Employees\nWHERE\n  age BETWEEN 25 and 30\nAND\n  department = 'Marketing';", "category": "Python"}, {"instruction": "How could Big data analysis be used to provide better services and products ?", "input": "", "output": "Big data analysis can provide companies with data-driven insights that can be used to improve services and products. By accurately analyzing customer trends, companies can build targeted marketing campaigns and make decisions on which services and products to focus on, helping them reach their desired market more efficiently. Additionally, it can help organizations create better customer experiences by identifying areas of improvement in customer support and services.", "category": "Python"}, {"instruction": "Explain what is meant by the term \u2018machine learning\u2019.", "input": "", "output": "Machine learning is the process of teaching a machine to recognize patterns in data and make decisions based on those patterns. It involves feeding a machine large amounts of data, which it can then use to learn, develop and form predictions based on patterns it identifies.", "category": "Python"}, {"instruction": "Write the definition of function to calculate the perimeter of a triangle.", "input": "", "output": "def perimeter(a, b, c):\n    return a + b + c", "category": "Python"}, {"instruction": "Summarize the following text using an algorithm.", "input": "The average daily temperature in Chicago during the month of January is usually below zero degrees Celsius. As such, the streets become icy and treacherous for the residents.", "output": "Chicago residents face treacherous icy streets during the month of January due to average daily temperatures below zero degrees Celsius.", "category": "Python"}, {"instruction": "Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.", "input": "arr = [1, 2, 3, 4, 5]\nk = 7", "output": "def has_pair_with_sum(arr, k): \n    temp_set = set() \n  \n    for i in range(len(arr)): \n        temp = k - arr[i] \n        if temp in temp_set: \n            return True\n        temp_set.add(arr[i]) \n  \n    return False", "category": "Python"}, {"instruction": "Calculate the factorial of n using a recursive function.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Edit the code so it displays the numbers 1 to 5.", "input": "for i in range(2, 10):\n    print(i)", "output": "for i in range(1, 6):\n    print(i)", "category": "Python"}, {"instruction": "Develop a bash script that will take 2 arguments as input and print \"Arguments are equal\" if both arguments are equal or \"Arguments are not equal\" otherwise.", "input": "", "output": "#!/bin/bash\n\nif [ $1 -eq $2 ]; \nthen \n    echo \"Arguments are equal\"\nelse\n    echo \"Arguments are not equal\"\nfi", "category": "Python"}, {"instruction": "Create a method to join an array of strings together.", "input": "arr = ['one', 'two', 'three']", "output": "\"\"\"\nCreate a method to join an array of strings together.\n\nInput: arr = ['one', 'two', 'three']\n\"\"\"\n\nfunction joinStrings(arr) {\n  let joinedStr = '';\n  \n  for (let i = 0; i < arr.length; i++) {\n    joinedStr += arr[i]\n    if (i < arr.length - 1) {\n      joinedStr += ' ';\n    }\n  }\n  \n  return joinedStr;\n}\n\nconsole.log(joinStrings(['one', 'two', 'three']));", "category": "Python"}, {"instruction": "Create a JavaScript code that takes a number as input and returns its factorial.", "input": "num = 5", "output": "\"\"\"\nCreate a JavaScript code that takes a number as input and returns its factorial.\n\nInput: num = 5\n\"\"\"\n\nfunction factorial(num) {\n    if (num === 0) {\n        return 1;\n    } else {\n        return num * factorial(num-1);\n    }\n}\n\nconsole.log(factorial(5))", "category": "Python"}, {"instruction": "Create a method which receives a list of names and outputs the name which occurs the most in that list.", "input": "list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']", "output": "\"\"\"\nCreate a method which receives a list of names and outputs the name which occurs the most in that list.\n\nInput: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\n\"\"\"\n\ndef getMostFrequent(list):\n    frequency = dict()\n    holder = None\n    max_count = 0\n\n    for name in list:\n        if name in frequency: \n            frequency[name] += 1\n        else: \n            frequency[name] = 1\n\n        if frequency[name] > max_count: \n            max_count = frequency[name] \n            holder = name\n\n    return holder \n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nprint(getMostFrequent(list))", "category": "Python"}, {"instruction": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "input": "fromCurrency = \"USD\"\ntoCurrency = \"GBP\"", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))", "category": "Python"}, {"instruction": "Create a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript.", "input": "array = [5, 4, 3, 2, 1]", "output": "\"\"\"\nCreate a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript\n\nInput: array = [5, 4, 3, 2, 1]\n\"\"\"\n\n// bucket sort\nfunction bucketSort(arr) {\n  let buckets = new Array(arr.length); \n  let result = []; \n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[i] = 0;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[arr[i]]++;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    while (buckets[i] > 0) {\n      result.push(i);\n      buckets[i]--;\n    }\n  }\n  \n  return result;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the count of all the books listed in a library catalog.", "input": "", "output": "SELECT\n COUNT(*)\nFROM\n library_catalog;", "category": "Python"}, {"instruction": "Construct a regex statement to select all words starting with a capital letter.", "input": "", "output": "\\b[A-Z]\\w+", "category": "Python"}, {"instruction": "Using HTML, create a button that displays a message when clicked.", "input": "", "output": "<button onclick=\"alert('Hello World!')\"> Click me! </button>", "category": "Python"}, {"instruction": "Create a code in Python to get the current stock price of a company from yahoo finance.", "input": "ticker = \"AAPL\"", "output": "\"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))", "category": "Python"}, {"instruction": "Develop a C program to print a pattern like a pyramid.", "input": "", "output": "#include <stdio.h> \nint main() \n{ \nint i, j, k, rows; \nprintf(\"Enter the number of rows \\n\");\nscanf(\"%d\",&rows); \nfor(i=1; i<=rows; i++ ) \n{ \nfor(k=rows; k >= i; k--)  \nprintf(\" \"); \nfor(j=1; j<= (2*i-1) ; j++ ) \nprintf(\"*\"); \nprintf(\"\\n\"); \n} \nreturn 0; \n}", "category": "Python"}, {"instruction": "Create a class in Java that will print the two integers added together.", "input": "", "output": "public class Addition {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(5,7));\n    }\n}", "category": "Python"}, {"instruction": "Create a functional HTML form using the following attributes.", "input": "name, email, country", "output": "<form>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\">\n\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\">\n\n    <label for=\"country\">Country</label>\n    <select name=\"country\"> \n        <option>---------</option>\n        <!-- To be populated dynamically -->\n    </select>\n\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a Java program to calculate the area of a square given the length of a side.", "input": "", "output": "public class CalculateSquareArea {\n \n  public static double calculateArea(double sideLength) {\n    double area = sideLength * sideLength;\n    return area;\n  }\n \n  public static void main(String[] args) {\n    double sideLength = 5;\n \n    double area = calculateArea(sideLength);\n    System.out.println(\"The area of a square with side length \" + sideLength + \" is \" + area);\n  }\n}", "category": "Python"}, {"instruction": "Given a list of integers, write a function in Python to sort and reverse the list.", "input": "input_list = [3, 8, 10, 1, 9]", "output": "def sort_and_reverse(list): \n  res_list = sorted(list, reverse=True) \n  return res_list \n  \nsort_and_reverse(input_list) \n\n# Output \n[10, 9, 8, 3, 1]", "category": "Python"}, {"instruction": "Suggest a code snippet to detect a cycle in a linked list", "input": "", "output": "def contains_cycle(head):\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n        if slow is fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Generate a correct c++ program to compute the YTM of a bond", "input": "", "output": "#include <iostream> \n#include <cmath>\n\nusing namespace std; \n\n// Function to calculate bond yield \nfloat calculateYTM(float faceValue, float price,  \n                   int numInterestPayments,  \n                   float couponRate, float MaturityPeriod) \n{ \n    float guess = 0.1, ytm = 0; \n    float a, b; \n  \n    while (ytm != guess) \n    { \n        ytm = guess; \n        a = price; \n  \n        // Calculating the bond price \n        // using the YTM guess \n        for (int i = 0; i < MaturityPeriod; i++) \n            a = a - (faceValue * (couponRate/2) / \n                     (pow((1 + ytm/2), (numInterestPayments/2 - i)))); \n        a = a - (faceValue / (pow((1 + ytm/2),  \n                         (numInterestPayments/2)))); \n        b = MaturityPeriod * (faceValue * (couponRate/2 / \n            (pow((1 + ytm/2), (numInterestPayments/2 - MaturityPeriod)))) + (faceValue/ (pow((1 + ytm/2),  \n            (numInterestPayments/2)))); \n  \n        // calculating YTM using Newton's Method \n        guess = ytm + (a/b); \n    } \n  \n    return guess * 2; \n}", "category": "Python"}, {"instruction": "Make a program to determine if the elements of the array are in increasing order", "input": "[3, 5, 7]", "output": "def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create an object to store the variables that are necessary for the following code snippet.", "input": "x = 10\ny = 20\nz = 30", "output": "class Coordinates:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\ncoordinates = Coordinates(x=10, y=20, z=30)", "category": "Python"}, {"instruction": "Update the strings stored in a dictionary, so that all strings have the same length.", "input": "d = {\n  'apple': 'small',\n  'orange': 'medium size'\n}", "output": "d = {\n  'apple': 'small  ',\n  'orange': 'medium size'\n  }", "category": "Python"}, {"instruction": "Write an algorithm to swap two elements a[i] and a[j] in a given array a.", "input": "", "output": "def swap(a, i, j):\n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp", "category": "Python"}, {"instruction": "Modify the following block of code to set a maximum length of the list", "input": "list = [1, 2, 3, 4, 5, 6]", "output": "list = [1, 2, 3, 4, 5, 6][:5]", "category": "Python"}, {"instruction": "Create a method to transform a string from lowercase to title case.", "input": "", "output": "def to_title_case(string):\n    return string.title()", "category": "Python"}, {"instruction": "Design a data structure to store the details of a student (Name, Age, Course).", "input": "", "output": "struct Student {\n  name: String,\n  age: u32,\n  course: String,\n}", "category": "Python"}, {"instruction": "Print all the elements in the following array in descending order.", "input": "[4, 2, 6, 8, 5, 9, 1]", "output": "9 8 6 5 4 2 1", "category": "Python"}, {"instruction": "Write a python statement to calculate the factorial of 6.", "input": "", "output": "import math\n\nfactorial = math.factorial(6)", "category": "Python"}, {"instruction": "Create an SQL query to select the name and age of all employees that are younger than 25.", "input": "Table: Employees\nColumns: employee_id, name, age", "output": "SELECT name, age FROM Employees WHERE age < 25;", "category": "Python"}, {"instruction": "Write a python loop to print all the even numbers between 2 and 15 (inclusive).", "input": "", "output": "for i in range(2, 16):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Generate a unique ID string of length 12 using a Python function.", "input": "", "output": "import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)", "category": "Python"}, {"instruction": "Write a SQL query to select the distinct cities from a table of customer data.", "input": "", "output": "SELECT DISTINCT city FROM customer_data;", "category": "Python"}, {"instruction": "Convert a given number to its corresponding Roman numeral.", "input": "", "output": "def convertToRoman(num): \n  val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n        ] \n  syb = [ \n            \"M\", \"CM\", \"D\", \"CD\", \n            \"C\", \"XC\", \"L\", \"XL\", \n            \"X\", \"IX\", \"V\", \"IV\", \n            \"I\"\n        ]\n\n        roman_num = '' \n        i = 0\n        while  num > 0: \n            for _ in range(num // val[i]): \n                roman_num += syb[i] \n                num -= val[i] \n            i += 1\n        return roman_num\n\n# Driver Code\nnum = 13 \nprint(convertToRoman(num)) \n\n# Output: XIII", "category": "Python"}, {"instruction": "Generate a list of all even numbers between 20 and 40.", "input": "", "output": "even_numbers = []\nfor num in range(20, 41): \n  if num % 2 == 0: \n    even_numbers.append(num) \n  \nprint(even_numbers) \n\n# Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]", "category": "Python"}, {"instruction": "Train a machine learning model without using any frameworks with the folowing input and output data.", "input": "Input Data: A, B, C, D\nOutput Data: 0, 1, 0, 1", "output": "model = Model()\nmodel.fit(x=[A, B, C, D], y=[0, 1, 0, 1])", "category": "Python"}, {"instruction": "Make the following CSS code work properly on the web page.", "input": ".special {\n    background-color: #eee;\n    border: 2px solid #999;\n}", "output": ".special {\n    background-color: #eee;\n    border: 2px solid #999;\n    padding: 10px;\n    display: block;\n}", "category": "Python"}, {"instruction": "Using Python, reverse a given string \"Hello World!\".", "input": "", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Run the given code and determine the result.", "input": "a = 3\nb = 5\nc = a + b", "output": "c = 8", "category": "Python"}, {"instruction": "Given a list, write a Python code snippet to print the elements of the list in reverse order.", "input": "my_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "How can you create a dictionary in Python with 3 key-value pairs?", "input": "", "output": "We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}", "category": "Python"}, {"instruction": "In Python, how can you iterate a list in reverse order?", "input": "", "output": "We can use the reversed() function to iterate a list in reverse order in Python. For example:\n\nmy_list = [1, 2, 3, 4]\n\nfor element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "Create a React component for a button that takes two props: an onClick event handler and an id.", "input": "", "output": "const MyButton = props => {\n    return (\n    <button onClick={props.onClick} id={props.id}>\n        Click Me\n    </button>\n    )\n}", "category": "Python"}, {"instruction": "Create a Java method that computes the factorial of an integer.", "input": "", "output": "public static int factorial(int n) {\n   int factorial = 1; \n   for (int i = 1; i <= n; i++) {\n      factorial *= i;\n   }\n   return factorial;\n}", "category": "Python"}, {"instruction": "Create a function in C to check whether a given string contains any punctuations or not.", "input": "", "output": "bool containsPunctuation(string s) {\n  for (char c : s) {\n    if (ispunct(c)) \n      return true;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Write Python code to extract the title from a URL.", "input": "url = \"https://www.google.com/search?q=gpt-3&oq=GPT+3\"", "output": "def get_title(url): \n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    return title\n\nprint(get_title(url))\n\n# Output: GPT 3", "category": "Python"}, {"instruction": "Find two missing numbers in an array in C++.", "input": "arr = [1, 3, 6, 5, 8, 9, 10]", "output": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nstd::vector<int> find_missing_numbers(const std::vector<int>::iterator begin,\n                                      const std::vector<int>::iterator end) {\n  int n = end - begin;\n  int total_sum = (n + 2)*(n + 1)/2;\n\n  int missing_sum = 0;\n  for (auto it = begin; it != end; ++it) {\n    missing_sum += *it;\n  }\n  \n  int difference = total_sum - missing_sum;\n  int a = difference/2;\n  int b = a + difference;\n  \n  return {a, b};\n}\n\nint main() {\n  std::vector<int> arr = {1, 3, 6, 5, 8, 9, 10};\n  std::vector<int> results = find_missing_numbers(arr.begin(), arr.end());\n\n  std::cout << results[0] << \" \" << results[1] << std::endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Count the number of elements in an array using HTML.", "input": "arr = ['a', 'b', 'c', 'd']", "output": "arr.length //4", "category": "Python"}, {"instruction": "Write JavaScript code for a for loop with condition that iterates 8 times.", "input": "", "output": "for (let i = 0; i < 8; i++) { \n  // code to be executed \n}", "category": "Python"}, {"instruction": "Output the name of the font styles available in HTML.", "input": "", "output": "normal, italic, oblique, small-caps, inherit", "category": "Python"}, {"instruction": "Find the reverse of an array in Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "How can you remove duplicate characters from a string in Java?", "input": "", "output": "We can use a Set collection to remove duplicate characters from a string in Java. We can loop through the characters in the string, and add them to a Set, which does not allow duplicate elements. Then we can loop through the set and append each character to a new string. This new string will be free of duplicate characters.", "category": "Python"}, {"instruction": "Describe your approach to sorting a variety of data with a single sorting algorithm.", "input": "", "output": "My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well.", "category": "Python"}, {"instruction": "Edit a program to show the area of the rectangle", "input": "#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n \n    return 0;\n}", "output": "#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n    printf(\"The Area of rectangle is : %d \\n\", length * width);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Create a custom exception class for a restaurant that has no menu items.", "input": "", "output": "class NoMenuItemsError(Exception): \n    def __init__(self, message): \n        super().__init__(message)\n        self.message = message \n\ndef raise_error():\n    raise NoMenuItemsError(\"No menu items are available\")", "category": "Python"}, {"instruction": "Which sorting algorithm is the best for linked lists?", "input": "", "output": "The best sorting algorithm for linked lists is Merge Sort. Merge Sort is more efficient than other sorting algorithms such as Quicksort or Insertion Sort because it does not require extra space. Furthermore, it is an in-place sorting algorithm, which means that resources are used to sort the linked list without the need to use extra space.", "category": "Python"}, {"instruction": "Create a for loop which prints the first 5 numbers in a given list.", "input": "list_numbers = [1, 2, 3, 4, 5, 6, 7]", "output": "for i in range(0, 5):\n    print(list_numbers[i])", "category": "Python"}, {"instruction": "Answer the following question: What Python library is used for web scraping?", "input": "", "output": "The Python library used for web scraping is called 'BeautifulSoup'.", "category": "Python"}, {"instruction": "Write a python command which prints the text \u201cHello World\u201d if a given number is even.", "input": "number = 10", "output": "if number % 2 == 0:\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Write a short python script to determine whether a given number is divisible by 5.", "input": "", "output": "def is_divisible_by_5(number):\n    \"\"\"Check whether a given number is divisible by 5 or not.\"\"\"\n    if number % 5 == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Suggest an algorithm to search for a matching string in a large text", "input": "Text: \u201cThis is a long piece of text with a searching string\u201d\nSearching string: \u201csearching string\u201d", "output": "The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string.", "category": "Python"}, {"instruction": "Write an HTML page including 1 form element", "input": "Form Element: text area control", "output": "<html>\n<head>\n  <title>Form Element</title>\n</head>\n<body>\n \n  <form action=\"\">\n    <textarea placeholder=\"Enter your text here...\" rows=\"4\" cols=\"50\"></textarea>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n \n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Bash script that runs a Python code", "input": "Python code:\n\ndef hello_world():\n    print(\"Hello World!\")", "output": "#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND", "category": "Python"}, {"instruction": "Create a SQLite database table using the following information", "input": "Table Name: Students\nColumns: Name (string), Age (integer), GPA (float)", "output": "CREATE TABLE Students \n(\n  Name text,\n  Age integer,\n  GPA float\n);", "category": "Python"}, {"instruction": "Generate a programming workflow for analyzing a large text dataset.", "input": "Dataset size: 1 million words", "output": "1. Pre-process the input text dataset to remove punctuation and special characters. \n2. Split the dataset into equal chunks for easier parallel processing \n3. Use a language model such as BERT or GPT-2 to tokenize the chunks \n4. Use embeddings to represent words in the dataset \n5. Perform descriptive analytics such as identifying highest frequency words, collocations, etc. \n6. Perform prediction tasks such as sentiment analysis, parts-of-speech analysis, topic modeling, etc. \n7. Pattern recognition tasks such as document classification and clustering. \n8. Generate visualizations such as word clouds, topic maps, etc.", "category": "Python"}, {"instruction": "Write a query to find the names of all employees who have the same salary as the employee with the highest salary.", "input": "Table Name: Employees\nColumns: Name, Salary", "output": "SELECT Name\nFROM Employees\nWHERE Salary = (SELECT MAX(Salary) \n                FROM Employees);", "category": "Python"}, {"instruction": "Name the type of data structure used in the following algorithm.", "input": "In this algorithm, we iterate through an array of elements, and perform an action on each of these elements:\n\nfor element in array:\n    performAction(element)", "output": "This algorithm uses an array as its data structure.", "category": "Python"}, {"instruction": "How could you add a classname of \"main\" to the div element in this HTML code?", "input": "<div>Hello World!</div>", "output": "<div class=\"main\">Hello World!</div>", "category": "Python"}, {"instruction": "Generate a React class component that handles one event type.", "input": "Event Type: onMouseLeave", "output": "class MyComponent extends React.Component {\n  handleMouseLeave = (event) => {\n    // Handle mouse leave event\n  }\n \n  render() {\n    return (\n      // Render component here\n    );\n  }\n};", "category": "Python"}, {"instruction": "Write a function to remove the value x from a list l", "input": "x = 2\nl = [1, 2, 3, 4, 5]", "output": "def remove_x(x, l):\n    l.remove(x)\n    return l", "category": "Python"}, {"instruction": "Format the following code according to PEP 8 style guidelines.", "input": "def function1(  a,  b,  c):\n\td = a+b*c\n\treturn d", "output": "def function1(a, b, c):\n    d = a + b * c\n    return d", "category": "Python"}, {"instruction": "Write a python command which prompts the user to input text", "input": "", "output": "input_text = input(\"Enter some text: \")", "category": "Python"}, {"instruction": "What data type is returned by the Python function pow()?", "input": "", "output": "The Python function pow() returns a float data type.", "category": "Python"}, {"instruction": "Create a try/except block which checks that the input is a valid integer", "input": "input_text = input(\"Enter a number: \")", "output": "try:\n    input_text = int(input(\"Enter a number: \"))\nexcept ValueError:\n    print(\"Invalid input\")", "category": "Python"}, {"instruction": "Capitalize the letters A - Z in the given string.", "input": "text = \"We are learning natural language processing\"", "output": "text = \"We Are Learning Natural Language Processing\"", "category": "Python"}, {"instruction": "Write a regular expression to match only words containing a single 'a' character.", "input": "", "output": "pattern = r\"\\b[^a]*a[^a]*\\b\"", "category": "Python"}, {"instruction": "Compare two objects and return 0 if they are equal, -1 if the first is less than the second, and 1 if the first is greater than the second.", "input": "object1 = 7\nobject2 = 8", "output": "def compare(object1, object2):\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1", "category": "Python"}, {"instruction": "Find the greatest common divisor (GCD) of 24 and 32.", "input": "", "output": "The greatest common divisor (GCD) of 24 and 32 is 8.", "category": "Python"}, {"instruction": "Construct a list of integers from m to n.", "input": "m = 3\nn = 8", "output": "lst = []\nfor i in range(m, n+1):\n    lst.append(i)", "category": "Python"}, {"instruction": "How can you check if a given key exists in a dictionary?", "input": "", "output": "You can check if a given key exists in a dictionary using the `in` keyword. For example:\n\nmy_dict = {\n    'name': 'John',\n    'age': 20\n}\nif 'name' in my_dict:\n    print('Key found')", "category": "Python"}, {"instruction": "Format a given date in the following format: \"Month Day, Year\"", "input": "date = '2020-10-25'", "output": "#Format a given date\ndate = '2020-10-25'\n\n#Split the date\nmonth, day, year = date.split('-')\n\n#Format the date\nformatted_date = month + ' ' + day + ', ' + year\n\n#Print the formatted date\nprint(formatted_date)\n\n\"\"\"\nOutput:\nOctober 25, 2020\n\"\"\"", "category": "Python"}, {"instruction": "Write an SQL query that returns the records of the table that have a value larger than 5", "input": "TableA: id | name | type", "output": "SELECT *\nFROM TableA\nWHERE type > 5;", "category": "Python"}, {"instruction": "Write a code to process a given array and add 10 to each value stored in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "#Process a given array and add 10 to each value\narr = [1, 2, 3, 4, 5]\n\n#Loop through the array\nfor i in range(len(arr)):\n    #Add 10 to the current element\n    arr[i] = arr[i] + 10\n\n#Print the modified array\nprint(arr)\n\n\"\"\"\nOutput:\n[11, 12, 13, 14, 15]\n\"\"\"", "category": "Python"}, {"instruction": "Which of the following statements is/are valid in Javascript?", "input": "let x = \"Hello World!\";\nlet y = 'Hello World!'", "output": "Both statements are valid in Javascript. The first statement uses double quotes, while the second statement uses single quotes.", "category": "Python"}, {"instruction": "Is the following code valid Python?", "input": "if bool == true:\n    print(\"True\")", "output": "False", "category": "Python"}, {"instruction": "Create a function to check if a given triangle is an equilateral triangle.", "input": "a = 5, b = 5, c = 5", "output": "def isEquilateral(a, b, c):\n    if (a == b == c): \n        return True\n    else: \n        return False\n  \nisEquilateral(a, b, c) # returns True", "category": "Python"}, {"instruction": "Compute the square root of a number without using the square root function.", "input": "number = 4", "output": "def sqrt(number):\n    x = number\n    y = 1\n    epsilon = 0.000001\n    while x-y > epsilon:\n        x = (x + y)/2\n        y = number/x\n    return x\n\nsqrt(number) # returns 2.0", "category": "Python"}, {"instruction": "Design a class to normalize the salary of an employee with a minimum salary of 20,000.", "input": "", "output": "class SalaryNormalizer:\n    def __init__(self, salary):\n        self.minimum = 20000\n        self.input_salary = salary\n \n    def normalize(self):\n        if self.input_salary < self.minimum:\n            self.normalized_salary = self.minimum\n        else:\n            self.normalized_salary = self.input_salary\n \n        return self.normalized_salary", "category": "Python"}, {"instruction": "Write a code to print out an array of the first ten positive even numbers.", "input": "", "output": "def printEvenNumbers():\n    my_list = []\n    for item in range(2,21,2):\n        my_list.append(item) \n    print(my_list)\n\nprintEvenNumbers() # prints [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "category": "Python"}, {"instruction": "What is the GIL in Python and what is its purpose?", "input": "", "output": "The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions.", "category": "Python"}, {"instruction": "What data type should the following expression evaluate to?", "input": "3 + 4 * 5", "output": "The expression 3 + 4 * 5 will evaluate to 23, which is a number data type.", "category": "Python"}, {"instruction": "Construct a python list comprehension", "input": "List of numbers from 2 to 8", "output": "list_nums = [x for x in range(2, 9)]", "category": "Python"}, {"instruction": "Generate an HTML element", "input": "", "output": "<html>\n    <body>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Compute the modulo of following two numbers", "input": "56 % 7", "output": "0", "category": "Python"}, {"instruction": "Implement a quicksort algorithm in JavaScript that takes an array of numbers as input and returns a sorted array.", "input": "input_array = [21, 4, 1, 3, 9, 20, 25]", "output": "function quicksort(input_array) {\n    if (input_array.length <= 1) {\n        return input_array;\n    }\n\n    const pivot = input_array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1; i < input_array.length; i++) {\n        if (input_array[i] < pivot) {\n            left.push(input_array[i]);\n        } else {\n            right.push(input_array[i]);\n        }\n    }\n\n    return [...quicksort(left), pivot, ...quicksort(right)];\n}\n\ninput_array = [21, 4, 1, 3, 9, 20, 25]\nconsole.log(quicksort(input_array)) // prints [1, 3, 4, 9, 20, 21, 25]", "category": "Python"}, {"instruction": "Create a style sheet in CSS to display an element as a block with a width of 200px and a padding of 10px.", "input": "", "output": ".element {\n    display: block;\n    width: 200px;\n    padding: 10px;\n}", "category": "Python"}, {"instruction": "Write a bash script that prints out the current working directory.", "input": "", "output": "#!/bin/bash\nDIR=$( pwd )\necho \"Current working directory: $DIR\"", "category": "Python"}, {"instruction": "Construct an SQL statement to select the column names from a table.", "input": "table_name=\"customers\"", "output": "SELECT column_name FROM customers;", "category": "Python"}, {"instruction": "Write a command line program in C++ which takes a string as input and prints all its characters in reverse order.", "input": "input_string = \"Hello world!\"", "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() \n{\n    string input;\n    cin >> input;\n    \n    int size = input.length(); \n    \n    for (int i=size-1; i>=0; i--) {\n        cout << input[i];\n    }\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Create a list of 5 strings in Java.", "input": "", "output": "List<String> list = Arrays.asList(\"hello\", \"world\", \"news\", \"sun\", \"moon\");", "category": "Python"}, {"instruction": "Write a regex expression that matches sentences with the word \"cat\" followed by any number of characters except the letter \"z\".", "input": "", "output": "/cat[^z]*/", "category": "Python"}, {"instruction": "Create an object in C++ that has two integer values and two functions.", "input": "", "output": "class MyObject {\npublic:\n    int x;\n    int y;\n    void Add() { x + y; }\n    void Multiply() { x * y; }\n};", "category": "Python"}, {"instruction": "Using python, create two variables that are equal to each other.", "input": "", "output": "x = 5\ny = 5", "category": "Python"}, {"instruction": "Design a database schema for an online banking system.", "input": "", "output": "CREATE TABLE users (\n user_id INT NOT NULL AUTO_INCREMENT,\n first_name VARCHAR(50) NOT NULL,\n last_name VARCHAR(50) NOT NULL,\n username VARCHAR(50) NOT NULL,\n password VARCHAR(50) NOT NULL,\n PRIMARY KEY (user_id)\n);\n \nCREATE TABLE accounts (\n account_id INT NOT NULL AUTO_INCREMENT,\n user_id INT NOT NULL,\n balance DECIMAL(20),\n type VARCHAR(20),\n PRIMARY KEY (account_id),\n FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE transactions (\n transaction_id INT NOT NULL AUTO_INCREMENT,\n account_id INT NOT NULL,\n amount DOUBLE,\n date DATE,\n type VARCHAR(10),\n PRIMARY KEY (transaction_id),\n FOREIGN KEY (account_id) REFERENCES accounts(account_id)\n);", "category": "Python"}, {"instruction": "Using React, create a component to display an alert message.", "input": "", "output": "import React from 'react'\n\nconst AlertMessage = () => {\n return (\n <div className=\"alert-message\">\n <p>This is an alert message!</p>\n </div>\n )\n}\n\nexport default AlertMessage;", "category": "Python"}, {"instruction": "Create a JavaScript function to convert a string to pig-latin.", "input": "", "output": "function toPigLatin(str) {\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n let result = '';\n str.split(' ').forEach(word => {\n if (vowels.includes(word[0])) {\n result += `${word}ay `;\n } else {\n result += `${word.substring(1)}${word[0]}ay `;\n }\n });\n return result;\n}", "category": "Python"}, {"instruction": "Describe the recursive approach for solving a problem.", "input": "", "output": "Recursive approach is an approach wherein a problem is broken down into multiple subproblems until the base case is reached. Once the base case is reached, the results of each sub-problem are combined to obtain a solution to the original problem. It is used when the problem exhibits the self-similarity property.", "category": "Python"}, {"instruction": "Write a Python code to initialize a 10 x 10 matrix with random values.", "input": "", "output": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix", "category": "Python"}, {"instruction": "Write a function to calculate all the possible paths for a N x N matrix.", "input": "", "output": "def calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n  \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n  \n    dp[0][0] = 1\n  \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n  \n    return dp[rows-1][cols-1]", "category": "Python"}, {"instruction": "Create a dictionary in which keys are characters and values are the occurences of that character in a given string.", "input": "string = \"apple\"", "output": "def get_char_count(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count", "category": "Python"}, {"instruction": "Using CSS, use a flex box layout to arrange a sidebar, main content, and footer in a single row.", "input": "", "output": "<div class=\"container\">\n <div class=\"sidebar\">Sidebar</div>\n <div class=\"main-content\">Main Content</div>\n <div class=\"footer\">Footer</div>\n</div>\n\n<style type=\"text/css\">\n .container {\n display: flex;\n flex-direction: row;\n }\n \n .sidebar {\n flex: 1;\n }\n \n .main-content {\n flex: 3;\n }\n \n .footer {\n flex: 1;\n }\n</style>", "category": "Python"}, {"instruction": "Create a python anonymous function that squares an input number.", "input": "", "output": "square_num = lambda x: x ** 2", "category": "Python"}, {"instruction": "Construct a MySQL query to select all records from a table named Users.", "input": "", "output": "SELECT * \nFROM Users;", "category": "Python"}, {"instruction": "Construct a HTML table with four columns.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Fill in the blanks to correctly identify the type of the following variable", "input": "The variable x is an __________.", "output": "The variable x is an integer.", "category": "Python"}, {"instruction": "Write an algorithm for computing the sum of all digits between 1 to N.", "input": "", "output": "def sum_digits(n):\n    sum = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum", "category": "Python"}, {"instruction": "Output the following data in json format", "input": "Name: John\nAge: 24\nLocation: USA", "output": "{\n    \"name\": \"John\",\n    \"age\": 24,\n    \"location\": \"USA\"\n}", "category": "Python"}, {"instruction": "Write a sql query that joins two tables on a condition and select distinct records.", "input": "TableA:\nid | name | type\n\nTableB:\nid | age | gender", "output": "SELECT DISTINCT A.id, A.name, A.type, B.age, B.gender\nFROM TableA A \nINNER JOIN TableB B \nON A.id = B.id;", "category": "Python"}, {"instruction": "Write a PHP script to generate a random password with 8 characters.", "input": "", "output": "<?php  \n  \n// Generate random password   \nfunction generateRandomPassword() { \n    $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'; \n   \n    // Maximum characters in the password \n    $max = 8;  \n      \n    $password = array(); //Initialize the password array  \n    $alphaLength = strlen($alphabet) - 1; //Length of the alphabet string \n   \n    for ($i = 0; $i < $max; $i++) { \n        $n = rand(0, $alphaLength); \n        $password[] = $alphabet[$n]; \n    } \n   \n    return implode($password); //Return the joined string \n} \n\n$password = generateRandomPassword(); \n  \n//Print out the random password \necho $password;\n?>", "category": "Python"}, {"instruction": "Write a CSS code for adding a yellow background for a block of text.", "input": "", "output": "p {\n    background-color: yellow;\n}", "category": "Python"}, {"instruction": "Create a matrix of size 3 x 3 in Python.", "input": "", "output": "# 3x3 matrix \nmatrix3x3 = [[10, 20, 30],  \n             [15, 25, 35],  \n             [27, 29, 37]]", "category": "Python"}, {"instruction": "Modify the given Java code to print the first character of each word in a sentence.", "input": "String sentence = \"Today is a good day\";", "output": "String sentence = \"Today is a good day\";\nString[] words = sentence.split(\" \");\n \nfor (String word : words) {\n    System.out.print(word.charAt(0));\n}", "category": "Python"}, {"instruction": "Write a Spark program to count the number of words for a given text.", "input": "Text: This is a test text.", "output": "val data = Array(\"This is a test text.\") \nval wordsRDD = sc.parallelize(data).flatMap(x => x.split(\" \")) \nval wordCounts = wordsRDD.countByValue() \nfor ((word, count) <- wordCounts) println(word + \" : \" + count)", "category": "Python"}, {"instruction": "Print the longest palindrome from the given string", "input": "s = \"abbaba\"", "output": "def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str", "category": "Python"}, {"instruction": "Given an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.", "input": "arr = [5, 2, 3, -2, 4, -5, 2, 3]", "output": "def maxAdjSameSign(arr): \n    \"\"\"\n    This function returns the maximum number of adjacent numbers with the same sign.\n    \"\"\"\n    max_count = 0\n    count = 1\n  \n    for i in range(0, len(arr)-1):\n        # If current element and the next element\n        # have the same sign \n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else: \n            max_count = max(max_count, count) \n  \n        # Reset count to 1\n        count = 1\n  \n    return max(max_count, count)", "category": "Python"}, {"instruction": "Change the function to eliminate passing by reference", "input": "def f(arr):\n    arr.remove(arr[0])", "output": "def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy", "category": "Python"}, {"instruction": "How can you delete an object in JavaScript?", "input": "", "output": "To delete an object in JavaScript, you can use the delete keyword, e.g. delete object_name;", "category": "Python"}, {"instruction": "Write a code snippet to loop over the characters in a string and add them to an array in Python.", "input": "", "output": "def loop_over_string(s):\n    arr = []\n    for c in s:\n        arr.append(c)\n    return arr", "category": "Python"}, {"instruction": "Construct an SQL query to delete the records whose age is greater than 30.", "input": "", "output": "DELETE FROM table_name WHERE Age > 30;", "category": "Python"}, {"instruction": "What is the syntax of an if-else block in Java?", "input": "", "output": "The syntax of an if-else block in Java is:\n\nif (condition) {\n  // execute this code if the condition is true\n} else {\n  // execute this code if the condition is false\n}", "category": "Python"}, {"instruction": "Count the number of quadruples that sum up to zero", "input": "arr = [-2, -1, 0, 1, 2]", "output": "def countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad", "category": "Python"}, {"instruction": "Create a class to represent a blog post in Python.", "input": "", "output": "class BlogPost:\n    def __init__(self, title, content, author):\n        self.title = title\n        self.content = content\n        self.author = author\n\n    def edit_post(self, new_title, new_content):\n        self.title = new_title\n        self.content = new_content", "category": "Python"}, {"instruction": "Write a script to scrape wikipedia page's html.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Page_title\"\n\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.content, 'html.parser')\n# Get the HTML of the page\nhtml = soup.prettify()\n\n# Save the scraped HTML\nwith open('page_title.html', 'w') as file:\n    file.write(html)", "category": "Python"}, {"instruction": "Create a regex expression to find a date format of \"yyyy-mm-dd\".", "input": "", "output": "\\d{4}-\\d{2}-\\d{2}", "category": "Python"}, {"instruction": "Given a pandas dataframe, identify the columns and rows of the table.", "input": "import pandas as pd \n\ndata = {'fruit': ['apple', 'banana', 'mango'], \n        'price': [2.99, 4.99, 5.99], \n        'quantity': [3, 5, 7]}\n\ndf = pd.DataFrame(data)", "output": "The columns of the table are: fruit, price, and quantity. \nThe rows of the table are: apple, banana, and mango.", "category": "Python"}, {"instruction": "Find the first 5 numbers in the Fibonacci sequence.", "input": "", "output": "The first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.", "category": "Python"}, {"instruction": "Explain the difference between a parameter and an argument in Python.", "input": "", "output": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters. Parameters are specified after the method name, inside the parentheses. They are used to pass values to a method. An argument is the actual value of this variable that gets passed to the method. Arguments are the data you pass into the method's parameters when you call the method. Parameters are like empty vessels that are waiting to be filled as a result of calling the method. Arguments are like the values that are placed inside the vessels. In a nutshell, Parameters are variable in the declaration of function. Arguments are the actual values of these variables that get passed to function.", "category": "Python"}, {"instruction": "Write a code to add two numbers given as input.", "input": "a = 1\nb = 5", "output": "def add(a,b):\n    return a + b\n\nif __name__ == '__main__':\n    print(add(a,b))", "category": "Python"}, {"instruction": "Write a code to update the content on the web page with current time and date.", "input": "", "output": "import datetime\n\ndef update_web_page_time_date():\n    # Get the current time and date\n    current_time = datetime.datetime.now().strftime(\"%H:%M:%S %d-%m-%Y\")\n\n    # Update the content of the web page\n    with open(\"index.html\", \"w\") as fh:\n        fh.write(\"<p>The current time and date is: {}<p>\".format(current_time))\n\nif __name__ == '__main__':\n    update_web_page_time_date()", "category": "Python"}, {"instruction": "Write a code snippet to query the Intenet Movie Database for the release date of the movie \"The Dark Knight\".", "input": "", "output": "import requests\nimport json\n\nAPI_KEY = 'INSERT_YOUR_API_KEY_HERE'\n\nheaders = {\n 'Accept': 'application/json'\n}\n\ndef query_movie_databse(movie_title):\n    url = 'http://www.omdbapi.com/?t=\"{}\"&apikey={}'.format(movie_title, API_KEY)\n\n    response = requests.get(url, headers=headers)\n    data = json.loads(response.text)\n    return data['Year']\n\nif __name__ == '__main__':\n    print(query_movie_databse('The Dark Knight'))", "category": "Python"}, {"instruction": "Write a code to replace all the \"A\"s in the string with a \"#\".", "input": "sentence = \"Hello WAAorld\"", "output": "def replace_A(sentence):\n     return sentence.replace('A','#')\n\nif __name__ == '__main__':\n print(replace_A(sentence))", "category": "Python"}, {"instruction": "Convert the Python list below to a nested dictionary of countries and their populations.", "input": "List = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]]", "output": "countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}", "category": "Python"}, {"instruction": "Generate a random user agent string.", "input": "", "output": "import random\n\nuser_agents = [\n    'Mozilla/5.0 (Linux; Android 7.0; SM-G935P Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.83 Mobile Safari/537.36',\n    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'\n]\n\ndef generate_user_agent():\n    return random.choice(user_agents)\n\nif __name__ == '__main__':\n    print(generate_user_agent())", "category": "Python"}, {"instruction": "Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.", "input": "string = \"abcdexyeffgghh\"", "output": "# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n# Test the function\nprint(find_longest_substring(string))", "category": "Python"}, {"instruction": "Randomly rearrange the elements of the given array.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to randomly rearrange the elements of the given array\nimport random \ndef shuffle_array(nums):\n    # Initialize a result array\n    result = nums.copy()\n    \n    # Iterate over the array\n    for i in range(len(nums)): \n        # Generate a random index between 0 and the current index\n        j = random.randrange(0, i + 1)\n        \n        # Swap elements at the current and random indices\n        result[i], result[j] = result[j], result[i] \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the shuffled array\nprint(shuffle_array(nums))", "category": "Python"}, {"instruction": "Reverse the order of the given array without using inbuilt functions.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to reverse the order of the given array \ndef reverse_array(nums):\n    # Variable to store the result \n    result = []\n    \n    # Iterate over the provided array starting from the last element\n    for i in range(len(nums) -1, -1, -1):\n        # Append each number to the result array\n        result.append(nums[i]) \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the array in reverse order\nprint(reverse_array(nums))", "category": "Python"}, {"instruction": "Given a string, remove all consecutive duplicates in the string.", "input": "string = \"aabbccddeeff\"", "output": "# Function to remove all consecutive duplicates in the string\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))", "category": "Python"}, {"instruction": "Correct the indentation in the code below.", "input": "def my_function(num):\n    res=num*2\n  print(res)", "output": "def my_function(num):\n    res = num * 2\n    print(res)", "category": "Python"}, {"instruction": "Write an SQL query to insert a new record with values 'name': 'Jack', 'age': 25, 'address': 'New York' into a table named 'Employees'.", "input": "", "output": "INSERT INTO Employees (name, age, address) VALUES ('Jack', 25, 'NewYork');", "category": "Python"}, {"instruction": "Explain the following Python statement.", "input": "sorted_list = sorted(input_list)", "output": "This statement uses the sorted() function to sort the elements in the list 'input_list' in ascending order. The elements in the list will be compared using their default ordering and then sorted accordingly. The sorted list is returned and stored in a new list called 'sorted_list'.", "category": "Python"}, {"instruction": "Given a string of characters, write a function in Python that returns only the uppercase characters.", "input": "\"Hello, World!\"", "output": "def get_upper(string):\n  \"\"\"Return only uppercase characters from given string.\"\"\"\n  return ''.join([c for c in string if c.isupper()])", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and removes all spaces.", "input": "\"Hello, World!\"", "output": "def remove_spaces(sentence):\n  \"\"\"Remove all spaces from a given sentence.\"\"\"\n  return sentence.replace(\" \", \"\")", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and splits it into a list of words.", "input": "\"Hello, World!\"", "output": "def split_string(text):\n  \"\"\"Split a given string into a list of words.\"\"\"\n  return text.split()", "category": "Python"}, {"instruction": "Given a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part.", "input": "", "output": "def partition(lst):\n    left_sum, right_sum = 0, sum(lst)\n    for i in range(len(lst)-1):\n        left_sum += lst[i]\n        right_sum -= lst[i]\n        if left_sum > right_sum:\n            return lst[:i+1], lst[i+1:]\n    return None", "category": "Python"}, {"instruction": "Classify the following word as a noun, verb, adjective or adverb.", "input": "Quickly", "output": "Adverb.", "category": "Python"}, {"instruction": "Count the number of characters in a sentence that begin with a consonant.", "input": "", "output": "def count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Given an array of integers, create a program that finds the longest subarray with a sum of 0.", "input": "", "output": "def longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n\n    return max_len", "category": "Python"}, {"instruction": "Write a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number.", "input": "", "output": "def two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == num:\n                indices.append([i,j])\n    return indices", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters that contain both upper and lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    char_set = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.sample(char_set, 8))", "category": "Python"}, {"instruction": "Develop a script in Perl to sort an array.", "input": "arr = (11, 12, 4, 15, 6)", "output": "@sorted_arr = sort {$b <=> $a} @arr; \nprint \"@sorted_arr\\n\";", "category": "Python"}, {"instruction": "What data structure can be used to convert the following list into a dictionary?", "input": "[\"apple\", \"pear\", \"mango\", 100, 0.25, False]", "output": "The data structure that can be used to convert the given list into a dictionary is a list of tuples. The tuples will comprise of the key and the value in the dictionary, e.g. (\"apple\", \"pear\"), (100, 0.25), (False, True). This can then be converted into a dictionary by using the dict() constructor.", "category": "Python"}, {"instruction": "Write a function that determines if a given substring is present in a string or not.", "input": "", "output": "def is_substring_present(string, sub_string):\n for i in range(len(string)):\n if string[i : (i + len(sub_string))] == sub_string:\n return True\n return False", "category": "Python"}, {"instruction": "Write a Python class to implement a linked list.", "input": "", "output": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n \n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n \n def pop(self):\n data = self.head.data\n self.head = self.head.next\n return data", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks if they are all the same length.", "input": "[\"Hello\", \"World\"]", "output": "def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks whether the list is empty or not.", "input": "[\"Hello\", \"World\"]", "output": "def is_list_empty(list_str):\n  \"\"\"Check if a list is empty or not.\"\"\"\n  return len(list_str) == 0", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not.", "input": "9", "output": "def is_prime(num):\n  \"\"\"Check if a number is a prime number.\"\"\"\n  if num <= 1:\n    return False\n  for i in range(2,num):\n    if num % i == 0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings and returns a single string with the characters in alternating order.", "input": "\"Hello\", \"World!\"", "output": "def alternate_string(str1, str2):\n  \"\"\"Return a string with characters in alternating order from two given strings.\"\"\"\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] + str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result", "category": "Python"}, {"instruction": "Write a function in Python that takes a 2D array and returns the product of all elements in it.", "input": "[[1, 2],[3, 4]]", "output": "def product_of_elements(arr):\n  \"\"\"Return product of all elements in a given 2D array.\"\"\"\n  product = 1\n  for row in arr:\n    for ele in row:\n      product *= ele\n  return product", "category": "Python"}, {"instruction": "Edit the following code to return the elements in the reversed order.", "input": "def reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "output": "def reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "category": "Python"}, {"instruction": "Calculate the sum of all numbers in the given array that are multiples of the given number.", "input": "numbers=[2, 4, 6, 8, 10, 12]\nnum=3", "output": "def sum_multiples(lst, n):\n    return sum([i for i in lst if i % n == 0])", "category": "Python"}, {"instruction": "You need to develop a Java function to get the count of a given character in a given string.", "input": "string = \"Hello World\"\ncharacter = 'l'", "output": "public static int CountChar(String string, char character) \n{ \n    int count = 0; \n    for (int i=0; i<string.length(); i++) \n    { \n        if (string.charAt(i) == character) \n            count++; \n    } \n    return count; \n}", "category": "Python"}, {"instruction": "Create a switch statement for printing out the day for a given number", "input": "", "output": "switch (day) { \n    case 1: \n        console.log(\"Monday\"); \n        break; \n    case 2: \n        console.log(\"Tuesday\"); \n        break; \n    case 3:\n        console.log(\"Wednesday\"); \n        break; \n   .....  \n    case 7:\n        console.log(\"Sunday\"); \n        break; \n\n    default: \n        console.log(\"Invalid input\"); \n        break; \n}", "category": "Python"}, {"instruction": "Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.", "input": "my_list = [4, 6, 3, 9, 1]", "output": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))", "category": "Python"}, {"instruction": "Write a CSS rule to set the background color to blue for all elements inside the page's body.", "input": "", "output": "body {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Implement a function in Python that makes a copy of a list.", "input": "my_list = [1, 2, 3, 4]", "output": "def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))", "category": "Python"}, {"instruction": "Create a web page that prints out the return value of the following function call in the browser.", "input": "function addTwoNumbers(a,b){\n  return a+b;\n}", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>My Page</title>\n</head>\n<body>\n\n<p>The result of addTwoNumbers(1,2) is <span id=\"result\"></span></p>\n\n<script>\n function addTwoNumbers(a,b){\n  return a+b;\n }\n\n var result = addTwoNumbers(1,2);\n document.getElementById(\"result\").innerHTML = result;\n</script>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an API using Django Rest Framework to retrieve data from a PostgreSQL database table.", "input": "", "output": "import django\nfrom django.contrib.auth.models import User, Group\nfrom django.contrib import admin\nfrom rest_framework import viewsets, routers\nfrom myapp.models import MyModel\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all().filter(is_active=True)\n    serializer_class = MyModelSerializer\n\nrouter = routers.DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)", "category": "Python"}, {"instruction": "Create a Java class that defines a circle with two double data fields, radius and area.", "input": "", "output": "public class Circle {\n private double radius;\n private double area;\n\n public Circle(double radius) {\n  this.radius = radius;\n  this.area = Math.PI * Math.pow(this.radius, 2);\n }\n\n public double getRadius() {\n  return this.radius;\n }\n\n public double getArea() {\n  return this.area;\n }\n}", "category": "Python"}, {"instruction": "Name a function in Python which can be used to convert a list to a dictionary.", "input": "", "output": "The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.", "category": "Python"}, {"instruction": "How can you find the maximum element in an array using the reduce() method?", "input": "", "output": "The reduce() method can be used to find the maximum element in an array by applying a function to each element of the array that checks if the current element is greater than the previously seen maximum. This function can be used as the argument to the reduce() method and it will return the maximum value seen in the array.", "category": "Python"}, {"instruction": "Explain the effect of calling the following JavaScript function on the list provided.", "input": "list = [4,8,2,7];\nfunction sort_ascending(list) {\n    list.sort(function(a, b){return a-b});\n}", "output": "The effect of calling the given JavaScript function on the list provided is that the list is re-arranged in ascending order. The sort() function sorts the elements in the list in ascending order according to each element's position relative to other elements in the list. The function has been provided a custom sorting function compares the two elements a and b in the list and return a negative, 0, or positive value, depending on whether a is less than, equal to, or greater than b. This is used to determine the order in which the elements are sorted.", "category": "Python"}, {"instruction": "How can a mathematical function be represented in programming?", "input": "", "output": "A mathematical function can be represented in programming by defining a function that takes in relevant inputs and returns the output of the mathematical function. For example, the Pythagorean theorem can be represented by a function that takes two parameters, the length of the two sides of a right triangle, and returns the length of the hypotenuse of the triangle.", "category": "Python"}, {"instruction": "Name a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end.", "input": "", "output": "A doubly-linked list is a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. It consists of nodes, which contain data and two references (or links) each pointing to the previous and/or next node in the linked list. By traversing the list via these links it is possible to insert and delete elements anywhere in the list in constant time.", "category": "Python"}, {"instruction": "What do you need to do to print the element at the index 5 in an array?", "input": "", "output": "To print the element at the index 5 in an array, you need to use the index accessor brackets, passing the index of the element that needs to be printed as an argument. For example, if the array is named `arr`, you can print the element at index 5 by writing `cout << arr[5]`;.", "category": "Python"}, {"instruction": "What is the most efficient way to search for an element in a list?", "input": "", "output": "The most efficient way to search for an element in a list is by using a binary search, which is a divide and conquer search algorithm that halves the search space after each iteration. Binary search is generally more efficient than linear search, as it has a time complexity of O(log n).", "category": "Python"}, {"instruction": "Explain why function scope is important in Python.", "input": "", "output": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible.", "category": "Python"}, {"instruction": "How would you flatten a two dimensional list?", "input": "", "output": "One way to flatten a two dimensional list is to use the itertools.chain() method. This method takes an iterable of iterables and returns a single iterable that contains all the elements of the original iterables.", "category": "Python"}, {"instruction": "Write an HTML code to add a link to a web page.", "input": "Link text: Visit our site\nLink URL: https://www.example.com/", "output": "<a href=\"https://www.example.com/\">Visit our site</a>", "category": "Python"}, {"instruction": "Update a MySQL table to increase the salary of all employees by 10%.", "input": "Employess table contains the following columns:\n- id: Integer\n- name: Text\n- salary: Number", "output": "UPDATE Employees \nSET salary = salary * 1.1;", "category": "Python"}, {"instruction": "Create a function that takes in two numbers, a numerator and a denominator, and returns the result of the division expressed as a float.", "input": "Numerator = 10, Denominator = 20", "output": "def float_division(num, denom):\n    return float(num)/denom\n\nprint float_division(Numerator, Denominator)\n\nOutput: 0.5", "category": "Python"}, {"instruction": "Clean up the following function so that there are no redundant parentheses:", "input": "def foo ( ( a ) ,  (b) ):\nreturn a + b", "output": "def foo(a,b):\n    return a + b", "category": "Python"}, {"instruction": "Construct a for-loop for finding all prime numbers between 1 and 50 in Python.", "input": "", "output": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Design a UI layout in HTML and CSS for an About Us page.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title> About Us </title>\n    <style>\n      body {\n        font-family: Arial;\n      }\n\n      .container {\n        width: 90%;\n        margin: auto;\n        padding: 10px;\n      }\n\n      .about-us-header {\n        font-size: 20px;\n      }\n\n      .about-us-content {\n        font-size: 16px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <div class=\"about-us-header\">\n        <h1>About Us</h1>\n      </div>\n  \n      <div class=\"about-us-content\">\n        <p> We are a team of experienced web developers and designers dedicated to providing you with high-quality web services. \n        </p>\n      </div>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Extract the common key words from the given two strings using a Python script.", "input": "String 1: This programming language is easy to learn\nString 2: Comparing to other languages, this language is simpler", "output": "common_key_words = [\"language\", \"easy\", \"learn\", \"comparing\", \"other\", \"simpler\"]", "category": "Python"}, {"instruction": "Write an SQL query to return the names of workers whose salary is within the top 25% among all workers.", "input": "Table Schema: \ntable_workers(id int, name varchar, salary int)", "output": "SELECT name \nFROM table_workers\nWHERE salary >= (SELECT PERCENTILE_DISC(0.25)\n                 WITHIN GROUP (ORDER BY salary) \n                 FROM table_workers)", "category": "Python"}, {"instruction": "Define a function in Python to print a pattern of right-angled triangles of different sizes", "input": "", "output": "def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)", "category": "Python"}, {"instruction": "Create a linear regression model in R from the given datasets.", "input": "Datasets: Advertising.csv", "output": "model = lm(sales ~ ., data = Advertising)", "category": "Python"}, {"instruction": "Create a Fibonacci sequence of 5 numbers using Python.", "input": "", "output": "fib_sequence = [0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Create a function in Python to rearrange the characters of each word in a given string.", "input": "string = \"Welcome to the world of Python\"", "output": "def rearrangeWord(string): \n     temp_string = string.split(\" \") \n     rearranged_string = [word[::-1] for word in temp_string] \n     return \" \".join(rearranged_string) \nprint(rearrangeWord(string))", "category": "Python"}, {"instruction": "In JavaScript construct a function to obtain the number of digits in an integer", "input": "", "output": "function getNumOfDigits(num) {\n    return num.toString().length;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to select the names of all people aged 21 years or older.", "input": "Table Schema: \ntable_person(p_id int, p_name varchar, p_age int)", "output": "SELECT p_name \nFROM table_person \nWHERE p_age >= 21", "category": "Python"}, {"instruction": "Construct a for-loop for calculating the factorial of a given number.", "input": "Number: 5", "output": "def factorial(x): \n    fact = 1\n\n    for i in range(1,x+1):\n        fact = fact*i\n        \n    return fact\n\nprint(factorial(5))", "category": "Python"}, {"instruction": "Design a data structure to store an undo history of size k.", "input": "", "output": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command", "category": "Python"}, {"instruction": "Create a program to print out all prime numbers below 100.", "input": "", "output": "# Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()", "category": "Python"}, {"instruction": "Given an array, arrange the elements in order.", "input": "arr = [3, 7, 2, 1, 5]", "output": "arr.sort()\n\nOutput: arr = [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "You need to design a calculator class with methods to perform basic calculations (add, subtract, multiply, divide, etc.).", "input": "", "output": "class Calculator:\n    def __init__(self):\n        # initializing the calculator\n        pass\n\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Analyze the following code and tell us what it does.", "input": "def my_function(x):\n     while x > 10:\n        x += 1\n    return x", "output": "The function takes an integer argument and checks if it is greater than 10. If the argument is greater than 10, the function increments the argument by 1. Finally, the function returns the modified argument.", "category": "Python"}, {"instruction": "Construct a regular expression for validating that a string only contains the letters a-z and A-Z.", "input": "", "output": "^[a-zA-Z]+$", "category": "Python"}, {"instruction": "Create a function which takes in a string and returns a dictionary that counts its character frequency.", "input": "", "output": "def char_frequency(string): \n    counts = {}\n    for char in string:\n        if counts.get(char) == None: \n            counts[char] = 1\n        else: \n            counts[char] += 1\n    return counts", "category": "Python"}, {"instruction": "Design a function which takes a parameter and returns the sum of its cube of its digits", "input": "", "output": "def sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += digit**3\n        num //= 10\n    return sum", "category": "Python"}, {"instruction": "Write code to implement a priority queue in Python.", "input": "", "output": "class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.queue.remove(min_item)\n            return min_item\n        else:\n            return None", "category": "Python"}, {"instruction": "You are given a string and you want to count the number of words in it.", "input": "", "output": "def word_count(str): \n    return len(str.split(' '))", "category": "Python"}, {"instruction": "Create a SQL table with the following schema: id (integer), name (string), city (string).", "input": "", "output": "CREATE TABLE myTable (\n  id INTEGER, \n  name VARCHAR(255), \n  city VARCHAR(255)\n);", "category": "Python"}, {"instruction": "You are given a string and you want to sort all characters in the string alphabetically.", "input": "", "output": "sorted_string = ''.join(sorted(string))", "category": "Python"}, {"instruction": "Rewrite this program to use an embedded loop instead of recursion:\n\ndef fibonacci(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)", "input": "", "output": "def fibonacci(num):\n    first = 0\n    second = 1\n    for i in range(num):\n        temp = first\n        first = second\n        second = temp + second\n    return first", "category": "Python"}, {"instruction": "Write a function to implement the sequential search algorithm", "input": "arr = [8, 2, 5, 6, 9]", "output": "def sequential_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a code to compute the XOR of two bits", "input": "A = 1; B = 0;", "output": "def xor(A, B):\n    if (A == B): \n        return 0  \n    else: \n        return 1", "category": "Python"}, {"instruction": "Create a function to perform insertion sorting", "input": "list = [5, 3, 8, 7, 1]", "output": "def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n    return list", "category": "Python"}, {"instruction": "Write a code to print all numbers between a given range in the format shown below", "input": "Start = 1; End = 8;", "output": "for i in range(1, 9):\n    print(i, end=' ')", "category": "Python"}, {"instruction": "Write a PHP program to convert a string to a URL safe string.", "input": "", "output": "<?php\n   \nfunction toUrlSafeString($str) {\n    $str = strtolower($str);\n    $str = preg_replace('/\\s/', '-', $str);\n    $str = preg_replace('/\\W/', '', $str);\n    \n    return $str;\n}", "category": "Python"}, {"instruction": "Using JavaScript, create an algorithm to check if an array of numbers is sorted in ascending order.", "input": "", "output": "function isSortedAscending(arr) {\n    for (let i = 0; i < (arr.length - 1); i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Create a Hashtable in Java to store a list of key-value pair.", "input": "", "output": "import java.util.Hashtable;\n\npublic class HashtableExample {\n     public static void main(String args[]) {\n         Hashtable<Integer, String> ht = new Hashtable<Integer, String>();\n \n         ht.put(1, \"Code\");\n         ht.put(2, \"Learn\");\n         ht.put(3, \"Project\");\n         ht.put(4, \"University\");\n \n         System.out.println(\"Hashtable: \" + ht); \n     }\n}", "category": "Python"}, {"instruction": "Create an HTML page to display the employee details.", "input": "Employee Name: Oliver Smith\nAge: 35\nRole: Marketing Executive", "output": "<html> \n<head> \n<title>Employee Details</title> \n</head> \n<body> \n<h1>Employee Details</h1> \n<p>Name: Oliver Smith</p> \n<p>Age: 35</p> \n<p>Role: Marketing Executive</p> \n</body> \n</html>", "category": "Python"}, {"instruction": "Create a Python dictionary to store employee details.", "input": "Name: John Doe\nAge: 25\nRole: Sales Manager", "output": "employee = {\n 'name': 'John Doe',\n 'age': 25,\n 'role': 'Sales Manager',\n}", "category": "Python"}, {"instruction": "Convert the following floating-point number to its binary representation.", "input": "Number: 12.25", "output": "1100.01", "category": "Python"}, {"instruction": "Calculate the roots of a quadratic equation given its coefficients.", "input": "Coefficients:  4, 3, 1", "output": "# Calculate the roots of the given equation\ndef quadratic_roots(a, b, c):\n   # Calculate the discriminant\n   discriminant = b**2 - 4*a*c\n \n   # Calculate root1 and root2\n   root1 = (-b + discriminant**0.5)/(2*a)\n   root2 = (-b - discriminant**0.5)/(2*a)\n   \n   return root1, root2", "category": "Python"}, {"instruction": "Given a matrix of size NxM, make a code that prints the transpose of the matrix.", "input": "[[12,7],[4,5],[3,8]]", "output": "[[12,4,3],[7,5,8]]", "category": "Python"}, {"instruction": "Construct a code to detect if a character is an uppercase letter or not.", "input": "", "output": "def is_uppercase(char): \n   if (char >= 'A' and char <= 'Z'): \n     return True\n   else: \n     return False", "category": "Python"}, {"instruction": "Use regular expression to match two strings.", "input": "", "output": "import re \n  \ndef match_strings(string1, string2): \n   \n    if re.search(string1, string2): \n        print(\"Match Found\") \n    else: \n        print('No Match Found')", "category": "Python"}, {"instruction": "Generate a code to create a Pyramid of stars with the given height.", "input": "", "output": "def print_pyramid(height):\n    for row in range(1, height + 1):\n        for col in range(1, row + 1):\n            print('*', end=\" \")\n        print('\\n')", "category": "Python"}, {"instruction": "Create a function to format a given phone number \u201c(123) 456-7890\u201d and output a string with canonical format of \u201c+11234567890\u201d.", "input": "Phone number: (123) 456-7890", "output": "def format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    return '+1' + ''.join(digits)\n\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)", "category": "Python"}, {"instruction": "Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.", "input": "String = \u2018192.168.137.8\u2019", "output": "def parse_ip_address(ip_string):\n    ip_list = ip_string.split(\".\")\n    ip_str = \"\".join(ip_list)\n    return ip_str\n\nif __name__ == '__main__':\n    ip_str = parse_ip_address(\"192.168.137.8\")\n    print(ip_str)", "category": "Python"}, {"instruction": "Build a web scraper that stores the main titles and content of article links from a given website.", "input": "Website: https://www.techvoice.org/", "output": "\"\"\"\nBuild a web scraper to store titles and content of article links from a given website\n\"\"\"\n\nimport requests \nfrom bs4 import BeautifulSoup \n\ndef scrape_website(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data)\n\n    titles = []\n    contents = []\n    for article in soup.find_all(\"article\"):\n        title = article.find(\"h2\").text\n        titles.append(title)\n        content = article.find(\"p\").text\n        contents.append(content)\n\n    return {'titles': titles, 'contents': contents}\n    \nif __name__ == '__main__':\n    result = scrape_website(\"https://www.techvoice.org/\")\n    print(result)", "category": "Python"}, {"instruction": "Write a Ruby script to delete duplicates from an array.", "input": "[1,2,2,3,3,4,5]", "output": "def delete_duplicates(arr)\n  arr.uniq\nend\n \narr = [1,2,2,3,3,4,5]\nnew_arr = delete_duplicates(arr)\np new_arr # => [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write Swift code to get the sum of all the numbers from 1 to 1000.", "input": "", "output": "func sumUpToNumber(number: Int) -> Int {\n  var sum = 0\n\n  for i in 1...number {\n    sum += i\n  }\n\n  return sum\n}\n\nlet sum = sumUpToNumber(number: 1000)\nprint(sum)", "category": "Python"}, {"instruction": "Write a CSS style to give a border of 3 pixels to the HTML element.", "input": "", "output": "html {\n    border: 3px solid black;\n}", "category": "Python"}, {"instruction": "Write a PHP function to delete a record from a database table.", "input": "Table Name: details \nKey: user_id \nvalue : 10", "output": "// Delete user with user_id 10 from table details\nfunction deleteRecord($table, $key, $value) {\n    $query = \"DELETE FROM $table WHERE $key = ?\";\n    $conn = connectToDatabase();\n    if($conn->prepare($query)->execute([$value])) {\n        return true;\n    } else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Develop a function to calculate the total amount of the order for an online store.", "input": "ProductA: 15\nProductB: 10\nPriceForProductA: 5\nPriceForProductB: 10", "output": "def calculate_total_amount(products, prices):\n total_amount = 0 \n for i in range(len(products)):\n total_amount = total_amount + (products[i] * prices[i])\n return total_amount", "category": "Python"}, {"instruction": "Write an SQL Query to print a list of all employees who have a higher salary than their managers.", "input": "", "output": "SELECT e1.name AS Employee, e2.name AS Manager, e1.salary AS Employee_Salary, e2.salary AS Manager_Salary\nFROM employee e1\nJOIN employee e2 ON e1.managerid = e2.employeeid\nWHERE e1.salary > e2.salary;", "category": "Python"}, {"instruction": "Write a function in Python that takes two numbers and swaps the values of the two numbers.", "input": "", "output": "def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10", "category": "Python"}, {"instruction": "Construct a SQL query to get the sum of all the purchased item from a given table.", "input": "table name: Purchases", "output": "SELECT SUM(amount) FROM Purchases;", "category": "Python"}, {"instruction": "Write a function to print the value at a given index in a given Array.", "input": "testArray = [1, 2, 3, 4, 5]\nindex = 2", "output": "def printIndex(testArray, index):\n    print(testArray[index])\n\ntestArray = [1, 2, 3, 4, 5]\nindex = 2\n\nprintIndex(testArray, index)\n# Output: 3", "category": "Python"}, {"instruction": "Provide the big-O complexity for a binary search Algorithm.", "input": "", "output": "The big-O complexity of a binary search Algorithm is O(log n). This is because the algorithm halves the input size with every iteration, so it only takes log n iterations to finish.", "category": "Python"}, {"instruction": "Override the equals method for a Java class named Point.", "input": "class Point {\n    int x;\n    int y;\n}", "output": "public class Point {\n    int x;\n    int y;\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Point) {\n            Point other = (Point) obj;\n            return x == other.x && y == other.y;\n        }\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Construct a SQL command that selects a row from a table by its ID.", "input": "table name: Employee", "output": "SELECT * FROM Employee WHERE id = '5';", "category": "Python"}, {"instruction": "Implement an algorithm with the input that calculates the greatest common factor of two numbers.", "input": "8, 32", "output": "def greatestCommonFactor(num1, num2):\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n \n    return num1\n \ngcf = greatestCommonFactor(8, 32) \nprint(gcf) \n \n# Output: 8", "category": "Python"}, {"instruction": "Write a MIPS code that adds two numbers and stores the result in a given memory address.", "input": "num1 = 10\nnum2 = 15\nmemory address = $t0", "output": "addi $t1, $zero, 10 #store num1 in $t1\naddi $t2, $zero, 15 #store num2 in $t2\n\nadd $t0, $t1, $t2 #add num1 and num2 and store result in $t0\nsw $t0, ($memory address) #store result in specified memory address", "category": "Python"}, {"instruction": "How can you sort a list of dictionaries by values of the dictionary in Python?", "input": "", "output": "def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])", "category": "Python"}, {"instruction": "Construct a for loop that prints out every third element of a given array.", "input": "Array: [1, 2, 3, 4, 5, 6, 7]", "output": "for i in range(0, len(array), 3):\n   print(array[i])", "category": "Python"}, {"instruction": "Create a matrix of zeros with shape 4x3 using the NumPy library.", "input": "", "output": "import numpy as np\n\nmatrix = np.zeros((4,3))\nprint(matrix)   # Output the matrix of zeros", "category": "Python"}, {"instruction": "Explain how Python List Comprehensions work?", "input": "", "output": "Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a \u2018for\u2019 statement and then zero or more \u2018for\u2019 or \u2018if\u2019 clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations.", "category": "Python"}, {"instruction": "Write a C program to implement a simple calculator that adds two numbers.", "input": "", "output": "#include <stdio.h>\n \nint main()\n{\n    double x, y, sum;\n    printf(\"Enter two numbers: \");\n    scanf(\"%lf%lf\", &x, &y);\n \n    sum = x + y;\n \n    printf(\"Sum of the entered numbers: %lf\", sum);\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to generate a random strong password with length 8-10.", "input": "", "output": "function generatePassword(){\n  var charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()_+-=\";\n  var passwordLength = Math.floor(Math.random() * (10 - 8 + 1)) + 8;\n  var password = '';\n  \n  for(let i = 0; i < passwordLength; i++){\n    var randomChar = charSet[Math.floor(Math.random() * charSet.length)];\n    password += randomChar;\n  }\n  \n  return password;\n}", "category": "Python"}, {"instruction": "Describe how the for loop works in Python?", "input": "", "output": "A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates.", "category": "Python"}, {"instruction": "Convert the following English sentence into a Python function definition: \"Prints a string on the screen\".", "input": "", "output": "def printString(string):\n  print(string)", "category": "Python"}, {"instruction": "Identify and explain the purpose of a Turing Test.", "input": "", "output": "A Turing Test is a measurement of a machine's ability to exhibit intelligent behaviour equivalent to, or indistinguishable from, that of a human. The test was proposed by Alan Turing in 1950 as a way of determining whether a machine is capable of intelligent thought. The Turing Test consists of a human evaluator interacting with both a human subject and a machine by asking questions and judging the responses. If the evaluator cannot determine the difference between the machine and the human subject, then the machine has passed the test. The purpose of the Turing Test is to provide a reliable method for determining if a machine is able to think and act intelligently.", "category": "Python"}, {"instruction": "Write an R script that performs linear regression to predict a response variable.", "input": "", "output": "# load the data\ndata <- read.csv(\"data.csv\")\n\n# fit the model\nmodel <- lm(formula = response ~ predictor, data = data)\n\n# view the results\nsummary(model)", "category": "Python"}, {"instruction": "Explain what an object-oriented programming language is.", "input": "", "output": "Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties.", "category": "Python"}, {"instruction": "Write a Python function to convert a dictionary into a list of tuples.", "input": "dictionary = {\n  \"name\": \"John\",\n  \"age\": 36\n}", "output": "def dict_to_tuple(dictionary): \n  return [(key, value) for key, value in dictionary.items()]", "category": "Python"}, {"instruction": "Write an SQL query to group the results of a SELECT statement according to the value of a specific column.", "input": "SELECT name, age FROM employees;", "output": "SELECT name, age\nFROM employees\nGROUP BY age;", "category": "Python"}, {"instruction": "Write a code snipplet that computes the sum of numbers between 1 and 100.", "input": "", "output": "let sum = 0;\nfor(let i = 1; i <= 100; i++) {\n  sum += i;\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snipplet that append the contents of one array to another array.", "input": "let arr1 = [1,2,3];\nlet arr2 = [4,5,6];", "output": "let arr1 = [1,2,3];\nlet arr2 = [4,5,6];\narr2.push(...arr1);\n// arr2 is [4,5,6,1,2,3]", "category": "Python"}, {"instruction": "How can you generate a random array of 10 integers between 1 and 100?", "input": "", "output": "import random\n\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint(1,100))\n    return array", "category": "Python"}, {"instruction": "Suggest a completion for the following code which will print the sum of all digits in the given number.", "input": "num = 10121\ntotal = 0\nwhile num > 0:", "output": "num = 10121\ntotal = 0\nwhile num > 0:\n    digit = num%10\n    total += digit\n    num //= 10\nprint(total)", "category": "Python"}, {"instruction": "How can you print a string character by character in Python?", "input": "", "output": "def char_by_char(string):\n    for char in string:\n        print(char)", "category": "Python"}, {"instruction": "Write a SQL query to find the mean and median of all salaries of employees.", "input": "Table \"Employees\": \n\nName | Salary \n---- | ------ \nJohn | 20000  \nDavid| 32000  \nAnne | 15000  \nJane | 26000", "output": "SELECT AVG(Salary) as Mean,\nPERCENTILE_DISC(0.5) WITHIN GROUP(ORDER BY Salary) OVER() as Median\nFROM Employees", "category": "Python"}, {"instruction": "Write a script to delete elements that appear twice or more from a list.", "input": "[3,6,3,7,2,6]", "output": "def delete_duplicate(lst):\n    new_lst = [] \n    \n    for i in lst: \n        if i not in new_lst: \n            new_lst.append(i) \n  \n    return new_lst\n\nlst = [3,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nprint(new_lst)", "category": "Python"}, {"instruction": "Name a data structure to store a large set of strings efficiently.", "input": "", "output": "The best data structure to store a large set of strings efficiently is a hash table. A hash table uses a hash function to map a set of strings to unique indices in an array, which allows for constant time lookups and operations.", "category": "Python"}, {"instruction": "Create a variable that contains a tuple of integers.", "input": "", "output": "my_tuple = (1, 2, 3, 4, 5)", "category": "Python"}, {"instruction": "Write a function that takes a list as a parameter and returns only the unique elements in the given list.", "input": "[2, 4, 5, 2, 4, 8]", "output": "def get_unique_elements(lst):\n    return list(set(lst))\n\nunique_list = get_unique_elements([2, 4, 5, 2, 4, 8])\nprint(unique_list)   # output the list with only unique elements", "category": "Python"}, {"instruction": "Create a web page with the headline \"Welcome to Python programming\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to Python Programming</title>\n</head>\n<body>\n    <h1>Welcome to Python Programming</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Java program for binary search.", "input": "", "output": "public static int binarySearch(int[] arr, int target) { \n    int left = 0; \n    int right = arr.length - 1; \n    while (left <= right) { \n        int mid = left + (right - left)/2; \n        if (arr[mid] == target) { \n            return mid; \n        } else if (arr[mid] < target) { \n            left = mid + 1; \n        } else { \n            right = mid - 1; \n        } \n    } \n    return -1; \n}", "category": "Python"}, {"instruction": "Design an algorithm that prints all the permutations of a given string.", "input": "", "output": "def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms", "category": "Python"}, {"instruction": "Write a code snippet that prints out the number of times each character appears in a given string.", "input": "Given string = \"welcome\"", "output": "def char_frequency(string):\n    freq = {}\n    for c in string:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        print('{0} : {1}'.format(c, count))", "category": "Python"}, {"instruction": "Convert a given array of numbers into a square matrix.", "input": "Given array = [1, 2, 3, 4]", "output": "def arrayToMatrix(array):\n    n = int(len(array)**0.5)\n    matrix = []\n \n    for i in range(n):\n        matrix.append(array[i*n:(i+1)*n])\n \n    return matrix", "category": "Python"}, {"instruction": "Write a code to send a message \"Hello World!\" using the Twilio API.", "input": "", "output": "from twilio.rest import Client\n\n# Your Account SID from twilio.com/console\naccount_sid = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n# Your Auth Token from twilio.com/console\nauth_token  = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n    to=\"+123456789\", \n    from_=\"+0987654321\",\n    body=\"Hello World!\")\n\nprint(message.sid)   # Output the message id", "category": "Python"}, {"instruction": "What is the maximum depth of a binary tree of size n?", "input": "", "output": "The maximum depth of a binary tree of size n is log2(n).", "category": "Python"}, {"instruction": "Create a regular expression to match a valid phone number (ex. 123-456-7890).", "input": "", "output": "\\d{3}-\\d{3}-\\d{4}", "category": "Python"}, {"instruction": "Create a C++ program that finds the most common element in the given input array.", "input": "Given array = [2, 4, 8, 3, 4, 4, 6, 2, 4, 9]", "output": "#include <bits/stdc++.h>\n \nusing namespace std;\n \nint most_common(int arr[], int n) \n{ \n   unordered_map<int, int> hash; \n \n   // store the counts of all elements \n   for (int i = 0; i < n; i++) \n     hash[arr[i]]++; \n \n   // traverse through the map and \n   // find out the maximum frequency \n   int max = 0, res = -1; \n   for (auto i : hash) { \n     if (max < i.second) { \n       res = i.first; \n       max = i.second; \n     } \n   } \n \n   return res; \n}  \n \nint main() \n{ \n   int arr[] = { 2, 4, 8, 3, 4, 4, 6, 2, 4, 9 }; \n   int n = sizeof(arr) / sizeof(arr[0]); \n   cout << most_common(arr, n) << endl; \n   return 0;   \n}", "category": "Python"}, {"instruction": "Create an algorithm to find the longest substring of a given string with distinct characters.", "input": "Given string = \"abcabcabc\"", "output": "def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length", "category": "Python"}, {"instruction": "Design an algorithm to check for missing numbers in an array of size n.", "input": "", "output": "def find_missing(nums):\n    count = 1\n    for num in nums:\n        if not count in nums:\n            return count\n        count += 1\n    return None", "category": "Python"}, {"instruction": "Construct a loop to display each character in a string one at a time.", "input": "Hello World!", "output": "def display_char(s):\n    for char in s:\n        print(char)\n\ns = \"Hello World!\"\ndisplay_char(s)", "category": "Python"}, {"instruction": "Generate the following string from a list.", "input": "[1, 2, 3, 4]", "output": "def generate_string(lst):\n    s = \"\"\n    for i in lst:\n        s+=str(i)\n    return s\n\nlst = [1, 2, 3, 4]\ns = generate_string(lst)\nprint(s)", "category": "Python"}, {"instruction": "How can a string be encoded in base64?", "input": "", "output": "A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string.", "category": "Python"}, {"instruction": "Design a function for creating an array with n elements and each element with the value of 0.", "input": "", "output": "def createArray(n): \n    return [0] * n", "category": "Python"}, {"instruction": "What are the prerequisites for learning Python?", "input": "", "output": "The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc.", "category": "Python"}, {"instruction": "Given a binary tree, write a function to serialize and deserialize the tree.", "input": "", "output": "def serialize(root):\n    if not root:\n        return \"None\"\n \n    serializedTree = root.val\n \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n \ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n \n    def recur(q): \n        val = q.popleft()\n        if val == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n \n    return recur(q)", "category": "Python"}, {"instruction": "What is the Big O notation for a linear search?", "input": "", "output": "The Big O notation for a linear search is O(n), where n is the number of elements in the given list.", "category": "Python"}, {"instruction": "Write a code to delete the 4th element from the list.", "input": "mylist = [1, 2, 3, 4, 5]", "output": "mylist = [1, 2, 3, 4, 5]\ndel mylist[3]\nprint(mylist)", "category": "Python"}, {"instruction": "Suggest a better data structure that can be used to store a large amount of data in a way that querying data is fast.", "input": "", "output": "A better data structure to store a large amount of data in a way that querying is fast would be a Hash Table. Hash Tables store data in an associative array, allowing for fast searches and retrieval of data.", "category": "Python"}, {"instruction": "Suggest improvements to the following code to optimize its performance.", "input": "requests = []\nfor i in range(100000000):\n    requests.append(i)", "output": "requests = []\nfor i in range(100000000):\n    requests.append(i)\n\n# use list comprehension to generate the list in one line\nrequests = [i for i in range(100000000)]", "category": "Python"}, {"instruction": "Create a Python script that calculates the surface area of a cylinder.", "input": "", "output": "def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*radius*(radius + height)", "category": "Python"}, {"instruction": "Design a JavaScript function to filter out the prime numbers from an array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "function isPrime(n) {\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\nfunction primeFilter(array) {\n    let result = [];\n    for (let i = 0; i < array.length; i++) {\n        if (isPrime(array[i])) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Classify whether the following statement is an input or an output.", "input": "Print the sum of the two numbers.", "output": "Input", "category": "Python"}, {"instruction": "Write a CSS selector to select the horizontal navigation bar with ID \"nav-bar\".", "input": "", "output": "#navbar {\n  ...\n}", "category": "Python"}, {"instruction": "Use JavaScript and HTML to create a form with 3 input fields and a submit button.", "input": "", "output": "<html>\n<head>\n  <script>\n    // JavaScript code\n  </script>\n</head>\n\n<body>\n  <form>\n    <input type=\"text\" name=\"field1\" />\n    <input type=\"text\" name=\"field2\" />\n    <input type=\"text\" name=\"field3\" />\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Ask the assistant to print a multiplication table for the number 5.", "input": "", "output": "1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n10 x 5 = 50", "category": "Python"}, {"instruction": "Write a SQL query to count how many students are in each grade.", "input": "", "output": "SELECT grade, COUNT(*) FROM students GROUP BY grade;", "category": "Python"}, {"instruction": "Create a shell script to list all available printer models.", "input": "", "output": "#!/bin/bash\nlpr -P", "category": "Python"}, {"instruction": "Write a JSON parser to read the following data and output it in a 3-column table.", "input": "{\"name\": \"John Doe\", \"age\": 29, \"address\": \"123 Main Street\"}", "output": "name | age | address\n-----|-----|---------\nJohn Doe|29|123 Main Street", "category": "Python"}, {"instruction": "Suggest a data structure for storing a collection of countries and their corresponding population.", "input": "", "output": "A dictionary would be a suitable data structure to store a collection of countries and their corresponding population. The country name could be used as the key and the population could be used as the value. For example:\n\ncountries_population = {\n    'United States': 329_467_000,\n    'Canada': 36_323_167,\n    'China': 1_393_783_836,\n    'India': 1_380_004_385\n    }", "category": "Python"}, {"instruction": "Given two string, how would you find the longest common substring?", "input": "", "output": "The longest common substring can be found by traversing the two strings simultaneously and comparing the characters. If the characters match, we will increase the substring length by 1 and check for the next characters. In the case of a mismatch, the substring length is set back to 0. We will find the largest value of the substring length at the end of traversal and that value gives us the longest common substring.", "category": "Python"}, {"instruction": "Write a code to shuffle a list randomly in Python", "input": "", "output": "import random\n\nmy_list = [1, 2, 3, 4, 5]\n\nrandom.shuffle(my_list)\n\nprint(my_list)", "category": "Python"}, {"instruction": "Write a code to append a character at the start and end of a given string.", "input": "word = \"hello\"", "output": "word = \"hello\"\nword = '$' + word + '$'\nprint(word)", "category": "Python"}, {"instruction": "Determine the maximum number of nodes in a height-balanced binary tree of height h.", "input": "h = 4", "output": "The maximum number of nodes in a height-balanced binary tree of height 4 is 15. This can be determined by using the formula 2^(h+1) - 1.", "category": "Python"}, {"instruction": "What is the time complexity of inserting a value into a singly linked list?", "input": "", "output": "The time complexity of inserting a value into a singly linked list is O(1), as it is a constant time operation.", "category": "Python"}, {"instruction": "Suggest a method to convert a given array into a min-heap.", "input": "", "output": "Heapify is one of the methods to convert a given array into a min-heap. This process involves repeatedly swapping the root element with its smallest child (if it exists) to satisfy the min-heap property.", "category": "Python"}, {"instruction": "Write a Ruby script that converts a given number in degree Celsius to Fahrenheit.", "input": "52", "output": "celsius = 52\nfahrenheit = (celsius * 9/5) + 32\nputs \"The temperature in fahrenheit is #{fahrenheit} degrees\"", "category": "Python"}, {"instruction": "Write code to count the number of times a given pattern has occured in a given string.", "input": "Text: \u201cThis is a test string to practice coding. This string contains the pattern \u201cis\u201d", "output": "def countOccurrence(txt, pattern):\n  count = 0\n  for i in range(len(txt)):\n    if txt[i:i+len(pattern)] == pattern:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Implement a function to insert an element into a binary search tree.", "input": "tree = \n    5\n   / \\\n  2   8", "output": "def insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak", "category": "Python"}, {"instruction": "Write a C++ program to sort an array in ascending and descending order.", "input": "int arr[] = {2, 3, 1, 5, 4}", "output": "#include<iostream>\nusing namespace std;\n\n// Function to sort an array in ascending order\nvoid asc_sort(int arr[], int n)\n{\n    int temp;\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        if (arr[i] > arr[j]) {\n          temp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = temp;\n        }\n      }\n    }\n}\n\n// Function to sort an array in descending order\nvoid desc_sort(int arr[], int n)\n{\n    int temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          if (arr[i] < arr[j]) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n          }\n        }\n      }\n}\n\nint main()\n{\n    int arr[] = {2, 3, 1, 5, 4};\n    int n = 5;\n    asc_sort(arr, n);\n    cout << \"Array in Ascending Order: \";\n    for (int i=0; i<n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    desc_sort(arr, n);\n    cout << \"Array in Descending Order: \";\n    for (int i=0; i<n; i++)\n        cout << arr[i] << \" \";  \n    return 0;\n}\n\n# Output: \nArray in Ascending Order: 1 2 3 4 5 \nArray in Descending Order: 5 4 3 2 1", "category": "Python"}, {"instruction": "Create a Tableau script to retrieve data from an Amazon RDS instance.", "input": "", "output": "import pyodbc \nconn = pyodbc.connect(\n    DRIVER='Amazon Redshift ODBC Driver',\n    SERVER=<your instance URL>,\n    PORT=<port number>,\n    DATABASE=<database name>,\n    UID=<username>,\n    PWD=<password>)\ncursor = conn.cursor()\nquery = <your SQL query>\ncursor.execute(query) \ndata = cursor.fetchall() \nprint(data)", "category": "Python"}, {"instruction": "Generate a code to capitalize the first letter of each word of a given sentence.", "input": "text = \"This is a sample sentence.\"", "output": "def capitalize_first_letter(text):\n    words = text.split(' ')\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return ' '.join(capitalized_words)\n\ntext = \"This is a sample sentence.\"\ncapitalized_text = capitalize_first_letter(text)\nprint(capitalized_text) # Output: This Is A Sample Sentence.", "category": "Python"}, {"instruction": "Edit this HTML code to highlight odd rows of this table.", "input": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table>", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Identify the error in the code given below.", "input": "# Sum of elements in a list\n\nmy_list = [1, 2, 3]\n\nsum = 0\n\nfor i in range(my_list):\n    sum += i\n\nprint(sum)", "output": "The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead.", "category": "Python"}, {"instruction": "Generate a SQL query for finding the names of all employees in the company.", "input": "", "output": "SELECT name FROM Employee;", "category": "Python"}, {"instruction": "Modify the program to support calculating Fibonacci numbers up to the nth number.", "input": "", "output": "def FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series", "category": "Python"}, {"instruction": "Can you modify the program so that it prints out all words in the sentence along with their count?", "input": "\"The quick brown fox jumped over the lazy dog.\"", "output": "def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  \n  for word in words:\n    if word not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  \n  for word, count in word_count.items():\n    print(\"Word: %s  Count: %d\" % (word, count))", "category": "Python"}, {"instruction": "Change the following code to reduce its running time", "input": "for i in range(0, len(nums)):\n    if nums[i] == target:\n        return i", "output": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)", "category": "Python"}, {"instruction": "Understand the parameters used in the following code and explain their purpose.", "input": "def doSomething(x, y, z): \n    pass", "output": "The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively.", "category": "Python"}, {"instruction": "Change the following code to make it easier to read", "input": "a=3;b='aa';b*=a;print(b)", "output": "a = 3\nb = 'aa'\nb = b * a\nprint(b)", "category": "Python"}, {"instruction": "Modify the following code to return the product of all numbers in a given list.", "input": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result = result * x\n    # Return the result\n    return result", "output": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result *= x\n    # Return the result\n    return result", "category": "Python"}, {"instruction": "How would you parse a URL into its individual components?", "input": "", "output": "A URL can be parsed into its individual components by using string manipulation and built-in methods such as ``split()`` and ``replace()``. The components generally include the protocol, host name, path, query string and fragment.", "category": "Python"}, {"instruction": "Generate a program to reverse a string and remove all the white spaces from the string.", "input": "\"  The  quick  brown  fox  jumped  over  the  lazy  dog.  \"", "output": "def reverse_and_trim(s): \n    s = s.strip() \n    s = s.replace(\" \", \"\") \n    return s[::-1]", "category": "Python"}, {"instruction": "You need to read a text and detect if the sentence contains any curse words or not. Output true if there is a curse word, output false if there is not.", "input": "When I saw the movie, I was so angry that I wanted to scream.", "output": "false", "category": "Python"}, {"instruction": "Explain the use of *args and **kwargs in Python.", "input": "", "output": "*args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments.", "category": "Python"}, {"instruction": "Write a regular expression to extract the city names from the following string.", "input": "address: #38 number street, new york city, san jose, CA", "output": "import re\n\naddress_string = \"#38 number street, new york city, san jose, CA\"\n\npattern = r'(?:,|^)([\\s\\w]*)(?:,|$)'\n\nresult = re.findall(pattern, address_string)\nprint(result) // ['new york city', 'san jose']", "category": "Python"}, {"instruction": "Create a binary heap sort algorithm in Java.", "input": "", "output": "public class Heapsort { \n    public void sort(int arr[]) \n    { \n        int n = arr.length; \n  \n        // Build heap (rearrange array) \n        for (int i = n / 2 - 1; i >= 0; i--) \n            heapify(arr, n, i); \n  \n        // One by one extract an element from heap \n        for (int i=n-1; i>=0; i--) \n        { \n            // Move current root to end \n            int temp = arr[0]; \n            arr[0] = arr[i]; \n            arr[i] = temp; \n  \n            // call max heapify on the reduced heap \n            heapify(arr, i, 0); \n        } \n    } \n  \n    // To heapify a subtree rooted with node i which is \n    // an index in arr[]. n is size of heap \n    void heapify(int arr[], int n, int i) \n    { \n        int largest = i; // Initialize largest as root \n        int l = 2*i + 1; // left = 2*i + 1 \n        int r = 2*i + 2; // right = 2*i + 2 \n  \n        // If left child is larger than root \n        if (l < n && arr[l] > arr[largest]) \n            largest = l; \n  \n        // If right child is larger than largest so far \n        if (r < n && arr[r] > arr[largest]) \n            largest = r; \n  \n        // If largest is not root \n        if (largest != i) \n        { \n            int swap = arr[i]; \n            arr[i] = arr[largest]; \n            arr[largest] = swap; \n  \n            // Recursively heapify the affected sub-tree \n            heapify(arr, n, largest); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a class that prints out the following message: \"Welcome to the world of programming!\"", "input": "", "output": "class WelcomeMessage:\n    def __init__(self):\n        print(\"Welcome to the world of programming!\")", "category": "Python"}, {"instruction": "Suggest a way to create a linked list in python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node", "category": "Python"}, {"instruction": "Create a function to generate Fibonacci numbers less than 100.", "input": "", "output": "def generateFibonacci(num):\n    a = 0\n    b = 1\n    fib_sequence = []\n    while a < num:\n        fib_sequence.append(a)\n        a, b = b, a + b\n    return fib_sequence", "category": "Python"}, {"instruction": "In JavaScript, create a function that returns the length of a string.", "input": "", "output": "function stringLength(str){\n    return str.length;\n}", "category": "Python"}, {"instruction": "Create a function to check whether a given value is in an array.", "input": "arr = [1,2,3,4]\nx = 2", "output": "def is_value_in_arr(arr, x):\n    if x in arr:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a function to generate random numbers from 0-99.", "input": "", "output": "import random\n\ndef random_number():\n    return random.randint(0,99)", "category": "Python"}, {"instruction": "Create a list of 20 words ordered alphabetically in HTML.", "input": "", "output": "<ul>\n  <li>Apples</li>\n  <li>Bananas</li>\n  <li>Cherries</li>\n  <li>Dates</li>\n  <li>Eggplants</li>\n  <li>Figs</li>\n  <li>Grapes</li>\n  <li>Honeydews</li>\n  <li>Ice cream</li>\n  <li>Jelly beans</li>\n  <li>Kiwis</li>\n  <li>Lemons</li>\n  <li>Mangoes</li>\n  <li>Nectarine</li>\n  <li>Oranges</li>\n  <li>Pears</li>\n  <li>Quinces</li>\n  <li>Raspberries</li>\n  <li>Strawberries</li>\n  <li>Tangerines</li>\n</ul>", "category": "Python"}, {"instruction": "Write an HTML code snippet to create an email link for \"support@example.com\"", "input": "", "output": "<a href=\"mailto:support@example.com\">support@example.com</a>", "category": "Python"}, {"instruction": "Write a SQL query for finding the customers with orders of total price of more than $100.", "input": "", "output": "SELECT customers.name \nFROM customers\nJOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.id\nHAVING SUM(orders.price) > 100;", "category": "Python"}, {"instruction": "Write a TypeScript script to sort an array of names in alphabetical order.", "input": "The following array of names: [\"John\", \"James\", \"Karl\", \"Jane\", \"Jill\"]", "output": "let sortArrayByName = (array: string[]) => {\n  array.sort(function (x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  });\n  return array;\n};\n\nlet names = [\"John\", \"James\", \"Karl\", \"Jane\", \"Jill\"];\n\nsortArrayByName(names);\nconsole.log(names);", "category": "Python"}, {"instruction": "Create a React component for a Postcard element to display on a webpage.", "input": "The postcard should contain a paragraph element containing the text \"Hello from Paris!\", an image of the Eiffel Tower, and a \"Return to Homepage\" button below the image.", "output": "import React from 'react';\n\nfunction Postcard() {\n  return (\n    <div>\n      <p>Hello from Paris!</p>\n      <img src=\"eiffel-tower.jpg\" alt=\"Eiffel Tower\" />\n      <button type=\"button\">Return to Homepage</button>\n    </div>\n  )\n}\n\nexport default Postcard;", "category": "Python"}, {"instruction": "Given a JavaScript object, how can you remove a key from the object?", "input": "", "output": "delete object[\"key\"];", "category": "Python"}, {"instruction": "Write a SQL query that returns the number of orders shipped on each day.", "input": "SELECT * FROM ORDERS", "output": "SELECT ShippedDate, COUNT(*) FROM ORDERS GROUP BY ShippedDate;", "category": "Python"}, {"instruction": "Create a PHP class with three protected fields \"User Name\", \"Password\", and \"Email\"", "input": "", "output": "class User {\n\n protected $username;\n protected $password;\n protected $email;\n\n}", "category": "Python"}, {"instruction": "How would you create an API endpoint that returns a list of users?", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\n@app.route(\"/users\", methods=(\"GET\",))\ndef get_users():\n    users = [\n        {\"name\": \"John Smith\", \"age\": 45},\n        {\"name\": \"Tim Jones\", \"age\": 34},\n        {\"name\": \"Alice Jackson\", \"age\": 24}\n    ]\n    return flask.jsonify(users)", "category": "Python"}, {"instruction": "Write code to output the sum of the numbers 1-100.", "input": "", "output": "def sum_nums(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n\nprint(sum_nums(100))", "category": "Python"}, {"instruction": "Write a script that inputs a list and converts the list of strings into a dictionary.", "input": "list = [\"ABC\", \"XYZ\", \"PQR\"]", "output": "dict = {\n     \"ABC\": \"ABC\", \n     \"XYZ\": \"XYZ\", \n     \"PQR\": \"PQR\"}", "category": "Python"}, {"instruction": "Generate a link of the page given below.", "input": "Page URL: www.example.com/product/apple", "output": "<a href=\"www.example.com/product/apple\">www.example.com/product/apple</a>", "category": "Python"}, {"instruction": "Explain how to calculate the mean value of a function defined from 0 to infinity.", "input": "", "output": "The mean value of a function can be calculated by integrating the function from 0 to infinity and dividing the integral by infinity. Mathematically, this is expressed as:\n\nmean = \u222b\u221e0f(x)dx/\u221e", "category": "Python"}, {"instruction": "Write code to remove duplicates and maintain the order of elements in a given list.", "input": "list = [3, 1, 7, 5, 3, 8, 7]", "output": "def remove_duplicates(list): \n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list\n\nprint(remove_duplicates(list))", "category": "Python"}, {"instruction": "Create a function that prints the binary representation of a number.", "input": "number = 5", "output": "def print_binary(number): \n    binary_string = \"\"\n    while number != 0: \n        remainder = number % 2\n        binary_string = str(remainder) + binary_string\n        number = number // 2\n    return binary_string \n\nprint(print_binary(number))", "category": "Python"}, {"instruction": "Given an input of numbers, sort the numbers in descending order.", "input": "arr = [6, 2, 5, 3, 9]", "output": "def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\nprint(sort_numbers_desc(arr))", "category": "Python"}, {"instruction": "Write a function to merge two sorted lists into one sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 4, 6]", "output": "def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a code to print the largest element of an array if the array contains all negative numbers.", "input": "arr = [-10, -20, -50, -30]", "output": "def largest_negative_number(arr): \n    largest = float('-inf')\n    for i in range(len(arr)): \n        if arr[i] > largest: \n            largest = arr[i] \n    return largest \n  \n# Driver Code \narr = [-10, -20, -50, -30] \n  \nprint(largest_negative_number(arr))", "category": "Python"}, {"instruction": "Compute the sum of a given array using a Python function.", "input": "arr = [1, 2, 3, 4]", "output": "def compute_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(compute_sum(arr))\n\nOutput:\n10", "category": "Python"}, {"instruction": "Suggest a better algorithm than Bubble sort for sorting a large array.", "input": "", "output": "Merge sort is an efficient sorting algorithm that uses divide and conquer approach. It divides the array into two halves, recursively sorts them and then merges them. Merge sort has a time complexity of O(nlog(n)) and is efficient for large arrays.", "category": "Python"}, {"instruction": "Using HTML and CSS, create a web page that lists all of the fruits in the given array.", "input": "fruits = [\"apple\", \"orange\", \"banana\", \"pear\", \"mango\"]", "output": "<html>\n<head>\n  <title>Fruit List</title>\n</head>\n<body> \n  <ul>\n    <li>Apple</li>\n    <li>Orange</li>\n    <li>Banana</li>\n    <li>Pear</li>\n    <li>Mango</li>\n  </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "You are given a text and the task is to output each individual word in the text along with its character count.", "input": "Text: How are you doing?", "output": "How: 3\nare: 3\nyou: 3\ndoing: 6\n? :1", "category": "Python"}, {"instruction": "Write an SQL query that updates the 'price' field for all documents in the collection to 200.", "input": "", "output": "UPDATE collection SET price = 200;", "category": "Python"}, {"instruction": "Create a C program that prints all distinct combinations of characters from two given strings.", "input": "Strings: ab and cd", "output": "#include <stdio.h>\n#include <string.h>\n\nint main(){\n  char str1[] = \"ab\";\n  char str2[] = \"cd\";\n  int i, j;\n  for(i=0; i<strlen(str1); i++){\n    for(j=0; j<strlen(str2); j++){\n      printf(\"%c%c \", str1[i], str2[j]);\n    }\n  }\n  printf(\"\\n\");\n  return 0;\n}\n\nOutput:\nac ad bc bd", "category": "Python"}, {"instruction": "Create a MongoDB query that retrieves all the documents whose 'name' field contains the given string.", "input": "String: Hi", "output": "db.collection.find({name: /.*Hi.*/})", "category": "Python"}, {"instruction": "Write a Python function that generates a key-value pair for the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}", "category": "Python"}, {"instruction": "Create an HTML structure that mimics the mockup given below.\n\nMockup: \n\nheader\n| ____ \n|     |\n|     |\n|     |\n|     |\n|-----|", "input": "", "output": "<header>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n</header>", "category": "Python"}, {"instruction": "Extract all instances of a specific word in the given text.", "input": "Text: The quick brown fox jumps over the lazy dog.\nWord: j", "output": "[\"jump\", \"jumps\"]", "category": "Python"}, {"instruction": "Create a function in Java that takes in an array of numbers and calculates the sum of the elements.", "input": "[1, 2, 3, 4, 5]", "output": "public class Sum {\n \n  public static int getSum(int[] arr) {\n  \n    int sum = 0;\n    for(int i=0; i < arr.length; i++)\n        sum += arr[i];\n    return sum;\n  }\n}", "category": "Python"}, {"instruction": "You have to read a set of numbers and report the number of positive numbers.", "input": "[-1, -43, 2, 6, 0, 18]", "output": "int count_positive(int arr[], int size) \n{ \n  \n    int count = 0; \n    for (int i = 0; i < size; i++) \n        if (arr[i] > 0) \n            count++; \n  \n    return count; \n} \n\nint arr[] = {-1,-43,2,6,0,18}; \nint n = sizeof(arr)/sizeof(arr[0]); \ncount_positive(arr, n);", "category": "Python"}, {"instruction": "Generate random numbers 0 to 1000.", "input": "", "output": "import random\n\nfor i in range(10):\n    print(random.randint(0, 1000))", "category": "Python"}, {"instruction": "Given the following HTML code, write a CSS rule to change the font size to 12px.", "input": "<p class=\u201dtext\u201d>Test</p>", "output": ".text {\n  font-size: 12px;\n}", "category": "Python"}, {"instruction": "Create a Python class for a car with two methods.", "input": "", "output": "class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n    \n    def start(self):\n        print(\"Starting car\")\n\n    def stop(self):\n        print(\"Stopping car\")", "category": "Python"}, {"instruction": "Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string.", "input": "my_string = 'This is (a sample) string with (parentheses)'", "output": "import re\n\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(r'\\([^)]*\\)', '', my_string)\nprint(op)", "category": "Python"}, {"instruction": "Edit the program such that it prints the elements in a deck of cards in a specific format.", "input": "", "output": "# Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))", "category": "Python"}, {"instruction": "Design a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.", "input": "Input Array: [1, 6, 5, 11, 3]", "output": "def min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)", "category": "Python"}, {"instruction": "Construct a function convert a given number to binary format.", "input": "Input Number: 15", "output": "def convert_to_binary(num):\n    binary = \"{0:b}\".format(num)\n    return binary\n \n# Convert 15 to binary\nbinary_value = convert_to_binary(15)\nprint(binary_value) # prints \"1111\"", "category": "Python"}, {"instruction": "Rewrite this SQL query to select the top three records from a table named 'sales'.", "input": "SELECT * FROM sales", "output": "SELECT * FROM sales ORDER BY id DESC LIMIT 3", "category": "Python"}, {"instruction": "Construct a C# program to display Fibonacci series.", "input": "", "output": "using System;\n\nclass Fibonacci\n{\n    static void Main()\n    {\n        int n1 = 0, n2 = 1, n3, i, number;\n \n        Console.Write(\"Enter the number of elements: \");\n        number = int.Parse(Console.ReadLine());\n \n        Console.Write(n1 + \" \" + n2 + \" \"); \n \n        for (i = 2; i < number; ++i) \n        {\n            n3 = n1 + n2;\n            Console.Write(n3 + \" \");\n            n1 = n2;\n            n2 = n3;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Describe in code what is supervised learning.", "input": "", "output": "Supervised learning is a type of machine learning that uses labeled data to train algorithms to predict outcomes. It involves using labeled data points as input and output to teach the machine how to predict outcomes. The algorithm is \u201csupervised\u201d because it has a pre-defined set of examples to learn from, making it easier to predict future outcomes.", "category": "Python"}, {"instruction": "Create a for loop in Python to iterate over all items in a list.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "for item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Find the longest substring with non-repeating characters", "input": "", "output": "def longest_substring(string):\n    # Initialize the max length and the substring\n    max_length = 0\n    substring = ''\n\n    # Create an empty set to store previously seen characters\n    char_set = set()\n\n    # Iterate over the string\n    for char in string:\n        # If the character hasn't already been seen,\n        if char not in char_set:\n            # add it to the set\n            char_set.add(char)\n            # and extend the substring\n            substring += char\n        else:\n            # if the character has already been seen\n            # check whether the current substring is longer than the current max length\n            if len(substring) > max_length:\n                max_length = len(substring)\n            # Clear the set and the substring\n            char_set.clear()\n            substring = ''\n\n    # Check the last substring\n    if len(substring) > max_length:\n        max_length = len(substring)\n    \n    return max_length", "category": "Python"}, {"instruction": "Design and implement a function that takes two lists of integers as parameters and returns the minimum difference between two elements of the two lists.", "input": "list1 = [2, 4, 7, 13] \nlist2 = [3, 8, 9, 14]", "output": "def min_difference(list1, list2):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    for a in list1:\n        for b in list2:\n            # Update min_diff only if the difference \n            # between a and b is smaller than min_diff \n            min_diff = min(min_diff, abs(a - b))\n    \n    return min_diff", "category": "Python"}, {"instruction": "What type of complexity will the following two sorting algorithms have?", "input": "selection sort: O(n^2) \nbubble sort: O(n^2)", "output": "The selection sort algorithm will have a complexity of O(n^2). The bubble sort algorithm will also have a complexity of O(n^2).", "category": "Python"}, {"instruction": "Edit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.", "input": "var number = 5\ndef even_odd(number):\n  #TODO", "output": "def even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Update the code to return a different string depending on the value of the variable test", "input": "var test = 3\ndef change(test):\n  #TODO", "output": "def change(test):\n    if test==1:\n        return \"One\"\n    elif test==2:\n        return \"Two\"\n    elif test==3:\n        return \"Three\"\n    else:\n        return \"Not Found\"", "category": "Python"}, {"instruction": "Create a SQL query that combines two tables ``A`` and ``B``.", "input": "Table A\nid   name\n1    car\n2    bike\n\nTable B\nid  owner\n1    Sam\n2    John", "output": "SELECT A.id, A.name,B.owner \nFROM A JOIN B\nON A.id = B.id;", "category": "Python"}, {"instruction": "Write a loop in Python to find all numbers below 100 that are divisible by 7.", "input": "", "output": "for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")", "category": "Python"}]
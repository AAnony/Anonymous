[{"instruction": "def _pval_from_bootci(boot, estimate):\n    \"\"\"Compute p-value from bootstrap distribution.\n    Similar to the pval function in the R package mediation.\n    Note that this is less accurate than a permutation test because the\n    bootstrap distribution is not conditioned on a true null hypothesis.\n    \"\"\"\n", "input": "", "output": "    if estimate == 0:\n        out = 1\n    else:\n        out = 2 * min(sum(boot > 0), sum(boot < 0)) / len(boot)\n    return min(out, 1)"}, {"instruction": "def _maxlength(X):\n    \"\"\" Returns the maximum length of signal trajectories X \"\"\"\n", "input": "", "output": "    N = 0\n    for x in X:\n        if len(x) > N:\n            N = len(x)\n    return N"}, {"instruction": "def get_scraperclasses():\n    \"\"\"Find all comic scraper classes in the plugins directory.\n    The result is cached.\n    @return: list of Scraper classes\n    @rtype: list of Scraper\n    \"\"\"\n", "input": "", "output": "    global _scraperclasses\n    if _scraperclasses is None:\n        out.debug(u\"Loading comic modules...\")\n        modules = loader.get_modules('plugins')\n        plugins = loader.get_plugins(modules, Scraper)\n        _scraperclasses = list(plugins)\n        check_scrapers()\n        out.debug(u\"... %d modules loaded.\" % len(_scraperclasses))\n    return _scraperclasses"}, {"instruction": "def get_ip_info(ip: str, exceptions: bool=False, timeout: int=10) -> tuple:\n    \"\"\"\n    Returns (ip, country_code, host) tuple of the IP address.\n    :param ip: IP address\n    :param exceptions: Raise Exception or not\n    :param timeout: Timeout in seconds. Note that timeout only affects geo IP part, not getting host name.\n    :return: (ip, country_code, host)\n    \"\"\"\n", "input": "", "output": "    import traceback\n    import socket\n    if not ip:  # localhost\n        return None, '', ''\n    host = ''\n    country_code = get_geo_ip(ip, exceptions=exceptions, timeout=timeout).get('country_code', '')\n    try:\n        res = socket.gethostbyaddr(ip)\n        host = res[0][:255] if ip else ''\n    except Exception as e:\n        msg = 'socket.gethostbyaddr({}) failed: {}'.format(ip, traceback.format_exc())\n        logger.error(msg)\n        if exceptions:\n            raise e\n    return ip, country_code, host"}, {"instruction": "def get_as_list(self, tag_name):\n        \"\"\"\n        Return the value of a tag, making sure that it's a list.  Absent\n        tags are returned as an empty-list; single tags are returned as a\n        one-element list.\n\n        The returned list is a copy, and modifications do not affect the\n        original object.\n        \"\"\"\n", "input": "", "output": "        val = self.get(tag_name, [])\n        if isinstance(val, list):\n            return val[:]\n        else:\n            return [val]"}, {"instruction": "def transcript_sequence(self, transcript_id):\n        \"\"\"Return cDNA nucleotide sequence of transcript, or None if\n        transcript doesn't have cDNA sequence.\n        \"\"\"\n", "input": "", "output": "        if self.transcript_sequences is None:\n            raise ValueError(\n                \"No transcript FASTA supplied to this Genome: %s\" % self)\n        return self.transcript_sequences.get(transcript_id)"}, {"instruction": "def export_project(self):\n        \"\"\" Processes misc options specific for GCC ARM, and run generator. \"\"\"\n", "input": "", "output": "        output = copy.deepcopy(self.generated_project)\n        self.process_data_for_makefile(self.workspace)\n        self._fix_sublime_paths(self.workspace)\n        self.workspace['linker_options'] =[]\n\n        output['path'], output['files']['makefile'] = self.gen_file_jinja('makefile_gcc.tmpl', self.workspace, 'Makefile', self.workspace['output_dir']['path'])\n\n        self.workspace['buildsys_name'] = 'Make'\n        self.workspace['buildsys_cmd'] = 'make all'\n\n        path, output['files']['sublimetext'] = self.gen_file_jinja(\n            'sublimetext.sublime-project.tmpl', self.workspace, '%s.sublime-project' % self.workspace['name'], self.workspace['output_dir']['path'])\n        generated_projects = output\n        return generated_projects"}, {"instruction": "def newFile(self, *path):\n        \"\"\"\n        Open a new file somewhere in this Store's file area.\n\n        @param path: a sequence of path segments.\n\n        @return: an L{AtomicFile}.\n        \"\"\"\n", "input": "", "output": "        assert len(path) > 0, \"newFile requires a nonzero number of segments\"\n        if self.dbdir is None:\n            if self.filesdir is None:\n                raise RuntimeError(\"This in-memory store has no file directory\")\n            else:\n                tmpbase = self.filesdir\n        else:\n            tmpbase = self.dbdir\n        tmpname = tmpbase.child('temp').child(str(tempCounter.next()) + \".tmp\")\n        return AtomicFile(tmpname.path, self.newFilePath(*path))"}, {"instruction": "def set_timezone(self, request, org):\n        \"\"\"Set the current timezone from the org configuration.\"\"\"\n", "input": "", "output": "        if org and org.timezone:\n            timezone.activate(org.timezone)"}, {"instruction": "def download(odir: Path, source_url: str, irng: Sequence[int]):\n    \"\"\"Download star index files.\n    The default range was useful for my cameras.\n    \"\"\"\n", "input": "", "output": "    assert len(irng) == 2, 'specify start, stop indices'\n\n    odir = Path(odir).expanduser()\n    odir.mkdir(parents=True, exist_ok=True)\n\n    ri = int(source_url.split('/')[-2][:2])\n\n    for i in range(*irng):\n        fn = f'index-{ri:2d}{i:02d}.fits'\n        url = f'{source_url}{fn}'\n        ofn = odir / fn\n        if ofn.is_file():  # no clobber\n            print('skipping', ofn)\n            continue\n        print(f'{url} => {ofn}', end='\\r')\n\n        urlretrieve(url, ofn)"}, {"instruction": "def signout(self, redirect_url = \"/\"):\r\n        \"\"\"\r\n            \u6ce8\u9500\u767b\u5f55\u72b6\u6001\r\n\r\n            \u53c2\u6570:\r\n                redirect_url    \u8df3\u8f6c\u94fe\u63a5\uff0c\u4e3a None \u65f6\u4e0d\u8df3\u8f6c (Ajax \u53ef\u80fd\u7528\u5f97\u5230)\u3002\r\n        \"\"\"\n", "input": "", "output": "        self.clear_cookie(self._USER_NAME)\r\n        if redirect_url: self.redirect(redirect_url)"}, {"instruction": "def _is_leonardo_module(whatever):\n    '''check if is leonardo module'''\n", "input": "", "output": "\n    # check if is python module\n    if hasattr(whatever, 'default') \\\n            or hasattr(whatever, 'leonardo_module_conf'):\n        return True\n\n    # check if is python object\n    for key in dir(whatever):\n        if 'LEONARDO' in key:\n            return True"}, {"instruction": "def fill_auth_list_from_groups(self, auth_provider, user_groups, auth_list):\n        '''\n        Returns a list of authorisation matchers that a user is eligible for.\n        This list is a combination of the provided personal matchers plus the\n        matchers of any group the user is in.\n        '''\n", "input": "", "output": "        group_names = [item for item in auth_provider if item.endswith('%')]\n        if group_names:\n            for group_name in group_names:\n                if group_name.rstrip(\"%\") in user_groups:\n                    for matcher in auth_provider[group_name]:\n                        auth_list.append(matcher)\n        return auth_list"}, {"instruction": "def make_workspace(measurement, channel=None, name=None, silence=False):\n    \"\"\"\n    Create a workspace containing the model for a measurement\n\n    If `channel` is None then include all channels in the model\n\n    If `silence` is True, then silence HistFactory's output on\n    stdout and stderr.\n    \"\"\"\n", "input": "", "output": "    context = silence_sout_serr if silence else do_nothing\n    with context():\n        hist2workspace = ROOT.RooStats.HistFactory.HistoToWorkspaceFactoryFast(\n            measurement)\n        if channel is not None:\n            workspace = hist2workspace.MakeSingleChannelModel(\n                measurement, channel)\n        else:\n            workspace = hist2workspace.MakeCombinedModel(measurement)\n    workspace = asrootpy(workspace)\n    keepalive(workspace, measurement)\n    if name is not None:\n        workspace.SetName('workspace_{0}'.format(name))\n    return workspace"}, {"instruction": "def get(self,table, sys_id):\n        \"\"\"\n        get a single record by table name and sys_id\n        returns a dict (the json map) for python 3.4\n        \"\"\"\n", "input": "", "output": "        result = self.table_api_get(table, sys_id)\n        return self.to_record(result, table)"}, {"instruction": "def try_imports(imports, fail_msg=None):\n    \"\"\"\n    Try import statements until one succeeds.\n\n    Parameters\n    ----------\n    imports : list\n        The list of import statements.\n    fail_msg : str\n        If not None and no statement succeeds, a `ValueError` is raised with\n        the given message, appended to all failed messages.\n\n    Returns\n    -------\n    locals : dict\n        The dictionary of imported modules.\n    \"\"\"\n", "input": "", "output": "    msgs = []\n    for imp in imports:\n        try:\n            exec imp\n            break\n\n        except Exception, inst:\n            msgs.append(str(inst))\n\n    else:\n        if fail_msg is not None:\n            msgs.append(fail_msg)\n            raise ValueError('\\n'.join(msgs))\n\n    return locals()"}, {"instruction": "def get_all(cls, names):\n        \"\"\"\n        Return all queues for the given names (for all available priorities)\n        \"\"\"\n", "input": "", "output": "        names = cls._get_iterable_for_names(names)\n\n        queues = []\n        for queue_name in names:\n            queues.extend(cls.collection(name=queue_name).instances())\n\n        return queues"}, {"instruction": "def _title_uptodate(self,fullfile,pid,_title):\n        \"\"\"Check fb photo title against provided title,\n        returns true if they match\"\"\"\n", "input": "", "output": "        i=self.fb.get_object(pid)\n        if i.has_key('name'):\n            if _title == i['name']:\n                return True\n\n        return False"}, {"instruction": "def copy_table(from_table, name):\n    \"\"\"\n    Copy a table.\n\n    Based on `Table.tometadata`, but simplified to remove constraints and indexes.\n\n    \"\"\"\n", "input": "", "output": "    metadata = from_table.metadata\n\n    if name in metadata.tables:\n        return metadata.tables[name]\n\n    schema = metadata.schema\n\n    columns = [\n        copy_column(column, schema)\n        for column in from_table.columns\n        if should_copy(column)\n    ]\n\n    return Table(\n        name,\n        metadata,\n        schema=schema,\n        comment=from_table.comment,\n        *columns,\n        **from_table.kwargs,\n    )"}, {"instruction": "def newNsPropEatName(self, ns, name, value):\n        \"\"\"Create a new property tagged with a namespace and carried\n           by a node. \"\"\"\n", "input": "", "output": "        if ns is None: ns__o = None\n        else: ns__o = ns._o\n        ret = libxml2mod.xmlNewNsPropEatName(self._o, ns__o, name, value)\n        if ret is None:raise treeError('xmlNewNsPropEatName() failed')\n        __tmp = xmlAttr(_obj=ret)\n        return __tmp"}, {"instruction": "def process_tree_files(tree):\n    \"\"\" process_tree_files: Download files from nodes\n        Args:\n            tree (ChannelManager): manager to handle communication to Kolibri Studio\n        Returns: None\n    \"\"\"\n", "input": "", "output": "    # Fill in values necessary for next steps\n    config.LOGGER.info(\"Processing content...\")\n    files_to_diff = tree.process_tree(tree.channel)\n    config.SUSHI_BAR_CLIENT.report_statistics(files_to_diff, topic_count=tree.channel.get_topic_count())\n    tree.check_for_files_failed()\n    return files_to_diff, config.FAILED_FILES"}, {"instruction": "def store_integers(items, allow_zero=True):\n    \"\"\"Store integers from the given list in a storage.\n\n    This is an example function to show autodoc style.\n\n    Return :class:`Storage` instance with integers from the given list.\n\n    Examples::\n\n        >>> storage = store_integers([1, 'foo', 2, 'bar', 0])\n        >>> storage.items\n        [1, 2, 0]\n        >>> storage = store_integers([1, 'foo', 2, 'bar', 0], allow_zero=False)\n        >>> storage.items\n        [1, 2]\n\n    :param items:\n        List of objects of any type, only :class:`int` instances will be\n        stored.\n    :param allow_zero:\n        Boolean -- if ``False``, ``0`` integers will be skipped.\n        Defaults to ``True``.\n\n    \"\"\"\n", "input": "", "output": "    ints = [x for x in items if isinstance(x, int) and (allow_zero or x != 0)]\n    storage = Storage(ints)\n    return storage"}, {"instruction": "def fast_hash(self):\n        \"\"\"\n        Get a CRC32 or xxhash.xxh64 reflecting the DataStore.\n\n        Returns\n        ------------\n        hashed: int, checksum of data\n        \"\"\"\n", "input": "", "output": "        fast = sum(i.fast_hash() for i in self.data.values())\n        return fast"}, {"instruction": "def get_user_bookmarks(self, id, **data):\n        \"\"\"\n        GET /users/:id/bookmarks/\n        Gets all the user's saved events.\n        In order to update the saved events list, the user must unsave or save each event.\n        A user is authorized to only see his/her saved events.\n        \"\"\"\n", "input": "", "output": "        \n        return self.get(\"/users/{0}/bookmarks/\".format(id), data=data)"}, {"instruction": "def loadtxt(fn, **kwargs):\n    \"\"\"Study the text data file fn. Call numpys loadtxt with keyword\n    arguments based on the study.\n\n    Return data returned from numpy `loadtxt <http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html#numpy-loadtxt>`.\n\n    kwargs: keyword arguments accepted by numpys loadtxt. Any keyword\n    arguments provided will take precedence over the ones resulting\n    from the study.\n\n    Set the module attribute PP to the instance of PatternPull used.\n\n    \"\"\"\n", "input": "", "output": "    global PP\n    PP = PatternPull(fn)\n    txtargs = PP.loadtxtargs()\n    txtargs.update(kwargs)      # Let kwargs dominate.\n    return np.loadtxt(fn, **txtargs)"}, {"instruction": "def session_to_hour(timestamp):\n    \"\"\":param timestamp: as string in YYYYMMDDHHmmSS format\n    :return string in YYYYMMDDHH format\"\"\"\n", "input": "", "output": "    t = datetime.strptime(timestamp, SYNERGY_SESSION_PATTERN)\n    return t.strftime(SYNERGY_HOURLY_PATTERN)"}, {"instruction": "def get_condition(self, condition_id):\n        \"\"\"Retrieve the condition for a condition_id.\n\n        :param condition_id: id of the condition, str\n        :return:\n        \"\"\"\n", "input": "", "output": "        condition = self.contract_concise.getCondition(condition_id)\n        if condition and len(condition) == 7:\n            return ConditionValues(*condition)\n\n        return None"}, {"instruction": "def visitIgnoreDirective(self, ctx: jsgParser.IgnoreDirectiveContext):\n        \"\"\" directive: '.IGNORE' name* SEMI \"\"\"\n", "input": "", "output": "        for name in as_tokens(ctx.name()):\n            self._context.directives.append('_CONTEXT.IGNORE.append(\"{}\")'.format(name))"}, {"instruction": "def sub(self, key):\n        \"\"\"Returns new Vyper instance representing a sub tree of this instance.\n        \"\"\"\n", "input": "", "output": "        subv = Vyper()\n        data = self.get(key)\n        if isinstance(data, dict):\n            subv._config = data\n            return subv\n        else:\n            return None"}, {"instruction": "def go_from(self, vertex):\n        \"\"\"\n        Tell the edge to go out from this vertex.\n\n        Args:\n            vertex (Vertex): vertex to go from.\n        \"\"\"\n", "input": "", "output": "        if self.vertex_out:\n            self.vertex_out.edges_out.remove(self)\n        self.vertex_out = vertex\n        vertex.edges_out.add(self)"}, {"instruction": "def info(self):\n        \"\"\"return info about configuration\"\"\"\n", "input": "", "output": "        uri = ','.join(x['hostname'] for x in self.routers)\n        mongodb_uri = 'mongodb://' + uri\n        result = {'id': self.id,\n                  'shards': self.members,\n                  'configsvrs': self.configsvrs,\n                  'routers': self.routers,\n                  'mongodb_uri': mongodb_uri,\n                  'orchestration': 'sharded_clusters'}\n        if self.login:\n            result['mongodb_auth_uri'] = self.mongodb_auth_uri(uri)\n        return result"}, {"instruction": "def search(self, keyword, p_index=''):\n        '''\n        perform searching.\n        '''\n", "input": "", "output": "        if p_index == '' or p_index == '-1':\n            current_page_number = 1\n        else:\n            current_page_number = int(p_index)\n        res_all = self.ysearch.get_all_num(keyword)\n        results = self.ysearch.search_pager(\n            keyword,\n            page_index=current_page_number,\n            doc_per_page=CMS_CFG['list_num']\n        )\n        page_num = int(res_all / CMS_CFG['list_num'])\n        kwd = {'title': '\u67e5\u627e\u7ed3\u679c',\n               'pager': '',\n               'count': res_all,\n               'keyword': keyword,\n               'catid': '',\n               'current_page': current_page_number}\n        self.render('misc/search/search_list.html',\n                    kwd=kwd,\n                    srecs=results,\n                    pager=gen_pager_bootstrap_url(\n                        '/search/{0}'.format(keyword),\n                        page_num,\n                        current_page_number\n                    ),\n                    userinfo=self.userinfo,\n                    cfg=CMS_CFG)"}, {"instruction": "def assertTraceDoesNotContain(response, message):\n    \"\"\"\n    Raise TestStepFail if response.verify_trace finds message from response traces.\n\n    :param response: Response. Must contain method verify_trace\n    :param message: Message to look for\n    :return: Nothing\n    :raises: AttributeError if response does not contain verify_trace method.\n    TestStepFail if verify_trace returns True.\n    \"\"\"\n", "input": "", "output": "    if not hasattr(response, \"verify_trace\"):\n        raise AttributeError(\"Response object does not contain verify_trace method!\")\n    if response.verify_trace(message, False):\n        raise TestStepFail('Assert: Message(s) \"%s\" in response' % message)"}, {"instruction": "def object_new(self, template=None, **kwargs):\n        \"\"\"Creates a new object from an IPFS template.\n\n        By default this creates and returns a new empty merkledag node, but you\n        may pass an optional template argument to create a preformatted node.\n\n        .. code-block:: python\n\n            >>> c.object_new()\n            {'Hash': 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n'}\n\n        Parameters\n        ----------\n        template : str\n            Blueprints from which to construct the new object. Possible values:\n\n             * ``\"unixfs-dir\"``\n             * ``None``\n\n        Returns\n        -------\n            dict : Object hash\n        \"\"\"\n", "input": "", "output": "        args = (template,) if template is not None else ()\n        return self._client.request('/object/new', args,\n                                    decoder='json', **kwargs)"}, {"instruction": "async def enable_events(self) -> asyncio.Task:\n        \"\"\"Connects to the websocket. Returns a listening task.\"\"\"\n", "input": "", "output": "        return await self._connection.ws_connect(\n            on_message=self._ws_on_message, on_error=self._ws_on_error\n        )"}, {"instruction": "def _lats(self):\n        \"\"\"Return the latitudes (in degrees) of the gridded data.\"\"\"\n", "input": "", "output": "        lats = _np.linspace(90.0, -90.0 + 180.0 / self.nlat, num=self.nlat)\n        return lats"}, {"instruction": "def _send(self, message):\n        \"\"\"\n        A helper method that does the actual sending\n\n        :param SmsMessage message: SmsMessage class instance.\n        :returns: True if message is sent else False\n        :rtype: bool\n        \"\"\"\n", "input": "", "output": "\n        params = {\n            'from': message.from_phone, \n            'to': \",\".join(message.to),\n            'text': message.body,\n            'api_key': self.get_api_key(),\n            'api_secret': self.get_api_secret(),\n        }\n\n\n        print(params)\n\n        logger.debug(\"POST to %r with body: %r\", NEXMO_API_URL, params)\n\n        return self.parse(NEXMO_API_URL, requests.post(NEXMO_API_URL, data=params))"}, {"instruction": "def _set_next_host_location(self, context):\n        '''\n        A function which sets the next host location on the request, if applicable. \n\n        :param ~azure.storage.models.RetryContext context: \n            The retry context containing the previous host location and the request \n            to evaluate and possibly modify.\n        '''\n", "input": "", "output": "        if len(context.request.host_locations) > 1:\n            # If there's more than one possible location, retry to the alternative\n            if context.location_mode == LocationMode.PRIMARY:\n                context.location_mode = LocationMode.SECONDARY\n            else:\n                context.location_mode = LocationMode.PRIMARY\n\n            context.request.host = context.request.host_locations.get(context.location_mode)"}, {"instruction": "def iso8601_date(d):\n    \"\"\"\n    Return a string representation of a date that the Twilio API understands\n    Format is YYYY-MM-DD. Returns None if d is not a string, datetime, or date\n    \"\"\"\n", "input": "", "output": "    if d == values.unset:\n        return d\n    elif isinstance(d, datetime.datetime):\n        return str(d.date())\n    elif isinstance(d, datetime.date):\n        return str(d)\n    elif isinstance(d, str):\n        return d"}, {"instruction": "def make_oracle(q0, q1, secret_function):\n    \"\"\" Gates implementing the secret function f(x).\"\"\"\n", "input": "", "output": "\n    # coverage: ignore\n    if secret_function[0]:\n        yield [CNOT(q0, q1), X(q1)]\n\n    if secret_function[1]:\n        yield CNOT(q0, q1)"}, {"instruction": "def prepare(self, ansi='', ensure_trailing_newline=False):\n        \"\"\" Load the contents of 'ansi' into this object \"\"\"\n", "input": "", "output": "\n        body, styles = self.apply_regex(ansi)\n\n        if ensure_trailing_newline and _needs_extra_newline(body):\n            body += '\\n'\n\n        self._attrs = {\n            'dark_bg': self.dark_bg,\n            'line_wrap': self.line_wrap,\n            'font_size': self.font_size,\n            'body': body,\n            'styles': styles,\n        }\n\n        return self._attrs"}, {"instruction": "def record(self):\n        # type: () -> bytes\n        '''\n        A method to generate the string representing this UDF ICB Tag.\n\n        Parameters:\n         None.\n        Returns:\n         A string representing this UDF ICB Tag.\n        '''\n", "input": "", "output": "        if not self._initialized:\n            raise pycdlibexception.PyCdlibInternalError('UDF ICB Tag not initialized')\n\n        return struct.pack(self.FMT, self.prior_num_direct_entries,\n                           self.strategy_type, self.strategy_param,\n                           self.max_num_entries, 0, self.file_type,\n                           self.parent_icb_log_block_num,\n                           self.parent_icb_part_ref_num, self.flags)"}, {"instruction": "def set_threadlocal(self, **values):\n        \"\"\"Set current thread's logging context to specified `values`\"\"\"\n", "input": "", "output": "        with self._lock:\n            self._ensure_threadlocal()\n            self._tpayload.context = values"}, {"instruction": "def AddDefaultMergers(self):\n    \"\"\"Adds the default DataSetMergers defined in this module.\"\"\"\n", "input": "", "output": "    self.AddMerger(AgencyMerger(self))\n    self.AddMerger(StopMerger(self))\n    self.AddMerger(RouteMerger(self))\n    self.AddMerger(ServicePeriodMerger(self))\n    self.AddMerger(FareMerger(self))\n    self.AddMerger(ShapeMerger(self))\n    self.AddMerger(TripMerger(self))\n    self.AddMerger(FareRuleMerger(self))"}, {"instruction": "def subdirs(self, pattern=None, sort_key=lambda k: k, sort_reverse=False, abspath=False):\n        \"\"\" Return a sorted list containing relative path of all subdirs (recursively).\n\n        :type pattern: str\n        :param pattern: Unix style (glob like/gitignore like) pattern\n\n        :param sort_key: key argument for sorted\n\n        :param sort_reverse: reverse argument for sorted\n\n        :rtype: list\n        :return: List of all relative files paths.\n        \"\"\"\n", "input": "", "output": "        return sorted(self.itersubdirs(pattern, abspath=abspath), key=sort_key, reverse=sort_reverse)"}, {"instruction": "def relative_ref(*parts):\n    \"\"\"\n    Create a reference builder with specified relative location.\n    using getter.relative_ref(\"some\", \"submodel\") to get a value with key\n    \"toto\" will gives reference.Relative(\"some\", \"submodel\", \"toto\")\n    \"\"\"\n", "input": "", "output": "\n    def relative_ref(_value, context, **_params):\n        return reference.Relative(*(parts + (context[\"key\"], )))\n\n    return relative_ref"}, {"instruction": "def do_preferrep(self, line):\n        \"\"\"preferrep <member node> [member node ...] Add one or more preferred Member\n        Nodes to replication policy.\"\"\"\n", "input": "", "output": "        mns = self._split_args(line, 1, -1)\n        self._command_processor.get_session().get_replication_policy().add_preferred(\n            mns\n        )\n        self._print_info_if_verbose(\n            \"Set {} as preferred replication target(s)\".format(\", \".join(mns))\n        )"}, {"instruction": "def visit_Import(self, node):\n        \"\"\" Register imported modules and usage symbols.  \"\"\"\n", "input": "", "output": "        for alias in node.names:\n            alias_name = tuple(alias.name.split('.'))\n            self.imports.add(alias_name[0])\n            if alias.asname:\n                self.symbols[alias.asname] = alias_name\n            else:\n                self.symbols[alias_name[0]] = alias_name[:1]\n            self.update = True\n        return None"}, {"instruction": "def bind_socket(address, port):\n    \"\"\" Returns a socket bound on (address:port). \"\"\"\n", "input": "", "output": "\n    assert address\n    assert port\n    bindsocket = socket.socket()\n    try:\n        bindsocket.bind((address, port))\n    except socket.error:\n        logger.error(\"Couldn't bind socket on %s:%s\", address, port)\n        return None\n\n    logger.info('Listening on %s:%s', address, port)\n    bindsocket.listen(0)\n    return bindsocket"}, {"instruction": "def replace_nulls(hdrs):\n        \"\"\"Replace '' in hdrs.\"\"\"\n", "input": "", "output": "        ret = []\n        idx = 0\n        for hdr in hdrs:\n            if hdr == '':\n                ret.append(\"no_hdr{}\".format(idx))\n            else:\n                ret.append(hdr)\n        return ret"}, {"instruction": "def handle_not_found(exception, **extra):\n    \"\"\"Custom blueprint exception handler.\"\"\"\n", "input": "", "output": "    assert isinstance(exception, NotFound)\n\n    page = Page.query.filter(db.or_(Page.url == request.path,\n                                    Page.url == request.path + \"/\")).first()\n\n    if page:\n        _add_url_rule(page.url)\n        return render_template(\n            [\n                page.template_name,\n                current_app.config['PAGES_DEFAULT_TEMPLATE']\n            ],\n            page=page\n        )\n    elif 'wrapped' in extra:\n        return extra['wrapped'](exception)\n    else:\n        return exception"}, {"instruction": "def _common_parser():\n    \"\"\"Returns a parser with common command-line options for all the scripts\n    in the fortpy suite.\n    \"\"\"\n", "input": "", "output": "    import argparse\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument(\"-examples\", action=\"store_true\",\n                        help=\"See detailed help and examples for this script.\")\n    parser.add_argument(\"-verbose\", action=\"store_true\",\n                        help=\"See verbose output as the script runs.\")\n    parser.add_argument('-action', nargs=1, choices=['save','print'], default='print',\n                        help=\"Specify what to do with the output (print or save)\")\n    parser.add_argument(\"-debug\", action=\"store_true\",\n                        help=\"Print verbose calculation information for debugging.\")\n\n    return parser"}, {"instruction": "def request_frame(self):\n        \"\"\"Construct initiating frame.\"\"\"\n", "input": "", "output": "        self.session_id = get_new_session_id()\n        return FrameActivateSceneRequest(scene_id=self.scene_id, session_id=self.session_id)"}, {"instruction": "def cares_about(self, delta):\n        \"\"\"Return True if this observer \"cares about\" (i.e. wants to be\n        called) for a this delta.\n\n        \"\"\"\n", "input": "", "output": "        if (self.entity_id and delta.get_id() and\n                not re.match(self.entity_id, str(delta.get_id()))):\n            return False\n\n        if self.entity_type and self.entity_type != delta.entity:\n            return False\n\n        if self.action and self.action != delta.type:\n            return False\n\n        if self.predicate and not self.predicate(delta):\n            return False\n\n        return True"}, {"instruction": "def processlist(**connection_args):\n    '''\n    Retrieves the processlist from the MySQL server via\n    \"SHOW FULL PROCESSLIST\".\n\n    Returns: a list of dicts, with each dict representing a process:\n\n    .. code-block:: python\n\n        {'Command': 'Query',\n        'Host': 'localhost',\n        'Id': 39,\n        'Info': 'SHOW FULL PROCESSLIST',\n        'Rows_examined': 0,\n        'Rows_read': 1,\n        'Rows_sent': 0,\n        'State': None,\n        'Time': 0,\n        'User': 'root',\n        'db': 'mysql'}\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mysql.processlist\n\n    '''\n", "input": "", "output": "    ret = []\n\n    dbc = _connect(**connection_args)\n    if dbc is None:\n        return []\n    cur = dbc.cursor()\n    _execute(cur, 'SHOW FULL PROCESSLIST')\n    hdr = [c[0] for c in cur.description]\n    for _ in range(cur.rowcount):\n        row = cur.fetchone()\n        idx_r = {}\n        for idx_j in range(len(hdr)):\n            idx_r[hdr[idx_j]] = row[idx_j]\n        ret.append(idx_r)\n    cur.close()\n    return ret"}, {"instruction": "def styles(self, dictobj):\n\t\t\"\"\"\n\t\tAdd or update styles\n\t\t\"\"\"\n", "input": "", "output": "\t\tfor k in dictobj:\n\t\t\tself.chart_style[k] = dictobj[k]"}, {"instruction": "def getargspec(fn):  # type: (Callable) -> inspect.ArgSpec\n    \"\"\"Get the names and default values of a function's arguments.\n\n    Args:\n        fn (function): a function\n\n    Returns:\n        `inspect.ArgSpec`:  A collections.namedtuple with the following attributes:\n\n            * Args:\n                args (list): a list of the argument names (it may contain nested lists).\n                varargs (str): name of the * argument or None.\n                keywords (str): names of the ** argument or None.\n                defaults (tuple): an n-tuple of the default values of the last n arguments.\n    \"\"\"\n", "input": "", "output": "    if six.PY2:\n        return inspect.getargspec(fn)\n    elif six.PY3:\n        full_arg_spec = inspect.getfullargspec(fn)\n        return inspect.ArgSpec(full_arg_spec.args, full_arg_spec.varargs, full_arg_spec.varkw, full_arg_spec.defaults)"}, {"instruction": "def config_dict(config):\n    \"\"\"\n    Given a Sphinx config object, return a dictionary of config\n    values.\n    \"\"\"\n", "input": "", "output": "    return dict(\n        (key, getattr(config, key))\n        for key in config.values\n    )"}, {"instruction": "def Crawl(self, seed, seedClient=None, jobClient=None, rounds=1, index=True):\n        \"\"\"\n        Launch a crawl using the given seed\n        :param seed: Type (Seed or SeedList) - used for crawl\n        :param seedClient: if a SeedList is given, the SeedClient to upload, if None a default will be created\n        :param jobClient: the JobClient to be used, if None a default will be created\n        :param rounds: the number of rounds in the crawl\n        :return: a CrawlClient to monitor and control the crawl\n        \"\"\"\n", "input": "", "output": "        if seedClient is None:\n            seedClient = self.Seeds()\n        if jobClient is None:\n            jobClient = self.Jobs()\n\n        if type(seed) != Seed:\n            seed = seedClient.create(jobClient.crawlId + '_seeds', seed)\n        return CrawlClient(self.server, seed, jobClient, rounds, index)"}, {"instruction": "def log(self, time, message, level=None, attachment=None):\n        \"\"\"Logs a message with attachment.\n\n        The attachment is a dict of:\n            name: name of attachment\n            data: file content\n            mime: content type for attachment\n        \"\"\"\n", "input": "", "output": "        logger.debug(\"log queued\")\n\n        args = {\n            \"time\": time,\n            \"message\": message,\n            \"level\": level,\n            \"attachment\": attachment,\n        }\n        self.queue.put_nowait((\"log\", args))"}, {"instruction": "def re_parser(self, scode, *args):\n        \"\"\"\n        args: [arg1, arg2]\n\n        arg[0] = a valid regex pattern\n\n        arg[1] : if startswith('@') call sub; if startswith('$') call finditer,\n                 $0, $1 means group index.\n\n        return an ensure_list\n        \"\"\"\n", "input": "", "output": "\n        def gen_match(matches, num):\n            for match in matches:\n                yield match.group(num)\n\n        scode = self.ensure_str(scode)\n        assert self._re.match(\n            '^@|^\\$\\d+', args[1]), ValueError('args1 should match ^@|^\\$\\d+')\n        arg1, arg2 = args[1][0], args[1][1:]\n        com = self._re.compile(args[0])\n        if arg1 == '@':\n            result = com.sub(arg2, scode)\n            return self.ensure_list(result)\n        else:\n            result = com.finditer(scode)\n            return gen_match(result, int(arg2))"}, {"instruction": "def pkg_blacklist(self):\n        \"\"\"Manage blacklist packages\n        \"\"\"\n", "input": "", "output": "        blacklist = BlackList()\n        options = [\n            \"-b\",\n            \"--blacklist\"\n        ]\n        flag = [\n            \"--add\",\n            \"--remove\"\n        ]\n        command = [\"list\"]\n        if (len(self.args) == 2 and self.args[0] in options and\n                self.args[1] == command[0]):\n            blacklist.listed()\n        elif (len(self.args) > 2 and self.args[0] in options and\n                flag[0] in self.args):\n            self.args.remove(flag[0])\n            blacklist.add(self.args[1:])\n        elif (len(self.args) == 3 and self.args[0] in options and\n                \"ALL\" in self.args and flag[1] in self.args):\n            self.args.remove(flag[1])\n            blacklist.remove(blacklist.get_black())\n        elif (len(self.args) > 2 and self.args[0] in options and\n                flag[1] in self.args):\n            self.args.remove(flag[1])\n            blacklist.remove(self.args[1:])\n        else:\n            usage(\"\")"}, {"instruction": "def image_feature_engineering(features, feature_tensors_dict):\n  \"\"\"Add a hidden layer on image features.\n\n  Args:\n    features: features dict\n    feature_tensors_dict: dict of feature-name: tensor\n  \"\"\"\n", "input": "", "output": "  engineered_features = {}\n  for name, feature_tensor in six.iteritems(feature_tensors_dict):\n    if name in features and features[name]['transform'] == IMAGE_TRANSFORM:\n      with tf.name_scope(name, 'Wx_plus_b'):\n        hidden = tf.contrib.layers.fully_connected(\n            feature_tensor,\n            IMAGE_HIDDEN_TENSOR_SIZE)\n        engineered_features[name] = hidden\n    else:\n      engineered_features[name] = feature_tensor\n  return engineered_features"}, {"instruction": "def consume(self, limit=None):\n        \"\"\"Returns an iterator that waits for one message at a time.\"\"\"\n", "input": "", "output": "        for total_message_count in count():\n            if limit and total_message_count >= limit:\n                raise StopIteration\n\n            if not self.channel.is_open:\n                raise StopIteration\n\n            self.channel.wait()\n            yield True"}, {"instruction": "def _api_group_for_type(cls):\n    \"\"\"\n    Determine which Kubernetes API group a particular PClass is likely to\n    belong with.\n\n    This is basically nonsense.  The question being asked is wrong.  An\n    abstraction has failed somewhere.  Fixing that will get rid of the need\n    for this.\n    \"\"\"\n", "input": "", "output": "    _groups = {\n        (u\"v1beta1\", u\"Deployment\"): u\"extensions\",\n        (u\"v1beta1\", u\"DeploymentList\"): u\"extensions\",\n        (u\"v1beta1\", u\"ReplicaSet\"): u\"extensions\",\n        (u\"v1beta1\", u\"ReplicaSetList\"): u\"extensions\",\n    }\n    key = (\n        cls.apiVersion,\n        cls.__name__.rsplit(u\".\")[-1],\n    )\n    group = _groups.get(key, None)\n    return group"}, {"instruction": "def get_capacity(self, legacy=None):\n        \"\"\"Get capacity of all facilities.\n\n        :param legacy: Indicate set of server types to include in response\n\n        Validation of `legacy` is left to the packet api to avoid going out of date if any new value is introduced.\n        The currently known values are:\n          - only (current default, will be switched \"soon\")\n          - include\n          - exclude (soon to be default)\n        \"\"\"\n", "input": "", "output": "        params = None\n        if legacy:\n            params = {'legacy': legacy}\n\n        return self.call_api('/capacity', params=params)['capacity']"}, {"instruction": "def vm_state(vm_=None, **kwargs):\n    '''\n    Return list of all the vms and their state.\n\n    If you pass a VM name in as an argument then it will return info\n    for just the named VM, otherwise it will return all VMs.\n\n    :param vm_: name of the domain\n    :param connection: libvirt connection URI, overriding defaults\n\n        .. versionadded:: 2019.2.0\n    :param username: username to connect with, overriding defaults\n\n        .. versionadded:: 2019.2.0\n    :param password: password to connect with, overriding defaults\n\n        .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' virt.vm_state <domain>\n    '''\n", "input": "", "output": "    def _info(dom):\n        "}, {"instruction": "def entropy_bits_nrange(\n        minimum: Union[int, float], maximum: Union[int, float]\n) -> float:\n    \"\"\"Calculate the number of entropy bits in a range of numbers.\"\"\"\n", "input": "", "output": "    # Shannon:\n    # d = fabs(maximum - minimum)\n    # ent = -(1/d) * log(1/d, 2) * d\n    # Aprox form: log10(digits) * log2(10)\n    if not isinstance(minimum, (int, float)):\n        raise TypeError('minimum can only be int or float')\n    if not isinstance(maximum, (int, float)):\n        raise TypeError('maximum can only be int or float')\n    if minimum < 0:\n        raise ValueError('minimum should be greater than 0')\n    if maximum < 0:\n        raise ValueError('maximum should be greater than 0')\n\n    dif = fabs(maximum - minimum)\n    if dif == 0:\n        return 0.0\n\n    ent = log10(dif) * 3.321928\n    return ent"}, {"instruction": "def _num_required_args(func):\n    \"\"\" Number of args for func\n\n        >>> def foo(a, b, c=None):\n        ... return a + b + c\n\n        >>> _num_required_args(foo)\n        2\n\n        >>> def bar(*args):\n        ... return sum(args)\n\n        >>> print(_num_required_args(bar))\n        None\n\n        borrowed from: https://github.com/pytoolz/toolz\n    \"\"\"\n", "input": "", "output": "    try:\n        spec = inspect.getargspec(func)\n        if spec.varargs:\n            return None\n        num_defaults = len(spec.defaults) if spec.defaults else 0\n        return len(spec.args) - num_defaults\n    except TypeError:\n        return None"}, {"instruction": "def get_items(self):\n        \"\"\"This is out of spec, but required for adaptive assessment parts?\"\"\"\n", "input": "", "output": "        ils = get_item_lookup_session(runtime=self._runtime, proxy=self._proxy)\n        ils.use_federated_bank_view()\n        items = []\n        if self.has_items():\n            for idstr in self._my_map['itemIds']:\n                items.append(ils.get_item(Id(idstr)))\n        return ItemList(items, runtime=self._runtime, proxy=self._proxy)"}, {"instruction": "def tag_audio(filename, tracklisting):\n    \"\"\"Return True if audio tagged successfully; handle tagging audio.\"\"\"\n", "input": "", "output": "    # TODO: maybe actually glob for files, then try tagging if present?\n    if not(tag_audio_file(filename + '.m4a', tracklisting) or\n           tag_audio_file(filename + '.mp3', tracklisting)):\n        print(\"Cannot find or access any relevant M4A or MP3 audio file.\")\n        print(\"Trying to save a text file instead.\")\n        write_text(filename, tracklisting)\n        return False\n    return True"}, {"instruction": "def transform(self, vector):\n        \"\"\"\n        Computes the Hadamard product of the vector.\n        \"\"\"\n", "input": "", "output": "        if isinstance(vector, RDD):\n            vector = vector.map(_convert_to_vector)\n\n        else:\n            vector = _convert_to_vector(vector)\n        return callMLlibFunc(\"elementwiseProductVector\", self.scalingVector, vector)"}, {"instruction": "def logger_has_handlers(logger):\n    \"\"\"\n    Check if given logger has at least 1 handler associated, return a boolean value.\n\n    Since Python 2 doesn't provide Logger.hasHandlers(), we have to perform the lookup by ourself.\n    \"\"\"\n", "input": "", "output": "    if six.PY3:\n        return logger.hasHandlers()\n    else:\n        c = logger\n        rv = False\n        while c:\n            if c.handlers:\n                rv = True\n                break\n            if not c.propagate:\n                break\n            else:\n                c = c.parent\n        return rv"}, {"instruction": "def tukey(winlen, alpha):\n    \"\"\"\n    Generate a tukey (tapered cosine) window\n    :param winlen: length of the window, in samples\n    :type winlen: int\n    :param alpha: proportion of the window to be tapered. \n    0 = rectangular window\n    1.0 = hann window\n    :type alpha: float\n    \"\"\"\n", "input": "", "output": "    taper = hann(winlen * alpha)\n    rect = np.ones(winlen - len(taper) + 1)\n    win = fftconvolve(taper, rect)\n    win = win / np.amax(win)\n    return win"}, {"instruction": "def ConcatWith(x, tensor, dim):\n    \"\"\"\n    A wrapper around ``tf.concat`` to cooperate with :class:`LinearWrap`.\n\n    Args:\n        x (tf.Tensor): input\n        tensor (list[tf.Tensor]): a tensor or list of tensors to concatenate with x.\n            x will be at the beginning\n        dim (int): the dimension along which to concatenate\n\n    Returns:\n        tf.Tensor: ``tf.concat([x] + tensor, dim)``\n    \"\"\"\n", "input": "", "output": "    if type(tensor) != list:\n        tensor = [tensor]\n    return tf.concat([x] + tensor, dim)"}, {"instruction": "Print values in a nice format, e.g. (1, 2, 3)\n\n@param start the beginning of the values, e.g. \"(\"\n@param separator the separator of values, e.g. \", \"\n@param end the end of the values, e.g. \")\"\n@param values the values to print\n\n@return neatly formatted value list", "input": "Java", "output": "public static String printValues(String start, String separator, String end, Iterator<?> values) {\n        if(start == null){\n            start = \"(\";\n        }\n        if (separator == null){\n            separator = \",\";\n        }\n        if (end == null){\n            end = \")\";\n        }\n\n        StringBuilder sb = new StringBuilder(start);\n        while(values.hasNext()) {\n            sb.append(print(values.next()));\n            if (values.hasNext()) {\n                sb.append(separator);\n            }\n        }\n        return sb.append(end).toString();\n    }"}, {"instruction": "{@inheritDoc}", "input": "Java", "output": "@Override\r\n  public int size()\r\n  {\r\n    if (size < 0) {\r\n      size = 0;\r\n      for (int i = 0; i <= lastWordIndex; i++) {\r\n        int w = words[i];\r\n        if (isLiteral(w)) {\r\n          size += getLiteralBitCount(w);\r\n        } else {\r\n          if (isZeroSequence(w)) {\r\n            if (!isSequenceWithNoBits(w)) {\r\n              size++;\r\n            }\r\n          } else {\r\n            size += maxLiteralLengthMultiplication(getSequenceCount(w) + 1);\r\n            if (!isSequenceWithNoBits(w)) {\r\n              size--;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return size;\r\n  }"}, {"instruction": "Converts a Flink application status enum to a YARN application status enum.\n@param status The Flink application status.\n@return The corresponding YARN application status.", "input": "Java", "output": "private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n\t\tif (status == null) {\n\t\t\treturn FinalApplicationStatus.UNDEFINED;\n\t\t}\n\t\telse {\n\t\t\tswitch (status) {\n\t\t\t\tcase SUCCEEDED:\n\t\t\t\t\treturn FinalApplicationStatus.SUCCEEDED;\n\t\t\t\tcase FAILED:\n\t\t\t\t\treturn FinalApplicationStatus.FAILED;\n\t\t\t\tcase CANCELED:\n\t\t\t\t\treturn FinalApplicationStatus.KILLED;\n\t\t\t\tdefault:\n\t\t\t\t\treturn FinalApplicationStatus.UNDEFINED;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "function defines the last dispatched time comparator.\n\n@param weight weight of the comparator.", "input": "Java", "output": "private static FactorComparator<Executor> getLstDispatchedTimeComparator(final int weight) {\n    return FactorComparator\n        .create(LSTDISPATCHED_COMPARATOR_NAME, weight, new Comparator<Executor>() {\n\n          @Override\n          public int compare(final Executor o1, final Executor o2) {\n            final ExecutorInfo stat1 = o1.getExecutorInfo();\n            final ExecutorInfo stat2 = o2.getExecutorInfo();\n\n            final int result = 0;\n            if (statisticsObjectCheck(stat1, stat2, LSTDISPATCHED_COMPARATOR_NAME)) {\n              return result;\n            }\n            // Note: an earlier date time indicates higher weight.\n            return ((Long) stat2.getLastDispatchedTime()).compareTo(stat1.getLastDispatchedTime());\n          }\n        });\n  }"}, {"instruction": "Returns a substring of this.\n@param start the position of first code point\n@param until the position after last code point, exclusive.", "input": "Java", "output": "public UTF8String substring(final int start, final int until) {\n    if (until <= start || start >= numBytes) {\n      return EMPTY_UTF8;\n    }\n\n    int i = 0;\n    int c = 0;\n    while (i < numBytes && c < start) {\n      i += numBytesForFirstByte(getByte(i));\n      c += 1;\n    }\n\n    int j = i;\n    while (i < numBytes && c < until) {\n      i += numBytesForFirstByte(getByte(i));\n      c += 1;\n    }\n\n    if (i > j) {\n      byte[] bytes = new byte[i - j];\n      copyMemory(base, offset + j, bytes, BYTE_ARRAY_OFFSET, i - j);\n      return fromBytes(bytes);\n    } else {\n      return EMPTY_UTF8;\n    }\n  }"}, {"instruction": "Inserts the given object into the current buffer. This method returns a pointer that\ncan be used to address the written record in this partition.\n\n@param record The object to be written to the partition.\n@return A pointer to the object in the partition.\n@throws IOException Thrown when the write failed.", "input": "Java", "output": "public final long appendRecord(T record) throws IOException {\n\t\tlong pointer = this.writeView.getCurrentPointer();\n\t\ttry {\n\t\t\tthis.serializer.serialize(record, this.writeView);\n\t\t\tthis.recordCounter++;\n\t\t\treturn pointer;\n\t\t} catch (EOFException e) {\n\t\t\t// we ran out of pages. \n\t\t\t// first, reset the pages and then we need to trigger a compaction\n\t\t\t//int oldCurrentBuffer = \n\t\t\tthis.writeView.resetTo(pointer);\n\t\t\t//for (int bufNum = this.partitionPages.size() - 1; bufNum > oldCurrentBuffer; bufNum--) {\n\t\t\t//\tthis.availableMemory.addMemorySegment(this.partitionPages.remove(bufNum));\n\t\t\t//}\n\t\t\tthrow e;\n\t\t}\n\t}"}, {"instruction": "Start the slot pool to accept RPC calls.\n\n@param jobMasterId The necessary leader id for running the job.\n@param newJobManagerAddress for the slot requests which are sent to the resource manager\n@param componentMainThreadExecutor The main thread executor for the job master's main thread.", "input": "Java", "output": "public void start(\n\t\t@Nonnull JobMasterId jobMasterId,\n\t\t@Nonnull String newJobManagerAddress,\n\t\t@Nonnull ComponentMainThreadExecutor componentMainThreadExecutor) throws Exception {\n\n\t\tthis.jobMasterId = jobMasterId;\n\t\tthis.jobManagerAddress = newJobManagerAddress;\n\t\tthis.componentMainThreadExecutor = componentMainThreadExecutor;\n\n\t\tscheduleRunAsync(this::checkIdleSlot, idleSlotTimeout);\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tscheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS);\n\t\t}\n\t}"}, {"instruction": "\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u5728\u53e6\u4e00\u4e2a\u96c6\u5408\u4e2d\u662f\u5426\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u65e2\u662f\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u5171\u540c\u7684\u5143\u7d20\n\n@param coll1 \u96c6\u54081\n@param coll2 \u96c6\u54082\n@return \u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u5728\u53e6\u4e00\u4e2a\u96c6\u5408\u4e2d\u662f\u5426\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\n@since 2.1\n@see #intersection", "input": "Java", "output": "public static boolean containsAny(Collection<?> coll1, Collection<?> coll2) {\r\n\t\tif (isEmpty(coll1) || isEmpty(coll2)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (coll1.size() < coll2.size()) {\r\n\t\t\tfor (Object object : coll1) {\r\n\t\t\t\tif (coll2.contains(object)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (Object object : coll2) {\r\n\t\t\t\tif (coll1.contains(object)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}"}, {"instruction": "Generates a new Key Hash that is immediately after the given one. We define Key Hash H2 to be immediately after\nKey Hash h1 if there doesn't exist Key Hash H3 such that H1&lt;H3&lt;H2. The ordering is performed using {@link UUID#compareTo}.\n\n@return The successor Key Hash, or null if no more successors are available (if {@link IteratorState#isEnd} returns true).", "input": "Java", "output": "static UUID getNextHash(UUID hash) {\n        if (hash == null) {\n            // No hash given. By definition, the first hash is the \"next\" one\".\n            hash = MIN_HASH;\n        } else if (hash.compareTo(MAX_HASH) >= 0) {\n            // Given hash already equals or exceeds the max value. There is no successor.\n            return null;\n        }\n\n        long msb = hash.getMostSignificantBits();\n        long lsb = hash.getLeastSignificantBits();\n        if (lsb == Long.MAX_VALUE) {\n            msb++; // This won't overflow since we've checked that state is not end (i.e., id != MAX).\n            lsb = Long.MIN_VALUE;\n        } else {\n            lsb++;\n        }\n\n        return new UUID(msb, lsb);\n    }"}, {"instruction": "Sign the given content using this Algorithm instance.\n\n@param headerBytes an array of bytes representing the base64 encoded header content to be verified against the signature.\n@param payloadBytes an array of bytes representing the base64 encoded payload content to be verified against the signature.\n@return the signature in a base64 encoded array of bytes\n@throws SignatureGenerationException if the Key is invalid.", "input": "Java", "output": "public byte[] sign(byte[] headerBytes, byte[] payloadBytes) throws SignatureGenerationException {\n    \t// default implementation; keep around until sign(byte[]) method is removed\n    \tbyte[] contentBytes = new byte[headerBytes.length + 1 + payloadBytes.length];\n    \t\n    \tSystem.arraycopy(headerBytes, 0, contentBytes, 0, headerBytes.length);\n    \tcontentBytes[headerBytes.length] = (byte)'.';\n    \tSystem.arraycopy(payloadBytes, 0, contentBytes, headerBytes.length + 1, payloadBytes.length);\n    \t\n    \treturn sign(contentBytes);\n    }"}, {"instruction": "Produce ticket.\n\n@param <T>                  the type parameter\n@param ticketGrantingTicket the ticket granting ticket\n@param service              the service\n@param credentialProvided   the credential provided\n@param ticketId             the ticket id\n@param clazz                the clazz\n@return the ticket", "input": "Java", "output": "protected <T extends Ticket> T produceTicket(final TicketGrantingTicket ticketGrantingTicket,\n                                                 final Service service,\n                                                 final boolean credentialProvided,\n                                                 final String ticketId,\n                                                 final Class<T> clazz) {\n        val expirationPolicyToUse = determineExpirationPolicyForService(service);\n\n        val result = ticketGrantingTicket.grantServiceTicket(\n            ticketId,\n            service,\n            expirationPolicyToUse,\n            credentialProvided,\n            trackMostRecentSession);\n\n        if (!clazz.isAssignableFrom(result.getClass())) {\n            throw new ClassCastException(\"Result [\" + result\n                + \" is of type \" + result.getClass()\n                + \" when we were expecting \" + clazz);\n        }\n        return (T) result;\n    }"}, {"instruction": "Enables the usage export feature and sets the usage export bucket where reports are stored. If\nyou provide an empty request body using this method, the usage export feature will be disabled.\n\n<p>Sample code:\n\n<pre><code>\ntry (ProjectClient projectClient = ProjectClient.create()) {\nProjectName project = ProjectName.of(\"[PROJECT]\");\nUsageExportLocation usageExportLocationResource = UsageExportLocation.newBuilder().build();\nOperation response = projectClient.setUsageExportBucketProject(project.toString(), usageExportLocationResource);\n}\n</code></pre>\n\n@param project Project ID for this request.\n@param usageExportLocationResource The location in Cloud Storage and naming method of the daily\nusage report. Contains bucket_name and report_name prefix.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation setUsageExportBucketProject(\n      String project, UsageExportLocation usageExportLocationResource) {\n\n    SetUsageExportBucketProjectHttpRequest request =\n        SetUsageExportBucketProjectHttpRequest.newBuilder()\n            .setProject(project)\n            .setUsageExportLocationResource(usageExportLocationResource)\n            .build();\n    return setUsageExportBucketProject(request);\n  }"}, {"instruction": "Create describe parser instance.\n\n@param dbType database type\n@param shardingRule databases and tables sharding rule\n@param lexerEngine lexical analysis engine.\n@return describe parser instance", "input": "Java", "output": "public static AbstractDescribeParser newInstance(final DatabaseType dbType, final ShardingRule shardingRule, final LexerEngine lexerEngine) {\n        switch (dbType) {\n            case H2:\n            case MySQL:\n                return new MySQLDescribeParser(shardingRule, lexerEngine);\n            default:\n                throw new UnsupportedOperationException(String.format(\"Cannot support database [%s].\", dbType));\n        }\n    }"}, {"instruction": "truncate\u64cd\u4f5c\n\n@param config", "input": "Java", "output": "private void truncate(BatchExecutor batchExecutor, MappingConfig config) throws SQLException {\n        DbMapping dbMapping = config.getDbMapping();\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"TRUNCATE TABLE \").append(SyncUtil.getDbTableName(dbMapping));\n        batchExecutor.execute(sql.toString(), new ArrayList<>());\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Truncate target table, sql: {}\", sql);\n        }\n    }"}, {"instruction": "Once-per-node shared init", "input": "Java", "output": "@Override public void setupLocal( ) {\n    // Init all the internal tree fields after shipping over the wire\n    _tree.init_tree();\n    // Allocate local shared memory histograms\n    for( int l=_leaf; l<_tree._len; l++ ) {\n      DTree.UndecidedNode udn = _tree.undecided(l);\n      DHistogram hs[] = _hcs[l-_leaf];\n      int sCols[] = udn._scoreCols;\n      if( sCols != null ) { // Sub-selecting just some columns?\n        for( int col : sCols ) // For tracked cols\n          hs[col].init();\n      } else {                 // Else all columns\n        for( int j=0; j<_ncols; j++) // For all columns\n          if( hs[j] != null )        // Tracking this column?\n            hs[j].init();\n      }\n    }\n  }"}, {"instruction": "Find all resources that match the given location pattern via the\nAnt-style PathMatcher. Supports resources in jar files and zip files\nand in the file system.\n\n@param locationPattern the location pattern to match\n@return the result as Resource array\n@throws IOException in case of I/O errors\n@see #doFindPathMatchingJarResources\n@see #doFindPathMatchingFileResources", "input": "Java", "output": "@SuppressWarnings(\"MagicNumber\")\n    protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {\n        String rootDirPath = determineRootDir(locationPattern);\n        String subPattern = locationPattern.substring(rootDirPath.length());\n        Resource[] rootDirResources = getResources(rootDirPath);\n        Set<Resource> result = new LinkedHashSet<Resource>(16);\n        for (Resource rootDirResource : rootDirResources) {\n            rootDirResource = resolveRootDirResource(rootDirResource);\n            if (isJarResource(rootDirResource)) {\n                result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));\n            } else {\n                result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));\n            }\n        }\n        return result.toArray(new Resource[0]);\n    }"}, {"instruction": "Creates a {@code MAIL} request.", "input": "Java", "output": "public static SmtpRequest mail(CharSequence sender, CharSequence... mailParameters) {\n        if (mailParameters == null || mailParameters.length == 0) {\n            return new DefaultSmtpRequest(SmtpCommand.MAIL,\n                                          sender != null ? \"FROM:<\" + sender + '>' : FROM_NULL_SENDER);\n        } else {\n            List<CharSequence> params = new ArrayList<CharSequence>(mailParameters.length + 1);\n            params.add(sender != null? \"FROM:<\" + sender + '>' : FROM_NULL_SENDER);\n            for (CharSequence param : mailParameters) {\n                params.add(param);\n            }\n            return new DefaultSmtpRequest(SmtpCommand.MAIL, params);\n        }\n    }"}, {"instruction": "See https://api.slack.com/methods/rtm.start.", "input": "Java", "output": "public RtmStartResponse rtmStart(String accessToken) throws IOException {\n    HttpUrl url = baseUrl.newBuilder(\"rtm.start\")\n        .addQueryParameter(\"token\", accessToken)\n        .build();\n    Request request = new Request.Builder()\n        .url(url)\n        .build();\n    Call call = httpClient.newCall(request);\n    try (Response response = call.execute()) {\n      JsonAdapter<RtmStartResponse> jsonAdapter = moshi.adapter(RtmStartResponse.class);\n      return jsonAdapter.fromJson(response.body().source());\n    }\n  }"}, {"instruction": "Add a {@link ChannelPromise} to this {@link ChannelFlushPromiseNotifier} which will be notified after the given\n{@code pendingDataSize} was reached.", "input": "Java", "output": "public ChannelFlushPromiseNotifier add(ChannelPromise promise, long pendingDataSize) {\n        if (promise == null) {\n            throw new NullPointerException(\"promise\");\n        }\n        checkPositiveOrZero(pendingDataSize, \"pendingDataSize\");\n        long checkpoint = writeCounter + pendingDataSize;\n        if (promise instanceof FlushCheckpoint) {\n            FlushCheckpoint cp = (FlushCheckpoint) promise;\n            cp.flushCheckpoint(checkpoint);\n            flushCheckpoints.add(cp);\n        } else {\n            flushCheckpoints.add(new DefaultFlushCheckpoint(checkpoint, promise));\n        }\n        return this;\n    }"}, {"instruction": "cancel given delegation token", "input": "Java", "output": "public void cancelDelegationToken(String delegationToken) throws HiveSQLException {\n    if (saslServer == null) {\n      throw new HiveSQLException(\n          \"Delegation token only supported over kerberos authentication\", \"08S01\");\n    }\n    try {\n      saslServer.cancelDelegationToken(delegationToken);\n    } catch (IOException e) {\n      throw new HiveSQLException(\n          \"Error canceling delegation token \" + delegationToken, \"08S01\", e);\n    }\n  }"}, {"instruction": "Parse the given request, resolving its multipart elements.\n\n@param request the request to parse.\n\n@return the parsing result.\n\n@throws MultipartException if multipart resolution failed.", "input": "Java", "output": "private MultipartParsingResult parseRequest(HttpRequest request) throws MultipartException {\n        String encoding = determineEncoding(request);\n        FileUpload fileUpload = prepareFileUpload(encoding);\n        try {\n            RequestBody body = request.getBody();\n            Assert.notNull(body, \"The body cannot be null.\");\n            List<FileItem> fileItems = fileUpload.parseRequest(new BodyContext(body));\n            return parseFileItems(fileItems, encoding);\n        } catch (FileUploadBase.SizeLimitExceededException ex) {\n            throw new MaxUploadSizeExceededException(fileUpload.getSizeMax(), ex);\n        } catch (FileUploadBase.FileSizeLimitExceededException ex) {\n            throw new MaxUploadSizeExceededException(fileUpload.getFileSizeMax(), ex);\n        } catch (FileUploadException ex) {\n            throw new MultipartException(\"Failed to parse multipart servlet request.\", ex);\n        }\n    }"}, {"instruction": "/* (non-Javadoc)\n@see org.parosproxy.paros.db.paros.TableContext#deleteAllDataForContextAndType(int, int)", "input": "Java", "output": "@Override\r\n\tpublic synchronized void deleteAllDataForContextAndType(int contextId, int type) throws DatabaseException {\r\n    \tSqlPreparedStatementWrapper psDeleteAllDataForContextAndType = null;\r\n    \ttry {\r\n        \tpsDeleteAllDataForContextAndType = DbSQL.getSingleton().getPreparedStatement(\"context.ps.deletealldataforcontexttype\");\r\n\t\t\tpsDeleteAllDataForContextAndType.getPs().setInt(1, contextId);\r\n\t\t\tpsDeleteAllDataForContextAndType.getPs().setInt(2, type);\r\n\t\t\tpsDeleteAllDataForContextAndType.getPs().executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tthrow new DatabaseException(e);\r\n\t\t} finally {\r\n\t\t\tDbSQL.getSingleton().releasePreparedStatement(psDeleteAllDataForContextAndType);\r\n\t\t}\r\n    }"}, {"instruction": "Open a file for reading OR writing. The {@link FileChannel} that is returned will only allow\nreads or writes depending on the {@link OpenOption}s that are specified. If any of the\nfollowing have been specified, the {@link FileChannel} will be write-only: {@link\nStandardOpenOption#CREATE}\n\n<ul>\n<li>{@link StandardOpenOption#CREATE}\n<li>{@link StandardOpenOption#CREATE_NEW}\n<li>{@link StandardOpenOption#WRITE}\n<li>{@link StandardOpenOption#TRUNCATE_EXISTING}\n</ul>\n\nIn all other cases the {@link FileChannel} will be read-only.\n\n@param path The path to the file to open or create\n@param options The options specifying how the file should be opened, and whether the {@link\nFileChannel} should be read-only or write-only.\n@param attrs (not supported, the values will be ignored)\n@throws IOException", "input": "Java", "output": "@Override\n  public FileChannel newFileChannel(\n      Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n    checkNotNull(path);\n    initStorage();\n    CloudStorageUtil.checkNotNullArray(attrs);\n    if (options.contains(StandardOpenOption.CREATE_NEW)) {\n      Files.createFile(path, attrs);\n    } else if (options.contains(StandardOpenOption.CREATE) && !Files.exists(path)) {\n      Files.createFile(path, attrs);\n    }\n    if (options.contains(StandardOpenOption.WRITE)\n        || options.contains(StandardOpenOption.CREATE)\n        || options.contains(StandardOpenOption.CREATE_NEW)\n        || options.contains(StandardOpenOption.TRUNCATE_EXISTING)) {\n      return new CloudStorageWriteFileChannel(newWriteChannel(path, options));\n    } else {\n      return new CloudStorageReadFileChannel(newReadChannel(path, options));\n    }\n  }"}, {"instruction": "Formats the string as {@link #format(String, Object...)}, but instead of failing on illegal format, returns the\nconcatenated format string and format arguments. Should be used for unimportant formatting like logging,\nexception messages, typically not directly.", "input": "Java", "output": "public static String nonStrictFormat(String message, Object... formatArgs)\n  {\n    if (formatArgs == null || formatArgs.length == 0) {\n      return message;\n    }\n    try {\n      return String.format(Locale.ENGLISH, message, formatArgs);\n    }\n    catch (IllegalFormatException e) {\n      StringBuilder bob = new StringBuilder(message);\n      for (Object formatArg : formatArgs) {\n        bob.append(\"; \").append(formatArg);\n      }\n      return bob.toString();\n    }\n  }"}, {"instruction": "Attempts to convert the publisher to the given type.\n\n@param object The object to convert\n@param publisherType The publisher type\n@param <T> The generic type\n@return The Resulting in publisher", "input": "Java", "output": "public static <T> T convertPublisher(Object object, Class<T> publisherType) {\n        Objects.requireNonNull(object, \"Invalid argument [object]: \" + object);\n        Objects.requireNonNull(object, \"Invalid argument [publisherType]: \" + publisherType);\n        if (object instanceof CompletableFuture) {\n            @SuppressWarnings(\"unchecked\") Publisher<T> futurePublisher = (Publisher<T>) Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));\n            return ConversionService.SHARED.convert(futurePublisher, publisherType)\n                    .orElseThrow(() -> new IllegalArgumentException(\"Unsupported Reactive type: \" + object.getClass()));\n        } else {\n            return ConversionService.SHARED.convert(object, publisherType)\n                    .orElseThrow(() -> new IllegalArgumentException(\"Unsupported Reactive type: \" + object.getClass()));\n        }\n    }"}, {"instruction": "\u8f6c\u6362\u4e3aProperties\u5bf9\u8c61\uff0c\u539f\u5206\u7ec4\u53d8\u4e3a\u524d\u7f00\n\n@return Properties\u5bf9\u8c61", "input": "Java", "output": "public Properties toProperties() {\r\n\t\tfinal Properties properties = new Properties();\r\n\t\tString group;\r\n\t\tfor (Entry<String, LinkedHashMap<String, String>> groupEntry : this.groupedMap.entrySet()) {\r\n\t\t\tgroup = groupEntry.getKey();\r\n\t\t\tfor (Entry<String, String> entry : groupEntry.getValue().entrySet()) {\r\n\t\t\t\tproperties.setProperty(StrUtil.isEmpty(group) ? entry.getKey() : group + CharUtil.DOT + entry.getKey(), entry.getValue());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn properties;\r\n\t}"}, {"instruction": "Replicates all ASG status changes to peer eureka nodes except for\nreplication traffic to this node.", "input": "Java", "output": "private void replicateASGInfoToReplicaNodes(final String asgName,\n                                                final ASGStatus newStatus, final PeerEurekaNode node) {\n        CurrentRequestVersion.set(Version.V2);\n        try {\n            node.statusUpdate(asgName, newStatus);\n        } catch (Throwable e) {\n            logger.error(\"Cannot replicate ASG status information to {}\", node.getServiceUrl(), e);\n        }\n    }"}, {"instruction": "Sets the maximum size of the page.\n<p>\nIf the given maximum size is greater than the current maximum size a new page will be loaded, otherwise the current page\nwill be shrunk to meet the given maximum size. In both cases the {@code TableModelListener} will be notified of the\nchange.\n</p>\n<p>\nThe call to this method has no effect if the given maximum size is equal to the current maximum size.\n</p>\n\n@param maxPageSize the new maximum page size\n@throws IllegalArgumentException if {@code maxPageSize} is negative or zero.\n@see #setMaxPageSizeWithoutPageChanges(int)\n@see TableModelListener", "input": "Java", "output": "public void setMaxPageSize(final int maxPageSize) {\n\t\tif (maxPageSize <= 0) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter maxPageSize must be greater than zero.\");\n\t\t}\n\t\tif (this.maxPageSize == maxPageSize) {\n\t\t\treturn;\n\t\t}\n\t\tint oldMaxPageSize = this.maxPageSize;\n\t\tsetMaxPageSizeWithoutPageChanges(maxPageSize);\n\n\t\tint rowCount = getRowCount();\n\t\tif (rowCount > 0) {\n\t\t\tif (maxPageSize > oldMaxPageSize) {\n\t\t\t\tschedule(dataOffset);\n\t\t\t} else if (data.size() > maxPageSize) {\n\t\t\t\tfinal List<T> shrunkData = data.subList(0, maxPageSize);\n\n\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tsetData(dataOffset, new ArrayList<>(shrunkData));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}"}, {"instruction": "\u8bfb\u53d6\u7c7b\u76f8\u5bf9\u8def\u5f84\u5185\u5bb9\n\n@param file \u6587\u4ef6\n@return \u6587\u4ef6\u5185\u5bb9\uff08\u6309\u884c\uff09\n@throws IOException \u53d1\u9001IO\u5f02\u5e38", "input": "Java", "output": "public static List<String> readLines(File file) throws IOException {\n        List<String> lines = new ArrayList<String>();\n        InputStreamReader reader = null;\n        BufferedReader bufferedReader = null;\n        try {\n            reader = new FileReader(file);\n            bufferedReader = new BufferedReader(reader);\n            String lineText = null;\n            while ((lineText = bufferedReader.readLine()) != null) {\n                lines.add(lineText);\n            }\n            return lines;\n        } finally {\n            if (bufferedReader != null) {\n                bufferedReader.close();\n            }\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }"}, {"instruction": "Inherited.", "input": "Java", "output": "public InputStream readProtectedResource(URL url, OAuthConsumerToken accessToken, String httpMethod) throws OAuthRequestFailedException {\n    if (accessToken == null) {\n      throw new OAuthRequestFailedException(\"A valid access token must be supplied.\");\n    }\n\n    ProtectedResourceDetails resourceDetails = getProtectedResourceDetailsService().loadProtectedResourceDetailsById(accessToken.getResourceId());\n    if ((!resourceDetails.isAcceptsAuthorizationHeader()) && !\"POST\".equalsIgnoreCase(httpMethod) && !\"PUT\".equalsIgnoreCase(httpMethod)) {\n      throw new IllegalArgumentException(\"Protected resource \" + resourceDetails.getId() + \" cannot be accessed with HTTP method \" +\n        httpMethod + \" because the OAuth provider doesn't accept the OAuth Authorization header.\");\n    }\n\n    return readResource(resourceDetails, url, httpMethod, accessToken, resourceDetails.getAdditionalParameters(), null);\n  }"}, {"instruction": "\u68c0\u67e5\u76ee\u6807\u7c7b\u662f\u5426\u53ef\u4ee5\u4ece\u539f\u7c7b\u8f6c\u5316<br>\n\u8f6c\u5316\u5305\u62ec\uff1a<br>\n1\u3001\u539f\u7c7b\u662f\u5bf9\u8c61\uff0c\u76ee\u6807\u7c7b\u578b\u662f\u539f\u7c7b\u578b\u5b9e\u73b0\u7684\u63a5\u53e3<br>\n2\u3001\u76ee\u6807\u7c7b\u578b\u662f\u539f\u7c7b\u578b\u7684\u7236\u7c7b<br>\n3\u3001\u4e24\u8005\u662f\u539f\u59cb\u7c7b\u578b\u6216\u8005\u5305\u88c5\u7c7b\u578b\uff08\u76f8\u4e92\u8f6c\u6362\uff09\n\n@param targetType \u76ee\u6807\u7c7b\u578b\n@param sourceType \u539f\u7c7b\u578b\n@return \u662f\u5426\u53ef\u8f6c\u5316", "input": "Java", "output": "public static boolean isAssignable(Class<?> targetType, Class<?> sourceType) {\r\n\t\tif (null == targetType || null == sourceType) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// \u5bf9\u8c61\u7c7b\u578b\r\n\t\tif (targetType.isAssignableFrom(sourceType)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// \u57fa\u672c\u7c7b\u578b\r\n\t\tif (targetType.isPrimitive()) {\r\n\t\t\t// \u539f\u59cb\u7c7b\u578b\r\n\t\t\tClass<?> resolvedPrimitive = BasicType.wrapperPrimitiveMap.get(sourceType);\r\n\t\t\tif (resolvedPrimitive != null && targetType.equals(resolvedPrimitive)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// \u5305\u88c5\u7c7b\u578b\r\n\t\t\tClass<?> resolvedWrapper = BasicType.primitiveWrapperMap.get(sourceType);\r\n\t\t\tif (resolvedWrapper != null && targetType.isAssignableFrom(resolvedWrapper)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}"}, {"instruction": "Handle registered service loaded event.\n\n@param event the event", "input": "Java", "output": "@EventListener\n    public void handleRegisteredServicesLoadedEvent(final CasRegisteredServicesLoadedEvent event) {\n        event.getServices()\n            .stream()\n            .filter(OidcRegisteredService.class::isInstance)\n            .forEach(s -> {\n                LOGGER.trace(\"Attempting to reconcile scopes and attributes for service [{}] of type [{}]\",\n                    s.getServiceId(), s.getClass().getSimpleName());\n                this.scopeToAttributesFilter.reconcile(s);\n            });\n    }"}, {"instruction": "\u5408\u5e76pipeline\u53c2\u6570\u8bbe\u7f6e", "input": "Java", "output": "public void merge(PipelineParameter pipelineParameter) {\n        try {\n            Field[] fields = this.getClass().getDeclaredFields();\n            for (int i = 0; i < fields.length; i++) {\n                Field field = fields[i];\n                // Skip static and final fields.\n                if (Modifier.isStatic(field.getModifiers()) || Modifier.isFinal(field.getModifiers())) {\n                    continue;\n                }\n\n                ReflectionUtils.makeAccessible(field);\n                Object srcValue = field.get(pipelineParameter);\n                if (srcValue != null) { // \u5ffd\u7565null\u503c\n                    field.set(this, srcValue);\n                }\n            }\n        } catch (Exception e) {\n            // ignore\n        }\n    }"}, {"instruction": "Initialize the logging system according to preferences expressed through the\n{@link Environment} and the classpath.\n@param environment the environment\n@param classLoader the classloader", "input": "Java", "output": "protected void initialize(ConfigurableEnvironment environment,\n\t\t\tClassLoader classLoader) {\n\t\tnew LoggingSystemProperties(environment).apply();\n\t\tLogFile logFile = LogFile.get(environment);\n\t\tif (logFile != null) {\n\t\t\tlogFile.applyToSystemProperties();\n\t\t}\n\t\tinitializeEarlyLoggingLevel(environment);\n\t\tinitializeSystem(environment, this.loggingSystem, logFile);\n\t\tinitializeFinalLoggingLevels(environment, this.loggingSystem);\n\t\tregisterShutdownHookIfNecessary(environment, this.loggingSystem);\n\t}"}, {"instruction": "Accepts submission from the configuration page.", "input": "Java", "output": "@RequirePOST\n    public synchronized void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, FormException {\n        BulkChange bc = new BulkChange(this);\n        try {\n            checkPermission(ADMINISTER);\n\n            JSONObject json = req.getSubmittedForm();\n\n            systemMessage = Util.nullify(req.getParameter(\"system_message\"));\n\n            boolean result = true;\n            for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigUnclassified())\n                result &= configureDescriptor(req,json,d);\n            \n            save();\n            updateComputerList();\n            if(result)\n                FormApply.success(req.getContextPath()+'/').generateResponse(req, rsp, null);\n            else\n                FormApply.success(\"configure\").generateResponse(req, rsp, null);    // back to config\n        } finally {\n            bc.commit();\n        }\n    }"}, {"instruction": "TODO duplicated elsewhere", "input": "Java", "output": "private static void assertNoIncompatibleAnnotations(Class<? extends Annotation> annotation,\n                                                        Field field,\n                                                        Class<? extends Annotation>... undesiredAnnotations) {\n        for (Class<? extends Annotation> u : undesiredAnnotations) {\n            if (field.isAnnotationPresent(u)) {\n                throw unsupportedCombinationOfAnnotations(annotation.getSimpleName(),\n                                                          u.getSimpleName());\n            }\n        }\n    }"}, {"instruction": "\u7ed3\u679c\u7684\u6761\u76ee\u6570\n@param conn \u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\n@param where \u67e5\u8be2\u6761\u4ef6\n@return \u590d\u5408\u6761\u4ef6\u7684\u7ed3\u679c\u6570\n@throws SQLException SQL\u6267\u884c\u5f02\u5e38", "input": "Java", "output": "public int count(Connection conn, Entity where) throws SQLException {\r\n\t\tcheckConn(conn);\r\n\t\t\r\n\t\tfinal Query query = new Query(SqlUtil.buildConditions(where), where.getTableName());\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tps = dialect.psForCount(conn, query);\r\n\t\t\treturn SqlExecutor.query(ps, new NumberHandler()).intValue();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\tDbUtil.close(ps);\r\n\t\t}\r\n\t}"}, {"instruction": "Set the trainingListeners for the ComputationGraph (and all layers in the network)", "input": "Java", "output": "public void setListeners(TrainingListener... listeners) {\n        List<TrainingListener> list = new ArrayList<>();\n        //Check: user might have done setListeners(null) thinking this would clear the current listeners.\n        //This results in an TrainingListener[1] with a single null value -> results in a NPE later\n        if (listeners != null && listeners.length > 0) {\n            for (TrainingListener i : listeners) {\n                if (i != null)\n                    list.add(i);\n            }\n        }\n        setListeners(list);\n    }"}, {"instruction": "Converts a parameters to type arguments.\n@param parameters The parameters\n@return The type arguments", "input": "Java", "output": "@NotNull\n    protected Map<String, Object> toParameterTypes(ParameterElement... parameters) {\n        final LinkedHashMap<String, Object> map = new LinkedHashMap<>(parameters.length);\n        for (ParameterElement ce : parameters) {\n            final ClassElement type = ce.getType();\n            if (type == null) {\n                continue;\n            }\n            final Type typeReference = getTypeForElement(type);\n            map.put(ce.getName(), typeReference);\n        }\n\n        return map;\n    }"}, {"instruction": "Returns all blocking result partitions whose receivers can be scheduled/updated.", "input": "Java", "output": "List<IntermediateResultPartition> finishAllBlockingPartitions() {\n\t\tList<IntermediateResultPartition> finishedBlockingPartitions = null;\n\n\t\tfor (IntermediateResultPartition partition : resultPartitions.values()) {\n\t\t\tif (partition.getResultType().isBlocking() && partition.markFinished()) {\n\t\t\t\tif (finishedBlockingPartitions == null) {\n\t\t\t\t\tfinishedBlockingPartitions = new LinkedList<IntermediateResultPartition>();\n\t\t\t\t}\n\n\t\t\t\tfinishedBlockingPartitions.add(partition);\n\t\t\t}\n\t\t}\n\n\t\tif (finishedBlockingPartitions == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\telse {\n\t\t\treturn finishedBlockingPartitions;\n\t\t}\n\t}"}, {"instruction": "Attempt to cancel job", "input": "Java", "output": "@Override public final boolean cancel( boolean mayInterruptIfRunning ) {\n    boolean did = false;\n    synchronized(this) {        // Install the answer under lock\n      if( !isCancelled() ) {\n        did = true;             // Did cancel (was not cancelled already)\n        _target.taskRemove(_tasknum);\n        _target = null;         // Flag as canceled\n//        UDPTimeOutThread.PENDING.remove(this);\n      }\n      notifyAll();              // notify in any case\n    }\n    return did;\n  }"}, {"instruction": "Calculate the ratio of similarity between 2 strings using LCS\n\n@param strA the first String\n@param strB the second String\n@return the percentage  double number", "input": "Java", "output": "public double getMatchRatio(String strA, String strB) {\n        if (strA == null && strB == null) {\n            return MAX_RATIO;\n            \n        } else if (strA == null || strB == null) {\n            return MIN_RATIO;\n        }\n        \n        if (strA.isEmpty() && strB.isEmpty()) {\n            return MAX_RATIO;\n            \n        } else if (strA.isEmpty() || strB.isEmpty()) {\n            return MIN_RATIO;\n        }\n                \n        //get the percentage match against the longer of the 2 strings\n        return (double)getLCS(strA, strB).length() / Math.max(strA.length(), strB.length());\n    }"}, {"instruction": "finds any stages for a dashboard that aren't mapped.\n@param dashboard\n@return a list of deploy PipelineStages that are not mapped", "input": "Java", "output": "private List<PipelineStage> findUnmappedStages(Dashboard dashboard,List<PipelineStage> pipelineStageList){\n        List<PipelineStage> unmappedStages = new ArrayList<>();\n\n        Map<PipelineStage, String> stageToEnvironmentNameMap = PipelineUtils.getStageToEnvironmentNameMap(dashboard);\n\n        for (PipelineStage systemStage : pipelineStageList) {\n            if (PipelineStageType.DEPLOY.equals(systemStage.getType())) {\n                String mappedName = stageToEnvironmentNameMap.get(systemStage);\n                if (mappedName == null || mappedName.isEmpty()) {\n                    unmappedStages.add(systemStage);\n                }\n            }\n        }\n\n        return unmappedStages;\n    }"}, {"instruction": "Lookup words in text\n\n@param text  text to look up user dictionary matches for\n@return list of UserDictionaryMatch, not null", "input": "Java", "output": "public List<UserDictionaryMatch> findUserDictionaryMatches(String text) {\n        List<UserDictionaryMatch> matchInfos = new ArrayList<>();\n        int startIndex = 0;\n\n        while (startIndex < text.length()) {\n            int matchLength = 0;\n\n            while (startIndex + matchLength < text.length()\n                            && entries.containsKeyPrefix(text.substring(startIndex, startIndex + matchLength + 1))) {\n                matchLength++;\n            }\n\n            if (matchLength > 0) {\n                String match = text.substring(startIndex, startIndex + matchLength);\n                int[] details = entries.get(match);\n\n                if (details != null) {\n                    matchInfos.addAll(makeMatchDetails(startIndex, details));\n                }\n            }\n\n            startIndex++;\n        }\n\n        return matchInfos;\n    }"}, {"instruction": "Delete registered service.\n\n@param id the id\n@return the registered service", "input": "Java", "output": "@DeleteOperation(produces = {ActuatorMediaType.V2_JSON, \"application/vnd.cas.services+yaml\", MediaType.APPLICATION_JSON_VALUE})\n    public RegisteredService deleteService(@Selector final String id) {\n        if (NumberUtils.isDigits(id)) {\n            val svc = this.servicesManager.findServiceBy(Long.parseLong(id));\n            if (svc != null) {\n                return this.servicesManager.delete(svc);\n            }\n        } else {\n            val svc = this.servicesManager.findServiceBy(id);\n            if (svc != null) {\n                return this.servicesManager.delete(svc);\n            }\n        }\n        LOGGER.warn(\"Could not locate service definition by id [{}]\", id);\n        return null;\n    }"}, {"instruction": "Return the absolute temp dir for given web server.\n@param prefix server name\n@return the temp dir for given server.", "input": "Java", "output": "protected final File createTempDir(String prefix) {\n\t\ttry {\n\t\t\tFile tempDir = File.createTempFile(prefix + \".\", \".\" + getPort());\n\t\t\ttempDir.delete();\n\t\t\ttempDir.mkdir();\n\t\t\ttempDir.deleteOnExit();\n\t\t\treturn tempDir;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new WebServerException(\n\t\t\t\t\t\"Unable to create tempDir. java.io.tmpdir is set to \"\n\t\t\t\t\t\t\t+ System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\t\tex);\n\t\t}\n\t}"}, {"instruction": "\u4ececontent\u4e2d\u5339\u914d\u51fa\u591a\u4e2a\u503c\u5e76\u6839\u636etemplate\u751f\u6210\u65b0\u7684\u5b57\u7b26\u4e32<br>\n\u4f8b\u5982\uff1a<br>\ncontent 2013\u5e745\u6708 pattern (.*?)\u5e74(.*?)\u6708 template\uff1a $1-$2 return 2013-5\n\n@param pattern \u5339\u914d\u6b63\u5219\n@param content \u88ab\u5339\u914d\u7684\u5185\u5bb9\n@param template \u751f\u6210\u5185\u5bb9\u6a21\u677f\uff0c\u53d8\u91cf $1 \u8868\u793agroup1\u7684\u5185\u5bb9\uff0c\u4ee5\u6b64\u7c7b\u63a8\n@return \u65b0\u5b57\u7b26\u4e32", "input": "Java", "output": "public static String extractMulti(Pattern pattern, CharSequence content, String template) {\r\n\t\tif (null == content || null == pattern || null == template) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t//\u63d0\u53d6\u6a21\u677f\u4e2d\u7684\u7f16\u53f7\r\n\t\tfinal TreeSet<Integer> varNums = new TreeSet<>(new Comparator<Integer>() {\r\n\t\t\t@Override\r\n\t\t\tpublic int compare(Integer o1, Integer o2) {\r\n\t\t\t\treturn ObjectUtil.compare(o2, o1);\r\n\t\t\t}\r\n\t\t});\r\n\t\tfinal Matcher matcherForTemplate = PatternPool.GROUP_VAR.matcher(template);\r\n\t\twhile (matcherForTemplate.find()) {\r\n\t\t\tvarNums.add(Integer.parseInt(matcherForTemplate.group(1)));\r\n\t\t}\r\n\r\n\t\tfinal Matcher matcher = pattern.matcher(content);\r\n\t\tif (matcher.find()) {\r\n\t\t\tfor (Integer group : varNums) {\r\n\t\t\t\ttemplate = template.replace(\"$\" + group, matcher.group(group));\r\n\t\t\t}\r\n\t\t\treturn template;\r\n\t\t}\r\n\t\treturn null;\r\n\t}"}, {"instruction": "\u6267\u884c\u6bd4\u8f83<br>\n\u6309\u7167\u6bd4\u8f83\u5668\u94fe\u7684\u987a\u5e8f\u5206\u522b\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u8f83\u51fa\u76f8\u7b49\u5219\u8f6c\u5411\u4e0b\u4e00\u4e2a\u6bd4\u8f83\u5668\uff0c\u5426\u5219\u76f4\u63a5\u8fd4\u56de\n\n@param o1 \u7b2c\u4e00\u4e2a\u5bf9\u8c61\n@param o2 \u7b2c\u4e8c\u4e2a\u5bf9\u8c61\n@return -1, 0, or 1\n@throws UnsupportedOperationException \u5982\u679c\u6bd4\u8f83\u5668\u94fe\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u5b8c\u6210\u6bd4\u8f83", "input": "Java", "output": "@Override\r\n\tpublic int compare(final E o1, final E o2) throws UnsupportedOperationException {\r\n\t\tif (lock == false) {\r\n\t\t\tcheckChainIntegrity();\r\n\t\t\tlock = true;\r\n\t\t}\r\n\t\t\r\n\t\tfinal Iterator<Comparator<E>> comparators = chain.iterator();\r\n\t\tComparator<? super E> comparator;\r\n\t\tint retval;\r\n\t\tfor (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\r\n\t\t\tcomparator = comparators.next();\r\n\t\t\tretval = comparator.compare(o1, o2);\r\n\t\t\tif (retval != 0) {\r\n\t\t\t\t// invert the order if it is a reverse sort\r\n\t\t\t\tif (true == orderingBits.get(comparatorIndex)) {\r\n\t\t\t\t\tretval = (retval > 0) ? -1 : 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn retval;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if comparators are exhausted, return 0\r\n\t\treturn 0;\r\n\t}"}, {"instruction": "@param req HTTP request\n\n@return serialized user map", "input": "Java", "output": "@GET\n  @Path(\"/db/{authenticatorName}/cachedSerializedUserMap\")\n  @Produces(SmileMediaTypes.APPLICATION_JACKSON_SMILE)\n  @Consumes(MediaType.APPLICATION_JSON)\n  @ResourceFilters(BasicSecurityResourceFilter.class)\n  public Response getCachedSerializedUserMap(\n      @Context HttpServletRequest req,\n      @PathParam(\"authenticatorName\") final String authenticatorName\n  )\n  {\n    return handler.getCachedSerializedUserMap(authenticatorName);\n  }"}, {"instruction": "Decodes a byte from the final Run-Length Encoding stage, pulling a new byte from the\nBurrows-Wheeler Transform stage when required.\n@return The decoded byte, or -1 if there are no more bytes", "input": "Java", "output": "public int read() {\n        while (rleRepeat < 1) {\n            if (bwtBytesDecoded == bwtBlockLength) {\n                return -1;\n            }\n\n            int nextByte = decodeNextBWTByte();\n            if (nextByte != rleLastDecodedByte) {\n                // New byte, restart accumulation\n                rleLastDecodedByte = nextByte;\n                rleRepeat = 1;\n                rleAccumulator = 1;\n                crc.updateCRC(nextByte);\n            } else {\n                if (++rleAccumulator == 4) {\n                    // Accumulation complete, start repetition\n                    int rleRepeat = decodeNextBWTByte() + 1;\n                    this.rleRepeat = rleRepeat;\n                    rleAccumulator = 0;\n                    crc.updateCRC(nextByte, rleRepeat);\n                } else {\n                    rleRepeat = 1;\n                    crc.updateCRC(nextByte);\n                }\n            }\n        }\n        rleRepeat--;\n\n        return rleLastDecodedByte;\n    }"}, {"instruction": "\u7528\u4e8eChannel\u7684\u914d\u7f6e\u5f3a\u5236\u63a8\u9001\n\n@param channelId\n@param status\n@throws WebxException", "input": "Java", "output": "public void doNotify(@Param(\"pageIndex\") int pageIndex, @Param(\"searchKey\") String searchKey,\n                         @Param(\"channelId\") Long channelId, @Param(\"status\") String status, Navigator nav)\n                                                                                                           throws WebxException {\n\n        channelService.notifyChannel(channelId);\n        nav.redirectToLocation(\"channelList.htm?pageIndex=\" + pageIndex + \"&searchKey=\" + urlEncode(searchKey));\n    }"}, {"instruction": "Parse string as key-value string and return the value matches key name.\nexample:\nkeyvalue('k1=v1;k2=v2', ';', '=', 'k2') = 'v2'\nkeyvalue('k1:v1,k2:v2', ',', ':', 'k3') = NULL\n\n@param str     target string.\n@param pairSeparator  separator between key-value tuple.\n@param kvSeparator  separator between key and value.\n@param keyName name of the key whose value you want return.\n@return target value.", "input": "Java", "output": "public static BinaryString keyValue(\n\t\tBinaryString str, BinaryString pairSeparator, BinaryString kvSeparator, BinaryString keyName) {\n\t\tif (str == null || str.getSizeInBytes() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (pairSeparator != null && pairSeparator.getSizeInBytes() == 1 &&\n\t\t\tkvSeparator != null && kvSeparator.getSizeInBytes() == 1) {\n\t\t\treturn str.keyValue(pairSeparator.getByte(0), kvSeparator.getByte(0), keyName);\n\t\t} else {\n\t\t\treturn BinaryString.fromString(\n\t\t\t\tkeyValue(\n\t\t\t\t\tBinaryString.safeToString(str),\n\t\t\t\t\tBinaryString.safeToString(pairSeparator),\n\t\t\t\t\tBinaryString.safeToString(kvSeparator),\n\t\t\t\t\tBinaryString.safeToString(keyName)));\n\t\t}\n\t}"}, {"instruction": "Returns a future holding the serialized request result.\n\n@param jobId                     JobID of the job the queryable state\nbelongs to\n@param queryableStateName        Name under which the state is queryable\n@param keyHashCode               Integer hash code of the key (result of\na call to {@link Object#hashCode()}\n@param serializedKeyAndNamespace Serialized key and namespace to query\nKvState instance with\n@return Future holding the serialized result", "input": "Java", "output": "private CompletableFuture<KvStateResponse> getKvState(\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal int keyHashCode,\n\t\t\tfinal byte[] serializedKeyAndNamespace) {\n\t\tLOG.debug(\"Sending State Request to {}.\", remoteAddress);\n\t\ttry {\n\t\t\tKvStateRequest request = new KvStateRequest(jobId, queryableStateName, keyHashCode, serializedKeyAndNamespace);\n\t\t\treturn client.sendRequest(remoteAddress, request);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Unable to send KVStateRequest: \", e);\n\t\t\treturn FutureUtils.getFailedFuture(e);\n\t\t}\n\t}"}, {"instruction": "{@inheritDoc}\nGets the remote ip from the request, and invokes spnego if it isn't filtered.\n\n@param context the request context\n@return {@link #yes()} if spnego should be invoked and ip isn't filtered,\n{@link #no()} otherwise.", "input": "Java", "output": "@Override\n    protected Event doExecute(final RequestContext context) {\n        val remoteIp = getRemoteIp(context);\n        LOGGER.debug(\"Current user IP [{}]\", remoteIp);\n        if (shouldDoSpnego(remoteIp)) {\n            LOGGER.info(\"Spnego should be activated for [{}]\", remoteIp);\n            return yes();\n        }\n        LOGGER.info(\"Spnego should is skipped for [{}]\", remoteIp);\n        return no();\n    }"}, {"instruction": "------------------------------------ File Input Format -----------------------------------------", "input": "Java", "output": "public <X> DataSource<X> readFile(FileInputFormat<X> inputFormat, String filePath) {\n\t\tif (inputFormat == null) {\n\t\t\tthrow new IllegalArgumentException(\"InputFormat must not be null.\");\n\t\t}\n\t\tif (filePath == null) {\n\t\t\tthrow new IllegalArgumentException(\"The file path must not be null.\");\n\t\t}\n\n\t\tinputFormat.setFilePath(new Path(filePath));\n\t\ttry {\n\t\t\treturn createInput(inputFormat, TypeExtractor.getInputFormatTypes(inputFormat));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new InvalidProgramException(\"The type returned by the input format could not be automatically determined. \" +\n\t\t\t\t\t\"Please specify the TypeInformation of the produced type explicitly by using the \" +\n\t\t\t\t\t\"'createInput(InputFormat, TypeInformation)' method instead.\");\n\t\t}\n\t}"}, {"instruction": "Handle SLO Redirect profile request.\n\n@param response the response\n@param request  the request\n@throws Exception the exception", "input": "Java", "output": "@GetMapping(path = SamlIdPConstants.ENDPOINT_SAML2_SLO_PROFILE_REDIRECT)\n    protected void handleSaml2ProfileSLOPostRequest(final HttpServletResponse response,\n                                                    final HttpServletRequest request) throws Exception {\n        val decoder = getSamlProfileHandlerConfigurationContext().getSamlMessageDecoders().getInstance(HttpMethod.GET);\n        handleSloProfileRequest(response, request, decoder);\n    }"}, {"instruction": "Gets a list of unprotected root actions.\nThese URL prefixes should be exempted from access control checks by container-managed security.\nIdeally would be synchronized with {@link #getTarget}.\n@return a list of {@linkplain Action#getUrlName URL names}\n@since 1.495", "input": "Java", "output": "public Collection<String> getUnprotectedRootActions() {\n        Set<String> names = new TreeSet<>();\n        names.add(\"jnlpJars\"); // TODO cleaner to refactor doJnlpJars into a URA (see also JENKINS-44100)\n        // TODO consider caching (expiring cache when actions changes)\n        for (Action a : getActions()) {\n            if (a instanceof UnprotectedRootAction) {\n                String url = a.getUrlName();\n                if (url == null) continue;\n                names.add(url);\n            }\n        }\n        return names;\n    }"}, {"instruction": "The current flow element, will be filled during operation execution", "input": "Java", "output": "public FlowElement getCurrentFlowElement() {\n    if (currentFlowElement == null) {\n      String processDefinitionId = getProcessDefinitionId();\n      if (processDefinitionId != null) {\n        org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);\n        currentFlowElement = process.getFlowElement(getCurrentActivityId(), true);\n      }\n    }\n    return currentFlowElement;\n  }"}, {"instruction": "\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6bcf\u4e00\u884c\u6570\u636e\n\n@param <T> \u96c6\u5408\u7c7b\u578b\n@param collection \u96c6\u5408\n@return \u6587\u4ef6\u4e2d\u7684\u6bcf\u884c\u5185\u5bb9\u7684\u96c6\u5408\n@throws IORuntimeException IO\u5f02\u5e38", "input": "Java", "output": "public <T extends Collection<String>> T readLines(T collection) throws IORuntimeException {\r\n\t\tBufferedReader reader = null;\r\n\t\ttry {\r\n\t\t\treader = FileUtil.getReader(file, charset);\r\n\t\t\tString line;\r\n\t\t\twhile (true) {\r\n\t\t\t\tline = reader.readLine();\r\n\t\t\t\tif (line == null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcollection.add(line);\r\n\t\t\t}\r\n\t\t\treturn collection;\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new IORuntimeException(e);\r\n\t\t} finally {\r\n\t\t\tIoUtil.close(reader);\r\n\t\t}\r\n\t}"}, {"instruction": "validates the text value using the list of validators provided by the\nuser {{@link #setValidators(ValidatorBase...)}\n\n@return true if the value is valid else false", "input": "Java", "output": "public static boolean validate(Control control) {\n        ValidationFacade facade = (ValidationFacade) control.getParent();\n        for (ValidatorBase validator : facade.validators) {\n            validator.setSrcControl(facade.controlProperty.get());\n            validator.validate();\n            if (validator.getHasErrors()) {\n                facade.activeValidator.set(validator);\n                control.pseudoClassStateChanged(PSEUDO_CLASS_ERROR, true);\n                return false;\n            }\n        }\n        control.pseudoClassStateChanged(PSEUDO_CLASS_ERROR, false);\n        facade.activeValidator.set(null);\n        return true;\n    }"}, {"instruction": "Gets registered service and facade.\n\n@param request the request\n@return the registered service and facade", "input": "Java", "output": "protected Pair<SamlRegisteredService, SamlRegisteredServiceServiceProviderMetadataFacade> getRegisteredServiceAndFacade(final AuthnRequest request) {\n        val issuer = SamlIdPUtils.getIssuerFromSamlObject(request);\n        LOGGER.debug(\"Located issuer [{}] from authentication context\", issuer);\n\n        val registeredService = verifySamlRegisteredService(issuer);\n\n        LOGGER.debug(\"Located SAML metadata for [{}]\", registeredService.getServiceId());\n        val adaptor = getSamlMetadataFacadeFor(registeredService, request);\n\n        if (adaptor.isEmpty()) {\n            throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE,\n                \"Cannot find metadata linked to \" + issuer);\n        }\n        val facade = adaptor.get();\n        return Pair.of(registeredService, facade);\n    }"}, {"instruction": "Write an unserialized message with a known length, uncompressed.", "input": "Java", "output": "private int writeKnownLengthUncompressed(InputStream message, int messageLength)\n      throws IOException {\n    if (maxOutboundMessageSize >= 0 && messageLength > maxOutboundMessageSize) {\n      throw Status.RESOURCE_EXHAUSTED\n          .withDescription(\n              String.format(\"message too large %d > %d\", messageLength , maxOutboundMessageSize))\n          .asRuntimeException();\n    }\n    ByteBuffer header = ByteBuffer.wrap(headerScratch);\n    header.put(UNCOMPRESSED);\n    header.putInt(messageLength);\n    // Allocate the initial buffer chunk based on frame header + payload length.\n    // Note that the allocator may allocate a buffer larger or smaller than this length\n    if (buffer == null) {\n      buffer = bufferAllocator.allocate(header.position() + messageLength);\n    }\n    writeRaw(headerScratch, 0, header.position());\n    return writeToOutputStream(message, outputStreamAdapter);\n  }"}, {"instruction": "---------------------------------------------------------------------------------------------", "input": "Java", "output": "void writeSnapshotData(DataOutputView out) throws IOException {\n\t\tout.writeUTF(pojoClass.getName());\n\t\twriteOptionalMap(out, fieldSerializerSnapshots, PojoFieldUtils::writeField, TypeSerializerSnapshot::writeVersionedSnapshot);\n\t\twriteOptionalMap(out, registeredSubclassSerializerSnapshots, NoOpWriter.noopWriter(), TypeSerializerSnapshot::writeVersionedSnapshot);\n\t\twriteOptionalMap(out, nonRegisteredSubclassSerializerSnapshots, NoOpWriter.noopWriter(), TypeSerializerSnapshot::writeVersionedSnapshot);\n\t}"}, {"instruction": "Sets the required and optional fields that should be shown in the panel.\n<p>\nAny fields previously set are removed.\n\n@param requiredFields the required fields.\n@param optionalFields the optional fields.\n@throws IllegalArgumentException if the any of the arguments is {@code null}.\n@since 2.7.0\n@see #setFields(String[])", "input": "Java", "output": "public void setFields(String[] requiredFields, String[] optionalFields) {\n\t\tif (requiredFields == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter requiredFields must not be null.\");\n\t\t}\n\n\t\tif (optionalFields == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter optionalFields must not be null.\");\n\t\t}\n\n\t\tthis.requiredFields = requiredFields;\n\t\tthis.optionalFields = optionalFields;\n\n\t\tthis.textFields = new HashMap<>(requiredFields.length + optionalFields.length);\n\n\t\tremoveAll();\n\n\t\tint fieldIndex = 0;\n\t\tfor (String fieldName : requiredFields) {\n\t\t\taddRequiredField(fieldName, fieldIndex);\n\t\t\tfieldIndex++;\n\t\t}\n\n\t\tfor (String fieldName : optionalFields) {\n\t\t\taddField(fieldName, fieldIndex);\n\t\t\tfieldIndex++;\n\t\t}\n\t\tadd(Box.createVerticalGlue(), LayoutHelper.getGBC(0, fieldIndex, 2, 0.0d, 1.0d));\n\n\t\tvalidate();\n\t}"}, {"instruction": "Gets the request body from the request.\n\n@param request the request\n@return the request body", "input": "Java", "output": "private static String getRequestBody(final HttpServletRequest request) {\n        val body = readRequestBodyIfAny(request);\n        if (!StringUtils.hasText(body)) {\n            LOGGER.trace(\"Looking at the request attribute [{}] to locate SAML request body\", SamlProtocolConstants.PARAMETER_SAML_REQUEST);\n            return (String) request.getAttribute(SamlProtocolConstants.PARAMETER_SAML_REQUEST);\n        }\n        return body;\n    }"}, {"instruction": "ZAP: Added to take into account the package name", "input": "Java", "output": "private List<ClassNameWrapper> getJarClassNames(ClassLoader cl, File file, String packageName) {\r\n    \tList<ClassNameWrapper> classNames = new ArrayList<> ();\r\n        ZipEntry entry = null;\r\n        String className = \"\";\r\n        try (JarFile jarFile = new JarFile(file)) {\r\n            Enumeration<JarEntry> entries = jarFile.entries();\r\n            while (entries.hasMoreElements()) {\r\n                entry = entries.nextElement();\r\n                if (entry.isDirectory() || !entry.getName().endsWith(\".class\")) {\r\n                    continue;\r\n                }\r\n                className = entry.toString().replaceAll(\"\\\\.class$\",\"\").replaceAll(\"/\",\".\");\r\n                if (className.indexOf(packageName) >= 0) {\r\n                    classNames.add(new ClassNameWrapper(cl, className));\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n        \tlogger.error(\"Failed to open file: \" + file.getAbsolutePath(), e);\r\n        }\r\n        return classNames;\r\n    }"}, {"instruction": "Creates the high-availability services for the TaskManagers participating in\na Flink YARN application.\n\n@param flinkConfig  The Flink configuration.\n@param hadoopConfig The Hadoop configuration for the YARN cluster.\n\n@return The created high-availability services.\n\n@throws IOException Thrown, if the high-availability services could not be initialized.", "input": "Java", "output": "public static YarnHighAvailabilityServices forYarnTaskManager(\n\t\t\tConfiguration flinkConfig,\n\t\t\torg.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {\n\n\t\tcheckNotNull(flinkConfig, \"flinkConfig\");\n\t\tcheckNotNull(hadoopConfig, \"hadoopConfig\");\n\n\t\tfinal HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig);\n\t\tswitch (mode) {\n\t\t\tcase NONE:\n\t\t\t\treturn new YarnPreConfiguredMasterNonHaServices(\n\t\t\t\t\tflinkConfig,\n\t\t\t\t\thadoopConfig,\n\t\t\t\t\tHighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION);\n\n\t\t\tcase ZOOKEEPER:\n\t\t\t\tthrow  new UnsupportedOperationException(\"to be implemented\");\n\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalConfigurationException(\"Unrecognized high availability mode: \" + mode);\n\t\t}\n\t}"}, {"instruction": "Returns either the default {@link AvroUtils} which throw an exception in cases where Avro\nwould be needed or loads the specific utils for Avro from flink-avro.", "input": "Java", "output": "public static AvroUtils getAvroUtils() {\n\t\t// try and load the special AvroUtils from the flink-avro package\n\t\ttry {\n\t\t\tClass<?> clazz = Class.forName(AVRO_KRYO_UTILS, false, Thread.currentThread().getContextClassLoader());\n\t\t\treturn clazz.asSubclass(AvroUtils.class).getConstructor().newInstance();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// cannot find the utils, return the default implementation\n\t\t\treturn new DefaultAvroUtils();\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Could not instantiate \" + AVRO_KRYO_UTILS + \".\", e);\n\t\t}\n\t}"}, {"instruction": "Put ticket granting ticket in request and flow scopes.\n\n@param context     the context\n@param ticketValue the ticket value", "input": "Java", "output": "public static void putTicketGrantingTicketInScopes(final RequestContext context, final String ticketValue) {\n        putTicketGrantingTicketIntoMap(context.getRequestScope(), ticketValue);\n        putTicketGrantingTicketIntoMap(context.getFlowScope(), ticketValue);\n\n        var session = context.getFlowExecutionContext().getActiveSession().getParent();\n        while (session != null) {\n            putTicketGrantingTicketIntoMap(session.getScope(), ticketValue);\n            session = session.getParent();\n        }\n    }"}, {"instruction": "Transport has active streams. Start sending keepalives if necessary.", "input": "Java", "output": "public synchronized void onTransportActive() {\n    if (state == State.IDLE) {\n      // When the transport goes active, we do not reset the nextKeepaliveTime. This allows us to\n      // quickly check whether the connection is still working.\n      state = State.PING_SCHEDULED;\n      if (pingFuture == null) {\n        pingFuture = scheduler.schedule(\n            sendPing,\n            keepAliveTimeInNanos - stopwatch.elapsed(TimeUnit.NANOSECONDS),\n            TimeUnit.NANOSECONDS);\n      }\n    } else if (state == State.IDLE_AND_PING_SENT) {\n      state = State.PING_SENT;\n    } // Other states are possible when keepAliveDuringTransportIdle == true\n  }"}, {"instruction": "Generate an alert when a security issue (risk/info) is found. Custom\nalert name, description and solution will be used.\n\n@param risk the risk of the new alert\n@param confidence the confidence of the new alert\n@param name the name of the new alert\n@param description the description of the new alert\n@param uri the affected URI\n@param param the name/ID of the affected parameter\n@param attack the attack that shows the issue\n@param otherInfo other information about the issue\n@param solution the solution for the issue\n@param evidence the evidence (in the response) that shows the issue\n@param msg the message that shows the issue", "input": "Java", "output": "protected void bingo(int risk, int confidence, String name, String description, String uri,\r\n            String param, String attack, String otherInfo, String solution,\r\n            String evidence, HttpMessage msg) {\r\n        \r\n        log.debug(\"New alert pluginid=\" + +this.getId() + \" \" + name + \" uri=\" + uri);\r\n        Alert alert = new Alert(this.getId(), risk, confidence, name);\r\n        if (uri == null || uri.equals(\"\")) {\r\n            uri = msg.getRequestHeader().getURI().toString();\r\n        }\r\n        \r\n        if (param == null) {\r\n            param = \"\";\r\n        }\r\n        \r\n        alert.setDetail(description, uri, param, attack, otherInfo, solution, this.getReference(),\r\n                evidence, this.getCweId(), this.getWascId(), msg);\r\n        \r\n        parent.alertFound(alert);\r\n    }"}, {"instruction": "Blocks a non-worker-thread until completion or interruption.", "input": "Java", "output": "private int externalInterruptibleAwaitDone() throws InterruptedException {\n        int s;\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        while ((s = status) >= 0) {\n            if (U.compareAndSwapInt(this, STATUS, s, s | SIGNAL)) {\n                synchronized (this) {\n                    if (status >= 0)\n                        wait();\n                    else\n                        notifyAll();\n                }\n            }\n        }\n        return s;\n    }"}, {"instruction": "Gets authentication provider for service.\n\n@param service the service\n@return the authentication provider for service", "input": "Java", "output": "public Collection<MultifactorAuthenticationProvider> getAuthenticationProviderForService(final RegisteredService service) {\n        val policy = service.getMultifactorPolicy();\n        if (policy != null) {\n            return policy.getMultifactorAuthenticationProviders().stream()\n                .map(MultifactorAuthenticationUtils::getMultifactorAuthenticationProviderFromApplicationContext)\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .collect(Collectors.toSet());\n        }\n        return null;\n    }"}, {"instruction": "(and return null).", "input": "Java", "output": "public static Long attemptUUIDParseHigh(BufferedString str) {\n    final byte[] buf = str.getBuffer();\n    int i=str.getOffset();\n    if ( i== -1 ) return markBad(str);\n    long hi=0;\n    if( buf[i++]!='-' ) return markBad(str);\n    hi = get2(hi,buf,(i+=2)-2);\n    hi = get2(hi,buf,(i+=2)-2);\n    if( buf[i++]!='-' ) return markBad(str);\n    hi = get2(hi,buf,(i+=2)-2);\n    hi = get2(hi,buf,(i+=2)-2);\n    hi = get2(hi,buf,(i+=2)-2);\n    hi = get2(hi,buf,(i+=2)-2);\n    hi = get2(hi,buf,(i+=2)-2);\n    return attemptUUIDParseEnd(str, hi, buf, i);\n  }"}, {"instruction": "<code>\n.google.cloud.datalabeling.v1beta1.LabelImageOrientedBoundingBoxOperationMetadata image_oriented_bounding_box_details = 14;\n</code>", "input": "Java", "output": "public com.google.cloud.datalabeling.v1beta1.LabelImageOrientedBoundingBoxOperationMetadata\n      getImageOrientedBoundingBoxDetails() {\n    if (detailsCase_ == 14) {\n      return (com.google.cloud.datalabeling.v1beta1.LabelImageOrientedBoundingBoxOperationMetadata)\n          details_;\n    }\n    return com.google.cloud.datalabeling.v1beta1.LabelImageOrientedBoundingBoxOperationMetadata\n        .getDefaultInstance();\n  }"}, {"instruction": "Read bytes into the given {@link ByteBuf} and return the amount.", "input": "Java", "output": "protected final int doReadBytes(ByteBuf byteBuf) throws Exception {\n        int writerIndex = byteBuf.writerIndex();\n        int localReadAmount;\n        unsafe().recvBufAllocHandle().attemptedBytesRead(byteBuf.writableBytes());\n        if (byteBuf.hasMemoryAddress()) {\n            localReadAmount = socket.readAddress(byteBuf.memoryAddress(), writerIndex, byteBuf.capacity());\n        } else {\n            ByteBuffer buf = byteBuf.internalNioBuffer(writerIndex, byteBuf.writableBytes());\n            localReadAmount = socket.read(buf, buf.position(), buf.limit());\n        }\n        if (localReadAmount > 0) {\n            byteBuf.writerIndex(writerIndex + localReadAmount);\n        }\n        return localReadAmount;\n    }"}, {"instruction": "Create alias parser instance.\n\n@param lexerEngine lexical analysis engine.\n@return alias parser instance", "input": "Java", "output": "public static AliasExpressionParser createAliasExpressionParser(final LexerEngine lexerEngine) {\n        switch (lexerEngine.getDatabaseType()) {\n            case H2:\n                return new MySQLAliasExpressionParser(lexerEngine);\n            case MySQL:\n                return new MySQLAliasExpressionParser(lexerEngine);\n            case Oracle:\n                return new OracleAliasExpressionParser(lexerEngine);\n            case SQLServer:\n                return new SQLServerAliasExpressionParser(lexerEngine);\n            case PostgreSQL:\n                return new PostgreSQLAliasExpressionParser(lexerEngine);\n            default:\n                throw new UnsupportedOperationException(String.format(\"Cannot support database type: %s\", lexerEngine.getDatabaseType()));\n        }\n    }"}, {"instruction": "Returns value of network address cache ttl property if not Android environment. For android,\nDnsNameResolver does not cache the dns lookup result.", "input": "Java", "output": "private static long getNetworkAddressCacheTtlNanos(boolean isAndroid) {\n    if (isAndroid) {\n      // on Android, ignore dns cache.\n      return 0;\n    }\n\n    String cacheTtlPropertyValue = System.getProperty(NETWORKADDRESS_CACHE_TTL_PROPERTY);\n    long cacheTtl = DEFAULT_NETWORK_CACHE_TTL_SECONDS;\n    if (cacheTtlPropertyValue != null) {\n      try {\n        cacheTtl = Long.parseLong(cacheTtlPropertyValue);\n      } catch (NumberFormatException e) {\n        logger.log(\n            Level.WARNING,\n            \"Property({0}) valid is not valid number format({1}), fall back to default({2})\",\n            new Object[] {NETWORKADDRESS_CACHE_TTL_PROPERTY, cacheTtlPropertyValue, cacheTtl});\n      }\n    }\n    return cacheTtl > 0 ? TimeUnit.SECONDS.toNanos(cacheTtl) : cacheTtl;\n  }"}, {"instruction": "Strategy method used to create the {@link ApplicationContext}. By default this\nmethod will respect any explicitly set application context or application context\nclass before falling back to a suitable default.\n@return the application context (not yet refreshed)\n@see #setApplicationContextClass(Class)", "input": "Java", "output": "protected ConfigurableApplicationContext createApplicationContext() {\n\t\tClass<?> contextClass = this.applicationContextClass;\n\t\tif (contextClass == null) {\n\t\t\ttry {\n\t\t\t\tswitch (this.webApplicationType) {\n\t\t\t\tcase SERVLET:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tcase REACTIVE:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Unable create a default ApplicationContext, \"\n\t\t\t\t\t\t\t\t+ \"please specify an ApplicationContextClass\",\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\t\treturn (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n\t}"}, {"instruction": "Encodes {@code value}.\n@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,\nLong, Double or null. May not be {@link Double#isNaN() NaNs} or\n{@link Double#isInfinite() infinities}.\n@return this stringer.\n@throws JSONException if processing of json failed", "input": "Java", "output": "public JSONStringer value(Object value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tif (value instanceof JSONArray) {\n\t\t\t((JSONArray) value).writeTo(this);\n\t\t\treturn this;\n\n\t\t}\n\t\telse if (value instanceof JSONObject) {\n\t\t\t((JSONObject) value).writeTo(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tbeforeValue();\n\n\t\tif (value == null || value instanceof Boolean || value == JSONObject.NULL) {\n\t\t\tthis.out.append(value);\n\n\t\t}\n\t\telse if (value instanceof Number) {\n\t\t\tthis.out.append(JSONObject.numberToString((Number) value));\n\n\t\t}\n\t\telse {\n\t\t\tstring(value.toString());\n\t\t}\n\n\t\treturn this;\n\t}"}, {"instruction": "Build credential for metadata signature validation basic credential.\n\n@param resource the resource\n@return the basic credential\n@throws Exception the exception", "input": "Java", "output": "public static BasicCredential buildCredentialForMetadataSignatureValidation(final Resource resource) throws Exception {\n        try {\n            val x509FactoryBean = new BasicX509CredentialFactoryBean();\n            x509FactoryBean.setCertificateResource(resource);\n            x509FactoryBean.afterPropertiesSet();\n            return x509FactoryBean.getObject();\n        } catch (final Exception e) {\n            LOGGER.trace(e.getMessage(), e);\n\n            LOGGER.debug(\"Credential cannot be extracted from [{}] via X.509. Treating it as a public key to locate credential...\", resource);\n            val credentialFactoryBean = new BasicResourceCredentialFactoryBean();\n            credentialFactoryBean.setPublicKeyInfo(resource);\n            credentialFactoryBean.afterPropertiesSet();\n            return credentialFactoryBean.getObject();\n        }\n    }"}, {"instruction": "\u83b7\u53d6XLSX\u5de5\u4f5c\u7c3f\u6307\u5b9asheet\u4e2d\u56fe\u7247\u5217\u8868\n\n@param workbook \u5de5\u4f5c\u7c3f{@link Workbook}\n@param sheetIndex sheet\u7684\u7d22\u5f15\n@return \u56fe\u7247\u6620\u5c04\uff0c\u952e\u683c\u5f0f\uff1a\u884c_\u5217\uff0c\u503c\uff1a{@link PictureData}", "input": "Java", "output": "private static Map<String, PictureData> getPicMapXlsx(XSSFWorkbook workbook, int sheetIndex) {\r\n\t\tfinal Map<String, PictureData> sheetIndexPicMap = new HashMap<String, PictureData>();\r\n\t\tfinal XSSFSheet sheet = workbook.getSheetAt(sheetIndex);\r\n\t\tXSSFDrawing drawing;\r\n\t\tfor (POIXMLDocumentPart dr : sheet.getRelations()) {\r\n\t\t\tif (dr instanceof XSSFDrawing) {\r\n\t\t\t\tdrawing = (XSSFDrawing) dr;\r\n\t\t\t\tfinal List<XSSFShape> shapes = drawing.getShapes();\r\n\t\t\t\tXSSFPicture pic;\r\n\t\t\t\tCTMarker ctMarker;\r\n\t\t\t\tfor (XSSFShape shape : shapes) {\r\n\t\t\t\t\tpic = (XSSFPicture) shape;\r\n\t\t\t\t\tctMarker = pic.getPreferredSize().getFrom();\r\n\t\t\t\t\tsheetIndexPicMap.put(StrUtil.format(\"{}_{}\", ctMarker.getRow(), ctMarker.getCol()), pic.getPictureData());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sheetIndexPicMap;\r\n\t}"}, {"instruction": "@deprecated Use {@link #getTimeMillis(CharSequence)} instead.\n\nReturns the date header value with the specified header name.  If\nthere are more than one header value for the specified header name, the\nfirst value is returned.\n\n@return the header value\n@throws ParseException\nif there is no such header or the header value is not a formatted date", "input": "Java", "output": "@Deprecated\n    public static Date getDateHeader(HttpMessage message, CharSequence name) throws ParseException {\n        String value = message.headers().get(name);\n        if (value == null) {\n            throw new ParseException(\"header not found: \" + name, 0);\n        }\n        Date date = DateFormatter.parseHttpDate(value);\n        if (date == null) {\n            throw new ParseException(\"header can't be parsed into a Date: \" + value, 0);\n        }\n        return date;\n    }"}, {"instruction": "Fit a MultiDataSet (only compute based on the statistics from this {@link MultiDataSet})\n\n@param dataSet the dataset to compute on", "input": "Java", "output": "public void fit(@NonNull MultiDataSet dataSet) {\n        List<S.Builder> featureNormBuilders = new ArrayList<>();\n        List<S.Builder> labelNormBuilders = new ArrayList<>();\n\n        fitPartial(dataSet, featureNormBuilders, labelNormBuilders);\n\n        featureStats = buildList(featureNormBuilders);\n        if (isFitLabel()) {\n            labelStats = buildList(labelNormBuilders);\n        }\n    }"}, {"instruction": "-----------------------------------------------------------------------", "input": "Java", "output": "private static StringBuilder simpleQuote(final StringBuilder sb, final String value) {\n\t\tfor (int i = 0; i < value.length(); ++i) {\n\t\t\tfinal char c = value.charAt(i);\n\t\t\tswitch (c) {\n\t\t\t\tcase '\\\\':\n\t\t\t\tcase '^':\n\t\t\t\tcase '$':\n\t\t\t\tcase '.':\n\t\t\t\tcase '|':\n\t\t\t\tcase '?':\n\t\t\t\tcase '*':\n\t\t\t\tcase '+':\n\t\t\t\tcase '(':\n\t\t\t\tcase ')':\n\t\t\t\tcase '[':\n\t\t\t\tcase '{':\n\t\t\t\t\tsb.append('\\\\');\n\t\t\t\tdefault:\n\t\t\t\t\tsb.append(c);\n\t\t\t}\n\t\t}\n\t\treturn sb;\n\t}"}, {"instruction": "Creates a Graph from CSV input with vertex values and edge values.\nThe vertex values are specified through a vertices input file or a user-defined map function.\n\n@param vertexKey the type of the vertex IDs\n@param vertexValue the type of the vertex values\n@param edgeValue the type of the edge values\n@return a Graph with vertex and edge values.", "input": "Java", "output": "@SuppressWarnings(\"unchecked\")\n\tpublic <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,\n\t\t\tClass<EV> edgeValue) {\n\n\t\tif (edgeReader == null) {\n\t\t\tthrow new RuntimeException(\"The edge input file cannot be null!\");\n\t\t}\n\n\t\tDataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue);\n\n\t\t// the vertex value can be provided by an input file or a user-defined mapper\n\t\tif (vertexReader != null) {\n\t\t\tDataSet<Tuple2<K, VV>> vertices = vertexReader\n\t\t\t\t.types(vertexKey, vertexValue)\n\t\t\t\t\t.name(GraphCsvReader.class.getName());\n\n\t\t\treturn Graph.fromTupleDataSet(vertices, edges, executionContext);\n\t\t}\n\t\telse if (mapper != null) {\n\t\t\treturn Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext);\n\t\t}\n\t\telse {\n\t\t\tthrow new RuntimeException(\"Vertex values have to be specified through a vertices input file\"\n\t\t\t\t\t+ \"or a user-defined map function.\");\n\t\t}\n\t}"}, {"instruction": "make sure it now goes looking for that block index.", "input": "Java", "output": "private void ensureFetching(long blockIndex) {\n    if (fetching != null) {\n      if (fetching.futureBuf.isDone()) {\n        full.add(fetching);\n        fetching = null;\n      } else {\n        return;\n      }\n    }\n    for (WorkUnit w : full) {\n      if (w.blockIndex == blockIndex) {\n        return;\n      }\n    }\n    if (full.size() < BUF_COUNT) {\n      fetching = new WorkUnit(chan, bufSize, blockIndex);\n    } else {\n      // reuse the oldest full buffer\n      fetching = full.remove(0);\n      fetching.resetForIndex(blockIndex);\n    }\n    bytesRead += bufSize;\n    fetching.futureBuf = exec.submit(fetching);\n  }"}, {"instruction": "Execute the specified TransformProcess with the given <i>sequence</i> input data<br>\nNote: this method can only be used if the TransformProcess starts with sequence data, and also returns sequence data\n\n@param inputSequence    Input sequence data to process\n@param transformProcess TransformProcess to execute\n@return Processed (non-sequential) data", "input": "Java", "output": "public static List<List<List<Writable>>> executeSequenceToSequence(List<List<List<Writable>>> inputSequence,\n                                                                       TransformProcess transformProcess) {\n        if (!(transformProcess.getFinalSchema() instanceof SequenceSchema)) {\n            List<List<List<Writable>>> ret = new ArrayList<>(inputSequence.size());\n            for(List<List<Writable>> timeStep : inputSequence) {\n                ret.add(execute(timeStep,null, transformProcess).getFirst());\n            }\n\n            return ret;\n        }\n\n        return execute(null, inputSequence, transformProcess).getSecond();\n    }"}, {"instruction": "Create a metric registry configuration object from the given {@link Configuration}.\n\n@param configuration to generate the metric registry configuration from\n@return Metric registry configuration generated from the configuration", "input": "Java", "output": "public static MetricRegistryConfiguration fromConfiguration(Configuration configuration) {\n\t\tScopeFormats scopeFormats;\n\t\ttry {\n\t\t\tscopeFormats = ScopeFormats.fromConfig(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Failed to parse scope format, using default scope formats\", e);\n\t\t\tscopeFormats = ScopeFormats.fromConfig(new Configuration());\n\t\t}\n\n\t\tchar delim;\n\t\ttry {\n\t\t\tdelim = configuration.getString(MetricOptions.SCOPE_DELIMITER).charAt(0);\n\t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Failed to parse delimiter, using default delimiter.\", e);\n\t\t\tdelim = '.';\n\t\t}\n\n\t\tfinal long maximumFrameSize = AkkaRpcServiceUtils.extractMaximumFramesize(configuration);\n\n\t\t// padding to account for serialization overhead\n\t\tfinal long messageSizeLimitPadding = 256;\n\n\t\treturn new MetricRegistryConfiguration(scopeFormats, delim, maximumFrameSize - messageSizeLimitPadding);\n\t}"}, {"instruction": "Handles entropy injection across regular and entropy-aware file systems.\n\n<p>If the given file system is entropy-aware (a implements {@link EntropyInjectingFileSystem}),\nthen this method replaces the entropy marker in the path with random characters.\nThe entropy marker is defined by {@link EntropyInjectingFileSystem#getEntropyInjectionKey()}.\n\n<p>If the given file system does not implement {@code EntropyInjectingFileSystem},\nthen this method delegates to {@link FileSystem#create(Path, WriteMode)} and\nreturns the same path in the resulting {@code OutputStreamAndPath}.", "input": "Java", "output": "public static OutputStreamAndPath createEntropyAware(\n\t\t\tFileSystem fs,\n\t\t\tPath path,\n\t\t\tWriteMode writeMode) throws IOException {\n\n\t\t// check and possibly inject entropy into the path\n\t\tfinal EntropyInjectingFileSystem efs = getEntropyFs(fs);\n\t\tfinal Path processedPath = efs == null ? path : resolveEntropy(path, efs, true);\n\n\t\t// create the stream on the original file system to let the safety net\n\t\t// take its effect\n\t\tfinal FSDataOutputStream out = fs.create(processedPath, writeMode);\n\t\treturn new OutputStreamAndPath(out, processedPath);\n\t}"}, {"instruction": "this method shouldn't be called from user", "input": "Java", "output": "@Deprecated\n    void addSublist(JFXListView<?> subList, int index) {\n        if (!sublistsProperty.get().contains(subList)) {\n            sublistsProperty.get().add(subList);\n            sublistsIndices.put(index, subList);\n            subList.getSelectionModel().selectedIndexProperty().addListener((o, oldVal, newVal) -> {\n                if (newVal.intValue() != -1) {\n                    updateOverAllSelectedIndex();\n                }\n            });\n        }\n    }"}, {"instruction": "\u83b7\u53d6\u4e00\u4e0bbinlog format\u683c\u5f0f", "input": "Java", "output": "private void loadBinlogFormat() {\n        ResultSetPacket rs = null;\n        try {\n            rs = query(\"show variables like 'binlog_format'\");\n        } catch (IOException e) {\n            throw new CanalParseException(e);\n        }\n\n        List<String> columnValues = rs.getFieldValues();\n        if (columnValues == null || columnValues.size() != 2) {\n            logger.warn(\"unexpected binlog format query result, this may cause unexpected result, so throw exception to request network to io shutdown.\");\n            throw new IllegalStateException(\"unexpected binlog format query result:\" + rs.getFieldValues());\n        }\n\n        binlogFormat = BinlogFormat.valuesOf(columnValues.get(1));\n        if (binlogFormat == null) {\n            throw new IllegalStateException(\"unexpected binlog format query result:\" + rs.getFieldValues());\n        }\n    }"}, {"instruction": "This method returns similarity of the document to specific label, based on mean value\n\n@param rawText\n@param label\n@return", "input": "Java", "output": "@Deprecated\n    public double similarityToLabel(String rawText, String label) {\n        if (tokenizerFactory == null)\n            throw new IllegalStateException(\"TokenizerFactory should be defined, prior to predict() call\");\n\n        List<String> tokens = tokenizerFactory.create(rawText).getTokens();\n        List<VocabWord> document = new ArrayList<>();\n        for (String token : tokens) {\n            if (vocab.containsWord(token)) {\n                document.add(vocab.wordFor(token));\n            }\n        }\n        return similarityToLabel(document, label);\n    }"}, {"instruction": "Loads the persisted version of each process definition and set values on the in-memory\nversion to be consistent.", "input": "Java", "output": "protected void makeProcessDefinitionsConsistentWithPersistedVersions(ParsedDeployment parsedDeployment) {\n        for (ProcessDefinitionEntity processDefinition : parsedDeployment.getAllProcessDefinitions()) {\n            ProcessDefinitionEntity persistedProcessDefinition =\n                    bpmnDeploymentHelper.getPersistedInstanceOfProcessDefinition(processDefinition);\n\n            if (persistedProcessDefinition != null) {\n                processDefinition.setId(persistedProcessDefinition.getId());\n                processDefinition.setVersion(persistedProcessDefinition.getVersion());\n                processDefinition.setSuspensionState(persistedProcessDefinition.getSuspensionState());\n            }\n        }\n    }"}, {"instruction": "Constructs an ApproximateHistogram object from the given byte-buffer representation\n\n@param buf ByteBuffer to construct an ApproximateHistogram from\n\n@return ApproximateHistogram constructed from the given ByteBuffer", "input": "Java", "output": "public static ApproximateHistogram fromBytes(ByteBuffer buf)\n  {\n    // negative size indicates compact representation\n    // this works regardless of whether we use int or short for the size since the leftmost bit is the sign bit\n    if (buf.getShort(buf.position()) < 0) {\n      return fromBytesCompact(buf);\n    } else {\n      // ignore size, determine if sparse or dense based on sign of binCount\n      if (buf.getInt(buf.position() + Integer.BYTES) < 0) {\n        return fromBytesSparse(buf);\n      } else {\n        return fromBytesDense(buf);\n      }\n    }\n  }"}, {"instruction": "Is consent required ?\n\n@param service           the service\n@param registeredService the registered service\n@param authentication    the authentication\n@param requestContext    the request context\n@return the event id.", "input": "Java", "output": "protected String isConsentRequired(final Service service, final RegisteredService registeredService,\n                                       final Authentication authentication,\n                                       final RequestContext requestContext) {\n        val required = this.consentEngine.isConsentRequiredFor(service, registeredService, authentication).isRequired();\n        return required ? EVENT_ID_CONSENT_REQUIRED : null;\n    }"}, {"instruction": "Generates a function call with null handling, automatic binding of session parameter, etc.", "input": "Java", "output": "public BytecodeNode generateCall(\n            String name,\n            ScalarFunctionImplementation function,\n            List<BytecodeNode> arguments,\n            Optional<OutputBlockVariableAndType> outputBlockVariableAndType)\n    {\n        Optional<BytecodeNode> instance = Optional.empty();\n        if (function.getInstanceFactory().isPresent()) {\n            FieldDefinition field = cachedInstanceBinder.getCachedInstance(function.getInstanceFactory().get());\n            instance = Optional.of(scope.getThis().getField(field));\n        }\n        return generateInvocation(scope, name, function, instance, arguments, callSiteBinder, outputBlockVariableAndType);\n    }"}, {"instruction": "--------------------------------------------------------------------------------------------", "input": "Java", "output": "private int convertToInt(Object o, int defaultValue) {\n\t\tif (o.getClass() == Integer.class) {\n\t\t\treturn (Integer) o;\n\t\t}\n\t\telse if (o.getClass() == Long.class) {\n\t\t\tlong value = (Long) o;\n\t\t\tif (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n\t\t\t\treturn (int) value;\n\t\t\t} else {\n\t\t\t\tLOG.warn(\"Configuration value {} overflows/underflows the integer type.\", value);\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\treturn Integer.parseInt(o.toString());\n\t\t\t}\n\t\t\tcatch (NumberFormatException e) {\n\t\t\t\tLOG.warn(\"Configuration cannot evaluate value {} as an integer number\", o);\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "\u8fc7\u6ee4<br>\n\u8fc7\u6ee4\u8fc7\u7a0b\u901a\u8fc7\u4f20\u5165\u7684Editor\u5b9e\u73b0\u6765\u8fd4\u56de\u9700\u8981\u7684\u5143\u7d20\u5185\u5bb9\uff0c\u8fd9\u4e2aEditor\u5b9e\u73b0\u53ef\u4ee5\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a\n\n<pre>\n1\u3001\u8fc7\u6ee4\u51fa\u9700\u8981\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u8fd4\u56denull\u8868\u793a\u8fd9\u4e2a\u5143\u7d20\u5bf9\u8c61\u629b\u5f03\n2\u3001\u4fee\u6539\u5143\u7d20\u5bf9\u8c61\uff0c\u8fd4\u56de\u96c6\u5408\u4e2d\u4e3a\u4fee\u6539\u540e\u7684\u5bf9\u8c61\n</pre>\n\n@param <K> Key\u7c7b\u578b\n@param <V> Value\u7c7b\u578b\n@param map Map\n@param editor \u7f16\u8f91\u5668\u63a5\u53e3\n@return \u8fc7\u6ee4\u540e\u7684Map", "input": "Java", "output": "public static <K, V> Map<K, V> filter(Map<K, V> map, Editor<Entry<K, V>> editor) {\r\n\t\tif(null == map || null == editor) {\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\t\r\n\t\tfinal Map<K, V> map2 = ObjectUtil.clone(map);\r\n\t\tif (isEmpty(map2)) {\r\n\t\t\treturn map2;\r\n\t\t}\r\n\r\n\t\tmap2.clear();\r\n\t\tEntry<K, V> modified;\r\n\t\tfor (Entry<K, V> entry : map.entrySet()) {\r\n\t\t\tmodified = editor.edit(entry);\r\n\t\t\tif (null != modified) {\r\n\t\t\t\tmap2.put(modified.getKey(), modified.getValue());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map2;\r\n\t}"}, {"instruction": "<b>getSDbl</b><br>\npublic static String getSDbl( double Value, int DecPrec )<br>\nReturns double converted to string.<br>\nIf Value is Double.NaN returns \"NaN\".<br>\nIf DecPrec is < 0 is DecPrec set 0.<br>\n\n@param Value - value\n@param DecPrec - decimal precision\n@return double as string", "input": "Java", "output": "public static String getSDbl( double Value, int DecPrec ) {\n\t\t//\n\t\tString Result = \"\";\n\t\t//\n\t\tif ( Double.isNaN( Value ) ) return \"NaN\";\n\t\t//\n\t\tif ( DecPrec < 0 ) DecPrec = 0;\n\t\t//\n\t\tString DFS = \"###,###,##0\";\n\t\t//\n\t\tif ( DecPrec > 0 ) {\n\t\t\tint idx = 0;\n\t\t\tDFS += \".\";\n\t\t\twhile ( idx < DecPrec ) {\n\t\t\t\tDFS = DFS + \"0\";\n\t\t\t\tidx ++;\n\t\t\t\tif ( idx > 100 ) break;\n\t\t\t}\n\t\t}\n\t\t//\n//\t\tLocale locale  = new Locale(\"en\", \"UK\");\n\t\t//\n\t\tDecimalFormatSymbols DcmFrmSmb = new DecimalFormatSymbols( Locale.getDefault());\n\t\tDcmFrmSmb.setDecimalSeparator('.');\n\t\tDcmFrmSmb.setGroupingSeparator(' ');\n\t\t//\n\t\tDecimalFormat DcmFrm;\n\t\t//\n\t\tDcmFrm = new DecimalFormat( DFS, DcmFrmSmb );\n\t\t//\n\t//\tDcmFrm.setGroupingSize( 3 );\n\t\t//\n\t\tResult = DcmFrm.format( Value );\n\t\t//\n\t\treturn Result;\n\t}"}, {"instruction": "Searches defined database where the URL prefix matches one of the prefixes defined in a {@link JdbcDatabase}.\nThe prefix is determined by:\n<p>\njdbc:<prefix>:...\n\n@param jdbcUrl The connection URL\n@return An optional {@link JdbcDatabase}", "input": "Java", "output": "@SuppressWarnings(\"MagicNumber\")\n    public static Optional<JdbcDatabase> findDatabase(String jdbcUrl) {\n        if (StringUtils.isNotEmpty(jdbcUrl)) {\n            if (!jdbcUrl.startsWith(\"jdbc\")) {\n                throw new IllegalArgumentException(\"JDBC URLs must start with 'jdbc'\");\n            }\n            String partialUrl = jdbcUrl.substring(5);\n            String prefix = partialUrl.substring(0, partialUrl.indexOf(':')).toLowerCase();\n\n            return databases.stream().filter(db -> db.containsPrefix(prefix)).findFirst();\n        }\n        return Optional.empty();\n    }"}, {"instruction": "This method allows to remove graph from the GraphServer instance\n@param graphId", "input": "Java", "output": "public void dropGraph(long graphId) {\n        val builder = new FlatBufferBuilder(128);\n\n        val off = FlatDropRequest.createFlatDropRequest(builder, graphId);\n        builder.finish(off);\n\n        val req = FlatDropRequest.getRootAsFlatDropRequest(builder.dataBuffer());\n\n        val v = blockingStub.forgetGraph(req);\n        if (v.status() != 0)\n            throw new ND4JIllegalStateException(\"registerGraph() gRPC call failed\");\n    }"}, {"instruction": "For callers where simplicity is desired\u00a0over flexibility. This method does it all in one call. If the request\nis unauthorized, an IllegalStateException will be thrown. Logs and metrics are emitted when the Sequence is\neither fully iterated or throws an exception.\n\n@param query                the query\n@param authenticationResult authentication result indicating identity of the requester\n@param remoteAddress        remote address, for logging; or null if unknown\n\n@return results", "input": "Java", "output": "@SuppressWarnings(\"unchecked\")\n  public <T> Sequence<T> runSimple(\n      final Query<T> query,\n      final AuthenticationResult authenticationResult,\n      @Nullable final String remoteAddress\n  )\n  {\n    initialize(query);\n\n    final Sequence<T> results;\n\n    try {\n      final Access access = authorize(authenticationResult);\n      if (!access.isAllowed()) {\n        throw new ISE(\"Unauthorized\");\n      }\n\n      final QueryLifecycle.QueryResponse queryResponse = execute();\n      results = queryResponse.getResults();\n    }\n    catch (Throwable e) {\n      emitLogsAndMetrics(e, remoteAddress, -1);\n      throw e;\n    }\n\n    return Sequences.wrap(\n        results,\n        new SequenceWrapper()\n        {\n          @Override\n          public void after(final boolean isDone, final Throwable thrown)\n          {\n            emitLogsAndMetrics(thrown, remoteAddress, -1);\n          }\n        }\n    );\n  }"}, {"instruction": "Creates an image in the specified project using the data included in the request.\n\n<p>Sample code:\n\n<pre><code>\ntry (ImageClient imageClient = ImageClient.create()) {\nBoolean forceCreate = false;\nProjectName project = ProjectName.of(\"[PROJECT]\");\nImage imageResource = Image.newBuilder().build();\nOperation response = imageClient.insertImage(forceCreate, project, imageResource);\n}\n</code></pre>\n\n@param forceCreate Force image creation if true.\n@param project Project ID for this request.\n@param imageResource An Image resource. (== resource_for beta.images ==) (== resource_for\nv1.images ==)\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation insertImage(\n      Boolean forceCreate, ProjectName project, Image imageResource) {\n\n    InsertImageHttpRequest request =\n        InsertImageHttpRequest.newBuilder()\n            .setForceCreate(forceCreate)\n            .setProject(project == null ? null : project.toString())\n            .setImageResource(imageResource)\n            .build();\n    return insertImage(request);\n  }"}, {"instruction": "Just record that this workspace is being used, without paying any attention to the synchronization support.", "input": "Java", "output": "public synchronized Lease record(@Nonnull FilePath p) {\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.log(Level.FINE, \"recorded \" + p, new Throwable(\"from \" + this));\n        }\n        Entry old = inUse.put(p.getRemote(), new Entry(p, false));\n        if (old!=null)\n            throw new AssertionError(\"Tried to record a workspace already owned: \"+old);\n        return lease(p);\n    }"}, {"instruction": "Gets cas ticket granting ticket created events.\n\n@param principal the principal\n@return the cas ticket granting ticket created events for", "input": "Java", "output": "protected Collection<? extends CasEvent> getCasTicketGrantingTicketCreatedEventsFor(final String principal) {\n        val type = CasTicketGrantingTicketCreatedEvent.class.getName();\n        LOGGER.debug(\"Retrieving events of type [{}] for [{}]\", type, principal);\n\n        val date = ZonedDateTime.now(ZoneOffset.UTC)\n            .minusDays(casProperties.getAuthn().getAdaptive().getRisk().getDaysInRecentHistory());\n        return casEventRepository.getEventsOfTypeForPrincipal(type, principal, date);\n    }"}, {"instruction": "//////////////// Helper Methods ////////////////////", "input": "Java", "output": "private ResponseEntity<String> makeRestCall(String url) throws HygieiaException {\n        String jiraAccess = featureSettings.getJiraCredentials();\n        if (StringUtils.isEmpty(jiraAccess)) {\n            return restOperations.exchange(url, HttpMethod.GET, null, String.class);\n        } else {\n            String jiraAccessBase64 = new String(Base64.decodeBase64(jiraAccess));\n            String[] parts = jiraAccessBase64.split(\":\");\n            if (parts.length != 2) {\n                throw new HygieiaException(\"Invalid Jira credentials\", HygieiaException.INVALID_CONFIGURATION);\n            }\n            return restOperations.exchange(url, HttpMethod.GET, new HttpEntity<>(createHeaders(parts[0], parts[1])), String.class);\n        }\n    }"}, {"instruction": "\u8f6c\u6362\u4e3a\u7a7a\u683c\u5206\u5272\u65e0\u6807\u7b7e\u7684String\n\n@return", "input": "Java", "output": "public String toStringWithoutLabels()\n    {\n        StringBuilder sb = new StringBuilder(size() * 4);\n        int i = 1;\n        for (IWord word : wordList)\n        {\n            if (word instanceof CompoundWord)\n            {\n                int j = 0;\n                for (Word w : ((CompoundWord) word).innerList)\n                {\n                    sb.append(w.getValue());\n                    if (++j != ((CompoundWord) word).innerList.size())\n                        sb.append(' ');\n                }\n            }\n            else\n                sb.append(word.getValue());\n            if (i != wordList.size()) sb.append(' ');\n            ++i;\n        }\n        return sb.toString();\n    }"}, {"instruction": "Whether there are anymore records\n\n@return", "input": "Java", "output": "@Override\n    public boolean hasNext() {\n        if(next != null){\n            return true;\n        }\n        if(!recordReader.hasNext()){\n            return false;\n        }\n\n        //Prefetch, until we find one that isn't filtered out - or we run out of data\n        while(next == null && recordReader.hasNext()){\n            Record r = recordReader.nextRecord();\n            List<Writable> temp = transformProcess.execute(r.getRecord());\n            if(temp == null){\n                continue;\n            }\n            next = new org.datavec.api.records.impl.Record(temp, r.getMetaData());\n        }\n\n        return next != null;\n    }"}, {"instruction": "check uniqueness of dependency type and params", "input": "Java", "output": "private void validateDepDefinitionUniqueness(final List<FlowTriggerDependency> dependencies) {\n    final Set<String> seen = new HashSet<>();\n    for (final FlowTriggerDependency dep : dependencies) {\n      final Map<String, String> props = dep.getProps();\n      // set.add() returns false when there exists duplicate\n      Preconditions.checkArgument(seen.add(dep.getType() + \":\" + props.toString()), String.format\n          (\"duplicate dependency config %s found, dependency config should be unique\",\n              dep.getName()));\n    }\n  }"}, {"instruction": "Reschedule a task\n\n@param task failed or cancelled task\n@return new instance of a task with \"SCHEDULED\" status", "input": "Java", "output": "private Task taskToBeRescheduled(Task task) {\n        Task taskToBeRetried = task.copy();\n        taskToBeRetried.setTaskId(IDGenerator.generate());\n        taskToBeRetried.setRetriedTaskId(task.getTaskId());\n        taskToBeRetried.setStatus(SCHEDULED);\n        taskToBeRetried.setRetryCount(task.getRetryCount() + 1);\n        taskToBeRetried.setRetried(false);\n        taskToBeRetried.setPollCount(0);\n        taskToBeRetried.setCallbackAfterSeconds(0);\n        task.setRetried(true);\n        return taskToBeRetried;\n    }"}, {"instruction": "\u83b7\u5f97\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u6784\u9020\u5217\u8868\n\n@param <T> \u6784\u9020\u7684\u5bf9\u8c61\u7c7b\u578b\n@param beanClass \u7c7b\n@return \u5b57\u6bb5\u5217\u8868\n@throws SecurityException \u5b89\u5168\u68c0\u67e5\u5f02\u5e38", "input": "Java", "output": "@SuppressWarnings(\"unchecked\")\r\n\tpublic static <T> Constructor<T>[] getConstructors(Class<T> beanClass) throws SecurityException {\r\n\t\tAssert.notNull(beanClass);\r\n\t\tConstructor<?>[] constructors = CONSTRUCTORS_CACHE.get(beanClass);\r\n\t\tif (null != constructors) {\r\n\t\t\treturn (Constructor<T>[]) constructors;\r\n\t\t}\r\n\r\n\t\tconstructors = getConstructorsDirectly(beanClass);\r\n\t\treturn (Constructor<T>[]) CONSTRUCTORS_CACHE.put(beanClass, constructors);\r\n\t}"}, {"instruction": "Retrieves the property of the given object and returns it as a list of {@link JSONObject}.\n\n<p>\nIf the value doesn't exist, this method returns an empty list. If the value is\na {@link JSONObject}, this method will return a singleton list. If it's a {@link JSONArray},\nthe contents will be returned as a list.\n\n<p>\nBecause of the way structured form submission work, this is convenient way of\nhandling repeated multi-value entries.\n\n@since 1.233", "input": "Java", "output": "public static List<JSONObject> toList(JSONObject parent, String propertyName) {\n        Object v = parent.get(propertyName);\n        if(v==null)\n            return Collections.emptyList();\n        if(v instanceof JSONObject)\n            return Collections.singletonList((JSONObject)v);\n        if(v instanceof JSONArray)\n            return (List)(JSONArray)v;\n\n        throw new IllegalArgumentException();\n    }"}, {"instruction": "Load a computation graph from a InputStream\n@param is the inputstream to get the computation graph from\n@return the loaded computation graph\n\n@throws IOException", "input": "Java", "output": "public static ComputationGraph restoreComputationGraph(@NonNull InputStream is, boolean loadUpdater)\n            throws IOException {\n        checkInputStream(is);\n\n        File tmpFile = null;\n        try{\n            tmpFile = tempFileFromStream(is);\n            return restoreComputationGraph(tmpFile, loadUpdater);\n        } finally {\n            if(tmpFile != null){\n                tmpFile.delete();\n            }\n        }\n    }"}, {"instruction": "Sets the logging service for a specific cluster.\n\n<p>Sample code:\n\n<pre><code>\ntry (ClusterManagerClient clusterManagerClient = ClusterManagerClient.create()) {\nString projectId = \"\";\nString zone = \"\";\nString clusterId = \"\";\nString loggingService = \"\";\nOperation response = clusterManagerClient.setLoggingService(projectId, zone, clusterId, loggingService);\n}\n</code></pre>\n\n@param projectId Deprecated. The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840). This field has been deprecated\nand replaced by the name field.\n@param zone Deprecated. The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster resides. This field has been\ndeprecated and replaced by the name field.\n@param clusterId Deprecated. The name of the cluster to upgrade. This field has been deprecated\nand replaced by the name field.\n@param loggingService The logging service the cluster should use to write metrics. Currently\navailable options:\n<p>&#42; \"logging.googleapis.com\" - the Google Cloud Logging service &#42; \"none\" - no\nmetrics will be exported from the cluster\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "public final Operation setLoggingService(\n      String projectId, String zone, String clusterId, String loggingService) {\n\n    SetLoggingServiceRequest request =\n        SetLoggingServiceRequest.newBuilder()\n            .setProjectId(projectId)\n            .setZone(zone)\n            .setClusterId(clusterId)\n            .setLoggingService(loggingService)\n            .build();\n    return setLoggingService(request);\n  }"}, {"instruction": "Converts StreamConfiguration into StreamConfig.\n\n@param scope the stream's scope\n@param streamName The Stream Name\n@param configModel The stream configuration.\n@return StreamConfig instance.", "input": "Java", "output": "public static final StreamConfig decode(String scope, String streamName, final StreamConfiguration configModel) {\n        Preconditions.checkNotNull(configModel, \"configModel\");\n        final StreamConfig.Builder builder = StreamConfig.newBuilder()\n                .setStreamInfo(createStreamInfo(scope, streamName))\n                .setScalingPolicy(decode(configModel.getScalingPolicy()));\n        if (configModel.getRetentionPolicy() != null) {\n            builder.setRetentionPolicy(decode(configModel.getRetentionPolicy()));\n        }\n        return builder.build();\n    }"}, {"instruction": "does not check validity of format and returns over-estimated result for invalid string (see UT)", "input": "Java", "output": "public static int estimatedBinaryLengthAsUTF8(String value)\n  {\n    int length = 0;\n    for (int i = 0; i < value.length(); i++) {\n      char var10 = value.charAt(i);\n      if (var10 < 0x80) {\n        length += 1;\n      } else if (var10 < 0x800) {\n        length += 2;\n      } else if (Character.isSurrogate(var10)) {\n        length += 4;\n        i++;\n      } else {\n        length += 3;\n      }\n    }\n    return length;\n  }"}, {"instruction": "<code>\n.google.cloud.datalabeling.v1beta1.LabelTextClassificationOperationMetadata text_classification_details = 9;\n</code>", "input": "Java", "output": "public com.google.cloud.datalabeling.v1beta1.LabelTextClassificationOperationMetadataOrBuilder\n      getTextClassificationDetailsOrBuilder() {\n    if (detailsCase_ == 9) {\n      return (com.google.cloud.datalabeling.v1beta1.LabelTextClassificationOperationMetadata)\n          details_;\n    }\n    return com.google.cloud.datalabeling.v1beta1.LabelTextClassificationOperationMetadata\n        .getDefaultInstance();\n  }"}, {"instruction": "Parquet column names are case-sensitive unlike Hive, which converts all column names to lowercase.\nTherefore, when we look up columns we first check for exact match, and if that fails we look for a case-insensitive match.", "input": "Java", "output": "public static ColumnIO lookupColumnByName(GroupColumnIO groupColumnIO, String columnName)\n    {\n        ColumnIO columnIO = groupColumnIO.getChild(columnName);\n\n        if (columnIO != null) {\n            return columnIO;\n        }\n\n        for (int i = 0; i < groupColumnIO.getChildrenCount(); i++) {\n            if (groupColumnIO.getChild(i).getName().equalsIgnoreCase(columnName)) {\n                return groupColumnIO.getChild(i);\n            }\n        }\n\n        return null;\n    }"}, {"instruction": "Static helper that can be used to exit a {@link SpringApplication} and obtain a\ncode indicating success (0) or otherwise. Does not throw exceptions but should\nprint stack traces of any encountered. Applies the specified\n{@link ExitCodeGenerator} in addition to any Spring beans that implement\n{@link ExitCodeGenerator}. In the case of multiple exit codes the highest value\nwill be used (or if all values are negative, the lowest value will be used)\n@param context the context to close if possible\n@param exitCodeGenerators exist code generators\n@return the outcome (0 if successful)", "input": "Java", "output": "public static int exit(ApplicationContext context,\n\t\t\tExitCodeGenerator... exitCodeGenerators) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tint exitCode = 0;\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\t\t\tCollection<ExitCodeGenerator> beans = context\n\t\t\t\t\t\t.getBeansOfType(ExitCodeGenerator.class).values();\n\t\t\t\tgenerators.addAll(exitCodeGenerators);\n\t\t\t\tgenerators.addAll(beans);\n\t\t\t\texitCode = generators.getExitCode();\n\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\tcontext.publishEvent(new ExitCodeEvent(context, exitCode));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tclose(context);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t}\n\t\treturn exitCode;\n\t}"}, {"instruction": "Configures the file input format by reading the file path from the configuration.\n\n@see org.apache.flink.api.common.io.InputFormat#configure(org.apache.flink.configuration.Configuration)", "input": "Java", "output": "@Override\n\tpublic void configure(Configuration parameters) {\n\n\t\tif (getFilePaths().length == 0) {\n\t\t\t// file path was not specified yet. Try to set it from the parameters.\n\t\t\tString filePath = parameters.getString(FILE_PARAMETER_KEY, null);\n\t\t\tif (filePath == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"File path was not specified in input format or configuration.\");\n\t\t\t} else {\n\t\t\t\tsetFilePath(filePath);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.enumerateNestedFiles) {\n\t\t\tthis.enumerateNestedFiles = parameters.getBoolean(ENUMERATE_NESTED_FILES_FLAG, false);\n\t\t}\n\t}"}, {"instruction": "\u4e0a\u4e0b\u6587\u5f80\u4e0b\u653e\u4e00\u5c42\uff08\u4f8b\u5982\u670d\u52a1\u7aefB\u63a5\u5230A\u7684\u8bf7\u6c42\u540e\u518d\u4f5c\u4e3aC\u7684\u5ba2\u6237\u7aef\u8c03\u7528\uff0c\u8c03\u7528\u524d\u8fd9\u91cc\u5c31\u5148\u628a\u653eA-B\u7684\u4e0a\u4e0b\u6587\u5b58\u8d77\u6765\uff09", "input": "Java", "output": "public static void pushContext() {\n        RpcInternalContext context = LOCAL.get();\n        if (context != null) {\n            Deque<RpcInternalContext> deque = DEQUE_LOCAL.get();\n            if (deque == null) {\n                deque = new ArrayDeque<RpcInternalContext>();\n                DEQUE_LOCAL.set(deque);\n            }\n            deque.push(context);\n            LOCAL.set(null);\n        }\n    }"}, {"instruction": "Configures which fields of the CSV file should be included and which should be skipped. The\npositions in the string (read from position 0 to its length) define whether the field at\nthe corresponding position in the CSV schema should be included.\nparser will look at the first {@code n} fields, where {@code n} is the length of the mask string\nThe parser will skip over all fields where the character at the corresponding position\nin the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value\n{@code false}). The result contains the fields where the corresponding position in\nthe boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).\n\n@param mask The string mask defining which fields to include and which to skip.\n@return The CSV reader instance itself, to allow for fluent function chaining.", "input": "Java", "output": "public CsvReader includeFields(String mask) {\n\t\tboolean[] includedMask = new boolean[mask.length()];\n\n\t\tfor (int i = 0; i < mask.length(); i++) {\n\t\t\tchar c = mask.charAt(i);\n\t\t\tif (c == '1' || c == 'T' || c == 't') {\n\t\t\t\tincludedMask[i] = true;\n\t\t\t} else if (c != '0' && c != 'F' && c != 'f') {\n\t\t\t\tthrow new IllegalArgumentException(\"Mask string may contain only '0' and '1'.\");\n\t\t\t}\n\t\t}\n\n\t\treturn includeFields(includedMask);\n\t}"}, {"instruction": "tag::configuration[]", "input": "Java", "output": "@Bean\n\tpublic TomcatServletWebServerFactory servletWebServerFactory() {\n\t\treturn new TomcatServletWebServerFactory() {\n\n\t\t\t@Override\n\t\t\tprotected void prepareContext(Host host,\n\t\t\t\t\tServletContextInitializer[] initializers) {\n\t\t\t\tsuper.prepareContext(host, initializers);\n\t\t\t\tStandardContext child = new StandardContext();\n\t\t\t\tchild.addLifecycleListener(new Tomcat.FixContextListener());\n\t\t\t\tchild.setPath(\"/cloudfoundryapplication\");\n\t\t\t\tServletContainerInitializer initializer = getServletContextInitializer(\n\t\t\t\t\t\tgetContextPath());\n\t\t\t\tchild.addServletContainerInitializer(initializer, Collections.emptySet());\n\t\t\t\tchild.setCrossContext(true);\n\t\t\t\thost.addChild(child);\n\t\t\t}\n\n\t\t};\n\t}"}, {"instruction": "Listen for update notifications for the auth storage", "input": "Java", "output": "@POST\n  @Path(\"/listen/{authenticatorName}\")\n  @Produces(MediaType.APPLICATION_JSON)\n  @Consumes(MediaType.APPLICATION_JSON)\n  @ResourceFilters(BasicSecurityResourceFilter.class)\n  public Response authenticatorUpdateListener(\n      @Context HttpServletRequest req,\n      @PathParam(\"authenticatorName\") final String authenticatorName,\n      byte[] serializedUserMap\n  )\n  {\n    return handler.authenticatorUpdateListener(authenticatorName, serializedUserMap);\n  }"}, {"instruction": "Creates a {@code JComboBox} with scanners' statuses, \"all\", release, beta and alpha.\n\n@return a {@code JComboBox} with scanners' statuses", "input": "Java", "output": "private JComboBox<String> createStatusComboBox() {\r\n        JComboBox<String> comboBox = new JComboBox<>();\r\n        comboBox.addItem(Constant.messages.getString(\"ascan.policy.table.quality.all\"));\r\n        View view = View.getSingleton();\r\n        comboBox.addItem(view.getStatusUI(AddOn.Status.release).toString());\r\n        comboBox.addItem(view.getStatusUI(AddOn.Status.beta).toString());\r\n        comboBox.addItem(view.getStatusUI(AddOn.Status.alpha).toString());\r\n        return comboBox;\r\n    }"}, {"instruction": "Checks whether this dewey number is compatible to the other dewey number.\n\n<p>True iff this contains other as a prefix or iff they differ only in the last digit whereas\nthe last digit of this is greater than the last digit of other.\n\n@param other The other dewey number to check compatibility against\n@return Whether this dewey number is compatible to the other dewey number", "input": "Java", "output": "public boolean isCompatibleWith(DeweyNumber other) {\n\t\tif (length() > other.length()) {\n\t\t\t// prefix case\n\t\t\tfor (int i = 0; i < other.length(); i++) {\n\t\t\t\tif (other.deweyNumber[i] != deweyNumber[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else if (length() == other.length()) {\n\t\t\t// check init digits for equality\n\t\t\tint lastIndex = length() - 1;\n\t\t\tfor (int i = 0; i < lastIndex; i++) {\n\t\t\t\tif (other.deweyNumber[i] != deweyNumber[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check that the last digit is greater or equal\n\t\t\treturn deweyNumber[lastIndex] >= other.deweyNumber[lastIndex];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"}, {"instruction": "checks whether a value part of the effective predicate is likely to be part of this bloom filter", "input": "Java", "output": "@VisibleForTesting\n    public static boolean checkInBloomFilter(BloomFilter bloomFilter, Object predicateValue, Type sqlType)\n    {\n        if (sqlType == TINYINT || sqlType == SMALLINT || sqlType == INTEGER || sqlType == BIGINT) {\n            return bloomFilter.testLong(((Number) predicateValue).longValue());\n        }\n\n        if (sqlType == DOUBLE) {\n            return bloomFilter.testDouble((Double) predicateValue);\n        }\n\n        if (sqlType instanceof VarcharType || sqlType instanceof VarbinaryType) {\n            return bloomFilter.test(((Slice) predicateValue).getBytes());\n        }\n\n        // todo support DECIMAL, FLOAT, DATE, TIMESTAMP, and CHAR\n        return true;\n    }"}, {"instruction": "Filters a descriptor for {@link BuildStep}s by using {@link BuildStepDescriptor#isApplicable(Class)}.", "input": "Java", "output": "public static <T extends BuildStep&Describable<T>>\n    List<Descriptor<T>> filter(List<Descriptor<T>> base, Class<? extends AbstractProject> type) {\n        // descriptor of the project\n        Descriptor pd = Jenkins.getInstance().getDescriptor((Class) type);\n\n        List<Descriptor<T>> r = new ArrayList<>(base.size());\n        for (Descriptor<T> d : base) {\n            if (pd instanceof AbstractProjectDescriptor && !((AbstractProjectDescriptor)pd).isApplicable(d))\n                continue;\n\n            if (d instanceof BuildStepDescriptor) {\n                BuildStepDescriptor<T> bd = (BuildStepDescriptor<T>) d;\n                if(!bd.isApplicable(type))  continue;\n                r.add(bd);\n            } else {\n                // old plugins built before 1.150 may not implement BuildStepDescriptor\n                r.add(d);\n            }\n        }\n        return r;\n    }"}, {"instruction": "Judge logic tables is all belong to binding encryptors.\n\n@param logicTableNames logic table names\n@return logic tables is all belong to binding encryptors or not", "input": "Java", "output": "public boolean isAllBindingTables(final Collection<String> logicTableNames) {\n        if (logicTableNames.isEmpty()) {\n            return false;\n        }\n        Optional<BindingTableRule> bindingTableRule = findBindingTableRule(logicTableNames);\n        if (!bindingTableRule.isPresent()) {\n            return false;\n        }\n        Collection<String> result = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n        result.addAll(bindingTableRule.get().getAllLogicTables());\n        return !result.isEmpty() && result.containsAll(logicTableNames);\n    }"}, {"instruction": "\u5206\u9875\u67e5\u8be2<br>\n\u6b64\u65b9\u6cd5\u4e0d\u4f1a\u5173\u95edConnection\n\n@param <T> \u7ed3\u679c\u5bf9\u8c61\u7c7b\u578b\n@param conn \u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\n@param fields \u8fd4\u56de\u7684\u5b57\u6bb5\u5217\u8868\uff0cnull\u5219\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\n@param where \u6761\u4ef6\u5b9e\u4f53\u7c7b\uff08\u5305\u542b\u8868\u540d\uff09\n@param page \u5206\u9875\u5bf9\u8c61\n@param rsh \u7ed3\u679c\u96c6\u5904\u7406\u5bf9\u8c61\n@return \u7ed3\u679c\u5bf9\u8c61\n@throws SQLException SQL\u6267\u884c\u5f02\u5e38", "input": "Java", "output": "public <T> T page(Connection conn, Collection<String> fields, Entity where, Page page, RsHandler<T> rsh) throws SQLException {\r\n\t\tcheckConn(conn);\r\n\t\tif(null == page){\r\n\t\t\treturn this.find(conn, fields, where, rsh);\r\n\t\t}\r\n\t\t\r\n\t\tfinal Query query = new Query(SqlUtil.buildConditions(where), where.getTableName());\r\n\t\tquery.setFields(fields);\r\n\t\tquery.setPage(page);\r\n\t\treturn SqlExecutor.queryAndClosePs(dialect.psForPage(conn, query), rsh);\r\n\t}"}, {"instruction": "read from input stream, convert it to string, put into this.bodyContent", "input": "Java", "output": "private void dumpInputStream(){\n        //dump request body\n        exchange.startBlocking();\n        InputStream inputStream = exchange.getInputStream();\n        try {\n            if(config.isMaskEnabled() && inputStream.available() != -1) {\n                this.bodyContent = Mask.maskJson(inputStream, \"requestBody\");\n            } else {\n                try {\n                    this.bodyContent = StringUtils.inputStreamToString(inputStream, UTF_8);\n                } catch (IOException e) {\n                    logger.error(e.toString());\n                }\n            }\n        } catch (IOException e) {\n            logger.error(\"undertow inputstream error:\" + e.getMessage());\n        }\n    }"}, {"instruction": "A part of the deviance portion of the saddle point approximation.\n<p>\nReferences:\n<ol>\n<li>Catherine Loader (2000). \"Fast and Accurate Computation of Binomial\nProbabilities.\". <a target=\"_blank\"\nhref=\"http://www.herine.net/stat/papers/dbinom.pdf\">\nhttp://www.herine.net/stat/papers/dbinom.pdf</a></li>\n</ol>\n</p>\n\n@param x  the x value.\n@param mu the average.\n@return a part of the deviance.", "input": "Java", "output": "public static double getDeviancePart(double x, double mu) {\n        double ret;\n        if (FastMath.abs(x - mu) < 0.1 * (x + mu)) {\n            double d = x - mu;\n            double v = d / (x + mu);\n            double s1 = v * d;\n            double s = Double.NaN;\n            double ej = 2.0 * x * v;\n            v = v * v;\n            int j = 1;\n            while (s1 != s) {\n                s = s1;\n                ej *= v;\n                s1 = s + ej / ((j * 2) + 1);\n                ++j;\n            }\n            ret = s1;\n        } else {\n            ret = x * FastMath.log(x / mu) + mu - x;\n        }\n        return ret;\n    }"}, {"instruction": "Sets the new policy.\n\n@param policy\nthe new policy\n\n@throws NullPointerException\nif policy is {@code null}\n\n@see UndoManagerPolicy", "input": "Java", "output": "public final void setUndoManagerPolicy(UndoManagerPolicy policy) throws NullPointerException {\n\t\tif (policy == null) {\n\t\t\tthrow new NullPointerException(\"The policy must not be null.\");\n\t\t}\n\t\t\n\t\tif (this.policy == policy) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal UndoManagerPolicy oldPolicy = this.policy;\n\t\tthis.policy = policy;\n\t\t\n\t\tif (oldPolicy == UndoManagerPolicy.DEFAULT) {\n\t\t\tthis.textComponent.removePropertyChangeListener(\"editable\", this);\n\t\t\tthis.textComponent.removePropertyChangeListener(\"enabled\", this);\n\t\t}\n\n\t\tif (this.policy == UndoManagerPolicy.DEFAULT) {\n\t\t\tthis.textComponent.addPropertyChangeListener(\"editable\", this);\n\t\t\tthis.textComponent.addPropertyChangeListener(\"enabled\", this);\n\t\t}\n\n\t\thandleUndoManagerPolicy();\n\t}"}, {"instruction": "\u63d2\u5165\u4e00\u4e2a\u8bcd\n\n@param key\n@param value", "input": "Java", "output": "public void put(String key, V value)\n    {\n        if (key.length() == 0) return;  // \u5b89\u5168\u8d77\u89c1\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (int i = 0; i < chars.length - 1; ++i)\n        {\n            // \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u5916\uff0c\u90fd\u662f\u7ee7\u7eed\n            branch.addChild(new Node(chars[i], Status.NOT_WORD_1, null));\n            branch = branch.getChild(chars[i]);\n        }\n        // \u6700\u540e\u4e00\u4e2a\u5b57\u52a0\u5165\u65f6\u5c5e\u6027\u4e3aend\n        if (branch.addChild(new Node<V>(chars[chars.length - 1], Status.WORD_END_3, value)))\n        {\n            ++size; // \u7ef4\u62a4size\n        }\n    }"}, {"instruction": "Delete file or folder.\n\n@param file file.\n\n@return is succeed.\n\n@see #delFileOrFolder(String)", "input": "Java", "output": "public static boolean delFileOrFolder(File file) {\n        if (file == null || !file.exists()) {\n            // do nothing\n        } else if (file.isFile()) {\n            file.delete();\n        } else if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            if (files != null) {\n                for (File sonFile : files) {\n                    delFileOrFolder(sonFile);\n                }\n            }\n            file.delete();\n        }\n        return true;\n    }"}, {"instruction": "Copies all the resources for the given target directory. The base resource serves to calculate the relative\npath such that the directory structure is maintained.\n\n@param base      The base resource\n@param resources The resources to copy\n@param targetDir The target directory\n@throws IOException if there is an error", "input": "Java", "output": "public static void copyAll(Resource base, Resource[] resources, File targetDir) throws IOException {\n        final URL baseUrl = base.getURL();\n        for (Resource resource : resources) {\n            final InputStream input = resource.getInputStream();\n            final File target = new File(targetDir, resource.getURL().toString().substring(baseUrl.toString().length()));\n            copy(new BufferedInputStream(input), new BufferedOutputStream(Files.newOutputStream(target.toPath())));\n        }\n    }"}, {"instruction": "Create create ticket granting ticket action.\n\n@param flow the flow", "input": "Java", "output": "protected void createCreateTicketGrantingTicketAction(final Flow flow) {\n        val action = createActionState(flow, CasWebflowConstants.STATE_ID_CREATE_TICKET_GRANTING_TICKET, CasWebflowConstants.ACTION_ID_CREATE_TICKET_GRANTING_TICKET);\n        createTransitionForState(action, CasWebflowConstants.TRANSITION_ID_SUCCESS_WITH_WARNINGS, CasWebflowConstants.STATE_ID_SHOW_AUTHN_WARNING_MSGS);\n        createTransitionForState(action, CasWebflowConstants.TRANSITION_ID_SUCCESS, CasWebflowConstants.STATE_ID_SEND_TICKET_GRANTING_TICKET);\n    }"}, {"instruction": "\u4ece\u6d41\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff0c\u8bfb\u5230\u8f93\u51fa\u6d41\u4e2d\n\n@param <T> \u8bfb\u53d6\u5bf9\u8c61\u7684\u7c7b\u578b\n@param in \u8f93\u5165\u6d41\n@return \u8f93\u51fa\u6d41\n@throws IORuntimeException IO\u5f02\u5e38\n@throws UtilException ClassNotFoundException\u5305\u88c5", "input": "Java", "output": "public static <T> T readObj(InputStream in) throws IORuntimeException, UtilException {\r\n\t\tif (in == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"The InputStream must not be null\");\r\n\t\t}\r\n\t\tObjectInputStream ois = null;\r\n\t\ttry {\r\n\t\t\tois = new ObjectInputStream(in);\r\n\t\t\t@SuppressWarnings(\"unchecked\") // may fail with CCE if serialised form is incorrect\r\n\t\t\tfinal T obj = (T) ois.readObject();\r\n\t\t\treturn obj;\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new IORuntimeException(e);\r\n\t\t} catch (ClassNotFoundException e) {\r\n\t\t\tthrow new UtilException(e);\r\n\t\t}\r\n\t}"}, {"instruction": "Perform kerberos login using the hadoop shim API if the configuration is available", "input": "Java", "output": "public static void loginFromKeytab(HiveConf hiveConf) throws IOException {\n    String principal = hiveConf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL);\n    String keyTabFile = hiveConf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB);\n    if (principal.isEmpty() || keyTabFile.isEmpty()) {\n      throw new IOException(\"HiveServer2 Kerberos principal or keytab is not correctly configured\");\n    } else {\n      UserGroupInformation.loginUserFromKeytab(SecurityUtil.getServerPrincipal(principal, \"0.0.0.0\"), keyTabFile);\n    }\n  }"}, {"instruction": "Gets all the items recursively contained in this collection in a read-only view.\n<p>\nThe default implementation recursively adds the items of all contained Views\nin case this view implements {@link ViewGroup}, which should be enough for most cases.\n\n@since 1.520", "input": "Java", "output": "public Collection<TopLevelItem> getAllItems() {\n\n        if (this instanceof ViewGroup) {\n            final Collection<TopLevelItem> items = new LinkedHashSet<>(getItems());\n\n            for(View view: ((ViewGroup) this).getViews()) {\n                items.addAll(view.getAllItems());\n            }\n            return Collections.unmodifiableCollection(items);\n        } else {\n            return getItems();\n        }\n    }"}, {"instruction": "\u52a0\u5bc6\u6216\u89e3\u5bc6\u6307\u5b9a\u503c\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u524d\u9700\u521d\u59cb\u5316\u5bc6\u94a5\n\n@param msg \u8981\u52a0\u5bc6\u6216\u89e3\u5bc6\u7684\u6d88\u606f\n@return \u52a0\u5bc6\u6216\u89e3\u5bc6\u540e\u7684\u503c", "input": "Java", "output": "public byte[] crypt(final byte[] msg) {\r\n\t\tfinal ReadLock readLock = this.lock.readLock();\r\n\t\treadLock.lock();\r\n\t\tbyte[] code;\r\n\t\ttry {\r\n\t\t\tfinal int[] sbox = this.sbox.clone();\r\n\t\t\tcode = new byte[msg.length];\r\n\t\t\tint i = 0;\r\n\t\t\tint j = 0;\r\n\t\t\tfor (int n = 0; n < msg.length; n++) {\r\n\t\t\t\ti = (i + 1) % SBOX_LENGTH;\r\n\t\t\t\tj = (j + sbox[i]) % SBOX_LENGTH;\r\n\t\t\t\tswap(i, j, sbox);\r\n\t\t\t\tint rand = sbox[(sbox[i] + sbox[j]) % SBOX_LENGTH];\r\n\t\t\t\tcode[n] = (byte) (rand ^ msg[n]);\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\treadLock.unlock();\r\n\t\t}\r\n\t\treturn code;\r\n\t}"}, {"instruction": "Sign SAML response.\n\n@param samlResponse the SAML response\n@param privateKey   the private key\n@param publicKey    the public key\n@return the response", "input": "Java", "output": "public static String signSamlResponse(final String samlResponse, final PrivateKey privateKey, final PublicKey publicKey) {\n        val doc = constructDocumentFromXml(samlResponse);\n\n        if (doc != null) {\n            val signedElement = signSamlElement(doc.getRootElement(),\n                privateKey, publicKey);\n            doc.setRootElement((org.jdom.Element) signedElement.detach());\n            return new XMLOutputter().outputString(doc);\n        }\n        throw new IllegalArgumentException(\"Error signing SAML Response: Null document\");\n    }"}, {"instruction": "Sets the loaded active scan rules of the add-on, allowing to set the status of the active scan rules appropriately and to\nkeep track of the active scan rules loaded so that they can be removed during uninstallation.\n<p>\n<strong>Note:</strong> Helper method to be used (only) by/during (un)installation process and loading of the add-on.\nShould be called when installing/loading the add-on, by setting the loaded active scan rules, and when uninstalling by\nsetting an empty list. The method {@code setLoadedAscanrulesSet(boolean)} should also be called.\n\n@param ascanrules the active scan rules loaded, might be empty if none were actually loaded\n@throws IllegalArgumentException if {@code ascanrules} is {@code null}.\n@since 2.4.3\n@see #setLoadedAscanrulesSet(boolean)\n@see AbstractPlugin#setStatus(Status)", "input": "Java", "output": "void setLoadedAscanrules(List<AbstractPlugin> ascanrules) {\r\n\t\tif (ascanrules == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Parameter ascanrules must not be null.\");\r\n\t\t}\r\n\r\n\t\tif (ascanrules.isEmpty()) {\r\n\t\t\tloadedAscanrules = Collections.emptyList();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (AbstractPlugin ascanrule : ascanrules) {\r\n\t\t\tascanrule.setStatus(getStatus());\r\n\t\t}\r\n\t\tloadedAscanrules = Collections.unmodifiableList(new ArrayList<>(ascanrules));\r\n\t}"}, {"instruction": "Finds an item whose name (when referenced from the specified context) is closest to the given name.\n@param <T> the type of item being considered\n@param type same as {@code T}\n@param name the supplied name\n@param context a context to start from (used to compute relative names)\n@return the closest available item\n@since 1.538", "input": "Java", "output": "public static @CheckForNull <T extends Item> T findNearest(Class<T> type, String name, ItemGroup context) {\n        List<String> names = new ArrayList<>();\n        for (T item: Jenkins.getInstance().allItems(type)) {\n            names.add(item.getRelativeNameFrom(context));\n        }\n        String nearest = EditDistance.findNearest(name, names);\n        return Jenkins.getInstance().getItem(nearest, context, type);\n    }"}, {"instruction": "\u751f\u6210\u7684Mapper\u63a5\u53e3\n\n@param interfaze\n@param topLevelClass\n@param introspectedTable\n@return", "input": "Java", "output": "@Override\n    public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\n        //\u83b7\u53d6\u5b9e\u4f53\u7c7b\n        FullyQualifiedJavaType entityType = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());\n        //import\u63a5\u53e3\n        for (String mapper : mappers) {\n            interfaze.addImportedType(new FullyQualifiedJavaType(mapper));\n            interfaze.addSuperInterface(new FullyQualifiedJavaType(mapper + \"<\" + entityType.getShortName() + \">\"));\n        }\n        //import\u5b9e\u4f53\u7c7b\n        interfaze.addImportedType(entityType);\n        return true;\n    }"}, {"instruction": "Inherited.", "input": "Java", "output": "public Map<String, String> parseParameters(HttpServletRequest request) {\n    Map<String, String> parameters = parseHeaderParameters(request);\n\n    if (parameters == null) {\n      //if there is no header authorization parameters, then the oauth parameters are the supported OAuth request parameters.\n      parameters = new HashMap<String, String>();\n      for (String supportedOAuthParameter : getSupportedOAuthParameters()) {\n        String param = request.getParameter(supportedOAuthParameter);\n        if (param != null) {\n          parameters.put(supportedOAuthParameter, param);\n        }\n      }\n    }\n\n    return parameters;\n  }"}, {"instruction": "Optimize and condition.\n\n@return and condition", "input": "Java", "output": "public AndCondition optimize() {\n        AndCondition result = new AndCondition();\n        for (Condition each : conditions) {\n            if (Condition.class.equals(each.getClass())) {\n                result.getConditions().add(each);\n            }\n        }\n        if (result.getConditions().isEmpty()) {\n            result.getConditions().add(new NullCondition());\n        }\n        return result;\n    }"}, {"instruction": "\u5224\u65ad\u6307\u5b9a\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u652f\u6301\uff1a\n\n<pre>\n1. CharSequence\n2. Map\n3. Iterable\n4. Iterator\n5. Array\n</pre>\n\n@param obj \u88ab\u5224\u65ad\u7684\u5bf9\u8c61\n@return \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u652f\u6301\uff0c\u8fd4\u56defalse\n@since 4.5.7", "input": "Java", "output": "@SuppressWarnings(\"rawtypes\")\r\n\tpublic static boolean isEmpty(Object obj) {\r\n\t\tif(null == obj) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(obj instanceof CharSequence) {\r\n\t\t\treturn StrUtil.isEmpty((CharSequence)obj);\r\n\t\t}else if(obj instanceof Map) {\r\n\t\t\treturn MapUtil.isEmpty((Map)obj);\r\n\t\t}else if(obj instanceof Iterable) {\r\n\t\t\treturn IterUtil.isEmpty((Iterable)obj);\r\n\t\t}else if(obj instanceof Iterator) {\r\n\t\t\treturn IterUtil.isEmpty((Iterator)obj);\r\n\t\t}else if(ArrayUtil.isArray(obj)) {\r\n\t\t\treturn ArrayUtil.isEmpty(obj);\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}"}, {"instruction": "\u5904\u7406\u6392\u5e8f\n\n@param entityTable\n@param field\n@param entityColumn", "input": "Java", "output": "protected void processOrderBy(EntityTable entityTable, EntityField field, EntityColumn entityColumn) {\n        String orderBy = \"\";\n        if(field.isAnnotationPresent(OrderBy.class)){\n            orderBy = field.getAnnotation(OrderBy.class).value();\n            if (\"\".equals(orderBy)) {\n                orderBy = \"ASC\";\n            }\n            log.warn(OrderBy.class + \" is outdated, use \" + Order.class + \" instead!\");\n        }\n        if (field.isAnnotationPresent(Order.class)) {\n            Order order = field.getAnnotation(Order.class);\n            if (\"\".equals(order.value()) && \"\".equals(orderBy)) {\n                orderBy = \"ASC\";\n            } else {\n                orderBy = order.value();\n            }\n            entityColumn.setOrderPriority(order.priority());\n        }\n        if (StringUtil.isNotEmpty(orderBy)) {\n            entityColumn.setOrderBy(orderBy);\n        }\n    }"}, {"instruction": "Construct document from xml string.\n\n@param xmlString the xml string\n@return the document", "input": "Java", "output": "public static Document constructDocumentFromXml(final String xmlString) {\n        try {\n            val builder = new SAXBuilder();\n            builder.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            return builder.build(new ByteArrayInputStream(xmlString.getBytes(Charset.defaultCharset())));\n        } catch (final Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }"}, {"instruction": "The actual class name is irrelevant; this is functionally an enum.\n<p>Creating a {@code writeReplace} does not help much since XStream then just saves:\n{@code <installState class=\"jenkins.install.InstallState$CreateAdminUser\" resolves-to=\"jenkins.install.InstallState\">}\n@see #UNUSED_INNER_CLASSES\n@deprecated Should no longer be used, as {@link Jenkins} now saves only {@link #name}.", "input": "Java", "output": "@Deprecated\n    protected Object readResolve() {\n        // If we get invalid state from the configuration, fallback to unknown\n        if (StringUtils.isBlank(name)) {\n            LOGGER.log(Level.WARNING, \"Read install state with blank name: ''{0}''. It will be ignored\", name);\n            return UNKNOWN;\n        }\n        \n        InstallState state = InstallState.valueOf(name);\n        if (state == null) {\n            LOGGER.log(Level.WARNING, \"Cannot locate an extension point for the state ''{0}''. It will be ignored\", name);\n            return UNKNOWN;\n        }\n        \n        // Otherwise we return the actual state\n        return state;\n    }"}, {"instruction": "Get object from the storage, by key\n\n@param key", "input": "Java", "output": "@Override\n    public INDArray get(T key) {\n        try {\n            if (emulateIsAbsent)\n                lock.readLock().lock();\n\n            if (containsKey(key)) {\n                INDArray result = compressedEntries.get(key);\n\n                // TODO: we don't save decompressed entries here, but something like LRU might be good idea\n                return compressor.decompress(result);\n            } else {\n                return null;\n            }\n        } finally {\n            if (emulateIsAbsent)\n                lock.readLock().unlock();\n        }\n    }"}, {"instruction": "Deletes an access config from an instance's network interface.\n\n<p>Sample code:\n\n<pre><code>\ntry (InstanceClient instanceClient = InstanceClient.create()) {\nProjectZoneInstanceName instance = ProjectZoneInstanceName.of(\"[PROJECT]\", \"[ZONE]\", \"[INSTANCE]\");\nString networkInterface = \"\";\nString accessConfig = \"\";\nOperation response = instanceClient.deleteAccessConfigInstance(instance, networkInterface, accessConfig);\n}\n</code></pre>\n\n@param instance The instance name for this request.\n@param networkInterface The name of the network interface.\n@param accessConfig The name of the access config to delete.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation deleteAccessConfigInstance(\n      ProjectZoneInstanceName instance, String networkInterface, String accessConfig) {\n\n    DeleteAccessConfigInstanceHttpRequest request =\n        DeleteAccessConfigInstanceHttpRequest.newBuilder()\n            .setInstance(instance == null ? null : instance.toString())\n            .setNetworkInterface(networkInterface)\n            .setAccessConfig(accessConfig)\n            .build();\n    return deleteAccessConfigInstance(request);\n  }"}, {"instruction": "GRPC_PROXY_EXP is deprecated but let's maintain compatibility for now.", "input": "Java", "output": "private static InetSocketAddress overrideProxy(String proxyHostPort) {\n    if (proxyHostPort == null) {\n      return null;\n    }\n\n    String[] parts = proxyHostPort.split(\":\", 2);\n    int port = 80;\n    if (parts.length > 1) {\n      port = Integer.parseInt(parts[1]);\n    }\n    log.warning(\n        \"Detected GRPC_PROXY_EXP and will honor it, but this feature will \"\n            + \"be removed in a future release. Use the JVM flags \"\n            + \"\\\"-Dhttps.proxyHost=HOST -Dhttps.proxyPort=PORT\\\" to set the https proxy for \"\n            + \"this JVM.\");\n    return new InetSocketAddress(parts[0], port);\n  }"}, {"instruction": "\u9a8c\u8bc110\u4f4d\u8eab\u4efd\u7f16\u7801\u662f\u5426\u5408\u6cd5\n\n@param idCard \u8eab\u4efd\u7f16\u7801\n@return \u8eab\u4efd\u8bc1\u4fe1\u606f\u6570\u7ec4\n<p>\n[0] - \u53f0\u6e7e\u3001\u6fb3\u95e8\u3001\u9999\u6e2f [1] - \u6027\u522b(\u7537M,\u5973F,\u672a\u77e5N) [2] - \u662f\u5426\u5408\u6cd5(\u5408\u6cd5true,\u4e0d\u5408\u6cd5false) \u82e5\u4e0d\u662f\u8eab\u4efd\u8bc1\u4ef6\u53f7\u7801\u5219\u8fd4\u56denull\n</p>", "input": "Java", "output": "public static String[] isValidCard10(String idCard) {\r\n\t\tif(StrUtil.isBlank(idCard)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tString[] info = new String[3];\r\n\t\tString card = idCard.replaceAll(\"[\\\\(|\\\\)]\", \"\");\r\n\t\tif (card.length() != 8 && card.length() != 9 && idCard.length() != 10) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (idCard.matches(\"^[a-zA-Z][0-9]{9}$\")) { // \u53f0\u6e7e\r\n\t\t\tinfo[0] = \"\u53f0\u6e7e\";\r\n\t\t\tString char2 = idCard.substring(1, 2);\r\n\t\t\tif (char2.equals(\"1\")) {\r\n\t\t\t\tinfo[1] = \"M\";\r\n\t\t\t} else if (char2.equals(\"2\")) {\r\n\t\t\t\tinfo[1] = \"F\";\r\n\t\t\t} else {\r\n\t\t\t\tinfo[1] = \"N\";\r\n\t\t\t\tinfo[2] = \"false\";\r\n\t\t\t\treturn info;\r\n\t\t\t}\r\n\t\t\tinfo[2] = isValidTWCard(idCard) ? \"true\" : \"false\";\r\n\t\t} else if (idCard.matches(\"^[1|5|7][0-9]{6}\\\\(?[0-9A-Z]\\\\)?$\")) { // \u6fb3\u95e8\r\n\t\t\tinfo[0] = \"\u6fb3\u95e8\";\r\n\t\t\tinfo[1] = \"N\";\r\n\t\t} else if (idCard.matches(\"^[A-Z]{1,2}[0-9]{6}\\\\(?[0-9A]\\\\)?$\")) { // \u9999\u6e2f\r\n\t\t\tinfo[0] = \"\u9999\u6e2f\";\r\n\t\t\tinfo[1] = \"N\";\r\n\t\t\tinfo[2] = isValidHKCard(idCard) ? \"true\" : \"false\";\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn info;\r\n\t}"}, {"instruction": "Sets the negotiation type for the HTTP/2 connection.\n\n<p>If TLS is enabled a default {@link SSLSocketFactory} is created using the best\n{@link java.security.Provider} available and is NOT based on\n{@link SSLSocketFactory#getDefault}. To more precisely control the TLS configuration call\n{@link #sslSocketFactory} to override the socket factory used.\n\n<p>Default: <code>TLS</code>\n\n@deprecated use {@link #usePlaintext()} or {@link #useTransportSecurity()} instead.", "input": "Java", "output": "@Deprecated\n  public final OkHttpChannelBuilder negotiationType(io.grpc.okhttp.NegotiationType type) {\n    Preconditions.checkNotNull(type, \"type\");\n    switch (type) {\n      case TLS:\n        negotiationType = NegotiationType.TLS;\n        break;\n      case PLAINTEXT:\n        negotiationType = NegotiationType.PLAINTEXT;\n        break;\n      default:\n        throw new AssertionError(\"Unknown negotiation type: \" + type);\n    }\n    return this;\n  }"}, {"instruction": "Gets the JDK installation of the given name, or returns null.", "input": "Java", "output": "public JDK getJDK(String name) {\n        if(name==null) {\n            // if only one JDK is configured, \"default JDK\" should mean that JDK.\n            List<JDK> jdks = getJDKs();\n            if(jdks.size()==1)  return jdks.get(0);\n            return null;\n        }\n        for (JDK j : getJDKs()) {\n            if(j.getName().equals(name))\n                return j;\n        }\n        return null;\n    }"}, {"instruction": "Returns the unique id of the instance.\n(Note) now that id is set at creation time within the instanceProvider, why do the other checks?\nThis is still necessary for backwards compatibility when upgrading in a deployment with multiple\nclient versions (some with the change, some without).\n\n@return the unique id.", "input": "Java", "output": "@Override\n    @JsonIgnore\n    public String getId() {\n        if (instanceId != null && !instanceId.isEmpty()) {\n            return instanceId;\n        } else if (dataCenterInfo instanceof AmazonInfo) {\n            String uniqueId = ((AmazonInfo) dataCenterInfo).getId();\n            if (uniqueId != null && !uniqueId.isEmpty()) {\n                return uniqueId;\n            }\n        }\n        return hostName;\n    }"}, {"instruction": "Notify all listeners of the priority tree change events (in ascending order)\n@param events The events (top down order) which have changed", "input": "Java", "output": "void notifyParentChanged(List<ParentChangedEvent> events) {\n        for (int i = 0; i < events.size(); ++i) {\n            ParentChangedEvent event = events.get(i);\n            stateOnlyRemovalQueue.priorityChanged(event.state);\n            if (event.state.parent != null && event.state.activeCountForTree != 0) {\n                event.state.parent.offerAndInitializePseudoTime(event.state);\n                event.state.parent.activeCountChangeForTree(event.state.activeCountForTree);\n            }\n        }\n    }"}, {"instruction": "Gets loader.\n\n@param resource the resource\n@param name     the name\n@return the loader", "input": "Java", "output": "public BaseConfigurationPropertiesLoader getLoader(final Resource resource,\n                                                       final String name) {\n        val filename = StringUtils.defaultString(resource.getFilename()).toLowerCase();\n\n        if (filename.endsWith(\".properties\")) {\n            return new SimpleConfigurationPropertiesLoader(this.configurationCipherExecutor, name, resource);\n        }\n        if (filename.endsWith(\".groovy\")) {\n            return new GroovyConfigurationPropertiesLoader(this.configurationCipherExecutor, name,\n                getApplicationProfiles(environment), resource);\n        }\n        if (filename.endsWith(\".yaml\") || filename.endsWith(\".yml\")) {\n            return new YamlConfigurationPropertiesLoader(this.configurationCipherExecutor, name, resource);\n        }\n        throw new IllegalArgumentException(\"Unable to determine configuration loader for \" + resource);\n    }"}, {"instruction": "Adds a table schema under the given key.", "input": "Java", "output": "public void putTableSchema(String key, TableSchema schema) {\n\t\tcheckNotNull(key);\n\t\tcheckNotNull(schema);\n\n\t\tfinal String[] fieldNames = schema.getFieldNames();\n\t\tfinal TypeInformation<?>[] fieldTypes = schema.getFieldTypes();\n\n\t\tfinal List<List<String>> values = new ArrayList<>();\n\t\tfor (int i = 0; i < schema.getFieldCount(); i++) {\n\t\t\tvalues.add(Arrays.asList(fieldNames[i], TypeStringUtils.writeTypeInfo(fieldTypes[i])));\n\t\t}\n\n\t\tputIndexedFixedProperties(\n\t\t\tkey,\n\t\t\tArrays.asList(TABLE_SCHEMA_NAME, TABLE_SCHEMA_TYPE),\n\t\t\tvalues);\n\t}"}, {"instruction": "ScalaTupleComparator", "input": "Java", "output": "protected void privateDuplicate(TupleComparatorBase<T> toClone) {\n\t\t// copy fields and serializer factories\n\t\tthis.keyPositions = toClone.keyPositions;\n\n\t\tthis.serializers = new TypeSerializer[toClone.serializers.length];\n\t\tfor (int i = 0; i < toClone.serializers.length; i++) {\n\t\t\tthis.serializers[i] = toClone.serializers[i].duplicate();\n\t\t}\n\n\t\tthis.comparators = new TypeComparator[toClone.comparators.length];\n\t\tfor (int i = 0; i < toClone.comparators.length; i++) {\n\t\t\tthis.comparators[i] = toClone.comparators[i].duplicate();\n\t\t}\n\n\t\tthis.normalizedKeyLengths = toClone.normalizedKeyLengths;\n\t\tthis.numLeadingNormalizableKeys = toClone.numLeadingNormalizableKeys;\n\t\tthis.normalizableKeyPrefixLen = toClone.normalizableKeyPrefixLen;\n\t\tthis.invertNormKey = toClone.invertNormKey;\n\t}"}, {"instruction": "/*\nColor transition method.", "input": "Java", "output": "public Object evaluate(float fraction, Object startValue, Object endValue) {\n        int startInt = (Integer) startValue;\n        int startA = (startInt >> 24) & 0xff;\n        int startR = (startInt >> 16) & 0xff;\n        int startG = (startInt >> 8) & 0xff;\n        int startB = startInt & 0xff;\n\n        int endInt = (Integer) endValue;\n        int endA = (endInt >> 24) & 0xff;\n        int endR = (endInt >> 16) & 0xff;\n        int endG = (endInt >> 8) & 0xff;\n        int endB = endInt & 0xff;\n\n        return (int) ((startA + (int) (fraction * (endA - startA))) << 24) |\n                (int) ((startR + (int) (fraction * (endR - startR))) << 16) |\n                (int) ((startG + (int) (fraction * (endG - startG))) << 8) |\n                (int) ((startB + (int) (fraction * (endB - startB))));\n    }"}, {"instruction": "Blocking server-streaming example. Calls listFeatures with a rectangle of interest. Prints each\nresponse feature as it arrives.", "input": "Java", "output": "public void listFeatures(int lowLat, int lowLon, int hiLat, int hiLon) {\n    info(\"*** ListFeatures: lowLat={0} lowLon={1} hiLat={2} hiLon={3}\", lowLat, lowLon, hiLat,\n        hiLon);\n\n    Rectangle request =\n        Rectangle.newBuilder()\n            .setLo(Point.newBuilder().setLatitude(lowLat).setLongitude(lowLon).build())\n            .setHi(Point.newBuilder().setLatitude(hiLat).setLongitude(hiLon).build()).build();\n    Iterator<Feature> features;\n    try {\n      features = blockingStub.listFeatures(request);\n      for (int i = 1; features.hasNext(); i++) {\n        Feature feature = features.next();\n        info(\"Result #\" + i + \": {0}\", feature);\n        if (testHelper != null) {\n          testHelper.onMessage(feature);\n        }\n      }\n    } catch (StatusRuntimeException e) {\n      warning(\"RPC failed: {0}\", e.getStatus());\n      if (testHelper != null) {\n        testHelper.onRpcError(e);\n      }\n    }\n  }"}, {"instruction": "Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,\nthis method inserts the value. If the table already contains the key (and a value) this\nmethod will use the given ReduceFunction function to combine the existing value and the\ngiven value to a new value, and store that value for the key.\n\n@param key The key to map the value.\n@param value The new value to insert, or aggregate with the existing value.\n@param aggregator The aggregator to use if a value is already contained.\n\n@return The value in the map after this operation: Either the given value, or the aggregated value.\n\n@throws java.lang.NullPointerException Thrown, if the key is null.\n@throws Exception The method forwards exceptions from the aggregation function.", "input": "Java", "output": "public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {\n\t\tfinal int hash = hash(key);\n\t\tfinal int slot = indexOf(hash);\n\n\t\t// search the chain from the slot\n\t\tfor (Entry<K, V> entry = table[slot]; entry != null; entry = entry.next) {\n\t\t\tif (entry.hashCode == hash && entry.key.equals(key)) {\n\t\t\t\t// found match\n\t\t\t\tentry.value = aggregator.reduce(entry.value, value);\n\t\t\t\treturn entry.value;\n\t\t\t}\n\t\t}\n\n\t\t// no match, insert a new value\n\t\tinsertNewEntry(hash, key, value, slot);\n\t\t// return the original value\n\t\treturn value;\n\t}"}, {"instruction": "Get layer output type.\n\n@param  inputType    Array of InputTypes\n@return              output type as InputType\n@throws InvalidKerasConfigurationException Invalid Keras config", "input": "Java", "output": "@Override\n    public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                            \"Keras LRN layer accepts only one input (received \" + inputType.length + \")\");\n        return this.getLocalResponseNormalization().getOutputType(-1, inputType[0]);\n    }"}, {"instruction": "Sync part of an open file to the file system.\n\n@param fd      The file descriptor of the source file.\n@param offset  The offset within the file.\n@param nbytes  The number of bytes to be synced.\n@param flags   Signal how to synchronize", "input": "Java", "output": "private static void trySyncFileRange(int fd, long offset, long nbytes, int flags)\n  {\n    if (!initialized || !syncFileRangePossible || fd < 0) {\n      return;\n    }\n    try {\n      int ret_code = sync_file_range(fd, offset, nbytes, flags);\n      if (ret_code != 0) {\n        log.warn(\"failed on syncing fd [%d], offset [%d], bytes [%d], ret_code [%d], errno [%d]\",\n            fd, offset, nbytes, ret_code, Native.getLastError());\n        return;\n      }\n    }\n    catch (UnsupportedOperationException uoe) {\n      log.warn(uoe, \"sync_file_range is not supported\");\n      syncFileRangePossible = false;\n    }\n    catch (UnsatisfiedLinkError nle) {\n      log.warn(nle, \"sync_file_range failed on fd [%d], offset [%d], bytes [%d]\", fd, offset, nbytes);\n      syncFileRangePossible = false;\n    }\n    catch (Exception e) {\n      log.warn(e, \"Unknown exception: sync_file_range failed on fd [%d], offset [%d], bytes [%d]\",\n          fd, offset, nbytes);\n      syncFileRangePossible = false;\n    }\n  }"}, {"instruction": "Implentation for Iterable interface.\nPlease note: each call for iterator() resets underlying SentenceIterator to the beginning;\n\n@return", "input": "Java", "output": "@Override\n    public Iterator<String> iterator() {\n        this.reset();\n        Iterator<String> ret = new Iterator<String>() {\n            @Override\n            public boolean hasNext() {\n                return BasicLineIterator.this.hasNext();\n            }\n\n            @Override\n            public String next() {\n                return BasicLineIterator.this.nextSentence();\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n\n        return ret;\n    }"}, {"instruction": "/*\nWhen the connection fails - send exit to all local pids with links\nthrough this connection", "input": "Java", "output": "synchronized void breakLinks() {\n        if (links != null) {\n            final Link[] l = links.clearLinks();\n\n            if (l != null) {\n                final int len = l.length;\n\n                for (int i = 0; i < len; i++) {\n                    // send exit \"from\" remote pids to local ones\n                    self.deliver(new OtpMsg(OtpMsg.exitTag, l[i].remote(), l[i]\n                            .local(), new OtpErlangAtom(\"noconnection\")));\n                }\n            }\n        }\n    }"}, {"instruction": "Setup with direct executors, small payloads and the default flow-control window.", "input": "Java", "output": "@Setup(Level.Trial)\n  public void setup() throws Exception {\n    super.setup(clientExecutor,\n        ExecutorType.DIRECT,\n        MessageSize.SMALL,\n        responseSize,\n        FlowWindowSize.MEDIUM,\n        ChannelType.NIO,\n        maxConcurrentStreams,\n        channelCount);\n    callCounter = new AtomicLong();\n    completed = new AtomicBoolean();\n    record = new AtomicBoolean();\n    latch =\n        startFlowControlledStreamingCalls(maxConcurrentStreams, callCounter, record, completed, 1);\n  }"}, {"instruction": "Helper method for getDownstreamRelationship.\n\nFor each given build, find the build number range of the given project and put that into the map.", "input": "Java", "output": "private void checkAndRecord(AbstractProject that, TreeMap<Integer, RangeSet> r, Collection<R> builds) {\n        for (R build : builds) {\n            RangeSet rs = build.getDownstreamRelationship(that);\n            if(rs==null || rs.isEmpty())\n                continue;\n\n            int n = build.getNumber();\n\n            RangeSet value = r.get(n);\n            if(value==null)\n                r.put(n,rs);\n            else\n                value.add(rs);\n        }\n    }"}, {"instruction": "Parse insert values.\n\n@param insertStatement insert statement", "input": "Java", "output": "public void parse(final InsertStatement insertStatement) {\n        Collection<Keyword> valueKeywords = new LinkedList<>();\n        valueKeywords.add(DefaultKeyword.VALUES);\n        valueKeywords.addAll(Arrays.asList(getSynonymousKeywordsForValues()));\n        if (lexerEngine.skipIfEqual(valueKeywords.toArray(new Keyword[valueKeywords.size()]))) {\n            parseValues(insertStatement);\n        }\n    }"}, {"instruction": "Does any of the plugin has updates?", "input": "Java", "output": "@Exported\n    public boolean hasUpdates() {\n        Data data = getData();\n        if(data==null)      return false;\n        \n        for (PluginWrapper pw : Jenkins.getInstance().getPluginManager().getPlugins()) {\n            if(!pw.isBundled() && pw.getUpdateInfo()!=null)\n                // do not advertize updates to bundled plugins, since we generally want users to get them\n                // as a part of jenkins.war updates. This also avoids unnecessary pinning of plugins. \n                return true;\n        }\n        return false;\n    }"}, {"instruction": "Identical to calling {@code #releaseExceptionally(Exception); #reset()} except it is atomic.\n@param e The exception to fail all waiting futures with.", "input": "Java", "output": "public void releaseExceptionallyAndReset(Throwable e) {\n        ArrayList<CompletableFuture<T>> toComplete = null;\n        synchronized (lock) {\n            if (!waitingFutures.isEmpty()) {\n                toComplete = new ArrayList<>(waitingFutures);\n                waitingFutures.clear();\n            }\n            released = false;\n            this.e = null;\n            result = null;\n            runningThreadId = null;\n        }\n        if (toComplete != null) {\n            for (CompletableFuture<T> f : toComplete) {\n                f.completeExceptionally(e);\n            }\n        }\n    }"}, {"instruction": "Writes the JSON for {@code jsonElement} to {@code writer}.\n@throws JsonIOException if there was a problem writing to the writer", "input": "Java", "output": "public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {\n    boolean oldLenient = writer.isLenient();\n    writer.setLenient(true);\n    boolean oldHtmlSafe = writer.isHtmlSafe();\n    writer.setHtmlSafe(htmlSafe);\n    boolean oldSerializeNulls = writer.getSerializeNulls();\n    writer.setSerializeNulls(serializeNulls);\n    try {\n      Streams.write(jsonElement, writer);\n    } catch (IOException e) {\n      throw new JsonIOException(e);\n    } catch (AssertionError e) {\n      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n      error.initCause(e);\n      throw error;\n    } finally {\n      writer.setLenient(oldLenient);\n      writer.setHtmlSafe(oldHtmlSafe);\n      writer.setSerializeNulls(oldSerializeNulls);\n    }\n  }"}, {"instruction": "Downloads this blob to the given file path using specified blob read options.\n\n@param path destination\n@param options blob read options\n@throws StorageException upon failure", "input": "Java", "output": "public void downloadTo(Path path, BlobSourceOption... options) {\n    try (OutputStream outputStream = Files.newOutputStream(path);\n        ReadChannel reader = reader(options)) {\n      WritableByteChannel channel = Channels.newChannel(outputStream);\n      ByteBuffer bytes = ByteBuffer.allocate(DEFAULT_CHUNK_SIZE);\n      while (reader.read(bytes) > 0) {\n        bytes.flip();\n        channel.write(bytes);\n        bytes.clear();\n      }\n    } catch (IOException e) {\n      throw new StorageException(e);\n    }\n  }"}, {"instruction": "TODO: almost identical to ModelsHandler; refactor", "input": "Java", "output": "public static ModelMetrics getFromDKV(Key key) {\n    if (null == key)\n      throw new IllegalArgumentException(\"Got null key.\");\n\n    Value v = DKV.get(key);\n    if (null == v)\n      throw new IllegalArgumentException(\"Did not find key: \" + key.toString());\n\n    Iced ice = v.get();\n    if (! (ice instanceof ModelMetrics))\n      throw new IllegalArgumentException(\"Expected a Model for key: \" + key.toString() + \"; got a: \" + ice.getClass());\n\n    return (ModelMetrics)ice;\n  }"}, {"instruction": "\u5c06setting\u4e2d\u7684\u952e\u503c\u5173\u7cfb\u6620\u5c04\u5230\u5bf9\u8c61\u4e2d\uff0c\u539f\u7406\u662f\u8c03\u7528\u5bf9\u8c61\u5bf9\u5e94\u7684set\u65b9\u6cd5<br>\n\u53ea\u652f\u6301\u57fa\u672c\u7c7b\u578b\u7684\u8f6c\u6362\n\n@param group \u5206\u7ec4\n@param bean Bean\u5bf9\u8c61\n@return Bean", "input": "Java", "output": "public Object toBean(final String group, Object bean) {\r\n\t\treturn BeanUtil.fillBean(bean, new ValueProvider<String>(){\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Object value(String key, Type valueType) {\r\n\t\t\t\tfinal String value = getByGroup(key, group);\r\n//\t\t\t\tif (null != value) {\r\n//\t\t\t\t\tlog.debug(\"Parse setting to object field [{}={}]\", key, value);\r\n//\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean containsKey(String key) {\r\n\t\t\t\treturn null != getByGroup(key, group);\r\n\t\t\t}\r\n\t\t}, CopyOptions.create());\r\n\t}"}, {"instruction": "Instantiates a user code class from is definition in the task configuration.\nThe class is instantiated without arguments using the null-ary constructor. Instantiation\nwill fail if this constructor does not exist or is not public.\n\n@param <T> The generic type of the user code class.\n@param config The task configuration containing the class description.\n@param cl The class loader to be used to load the class.\n@param superClass The super class that the user code class extends or implements, for type checking.\n\n@return An instance of the user code class.", "input": "Java", "output": "public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {\n\t\ttry {\n\t\t\tT stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl);\n\t\t\t// check if the class is a subclass, if the check is required\n\t\t\tif (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {\n\t\t\t\tthrow new RuntimeException(\"The class '\" + stub.getClass().getName() + \"' is not a subclass of '\" + \n\t\t\t\t\t\tsuperClass.getName() + \"' as is required.\");\n\t\t\t}\n\t\t\treturn stub;\n\t\t}\n\t\tcatch (ClassCastException ccex) {\n\t\t\tthrow new RuntimeException(\"The UDF class is not a proper subclass of \" + superClass.getName(), ccex);\n\t\t}\n\t}"}, {"instruction": "Generic method to plan a {@link Runnable}.", "input": "Java", "output": "@Override\n    public void planOperation(Runnable operation) {\n        operations.add(operation);\n\n        if (operation instanceof AbstractOperation) {\n            ExecutionEntity execution = ((AbstractOperation) operation).getExecution();\n            if (execution != null) {\n                commandContext.addInvolvedExecution(execution);\n            }\n        }\n\n        logger.debug(\"Operation {} added to agenda\", operation.getClass());\n    }"}, {"instruction": "Set the state of the RNN layer, for use in {@link #rnnTimeStep(INDArray...)}\n\n@param layerName The name of the layer.\n@param state     The state to set the specified layer to", "input": "Java", "output": "public void rnnSetPreviousState(String layerName, Map<String, INDArray> state) {\n        Layer l = verticesMap.get(layerName).getLayer();\n        if(l instanceof org.deeplearning4j.nn.layers.wrapper.BaseWrapperLayer){\n            l = ((org.deeplearning4j.nn.layers.wrapper.BaseWrapperLayer)l).getUnderlying();\n        }\n        if (l == null || !(l instanceof RecurrentLayer)) {\n            throw new UnsupportedOperationException(\n                    \"Layer \\\"\" + layerName + \"\\\" is not a recurrent layer. Cannot set state\");\n        }\n        ((RecurrentLayer) l).rnnSetPreviousState(state);\n    }"}, {"instruction": "\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6c60<br>\n\u4f20\u5165\u963b\u585e\u7cfb\u6570\uff0c\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1aCPU\u53ef\u7528\u6838\u5fc3\u6570 / (1 - \u963b\u585e\u56e0\u5b50)<br>\nBlocking Coefficient(\u963b\u585e\u7cfb\u6570) = \u963b\u585e\u65f6\u95f4\uff0f\uff08\u963b\u585e\u65f6\u95f4+\u4f7f\u7528CPU\u7684\u65f6\u95f4\uff09<br>\n\u8ba1\u7b97\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u963b\u585e\u7cfb\u6570\u4e3a0\uff0c\u800cIO\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u963b\u585e\u7cfb\u6570\u5219\u63a5\u8fd1\u4e8e1\u3002\n\nsee: http://blog.csdn.net/partner4java/article/details/9417663\n\n@param blockingCoefficient \u963b\u585e\u7cfb\u6570\uff0c\u963b\u585e\u56e0\u5b50\u4ecb\u4e8e0~1\u4e4b\u95f4\u7684\u6570\uff0c\u963b\u585e\u56e0\u5b50\u8d8a\u5927\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u8d8a\u591a\u3002\n@return {@link ThreadPoolExecutor}\n@since 3.0.6", "input": "Java", "output": "public static ThreadPoolExecutor newExecutorByBlockingCoefficient(float blockingCoefficient) {\r\n\t\tif (blockingCoefficient >= 1 || blockingCoefficient < 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"[blockingCoefficient] must between 0 and 1, or equals 0.\");\r\n\t\t}\r\n\r\n\t\t// \u6700\u4f73\u7684\u7ebf\u7a0b\u6570 = CPU\u53ef\u7528\u6838\u5fc3\u6570 / (1 - \u963b\u585e\u7cfb\u6570)\r\n\t\tint poolSize = (int) (Runtime.getRuntime().availableProcessors() / (1 - blockingCoefficient));\r\n\t\treturn ExecutorBuilder.create().setCorePoolSize(poolSize).setMaxPoolSize(poolSize).setKeepAliveTime(0L).build();\r\n\t}"}, {"instruction": "Read and parse data from /proc/stat and /proc/&lt;pid&gt;/stat.\nIf this doesn't work for some reason, the values will be -1.", "input": "Java", "output": "public void read() {\n    String pid = \"-1\";\n    try {\n      pid = getProcessId();\n      _pid = pid;\n    }\n    catch (Exception ignore) {}\n\n    File f = new File (\"/proc/stat\");\n    if (! f.exists()) {\n      return;\n    }\n\n    try {\n      readSystemProcFile();\n      readProcessProcFile(pid);\n      readProcessNumOpenFds(pid);\n      readProcessStatusFile(pid);\n      parseSystemProcFile(_systemData);\n      parseProcessProcFile(_processData);\n      parseProcessStatusFile(_processStatus);\n    }\n    catch (Exception ignore) {}\n  }"}, {"instruction": "Store object into storage\n\n@param key\n@param object", "input": "Java", "output": "@Override\n    public void store(T key, INDArray object) {\n        INDArray toStore;\n        if (useInplaceCompression) {\n            compressor.compressi(object);\n            toStore = object;\n        } else {\n            toStore = compressor.compress(object);\n        }\n\n        if (emulateIsAbsent)\n            lock.writeLock().lock();\n\n        compressedEntries.put(key, toStore);\n\n        if (emulateIsAbsent)\n            lock.writeLock().unlock();\n    }"}, {"instruction": "Compute the broadcast rules according to:\nhttps://docs.scipy.org/doc/numpy-1.10.1/user/basics.broadcasting.html\n\nNote that the array can be null if the arrays are already equal\nin shape.\n\nThis function should be used in conjunction with\nthe shape ops.\n\n@param left the left array\n@param right the right array (the array to be broadcasted\n@return the broadcast dimensions if any", "input": "Java", "output": "public static int[] getBroadcastDimensions(int[] left,int[] right) {\n        if(Arrays.equals(left,right))\n            return null;\n\n        int n = Math.min(left.length,right.length);\n        List<Integer> dims = new ArrayList<>();\n        int leftIdx = left.length - 1;\n        int rightIdx = right.length - 1;\n        for(int i = n - 1; i >= 0; i--) {\n            if(left[leftIdx] != right[rightIdx] && right[rightIdx] == 1 || left[leftIdx] == 1) {\n                dims.add(i);\n            }\n            else if(left[leftIdx] != right[rightIdx]) {\n                throw new IllegalArgumentException(\"Unable to broadcast dimension \" + i + \" due to shape mismatch. Right shape must be 1. \"\n                        + \"Left array shape: \" + Arrays.toString(left) + \", right array shape: \" + Arrays.toString(right));\n            }\n\n            leftIdx--;\n            rightIdx--;\n        }\n\n        Collections.reverse(dims);\n        return Ints.toArray(dims);\n    }"}, {"instruction": "Update the internal state of RNN layers after a truncated BPTT fit call", "input": "Java", "output": "protected void rnnUpdateStateWithTBPTTState() {\n        for (int i = 0; i < layers.length; i++) {\n            if (layers[i] instanceof RecurrentLayer) {\n                RecurrentLayer l = ((RecurrentLayer) layers[i]);\n                l.rnnSetPreviousState(l.rnnGetTBPTTState());\n            } else if (layers[i] instanceof MultiLayerNetwork) {\n                ((MultiLayerNetwork) layers[i]).updateRnnStateWithTBPTTState();\n            }\n        }\n    }"}, {"instruction": "Gets a list of {@link AccumuloColumnConstraint} based on the given constraint ID, excluding the row ID column\n\n@param rowIdName Presto column name mapping to the Accumulo row ID\n@param constraint Set of query constraints\n@return List of all column constraints", "input": "Java", "output": "private static List<AccumuloColumnConstraint> getColumnConstraints(String rowIdName, TupleDomain<ColumnHandle> constraint)\n    {\n        ImmutableList.Builder<AccumuloColumnConstraint> constraintBuilder = ImmutableList.builder();\n        for (ColumnDomain<ColumnHandle> columnDomain : constraint.getColumnDomains().get()) {\n            AccumuloColumnHandle columnHandle = (AccumuloColumnHandle) columnDomain.getColumn();\n\n            if (!columnHandle.getName().equals(rowIdName)) {\n                // Family and qualifier will exist for non-row ID columns\n                constraintBuilder.add(new AccumuloColumnConstraint(\n                        columnHandle.getName(),\n                        columnHandle.getFamily().get(),\n                        columnHandle.getQualifier().get(),\n                        Optional.of(columnDomain.getDomain()),\n                        columnHandle.isIndexed()));\n            }\n        }\n\n        return constraintBuilder.build();\n    }"}, {"instruction": "Convert a string representing a decimal value to a long.\n\nIf the decimal value is not an exact integral value (e.g. 42.0), or if the decimal value\nis too large to be contained within a long, this function returns null.\n\n@param decimalStr string representing a decimal value\n\n@return long equivalent of decimalStr, returns null for non-integral decimals and integral decimal values outside\nof the values representable by longs", "input": "Java", "output": "@Nullable\n  public static Long getExactLongFromDecimalString(String decimalStr)\n  {\n    final Long val = GuavaUtils.tryParseLong(decimalStr);\n    if (val != null) {\n      return val;\n    }\n\n    BigDecimal convertedBD;\n    try {\n      convertedBD = new BigDecimal(decimalStr);\n    }\n    catch (NumberFormatException nfe) {\n      return null;\n    }\n\n    try {\n      return convertedBD.longValueExact();\n    }\n    catch (ArithmeticException ae) {\n      // indicates there was a non-integral part, or the BigDecimal was too big for a long\n      return null;\n    }\n  }"}, {"instruction": "Deselect all options that display text matching the argument. That is, when given \"Bar\" this\nwould deselect an option like:\n\n&lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n\n@param text The visible text to match against\n@throws NoSuchElementException If no matching option elements are found\n@throws UnsupportedOperationException If the SELECT does not support multiple selections", "input": "Java", "output": "@Override\n  public void deselectByVisibleText(String text) {\n    if (!isMultiple()) {\n      throw new UnsupportedOperationException(\n        \"You may only deselect options of a multi-select\");\n    }\n\n    List<WebElement> options = element.findElements(By.xpath(\n      \".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n    if (options.isEmpty()) {\n      throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n    }\n\n    for (WebElement option : options) {\n      setSelected(option, false);\n    }\n  }"}, {"instruction": "Returns an AggregatorFactory that can be used to combine the output of aggregators from this factory and\nanother factory. It is used when we have some values produced by this aggregator factory, and some values produced\nby the \"other\" aggregator factory, and we want to do some additional combining of them. This happens, for example,\nwhen compacting two segments together that both have a metric column with the same name. (Even though the name of\nthe column is the same, the aggregator factory used to create it may be different from segment to segment.)\n\nThis method may throw {@link AggregatorFactoryNotMergeableException}, meaning that \"this\" and \"other\" are not\ncompatible and values from one cannot sensibly be combined with values from the other.\n\n@return a new Factory that can be used for merging the output of aggregators from this factory and other.\n\n@see #getCombiningFactory() which is equivalent to {@code foo.getMergingFactory(foo)} (when \"this\" and \"other\"\nare the same instance).", "input": "Java", "output": "public AggregatorFactory getMergingFactory(AggregatorFactory other) throws AggregatorFactoryNotMergeableException\n  {\n    final AggregatorFactory combiningFactory = this.getCombiningFactory();\n    if (other.getName().equals(this.getName()) && combiningFactory.equals(other.getCombiningFactory())) {\n      return combiningFactory;\n    } else {\n      throw new AggregatorFactoryNotMergeableException(this, other);\n    }\n  }"}, {"instruction": "Called once the changelog is determined.\n\n<p>\nDuring a build, Jenkins fetches the update of the workspace from SCM,\nand determines the changelog (see {@link SCM#checkout}). Immediately\nafter that, a build will invoke this method on all registered\n{@link SCMListener}s.\n\n<p>\nIf a build failed before we successfully determine changelog, this method\nwill not be invoked (for example, if \"cvs update\" failed.) OTOH, this method\nis invoked before the actual build (like ant invocation) happens.\n\n<p>\nThis is an opportunity for SCM-related plugins to act on changelog.\nA typical usage includes parsing commit messages and do cross-referencing\nbetween other systems. Implementations can also contribute {@link Action}\nto {@link AbstractBuild} (by {@code build.getActions().add(...)} to\ndisplay additional data on build views.\n\n<p>\nTODO: once we have cvsnews plugin, refer to its usage.\n\n@param build\nThe build in progress, which just finished determining changelog.\nAt this point this build is still in progress. Never null.\n@param listener\n{@link BuildListener} for on-going build. This can be used to report\nany errors or the general logging of what's going on. This will show\nup in the \"console output\" of the build. Never null.\n@param changelog\nSet of changes detected in this build. This is the same value\nreturned from {@link AbstractBuild#getChangeSet()} but passed\nseparately for convenience.\n\n@throws Exception\nIf any exception is thrown from this method, it will be recorded\nand causes the build to fail.\n@since 1.568", "input": "Java", "output": "public void onChangeLogParsed(Run<?,?> build, SCM scm, TaskListener listener, ChangeLogSet<?> changelog) throws Exception {\n        if (build instanceof AbstractBuild && listener instanceof BuildListener && Util.isOverridden(SCMListener.class, getClass(), \"onChangeLogParsed\", AbstractBuild.class, BuildListener.class, ChangeLogSet.class)) {\n            onChangeLogParsed((AbstractBuild) build, (BuildListener) listener, changelog);\n        }\n    }"}, {"instruction": "reads, plus computes rows-per-chunk, min/max/mean, etc.", "input": "Java", "output": "public Vec close(int rowLayout, Futures fs) {\n    // Compute #chunks\n    int nchunk = _tmp_espc.length;\n    DKV.remove(chunkKey(nchunk),fs); // remove potential trailing key\n    while( nchunk > 1 && _tmp_espc[nchunk-1] == 0 ) {\n      nchunk--;\n      DKV.remove(chunkKey(nchunk),fs); // remove potential trailing key\n    }\n\n    // Replacement plain Vec for AppendableVec.\n    Vec vec = new Vec(_key, rowLayout, domain(), _type);\n    DKV.put(_key,vec,fs);       // Inject the header into the K/V store\n    return vec;\n  }"}, {"instruction": "Signallable activity behavior", "input": "Java", "output": "public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n    if (activityBehaviorInstance == null) {\n      activityBehaviorInstance = getActivityBehaviorInstance();\n    }\n\n    if (activityBehaviorInstance instanceof TriggerableActivityBehavior) {\n      ((TriggerableActivityBehavior) activityBehaviorInstance).trigger(execution, signalName, signalData);\n    } else {\n      throw new ActivitiException(\"signal() can only be called on a \" + TriggerableActivityBehavior.class.getName() + \" instance\");\n    }\n  }"}, {"instruction": "\u5f3a\u884c\u6dfb\u52a0\uff0c\u66ff\u6362\u5df2\u6709\u7684\u9876\u70b9\n\n@param line\n@param vertex", "input": "Java", "output": "public void push(int line, Vertex vertex)\n    {\n        Iterator<Vertex> iterator = vertexes[line].iterator();\n        while (iterator.hasNext())\n        {\n            if (iterator.next().realWord.length() == vertex.realWord.length())\n            {\n                iterator.remove();\n                --size;\n                break;\n            }\n        }\n        vertexes[line].add(vertex);\n        ++size;\n    }"}, {"instruction": "This method initializes this", "input": "Java", "output": "private  void initialize() {\r\n\t\thistoryListFiltersButtonGroup = new DeselectableButtonGroup();\r\n\r\n\t\tthis.setLayout(new BorderLayout());\r\n\t    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {\r\n\t    \tthis.setSize(600, 200);\r\n\t    }\r\n\t\tthis.add(getHistoryPanel(), java.awt.BorderLayout.CENTER);\r\n\t\t\r\n\t\tthis.setDefaultAccelerator(view.getMenuShortcutKeyStroke(KeyEvent.VK_H, KeyEvent.SHIFT_DOWN_MASK, false));\r\n\t\tthis.setMnemonic(Constant.messages.getChar(\"history.panel.mnemonic\"));\r\n\t\t\r\n\t}"}, {"instruction": "Splits the cookie token into attributes pairs.\n@param str input token.\n@return a map with the attribute pairs of the token if the input is valid.\nElse, returns null.", "input": "Java", "output": "private static Map<String, String> splitCookieToken(String tokenStr) {\n    Map<String, String> map = new HashMap<String, String>();\n    StringTokenizer st = new StringTokenizer(tokenStr, COOKIE_ATTR_SEPARATOR);\n\n    while (st.hasMoreTokens()) {\n      String part = st.nextToken();\n      int separator = part.indexOf(COOKIE_KEY_VALUE_SEPARATOR);\n      if (separator == -1) {\n        LOG.error(\"Invalid token string \" + tokenStr);\n        return null;\n      }\n      String key = part.substring(0, separator);\n      String value = part.substring(separator + 1);\n      map.put(key, value);\n    }\n    return map;\n  }"}, {"instruction": "Attach a list of network endpoints to the specified network endpoint group.\n\n<p>Sample code:\n\n<pre><code>\ntry (NetworkEndpointGroupClient networkEndpointGroupClient = NetworkEndpointGroupClient.create()) {\nProjectZoneNetworkEndpointGroupName networkEndpointGroup = ProjectZoneNetworkEndpointGroupName.of(\"[PROJECT]\", \"[ZONE]\", \"[NETWORK_ENDPOINT_GROUP]\");\nNetworkEndpointGroupsAttachEndpointsRequest networkEndpointGroupsAttachEndpointsRequestResource = NetworkEndpointGroupsAttachEndpointsRequest.newBuilder().build();\nOperation response = networkEndpointGroupClient.attachNetworkEndpointsNetworkEndpointGroup(networkEndpointGroup, networkEndpointGroupsAttachEndpointsRequestResource);\n}\n</code></pre>\n\n@param networkEndpointGroup The name of the network endpoint group where you are attaching\nnetwork endpoints to. It should comply with RFC1035.\n@param networkEndpointGroupsAttachEndpointsRequestResource\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation attachNetworkEndpointsNetworkEndpointGroup(\n      ProjectZoneNetworkEndpointGroupName networkEndpointGroup,\n      NetworkEndpointGroupsAttachEndpointsRequest\n          networkEndpointGroupsAttachEndpointsRequestResource) {\n\n    AttachNetworkEndpointsNetworkEndpointGroupHttpRequest request =\n        AttachNetworkEndpointsNetworkEndpointGroupHttpRequest.newBuilder()\n            .setNetworkEndpointGroup(\n                networkEndpointGroup == null ? null : networkEndpointGroup.toString())\n            .setNetworkEndpointGroupsAttachEndpointsRequestResource(\n                networkEndpointGroupsAttachEndpointsRequestResource)\n            .build();\n    return attachNetworkEndpointsNetworkEndpointGroup(request);\n  }"}, {"instruction": "Hashes a filename into the corresponding local directory, in a manner consistent with\nSpark's DiskBlockManager.getFile().", "input": "Java", "output": "@VisibleForTesting\n  static File getFile(String[] localDirs, int subDirsPerLocalDir, String filename) {\n    int hash = JavaUtils.nonNegativeHash(filename);\n    String localDir = localDirs[hash % localDirs.length];\n    int subDirId = (hash / localDirs.length) % subDirsPerLocalDir;\n    return new File(createNormalizedInternedPathname(\n        localDir, String.format(\"%02x\", subDirId), filename));\n  }"}, {"instruction": "Creates a state info from a new meta info to use with a k/v state.\n\n<p>Creates the column family for the state.\nSets TTL compaction filter if {@code ttlCompactFiltersManager} is not {@code null}.", "input": "Java", "output": "public static RocksDBKeyedStateBackend.RocksDbKvStateInfo createStateInfo(\n\t\tRegisteredStateMetaInfoBase metaInfoBase,\n\t\tRocksDB db,\n\t\tFunction<String, ColumnFamilyOptions> columnFamilyOptionsFactory,\n\t\t@Nullable RocksDbTtlCompactFiltersManager ttlCompactFiltersManager) {\n\n\t\tColumnFamilyDescriptor columnFamilyDescriptor = createColumnFamilyDescriptor(\n\t\t\tmetaInfoBase, columnFamilyOptionsFactory, ttlCompactFiltersManager);\n\t\treturn new RocksDBKeyedStateBackend.RocksDbKvStateInfo(createColumnFamily(columnFamilyDescriptor, db), metaInfoBase);\n\t}"}, {"instruction": "Adds offset to the underlying {@link SortTableOperation} if it is a valid one.\n\n@param offset offset to add\n@param child should be {@link SortTableOperation}\n@return valid sort operation with applied offset", "input": "Java", "output": "public TableOperation createLimitWithOffset(int offset, TableOperation child) {\n\t\tSortTableOperation previousSort = validateAndGetChildSort(child);\n\n\t\tif (offset < 0) {\n\t\t\tthrow new ValidationException(\"Offset should be greater or equal 0\");\n\t\t}\n\n\t\tif (previousSort.getOffset() != -1) {\n\t\t\tthrow new ValidationException(\"OFFSET already defined\");\n\t\t}\n\n\t\treturn new SortTableOperation(previousSort.getOrder(), previousSort.getChild(), offset, -1);\n\t}"}, {"instruction": "Transforms a {@code SplitTransformation}.\n\n<p>We add the output selector to previously transformed nodes.", "input": "Java", "output": "private <T> Collection<Integer> transformSplit(SplitTransformation<T> split) {\n\n\t\tStreamTransformation<T> input = split.getInput();\n\t\tCollection<Integer> resultIds = transform(input);\n\n\t\tvalidateSplitTransformation(input);\n\n\t\t// the recursive transform call might have transformed this already\n\t\tif (alreadyTransformed.containsKey(split)) {\n\t\t\treturn alreadyTransformed.get(split);\n\t\t}\n\n\t\tfor (int inputId : resultIds) {\n\t\t\tstreamGraph.addOutputSelector(inputId, split.getOutputSelector());\n\t\t}\n\n\t\treturn resultIds;\n\t}"}, {"instruction": "Checks to see if the candidate displayName collides with any\nexisting display names or project names\n@param displayName The display name to test\n@param jobName The name of the job the user is configuring", "input": "Java", "output": "public FormValidation doCheckDisplayName(@QueryParameter String displayName,\n            @QueryParameter String jobName) {\n        displayName = displayName.trim();\n\n        if(LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.log(Level.FINE, \"Current job name is \" + jobName);\n        }\n\n        if(!isNameUnique(displayName, jobName)) {\n            return FormValidation.warning(Messages.Jenkins_CheckDisplayName_NameNotUniqueWarning(displayName));\n        }\n        else if(!isDisplayNameUnique(displayName, jobName)){\n            return FormValidation.warning(Messages.Jenkins_CheckDisplayName_DisplayNameNotUniqueWarning(displayName));\n        }\n        else {\n            return FormValidation.ok();\n        }\n    }"}, {"instruction": "Read a little endian integer from the stream.\n\n@param n\nthe number of bytes to read\n\n@return the bytes read, converted from little endian to an integer.\n\n@exception OtpErlangDecodeException\nif the next byte cannot be read.", "input": "Java", "output": "public long readLE(final int n) throws OtpErlangDecodeException {\n        final byte[] b = new byte[n];\n        try {\n            super.read(b);\n        } catch (final IOException e) {\n            throw new OtpErlangDecodeException(\"Cannot read from input stream\");\n        }\n        long v = 0;\n        int i = n;\n        while (i-- > 0) {\n            v = v << 8 | (long) b[i] & 0xff;\n        }\n        return v;\n    }"}, {"instruction": "only for Jelly", "input": "Java", "output": "@Restricted(NoExternalUse.class)\n    public Collection<TokenInfoAndStats> getTokenList() {\n        return tokenStore.getTokenListSortedByName()\n                .stream()\n                .map(token -> {\n                    ApiTokenStats.SingleTokenStats stats = tokenStats.findTokenStatsById(token.getUuid());\n                    return new TokenInfoAndStats(token, stats);\n                })\n                .collect(Collectors.toList());\n    }"}, {"instruction": "This function checks the query for dimensions which can be optimized by applying the dimension extraction\nas the final step of the query instead of on every event.\n\n@param query The query to check for optimizations\n\n@return A collection of DimensionsSpec which can be extracted at the last second upon query completion.", "input": "Java", "output": "public static Collection<DimensionSpec> extractionsToRewrite(GroupByQuery query)\n  {\n    return Collections2.filter(\n        query.getDimensions(), new Predicate<DimensionSpec>()\n        {\n          @Override\n          public boolean apply(DimensionSpec input)\n          {\n            return input.getExtractionFn() != null\n                   && ExtractionFn.ExtractionType.ONE_TO_ONE.equals(\n                input.getExtractionFn().getExtractionType()\n            );\n          }\n        }\n    );\n  }"}, {"instruction": "Gets an optional enum param, returning {@code null} if the parameter was not found.\n\n@param <E> the type of the enum that will be returned\n@param params the params\n@param paramName the param name\n@param enumType the type of the enum\n@return the enum, or {@code null}\n@throws ApiException if the param value does not match any of the possible enum values", "input": "Java", "output": "public static <E extends Enum<E>> E getOptionalEnumParam(JSONObject params, String paramName,\n\t\t\tClass<E> enumType) throws ApiException {\n\t\tString enumValS = params.optString(paramName, null);\n\t\tE enumVal = null;\n\t\tif (enumValS != null && !enumValS.isEmpty()) {\n\t\t\ttry {\n\t\t\t\tenumVal = Enum.valueOf(enumType, enumValS);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow new ApiException(ApiException.Type.ILLEGAL_PARAMETER, paramName + \": \"\n\t\t\t\t\t\t+ ex.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t\treturn enumVal;\n\t}"}, {"instruction": "Write all values from the specified record reader to the specified record writer.\nOptionally, close the record writer on completion\n\n@param reader Record reader (source of data)\n@param writer Record writer (location to write data)\n@param closeOnCompletion if true: close the record writer once complete, via {@link RecordWriter#close()}\n@throws IOException If underlying reader/writer throws an exception", "input": "Java", "output": "public static void convert(RecordReader reader, RecordWriter writer, boolean closeOnCompletion) throws IOException {\n\n        if(!reader.hasNext()){\n            throw new UnsupportedOperationException(\"Cannot convert RecordReader: reader has no next element\");\n        }\n\n        while(reader.hasNext()){\n            writer.write(reader.next());\n        }\n\n        if(closeOnCompletion){\n            writer.close();\n        }\n    }"}, {"instruction": "\u62c6\u5206byte\u6570\u7ec4\u4e3a\u51e0\u4e2a\u7b49\u4efd\uff08\u6700\u540e\u4e00\u4efd\u53ef\u80fd\u5c0f\u4e8elen\uff09\n\n@param array \u6570\u7ec4\n@param len \u6bcf\u4e2a\u5c0f\u8282\u7684\u957f\u5ea6\n@return \u62c6\u5206\u540e\u7684\u6570\u7ec4", "input": "Java", "output": "public static byte[][] split(byte[] array, int len) {\r\n\t\tint x = array.length / len;\r\n\t\tint y = array.length % len;\r\n\t\tint z = 0;\r\n\t\tif (y != 0) {\r\n\t\t\tz = 1;\r\n\t\t}\r\n\t\tbyte[][] arrays = new byte[x + z][];\r\n\t\tbyte[] arr;\r\n\t\tfor (int i = 0; i < x + z; i++) {\r\n\t\t\tarr = new byte[len];\r\n\t\t\tif (i == x + z - 1 && y != 0) {\r\n\t\t\t\tSystem.arraycopy(array, i * len, arr, 0, y);\r\n\t\t\t} else {\r\n\t\t\t\tSystem.arraycopy(array, i * len, arr, 0, len);\r\n\t\t\t}\r\n\t\t\tarrays[i] = arr;\r\n\t\t}\r\n\t\treturn arrays;\r\n\t}"}, {"instruction": "Gets json web key from jwks.\n\n@param jwks the jwks\n@return the json web key from jwks", "input": "Java", "output": "public static RsaJsonWebKey getJsonWebKeyFromJsonWebKeySet(final JsonWebKeySet jwks) {\n        if (jwks.getJsonWebKeys().isEmpty()) {\n            LOGGER.warn(\"No JSON web keys are available in the keystore\");\n            return null;\n        }\n\n        val key = (RsaJsonWebKey) jwks.getJsonWebKeys().get(0);\n        if (StringUtils.isBlank(key.getAlgorithm())) {\n            LOGGER.warn(\"Located JSON web key [{}] has no algorithm defined\", key);\n        }\n        if (StringUtils.isBlank(key.getKeyId())) {\n            LOGGER.warn(\"Located JSON web key [{}] has no key id defined\", key);\n        }\n\n        if (key.getPublicKey() == null) {\n            LOGGER.warn(\"Located JSON web key [{}] has no public key\", key);\n            return null;\n        }\n        return key;\n    }"}, {"instruction": "Closes the Operation Queue and fails all Operations in it with the given exception.\n\n@param causingException The exception to fail with. If null, it will default to ObjectClosedException.", "input": "Java", "output": "private void closeQueue(Throwable causingException) {\n        // Close the operation queue and extract any outstanding Operations from it.\n        Collection<CompletableOperation> remainingOperations = this.operationQueue.close();\n        if (remainingOperations != null && remainingOperations.size() > 0) {\n            // If any outstanding Operations were left in the queue, they need to be failed.\n            // If no other cause was passed, assume we are closing the queue because we are shutting down.\n            Throwable failException = causingException != null ? causingException : new CancellationException();\n            cancelIncompleteOperations(remainingOperations, failException);\n        }\n\n        // The commit queue will auto-close when we are done and it itself is empty. We just need to unblock it in case\n        // it was idle and waiting on a pending take() operation.\n        this.commitQueue.cancelPendingTake();\n    }"}, {"instruction": "For some metrics such as OpStats, Pravega generates corresponding fail metrics automatically,\nthis method is called to create the name of fail metric for a given metric.\n\nSome examples of OpStats metrics and their corresponding fail metrics:\npravega.segmentstore.bookkeeper.write_latency_ms.0\npravega.segmentstore.bookkeeper.write_latency_ms_fail.0\n\npravega.segmentstore.thread_pool.active_threads\npravega.segmentstore.thread_pool.active_threads_fail\n\nThe rule is, if the last segment of the metric is an integer, such as container id, the suffix \"_fail\"\nis appended to the preceeding segment instead of the integer itself; otherwise simply append \"_fail\"\nonto the given metric to get the fail metric.\n\n@param metricName the metric name for which fail metric is created\n@return the name of fail metric", "input": "Java", "output": "public static String failMetricName(String metricName) {\n        if (Strings.isNullOrEmpty(metricName)) {\n            return metricName;\n        }\n        String[] tags = metricName.split(\"\\\\.\");\n        if (tags.length >= 2 && Ints.tryParse(tags[tags.length - 1]) != null) {\n            tags[tags.length - 2] += \"_fail\";\n            return String.join(\".\", tags);\n        } else {\n            return metricName + \"_fail\";\n        }\n    }"}, {"instruction": "Often an archive contains an extra top-level directory that's unnecessary when extracted on the disk\ninto the expected location. If your installation sources provide that kind of archives, override\nthis method to find the real root location.\n\n<p>\nThe caller will \"pull up\" the discovered real root by throw away the intermediate directory,\nso that the user-configured \"tool home\" directory contains the right files.\n\n<p>\nThe default implementation applies some heuristics to auto-determine if the pull up is necessary.\nThis should work for typical archive files.\n\n@param root\nThe directory that contains the extracted archive. This directory contains nothing but the\nextracted archive. For example, if the user installed\nhttp://archive.apache.org/dist/ant/binaries/jakarta-ant-1.1.zip , this directory would contain\na single directory \"jakarta-ant\".\n\n@return\nReturn the real top directory inside {@code root} that contains the meat. In the above example,\n{@code root.child(\"jakarta-ant\")} should be returned. If there's no directory to pull up,\nreturn null.", "input": "Java", "output": "protected FilePath findPullUpDirectory(FilePath root) throws IOException, InterruptedException {\n        // if the directory just contains one directory and that alone, assume that's the pull up subject\n        // otherwise leave it as is.\n        List<FilePath> children = root.list();\n        if(children.size()!=1)    return null;\n        if(children.get(0).isDirectory())\n            return children.get(0);\n        return null;\n    }"}, {"instruction": "Parse all Http request params", "input": "Java", "output": "private Pair<String, String>[] getAllParams(final HttpServletRequest req) {\n    final List<Pair<String, String>> allParams = new LinkedList<>();\n\n    final Iterator it = req.getParameterMap().entrySet().iterator();\n    while (it.hasNext()) {\n      final Map.Entry pairs = (Map.Entry) it.next();\n      for (final Object value : (String[]) pairs.getValue()) {\n        allParams.add(new Pair<>((String) pairs.getKey(), (String) value));\n      }\n    }\n\n    return allParams.toArray(new Pair[allParams.size()]);\n  }"}, {"instruction": "Resolve principal.\n\n@param handler    the handler name\n@param resolver   the resolver\n@param credential the credential\n@param principal  the current authenticated principal from a handler, if any.\n@return the principal", "input": "Java", "output": "protected Principal resolvePrincipal(final AuthenticationHandler handler, final PrincipalResolver resolver,\n                                         final Credential credential, final Principal principal) {\n        if (resolver.supports(credential)) {\n            try {\n                val p = resolver.resolve(credential, Optional.ofNullable(principal), Optional.ofNullable(handler));\n                LOGGER.debug(\"[{}] resolved [{}] from [{}]\", resolver, p, credential);\n                return p;\n            } catch (final Exception e) {\n                LOGGER.error(\"[{}] failed to resolve principal from [{}]\", resolver, credential, e);\n            }\n        } else {\n            LOGGER.warn(\n                \"[{}] is configured to use [{}] but it does not support [{}], which suggests a configuration problem.\",\n                handler.getName(), resolver, credential);\n        }\n        return null;\n    }"}, {"instruction": "occur while saving.", "input": "Java", "output": "@GuardedBy(\"tasks\")\n  private void saveRunningTasks()\n  {\n    final File restoreFile = getRestoreFile();\n    final List<String> theTasks = new ArrayList<>();\n    for (ForkingTaskRunnerWorkItem forkingTaskRunnerWorkItem : tasks.values()) {\n      theTasks.add(forkingTaskRunnerWorkItem.getTaskId());\n    }\n\n    try {\n      Files.createParentDirs(restoreFile);\n      jsonMapper.writeValue(restoreFile, new TaskRestoreInfo(theTasks));\n    }\n    catch (Exception e) {\n      log.warn(e, \"Failed to save tasks to restore file[%s]. Skipping this save.\", restoreFile);\n    }\n  }"}, {"instruction": "Adds the url to the list.\nBuild URI by components to facilitate proper encoding of querystring.\ne.g. http://example.com:8085/ca?action=crl&issuer=CN=CAS Test User CA\n<p>\n<p>If {@code uriString} is encoded, it will be decoded with {@code UTF-8}\nfirst before it's added to the list.</p>\n\n@param list      the list\n@param uriString the uri string", "input": "Java", "output": "private static void addURL(final List<URI> list, final String uriString) {\n        try {\n            try {\n                val url = new URL(URLDecoder.decode(uriString, StandardCharsets.UTF_8.name()));\n                list.add(new URI(url.getProtocol(), url.getAuthority(), url.getPath(), url.getQuery(), null));\n            } catch (final MalformedURLException e) {\n                list.add(new URI(uriString));\n            }\n        } catch (final Exception e) {\n            LOGGER.warn(\"[{}] is not a valid distribution point URI.\", uriString);\n        }\n    }"}, {"instruction": "Removes all stale cached misconfigured hosts.\n<p>\n<strong>Note:</strong> This method should be called in a {@code synchronized} block with the object\n{@code misconfiguredHosts}.\n\n@see #misconfiguredHosts\n@see #cacheMisconfiguredHost(String, int, InetAddress)\n@see #getCachedMisconfiguredHost(String, int)", "input": "Java", "output": "private static void removeStaleCachedMisconfiguredHosts() {\r\n\t\tlong currentTime = System.currentTimeMillis();\r\n\t\tif (!((currentTime - timeStampLastStaleCheck) >= MAX_AGE_MISCONFIGURED_HOST_IN_MS)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttimeStampLastStaleCheck = currentTime;\r\n\r\n\t\tfor (MapIterator it = misconfiguredHosts.mapIterator(); it.hasNext();) {\r\n\t\t\tit.next();\r\n\r\n\t\t\tMisconfiguredHostCacheEntry entry = (MisconfiguredHostCacheEntry) it.getValue();\r\n\t\t\tif (entry.isStale(currentTime)) {\r\n\t\t\t\tlogger.info(\"Removing stale cached address of misconfigured (\\\"unrecognized_name\\\") host [host=\"\r\n\t\t\t\t\t\t+ entry.getHost() + \", port=\" + entry.getPort()\r\n\t\t\t\t\t\t+ \"], following connections will be attempted with the hostname.\");\r\n\t\t\t\tit.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t}"}, {"instruction": "Get the int value of a transaction isolation level by name.\n\n@param transactionIsolationName the name of the transaction isolation level\n@return the int value of the isolation level or -1", "input": "Java", "output": "public static int getTransactionIsolation(final String transactionIsolationName) {\n      if (transactionIsolationName != null) {\n         try {\n            // use the english locale to avoid the infamous turkish locale bug\n            final String upperCaseIsolationLevelName = transactionIsolationName.toUpperCase(Locale.ENGLISH);\n            return IsolationLevel.valueOf(upperCaseIsolationLevelName).getLevelId();\n         } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid transaction isolation value: \" + transactionIsolationName);\n         }\n      }\n\n      return -1;\n   }"}, {"instruction": "\u5b9e\u4f8b\u5316\u5bf9\u8c61\n\n@param <T> \u5bf9\u8c61\u7c7b\u578b\n@param clazz \u7c7b\n@param params \u6784\u9020\u51fd\u6570\u53c2\u6570\n@return \u5bf9\u8c61\n@throws UtilException \u5305\u88c5\u5404\u7c7b\u5f02\u5e38", "input": "Java", "output": "public static <T> T newInstance(Class<T> clazz, Object... params) throws UtilException {\r\n\t\tif (ArrayUtil.isEmpty(params)) {\r\n\t\t\tfinal Constructor<T> constructor = getConstructor(clazz);\r\n\t\t\ttry {\r\n\t\t\t\treturn constructor.newInstance();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new UtilException(e, \"Instance class [{}] error!\", clazz);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfinal Class<?>[] paramTypes = ClassUtil.getClasses(params);\r\n\t\tfinal Constructor<T> constructor = getConstructor(clazz, paramTypes);\r\n\t\tif (null == constructor) {\r\n\t\t\tthrow new UtilException(\"No Constructor matched for parameter types: [{}]\", new Object[] { paramTypes });\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn constructor.newInstance(params);\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new UtilException(e, \"Instance class [{}] error!\", clazz);\r\n\t\t}\r\n\t}"}, {"instruction": "Rewrite assignments so that outputs are in terms of the input symbols.\nThis operation only reliably applies to aggregation steps that take partial inputs (e.g. INTERMEDIATE and split FINALs),\nwhich are guaranteed to have exactly one input and one output.\n<p>\nExample:\n'a' := sum('b') => 'b' := sum('b')", "input": "Java", "output": "private static Map<Symbol, Aggregation> inputsAsOutputs(Map<Symbol, Aggregation> assignments)\n    {\n        ImmutableMap.Builder<Symbol, Aggregation> builder = ImmutableMap.builder();\n        for (Map.Entry<Symbol, Aggregation> entry : assignments.entrySet()) {\n            // Should only have one input symbol\n            Symbol input = getOnlyElement(SymbolsExtractor.extractAll(entry.getValue().getCall()));\n            builder.put(input, entry.getValue());\n        }\n        return builder.build();\n    }"}, {"instruction": "Start a new workflow.  Returns the ID of the workflow instance that can be later used for tracking.\n\n@param name          Name of the workflow you want to start.\n@param version       Version of the workflow you want to start.\n@param correlationId CorrelationID of the workflow you want to start.\n@param input         Input to the workflow you want to start.\n@return the id of the workflow instance that can be use for tracking.", "input": "Java", "output": "@Service\n    public String startWorkflow(String name, Integer version, String correlationId, Map<String, Object> input) {\n        WorkflowDef workflowDef = metadataService.getWorkflowDef(name, version);\n        if (workflowDef == null) {\n            throw new ApplicationException(ApplicationException.Code.NOT_FOUND, String.format(\"No such workflow found by name: %s, version: %d\", name, version));\n        }\n        return workflowExecutor.startWorkflow(workflowDef.getName(), workflowDef.getVersion(), correlationId, input, null);\n    }"}, {"instruction": "Turn the arguments into a list.\n\n@param args the args\n@return the string[]", "input": "Java", "output": "private static String[] toResources(final Object[] args) {\n        val object = args[0];\n        if (object instanceof AuthenticationTransaction) {\n            val transaction = AuthenticationTransaction.class.cast(object);\n            return new String[]{SUPPLIED_CREDENTIALS + transaction.getCredentials()};\n        }\n        return new String[]{SUPPLIED_CREDENTIALS + CollectionUtils.wrap(object)};\n    }"}, {"instruction": "This method is used in DL4J LSTM implementation\n@param input\n@return", "input": "Java", "output": "public static INDArray toMmulCompatible(INDArray input) {\n        if (input.rank() != 2)\n            throw new IllegalArgumentException(\"Input must be rank 2 (matrix)\");\n        //Same conditions as GemmParams.copyIfNecessary()\n        boolean doCopy = false;\n        if (input.ordering() == 'c' && (input.stride(0) != input.size(1) || input.stride(1) != 1))\n            doCopy = true;\n        else if (input.ordering() == 'f' && (input.stride(0) != 1 || input.stride(1) != input.size(0)))\n            doCopy = true;\n\n        if (doCopy)\n            return Shape.toOffsetZeroCopyAnyOrder(input);\n        else\n            return input;\n    }"}, {"instruction": "\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6<br>\n\u9488\u5bf9\u4e00\u4e2a\u96c6\u5408\u4e2d\u5b58\u5728\u591a\u4e2a\u76f8\u540c\u5143\u7d20\u7684\u60c5\u51b5\uff0c\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u4e2d\u6b64\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u4fdd\u7559\u4e24\u4e2a\u96c6\u5408\u4e2d\u6b64\u5143\u7d20\u4e2a\u6570\u5dee\u7684\u4e2a\u6570<br>\n\u4f8b\u5982\uff1a\u96c6\u54081\uff1a[a, b, c, c, c]\uff0c\u96c6\u54082\uff1a[a, b, c, c]<br>\n\u7ed3\u679c\uff1a[c]\uff0c\u6b64\u7ed3\u679c\u4e2d\u53ea\u4fdd\u7559\u4e86\u4e00\u4e2a<br>\n\u4efb\u610f\u4e00\u4e2a\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u96c6\u5408<br>\n\u4e24\u4e2a\u96c6\u5408\u65e0\u4ea4\u96c6\u5219\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u7684\u7ec4\u5408\n\n@param <T> \u96c6\u5408\u5143\u7d20\u7c7b\u578b\n@param coll1 \u96c6\u54081\n@param coll2 \u96c6\u54082\n@return \u5dee\u96c6\u7684\u96c6\u5408\uff0c\u8fd4\u56de {@link ArrayList}", "input": "Java", "output": "public static <T> Collection<T> disjunction(Collection<T> coll1, Collection<T> coll2) {\r\n\t\tif (isEmpty(coll1)) {\r\n\t\t\treturn coll2;\r\n\t\t}\r\n\t\tif (isEmpty(coll2)) {\r\n\t\t\treturn coll1;\r\n\t\t}\r\n\r\n\t\tfinal ArrayList<T> result = new ArrayList<>();\r\n\t\tfinal Map<T, Integer> map1 = countMap(coll1);\r\n\t\tfinal Map<T, Integer> map2 = countMap(coll2);\r\n\t\tfinal Set<T> elts = newHashSet(coll2);\r\n\t\telts.addAll(coll1);\r\n\t\tint m;\r\n\t\tfor (T t : elts) {\r\n\t\t\tm = Math.abs(Convert.toInt(map1.get(t), 0) - Convert.toInt(map2.get(t), 0));\r\n\t\t\tfor (int i = 0; i < m; i++) {\r\n\t\t\t\tresult.add(t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}"}, {"instruction": "Remove all values for the given key without returning them. This is a minor performance\noptimization if you do not need the previous values.", "input": "Java", "output": "@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4691\")\n  public <T> void discardAll(Key<T> key) {\n    if (isEmpty()) {\n      return;\n    }\n    int writeIdx = 0;\n    int readIdx = 0;\n    for (; readIdx < size; readIdx++) {\n      if (bytesEqual(key.asciiName(), name(readIdx))) {\n        continue;\n      }\n      name(writeIdx, name(readIdx));\n      value(writeIdx, value(readIdx));\n      writeIdx++;\n    }\n    int newSize = writeIdx;\n    // Multiply by two since namesAndValues is interleaved.\n    Arrays.fill(namesAndValues, writeIdx * 2, len(), null);\n    size = newSize;\n  }"}, {"instruction": "Get the probability matrix (probability of the specified class, assuming an object is present, for all x/y\npositions), from the network output activations array\n\n@param networkOutput Network output activations\n@param example       Example number, in minibatch\n@param classNumber   Class number\n@return Confidence matrix", "input": "Java", "output": "public INDArray getProbabilityMatrix(INDArray networkOutput, int example, int classNumber){\n        //Input format: [minibatch, 5B+C, H, W], with order [x,y,w,h,c]\n        //Therefore: probabilities for class I is at depths 5B + classNumber\n\n        val bbs = layerConf().getBoundingBoxes().size(0);\n        INDArray conf = networkOutput.get(point(example), point(5*bbs + classNumber), all(), all());\n        return conf;\n    }"}, {"instruction": "Update the AllServer list in the LoadBalancer if necessary and enabled\n\n@param ls", "input": "Java", "output": "protected void updateAllServerList(List<T> ls) {\n        // other threads might be doing this - in which case, we pass\n        if (serverListUpdateInProgress.compareAndSet(false, true)) {\n            try {\n                for (T s : ls) {\n                    s.setAlive(true); // set so that clients can start using these\n                                      // servers right away instead\n                                      // of having to wait out the ping cycle.\n                }\n                setServersList(ls);\n                super.forceQuickPing();\n            } finally {\n                serverListUpdateInProgress.set(false);\n            }\n        }\n    }"}, {"instruction": "Unregisters the KvState instance identified by the given KvStateID.\n\n@param jobId     JobId the KvState instance belongs to\n@param kvStateId KvStateID to identify the KvState instance\n@param keyGroupRange    Key group range the KvState instance belongs to", "input": "Java", "output": "public void unregisterKvState(\n\t\t\tJobID jobId,\n\t\t\tJobVertexID jobVertexId,\n\t\t\tKeyGroupRange keyGroupRange,\n\t\t\tString registrationName,\n\t\t\tKvStateID kvStateId) {\n\n\t\tKvStateEntry<?, ?, ?> entry = registeredKvStates.remove(kvStateId);\n\t\tif (entry != null) {\n\t\t\tentry.clear();\n\n\t\t\tfinal KvStateRegistryListener listener = getKvStateRegistryListener(jobId);\n\t\t\tif (listener != null) {\n\t\t\t\tlistener.notifyKvStateUnregistered(\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tjobVertexId,\n\t\t\t\t\t\tkeyGroupRange,\n\t\t\t\t\t\tregistrationName);\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called\neach time we {@link #build()} a new {@link RestTemplate} instance.\n@param requestFactorySupplier the supplier for the request factory\n@return a new builder instance\n@since 2.0.0", "input": "Java", "output": "public RestTemplateBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier,\n\t\t\t\t\"RequestFactory Supplier must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, requestFactorySupplier, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}"}, {"instruction": "\u83b7\u5f97 Sofa Runtime \u7684\u65e5\u5fd7\u5bf9\u8c61\uff0c\u6253\u5370\u51fa\u83b7\u5f97Config Data \u4fe1\u606f", "input": "Java", "output": "private void printConfigData(String dataId, ConfigData configData) {\n\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n\n        if (configData != null && StringUtils.isNotBlank(configData.getData())) {\n            final String[] split = StringUtils.split(configData.getData(), CONFIG_SEPARATOR);\n            List<String> dataList = Arrays.asList(split);\n            for (String provider : dataList) {\n                sb.append(\"  >>> \").append(provider).append(\"\\n\");\n                count++;\n            }\n        }\n\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(LogCodes.getLiteLog(\n                \"Receive RPC config info: service[{0}]\\n  usable config info[{1}]\\n{2}\",\n                dataId, count, sb.toString()));\n        }\n    }"}, {"instruction": "\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\n\n@param aggr \u5b57\u7b26\u4e32\u96c6\u5408\n@param str  \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32\n@return", "input": "Java", "output": "public static boolean isInAggregate(String aggr, String str)\n    {\n        if (aggr != null && str != null)\n        {\n            str += \"1\";\n            for (int i = 0; i < str.length(); i++)\n            {\n                String s = str.substring(i, i + 1);\n                if (aggr.indexOf(s) == -1)\n                    return false;\n            }\n            return true;\n        }\n\n        return false;\n    }"}, {"instruction": "This method initializes menuItemPolicy\n\n@return javax.swing.JMenuItem", "input": "Java", "output": "private ZapMenuItem getMenuItemPolicy() {\r\n        if (menuItemPolicy == null) {\r\n            menuItemPolicy = new ZapMenuItem(\"menu.analyse.scanPolicy\",\r\n                    getView().getMenuShortcutKeyStroke(KeyEvent.VK_P, 0, false));\r\n\r\n            menuItemPolicy.addActionListener(new java.awt.event.ActionListener() {\r\n                @Override\r\n                public void actionPerformed(java.awt.event.ActionEvent e) {\r\n                    showPolicyManagerDialog();\r\n                }\r\n            });\r\n\r\n        }\r\n        \r\n        return menuItemPolicy;\r\n    }"}, {"instruction": "Creates a data stream from the given non-empty collection. The type of the data stream is that of the\nelements in the collection.\n\n<p>The framework will try and determine the exact type from the collection elements. In case of generic\nelements, it may be necessary to manually supply the type information via\n{@link #fromCollection(java.util.Collection, org.apache.flink.api.common.typeinfo.TypeInformation)}.\n\n<p>Note that this operation will result in a non-parallel data stream source, i.e. a data stream source with\nparallelism one.\n\n@param data\nThe collection of elements to create the data stream from.\n@param <OUT>\nThe generic type of the returned data stream.\n@return\nThe data stream representing the given collection", "input": "Java", "output": "public <OUT> DataStreamSource<OUT> fromCollection(Collection<OUT> data) {\n\t\tPreconditions.checkNotNull(data, \"Collection must not be null\");\n\t\tif (data.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"Collection must not be empty\");\n\t\t}\n\n\t\tOUT first = data.iterator().next();\n\t\tif (first == null) {\n\t\t\tthrow new IllegalArgumentException(\"Collection must not contain null elements\");\n\t\t}\n\n\t\tTypeInformation<OUT> typeInfo;\n\t\ttry {\n\t\t\ttypeInfo = TypeExtractor.getForObject(first);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Could not create TypeInformation for type \" + first.getClass()\n\t\t\t\t\t+ \"; please specify the TypeInformation manually via \"\n\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\", e);\n\t\t}\n\t\treturn fromCollection(data, typeInfo);\n\t}"}, {"instruction": "Copies the content of this string to a byte array.\n\n@param srcIdx the starting offset of characters to copy.\n@param dst the destination byte array.\n@param dstIdx the starting offset in the destination byte array.\n@param length the number of characters to copy.", "input": "Java", "output": "public void copy(int srcIdx, byte[] dst, int dstIdx, int length) {\n        if (isOutOfBounds(srcIdx, length, length())) {\n            throw new IndexOutOfBoundsException(\"expected: \" + \"0 <= srcIdx(\" + srcIdx + \") <= srcIdx + length(\"\n                            + length + \") <= srcLen(\" + length() + ')');\n        }\n\n        System.arraycopy(value, srcIdx + offset, checkNotNull(dst, \"dst\"), dstIdx, length);\n    }"}, {"instruction": "Removes the given panels of given panel type from the workbench panel.\n\n@param panels the panels to remove from the workbench panel\n@param panelType the type of the panels\n@throws IllegalArgumentException if any of the parameters is {@code null}.\n@since 2.5.0\n@see #addPanels(List, PanelType)\n@see #removePanel(AbstractPanel, PanelType)", "input": "Java", "output": "public void removePanels(List<AbstractPanel> panels, PanelType panelType) {\r\n\t\tvalidateNotNull(panels, \"panels\");\r\n\t\tvalidateNotNull(panelType, \"panelType\");\r\n\r\n\t\tremovePanels(getTabbedFull(), panels);\r\n\r\n\t\tswitch (panelType) {\r\n\t\tcase SELECT:\r\n\t\t\tremovePanels(getTabbedSelect(), panels);\r\n\t\t\tbreak;\r\n\t\tcase STATUS:\r\n\t\t\tremovePanels(getTabbedStatus(), panels);\r\n\t\t\tbreak;\r\n\t\tcase WORK:\r\n\t\t\tremovePanels(getTabbedWork(), panels);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}"}, {"instruction": "This method initializes this", "input": "Java", "output": "private void initialize() {\r\n        this.setName(Constant.messages.getString(\"options.script.title\"));\r\n        this.setLayout(new GridBagLayout());\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridx = 0;\r\n        gbc.weightx = 1.0;\r\n        gbc.anchor = GridBagConstraints.LINE_START;\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n\r\n        this.add(new JLabel(Constant.messages.getString(\"options.script.label.dirs\")), gbc);\r\n\r\n        tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(this.extension, getScriptDirModel());\r\n        \r\n        gbc.weighty = 1.0;\r\n        this.add(tokensOptionsPanel, gbc);\r\n\t}"}, {"instruction": "Converts a 128 bit array into a UUID.\nCopied from UUID's private constructor.", "input": "Java", "output": "@VisibleForTesting\n    static UUID bytesToUUID(byte[] data) {\n        long msb = 0;\n        long lsb = 0;\n        assert data.length == 16 : \"data must be 16 bytes in length\";\n        for (int i = 0; i < 8; i++) {\n            msb = (msb << 8) | (data[i] & 0xff);\n        }\n        for (int i = 8; i < 16; i++) {\n            lsb = (lsb << 8) | (data[i] & 0xff);\n        }\n        return new UUID(msb, lsb);\n    }"}, {"instruction": "Basically it works as low and high values were the same for source and filteringSource and just looks at NDVs.", "input": "Java", "output": "public static PlanNodeStatsEstimate computeSemiJoin(PlanNodeStatsEstimate sourceStats, PlanNodeStatsEstimate filteringSourceStats, Symbol sourceJoinSymbol, Symbol filteringSourceJoinSymbol)\n    {\n        return compute(sourceStats, filteringSourceStats, sourceJoinSymbol, filteringSourceJoinSymbol,\n                (sourceJoinSymbolStats, filteringSourceJoinSymbolStats) ->\n                        min(filteringSourceJoinSymbolStats.getDistinctValuesCount(), sourceJoinSymbolStats.getDistinctValuesCount()));\n    }"}, {"instruction": "Generates the REST API documentation.\n\n@param args args[0] contains the directory into which the generated files are placed\n@throws IOException if any file operation failed", "input": "Java", "output": "public static void main(String[] args) throws IOException {\n\t\tString outputDirectory = args[0];\n\n\t\tfor (final RestAPIVersion apiVersion : RestAPIVersion.values()) {\n\t\t\tif (apiVersion == RestAPIVersion.V0) {\n\t\t\t\t// this version exists only for testing purposes\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcreateHtmlFile(\n\t\t\t\tnew DocumentingDispatcherRestEndpoint(),\n\t\t\t\tapiVersion,\n\t\t\t\tPaths.get(outputDirectory, \"rest_\" + apiVersion.getURLVersionPrefix() + \"_dispatcher.html\"));\n\t\t}\n\t}"}, {"instruction": "Checks if the current security principal has the permission to create top level items within the specified\nitem group.\n<p>\nThis is just a convenience function.\n@param c the container of the item.\n@param d the descriptor of the item to be created.\n@throws AccessDeniedException\nif the user doesn't have the permission.\n@since 1.607", "input": "Java", "output": "public final void checkCreatePermission(@Nonnull ItemGroup c,\n                                            @Nonnull TopLevelItemDescriptor d) {\n        Authentication a = Jenkins.getAuthentication();\n        if (a == SYSTEM) {\n            return;\n        }\n        if (!hasCreatePermission(a, c, d)) {\n            throw new AccessDeniedException(Messages.AccessDeniedException2_MissingPermission(a.getName(),\n                    Item.CREATE.group.title+\"/\"+Item.CREATE.name + Item.CREATE + \"/\" + d.getDisplayName()));\n        }\n    }"}, {"instruction": "Removes the given slot from the slot manager.\n\n@param slotId identifying the slot to remove", "input": "Java", "output": "private void removeSlot(SlotID slotId) {\n\t\tTaskManagerSlot slot = slots.remove(slotId);\n\n\t\tif (null != slot) {\n\t\t\tfreeSlots.remove(slotId);\n\n\t\t\tif (slot.getState() == TaskManagerSlot.State.PENDING) {\n\t\t\t\t// reject the pending slot request --> triggering a new allocation attempt\n\t\t\t\trejectPendingSlotRequest(\n\t\t\t\t\tslot.getAssignedSlotRequest(),\n\t\t\t\t\tnew Exception(\"The assigned slot \" + slot.getSlotId() + \" was removed.\"));\n\t\t\t}\n\n\t\t\tAllocationID oldAllocationId = slot.getAllocationId();\n\n\t\t\tif (oldAllocationId != null) {\n\t\t\t\tfulfilledSlotRequests.remove(oldAllocationId);\n\n\t\t\t\tresourceActions.notifyAllocationFailure(\n\t\t\t\t\tslot.getJobId(),\n\t\t\t\t\toldAllocationId,\n\t\t\t\t\tnew FlinkException(\"The assigned slot \" + slot.getSlotId() + \" was removed.\"));\n\t\t\t}\n\t\t} else {\n\t\t\tLOG.debug(\"There was no slot registered with slot id {}.\", slotId);\n\t\t}\n\t}"}, {"instruction": "Utility method for determining the appropriate preprocessor for CNN layers, such as {@link ConvolutionLayer} and\n{@link SubsamplingLayer}\n\n@param inputType     Input type to get the preprocessor for\n@return              Null if no preprocessor is required; otherwise the appropriate preprocessor for the given input type", "input": "Java", "output": "public static InputPreProcessor getPreProcessorForInputTypeCnn3DLayers(InputType inputType, String layerName) {\n        switch (inputType.getType()) {\n            case FF:\n                log.info(\"Automatic addition of FF -> CNN3D preprocessors: not yet implemented (layer name: \\\"\"\n                                + layerName + \"\\\")\");\n                return null;\n            case RNN:\n                log.warn(\"Automatic addition of RNN -> CNN3D preprocessors: not yet implemented (layer name: \\\"\"\n                                + layerName + \"\\\")\");\n                return null;\n            // TODO: handle CNN to CNN3D\n            case CNN3D:\n                return null;\n            default:\n                throw new RuntimeException(\"Unknown input type: \" + inputType);\n        }\n    }"}, {"instruction": "\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u53ef\u80fd\u7684\u52a8\u4f5c\uff08\u52a8\u4f5c=shift | left | right + \u4f9d\u5b58\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u4e00\u6761\u65e2\u6709\u65b9\u5411\u53c8\u6709\u4f9d\u5b58\u5173\u7cfb\u540d\u79f0\u7684\u4f9d\u5b58\u8fb9\uff09\n@param source \u5f53\u524d\u72b6\u6001\n@param actions \u8f93\u51fa\u53ef\u80fd\u52a8\u4f5c", "input": "Java", "output": "void get_possible_actions(State source,\n                              List<Action> actions)\n    {\n        if (0 == L || -1 == R)\n        {\n            System.err.println(\"decoder: not initialized, please check if the root dependency relation is correct set by --root.\");\n            return;\n        }\n        actions.clear();\n\n        if (!source.buffer_empty())\n        {\n            actions.add(ActionFactory.make_shift());\n        }\n\n        if (source.stack_size() == 2)\n        {\n            if (source.buffer_empty())\n            {\n                actions.add(ActionFactory.make_right_arc(R));\n            }\n        }\n        else if (source.stack_size() > 2)\n        {\n            for (int l = 0; l < L; ++l)\n            {\n                if (l == R)\n                {\n                    continue;\n                }\n                actions.add(ActionFactory.make_left_arc(l));\n                actions.add(ActionFactory.make_right_arc(l));\n            }\n        }\n    }"}, {"instruction": "Gets the nodes from the site tree which are \"In Scope\". Searches recursively starting from\nthe root node. Should be used with care, as it is time-consuming, querying the database for\nevery node in the Site Tree.\n\n@return the nodes in scope from site tree", "input": "Java", "output": "public List<SiteNode> getTopNodesInContextFromSiteTree() {\r\n\t\tList<SiteNode> nodes = new LinkedList<>();\r\n\t\tSiteNode rootNode = session.getSiteTree().getRoot();\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tEnumeration<TreeNode> en = rootNode.children();\r\n\t\twhile (en.hasMoreElements()) {\r\n\t\t\tSiteNode sn = (SiteNode) en.nextElement();\r\n\t\t\tif (isContainsNodesInContext(sn)) {\r\n\t\t\t\tnodes.add(sn);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes;\r\n\t}"}, {"instruction": "Return the layer size (number of units) for the specified layer.<br>\nNote that the meaning of the \"layer size\" can depend on the type of layer. For example:<br>\n- DenseLayer, OutputLayer, recurrent layers: number of units (nOut configuration option)<br>\n- ConvolutionLayer: the channels (number of channels)<br>\n- Subsampling layers, global pooling layers, etc: size of 0 is always returned<br>\n\n@param layerName Name of the layer to get the size of\n@return Size of the layer", "input": "Java", "output": "public int layerSize(String layerName) {\n        Layer l = getLayer(layerName);\n        if(l == null){\n            throw new IllegalArgumentException(\"No layer with name \\\"\" + layerName + \"\\\" exists\");\n        }\n        org.deeplearning4j.nn.conf.layers.Layer conf = l.conf().getLayer();\n        if (conf == null || !(conf instanceof FeedForwardLayer)) {\n            return 0;\n        }\n        FeedForwardLayer ffl = (FeedForwardLayer) conf;\n\n        // FIXME: int cast\n        return (int) ffl.getNOut();\n    }"}, {"instruction": "Get the offset associated with an address encoded by\n{@link TaskMemoryManager#encodePageNumberAndOffset(MemoryBlock, long)}", "input": "Java", "output": "public long getOffsetInPage(long pagePlusOffsetAddress) {\n    final long offsetInPage = decodeOffset(pagePlusOffsetAddress);\n    if (tungstenMemoryMode == MemoryMode.ON_HEAP) {\n      return offsetInPage;\n    } else {\n      // In off-heap mode, an offset is an absolute address. In encodePageNumberAndOffset, we\n      // converted the absolute address into a relative address. Here, we invert that operation:\n      final int pageNumber = decodePageNumber(pagePlusOffsetAddress);\n      assert (pageNumber >= 0 && pageNumber < PAGE_TABLE_SIZE);\n      final MemoryBlock page = pageTable[pageNumber];\n      assert (page != null);\n      return page.getBaseOffset() + offsetInPage;\n    }\n  }"}, {"instruction": "\u6839\u636e\u7ed9\u5b9a\u7684\u56fe\u7247\u683c\u5f0f\u6216\u8005\u6269\u5c55\u540d\u83b7\u53d6{@link ImageWriter}\uff0c\u5982\u679c\u672a\u627e\u5230\u5408\u9002\u7684Writer\uff0c\u8fd4\u56denull\n\n@param formatName \u56fe\u7247\u683c\u5f0f\u6216\u6269\u5c55\u540d\uff0c\u4f8b\u5982\"jpg\"\u3001\"png\"\n@return {@link ImageWriter}\n@since 4.3.2", "input": "Java", "output": "public static ImageWriter getWriter(String formatName) {\r\n\t\tImageWriter writer = null;\r\n\t\tIterator<ImageWriter> iter = ImageIO.getImageWritersByFormatName(formatName);\r\n\t\tif (iter.hasNext()) {\r\n\t\t\twriter = iter.next();\r\n\t\t}\r\n\t\tif (null == writer) {\r\n\t\t\t// \u5c1d\u8bd5\u6269\u5c55\u540d\u83b7\u53d6\r\n\t\t\titer = ImageIO.getImageWritersBySuffix(formatName);\r\n\t\t\tif (iter.hasNext()) {\r\n\t\t\t\twriter = iter.next();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn writer;\r\n\t}"}, {"instruction": "/*\nthis method simulates net_kernel only for the purpose of replying to\npings.", "input": "Java", "output": "private boolean netKernel(final OtpMsg m) {\n        OtpMbox mbox = null;\n        try {\n            final OtpErlangTuple t = (OtpErlangTuple) m.getMsg();\n            final OtpErlangTuple req = (OtpErlangTuple) t.elementAt(1); // actual\n            // request\n\n            final OtpErlangPid pid = (OtpErlangPid) req.elementAt(0); // originating\n            // pid\n\n            final OtpErlangObject[] pong = new OtpErlangObject[2];\n            pong[0] = req.elementAt(1); // his #Ref\n            pong[1] = new OtpErlangAtom(\"yes\");\n\n            mbox = createMbox();\n            mbox.send(pid, new OtpErlangTuple(pong));\n            return true;\n        } catch (final Exception e) {\n        } finally {\n            closeMbox(mbox);\n        }\n        return false;\n    }"}, {"instruction": "\u521b\u5efa\u5e26cluster\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\uff0c\u81ea\u52a8\u5b8c\u6210failover\u5207\u6362\uff0c\u670d\u52a1\u5668\u5217\u8868\u81ea\u52a8\u626b\u63cf\n\n@param zkServers\n@param destination\n@param username\n@param password\n@return", "input": "Java", "output": "public static CanalConnector newClusterConnector(String zkServers, String destination, String username,\n                                                     String password) {\n        ClusterCanalConnector canalConnector = new ClusterCanalConnector(username,\n            password,\n            destination,\n            new ClusterNodeAccessStrategy(destination, ZkClientx.getZkClient(zkServers)));\n        canalConnector.setSoTimeout(60 * 1000);\n        canalConnector.setIdleTimeout(60 * 60 * 1000);\n        return canalConnector;\n    }"}, {"instruction": "region AutoCloseable Implementation", "input": "Java", "output": "@Override\n    public void close() {\n        if (!this.closed.getAndSet(true)) {\n            // Close all containers that are still open.\n            ArrayList<CompletableFuture<Void>> results = new ArrayList<>();\n            synchronized (this.handles) {\n                ArrayList<ContainerHandle> toClose = new ArrayList<>(this.handles.values());\n                for (ContainerHandle handle : toClose) {\n                    results.add(this.registry.stopContainer(handle, CLOSE_TIMEOUT_PER_CONTAINER));\n                }\n            }\n\n            // Wait for all the containers to be closed.\n            Futures.await(Futures.allOf(results), CLOSE_TIMEOUT_PER_CONTAINER.toMillis());\n        }\n    }"}, {"instruction": "Sets the Active SegmentChunk handle.\n\n@param handle The handle. Must not be read-only and for the last SegmentChunk.", "input": "Java", "output": "synchronized void setActiveChunkHandle(SegmentHandle handle) {\n        Preconditions.checkArgument(handle == null || !handle.isReadOnly(), \"Active SegmentChunk handle cannot be readonly.\");\n        SegmentChunk last = lastChunk();\n        Preconditions.checkState(last != null, \"Cannot set an Active SegmentChunk handle when there are no SegmentChunks.\");\n        Preconditions.checkArgument(handle == null || handle.getSegmentName().equals(last.getName()),\n                \"Active SegmentChunk handle must be for the last SegmentChunk.\");\n        this.activeChunkHandle = handle;\n    }"}, {"instruction": "Download the resource at getURL() to the local resource directory, and return the local copy as a File\n\n@return File of the local resource", "input": "Java", "output": "protected File getResourceFile(){\n\n        URL url = getURL();\n        String urlString = url.toString();\n        String filename = urlString.substring(urlString.lastIndexOf('/')+1);\n        File resourceDir = DL4JResources.getDirectory(ResourceType.RESOURCE, resourceName());\n        File localFile = new File(resourceDir, filename);\n\n        String expMD5 = resourceMD5();\n        if(localFile.exists()){\n            try{\n                if(Downloader.checkMD5OfFile(expMD5, localFile)){\n                    return localFile;\n                }\n            } catch (IOException e){\n                //Ignore\n            }\n            //MD5 failed\n            localFile.delete();\n        }\n\n        //Download\n        try {\n            Downloader.download(resourceName(), url, localFile, expMD5, 3);\n        } catch (IOException e){\n            throw new RuntimeException(\"Error downloading labels\",e);\n        }\n\n        return localFile;\n    }"}, {"instruction": "Build metadata resolver aggregate. Loops through metadata resources\nand attempts to resolve the metadata.\n\n@param entityId the entity id", "input": "Java", "output": "@Synchronized\n    @SneakyThrows\n    public void buildMetadataResolverAggregate(final String entityId) {\n        LOGGER.trace(\"Building metadata resolver aggregate\");\n        this.metadataResolver = new ChainingMetadataResolver();\n        val resolvers = new ArrayList<MetadataResolver>();\n        val entries = this.metadataResources.entrySet();\n        entries.forEach(entry -> {\n            val resource = entry.getKey();\n            LOGGER.debug(\"Loading [{}]\", resource.getFilename());\n            resolvers.addAll(loadMetadataFromResource(entry.getValue(), resource, entityId));\n        });\n        this.metadataResolver.setId(ChainingMetadataResolver.class.getCanonicalName());\n        this.metadataResolver.setResolvers(resolvers);\n        LOGGER.debug(\"Collected metadata from [{}] resolvers(s). Initializing aggregate resolver...\", resolvers.size());\n        this.metadataResolver.initialize();\n        LOGGER.info(\"Metadata aggregate initialized successfully.\");\n    }"}, {"instruction": "Convert a DataSet to the equivalent MultiDataSet", "input": "Java", "output": "public static MultiDataSet toMultiDataSet(DataSet dataSet) {\n        INDArray f = dataSet.getFeatures();\n        INDArray l = dataSet.getLabels();\n        INDArray fMask = dataSet.getFeaturesMaskArray();\n        INDArray lMask = dataSet.getLabelsMaskArray();\n\n        INDArray[] fNew = f == null ? null : new INDArray[] {f};\n        INDArray[] lNew = l == null ? null : new INDArray[] {l};\n        INDArray[] fMaskNew = (fMask != null ? new INDArray[] {fMask} : null);\n        INDArray[] lMaskNew = (lMask != null ? new INDArray[] {lMask} : null);\n\n        return new org.nd4j.linalg.dataset.MultiDataSet(fNew, lNew, fMaskNew, lMaskNew);\n    }"}, {"instruction": "Load a graph into memory, using a given EdgeLineProcessor.\nAssume one edge per line\n@param path Path to the file containing the edges, one per line\n@param lineProcessor EdgeLineProcessor used to convert lines of text into a graph (or null for comment lines etc)\n@param vertexFactory Used to create vertices\n@param numVertices number of vertices in the graph\n@param allowMultipleEdges whether the graph should allow multiple edges between a given pair of vertices or not\n@return IGraph", "input": "Java", "output": "public static <V, E> Graph<V, E> loadGraph(String path, EdgeLineProcessor<E> lineProcessor,\n                    VertexFactory<V> vertexFactory, int numVertices, boolean allowMultipleEdges) throws IOException {\n        Graph<V, E> graph = new Graph<>(numVertices, allowMultipleEdges, vertexFactory);\n\n        try (BufferedReader br = new BufferedReader(new FileReader(new File(path)))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                Edge<E> edge = lineProcessor.processLine(line);\n                if (edge != null) {\n                    graph.addEdge(edge);\n                }\n            }\n        }\n\n        return graph;\n    }"}, {"instruction": "Registers a KvState instance for the given key group index.\n\n@param keyGroupRange  Key group range to register\n@param kvStateId      ID of the KvState instance at the key group index.\n@param kvStateAddress Server address of the KvState instance at the key group index.\n@throws IndexOutOfBoundsException If key group range start < 0 or key group range end >= Number of key groups", "input": "Java", "output": "public void registerKvState(KeyGroupRange keyGroupRange, KvStateID kvStateId, InetSocketAddress kvStateAddress) {\n\n\t\tif (keyGroupRange.getStartKeyGroup() < 0 || keyGroupRange.getEndKeyGroup() >= numKeyGroups) {\n\t\t\tthrow new IndexOutOfBoundsException(\"Key group index\");\n\t\t}\n\n\t\tfor (int kgIdx = keyGroupRange.getStartKeyGroup(); kgIdx <= keyGroupRange.getEndKeyGroup(); ++kgIdx) {\n\n\t\t\tif (kvStateIds[kgIdx] == null && kvStateAddresses[kgIdx] == null) {\n\t\t\t\tnumRegisteredKeyGroups++;\n\t\t\t}\n\n\t\t\tkvStateIds[kgIdx] = kvStateId;\n\t\t\tkvStateAddresses[kgIdx] = kvStateAddress;\n\t\t}\n\t}"}, {"instruction": "Determine the SCM url and branch that is set for the component. Information\nis gathered with the assumption that the data is stored in options.url and\noptions.branch.\n\n@param component\n@return\t\t\tthe {@link RepoBranch} that the component uses", "input": "Java", "output": "protected RepoBranch getComponentRepoBranch(Component component) {\r\n        CollectorItem item = component.getFirstCollectorItemForType(CollectorType.SCM);\r\n        if (item == null) {\r\n        \tlogger.warn(\"Error encountered building pipeline: could not find scm collector item for dashboard.\");\r\n        \treturn new RepoBranch(\"\", \"\", RepoType.Unknown);\r\n        }\r\n        \r\n        // TODO find a better way?\r\n        String url = (String)item.getOptions().get(\"url\");\r\n        String branch = (String)item.getOptions().get(\"branch\");\r\n        \r\n        return new RepoBranch(url, branch, RepoType.Unknown);\r\n\t}"}, {"instruction": "This method will return a borrowed object to the bag.  Objects\nthat are borrowed from the bag but never \"requited\" will result\nin a memory leak.\n\n@param bagEntry the value to return to the bag\n@throws NullPointerException if value is null\n@throws IllegalStateException if the bagEntry was not borrowed from the bag", "input": "Java", "output": "public void requite(final T bagEntry)\n   {\n      bagEntry.setState(STATE_NOT_IN_USE);\n\n      for (int i = 0; waiters.get() > 0; i++) {\n         if (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) {\n            return;\n         }\n         else if ((i & 0xff) == 0xff) {\n            parkNanos(MICROSECONDS.toNanos(10));\n         }\n         else {\n            yield();\n         }\n      }\n\n      final List<Object> threadLocalList = threadList.get();\n      if (threadLocalList.size() < 50) {\n         threadLocalList.add(weakThreadLocals ? new WeakReference<>(bagEntry) : bagEntry);\n      }\n   }"}, {"instruction": "Get zero masking flag\n\n@param layerConfig dictionary containing Keras layer configuration\n@return if masking zeros or not\n@throws InvalidKerasConfigurationException Invalid Keras configuration", "input": "Java", "output": "public static boolean getZeroMaskingFromConfig(Map<String, Object> layerConfig,\n                                                   KerasLayerConfiguration conf)\n            throws InvalidKerasConfigurationException {\n        Map<String, Object> innerConfig = KerasLayerUtils.getInnerLayerConfigFromConfig(layerConfig, conf);\n        boolean hasZeroMasking = true;\n        if (innerConfig.containsKey(conf.getLAYER_FIELD_MASK_ZERO())) {\n            hasZeroMasking = (boolean) innerConfig.get(conf.getLAYER_FIELD_MASK_ZERO());\n        }\n        return hasZeroMasking;\n    }"}, {"instruction": "Init method validates configuration defined using", "input": "Java", "output": "protected void init() {\n        if (storage.size() != vocabCache.numWords())\n            throw new RuntimeException(\"Number of words in Vocab isn't matching number of stored Vectors. vocab: [\"\n                            + vocabCache.numWords() + \"]; storage: [\" + storage.size() + \"]\");\n\n        // initializing device cache\n        for (int i = 0; i < Nd4j.getAffinityManager().getNumberOfDevices(); i++) {\n            cacheWrtDevice.add(new ConcurrentHashMap<Integer, INDArray>());\n        }\n    }"}, {"instruction": "Parse a template fragment.\n\n@param fragment to parse\n@param query if the fragment is part of a query string.", "input": "Java", "output": "private void parseFragment(String fragment, boolean query) {\n    ChunkTokenizer tokenizer = new ChunkTokenizer(fragment);\n\n    while (tokenizer.hasNext()) {\n      /* check to see if we have an expression or a literal */\n      String chunk = tokenizer.next();\n\n      if (chunk.startsWith(\"{\")) {\n        /* it's an expression, defer encoding until resolution */\n        FragmentType type = (query) ? FragmentType.QUERY : FragmentType.PATH_SEGMENT;\n\n        Expression expression = Expressions.create(chunk, type);\n        if (expression == null) {\n          this.templateChunks.add(Literal.create(encode(chunk, query)));\n        } else {\n          this.templateChunks.add(expression);\n        }\n      } else {\n        /* it's a literal, pct-encode it */\n        this.templateChunks.add(Literal.create(encode(chunk, query)));\n      }\n    }\n  }"}, {"instruction": "Assign a SDVariable to represent the gradient of the SDVariable with the specified name\n\n@param variableName the variable name to assign the gradient variable for\n@param variable     the gradient variable", "input": "Java", "output": "public void setGradientForVariableName(String variableName, SDVariable variable) {\n        Preconditions.checkState(variables.containsKey(variableName), \"No variable exists with name \\\"%s\\\"\", variableName);\n        if (variable == null) {\n            throw new ND4JIllegalStateException(\"Unable to set null gradient for variable name \" + variableName);\n        }\n        variables.get(variableName).setGradient(variable);\n    }"}, {"instruction": "Load some or all of completely persisted Values", "input": "Java", "output": "byte[] loadPersist() {\n    // 00       assert: not written yet\n    // 01       assert: load-after-delete\n    // 10       expected; read\n    // 11       assert: load-after-delete\n    assert isPersisted();\n    try {\n      byte[] res = H2O.getPM().load(backend(), this);\n      assert !isDeleted();        // Race in user-land: load-after-delete\n      return res;\n    } catch( IOException ioe ) { throw Log.throwErr(ioe); }\n  }"}, {"instruction": "Gets the number of shared slots into which the given group can place subtasks or\nnested task groups.\n\n@param groupId The ID of the group.\n@return The number of shared slots available to the given job vertex.", "input": "Java", "output": "public int getNumberOfAvailableSlotsForGroup(AbstractID groupId) {\n\t\tsynchronized (lock) {\n\t\t\tMap<ResourceID, List<SharedSlot>> available = availableSlotsPerJid.get(groupId);\n\n\t\t\tif (available != null) {\n\t\t\t\tSet<SharedSlot> set = new HashSet<SharedSlot>();\n\n\t\t\t\tfor (List<SharedSlot> list : available.values()) {\n\t\t\t\t\tfor (SharedSlot slot : list) {\n\t\t\t\t\t\tset.add(slot);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn set.size();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// if no entry exists for a JobVertexID so far, then the vertex with that ID can\n\t\t\t\t// add a subtask into each shared slot of this group. Consequently, all\n\t\t\t\t// of them are available for that JobVertexID.\n\t\t\t\treturn allSlots.size();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Find first by uid, otp pair.\n\n@param uid uid to search\n@param otp otp to search\n@return token for uid, otp pair", "input": "Java", "output": "@View(name = \"by_uid_otp\", map = \"function(doc) { if(doc.token && doc.userId) { emit([doc.userId, doc.token], doc) } }\")\n    public CouchDbGoogleAuthenticatorToken findOneByUidForOtp(final String uid, final Integer otp) {\n        val view = createQuery(\"by_uid_otp\").key(ComplexKey.of(uid, otp)).limit(1);\n        return db.queryView(view, CouchDbGoogleAuthenticatorToken.class).stream().findFirst().orElse(null);\n    }"}, {"instruction": "Gets the XML representation of the given API {@code response}.\n<p>\nAn XML element named with name of the endpoint and with child elements as given by\n{@link ApiResponse#toXML(Document, Element)}.\n\n@param endpointName the name of the API endpoint, must not be {@code null}.\n@param response the API response, must not be {@code null}.\n@return the XML representation of the given response.\n@throws ApiException if an error occurred while converting the response.", "input": "Java", "output": "static String responseToXml(String endpointName, ApiResponse response) throws ApiException {\n\t\ttry {\n\t\t\tDocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n\t\n\t\t\tDocument doc = docBuilder.newDocument();\n\t\t\tElement rootElement = doc.createElement(endpointName);\n\t\t\tdoc.appendChild(rootElement);\n\t\t\tresponse.toXML(doc, rootElement);\n\t\t\t\n\t\t\tTransformerFactory transformerFactory = TransformerFactory.newInstance();\n\t\t\tTransformer transformer = transformerFactory.newTransformer();\n\t\t\tDOMSource source = new DOMSource(doc);\n\t\t\t\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tStreamResult result =  new StreamResult(sw);\n\t\t\ttransformer.transform(source, result);\n\t\t\t\n\t\t\treturn sw.toString();\n\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Failed to convert API response to XML: \" + e.getMessage(), e);\n\t\t\tthrow new ApiException(ApiException.Type.INTERNAL_ERROR, e);\n\t\t}\n\t}"}, {"instruction": "Adds an indexed sequence of properties (with sub-properties) under a common key.\n\n<p>For example:\n\n<pre>\nschema.fields.0.type = INT, schema.fields.0.name = test\nschema.fields.1.type = LONG, schema.fields.1.name = test2\n</pre>\n\n<p>The arity of each subKeyValues must match the arity of propertyKeys.", "input": "Java", "output": "public void putIndexedFixedProperties(String key, List<String> subKeys, List<List<String>> subKeyValues) {\n\t\tcheckNotNull(key);\n\t\tcheckNotNull(subKeys);\n\t\tcheckNotNull(subKeyValues);\n\t\tfor (int idx = 0; idx < subKeyValues.size(); idx++) {\n\t\t\tfinal List<String> values = subKeyValues.get(idx);\n\t\t\tif (values == null || values.size() != subKeys.size()) {\n\t\t\t\tthrow new ValidationException(\"Values must have same arity as keys.\");\n\t\t\t}\n\t\t\tfor (int keyIdx = 0; keyIdx < values.size(); keyIdx++) {\n\t\t\t\tput(key + '.' + idx + '.' + subKeys.get(keyIdx), values.get(keyIdx));\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Returns an {@link Iterable} that lists items in the normal order\nbut which hides the base iterator implementation details.\n\n@since 1.492", "input": "Java", "output": "public static <T> Iterable<T> wrap(final Iterable<T> base) {\n        return new Iterable<T>() {\n            public Iterator<T> iterator() {\n                final Iterator<T> itr = base.iterator();\n                return new Iterator<T>() {\n                    public boolean hasNext() {\n                        return itr.hasNext();\n                    }\n\n                    public T next() {\n                        return itr.next();\n                    }\n\n                    public void remove() {\n                        itr.remove();\n                    }\n                };\n            }\n        };\n    }"}, {"instruction": "Create a new SAML ECP response object.\n\n@param assertionConsumerUrl the assertion consumer url\n@return the response", "input": "Java", "output": "public org.opensaml.saml.saml2.ecp.Response newEcpResponse(final String assertionConsumerUrl) {\n        val samlResponse = newSamlObject(org.opensaml.saml.saml2.ecp.Response.class);\n        samlResponse.setSOAP11MustUnderstand(Boolean.TRUE);\n        samlResponse.setSOAP11Actor(ActorBearing.SOAP11_ACTOR_NEXT);\n        samlResponse.setAssertionConsumerServiceURL(assertionConsumerUrl);\n        return samlResponse;\n    }"}, {"instruction": "Determine unauthorized service redirect url.\n\n@param context the context\n@return the uri", "input": "Java", "output": "protected URI determineUnauthorizedServiceRedirectUrl(final RequestContext context) {\n        val redirectUrl = WebUtils.getUnauthorizedRedirectUrlFromFlowScope(context);\n        val currentEvent = context.getCurrentEvent();\n        val eventAttributes = currentEvent.getAttributes();\n        LOGGER.debug(\"Finalizing the unauthorized redirect URL [{}] when processing event [{}] with attributes [{}]\",\n            redirectUrl, currentEvent.getId(), eventAttributes);\n        return redirectUrl;\n    }"}, {"instruction": "Returns the next available {@link JsonElement} on the reader. Null if none available.\n\n@return the next available {@link JsonElement} on the reader. Null if none available.\n@throws JsonParseException if the incoming stream is malformed JSON.\n@since 1.4", "input": "Java", "output": "public JsonElement next() throws JsonParseException {\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    \n    try {\n      return Streams.parse(parser);\n    } catch (StackOverflowError e) {\n      throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n    } catch (OutOfMemoryError e) {\n      throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n    } catch (JsonParseException e) {\n      throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;\n    }\n  }"}, {"instruction": "Convert a parquet 'map' logical type {@link Group} to a java map of string keys to groups/lists/primitive values", "input": "Java", "output": "private static Map<String, Object> convertLogicalMap(Group g, boolean binaryAsString)\n  {\n    /*\n      // Map<String, Integer> (nullable map, non-null values)\n      optional group my_map (MAP) {\n        repeated group map {\n          required binary str (UTF8);\n          required int32 num;\n        }\n      }\n\n      // Map<String, Integer> (nullable map, nullable values)\n      optional group my_map (MAP_KEY_VALUE) {(\n        repeated group map {\n          required binary key (UTF8);\n          optional int32 value;\n        }\n      }\n     */\n    assert isLogicalMapType(g.getType());\n    int mapEntries = g.getFieldRepetitionCount(0);\n    Map<String, Object> converted = new HashMap<>();\n    for (int i = 0; i < mapEntries; i++) {\n      Group mapEntry = g.getGroup(0, i);\n      String key = convertPrimitiveField(mapEntry, 0, binaryAsString).toString();\n      Object value = convertField(mapEntry, \"value\", binaryAsString);\n      converted.put(key, value);\n    }\n    return converted;\n  }"}, {"instruction": "DES\u52a0\u5bc6\u6a21\u677f\n\n@param data           \u6570\u636e\n@param key            \u79d8\u94a5\n@param algorithm      \u52a0\u5bc6\u7b97\u6cd5\n@param transformation \u8f6c\u53d8\n@param isEncrypt      {@code true}: \u52a0\u5bc6 {@code false}: \u89e3\u5bc6\n@return \u5bc6\u6587\u6216\u8005\u660e\u6587\uff0c\u9002\u7528\u4e8eDES\uff0c3DES\uff0cAES", "input": "Java", "output": "public static byte[] desTemplate(byte[] data, byte[] key, String algorithm, String transformation, boolean isEncrypt) {\n        if (data == null || data.length == 0 || key == null || key.length == 0) return null;\n        try {\n            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);\n            Cipher        cipher  = Cipher.getInstance(transformation);\n            SecureRandom  random  = new SecureRandom();\n            cipher.init(isEncrypt ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE, keySpec, random);\n            return cipher.doFinal(data);\n        } catch (Throwable e) {\n            e.printStackTrace();\n            return null;\n        }\n    }"}, {"instruction": "Swap data source to database access configuration.\n\n@param dataSource data source\n@return database access configuration", "input": "Java", "output": "public DatabaseAccessConfiguration swap(final DataSource dataSource) {\n        DataSourcePropertyProvider provider = DataSourcePropertyProviderLoader.getProvider(dataSource);\n        try {\n            String url = (String) findGetterMethod(dataSource, provider.getURLPropertyName()).invoke(dataSource);\n            String username = (String) findGetterMethod(dataSource, provider.getUsernamePropertyName()).invoke(dataSource);\n            String password = (String) findGetterMethod(dataSource, provider.getPasswordPropertyName()).invoke(dataSource);\n            return new DatabaseAccessConfiguration(url, username, password);\n        } catch (final ReflectiveOperationException ex) {\n            throw new ShardingException(\"Cannot swap data source type: `%s`, please provide an implementation from SPI `%s`\", \n                    dataSource.getClass().getName(), DataSourcePropertyProvider.class.getName());\n        }\n    }"}, {"instruction": "/* (non-Javadoc)\n@see org.apache.hive.service.cli.operation.Operation#getNextRowSet(org.apache.hive.service.cli.FetchOrientation, long)", "input": "Java", "output": "@Override\n  public RowSet getNextRowSet(FetchOrientation orientation, long maxRows) throws HiveSQLException {\n    validateDefaultFetchOrientation(orientation);\n    if (orientation.equals(FetchOrientation.FETCH_FIRST)) {\n      resetResultReader();\n    }\n    List<String> rows = readResults((int) maxRows);\n    RowSet rowSet = RowSetFactory.create(resultSchema, getProtocolVersion());\n\n    for (String row : rows) {\n      rowSet.addRow(new String[] {row});\n    }\n    return rowSet;\n  }"}, {"instruction": "set bit from segments.\n\n@param segments target segments.\n@param baseOffset bits base offset.\n@param index bit index from base offset.", "input": "Java", "output": "public static void bitSet(MemorySegment[] segments, int baseOffset, int index) {\n\t\tif (segments.length == 1) {\n\t\t\tint offset = baseOffset + ((index & BIT_BYTE_POSITION_MASK) >>> 3);\n\t\t\tMemorySegment segment = segments[0];\n\t\t\tbyte current = segment.get(offset);\n\t\t\tcurrent |= (1 << (index & BIT_BYTE_INDEX_MASK));\n\t\t\tsegment.put(offset, current);\n\t\t} else {\n\t\t\tbitSetMultiSegments(segments, baseOffset, index);\n\t\t}\n\t}"}, {"instruction": "\u5206\u6790\u53e5\u6cd5\n\n@param words   \u8bcd\u8bed\u5217\u8868\n@param postags \u8bcd\u6027\u5217\u8868\n@param heads   \u8f93\u51fa\u4f9d\u5b58\u6307\u5411\u5217\u8868\n@param deprels \u8f93\u51fa\u4f9d\u5b58\u540d\u79f0\u5217\u8868\n@return \u8282\u70b9\u7684\u4e2a\u6570", "input": "Java", "output": "public int parse(List<String> words, List<String> postags, List<Integer> heads, List<String> deprels)\n    {\n        Instance inst = new Instance();\n        inst.forms.add(SpecialOption.ROOT);\n        inst.postags.add(SpecialOption.ROOT);\n\n        for (int i = 0; i < words.size(); i++)\n        {\n            inst.forms.add(words.get(i));\n            inst.postags.add(postags.get(i));\n        }\n\n        parser.predict(inst, heads, deprels);\n        heads.remove(0);\n        deprels.remove(0);\n\n        return heads.size();\n    }"}, {"instruction": "This method is not intended to be used in the client.\nThe client makes a request to the server to get the {@link ExternalStorageLocation}", "input": "Java", "output": "@Override\n    public ExternalStorageLocation getLocation(Operation operation, PayloadType payloadType, String path) {\n        String uri;\n        switch (payloadType) {\n            case WORKFLOW_INPUT:\n            case WORKFLOW_OUTPUT:\n                uri = \"workflow\";\n                break;\n            case TASK_INPUT:\n            case TASK_OUTPUT:\n                uri = \"tasks\";\n                break;\n            default:\n                throw new ConductorClientException(String.format(\"Invalid payload type: %s for operation: %s\", payloadType.toString(), operation.toString()));\n        }\n        return clientBase.getForEntity(String.format(\"%s/externalstoragelocation\", uri), new Object[]{\"path\", path, \"operation\", operation.toString(), \"payloadType\", payloadType.toString()}, ExternalStorageLocation.class);\n    }"}, {"instruction": "Can ping.\n\n@return true/false", "input": "Java", "output": "public boolean canPing() {\n        val uidPsw = getClass().getSimpleName();\n        for (val server : this.servers) {\n            LOGGER.debug(\"Attempting to ping RADIUS server [{}] via simulating an authentication request. If the server responds \"\n                + \"successfully, mock authentication will fail correctly.\", server);\n            try {\n                server.authenticate(uidPsw, uidPsw);\n            } catch (final TimeoutException | SocketTimeoutException e) {\n                LOGGER.debug(\"Server [{}] is not available\", server);\n                continue;\n            } catch (final Exception e) {\n                LOGGER.debug(\"Pinging RADIUS server was successful. Response [{}]\", e.getMessage());\n            }\n            return true;\n        }\n        return false;\n    }"}, {"instruction": "Load Keras (Functional API) Model saved using model.save_model(...).\n\n@param modelHdf5Filename     path to HDF5 archive storing Keras Model\n@param inputShape            optional input shape for models that come without such (e.g. notop = false models)\n@param enforceTrainingConfig whether to enforce training configuration options\n@return ComputationGraph\n@throws IOException                            IO exception\n@throws InvalidKerasConfigurationException     Invalid Keras config\n@throws UnsupportedKerasConfigurationException Unsupported Keras config\n@see ComputationGraph", "input": "Java", "output": "public static ComputationGraph importKerasModelAndWeights(String modelHdf5Filename, int[] inputShape,\n                                                              boolean enforceTrainingConfig)\n            throws IOException, UnsupportedKerasConfigurationException, InvalidKerasConfigurationException {\n        KerasModel kerasModel = new KerasModel().modelBuilder.modelHdf5Filename(modelHdf5Filename)\n                .enforceTrainingConfig(enforceTrainingConfig).inputShape(inputShape).buildModel();\n        return kerasModel.getComputationGraph();\n    }"}, {"instruction": "Applies the given window function to each window. The window function is called for each\nevaluation of the window. The output of the window function is\ninterpreted as a regular non-windowed stream.\n\n<p>Note that this function requires that all data in the windows is buffered until the window\nis evaluated, as the function provides no means of incremental aggregation.\n\n@param function The process window function.\n@return The data stream that is the result of applying the window function to the window.", "input": "Java", "output": "@PublicEvolving\n\tpublic <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {\n\t\tString callLocation = Utils.getCallLocationName();\n\t\tfunction = input.getExecutionEnvironment().clean(function);\n\t\tTypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType());\n\t\treturn apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation);\n\t}"}, {"instruction": "Extracts a time unit from a time value (milliseconds since midnight).", "input": "Java", "output": "public static int unixTimeExtract(TimeUnitRange range, int time) {\n\t\tassert time >= 0;\n\t\tassert time < MILLIS_PER_DAY;\n\t\tswitch (range) {\n\t\t\tcase HOUR:\n\t\t\t\treturn time / (int) MILLIS_PER_HOUR;\n\t\t\tcase MINUTE:\n\t\t\t\tfinal int minutes = time / (int) MILLIS_PER_MINUTE;\n\t\t\t\treturn minutes % 60;\n\t\t\tcase SECOND:\n\t\t\t\tfinal int seconds = time / (int) MILLIS_PER_SECOND;\n\t\t\t\treturn seconds % 60;\n\t\t\tdefault:\n\t\t\t\tthrow new ValidationException(\"unit \" + range + \" can not be applied to time variable\");\n\t\t}\n\t}"}, {"instruction": "Creates a {@link PemEncoded} value from the {@link PrivateKey}.", "input": "Java", "output": "static PemEncoded toPEM(ByteBufAllocator allocator, boolean useDirect, PrivateKey key) {\n        // We can take a shortcut if the private key happens to be already\n        // PEM/PKCS#8 encoded. This is the ideal case and reason why all\n        // this exists. It allows the user to pass pre-encoded bytes straight\n        // into OpenSSL without having to do any of the extra work.\n        if (key instanceof PemEncoded) {\n            return ((PemEncoded) key).retain();\n        }\n\n        byte[] bytes = key.getEncoded();\n        if (bytes == null) {\n            throw new IllegalArgumentException(key.getClass().getName() + \" does not support encoding\");\n        }\n\n        return toPEM(allocator, useDirect, bytes);\n    }"}, {"instruction": "Creates a subscription to a given topic. See the &lt;a\nhref=\"https://cloud.google.com/pubsub/docs/admin#resource_names\"&gt; resource name\nrules&lt;/a&gt;. If the subscription already exists, returns `ALREADY_EXISTS`. If the\ncorresponding topic doesn't exist, returns `NOT_FOUND`.\n\n<p>If the name is not provided in the request, the server will assign a random name for this\nsubscription on the same project as the topic, conforming to the [resource name\nformat](https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is\npopulated in the returned Subscription object. Note that for REST API requests, you must\nspecify a name in the request.\n\n<p>Sample code:\n\n<pre><code>\ntry (SubscriptionAdminClient subscriptionAdminClient = SubscriptionAdminClient.create()) {\nProjectSubscriptionName name = ProjectSubscriptionName.of(\"[PROJECT]\", \"[SUBSCRIPTION]\");\nProjectTopicName topic = ProjectTopicName.of(\"[PROJECT]\", \"[TOPIC]\");\nPushConfig pushConfig = PushConfig.newBuilder().build();\nint ackDeadlineSeconds = 0;\nSubscription response = subscriptionAdminClient.createSubscription(name, topic, pushConfig, ackDeadlineSeconds);\n}\n</code></pre>\n\n@param name The name of the subscription. It must have the format\n`\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must start with a\nletter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores\n(`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3\nand 255 characters in length, and it must not start with `\"goog\"`\n@param topic The name of the topic from which this subscription is receiving messages. Format\nis `projects/{project}/topics/{topic}`. The value of this field will be `_deleted-topic_`\nif the topic has been deleted.\n@param pushConfig If push delivery is used with this subscription, this field is used to\nconfigure it. An empty `pushConfig` signifies that the subscriber will pull and ack\nmessages using API methods.\n@param ackDeadlineSeconds The approximate amount of time (on a best-effort basis) Pub/Sub waits\nfor the subscriber to acknowledge receipt before resending the message. In the interval\nafter the message is delivered and before it is acknowledged, it is considered to be\n&lt;i&gt;outstanding&lt;/i&gt;. During that time period, the message will not be\nredelivered (on a best-effort basis).\n<p>For pull subscriptions, this value is used as the initial value for the ack deadline. To\noverride this value for a given message, call `ModifyAckDeadline` with the corresponding\n`ack_id` if using non-streaming pull or send the `ack_id` in a\n`StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum custom deadline\nyou can specify is 10 seconds. The maximum custom deadline you can specify is 600 seconds\n(10 minutes). If this parameter is 0, a default value of 10 seconds is used.\n<p>For push delivery, this value is also used to set the request timeout for the call to\nthe push endpoint.\n<p>If the subscriber never acknowledges the message, the Pub/Sub system will eventually\nredeliver the message.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "public final Subscription createSubscription(\n      ProjectSubscriptionName name,\n      ProjectTopicName topic,\n      PushConfig pushConfig,\n      int ackDeadlineSeconds) {\n\n    Subscription request =\n        Subscription.newBuilder()\n            .setName(name == null ? null : name.toString())\n            .setTopic(topic == null ? null : topic.toString())\n            .setPushConfig(pushConfig)\n            .setAckDeadlineSeconds(ackDeadlineSeconds)\n            .build();\n    return createSubscription(request);\n  }"}, {"instruction": "Return the sub task's serialized job information.\n\n@return serialized job information (may be <tt>null</tt> before a call to {@link\n#loadBigData(PermanentBlobService)}).", "input": "Java", "output": "@Nullable\n\tpublic SerializedValue<JobInformation> getSerializedJobInformation() {\n\t\tif (serializedJobInformation instanceof NonOffloaded) {\n\t\t\tNonOffloaded<JobInformation> jobInformation =\n\t\t\t\t(NonOffloaded<JobInformation>) serializedJobInformation;\n\t\t\treturn jobInformation.serializedValue;\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"Trying to work with offloaded serialized job information.\");\n\t\t}\n\t}"}, {"instruction": "Finds all unused stubs for given mocks\n\n@param mocks full list of mocks", "input": "Java", "output": "public List<Invocation> find(List<?> mocks) {\n        List<Invocation> unused = new LinkedList<Invocation>();\n        for (Object mock : mocks) {\n            List<Stubbing> fromSingleMock = MockUtil.getInvocationContainer(mock).getStubbingsDescending();\n            for(Stubbing s : fromSingleMock) {\n                if (!s.wasUsed()) {\n                     unused.add(s.getInvocation());\n                }\n            }\n        }\n        return unused;\n    }"}, {"instruction": "Checks whether {@link DateTimeFormat} pattern contains time zone-related field.", "input": "Java", "output": "private static boolean datetimeFormatSpecifiesZone(Slice formatString)\n    {\n        boolean quoted = false;\n        for (char c : formatString.toStringUtf8().toCharArray()) {\n            if (quoted) {\n                if (c == '\\'') {\n                    quoted = false;\n                }\n                continue;\n            }\n\n            switch (c) {\n                case 'z':\n                case 'Z':\n                    return true;\n                case '\\'':\n                    // '' (two apostrophes) in a pattern denote single apostrophe and here we interpret this as \"start quote\" + \"end quote\".\n                    // This has no impact on method's result value.\n                    quoted = true;\n                    break;\n            }\n        }\n        return false;\n    }"}, {"instruction": "This method creates compressed INDArray from Java float array, skipping usual INDArray instantiation routines\n\n@param data\n@param shape\n@param order\n@return", "input": "Java", "output": "@Override\n    public INDArray compress(float[] data, int[] shape, char order) {\n        FloatPointer pointer = new FloatPointer(data);\n\n        DataBuffer shapeInfo = Nd4j.getShapeInfoProvider().createShapeInformation(ArrayUtil.toLongArray(shape), order, DataType.FLOAT).getFirst();\n        DataBuffer buffer = compressPointer(DataTypeEx.FLOAT, pointer, data.length, 4);\n\n        return Nd4j.createArrayFromShapeBuffer(buffer, shapeInfo);\n    }"}, {"instruction": "Fit a MultiDataSet (only compute based on the statistics from this dataset)\n\n@param dataSet the dataset to compute on", "input": "Java", "output": "@Override\n    public void fit(@NonNull MultiDataSet dataSet) {\n        Map<Integer, NormalizerStats.Builder> inputStatsBuilders = new HashMap<>();\n        Map<Integer, NormalizerStats.Builder> outputStatsBuilders = new HashMap<>();\n\n        fitPartial(dataSet, inputStatsBuilders, outputStatsBuilders);\n\n        inputStats = buildAllStats(inputStatsBuilders);\n        outputStats = buildAllStats(outputStatsBuilders);\n    }"}, {"instruction": "Wraps the given {@link Throwable} in a {@link StatusRuntimeException}. If it contains an\nembedded {@link StatusException} or {@link StatusRuntimeException}, the returned exception will\ncontain the embedded trailers and status, with the given exception as the cause. Otherwise, an\nexception will be generated from an {@link Status#UNKNOWN} status.", "input": "Java", "output": "private static StatusRuntimeException toStatusRuntimeException(Throwable t) {\n    Throwable cause = checkNotNull(t, \"t\");\n    while (cause != null) {\n      // If we have an embedded status, use it and replace the cause\n      if (cause instanceof StatusException) {\n        StatusException se = (StatusException) cause;\n        return new StatusRuntimeException(se.getStatus(), se.getTrailers());\n      } else if (cause instanceof StatusRuntimeException) {\n        StatusRuntimeException se = (StatusRuntimeException) cause;\n        return new StatusRuntimeException(se.getStatus(), se.getTrailers());\n      }\n      cause = cause.getCause();\n    }\n    return Status.UNKNOWN.withDescription(\"unexpected exception\").withCause(t)\n        .asRuntimeException();\n  }"}, {"instruction": "\u622a\u53d6\u96c6\u5408\u7684\u90e8\u5206\n\n@param <T> \u96c6\u5408\u5143\u7d20\u7c7b\u578b\n@param list \u88ab\u622a\u53d6\u7684\u6570\u7ec4\n@param start \u5f00\u59cb\u4f4d\u7f6e\uff08\u5305\u542b\uff09\n@param end \u7ed3\u675f\u4f4d\u7f6e\uff08\u4e0d\u5305\u542b\uff09\n@param step \u6b65\u8fdb\n@return \u622a\u53d6\u540e\u7684\u6570\u7ec4\uff0c\u5f53\u5f00\u59cb\u4f4d\u7f6e\u8d85\u8fc7\u6700\u5927\u65f6\uff0c\u8fd4\u56de\u7a7a\u7684List\n@since 4.0.6", "input": "Java", "output": "public static <T> List<T> sub(List<T> list, int start, int end, int step) {\r\n\t\tif (list == null || list.isEmpty()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfinal int size = list.size();\r\n\t\tif (start < 0) {\r\n\t\t\tstart += size;\r\n\t\t}\r\n\t\tif (end < 0) {\r\n\t\t\tend += size;\r\n\t\t}\r\n\t\tif (start == size) {\r\n\t\t\treturn new ArrayList<>(0);\r\n\t\t}\r\n\t\tif (start > end) {\r\n\t\t\tint tmp = start;\r\n\t\t\tstart = end;\r\n\t\t\tend = tmp;\r\n\t\t}\r\n\t\tif (end > size) {\r\n\t\t\tif (start >= size) {\r\n\t\t\t\treturn new ArrayList<>(0);\r\n\t\t\t}\r\n\t\t\tend = size;\r\n\t\t}\r\n\r\n\t\tif (step <= 1) {\r\n\t\t\treturn list.subList(start, end);\r\n\t\t}\r\n\r\n\t\tfinal List<T> result = new ArrayList<>();\r\n\t\tfor (int i = start; i < end; i += step) {\r\n\t\t\tresult.add(list.get(i));\r\n\t\t}\r\n\t\treturn result;\r\n\t}"}, {"instruction": "TODO optimize", "input": "Java", "output": "public ByteBuf preprocessJson(Integer jsonIndex, ByteBuf content) throws IOException {\n        String packet = URLDecoder.decode(content.toString(CharsetUtil.UTF_8), CharsetUtil.UTF_8.name());\n\n        if (jsonIndex != null) {\n            /**\n            * double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n            * (c) socket.io.js\n            *\n            * @see https://github.com/Automattic/socket.io-client/blob/1.3.3/socket.io.js#L2682\n            */\n            packet = packet.replace(\"\\\\\\\\n\", \"\\\\n\");\n\n            // skip \"d=\"\n            packet = packet.substring(2);\n        }\n\n        return Unpooled.wrappedBuffer(packet.getBytes(CharsetUtil.UTF_8));\n    }"}, {"instruction": "Get default diagram image as bytes array\n@return the default diagram image", "input": "Java", "output": "protected InputStream getDefaultDiagram(String diagramImageFileName) {\n        String imageFileName = diagramImageFileName != null ?\n                diagramImageFileName :\n                getDefaultDiagramImageFileName();\n        InputStream imageStream = getClass().getResourceAsStream(imageFileName);\n        if (imageStream == null) {\n            throw new ActivitiImageException(\"Error occurred while getting default diagram image from file: \" + imageFileName);\n        }\n        return imageStream;\n    }"}, {"instruction": "Slow path in case a line of bytes cannot be read in one #fill() operation. This is still faster\nthan creating the StrinbBuilder, String, then encoding as byte[] in Protocol, then decoding\nback into a String.", "input": "Java", "output": "private byte[] readLineBytesSlowly() {\n    ByteArrayOutputStream bout = null;\n    while (true) {\n      ensureFill();\n\n      byte b = buf[count++];\n      if (b == '\\r') {\n        ensureFill(); // Must be one more byte\n\n        byte c = buf[count++];\n        if (c == '\\n') {\n          break;\n        }\n\n        if (bout == null) {\n          bout = new ByteArrayOutputStream(16);\n        }\n\n        bout.write(b);\n        bout.write(c);\n      } else {\n        if (bout == null) {\n          bout = new ByteArrayOutputStream(16);\n        }\n\n        bout.write(b);\n      }\n    }\n\n    return bout == null ? new byte[0] : bout.toByteArray();\n  }"}, {"instruction": "Returns the URL of the index page jelly script.", "input": "Java", "output": "public URL getIndexPage() {\n        // In the current impl dependencies are checked first, so the plugin itself\n        // will add the last entry in the getResources result.\n        URL idx = null;\n        try {\n            Enumeration<URL> en = classLoader.getResources(\"index.jelly\");\n            while (en.hasMoreElements())\n                idx = en.nextElement();\n        } catch (IOException ignore) { }\n        // In case plugin has dependencies but is missing its own index.jelly,\n        // check that result has this plugin's artifactId in it:\n        return idx != null && idx.toString().contains(shortName) ? idx : null;\n    }"}, {"instruction": "Create/load a HikariConfig from Hibernate properties.\n\n@param props a map of Hibernate properties\n@return a HikariConfig", "input": "Java", "output": "@SuppressWarnings(\"rawtypes\")\n   public static HikariConfig loadConfiguration(Map props)\n   {\n      Properties hikariProps = new Properties();\n      copyProperty(AvailableSettings.ISOLATION, props, \"transactionIsolation\", hikariProps);\n      copyProperty(AvailableSettings.AUTOCOMMIT, props, \"autoCommit\", hikariProps);\n      copyProperty(AvailableSettings.DRIVER, props, \"driverClassName\", hikariProps);\n      copyProperty(AvailableSettings.URL, props, \"jdbcUrl\", hikariProps);\n      copyProperty(AvailableSettings.USER, props, \"username\", hikariProps);\n      copyProperty(AvailableSettings.PASS, props, \"password\", hikariProps);\n\n      for (Object keyo : props.keySet()) {\n         String key = (String) keyo;\n         if (key.startsWith(CONFIG_PREFIX)) {\n            hikariProps.setProperty(key.substring(CONFIG_PREFIX.length()), (String) props.get(key));\n         }\n      }\n\n      return new HikariConfig(hikariProps);\n   }"}, {"instruction": "Evaluate on a directory containing a set of DataSet objects to be loaded with a {@link DataSetLoader}.\nUses default batch size of {@link #DEFAULT_EVAL_SCORE_BATCH_SIZE}\n@param path Path/URI to the directory containing the datasets to load\n@return Evaluation", "input": "Java", "output": "public <T extends Evaluation> T evaluate(String path, int batchSize, DataSetLoader loader){\n        JavaRDD<String> paths;\n        try {\n            paths = SparkUtils.listPaths(sc, path);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error listing paths in directory\", e);\n        }\n\n        JavaRDD<DataSet> rdd = paths.map(new LoadDataSetFunction(loader, new RemoteFileSourceFactory(BroadcastHadoopConfigHolder.get(sc))));\n        return (T)doEvaluation(rdd, batchSize, new org.deeplearning4j.eval.Evaluation())[0];\n    }"}, {"instruction": "\u5bf9\u8c61\u8f6cMap<br>\n\u901a\u8fc7\u5b9e\u73b0{@link Editor} \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\u503c\uff0c\u5982\u679c\u8fd9\u4e2aEditor\u8fd4\u56denull\u5219\u5ffd\u7565\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4ee5\u4fbf\u5b9e\u73b0\uff1a\n\n<pre>\n1. \u5b57\u6bb5\u7b5b\u9009\uff0c\u53ef\u4ee5\u53bb\u9664\u4e0d\u9700\u8981\u7684\u5b57\u6bb5\n2. \u5b57\u6bb5\u53d8\u6362\uff0c\u4f8b\u5982\u5b9e\u73b0\u9a7c\u5cf0\u8f6c\u4e0b\u5212\u7ebf\n3. \u81ea\u5b9a\u4e49\u5b57\u6bb5\u524d\u7f00\u6216\u540e\u7f00\u7b49\u7b49\n</pre>\n\n@param bean bean\u5bf9\u8c61\n@param targetMap \u76ee\u6807\u7684Map\n@param ignoreNullValue \u662f\u5426\u5ffd\u7565\u503c\u4e3a\u7a7a\u7684\u5b57\u6bb5\n@param keyEditor \u5c5e\u6027\u5b57\u6bb5\uff08Map\u7684key\uff09\u7f16\u8f91\u5668\uff0c\u7528\u4e8e\u7b5b\u9009\u3001\u7f16\u8f91key\n@return Map\n@since 4.0.5", "input": "Java", "output": "public static Map<String, Object> beanToMap(Object bean, Map<String, Object> targetMap, boolean ignoreNullValue, Editor<String> keyEditor) {\r\n\t\tif (bean == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfinal Collection<PropDesc> props = BeanUtil.getBeanDesc(bean.getClass()).getProps();\r\n\r\n\t\tString key;\r\n\t\tMethod getter;\r\n\t\tObject value;\r\n\t\tfor (PropDesc prop : props) {\r\n\t\t\tkey = prop.getFieldName();\r\n\t\t\t// \u8fc7\u6ee4class\u5c5e\u6027\r\n\t\t\t// \u5f97\u5230property\u5bf9\u5e94\u7684getter\u65b9\u6cd5\r\n\t\t\tgetter = prop.getGetter();\r\n\t\t\tif (null != getter) {\r\n\t\t\t\t// \u53ea\u8bfb\u53d6\u6709getter\u65b9\u6cd5\u7684\u5c5e\u6027\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalue = getter.invoke(bean);\r\n\t\t\t\t} catch (Exception ignore) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (false == ignoreNullValue || (null != value && false == value.equals(bean))) {\r\n\t\t\t\t\tkey = keyEditor.edit(key);\r\n\t\t\t\t\tif (null != key) {\r\n\t\t\t\t\t\ttargetMap.put(key, value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn targetMap;\r\n\t}"}, {"instruction": "Invalidates the cache.\n\n@param name The name of the cache to invalidate\n@return A maybe that emits a boolean if the operation was successful", "input": "Java", "output": "@Delete\n    public Maybe<Boolean> invalidateCache(@NotBlank @Selector String name) {\n        try {\n            final SyncCache<Object> cache = cacheManager.getCache(name);\n            return Maybe.create(emitter -> cache.async().invalidateAll().whenComplete((aBoolean, throwable) -> {\n                if (throwable != null) {\n                    emitter.onError(throwable);\n                } else {\n                    emitter.onSuccess(aBoolean);\n                    emitter.onComplete();\n                }\n            }));\n        } catch (ConfigurationException e) {\n            // no cache\n            return Maybe.empty();\n        }\n    }"}, {"instruction": "Create XA connection from normal connection.\n\n@param databaseType database type\n@param connection normal connection\n@param xaDataSource XA data source\n@return XA connection", "input": "Java", "output": "public static XAConnection createXAConnection(final DatabaseType databaseType, final XADataSource xaDataSource, final Connection connection) {\n        switch (databaseType) {\n            case MySQL:\n                return new MySQLXAConnectionWrapper().wrap(xaDataSource, connection);\n            case PostgreSQL:\n                return new PostgreSQLXAConnectionWrapper().wrap(xaDataSource, connection);\n            case H2:\n                return new H2XAConnectionWrapper().wrap(xaDataSource, connection);\n            default:\n                throw new UnsupportedOperationException(String.format(\"Cannot support database type: `%s`\", databaseType));\n        }\n    }"}, {"instruction": "This method returns total amount of memory allocated within system\n\n@return", "input": "Java", "output": "@Override\n    public Table<AllocationStatus, Integer, Long> getAllocationStatistics() {\n        Table<AllocationStatus, Integer, Long> table = HashBasedTable.create();\n        table.put(AllocationStatus.HOST, 0, zeroUseCounter.get());\n        for (Integer deviceId : configuration.getAvailableDevices()) {\n            table.put(AllocationStatus.DEVICE, deviceId, getAllocatedDeviceMemory(deviceId));\n        }\n        return table;\n    }"}, {"instruction": "returns null. this can be improved in future but is good enough for most use-cases.", "input": "Java", "output": "public static TimestampSpec mergeTimestampSpec(List<TimestampSpec> toMerge)\n  {\n    if (toMerge == null || toMerge.size() == 0) {\n      return null;\n    }\n\n    TimestampSpec result = toMerge.get(0);\n    for (int i = 1; i < toMerge.size(); i++) {\n      if (toMerge.get(i) == null) {\n        continue;\n      }\n      if (!Objects.equals(result, toMerge.get(i))) {\n        return null;\n      }\n    }\n\n    return result;\n  }"}, {"instruction": "Removes decision from ldap attribute set.\n\n@param ldapConsent the ldap attribute holding consent decisions\n@param decisionId  the decision Id\n@return the new decision set", "input": "Java", "output": "private static Set<String> removeDecision(final LdapAttribute ldapConsent, final long decisionId) {\n        val result = new HashSet<String>();\n        if (ldapConsent.size() != 0) {\n            ldapConsent.getStringValues()\n                .stream()\n                .map(LdapConsentRepository::mapFromJson)\n                .filter(d -> d.getId() != decisionId)\n                .map(LdapConsentRepository::mapToJson)\n                .filter(Objects::nonNull)\n                .forEach(result::add);\n        }\n        return result;\n    }"}, {"instruction": "True if there is no item in Jenkins that has this name\n@param name The name to test\n@param currentJobName The name of the job that the user is configuring", "input": "Java", "output": "boolean isNameUnique(String name, String currentJobName) {\n        Item item = getItem(name);\n\n        if(null==item) {\n            // the candidate name didn't return any items so the name is unique\n            return true;\n        }\n        else if(item.getName().equals(currentJobName)) {\n            // the candidate name returned an item, but the item is the item\n            // that the user is configuring so this is ok\n            return true;\n        }\n        else {\n            // the candidate name returned an item, so it is not unique\n            return false;\n        }\n    }"}, {"instruction": "Shortlist variables which match a given regex. Returns empty empty list, if no\neligible variable is found", "input": "Java", "output": "public static List<Variable> getVariablesByRegex(\n      final Collection<Variable> variables, final String regex) {\n    final List<Variable> shortlistedVariables = new ArrayList<>();\n    if (variables != null && regex != null) {\n      for (final Variable var : variables) {\n        if (var.getTitle().matches(regex)) {\n          shortlistedVariables.add(var);\n        }\n      }\n    }\n    return shortlistedVariables;\n  }"}, {"instruction": "Used during {@link Jenkins#refreshExtensions()} to add new components into existing {@link ExtensionList}s.\nDo not call from anywhere else.", "input": "Java", "output": "public void refresh(ExtensionComponentSet delta) {\n        boolean fireOnChangeListeners = false;\n        synchronized (getLoadLock()) {\n            if (extensions==null)\n                return;     // not yet loaded. when we load it, we'll load everything visible by then, so no work needed\n\n            Collection<ExtensionComponent<T>> found = load(delta);\n            if (!found.isEmpty()) {\n                List<ExtensionComponent<T>> l = Lists.newArrayList(extensions);\n                l.addAll(found);\n                extensions = sort(l);\n                fireOnChangeListeners = true;\n            }\n        }\n        if (fireOnChangeListeners) {\n            fireOnChangeListeners();\n        }\n    }"}, {"instruction": "Releases all memory segments for the given owner.\n\n@param owner The owner memory segments are to be released.", "input": "Java", "output": "public void releaseAll(Object owner) {\n\t\tif (owner == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// -------------------- BEGIN CRITICAL SECTION -------------------\n\t\tsynchronized (lock) {\n\t\t\tif (isShutDown) {\n\t\t\t\tthrow new IllegalStateException(\"Memory manager has been shut down.\");\n\t\t\t}\n\n\t\t\t// get all segments\n\t\t\tfinal Set<MemorySegment> segments = allocatedSegments.remove(owner);\n\n\t\t\t// all segments may have been freed previously individually\n\t\t\tif (segments == null || segments.isEmpty()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// free each segment\n\t\t\tif (isPreAllocated) {\n\t\t\t\tfor (MemorySegment seg : segments) {\n\t\t\t\t\tmemoryPool.returnSegmentToPool(seg);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (MemorySegment seg : segments) {\n\t\t\t\t\tseg.free();\n\t\t\t\t}\n\t\t\t\tnumNonAllocatedPages += segments.size();\n\t\t\t}\n\n\t\t\tsegments.clear();\n\t\t}\n\t\t// -------------------- END CRITICAL SECTION -------------------\n\t}"}, {"instruction": "\u8ba1\u7b97Hash\u503c\n@param str \u88ab\u8ba1\u7b97Hash\u7684\u5b57\u7b26\u4e32\n@param k Hash\u7b97\u6cd5\u5e8f\u53f7\n@return Hash\u503c", "input": "Java", "output": "public static int hash(String str, int k) {\r\n\t\tswitch (k) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn HashUtil.rsHash(str);\r\n\t\t\tcase 1:\r\n\t\t\t\treturn HashUtil.jsHash(str);\r\n\t\t\tcase 2:\r\n\t\t\t\treturn HashUtil.elfHash(str);\r\n\t\t\tcase 3:\r\n\t\t\t\treturn HashUtil.bkdrHash(str);\r\n\t\t\tcase 4:\r\n\t\t\t\treturn HashUtil.apHash(str);\r\n\t\t\tcase 5:\r\n\t\t\t\treturn HashUtil.djbHash(str);\r\n\t\t\tcase 6:\r\n\t\t\t\treturn HashUtil.sdbmHash(str);\r\n\t\t\tcase 7:\r\n\t\t\t\treturn HashUtil.pjwHash(str);\r\n\t\t\tdefault:\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t}"}, {"instruction": "since Erlang discerns between exit and exit/2.", "input": "Java", "output": "private void exit(final int arity, final OtpErlangPid to,\n            final OtpErlangObject reason) {\n        try {\n            final String node = to.node();\n            if (node.equals(home.node())) {\n                home.deliver(new OtpMsg(OtpMsg.exitTag, self, to, reason));\n            } else {\n                final OtpCookedConnection conn = home.getConnection(node);\n                if (conn == null) {\n                    return;\n                }\n                switch (arity) {\n                case 1:\n                    conn.exit(self, to, reason);\n                    break;\n\n                case 2:\n                    conn.exit2(self, to, reason);\n                    break;\n                }\n            }\n        } catch (final Exception e) {\n        }\n    }"}, {"instruction": "Evaluate the network (for classification) on the provided data set, with top N accuracy in addition to standard accuracy.\nFor 'standard' accuracy evaluation only, use topN = 1\n\n@param iterator   Iterator (data) to evaluate on\n@param labelsList List of labels. May be null.\n@param topN       N value for top N accuracy evaluation\n@return Evaluation object, summarizing the results of the evaluation on the provided DataSetIterator", "input": "Java", "output": "public <T extends Evaluation> T evaluate(DataSetIterator iterator, List<String> labelsList, int topN) {\n        if (labelsList == null)\n            labelsList = iterator.getLabels();\n\n        Layer outputLayer = getOutputLayer(0);\n        if(getConfiguration().isValidateOutputLayerConfig()){\n            OutputLayerUtil.validateOutputLayerForClassifierEvaluation(outputLayer.conf().getLayer(), Evaluation.class);\n        }\n\n        return (T)doEvaluation(iterator, new org.deeplearning4j.eval.Evaluation(labelsList, topN))[0];\n    }"}, {"instruction": "Execute add operation boolean.\n\n@param connectionFactory the connection factory\n@param entry             the entry\n@return true/false", "input": "Java", "output": "public static boolean executeAddOperation(final ConnectionFactory connectionFactory, final LdapEntry entry) {\n        try (val connection = createConnection(connectionFactory)) {\n            val operation = new AddOperation(connection);\n            operation.execute(new AddRequest(entry.getDn(), entry.getAttributes()));\n            return true;\n        } catch (final LdapException e) {\n            LOGGER.error(e.getMessage(), e);\n        }\n        return false;\n    }"}, {"instruction": "Returns type information for Java arrays of primitive type (such as <code>byte[]</code>). The array\nmust not be null.\n\n@param elementType element type of the array (e.g. Types.BOOLEAN, Types.INT, Types.DOUBLE)", "input": "Java", "output": "public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType) {\n\t\tif (elementType == BOOLEAN) {\n\t\t\treturn PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == BYTE) {\n\t\t\treturn PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == SHORT) {\n\t\t\treturn PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == INT) {\n\t\t\treturn PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == LONG) {\n\t\t\treturn PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == FLOAT) {\n\t\t\treturn PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == DOUBLE) {\n\t\t\treturn PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t} else if (elementType == CHAR) {\n\t\t\treturn PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO;\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid element type for a primitive array.\");\n\t}"}, {"instruction": "Closes the queue and prevents any other access to it. Any blocked call to takeAllItems() will fail with InterruptedException.\n\n@return If the queue has any more items in it, these will be returned here in the order in which they were inserted.\nThe items are guaranteed not to be returned both here and via take()/poll().", "input": "Java", "output": "public Queue<T> close() {\n        CompletableFuture<Queue<T>> pending = null;\n        Queue<T> result = null;\n        synchronized (this.contents) {\n            if (!this.closed) {\n                this.closed = true;\n                pending = this.pendingTake;\n                this.pendingTake = null;\n                result = fetch(this.contents.size());\n            }\n        }\n\n        // Cancel any pending poll request.\n        if (pending != null) {\n            pending.cancel(true);\n        }\n\n        return result != null ? result : new LinkedList<>();\n    }"}, {"instruction": "Reset the TableColumnManager to only manage the TableColumns that are\ncurrently visible in the table.\n\nGenerally this method should only be invoked by the TableColumnManager\nwhen the TableModel of the table is changed.", "input": "Java", "output": "public void reset() {\r\n\t\ttable.getColumnModel().removeColumnModelListener(this);\r\n\t\tcolumnModel = table.getColumnModel();\r\n\t\tcolumnModel.addColumnModelListener(this);\r\n\r\n\t\t// Keep a duplicate TableColumns for managing hidden TableColumns\r\n\r\n\t\tint count = columnModel.getColumnCount();\r\n\t\tallColumns = new ArrayList<>(count);\r\n\r\n\t\tfor (int i = 0; i < count; i++) {\r\n\t\t\tallColumns.add(columnModel.getColumn(i));\r\n\t\t}\r\n\t}"}, {"instruction": "Get a sum of bucket counts from either the start of a histogram's range or end, up to a specified cutoff value.\n\nFor example, if I have the following histogram with a range of 0-40, with 4 buckets and\nper-bucket counts of 5, 2, 10, and 7:\n\n|   5   |   2   |   24   |   7   |\n0       10      20       30      40\n\nCalling this function with a cutoff of 25 and fromStart = true would:\n- Sum the first two bucket counts 5 + 2\n- Since the cutoff falls in the third bucket, multiply the third bucket's count by the fraction of the bucket range\ncovered by the cutoff, in this case the fraction is ((25 - 20) / 10) = 0.5\n- The total count returned is 5 + 2 + 12\n\n@param cutoff Cutoff point within the histogram's range\n@param fromStart If true, sum the bucket counts starting from the beginning of the histogram range.\nIf false, sum from the other direction, starting from the end of the histogram range.\n@return Sum of bucket counts up to the cutoff point", "input": "Java", "output": "private double getCumulativeCount(double cutoff, boolean fromStart)\n  {\n    int cutoffBucket = (int) ((cutoff - lowerLimit) / bucketSize);\n    double count = 0;\n\n    if (fromStart) {\n      for (int i = 0; i <= cutoffBucket; i++) {\n        if (i == cutoffBucket) {\n          double bucketStart = i * bucketSize + lowerLimit;\n          double partialCount = ((cutoff - bucketStart) / bucketSize) * histogram[i];\n          count += partialCount;\n        } else {\n          count += histogram[i];\n        }\n      }\n    } else {\n      for (int i = cutoffBucket; i < histogram.length; i++) {\n        if (i == cutoffBucket) {\n          double bucketEnd = ((i + 1) * bucketSize) + lowerLimit;\n          double partialCount = ((bucketEnd - cutoff) / bucketSize) * histogram[i];\n          count += partialCount;\n        } else {\n          count += histogram[i];\n        }\n      }\n    }\n    return count;\n  }"}, {"instruction": "\u83b7\u5f97\u5b57\u6bb5\u540d\u548c\u5b57\u6bb5\u63cf\u8ff0Map\u3002\u5185\u90e8\u4f7f\u7528\uff0c\u76f4\u63a5\u83b7\u53d6Bean\u7c7b\u7684PropertyDescriptor\n\n@param clazz Bean\u7c7b\n@param ignoreCase \u662f\u5426\u5ffd\u7565\u5927\u5c0f\u5199\n@return \u5b57\u6bb5\u540d\u548c\u5b57\u6bb5\u63cf\u8ff0Map\n@throws BeanException \u83b7\u53d6\u5c5e\u6027\u5f02\u5e38", "input": "Java", "output": "private static Map<String, PropertyDescriptor> internalGetPropertyDescriptorMap(Class<?> clazz, boolean ignoreCase) throws BeanException {\r\n\t\tfinal PropertyDescriptor[] propertyDescriptors = getPropertyDescriptors(clazz);\r\n\t\tfinal Map<String, PropertyDescriptor> map = ignoreCase ? new CaseInsensitiveMap<String, PropertyDescriptor>(propertyDescriptors.length, 1)\r\n\t\t\t\t: new HashMap<String, PropertyDescriptor>((int) (propertyDescriptors.length), 1);\r\n\r\n\t\tfor (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\r\n\t\t\tmap.put(propertyDescriptor.getName(), propertyDescriptor);\r\n\t\t}\r\n\t\treturn map;\r\n\t}"}, {"instruction": "------ tables ------", "input": "Java", "output": "@Override\n\tpublic void createTable(ObjectPath tablePath, CatalogBaseTable table, boolean ignoreIfExists)\n\t\tthrows TableAlreadyExistException, DatabaseNotExistException {\n\t\tcheckNotNull(tablePath);\n\t\tcheckNotNull(table);\n\n\t\tif (!databaseExists(tablePath.getDatabaseName())) {\n\t\t\tthrow new DatabaseNotExistException(catalogName, tablePath.getDatabaseName());\n\t\t}\n\n\t\tif (tableExists(tablePath)) {\n\t\t\tif (!ignoreIfExists) {\n\t\t\t\tthrow new TableAlreadyExistException(catalogName, tablePath);\n\t\t\t}\n\t\t} else {\n\t\t\ttables.put(tablePath, table.copy());\n\n\t\t\tif ((table instanceof CatalogTable) && ((CatalogTable) table).isPartitioned()) {\n\t\t\t\tpartitions.put(tablePath, new LinkedHashMap<>());\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Gets a set of locality groups that should be added to the index table (not the metrics table).\n\n@param table Table for the locality groups, see AccumuloClient#getTable\n@return Mapping of locality group to column families in the locality group, 1:1 mapping in\nthis case", "input": "Java", "output": "public static Map<String, Set<Text>> getLocalityGroups(AccumuloTable table)\n    {\n        Map<String, Set<Text>> groups = new HashMap<>();\n        // For each indexed column\n        for (AccumuloColumnHandle columnHandle : table.getColumns().stream().filter(AccumuloColumnHandle::isIndexed).collect(Collectors.toList())) {\n            // Create a Text version of the index column family\n            Text indexColumnFamily = new Text(getIndexColumnFamily(columnHandle.getFamily().get().getBytes(UTF_8), columnHandle.getQualifier().get().getBytes(UTF_8)).array());\n\n            // Add this to the locality groups,\n            // it is a 1:1 mapping of locality group to column families\n            groups.put(indexColumnFamily.toString(), ImmutableSet.of(indexColumnFamily));\n        }\n        return groups;\n    }"}, {"instruction": "This method tries to isolate class loading during a Function call\n\n@param clazzName    The Class which has a static method called `runTask`\n@param input        The input for `runTask`, must have `input.getClass()` be the class of the input for runTask\n@param loader       The loader to use as the context class loader during invocation\n@param <InputType>  The input type of the method.\n@param <OutputType> The output type of the method. The result of runTask must be castable to this type.\n\n@return The result of the method invocation", "input": "Java", "output": "public static <InputType, OutputType> OutputType invokeForeignLoader(\n      final String clazzName,\n      final InputType input,\n      final ClassLoader loader\n  )\n  {\n    log.debug(\"Launching [%s] on class loader [%s] with input class [%s]\", clazzName, loader, input.getClass());\n    final ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();\n    try {\n      Thread.currentThread().setContextClassLoader(loader);\n      final Class<?> clazz = loader.loadClass(clazzName);\n      final Method method = clazz.getMethod(\"runTask\", input.getClass());\n      return (OutputType) method.invoke(null, input);\n    }\n    catch (IllegalAccessException | InvocationTargetException | ClassNotFoundException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      Thread.currentThread().setContextClassLoader(oldLoader);\n    }\n  }"}, {"instruction": "Collect the RPC client information.\n\n@param rpcClientMetricsModel client information model", "input": "Java", "output": "public void collectClient(RpcClientLookoutModel rpcClientMetricsModel) {\n\n        try {\n            Id methodConsumerId = createMethodConsumerId(rpcClientMetricsModel);\n            MixinMetric methodConsumerMetric = Lookout.registry().mixinMetric(methodConsumerId);\n\n            recordCounterAndTimer(methodConsumerMetric, rpcClientMetricsModel);\n\n            recordSize(methodConsumerMetric, rpcClientMetricsModel);\n\n        } catch (Throwable t) {\n            LOGGER.error(LogCodes.getLog(LogCodes.ERROR_METRIC_REPORT_ERROR), t);\n        }\n    }"}, {"instruction": "Converts a map of class elements to type arguments.\n@param parameters The parametesr\n@return The type arguments", "input": "Java", "output": "@NotNull\n    protected  Map<String, Map<String, Object>>  toTypeArguments(ParameterElement... parameters) {\n        final LinkedHashMap<String, Map<String, Object>>  map = new LinkedHashMap<>(parameters.length);\n        for (ParameterElement ce : parameters) {\n            final ClassElement type = ce.getType();\n            if (type == null) {\n                continue;\n            }\n            final Map<String, ClassElement> subArgs = type.getTypeArguments();\n            if (CollectionUtils.isNotEmpty(subArgs)) {\n                map.put(ce.getName(), toTypeArguments(subArgs));\n            }\n        }\n        return map;\n    }"}, {"instruction": "Gets the view properties configured for this view.\n@since 1.406", "input": "Java", "output": "public DescribableList<ViewProperty,ViewPropertyDescriptor> getProperties() {\n        // readResolve was the best place to do this, but for compatibility reasons,\n        // this class can no longer have readResolve() (the mechanism itself isn't suitable for class hierarchy)\n        // see JENKINS-9431\n        //\n        // until we have that, putting this logic here.\n        synchronized (PropertyList.class) {\n            if (properties == null) {\n                properties = new PropertyList(this);\n            } else {\n                properties.setOwner(this);\n            }\n            return properties;\n        }\n    }"}, {"instruction": "Calculate percentage of successful builds\nAny build with status InProgress, Aborted is excluded from calculation\nBuilds with status as Success, Unstable is included as success build\n\n@param builds iterable build\n@return percentage of build success", "input": "Java", "output": "private Double fetchBuildSuccessRatio(Iterable<Build> builds) {\n    int totalBuilds = 0, totalSuccess = 0;\n    for (Build build : builds) {\n      if (Constants.IGNORE_STATUS.contains(build.getBuildStatus())) {\n        continue;\n      }\n\n      totalBuilds++;\n      if (Constants.SUCCESS_STATUS.contains(build.getBuildStatus())) {\n        totalSuccess++;\n      }\n    }\n    if (totalBuilds == 0) {\n      return 0.0d;\n    }\n    return ((totalSuccess * 100) / (double) totalBuilds);\n  }"}, {"instruction": "Invokes the given {@code script}, synchronously, as a {@link ProxyScript}, handling any {@code Exception} thrown during\nthe invocation.\n<p>\nThe context class loader of caller thread is replaced with the class loader {@code AddOnLoader} to allow the script to\naccess classes of add-ons.\n\n@param script the script to invoke.\n@param msg the HTTP message being proxied.\n@param request {@code true} if processing the request, {@code false} otherwise.\n@return {@code true} if the request should be forward to the server, {@code false} otherwise.\n@since 2.2.0\n@see #getInterface(ScriptWrapper, Class)", "input": "Java", "output": "public boolean invokeProxyScript(ScriptWrapper script, HttpMessage msg, boolean request) {\r\n\t\tvalidateScriptType(script, TYPE_PROXY);\r\n\r\n\t\tWriter writer = getWriters(script);\r\n\t\ttry {\r\n\t\t\t// Dont need to check if enabled as it can only be invoked manually\r\n\t\t\tProxyScript s = this.getInterface(script, ProxyScript.class);\r\n\t\t\t\r\n\t\t\tif (s != null) {\r\n\t\t\t\tif (request) {\r\n\t\t\t\t\treturn s.proxyRequest(msg);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn s.proxyResponse(msg);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\thandleUnspecifiedScriptError(script, writer, Constant.messages.getString(\"script.interface.proxy.error\"));\r\n\t\t\t}\r\n\t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\thandleScriptException(script, writer, e);\r\n\t\t}\r\n    \t// Return true so that the request is submitted - if we returned false all proxying would fail on script errors\r\n    \treturn true;\r\n\t}"}, {"instruction": "Iterates over all active HTTP/2 streams.\n\n<p>This method must not be called outside of the event loop.", "input": "Java", "output": "final void forEachActiveStream(final Http2FrameStreamVisitor streamVisitor) throws Http2Exception {\n        assert ctx.executor().inEventLoop();\n\n        connection().forEachActiveStream(new Http2StreamVisitor() {\n            @Override\n            public boolean visit(Http2Stream stream) {\n                try {\n                    return streamVisitor.visit((Http2FrameStream) stream.getProperty(streamKey));\n                } catch (Throwable cause) {\n                    onError(ctx, false, cause);\n                    return false;\n                }\n            }\n        });\n    }"}, {"instruction": "pretrain is used to build CoOccurrence matrix for GloVe algorithm\n@param iterator", "input": "Java", "output": "@Override\n    public void pretrain(@NonNull SequenceIterator<T> iterator) {\n        // CoOccurence table should be built here\n        coOccurrences = new AbstractCoOccurrences.Builder<T>()\n                        // TODO: symmetric should be handled via VectorsConfiguration\n                        .symmetric(this.symmetric).windowSize(configuration.getWindow()).iterate(iterator)\n                        .workers(workers).vocabCache(vocabCache).maxMemory(maxmemory).build();\n\n        coOccurrences.fit();\n    }"}, {"instruction": "Allocate and return a  new array\nbased on the vertex id and weight initialization.\n@return the allocated array", "input": "Java", "output": "public INDArray storeAndAllocateNewArray() {\n        Preconditions.checkState(variableType == VariableType.VARIABLE, \"Unable to allocate and store array for variable of type %s: only\" +\n                \" VARIABLE type variables can be initialized using this method\", variableType);\n\n        if(!sameDiff.arrayAlreadyExistsForVarName(varName)){\n            long[] shape = getShape();\n            INDArray arr = getWeightInitScheme().create(dataType(), shape);\n            sameDiff.associateArrayWithVariable(arr, this);\n            if(log.isTraceEnabled()){\n                log.trace(\"Generated and stored new array for variable \\\"{}\\\": shape {}\", getVarName(), Arrays.toString(arr.shape()));\n            }\n            return arr;\n        }\n\n        //Variable type SDVariables: shape should never change (i.e., these are params in the net!)\n        INDArray ret = getArr();\n        return ret;\n    }"}, {"instruction": "Throws a DException if the remote throws, wrapping the original exception.", "input": "Java", "output": "@Override public V get() {\n    // check priorities - FJ task can only block on a task with higher priority!\n    Thread cThr = Thread.currentThread();\n    int priority = (cThr instanceof FJWThr) ? ((FJWThr)cThr)._priority : -1;\n    assert _dt.priority() > priority || (_dt.priority() == priority && _dt instanceof MRTask)\n      : \"*** Attempting to block on task (\" + _dt.getClass() + \") with equal or lower priority. Can lead to deadlock! \" + _dt.priority() + \" <=  \" + priority;\n    if( _done ) return result(); // Fast-path shortcut, or throw if exception\n    // Use FJP ManagedBlock for this blocking-wait - so the FJP can spawn\n    // another thread if needed.\n    try { ForkJoinPool.managedBlock(this); } catch( InterruptedException ignore ) { }\n    if( _done ) return result(); // Fast-path shortcut or throw if exception\n    assert isCancelled();\n    return null;\n  }"}, {"instruction": "Scan {@code uri} for a session ID. This is identified by scanning for \"{code /session/}\" and\nthen extracting the next fragment of the URL. This means that both \"{@code /session/foo}\" and\n\"{@code /wd/hub/session/foo/bar}\" would both identify the session id as being \"foo\".", "input": "Java", "output": "public static Optional<String> getSessionId(String uri) {\n    int sessionIndex = uri.indexOf(\"/session/\");\n    if (sessionIndex != -1) {\n      sessionIndex += \"/session/\".length();\n      int nextSlash = uri.indexOf(\"/\", sessionIndex);\n      if (nextSlash != -1) {\n        return Optional.of(uri.substring(sessionIndex, nextSlash));\n      }\n      return Optional.of(uri.substring(sessionIndex));\n    }\n    return Optional.empty();\n  }"}, {"instruction": "As per {@link #execBackwards(Map)}, but the set of gradients to calculate can be specified manually.<br>\nFor example, to calculate the gradient for placeholder variable \"myPlaceholder\", use\n{@code execBackwards(placeholders, Arrays.asList(myPlaceholder.gradient().getVarName())}.\n\n@param placeholders Values for the placeholder variables in the graph. For graphs without placeholders, use null or an empty map\n@param variableGradNamesList Names of the gradient variables to calculate", "input": "Java", "output": "public void execBackwards(Map<String,INDArray> placeholders, List<String> variableGradNamesList){\n        if (getFunction(\"grad\") == null) {\n            createGradFunction();\n        }\n\n        log.trace(\"About to execute backward function\");\n\n        //Edge case: if no variables, no variable gradients to calculate...\n        if(variableGradNamesList.isEmpty()){\n            log.warn(\"Skipping gradient calculation (backward pass) - no variables to be calculated (variableGradNamesList is empty)\");\n            return;\n        }\n\n        sameDiffFunctionInstances.get(\"grad\").exec(placeholders, variableGradNamesList);\n    }"}, {"instruction": "Helper method which sets up an iteration with the given vertex value.\n\n@param iteration", "input": "Java", "output": "private void setUpIteration(DeltaIteration<?, ?> iteration) {\n\n\t\t// set up the iteration operator\n\t\tif (this.configuration != null) {\n\n\t\t\titeration.name(this.configuration.getName(\"Vertex-centric iteration (\" + computeFunction + \")\"));\n\t\t\titeration.parallelism(this.configuration.getParallelism());\n\t\t\titeration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory());\n\n\t\t\t// register all aggregators\n\t\t\tfor (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {\n\t\t\t\titeration.registerAggregator(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// no configuration provided; set default name\n\t\t\titeration.name(\"Vertex-centric iteration (\" + computeFunction + \")\");\n\t\t}\n\t}"}, {"instruction": "Gets the selected alerts from the {@link #treeAlert alerts tree}.\n\n@param allAlerts {@code true} if it should return all selected alerts, {@code false} to just return the first selected\nalert.\n@return a {@code Set} with the selected alerts, never {@code null}.", "input": "Java", "output": "private Set<Alert> getSelectedAlertsImpl(boolean allAlerts) {\r\n\t\tTreePath[] paths = getTreeAlert().getSelectionPaths();\r\n\t\tif (paths == null || paths.length == 0) {\r\n\t\t\treturn Collections.emptySet();\r\n\t\t}\r\n\r\n\t\tSet<Alert> alerts = new HashSet<>();\r\n\t\tif (!allAlerts) {\r\n\t\t\tDefaultMutableTreeNode alertNode = (DefaultMutableTreeNode) paths[0].getLastPathComponent();\r\n\t\t\talerts.add((Alert) alertNode.getUserObject());\r\n\t\t\treturn alerts;\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i < paths.length; i++) {\r\n\t\t\tDefaultMutableTreeNode alertNode = (DefaultMutableTreeNode) paths[i].getLastPathComponent();\r\n\t\t\tif (alertNode.getChildCount() == 0) {\r\n\t\t\t\talerts.add((Alert) alertNode.getUserObject());\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (int j = 0; j < alertNode.getChildCount(); j++) {\r\n\t\t\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) alertNode.getChildAt(j);\r\n\t\t\t\talerts.add((Alert) node.getUserObject());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn alerts;\r\n\t}"}, {"instruction": "Handles the logout processing.\n\n<p>\nThe default implementation erases the session and do a few other clean up, then\nredirect the user to the URL specified by {@link #getPostLogOutUrl(StaplerRequest, Authentication)}.\n\n@since 1.314", "input": "Java", "output": "public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {\n        HttpSession session = req.getSession(false);\n        if(session!=null)\n            session.invalidate();\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        SecurityContextHolder.clearContext();\n\n        // reset remember-me cookie\n        Cookie cookie = new Cookie(ACEGI_SECURITY_HASHED_REMEMBER_ME_COOKIE_KEY,\"\");\n        cookie.setMaxAge(0);\n        cookie.setSecure(req.isSecure());\n        cookie.setHttpOnly(true);\n        cookie.setPath(req.getContextPath().length()>0 ? req.getContextPath() : \"/\");\n        rsp.addCookie(cookie);\n\n        rsp.sendRedirect2(getPostLogOutUrl(req,auth));\n    }"}, {"instruction": "Gets flow or job props from flow yaml file.\n\n@param path the flow or job path delimited by \":\", e.g. \"flow:subflow1:subflow2:job3\"\n@param flowFile the flow yaml file\n@return the props from yaml file", "input": "Java", "output": "public static Props getPropsFromYamlFile(final String path, final File flowFile) {\n    final List<Props> propsList = new ArrayList<>();\n    final NodeBeanLoader loader = new NodeBeanLoader();\n\n    try {\n      final NodeBean nodeBean = loader.load(flowFile);\n      final String[] pathList = path.split(Constants.PATH_DELIMITER);\n      if (findPropsFromNodeBean(nodeBean, pathList, 0, propsList)) {\n        if (!propsList.isEmpty()) {\n          return propsList.get(0);\n        } else {\n          logger.error(\"Error getting props for \" + path);\n        }\n      }\n    } catch (final Exception e) {\n      logger.error(\"Failed to get props, error loading flow YAML file. \", e);\n    }\n    return null;\n  }"}, {"instruction": "------------------------------------------------------------------------", "input": "Java", "output": "@Override\n\tpublic MutableObjectIterator<E> getIterator() throws InterruptedException {\n\t\tsynchronized (this.iteratorLock) {\n\t\t\t// wait while both the iterator and the exception are not set\n\t\t\twhile (this.iterator == null && this.iteratorException == null) {\n\t\t\t\tthis.iteratorLock.wait();\n\t\t\t}\n\t\t\t\n\t\t\tif (this.iteratorException != null) {\n\t\t\t\tthrow new RuntimeException(\"Error obtaining the sorted input: \" + this.iteratorException.getMessage(),\n\t\t\t\t\tthis.iteratorException);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.iterator;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "\u8f6c\u5316\u6307\u5b9a\u5f02\u5e38\u4e3a\u6765\u81ea\u6216\u8005\u5305\u542b\u6307\u5b9a\u5f02\u5e38\n\n@param <T> \u5f02\u5e38\u7c7b\u578b\n@param throwable \u5f02\u5e38\n@param exceptionClass \u5b9a\u4e49\u7684\u5f15\u8d77\u5f02\u5e38\u7684\u7c7b\n@param checkCause \u5224\u65adcause\n@return \u7ed3\u679c\u4e3anull \u4e0d\u662f\u6765\u81ea\u6216\u8005\u5305\u542b\n@since 4.4.1", "input": "Java", "output": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Throwable> T convertFromOrSuppressedThrowable(Throwable throwable, Class<T> exceptionClass, boolean checkCause) {\n\t\tif (throwable == null || exceptionClass == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (exceptionClass.isAssignableFrom(throwable.getClass())) {\n\t\t\treturn (T) throwable;\n\t\t}\n\t\tif (checkCause) {\n\t\t\tThrowable cause = throwable.getCause();\n\t\t\tif (cause != null && exceptionClass.isAssignableFrom(cause.getClass())) {\n\t\t\t\treturn (T) cause;\n\t\t\t}\n\t\t}\n\t\tThrowable[] throwables = throwable.getSuppressed();\n\t\tif (ArrayUtil.isNotEmpty(throwables)) {\n\t\t\tfor (Throwable throwable1 : throwables) {\n\t\t\t\tif (exceptionClass.isAssignableFrom(throwable1.getClass())) {\n\t\t\t\t\treturn (T) throwable1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"}, {"instruction": "Convert a raw record via\nthe {@link TransformProcess}\nto a base 64ed ndarray\n@param batch the record to convert\n@return teh base 64ed ndarray\n@throws IOException", "input": "Java", "output": "public Base64NDArrayBody toArray(BatchCSVRecord batch) throws IOException {\n        List<List<Writable>> converted =  execute(toArrowWritables(toArrowColumnsString(\n                bufferAllocator,transformProcess.getInitialSchema(),\n                batch.getRecordsAsString()),\n                transformProcess.getInitialSchema()),transformProcess);\n\n        ArrowWritableRecordBatch arrowRecordBatch = (ArrowWritableRecordBatch) converted;\n        INDArray convert = ArrowConverter.toArray(arrowRecordBatch);\n        return new Base64NDArrayBody(Nd4jBase64.base64String(convert));\n    }"}, {"instruction": "Set a header name and value. If the name is not found, it will be added.\nIf the value is null, the header will be removed.\n\n@param name\n@param value", "input": "Java", "output": "public void setHeader(String name, String value) {\r\n//\t\tint pos = 0;\r\n//\t\tint crlfpos = 0;\r\n        Pattern pattern = null;\r\n\r\n        if (getHeaders(name) == null && value != null) {\r\n            // header value not found, append to end\r\n            addHeader(name, value);\r\n        } else {\r\n            pattern = getHeaderRegex(name);\r\n            Matcher matcher = pattern.matcher(mMsgHeader);\r\n            if (value == null) {\r\n                // delete header\r\n                mMsgHeader = matcher.replaceAll(\"\");\r\n            } else {\r\n                // replace header\r\n                String newString = name + \": \" + value + mLineDelimiter;\r\n                mMsgHeader = matcher.replaceAll(Matcher.quoteReplacement(newString));\r\n            }\r\n\r\n            // set into hashtable\r\n            replaceInternalHeaderFields(name, value);\r\n        }\r\n    }"}, {"instruction": "return the privateIp address of the given InstanceInfo record. The record could be for the local server\nor a remote server.\n\n@param instanceInfo\n@return the private Ip (also known as localIpv4 in ec2)", "input": "Java", "output": "public static String getPrivateIp(InstanceInfo instanceInfo) {\n        String defaultPrivateIp = null;\n        if (instanceInfo.getDataCenterInfo() instanceof AmazonInfo) {\n            defaultPrivateIp = ((AmazonInfo) instanceInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.localIpv4);\n        }\n\n        if (isNullOrEmpty(defaultPrivateIp)) {\n            // no other information, best effort\n            defaultPrivateIp = instanceInfo.getIPAddr();\n        }\n\n        return defaultPrivateIp;\n    }"}, {"instruction": "Reads an attribute in {@link #b b}.\n\n@param attrs   prototypes of the attributes that must be parsed during the\nvisit of the class. Any attribute whose type is not equal to\nthe type of one the prototypes is ignored (i.e. an empty\n{@link Attribute} instance is returned).\n@param type    the type of the attribute.\n@param off     index of the first byte of the attribute's content in\n{@link #b b}. The 6 attribute header bytes, containing the\ntype and the length of the attribute, are not taken into\naccount here (they have already been read).\n@param len     the length of the attribute's content.\n@param buf     buffer to be used to call {@link #readUTF8 readUTF8},\n{@link #readClass(int, char[]) readClass} or {@link #readConst\nreadConst}.\n@param codeOff index of the first byte of code's attribute content in\n{@link #b b}, or -1 if the attribute to be read is not a code\nattribute. The 6 attribute header bytes, containing the type\nand the length of the attribute, are not taken into account\nhere.\n@param labels  the labels of the method's code, or <tt>null</tt> if the\nattribute to be read is not a code attribute.\n@return the attribute that has been read, or <tt>null</tt> to skip this\nattribute.", "input": "Java", "output": "private Attribute readAttribute(final Attribute[] attrs, final String type,\n                                    final int off, final int len, final char[] buf, final int codeOff,\n                                    final Label[] labels) {\n        for (int i = 0; i < attrs.length; ++i) {\n            if (attrs[i].type.equals(type)) {\n                return attrs[i].read(this, off, len, buf, codeOff, labels);\n            }\n        }\n        return new Attribute(type).read(this, off, len, null, -1, null);\n    }"}, {"instruction": "Gets login context.\n\n@param credential the credential\n@return the login context\n@throws GeneralSecurityException the general security exception", "input": "Java", "output": "protected LoginContext getLoginContext(final UsernamePasswordCredential credential) throws GeneralSecurityException {\n        val callbackHandler = new UsernamePasswordCallbackHandler(credential.getUsername(), credential.getPassword());\n        if (this.loginConfigurationFile != null && StringUtils.isNotBlank(this.loginConfigType)\n            && this.loginConfigurationFile.exists() && this.loginConfigurationFile.canRead()) {\n            final Configuration.Parameters parameters = new URIParameter(loginConfigurationFile.toURI());\n            val loginConfig = Configuration.getInstance(this.loginConfigType, parameters);\n            return new LoginContext(this.realm, null, callbackHandler, loginConfig);\n        }\n        return new LoginContext(this.realm, callbackHandler);\n    }"}, {"instruction": "This method places incoming VoidAggregation into clipboard, for further tracking\n\n@param aggregation\n@return TRUE, if given VoidAggregation was the last chunk, FALSE otherwise", "input": "Java", "output": "public boolean pin(@NonNull VoidAggregation aggregation) {\n        RequestDescriptor descriptor =\n                        RequestDescriptor.createDescriptor(aggregation.getOriginatorId(), aggregation.getTaskId());\n        VoidAggregation existing = clipboard.get(descriptor);\n        if (existing == null) {\n            existing = aggregation;\n            trackingCounter.incrementAndGet();\n            clipboard.put(descriptor, aggregation);\n        }\n\n        existing.accumulateAggregation(aggregation);\n\n        //if (counter.incrementAndGet() % 10000 == 0)\n        //    log.info(\"Clipboard stats: Totals: {}; Completed: {};\", clipboard.size(), completedQueue.size());\n\n        int missing = existing.getMissingChunks();\n        if (missing == 0) {\n            //  completedQueue.add(existing);\n            completedCounter.incrementAndGet();\n            return true;\n        } else\n            return false;\n    }"}, {"instruction": "Creates a new pending checkpoint tracker.\n\n@param checkpointId ID of the checkpoint.\n@param triggerTimestamp Trigger timestamp of the checkpoint.\n@param props The checkpoint properties.\n@return Tracker for statistics gathering.", "input": "Java", "output": "PendingCheckpointStats reportPendingCheckpoint(\n\t\t\tlong checkpointId,\n\t\t\tlong triggerTimestamp,\n\t\t\tCheckpointProperties props) {\n\n\t\tConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap();\n\n\t\tPendingCheckpointStats pending = new PendingCheckpointStats(\n\t\t\t\tcheckpointId,\n\t\t\t\ttriggerTimestamp,\n\t\t\t\tprops,\n\t\t\t\ttotalSubtaskCount,\n\t\t\t\ttaskStateStats,\n\t\t\t\tnew PendingCheckpointStatsCallback());\n\n\t\tstatsReadWriteLock.lock();\n\t\ttry {\n\t\t\tcounts.incrementInProgressCheckpoints();\n\t\t\thistory.addInProgressCheckpoint(pending);\n\n\t\t\tdirty = true;\n\t\t} finally {\n\t\t\tstatsReadWriteLock.unlock();\n\t\t}\n\n\t\treturn pending;\n\t}"}, {"instruction": "Do the work.", "input": "Java", "output": "public void doIt() {\n    if (nodeidx == -1) {\n      GetLogsTask t = new GetLogsTask();\n      t.doIt();\n      bytes = t._bytes;\n    }\n    else {\n      H2ONode node = H2O.CLOUD._memary[nodeidx];\n      GetLogsTask t = new GetLogsTask();\n      Log.trace(\"GetLogsTask starting to node \" + nodeidx + \"...\");\n      // Synchronous RPC call to get ticks from remote (possibly this) node.\n      new RPC<>(node, t).call().get();\n      Log.trace(\"GetLogsTask completed to node \" + nodeidx);\n      bytes = t._bytes;\n    }\n  }"}, {"instruction": "Resumes ZooKeeper (if it had previously been suspended).\n\n@throws Exception If an exception got thrown.", "input": "Java", "output": "public void resumeZooKeeper() throws Exception {\n        val zk = new ZooKeeperServiceRunner(this.zkPort, this.secureZK, this.tLSKeyStore, this.tLSKeyStorePasswordPath, this.tlsTrustStore);\n        if (this.zkServer.compareAndSet(null, zk)) {\n            // Initialize ZK runner (since nobody else did it for us).\n            zk.initialize();\n            log.info(\"ZooKeeper initialized.\");\n        } else {\n            zk.close();\n        }\n\n        // Start or resume ZK.\n        this.zkServer.get().start();\n        log.info(\"ZooKeeper resumed.\");\n    }"}, {"instruction": "\u5b57\u8282\u6570\u8f6c\u5408\u9002\u5185\u5b58\u5927\u5c0f\n<p>\u4fdd\u75593\u4f4d\u5c0f\u6570</p>\n\n@param byteNum \u5b57\u8282\u6570\n@return \u5408\u9002\u5185\u5b58\u5927\u5c0f", "input": "Java", "output": "public static String byte2FitMemoryString(final long byteNum) {\n        if (byteNum < 0) {\n            return \"shouldn't be less than zero!\";\n        } else if (byteNum < MemoryConst.KB) {\n            return String.format(\"%d B\", byteNum);\n        } else if (byteNum < MemoryConst.MB) {\n            return String.format(\"%d KB\", byteNum / MemoryConst.KB);\n        } else if (byteNum < MemoryConst.GB) {\n            return String.format(\"%d MB\", byteNum / MemoryConst.MB);\n        } else {\n            return String.format(\"%d GB\", byteNum / MemoryConst.GB);\n        }\n    }"}, {"instruction": "\u5c06\u5c5e\u6027\u7684\u8bcd\u6027\u9501\u5b9a\u4e3anature\n\n@param nature \u8bcd\u6027\n@return \u5982\u679c\u9501\u5b9a\u8bcd\u6027\u5728\u8bcd\u6027\u5217\u8868\u4e2d\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047", "input": "Java", "output": "public boolean confirmNature(Nature nature)\n    {\n        if (attribute.nature.length == 1 && attribute.nature[0] == nature)\n        {\n            return true;\n        }\n        boolean result = true;\n        int frequency = attribute.getNatureFrequency(nature);\n        if (frequency == 0)\n        {\n            frequency = 1000;\n            result = false;\n        }\n        attribute = new CoreDictionary.Attribute(nature, frequency);\n        return result;\n    }"}, {"instruction": "\u8bbe\u7f6e\u6620\u5c04\u8868\n@param deprelTranslatorPath \u6620\u5c04\u8868\u8def\u5f84\n@return", "input": "Java", "output": "public IDependencyParser setDeprelTranslater(String deprelTranslatorPath)\n    {\n        deprelTranslater = GlobalObjectPool.get(deprelTranslatorPath);\n        if (deprelTranslater != null) return this;\n\n        IOUtil.LineIterator iterator = new IOUtil.LineIterator(deprelTranslatorPath);\n        deprelTranslater = new TreeMap<String, String>();\n        while (iterator.hasNext())\n        {\n            String[] args = iterator.next().split(\"\\\\s\");\n            deprelTranslater.put(args[0], args[1]);\n        }\n        if (deprelTranslater.size() == 0)\n        {\n            deprelTranslater = null;\n        }\n        GlobalObjectPool.put(deprelTranslatorPath, deprelTranslater);\n\n        return this;\n    }"}, {"instruction": "Returns the concatenation of 8-bit, length prefixed protocol names.\nhttp://tools.ietf.org/html/draft-agl-tls-nextprotoneg-04#page-4", "input": "Java", "output": "public static byte[] concatLengthPrefixed(List<Protocol> protocols) {\n    Buffer result = new Buffer();\n    for (int i = 0, size = protocols.size(); i < size; i++) {\n      Protocol protocol = protocols.get(i);\n      if (protocol == Protocol.HTTP_1_0) continue; // No HTTP/1.0 for ALPN.\n      result.writeByte(protocol.toString().length());\n      result.writeUtf8(protocol.toString());\n    }\n    return result.readByteArray();\n  }"}, {"instruction": "Perform SPNEGO login using the hadoop shim API if the configuration is available", "input": "Java", "output": "public static UserGroupInformation loginFromSpnegoKeytabAndReturnUGI(HiveConf hiveConf)\n    throws IOException {\n    String principal = hiveConf.getVar(ConfVars.HIVE_SERVER2_SPNEGO_PRINCIPAL);\n    String keyTabFile = hiveConf.getVar(ConfVars.HIVE_SERVER2_SPNEGO_KEYTAB);\n    if (principal.isEmpty() || keyTabFile.isEmpty()) {\n      throw new IOException(\"HiveServer2 SPNEGO principal or keytab is not correctly configured\");\n    } else {\n      return UserGroupInformation.loginUserFromKeytabAndReturnUGI(SecurityUtil.getServerPrincipal(principal, \"0.0.0.0\"), keyTabFile);\n    }\n  }"}, {"instruction": "Creates a new ScheduledExecutorService that will use daemon threads with appropriate names the threads.\n@param size The number of threads in the threadpool\n@param poolName The name of the pool (this will be printed in logs)\n@return A new executor service.", "input": "Java", "output": "public static ScheduledExecutorService newScheduledThreadPool(int size, String poolName) {\n        // Caller runs only occurs after shutdown, as queue size is unbounded.\n        ScheduledThreadPoolExecutor result = new ScheduledThreadPoolExecutor(size, getThreadFactory(poolName), new CallerRuns());\n\n        // Do not execute any periodic tasks after shutdown.\n        result.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n\n        // Do not execute any delayed tasks after shutdown.\n        result.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n\n        // Remove tasks from the executor once they are done executing. By default, even when canceled, these tasks are\n        // not removed; if this setting is not enabled we could end up with leaked (and obsolete) tasks.\n        result.setRemoveOnCancelPolicy(true);\n        return result;\n    }"}, {"instruction": "\u8fd4\u56de\u65e0\u5e8f\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n\n\u5728\u8fd4\u56de\u7684Pair\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u6700\u5927\u503c", "input": "Java", "output": "public static <T> Pair<T, T> minAndMax(Collection<? extends T> coll, Comparator<? super T> comp) {\n\n\t\tIterator<? extends T> i = coll.iterator();\n\t\tT minCandidate = i.next();\n\t\tT maxCandidate = minCandidate;\n\n\t\twhile (i.hasNext()) {\n\t\t\tT next = i.next();\n\t\t\tif (comp.compare(next, minCandidate) < 0) {\n\t\t\t\tminCandidate = next;\n\t\t\t} else if (comp.compare(next, maxCandidate) > 0) {\n\t\t\t\tmaxCandidate = next;\n\t\t\t}\n\t\t}\n\n\t\treturn Pair.of(minCandidate, maxCandidate);\n\t}"}, {"instruction": "Create collection.\n\n@param mongoTemplate  the mongo template\n@param collectionName the collection name\n@param dropCollection the drop collection", "input": "Java", "output": "public void createCollection(final MongoOperations mongoTemplate, final String collectionName, final boolean dropCollection) {\n        if (dropCollection) {\n            LOGGER.trace(\"Dropping database collection: [{}]\", collectionName);\n            mongoTemplate.dropCollection(collectionName);\n        }\n\n        if (!mongoTemplate.collectionExists(collectionName)) {\n            LOGGER.trace(\"Creating database collection: [{}]\", collectionName);\n            mongoTemplate.createCollection(collectionName);\n        }\n    }"}, {"instruction": "Destroy is called after the produce or consume phase of a task finishes.", "input": "Java", "output": "@Override\n\tpublic void lazyDestroy() {\n\t\t// NOTE: if you change this logic, be sure to update recycle() as well!\n\t\tsynchronized (availableMemorySegments) {\n\t\t\tif (!isDestroyed) {\n\t\t\t\tMemorySegment segment;\n\t\t\t\twhile ((segment = availableMemorySegments.poll()) != null) {\n\t\t\t\t\treturnMemorySegment(segment);\n\t\t\t\t}\n\n\t\t\t\tBufferListener listener;\n\t\t\t\twhile ((listener = registeredListeners.poll()) != null) {\n\t\t\t\t\tlistener.notifyBufferDestroyed();\n\t\t\t\t}\n\n\t\t\t\tisDestroyed = true;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tnetworkBufferPool.destroyBufferPool(this);\n\t\t} catch (IOException e) {\n\t\t\tExceptionUtils.rethrow(e);\n\t\t}\n\t}"}, {"instruction": "\u5220\u9664\u5df2\u7ecf\u88ab\u5e9f\u5f03\u7684processId", "input": "Java", "output": "private synchronized void compareProgress(List<Long> processIds) {\n        if (CollectionUtils.isEmpty(processIds) == false) {\n            Long minProcessId = processIds.get(0);\n            // \u5bf9\u6bd4\u4e00\u4e0bprogress\u4e2d\u7684\u8bb0\u5f55\uff0c\u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u7684processId\uff0c\u76f4\u63a5\u5220\u9664\u5185\u5b58\u4e2d\u7684\u8bb0\u5f55\n            // \u56e0\u4e3a\u53d1\u751f\u8de8\u673a\u5668\u8c03\u7528\u6216\u8005\u51fa\u73b0restart\u6307\u4ee4\uff0c\u5bf9\u5e94\u7684process\u8bb0\u5f55\u4e0d\u4f1a\u88ab\u5220\u9664\n            for (Long processId : progress.keySet()) {\n                if (processId < minProcessId) {\n                    progress.remove(processId);\n                }\n            }\n        }\n    }"}, {"instruction": "Translates the properties as much as possible, and truncates at the first non-translatable property", "input": "Java", "output": "public static <X, Y> List<LocalProperty<Y>> translate(List<? extends LocalProperty<X>> properties, Function<X, Optional<Y>> translator)\n    {\n        properties = normalizeAndPrune(properties);\n\n        ImmutableList.Builder<LocalProperty<Y>> builder = ImmutableList.builder();\n        for (LocalProperty<X> property : properties) {\n            Optional<LocalProperty<Y>> translated = property.translate(translator);\n            if (translated.isPresent()) {\n                builder.add(translated.get());\n            }\n            else if (!(property instanceof ConstantProperty)) {\n                break; // Only break if we fail to translate non-constants\n            }\n        }\n\n        return builder.build();\n    }"}, {"instruction": "Acquire the lock object.\n\n@param lock the lock\n@return true, if successful", "input": "Java", "output": "public boolean acquire(final Lock lock) {\n        lock.setUniqueId(this.uniqueId);\n        if (this.lockTimeout > 0) {\n            lock.setExpirationDate(ZonedDateTime.now(ZoneOffset.UTC).plusSeconds(this.lockTimeout));\n        } else {\n            lock.setExpirationDate(null);\n        }\n        var success = false;\n        try {\n            if (lock.getApplicationId() != null) {\n                this.entityManager.merge(lock);\n            } else {\n                lock.setApplicationId(this.applicationId);\n                this.entityManager.persist(lock);\n            }\n            success = true;\n        } catch (final Exception e) {\n            success = false;\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"[{}] could not obtain [{}] lock.\", this.uniqueId, this.applicationId, e);\n            } else {\n                LOGGER.info(\"[{}] could not obtain [{}] lock.\", this.uniqueId, this.applicationId);\n            }\n        }\n        return success;\n    }"}, {"instruction": "Creates a SSLEngineFactory to be used by internal communication server endpoints.", "input": "Java", "output": "public static SSLHandlerFactory createInternalServerSSLEngineFactory(final Configuration config) throws Exception {\n\t\tSSLContext sslContext = createInternalSSLContext(config);\n\t\tif (sslContext == null) {\n\t\t\tthrow new IllegalConfigurationException(\"SSL is not enabled for internal communication.\");\n\t\t}\n\n\t\treturn new SSLHandlerFactory(\n\t\t\t\tsslContext,\n\t\t\t\tgetEnabledProtocols(config),\n\t\t\t\tgetEnabledCipherSuites(config),\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tconfig.getInteger(SecurityOptions.SSL_INTERNAL_HANDSHAKE_TIMEOUT),\n\t\t\t\tconfig.getInteger(SecurityOptions.SSL_INTERNAL_CLOSE_NOTIFY_FLUSH_TIMEOUT));\n\t}"}, {"instruction": "Power to an integer.\n\n@param exponent the exponent.\n@return this value raised to the power given by the exponent.\nIf the exponent is 0, the value 1 is returned.", "input": "Java", "output": "public Rational pow(BigInteger exponent) throws NumberFormatException {\n        /* test for overflow */\n        if (exponent.compareTo(MAX_INT) == 1) {\n            throw new NumberFormatException(\"Exponent \" + exponent.toString() + \" too large.\");\n        }\n        if (exponent.compareTo(MIN_INT) == -1) {\n            throw new NumberFormatException(\"Exponent \" + exponent.toString() + \" too small.\");\n        }\n        /* promote to the simpler interface above */\n        return pow(exponent.intValue());\n    }"}, {"instruction": "Generate response for access token model and view.\n\n@param request  the request\n@param response the response\n@param result   the result\n@return the model and view", "input": "Java", "output": "protected ModelAndView generateResponseForAccessToken(final HttpServletRequest request,\n                                                          final HttpServletResponse response,\n                                                          final OAuth20AccessTokenResponseResult result) {\n        val model = getAccessTokenResponseModel(request, response, result);\n        return new ModelAndView(new MappingJackson2JsonView(MAPPER), model);\n    }"}, {"instruction": "ZAP: Added type arguments.", "input": "Java", "output": "protected Hashtable<String, String> parseParameter(String param){\r\n        // ZAP: Added type arguments.\r\n        Hashtable<String, String> table = new Hashtable<>();\r\n        \r\n        try{\t  \r\n            matcher2 = pSeparator.matcher(param);\r\n            while (matcher2.find()){\r\n                // start of a request\r\n                table.put(matcher2.group(1), matcher2.group(2));\r\n                \r\n            }\r\n        } catch(Exception e){\r\n        \tlogger.error(e.getMessage(), e);\r\n        }\r\n        return table;\r\n        \r\n    }"}, {"instruction": "This returns the minimized loss values for a given vector.\nIt is assumed that  the x, y pairs are at\nvector[i], vector[i+1]\n@param vector the vector of numbers to getFromOrigin the weights for\n@return a double array with w_0 and w_1 are the associated indices.", "input": "Java", "output": "public static double[] weightsFor(List<Double> vector) {\n        /* split coordinate system */\n        List<double[]> coords = coordSplit(vector);\n        /* x vals */\n        double[] x = coords.get(0);\n        /* y vals */\n        double[] y = coords.get(1);\n\n\n        double meanX = sum(x) / x.length;\n        double meanY = sum(y) / y.length;\n\n        double sumOfMeanDifferences = sumOfMeanDifferences(x, y);\n        double xDifferenceOfMean = sumOfMeanDifferencesOnePoint(x);\n\n        double w_1 = sumOfMeanDifferences / xDifferenceOfMean;\n\n        double w_0 = meanY - (w_1) * meanX;\n\n        //double w_1=(n*sumOfProducts(x,y) - sum(x) * sum(y))/(n*sumOfSquares(x) - Math.pow(sum(x),2));\n\n        //\tdouble w_0=(sum(y) - (w_1 * sum(x)))/n;\n\n        double[] ret = new double[vector.size()];\n        ret[0] = w_0;\n        ret[1] = w_1;\n\n        return ret;\n    }"}, {"instruction": "Attach a {@link ConfigurationPropertySource} support to the specified\n{@link Environment}. Adapts each {@link PropertySource} managed by the environment\nto a {@link ConfigurationPropertySource} and allows classic\n{@link PropertySourcesPropertyResolver} calls to resolve using\n{@link ConfigurationPropertyName configuration property names}.\n<p>\nThe attached resolver will dynamically track any additions or removals from the\nunderlying {@link Environment} property sources.\n@param environment the source environment (must be an instance of\n{@link ConfigurableEnvironment})\n@see #get(Environment)", "input": "Java", "output": "public static void attach(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tPropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached != null && attached.getSource() != sources) {\n\t\t\tsources.remove(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\t\tattached = null;\n\t\t}\n\t\tif (attached == null) {\n\t\t\tsources.addFirst(new ConfigurationPropertySourcesPropertySource(\n\t\t\t\t\tATTACHED_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew SpringConfigurationPropertySources(sources)));\n\t\t}\n\t}"}, {"instruction": "Checks if the constant pool contains a reference to a given field, either for writing or reading.\n\n@param className must be provided JVM-style, such as {@code java/lang/String}", "input": "Java", "output": "public boolean usesField(String className, String fieldName) {\n\t\tint classIndex = findClass(className);\n\t\tif (classIndex == NOT_FOUND) return false;\n\t\tint fieldNameIndex = findUtf8(fieldName);\n\t\tif (fieldNameIndex == NOT_FOUND) return false;\n\t\t\n\t\tfor (int i = 1; i < maxPoolSize; i++) {\n\t\t\tif (types[i] == FIELD && readValue(offsets[i]) == classIndex) {\n\t\t\t\tint nameAndTypeIndex = readValue(offsets[i] + 2);\n\t\t\t\tif (readValue(offsets[nameAndTypeIndex]) == fieldNameIndex) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"}, {"instruction": "\u67e5\u8be2\u5168\u90e8\u7ed3\u679c\n\n@param ms\n@return", "input": "Java", "output": "public String selectAll(MappedStatement ms) {\n        final Class<?> entityClass = getEntityClass(ms);\n        //\u4fee\u6539\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a\u5b9e\u4f53\u7c7b\u578b\n        setResultType(ms, entityClass);\n        StringBuilder sql = new StringBuilder();\n        sql.append(SqlHelper.selectAllColumns(entityClass));\n        sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));\n\n        // \u903b\u8f91\u5220\u9664\u7684\u672a\u5220\u9664\u67e5\u8be2\u6761\u4ef6\n        sql.append(\"<where>\");\n        sql.append(SqlHelper.whereLogicDelete(entityClass, false));\n        sql.append(\"</where>\");\n\n        sql.append(SqlHelper.orderByDefault(entityClass));\n        return sql.toString();\n    }"}, {"instruction": "To enable \"run out of the box for testing\".", "input": "Java", "output": "private static String[] prepareDefaultConf() throws IOException {\n    final File templateFolder = new File(\"test/local-conf-templates\");\n    final File localConfFolder = new File(\"local/conf\");\n    if (!localConfFolder.exists()) {\n      FileUtils.copyDirectory(templateFolder, localConfFolder.getParentFile());\n      log.info(\"Copied local conf templates from \" + templateFolder.getAbsolutePath());\n    }\n    log.info(\"Using conf at \" + localConfFolder.getAbsolutePath());\n    return new String[]{\"-conf\", \"local/conf\"};\n  }"}, {"instruction": "Sends the given response and status code to the given channel.\n\n@param channelHandlerContext identifying the open channel\n@param httpRequest originating http request\n@param response which should be sent\n@param statusCode of the message to send\n@param headers additional header values\n@param <P> type of the response", "input": "Java", "output": "public static <P extends ResponseBody> CompletableFuture<Void> sendResponse(\n\t\t\tChannelHandlerContext channelHandlerContext,\n\t\t\tHttpRequest httpRequest,\n\t\t\tP response,\n\t\t\tHttpResponseStatus statusCode,\n\t\t\tMap<String, String> headers) {\n\t\tStringWriter sw = new StringWriter();\n\t\ttry {\n\t\t\tmapper.writeValue(sw, response);\n\t\t} catch (IOException ioe) {\n\t\t\tLOG.error(\"Internal server error. Could not map response to JSON.\", ioe);\n\t\t\treturn sendErrorResponse(\n\t\t\t\tchannelHandlerContext,\n\t\t\t\thttpRequest,\n\t\t\t\tnew ErrorResponseBody(\"Internal server error. Could not map response to JSON.\"),\n\t\t\t\tHttpResponseStatus.INTERNAL_SERVER_ERROR,\n\t\t\t\theaders);\n\t\t}\n\t\treturn sendResponse(\n\t\t\tchannelHandlerContext,\n\t\t\thttpRequest,\n\t\t\tsw.toString(),\n\t\t\tstatusCode,\n\t\t\theaders);\n\t}"}, {"instruction": "Resolves the default request factory.\n\n@return The default request factory.", "input": "Java", "output": "static HttpResponseFactory resolveDefaultResponseFactory() {\n        Optional<ServiceDefinition<HttpResponseFactory>> definition = SoftServiceLoader.load(HttpResponseFactory.class)\n                .firstOr(\"io.micronaut.http.server.netty.NettyHttpResponseFactory\", HttpResponseFactory.class.getClassLoader());\n\n        if (definition.isPresent()) {\n            ServiceDefinition<HttpResponseFactory> sd = definition.get();\n            try {\n                return sd.load();\n            } catch (Throwable e) {\n                LOG.warn(\"Unable to load default response factory for definition [\" + definition + \"]: \" + e.getMessage(), e);\n            }\n        }\n        return new SimpleHttpResponseFactory();\n    }"}, {"instruction": "Construct a matrix from a copy of a 2-D array.\n\n@param A Two-dimensional array of doubles.\n@throws IllegalArgumentException All rows must have the same length", "input": "Java", "output": "public static Matrix constructWithCopy(double[][] A)\n    {\n        int m = A.length;\n        int n = A[0].length;\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            if (A[i].length != n)\n            {\n                throw new IllegalArgumentException\n                        (\"All rows must have the same length.\");\n            }\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }"}, {"instruction": "Sets the access control policy on the specified resource. Replaces any existing policy.\n\n<p>Sample code:\n\n<pre><code>\ntry (SubnetworkClient subnetworkClient = SubnetworkClient.create()) {\nProjectRegionSubnetworkResourceName resource = ProjectRegionSubnetworkResourceName.of(\"[PROJECT]\", \"[REGION]\", \"[RESOURCE]\");\nRegionSetPolicyRequest regionSetPolicyRequestResource = RegionSetPolicyRequest.newBuilder().build();\nPolicy response = subnetworkClient.setIamPolicySubnetwork(resource.toString(), regionSetPolicyRequestResource);\n}\n</code></pre>\n\n@param resource Name or id of the resource for this request.\n@param regionSetPolicyRequestResource\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Policy setIamPolicySubnetwork(\n      String resource, RegionSetPolicyRequest regionSetPolicyRequestResource) {\n\n    SetIamPolicySubnetworkHttpRequest request =\n        SetIamPolicySubnetworkHttpRequest.newBuilder()\n            .setResource(resource)\n            .setRegionSetPolicyRequestResource(regionSetPolicyRequestResource)\n            .build();\n    return setIamPolicySubnetwork(request);\n  }"}, {"instruction": "Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be\napplied to the {@link RestTemplate}. Customizers are applied in the order that they\nwere added after builder configuration has been applied. Setting this value will\nreplace any previously configured customizers.\n@param restTemplateCustomizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(RestTemplateCustomizer...)", "input": "Java", "output": "public RestTemplateBuilder customizers(\n\t\t\tCollection<? extends RestTemplateCustomizer> restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tCollections.unmodifiableSet(new LinkedHashSet<RestTemplateCustomizer>(\n\t\t\t\t\t\trestTemplateCustomizers)),\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}"}, {"instruction": "This method checks for something somewhere\n\n@param operands", "input": "Java", "output": "public PenaltyCause[] processOperands(INDArray... operands) {\n        if (operands == null)\n            return new PenaltyCause[] {NONE};\n\n        List<PenaltyCause> causes = new ArrayList<>();\n        for (int e = 0; e < operands.length - 1; e++) {\n            if (operands[e] == null && operands[e + 1] == null)\n                continue;\n\n            PenaltyCause lc[] = processOperands(operands[e], operands[e + 1]);\n\n            for (PenaltyCause cause : lc) {\n                if (cause != NONE && !causes.contains(cause))\n                    causes.add(cause);\n            }\n        }\n        if (causes.isEmpty())\n            causes.add(NONE);\n\n        return causes.toArray(new PenaltyCause[0]);\n    }"}, {"instruction": "Root method that branches for different implementations of {@link KeyedStateHandle}.", "input": "Java", "output": "@Override\n\tpublic RocksDBRestoreResult restore() throws Exception {\n\n\t\tif (restoreStateHandles == null || restoreStateHandles.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfinal KeyedStateHandle theFirstStateHandle = restoreStateHandles.iterator().next();\n\n\t\tboolean isRescaling = (restoreStateHandles.size() > 1 ||\n\t\t\t!Objects.equals(theFirstStateHandle.getKeyGroupRange(), keyGroupRange));\n\n\t\tif (isRescaling) {\n\t\t\trestoreWithRescaling(restoreStateHandles);\n\t\t} else {\n\t\t\trestoreWithoutRescaling(theFirstStateHandle);\n\t\t}\n\t\treturn new RocksDBRestoreResult(this.db, defaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor, lastCompletedCheckpointId, backendUID, restoredSstFiles);\n\t}"}, {"instruction": "Adding the browser described by the capability, automatically finding out what platform the\nnode is launched from\n\n@param cap       describing the browser\n@param instances number of times this browser can be started on the node.", "input": "Java", "output": "public void addBrowser(DesiredCapabilities cap, int instances) {\n    String s = cap.getBrowserName();\n    if (s == null || \"\".equals(s)) {\n      throw new InvalidParameterException(cap + \" does seems to be a valid browser.\");\n    }\n    if (cap.getPlatform() == null) {\n      cap.setPlatform(Platform.getCurrent());\n    }\n    cap.setCapability(RegistrationRequest.MAX_INSTANCES, instances);\n    registrationRequest.getConfiguration().capabilities.add(cap);\n    registrationRequest.getConfiguration().fixUpCapabilities();\n  }"}, {"instruction": "Allocates a shared slot on this TaskManager instance. This method returns {@code null}, if no slot\nis available at the moment. The shared slot will be managed by the given  SlotSharingGroupAssignment.\n\n@param sharingGroupAssignment The assignment group that manages this shared slot.\n\n@return A shared slot that represents a task slot on this TaskManager instance and can hold other\n(shared) slots, or null, if the TaskManager instance has no more slots available.\n\n@throws InstanceDiedException Thrown if the instance is no longer alive by the time the slot is allocated.", "input": "Java", "output": "public SharedSlot allocateSharedSlot(SlotSharingGroupAssignment sharingGroupAssignment)\n\t\t\tthrows InstanceDiedException {\n\n\t\tsynchronized (instanceLock) {\n\t\t\tif (isDead) {\n\t\t\t\tthrow new InstanceDiedException(this);\n\t\t\t}\n\n\t\t\tInteger nextSlot = availableSlots.poll();\n\t\t\tif (nextSlot == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSharedSlot slot = new SharedSlot(\n\t\t\t\t\tthis,\n\t\t\t\t\tlocation,\n\t\t\t\t\tnextSlot,\n\t\t\t\t\ttaskManagerGateway,\n\t\t\t\t\tsharingGroupAssignment);\n\t\t\t\tallocatedSlots.add(slot);\n\t\t\t\treturn slot;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Tries to repair the lattice by creating and adding an additional Viterbi node to the RIGHT of the newly\ninserted user dictionary entry by using the substring of the node in the lattice that overlaps the least\n@param lattice\n@param nodeEndIndex", "input": "Java", "output": "private void repairBrokenLatticeAfter(ViterbiLattice lattice, int nodeEndIndex) {\n        ViterbiNode[][] nodeEndIndices = lattice.getEndIndexArr();\n\n        for (int endIndex = nodeEndIndex + 1; endIndex < nodeEndIndices.length; endIndex++) {\n            if (nodeEndIndices[endIndex] != null) {\n                ViterbiNode glueBase = findGlueNodeCandidate(nodeEndIndex, nodeEndIndices[endIndex], endIndex);\n                if (glueBase != null) {\n                    int delta = endIndex - nodeEndIndex;\n                    String glueBaseSurface = glueBase.getSurface();\n                    String surface = glueBaseSurface.substring(glueBaseSurface.length() - delta);\n                    ViterbiNode glueNode = createGlueNode(nodeEndIndex, glueBase, surface);\n                    lattice.addNode(glueNode, nodeEndIndex, nodeEndIndex + glueNode.getSurface().length());\n                    return;\n                }\n            }\n        }\n    }"}, {"instruction": "<p>Appends to the <code>builder</code> the comparison of\ntwo <code>Object</code>s.</p>\n\n<ol>\n<li>Check if <code>lhs == rhs</code></li>\n<li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\na <code>null</code> object is less than a non-<code>null</code> object</li>\n<li>Check the object contents</li>\n</ol>\n\n<p>If <code>lhs</code> is an array, array comparison methods will be used.\nOtherwise <code>comparator</code> will be used to compare the objects.\nIf <code>comparator</code> is <code>null</code>, <code>lhs</code> must\nimplement {@link Comparable} instead.</p>\n\n@param lhs  left-hand object\n@param rhs  right-hand object\n@param comparator  <code>Comparator</code> used to compare the objects,\n<code>null</code> means treat lhs as <code>Comparable</code>\n@return this - used to chain append calls\n@throws ClassCastException  if <code>rhs</code> is not assignment-compatible\nwith <code>lhs</code>\n@since 2.0", "input": "Java", "output": "public CompareToBuilder append(final Object lhs, final Object rhs, final Comparator<?> comparator) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.getClass().isArray()) {\n            // switch on type of array, to dispatch to the correct handler\n            // handles multi dimensional arrays\n            // throws a ClassCastException if rhs is not the correct array type\n            if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            }"}, {"instruction": "Generic method to create an input data stream with {@link org.apache.flink.api.common.io.InputFormat}.\n\n<p>The data stream is typed to the given TypeInformation. This method is intended for input formats\nwhere the return type cannot be determined by reflection analysis, and that do not implement the\n{@link org.apache.flink.api.java.typeutils.ResultTypeQueryable} interface.\n\n<p><b>NOTES ON CHECKPOINTING: </b> In the case of a {@link FileInputFormat}, the source\n(which executes the {@link ContinuousFileMonitoringFunction}) monitors the path, creates the\n{@link org.apache.flink.core.fs.FileInputSplit FileInputSplits} to be processed, forwards\nthem to the downstream {@link ContinuousFileReaderOperator} to read the actual data, and exits,\nwithout waiting for the readers to finish reading. This implies that no more checkpoint\nbarriers are going to be forwarded after the source exits, thus having no checkpoints.\n\n@param inputFormat\nThe input format used to create the data stream\n@param typeInfo\nThe information about the type of the output type\n@param <OUT>\nThe type of the returned data stream\n@return The data stream that represents the data created by the input format", "input": "Java", "output": "@PublicEvolving\n\tpublic <OUT> DataStreamSource<OUT> createInput(InputFormat<OUT, ?> inputFormat, TypeInformation<OUT> typeInfo) {\n\t\tDataStreamSource<OUT> source;\n\n\t\tif (inputFormat instanceof FileInputFormat) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tFileInputFormat<OUT> format = (FileInputFormat<OUT>) inputFormat;\n\n\t\t\tsource = createFileInput(format, typeInfo, \"Custom File source\",\n\t\t\t\t\tFileProcessingMode.PROCESS_ONCE, -1);\n\t\t} else {\n\t\t\tsource = createInput(inputFormat, typeInfo, \"Custom Source\");\n\t\t}\n\t\treturn source;\n\t}"}, {"instruction": "[VARIABLE \"my_second_key_name\"]", "input": "Java", "output": "public List<Entity> getMultiple(String firstKeyName, String secondKeyName) {\n    Datastore datastore = transaction.getDatastore();\n    // TODO change so that it's not necessary to hold the entities in a list for integration testing\n    // [START getMultiple]\n    KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n    Key firstKey = keyFactory.newKey(firstKeyName);\n    Key secondKey = keyFactory.newKey(secondKeyName);\n    Iterator<Entity> entitiesIterator = transaction.get(firstKey, secondKey);\n    List<Entity> entities = Lists.newArrayList();\n    while (entitiesIterator.hasNext()) {\n      Entity entity = entitiesIterator.next();\n      // do something with the entity\n      entities.add(entity);\n    }\n    transaction.commit();\n    // [END getMultiple]\n    return entities;\n  }"}, {"instruction": "This method initializes the working Panel.\n\n@return javax.swing.JScrollPane", "input": "Java", "output": "@Override\r\n\tprotected JPanel getWorkPanel() {\r\n\t\tif (mainPanel == null) {\r\n\t\t\tmainPanel = new JPanel(new BorderLayout());\r\n\r\n\t\t\ttabbedPane = new JTabbedPane();\r\n\t\t\ttabbedPane.addTab(Constant.messages.getString(\"spider.panel.tab.urls\"), getUrlsTableScrollPane());\r\n\t\t\ttabbedPane.addTab(Constant.messages.getString(\"spider.panel.tab.addednodes\"), getAddedNodesTableScrollPane());\r\n\t\t\ttabbedPane.addTab(Constant.messages.getString(\"spider.panel.tab.messages\"), getMessagesTableScrollPanel());\r\n\t\t\ttabbedPane.setSelectedIndex(0);\r\n\r\n\t\t\tmainPanel.add(tabbedPane);\r\n\t\t}\r\n\t\treturn mainPanel;\r\n\t}"}, {"instruction": "Adds multiple SegmentChunks.\n\n@param segmentChunks The SegmentChunks to add. These SegmentChunks must be in continuity of any existing SegmentChunks.", "input": "Java", "output": "synchronized void addChunks(List<SegmentChunk> segmentChunks) {\n        Preconditions.checkState(!this.sealed, \"Cannot add SegmentChunks for a Sealed Handle.\");\n        long expectedOffset = 0;\n        if (this.segmentChunks.size() > 0) {\n            expectedOffset = this.segmentChunks.get(this.segmentChunks.size() - 1).getLastOffset();\n        } else if (segmentChunks.size() > 0) {\n            expectedOffset = segmentChunks.get(0).getStartOffset();\n        }\n\n        for (SegmentChunk s : segmentChunks) {\n            Preconditions.checkArgument(s.getStartOffset() == expectedOffset,\n                    \"Invalid SegmentChunk StartOffset. Expected %s, given %s.\", expectedOffset, s.getStartOffset());\n            expectedOffset += s.getLength();\n        }\n\n        this.segmentChunks.addAll(segmentChunks);\n        this.activeChunkHandle = null;\n    }"}, {"instruction": "Initialize the ModelBuilder, validating all arguments and preparing the\ntraining frame.  This call is expected to be overridden in the subclasses\nand each subclass will start with \"super.init();\".  This call is made\nby the front-end whenever the GUI is clicked, and needs to be fast;\nheavy-weight prep needs to wait for the trainModel() call.\n\nValidate the probs.", "input": "Java", "output": "@Override public void init(boolean expensive) {\n    super.init(expensive);\n    for( double p : _parms._probs )\n      if( p < 0.0 || p > 1.0 )\n        error(\"_probs\",\"Probabilities must be between 0 and 1\");\n    _ncols = train().numCols()-numSpecialCols(); //offset/weights/nfold - should only ever be weights\n    if ( numSpecialCols() == 1 && _weights == null)\n      throw new IllegalArgumentException(\"The only special Vec that is supported for Quantiles is observation weights.\");\n    if ( numSpecialCols() >1 ) throw new IllegalArgumentException(\"Cannot handle more than 1 special vec (weights)\");\n  }"}, {"instruction": "Computes a visual representation of the approximate histogram with a given number of equal-sized bins\n\n@param size number of equal-sized bins to divide the histogram into\n\n@return visual representation of the histogram", "input": "Java", "output": "public Histogram toHistogram(int size)\n  {\n    Preconditions.checkArgument(size > 1, \"histogram size must be greater than 1\");\n\n    float[] breaks = new float[size + 1];\n    float delta = (max - min) / (size - 1);\n    breaks[0] = min - delta;\n    for (int i = 1; i < breaks.length - 1; ++i) {\n      breaks[i] = breaks[i - 1] + delta;\n    }\n    breaks[breaks.length - 1] = max;\n    return toHistogram(breaks);\n  }"}, {"instruction": "The Uri Path.\n\n@return the uri path.", "input": "Java", "output": "public String path() {\n    /* build the fully qualified url with all query parameters */\n    StringBuilder path = new StringBuilder();\n    if (this.target != null) {\n      path.append(this.target);\n    }\n    if (this.uriTemplate != null) {\n      path.append(this.uriTemplate.toString());\n    }\n    if (path.length() == 0) {\n      /* no path indicates the root uri */\n      path.append(\"/\");\n    }\n    return path.toString();\n\n  }"}, {"instruction": "Process the queue of commands and dispatch them to the stream. This method is only\ncalled in the event loop", "input": "Java", "output": "private void flush() {\n    try {\n      QueuedCommand cmd;\n      int i = 0;\n      boolean flushedOnce = false;\n      while ((cmd = queue.poll()) != null) {\n        cmd.run(channel);\n        if (++i == DEQUE_CHUNK_SIZE) {\n          i = 0;\n          // Flush each chunk so we are releasing buffers periodically. In theory this loop\n          // might never end as new events are continuously added to the queue, if we never\n          // flushed in that case we would be guaranteed to OOM.\n          channel.flush();\n          flushedOnce = true;\n        }\n      }\n      // Must flush at least once, even if there were no writes.\n      if (i != 0 || !flushedOnce) {\n        channel.flush();\n      }\n    } finally {\n      // Mark the write as done, if the queue is non-empty after marking trigger a new write.\n      scheduled.set(false);\n      if (!queue.isEmpty()) {\n        scheduleFlush();\n      }\n    }\n  }"}, {"instruction": "/*\nReturns a unique name for the given script name", "input": "Java", "output": "private String getUniqueScriptName(String name, String ext) {\r\n\t\tif (this.getScriptImpl(name) == null) {\r\n\t\t\t// Its unique\r\n\t\t\treturn name;\r\n\t\t}\r\n\t\t// Its not unique, add a suitable index...\r\n\t\tString stub = name.substring(0, name.length() - ext.length() - 1);\r\n\t\tint index = 1;\r\n\t\tdo {\r\n\t\t\tindex++;\r\n\t\t\tname = stub + \"(\" + index + \").\" + ext;\r\n\t\t}\r\n\t\twhile (this.getScriptImpl(name) != null);\r\n\t\t\r\n\t\treturn name;\r\n\t}"}, {"instruction": "\u4fdd\u5b58\u5230\u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41\n\n@param out\n@return", "input": "Java", "output": "public boolean save(DataOutputStream out)\n    {\n        try\n        {\n            for (BaseNode node : child)\n            {\n                if (node == null)\n                {\n                    out.writeInt(0);\n                }\n                else\n                {\n                    out.writeInt(1);\n                    node.walkToSave(out);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u4fdd\u5b58\u5230\" + out + \"\u5931\u8d25\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n\n        return true;\n    }"}, {"instruction": "Track trusted multifactor authentication attribute.\n\n@param authn         the authn\n@param attributeName the attribute name", "input": "Java", "output": "public static void trackTrustedMultifactorAuthenticationAttribute(\n        final Authentication authn,\n        final String attributeName) {\n\n        val newAuthn = DefaultAuthenticationBuilder.newInstance(authn)\n            .addAttribute(attributeName, Boolean.TRUE)\n            .build();\n        LOGGER.debug(\"Updated authentication session to remember trusted multifactor record via [{}]\", attributeName);\n        authn.update(newAuthn);\n    }"}, {"instruction": "Example of getting a subscription.", "input": "Java", "output": "public Subscription getSubscription(String subscriptionId) throws Exception {\n    // [START pubsub_get_subscription]\n    try (SubscriptionAdminClient subscriptionAdminClient = SubscriptionAdminClient.create()) {\n      ProjectSubscriptionName subscriptionName =\n          ProjectSubscriptionName.of(projectId, subscriptionId);\n      Subscription subscription = subscriptionAdminClient.getSubscription(subscriptionName);\n      return subscription;\n    }\n    // [END pubsub_get_subscription]\n  }"}, {"instruction": "Add an ndarray to the storage\n\n@param array the array to add", "input": "Java", "output": "@Override\n    public void addUpdate(NDArrayMessage array) {\n        UnsafeBuffer directBuffer = (UnsafeBuffer) NDArrayMessage.toBuffer(array);\n        byte[] data = directBuffer.byteArray();\n        if (data == null) {\n            data = new byte[directBuffer.capacity()];\n            directBuffer.getBytes(0, data, 0, data.length);\n        }\n        byte[] key = ByteBuffer.allocate(4).putInt(size).array();\n        try {\n            db.put(key, data);\n        } catch (RocksDBException e) {\n            throw new RuntimeException(e);\n        }\n\n        size++;\n\n    }"}, {"instruction": "\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u76f8\u5dee\u6708\u6570<br>\n\u5728\u975e\u91cd\u7f6e\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8d77\u59cb\u65e5\u671f\u7684\u5929\u5c0f\u4e8e\u7ed3\u675f\u65e5\u671f\u7684\u5929\uff0c\u6708\u6570\u8981\u5c11\u7b971\uff08\u4e0d\u8db31\u4e2a\u6708\uff09\n\n@param isReset \u662f\u5426\u91cd\u7f6e\u65f6\u95f4\u4e3a\u8d77\u59cb\u65f6\u95f4\uff08\u91cd\u7f6e\u5929\u65f6\u5206\u79d2\uff09\n@return \u76f8\u5dee\u6708\u6570\n@since 3.0.8", "input": "Java", "output": "public long betweenMonth(boolean isReset) {\r\n\t\tfinal Calendar beginCal = DateUtil.calendar(begin);\r\n\t\tfinal Calendar endCal = DateUtil.calendar(end);\r\n\r\n\t\tfinal int betweenYear = endCal.get(Calendar.YEAR) - beginCal.get(Calendar.YEAR);\r\n\t\tfinal int betweenMonthOfYear = endCal.get(Calendar.MONTH) - beginCal.get(Calendar.MONTH);\r\n\r\n\t\tint result = betweenYear * 12 + betweenMonthOfYear;\r\n\t\tif (false == isReset) {\r\n\t\t\tendCal.set(Calendar.YEAR, beginCal.get(Calendar.YEAR));\r\n\t\t\tendCal.set(Calendar.MONTH, beginCal.get(Calendar.MONTH));\r\n\t\t\tlong between = endCal.getTimeInMillis() - beginCal.getTimeInMillis();\r\n\t\t\tif (between < 0) {\r\n\t\t\t\treturn result - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}"}, {"instruction": "Get layer output type.\n\n@param inputType Array of InputTypes\n@return output type as InputType\n@throws InvalidKerasConfigurationException Invalid Keras config", "input": "Java", "output": "public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                    \"Keras PReLU layer accepts only one input (received \" + inputType.length + \")\");\n        InputType inType = inputType[0];\n\n        // Dynamically infer input shape of PReLU layer from input type\n        PReLULayer shapedLayer = (PReLULayer) this.layer;\n        shapedLayer.setInputShape(inType.getShape());\n        this.layer = shapedLayer;\n\n        return this.getPReLULayer().getOutputType(-1, inputType[0]);\n    }"}, {"instruction": "Renew disabled data source names.\n\n@param disabledStateChangedEvent disabled state changed event", "input": "Java", "output": "@Subscribe\n    public synchronized void renew(final DisabledStateChangedEvent disabledStateChangedEvent) {\n        OrchestrationShardingSchema shardingSchema = disabledStateChangedEvent.getShardingSchema();\n        if (getName().equals(shardingSchema.getSchemaName())) {\n            for (MasterSlaveRule each : shardingRule.getMasterSlaveRules()) {\n                ((OrchestrationMasterSlaveRule) each).updateDisabledDataSourceNames(shardingSchema.getDataSourceName(), disabledStateChangedEvent.isDisabled());\n            }\n        }\n    }"}, {"instruction": "[VARIABLE \"my_dataset\"]", "input": "Java", "output": "public Sink updateSink(String sinkName, String datasetName) {\n    // [START logging_update_sink]\n    SinkInfo sinkInfo =\n        SinkInfo.newBuilder(sinkName, DatasetDestination.of(datasetName))\n            .setVersionFormat(SinkInfo.VersionFormat.V2)\n            .setFilter(\"severity>=ERROR\")\n            .build();\n    Sink sink = logging.update(sinkInfo);\n    // [END logging_update_sink]\n    return sink;\n  }"}, {"instruction": "Creates a projection list that removes given columns.\n\n<p><b>NOTE:</b> Resulting expression are still unresolved.\n\n@param inputFields names of current columns\n@param dropExpressions columns to remove\n@return projection expressions", "input": "Java", "output": "public static List<Expression> dropFields(List<String> inputFields, List<Expression> dropExpressions) {\n\t\tSet<String> columnsToDrop = dropExpressions.stream()\n\t\t\t.map(expr -> expr.accept(dropColumnsExtractor))\n\t\t\t.collect(Collectors.toSet());\n\n\t\tcolumnsToDrop.forEach(c -> {\n\t\t\tif (!inputFields.contains(c)) {\n\t\t\t\tthrow new ValidationException(format(\"Field %s does not exist in source table\", c));\n\t\t\t}\n\t\t});\n\n\t\treturn inputFields.stream()\n\t\t\t.filter(oldName -> !columnsToDrop.contains(oldName))\n\t\t\t.map(UnresolvedReferenceExpression::new)\n\t\t\t.collect(Collectors.toList());\n\t}"}, {"instruction": "Extracts Zipkin metrics to provide backward compatibility", "input": "Java", "output": "@Get(\"/metrics\")\n  @ProducesJson\n  public ObjectNode fetchMetricsFromMicrometer() {\n    ObjectNode metricsJson = factory.objectNode();\n    // Get the Zipkin Custom meters for constructing the Metrics endpoint\n    for (Meter meter : meterRegistry.getMeters()) {\n      String name = meter.getId().getName();\n      if (!name.startsWith(\"zipkin_collector\")) continue;\n      String transport = meter.getId().getTag(\"transport\");\n      if (transport == null) continue;\n      switch (meter.getId().getType()) {\n        case COUNTER:\n          metricsJson.put(\"counter.\" + name + \".\" + transport,\n            ((Counter) meter).count());\n          continue;\n        case GAUGE:\n          metricsJson.put(\"gauge.\" + name + \".\" + transport,\n            ((Gauge) meter).value());\n      }\n    }\n    return metricsJson;\n  }"}, {"instruction": "The column size for this type.\nFor numeric data this is the maximum precision.\nFor character data this is the length in characters.\nFor datetime types this is the length in characters of the String representation\n(assuming the maximum allowed precision of the fractional seconds component).\nFor binary data this is the length in bytes.\nNull is returned for data types where the column size is not applicable.", "input": "Java", "output": "public Integer getColumnSize() {\n    if (type.isNumericType()) {\n      return getPrecision();\n    }\n    switch (type) {\n    case STRING_TYPE:\n    case BINARY_TYPE:\n      return Integer.MAX_VALUE;\n    case CHAR_TYPE:\n    case VARCHAR_TYPE:\n      return typeQualifiers.getCharacterMaximumLength();\n    case DATE_TYPE:\n      return 10;\n    case TIMESTAMP_TYPE:\n      return 29;\n    default:\n      return null;\n    }\n  }"}, {"instruction": "\u5904\u7406PlainSelect\u7c7b\u578b\u7684selectBody\n\n@param plainSelect", "input": "Java", "output": "public void processPlainSelect(PlainSelect plainSelect) {\n        if (!orderByHashParameters(plainSelect.getOrderByElements())) {\n            plainSelect.setOrderByElements(null);\n        }\n        if (plainSelect.getFromItem() != null) {\n            processFromItem(plainSelect.getFromItem());\n        }\n        if (plainSelect.getJoins() != null && plainSelect.getJoins().size() > 0) {\n            List<Join> joins = plainSelect.getJoins();\n            for (Join join : joins) {\n                if (join.getRightItem() != null) {\n                    processFromItem(join.getRightItem());\n                }\n            }\n        }\n    }"}, {"instruction": "Generates the files for the documents relation. The entries apply the\nfollowing format: <br />\n<code>URL | Content</code>\n\n@param noDocs\nNumber of entries for the documents relation\n@param filterKeyWords\nA list of keywords that should be contained\n@param words\nA list of words to fill the entries\n@param path\nOutput path for the documents relation", "input": "Java", "output": "private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path) {\n\n\t\tRandom rand = new Random(Calendar.getInstance().getTimeInMillis());\n\n\t\ttry (BufferedWriter fw = new BufferedWriter(new FileWriter(path))) {\n\t\t\tfor (int i = 0; i < noDocs; i++) {\n\n\t\t\t\tint wordsInDoc = rand.nextInt(40) + 10;\n\t\t\t\t// URL\n\t\t\t\tStringBuilder doc = new StringBuilder(\"url_\" + i + \"|\");\n\t\t\t\tfor (int j = 0; j < wordsInDoc; j++) {\n\t\t\t\t\tif (rand.nextDouble() > 0.9) {\n\t\t\t\t\t\t// Approx. every 10th word is a keyword\n\t\t\t\t\t\tdoc.append(filterKeyWords[rand.nextInt(filterKeyWords.length)] + \" \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Fills up the docs file(s) with random words\n\t\t\t\t\t\tdoc.append(words[rand.nextInt(words.length)] + \" \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdoc.append(\"|\\n\");\n\n\t\t\t\tfw.write(doc.toString());\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}"}, {"instruction": "Specifies the weigher to use in determining the weight of entries. Entry weight is taken into\nconsideration by {@link #maximumWeight(long)} when determining which entries to evict, and use\nof this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling\n{@link #build}. Weights are measured and recorded when entries are inserted into or updated in\nthe cache, and are thus effectively static during the lifetime of a cache entry.\n<p>\nWhen the weight of an entry is zero it will not be considered for size-based eviction (though\nit still may be evicted by other means).\n<p>\n<b>Important note:</b> Instead of returning <em>this</em> as a {@code Caffeine} instance, this\nmethod returns {@code Caffeine<K1, V1>}. From this point on, either the original reference or\nthe returned reference may be used to complete configuration and build the cache, but only the\n\"generic\" one is type-safe. That is, it will properly prevent you from building caches whose\nkey or value types are incompatible with the types accepted by the weigher already provided;\nthe {@code Caffeine} type cannot do this. For best results, simply use the standard\nmethod-chaining idiom, as illustrated in the documentation at top, configuring a\n{@code Caffeine} and building your {@link Cache} all in a single statement.\n<p>\n<b>Warning:</b> if you ignore the above advice, and use this {@code Caffeine} to build a cache\nwhose key or value type is incompatible with the weigher, you will likely experience a\n{@link ClassCastException} at some <i>undefined</i> point in the future.\n\n@param weigher the weigher to use in calculating the weight of cache entries\n@param <K1> key type of the weigher\n@param <V1> value type of the weigher\n@return the cache builder reference that should be used instead of {@code this} for any\nremaining configuration and cache building\n@throws IllegalStateException if a weigher was already set", "input": "Java", "output": "@NonNull\n  public <K1 extends K, V1 extends V> Caffeine<K1, V1> weigher(\n      @NonNull Weigher<? super K1, ? super V1> weigher) {\n    requireNonNull(weigher);\n    requireState(this.weigher == null, \"weigher was already set to %s\", this.weigher);\n    requireState(!strictParsing || this.maximumSize == UNSET_INT,\n        \"weigher can not be combined with maximum size\", this.maximumSize);\n\n    @SuppressWarnings(\"unchecked\")\n    Caffeine<K1, V1> self = (Caffeine<K1, V1>) this;\n    self.weigher = weigher;\n    return self;\n  }"}, {"instruction": "\u62f7\u8d1d\u6d41\n\n@param in \u8f93\u5165\u6d41\n@param out \u8f93\u51fa\u6d41\n@param bufferSize \u7f13\u5b58\u5927\u5c0f\n@param streamProgress \u8fdb\u5ea6\u6761\n@return \u4f20\u8f93\u7684byte\u6570\n@throws IORuntimeException IO\u5f02\u5e38", "input": "Java", "output": "public static long copy(InputStream in, OutputStream out, int bufferSize, StreamProgress streamProgress) throws IORuntimeException {\r\n\t\tAssert.notNull(in, \"InputStream is null !\");\r\n\t\tAssert.notNull(out, \"OutputStream is null !\");\r\n\t\tif (bufferSize <= 0) {\r\n\t\t\tbufferSize = DEFAULT_BUFFER_SIZE;\r\n\t\t}\r\n\r\n\t\tbyte[] buffer = new byte[bufferSize];\r\n\t\tif (null != streamProgress) {\r\n\t\t\tstreamProgress.start();\r\n\t\t}\r\n\t\tlong size = 0;\r\n\t\ttry {\r\n\t\t\tfor (int readSize = -1; (readSize = in.read(buffer)) != EOF;) {\r\n\t\t\t\tout.write(buffer, 0, readSize);\r\n\t\t\t\tsize += readSize;\r\n\t\t\t\tout.flush();\r\n\t\t\t\tif (null != streamProgress) {\r\n\t\t\t\t\tstreamProgress.progress(size);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new IORuntimeException(e);\r\n\t\t}\r\n\t\tif (null != streamProgress) {\r\n\t\t\tstreamProgress.finish();\r\n\t\t}\r\n\t\treturn size;\r\n\t}"}, {"instruction": "This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that\nthe configuration parameters {@link #transactionTimeout} and\n{@link #ignoreFailuresAfterTransactionTimeout} are respected.", "input": "Java", "output": "private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {\n\t\ttry {\n\t\t\tlogWarningIfTimeoutAlmostReached(transactionHolder);\n\t\t\trecoverAndCommit(transactionHolder.handle);\n\t\t} catch (final Exception e) {\n\t\t\tfinal long elapsedTime = clock.millis() - transactionHolder.transactionStartTime;\n\t\t\tif (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {\n\t\t\t\tLOG.error(\"Error while committing transaction {}. \" +\n\t\t\t\t\t\t\"Transaction has been open for longer than the transaction timeout ({}).\" +\n\t\t\t\t\t\t\"Commit will not be attempted again. Data loss might have occurred.\",\n\t\t\t\t\ttransactionHolder.handle, transactionTimeout, e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Determines whether the given ByteArraySegment represents an Index Page\n\n@param pageContents The ByteArraySegment to check.\n@return True if Index Page, False if Leaf page.\n@throws IllegalDataFormatException If the given contents is not a valid BTreePage format.", "input": "Java", "output": "static boolean isIndexPage(@NonNull ByteArraySegment pageContents) {\n        // Check ID match.\n        int headerId = BitConverter.readInt(pageContents, ID_OFFSET);\n        int footerId = BitConverter.readInt(pageContents, pageContents.getLength() - FOOTER_LENGTH);\n        if (headerId != footerId) {\n            throw new IllegalDataFormatException(\"Invalid Page Format (id mismatch). HeaderId=%s, FooterId=%s.\", headerId, footerId);\n        }\n\n        int flags = pageContents.get(FLAGS_OFFSET);\n        return (flags & FLAG_INDEX_PAGE) == FLAG_INDEX_PAGE;\n    }"}, {"instruction": "Should encrypt token for service?\n\n@param svc the svc\n@return the boolean", "input": "Java", "output": "@Override\n    protected boolean shouldEncryptTokenFor(final OidcRegisteredService svc) {\n        if (AlgorithmIdentifiers.NONE.equalsIgnoreCase(svc.getIdTokenEncryptionAlg())) {\n            LOGGER.warn(\"ID token encryption algorithm is set to none for [{}] and ID token will not be encrypted\", svc.getServiceId());\n            return false;\n        }\n        return svc.isEncryptIdToken() && StringUtils.isNotBlank(svc.getIdTokenEncryptionAlg()) && StringUtils.isNotBlank(svc.getIdTokenEncryptionEncoding());\n    }"}, {"instruction": "This method adds specified SequenceElement to vocabulary\n\n@param element the word to add", "input": "Java", "output": "@Override\n    public boolean addToken(T element) {\n        boolean ret = false;\n        T oldElement = vocabulary.putIfAbsent(element.getStorageId(), element);\n        if (oldElement == null) {\n            //putIfAbsent added our element\n            if (element.getLabel() != null) {\n                extendedVocabulary.put(element.getLabel(), element);\n            }\n            oldElement = element;\n            ret = true;\n        } else {\n            oldElement.incrementSequencesCount(element.getSequencesCount());\n            oldElement.increaseElementFrequency((int) element.getElementFrequency());\n        }\n        totalWordCount.addAndGet((long) oldElement.getElementFrequency());\n        return ret;\n    }"}, {"instruction": "Resolve all of the type arguments for the given super type from the given type.\n\n@param type      The type to resolve from\n@param superTypeToResolve The suepr type to resolve from\n@return The type arguments to the interface", "input": "Java", "output": "public static Class[] resolveSuperTypeGenericArguments(Class<?> type, Class<?> superTypeToResolve) {\n        Type supertype = type.getGenericSuperclass();\n        Class<?> superclass = type.getSuperclass();\n        while (superclass != null && superclass != Object.class) {\n            if (supertype instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType) supertype;\n                if (pt.getRawType() == superTypeToResolve) {\n                    return resolveTypeArguments(supertype);\n                }\n            }\n\n            supertype = superclass.getGenericSuperclass();\n            superclass = superclass.getSuperclass();\n        }\n        return ReflectionUtils.EMPTY_CLASS_ARRAY;\n    }"}, {"instruction": "Sets the maintenance policy for a cluster.\n\n<p>Sample code:\n\n<pre><code>\ntry (ClusterManagerClient clusterManagerClient = ClusterManagerClient.create()) {\nString projectId = \"\";\nString zone = \"\";\nString clusterId = \"\";\nMaintenancePolicy maintenancePolicy = MaintenancePolicy.newBuilder().build();\nOperation response = clusterManagerClient.setMaintenancePolicy(projectId, zone, clusterId, maintenancePolicy);\n}\n</code></pre>\n\n@param projectId The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).\n@param zone The name of the Google Compute Engine [zone](/compute/docs/zones#available) in\nwhich the cluster resides.\n@param clusterId The name of the cluster to update.\n@param maintenancePolicy The maintenance policy to be set for the cluster. An empty field\nclears the existing maintenance policy.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "public final Operation setMaintenancePolicy(\n      String projectId, String zone, String clusterId, MaintenancePolicy maintenancePolicy) {\n\n    SetMaintenancePolicyRequest request =\n        SetMaintenancePolicyRequest.newBuilder()\n            .setProjectId(projectId)\n            .setZone(zone)\n            .setClusterId(clusterId)\n            .setMaintenancePolicy(maintenancePolicy)\n            .build();\n    return setMaintenancePolicy(request);\n  }"}, {"instruction": "This will encode the random metadata fields, and repeatedly lookup the default other headers.", "input": "Java", "output": "@Benchmark\n  @BenchmarkMode(Mode.SampleTime)\n  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n  public ByteBuf encodeClientHeaders() throws Exception {\n    scratchBuffer.clear();\n    Http2Headers headers =\n        Utils.convertClientHeaders(metadata, scheme, defaultPath, authority, Utils.HTTP_METHOD,\n            userAgent);\n    headersEncoder.encodeHeaders(1, headers, scratchBuffer);\n    return scratchBuffer;\n  }"}, {"instruction": "Create an SDVariable with a fixed/constant value<br>\nConstants are not modified by training/backprop. See {@link VariableType} for more details.\n@param name  Name of the constant SDVariable\n@param constant Value for the constant SDVariable\n@return The created variable", "input": "Java", "output": "public SDVariable constant(String name, @NonNull INDArray constant){\n        Preconditions.checkState(!variables.containsKey(name), \"Variable with name \\\"%s\\\" already exists\", name);\n        if (name == null || name.length() < 1)\n            name = getNewVarName();\n        SDVariable v = new SDVariable(name, VariableType.CONSTANT, this, constant.shape(), constant.dataType(), null);\n        variables.put(name, Variable.builder().name(name).variable(v).build());\n        constantArrays.put(name, new DeviceLocalNDArray(constant));\n        return v;\n    }"}, {"instruction": "Keep the algorithm consistent with Calcite DateTimeUtils.julianDateFloor, but here\nwe take time zone into account.", "input": "Java", "output": "public static long timestampCeil(TimeUnitRange range, long ts, TimeZone tz) {\n\t\t// assume that we are at UTC timezone, just for algorithm performance\n\t\tlong offset = tz.getOffset(ts);\n\t\tlong utcTs = ts + offset;\n\n\t\tswitch (range) {\n\t\t\tcase HOUR:\n\t\t\t\treturn ceil(utcTs, MILLIS_PER_HOUR) - offset;\n\t\t\tcase DAY:\n\t\t\t\treturn ceil(utcTs, MILLIS_PER_DAY) - offset;\n\t\t\tcase MONTH:\n\t\t\tcase YEAR:\n\t\t\tcase QUARTER:\n\t\t\t\tint days = (int) (utcTs / MILLIS_PER_DAY + EPOCH_JULIAN);\n\t\t\t\treturn julianDateFloor(range, days, false) * MILLIS_PER_DAY - offset;\n\t\t\tdefault:\n\t\t\t\t// for MINUTE and SECONDS etc...,\n\t\t\t\t// it is more effective to use arithmetic Method\n\t\t\t\tthrow new AssertionError(range);\n\t\t}\n\t}"}, {"instruction": "Load a custom class, which is provided by a configuration CUSTOM_JMX_ATTRIBUTE_PROCESSOR_PROPERTY.\n\nThis method will try to instantiate an instance of this custom class and with given properties\nas the argument in the constructor.\n\nBasically the custom class must have a constructor that takes an argument with type\nProperties.", "input": "Java", "output": "private void loadCustomJMXAttributeProcessor(final Props props) {\n    final String jmxAttributeEmitter =\n        props.get(CUSTOM_JMX_ATTRIBUTE_PROCESSOR_PROPERTY);\n    if (jmxAttributeEmitter != null) {\n      try {\n        logger.info(\"jmxAttributeEmitter: \" + jmxAttributeEmitter);\n        final Constructor<Props>[] constructors =\n            (Constructor<Props>[]) Class.forName(jmxAttributeEmitter).getConstructors();\n\n        constructors[0].newInstance(props.toProperties());\n      } catch (final Exception e) {\n        logger.error(\"Encountered error while loading and instantiating \"\n            + jmxAttributeEmitter, e);\n        throw new IllegalStateException(\n            \"Encountered error while loading and instantiating \"\n                + jmxAttributeEmitter, e);\n      }\n    } else {\n      logger.info(\"No value for property: \"\n          + CUSTOM_JMX_ATTRIBUTE_PROCESSOR_PROPERTY + \" was found\");\n    }\n  }"}, {"instruction": "and patches .resolve() on LocalDeclaration itself to just-in-time replace the 'val' vartype with the right one.", "input": "Java", "output": "public static TypeBinding skipResolveInitializerIfAlreadyCalled(Expression expr, BlockScope scope) {\n\t\tif (expr.resolvedType != null) return expr.resolvedType;\n\t\ttry {\n\t\t\treturn expr.resolveType(scope);\n\t\t} catch (NullPointerException e) {\n\t\t\treturn null;\n\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\t// This will occur internally due to for example 'val x = mth(\"X\");', where mth takes 2 arguments.\n\t\t\treturn null;\n\t\t}\n\t}"}, {"instruction": "Get the output size of a deconvolution operation for given input data. In deconvolution, we compute the inverse\nof the shape computation of a convolution.\n\n@param inputData       Input data\n@param kernel          Kernel size (height/width)\n@param strides         Strides (height/width)\n@param padding         Padding (height/width)\n@param convolutionMode Convolution mode (Same, Strict, Truncate)\n@param dilation        Kernel dilation (height/width)\n@return Output size: int[2] with output height/width", "input": "Java", "output": "public static int[] getDeconvolutionOutputSize(INDArray inputData, int[] kernel, int[] strides, int[] padding,\n                                                   ConvolutionMode convolutionMode, int[] dilation) {\n\n        // FIXME: int cast\n        int hIn = (int) inputData.size(2);\n        int wIn = (int) inputData.size(3);\n        int[] eKernel = effectiveKernelSize(kernel, dilation);\n\n        if (convolutionMode == ConvolutionMode.Same) {\n            int hOut = strides[0] * hIn;\n            int wOut = strides[1] * wIn;\n            return new int[]{hOut, wOut};\n        }\n\n        int hOut = strides[0] * (hIn - 1) + eKernel[0] - 2 * padding[0];\n        int wOut = strides[1] * (wIn - 1) + eKernel[1] - 2 * padding[1];\n\n        return new int[]{hOut, wOut};\n    }"}, {"instruction": "Indicates that any modifications to the given PageWrapper have completed.\n\n@param page The PageWrapper that has been completed. This instance's offset will be adjusted to the current value\nof getIndexLength(), and the stored index length will be incremented by this PageWrapper's length.", "input": "Java", "output": "synchronized void complete(PageWrapper page) {\n        Preconditions.checkArgument(this.pageByOffset.containsKey(page.getOffset()), \"Given page is not registered.\");\n        Preconditions.checkArgument(this.incompleteNewPageOffset == PagePointer.NO_OFFSET || this.incompleteNewPageOffset == page.getOffset(),\n                \"Not expecting this page to be completed.\");\n\n        this.incompleteNewPageOffset = PagePointer.NO_OFFSET;\n        long pageOffset = this.indexLength;\n        this.indexLength += page.getPage().getLength();\n\n        this.pageByOffset.remove(page.getOffset());\n        page.setOffset(pageOffset);\n        this.pageByOffset.put(page.getOffset(), page);\n    }"}, {"instruction": "\u83b7\u53d6\u6570\u5b57\u7c7b\u578b\u7684\u5355\u5143\u683c\u503c\n\n@param cell \u5355\u5143\u683c\n@return \u5355\u5143\u683c\u503c\uff0c\u53ef\u80fd\u4e3aLong\u3001Double\u3001Date", "input": "Java", "output": "private static Object getNumericValue(Cell cell) {\r\n\t\tfinal double value = cell.getNumericCellValue();\r\n\r\n\t\tfinal CellStyle style = cell.getCellStyle();\r\n\t\tif (null == style) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tfinal short formatIndex = style.getDataFormat();\r\n\t\t// \u5224\u65ad\u662f\u5426\u4e3a\u65e5\u671f\r\n\t\tif (isDateType(cell, formatIndex)) {\r\n\t\t\treturn DateUtil.date(cell.getDateCellValue());// \u4f7f\u7528Hutool\u7684DateTime\u5305\u88c5\r\n\t\t}\r\n\r\n\t\tfinal String format = style.getDataFormatString();\r\n\t\t// \u666e\u901a\u6570\u5b57\r\n\t\tif (null != format && format.indexOf(StrUtil.C_DOT) < 0) {\r\n\t\t\tfinal long longPart = (long) value;\r\n\t\t\tif (longPart == value) {\r\n\t\t\t\t// \u5bf9\u4e8e\u65e0\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8f6c\u4e3aLong\r\n\t\t\t\treturn longPart;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}"}, {"instruction": "Initialize field if not initialized and return the actual instance.\n\n@return Actual field instance.", "input": "Java", "output": "public FieldInitializationReport initialize() {\n        final AccessibilityChanger changer = new AccessibilityChanger();\n        changer.enableAccess(field);\n\n        try {\n            return acquireFieldInstance();\n        } catch(IllegalAccessException e) {\n            throw new MockitoException(\"Problems initializing field '\" + field.getName() + \"' of type '\" + field.getType().getSimpleName() + \"'\", e);\n        } finally {\n            changer.safelyDisableAccess(field);\n        }\n    }"}, {"instruction": "{@inheritDoc}.\n\nNote that the look up is case-insensitive.", "input": "Java", "output": "@Override public TopLevelItem getItem(String name) throws AccessDeniedException {\n        if (name==null)    return null;\n        TopLevelItem item = items.get(name);\n        if (item==null)\n            return null;\n        if (!item.hasPermission(Item.READ)) {\n            if (item.hasPermission(Item.DISCOVER)) {\n                throw new AccessDeniedException(\"Please login to access job \" + name);\n            }\n            return null;\n        }\n        return item;\n    }"}, {"instruction": "Return the number of correct predictions according to top N value. For top N = 1 (default) this is equivalent to\nthe number of correct predictions\n@return Number of correct top N predictions", "input": "Java", "output": "public int getTopNCorrectCount() {\n        if (confusion == null)\n            return 0;\n        if (topN <= 1) {\n            int nClasses = confusion().getClasses().size();\n            int countCorrect = 0;\n            for (int i = 0; i < nClasses; i++) {\n                countCorrect += confusion().getCount(i, i);\n            }\n            return countCorrect;\n        }\n        return topNCorrectCount;\n    }"}, {"instruction": "Returns true if a given context should be invoked.", "input": "Java", "output": "public boolean shouldInvoke(C context) {\n    cleanupExpiredSuppressions();\n\n    if (cache.containsKey(context)) return false;\n\n    Suppression<C> suppression = new Suppression<>(ticker, context, ticker.read() + ttlNanos);\n\n    if (cache.putIfAbsent(context, suppression) != null) return false; // lost race\n\n    suppressions.offer(suppression);\n\n    // If we added an entry, it could make us go over the max size.\n    if (suppressions.size() > cardinality) removeOneSuppression();\n\n    return true;\n  }"}, {"instruction": "Build an object out of a given class and a map for field names to values.\n@param clazz The class to be created.\n@param params A map of the parameters.\n@return An instantiated object.\n@throws Exception when constructor fails.", "input": "Java", "output": "public static Object constructByNamedParams(Class clazz, Map params) throws Exception {\n        Object obj = clazz.getConstructor().newInstance();\n\n        Method[] allMethods = clazz.getMethods();\n        for(Method method : allMethods) {\n            if(method.getName().startsWith(\"set\")) {\n                Object [] o = new Object [1];\n                String propertyName = Introspector.decapitalize(method.getName().substring(3));\n                if (params.containsKey(propertyName)) {\n                    o[0] = params.get(propertyName);\n                    method.invoke(obj, o);\n                }\n            }\n        }\n        return obj;\n    }"}, {"instruction": "Creates a new big-endian buffer whose content is a subregion of\nthe specified {@code string} encoded in the specified {@code charset}.\nThe new buffer's {@code readerIndex} and {@code writerIndex} are\n{@code 0} and the length of the encoded string respectively.", "input": "Java", "output": "public static ByteBuf copiedBuffer(\n            CharSequence string, int offset, int length, Charset charset) {\n        if (string == null) {\n            throw new NullPointerException(\"string\");\n        }\n        if (length == 0) {\n            return EMPTY_BUFFER;\n        }\n\n        if (string instanceof CharBuffer) {\n            CharBuffer buf = (CharBuffer) string;\n            if (buf.hasArray()) {\n                return copiedBuffer(\n                        buf.array(),\n                        buf.arrayOffset() + buf.position() + offset,\n                        length, charset);\n            }\n\n            buf = buf.slice();\n            buf.limit(length);\n            buf.position(offset);\n            return copiedBuffer(buf, charset);\n        }\n\n        return copiedBuffer(CharBuffer.wrap(string, offset, offset + length), charset);\n    }"}, {"instruction": "\u79d2\u6570\u8f6c\u4e3a\u65f6\u95f4\u683c\u5f0f(HH:mm:ss)<br>\n\u53c2\u8003\uff1ahttps://github.com/iceroot\n\n@param seconds \u9700\u8981\u8f6c\u6362\u7684\u79d2\u6570\n@return \u8f6c\u6362\u540e\u7684\u5b57\u7b26\u4e32\n@since 3.1.2", "input": "Java", "output": "public static String secondToTime(int seconds) {\r\n\t\tif (seconds < 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"Seconds must be a positive number!\");\r\n\t\t}\r\n\r\n\t\tint hour = seconds / 3600;\r\n\t\tint other = seconds % 3600;\r\n\t\tint minute = other / 60;\r\n\t\tint second = other % 60;\r\n\t\tfinal StringBuilder sb = new StringBuilder();\r\n\t\tif (hour < 10) {\r\n\t\t\tsb.append(\"0\");\r\n\t\t}\r\n\t\tsb.append(hour);\r\n\t\tsb.append(\":\");\r\n\t\tif (minute < 10) {\r\n\t\t\tsb.append(\"0\");\r\n\t\t}\r\n\t\tsb.append(minute);\r\n\t\tsb.append(\":\");\r\n\t\tif (second < 10) {\r\n\t\t\tsb.append(\"0\");\r\n\t\t}\r\n\t\tsb.append(second);\r\n\t\treturn sb.toString();\r\n\t}"}, {"instruction": "Reads a message body into across one or more frames. Control frames that occur between\nfragments will be processed. If the message payload is masked this will unmask as it's being\nprocessed.", "input": "Java", "output": "private void readMessage() throws IOException {\n    while (true) {\n      if (closed) throw new IOException(\"closed\");\n\n      if (frameLength > 0) {\n        source.readFully(messageFrameBuffer, frameLength);\n\n        if (!isClient) {\n          messageFrameBuffer.readAndWriteUnsafe(maskCursor);\n          maskCursor.seek(messageFrameBuffer.size() - frameLength);\n          toggleMask(maskCursor, maskKey);\n          maskCursor.close();\n        }\n      }\n\n      if (isFinalFrame) break; // We are exhausted and have no continuations.\n\n      readUntilNonControlFrame();\n      if (opcode != OPCODE_CONTINUATION) {\n        throw new ProtocolException(\"Expected continuation opcode. Got: \" + toHexString(opcode));\n      }\n    }\n  }"}, {"instruction": "This method initializes this panel.", "input": "Java", "output": "private void initialize() {\r\n\t\tthis.setName(Constant.messages.getString(\"httpsessions.options.title\"));\r\n\t\tthis.setLayout(new GridBagLayout());\r\n\r\n\t\tGridBagConstraints gbc = new GridBagConstraints();\r\n\t\tgbc.gridx = 0;\r\n\t\tgbc.weightx = 1.0;\r\n\t\tgbc.anchor = GridBagConstraints.LINE_START;\r\n\t\tgbc.fill = GridBagConstraints.BOTH;\r\n\t\t\r\n\t\tJLabel tokenNamesLabel = new JLabel();\r\n\t\ttokenNamesLabel.setText(Constant.messages.getString(\"httpsessions.options.label.tokens\"));\r\n\r\n\t\tthis.add(tokenNamesLabel, gbc);\r\n\r\n\t\ttokensOptionsPanel = new HttpSessionTokensMultipleOptionsPanel(getDefaultTokensModel());\r\n\t\t\r\n\t\tgbc.weighty = 1.0;\r\n\t\tthis.add(tokensOptionsPanel, gbc);\r\n\t\t\r\n\t\tgbc.weighty = 0.0;\r\n\t\tgbc.insets = new Insets(10, 2, 2, 2);\r\n\t\tthis.add(getChkProxyOnly(), gbc);\r\n\t}"}, {"instruction": "Returns the index of minimum value between {@code index} and\n{@code index + len}, or {@code -1} if {@code index} is greater than\n{@code size}.", "input": "Java", "output": "private int findMin(Comparator comparator, int index, int len)\n  {\n    if (index >= heapSize) {\n      return -1;\n    }\n    int limit = Math.min(index, heapSize - len) + len;\n    int minIndex = index;\n    for (int i = index + 1; i < limit; i++) {\n      if (comparator.compare(buf.getInt(i * Integer.BYTES), buf.getInt(minIndex * Integer.BYTES)) < 0) {\n        minIndex = i;\n      }\n    }\n    return minIndex;\n  }"}, {"instruction": "\u8bbe\u7f6e\u8fd4\u56de\u503c\u7c7b\u578b - \u4e3a\u4e86\u8ba9typeHandler\u5728select\u65f6\u6709\u6548\uff0c\u6539\u4e3a\u8bbe\u7f6eresultMap\n\n@param ms\n@param entityClass", "input": "Java", "output": "protected void setResultType(MappedStatement ms, Class<?> entityClass) {\n        EntityTable entityTable = EntityHelper.getEntityTable(entityClass);\n        List<ResultMap> resultMaps = new ArrayList<ResultMap>();\n        resultMaps.add(entityTable.getResultMap(ms.getConfiguration()));\n        MetaObject metaObject = MetaObjectUtil.forObject(ms);\n        metaObject.setValue(\"resultMaps\", Collections.unmodifiableList(resultMaps));\n    }"}, {"instruction": "{@inheritDoc}.\n<p>\nChecks whether the IP should even be paid attention to,\nthen does a reverse DNS lookup, and if it matches the supplied pattern, performs SPNEGO\nelse skips the process.\n\n@param remoteIp The remote ip address to validate", "input": "Java", "output": "@Override\n    protected boolean shouldDoSpnego(final String remoteIp) {\n        val ipCheck = ipPatternCanBeChecked(remoteIp);\n        if (ipCheck && !ipPatternMatches(remoteIp)) {\n            return false;\n        }\n        val hostName = getRemoteHostName(remoteIp);\n        LOGGER.debug(\"Retrieved host name for the remote ip is [{}]\", hostName);\n        return this.hostNamePatternString.matcher(hostName).find();\n    }"}, {"instruction": "Save the user configuration.", "input": "Java", "output": "public synchronized void save() throws IOException {\n        if (!isIdOrFullnameAllowed(id)) {\n            throw FormValidation.error(Messages.User_IllegalUsername(id));\n        }\n        if (!isIdOrFullnameAllowed(fullName)) {\n            throw FormValidation.error(Messages.User_IllegalFullname(fullName));\n        }\n        if (BulkChange.contains(this)) {\n            return;\n        }\n        XmlFile xmlFile = new XmlFile(XSTREAM, constructUserConfigFile());\n        xmlFile.write(this);\n        SaveableListener.fireOnChange(this, xmlFile);\n    }"}, {"instruction": "\u8ba1\u7b97\u5e73\u5747\u5f02\u5e38\u7387\uff0c\u5982\u679c\u8c03\u7528\u6b21\u6570\u5c0f\u4e8eleastWindowCount\u5219\u4e0d\u53c2\u4e0e\u8ba1\u7b97\u3002 \u5982\u679c\u6240\u6709\u8c03\u7528\u6b21\u6570\u5747\u4e3a0\u5219\u8fd4\u56de-1\n\n@param invocationStats List<InvocationStat>\n@param leastWindowCount leastWindowCount\n@return The average exception rate of all invocation statics", "input": "Java", "output": "private double calculateAverageExceptionRate(List<InvocationStat> invocationStats, long leastWindowCount) {\n        long sumException = 0;\n        long sumCall = 0;\n        for (InvocationStat invocationStat : invocationStats) {\n\n            long invocationLeastWindowCount = getInvocationLeastWindowCount(invocationStat,\n                ProviderInfoWeightManager.getWeight(invocationStat.getDimension().getProviderInfo()),\n                leastWindowCount);\n\n            if (invocationLeastWindowCount != -1\n                && invocationStat.getInvokeCount() >= invocationLeastWindowCount) {\n                sumException += invocationStat.getExceptionCount();\n                sumCall += invocationStat.getInvokeCount();\n            }\n        }\n        if (sumCall == 0) {\n            return -1;\n        }\n        return CalculateUtils.divide(sumException, sumCall);\n    }"}, {"instruction": "To assist boot failure script, record the number of boot attempts.\nThis file gets deleted in case of successful boot.\n\n@see BootFailure", "input": "Java", "output": "private void recordBootAttempt(File home) {\n        try (OutputStream o=Files.newOutputStream(BootFailure.getBootFailureFile(home).toPath(), StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {\n            o.write((new Date().toString() + System.getProperty(\"line.separator\", \"\\n\")).toString().getBytes());\n        } catch (IOException | InvalidPathException e) {\n            LOGGER.log(WARNING, \"Failed to record boot attempts\",e);\n        }\n    }"}, {"instruction": "For a given commit, will traverse the pipeline and find the time it entered in each stage of the pipeline\n@param commit\n@param dashboard\n@param pipeline\n@return", "input": "Java", "output": "private PipelineResponseCommit applyStageTimestamps(PipelineResponseCommit commit, Dashboard dashboard, Pipeline pipeline,List<PipelineStage> pipelineStageList){\r\n        PipelineResponseCommit returnCommit = new PipelineResponseCommit(commit);\r\n\r\n        for(PipelineStage systemStage : pipelineStageList) {\r\n            //get commits for a given stage\r\n            Map<String, PipelineCommit> commitMap = findCommitsForStage(dashboard, pipeline, systemStage);\r\n\r\n            //if this commit doesnt have a processed timestamp for this stage, add one\r\n            PipelineCommit pipelineCommit = commitMap.get(commit.getScmRevisionNumber());\r\n            if(pipelineCommit != null && !returnCommit.getProcessedTimestamps().containsKey(systemStage.getName())){\r\n                Long timestamp = pipelineCommit.getTimestamp();\r\n                returnCommit.addNewPipelineProcessedTimestamp(systemStage, timestamp);\r\n            }\r\n        }\r\n        return returnCommit;\r\n    }"}, {"instruction": "\u83b7\u53d6\u6ce8\u518c\u914d\u7f6e\n\n@param config consumer config\n@return", "input": "Java", "output": "private AbstractInterfaceConfig getRegisterConfig(ConsumerConfig config) {\n        String url = ZookeeperRegistryHelper.convertConsumerToUrl(config);\n        String addr = url.substring(0, url.indexOf(\"?\"));\n        for (Map.Entry<ConsumerConfig, String> consumerUrl : consumerUrls.entrySet()) {\n            if (consumerUrl.getValue().contains(addr)) {\n                return consumerUrl.getKey();\n            }\n        }\n        return null;\n    }"}, {"instruction": "[VARIABLE \"my_value\"]", "input": "Java", "output": "public List<Entity> runQueryOnProperty(String kind, String property, String value) {\n    // TODO change so that it's not necessary to hold the entities in a list for integration testing\n    // [START runQueryOnProperty]\n    StructuredQuery<Entity> query =\n        Query.newEntityQueryBuilder()\n            .setKind(kind)\n            .setFilter(PropertyFilter.eq(property, value))\n            .build();\n    QueryResults<Entity> results = datastore.run(query);\n    List<Entity> entities = Lists.newArrayList();\n    while (results.hasNext()) {\n      Entity result = results.next();\n      // do something with result\n      entities.add(result);\n    }\n    // [END runQueryOnProperty]\n    return entities;\n  }"}, {"instruction": "Make a prediction on a new data point using a Binomial model.\n\n@param data A new data point.\n@return The prediction.\n@throws PredictException", "input": "Java", "output": "public AnomalyDetectionPrediction predictAnomalyDetection(RowData data) throws PredictException {\n    double[] preds = preamble(ModelCategory.AnomalyDetection, data, 0.0);\n\n    AnomalyDetectionPrediction p = new AnomalyDetectionPrediction();\n    p.normalizedScore = preds[0];\n    p.score = preds[1];\n    if (enableLeafAssignment) { // only get leaf node assignment if enabled\n      SharedTreeMojoModel.LeafNodeAssignments assignments = leafNodeAssignmentExtended(data);\n      p.leafNodeAssignments = assignments._paths;\n      p.leafNodeAssignmentIds = assignments._nodeIds;\n    }\n    if (enableStagedProbabilities) {\n        double[] rawData = nanArray(m.nfeatures());\n        rawData = fillRawData(data, rawData);\n        p.stageProbabilities = ((SharedTreeMojoModel) m).scoreStagedPredictions(rawData, preds.length);\n    }\n    return p;\n  }"}, {"instruction": "Inserts the specified element at the tail of this queue if it is\npossible to do so immediately or if capacity limit is exited\nthe oldest element (the head) will be evicted, and then the new element added at the tail.\nThis method is generally preferable to method {@link #add},\nwhich can fail to insert an element only by throwing an exception.\n\n@throws NullPointerException if the specified element is null", "input": "Java", "output": "@Override\n    public boolean offer(final E e) {\n        requireNonNull(e, ILLEGAL_ELEMENT);\n\n        Supplier<Boolean> offerElement = () -> {\n            if (size == 0) {\n                ringBuffer[tailIndex] = e;\n                modificationsCount++;\n                size++;\n            } else if (size == maxSize) {\n                headIndex = nextIndex(headIndex);\n                tailIndex = nextIndex(tailIndex);\n                ringBuffer[tailIndex] = e;\n                modificationsCount++;\n            } else {\n                tailIndex = nextIndex(tailIndex);\n                ringBuffer[tailIndex] = e;\n                size++;\n                modificationsCount++;\n            }\n            return true;\n        };\n        return writeConcurrently(offerElement);\n    }"}, {"instruction": "Checks the current resource less than or equal with the other resource by comparing\nall the fields in the resource.\n\n@param other The resource to compare\n@return True if current resource is less than or equal with the other resource, otherwise return false.", "input": "Java", "output": "public boolean lessThanOrEqual(@Nonnull ResourceSpec other) {\n\t\tint cmp1 = Double.compare(this.cpuCores, other.cpuCores);\n\t\tint cmp2 = Integer.compare(this.heapMemoryInMB, other.heapMemoryInMB);\n\t\tint cmp3 = Integer.compare(this.directMemoryInMB, other.directMemoryInMB);\n\t\tint cmp4 = Integer.compare(this.nativeMemoryInMB, other.nativeMemoryInMB);\n\t\tint cmp5 = Integer.compare(this.stateSizeInMB, other.stateSizeInMB);\n\t\tif (cmp1 <= 0 && cmp2 <= 0 && cmp3 <= 0 && cmp4 <= 0 && cmp5 <= 0) {\n\t\t\tfor (Resource resource : extendedResources.values()) {\n\t\t\t\tif (!other.extendedResources.containsKey(resource.getName()) ||\n\t\t\t\t\tother.extendedResources.get(resource.getName()).getResourceAggregateType() != resource.getResourceAggregateType() ||\n\t\t\t\t\t\tother.extendedResources.get(resource.getName()).getValue() < resource.getValue()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"}, {"instruction": "return true if the given doc matches the supplied selector", "input": "JavaScript", "output": "function matchesSelector(doc, selector) {\n  /* istanbul ignore if */\n  if (typeof selector !== 'object') {\n    // match the CouchDB error message\n    throw 'Selector error: expected a JSON object';\n  }\n\n  selector = massageSelector(selector);\n  var row = {\n    'doc': doc\n  };\n\n  var rowsMatched = filterInMemoryFields([row], { 'selector': selector }, Object.keys(selector));\n  return rowsMatched && rowsMatched.length === 1;\n}"}, {"instruction": "A mixin for all OData V4 bindings.\n\n@alias sap.ui.model.odata.v4.ODataBinding\n@mixin", "input": "JavaScript", "output": "function ODataBinding() {\n\t\t// maps a canonical path of a quasi-absolute or relative binding to a cache object that may\n\t\t// be reused\n\t\tthis.mCacheByResourcePath = undefined;\n\t\tthis.oCachePromise = SyncPromise.resolve();\n\t\tthis.mCacheQueryOptions = undefined;\n\t\t// used to create cache only for the latest call to #fetchCache\n\t\tthis.oFetchCacheCallToken = undefined;\n\t\t// change reason to be used when the binding is resumed\n\t\tthis.sResumeChangeReason = ChangeReason.Change;\n\t}"}, {"instruction": "`triggerEvent` builds a custom DOM event with given `eventName` and `detail` data and triggers it on element given as `el`.", "input": "JavaScript", "output": "function( el, eventName, detail ) {\n            var event = document.createEvent( \"CustomEvent\" );\n            event.initCustomEvent( eventName, true, true, detail );\n            el.dispatchEvent( event );\n        }"}, {"instruction": "Returns the encoded vast url if it exists on a bid object, only if prebid-cache\nis disabled, and description_url is not already set on a given input\n@param {AdapterBidResponse} bid object to check for vast url\n@param {Object} components the object to check that description_url is NOT set on\n@param {string} prop the property of components that would contain description_url\n@return {string | undefined} The encoded vast url if it exists, or undefined", "input": "JavaScript", "output": "function getDescriptionUrl(bid, components, prop) {\n  if (config.getConfig('cache.url')) { return; }\n\n  if (!deepAccess(components, `${prop}.description_url`)) {\n    const vastUrl = bid && bid.vastUrl;\n    if (vastUrl) { return encodeURIComponent(vastUrl); }\n  } else {\n    logError(`input cannnot contain description_url`);\n  }\n}"}, {"instruction": "\"An editing host is a node that is either an Element whose isContentEditable property returns true but whose parent node is not an element or whose isContentEditable property returns false, or a Document whose designMode is enabled.\"", "input": "JavaScript", "output": "function isEditingHost(node) {\n        return node &&\n            ((node.nodeType == 9 && node.designMode == \"on\") ||\n            (isEditableElement(node) && !isEditableElement(node.parentNode)));\n    }"}, {"instruction": "`getStep` is a helper function that returns a step element defined by parameter. If a number is given, step with index given by the number is returned, if a string is given step element with such id is returned, if DOM element is given it is returned if it is a correct step element.", "input": "JavaScript", "output": "function( step ) {\n            if ( typeof step === \"number\" ) {\n                step = step < 0 ? steps[ steps.length + step ] : steps[ step ];\n            } else if ( typeof step === \"string\" ) {\n                step = lib.util.byId( step );\n            }\n            return ( step && step.id && stepsData[ \"impress-\" + step.id ] ) ? step : null;\n        }"}, {"instruction": "add icons to registry and insert the font style", "input": "JavaScript", "output": "function loadFont(oFontMetadata) {\n\t\t\t\tfor (var sKey in oFontMetadata) {\n\t\t\t\t\toFontMetadata[sKey] = parseInt(oFontMetadata[sKey], 16);\n\t\t\t\t}\n\t\t\t\tmRegistry[collectionName] = oFontMetadata;\n\t\t\t\tIconPool.insertFontFaceStyle(oConfig.fontFamily, oConfig.fontURI, collectionName);\n\t\t\t\tmFontRegistry[collectionName].metadataLoaded = true;\n\t\t\t}"}, {"instruction": "\u6309\u7c7b\u522b\u548c\u53c2\u6570\u6570\u7ec4\u83b7\u53d6 mock \u6570\u636e\n@param {Number} format - \u6570\u636e\u6a21\u578b\u7684\u7c7b\u578b\n@param {Array} params - \u53c2\u6570\u6570\u7ec4\n@param {Array} ds - \u6570\u636e\u6a21\u578b\u7684\u6570\u636e\u6e90, \u5305\u62ec\u6240\u6709\u6570\u636e\u6a21\u578b", "input": "JavaScript", "output": "function (format, params, ds) {\n      this.ds = ds;\n      this.errorData = [];\n      this._sortParams(params);\n      var result = this._getMockByParams(format, params);\n      return {\n        json: result,\n        error: this.errorData\n      };\n    }"}, {"instruction": "Using top-down recursion, linearly scan the JSON tree to determine which values should be deduplicated.", "input": "JavaScript", "output": "function collectDuplicates(value) {\n    if (value == null || typeof value !== 'object') {\n      return;\n    }\n    const metadata = metadataForVal.get(value);\n    // Only consider duplicates with hashes longer than 2 (excludes [] and {}).\n    if (metadata && metadata.value !== value && metadata.hash.length > 2) {\n      metadata.isDuplicate = true;\n      return;\n    }\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        collectDuplicates(value[i]);\n      }\n    } else {\n      for (const k in value) {\n        if (value.hasOwnProperty(k) && value[k] !== undefined) {\n          collectDuplicates(value[k]);\n        }\n      }\n    }\n  }"}, {"instruction": "/*\nFeature class for features that fire (or don't) on combinations of context\nand class\nCopyright (C) 2017 Hugo W.L. ter Doest\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.", "input": "JavaScript", "output": "function Feature(f, name, parameters) {\n  this.evaluate = f;\n  this.name = name;\n  this.parameters = parameters;\n\n  var tmp = \"\";\n  parameters.forEach(function(par) {\n    tmp += par + \"|\";\n  });\n  this.parametersKey = tmp.substr(0, tmp.length - 1);\n}"}, {"instruction": "Get the real native browser event from a jQuery event object", "input": "JavaScript", "output": "function(oEvent) {\n\t\t\twhile (oEvent && oEvent.originalEvent && oEvent !== oEvent.originalEvent) {\n\t\t\t\toEvent = oEvent.originalEvent;\n\t\t\t}\n\t\t\treturn oEvent;\n\t\t}"}, {"instruction": "Update the zoom and center (X and Y) springs.\n@function\n@returns {Boolean} True if any change has been made, false otherwise.", "input": "JavaScript", "output": "function() {\n        var _this = this;\n        this._adjustCenterSpringsForZoomPoint(function() {\n            _this.zoomSpring.update();\n        });\n\n        this.centerSpringX.update();\n        this.centerSpringY.update();\n\n        var changed = this.centerSpringX.current.value !== this._oldCenterX ||\n            this.centerSpringY.current.value !== this._oldCenterY ||\n            this.zoomSpring.current.value !== this._oldZoom;\n\n        this._oldCenterX = this.centerSpringX.current.value;\n        this._oldCenterY = this.centerSpringY.current.value;\n        this._oldZoom    = this.zoomSpring.current.value;\n\n        return changed;\n    }"}, {"instruction": "Creates a new general purpose modal dialog using the default template and the template variables given\nas parameters as described.\n\n@param {string} dlgClass A class name identifier for the dialog. Typically one of DefaultDialogs.*\n@param {string=} title The title of the dialog. Can contain HTML markup. Defaults to \"\".\n@param {string=} message The message to display in the dialog. Can contain HTML markup. Defaults to \"\".\n@param {Array.<{className: string, id: string, text: string}>=} buttons An array of buttons where each button\nhas a class, id and text property. The id is used in \"data-button-id\". Defaults to a single Ok button.\nTypically className is one of DIALOG_BTN_CLASS_*, id is one of DIALOG_BTN_*\n@param {boolean=} autoDismiss Whether to automatically dismiss the dialog when one of the buttons\nis clicked. Default true. If false, you'll need to manually handle button clicks and the Esc\nkey, and dismiss the dialog yourself when ready by calling `close()` on the returned dialog.\n@return {Dialog}", "input": "JavaScript", "output": "function showModalDialog(dlgClass, title, message, buttons, autoDismiss) {\n        var templateVars = {\n            dlgClass: dlgClass,\n            title:    title   || \"\",\n            message:  message || \"\",\n            buttons:  buttons || [{ className: DIALOG_BTN_CLASS_PRIMARY, id: DIALOG_BTN_OK, text: Strings.OK }]\n        };\n        var template = Mustache.render(DialogTemplate, templateVars);\n\n        return showModalDialogUsingTemplate(template, autoDismiss);\n    }"}, {"instruction": "The file item has been added to the DOM.", "input": "JavaScript", "output": "function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        }"}, {"instruction": "Resets an existing tern server.", "input": "JavaScript", "output": "function resetTernServer() {\n    // If a server is already created just reset the analysis data \n    if (ternServer) {\n        ternServer.reset();\n        Infer.resetGuessing();\n        // tell the main thread we're ready to start processing again\n        self.postMessage({type: MessageIds.TERN_WORKER_READY});\n    }\n}"}, {"instruction": "Get the canvas size\n@param {Boolean} sketch If set to true return the size of the sketch canvas\n@returns {OpenSeadragon.Point} The size of the canvas", "input": "JavaScript", "output": "function(sketch) {\n        var canvas = this._getContext(sketch).canvas;\n        return new $.Point(canvas.width, canvas.height);\n    }"}, {"instruction": "Get the number of elements in an array block.\n\n@param tap {Tap} A tap positioned at the beginning of an array block.", "input": "JavaScript", "output": "function readArraySize(tap) {\n  var n = tap.readLong();\n  if (n < 0) {\n    n = -n;\n    tap.skipLong(); // Skip size.\n  }\n  return n;\n}"}, {"instruction": "https://gist.github.com/1044128/", "input": "JavaScript", "output": "function(element) {\n  if ('outerHTML' in element) return element.outerHTML;\n  var ns = \"http://www.w3.org/1999/xhtml\";\n  var container = document.createElementNS(ns, '_');\n  var elemProto = (window.HTMLElement || window.Element).prototype;\n  var xmlSerializer = new XMLSerializer();\n  var html;\n  if (document.xmlVersion) {\n    return xmlSerializer.serializeToString(element);\n  } else {\n    container.appendChild(element.cloneNode(false));\n    html = container.innerHTML.replace('><', '>' + element.innerHTML + '<');\n    container.innerHTML = '';\n    return html;\n  }\n}"}, {"instruction": "Finds out the data entry that is closer to the given position on pixels\n@param  {Number} mouseX X position of the mouse\n@return {Object}        Data entry that is closer to that x axis position", "input": "JavaScript", "output": "function getNearestDataPoint(mouseX) {\n            let dateFromInvertedX = xScale.invert(mouseX);\n            let bisectDate = d3Array.bisector(getDate).left;\n            let dataEntryIndex = bisectDate(dataByDate, dateFromInvertedX, 1);\n            let dataEntryForXPosition = dataByDate[dataEntryIndex];\n            let previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n            let nearestDataPoint;\n\n            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n                nearestDataPoint = findOutNearestDate(dateFromInvertedX, dataEntryForXPosition, previousDataEntryForXPosition);\n            } else {\n                nearestDataPoint = dataEntryForXPosition;\n            }\n\n            return nearestDataPoint;\n        }"}, {"instruction": "The base implementation of `_.toString` which doesn't convert nullish\nvalues to empty strings.\n\n@private\n@param {*} value The value to process.\n@returns {string} Returns the string.", "input": "JavaScript", "output": "function baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value === 'string') {\n    return value\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : ''\n  }\n  var result = value + ''\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}"}, {"instruction": "Build an includePaths string\nfrom the options.includePaths array and the SASS_PATH environment variable\n\n@param {Object} options\n@api private", "input": "JavaScript", "output": "function buildIncludePaths(options) {\n  options.includePaths = options.includePaths || [];\n\n  if (process.env.hasOwnProperty('SASS_PATH')) {\n    options.includePaths = options.includePaths.concat(\n      process.env.SASS_PATH.split(path.delimiter)\n    );\n  }\n\n  // Preserve the behaviour people have come to expect.\n  // This behaviour was removed from Sass in 3.4 and\n  // LibSass in 3.5.\n  options.includePaths.unshift(process.cwd());\n\n  return options.includePaths.join(path.delimiter);\n}"}, {"instruction": "Get the bounding box (width, height, x and y) for the element", "input": "JavaScript", "output": "function () {\r\n\t\tvar bBox,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\trotation = this.rotation,\r\n\t\t\trad = rotation * deg2rad;\r\n\r\n\t\ttry { // fails in Firefox if the container has display: none\r\n\t\t\t// use extend because IE9 is not allowed to change width and height in case\r\n\t\t\t// of rotation (below)\r\n\t\t\tbBox = extend({}, this.element.getBBox());\r\n\t\t} catch (e) {\r\n\t\t\tbBox = { width: 0, height: 0 };\r\n\t\t}\r\n\t\twidth = bBox.width;\r\n\t\theight = bBox.height;\r\n\r\n\t\t// adjust for rotated text\r\n\t\tif (rotation) {\r\n\t\t\tbBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));\r\n\t\t\tbBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));\r\n\t\t}\r\n\r\n\t\treturn bBox;\r\n\t}"}, {"instruction": "/* Event maniupluation\n================================================== Add an event", "input": "JavaScript", "output": "function(data) {\n\t\tvar unique_id = this.config.addEvent(data);\n\n\t\tvar n = this._getEventIndex(unique_id);\n\t\tvar d = this.config.events[n];\n\n\t\tthis._storyslider.createSlide(d, this.config.title ? n+1 : n);\n\t\tthis._storyslider._updateDrawSlides();\n\n\t\tthis._timenav.createMarker(d, n);\n\t\tthis._timenav._updateDrawTimeline(false);\n\n\t\tthis.fire(\"added\", {unique_id: unique_id});\n\t}"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, rawData, fieldInfo, properties) {\n            // at the moment disabling \"total count\" mode, need a more sophisticated way to handle it\n            if(false && rawData.series['_tc'] && rawData.series['_tc'].length > 0) {\n                this.useTotalCount = true;\n                this.totalCount = parseInt(rawData.series['_tc'][0].rawY, 10);\n            }\n            else {\n                this.useTotalCount = false;\n            }\n            $super(rawData, fieldInfo, properties);\n        }"}, {"instruction": "Converts Array or ArrayBuffer to string\n@param {Array|Uint8Array|ArrayBuffer} arr\n@return {string}", "input": "JavaScript", "output": "function bytesToString(arr) {\n    if (arr instanceof ArrayBuffer) {\n        arr = new Uint8Array(arr);\n    }\n    return textDecoder.decode(arr);\n}"}, {"instruction": "*\n@method every([ms] = 1, [arg1], [arg2], ...)\n@returns Function\n@short Executes the function every `ms` milliseconds.\n@extra Returns a reference to itself. `every` uses `setTimeout`, which\nmeans that you are guaranteed a period of idle time equal to [ms]\nafter execution has finished. Compare this to `setInterval` which\nwill try to run a function every [ms], even when execution itself\ntakes up a portion of that time. In most cases avoiding `setInterval`\nis better as calls won't \"back up\" when the CPU is under strain,\nhowever this also means that calls are less likely to happen at\nexact intervals of [ms], so the use case here should be considered.\nAdditionally, `every` can curry arguments passed in after [ms], and\nalso be canceled with `cancel`.\n\n@example\n\nlogHello.every(1000)        -> logs every second\nlogArgs.every(1000, 'Hola') -> logs 'hola' every second\n\n@param {number} [ms]\n@param {any} [arg1]\n@param {any} [arg2]\n\n*", "input": "JavaScript", "output": "function(fn, ms, args) {\n    function execute () {\n      // Set the delay first here, so that cancel\n      // can be called within the executing function.\n      setDelay(fn, ms, execute);\n      fn.apply(fn, args);\n    }\n    setDelay(fn, ms, execute);\n    return fn;\n  }"}, {"instruction": "Set the opacity of the drawer.\n@param {Number} opacity\n@return {OpenSeadragon.Drawer} Chainable.", "input": "JavaScript", "output": "function( opacity ) {\n        $.console.error(\"drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.\");\n        var world = this.viewer.world;\n        for (var i = 0; i < world.getItemCount(); i++) {\n            world.getItemAt( i ).setOpacity( opacity );\n        }\n        return this;\n    }"}, {"instruction": "draw the image layer\n@ignore", "input": "JavaScript", "output": "function (renderer) {\n            var viewport = me.game.viewport,\n                width = this.imagewidth,\n                height = this.imageheight,\n                bw = viewport.bounds.width,\n                bh = viewport.bounds.height,\n                ax = this.anchorPoint.x,\n                ay = this.anchorPoint.y,\n                x = this.pos.x,\n                y = this.pos.y;\n\n            if (this.ratio.x === this.ratio.y === 0) {\n                x = x + ax * (bw - width);\n                y = y + ay * (bh - height);\n            }\n\n            renderer.translate(x, y);\n            renderer.drawPattern(\n                this._pattern,\n                0,\n                0,\n                viewport.width * 2,\n                viewport.height * 2\n            );\n        }"}, {"instruction": "Matches curly braces content right after given position\n@param  {String} content CSS content. Must not contain comments!\n@param  {Number} pos     Search start position\n@return {Range}", "input": "JavaScript", "output": "function(content, pos, sanitize) {\n\t\t\tif (sanitize) {\n\t\t\t\tcontent = this.sanitize(content);\n\t\t\t}\n\n\t\t\tvar stream = stringStream(content);\n\t\t\tstream.start = stream.pos = pos;\n\t\t\tvar stack = [], ranges = [];\n\t\t\tvar ch;\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tstack.push(stream.pos - 1);\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\tif (!stack.length) {\n\t\t\t\t\t\tthrow 'Invalid source structure (check for curly braces)';\n\t\t\t\t\t}\n\t\t\t\t\tranges.push(range.create2(stack.pop(), stream.pos));\n\t\t\t\t\tif (!stack.length) {\n\t\t\t\t\t\treturn ranges;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstream.skipQuoted();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ranges;\n\t\t}"}, {"instruction": "Apply median filter.\nWhen used without parameters the default window is 3x3.\n@param {Number} [size=3] square mask size: size x size\n@returns {Sharp}\n@throws {Error} Invalid parameters", "input": "JavaScript", "output": "function median (size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw new Error('Invalid median size ' + size);\n  }\n  return this;\n}"}, {"instruction": "It clones original object into the new one. It is necessary to retain the options information valid\nfor all nodes.\n@param original Object to clone\n@returns {Object} Cloned object", "input": "JavaScript", "output": "function (original) {\n                var clone = {};\n                var i, keys = Object.keys(original);\n\n                for (i = 0; i < keys.length; i++) {\n                    // copy each property into the clone\n                    clone[keys[i]] = original[keys[i]];\n                }\n\n                return clone;\n            }"}, {"instruction": "Pings the given URL to check that this is a valid path.\nIf the ping is successful - redirects to the given URL.\nIf something goes wrong - falls back to a default public URL.\n@private\n@param {string} sUrl URL that needs to be pinged and redirected to\n@param {string} sTopicId The ID of the topic to open", "input": "JavaScript", "output": "function (sUrl, sTopicId) {\n\t\t\tthis._pingUrl(sUrl).then(function success() {\n\t\t\t\tmLibrary.URLHelper.redirect(sUrl, true);\n\t\t\t}, function error() {\n\t\t\t\tjQuery.sap.log.info(\"Support Assistant tried to load documentation link in \" + sUrl + \"but fail\");\n\t\t\t\tsUrl = \"https://ui5.sap.com/#/topic/\" + sTopicId;\n\t\t\t\tmLibrary.URLHelper.redirect(sUrl, true);\n\t\t\t});\n\t\t}"}, {"instruction": "-------------------------------------------------------------------------- Helpers -------------------------------------------------------------------------- \nGet exact callee name from expression\n@param {ASTNode} node CallExpression or NewExpression node\n@returns {string} name", "input": "JavaScript", "output": "function extractNameFromExpression(node) {\n\n            let name = \"\";\n\n            if (node.callee.type === \"MemberExpression\") {\n                const property = node.callee.property;\n\n                if (property.type === \"Literal\" && (typeof property.value === \"string\")) {\n                    name = property.value;\n                } else if (property.type === \"Identifier\" && !node.callee.computed) {\n                    name = property.name;\n                }\n            } else {\n                name = node.callee.name;\n            }\n            return name;\n        }"}, {"instruction": "Function: getColor\n\nReturns the color value for the given key in the given associative\narray or the given default value if the value is null. If the value\nis <mxConstants.NONE> then null is returned.\n\nParameters:\n\narray - Associative array that contains the value for the key.\nkey - Key whose value should be returned.\ndefaultValue - Value to be returned if the value for the given\nkey is null. Default is null.", "input": "JavaScript", "output": "function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t}"}, {"instruction": "Get a text description of the resolution based on the zoom level\nmax width of the dataset, the bins per dimension and the maximum\nzoom.\n\n@param {int} zoomLevel The current zoomLevel (e.g. 0)\n@param {int} max_width The max width\n(e.g. 2 ** maxZoom * highestResolution * binsPerDimension)\n@param {int} bins_per_dimension The number of bins per tile dimension\n(e.g. 256)\n@param {int} maxZoom The maximum zoom level for this tileset\n\n@returns {string} A formatted string representation of the zoom level\n(e.g. \"30K\")", "input": "JavaScript", "output": "function getWidthBasedResolutionText(\n  zoomLevel, maxWidth, binsPerDimension, maxZoom\n) {\n  const resolution = maxWidth / ((2 ** zoomLevel) * binsPerDimension);\n\n  // we can't display a NaN resolution\n  if (!Number.isNaN(resolution)) {\n    // what is the maximum possible resolution?\n    // this will determine how we format the lower resolutions\n    const maxResolutionSize = maxWidth / ((2 ** maxZoom) * binsPerDimension);\n\n    const pp = precisionPrefix(maxResolutionSize, resolution);\n    const f = formatPrefix(`.${pp}`, resolution);\n    const formattedResolution = f(resolution);\n\n    return formattedResolution;\n  }\n  console.warn(\n    'NaN resolution, screen is probably too small. Dimensions:',\n    this.dimensions,\n  );\n\n  return '';\n}"}, {"instruction": "Checks that the line segments of this polygon do not intersect each other.\n@method isSimple\n@param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n@return {Boolean}\n@todo Should it check all segments with all others?", "input": "JavaScript", "output": "function polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}"}, {"instruction": "Cleans up element by removing all its invisible children (which we don't want to render as Markdown)", "input": "JavaScript", "output": "function cleanUpElement(element) {\n\t\tconst childNodes = element.childNodes;\n\n\t\tfor (let i = 0; i < childNodes.length; i++) {\n\t\t\tconst node = childNodes[i];\n\n\t\t\tlet isVisible = node.nodeType === 1 ? window.getComputedStyle(node).display !== 'none' : true;\n\t\t\tif (isVisible && ['input', 'textarea', 'script', 'noscript', 'style', 'select', 'option', 'button'].indexOf(node.nodeName.toLowerCase()) >= 0) isVisible = false;\n\n\t\t\tif (!isVisible) {\n\t\t\t\telement.removeChild(node);\n\t\t\t} else {\n\t\t\t\tcleanUpElement(node);\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Function comparing an object's properties to a given descriptive\nobject.\n\n@param  {object} object      - The object to compare.\n@param  {object} description - The description's mapping.\n@return {boolean}            - Whether the object matches the description.", "input": "JavaScript", "output": "function compare(object, description) {\n  let ok = true,\n      k;\n\n  // If we reached here via a recursive call, object may be undefined because\n  // not all items in a collection will have the same deep nesting structure.\n  if (!object)\n    return false;\n\n  for (k in description) {\n    if (type.object(description[k])) {\n      ok = ok && compare(object[k], description[k]);\n    }\n    else if (type.array(description[k])) {\n      ok = ok && !!~description[k].indexOf(object[k]);\n    }\n    else {\n      if (object[k] !== description[k])\n        return false;\n    }\n  }\n\n  return ok;\n}"}, {"instruction": "Helper functions", "input": "JavaScript", "output": "function requireSecondPassword (options) {\n  return function (wallet) {\n    if (wallet.isDoubleEncrypted && !wallet.validateSecondPassword(options.second_password)) {\n      throw 'ERR_SECPASS'\n    }\n    return wallet\n  }\n}"}, {"instruction": "Normalize all injections into Object-based format", "input": "JavaScript", "output": "function normalizeInject (options) {\n  var inject = options.inject;\n  if (Array.isArray(inject)) {\n    var normalized = options.inject = {};\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = inject[i];\n    }\n  }\n}"}, {"instruction": "Add a proximity based constraint for finding objects with key point\nvalues near the point given.\n@param {String} key The key that the AV.GeoPoint is stored in.\n@param {AV.GeoPoint} point The reference AV.GeoPoint that is used.\n@return {AV.Query} Returns the query, so you can chain this call.", "input": "JavaScript", "output": "function(key, point) {\n        if (!(point instanceof AV.GeoPoint)) {\n          // Try to cast it to a GeoPoint, so that near(\"loc\", [20,30]) works.\n          point = new AV.GeoPoint(point);\n        }\n        this._addCondition(key, '$nearSphere', point);\n        return this;\n      }"}, {"instruction": "Checks the origin and enables/disables CORS headers in the response.\n@param  {Object}   req express request object.\n@param  {Function} cb  callback that configures CORS.\n@return {null}", "input": "JavaScript", "output": "function handleCORS(req, cb) {\n    const origin = req.get('origin');\n    const trustedDomains = req.client && req.client.trustedDomains;\n\n    // Request must have an Origin header\n    if (!origin) {\n        return cb(null, DISABLE_CORS);\n    }\n\n    // Origin matches a client_trusted_domain\n    if (some(trustedDomains, {trusted_domain: origin})) {\n        return cb(null, ENABLE_CORS);\n    }\n\n    // Origin matches whitelist\n    if (getWhitelist().indexOf(url.parse(origin).hostname) > -1) {\n        return cb(null, ENABLE_CORS);\n    }\n\n    return cb(null, DISABLE_CORS);\n}"}, {"instruction": "---------------------------------------------------------------------", "input": "JavaScript", "output": "function replaceText(id, text) {\n    var element = document.getElementById(id)\n    if (null == element) {\n//      alert(\"error: can't find element with id '\" + id + \"'\")\n        return\n    }\n\n    element.innerHTML = text\n}"}, {"instruction": "Constructs a DateTimeFormatter_ object which implements the Formatter_\ninterface.\n\nInternal object to construct and store a goog.i18n.DateTimeFormat for the\na datetime pattern and formats dates using the fallback interval pattern\n(e.g. '{0} \u2013 {1}').\n\n@param {string} dateTimePattern Datetime pattern used to format the dates.\n@param {string} fallbackPattern Fallback interval pattern to be used with the\ndatetime pattern.\n@param {!DateTimeSymbolsType} dateTimeSymbols Symbols to use with\nthe datetime format.\n@constructor\n@implements {Formatter_}\n@private", "input": "JavaScript", "output": "function(\n    dateTimePattern, fallbackPattern, dateTimeSymbols) {\n  /**\n   * Date time pattern used to format the dates.\n   * @private {string}\n   */\n  this.dateTimePattern_ = dateTimePattern;\n\n  /**\n   * Date time formatter used to format the dates.\n   * @private {!DateTimeFormat}\n   */\n  this.dateTimeFormatter_ =\n      new DateTimeFormat(dateTimePattern, dateTimeSymbols);\n\n  /**\n   * Fallback interval pattern.\n   * @private {string}\n   */\n  this.fallbackPattern_ = fallbackPattern;\n}"}, {"instruction": "Register mouse down to detect mouse drag.", "input": "JavaScript", "output": "function (evt) {\n    if (!this.data.enabled) { return; }\n    // Handle only primary button.\n    if (evt.button !== 0) { return; }\n\n    var sceneEl = this.el.sceneEl;\n    var canvasEl = sceneEl && sceneEl.canvas;\n\n    this.mouseDown = true;\n    this.previousMouseEvent = evt;\n    this.showGrabbingCursor();\n\n    if (this.data.pointerLockEnabled && !this.pointerLocked) {\n      if (canvasEl.requestPointerLock) {\n        canvasEl.requestPointerLock();\n      } else if (canvasEl.mozRequestPointerLock) {\n        canvasEl.mozRequestPointerLock();\n      }\n    }\n  }"}, {"instruction": "Get nde events\nreturn node events and optionally\ncheck if the node has already a specific event\nto avoid duplicated callbacks\n\n@param {node} node\n@param {string} name event name\n@param {object} fn callback\n@returns {object}", "input": "JavaScript", "output": "function getNodeEvents(node, name = null, fn = null) {\n    const cache = (node[uid] = node[uid] || []);\n    const data = { all: cache, evt: null, found: null};\n    if (name && fn && utils.size(cache) > 0) {\n        each(cache, (cl, i) => {\n            if (cl.eventName == name && cl.fn.toString() == fn.toString()) {\n                data.found = true;\n                data.evt = i;\n                return false;\n            }\n        })\n    }\n    return data;\n}"}, {"instruction": "/* eslint-disable-next-line no-unused-vars", "input": "JavaScript", "output": "function stylesheetOverride(stylesheet, props, themeData) {\n  return {\n    ...stylesheet,\n    pointerBorder: { fill: themeData[\"tooltip.backgroundColor\"] },\n    pointerBody: { fill: themeData[\"tooltip.backgroundColor\"] }\n  };\n}"}, {"instruction": "This method will toggle the referenced CSS class (by the provided index)\nwithin the given context.\n\n@param context The styling context that will be updated with the\nnewly provided class value.\n@param index The index of the CSS class which is being updated.\n@param addOrRemove Whether or not to add or remove the CSS class", "input": "JavaScript", "output": "function updateClassProp(context, index, addOrRemove) {\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}"}, {"instruction": "BCP: 1670235674 MessageItem acts as a proxy to StandardListItem So, we should ensure if something is changed in MessageItem, it would be propagated to the StandardListItem", "input": "JavaScript", "output": "function (sName, oItem) {\n\t\t\t\t\tif (oItem._oMessagePopoverItem.getId() === this.getId() && oItem.getMetadata().getProperty(sName)) {\n\t\t\t\t\t\toItem.setProperty(sName, oValue);\n\t\t\t\t\t}\n\t\t\t\t}"}, {"instruction": "@\n#.shift\n@comp Crafty.polygon\n@kind Method\n\n@sign public void .shift(Number x, Number y)\n@param x - Amount to shift the `x` axis\n@param y - Amount to shift the `y` axis\n\nShifts every single point in the polygon by the specified amount.\n\n@example\n~~~\nvar poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);\npoly.shift(5,5);\n//[[55, 5, 105, 5, 5, 105];\n~~~", "input": "JavaScript", "output": "function(x, y) {\n        var i = 0,\n            p = this.points,\n            l = p.length;\n        for (; i < l; i += 2) {\n            p[i] += x;\n            p[i + 1] += y;\n        }\n    }"}, {"instruction": "Runs Typedoc command.\n\nAdditional config options come from ./typedoc.js", "input": "JavaScript", "output": "function runTypedoc() {\n  const typeSource = apiType === 'node' ? tempNodeSourcePath : sourceFile;\n  const command = `${repoPath}/node_modules/.bin/typedoc ${typeSource} \\\n  --out ${docPath} \\\n  --readme ${tempHomePath} \\\n  --options ${__dirname}/typedoc.js \\\n  --theme ${__dirname}/theme`;\n\n  console.log('Running command:\\n', command);\n  return exec(command);\n}"}, {"instruction": "Checks whether a given reference is safe or not.\nThe reference is every reference of the upper scope's variable we are\nlooking now.\n\nIt's safeafe if the reference matches one of the following condition.\n- is readonly.\n- doesn't exist inside a local function and after the border.\n\n@param {eslint-scope.Reference} upperRef - A reference to check.\n@returns {boolean} `true` if the reference is safe.", "input": "JavaScript", "output": "function isSafeReference(upperRef) {\n        const id = upperRef.identifier;\n\n        return (\n            !upperRef.isWrite() ||\n            variable.scope.variableScope === upperRef.from.variableScope &&\n            id.range[0] < border\n        );\n    }"}, {"instruction": "Pushs a variable scope (Program or Function) information to the stack.\n\nThis is used in order to check whether or not `this` binding is a\nreference to the global object.\n\n@param {ASTNode} node - A node of the scope. This is one of Program,\nFunctionDeclaration, FunctionExpression, and ArrowFunctionExpression.\n@returns {void}", "input": "JavaScript", "output": "function enterVarScope(node) {\n            const strict = context.getScope().isStrict;\n\n            funcInfo = {\n                upper: funcInfo,\n                node,\n                strict,\n                defaultThis: false,\n                initialized: strict\n            };\n        }"}, {"instruction": "\u6587\u4ef6\u961f\u5217, \u7528\u6765\u5b58\u50a8\u5404\u4e2a\u72b6\u6001\u4e2d\u7684\u6587\u4ef6\u3002\n@class Queue\n@extends Mediator", "input": "JavaScript", "output": "function Queue() {\n    \n            /**\n             * \u7edf\u8ba1\u6587\u4ef6\u6570\u3002\n             * * `numOfQueue` \u961f\u5217\u4e2d\u7684\u6587\u4ef6\u6570\u3002\n             * * `numOfSuccess` \u4e0a\u4f20\u6210\u529f\u7684\u6587\u4ef6\u6570\n             * * `numOfCancel` \u88ab\u79fb\u9664\u7684\u6587\u4ef6\u6570\n             * * `numOfProgress` \u6b63\u5728\u4e0a\u4f20\u4e2d\u7684\u6587\u4ef6\u6570\n             * * `numOfUploadFailed` \u4e0a\u4f20\u9519\u8bef\u7684\u6587\u4ef6\u6570\u3002\n             * * `numOfInvalid` \u65e0\u6548\u7684\u6587\u4ef6\u6570\u3002\n             * @property {Object} stats\n             */\n            this.stats = {\n                numOfQueue: 0,\n                numOfSuccess: 0,\n                numOfCancel: 0,\n                numOfProgress: 0,\n                numOfUploadFailed: 0,\n                numOfInvalid: 0\n            };\n    \n            // \u4e0a\u4f20\u961f\u5217\uff0c\u4ec5\u5305\u62ec\u7b49\u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\n            this._queue = [];\n    \n            // \u5b58\u50a8\u6240\u6709\u6587\u4ef6\n            this._map = {};\n        }"}, {"instruction": "Convert the CSS style value to a JSX style value\n\n@param {string} value CSS style value\n@return {string} JSX style value", "input": "JavaScript", "output": "function (value) {\n    if (isNumeric(value)) {\n      return value\n    } else if (value.startsWith(\"'\") || value.startsWith(\"\\\"\")) {\n      return value\n    } else {\n      return '\\'' + value.replace(/'/g, '\"') + '\\'';\n    }\n  }"}, {"instruction": "Function: setCellStyles\n\nAssigns the value for the given key in the styles of the given cells, or\nremoves the key from the styles if the value is null.\n\nParameters:\n\nmodel - <mxGraphModel> to execute the transaction in.\ncells - Array of <mxCells> to be updated.\nkey - Key of the style to be changed.\nvalue - New value for the given key.", "input": "JavaScript", "output": "function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Returns an object of show and hide triggers.\n\nIf a trigger is supplied,\nit is used to show the tooltip; otherwise, it will use the `trigger`\noption passed to the `$tooltipProvider.options` method; else it will\ndefault to the trigger supplied to this directive factory.\n\nThe hide trigger is based on the show trigger. If the `trigger` option\nwas passed to the `$tooltipProvider.options` method, it will use the\nmapped trigger from `triggerMap` or the passed trigger if the map is\nundefined; otherwise, it uses the `triggerMap` value of the show\ntrigger; else it will just use the show trigger.", "input": "JavaScript", "output": "function getTriggers ( trigger ) {\n        var show = trigger || options.trigger || defaultTriggerShow;\n        var hide = triggerMap[show] || show;\n        return {\n          show: show,\n          hide: hide\n        };\n      }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super) {\n            $super();\n            // if the user-specified min is greater than the max, switch them\n            if(this.userMin > this.userMax) {\n                var temp = this.userMin;\n                this.userMin = this.userMax;\n                this.userMax = temp;\n            }\n            this.adjustUserMin();\n            this.adjustUserMax();\n        }"}, {"instruction": "---\ncategory: utilities/DOM\n---\n\nWrapper function for window.matchMedia\n\nsee https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n\n@param {string} query - media query string\n@param {ReactComponent|DomNode} el - component or DOM node\n@returns {Object} a media query list object", "input": "JavaScript", "output": "function matchMedia (query, el) {\n  const node = findDOMNode(el) || document\n  return canUseDOM && ownerWindow(node).matchMedia(query)\n}"}, {"instruction": "Stops event observing for a particular event handler\n@method stopObserving\n@depracated Since 0.8.34. Use `off` instead.\n@param {String} eventName\n@param {Function} handler", "input": "JavaScript", "output": "function(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    if (this.__eventListeners[eventName]) {\n      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n    }\n  }"}, {"instruction": "An @import directive  @import \"lib\";  Depending on our environemnt, importing is done differently: In the browser, it's an XHR request, in Node, it would be a file-system operation. The function used for importing is stored in `import`, which we pass to the Import constructor.", "input": "JavaScript", "output": "function () {\n                var path, features, index = i;\n\n                save();\n\n                var dir = $re(/^@import?\\s+/);\n\n                var options = (dir ? this.importOptions() : null) || {};\n\n                if (dir && (path = this.entities.quoted() || this.entities.url())) {\n                    features = this.mediaFeatures();\n                    if ($char(';')) {\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, env.currentFileInfo);\n                    }\n                }\n\n                restore();\n            }"}, {"instruction": "This is the full set of types that any JSEP node can be. Store them here to save space when minified", "input": "JavaScript", "output": "function(message, index) {\n\t\t\tvar error = new Error(message + ' at character ' + index);\n\t\t\terror.index = index;\n\t\t\terror.description = message;\n\t\t\tthrow error;\n\t\t}"}, {"instruction": "Loads a configuration from a package.json file.\n@param {string} filePath The filename to load.\n@returns {Object} The configuration object from the file.\n@throws {Error} If the file cannot be read.\n@private", "input": "JavaScript", "output": "function loadPackageJSONConfigFile(filePath) {\n    debug(`Loading package.json config file: ${filePath}`);\n    try {\n        return loadJSONConfigFile(filePath).eslintConfig || null;\n    } catch (e) {\n        debug(`Error reading package.json file: ${filePath}`);\n        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n        throw e;\n    }\n}"}, {"instruction": "Creates a button that when clicked will enter into stereo-rendering mode for AR.\n\nStructure: <div><button></div>\n\n@param {function} enterARHandler\n@returns {Element} Wrapper <div>.", "input": "JavaScript", "output": "function createEnterARButton (clickHandler) {\n  var arButton;\n\n  // Create elements.\n  arButton = document.createElement('button');\n  arButton.className = ENTER_AR_BTN_CLASS;\n  arButton.setAttribute('title', 'Enter AR mode.');\n  arButton.setAttribute('aframe-injected', '');\n\n  arButton.addEventListener('click', function (evt) {\n    document.getElementsByClassName(ENTER_AR_BTN_CLASS)[0].style.display = 'none';\n    document.getElementsByClassName(EXIT_AR_BTN_CLASS)[0].style.display = 'inline-block';\n    clickHandler();\n  });\n  return arButton;\n}"}, {"instruction": "-- effects ---------------------------------------------- \nRuns all effects of a given type for the given set of property changes\non an instance.\n\n@param {!PropertyEffectsType} inst The instance with effects to run\n@param {Object} effects Object map of property-to-Array of effects\n@param {Object} props Bag of current property changes\n@param {Object=} oldProps Bag of previous values for changed properties\n@param {boolean=} hasPaths True with `props` contains one or more paths\n@param {*=} extraArgs Additional metadata to pass to effect function\n@return {boolean} True if an effect ran for this property\n@private", "input": "JavaScript", "output": "function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}"}, {"instruction": "---------------------------------------------------------------------", "input": "JavaScript", "output": "function buildHttpURL(uri) {\n    var port     = weinre_port\n    var pathname = weinre_pathname\n\n    if (pathname == \"/index.html\") pathname = \"/\"\n\n    if (weinre_protocol == \"file:\") {\n        return uri\n    }\n\n    else if (weinre_protocol == \"http:\") {\n        if (port != \"\") port = \":\" + port\n\n        return weinre_protocol + \"//\" + weinre_host + port + pathname + uri\n    }\n\n    else if (weinre_protocol == \"https:\") {\n        if (port != \"\") port = \":\" + port\n\n        return weinre_protocol + \"//\" + weinre_host + port + pathname + uri\n    }\n}"}, {"instruction": "Generates the index.html file\n@method writeIndex\n@param {Callback} cb The callback to execute after it's completed", "input": "JavaScript", "output": "function (cb) {\n            var self = this,\n                stack = new Y.Parallel();\n\n            Y.log('Preparing index.html', 'info', 'builder');\n            self.renderIndex(stack.add(function (html, view) {\n                stack.html = html;\n                stack.view = view;\n                if (self.options.dumpview) {\n                    Y.Files.writeFile(path.join(self.options.outdir, 'json', 'index.json'), JSON.stringify(view), stack.add(noop));\n                }\n                Y.Files.writeFile(path.join(self.options.outdir, 'index.html'), html, stack.add(noop));\n            }));\n\n            stack.done(function ( /* html, view */ ) {\n                Y.log('Writing index.html', 'info', 'builder');\n                cb(stack.html, stack.view);\n            });\n        }"}, {"instruction": "According to: http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/", "input": "JavaScript", "output": "function XdrStreamingTransport(transUrl) {\n  if (!XDRObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);\n}"}, {"instruction": "Test if current element contains block-level children\n@param {AbbreviationNode} node\n@return {Boolean}", "input": "JavaScript", "output": "function(node) {\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \n\t\t\t\t|| node.children.some(function(child) {\n\t\t\t\t\treturn this.isBlock(child);\n\t\t\t\t}, this);\n\t\t}"}, {"instruction": "Retrieves a value for given key.\n@param key the key to retrieve a value for\n@returns {Promise} a promise that would be resolved in case of successful operation or rejected with\nvalue of the error message if the operation fails. It resolves with a value that is either:\n<ul>\n<li>undefined - the entry does not exist</li>\n<li>any other - the entry exists and value contains the actually one</li>\n</ul>\n@public", "input": "JavaScript", "output": "function (key) {\n\t\t\t\tvar pGet,\n\t\t\t\t\toMsr = startMeasurements(\"get\", key);\n\n\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"]\");\n\n\t\t\t\tpGet = this._callInstanceMethod(\"get\", arguments).then(function callInstanceHandler(v) {\n\t\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"] done\");\n\t\t\t\t\toMsr.endAsync();\n\t\t\t\t\treturn v;\n\t\t\t\t}, function (e) {\n\t\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"] failed. Error: \" + e);\n\t\t\t\t\toMsr.endAsync();\n\t\t\t\t\tthrow e;\n\t\t\t\t});\n\t\t\t\toMsr.endSync();\n\t\t\t\treturn pGet;\n\t\t\t}"}, {"instruction": "/*\nEnable link preview popup when force touch is appled to link elements\n\n@return   bool", "input": "JavaScript", "output": "function() {\n                var deferred = $q.defer();\n\n                this.isAvailable().then(function() {\n                    window.ThreeDeeTouch.enableLinkPreview();\n                        deferred.resolve(true);\n                },\n                function(err) {\n                    deferred.reject(err);\n                });\n\n                return deferred.promise;\n            }"}, {"instruction": "Tag this match with type and return it for chaining\n\n@param {!RegExp.match} match  RegExp Match object with steps function parameters\nin array position 1 (and optionally 2).\n@param {number} type Either BEZIER or STEP\n@return {RegExp.match} Same object that was passed in.", "input": "JavaScript", "output": "function _tagMatch(match, type) {\n        switch (type) {\n        case BEZIER:\n            match.isBezier = true;\n            break;\n        case STEP:\n            match.isStep = true;\n            break;\n        }\n\n        return match;\n    }"}, {"instruction": "https://github.com/digi-trust/dt-cdn/wiki/Integration-Guide", "input": "JavaScript", "output": "function _getDigiTrustObject(key) {\n  function getDigiTrustId() {\n    let digiTrustUser = window.DigiTrust && (config.getConfig('digiTrustId') || window.DigiTrust.getUser({member: key}));\n    return (digiTrustUser && digiTrustUser.success && digiTrustUser.identity) || null;\n  }\n  let digiTrustId = getDigiTrustId();\n  // Verify there is an ID and this user has not opted out\n  if (!digiTrustId || (digiTrustId.privacy && digiTrustId.privacy.optout)) {\n    return null;\n  }\n  return digiTrustId;\n}"}, {"instruction": "/*\nconst sqRootBiggest = compose(Math.max, Math.sqrt, Math.trunc);\nsqRootBiggest(10, 5); // 3\nsqRootBiggest(7, 0, 16); // 4", "input": "JavaScript", "output": "function compose(fn1, fn2 /*, fn3, etc */) {\n  if (!arguments.length) {\n    throw new Error(\n      'expected at least one (and probably more) function arguments'\n    );\n  }\n  var fns = arguments;\n\n  return function() {\n    var result = fns[0].apply(this, arguments);\n    var len = fns.length;\n    for (var i = 1; i < len; i++) {\n      result = fns[i].call(this, result);\n    }\n    return result;\n  };\n}"}, {"instruction": "Creates an object with the entry names and file names\nto be transformed.\n\n@param {String} dirName - Name of the directory to read.\n\n@returns {Object} with webpack entry points.", "input": "JavaScript", "output": "function getEntries(dirName) {\n  const entries = {};\n  getExamples(dirName, (entryName, filename) => {\n    entries[entryName] = filename;\n  });\n  return entries;\n}"}, {"instruction": "clone the array to avoid modifying the original", "input": "JavaScript", "output": "function(callbacks, args) {\n            if (!callbacks.length) {\n                return typeof done === 'function' ? done() : true;\n            }\n\n            var callback = callbacks.shift();\n            callback.apply(context, args);\n\n            // Is the callback synchronous ?\n            if (callback.length === nbArguments) {\n                iterator(callbacks, args, done);\n            }\n        }"}, {"instruction": "------------------------------------------------------------------------------ Rule Definition ------------------------------------------------------------------------------ \nReports an \"Insert ...\" issue where text must be inserted.\n@param {RuleContext} context - The ESLint rule context.\n@param {number} offset - The source offset where to insert text.\n@param {string} text - The text to be inserted.\n@returns {void}", "input": "JavaScript", "output": "function reportInsert(context, offset, text) {\n  const pos = context.getSourceCode().getLocFromIndex(offset);\n  const range = [offset, offset];\n  context.report({\n    message: 'Insert `{{ code }}`',\n    data: { code: showInvisibles(text) },\n    loc: { start: pos, end: pos },\n    fix(fixer) {\n      return fixer.insertTextAfterRange(range, text);\n    }\n  });\n}"}, {"instruction": "Makes a call to reset user's account password by sms code and new password.\nThe sms code is sent by AV.User.requestPasswordResetBySmsCode.\n@param {String} code The sms code sent by AV.User.Cloud.requestSmsCode\n@param {String} password The new password.\n@return {Promise} A promise that will be resolved with the result\nof the function.", "input": "JavaScript", "output": "function(code, password) {\n        var json = { password: password };\n        var request = AVRequest(\n          'resetPasswordBySmsCode',\n          null,\n          code,\n          'PUT',\n          json\n        );\n        return request;\n      }"}, {"instruction": "Guard the specified event. If the event is not interesting, guard returns `true`. Otherwise, it returns `false`.", "input": "JavaScript", "output": "function(evt, view) {\n\n        if (evt.type === 'mousedown' && evt.button === 2) {\n            // handled as `contextmenu` type\n            return true;\n        }\n\n        if (this.options.guard && this.options.guard(evt, view)) {\n            return true;\n        }\n\n        if (evt.data && evt.data.guarded !== undefined) {\n            return evt.data.guarded;\n        }\n\n        if (view && view.model && (view.model instanceof joint.dia.Cell)) {\n            return false;\n        }\n\n        if (this.svg === evt.target || this.el === evt.target || $.contains(this.svg, evt.target)) {\n            return false;\n        }\n\n        return true;    // Event guarded. Paper should not react on it in any way.\n    }"}, {"instruction": "Allow this block to be managed with the keyboard", "input": "JavaScript", "output": "function() {\n    this.inner.setAttribute('tabindex', 0);\n    this.inner.addEventListener('keyup', (e) => {\n      if (e.target !== this.inner) { return; }\n\n      switch(e.keyCode) {\n        case 13:\n          this.mediator.trigger(\"block:create\", 'Text', null, this.el, { autoFocus: true });\n          break;\n        case 8:\n          this.onDeleteClick.call(this, new CustomEvent('click'));\n          return;\n      }\n    });\n  }"}, {"instruction": "Conditionally set basic authentication on a server request object.\n\n@method _auth\n@private\n@param {Object} request A superagent request object\n@param {Object} options A WPRequest _options object\n@param {Boolean} forceAuthentication whether to force authentication on the request\n@param {Object} A superagent request object, conditionally configured to use basic auth", "input": "JavaScript", "output": "function _auth( request, options, forceAuthentication ) {\n\t// If we're not supposed to authenticate, don't even start\n\tif ( ! forceAuthentication && ! options.auth && ! options.nonce ) {\n\t\treturn request;\n\t}\n\n\t// Enable nonce in options for Cookie authentication http://wp-api.org/guides/authentication.html\n\tif ( options.nonce ) {\n\t\trequest.set( 'X-WP-Nonce', options.nonce );\n\t\treturn request;\n\t}\n\n\t// Retrieve the username & password from the request options if they weren't provided\n\tconst username = options.username;\n\tconst password = options.password;\n\n\t// If no username or no password, can't authenticate\n\tif ( ! username || ! password ) {\n\t\treturn request;\n\t}\n\n\t// Can authenticate: set basic auth parameters on the request\n\treturn request.auth( username, password );\n}"}, {"instruction": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).\n\n@static\n@memberOf _\n@since 3.0.0\n@category Array\n@param {Array} array The array to query.\n@param {Function} [predicate=_.identity] The function invoked per iteration.\n@returns {Array} Returns the slice of `array`.\n@example\n\nvar users = [\n{ 'user': 'barney',  'active': true },\n{ 'user': 'fred',    'active': false },\n{ 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']", "input": "JavaScript", "output": "function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }"}, {"instruction": "This module provides the {@link jQuery#selectText} API.\n\n@namespace\n@name module:sap/ui/dom/jquery/selectText\n@public\n@since 1.58\n \nSets the text selection in the first element of the collection.\n\n<b>Note</b>: This feature is only supported for input element\u2019s type of text, search, url, tel and password.\n\n@param {int} iStart Start position of the selection (inclusive)\n@param {int} iEnd End position of the selection (exclusive)\n@return {jQuery} The jQuery collection\n@public\n@name jQuery#selectText\n@author SAP SE\n@since 0.9.0\n@function\n@requires module:sap/ui/dom/jquery/selectText", "input": "JavaScript", "output": "function selectText(iStart, iEnd) {\n\t\tvar oDomRef = this.get(0);\n\n\t\ttry {\n\t\t\t// In Chrome 58 and above selection start is set to selection end when the first parameter of a setSelectionRange call is negative.\n\t\t\tif (typeof (oDomRef.selectionStart) === \"number\") {\n\t\t\t\toDomRef.setSelectionRange(iStart > 0 ? iStart : 0, iEnd);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// note: some browsers fail to read the \"selectionStart\" and \"selectionEnd\" properties from HTMLInputElement, e.g.: The input element's type \"number\" does not support selection.\n\t\t}\n\n\t\treturn this;\n\t}"}, {"instruction": "Just a convenience wrapper to enable sourcemaps in an easier-to-read fashion\nthan `setDevTool()`.\n@TODO: Only sets the javascript sourcemaps now. Would be nice to make loaders\nenable their specific sourcemaps when `sourceMaps()` is used.\n\n@param {string} [devtool]\n@return {Function}", "input": "JavaScript", "output": "function sourceMaps(devtool = 'cheap-module-eval-source-map') {\n  return (context, util) => {\n    context.sourceMaps = true\n\n    return util.merge({ devtool })\n  }\n}"}, {"instruction": "PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END", "input": "JavaScript", "output": "function distinctUntilKeyChanged(key, compare) {\n    return Object(_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__[\"distinctUntilChanged\"])(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}"}, {"instruction": "Exports the passed entities to JSON.\n@param passedConfiguration the object having the keys:\n- entities: the entity objects to export (key: entity name, value: the entity),\n- forceNoFiltering: whether to filter out unchanged entities,\n- application:\n- forSeveralApplications: whether more than one application have to be generated,\n- name: application base name,\n- type: application type\n@returns The exported entities.", "input": "JavaScript", "output": "function exportEntities(passedConfiguration) {\n  init(passedConfiguration);\n  createJHipsterJSONFolder(\n    passedConfiguration.application.forSeveralApplications ? configuration.application.name : ''\n  );\n  if (!configuration.forceNoFiltering) {\n    filterOutUnchangedEntities();\n  }\n  if (shouldFilterOutEntitiesBasedOnMicroservice()) {\n    filterOutEntitiesByMicroservice();\n  }\n  writeEntities(passedConfiguration.application.forSeveralApplications ? configuration.application.name : '');\n  return Object.values(configuration.entities);\n}"}, {"instruction": "A simple router function that does nothing but respond \"OK\". Can be used for load balancer health checks, for example.", "input": "JavaScript", "output": "function ping(req, res) {\n  if (url.parse(req.url).pathname == '/ping') {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('OK');\n    return true;\n  }\n  return false;\n}"}, {"instruction": "Register event handler to suppress event within busy section", "input": "JavaScript", "output": "function registerInteractionHandler(fnHandler) {\n\t\t\tvar aSuppressHandler = [],\n\t\t\t\toParentDOM = this.$parent.get(0),\n\t\t\t\toBlockLayerDOM = this.$blockLayer.get(0);\n\n\t\t\tfor (var i = 0; i < aPreventedEvents.length; i++) {\n\t\t\t\t// Add event listeners with \"useCapture\" settings to suppress events before dispatching/bubbling starts\n\t\t\t\toParentDOM.addEventListener(aPreventedEvents[i], fnHandler, {\n\t\t\t\t\tcapture: true,\n\t\t\t\t\tpassive: false\n\t\t\t\t});\n\t\t\t\taSuppressHandler.push(EventTriggerHook.suppress(aPreventedEvents[i], oParentDOM, oBlockLayerDOM));\n\t\t\t}\n\t\t\t//for jQuery triggered events we also need the keydown handler\n\t\t\tthis.$blockLayer.bind('keydown', fnHandler);\n\n\t\t\treturn aSuppressHandler;\n\t\t}"}, {"instruction": "This class represents a single search node in the exploration tree for\nA* algorithm.\n\n@param {Object} node  original node in the graph", "input": "JavaScript", "output": "function NodeSearchState(node) {\n  this.node = node;\n\n  // How we came to this node?\n  this.parent = null;\n\n  this.closed = false;\n  this.open = 0;\n\n  this.distanceToSource = Number.POSITIVE_INFINITY;\n  // the f(n) = g(n) + h(n) value\n  this.fScore = Number.POSITIVE_INFINITY;\n\n  // used to reconstruct heap when fScore is updated.\n  this.heapIndex = -1;\n}"}, {"instruction": "**************************************************\nThis class is a scanner for the visitor pattern. *\n************************************************** \nConstructor, parameters are:\nvisitor: the visitor implementation, it must be a class with a visit(element) method.\nscanElementsOnly: a flag telling whether to scan html elements only or all html nodes.", "input": "JavaScript", "output": "function DocumentScanner(visitor, scanElementsOnly) {\n\tthis.visitor = visitor;\n\tthis.scanElementsOnly = scanElementsOnly;\n\n\t/**\n\t * Scans the element\n\t */\n\tthis.scan = function(element) {\n\t\tif (this.visitor.visit(element)) {\n\t\t\t// visit child elements\n\t\t\tvar children = element.childNodes;\n\t\t\tfor(var i = 0; i < children.length; i++) {\n\t\t\t\tif(!this.scanElementsOnly || children[i].nodeType == 1)\n\t\t\t\t\tthis.scan(children[i]);\n\t\t\t}\n\t\t}\t\t\n\t}\t\n}"}, {"instruction": "Initialize indent for node\n\n@returns {Node}", "input": "JavaScript", "output": "function() {\r\n            var $this = $(this);\r\n            $this.find('.treegrid-indent').remove();\r\n            var tpl = $this.treegrid('getSetting', 'indentTemplate');\r\n            var expander = $this.find('.treegrid-expander');\r\n            var depth = $this.treegrid('getDepth');\r\n            for (var i = 0; i < depth; i++) {\r\n                $(tpl).insertBefore(expander);\r\n            }\r\n            return $this;\r\n        }"}, {"instruction": "Z Sorting function\n@ignore", "input": "JavaScript", "output": "function _sortZ(a, b) {\n         return b.pos && a.pos ? b.pos.z - a.pos.z : a.pos ? -Infinity : Infinity;\n       }"}, {"instruction": "Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points. @deprecated @param rhs Right hand side vector. @return Solution vector.", "input": "JavaScript", "output": "function(rhs) {\n\n            console.warn('deprecated');\n\n            var n = rhs.length;\n            // `x` is a solution vector.\n            var x = [];\n            var tmp = [];\n            var b = 2.0;\n\n            x[0] = rhs[0] / b;\n\n            // Decomposition and forward substitution.\n            for (var i = 1; i < n; i++) {\n                tmp[i] = 1 / b;\n                b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];\n                x[i] = (rhs[i] - x[i - 1]) / b;\n            }\n\n            for (i = 1; i < n; i++) {\n                // Backsubstitution.\n                x[n - i - 1] -= tmp[n - i] * x[n - i];\n            }\n\n            return x;\n        }"}, {"instruction": "Convert a list back to a js native array", "input": "JavaScript", "output": "function listAsArray(list){\n\n   return foldR( function(arraySoFar, listItem){\n      \n      arraySoFar.unshift(listItem);\n      return arraySoFar;\n           \n   }, [], list );\n   \n}"}, {"instruction": "/ ZUI change begin", "input": "JavaScript", "output": "function(bar, placement) {\n            var options = this.options;\n            placement = placement || options.scaleValuePlacement;\n            placement = placement ? placement.toLowerCase() : 'auto';\n            if(placement === 'auto') {\n                placement = bar.y < 15 ? 'insdie' : 'outside';\n            }\n\n            var y = placement === 'insdie' ? (bar.y + 10) : (bar.y - 10);\n            var ctx = this.chart.ctx;\n            ctx.font = helpers.fontString(options.scaleFontSize, options.scaleFontStyle, options.scaleFontFamily);\n            ctx.textBaseline = \"middle\";\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = options.scaleFontColor;\n            ctx.fillText(bar.value, bar.x, y);\n        }"}, {"instruction": "\"A collapsed block prop is either a collapsed line break that is not an extraneous line break, or an Element that is an inline node and whose children are all either invisible or collapsed block props and that has at least one child that is a collapsed block prop.\"", "input": "JavaScript", "output": "function isCollapsedBlockProp(node) {\n\tif (isCollapsedLineBreak(node)\n\t&& !isExtraneousLineBreak(node)) {\n\t\treturn true;\n\t}\n\n\tif (!isInlineNode(node)\n\t|| node.nodeType != Node.ELEMENT_NODE) {\n\t\treturn false;\n\t}\n\n\tvar hasCollapsedBlockPropChild = false;\n\tfor (var i = 0; i < node.childNodes.length; i++) {\n\t\tif (!isInvisible(node.childNodes[i])\n\t\t&& !isCollapsedBlockProp(node.childNodes[i])) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isCollapsedBlockProp(node.childNodes[i])) {\n\t\t\thasCollapsedBlockPropChild = true;\n\t\t}\n\t}\n\n\treturn hasCollapsedBlockPropChild;\n}"}, {"instruction": "Indicates if the current application is a variant of an existing one\n\n@param {sap.ui.core.Control} oControl - SAPUI5 control\n@returns {boolean} true if it's an application variant\n@public\n@function\n@name sap.ui.fl.Utils.isApplicationVariant", "input": "JavaScript", "output": "function (oControl) {\n\t\t\tvar sFlexReference = Utils.getComponentClassName(oControl);\n\t\t\tvar oAppComponent = Utils.getAppComponentForControl(oControl);\n\t\t\tvar sComponentName = Utils.getComponentName(oAppComponent);\n\t\t\treturn sFlexReference !== sComponentName;\n\t\t}"}, {"instruction": "Returns value of the header with the specified <code>sHeaderName</code> from\nthe specified <code>sHeaders</code> section of MIME part.\n\n@param {string} sHeaders\nSection of MIME part representing HTTP headers\n@param {string} sHeaderName\nName of HTTP header in lower case\n@returns {string} The HTTP header value", "input": "JavaScript", "output": "function getHeaderValue(sHeaders, sHeaderName) {\n\t\tvar i,\n\t\t\taHeaderParts,\n\t\t\taHeaders = sHeaders.split(\"\\r\\n\");\n\n\t\tfor (i = 0; i < aHeaders.length; i += 1) {\n\t\t\taHeaderParts = aHeaders[i].split(\":\");\n\n\t\t\tif (aHeaderParts[0].toLowerCase().trim() === sHeaderName) {\n\t\t\t\treturn aHeaderParts[1].trim();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "returns the key used for calculating signature", "input": "JavaScript", "output": "function getSigningKey(date, region, secretKey) {\n  if (!isObject(date)) {\n    throw new TypeError('date should be of type \"object\"')\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"')\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"')\n  }\n  var dateLine = makeDateShort(date),\n    hmac1 = Crypto.createHmac('sha256', 'AWS4' + secretKey).update(dateLine).digest(),\n    hmac2 = Crypto.createHmac('sha256', hmac1).update(region).digest(),\n    hmac3 = Crypto.createHmac('sha256', hmac2).update('s3').digest()\n  return Crypto.createHmac('sha256', hmac3).update('aws4_request').digest()\n}"}, {"instruction": "Extracts metadata from metadata map by scope key\n@param {object} mMetadata metadata map received from loader\n@param {string} sScopeKey scope name to be extracted\n@private", "input": "JavaScript", "output": "function getScopeBasedDesignTime(mMetadata, sScopeKey) {\n\t\tvar mResult = mMetadata;\n\n\t\tif (\"default\" in mMetadata) {\n\t\t\tmResult = merge(\n\t\t\t\t{},\n\t\t\t\tmMetadata.default,\n\t\t\t\tsScopeKey !== \"default\" && mMetadata[sScopeKey] || null\n\t\t\t);\n\t\t}\n\n\t\treturn mResult;\n\t}"}, {"instruction": "Traverses all the children of the specified node\n\n@param {Node} node", "input": "JavaScript", "output": "function (node) {\n    this.level++;\n    for (var i = 0, count = node.childNodes.length; i < count; i++) {\n      this._visit(node.childNodes[i]);\n    }\n    this.level--;\n  }"}, {"instruction": "Create a new has one instance.", "input": "JavaScript", "output": "function HasOne(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }"}, {"instruction": "Built {type.Componen} from gcc user data\n@param userData {type.Component} GCC data from client\n@returns {type.Component} GCC encoded client user data", "input": "JavaScript", "output": "function writeConferenceCreateRequest (userData) {\n    var userDataStream = new type.Stream(userData.size());\n    userData.write(userDataStream);\n    \n    return new type.Component([\n\t    per.writeChoice(0), per.writeObjectIdentifier(t124_02_98_oid),\n\t    per.writeLength(userData.size() + 14), per.writeChoice(0),\n\t    per.writeSelection(0x08), per.writeNumericString(\"1\", 1), per.writePadding(1),\n\t    per.writeNumberOfSet(1), per.writeChoice(0xc0),\n\t    per.writeOctetStream(new Buffer(h221_cs_key), 4), per.writeOctetStream(userDataStream.getValue())\n    ]);\n}"}, {"instruction": "Sticky Sidebar Plugin Defintion.\n@param {Object|String} - config", "input": "JavaScript", "output": "function _jQueryPlugin(config){\n      return this.each(function(){\n        var $this = plugin(this),\n          data = plugin(this).data(DATA_NAMESPACE);\n\n          if( ! data ){\n            data = new StickySidebar(this, typeof config == 'object' && config);\n            $this.data(DATA_NAMESPACE, data);\n          }\n\n          if( 'string' === typeof config){\n            if (data[config] === undefined && ['destroy', 'updateSticky'].indexOf(config) === -1)\n              throw new Error('No method named \"'+ config +'\"');\n\n            data[config]();\n          }\n      });\n    }"}, {"instruction": "Fix Mode7 comments when they are bad", "input": "JavaScript", "output": "function (text) {\n        if (text.charAt(0) === '[') {\n            switch (text.charAt(text.length - 1)) {\n                case ']':\n                    return text;\n                case '\"':\n                    return text + ']';\n                case ',':\n                    return text.substring(0, text.length - 1) + '\"]';\n                default:\n                    return _formatmode7(text.substring(0, text.length - 1));\n            }\n        } else {\n            return text;\n        }\n    }"}, {"instruction": "Determines the nearest ancestor of a node that is scrollable.\n\nNOTE: This can be expensive if used repeatedly or on a node nested deeply.\n\n@param {?DOMNode} node Node from which to start searching.\n@return {?DOMWindow|DOMElement} Scroll parent of the supplied node.", "input": "JavaScript", "output": "function(node) {\n    if (!node) {\n      return null;\n    }\n    var ownerDocument = node.ownerDocument;\n    while (node && node !== ownerDocument.body) {\n      if (_isNodeScrollable(node, 'overflow') ||\n          _isNodeScrollable(node, 'overflowY') ||\n          _isNodeScrollable(node, 'overflowX')) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return ownerDocument.defaultView || ownerDocument.parentWindow;\n  }"}, {"instruction": "Doc version select", "input": "JavaScript", "output": "function initVersionSelect () {\n    // version select\n    var versionSelect = document.querySelector('.version-select')\n    versionSelect && versionSelect.addEventListener('change', function (e) {\n      var version = e.target.value\n      var section = window.location.pathname.match(/\\/v\\d\\/(\\w+?)\\//)[1]\n      if (version === 'SELF') return\n      window.location.assign(\n        'http://' +\n        version +\n        (version && '.') +\n        'vuejs.org/' + section + '/'\n      )\n    })\n  }"}, {"instruction": "Returns search options for sifter (the system\nfor scoring and sorting results).\n\n@see https://github.com/brianreavis/sifter.js\n@return {object}", "input": "JavaScript", "output": "function() {\n\t\t\tvar settings = this.settings;\n\t\t\tvar sort = settings.sortField;\n\t\t\tif (typeof sort === 'string') {\n\t\t\t\tsort = [{field: sort}];\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tfields      : settings.searchField,\n\t\t\t\tconjunction : settings.searchConjunction,\n\t\t\t\tsort        : sort\n\t\t\t};\n\t\t}"}, {"instruction": "Recolor an image using 2d canvas", "input": "JavaScript", "output": "function recolorBillboard(img, color) {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  // Copy the image contents to the canvas\n  var context = canvas.getContext(\"2d\");\n  context.drawImage(img, 0, 0);\n  var image = context.getImageData(0, 0, canvas.width, canvas.height);\n  var normClr = [color.red, color.green, color.blue, color.alpha];\n\n  var length = image.data.length; //pixel count * 4\n  for (var i = 0; i < length; i += 4) {\n    for (var j = 0; j < 4; j++) {\n      image.data[j + i] *= normClr[j];\n    }\n  }\n\n  context.putImageData(image, 0, 0);\n  return canvas.toDataURL();\n  //    return context.getImageData(0, 0, canvas.width, canvas.height);\n}"}, {"instruction": "Message-Id header", "input": "JavaScript", "output": "function do_msgid_header (cb) {\n        const msgid = trans.header.get('message-id');\n        const mmatch = /@([^>]+)>/.exec(msgid);\n        if (mmatch) {\n            return plugin.do_lookups(connection, cb, mmatch[1], 'msgid');\n        }\n        cb();\n    }"}, {"instruction": "routeChat handler. Receives a stream of message/location pairs, and responds\nwith a stream of all previous messages at each of those locations.\n@param {Duplex} call The stream for incoming and outgoing messages", "input": "JavaScript", "output": "function routeChat(call) {\n  call.on('data', function(note) {\n    var key = pointKey(note.getLocation());\n    /* For each note sent, respond with all previous notes that correspond to\n     * the same point */\n    if (route_notes.hasOwnProperty(key)) {\n      _.each(route_notes[key], function(note) {\n        call.write(note);\n      });\n    } else {\n      route_notes[key] = [];\n    }\n    // Then add the new note to the list\n    route_notes[key].push(note);\n  });\n  call.on('end', function() {\n    call.end();\n  });\n}"}, {"instruction": "Find the symbol name of an AssignmentNode. Recurses into the chain of\nobjects to the root object.\n@param {AssignmentNode} node\n@return {string | null} Returns the name when found, else returns null.", "input": "JavaScript", "output": "function findSymbolName (node) {\n  const math = getMath()\n  let n = node\n\n  while (n) {\n    if (math.isSymbolNode(n)) {\n      return n.name\n    }\n    n = n.object\n  }\n\n  return null\n}"}, {"instruction": "Service resolution helper.\n\nIt is used both by client and server channels, to respectively decode errors\nand responses, or requests.", "input": "JavaScript", "output": "function Adapter(clientSvc, serverSvc, hash, isRemote) {\n  this._clientSvc = clientSvc;\n  this._serverSvc = serverSvc;\n  this._hash = hash; // Convenience to access it when creating handshakes.\n  this._isRemote = !!isRemote;\n  this._readers = createReaders(clientSvc, serverSvc);\n}"}, {"instruction": "Orders the data by date for consumption on the chart tooltip\n@param  {areaChartData} data    Chart data\n@return {Object[]}               Chart data ordered by date\n@private", "input": "JavaScript", "output": "function getDataByDate(data) {\n            return d3Collection.nest()\n                .key(getDate)\n                .entries(\n                    data.sort((a, b) => a.date - b.date)\n                )\n                .map(d => {\n                    return assign({}, d, {\n                        date: new Date(d.key)\n                    });\n                });\n\n            // let b =  d3Collection.nest()\n            //                     .key(getDate).sortKeys(d3Array.ascending)\n            //                     .entries(data);\n        }"}, {"instruction": "isn't it redundant? app.listen(8888);", "input": "JavaScript", "output": "function writeToDisk(dataURL, fileName) {\n    var fileExtension = fileName.split('.').pop(),\n        fileRootNameWithBase = './uploads/' + fileName,\n        filePath = fileRootNameWithBase,\n        fileID = 2,\n        fileBuffer;\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n        filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension;\n        fileID += 1;\n    }\n\n    dataURL = dataURL.split(',').pop();\n    fileBuffer = new Buffer(dataURL, 'base64');\n    fs.writeFileSync(filePath, fileBuffer);\n\n    console.log('filePath', filePath);\n}"}, {"instruction": "Decortaor for `sync` component helper.\n@param   {string}          path - Path in store\n@returns {VueDecorator}         - Vue decortaor to be used in cue class component.", "input": "JavaScript", "output": "function Sync(path) {\n  if (typeof path !== 'string' || arguments.length > 1) { throw new Error('Property decorators can be used for single property access') }\n  return createDecorator((options, key) => {\n    if (!options.computed) options.computed = {}\n    options.computed[key] = sync(path)\n  })\n}"}, {"instruction": "Replace table.\n@param {jQuery} $table - table jQuery element\n@param {Array.<Array.<object>>} tableData - table data\n@returns {jQuery}\n@ignore", "input": "JavaScript", "output": "function replaceTable($table, tableData) {\n  const cellIndexData = tableDataHandler.createCellIndexData(tableData);\n  const renderData = tableDataHandler.createRenderData(tableData, cellIndexData);\n  const $newTable = $(createTableHtml(renderData));\n\n  $table.replaceWith($newTable);\n\n  return $newTable;\n}"}, {"instruction": "*\n@method insert(str, [index] = length)\n@returns String\n@short Adds `str` at [index]. Allows negative values.\n\n@example\n\n'dopamine'.insert('e', 3)       -> dopeamine\n'spelling eror'.insert('r', -3) -> spelling error\n\n@param {string} str\n@param {number} [index]\n\n*", "input": "JavaScript", "output": "function(str, substr, index) {\n    index = isUndefined(index) ? str.length : index;\n    return str.slice(0, index) + substr + str.slice(index);\n  }"}, {"instruction": "finds the given at declaration value\n@param  {Array[Object]} decls the decls from an element\n@param  {String}        the prop\n@return {Any}           the found value", "input": "JavaScript", "output": "function findAtDecl (decls, prop) {\n  const foundDecls = decls.filter((decl) => {\n    return (isPlainObject(decl) &&\n          Object.keys(decl).length > 0 &&\n          Object.keys(decl)[0] === `@${prop}`) || decl === `@${prop}`\n  })\n\n  if (foundDecls.length === 0) { return }\n\n  const decl = foundDecls[0]\n\n  return isPlainObject(decl) ? Object.values(decl)[0] : true\n}"}, {"instruction": "show goto", "input": "JavaScript", "output": "function showGoto(targets) {\n        if (!_currentMenu) {\n            return;\n        }\n        _currentMenu.createBody();\n        var i;\n        for (i in targets) {\n            _currentMenu.addItem(targets[i]);\n        }\n        _currentMenu.show();\n    }"}, {"instruction": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n**************************************************************************** /* global Reflect, Promise", "input": "JavaScript", "output": "function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return extendStatics(d, b);\n}"}, {"instruction": "The non-streamed request handler is only for the cases where neither the request or response can have streams. In this case, a req.stream indicates that the request is fragmented across multiple frames.", "input": "JavaScript", "output": "function RequestCallbackHandler(callback, thisp) {\n    var self = this;\n    self.callback = callback;\n    self.thisp = thisp || self;\n}"}, {"instruction": "Find dimension by property name\n\n@param {string}\nsName Property name\n@returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object to\nwhich the given property name is related, because the property\nholds the dimension key, its text, or is an attribute of this\ndimension. If no such dimension exists, null is returned.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResult#findDimensionByPropertyName", "input": "JavaScript", "output": "function(sName) {\n\t\t\tif (this._oDimensionSet[sName]) { // the easy case\n\t\t\t\treturn this._oDimensionSet[sName];\n\t\t\t}\n\n\t\t\tfor ( var sDimensionName in this._oDimensionSet) {\n\t\t\t\tvar oDimension = this._oDimensionSet[sDimensionName];\n\t\t\t\tvar oTextProperty = oDimension.getTextProperty();\n\t\t\t\tif (oTextProperty && oTextProperty.name == sName) {\n\t\t\t\t\treturn oDimension;\n\t\t\t\t}\n\t\t\t\tif (oDimension.findAttributeByName(sName)) {\n\t\t\t\t\treturn oDimension;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}"}, {"instruction": "Function: create\n\nCreates the cell path for the given cell. The cell path is a\nconcatenation of the indices of all ancestors on the (finite) path to\nthe root, eg. \"0.0.0.1\".\n\nParameters:\n\ncell - Cell whose path should be returned.", "input": "JavaScript", "output": "function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t}"}, {"instruction": "Populate `_hostNode` on the rendered host/text component with the given\nDOM node. The passed `inst` can be a composite.", "input": "JavaScript", "output": "function precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}"}, {"instruction": "Focus on the open extension tab", "input": "JavaScript", "output": "function focusTab(tabId) {\n    var updateProperties = { \"active\": true };\n    chrome.tabs.update(tabId, updateProperties, function (tab) { });\n  }"}, {"instruction": "Block for when broadcast received.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"id\": \"event_whenbroadcastreceived\",\n      \"message0\": Blockly.Msg.EVENT_WHENBROADCASTRECEIVED,\n      \"args0\": [\n        {\n          \"type\": \"field_variable\",\n          \"name\": \"BROADCAST_OPTION\",\n          \"variableTypes\": [Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE],\n          \"variable\": Blockly.Msg.DEFAULT_BROADCAST_MESSAGE_NAME\n        }\n      ],\n      \"category\": Blockly.Categories.event,\n      \"extensions\": [\"colours_event\", \"shape_hat\"]\n    });\n  }"}, {"instruction": "Return a three.js constant determining blending\n\n@param {string} [blending=normal]\n- `none`, additive`, `subtractive`,`multiply` or `normal`.\n@returns {number}", "input": "JavaScript", "output": "function parseBlending (blending) {\n  switch (blending) {\n    case 'none': {\n      return THREE.NoBlending;\n    }\n    case 'additive': {\n      return THREE.AdditiveBlending;\n    }\n    case 'subtractive': {\n      return THREE.SubtractiveBlending;\n    }\n    case 'multiply': {\n      return THREE.MultiplyBlending;\n    }\n    default: {\n      return THREE.NormalBlending;\n    }\n  }\n}"}, {"instruction": "23.3.3.3 WeakMap.prototype.get(key)", "input": "JavaScript", "output": "function get(key) {\n        var state = getInternalState(this);\n        if (isObject(key)) {\n          var data = getWeakData(key);\n          if (data === true) return uncaughtFrozenStore(state).get(key);\n          return data ? data[state.id] : undefined;\n        }\n      }"}, {"instruction": "ServiceCatalog class\n\n@description wrapper for the service catalog response from keystone\n\n@param {object}  catalog     the raw data to parse into the catalog\n@constructor", "input": "JavaScript", "output": "function (catalog) {\n  var self = this;\n\n  self.services = {};\n\n  _.each(catalog, function (service) {\n    // Special hack for rackspace with two compute types\n    if (service.type === 'compute' && service.name === 'cloudServers') {\n      return;\n    }\n\n    self.services[service.name] = new Service(service);\n  });\n}"}, {"instruction": "Draws the data entries inside the tooltip\n@param  {Object} dataPoint   Data entry from to take the info\n@return void\n@private", "input": "JavaScript", "output": "function updateContent(dataPoint){\n            var topics = dataPoint[topicLabel];\n\n            // sort order by topicsOrder array if passed\n            if (topicsOrder.length) {\n                topics = _sortByTopicsOrder(topics);\n            } else if (topics.length && topics[0].name) {\n                topics = _sortByAlpha(topics);\n            }\n\n            cleanContent();\n            updateTitle(dataPoint);\n            resetSizeAndPositionPointers();\n            topics.forEach(updateTopicContent);\n        }"}, {"instruction": "Sets which annotations types are shown in the annotation ruler.  Annotations are visible by default.\n\n@param {Object} types a hash table mapping annotation type to visibility (i.e. AnnotationType.ANNOTATION_INFO -> true).\n@since 14.0", "input": "JavaScript", "output": "function(types) {\n\t\t\tif (textUtil.compare(this._annotationTypesVisible, types)) return;\n\t\t\tthis._annotationTypesVisible = types;\n\t\t\tif (!this._annotationRuler || !this._textView || !this._annotationRulerVisible) { return; }\n\t\t\tthis._annotationRuler.setAnnotationTypeVisible(types);\n\t\t\tthis._textView.redrawLines(0, undefined, this._annotationRuler);\n\t\t}"}, {"instruction": "JavaScript code to be evaluated  `window.location.href`", "input": "JavaScript", "output": "function () {\n                    var str, j = i, e;\n\n                    if (input.charAt(j) === '~') { j++; e = true; } // Escaped strings\n                    if (input.charAt(j) !== '`') { return; }\n                    if (env.javascriptEnabled !== undefined && !env.javascriptEnabled) {\n                        error(\"You are using JavaScript, which has been disabled.\");\n                    }\n\n                    if (e) { $char('~'); }\n\n                    str = $re(/^`([^`]*)`/);\n                    if (str) {\n                        return new(tree.JavaScript)(str[1], i, e);\n                    }\n                }"}, {"instruction": "Hash Password Setter", "input": "JavaScript", "output": "function hashPassword (data) {\n  var password = data.password\n  var hash = data.hash\n\n  if (password) {\n    var salt = bcrypt.genSaltSync(10)\n    hash = bcrypt.hashSync(password, salt)\n  }\n\n  this.hash = hash\n}"}, {"instruction": "gets the metadata that should be printed next to each event", "input": "JavaScript", "output": "function getEventMetadata({ event, payload }) {\n  if (event === 'state') {\n    return chalk.bold(payload.value);\n  }\n\n  if (event === 'instance-start' || event === 'instance-stop') {\n    if (payload.dc != null) {\n      return chalk.green(`(${payload.dc})`);\n    }\n  }\n\n  return '';\n}"}, {"instruction": "Built-in hook to upload PIXI.Graphics to the GPU.\n\n@private\n@param {PIXI.Renderer} renderer - instance of the webgl renderer\n@param {PIXI.DisplayObject} item - Item to check\n@return {boolean} If item was uploaded.", "input": "JavaScript", "output": "function uploadGraphics(renderer, item)\n{\n    if (item instanceof Graphics)\n    {\n        // if the item is not dirty and already has webgl data, then it got prepared or rendered\n        // before now and we shouldn't waste time updating it again\n        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID])\n        {\n            renderer.plugins.graphics.updateGraphics(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}"}, {"instruction": "Crop connection if connection cropping is provided.\n\n@param {Connection} connection\n@param {Array<Point>} newWaypoints\n\n@return {Array<Point>} cropped connection waypoints", "input": "JavaScript", "output": "function cropConnection(connection, newWaypoints) {\n\n    // crop connection, if docking service is provided only\n    if (!connectionDocking) {\n      return newWaypoints;\n    }\n\n    var oldWaypoints = connection.waypoints,\n        croppedWaypoints;\n\n    // temporary set new waypoints\n    connection.waypoints = newWaypoints;\n\n    croppedWaypoints = connectionDocking.getCroppedWaypoints(connection);\n\n    // restore old waypoints\n    connection.waypoints = oldWaypoints;\n\n    return croppedWaypoints;\n  }"}, {"instruction": "Step through all source packages and transpose dependencies on the build function to be dependent on the function call instead, ensuring that the function is finally called. Although we could simply push the call body into the build package, this way allows the source to be faithfully rebuilt no matter where the build call occurs.", "input": "JavaScript", "output": "function transposeDependencies() {\n        sourcePackages.forEach(function(p) {\n          if (p.name === fnCallName) {\n            // Do not transpose the call package itself. After this loop\n            // there should be only one dependency on the build function anymore.\n            return;\n          }\n          var index = p.dependencies.indexOf(fnName);\n          if (index !== -1) {\n            p.dependencies.splice(index, 1, fnCallName);\n          }\n        });\n      }"}, {"instruction": "Get stylesheets from `documentFragment`\n\n@param {Object} options configuration options of `loadCssom`\n@returns {Array<Object>}", "input": "JavaScript", "output": "function getStylesheetsFromDocumentFragment(options) {\n\tconst { rootNode, convertDataToStylesheet } = options;\n\treturn (\n\t\tArray.from(rootNode.children)\n\t\t\t.filter(filerStyleAndLinkAttributesInDocumentFragment)\n\t\t\t// Reducer to convert `<style></style>` and `<link>` references to `CSSStyleSheet` object\n\t\t\t.reduce((out, node) => {\n\t\t\t\tconst nodeName = node.nodeName.toUpperCase();\n\t\t\t\tconst data = nodeName === 'STYLE' ? node.textContent : node;\n\t\t\t\tconst isLink = nodeName === 'LINK';\n\t\t\t\tconst stylesheet = convertDataToStylesheet({\n\t\t\t\t\tdata,\n\t\t\t\t\tisLink,\n\t\t\t\t\troot: rootNode\n\t\t\t\t});\n\t\t\t\tout.push(stylesheet.sheet);\n\t\t\t\treturn out;\n\t\t\t}, [])\n\t);\n}"}, {"instruction": "Move the access token from the request body to the request header", "input": "JavaScript", "output": "function formatRequest(p, qs) {\n\t\tvar token = qs.access_token;\n\t\tdelete qs.access_token;\n\t\tp.headers.Authorization = 'Bearer ' + token;\n\n\t\treturn true;\n\t}"}, {"instruction": "Utils", "input": "JavaScript", "output": "function removeFromArray(array, value) {\n    if (array.includes(value)) {\n      var value_index = array.indexOf(value);\n      array.splice(value_index, 1);\n    }\n\n    return array;\n  }"}, {"instruction": "Sets up the current instance using members from the passed data object.\n\n@param {Object} aData               An object with members of the duration\n@param {Number} aData.weeks         Duration in weeks\n@param {Number} aData.days          Duration in days\n@param {Number} aData.hours         Duration in hours\n@param {Number} aData.minutes       Duration in minutes\n@param {Number} aData.seconds       Duration in seconds\n@param {Boolean} aData.isNegative   If true, the duration is negative", "input": "JavaScript", "output": "function fromData(aData) {\n      var propsToCopy = [\"weeks\", \"days\", \"hours\",\n                         \"minutes\", \"seconds\", \"isNegative\"];\n      for (var key in propsToCopy) {\n        /* istanbul ignore if */\n        if (!propsToCopy.hasOwnProperty(key)) {\n          continue;\n        }\n        var prop = propsToCopy[key];\n        if (aData && prop in aData) {\n          this[prop] = aData[prop];\n        } else {\n          this[prop] = 0;\n        }\n      }\n    }"}, {"instruction": "The worker receives a message to load the index and to query the index", "input": "JavaScript", "output": "function handleMessage(message) {\n  var type = message.data.type;\n  var id = message.data.id;\n  var payload = message.data.payload;\n  switch(type) {\n    case 'load-index':\n      makeRequest(SEARCH_TERMS_URL, function(searchInfo) {\n        index = createIndex(loadIndex(searchInfo));\n        self.postMessage({type: type, id: id, payload: true});\n      });\n      break;\n    case 'query-index':\n      self.postMessage({type: type, id: id, payload: {query: payload, results: queryIndex(payload)}});\n      break;\n    default:\n      self.postMessage({type: type, id: id, payload: {error: 'invalid message type'}})\n  }\n}"}, {"instruction": "Reports a given function node if the node matches the following patterns.\n\n- Not allowed by options.\n- The body is empty.\n- The body doesn't have any comments.\n\n@param {ASTNode} node - A function node to report. This is one of\nan ArrowFunctionExpression, a FunctionDeclaration, or a\nFunctionExpression.\n@returns {void}", "input": "JavaScript", "output": "function reportIfEmpty(node) {\n            const kind = getKind(node);\n            const name = astUtils.getFunctionNameWithKind(node);\n            const innerComments = sourceCode.getTokens(node.body, {\n                includeComments: true,\n                filter: astUtils.isCommentToken\n            });\n\n            if (allowed.indexOf(kind) === -1 &&\n                node.body.type === \"BlockStatement\" &&\n                node.body.body.length === 0 &&\n                innerComments.length === 0\n            ) {\n                context.report({\n                    node,\n                    loc: node.body.loc.start,\n                    messageId: \"unexpected\",\n                    data: { name }\n                });\n            }\n        }"}, {"instruction": "Trigger update to all registered materials.", "input": "JavaScript", "output": "function (material) {\n    var materials = this.materials;\n    Object.keys(materials).forEach(function (uuid) {\n      materials[uuid].needsUpdate = true;\n    });\n  }"}, {"instruction": "converts a dash or hypen separated string to camelCase", "input": "JavaScript", "output": "function unDashHyphen (str) {\n  return str\n    .trim()\n    .toLowerCase()\n    .replace(/[-_\\s]+(.)?/g, function (match, c) {\n      return c ? c.toUpperCase() : \"\";\n    });\n}"}, {"instruction": "Checks if the image of a given enabled element fitted the window\nbefore the resize\n\n@param {EnabledElement} enabledElement The Cornerstone Enabled Element\n@param {number} oldCanvasWidth The width of the canvas before the resize\n@param {number} oldCanvasHeight The height of the canvas before the resize\n@return {Boolean} true if it fitted the windows, false otherwise", "input": "JavaScript", "output": "function wasFitToWindow (enabledElement, oldCanvasWidth, oldCanvasHeight) {\r\n  const scale = enabledElement.viewport.scale;\r\n  const imageSize = getImageSize(enabledElement.image, enabledElement.viewport.rotation);\r\n  const imageWidth = Math.round(imageSize.width * scale);\r\n  const imageHeight = Math.round(imageSize.height * scale);\r\n  const x = enabledElement.viewport.translation.x;\r\n  const y = enabledElement.viewport.translation.y;\r\n\r\n  return (imageWidth === oldCanvasWidth && imageHeight <= oldCanvasHeight) ||\r\n    (imageWidth <= oldCanvasWidth && imageHeight === oldCanvasHeight) &&\r\n    (x === 0 && y === 0);\r\n}"}, {"instruction": "Executes the CLI based on an array of arguments that is passed in.\n@param {string|Array|Object} args The arguments to process.\n@returns {int} The exit code for the operation.", "input": "JavaScript", "output": "function execute(args) {\n    try {\n        const currentOptions = options.parse(args)\n        return executeOptions(currentOptions)\n    } catch (error) {\n        console.error(error.message)\n        return 1\n    }\n}"}, {"instruction": "Returns an unqualified search string by removing any leading 'search '\ncommand.  This method does a simple search at the beginning of the\nsearch.", "input": "JavaScript", "output": "function(q) {\n            var workingQ = '' + q;\n            workingQ = workingQ.replace(this.reLTrimCommand, '');\n            if (workingQ.substring(0, 7) == 'search ') {\n                return workingQ.substring(7).replace(this.reLTrimCommand, '');\n            }\n            return q;\n        }"}, {"instruction": "composeS : Semigroupoid s => (s y z, s x y, ..., s a b) -> s a z", "input": "JavaScript", "output": "function composeS(...args) {\n  if(!arguments.length) {\n    throw new TypeError(err)\n  }\n\n  const ms =\n    args.slice().reverse()\n\n  const head =\n    ms[0]\n\n  if(!isSemigroupoid(head)) {\n    throw new TypeError(err)\n  }\n\n  if(ms.length === 1) {\n    return head\n  }\n\n  return ms.slice().reduce((comp, m) => {\n    if(!isSameType(comp, m)) {\n      throw new TypeError(err)\n    }\n\n    return comp.compose(m)\n  })\n}"}, {"instruction": "Move the file or directory at the given path to a system dependent trash\nlocation, calling back asynchronously with a possibly null FileSystemError\nstring. Directories will be moved even when non-empty.\n\n@param {string} path\n@param {function(string)=} callback", "input": "JavaScript", "output": "function moveToTrash(path, callback) {\n        appshell.fs.moveToTrash(path, function (err) {\n            callback(_mapError(err));\n        });\n    }"}, {"instruction": "A stream that the server can read from. Used for calls that are streaming\nfrom the client side.\n@constructor grpc~ServerReadableStream\n@extends external:Readable\n@borrows grpc~ServerUnaryCall#sendMetadata as\ngrpc~ServerReadableStream#sendMetadata\n@borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n@param {grpc.internal~Call} call The call object to read data with\n@param {grpc.Metadata} metadata The request metadata from the client\n@param {grpc~deserialize} deserialize Deserialization function for reads", "input": "JavaScript", "output": "function ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}"}, {"instruction": "Adaptive text sizing function\n\n@private\n@param width Parent width\n@param height Parent height\n@param fontSize Requested text size\n@param scale Proportional scale of text", "input": "JavaScript", "output": "function textSize(width, height, fontSize, scale) {\n\t    var stageWidth = parseInt(width, 10);\n\t    var stageHeight = parseInt(height, 10);\n\n\t    var bigSide = Math.max(stageWidth, stageHeight);\n\t    var smallSide = Math.min(stageWidth, stageHeight);\n\n\t    var newHeight = 0.8 * Math.min(smallSide, bigSide * scale);\n\t    return Math.round(Math.max(fontSize, newHeight));\n\t}"}, {"instruction": "\u83b7\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u7236\u8f88\u8282\u70b9\n@param {*} item\n@param {*} uncheckableItemValues", "input": "JavaScript", "output": "function getParents(item: Object) {\n    let parents = [];\n\n    if (!item.parent) {\n      return parents;\n    }\n\n    parents.push(item.parent);\n    parents = parents.concat(getParents(item.parent));\n\n    return parents;\n  }"}, {"instruction": "Unhightlight the highlighted line", "input": "JavaScript", "output": "function() {\n\t\t\tvar annotationModel = this.getAnnotationModel();\n\t\t\tvar textModel = this.getModel();\n\t\t\tif (textModel.getBaseModel) {\n\t\t\t\ttextModel = textModel.getBaseModel();\n\t\t\t}\n\t\t\tvar type = AT.ANNOTATION_HIGHLIGHTED_LINE;\n\t\t\tvar annotations = annotationModel.getAnnotations(0, textModel.getCharCount());\n\t\t\tvar remove = null;\n\t\t\twhile (annotations.hasNext()) {\n\t\t\t\tvar annotation = annotations.next();\n\t\t\t\tif (annotation.type === type) {\n\t\t\t\t\tremove = annotation;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (remove) {\n\t\t\t\tannotationModel.removeAnnotation(remove);\n\t\t\t}\n\t\t}"}, {"instruction": "register a list of ng filters to ngVue", "input": "JavaScript", "output": "function registerFilters (filters) {\n  if (isArray(filters)) {\n    lazyStringFilters = lazyStringFilters.concat(filters)\n  } else if (isObject(filters)) {\n    Object.keys(filters).forEach(name => {\n      addFilter(name, filters[name])\n    })\n  }\n}"}, {"instruction": "Helper functions needed in wait*() methods. Casts timeout argument to integer and checks if next step\nfunction is really a function and if it has been given (if required - depending on isThenRequired flag).\n\n@param   Number   timeout        The max amount of time to wait, in milliseconds\n@param   Function then           Next step to process (optional or required, depending on isThenRequired flag)\n@param   String   methodName     Name of the method, inside of which the helper has been called\n@param   Number   defaultTimeout The default max amount of time to wait, in milliseconds (optional)\n@param   Boolean  isThenRequired Determines if the next step function should be considered as required\n@returns Number", "input": "JavaScript", "output": "function getTimeoutAndCheckNextStepFunction(timeout, then, methodName, defaultTimeout, isThenRequired) {\n    if (isThenRequired || then) {\n        var isFunction = utils.isFunction(then); // Optimization to perform \"isFunction\" check only once.\n\n        if (isThenRequired && !isFunction) {\n            throw new CasperError(methodName + \"() needs a step function\");\n        } else if (then && !isFunction) {\n            throw new CasperError(methodName + \"() next step definition must be a function\");\n        }\n    }\n\n    timeout = ~~timeout || ~~defaultTimeout;\n    if (timeout < 0) {\n        throw new CasperError(methodName + \"() only accepts an integer >= 0 as a timeout value\");\n    }\n\n    return timeout;\n}"}, {"instruction": "Return an option value that has a default, but may be overridden by a\ncallback or a node instance attribute.\n\nEvaluation sequence:<br>\n\nIf tree.options.<optionName> is a callback that returns something, use that.<br>\nElse if node.<optionName> is defined, use that.<br>\nElse if tree.options.<optionName> is a value, use that.<br>\nElse use `defaultValue`.\n\n@param {string} optionName name of the option property (on node and tree)\n@param {FancytreeNode} node passed to the callback\n@param {object} nodeObject where to look for the local option property, e.g. `node` or `node.data`\n@param {object} treeOption where to look for the tree option, e.g. `tree.options` or `tree.options.dnd5`\n@param {any} [defaultValue]\n@returns {any}\n\n@example\n// Check for node.foo, tree,options.foo(), and tree.options.foo:\n$.ui.fancytree.evalOption(\"foo\", node, node, tree.options);\n// Check for node.data.bar, tree,options.qux.bar(), and tree.options.qux.bar:\n$.ui.fancytree.evalOption(\"bar\", node, node.data, tree.options.qux);\n\n@since 2.22", "input": "JavaScript", "output": "function(\n\t\t\t\toptionName,\n\t\t\t\tnode,\n\t\t\t\tnodeObject,\n\t\t\t\ttreeOptions,\n\t\t\t\tdefaultValue\n\t\t\t) {\n\t\t\t\tvar ctx,\n\t\t\t\t\tres,\n\t\t\t\t\ttree = node.tree,\n\t\t\t\t\ttreeOpt = treeOptions[optionName],\n\t\t\t\t\tnodeOpt = nodeObject[optionName];\n\n\t\t\t\tif ($.isFunction(treeOpt)) {\n\t\t\t\t\tctx = {\n\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\ttree: tree,\n\t\t\t\t\t\twidget: tree.widget,\n\t\t\t\t\t\toptions: tree.widget.options,\n\t\t\t\t\t\ttypeInfo: tree.types[node.type] || {},\n\t\t\t\t\t};\n\t\t\t\t\tres = treeOpt.call(tree, { type: optionName }, ctx);\n\t\t\t\t\tif (res == null) {\n\t\t\t\t\t\tres = nodeOpt;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres = nodeOpt != null ? nodeOpt : treeOpt;\n\t\t\t\t}\n\t\t\t\tif (res == null) {\n\t\t\t\t\tres = defaultValue; // no option set at all: return default\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}"}, {"instruction": "Removes the given controller from the GUI.\n@param {Controller} controller\n@instance", "input": "JavaScript", "output": "function(controller) {\n      // TODO listening?\n      this.__ul.removeChild(controller.__li);\n      this.__controllers.splice(this.__controllers.indexOf(controller), 1);\n      const _this = this;\n      common.defer(function() {\n        _this.onResize();\n      });\n    }"}, {"instruction": "Remove a specific event handler for a given event.\n@function\n@param {String} eventName - Name of event for which the handler is to be removed.\n@param {OpenSeadragon.EventHandler} handler - Function to be removed.", "input": "JavaScript", "output": "function ( eventName, handler ) {\n        var events = this.events[ eventName ],\n            handlers = [],\n            i;\n        if ( !events ) {\n            return;\n        }\n        if ( $.isArray( events ) ) {\n            for ( i = 0; i < events.length; i++ ) {\n                if ( events[i].handler !== handler ) {\n                    handlers.push( events[ i ] );\n                }\n            }\n            this.events[ eventName ] = handlers;\n        }\n    }"}, {"instruction": "filtering to enable a white-list version of Sinon FakeXhr, where whitelisted requests are passed through to real XHR", "input": "JavaScript", "output": "function each(collection, callback) {\n        if (!collection) {\n            return;\n        }\n\n        for (var i = 0, l = collection.length; i < l; i += 1) {\n            callback(collection[i]);\n        }\n    }"}, {"instruction": "Determines whether the given path is a \"resource path\" or a \"collection path\".\nResource paths operate on a single REST resource, whereas collection paths operate on\na collection of resources.\n\nNOTE: This algorithm is subject to change. Over time, it should get smarter and better at determining request types.\n\n@param   {Request} req\n@returns {boolean}", "input": "JavaScript", "output": "function isCollectionRequest (req) {\n  let isCollection = responseIsCollection(req);\n\n  if (isCollection === undefined) {\n    isCollection = !lastPathSegmentIsAParameter(req);\n  }\n\n  return isCollection;\n}"}, {"instruction": "Returns an array of names of merged-column which contains every column name in the given array.\n@param {Array.<String>} columnNames - an array of column names to test\n@returns {Array.<String>}\n@private", "input": "JavaScript", "output": "function(columnNames) {\n        var columnModel = this.columnModel;\n        var mergedColumnNames = _.pluck(columnModel.get('complexHeaderColumns'), 'name');\n\n        return _.filter(mergedColumnNames, function(mergedColumnName) {\n            var unitColumnNames = columnModel.getUnitColumnNamesIfMerged(mergedColumnName);\n\n            return _.every(unitColumnNames, function(name) {\n                return _.contains(columnNames, name);\n            });\n        });\n    }"}, {"instruction": "VML override to create a regular HTML image\n@param {String} src\n@param {Number} x\n@param {Number} y\n@param {Number} width\n@param {Number} height", "input": "JavaScript", "output": "function (src, x, y, width, height) {\r\n\t\tvar obj = this.createElement('img')\r\n\t\t\t.attr({ src: src });\r\n\r\n\t\tif (arguments.length > 1) {\r\n\t\t\tobj.css({\r\n\t\t\t\tleft: x,\r\n\t\t\t\ttop: y,\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn obj;\r\n\t}"}, {"instruction": "/*\nThis function initializes the js_graph objects inspecting the html document", "input": "JavaScript", "output": "function initPageObjects()\n{\n\tif(isCanvas(document.body))\n\t{\n\t\tvar newCanvas = new Canvas(document.body);\n\t\tnewCanvas.initCanvas();\n\t\tcanvases.push(newCanvas);\n\t}\n\telse\n\t{\t\n\t\tvar divs = document.getElementsByTagName('div');\n\t\tvar i;\n\t\tfor(i = 0; i < divs.length; i++)\n\t\t{\n\t\t\tif(isCanvas(divs[i]) && !findCanvas(divs[i].id))\n\t\t\t{\n\t\t\t\tvar newCanvas = new Canvas(divs[i]);\n\t\t\t\tnewCanvas.initCanvas();\n\t\t\t\tcanvases.push(newCanvas);\n\t\t\t\tnewCanvas.fitBlocks();\n\t\t\t\tnewCanvas.alignBlocks();\n\t\t\t}\n\t\t}\n\t}\n}"}, {"instruction": "Iterate over an input collection, invoking an `iterator` function for each element in the\ncollection and passing to it three arguments: `(value, index, collection)`. The `iterator`\nfunction can end iteration early by returning `false`.\n\n@name each\n@api public\n@param {Function(value, key, collection)} iterator The function to invoke per iteration.\n@param {Array|Object|string} collection The collection to iterate over.\n@return {undefined} Because `each` is run only for side effects, always returns `undefined`.\n@example\nvar log = console.log.bind(console);\n\neach(log, ['a', 'b', 'c']);\n//-> 'a', 0, ['a', 'b', 'c']\n//-> 'b', 1, ['a', 'b', 'c']\n//-> 'c', 2, ['a', 'b', 'c']\n//=> undefined\n\neach(log, 'tim');\n//-> 't', 2, 'tim'\n//-> 'i', 1, 'tim'\n//-> 'm', 0, 'tim'\n//=> undefined\n\n// Note: Iteration order not guaranteed across environments\neach(log, { name: 'tim', occupation: 'enchanter' });\n//-> 'tim', 'name', { name: 'tim', occupation: 'enchanter' }\n//-> 'enchanter', 'occupation', { name: 'tim', occupation: 'enchanter' }\n//=> undefined", "input": "JavaScript", "output": "function each(iterator, collection) {\n  return (isArrayLike(collection) ? arrayEach : baseEach).call(this, iterator, collection);\n}"}, {"instruction": "code from this gist: https://gist.github.com/dchest/4582374 (no license declared)", "input": "JavaScript", "output": "function Salsa20(key, nonce) {\n    // Constants.\n    this.rounds = 20; // number of Salsa rounds\n    this.sigmaWords = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574];\n\n    // State.\n    this.keyWords = [];           // key words\n    this.nonceWords = [0, 0];     // nonce words\n    this.counterWords = [0, 0];   // block counter words\n\n    // Output buffer.\n    this.block = [];        // output block of 64 bytes\n    this.blockUsed = 64;     // number of block bytes used\n\n    this.setKey(key);\n    this.setNonce(nonce);\n}"}, {"instruction": "Assertion errors, can provide a detailed error messages.\n\ninspect() and cliMessage() added to display errors with params.", "input": "JavaScript", "output": "function AssertionFailedError(params, template) {\n  this.params = params;\n  this.template = template;\n  // this.message = \"AssertionFailedError\";\n  let stack = new Error().stack;\n  // this.showDiff = true;\n  stack = stack ? stack.split('\\n').filter(line =>\n    // @todo cut assert things nicer\n    line.indexOf('lib/assert') < 0).join('\\n') : '';\n  this.showDiff = true;\n\n  this.actual = this.params.actual;\n  this.expected = this.params.expected;\n\n  this.inspect = () => {\n    const params = this.params || {};\n    const msg = params.customMessage || '';\n    return msg + subs(this.template, params);\n  };\n\n  this.cliMessage = () => this.inspect();\n}"}, {"instruction": "/*\nvar apply_impulse = function(body, j, r){\nbody.v = vadd(body.v, vmult(j, body.m_inv));\nbody.w += body.i_inv*vcross(r, j);\n};\n\nvar apply_impulses = function(a, b, r1, r2, j)\n{\napply_impulse(a, vneg(j), r1);\napply_impulse(b, j, r2);\n};", "input": "JavaScript", "output": "function(body, jx, jy, r){\n//  body.v = body.v.add(vmult(j, body.m_inv));\n    body.vx += jx * body.m_inv;\n    body.vy += jy * body.m_inv;\n//  body.w += body.i_inv*vcross(r, j);\n    body.w += body.i_inv*(r.x*jy - r.y*jx);\n}"}, {"instruction": "this function can be outsourced in future when the ComponentMetadata is not used anymore and the new Application manifest is used - but for now we keep it as it will be one of the common use cases to have the classical ComponentMetadata and this should be transformed into the new manifest structure for compatibility converter for array with string values to object", "input": "JavaScript", "output": "function(a, fnCallback) {\n\t\t\tvar o = {};\n\t\t\tif (a) {\n\t\t\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\t\t\tvar oValue = a[i];\n\t\t\t\t\tif (typeof oValue === \"string\") {\n\t\t\t\t\t\to[oValue] = typeof fnCallback === \"function\" && fnCallback(oValue) || {};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn o;\n\t\t}"}, {"instruction": "Return default list of env variables with their assigned value, if any.", "input": "JavaScript", "output": "function _getFileContents(values) {\n  const env = getDefaultSlateEnv();\n\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && env.hasOwnProperty(key)) {\n      env[key] = values[key];\n    }\n  }\n\n  return Object.entries(env)\n    .map((keyValues) => {\n      return `${keyValues.join('=')}\\r\\n`;\n    })\n    .join('\\r\\n\\r\\n');\n}"}, {"instruction": "11.12 Conditional Operator", "input": "JavaScript", "output": "function parseConditionalExpression() {\n        var expr, consequent, alternate;\n\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            consequent = parseConditionalExpression();\n            expect(':');\n            alternate = parseConditionalExpression();\n\n            expr = delegate.createConditionalExpression(expr, consequent, alternate);\n        }\n\n        return expr;\n    }"}, {"instruction": "/*\nReturns a flattened acc info object (infos of children are merged together)\nNote: The info object does only contain a focusable flag (true if one of the children is focusable)\nand a combined description.\n@see sap.ui.core.Control#getAccessibilityInfo", "input": "JavaScript", "output": "function(oControl) {\n\t\t\tif (oControl && typeof oControl.getAccessibilityInfo === \"function\") {\n\t\t\t\tif (typeof oControl.getVisible === \"function\" && !oControl.getVisible()) {\n\t\t\t\t\treturn ACCInfoHelper._normalize({});\n\t\t\t\t}\n\t\t\t\tvar oSource = oControl.getAccessibilityInfo();\n\t\t\t\tif (oSource) {\n\t\t\t\t\tvar oTarget = {};\n\t\t\t\t\tACCInfoHelper._flatten(oSource, oTarget);\n\t\t\t\t\treturn oTarget;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}"}, {"instruction": "# last :: Foldable f => f a -> Maybe a . . Returns Just the last element of the given structure if the structure . contains at least one element; Nothing otherwise. . . ```javascript . > S.last ([1, 2, 3]) . Just (3) . . > S.last ([]) . Nothing . . > S.last (Cons (1) (Cons (2) (Cons (3) (Nil)))) . Just (3) . . > S.last (Nil) . Nothing . ```", "input": "JavaScript", "output": "function last(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray (foldable)) {\n      return foldable.length > 0 ? Just (foldable[foldable.length - 1])\n                                 : Nothing;\n    }\n    return Z.reduce (function(_, x) { return Just (x); }, Nothing, foldable);\n  }"}, {"instruction": "options.path must be specified; callback(err, data)", "input": "JavaScript", "output": "function devToolsInterface(options, callback) {\n    options.host = options.host || defaults.HOST;\n    options.port = options.port || defaults.PORT;\n    options.secure = !!(options.secure);\n    options.useHostName = !!(options.useHostName);\n    externalRequest(options.secure ? https : http, options, callback);\n}"}, {"instruction": "Internal *", "input": "JavaScript", "output": "function addTransformsToNotifier(notifier) {\n  notifier\n    .addTransform(transforms.baseData)\n    .addTransform(transforms.handleItemWithError)\n    .addTransform(transforms.addBody)\n    .addTransform(sharedTransforms.addMessageWithError)\n    .addTransform(sharedTransforms.addTelemetryData)\n    .addTransform(sharedTransforms.addConfigToPayload)\n    .addTransform(transforms.scrubPayload)\n    .addTransform(sharedTransforms.itemToPayload);\n}"}, {"instruction": "/*", "input": "JavaScript", "output": "function genClassForVnode (vnode) {\n  let data = vnode.data;\n  let parentNode = vnode;\n  let childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}"}, {"instruction": "Get a list of indexes of nodes containing a non-axis-aligned rectangle\n\n@param  {array}  corners      An array containing each corner of the\nrectangle defined by its coordinates (x, y).\n@param  {array}  quadCorners  An array of the quad nodes' corners.\n@return {array}               An array of indexes containing one to\nfour integers.", "input": "JavaScript", "output": "function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }"}, {"instruction": "If the TypeDoc readme doesn't have this header\nIt won't be accessible in docusaurus", "input": "JavaScript", "output": "function addHeaderToReadme(packageName) {\n\n    const readmePath = path.join(destDir, packageName, 'api', 'README.md');\n    const readmeText = fs.readFileSync(readmePath).toString();\n\n    var docusaurusHeader = \n    `---\\n` + \n    `id: index\\n` +\n    `---\\n\\n`;\n\n    try {\n        fs.writeFileSync(readmePath, docusaurusHeader);\n        fs.appendFileSync(readmePath, readmeText);\n    } catch (err) {\n        console.log(chalk.red(err));\n    }\n\n}"}, {"instruction": "This method is like `_.forOwn` except that it iterates over elements\nof a `collection` in the opposite order.\n\n@static\n@memberOf _\n@category Objects\n@param {Object} object The object to iterate over.\n@param {Function} [callback=identity] The function called per iteration.\n@param {*} [thisArg] The `this` binding of `callback`.\n@returns {Object} Returns `object`.\n@example\n\n_.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\nconsole.log(key);\n});\n// => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'", "input": "JavaScript", "output": "function forOwnRight(object, callback, thisArg) {\n      var props = keys(object),\n          length = props.length;\n\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        var key = props[length];\n        if (callback(object[key], key, object) === false) {\n          break;\n        }\n      }\n      return object;\n    }"}, {"instruction": "Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n@param {Float64Array} target - destination\n@param {Number} targetStartIndex - index in the destination to start copying into\n@param {Array} simplePolygon - array of points\n@param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n@returns {Number} - the index of the write head in the destination", "input": "JavaScript", "output": "function copyNestedRing(target, targetStartIndex, simplePolygon, size) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n  return targetIndex;\n}"}, {"instruction": "(C) 1995-2013 Jean-loup Gailly and Mark Adler (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin  This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.  Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Use ordinary array, since untyped makes no boost here", "input": "JavaScript", "output": "function makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}"}, {"instruction": "Helper to instantiate chess.js correctly on both browser and Node.", "input": "JavaScript", "output": "function Load(pgn) {\n  let chess = null;\n  if (Chess.Chess) {\n    chess = new Chess.Chess();\n  } else {\n    chess = new Chess();\n  }\n  chess.load_pgn(pgn);\n  return chess;\n}"}, {"instruction": "cloudant", "input": "JavaScript", "output": "function viewSearch (ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, { type: 'search' }, qs, callback)\n    }"}, {"instruction": "Only use for SSL (RDP security layer TODO)\n@see http://msdn.microsoft.com/en-us/library/cc240518.aspx\n@param opt {object} Classic type options\n@returns {type.Component}", "input": "JavaScript", "output": "function serverSecurityData(opt) {\n\tvar self = {\n\t\t__TYPE__ : MessageType.SC_SECURITY,\n\t\tencryptionMethod : new type.UInt32Le(),\n\t\tencryptionLevel : new type.UInt32Le() \n\t};\n\t\n\treturn new type.Component(self, opt);\n}"}, {"instruction": "/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap", "input": "JavaScript", "output": "function parse_DataSpaceMap(blob) {\n\tvar o = [];\n\tblob.l += 4; // must be 0x8\n\tvar cnt = blob.read_shift(4);\n\twhile(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));\n\treturn o;\n}"}, {"instruction": "11.14 Comma Operator", "input": "JavaScript", "output": "function parseExpression() {\n        var expr, startToken = lookahead;\n\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }"}, {"instruction": "Completely all callbacks for every event, such as on object destruction", "input": "JavaScript", "output": "function() {\n        if (!this._callbacks) return;\n        this.__callbacksFrozen = false;\n        for (var event in this._callbacks) {\n            if (this._callbacks[event]) {\n                // Remove the normal way, in case we've got a nested loop\n                this._unbindCallbacks(event);\n                // Also completely delete the registered callback from handlers\n                delete handlers[event][this[0]];\n            }\n        }\n    }"}, {"instruction": "Save `namespaces`.\n\n@param {String} namespaces\n@api private", "input": "JavaScript", "output": "function save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}"}, {"instruction": "Returns true if a swipe happened after the last touchstart event fired on\nevent.target.\n\nWe need to differentiate a swipe from a tap before we let the event open\nor close the tooltip. A swipe is when a touchmove (scroll) event happens\non the body between the touchstart and the touchend events of an element.\n\n@param {object} target The HTML element that may have triggered the swipe\n@returns {boolean}\n@protected", "input": "JavaScript", "output": "function(target) {\n\t\t\n\t\tvar swiped = false;\n\t\t\n\t\tfor (var i = this.__touchEvents.length - 1; i >= 0; i--) {\n\t\t\t\n\t\t\tvar e = this.__touchEvents[i];\n\t\t\t\n\t\t\tif (e.type == 'touchmove') {\n\t\t\t\tswiped = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\te.type == 'touchstart'\n\t\t\t\t&&\ttarget === e.target\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn swiped;\n\t}"}, {"instruction": "/*\nChange findNodes ==> filterNodes\n \n@name filterNodes\n@type {function}\n@description\nFunction to find certain nodes based on a filter passed.\n@param {object} ast   AST node\n@param {function} filter  Filter function to find nodes\n@return {object[]} Array of all the nodes found", "input": "JavaScript", "output": "function(ast, filter) {\n  checkASTandFunction(ast, 'ast', filter, 'filter');\n\n  let result = [];\n  walkNodes(ast, node => {\n    if (filter(node)) result.push(Object.assign({}, node));\n  });\n  return result;\n}"}, {"instruction": "Checks a node to see if it's followed by a semicolon.\n@param {ASTNode} node The node to check.\n@returns {void}", "input": "JavaScript", "output": "function checkForSemicolon(node) {\n\t\t\t\tvar lastToken = sourceCode.getLastToken(node);\n\n\t\t\t\tif (never) {\n\t\t\t\t\tif (isUnnecessarySemicolon(lastToken)) {\n\t\t\t\t\t\treport(node, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!isSemicolon(lastToken)) {\n\t\t\t\t\t\tif (!exceptOneLine || !isOneLinerBlock(node)) {\n\t\t\t\t\t\t\treport(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (exceptOneLine && isOneLinerBlock(node)) {\n\t\t\t\t\t\t\treport(node, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "Get the density of links as a percentage of the content\nThis is the amount of text that is inside a link divided by the total text in the node.\n\n@param Element\n@return number (float)", "input": "JavaScript", "output": "function(element) {\n    var textLength = this._getInnerText(element).length;\n    if (textLength === 0)\n      return 0;\n\n    var linkLength = 0;\n\n    // XXX implement _reduceNodeList?\n    this._forEachNode(element.getElementsByTagName(\"a\"), function(linkNode) {\n      linkLength += this._getInnerText(linkNode).length;\n    });\n\n    return linkLength / textLength;\n  }"}, {"instruction": "Parses rabin chunker string\n\n@param  {String}   chunker Chunker algorithm supported formats:\n\"rabin\"\n\"rabin-{avg}\"\n\"rabin-{min}-{avg}-{max}\"\n\n@return {Object}   rabin chunker options", "input": "JavaScript", "output": "function parseRabinString (chunker) {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}"}, {"instruction": "Creates an untitled document. The associated File has a fullPath that\nlooks like /some-random-string/Untitled-counter.fileExt.\n\n@param {number} counter - used in the name of the new Document's File\n@param {string} fileExt - file extension of the new Document's File, including \".\"\n@return {Document} - a new untitled Document", "input": "JavaScript", "output": "function createUntitledDocument(counter, fileExt) {\n        var filename = Strings.UNTITLED + \"-\" + counter + fileExt,\n            fullPath = _untitledDocumentPath + \"/\" + filename,\n            now = new Date(),\n            file = new InMemoryFile(fullPath, FileSystem);\n\n        FileSystem.addEntryForPathIfRequired(file, fullPath);\n\n        return new DocumentModule.Document(file, now, \"\");\n    }"}, {"instruction": "Creates an interpolation binding with 7 expressions.", "input": "JavaScript", "output": "function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    var different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    different = bindingUpdated(v6) || different;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\n        NO_CHANGE;\n}"}, {"instruction": "Checks if an expression is a variable that can only be observed within the given function.\n@param {ASTNode} expression The expression to check\n@param {ASTNode} surroundingFunction The function node\n@returns {boolean} `true` if the expression is a variable which is local to the given function, and is never\nreferenced in a closure.", "input": "JavaScript", "output": "function isLocalVariableWithoutEscape(expression, surroundingFunction) {\n            if (expression.type !== \"Identifier\") {\n                return false;\n            }\n\n            const variable = resolveVariable(expression);\n\n            if (!variable) {\n                return false;\n            }\n\n            return variable.references.every(reference => identifierToSurroundingFunctionMap.get(reference.identifier) === surroundingFunction) &&\n                variable.defs.every(def => identifierToSurroundingFunctionMap.get(def.name) === surroundingFunction);\n        }"}, {"instruction": "We have to remember current server data and client data.\nThe `sync` method has no access to it.\n`updated_at` is already set to \"Date.now\" when the overridden `sync.update` is called.\nSee https://github.com/tgriesser/bookshelf/blob/79c526870e618748caf94e7476a0bc796ee090a6/src/model.js#L955", "input": "JavaScript", "output": "function save(data) {\n            this.clientData = _.cloneDeep(data) || {};\n            this.serverData = _.cloneDeep(this.attributes);\n\n            return ParentModel.prototype.save.apply(this, arguments);\n        }"}, {"instruction": "generate webpack entry file for markdown docs", "input": "JavaScript", "output": "function buildDocsEntry() {\n  const output = join('docs/src/docs-entry.js');\n  const getName = fullPath => fullPath.replace(/\\/(en|zh)/, '.$1').split('/').pop().replace('.md', '');\n  const docs = glob\n    .sync([\n      join('docs/**/*.md'),\n      join('packages/**/*.md'),\n      '!**/node_modules/**'\n    ])\n    .map(fullPath => {\n      const name = getName(fullPath);\n      return `'${name}': () => import('${path.relative(join('docs/src'), fullPath).replace(/\\\\/g, '/')}')`;\n    });\n\n  const content = `${tips}\nexport default {\n  ${docs.join(',\\n  ')}\n};\n`;\n  fs.writeFileSync(output, content);\n}"}, {"instruction": "\u58f0\u660e\u5f0f\u4e8b\u4ef6\u7684\u76d1\u542c\u51fd\u6570\n\n@param {Object} eventBind \u7ed1\u5b9a\u4fe1\u606f\u5bf9\u8c61\n@param {boolean} isComponentEvent \u662f\u5426\u7ec4\u4ef6\u81ea\u5b9a\u4e49\u4e8b\u4ef6\n@param {Data} data \u6570\u636e\u73af\u5883\n@param {Event} e \u4e8b\u4ef6\u5bf9\u8c61", "input": "JavaScript", "output": "function getEventListener(eventExpr, owner, data, isComponentEvent) {\n    return function (e) {\n        var method = findMethod(owner, eventExpr.name, data);\n\n        if (typeof method === 'function') {\n            method.apply(owner, evalArgs(\n                eventExpr.args,\n                new Data(\n                    { $event: isComponentEvent ? e : e || window.event },\n                    data\n                ),\n                owner\n            ));\n        }\n    };\n}"}, {"instruction": "Resolves property names or property paths defined with period-delimited strings or arrays of strings. Property names that are found on the source object are used directly (even if they include a period). Nested property names that include periods, within a path, are only understood in array paths.", "input": "JavaScript", "output": "function getPropertyByPath(source: Object, path: string | Array<string>): any {\n  if (typeof path === 'string' && source.hasOwnProperty(path)) {\n    return source[path];\n  }\n\n  const parsedPath = typeof path === 'string' ? path.split('.') : path;\n  return parsedPath.reduce((previous, key) => {\n    if (previous === undefined) {\n      return previous;\n    }\n    return previous[key];\n  }, source);\n}"}, {"instruction": "var node = wysihtml5.dom.domNode(element).prev({nodeTypes: [1,3], ignoreBlankTexts: true});", "input": "JavaScript", "output": "function(options) {\n        var prevNode = node.previousSibling,\n            types = (options && options.nodeTypes) ? options.nodeTypes : defaultNodeTypes;\n        \n        if (!prevNode) {\n          return null;\n        }\n\n        if (\n          (!wysihtml5.lang.array(types).contains(prevNode.nodeType)) || // nodeTypes check.\n          (options && options.ignoreBlankTexts && _isBlankText(prevNode)) // Blank text nodes bypassed if set\n        ) {\n          return wysihtml5.dom.domNode(prevNode).prev(options);\n        }\n        \n        return prevNode;\n      }"}, {"instruction": "convert relative path to absolute path.", "input": "JavaScript", "output": "function convert( name, _path, contents ) {\n    var rDefine = /(define\\s*\\(\\s*('|\").*?\\2\\s*,\\s*\\[)([\\s\\S]*?)\\]/ig,\n        rDeps = /('|\")(.*?)\\1/g,\n        root = _path.substr( 0, _path.length - name.length - 3 ),\n        dir = path.dirname( _path ),\n        m, m2, deps, dep, _path2;\n\n    contents = contents.replace( rDefine, function( m, m1, m2, m3 ) {\n        return m1 + m3.replace( rDeps, function( m, m1, m2 ) {\n            m2 = path.join( dir, m2 );\n            m2 = path.relative( root, m2 );\n\n            m2 = m2.replace(/\\\\/g, '/');\n            return m1 + m2 + m1;\n        }) + ']';\n    });\n\n    return contents;\n}"}, {"instruction": "Function: attach\nAttach to an already created and authenticated BOSH session.\n\nThis function is provided to allow Strophe to attach to BOSH\nsessions which have been created externally, perhaps by a Web\napplication.  This is often used to support auto-login type features\nwithout putting user credentials into the page.\n\nParameters:\n(String) jid - The full JID that is bound by the session.\n(String) sid - The SID of the BOSH session.\n(String) rid - The current RID of the BOSH session.  This RID\nwill be used by the next request.\n(Function) callback The connect callback function.\n(Integer) wait - The optional HTTPBIND wait value.  This is the\ntime the server will wait before returning an empty result for\na request.  The default setting of 60 seconds is recommended.\nOther settings will require tweaks to the Strophe.TIMEOUT value.\n(Integer) hold - The optional HTTPBIND hold value.  This is the\nnumber of connections the server will hold at one time.  This\nshould almost always be set to 1 (the default).\n(Integer) wind - The optional HTTBIND window value.  This is the\nallowed range of request ids that are valid.  The default is 5.", "input": "JavaScript", "output": "function (jid, sid, rid, callback, wait, hold, wind)\r\n    {\r\n        this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\r\n    }"}, {"instruction": "/*\nFinds the edge with the smallest slack that is incident on tree and returns\nit.", "input": "JavaScript", "output": "function findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}"}, {"instruction": "To authenticate using PLAIN and a simple username and password\ncombination, the application provides a callback function for\nauthenticating a connecting user given their specified username and\npassword. (The test used here - namely that the password is always\nthe username in reverse - is of course NOT recommended in practice!\n:-)", "input": "JavaScript", "output": "function authenticate(username, password) {\n    console.log('Authenticating as ' + username);\n    return username.split('').reverse().join('') === password;\n}"}, {"instruction": "Create a button that when clicked will enter into stereo-rendering mode for VR.\n\nStructure: <div><button></div>\n\n@param {function} onClick - click event handler\n@returns {Element} Wrapper <div>.", "input": "JavaScript", "output": "function createEnterVRButton (onClick) {\n  var vrButton;\n  var wrapper;\n\n  // Create elements.\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_VR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  vrButton = document.createElement('button');\n  vrButton.className = ENTER_VR_BTN_CLASS;\n  vrButton.setAttribute('title',\n    'Enter VR mode with a headset or fullscreen mode on a desktop. ' +\n    'Visit https://webvr.rocks or https://webvr.info for more information.');\n  vrButton.setAttribute(constants.AFRAME_INJECTED, '');\n\n  // Insert elements.\n  wrapper.appendChild(vrButton);\n  vrButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}"}, {"instruction": "Sort children nodes\n\n@param {TreeNode[]}               children children of node to be sorted\n@param {string | function | null} sort sort method\nSee SunburstSeries.js for details.", "input": "JavaScript", "output": "function sort(children, sortOrder) {\n    if (typeof sortOrder === 'function') {\n        return children.sort(sortOrder);\n    }\n    else {\n        var isAsc = sortOrder === 'asc';\n        return children.sort(function (a, b) {\n            var diff = (a.getValue() - b.getValue()) * (isAsc ? 1 : -1);\n            return diff === 0\n                ? (a.dataIndex - b.dataIndex) * (isAsc ? -1 : 1)\n                : diff;\n        });\n    }\n}"}, {"instruction": "/*\nOutputs a log message for the given level. Leads to an <code>undefined</code> result\nin case of a WARNING.\n\n@param {sap.base.Log.Level} iLevel\nA log level, either DEBUG or WARNING\n@param {...string} aTexts\nThe main text of the message is constructed from the rest of the arguments by\njoining them\n@returns {boolean}\n<code>false</code>", "input": "JavaScript", "output": "function log(iLevel) {\n\t\t\t\tvar sLocation;\n\n\t\t\t\tif (Log.isLoggable(iLevel, sODataMetaModel)) {\n\t\t\t\t\tsLocation = Array.isArray(vLocation)\n\t\t\t\t\t\t? vLocation.join(\"/\")\n\t\t\t\t\t\t: vLocation;\n\t\t\t\t\tLog[iLevel === DEBUG ? \"debug\" : \"warning\"](\n\t\t\t\t\t\tArray.prototype.slice.call(arguments, 1).join(\"\")\n\t\t\t\t\t\t\t+ (sLocation ? \" at /\" + sLocation : \"\"),\n\t\t\t\t\t\tsResolvedPath, sODataMetaModel);\n\t\t\t\t}\n\t\t\t\tif (iLevel === WARNING) {\n\t\t\t\t\tvResult = undefined;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}"}, {"instruction": "Named container of edited source\n@type EditContainer\n@param {String} source\n@param {Object} options", "input": "JavaScript", "output": "function EditContainer(source, options) {\n\t\tthis.options = utils.extend({offset: 0}, options);\n\t\t/**\n\t\t * Source code of edited structure. All changes in the structure are \n\t\t * immediately reflected into this property\n\t\t */\n\t\tthis.source = source;\n\t\t\n\t\t/** \n\t\t * List of all editable children\n\t\t * @private \n\t\t */\n\t\tthis._children = [];\n\t\t\n\t\t/**\n\t\t * Hash of all positions of container\n\t\t * @private\n\t\t */\n\t\tthis._positions = {\n\t\t\tname: 0\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}"}, {"instruction": "first pass to try to find fields that will need to be sorted in-memory", "input": "JavaScript", "output": "function getBasicInMemoryFields(index, selector, userFields) {\n\n  userFields = sortFieldsByIndex(userFields, index);\n\n  // check if any of the user selectors lose precision\n  var needToFilterInMemory = false;\n  for (var i = 0, len = userFields.length; i < len; i++) {\n    var field = userFields[i];\n    if (needToFilterInMemory || !checkFieldInIndex(index, field)) {\n      return userFields.slice(i);\n    }\n    if (i < len - 1 && userOperatorLosesPrecision(selector, field)) {\n      needToFilterInMemory = true;\n    }\n  }\n  return [];\n}"}, {"instruction": "fitty creation function", "input": "JavaScript", "output": "function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    // if target is a string\n    return typeof target === 'string' ?\n\n    // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) :\n\n    // create single fitty\n    fittyCreate([target], options)[0];\n  }"}, {"instruction": "The 64-bit implementation of the NIST specified Sigma1 function\n\n@private\n@param {Int_64} x The 64-bit integer argument\n@return {Int_64} The NIST specified output of the function", "input": "JavaScript", "output": "function sigma1_64(x)\n\t{\n\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),\n\t\t\trotr41 = rotr_64(x, 41);\n\n\t\treturn new Int_64(\n\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\n\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);\n\t}"}, {"instruction": "Tests whether a batch can be started.\n@private\n@param {number[]} batch_ops The operations in the batch we are checking.\n@param {number[]} completed_ops Previously completed operations.\n@return {boolean}", "input": "JavaScript", "output": "function _areBatchRequirementsMet(batch_ops, completed_ops) {\n  var dependencies = common.flatMap(batch_ops, function(op) {\n    return OP_DEPENDENCIES[op] || [];\n  });\n  for (var i = 0; i < dependencies.length; i++) {\n    var required_dep = dependencies[i];\n    if (batch_ops.indexOf(required_dep) === -1 &&\n        completed_ops.indexOf(required_dep) === -1) {\n      return false;\n    }\n  }\n  return true;\n}"}, {"instruction": "Determine if provided node is the last of their parent block.\n@private\n@param {ASTNode} node - node to test\n@returns {boolean} True if `node` is last of their parent block.", "input": "JavaScript", "output": "function isLastNode(node) {\n            const token = sourceCode.getTokenAfter(node);\n\n            return !token || (token.type === \"Punctuator\" && token.value === \"}\");\n        }"}, {"instruction": "/*\nclass <className> () {}", "input": "JavaScript", "output": "function (node) {\n                _addResult(node);\n                ASTWalker.simple(node, {\n                    /*\n                        class <className> () {\n                            <methodName> () {\n                            \n                            }\n                        }\n                    */\n                    MethodDefinition: function (methodNode) {\n                        _addResult(methodNode, methodNode.key.start, node.id.name);\n                    }\n                });\n            }"}, {"instruction": "checks if selector targets a tag\n@param  {String} selector the selector\n@return {Boolean}         if the selector targets a tag", "input": "JavaScript", "output": "function targetsTag (selector) {\n  const selectors = simpleSelectorParser.process(selector).res\n\n  return selectors.filter((selector) => {\n    let selectorNodes = selector.nodes.concat([]).reverse() // clone the array\n\n    for (const node of selectorNodes) {\n      if (node.type === 'cominator') { break }\n\n      if (node.type === 'tag') { return true }\n    }\n\n    return false\n  }).length > 0\n}"}, {"instruction": "\u83b7\u53d6\u6587\u7ae0\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u5728\u6587\u7ae0\u5934\u90e8\u901a\u8fc7[key]: value \u7684\u5f62\u5f0f\n@param  {String} body \u6587\u7ae0\u5185\u5bb9\n[intro]: \u6587\u7ae0\u7684\u4ecb\u7ecd\u6587\u7ae0\u7684\u4ecb\u7ecd\u6587\u7ae0\u7684\u4ecb\u7ecd\n@return {Object}      \u6587\u7ae0\u7684\u914d\u7f6e\u53c2\u6570", "input": "JavaScript", "output": "function getPostQuery(body) {\n  if (!body) return {};\n\n  let result = {};\n  let commentReg = /^\\[(\\w+)\\]\\:([\\s|\\S]+)/;\n  body.split('\\r\\n').every((item) => {\n    let itemMatch = item.match(commentReg);\n    if (itemMatch && itemMatch.length == 3) {\n      let queryKey = itemMatch[1],\n        queryVal = itemMatch[2];\n      result[queryKey] = queryVal && queryVal.trim();\n      return true;\n    } else {\n      return false;\n    }\n  })\n\n  return result;\n}"}, {"instruction": "Parse length(L) field of BER TLV\n@param s {type.Stream}\n@returns {integer}", "input": "JavaScript", "output": "function decodeLength(s) {\n\tvar size = new type.UInt8().read(s).value;\n\tif(size & 0x80) {\n\t\tsize &= ~0x80;\n\t\tif(size === 1) {\n\t\t\tsize = new type.UInt8().read(s).value;\n\t\t}\n\t\telse if(size === 2) {\n\t\t\tsize = new type.UInt16Be().read(s).value;\n\t\t}\n\t\telse{\n\t\t\tthrow new error.ProtocolError('NODE_RDP_ASN1_BER_INVALID_LENGTH');\n\t\t}\n\t}\n\treturn size;\n}"}, {"instruction": "do x=floor(x/n) for bigInt x and integer n, and return the remainder", "input": "JavaScript", "output": "function divInt_(x, n) {\n  var i, r=0, s;\n  for (i=x.length-1; i>=0; i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}"}, {"instruction": "A ResourceStream is a Node stream implementation for objects that are\nfetched from the API. Basically, any Collection of resources from the\nAPI can be wrapped in this stream, and the stream will fetch new pages\nof items as needed.\n\n@param {Collection} collection Response from initial collection request.\n@constructor", "input": "JavaScript", "output": "function ResourceStream(collection) {\n  var me = this;\n  BufferedReadable.call(me, {\n    objectMode: true\n  });\n\n  // @type {Collection} The collection whose data was last pushed into the\n  //     stream, such that if we have to go back for more, we should fetch\n  //     its `nextPage`.\n  me._collection = collection;\n\n  // @type {boolean} True iff a request for more items is in flight.\n  me._fetching = false;\n\n  // Ensure the initial collection's data is in the stream.\n  me._pushCollection();\n}"}, {"instruction": "\u5220\u9664\u7701\u8282\u70b9\u4e0b\u6240\u6709\u7684\u5b50\u8282\u70b9\n\n@param {any} [data=[]]\n@returns", "input": "JavaScript", "output": "function removeChildren(data = []) {\n  const ds = cloneDeep(data);\n  ds.forEach((item) => {\n    if (item.children) delete item.children;\n  });\n  return ds;\n}"}, {"instruction": "Handle the response from the tern node domain when\nit responds with the definition\n\n@param response - the response from the node domain", "input": "JavaScript", "output": "function handleJumptoDef(response) {\n\n        var file = response.file,\n            offset = response.offset;\n\n        var $deferredJump = getPendingRequest(file, offset, MessageIds.TERN_JUMPTODEF_MSG);\n\n        if ($deferredJump) {\n            response.fullPath = getResolvedPath(response.resultFile);\n            $deferredJump.resolveWith(null, [response]);\n        }\n    }"}, {"instruction": "12.2.5.4.2 The \"before html\" insertion mode ------------------------------------------------------------------", "input": "JavaScript", "output": "function startTagBeforeHtml(p, token) {\n    if (token.tagName === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = BEFORE_HEAD_MODE;\n    }\n\n    else\n        tokenBeforeHtml(p, token);\n}"}, {"instruction": "Removes the given value from the history values.\n\n@private", "input": "JavaScript", "output": "function(sValue) {\n\t\t\tvar aHistory = this._initHistory();\n\t\t\tfor (var i = 0; i < aHistory.length; i++) {\n\t\t\t\tif (aHistory[i] == sValue) {\n\t\t\t\t\taHistory.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "returns an object with event handlers used at addDomListener", "input": "JavaScript", "output": "function createBindingHandlers({\n    fullEventName,\n    domEventHandler,\n    selector\n}) {\n    return {\n        bindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).on(fullEventName, selector, domEventHandler);\n            }\n        },\n        unbindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).off(fullEventName, selector, domEventHandler);\n            }\n        }\n    };\n}"}, {"instruction": "Reports `import`, `export`, `as`, and `from` keywords of a given node if\nusage of spacing around those keywords is invalid.\n\nThis rule handles the `*` token in module declarations.\n\nimport*as A from \"./a\"; /*error Expected space(s) after \"import\".\nerror Expected space(s) before \"as\".\n\n@param {ASTNode} node - A node to report.\n@returns {void}", "input": "JavaScript", "output": "function checkSpacingForModuleDeclaration(node) {\n            const firstToken = sourceCode.getFirstToken(node);\n\n            checkSpacingBefore(firstToken, PREV_TOKEN_M);\n            checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n            if (node.type === \"ExportDefaultDeclaration\") {\n                checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n            }\n\n            if (node.source) {\n                const fromToken = sourceCode.getTokenBefore(node.source);\n\n                checkSpacingBefore(fromToken, PREV_TOKEN_M);\n                checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n            }\n        }"}, {"instruction": "Add animation to the view", "input": "JavaScript", "output": "function createGridClipShape(rect, seriesModel, cb) {\n    var rectEl = new graphic.Rect({\n        shape: {\n            x: rect.x - 10,\n            y: rect.y - 10,\n            width: 0,\n            height: rect.height + 20\n        }\n    });\n    graphic.initProps(rectEl, {\n        shape: {\n            width: rect.width + 20,\n            height: rect.height + 20\n        }\n    }, seriesModel, cb);\n\n    return rectEl;\n}"}, {"instruction": "Finds intersection of two ranges\n@param {Range} range\n@returns {Range} <code>null</code> if ranges does not overlap", "input": "JavaScript", "output": "function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.max(range.start, this.start);\n\t\t\t\tvar end = Math.min(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}"}, {"instruction": "Returns a JSON (array) representation", "input": "JavaScript", "output": "function toJSON() {\n  const s = [];\n  let entry = this.head;\n  while (entry) {\n    s.push({ key: entry.key.toJSON(), value: entry.value.toJSON() });\n    entry = entry.newer;\n  }\n  return s;\n}"}, {"instruction": "/*------------------------------------*\\\nStyles & DOM\n\\*------------------------------------", "input": "JavaScript", "output": "function createDragger(el){\n            var state = getState(el);\n\n            var dragger = document.createElement('div');\n            var draggerStyler = document.createElement('div');\n\n            dragger.className = state.config.draggerClass;\n\n            dragger.style.position = 'absolute';\n\n            if (!state.draggerEnabled) {\n                dragger.style.display = 'none';\n            }\n\n            draggerStyler.className = state.config.draggerStylerClass;\n\n            dragger.appendChild(draggerStyler);\n            state.el1.appendChild(dragger);\n\n            return dragger;\n        }"}, {"instruction": "'\\\\' . ' '*", "input": "JavaScript", "output": "function() {\n    var captures;\n    if (captures = /^\\\\(.)[ \\t]*/.exec(this.str)) {\n      var c = captures[1];\n      this.skip(captures);\n      return new Token('ident', new nodes.Literal(c));\n    }\n  }"}, {"instruction": "function generateTemplateSource(html, editor, name) { var code = null; try { code = window.reactTemplates.convertTemplateToReact(html.trim().replace(/\\r/g, ''), {modules: 'none', name: name}); clearMessage(editor); } catch (e) { if (e.name === 'RTCodeError') { //index: -1 line: -1 message: \"Document should have a root element\" name: \"RTCodeError\" editor.annotate({line: e.line, message: e.message, index: e.index}); } else { editor.annotate({line: 1, message: e.message}); } //showMessage(editor, msg); console.log(e); } return code; }", "input": "JavaScript", "output": "function showMessage(editor, msg) {\n        if (editor && editor.showMessage) {\n            editor.annotate({line: 1, message: msg})\n        }\n    }"}, {"instruction": "validate(values, props) -> errors", "input": "JavaScript", "output": "function validate({ username, password }, { i18n }) {\n  const errors = {}\n\n  if (!username) {\n    errors.username = i18n.t`Username is required`\n  } else if (validUsernames.indexOf(username)) {\n    errors.username = i18n.t`Sorry ${username}, you can't get in.`\n  }\n\n  return errors\n}"}, {"instruction": "High-resolution timer", "input": "JavaScript", "output": "function hrtimer() {\n    const start = process.hrtime();\n\n    return () => {\n      const durationComponents = process.hrtime(start);\n      const seconds = durationComponents[0];\n      const nanoseconds = durationComponents[1];\n      const duration = (seconds * 1000) + (nanoseconds / 1E6);\n      return duration;\n    };\n  }"}, {"instruction": "Retrieves help content vie the luis.json from\nthe arguments input by the user.\n\n@param args The arguments input by the user\n@returns {Promise<*>}1]", "input": "JavaScript", "output": "async function getHelpContents(args, output) {\n    if ('!' in args) {\n        return getAllCommands(process.stdout);\n    }\n\n    if (args._.length == 0) {\n        return getGeneralHelpContents(output);\n    }\n    else if (args._.length == 1) {\n        return getVerbHelp(args._[0], output);\n    } else if (args._.length >= 2) {\n        const operation = getOperation(args._[0], args._[1]);\n        if (operation) {\n            output.write(`${operation.description}\\n\\n`);\n            output.write(`Usage:\\n${chalk.cyan.bold(operation.command)}\\n\\n`);\n            return getHelpContentsForOperation(operation, output);\n        } else {\n            return getVerbHelp(args._[0], output);\n        }\n    }\n\n    return getGeneralHelpContents(output);\n}"}, {"instruction": "Returns true when a named property exists.\n\n@param {String} name     The property name\n@return {Boolean}        True, when property is found", "input": "JavaScript", "output": "function(name) {\n      var props = this.jCal[PROPERTY_INDEX];\n      var len = props.length;\n\n      var i = 0;\n      for (; i < len; i++) {\n        // 0 is property name\n        if (props[i][NAME_INDEX] === name) {\n          return true;\n        }\n      }\n\n      return false;\n    }"}, {"instruction": "Ensure that an array exists at [key] on `object`, and add `value` to it.\n\n@param {Object} object the object to mutate\n@param {string} key the object's key\n@param {*} value the value to add\n@returns {void}\n@private", "input": "JavaScript", "output": "function ensureArrayAndPush(object, key, value) {\n            if (!Array.isArray(object[key])) {\n                object[key] = [];\n            }\n            object[key].push(value);\n        }"}, {"instruction": "Convert the keys in an `obj` using a `convert` function.\n\n@param {Object} obj\n@param {Function} convert", "input": "JavaScript", "output": "function aliasByFunction (obj, convert) {\n  // have to create another object so that ie8 won't infinite loop on keys\n  var output = {};\n  for (var key in obj) output[convert(key)] = obj[key];\n  return output;\n}"}, {"instruction": "un-marshall a data chunk, for ease of matching body is converted to string", "input": "JavaScript", "output": "function(data, escapeHeaderValues) {\n    const onFrame = jasmine.createSpy('onFrame');\n    const onIncomingPing = jasmine.createSpy('onIncomingPing');\n    const parser = new StompJs.Parser(onFrame, onIncomingPing);\n\n    parser.parseChunk(data);\n\n    const rawFrame = onFrame.calls.first().args[0];\n    return StompJs.FrameImpl.fromRawFrame(rawFrame, escapeHeaderValues);\n  }"}, {"instruction": "Manage the codecasting stream. Wait for code events (for each panel) then\nupdate the appropriate panel", "input": "JavaScript", "output": "function codecastStream() {\n    if (!(jsbin && jsbin.panels && jsbin.panels.panels)) return;\n    var editors = jsbin.panels.panels;\n\n    function setCode(event) {\n      var panelId = event.type;\n      if (!editors[panelId]) return;\n      var cursor = editors[panelId].editor.getCursor();\n      editors[panelId].setCode(event.data);\n      editors[panelId].editor.setCursor(cursor);\n    }\n\n    // Update the url when the revision is bumped\n    es.addEventListener('bump-revision', function (event) {\n      window.location.pathname = cleanPath(event.data) + '/edit';\n    });\n    // on data, update the panels, which will cause an automatic render\n    es.addEventListener('css', setCode);\n    es.addEventListener('javascript', setCode);\n    es.addEventListener('html', setCode);\n  }"}, {"instruction": "@private\n\nSets the project root to the given directory, resetting the ProjectModel and file tree in the process.\n\n@param {Directory} rootEntry directory object for the project root\n@return {$.Promise} resolved when the project is done setting up", "input": "JavaScript", "output": "function _setProjectRoot(rootEntry) {\n        var d = new $.Deferred();\n        model.setProjectRoot(rootEntry).then(function () {\n            d.resolve();\n            model.reopenNodes(PreferencesManager.getViewState(\"project.treeState\", _getProjectViewStateContext()));\n        });\n        return d.promise();\n    }"}, {"instruction": "Returns a function that takes an object as an input and maps the object's keys using `mapper`. If the input is not an object, the input is returned unchanged.", "input": "JavaScript", "output": "function keyMapper(mapper) {\n  return obj => {\n    if (!isObject(obj) || Array.isArray(obj)) {\n      return obj;\n    }\n\n    const keys = Object.keys(obj);\n    const out = {};\n\n    for (let i = 0, l = keys.length; i < l; ++i) {\n      const key = keys[i];\n      out[mapper(key)] = obj[key];\n    }\n\n    return out;\n  };\n}"}, {"instruction": "Copyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n \n\nClass: mxMorphing\n\nImplements animation for morphing cells. Here is an example of\nusing this class for animating the result of a layout algorithm:\n\n(code)\ngraph.getModel().beginUpdate();\ntry\n{\nvar circleLayout = new mxCircleLayout(graph);\ncircleLayout.execute(graph.getDefaultParent());\n}\nfinally\n{\nvar morph = new mxMorphing(graph);\nmorph.addListener(mxEvent.DONE, function()\n{\ngraph.getModel().endUpdate();\n});\n\nmorph.startAnimation();\n}\n(end)\n\nConstructor: mxMorphing\n\nConstructs an animation.\n\nParameters:\n\ngraph - Reference to the enclosing <mxGraph>.\nsteps - Optional number of steps in the morphing animation. Default is 6.\nease - Optional easing constant for the animation. Default is 1.5.\ndelay - Optional delay between the animation steps. Passed to <mxAnimation>.", "input": "JavaScript", "output": "function mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n}"}, {"instruction": "returns the number of digits of precision after the decimal point optionally accepts a maximum number, after which point it will stop looking and return the max", "input": "JavaScript", "output": "function(num, max) {\n            max = max || Infinity;\n            var precision = 0;\n\n            while(precision < max && num.toFixed(precision) !== num.toString()) {\n                precision += 1;\n            }\n\n            return precision;\n        }"}, {"instruction": "Removes errors that occur inside a string node\n@param {ASTNode} node to check for matching errors.\n@returns {void}\n@private", "input": "JavaScript", "output": "function removeWhitespaceError(node) {\n            const locStart = node.loc.start;\n            const locEnd = node.loc.end;\n\n            errors = errors.filter(({ loc: errorLoc }) => {\n                if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {\n                    if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }"}, {"instruction": "From http://blog.stevenlevithan.com/archives/faster-trim-javascript\nprofiler shows this is much faster than the previous implementation in both IE and Firefox.\n\n@param {String} str The string to trim.\n@param {String} (Optional) delim The characters to remove from the start/end of the string.\n\n@type String\n@return A trimmed string.", "input": "JavaScript", "output": "function(str, delim) {\n            if (delim) return str.replace(new RegExp(\"^[\\\\s\" + delim + \"]+\"),'').replace(new RegExp(\"[\\\\s\" + delim + \"]+$\"), '');\n            else return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n        }"}, {"instruction": "Create a notification\n@constructor", "input": "JavaScript", "output": "function Notification (payload) {\n  this.encoding = \"utf8\";\n  this.payload = {};\n  this.compiled = false;\n\n  this.aps = {};\n  this.expiry = 0;\n  this.priority = 10;\n\n  if (payload) {\n    for(let key in payload) {\n      if (payload.hasOwnProperty(key)) {\n        this[key] = payload[key];\n      }\n    }\n  }\n}"}, {"instruction": "Sets handlers on all of our input fields on the sandbox dom", "input": "JavaScript", "output": "function setHandlers() {\n    d3.select(`.${chartSelectorClass}`).on('change', _handleChartSelectorChange);\n    d3.select(`.${dataSelectorClass}`).on('change', _handleDataSelectorChange);\n\n    d3.select(`.${dataSubmitButtonClass}`).on('click', _handleDataUpdate);\n    d3.select(`.${dataResetButtonClass}`).on('click', _handleDataReset);\n    d3.select(`.${dataInputSizeToggleClass}`).on('click', _handleDataSizeToggle);\n\n    d3.select(`.${configSubmitButtonClass}`).on('click', _handleConfigUpdate);\n    d3.select(`.${configResetButtonClass}`).on('click', _handleConfigReset);\n\n    d3.select(`.${configAddTooltipClass}`).on('click', _handleAddTooltip.bind(null, tooltipTypes.basic))\n    d3.select(`.${configAddMiniTooltipClass}`).on('click', _handleAddTooltip.bind(null, tooltipTypes.mini))\n}"}, {"instruction": "Returns pointer coordinates relative to canvas.\n@method getPointer\n@return {Object} object with \"x\" and \"y\" number values", "input": "JavaScript", "output": "function (e) {\n      var pointer = getPointer(e);\n      return {\n        x: pointer.x - this._offset.left,\n        y: pointer.y - this._offset.top\n      };\n    }"}, {"instruction": "\u68c0\u6d4b\u662f\u5426\u5b58\u5728\u73af\n@param {Number} id - \u8981\u68c0\u6d4b\u7684id\n@param {Array} traversePath - \u904d\u5386\u65f6\u5b58\u7684\u8def\u5f84\n@return {String|undefined}  - \u5b58\u5728\u73af\u65f6\u8fd4\u56de\u73af\u7684\u540d\u79f0, \u5426\u5219\u8fd4\u56de undefined", "input": "JavaScript", "output": "function (id, traversePath) {\n      var datatype = this.ds.find(function (dt) {\n        return dt.id == id;\n      });\n      if (datatype.format != 0 && datatype.format != 2 || datatype.id === 10000) {\n        // \u975e\u54c8\u5e0c\u3001\u975e\u6570\u7ec4\u3001\u53ef\u53d8\u7c7b\u578b\u65f6\u4e0d\u4f1a\u6709\u5faa\u73af\u4f9d\u8d56\u4ea7\u751f\n        return;\n      }\n      var foundLoop = traversePath.find(function (item) {\n        // todo: \u8fd9\u91cc\u4e0d\u4f7f\u7528\u4e25\u683c\u76f8\u7b49\u5224\u65ad, \u56e0\u4e3a\u540e\u7aef\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u6709\u65f6\u662f\u5b57\u7b26\u6709\u65f6\u662f\u6570\u5b57\n        return item.id == id;\n      });\n      if (foundLoop) {\n        // \u5982\u679c\u5b58\u5728\u73af, \u5c31\u8fd4\u56de\u6570\u636e\u7c7b\u578b\u7684\u540d\u79f0\n        // console.log(traversePath)\n        // console.log(foundLoop.name)\n        return '<' + foundLoop.name + '>';\n      } else {\n        traversePath.push({\n          id: id,\n          name: datatype.name\n        });\n      }\n    }"}, {"instruction": "Drawing in Canvas", "input": "JavaScript", "output": "function _onMakeImage() {\n\t\t\tthis._elImage.src = this._elCanvas.toDataURL(\"image/png\");\n\t\t\tthis._elImage.style.display = \"block\";\n\t\t\tthis._elCanvas.style.display = \"none\";\t\t\t\n\t\t}"}, {"instruction": "invokeToneAssistant calls the invokeToneAsync function to get the tone information for the user's\ninput text (input.text in the payload json object), adds/updates the user's tone in the payload's context,\nand sends the payload to the assistant service to get a response which is printed to screen.\n@param payload a json object containing the basic information needed to converse with the Assistant Service's\nmessage endpoint.\n\nNote: as indicated below, the console.log statements can be replaced with application-specific code to process\nthe err or data object returned by the Assistant Service.", "input": "JavaScript", "output": "function invokeToneAssistant(payload, maintainToneHistoryInContext) {\n  tone_detection\n    .invokeToneAsync(payload, toneAnalyzer)\n    .then(tone => {\n      tone_detection.updateUserTone(\n        payload,\n        tone,\n        maintainToneHistoryInContext\n      );\n      assistant.message(payload, function(err, data) {\n        if (err) {\n          // APPLICATION-SPECIFIC CODE TO PROCESS THE ERROR\n          // FROM ASSISTANT SERVICE\n          console.error(JSON.stringify(err, null, 2));\n        } else {\n          // APPLICATION-SPECIFIC CODE TO PROCESS THE DATA\n          // FROM ASSISTANT SERVICE\n          console.log(JSON.stringify(data, null, 2));\n        }\n      });\n    })\n    .catch(function(err) {\n      console.log(JSON.stringify(err, null, 2));\n    });\n}"}, {"instruction": "Animated works by building a directed acyclic graph of dependencies\ntransparently when you render your Animated components.\n\nnew Animated.Value(0)\n.interpolate()        .interpolate()    new Animated.Value(1)\nopacity               translateY      scale\nstyle                         transform\nView#234                         style\nView#123\n\nA) Top Down phase\nWhen an Animated.Value is updated, we recursively go down through this\ngraph in order to find leaf nodes: the views that we flag as needing\nan update.\n\nB) Bottom Up phase\nWhen a view is flagged as needing an update, we recursively go back up\nin order to build the new value that it needs. The reason why we need\nthis two-phases process is to deal with composite props such as\ntransform which can receive values from multiple parents.", "input": "JavaScript", "output": "function findAnimatedStyles(node, styles) {\n  if (typeof node.update === 'function') styles.add(node)\n  else node.getChildren().forEach(child => findAnimatedStyles(child, styles))\n}"}, {"instruction": "Recursively cleans the payload of all contained requests via {@link #.cleanPayload}.\nModifies the array in-place.\n\n@param {object[]} aRequests\nThe requests\n@returns {object[]}\nThe cleaned requests\n\n@private", "input": "JavaScript", "output": "function (aRequests) {\n\t\t\taRequests.forEach(function (oRequest) {\n\t\t\t\tif (Array.isArray(oRequest)) {\n\t\t\t\t\t_Requestor.cleanBatch(oRequest);\n\t\t\t\t} else {\n\t\t\t\t\toRequest.body = _Requestor.cleanPayload(oRequest.body);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn aRequests;\n\t\t}"}, {"instruction": "client.getNetworks\n\n@description Display the currently available networks\n\n@param {Function}    callback    f(err, networks) where networks is an array of networks\n@returns {*}", "input": "JavaScript", "output": "function (callback) {\n      return this._request({\n        path: this._extension\n      }, function (err, body, res) {\n        return err\n          ? callback(err)\n          : callback(null, body.networks, res);\n      });\n    }"}, {"instruction": "Deep merge two objects.\n@param target\n@param ...sources", "input": "JavaScript", "output": "function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}"}, {"instruction": "Private Attempt to send the event to the socket. If socket no longer exists, remove it from set", "input": "JavaScript", "output": "function sendToMultiple(send, msg, destinations, type) {\n  destinations = destinations instanceof Array && destinations || [destinations];\n  destinations.forEach(function(destination) {\n    var set, socketIds;\n    set = subscriptions[type];\n    if ((socketIds = set.members(destination))) {\n      return socketIds.slice(0).forEach(function(socketId) {\n        if (!send.socketId(socketId, msg, destination)) {\n          return set.removeFromAll(socketId);\n        }\n      });\n    }\n  });\n  return true;\n}"}, {"instruction": "Copyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n \nClass: mxTooltipHandler\n\nGraph event handler that displays tooltips. <mxGraph.getTooltip> is used to\nget the tooltip for a cell or handle. This handler is built-into\n<mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n\nExample:\n\n(code>\nnew mxTooltipHandler(graph);\n(end)\n\nConstructor: mxTooltipHandler\n\nConstructs an event handler that displays tooltips with the specified\ndelay (in milliseconds). If no delay is specified then a default delay\nof 500 ms (0.5 sec) is used.\n\nParameters:\n\ngraph - Reference to the enclosing <mxGraph>.\ndelay - Optional delay in milliseconds.", "input": "JavaScript", "output": "function mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n}"}, {"instruction": "`String.prototype.search` method https://tc39.github.io/ecma262/#sec-string.prototype.search", "input": "JavaScript", "output": "function search(regexp) {\n        var O = requireObjectCoercible(this);\n        var searcher = regexp == undefined ? undefined : regexp[SEARCH];\n        return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n      }"}, {"instruction": "Password signup handler", "input": "JavaScript", "output": "function createUser (req, res, next) {\n    User.insert(req.body, { private: true }, function (err, user) {\n      if (err) {\n        res.render('signup', {\n          params: qs.stringify(req.body),\n          request: req.body,\n          providers: settings.providers,\n          error: err.message\n        })\n      } else {\n        authenticator.dispatch('password', req, res, next, function (err, user, info) {\n          if (err) { return next(err) }\n          if (!user) {\n          } else {\n            authenticator.login(req, user)\n            req.sendVerificationEmail =\n              req.provider.emailVerification.enable\n            req.flash('isNewUser', true)\n            next()\n          }\n        })\n      }\n    })\n  }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, key, value, properties) {\n            $super(key, value, properties);\n            switch(key) {\n\n                case 'chart.showLines':\n                    this.showLines = (value === 'false');\n                    this.mapper.mapValue((value === 'false') ? 0 : 1, [\"plotOptions\", \"area\", \"lineWidth\"]);\n                    break;\n                default:\n                    // no-op, ignore unsupported properties\n                    break;\n\n            }\n        }"}, {"instruction": "i18n: - from .library/appData/manifest/sap.ui5/library/i18n - from library resources (if \"messagebundle.properties\" exists)", "input": "JavaScript", "output": "function i18n() {\n\t\t\t\tconst i18nElement = findChild(libraryAppData, \"i18n\");\n\t\t\t\tif ( i18nElement ) {\n\t\t\t\t\tconst i18n = i18nElement._;\n\t\t\t\t\tif ( i18n === \"false\" ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if ( i18n === \"true\" ) {\n\t\t\t\t\t\treturn \"messagebundle.properties\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn i18n;\n\t\t\t\t\t}\n\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property taken from .library appData: '%s'\", library.i18n);\n\t\t\t\t} else {\n\t\t\t\t\tif ( libBundle.findResource(\"messagebundle.properties\") != null ) {\n\t\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property determined from resources: '%s'\", library.i18n);\n\t\t\t\t\t\treturn \"messagebundle.properties\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "Create a serializer\n\nMethod simply wraps a serializer provided by a user\nso it adds context to the error\n\n@returns {function} Serialization function", "input": "JavaScript", "output": "function createSerializer(serializer) {\n  var applyFn = function serializationWrapper(v, cb) {\n    try {\n      return cb ? serializer(v, cb) : serializer(v);\n    } catch (e) {\n      var modifiedError = new Error('Could not serialize value: ' + e.message);\n      modifiedError.value = v;\n      modifiedError.serializer = serializer;\n      throw modifiedError;\n    }\n  };\n\n  // We can check how many parameters the function has and activate the asynchronous\n  // operation if the number of parameters the function accepts is > 1\n  return {\n    apply: applyFn,\n    async: serializer.length > 1\n  };\n}"}, {"instruction": "Check if the node is a React ES5 component\n\n@param {ASTNode} node The AST node being checked.\n@returns {Boolean} True if the node is a React ES5 component, false if not", "input": "JavaScript", "output": "function (node) {\n      if (!node.parent) {\n        return false;\n      }\n      return /^(React\\.)?createClass$/.test(sourceCode.getText(node.parent.callee));\n    }"}, {"instruction": "istanbul ignore next", "input": "JavaScript", "output": "async function deleteBranch(branchName, abandonAssociatedPr = false) {\n  await config.storage.deleteBranch(branchName);\n  // istanbul ignore if\n  if (abandonAssociatedPr) {\n    const pr = await getBranchPr(branchName);\n    await abandonPr(pr.number);\n  }\n}"}, {"instruction": "Closes the context menu of a column.\n\n@param {sap.ui.table.Table} oTable Instance of the table.\n@param {int} iColumnIndex The index of the column to close the context menu on.\n@see openContextMenu\n@see openColumnContextMenu\n@private", "input": "JavaScript", "output": "function(oTable, iColumnIndex) {\n\t\t\tif (!oTable ||\n\t\t\t\tiColumnIndex == null || iColumnIndex < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oColumns = oTable.getColumns();\n\t\t\tif (iColumnIndex >= oColumns.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oColumn = oColumns[iColumnIndex];\n\t\t\toColumn._closeMenu();\n\t\t}"}, {"instruction": "Proxies the first require call in order to draw back all changes to the Module.wrapper.\nThus our changes don't influence other modules\n\n@param {!String} path", "input": "JavaScript", "output": "function requireProxy(path) {\n    reset();\n    currentModule.require = nodeRequire;\n    return nodeRequire.call(currentModule, path);  // node's require only works when \"this\" points to the module\n}"}, {"instruction": "Creates token that can be fed to <code>EditElement</code>\n@param {Number} start\n@param {String} value\n@param {String} type\n@returns", "input": "JavaScript", "output": "function(start, value, type) {\n\t\t\tvar obj = {\n\t\t\t\tstart: start || 0,\n\t\t\t\tvalue: value || '',\n\t\t\t\ttype: type\n\t\t\t};\n\t\t\t\n\t\t\tobj.end = obj.start + obj.value.length;\n\t\t\treturn obj;\n\t\t}"}, {"instruction": "Resolves the version using an array of UA patterns.\n\n@private\n@param {Array} patterns An array of UA patterns.\n@returns {null|string} The detected version.", "input": "JavaScript", "output": "function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }"}, {"instruction": "Intentionally not documented.", "input": "JavaScript", "output": "function (className, functionName, message) {\n            var msg = this.messageTable[message] ? this.messageTable[message] : message;\n\n            return className + \".\" + functionName + \": \" + msg;\n        }"}, {"instruction": "Supports old \"geospatial view state as separate props\" style TODO - this should either be moved into the core or deprecated", "input": "JavaScript", "output": "function getViewState(props) {\n  if (!props.viewState && 'latitude' in props && 'longitude' in props && 'zoom' in props) {\n    const {latitude, longitude, zoom, pitch = 0, bearing = 0} = props;\n    return {latitude, longitude, zoom, pitch, bearing};\n  }\n  return props.viewState;\n}"}, {"instruction": "To see the overview of app variants, a key user has created from an app", "input": "JavaScript", "output": "function(bAsKeyUser) {\n\t\t\tvar oDescriptor = fnGetDescriptor();\n\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\tvar fnCancel = function() {\n\t\t\t\t\tAppVariantUtils.closeOverviewDialog();\n\t\t\t\t};\n\t\t\t\tsap.ui.require([\"sap/ui/rta/appVariant/AppVariantOverviewDialog\"], function(AppVariantOverviewDialog) {\n\t\t\t\t\tif (!oAppVariantOverviewDialog) {\n\t\t\t\t\t\toAppVariantOverviewDialog = new AppVariantOverviewDialog({\n\t\t\t\t\t\t\tidRunningApp: oDescriptor[\"sap.app\"].id,\n\t\t\t\t\t\t\tisOverviewForKeyUser: bAsKeyUser\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\toAppVariantOverviewDialog.attachCancel(fnCancel);\n\n\t\t\t\t\toAppVariantOverviewDialog.oPopup.attachOpened(function() {\n\t\t\t\t\t\tresolve(oAppVariantOverviewDialog);\n\t\t\t\t\t});\n\n\t\t\t\t\toAppVariantOverviewDialog.open();\n\t\t\t\t});\n\t\t\t});\n\t\t}"}, {"instruction": "Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.\n\n@constructor\n@param {Number} initialClock Initial value for the clock.\n@param {Function} comparer Comparer to determine causality of events based on absolute time.", "input": "JavaScript", "output": "function VirtualTimeScheduler(initialClock, comparer) {\n      this.clock = initialClock;\n      this.comparer = comparer;\n      this.isEnabled = false;\n      this.queue = new PriorityQueue(1024);\n      __super__.call(this);\n    }"}, {"instruction": "Log the progress of a request object.", "input": "JavaScript", "output": "function _logProgress(req) {\n  req.on('response', function(resp) {\n    var len = parseInt(resp.headers['content-length'], 10),\n      bar = new ProgressBar('[:bar]', {\n        complete: '=',\n        incomplete: ' ',\n        total: len,\n        width: 100, // just use 100\n      });\n\n    req.on('data', function(chunk) {\n      bar.tick(chunk.length);\n    });\n  });\n\n  req.on('error', function(err) {\n    console.log(err);\n    _log('error', 'failed to download node sources,');\n    process.exit(1);\n  });\n\n  return req;\n}"}, {"instruction": "Get a list of valid query sort inputs.\n@param model: A mongoose model object.\n@param logger: A logging object.\n@returns {Array}: A list of fields.", "input": "JavaScript", "output": "function(model, logger) {\n    // This line has to come first\n    validationHelper.validateModel(model, logger)\n    const Log = logger.bind()\n\n    let sortableFields = this.getReadableFields(model, Log)\n\n    for (let i = sortableFields.length - 1; i >= 0; i--) {\n      let descendingField = '-' + sortableFields[i]\n      sortableFields.splice(i, 0, descendingField)\n    }\n\n    return sortableFields\n  }"}, {"instruction": "Starts the Cache Manager (all next calls to it will work against real cache data)\nUsages are meant for testing purposes. If its already on, nothing will happen\n@returns {*}\n@protected", "input": "JavaScript", "output": "function () {\n\t\t\t\tvar that = this;\n\t\t\t\treturn Promise.resolve().then(function () {\n\t\t\t\t\tvar oCfg = sap.ui.getCore().getConfiguration();\n\t\t\t\t\tif (!oCfg.isUI5CacheOn()) {\n\t\t\t\t\t\tsafeClearInstance(that);\n\t\t\t\t\t\tsap.ui.getCore().getConfiguration().setUI5CacheOn(true);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\t\t\t}"}, {"instruction": "Need to re-render if the sort order or the contents change.", "input": "JavaScript", "output": "function (nextProps, nextState) {\n            return nextProps.forceRender ||\n                this.props.contents !== nextProps.contents ||\n                this.props.sortDirectoriesFirst !== nextProps.sortDirectoriesFirst ||\n                this.props.extensions !== nextProps.extensions;\n        }"}, {"instruction": "/* See if an element is within eruda.", "input": "JavaScript", "output": "function exports(el) {\n  let parentNode = el.parentNode\n\n  if (!parentNode) return false\n\n  while (parentNode) {\n    parentNode = parentNode.parentNode\n    if (parentNode && parentNode.id === 'eruda') return true\n  }\n\n  return false\n}"}, {"instruction": "Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists", "input": "JavaScript", "output": "function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}"}, {"instruction": "We don't need to publish all of a doc's data to the app, that will add many kilobytes of loading overhead.", "input": "JavaScript", "output": "function publicDocData(doc, extraData) {\n  const options = _.assign(extraData || {}, { hasDemo: (doc.docType === 'directive') });\n\n  // This RegEx always retrieves the last source descriptor.\n  // For example it retrieves from `/opt/material/src/core/services/ripple/ripple.js` the following\n  // source descriptor: `src/core/`.\n  // This is needed because components are not only located in `src/components`.\n  let descriptor = doc.fileInfo.filePath.toString().match(/src\\/.*?\\//g).pop();\n  if (descriptor) {\n    descriptor = descriptor.substring(descriptor.indexOf('/') + 1, descriptor.lastIndexOf('/'));\n  }\n\n  return buildDocData(doc, options, descriptor || 'components');\n}"}, {"instruction": "Sets up the map including the speaker audio points.", "input": "JavaScript", "output": "function() {\n    // Loop through the tiles and setup the audio listeners.\n    for (var i=0; i<this.grid.length; i++) {\n      if (this.grid[i] === 2) {\n        var y = Math.floor(i / this.size);\n        var x = i % this.size;\n        game.audio.speaker(x, y);\n      }\n    }\n  }"}, {"instruction": "https://github.com/jsdoc3/jsdoc/issues/1272", "input": "JavaScript", "output": "function _detailedStringForDecryptionError(err, details) {\n    let result = err.name + '[msg: ' + err.message;\n\n    if (details) {\n        result += ', ' +\n            Object.keys(details).map(\n                (k) => k + ': ' + details[k],\n            ).join(', ');\n    }\n\n    result += ']';\n\n    return result;\n}"}, {"instruction": "Wait until the Tab View has been closed", "input": "JavaScript", "output": "function tabView_waitForClosed() {\n    // Add event listener to wait until the tabview has been closed\n    var self = { closed: false };\n    function checkClosed() { self.closed = true; }\n    this._controller.window.addEventListener(\"tabviewhidden\", checkClosed, false);\n\n    try {\n      mozmill.utils.waitFor(function() {\n        return self.closed == true;\n      }, TIMEOUT, 100, \"TabView is still open.\");\n    } finally {\n      this._controller.window.removeEventListener(\"tabviewhidden\", checkClosed, false);\n    }\n\n    this._tabViewObject = null;\n    this._groupItemsObject = null;\n    this._tabItemsObject = null;\n  }"}, {"instruction": "/*\nGets the URL for the specified remote of a repo", "input": "JavaScript", "output": "function getRemoteUrl(repo, remote) {\n  return wrapPromise(function (resolve, reject) {\n    repo.config(function (err, config) {\n      if (err) {\n        reject(new Error('Failed to find git repository in ' + config.path))\n        return\n      }\n\n      resolve(config.items['remote.' + remote + '.url'])\n    })\n  })\n}"}, {"instruction": "add multiple items to the list via BindingContext", "input": "JavaScript", "output": "function(aContexts, oBindingInfo, bSuppressInvalidate) {\n\t\t\tfor (var i = 0; i < aContexts.length; i++) {\n\t\t\t\tthis.addListItem(aContexts[i], oBindingInfo, bSuppressInvalidate);\n\t\t\t}\n\t\t}"}, {"instruction": "Private function, gets a Unicode code point from a JavaScript UTF-16 string handling surrogate pairs appropriately", "input": "JavaScript", "output": "function codePointAt(str, idx){\n\t\tif(idx === undefined){\n\t\t\tidx = 0;\n\t\t}\n\t\tvar code = str.charCodeAt(idx);\n\n\t\t// if a high surrogate\n\t\tif (0xD800 <= code && code <= 0xDBFF && \n\t\t\tidx < str.length - 1){\n\t\t\tvar hi = code;\n\t\t\tvar low = str.charCodeAt(idx + 1);\n\t\t\tif (0xDC00 <= low && low <= 0xDFFF){\n\t\t\t\treturn ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t\t\t}\n\t\t\treturn hi;\n\t\t}\n\t\t\n\t\t// if a low surrogate\n\t\tif (0xDC00 <= code && code <= 0xDFFF &&\n\t\t\tidx >= 1){\n\t\t\tvar hi = str.charCodeAt(idx - 1);\n\t\t\tvar low = code;\n\t\t\tif (0xD800 <= hi && hi <= 0xDBFF){\n\t\t\t\treturn ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t\t\t}\n\t\t\treturn low;\n\t\t}\n\t\t\n\t\t//just return the char if an unmatched surrogate half or a \n\t\t//single-char codepoint\n\t\treturn code;\n\t}"}, {"instruction": "Returns deepest child of current section (or section itself)\nwhich includes given position.\n@param  {Number} pos\n@return {CSSSection}", "input": "JavaScript", "output": "function(pos) {\n\t\t\tif (!this.range.inside(pos)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfor (var i = 0, il = this.children.length, m; i < il; i++) {\n\t\t\t\tm = this.children[i].matchDeep(pos);\n\t\t\t\tif (m) {\n\t\t\t\t\treturn m;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn this.parent ? this : null;\n\t\t}"}, {"instruction": "Block to repeat until a condition becomes true.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"message0\": Blockly.Msg.CONTROL_REPEATUNTIL,\n      \"message1\": \"%1\",\n      \"message2\": \"%1\",\n      \"lastDummyAlign2\": \"RIGHT\",\n      \"args0\": [\n        {\n          \"type\": \"input_value\",\n          \"name\": \"CONDITION\",\n          \"check\": \"Boolean\"\n        }\n      ],\n      \"args1\": [\n        {\n          \"type\": \"input_statement\",\n          \"name\": \"SUBSTACK\"\n        }\n      ],\n      \"args2\": [\n        {\n          \"type\": \"field_image\",\n          \"src\": Blockly.mainWorkspace.options.pathToMedia + \"repeat.svg\",\n          \"width\": 24,\n          \"height\": 24,\n          \"alt\": \"*\",\n          \"flip_rtl\": true\n        }\n      ],\n      \"category\": Blockly.Categories.control,\n      \"extensions\": [\"colours_control\", \"shape_statement\"]\n    });\n  }"}, {"instruction": "Clear all elements.\n\n@private", "input": "JavaScript", "output": "function () {\n        var elMap = this._elMap;\n        elMap.each(function (el) {\n            removeEl(el, elMap);\n        });\n        this._elMap = zrUtil.createHashMap();\n    }"}, {"instruction": "Stroke a line of the given two points\n@name strokeLine\n@memberOf me.CanvasRenderer.prototype\n@function\n@param {Number} startX the start x coordinate\n@param {Number} startY the start y coordinate\n@param {Number} endX the end x coordinate\n@param {Number} endY the end y coordinate", "input": "JavaScript", "output": "function (startX, startY, endX, endY) {\n            var context = this.backBufferContext2D;\n\n            if (context < 1 / 255) {\n                // Fast path: don't draw fully transparent\n                return;\n            }\n\n            context.beginPath();\n            context.moveTo(startX, startY);\n            context.lineTo(endX, endY);\n            context.stroke();\n        }"}, {"instruction": "Calls the provided DOM property descriptor and returns its result. If the\ndescriptor is not available, use fallbackPropertyName to get the property\nvalue in a clobber-vulnerable way, and use fallbackTest to check if the\nproperty was clobbered, throwing an exception if so.\n@param {?Function} fn\n@param {*} object\n@param {string} fallbackPropertyName\n@param {function(*):boolean} fallbackTest\n@return {?}", "input": "JavaScript", "output": "function genericPropertyGet(fn, object, fallbackPropertyName, fallbackTest) {\n  if (fn) {\n    return fn.apply(object);\n  }\n  var propertyValue = object[fallbackPropertyName];\n  if (!fallbackTest(propertyValue)) {\n    throw new Error('Clobbering detected');\n  }\n  return propertyValue;\n}"}, {"instruction": "Point towards drop-down menu.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"TOWARDS\",\n          \"options\": [\n            [Blockly.Msg.MOTION_POINTTOWARDS_POINTER, '_mouse_'],\n            [Blockly.Msg.MOTION_POINTTOWARDS_RANDOM, '_random_']\n          ]\n        }\n      ],\n      \"colour\": Blockly.Colours.motion.secondary,\n      \"colourSecondary\": Blockly.Colours.motion.secondary,\n      \"colourTertiary\": Blockly.Colours.motion.tertiary,\n      \"extensions\": [\"output_string\"]\n    });\n  }"}, {"instruction": "Writes the additonal style HTML into the rendermanger (see renderStep)", "input": "JavaScript", "output": "function(rm, sId, iIdx){\n\t\trm.write(\"<div\");\n\t\trm.writeAttribute(\"id\", sId + \"-add\" + iIdx);\n\t\trm.addClass(\"sapUiRoadMapStepAdd\" + iIdx);\n\t\trm.writeClasses();\n\t\trm.write(\"></div>\");\n\t}"}, {"instruction": "emulate functionref.apply for IE mac and IE win < 5.5", "input": "JavaScript", "output": "function xbDebugApplyFunction(funcname, funcref, thisref, argumentsref)\n{\n    var rv;\n\n    if (!funcref)\n    {\n        alert('xbDebugApplyFunction: funcref is null');\n    }\n\n    if (typeof(funcref.apply) != 'undefined')\n        return funcref.apply(thisref, argumentsref);\n\n    var applyexpr = 'thisref.xbDebug_orig_' + funcname + '(';\n    var i;\n\n    for (i = 0; i < argumentsref.length; i++)\n    {\n        applyexpr += 'argumentsref[' + i + '],';\n    }\n\n    if (argumentsref.length > 0)\n    {\n        applyexpr = applyexpr.substring(0, applyexpr.length - 1);\n    }\n\n    applyexpr += ')';\n\n    return eval(applyexpr);\n}"}, {"instruction": "Transfer learning logic.\n Scroll to the bottom of the page", "input": "JavaScript", "output": "function scrollToPageBottom() {\n  const scrollingElement = (document.scrollingElement || document.body);\n  scrollingElement.scrollTop = scrollingElement.scrollHeight;\n}"}, {"instruction": "W3C MessageEvent\n\n@see http://www.w3.org/TR/webmessaging/#event-definitions\n@api private", "input": "JavaScript", "output": "function MessageEvent (type, eventInitDict) {\n  Object.defineProperty(this, 'type', { writable: false, value: type, enumerable: true })\n  for (var f in eventInitDict) {\n    if (eventInitDict.hasOwnProperty(f)) {\n      Object.defineProperty(this, f, { writable: false, value: eventInitDict[f], enumerable: true })\n    }\n  }\n}"}, {"instruction": "Return true if the r,g,b,a values of this color are equal with the\ngiven one.\n@name equals\n@memberOf me.Color\n@function\n@param {me.Color} color\n@return {Boolean}", "input": "JavaScript", "output": "function (color) {\n            return (\n                (this.glArray[0] === color.glArray[0]) &&\n                (this.glArray[1] === color.glArray[1]) &&\n                (this.glArray[2] === color.glArray[2]) &&\n                (this.glArray[3] === color.glArray[3])\n            );\n        }"}, {"instruction": "Emit controls section of pieces editor modal: the cancel/save buttons, etc.", "input": "JavaScript", "output": "function() {\n      var req = self.apos.templates.contextReq;\n      return self.partial('controls', { controls: self.getEditControls(req), options: self.options });\n    }"}, {"instruction": "Generate JSON icons map by parsing the generated CSS\n\n@param  {Object} options\n@return {void}", "input": "JavaScript", "output": "async function generateJson(options, generatorResult) {\n  const jsonPath = (\n    options.jsonPath ||\n    `${ path.join(options.outputDir, '/' + options.fontName) }.json`\n  )\n\n  const css = generatorResult.generateCss()\n  let map = {}\n\n  css.replace(CSS_PARSE_REGEX, (match, name, code) => map[name] = code)\n\n  await fsAsync.writeFile(jsonPath, JSON.stringify(map, null, 4))\n}"}, {"instruction": "OAuth2Strategy\n\nProvider is an object defining the details of the authentication API.\nClient is an object containing provider registration info and options.\nVerify is the Passport callback to invoke after authenticating", "input": "JavaScript", "output": "function OAuth2Strategy (provider, client, verify) {\n  Strategy.call(this)\n  this.provider = provider\n  this.endpoints = provider.endpoints\n  this.mapping = provider.mapping\n  this.client = client\n  this.name = provider.id\n  this.verify = verify\n}"}, {"instruction": "Builds the data to be POSTed to elastic search.\n\n@param {string} searchTerm The plain-text query to search for.\n@param {number} maxResults The max number of results to search for.", "input": "JavaScript", "output": "function buildRequestData(searchTerm, maxResults) {\n  var requestData = {\n    numHits: maxResults,\n    fuzzy: {\n      maxEdits: 2,\n      minLength: 5,\n      prefixLength: 2\n    }\n  };\n\n  if (searchTerm instanceof Array) {\n    requestData[\"addresses\"] = searchTerm.map(processAddress);\n  } else {\n    requestData[\"addr\"] = processAddress(searchTerm);\n  }\n  return requestData;\n}"}, {"instruction": "Write a Cues element to the blobStream using the global `cues` array of CuePoints (use addCuePoint()).\nThe seek entry for the Cues in the SeekHead is updated.", "input": "JavaScript", "output": "function writeCues() {\n                var\n                    ebml = {\n                        \"id\": 0x1C53BB6B,\n                        \"data\": cues\n                    },\n                    \n                    cuesBuffer = new ArrayBufferDataStream(16 + cues.length * 32); // Pretty crude estimate of the buffer size we'll need\n                \n                writeEBML(cuesBuffer, blobBuffer.pos, ebml);\n                blobBuffer.write(cuesBuffer.getAsDataArray());\n                \n                // Now we know where the Cues element has ended up, we can update the SeekHead\n                seekPoints.Cues.positionEBML.data = fileOffsetToSegmentRelative(ebml.offset);\n            }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, axis, formatter, chart) {\n            $super(axis, formatter, chart);\n            var fontSize = 11,\n                tickLabelPadding = 2;\n\n            if(this.isVertical) {\n                this.checkFirstLabelFit(axis, formatter, chart, fontSize);\n            }\n            else {\n                this.checkLastLabelFit(axis, formatter, chart, fontSize);\n            }\n        }"}, {"instruction": "/*!\n@param {Object} easingObject\n@param {Object} tokenData", "input": "JavaScript", "output": "function collapseEasingObject (easingObject, tokenData) {\n      Tweenable.each(tokenData, function (prop) {\n        var currentProp = tokenData[prop];\n        var chunkNames = currentProp.chunkNames;\n        var chunkLength = chunkNames.length;\n        var composedEasingString = '';\n\n        for (var i = 0; i < chunkLength; i++) {\n          composedEasingString += ' ' + easingObject[chunkNames[i]];\n          delete easingObject[chunkNames[i]];\n        }\n\n        easingObject[prop] = composedEasingString.substr(1);\n      });\n    }"}, {"instruction": "Compare this specificity to another.\n@param {Specificity} other The other specificity to compare to.\n@return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.\n@method compare", "input": "JavaScript", "output": "function(other) {\n        var comps = [\"a\", \"b\", \"c\", \"d\"],\n            i, len;\n\n        for (i=0, len=comps.length; i < len; i++) {\n            if (this[comps[i]] < other[comps[i]]) {\n                return -1;\n            } else if (this[comps[i]] > other[comps[i]]) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }"}, {"instruction": "##### BEGIN: MODIFIED BY SAP functions crc32, utf8encode and utf8decode are replaced with implementations by SAP", "input": "JavaScript", "output": "function(buf, crc) {\n\n      var c = (typeof(crc) == \"undefined\" ? 0 : crc) ^ 0xffffffff;\n      var bArray  = typeof buf !== \"string\";\n      var n;\n\n      if (bArray) {\n        for (n = 0; n < buf.length; n++) {\n          c = SAP_CRC32_TABLE[(c ^ buf[n]) & 0xff] ^ (c >>> 8);\n        }\n      } else {\n        for (n = 0; n < buf.length; n++) {\n          c = SAP_CRC32_TABLE[(c ^ buf.charCodeAt(n)) & 0xff] ^ (c >>> 8);\n        }\n      }\n\n      return c ^ 0xffffffff;\n    }"}, {"instruction": "Validate a texture, either as a selector or as a URL.\nDetects whether `src` is pointing to an image or video and invokes the appropriate\ncallback.\n\n`src` will be passed into the callback\n\n@params {string|Element} src - URL or media element.\n@params {function} isImageCb - callback if texture is an image.\n@params {function} isVideoCb - callback if texture is a video.", "input": "JavaScript", "output": "function validateSrc (src, isImageCb, isVideoCb) {\n  checkIsImage(src, function isAnImageUrl (isImage) {\n    if (isImage) {\n      isImageCb(src);\n      return;\n    }\n    isVideoCb(src);\n  });\n}"}, {"instruction": "A parameter that specifies an arbitrary polygon on the globe.\n\n@alias GeoJsonParameter\n@constructor\n@extends FunctionParameter\n\n@param {Object} options Object with the following properties:\n@param {Terria} options.terria The Terria instance.\n@param {String} options.id The unique ID of this parameter.\n@param {String} [options.name] The name of this parameter. If not specified, the ID is used as the name.\n@param {String} [options.description] The description of the parameter.\n@param {Boolean} [options.defaultValue] The default value.", "input": "JavaScript", "output": "function(options) {\n  FunctionParameter.call(this, options);\n  this.regionParameter = options.regionParameter;\n  this.value = \"\";\n  this._subtype = undefined;\n}"}, {"instruction": "/* Is the given date in the accepted range?", "input": "JavaScript", "output": "function(inst, date) {\n\t\tvar yearSplit, currentYear,\n\t\t\tminDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\tmaxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\tminYear = null,\n\t\t\tmaxYear = null,\n\t\t\tyears = this._get(inst, \"yearRange\");\n\t\t\tif (years){\n\t\t\t\tyearSplit = years.split(\":\");\n\t\t\t\tcurrentYear = new Date().getFullYear();\n\t\t\t\tminYear = parseInt(yearSplit[0], 10);\n\t\t\t\tmaxYear = parseInt(yearSplit[1], 10);\n\t\t\t\tif ( yearSplit[0].match(/[+\\-].*/) ) {\n\t\t\t\t\tminYear += currentYear;\n\t\t\t\t}\n\t\t\t\tif ( yearSplit[1].match(/[+\\-].*/) ) {\n\t\t\t\t\tmaxYear += currentYear;\n\t\t\t\t}\n\t\t\t}\n\n\t\treturn ((!minDate || date.getTime() >= minDate.getTime()) &&\n\t\t\t(!maxDate || date.getTime() <= maxDate.getTime()) &&\n\t\t\t(!minYear || date.getFullYear() >= minYear) &&\n\t\t\t(!maxYear || date.getFullYear() <= maxYear));\n\t}"}, {"instruction": "Returns an array of the IDs of providers registered for a specific language\n\n@param {!string} languageId\n@return {Array.<string>} Names of registered providers.", "input": "JavaScript", "output": "function getProviderIDsForLanguage(languageId) {\n        if (!_providers[languageId]) {\n            return [];\n        }\n        return _providers[languageId].map(function (provider) {\n            return provider.name;\n        });\n    }"}, {"instruction": "Converts all object property names to leading '--' style\n\n@param {object} varObj Object containing CSS custom property name:value pairs\n@returns {object}", "input": "JavaScript", "output": "function fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}"}, {"instruction": "/* Returns a promise that returns true if user confirms, or false if they abort.", "input": "JavaScript", "output": "function getConfirmation(terria, viewState, confirmConversion, message) {\n  if (!confirmConversion) {\n    return when(true);\n  }\n\n  var d = when.defer(); // there's no `when.promise(resolver)` in when 1.7.1\n  viewState.notifications.push({\n    confirmText: \"Upload\",\n    denyText: \"Cancel\",\n    title: \"Use conversion service?\",\n    message: message,\n    confirmAction: function() {\n      d.resolve(true);\n    },\n    denyAction: function() {\n      d.resolve(false);\n    }\n  });\n  return d.promise;\n}"}, {"instruction": "Specify that only a page of the query result shall be returned. A page is\ndescribed by its boundaries, that are row numbers for the first and last\nrows in the query result to be returned.\n\n@param {Number}\nstart The first row of the query result to be returned.\nNumbering starts at 1. Passing null is equivalent to start\nwith the first row.\n@param {Number}\nend The last row of the query result to be returned. Passing\nnull is equivalent to get all rows up to the end of the query\nresult.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResultRequest#setResultPageBoundaries", "input": "JavaScript", "output": "function(start, end) {\n\t\t\tif (start != null && typeof start !== \"number\") {\n\t\t\t\tthrow \"Start value must be null or numeric\"; // TODO\n\t\t\t}\n\t\t\tif (end !== null && typeof end !== \"number\") {\n\t\t\t\tthrow \"End value must be null or numeric\"; // TODO\n\t\t\t}\n\n\t\t\tif (start == null) {\n\t\t\t\tstart = 1;\n\t\t\t}\n\n\t\t\tif (start < 1 || start > (end == null ? start : end)) {\n\t\t\t\tthrow \"Invalid values for requested page boundaries\"; // TODO\n\t\t\t}\n\n\t\t\tthis._iSkipRequestOption = (start > 1) ? start - 1 : null;\n\t\t\tthis._iTopRequestOption = (end != null) ? (end - start + 1) : null;\n\t\t}"}, {"instruction": "classic build with sourcemaps", "input": "JavaScript", "output": "function build_dist_sourcemap(){\n  // run webpack\n  return gulp.src('index.js').pipe(webpackStream(createWebpackConfig({\n    mode: 'development',\n    entry: classicEntry,\n    output: {\n        filename:'oidc-client.js',\n        libraryTarget:'var',\n        library:'Oidc'\n    },\n    plugins: [],\n    devtool:'inline-source-map'\n  }), webpack))\n  .pipe(gulp.dest('dist/'));\n}"}, {"instruction": "Texture Channels to Texture *****************************************", "input": "JavaScript", "output": "function LGraphChannelsTexture() {\n            this.addInput(\"R\", \"Texture\");\n            this.addInput(\"G\", \"Texture\");\n            this.addInput(\"B\", \"Texture\");\n            this.addInput(\"A\", \"Texture\");\n\n            this.addOutput(\"Texture\", \"Texture\");\n\n            this.properties = {\n                precision: LGraphTexture.DEFAULT,\n                R: 1,\n                G: 1,\n                B: 1,\n                A: 1\n            };\n            this._color = vec4.create();\n            this._uniforms = {\n                u_textureR: 0,\n                u_textureG: 1,\n                u_textureB: 2,\n                u_textureA: 3,\n                u_color: this._color\n            };\n        }"}, {"instruction": "wrap session methods", "input": "JavaScript", "output": "function wrapmethods(sess) {\n      var _reload = sess.reload\n      var _save = sess.save;\n\n      function reload(callback) {\n        debug('reloading %s', this.id)\n        _reload.call(this, function () {\n          wrapmethods(req.session)\n          callback.apply(this, arguments)\n        })\n      }\n\n      function save() {\n        debug('saving %s', this.id);\n        savedHash = hash(this);\n        _save.apply(this, arguments);\n      }\n\n      Object.defineProperty(sess, 'reload', {\n        configurable: true,\n        enumerable: false,\n        value: reload,\n        writable: true\n      })\n\n      Object.defineProperty(sess, 'save', {\n        configurable: true,\n        enumerable: false,\n        value: save,\n        writable: true\n      });\n    }"}, {"instruction": "Checks if value is not undefined, in which case the\nsetter function for a given property is called.\nReturns true if value is set, false otherwise.\n\n@private", "input": "JavaScript", "output": "function checkAndSetProperty(oControl, property, value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tvar fSetter = oControl['set' + capitalize(property)];\n\t\t\t\tif (typeof (fSetter) === \"function\") {\n\t\t\t\t\tfSetter.call(oControl, value);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}"}, {"instruction": "Checks package.json of the extracted extension for npm dependencies\nand runs npm install when required.\n@param {Object} validationResult return value of the validation procedure\n@param {Function} callback function to be called after the end of validation procedure", "input": "JavaScript", "output": "function performNpmInstallIfRequired(npmOptions, validationResult, callback) {\n\n    function finish() {\n        callback(null, validationResult);\n    }\n\n    var installDirectory = path.join(validationResult.extractDir, validationResult.commonPrefix);\n    var packageJson;\n\n    try {\n        packageJson = fs.readJsonSync(path.join(installDirectory, \"package.json\"));\n    } catch (e) {\n        packageJson = null;\n    }\n\n    if (!packageJson || !packageJson.dependencies || !Object.keys(packageJson.dependencies).length) {\n        return finish();\n    }\n\n    _performNpmInstall(installDirectory, npmOptions, function (err) {\n        if (err) {\n            validationResult.errors.push([Errors.NPM_INSTALL_FAILED, err.toString()]);\n        }\n        finish();\n    });\n}"}, {"instruction": "Coerces the HTTP request body to a Buffer\n\n@param {string|Buffer} body\n@param {*} encoding", "input": "JavaScript", "output": "function getBodyAsBuffer(body, encoding) {\n  return body instanceof Buffer\n    ? body\n    : Buffer.from(`${body || ''}`, normalizeBodyEncoding(encoding));\n}"}, {"instruction": "Override configuration values\n\n@method setConfig\n\n@param {Object}", "input": "JavaScript", "output": "function setConfig (options) {\n  Object.keys(options).forEach((option) => {\n    if (config[option] !== undefined) {\n      config[option] = options[option]\n    }\n  })\n}"}, {"instruction": "Recursively dive()s every custom component in a wrapper until\nthe target component is found.\n\n@param {ShallowWrapper} wrapper A ShallowWrapper to search\n@param {ComponentType} target A react custom component that, when found, will end recursion\n@param {Adapter} adapter An Enzyme adapter\n@returns {ShallowWrapper|undefined} A ShallowWrapper for the target, or\nundefined if it can't be found", "input": "JavaScript", "output": "function deepRender(wrapper, target, adapter) {\n  const node = wrapper[NODE];\n  const element = node && adapter.nodeToElement(node);\n  if (wrapper.type() === target) {\n    return wrapper.dive();\n  }\n  if (element && isCustomComponentElement(element, adapter)) {\n    return deepRender(wrapper.dive(), target, adapter);\n  }\n  const children = wrapper.children();\n  for (let i = 0; i < children.length; i += 1) {\n    const found = deepRender(children.at(i), target, adapter);\n    if (typeof found !== 'undefined') {\n      return found;\n    }\n  }\n  return undefined;\n}"}, {"instruction": "Create a middleware for filtering files.\n\n@param {Object} filters\n@return {Function}", "input": "JavaScript", "output": "function filterFiles (filters) {\n  return (files, metalsmith, done) => {\n    filter(files, filters, metalsmith.metadata(), done)\n  }\n}"}, {"instruction": "Get dictionary of experiment keys and variations.\n\nhttp://visualwebsiteoptimizer.com/knowledge/integration-of-vwo-with-kissmetrics/\n\n@param {Function} fn\n@return {Object}", "input": "JavaScript", "output": "function experiments(fn) {\n  enqueue(function() {\n    var data = {};\n    var ids = window._vwo_exp_ids;\n    if (!ids) return fn();\n    each(ids, function(id) {\n      var name = variation(id);\n      if (name) data['Experiment: ' + id] = name;\n    });\n    fn(null, data);\n  });\n}"}, {"instruction": "Returns the value that is the nearest power of 2 less than or equal to the given value.\n@param {Number} value the reference value. The power of 2 returned is less than or equal to this value.\n@returns {Number} the value that is the nearest power of 2 less than or equal to the reference value", "input": "JavaScript", "output": "function (value) {\n                var power = Math.floor(Math.log(value) / Math.log(2));\n                return Math.pow(2, power);\n            }"}, {"instruction": "Check if is running inside Now.sh and apply variables and secrets to `process.env`", "input": "JavaScript", "output": "function config() {\n  // only run this if it's not running inside Now.sh\n  if (Boolean(process.env.NOW_REGION || process.env.NOW)) return\n\n  const secrets = loadSecrets()\n  const required = loadRequired()\n\n  // load environment variables from now.json\n  loadNowJSON(secrets, required)\n}"}, {"instruction": "Generate a URL with the host data given by opts and the given path", "input": "JavaScript", "output": "function genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}"}, {"instruction": "/* [MS-XLS] 2.4.4 TODO", "input": "JavaScript", "output": "function parse_Array(blob, length, opts) {\n\tvar ref = parse_Ref(blob, 6);\n\t/* TODO: fAlwaysCalc */\n\tswitch(opts.biff) {\n\t\tcase 2: blob.l ++; length -= 7; break;\n\t\tcase 3: case 4: blob.l += 2; length -= 8; break;\n\t\tdefault: blob.l += 6; length -= 12;\n\t}\n\treturn [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n}"}, {"instruction": "\u83b7\u53d6\u5bbd\u5ea6\n@param  {HTMLElement} el  dom\u8282\u70b9\n@param  {Number} defaultValue \u9ed8\u8ba4\u503c\n@return {Number} \u5bbd\u5ea6", "input": "JavaScript", "output": "function getWidth(el, defaultValue) {\n    var width = this.getStyle(el, 'width', defaultValue);\n    if (width === 'auto') {\n      width = el.offsetWidth;\n    }\n    return parseFloat(width);\n  }"}, {"instruction": "=================== new v2 =================== list", "input": "JavaScript", "output": "function postAddListValue (req, res, next) {\n    let key = req.body.key;\n    let value = req.body.value;\n    let type = req.body.type;\n    let connectionId = req.body.connectionId;\n    getConnection(req, res, function () {\n        addListValue(key, value, type, res, next);\n    }, connectionId);\n}"}, {"instruction": "Retrieve the value of an individual preference.\n\n@param {string} prefName\nThe preference to get the value of.\n@param {boolean/number/string} defaultValue\nThe default value if preference cannot be found.\n@param {boolean/number/string} defaultBranch\nIf true the value will be read from the default branch (optional)\n@param {string} interfaceType\nInterface to use for the complex value (optional)\n(nsILocalFile, nsISupportsString, nsIPrefLocalizedString)\n\n@return The value of the requested preference\n@type boolean/int/string/complex", "input": "JavaScript", "output": "function preferences_getPref(prefName, defaultValue, defaultBranch,\n                                         interfaceType) {\n    try {\n      branch = defaultBranch ? this.defaultPrefBranch : this.prefBranch;\n\n      // If interfaceType has been set, handle it differently\n      if (interfaceType != undefined) {\n        return branch.getComplexValue(prefName, interfaceType);\n      }\n\n      switch (typeof defaultValue) {\n        case ('boolean'):\n          return branch.getBoolPref(prefName);\n        case ('string'):\n          return branch.getCharPref(prefName);\n        case ('number'):\n          return branch.getIntPref(prefName);\n        default:\n          return undefined;\n      }\n    } catch(e) {\n      return defaultValue;\n    }\n  }"}, {"instruction": "Opens the given collection.\n\n@param   {DataStore}         dataStore  - The DataStore to operate on\n@param   {string|Resource}   collection - The collection path or a Resource object\n@param   {function}          callback   - Called with Error, collection Resource, and Resource array", "input": "JavaScript", "output": "function openCollection (dataStore, collection, callback) {\n  if (_.isString(collection)) {\n    collection = new Resource(collection, \"\", \"\");\n  }\n  else if (!(collection instanceof Resource)) {\n    throw ono(\"Expected a string or Resource object. Got a %s instead.\", typeof (collection));\n  }\n\n  // Normalize the collection name\n  let collectionName = collection.valueOf(dataStore.__router, true);\n\n  // Open the data store\n  dataStore.__openDataStore(collectionName, (err, resources) => {\n    callback(err, collection, resources);\n  });\n}"}, {"instruction": "/*\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 2); // [1, 2, 'a', 'c', 'e', 5, 6]\ninsert([1, 2, 5, 6], 'a', 2); // [1, 2, 'a', 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 0); // ['a', 'c', 'e', 1, 2, 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e']); // ['a', 'c', 'e', 1, 2, 5, 6]", "input": "JavaScript", "output": "function insert(arr1, arr2, index) {\n  if (!Array.isArray(arr1)) {\n    throw new Error('expected an array for first argument');\n  }\n  if (arguments.length > 2 && typeof index != 'number') {\n    throw new Error('expected a number for third argument');\n  }\n  if (!Array.isArray(arr2)) {\n    arr2 = [arr2];\n  }\n  if (!index) {\n    return arr2.concat(arr1);\n  }\n  var front = arr1.slice(0, index);\n  var back = arr1.slice(index);\n  return front.concat(arr2, back);\n}"}, {"instruction": "Gets the first visible child in the openMenuNode\nNecessary incase menu nodes are being dynamically hidden", "input": "JavaScript", "output": "function firstVisibleChild() {\n        for (var i = 0; i < openMenuNode.children.length; ++i) {\n          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {\n            return openMenuNode.children[i];\n          }\n        }\n      }"}, {"instruction": "removes a given listener by looking at all registered targets and their listeners. if there are no more listeners to a target, the registered target is removed from the mTargets map.", "input": "JavaScript", "output": "function destroy(oListener) {\n\t\tfor (var n in mTargets) {\n\t\t\tvar oTargetConfig = mTargets[n];\n\t\t\tfor (var i = 0; i < oTargetConfig.listeners.length; i++) {\n\t\t\t\tif (oTargetConfig.listeners[i] === oListener) {\n\t\t\t\t\toTargetConfig.listeners.splice(i, 1);\n\t\t\t\t\toTargetConfig.configurations.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (oTargetConfig.listeners && oTargetConfig.listeners.length === 0) {\n\t\t\t\tdelete mTargets[n];\n\t\t\t\toTargetConfig.object._observer = undefined;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "/*!\nRecursively check the equality of two objects.\nOnce basic sameness has been established it will\ndefer to `deepEqual` for each enumerable key\nin the object.\n\n@param {Mixed} a\n@param {Mixed} b\n@return {Boolean} result", "input": "JavaScript", "output": "function objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}"}, {"instruction": "same as Array.prototype.slice, but also works on typed arrays", "input": "JavaScript", "output": "function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t}"}, {"instruction": "PrivateFunction: _restartRequest\n_Private_ function to restart a request that is presumed dead.\n\nParameters:\n(Integer) i - The index of the request in the queue.", "input": "JavaScript", "output": "function (i)\r\n    {\r\n        var req = this._requests[i];\r\n        if (req.dead === null) {\r\n            req.dead = new Date();\r\n        }\r\n\r\n        this._processRequest(i);\r\n    }"}, {"instruction": "Constructs notification info URL for XHR\n\n@param {string=} localeParam - optional locale, defaults to 'brackets.getLocale()' when omitted.\n@returns {string} the new notification info url", "input": "JavaScript", "output": "function _getVersionInfoUrl(localeParam) {\n\n        var locale = localeParam || brackets.getLocale();\n\n        if (locale.length > 2) {\n            locale = locale.substring(0, 2);\n        }\n\n        return brackets.config.notification_info_url.replace(\"<locale>\", locale);\n    }"}, {"instruction": "Remove node from scene", "input": "JavaScript", "output": "function (node) {\n        var idx;\n        if (node instanceof Camera) {\n            idx = this._cameraList.indexOf(node);\n            if (idx >= 0) {\n                this._cameraList.splice(idx, 1);\n            }\n        }\n        else if (node instanceof Light) {\n            idx = this.lights.indexOf(node);\n            if (idx >= 0) {\n                this.lights.splice(idx, 1);\n            }\n        }\n        if (node.name) {\n            delete this._nodeRepository[node.name];\n        }\n    }"}, {"instruction": "/* @type {Object.<string, ConfigView>} List of open views", "input": "JavaScript", "output": "function ConfigView(doc, $container) {\n        this.$container = $container;\n        this.doc = doc;\n        this.json = JSON.parse(this.doc.getText());\n        this.$view = $(Mustache.render(ConfigViewContent, this.json));\n        this.$view.css({\n            \"background-image\": \"url(file://\" + FileUtils.getNativeModuleDirectoryPath(_module) + \"/htmlContent/logo-sm.png)\",\n            \"background-position\": \"bottom right\",\n            \"background-repeat\": \"no-repeat\"\n        });\n        $container.append(this.$view);\n    }"}, {"instruction": "Properties of a ListOperationsRequest.\n@memberof google.longrunning\n@interface IListOperationsRequest\n@property {string|null} [name] ListOperationsRequest name\n@property {string|null} [filter] ListOperationsRequest filter\n@property {number|null} [pageSize] ListOperationsRequest pageSize\n@property {string|null} [pageToken] ListOperationsRequest pageToken\n \nConstructs a new ListOperationsRequest.\n@memberof google.longrunning\n@classdesc Represents a ListOperationsRequest.\n@implements IListOperationsRequest\n@constructor\n@param {google.longrunning.IListOperationsRequest=} [properties] Properties to set", "input": "JavaScript", "output": "function ListOperationsRequest(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }"}, {"instruction": "Creates a local instance of a storage password.\n\n@param {Object} props The properties for the new storage password. For a list of available parameters,\nsee <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords\" target=\"_blank\">\nPOST storage/passwords</a> on Splunk Developer Portal.\n@return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.\n\n@method splunkjs.Service.StoragePasswords", "input": "JavaScript", "output": "function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.StoragePassword(this.service, props.name, entityNamespace);\n        }"}, {"instruction": "/*!\nCalculates the interpolated tween values of an Object for a given\ntimestamp.\n@param {Number} forPosition The position to compute the state for.\n@param {Object} currentState Current state properties.\n@param {Object} originalState: The original state properties the Object is\ntweening from.\n@param {Object} targetState: The destination state properties the Object\nis tweening to.\n@param {number} duration: The length of the tween in milliseconds.\n@param {number} timestamp: The UNIX epoch time at which the tween began.\n@param {Object} easing: This Object's keys must correspond to the keys in\ntargetState.", "input": "JavaScript", "output": "function tweenProps (forPosition, currentState, originalState, targetState,\n      duration, timestamp, easing) {\n      var normalizedPosition = (forPosition - timestamp) / duration;\n\n      var prop;\n      for (prop in currentState) {\n        if (currentState.hasOwnProperty(prop)) {\n          currentState[prop] = tweenProp(originalState[prop],\n            targetState[prop], formula[easing[prop]], normalizedPosition);\n        }\n      }\n\n      return currentState;\n    }"}, {"instruction": "/*\ndeep assign\n@param {Object} oldData oldData\n@param {Object} newData newData", "input": "JavaScript", "output": "function assign (oldData, newData) {\n  Object.keys(newData).forEach(k => {\n    if (isObject(newData[k]) && oldData[k] && isObject(oldData[k])) {\n      assign(oldData[k], newData[k])\n      let obj = JSON.parse(JSON.stringify({\n        [k]: oldData[k]\n      }))\n      Object.assign(oldData, obj)\n    } else {\n      oldData[k] = newData[k]\n    }\n  })\n}"}, {"instruction": "# zipWith :: (a -> b -> c) -> Array a -> Array b -> Array c . . Returns the result of combining, pairwise, the given arrays using the . given binary function. The length of the resulting array is equal to the . length of the shorter input array. . . See also [`zip`](#zip). . . ```javascript . > S.zipWith (a => b => a + b) (['a', 'b']) (['x', 'y', 'z']) . ['ax', 'by'] . . > S.zipWith (a => b => [a, b]) ([1, 3, 5]) ([2, 4]) . [[1, 2], [3, 4]] . ```", "input": "JavaScript", "output": "function zipWith(f) {\n    return function(xs) {\n      return function(ys) {\n        var result = [];\n        var len = Math.min (xs.length, ys.length);\n        for (var idx = 0; idx < len; idx += 1) {\n          result.push (f (xs[idx]) (ys[idx]));\n        }\n        return result;\n      };\n    };\n  }"}, {"instruction": "Prepare the function used to generate the uncompressed content from this ZipFile.\n@param {DataReader} reader the reader to use.\n@param {number} from the offset from where we should read the data.\n@param {number} length the length of the data to read.\n@param {JSZip.compression} compression the compression used on this file.\n@param {number} uncompressedSize the uncompressed size to expect.\n@return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).", "input": "JavaScript", "output": "function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    }"}, {"instruction": "DeleteMany function exposed as a mongoose wrapper.\n@param model: A mongoose model.\n@param payload: Either an array of ids or an array of objects containing an id and a \"hardDelete\" flag.\n@param Log: A logging object.\n@returns {object} A promise returning true if the delete succeeds.\n@private", "input": "JavaScript", "output": "function _deleteMany(model, payload, Log) {\n  let request = { payload: payload }\n  return _deleteManyHandler(model, request, Log)\n}"}, {"instruction": "getModuleUrl returns different urls for win platform\nso that's why we need a different check here\n@see #getModuleUrl\n@param {!string} pathOrUrl that should be checked if it's absolute\n@return {!boolean} returns true if pathOrUrl is absolute url on win platform\nor when it's absolute path on other platforms", "input": "JavaScript", "output": "function isAbsolutePathOrUrl(pathOrUrl) {\n        return brackets.platform === \"win\" ? PathUtils.isAbsoluteUrl(pathOrUrl) : FileSystem.isAbsolutePath(pathOrUrl);\n    }"}, {"instruction": "Checks the provided OTP token against system generated token\n\n@module otplib-authenticator/check\n@param {string} token - the OTP token to check\n@param {string} secret - your secret that is used to generate the token\n@param {object} options - options which was used to generate it originally\n@return {boolean}", "input": "JavaScript", "output": "function check(token, secret, options) {\n  const delta = checkDelta(token, secret, options);\n  return Number.isInteger(delta);\n}"}, {"instruction": "writes the new version to package.json", "input": "JavaScript", "output": "function updateVersion () {\n    start(`Updating ${\"package.json\".cyan} version from ${oldVersion.cyan} to ${newVersion.cyan}...`);\n    pkg.version = newVersion;\n    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));\n    done();\n    abortCmds.push('git checkout package.json');\n    pushCmds.push('git add package.json');\n  }"}, {"instruction": "Simple trick to fake touch event support\nthis is enough for most libraries like Modernizr and Hammer", "input": "JavaScript", "output": "function fakeTouchSupport() {\n        var objs = [window, document.documentElement];\n        var props = ['ontouchstart', 'ontouchmove', 'ontouchcancel', 'ontouchend'];\n\n        for(var o=0; o<objs.length; o++) {\n            for(var p=0; p<props.length; p++) {\n                if(objs[o] && objs[o][props[p]] == undefined) {\n                    objs[o][props[p]] = null;\n                }\n            }\n        }\n    }"}, {"instruction": "request aborted", "input": "JavaScript", "output": "function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }"}, {"instruction": "Extracts a lowercased domain from a distinguished name for comparison\npurposes.\n\ne.g. \"CN=User,OU=MyBusiness,DC=example,DC=com\" will return \"example.com.\"", "input": "JavaScript", "output": "function dnToDomain (dn) {\n  if (!dn || typeof dn !== 'string') { return null }\n  var matches = domainDnRegex.exec(dn)\n  if (matches) {\n    return matches[1].replace(dnPartRegex, '$1.').toLowerCase()\n  } else {\n    return null\n  }\n}"}, {"instruction": "\u8fd4\u56de\u524d\u51e0\u5468\u6216\u540e\u51e0\u5468\u7684\u661f\u671f\u51e0\n\n@param {Date} date \u65e5\u671f\n@param {Number} week \u5468(\u9ed8\u8ba4\u5f53\u524d\u5468)\u3001\u524d\u51e0\u5468\u3001\u540e\u51e0\u5468\n@param {Number} day \u661f\u671f\u5929(\u9ed8\u8ba40)\u3001\u661f\u671f\u4e00(1)\u3001\u661f\u671f\u4e8c(2)\u3001\u661f\u671f\u4e09(3)\u3001\u661f\u671f\u56db(4)\u3001\u661f\u671f\u4e94(5)\u3001\u661f\u671f\u516d(6)\n@return {Date}", "input": "JavaScript", "output": "function getWhatWeek (date, week, day) {\n  var time, whatDayTime, currentDay, customDay\n  date = toStringDate(date)\n  if (baseExports.isDate(date)) {\n    customDay = Number(/^[0-7]$/.test(day) ? day : date.getDay())\n    currentDay = date.getDay()\n    time = getDateTime(date)\n    whatDayTime = time + ((customDay === 0 ? 7 : customDay) - (currentDay === 0 ? 7 : currentDay)) * DAY_TIME\n    if (week && !isNaN(week)) {\n      whatDayTime += week * WEEK_TIME\n    }\n    return new Date(whatDayTime)\n  }\n  return date\n}"}, {"instruction": "Creates an error object to be thrown when the reporter specified in the options was not found.\n\n@public\n@param {string} message - Error message to be displayed.\n@param {string} reporter - User-specified reporter value.\n@returns {Error} instance detailing the error condition", "input": "JavaScript", "output": "function createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = 'ERR_MOCHA_INVALID_REPORTER';\n  err.reporter = reporter;\n  return err;\n}"}, {"instruction": "Write resources from workspace matching the given pattern to the given fs destination\n\n@private\n@param {Object} parameters Parameters\n@param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n@param {string} parameters.pattern Pattern to match resources in workspace against\n@param {string} parameters.targetPath Path to write the resources to\n@returns {Promise<number>} Promise resolving with number of resources written to given directory", "input": "JavaScript", "output": "async function writeResourcesToDir({workspace, pattern, targetPath}) {\n\tconst fsTarget = resourceFactory.createAdapter({\n\t\tfsBasePath: targetPath,\n\t\tvirBasePath: \"/resources/\"\n\t});\n\n\tlet allResources;\n\tif (workspace.byGlobSource) { // API only available on duplex collections\n\t\tallResources = await workspace.byGlobSource(pattern);\n\t} else {\n\t\tallResources = await workspace.byGlob(pattern);\n\t}\n\n\t// write all resources to the tmp folder\n\tawait Promise.all(allResources.map((resource) => fsTarget.write(resource)));\n\treturn allResources.length;\n}"}, {"instruction": "/////////////////////////////////////// Hidden Functions /////////////////////////////////////////", "input": "JavaScript", "output": "function checkCozyMode(oRef) {\n\t\tif (!oRef) {\n\t\t\treturn false;\n\t\t}\n\t\toRef = oRef.$ ? oRef.$() : jQuery(oRef);\n\t\treturn oRef.closest(\".sapUiSizeCompact,.sapUiSizeCondensed,.sapUiSizeCozy\").hasClass(\"sapUiSizeCozy\");\n\t}"}, {"instruction": "run the script", "input": "JavaScript", "output": "function() {\n\tvar scriptJs = Ext.getCmp('scriptAreaId').getValue();\n\tvar serverId = Ext.getCmp('serverComId').getValue();\n\n\tif (!serverId) {\n\t\talert('serverId is required!');\n\t\treturn;\n\t}\n\n\twindow.parent.client.request('scripts', {\n\t\tcommand: 'run',\n\t\tserverId: serverId,\n\t\tscript: scriptJs\n\t}, function(err, msg) {\n\t\tif (err) {\n\t\t\talert(err);\n\t\t\treturn;\n\t\t}\n\t\tExt.getCmp('tesultTextId').setValue(msg);\n\t});\n}"}, {"instruction": "Creates an instance of VASTClient.\n@param  {Number} cappingFreeLunch - The number of first calls to skip.\n@param  {Number} cappingMinimumTimeInterval - The minimum time interval between two consecutive calls.\n@param  {Storage} customStorage - A custom storage to use instead of the default one.\n@constructor", "input": "JavaScript", "output": "function VASTClient(cappingFreeLunch, cappingMinimumTimeInterval, customStorage) {\n    classCallCheck(this, VASTClient);\n\n    this.cappingFreeLunch = cappingFreeLunch || 0;\n    this.cappingMinimumTimeInterval = cappingMinimumTimeInterval || 0;\n    this.defaultOptions = {\n      withCredentials: false,\n      timeout: 0\n    };\n    this.vastParser = new VASTParser();\n    this.storage = customStorage || new Storage();\n\n    // Init values if not already set\n    if (this.lastSuccessfulAd === undefined) {\n      this.lastSuccessfulAd = 0;\n    }\n\n    if (this.totalCalls === undefined) {\n      this.totalCalls = 0;\n    }\n    if (this.totalCallsTimeout === undefined) {\n      this.totalCallsTimeout = 0;\n    }\n  }"}, {"instruction": "Create a string representing the current set of meshes for a given set of tiles, based on their created timestamp. Used to determine when tiles should be re-collided.", "input": "JavaScript", "output": "function meshSetString (tiles) {\n    return JSON.stringify(\n        Object.entries(tiles).map(([,t]) => {\n            return Object.entries(t.meshes).map(([,s]) => {\n                return s.map(m => m.created_at);\n            });\n        })\n    );\n}"}, {"instruction": "Creates the d3 x and y axis, setting orientations\n@private", "input": "JavaScript", "output": "function buildAxis(){\n            xAxis = d3Axis.axisBottom(xScale);\n\n            yAxis = d3Axis.axisLeft(yScale)\n                .ticks(yTicks)\n                .tickPadding(yTickPadding)\n                .tickFormat(yAxisTickFormat);\n        }"}, {"instruction": "Get all the nodes from a source.\n@param sourceFile The source file object.\n@returns {Observable<ts.Node>} An observable of all the nodes in the source.", "input": "JavaScript", "output": "function getSourceNodes(sourceFile) {\n    const nodes = [sourceFile];\n    const result = [];\n    while (nodes.length > 0) {\n        const node = nodes.shift();\n        if (node) {\n            result.push(node);\n            if (node.getChildCount(sourceFile) >= 0) {\n                nodes.unshift(...node.getChildren());\n            }\n        }\n    }\n    return result;\n}"}, {"instruction": "traditional ordinal numbers above 31 are not commonly used in colloquial Welsh", "input": "JavaScript", "output": "function (number) {\n            var b = number,\n                output = '',\n                lookup = [\n                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed\n                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed\n                ];\n\n            if (b > 20) {\n                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {\n                    output = 'fed'; // not 30ain, 70ain or 90ain\n                } else {\n                    output = 'ain';\n                }\n            } else if (b > 0) {\n                output = lookup[b];\n            }\n\n            return number + output;\n        }"}, {"instruction": "------------------------------ Attach global event listener ------------------------------", "input": "JavaScript", "output": "function addListener(eventType, fn){\n  if (document.addEventListener) {\n    document.addEventListener(eventType, fn, false);\n  } else {\n    document.attachEvent(\"on\" + eventType, fn);\n  }\n}"}, {"instruction": "Function: addStylename\n\nAdds the specified stylename to the given style if it does not already\ncontain the stylename.", "input": "JavaScript", "output": "function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t}"}, {"instruction": "mirror jQuery#val functionality: reads opearte on first match, write operates on all matches", "input": "JavaScript", "output": "function val(newVal) {\n      var query;\n\n      if (!arguments.length) {\n        ttEach(this.first(), function(t) { query = t.getVal(); });\n        return query;\n      }\n\n      else {\n        ttEach(this, function(t) { t.setVal(newVal); });\n        return this;\n      }\n    }"}, {"instruction": "Gets the scroll value of the given element in the given side (top and left)\n@method\n@memberof Popper.Utils\n@argument {Element} element\n@argument {String} side `top` or `left`\n@returns {number} amount of scrolled pixels", "input": "JavaScript", "output": "function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}"}, {"instruction": "Strip device-specific IDs from React Native file:// paths", "input": "JavaScript", "output": "function normalizeUrl(url, pathStripRe) {\n  if (url.indexOf('/') !== -1) {\n    return url.replace(/^file\\:\\/\\//, '').replace(pathStripRe, '');\n  } else {\n    return '/' + url;\n  }\n}"}, {"instruction": "Updates _viewStateCache from the given editor's actual current state\n@param {!Editor} editor - editor restore cached data\n@private", "input": "JavaScript", "output": "function _restoreEditorViewState(editor) {\n        // We want to ignore the current state of the editor, so don't call __getViewState()\n        var viewState = ViewStateManager.getViewState(editor.document.file);\n        if (viewState) {\n            editor.restoreViewState(viewState);\n        }\n    }"}, {"instruction": "Check the JWT token for collab server", "input": "JavaScript", "output": "function checkCollabServerToken(authorization) {\n\t\tif (authorization.substr(0, 7) !== \"Bearer \") {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tvar decoded = jwt.verify(authorization.substr(7), options.configParams.get(\"orion.jwt.secret\"));\n\t\t\treturn true;\n\t\t} catch (ex) {\n\t\t\treturn false;\n\t\t}\n\t}"}, {"instruction": "Find index of value in array.\n\n@param arr {Array} Can also be a false-ish value.\n@param v {Object} Value to find.\n\nReturns -1 if not found, -2 if found multiple times.", "input": "JavaScript", "output": "function singleIndexOf(arr, v) {\n  var pos = -1;\n  var i, l;\n  if (!arr) {\n    return -1;\n  }\n  for (i = 0, l = arr.length; i < l; i++) {\n    if (arr[i] === v) {\n      if (pos >= 0) {\n        return -2;\n      }\n      pos = i;\n    }\n  }\n  return pos;\n}"}, {"instruction": "Given a source file with @NgModule class(es), find the name of the first @NgModule class.\n\n@param source source file containing one or more @NgModule\n@returns the name of the first @NgModule, or `undefined` if none is found", "input": "JavaScript", "output": "function getFirstNgModuleName(source) {\n    // First, find the @NgModule decorators.\n    const ngModulesMetadata = getDecoratorMetadata(source, 'NgModule', '@angular/core');\n    if (ngModulesMetadata.length === 0) {\n        return undefined;\n    }\n    // Then walk parent pointers up the AST, looking for the ClassDeclaration parent of the NgModule\n    // metadata.\n    const moduleClass = findClassDeclarationParent(ngModulesMetadata[0]);\n    if (!moduleClass || !moduleClass.name) {\n        return undefined;\n    }\n    // Get the class name of the module ClassDeclaration.\n    return moduleClass.name.text;\n}"}, {"instruction": "Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\n\n@api public", "input": "JavaScript", "output": "function getPlatformVariant() {\n  var contents = '';\n\n  if (process.platform !== 'linux') {\n    return '';\n  }\n\n  try {\n    contents = fs.readFileSync(process.execPath);\n\n    // Buffer.indexOf was added in v1.5.0 so cast to string for old node\n    // Delay contents.toStrings because it's expensive\n    if (!contents.indexOf) {\n      contents = contents.toString();\n    }\n\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\n      return 'musl';\n    }\n  } catch (err) { } // eslint-disable-line no-empty\n\n  return '';\n}"}, {"instruction": "Set camera projection matrix\n@param {clay.Matrix4} projectionMatrix", "input": "JavaScript", "output": "function (projectionMatrix) {\n        Matrix4.copy(this.projectionMatrix, projectionMatrix);\n        Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n        this.decomposeProjectionMatrix();\n    }"}, {"instruction": "Helpers", "input": "JavaScript", "output": "function(e, attr){\n\t\t\tif(typeof e === \"string\"){\n\t\t\t\tvar elem = \n\t\t\t\t\tdocument.createElementNS(\"http://www.w3.org/2000/svg\",e);\n\t\t\t}else{\n\t\t\t\tvar elem = e;\n\t\t\t}\n\t\t\tif(attr){\n\t\t\t\tfor(var x in attr){\n\t\t\t\t\telem.setAttribute(x, attr[x]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn elem;\n\t\t}"}, {"instruction": "calculate delta(sum of length difference of rows) values of given DSV\n@param {string} code - code to be test\n@param {string|RegExp} delimiter - delimiter to test\n@returns {number} delta value for code\n@ignore", "input": "JavaScript", "output": "function calcDSVDelta(code, delimiter) {\n  let rows, delta;\n\n  try {\n    csv.COLUMN_SEPARATOR = delimiter;\n    rows = csv.parse(code);\n\n    if (rows[0].length < 2) {\n      // parsing completely failed\n      throw new Error('parser fail');\n    }\n\n    // sum of all length difference of all rows\n    delta = rows.map(row => row.length)\n      .reduce((a, b) => ({\n        deltaSum: a.deltaSum + Math.abs(a.length - b),\n        length: b\n      }), {\n        deltaSum: 0,\n        length: rows[0].length\n      }).deltaSum;\n  } catch (e) {\n    delta = Infinity;\n  }\n\n  return delta;\n}"}, {"instruction": "Returns all cookies formatted as a string to be put into the Cookie Header.", "input": "JavaScript", "output": "function() {\n            var cookieString = \"\";\n\n            utils.forEach(this._cookieStore, function (cookieValue, cookieKey) {\n                cookieString += cookieKey;\n                cookieString += '=';\n                cookieString += cookieValue;\n                cookieString += '; ';\n            });\n\n            return cookieString;\n\n        }"}, {"instruction": "Shows a {@link sap.m.MessageBox} when a service call has failed.\nOnly the first error message will be display.\n@param {string} sDetails a technical error to be displayed on request\n@private", "input": "JavaScript", "output": "function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}"}, {"instruction": "@name Client.getSubZones\n@description gets a list of the subzones for a provided zone\n\n@param {object|Number}     zone          the zone of the record to query for\n@param {Function}          callback      handles the callback of your api call", "input": "JavaScript", "output": "function(zone, callback) {\n    var self = this,\n        zoneId = zone instanceof dns.Zone ? zone.id : zone;\n\n    var requestOptions = {\n      path: urlJoin(_urlPrefix, zoneId, 'subdomains'),\n      method: 'GET'\n    };\n\n    self._request(requestOptions, function(err, body, res) {\n      return err\n        ? callback(err)\n        : callback(null, body.domains.map(function (result) {\n        return new dns.Zone(self, result);\n      }), res);\n    });\n  }"}, {"instruction": "Convert position on slider to percentage value of offset from beginning...\n@param position\n@returns {number}", "input": "JavaScript", "output": "function positionToPercent(position) {\n      var offset = vertical ? sliderDimensions.top : sliderDimensions.left;\n      var size = vertical ? sliderDimensions.height : sliderDimensions.width;\n      var calc = (position - offset) / size;\n\n      if (!vertical && $mdUtil.bidi() === 'rtl') {\n        calc = 1 - calc;\n      }\n\n      return Math.max(0, Math.min(1, vertical ? 1 - calc : calc));\n    }"}, {"instruction": "/*\nOutputs a warning message with the current nesting level; takes care not to\nconstruct the message or serialize XML in vain.\n\n@param {Element} [oElement]\nany XML DOM element which is serialized to the details\n@param {...string} aTexts\nthe main text of the message is constructed from the rest of the arguments by\njoining them separated by single spaces", "input": "JavaScript", "output": "function warn(oElement) {\n\t\t\t\tif (bWarning) {\n\t\t\t\t\tif (!bCallerLoggedForWarnings) {\n\t\t\t\t\t\tbCallerLoggedForWarnings = true;\n\t\t\t\t\t\tLog.warning(\"Warning(s) during processing of \" + sCaller, null,\n\t\t\t\t\t\t\tsXMLPreprocessor);\n\t\t\t\t\t}\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\tgetNestingLevel() + Array.prototype.slice.call(arguments, 1).join(\" \"),\n\t\t\t\t\t\toElement && serializeSingleElement(oElement), sXMLPreprocessor);\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "Sets up the Auto Update environment", "input": "JavaScript", "output": "function setupAutoUpdate() {\n        updateJsonHandler = new StateHandler(updateJsonPath);\n        updateDomain.on('data', receiveMessageFromNode);\n\n        updateDomain.exec('initNode', {\n            messageIds: MessageIds,\n            updateDir: updateDir,\n            requester: domainID\n        });\n    }"}, {"instruction": "Apply a linear transform to array of arcs.  The provided array of arcs is\nmodified in place.\n\n@param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n@param {Array<number>} scale Scale for each dimension.\n@param {Array<number>} translate Translation for each dimension.", "input": "JavaScript", "output": "function transformArcs(arcs, scale, translate) {\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\n    transformArc(arcs[i], scale, translate);\n  }\n}"}, {"instruction": "Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n\n- Use `exec_mode=normal` to return a search job ID immediately (default).\nPoll for completion to find out when you can retrieve search results.\n\n- Use `exec_mode=blocking` to return the search job ID when the search has finished.\n\nTo run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.\n\n@example\n\nservice.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\nconsole.log(\"CREATED\": newJob.sid);\n});\n\n@param {String} query The search query.\n@param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=\" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n@param {Object} namespace Namespace information:\n- `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n- `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n- `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n@param {Function} callback A function to call with the created job: `(err, createdJob)`.\n\n@endpoint search/jobs\n@method splunkjs.Service", "input": "JavaScript", "output": "function(query, params, namespace, callback) {\n            if (!callback && utils.isFunction(namespace)) {\n                callback = namespace;\n                namespace = null;\n            }\n            \n            var jobs = new root.Jobs(this, namespace);\n            return jobs.search(query, params, callback);\n        }"}, {"instruction": "focusToFirstCode\nFocus to first code tag content of pre tag\n@param {jQuery} $pre pre tag\n@param {WysiwygEditor} wwe wysiwygEditor", "input": "JavaScript", "output": "function focusToFirstCode($pre, wwe) {\n  const range = wwe.getEditor().getSelection().cloneRange();\n  $pre.removeClass(CODEBLOCK_CLASS_TEMP);\n\n  range.setStartBefore($pre.get(0).firstChild);\n  range.collapse(true);\n\n  wwe.getEditor().setSelection(range);\n}"}, {"instruction": "private", "input": "JavaScript", "output": "function() {\n        this._containerInnerSize = new $.Point(\n            Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),\n            Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))\n        );\n    }"}, {"instruction": "Collect common metadata for each object in the value tree, ensuring that equivalent values have the *same reference* to the same metadata. Note that the hashes generated are not exactly JSON, but still identify equivalent values. Runs in linear time due to hashing in a bottom-up recursion.", "input": "JavaScript", "output": "function collectMetadata(value) {\n    if (value == null || typeof value !== 'object') {\n      return JSON.stringify(value);\n    }\n    let hash;\n    if (Array.isArray(value)) {\n      hash = '[';\n      for (let i = 0; i < value.length; i++) {\n        hash += collectMetadata(value[i]) + ',';\n      }\n    } else {\n      hash = '{';\n      for (const k in value) {\n        if (value.hasOwnProperty(k) && value[k] !== undefined) {\n          hash += k + ':' + collectMetadata(value[k]) + ',';\n        }\n      }\n    }\n    let metadata = metadataForHash.get(hash);\n    if (!metadata) {\n      metadata = {value, hash, isDuplicate: false};\n      metadataForHash.set(hash, metadata);\n    }\n    metadataForVal.set(value, metadata);\n    return hash;\n  }"}, {"instruction": "Buffer data from socket to present\nwell formed packets", "input": "JavaScript", "output": "function BufferLayer(socket) {\n\t//for ssl connection\n\tthis.securePair = null;\n\tthis.socket = socket;\n\n\tvar self = this;\n\t// bind event\n\tthis.socket.on('data', function(data) {\n\t\ttry {\n\t\t\tself.recv(data);\n\t\t}\n\t\tcatch(e) {\n\t\t\tself.socket.destroy();\n\t\t\tself.emit('error', e);\n\t\t}\n\t}).on('close', function() {\n\t\tself.emit('close');\n\t}).on('error', function (err) {\n\t\tself.emit('error', err);\n\t});\n\n\t//buffer data\n\tthis.buffers = [];\n\tthis.bufferLength = 0;\n\t//expected size\n\tthis.expectedSize = 0;\n}"}, {"instruction": "Sets which annotations types are shown in the overview ruler.  Annotations are visible by default.\n\n@param {Object} types a hash table mapping annotation type to visibility (i.e. AnnotationType.ANNOTATION_INFO -> true).\n@since 14.0", "input": "JavaScript", "output": "function(types) {\n\t\t\tif (textUtil.compare(this._overviewAnnotationTypesVisible, types)) return;\n\t\t\tthis._overviewAnnotationTypesVisible = types;\n\t\t\tif (!this._overviewRuler || !this._textView || !this._overviewRulerVisible) { return; }\n\t\t\tthis._overviewRuler.setAnnotationTypeVisible(types);\n\t\t\tthis._textView.redrawLines(0, undefined, this._overviewRuler);\n\t\t}"}, {"instruction": "~~~~~~~~ // Reducers // ~~~~~~~~ //", "input": "JavaScript", "output": "function getReducerName(type) {\n  const trailer = type.match(/s$/) ? '' : 's';\n  return `${type.slice(0, 1).toLowerCase()}${type.slice(1)}${trailer}`;\n}"}, {"instruction": "parse JSDoc from leading comments\n@param  {...[type]} comments [description]\n@return {{doc: object}}", "input": "JavaScript", "output": "function captureJsDoc(comments) {\n  let doc\n\n  // capture XSDoc\n  comments.forEach(comment => {\n    // skip non-block comments\n    if (comment.type !== 'Block') return\n    try {\n      doc = doctrine.parse(comment.value, { unwrap: true })\n    } catch (err) {\n      /* don't care, for now? maybe add to `errors?` */\n    }\n  })\n\n  return doc\n}"}, {"instruction": "Get ReplicaSet status\n\n@param {Admin} a collection instance.\n@param {Object} [options] Optional settings. See Admin.prototype.replSetGetStatus for a list of options.\n@param {Admin~resultCallback} [callback] The command result callback.", "input": "JavaScript", "output": "function replSetGetStatus(admin, options, callback) {\n  executeDbAdminCommand(admin.s.db, { replSetGetStatus: 1 }, options, callback);\n}"}, {"instruction": "Get the detailed information of an inspected instance.\n\n@param {Number} id", "input": "JavaScript", "output": "function getInstanceDetails (id) {\n  const instance = instanceMap.get(id)\n  if (!instance) {\n    const vnode = findInstanceOrVnode(id)\n\n    if (!vnode) return {}\n\n    const data = {\n      id,\n      name: getComponentName(vnode.fnOptions),\n      file: vnode.fnOptions.__file || null,\n      state: processProps({ $options: vnode.fnOptions, ...(vnode.devtoolsMeta && vnode.devtoolsMeta.renderContext.props) }),\n      functional: true\n    }\n\n    return data\n  } else {\n    const data = {\n      id: id,\n      name: getInstanceName(instance),\n      state: getInstanceState(instance)\n    }\n\n    let i\n    if ((i = instance.$vnode) && (i = i.componentOptions) && (i = i.Ctor) && (i = i.options)) {\n      data.file = i.__file || null\n    }\n\n    return data\n  }\n}"}, {"instruction": "('(' supports condition ')')\n| feature", "input": "JavaScript", "output": "function(){\n    this.skipSpacesAndComments();\n    if ('(' == this.peek().type) {\n      var la = this.lookahead(2).type;\n\n      if ('ident' == la || '{' == la) {\n        return this.feature();\n      } else {\n        this.expect('(');\n        var node = new nodes.Expression;\n        node.push(new nodes.Literal('('));\n        node.push(this.supportsCondition());\n        this.expect(')')\n        node.push(new nodes.Literal(')'));\n        this.skipSpacesAndComments();\n        return node;\n      }\n    }\n  }"}, {"instruction": "Creates and returns a QueryList.\n\n@param memoryIndex The index in memory where the QueryList should be saved. If null,\nthis is is a content query and the QueryList will be saved later through directiveCreate.\n@param predicate The type for which the query will search\n@param descend Whether or not to descend into children\n@param read What to save in the query\n@returns QueryList<T>", "input": "JavaScript", "output": "function query(memoryIndex, predicate, descend, read) {\n    ngDevMode && assertPreviousIsParent();\n    var queryList = new QueryList$1();\n    var queries = getCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(null, queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}"}, {"instruction": "Check whether it should stop traversing ancestors at the given node.\n@param {ASTNode} node A node to check.\n@returns {boolean} `true` if it should stop traversing.", "input": "JavaScript", "output": "function isBoundary(node) {\n    const t = node.type;\n\n    return (\n        t === \"FunctionDeclaration\" ||\n        t === \"FunctionExpression\" ||\n        t === \"ArrowFunctionExpression\" ||\n\n        /*\n         * Don't report the await expressions on for-await-of loop since it's\n         * asynchronous iteration intentionally.\n         */\n        (t === \"ForOfStatement\" && node.await === true)\n    );\n}"}, {"instruction": "Is the current git workspace dirty?", "input": "JavaScript", "output": "function isDirty () {\n  return pify(git.raw.bind(git))(['status', '-s'])\n    .then((out) => {\n      if (out && out.trim().length > 0) {\n        throw new Error('Dirty git repo, aborting')\n      }\n    })\n}"}, {"instruction": "Cache size has been exceeded, create list of images sorted by timeStamp So we can purge the least recently used image", "input": "JavaScript", "output": "function compare (a, b) {\r\n    if (a.timeStamp > b.timeStamp) {\r\n      return -1;\r\n    }\r\n    if (a.timeStamp < b.timeStamp) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }"}, {"instruction": "Calls the provided DOM prototype method and returns its result. If the\nmethod is not available, use fallbackMethodName to call the method in a\nclobber-vulnerable way, and use fallbackTest to check if the\nmethod was clobbered, throwing an exception if so.\n@param {?Function} fn\n@param {*} object\n@param {string} fallbackMethodName\n@param {!Array<*>} args\n@return {?}", "input": "JavaScript", "output": "function genericMethodCall(fn, object, fallbackMethodName, args) {\n  if (fn) {\n    return fn.apply(object, args);\n  }\n  // IE8 and IE9 will return 'object' for\n  // CSSStyleDeclaration.(get|set)Attribute, so we can't use typeof.\n  if (userAgentProduct.IE && document.documentMode < 10) {\n    if (!object[fallbackMethodName].call) {\n      throw new Error('IE Clobbering detected');\n    }\n  } else if (typeof object[fallbackMethodName] != 'function') {\n    throw new Error('Clobbering detected');\n  }\n  return object[fallbackMethodName].apply(object, args);\n}"}, {"instruction": "/*\nChecks if there is a hunk header coming before a new file starts\n\nHunk header is a group of three lines started by ( `--- ` , `+++ ` , `@@` )", "input": "JavaScript", "output": "function existHunkHeader(line, lineIdx) {\n      var idx = lineIdx;\n\n      while (idx < diffLines.length - 3) {\n        if (utils.startsWith(line, 'diff')) {\n          return false;\n        }\n\n        if (\n          utils.startsWith(diffLines[idx], oldFileNameHeader) &&\n          utils.startsWith(diffLines[idx + 1], newFileNameHeader) &&\n          utils.startsWith(diffLines[idx + 2], hunkHeaderPrefix)\n        ) {\n          return true;\n        }\n\n        idx++;\n      }\n\n      return false;\n    }"}, {"instruction": "/*------------------------------------------------------------------------ \nPicks the layout engine from an array of guesses.\n\n@private\n@param {Array} guesses An array of guesses.\n@returns {null|string} The detected layout engine.", "input": "JavaScript", "output": "function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }"}, {"instruction": "Walks through the call graph from a defined starting function, true if nodeCheck holds for every relevant node in the callgraph\n@callGraph {callGraph} As returned by buildGlobalFuncCallGraph\n@funcName {string} full qualified name of the starting function\n@context {Object} provides additional context information that can be used by the nodeCheck function\n@nodeCheck {(ASTNode, context) -> bool} applied on every relevant node in the call graph\n@return {bool} returns map from contract name to contract call graph", "input": "JavaScript", "output": "function analyseCallGraph (callGraph, funcName, context, nodeCheck) {\n  return analyseCallGraphInternal(callGraph, funcName, context, (a, b) => a || b, nodeCheck, {})\n}"}, {"instruction": "Listen for errors and display them in the DOM,\nso that the user does not need to open the console", "input": "JavaScript", "output": "function addOnErrorHook () {\n\n\t\twindow.addEventListener(\"error\", function(error) {\n\t\t\terror.preventDefault();\n\t\t\tvar oErrorOutput = document.createElement(\"span\");\n\t\t\toErrorOutput.innerText = error.message; // use save API\n\t\t\toErrorOutput.style.cssText = \"position:absolute; top:1rem; left:1rem\";\n\t\t\tif (!document.body) {\n\t\t\t\tdocument.write(\"<span></span>\"); // add content via document.write to ensure document.body is created;\n\t\t\t}\n\t\t\tdocument.body.appendChild(oErrorOutput);\n\t\t});\n\t}"}, {"instruction": "eslint-disable-next-line no-unused-vars", "input": "JavaScript", "output": "function renderComponent() {\n    var svg = d3.select('svg');\n    svg.select('.horizontal')\n      .datum([0.15, 0.85])\n      .call(horizontalSvgLine);\n    svg.select('.vertical')\n      .datum([0.2, 0.4, 0.6, 0.8])\n      .call(verticalSvgLine);\n\n    var canvas = d3.select('canvas').node();\n    var ctx = canvas.getContext('2d');\n    horizontalCanvasLine.context(ctx)([0.15, 0.85]);\n    verticalCanvasLine.context(ctx)([0.2, 0.4, 0.6, 0.8]);\n}"}, {"instruction": "Adds two 64-bit numbers Like the original implementation, does not rely on 32-bit operations", "input": "JavaScript", "output": "function int64add(dst, x, y) {\n        var w0 = (x.l & 0xffff) + (y.l & 0xffff);\n        var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);\n        var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);\n        var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);\n        dst.l = (w0 & 0xffff) | (w1 << 16);\n        dst.h = (w2 & 0xffff) | (w3 << 16);\n      }"}, {"instruction": "callback to be executed when the call to stat completes or immediately if a stat object was passed as an argument", "input": "JavaScript", "output": "function doReadFile(stat) {\n            if (stat.size > (FileUtils.MAX_FILE_SIZE)) {\n                callback(FileSystemError.EXCEEDS_MAX_FILE_SIZE);\n            } else {\n                appshell.fs.readFile(path, encoding, function (_err, _data, encoding, preserveBOM) {\n                    if (_err) {\n                        callback(_mapError(_err));\n                    } else {\n                        callback(null, _data, encoding, preserveBOM, stat);\n                    }\n                });\n            }\n        }"}, {"instruction": "Returns the difficulty as a number, or if too large (i.e. PoA network) null", "input": "JavaScript", "output": "function checkDifficulty(value) {\n    var v = bignumber_1.bigNumberify(value);\n    try {\n        return v.toNumber();\n    }\n    catch (error) { }\n    return null;\n}"}, {"instruction": "Returns a new Summary with a part inserted at given index\n\n@param {Summary} summary\n@param {Part} part\n@param {Number} index\n@return {Summary}", "input": "JavaScript", "output": "function insertPart(summary, part, index) {\n    part = SummaryPart(part);\n\n    var parts = summary.getParts().insert(index, part);\n    return indexLevels(summary.set('parts', parts));\n}"}, {"instruction": "return x*y for bigInts x and y. This is faster when y<x.", "input": "JavaScript", "output": "function mult(x, y) {\n  var ans=expand(x, x.length+y.length);\n  mult_(ans, y);\n  return trim(ans, 1);\n}"}, {"instruction": "}}}", "input": "JavaScript", "output": "function newSelection(e) //{{{\n    {\n      if (options.disabled) {\n        return false;\n      }\n      if (!options.allowSelect) {\n        return false;\n      }\n      btndown = true;\n      docOffset = getPos($img);\n      Selection.disableHandles();\n      Tracker.setCursor('crosshair');\n      var pos = mouseAbs(e);\n      Coords.setPressed(pos);\n      Selection.update();\n      Tracker.activateHandlers(selectDrag, doneSelect, e.type.substring(0,5)==='touch');\n      KeyManager.watchKeys();\n\n      e.stopPropagation();\n      e.preventDefault();\n      return false;\n    }"}, {"instruction": "Returns the stack index for the given dataset based on groups and bar visibility.\n@param {number} [datasetIndex] - The dataset index\n@param {string} [name] - The stack name to find\n@returns {number} The stack index\n@private", "input": "JavaScript", "output": "function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t}"}, {"instruction": "/* Plugin constructor\n==================================================", "input": "JavaScript", "output": "function Plugin(element, options) {\n    this.element = element;\n\n    this.options = $.extend(true, {}, defaults, options);\n    this.options.share = options.share; //simple solution to allow order of buttons\n\n    this._defaults = defaults;\n    this._name = pluginName;\n\n    this.init();\n  }"}, {"instruction": "Load and setup plugins\n\n@param {Output}\n@return {Promise<Output>}", "input": "JavaScript", "output": "function preparePlugins(output) {\n    var book = output.getBook();\n\n    return Promise()\n\n    // Only load plugins for main book\n    .then(function() {\n        if (book.isLanguageBook()) {\n            return output.getPlugins();\n        } else {\n            return Plugins.loadForBook(book);\n        }\n    })\n\n    // Update book's configuration using the plugins\n    .then(function(plugins) {\n        return Plugins.validateConfig(book, plugins)\n        .then(function(newBook) {\n            return output.merge({\n                book: newBook,\n                plugins: plugins\n            });\n        });\n    });\n}"}, {"instruction": "Create touchable component based on passed parameter and platform.\nIt also returns default props for specific touchable types.", "input": "JavaScript", "output": "function makeTouchable(TouchableComponent) {\n    var Touchable = TouchableComponent || reactNative.Platform.select({\n      android: reactNative.TouchableNativeFeedback,\n      ios: reactNative.TouchableHighlight,\n      default: reactNative.TouchableHighlight\n    });\n    var defaultTouchableProps = {};\n\n    if (Touchable === reactNative.TouchableHighlight) {\n      defaultTouchableProps = {\n        underlayColor: 'rgba(0, 0, 0, 0.1)'\n      };\n    }\n\n    return {\n      Touchable: Touchable,\n      defaultTouchableProps: defaultTouchableProps\n    };\n  }"}, {"instruction": "creates a property binding (called via bind) to a published property.", "input": "JavaScript", "output": "function(property, observable, oneTime) {\n      if (oneTime) {\n        this[property] = observable;\n        return;\n      }\n      var computed = this.element.prototype.computed;\n      // Binding an \"out-only\" value to a computed property. Note that\n      // since this observer isn't opened, it doesn't need to be closed on\n      // cleanup.\n      if (computed && computed[property]) {\n        var privateComputedBoundValue = property + 'ComputedBoundObservable_';\n        this[privateComputedBoundValue] = observable;\n        return;\n      }\n      return this.bindToAccessor(property, observable, resolveBindingValue);\n    }"}, {"instruction": "The functions in this file return custom JS property descriptors\nthat are supposed to be assigned to Model fields.\n\nSome include the logic to look up models using foreign keys and\nto add or remove relationships between models.\n\n@module descriptors\n \nDefines a basic non-key attribute.\n@param  {string} fieldName - the name of the field the descriptor will be assigned to.", "input": "JavaScript", "output": "function attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}"}, {"instruction": "This module provides the following jQuery selectors:\n<ul>\n<li>:focusable/li>\n<li>:sapFocusable</li>\n<li>:sapTabbable</li>\n</ul>\n@namespace\n@name module:sap/ui/dom/jquery/Selectors\n@public\n@since 1.58\n Using \"Object.getOwnPropertyDescriptor\" to not trigger the \"getter\" - see jquery.sap.stubs", "input": "JavaScript", "output": "function getValue(oTarget, sProperty) {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(oTarget, sProperty);\n\t\treturn descriptor && descriptor.value;\n\t}"}, {"instruction": "This song and dance is to fix methods to a different length from what they actually accept in order to stay in line with spec. Additionally passing argument length, as some methods throw assertion errors based on this (undefined check is not enough). Fortunately for now spec is such that passing 3 actual arguments covers all requirements. Note that passing the argument length also forces the compiler to not rewrite length of the compiled function.", "input": "JavaScript", "output": "function fixArgumentLength(fn) {\n  var staticFn = function(a) {\n    var args = arguments;\n    return fn(a, args[1], args[2], args.length - 1);\n  };\n  staticFn.instance = function(b) {\n    var args = arguments;\n    return fn(this, b, args[1], args.length);\n  };\n  return staticFn;\n}"}, {"instruction": "Constructor for `splunkjs.Service.DataModel`.\n\n@constructor\n@param {Object} props A dictionary of properties used to create a\n`DataModel` instance.\n@return {splunkjs.Service.DataModel} A new `DataModel` instance.\n\n@method splunkjs.Service.DataModels", "input": "JavaScript", "output": "function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.DataModel(this.service, props.name, entityNamespace, props);\n        }"}, {"instruction": "curry : ((a, b, c) -> d) -> a -> b -> c -> d", "input": "JavaScript", "output": "function curry(fn) {\n  return function(...xs) {\n    const args =\n      xs.length ? xs : [ undefined ]\n\n    if(args.length < fn.length) {\n      return curry(Function.bind.apply(fn, [ null ].concat(args)))\n    }\n\n    const val = args.length === fn.length\n      ? fn.apply(null, args)\n      : args.reduce(applyCurry, fn)\n\n    if(isFunction(val)) {\n      return curry(val)\n    }\n\n    return val\n  }\n}"}, {"instruction": "\u83b7\u53d6\u9875\u9762\u4e0a\u4e0b\u6587", "input": "JavaScript", "output": "function getPageCtx(pageCtx) {\n  var ctx = pageCtx;\n\n  if (!ctx) {\n    var pages = getCurrentPages();\n    ctx = pages[pages.length - 1];\n  }\n\n  return ctx;\n}"}, {"instruction": "Calculates the position of the fisrt/last step (with fix for Safari in RTL mode) to make the position and scroll calculations running (see comment on getRTLFactor for RTL behavior)", "input": "JavaScript", "output": "function(oRoadMap, bLast){\n\t\tvar iScrollWidth = oRoadMap.$(\"steparea\").get(0).scrollWidth;\n\t\tif (sap.ui.getCore().getConfiguration().getRTL() && Device.browser.webkit) {\n\t\t\treturn bLast ? 0 : ( -1) * iScrollWidth;\n\t\t}\n\t\treturn bLast ? iScrollWidth : 0;\n\t}"}, {"instruction": "called third", "input": "JavaScript", "output": "function interpretResponse(serverResponse) {\n  const bidResponses = [];\n  // currently server returns a single response which is the body property\n  if (serverResponse.body) {\n    serverResponse.body.bidderCode = BIDDER_CODE;\n    bidResponses.push(serverResponse.body);\n  }\n\n  return bidResponses;\n}"}, {"instruction": "Updates the type metadata from the current jCal type and design set.\n\n@private", "input": "JavaScript", "output": "function() {\n      var designSet = this._designSet;\n\n      if (this.type in designSet.value) {\n        var designType = designSet.value[this.type];\n\n        if ('decorate' in designSet.value[this.type]) {\n          this.isDecorated = true;\n        } else {\n          this.isDecorated = false;\n        }\n\n        if (this.name in designSet.property) {\n          this.isMultiValue = ('multiValue' in designSet.property[this.name]);\n          this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);\n        }\n      }\n    }"}, {"instruction": "Create a Collection object from a response containing a list of resources.\n\n@param {Object} response Full payload from a response to a\ncollection request.\n@param {Dispatcher} dispatcher\n@param {Object} [dispatchOptions]\n@returns {Object} Collection", "input": "JavaScript", "output": "function Collection(response, dispatcher, dispatchOptions) {\n  if (!Collection.isCollectionResponse(response)) {\n    throw new Error(\n        'Cannot create Collection from response that does not have resources');\n  }\n\n  this.data = response.data;\n  this._response = response;\n  this._dispatcher = dispatcher;\n  this._dispatchOptions = dispatchOptions;\n}"}, {"instruction": "Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).\nUpdate the `aria-activedescendant` attribute.", "input": "JavaScript", "output": "function render() {\n      var checked = rgCtrl.getViewValue() == attr.value;\n\n      if (checked === lastChecked) return;\n\n      if (element[0].parentNode.nodeName.toLowerCase() !== 'md-radio-group') {\n        // If the radioButton is inside a div, then add class so highlighting will work\n        element.parent().toggleClass(CHECKED_CSS, checked);\n      }\n\n      if (checked) {\n        rgCtrl.setActiveDescendant(element.attr('id'));\n      }\n\n      lastChecked = checked;\n\n      element\n        .attr('aria-checked', checked)\n        .toggleClass(CHECKED_CSS, checked);\n    }"}, {"instruction": "Finds siblings nodes of the passed node.\n\n@param  {Element} node\n@return {Array}", "input": "JavaScript", "output": "function siblings(node) {\n  if (node && node.parentNode) {\n    var n = node.parentNode.firstChild;\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== node) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  }\n\n  return [];\n}"}, {"instruction": "Sets bytes for node\n@param {Node} node\n@param {ArrayBuffer|Uint8Array|string|undefined} bytes", "input": "JavaScript", "output": "function setBytes(node, bytes) {\n    if (typeof bytes === 'string') {\n        bytes = ByteUtils.base64ToBytes(bytes);\n    }\n    setText(node, bytes ? ByteUtils.bytesToBase64(ByteUtils.arrayToBuffer(bytes)) : undefined);\n}"}, {"instruction": "Copyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n \nClass: mxEdgeHandler\n\nGraph event handler that reconnects edges and modifies control points and\nthe edge label location. Uses <mxTerminalMarker> for finding and\nhighlighting new source and target vertices. This handler is automatically\ncreated in <mxGraph.createHandler> for each selected edge.\n\nTo enable adding/removing control points, the following code can be used:\n\n(code)\nmxEdgeHandler.prototype.addEnabled = true;\nmxEdgeHandler.prototype.removeEnabled = true;\n(end)\n\nNote: This experimental feature is not recommended for production use.\n\nConstructor: mxEdgeHandler\n\nConstructs an edge handler for the specified <mxCellState>.\n\nParameters:\n\nstate - <mxCellState> of the cell to be handled.", "input": "JavaScript", "output": "function mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n}"}, {"instruction": "$NON-NLS-0$", "input": "JavaScript", "output": "function(branchLocation, name) {\n\t\t\t\t\tvar addMsg = i18nUtil.formatMessage(messages[\"Adding branch ${0}...\"], name);\n\t\t\t\t\tprogress.progress(serviceRegistry.getService(\"orion.git.provider\").addBranch(branchLocation, name), addMsg).then(function() { //$NON-NLS-0$\n\t\t\t\t\t\tdispatchModelEventOn({type: \"modelChanged\", action: \"addBranch\", branch: name}); //$NON-NLS-1$ //$NON-NLS-0$\n\t\t\t\t\t}, function(error){\n\t\t\t\t\t\tif(error.status===409){\n\t\t\t\t\t\t\tcommandInvocation.parameters = branchNameParameters;\n\t\t\t\t\t\t\tcommandService.collectParameters(commandInvocation);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdisplayErrorOnStatus(error);\n\t\t\t\t\t});\n\t\t\t\t}"}, {"instruction": "Insert a screen reader hint for a comment\n\n@param {String} documentId The ID of the document\n@param {String} annotationId The ID of tha assocated annotation\n@param {Object} comment The comment to insert a hint for", "input": "JavaScript", "output": "function insertComment(documentId, annotationId, comment) {\n  let list = document.querySelector(`pdf-annotate-screenreader-comment-list-${annotationId}`);\n  let promise;\n\n  if (!list) {\n    promise = renderScreenReaderComments(documentId, annotationId, []).then(() => {\n      list = document.querySelector(`pdf-annotate-screenreader-comment-list-${annotationId}`);\n      return true;\n    });\n  } else {\n    promise = Promise.resolve(true);\n  }\n\n  promise.then(() => {\n    insertScreenReaderComment(comment);\n  });\n}"}, {"instruction": "Objects", "input": "JavaScript", "output": "function cloneObject(o) {\n  var clone = {};\n  for (var p in o) { clone[p] = o[p]; }\n  return clone;\n}"}, {"instruction": "get a valid repeat mode from an md-mode attribute string.", "input": "JavaScript", "output": "function getRepeatMode(modeStr) {\n    if (!modeStr) { return REPEAT_VIRTUAL; }\n    modeStr = modeStr.toLowerCase();\n    return  REPEAT_MODES.indexOf(modeStr) > -1 ? modeStr : REPEAT_VIRTUAL;\n  }"}, {"instruction": "Find the key in the map object given a header name.\n\nReturns undefined if not found.\n\n@param   String  name  Header name\n@return  String|Undefined", "input": "JavaScript", "output": "function find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}"}, {"instruction": "@class errors.QueryResultError\n@augments external:Error\n@description\n\nThis error is specified as the rejection reason for all result-specific methods when the result doesn't match\nthe expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\n\nThe error applies to the result from the following methods: {@link Database#none none},\n{@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\n\nSupported errors:\n\n- `No return data was expected.`, method {@link Database#none none}\n- `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\n- `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\n\nLike any other error, this one is notified with through the global event {@link event:error error}.\n\nThe type is available from the {@link errors} namespace.\n\n@property {string} name\nStandard {@link external:Error Error} property - error type name = `QueryResultError`.\n\n@property {string} message\nStandard {@link external:Error Error} property - the error message.\n\n@property {string} stack\nStandard {@link external:Error Error} property - the stack trace.\n\n@property {object} result\nThe original $[Result] object that was received.\n\n@property {number} received\nTotal number of rows received. It is simply the value of `result.rows.length`.\n\n@property {number} code\nError code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\n\n@property {string} query\nQuery that was executed.\n\nNormally, it is the query already formatted with values, if there were any.\nBut if you are using initialization option `pgFormatting`, then the query string is before formatting.\n\n@property {*} values\nValues passed in as query parameters. Available only when initialization option `pgFormatting` is used.\nOtherwise, the values are within the pre-formatted `query` string.\n\n@example\n\nconst QueryResultError = pgp.errors.QueryResultError;\nconst qrec = pgp.errors.queryResultErrorCode;\n\nconst initOptions = {\n\n// pg-promise initialization options...\n\nerror: (err, e) => {\nif (err instanceof QueryResultError) {\n// A query returned unexpected number of records, and thus rejected;\n\n// we can check the error code, if we want specifics:\nif(err.code === qrec.noData) {\n// expected some data, but received none;\n}\n\n// If you write QueryResultError into the console,\n// you will get a nicely formatted output.\n\nconsole.log(err);\n\n// See also: err, e.query, e.params, etc.\n}\n}\n};\n\n@see\n{@link queryResult}, {@link Database#none none}, {@link Database#one one},\n{@link Database#oneOrNone oneOrNone}, {@link Database#many many}", "input": "JavaScript", "output": "function QueryResultError(code, result, query, values) {\n    const temp = Error.apply(this, arguments);\n    temp.name = this.name = 'QueryResultError';\n    this.stack = temp.stack;\n    this.message = errorMessages[code].message;\n    this.code = code;\n    this.result = result;\n    this.query = query;\n    this.values = values;\n    this.received = result.rows.length;\n}"}, {"instruction": "Get a pre-signed URL for a given operation name.\n\n@note You must ensure that you have static or previously resolved\ncredentials if you call this method synchronously (with no callback),\notherwise it may not properly sign the request. If you cannot guarantee\nthis (you are using an asynchronous credential provider, i.e., EC2\nIAM roles), you should always call this method with an asynchronous\ncallback.\n@note Not all operation parameters are supported when using pre-signed\nURLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n`ContentLength`, or `Tagging` must be provided as headers when sending a\nrequest. If you are using pre-signed URLs to upload from a browser and\nneed to use these fields, see {createPresignedPost}.\n@note The default signer allows altering the request by adding corresponding\nheaders to set some parameters (e.g. Range) and these added parameters\nwon't be signed. You must use signatureVersion v4 to to include these\nparameters in the signed portion of the URL and enforce exact matching\nbetween headers and signed params in the URL.\n@note This operation cannot be used with a promise. See note above regarding\nasynchronous credentials and use with a callback.\n@param operation [String] the name of the operation to call\n@param params [map] parameters to pass to the operation. See the given\noperation for the expected operation parameters. In addition, you can\nalso pass the \"Expires\" parameter to inform S3 how long the URL should\nwork for.\n@option params Expires [Integer] (900) the number of seconds to expire\nthe pre-signed URL operation in. Defaults to 15 minutes.\n@param callback [Function] if a callback is provided, this function will\npass the URL as the second parameter (after the error parameter) to\nthe callback function.\n@return [String] if called synchronously (with no callback), returns the\nsigned URL.\n@return [null] nothing is returned if a callback is provided.\n@example Pre-signing a getObject operation (synchronously)\nvar params = {Bucket: 'bucket', Key: 'key'};\nvar url = s3.getSignedUrl('getObject', params);\nconsole.log('The URL is', url);\n@example Pre-signing a putObject (asynchronously)\nvar params = {Bucket: 'bucket', Key: 'key'};\ns3.getSignedUrl('putObject', params, function (err, url) {\nconsole.log('The URL is', url);\n});\n@example Pre-signing a putObject operation with a specific payload\nvar params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\nvar url = s3.getSignedUrl('putObject', params);\nconsole.log('The URL is', url);\n@example Passing in a 1-minute expiry time for a pre-signed URL\nvar params = {Bucket: 'bucket', Key: 'key', Expires: 60};\nvar url = s3.getSignedUrl('getObject', params);\nconsole.log('The URL is', url); // expires in 60 seconds", "input": "JavaScript", "output": "function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  }"}, {"instruction": "Expression for $, returns the evaluator function", "input": "JavaScript", "output": "function capture( previousExpr, detection ) {\n\n      // extract meaning from the detection      \n      var capturing = !!detection[CAPTURING_INDEX];\n\n      if (!capturing)          \n         return previousExpr; // don't wrap at all, return given expr as-is      \n      \n      return lazyIntersection(previousExpr, head);\n            \n   }"}, {"instruction": "helper function to add some resiliency to volatile GH api endpoints", "input": "JavaScript", "output": "async function runRetryable (fn, maxRetries) {\n  let lastError\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn()\n    } catch (error) {\n      await new Promise((resolve, reject) => setTimeout(resolve, CHECK_INTERVAL))\n      lastError = error\n    }\n  }\n  // Silently eat 404s.\n  if (lastError.status !== 404) throw lastError\n}"}, {"instruction": "We need to update this component if the sort order changes or our entry object\nchanges. Thanks to immutability, if any of the directory contents change, our\nentry object will change.", "input": "JavaScript", "output": "function (nextProps, nextState) {\n            return nextProps.forceRender ||\n                this.props.entry !== nextProps.entry ||\n                this.props.sortDirectoriesFirst !== nextProps.sortDirectoriesFirst ||\n                this.props.extensions !== nextProps.extensions ||\n                (nextState !== undefined && this.state.draggedOver !== nextState.draggedOver);\n        }"}, {"instruction": "Simple bootstrapper for attaching logger and watch plugins by default. Other plugins can be attached through `monitor.use(plugin, options)`.", "input": "JavaScript", "output": "function bootstrap(monitor) {\n    plugins.logger.attach.call(monitor, options);\n    if (options.watch) {\n      plugins.watch.attach.call(monitor, options);\n    }\n  }"}, {"instruction": "MUST be called after `prepareSource` called\nHere we need to make auto series, especially for auto legend. But we\ndo not modify series.name in option to avoid side effects.", "input": "JavaScript", "output": "function autoSeriesName(seriesModel) {\n    // User specified name has higher priority, otherwise it may cause\n    // series can not be queried unexpectedly.\n    var name = seriesModel.name;\n    if (!modelUtil.isNameSpecified(seriesModel)) {\n        seriesModel.name = getSeriesAutoName(seriesModel) || name;\n    }\n}"}, {"instruction": "Flip the clock face", "input": "JavaScript", "output": "function(time, doNotAddPlayClass) {\n\t\t\tif(!time) {\n\t\t\t\ttime = this.factory.time.getDayCounter(this.showSeconds);\n\t\t\t}\n\n\t\t\tthis.autoIncrement();\n\n\t\t\tthis.base(time, doNotAddPlayClass);\n\t\t}"}, {"instruction": "Get the next sibling within a container. This will walk up the\nDOM if a node's siblings have been exhausted.\n\n@param {DOMElement|DOMTextNode} node\n@return {?DOMElement|DOMTextNode}", "input": "JavaScript", "output": "function getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}"}, {"instruction": "parse json file and allow single line comments", "input": "JavaScript", "output": "async function readJSONFile(filename){\n    // load file\n    let raw = await _fs.readFile(filename, 'utf8');\n\n    // strip single line js comments\n    raw = raw.replace(/^\\s*\\/\\/.*$/gm, '');\n\n    // parse text\n    return JSON.parse(raw);\n}"}, {"instruction": "hide dom", "input": "JavaScript", "output": "function hideDom(path){\n        var arrElements = document.querySelectorAll(path);\n        var element;\n        for(var i=0,len=arrElements.length;i<len;i++){\n            element = arrElements[i];\n            element._lastDispaly = element.style.display;\n            element.style.display = 'none';\n        }\n    }"}, {"instruction": "##### BEGIN: MODIFIED BY SAP polyfill for document.createAttributeNS which was removed from Chrome 34 but will be added back in, see: http://datajs.codeplex.com/workitem/1272 https://code.google.com/p/chromium/issues/detail?id=347506 https://codereview.chromium.org/243333003", "input": "JavaScript", "output": "function(namespaceURI, qualifiedName) {\n        var dummy = document.createElement('dummy');\n        dummy.setAttributeNS(namespaceURI, qualifiedName, '');\n        var attr = dummy.attributes[0];\n        dummy.removeAttributeNode(attr);\n        return attr;\n    }"}, {"instruction": "Get the timings.\n\n@return {Object}", "input": "JavaScript", "output": "function getTiming () {\n  let nativeTiming\n  let performance = window.performance\n  if (performance && performance.timing) {\n    nativeTiming = performance.timing.toJSON\n      ? performance.timing.toJSON()\n      : util.fn.extend({}, performance.timing)\n  } else {\n    nativeTiming = {}\n  }\n  return util.fn.extend(nativeTiming, recorder)\n}"}, {"instruction": "flatten nested array (the nesting can be to any depth).\n@param array {Array}\n@param i {int}\n@returns {Array}\n@private", "input": "JavaScript", "output": "function flatten(array, i) {\n  i = i || 0;\n\n  if(i >= array.length)\n    return array;\n\n  if(isArray(array[i])) {\n    return flatten(array.slice(0,i)\n      .concat(array[i], array.slice(i+1)), i);\n  }\n  return flatten(array, i+1);\n}"}, {"instruction": "---\ncategory: utilities/a11y\n---\nReturns `true` if any of the children are not wrapped with [ScreenReaderContent](#ScreenReaderContent).\n@param {ReactChildren} children - A react component's children prop\n@return {boolean} whether any of the children are visible", "input": "JavaScript", "output": "function hasVisibleChildren (children) {\n  let visible = false\n\n  React.Children.forEach(children, (child) => {\n    if (child && !matchComponentTypes(child, [ScreenReaderContent])) {\n      visible = true\n    }\n  })\n\n  return visible\n}"}, {"instruction": "Reset context state\n@name reset\n@memberOf me.Renderer.prototype\n@function", "input": "JavaScript", "output": "function reset() {\n         this.resetTransform();\n         this.setBlendMode(this.settings.blendMode);\n         this.setColor(\"#000000\");\n         this.currentTint.setColor(255, 255, 255, 1.0);\n         this.cache.clear();\n         this.currentScissor[0] = 0;\n         this.currentScissor[1] = 0;\n         this.currentScissor[2] = this.backBufferCanvas.width;\n         this.currentScissor[3] = this.backBufferCanvas.height;\n         this.updateBounds();\n       }"}, {"instruction": "\u83b7\u53d6\u6216\u8005\u8bbe\u7f6eUploader\u914d\u7f6e\u9879\u3002\n@method option\n@grammar option( key ) => *\n@grammar option( key, val ) => self\n@example\n\n// \u521d\u59cb\u72b6\u6001\u56fe\u7247\u4e0a\u4f20\u524d\u4e0d\u4f1a\u538b\u7f29\nvar uploader = new WebUploader.Uploader({\ncompress: null;\n});\n\n// \u4fee\u6539\u540e\u56fe\u7247\u4e0a\u4f20\u524d\uff0c\u5c1d\u8bd5\u5c06\u56fe\u7247\u538b\u7f29\u52301600 * 1600\nuploader.option( 'compress', {\nwidth: 1600,\nheight: 1600\n});", "input": "JavaScript", "output": "function( key, val ) {\n                var opts = this.options;\n    \n                // setter\n                if ( arguments.length > 1 ) {\n    \n                    if ( $.isPlainObject( val ) &&\n                            $.isPlainObject( opts[ key ] ) ) {\n                        $.extend( opts[ key ], val );\n                    } else {\n                        opts[ key ] = val;\n                    }\n    \n                } else {    // getter\n                    return key ? opts[ key ] : opts;\n                }\n            }"}, {"instruction": "Check to see if a node contains only identifers\n@param {ASTNode} node The node to check\n@returns {boolean} Whether or not the node contains only identifers", "input": "JavaScript", "output": "function containsOnlyIdentifiers(node) {\n            if (node.type === \"Identifier\") {\n                return true;\n            }\n\n            if (node.type === \"MemberExpression\") {\n                if (node.object.type === \"Identifier\") {\n                    return true;\n                }\n                if (node.object.type === \"MemberExpression\") {\n                    return containsOnlyIdentifiers(node.object);\n                }\n            }\n\n            return false;\n        }"}, {"instruction": "Get style\n\n@param {Object} options\n@api private", "input": "JavaScript", "output": "function getStyle(options) {\n  var styles = {\n    nested: 0,\n    expanded: 1,\n    compact: 2,\n    compressed: 3\n  };\n\n  return styles[options.outputStyle] || 0;\n}"}, {"instruction": "Get server type form request message.", "input": "JavaScript", "output": "function(route) {\n  if (!route) {\n    return null;\n  }\n  var idx = route.indexOf('.');\n  if (idx < 0) {\n    return null;\n  }\n  return route.substring(0, idx);\n}"}, {"instruction": "called when the layer is removed from the game world or a container", "input": "JavaScript", "output": "function onDeactivateEvent() {\n         // cancel all event subscriptions\n         me.event.unsubscribe(this.vpChangeHdlr);\n         me.event.unsubscribe(this.vpResizeHdlr);\n         me.event.unsubscribe(this.vpLoadedHdlr);\n       }"}, {"instruction": "PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END", "input": "JavaScript", "output": "function iif(condition, trueResult, falseResult) {\n    if (trueResult === void 0) {\n        trueResult = _empty__WEBPACK_IMPORTED_MODULE_1__[\"EMPTY\"];\n    }\n    if (falseResult === void 0) {\n        falseResult = _empty__WEBPACK_IMPORTED_MODULE_1__[\"EMPTY\"];\n    }\n    return Object(_defer__WEBPACK_IMPORTED_MODULE_0__[\"defer\"])(function () { return condition() ? trueResult : falseResult; });\n}"}, {"instruction": "Returns the value of an individual property.\n\n@param {string} url\nURL of the string bundle.\n@param {string} prefName\nThe property to get the value of.\n\n@return The value of the requested property\n@type string", "input": "JavaScript", "output": "function getProperty(url, prefName) {\n  var sbs = Cc[\"@mozilla.org/intl/stringbundle;1\"]\n            .getService(Ci.nsIStringBundleService);\n  var bundle = sbs.createBundle(url);\n\n  try {\n    return bundle.GetStringFromName(prefName);\n  } catch (ex) {\n    throw new Error(arguments.callee.name + \": Unknown property - \" + prefName);\n  }\n}"}, {"instruction": "Perform a request to the homeserver without any credentials.\n@param {Function} callback Optional. The callback to invoke on\nsuccess/failure. See the promise return values for more information.\n@param {string} method The HTTP method e.g. \"GET\".\n@param {string} path The HTTP path <b>after</b> the supplied prefix e.g.\n\"/createRoom\".\n\n@param {Object=} queryParams A dict of query params (these will NOT be\nurlencoded). If unspecified, there will be no query params.\n\n@param {Object} data The HTTP JSON body.\n\n@param {Object=} opts additional options\n\n@param {Number=} opts.localTimeoutMs The maximum amount of time to wait before\ntiming out the request. If not specified, there is no timeout.\n\n@param {sting=} opts.prefix The full prefix to use e.g.\n\"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n\n@param {Object=} opts.headers map of additional request headers\n\n@return {module:client.Promise} Resolves to <code>{data: {Object},\nheaders: {Object}, code: {Number}}</code>.\nIf <code>onlyData</code> is set, this will resolve to the <code>data</code>\nobject only.\n@return {module:http-api.MatrixError} Rejects with an error if a problem\noccurred. This includes network problems and Matrix-specific error JSON.", "input": "JavaScript", "output": "function(callback, method, path, queryParams, data, opts) {\n        opts = opts || {};\n        const prefix = opts.prefix !== undefined ? opts.prefix : this.opts.prefix;\n        const fullUri = this.opts.baseUrl + prefix + path;\n\n        return this.requestOtherUrl(\n            callback, method, fullUri, queryParams, data, opts,\n        );\n    }"}, {"instruction": "\u83b7\u53d6\u6e10\u53d8\u51fd\u6570\n@param  {Array} colors \u591a\u4e2a\u989c\u8272\n@return {String} \u989c\u8272\u503c", "input": "JavaScript", "output": "function gradient(colors) {\n    var points = [];\n    if (isString(colors)) {\n      colors = colors.split('-');\n    }\n    each(colors, function (color) {\n      if (color.indexOf('#') === -1) {\n        color = ColorUtil.toRGB(color);\n      }\n      points.push(rgb2arr(color));\n    });\n    return function (percent) {\n      return calColor(points, percent);\n    };\n  }"}, {"instruction": "Performs a deep comparison between two values to determine if they are\nequivalent to each other. If a callback is provided it will be executed\nto compare values. If the callback returns `undefined` comparisons will\nbe handled by the method instead. The callback is bound to `thisArg` and\ninvoked with two arguments; (a, b).\n\n@static\n@memberOf _\n@category Objects\n@param {*} a The value to compare.\n@param {*} b The other value to compare.\n@param {Function} [callback] The function to customize comparing values.\n@param {*} [thisArg] The `this` binding of `callback`.\n@returns {boolean} Returns `true` if the values are equivalent, else `false`.\n@example\n\nvar object = { 'name': 'fred' };\nvar copy = { 'name': 'fred' };\n\nobject == copy;\n// => false\n\n_.isEqual(object, copy);\n// => true\n\nvar words = ['hello', 'goodbye'];\nvar otherWords = ['hi', 'goodbye'];\n\n_.isEqual(words, otherWords, function(a, b) {\nvar reGreet = /^(?:hello|hi)$/i,\naGreet = _.isString(a) && reGreet.test(a),\nbGreet = _.isString(b) && reGreet.test(b);\n\nreturn (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n});\n// => true", "input": "JavaScript", "output": "function isEqual(a, b, callback, thisArg) {\n      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n    }"}, {"instruction": "Given an array of values, a type, and a default value,\nensure the given array's contents ALL adhere to the provided type,\nreturning the default value if type check fails.\n\nIf the given value to check isn't an Array, delegates to SPE.utils.ensureTypedArg.\n\n@param  {Array|boolean|string|number|object} arg          The array of values to check type of.\n@param  {String} type         The type that should be adhered to.\n@param  {(boolean|string|number|object)} defaultValue A default fallback value.\n@return {(boolean|string|number|object)}              The given value if type check passes, or the default value if it fails.", "input": "JavaScript", "output": "function( arg, type, defaultValue ) {\n        'use strict';\n\n        // If the argument being checked is an array, loop through\n        // it and ensure all the values are of the correct type,\n        // falling back to the defaultValue if any aren't.\n        if ( Array.isArray( arg ) ) {\n            for ( var i = arg.length - 1; i >= 0; --i ) {\n                if ( typeof arg[ i ] !== type ) {\n                    return defaultValue;\n                }\n            }\n\n            return arg;\n        }\n\n        // If the arg isn't an array then just fallback to\n        // checking the type.\n        return this.ensureTypedArg( arg, type, defaultValue );\n    }"}, {"instruction": "Returns bucketed experiment ID to compare against experiment user is being called into\n@param {Object} group        Group that experiment is in\n@param {string} bucketingId  Bucketing ID\n@param {string} userId       ID of user to be bucketed into experiment\n@param {Object} logger       Logger implementation\n@return {string} ID of experiment if user is bucketed into experiment within the group, null otherwise", "input": "JavaScript", "output": "function(group, bucketingId, userId, logger) {\n    var bucketingKey = sprintf('%s%s', bucketingId, group.id);\n    var bucketValue = module.exports._generateBucketValue(bucketingKey);\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME, bucketValue, userId));\n    var trafficAllocationConfig = group.trafficAllocation;\n    var bucketedExperimentId = module.exports._findBucket(bucketValue, trafficAllocationConfig);\n    return bucketedExperimentId;\n  }"}, {"instruction": "\ub79c\ub354\ub9c1\n@returns {View.Layout.Header} this", "input": "JavaScript", "output": "function() {\n        var resizeHandleHeights;\n\n        this._destroyChildren();\n\n        this.$el.css({\n            height: this.dimensionModel.get('headerHeight') - TABLE_BORDER_WIDTH\n        }).html(this.template({\n            colGroup: this._getColGroupMarkup(),\n            tBody: this._getTableBodyMarkup()\n        }));\n\n        if (this.coordColumnModel.get('resizable')) {\n            resizeHandleHeights = this._getResizeHandleHeights();\n            this._addChildren(this.viewFactory.createHeaderResizeHandle(this.whichSide, resizeHandleHeights));\n            this.$el.append(this._renderChildren());\n        }\n\n        return this;\n    }"}, {"instruction": "Returns the minimum value for a component with an implicit value to equal a\nreference value. A `null` optimal value means that there is no need for an\nupdate since the implicit value and the reference are equal.\n\n@param {Component} component Component of the computed value.\n@param {any}       implicit  The implicit value of the component.\n@param {any}       reference The reference value for the component.\n@return                      the minimum value making the component to equal\nthe reference value.", "input": "JavaScript", "output": "function getOptimalUpdate(component, implicit, reference) {\n  if (equal(implicit, reference)) {\n    return null;\n  }\n  if (isSingleProperty(component.schema)) {\n    return reference;\n  }\n  var optimal = {};\n  Object.keys(reference).forEach(function(key) {\n    var needsUpdate = !equal(reference[key], implicit[key]);\n    if (needsUpdate) {\n      optimal[key] = reference[key];\n    }\n  });\n  return optimal;\n}"}, {"instruction": "Prepare i18n, load translations from plugins and book\n\n@param {Output}\n@return {Promise<Output>}", "input": "JavaScript", "output": "function prepareI18n(output) {\n    var state = output.getState();\n    var i18n = state.getI18n();\n    var searchPaths = listSearchPaths(output);\n\n    searchPaths\n        .reverse()\n        .forEach(function(searchPath) {\n            var i18nRoot = path.resolve(searchPath, '_i18n');\n\n            if (!fs.existsSync(i18nRoot)) return;\n            i18n.load(i18nRoot);\n        });\n\n    return Promise(output);\n}"}, {"instruction": "Prefix css classes in a block\n\n@param {String} prefix\n@param {Block} block\n@return {Block}\n@api private", "input": "JavaScript", "output": "function prefixClasses(prefix, block){\n  utils.assertString(prefix, 'prefix');\n  utils.assertType(block, 'block', 'block');\n\n  var _prefix = this.prefix;\n\n  this.options.prefix = this.prefix = prefix.string;\n  block = this.visit(block);\n  this.options.prefix = this.prefix = _prefix;\n  return block;\n}"}, {"instruction": "Resets the given <code>List</code> selection\nand scrolls to the top.", "input": "JavaScript", "output": "function() {\n\t\t\t\tvar oSelectedItem = this._getList().getSelectedItem();\n\n\t\t\t\tif (oSelectedItem) {\n\t\t\t\t\tthis._toggleListItem(oSelectedItem, false);\n\t\t\t\t\tsetTimeout(this._scrollPageTo.bind(this, 0, 0), 0);\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "checks if companion is authorized to access a user's provider account.\n\n@param {object} req\n@param {object} res", "input": "JavaScript", "output": "function authorized (req, res) {\n  const { params, uppy } = req\n  const providerName = params.providerName\n\n  if (!uppy.providerTokens || !uppy.providerTokens[providerName]) {\n    return res.json({ authenticated: false })\n  }\n\n  const token = uppy.providerTokens[providerName]\n  uppy.provider.list({ token, uppy }, (err, response, body) => {\n    const notAuthenticated = Boolean(err)\n    if (notAuthenticated) {\n      logger.debug(`${providerName} failed authorizarion test err:${err}`, 'provider.auth.check')\n    }\n    return res.json({ authenticated: !notAuthenticated })\n  })\n}"}, {"instruction": "Count spaces before/after arrow(`=>`) token.\n@param {Object} tokens Tokens before/after arrow.\n@returns {Object} count of space before/after arrow.", "input": "JavaScript", "output": "function countSpaces(tokens) {\n            const before = tokens.arrow.range[0] - tokens.before.range[1];\n            const after = tokens.after.range[0] - tokens.arrow.range[1];\n\n            return { before, after };\n        }"}, {"instruction": "Get the current user's followed artists.\n@param {Object} [options] Options, being after and limit.\n@param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n@returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\nalbum objects. Not returned if a callback is given.", "input": "JavaScript", "output": "function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withQueryParameters(\n        {\n          type: 'artist'\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  }"}, {"instruction": "Gets presigned posts\n\n@param {string} siteId\n@param {Object} checksums\n@return {Object}", "input": "JavaScript", "output": "async function _getPresignedPosts(siteId, checksums) {\n  const endpoint = url.resolve(apiURL, `/sites/${siteId}/presigned_posts`);\n  const body = { checksums };\n  const response = await got.post(endpoint, { body, json: true, headers: _bearer() });\n\n  return response.body.presignedPosts;\n}"}, {"instruction": "scoped", "input": "JavaScript", "output": "function clear () {\n      if (!window.confirm(i18n('Are you certain you want to clear your draft?'))) {\n        return\n      }\n      textArea.value = ''\n      hasContent.set(!!textArea.value)\n      save()\n    }"}, {"instruction": "This code walks the history of the master branch and prints results that look very similar to calling `git log` from the command line", "input": "JavaScript", "output": "function compileHistory(resultingArrayOfCommits) {\n  var lastSha;\n  if (historyCommits.length > 0) {\n    lastSha = historyCommits[historyCommits.length - 1].commit.sha();\n    if (\n      resultingArrayOfCommits.length == 1 &&\n      resultingArrayOfCommits[0].commit.sha() == lastSha\n    ) {\n      return;\n    }\n  }\n\n  resultingArrayOfCommits.forEach(function(entry) {\n    historyCommits.push(entry);\n  });\n\n  lastSha = historyCommits[historyCommits.length - 1].commit.sha();\n\n  walker = repo.createRevWalk();\n  walker.push(lastSha);\n  walker.sorting(nodegit.Revwalk.SORT.TIME);\n\n  return walker.fileHistoryWalk(historyFile, 500)\n    .then(compileHistory);\n}"}, {"instruction": "Creates a default toolbar providing basic buttons and functionality.\n\n@param {sap.ui.table.CreationRow} oCreationRow The creation row to get the settings for the toolbar creation from.\n@returns {sap.m.OverflowToolbar} The default toolbar.", "input": "JavaScript", "output": "function createDefaultToolbar(oCreationRow) {\n\t\treturn new OverflowToolbar({\n\t\t\tcontent: [\n\t\t\t\tnew ToolbarSpacer(),\n\t\t\t\tnew Button({\n\t\t\t\t\ttext: TableUtils.getResourceText(\"TBL_CREATIONROW_APPLY\"),\n\t\t\t\t\ttype: MLibrary.ButtonType.Emphasized,\n\t\t\t\t\tenabled: oCreationRow.getApplyEnabled(),\n\t\t\t\t\tpress: function() {\n\t\t\t\t\t\toCreationRow._fireApply();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t],\n\t\t\tstyle: MLibrary.ToolbarStyle.Clear,\n\t\t\tariaLabelledBy: [oCreationRow.getId() + \"-label\"]\n\t\t});\n\t}"}, {"instruction": "initWebGL  Initialize WebGL, returning the GL context or null if WebGL isn't available or could not be initialized.", "input": "JavaScript", "output": "function initWebGL() {\n  gl = null;\n\n  try {\n    gl = canvas.getContext(\"experimental-webgl\");\n  }\n  catch(e) {\n    alert(e);\n  }\n\n  // If we don't have a GL context, give up now\n\n  if (!gl) {\n    alert(\"Unable to initialize WebGL. Your browser may not support it.\");\n  }\n}"}, {"instruction": "Helper - get arguments of a path drawing command", "input": "JavaScript", "output": "function (str) {\n    var output = [];\n    var idx = 0;\n    var c, num;\n\n    var nextNumber = function () {\n      var chars = [];\n\n      while (/[^-\\d\\.]/.test(str.charAt(idx))) {\n        // skip the non-digit characters\n        idx++;\n      }\n\n      if ('-' === str.charAt(idx)) {\n        chars.push('-');\n        idx++;\n      }\n\n      while ((c = str.charAt(idx)) && /[\\d\\.Ee]/.test(c)) {\n        chars.push(c);\n        idx++;\n      }\n\n      return parseFloat(chars.join(''));\n    };\n\n    while (!isNaN(num = nextNumber())) output.push(num);\n\n    return output;\n  }"}, {"instruction": "Copy the values from one mat3 to another\n\n@param {mat3} out the receiving matrix\n@param {mat3} a the source matrix\n@returns {mat3} out", "input": "JavaScript", "output": "function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}"}, {"instruction": "/* [MS-XLS] 2.4.173", "input": "JavaScript", "output": "function parse_MTRSettings(blob) {\n\tvar fMTREnabled = blob.read_shift(4) !== 0x00;\n\tvar fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n\tvar cUserThreadCount = blob.read_shift(4);\n\treturn [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n}"}, {"instruction": "Register an overlay\nIf the MetaModel was not loaded yet when evaluating addODataProperty, the\nplugin returns editable = false. Therefore we must make an extra check after\nthe MetaModel is loaded.\n@param  {sap.ui.dt.Overlay} oOverlay overlay object\n@override", "input": "JavaScript", "output": "function(oOverlay) {\n\t\t\tvar oModel = oOverlay.getElement().getModel();\n\t\t\tif (oModel){\n\t\t\t\tvar oMetaModel = oModel.getMetaModel();\n\t\t\t\tif (oMetaModel && oMetaModel.loaded){\n\t\t\t\t\toMetaModel.loaded().then(function(){\n\t\t\t\t\t\tthis.evaluateEditable([oOverlay], {onRegistration: true});\n\t\t\t\t\t}.bind(this));\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.prototype.registerElementOverlay.apply(this, arguments);\n\t\t}"}, {"instruction": "Creates a request for an operation on a given service with\na set of input parameters.\n\n@param config [TableStore.Config] the config to perform the operation on\n@param operation [String] the operation to perform on the service\n@param params [Object] parameters to send to the operation.\nSee the operation's documentation for the format of the\nparameters.", "input": "JavaScript", "output": "function Request(config, operation, params) {\n    var endpoint = new TableStore.Endpoint(config.endpoint);\n    var region = config.region;\n    this.config = config;\n    if (config.maxRetries !== undefined) {\n      TableStore.DefaultRetryPolicy.maxRetryTimes = config.maxRetries;\n    }\n    //\u5982\u679c\u5728sdk\u5916\u90e8\u5305\u88c5\u4e86\u4e00\u5c42domain\uff0c\u5c31\u628a\u5b83\u4f20\u5230this.domain\n    this.domain = domain && domain.active;\n    this.operation = operation;\n    this.params = params || {};\n    this.httpRequest = new TableStore.HttpRequest(endpoint, region);\n    this.startTime = TableStore.util.date.getDate();\n\n    this.response = new TableStore.Response(this);\n    this.restartCount = 0;\n    this._asm = new AcceptorStateMachine(fsm.states, 'build');\n\n    TableStore.SequentialExecutor.call(this);\n    this.emit = this.emitEvent;\n  }"}, {"instruction": "Process Slate node leaves in preparation for MDAST transformation.", "input": "JavaScript", "output": "function processLeaves(leaf) {\n  /**\n   * Get an array of the mark types, converted to their MDAST equivalent\n   * types.\n   */\n  const { marks = [], text } = leaf;\n  const markTypes = marks.map(mark => markMap[mark.type]);\n\n  if (typeof leaf.text === 'string') {\n    /**\n     * Code marks must be removed from the marks array, and the presence of a\n     * code mark changes the text node type that should be used.\n     */\n    const { filteredMarkTypes, textNodeType } = processCodeMark(markTypes);\n    return { text, marks: filteredMarkTypes, textNodeType };\n  }\n\n  return { node: leaf.node, marks: markTypes };\n}"}, {"instruction": "/\\s*,\\s", "input": "JavaScript", "output": "function(name,loc) {\n\t\t// slow\n\t\tif(loc === undefined) loc = 0;\n\t\twhile (name[0] == ' '){\n\t\t\tloc++;\n\t\t\tname = name.substr(1);\n\t\t};\n\t\tname = name.trim();\n\t\treturn new Identifier(new Token('IDENTIFIER',name,loc,name.length));\n\t}"}, {"instruction": "Clean value to boolean\nIf value is not a boolean or can't be converted, an error is thrown\nThis is probably unnecessary but more a precaution\n@param {any} value", "input": "JavaScript", "output": "function ensureBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'string' && value.toLowerCase() === 'true') {\n    return true;\n  } else if (typeof value === 'string' && value.toLowerCase() === 'false') {\n    return false;\n  } else if (value === 1) {\n    return true;\n  } else if (value === 0) {\n    return false;\n  }\n  throw new Error(`Unexpected value for boolean: ${value}`);\n}"}, {"instruction": "Returns the currency symbols available for this locale.\nCurrency symbols get accumulated by custom currency symbols.\n\n@returns {object} the map of all currency symbols available in this locale, e.g.\n{\n\"AUD\": \"A$\",\n\"BRL\": \"R$\",\n\"EUR\": \"\u20ac\",\n\"GBP\": \"\u00a3\",\n}\n@public\n@since 1.60", "input": "JavaScript", "output": "function() {\n\t\t\t// Lookup into global Config\n\t\t\tvar mCustomCurrencies = this._get(\"currency\"),\n\t\t\t\tmCustomCurrencySymbols = {},\n\t\t\t\tsIsoCode;\n\n\t\t\tfor (var sCurrencyKey in mCustomCurrencies) {\n\t\t\t\tsIsoCode = mCustomCurrencies[sCurrencyKey].isoCode;\n\n\t\t\t\tif (mCustomCurrencies[sCurrencyKey].symbol) {\n\t\t\t\t\tmCustomCurrencySymbols[sCurrencyKey] = mCustomCurrencies[sCurrencyKey].symbol;\n\t\t\t\t} else if (sIsoCode) {\n\t\t\t\t\tmCustomCurrencySymbols[sCurrencyKey] = this._get(\"currencySymbols\")[sIsoCode];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Object.assign({}, this._get(\"currencySymbols\"), mCustomCurrencySymbols);\n\t\t}"}, {"instruction": "Checks if a header already exists. If it does not, sets the value to whatever is passed as\n`defaultValue`\n\n@param {object} headers\n@param {String} headerKey\n@param {String} defaultValue", "input": "JavaScript", "output": "function (headers, headerKey, defaultValue) {\n        var headerName = _.findKey(headers, function (value, key) {\n            return key.toLowerCase() === headerKey.toLowerCase();\n        });\n\n        if (!headerName) {\n            headers[headerKey] = defaultValue;\n        }\n    }"}, {"instruction": "constructor \nA loader for JSON manifests. Items inside the manifest are loaded before the loader completes. To load manifests\nusing JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}} as part of the\n{{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\nThe list of files in the manifest must be defined on the top-level JSON object in a `manifest` property. This\nexample shows a sample manifest definition, as well as how to to include a sub-manifest.\n\n{\n\"path\": \"assets/\",\n\"manifest\": [\n\"image.png\",\n{\"src\": \"image2.png\", \"id\":\"image2\"},\n{\"src\": \"sub-manifest.json\", \"type\":\"manifest\", \"callback\":\"jsonCallback\"}\n]\n}\n\nWhen a ManifestLoader has completed loading, the parent loader (usually a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\nbut could also be another ManifestLoader) will inherit all the loaded items, so you can access them directly.\n\nNote that the {{#crossLink \"JSONLoader\"}}{{/crossLink}} and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are\nhigher priority loaders, so manifests <strong>must</strong> set the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n{{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property to {{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}}.\n\nAdditionally, some browsers require the server to serve a JavaScript mime-type for JSONP, so it may not work in\nsome conditions.\n@class ManifestLoader\n@param {LoadItem|Object} loadItem\n@extends AbstractLoader\n@constructor", "input": "JavaScript", "output": "function ManifestLoader(loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.Types.MANIFEST);\n\n\t// Public Properties\n\t\t/**\n\t\t * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}},\n\t\t * used to pass plugins to new LoadQueues that may be created.\n\t\t * @property _plugins\n\t\t * @type {Array}\n\t\t * @private\n\t\t * @since 0.6.1\n\t\t */\n\t\tthis.plugins = null;\n\n\n\t// Protected Properties\n\t\t/**\n\t\t * An internal {{#crossLink \"LoadQueue\"}}{{/crossLink}} that loads the contents of the manifest.\n\t\t * @property _manifestQueue\n\t\t * @type {LoadQueue}\n\t\t * @private\n\t\t */\n\t\tthis._manifestQueue = null;\n\t}"}, {"instruction": "/*\tEvents\n==================================================", "input": "JavaScript", "output": "function(error) {\n\t\tthis._state.loaded = true;\n\t\tthis.fire(\"loaded\", this.data);\n\t\tif (this.message) {\n\t\t\tthis.message.hide();\n\t\t}\n\t\tif (!(error || this.options.background)) {\n\t\t\tthis.showMeta();\n\t\t}\n\t\tthis.updateDisplay();\n\t}"}, {"instruction": "This class is used to maintain all the accessibility roles, tooltips, etc., needed for the ShellBar control life cycle.\n@alias sap/f/shellBar/Accessibility\n@since 1.64\n@private", "input": "JavaScript", "output": "function (oContext) {\n\t\tif (oContext) {\n\t\t\toControl = oContext;\n\t\t\toControl.addDelegate(this._controlDelegate, false, this);\n\t\t}\n\n\t\tthis.oRb = Core.getLibraryResourceBundle(\"sap.f\");\n\t}"}, {"instruction": "this could be rewritten with actual FS apis / globs, but this is simpler", "input": "JavaScript", "output": "function getFlatFiles(mfsData, output, getAssetPermissions, curBase = \"\") {\n  for (const path of Object.keys(mfsData)) {\n    const item = mfsData[path];\n    const curPath = `${curBase}/${path}`;\n    // directory\n    if (item[\"\"] === true) getFlatFiles(item, output, getAssetPermissions, curPath);\n    // file\n    else if (!curPath.endsWith(\"/\")) {\n      output[curPath.substr(1)] = {\n        source: mfsData[path],\n        permissions: getAssetPermissions(curPath.substr(1))\n      };\n    }\n  }\n}"}, {"instruction": "/*\nAdjusts the ranks for all nodes in the graph such that all nodes v have\nrank(v) >= 0 and at least one node w has rank(w) = 0.", "input": "JavaScript", "output": "function normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}"}, {"instruction": "OAuth2 Web Server Authentication Flow (Authorization Code)\nAccess Token Request\n\n@param {String} code - Authorization code\n@param {Object} [params] - Optional parameters to send in token retrieval\n@param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n@param {Callback.<TokenResponse>} [callback] - Callback function\n@returns {Promise.<TokenResponse>}", "input": "JavaScript", "output": "function(code, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n    params = _.extend({\n      grant_type : \"authorization_code\",\n      code : code,\n      client_id : this.clientId,\n      redirect_uri : this.redirectUri\n    }, params || {});\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n    return this._postParams(params, callback);\n  }"}, {"instruction": "/* [MS-XLS] 2.5.198.21", "input": "JavaScript", "output": "function parse_NameParsedFormula(blob, length, opts, cce) {\n\tvar target = blob.l + length;\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tvar rgcb;\n\tif(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n\treturn [rgce, rgcb];\n}"}, {"instruction": "Function: removeAllStylenames\n\nRemoves all stylenames from the given style and returns the updated\nstyle.", "input": "JavaScript", "output": "function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t}"}, {"instruction": "Define the star object\n\n@param {number} x\n@param {number} y\n@param {number} starSize\n@param {context} ctx\n@param {canvas} fgCanvas\n@param {analyser} analyser\n@param {Uint8Array} streamData", "input": "JavaScript", "output": "function Star( x, y, starSize, ctx, fgCanvas, analyser, streamData ){\n\tthis.x = x;\n\tthis.y = y;\n\tthis.angle = Math.atan( Math.abs(y) / Math.abs(x) );\n\tthis.starSize = starSize;\n\tthis.ctx = ctx;\n\tthis.high = 0;\n\tthis.fgCanvas = fgCanvas;\n\tthis.analyser = analyser;\n\tthis.streamData = streamData;\n}"}, {"instruction": "http://docs.jquery.com/Plugins/Validation/valid", "input": "JavaScript", "output": "function() {\n\t\tif ( $(this[0]).is(\"form\")) {\n\t\t\treturn this.validate().form();\n\t\t} else {\n\t\t\tvar valid = true;\n\t\t\tvar validator = $(this[0].form).validate();\n\t\t\tthis.each(function() {\n\t\t\t\tvalid = valid && validator.element(this);\n\t\t\t});\n\t\t\treturn valid;\n\t\t}\n\t}"}, {"instruction": "matches another field", "input": "JavaScript", "output": "function(value, identifier) {\n      var\n        $form = $(this),\n        matchingValue\n      ;\n      if( $('[data-validate=\"'+ identifier +'\"]').length > 0 ) {\n        matchingValue = $('[data-validate=\"'+ identifier +'\"]').val();\n      }\n      else if($('#' + identifier).length > 0) {\n        matchingValue = $('#' + identifier).val();\n      }\n      else if($('[name=\"' + identifier +'\"]').length > 0) {\n        matchingValue = $('[name=\"' + identifier + '\"]').val();\n      }\n      else if( $('[name=\"' + identifier +'[]\"]').length > 0 ) {\n        matchingValue = $('[name=\"' + identifier +'[]\"]');\n      }\n      return (matchingValue !== undefined)\n        ? ( value.toString() == matchingValue.toString() )\n        : false\n      ;\n    }"}, {"instruction": "# words :: String -> Array String . . Takes a string and returns the array of words the string contains . (words are delimited by whitespace characters). . . See also [`unwords`](#unwords). . . ```javascript . > S.words (' foo bar baz ') . ['foo', 'bar', 'baz'] . ```", "input": "JavaScript", "output": "function words(s) {\n    var words = s.split (/\\s+/);\n    var len = words.length;\n    return words.slice (words[0] === '' ? 1 : 0,\n                        words[len - 1] === '' ? len - 1 : len);\n  }"}, {"instruction": "return expression", "input": "JavaScript", "output": "function() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty\n      ? new nodes.Return\n      : new nodes.Return(expr);\n  }"}, {"instruction": "/*\nExecute the given callback once the DOM is ready (which might already be the case).", "input": "JavaScript", "output": "function whenReady(callback) {\n\n\t\tfunction onLoaded() {\n\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", onLoaded, false );\n\t\t\tcallback();\n\t\t}\n\n\t\tif ( document.readyState === 'complete' ) {\n\t\t\tcallback();\n\t\t} else {\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", onLoaded, false );\n\t\t}\n\t}"}, {"instruction": "Remove injected default camera from scene, if present.\n\n@param {Element} sceneEl", "input": "JavaScript", "output": "function removeDefaultCamera (sceneEl) {\n  var defaultCamera;\n  var camera = sceneEl.camera;\n  if (!camera) { return; }\n\n  // Remove default camera if present.\n  defaultCamera = sceneEl.querySelector('[' + DEFAULT_CAMERA_ATTR + ']');\n  if (!defaultCamera) { return; }\n  sceneEl.removeChild(defaultCamera);\n}"}, {"instruction": "Snatch wysiwyg command.\n@param {{command: object}} commandWrapper - wysiwyg command wrapper\n@private", "input": "JavaScript", "output": "function _snatchWysiwygCommand(commandWrapper) {\n  const {command} = commandWrapper;\n\n  if (!command.isWWType()) {\n    return;\n  }\n\n  switch (command.getName()) {\n  case 'AddRow':\n    commandWrapper.command = wwAddRow;\n    break;\n  case 'AddCol':\n    commandWrapper.command = wwAddCol;\n    break;\n  case 'RemoveRow':\n    commandWrapper.command = wwRemoveRow;\n    break;\n  case 'RemoveCol':\n    commandWrapper.command = wwRemoveCol;\n    break;\n  case 'AlignCol':\n    commandWrapper.command = wwAlignCol;\n    break;\n  default:\n  }\n}"}, {"instruction": "Compares the given values using <code>===</code> and <code>></code>.\n\n@param {any} vValue1\nthe first value to compare\n@param {any} vValue2\nthe second value to compare\n@return {int}\nthe result of the compare: <code>0</code> if the values are equal, <code>-1</code> if the\nfirst value is smaller, <code>1</code> if the first value is larger, <code>NaN</code> if\nthey cannot be compared", "input": "JavaScript", "output": "function simpleCompare(vValue1, vValue2) {\n\t\tif (vValue1 === vValue2) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (vValue1 === null || vValue2 === null\n\t\t\t\t|| vValue1 === undefined || vValue2 === undefined) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn vValue1 > vValue2 ? 1 : -1;\n\t}"}, {"instruction": "Retrieves the smallest horizontal (degrees=0) rectangle which contains\nthis rectangle.\n@returns {OpenSeadragon.Rect}", "input": "JavaScript", "output": "function() {\n        if (this.degrees === 0) {\n            return this.clone();\n        }\n        var topLeft = this.getTopLeft();\n        var topRight = this.getTopRight();\n        var bottomLeft = this.getBottomLeft();\n        var bottomRight = this.getBottomRight();\n        var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        return new $.Rect(\n            minX,\n            minY,\n            maxX - minX,\n            maxY - minY);\n    }"}, {"instruction": "Finds and returns the first 'meta charset' element in the head.\n\n@param {Node} head the section to search for the meta charset node.\n@returns {Node} the '<meta charset>' node or null.", "input": "JavaScript", "output": "function findMetaViewport(head) {\n  for (let node = head.firstChild; node !== null; node = node.nextSibling) {\n    if (node.tagName === 'meta' && node.attribs.name === 'viewport') {\n      return node;\n    }\n  }\n  return null;\n}"}, {"instruction": "@private\n\nRecursively walks Mustache tokens, and creates a tree that Vapid understands.\n\n@param {Object} tree - a memo that holds the total tree value\n@param {array} branch - Mustache tokens\n@param {string} branchToken - current branch name and params\n@return {Object} tree of sections, fields, params, etc.\n /* eslint-disable no-param-reassign", "input": "JavaScript", "output": "function _walk(tree, branch, branchToken = 'general') {\n  tree[branchToken] = tree[branchToken] || _initBranch(branchToken);\n\n  branch.forEach((leaf) => {\n    switch (leaf[0]) {\n      case 'name': {\n        _addToTree(tree, branchToken, leaf[1]);\n        break;\n      }\n      case '#': {\n        const [, keyword, remainder] = leaf[1].toLowerCase().match(LEAF_REGEX);\n\n        if (Utils.includes(Goatee.CONDITIONALS, keyword)) {\n          if (this.options.parseConditionals) {\n            _addToTree(tree, branchToken, Utils.trim(remainder));\n          }\n          _walk.call(this, tree, leaf[4], branchToken);\n        } else {\n          _walk.call(this, tree, leaf[4], leaf[1]);\n        }\n\n        break;\n      }\n      default: {\n        // Do nothing\n      }\n    }\n  });\n\n  return tree;\n}"}, {"instruction": "Removes an object from canvas and returns it\n@method remove\n@param object {Object} Object to remove\n@return {Object} removed object", "input": "JavaScript", "output": "function (object) {\n      removeFromArray(this._objects, object);\n      if (this.getActiveObject() === object) {\n\n        // removing active object should fire \"selection:cleared\" events\n        this.fire('before:selection:cleared', { target: object });\n        this.discardActiveObject();\n        this.fire('selection:cleared');\n      }\n      this.renderAll();\n      return object;\n    }"}, {"instruction": "@private\n\nReturns the full path to the welcome project, which we open on first launch.\n\n@param {string} sampleUrl URL for getting started project\n@param {string} initialPath Path to Brackets directory (see {@link FileUtils::#getNativeBracketsDirectoryPath})\n@return {!string} fullPath reference", "input": "JavaScript", "output": "function _getWelcomeProjectPath(sampleUrl, initialPath) {\n        if (sampleUrl) {\n            // Back up one more folder. The samples folder is assumed to be at the same level as\n            // the src folder, and the sampleUrl is relative to the samples folder.\n            initialPath = initialPath.substr(0, initialPath.lastIndexOf(\"/\")) + \"/samples/\" + sampleUrl;\n        }\n\n        return _ensureTrailingSlash(initialPath); // paths above weren't canonical\n    }"}, {"instruction": "Get the URI to locate the entity set for the query result.\n\n@param {String}\nsServiceRootURI (optional) Identifies the root of the OData\nservice\n\n@returns {String} The resource path of the URI pointing to the entity\nset. It is a relative URI unless a service root is given, which\nwould then prefixed in order to return a complete URL.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResultRequest#getURIToQueryResultEntitySet", "input": "JavaScript", "output": "function(sServiceRootURI) {\n\t\t\tvar sURI = null;\n\t\t\tif (this._sResourcePath != null) {\n\t\t\t\tsURI = (sServiceRootURI ? sServiceRootURI : \"\") + this._sResourcePath;\n\t\t\t} else if (this._oQueryResult.getParameterization()) {\n\t\t\t\tif (!this._oParameterizationRequest) {\n\t\t\t\t\tthrow \"Missing parameterization request\";\n\t\t\t\t} else {\n\t\t\t\t\tsURI = this._oParameterizationRequest.getURIToParameterizationEntry(sServiceRootURI) + \"/\"\n\t\t\t\t\t\t\t+ this._oQueryResult.getParameterization().getNavigationPropertyToQueryResult();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsURI = (sServiceRootURI ? sServiceRootURI : \"\") + \"/\" + this._oQueryResult.getEntitySet().getQName();\n\t\t\t}\n\t\t\treturn sURI;\n\t\t}"}, {"instruction": "Each layout consists of vertical panels, that contains its position and horizontal views. Flex-like positions of panels and views defined by 'grow' and 'size' parameters. View or panel with 'size' has exactly <size> height or width respectively. View or panel with 'grow' fills <grow> part of the residuary space (it works like flex-grow). By default, position = { grow: 1 }", "input": "JavaScript", "output": "function (position) {\n  if (!_.has(position, \"grow\") && !_.has(position, \"size\")) {\n    position = { grow: 1 };\n  }\n\n  return position;\n}"}, {"instruction": "Binds swipe's moving event.\n\n@return {Void}", "input": "JavaScript", "output": "function bindSwipeMove() {\n      var _this2 = this;\n\n      Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n        _this2.move(event);\n      }, Glide.settings.throttle), capture);\n    }"}, {"instruction": "Parse the input, then return the root node.\n\n@return {Node}\n@api private", "input": "JavaScript", "output": "function(){\n    var block = this.parent = this.root;\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash);\n      // normalize cached imports\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n      Parser.cache.set(this.hash, block);\n    }\n    return block;\n  }"}]
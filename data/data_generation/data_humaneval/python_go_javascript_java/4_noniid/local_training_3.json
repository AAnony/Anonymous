[{"instruction": "def clear_attendance(self):\n        \"\"\"\n        clear all attendance record\n\n        :return: bool\n        \"\"\"\n", "input": "", "output": "        command = const.CMD_CLEAR_ATTLOG\n        cmd_response = self.__send_command(command)\n        if cmd_response.get('status'):\n            return True\n        else:\n            raise ZKErrorResponse(\"Can't clear response\")"}, {"instruction": "def initialize_request(self, request, *args, **kwargs):\n        \"\"\"\n        Returns the initial request object.\n        \"\"\"\n", "input": "", "output": "        parser_context = self.get_parser_context(request)\n\n        return Request(\n            request,\n            parsers=self.get_parsers(),\n            authenticators=self.get_authenticators(),\n            negotiator=self.get_content_negotiator(),\n            parser_context=parser_context\n        )"}, {"instruction": "def add_global(self, globalvalue):\n        \"\"\"\n        Add a new global value.\n        \"\"\"\n", "input": "", "output": "        assert globalvalue.name not in self.globals\n        self.globals[globalvalue.name] = globalvalue"}, {"instruction": "def get_mac_address_table_input_request_type_get_interface_based_request_forwarding_interface_interface_name(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n", "input": "", "output": "        config = ET.Element(\"config\")\n        get_mac_address_table = ET.Element(\"get_mac_address_table\")\n        config = get_mac_address_table\n        input = ET.SubElement(get_mac_address_table, \"input\")\n        request_type = ET.SubElement(input, \"request-type\")\n        get_interface_based_request = ET.SubElement(request_type, \"get-interface-based-request\")\n        forwarding_interface = ET.SubElement(get_interface_based_request, \"forwarding-interface\")\n        interface_name = ET.SubElement(forwarding_interface, \"interface-name\")\n        interface_name.text = kwargs.pop('interface_name')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)"}, {"instruction": "def learn_ids(self, item_list):\n        \"\"\" read in already set ids on objects \"\"\"\n", "input": "", "output": "        self._reset_sequence()\n        for item in item_list:\n            key = self.nondup_key_for_item(item)\n            self.ids[key] = item[self.id_key]"}, {"instruction": "def parse_scalar_type_extension(lexer: Lexer) -> ScalarTypeExtensionNode:\n    \"\"\"ScalarTypeExtension\"\"\"\n", "input": "", "output": "    start = lexer.token\n    expect_keyword(lexer, \"extend\")\n    expect_keyword(lexer, \"scalar\")\n    name = parse_name(lexer)\n    directives = parse_directives(lexer, True)\n    if not directives:\n        raise unexpected(lexer)\n    return ScalarTypeExtensionNode(\n        name=name, directives=directives, loc=loc(lexer, start)\n    )"}, {"instruction": "def getSubtotal(self):\n        \"\"\" Compute Subtotal \"\"\"\n", "input": "", "output": "        if self.supplyorder_lineitems:\n            return sum(\n                [(Decimal(obj['Quantity']) * Decimal(obj['Price'])) for obj in self.supplyorder_lineitems])\n        return 0"}, {"instruction": "def getRunningBatchJobIDs(self):\n        \"\"\"\n        Retrieve running job IDs from local and batch scheduler.\n\n        Respects statePollingWait and will return cached results if not within\n        time period to talk with the scheduler.\n        \"\"\"\n", "input": "", "output": "        if (self._getRunningBatchJobIDsTimestamp and (\n                datetime.now() -\n                self._getRunningBatchJobIDsTimestamp).total_seconds() <\n                self.config.statePollingWait):\n            batchIds = self._getRunningBatchJobIDsCache\n        else:\n            batchIds = with_retries(self.worker.getRunningJobIDs)\n            self._getRunningBatchJobIDsCache = batchIds\n            self._getRunningBatchJobIDsTimestamp = datetime.now()\n        batchIds.update(self.getRunningLocalJobIDs())\n        return batchIds"}, {"instruction": "def ConcatWith(x, tensor, dim):\n    \"\"\"\n    A wrapper around ``tf.concat`` to cooperate with :class:`LinearWrap`.\n\n    Args:\n        x (tf.Tensor): input\n        tensor (list[tf.Tensor]): a tensor or list of tensors to concatenate with x.\n            x will be at the beginning\n        dim (int): the dimension along which to concatenate\n\n    Returns:\n        tf.Tensor: ``tf.concat([x] + tensor, dim)``\n    \"\"\"\n", "input": "", "output": "    if type(tensor) != list:\n        tensor = [tensor]\n    return tf.concat([x] + tensor, dim)"}, {"instruction": "def checksum(path, hashfunc='md5'):\n    \"\"\"\n    Return checksum given by path. Wildcards can be used in check sum. Function is strongly\n    dependent on checksumdir package by 'cakepietoast'.\n\n    :param path:\n    :param hashfunc:\n    :return:\n    \"\"\"\n", "input": "", "output": "    import checksumdir\n    hash_func = checksumdir.HASH_FUNCS.get(hashfunc)\n    if not hash_func:\n        raise NotImplementedError('{} not implemented.'.format(hashfunc))\n\n    if os.path.isdir(path):\n        return checksumdir.dirhash(path, hashfunc=hashfunc)\n\n    hashvalues = []\n    path_list = glob.glob(path)\n    logger.debug(\"path_list \" + str(path_list))\n    for path in path_list:\n        if os.path.isfile(path):\n            hashvalues.append(checksumdir._filehash(path, hashfunc=hash_func))\n    logger.debug(str(hashvalues))\n    hash = checksumdir._reduce_hash(hashvalues, hashfunc=hash_func)\n    return hash"}, {"instruction": "def decode_hparams(overrides=\"\"):\n  \"\"\"Hparams for decoding.\"\"\"\n", "input": "", "output": "  hparams = decoding.decode_hparams()\n  # Number of interpolations between [0.0, 1.0].\n  hparams.add_hparam(\"num_interp\", 11)\n  # Which level(s) to interpolate.\n  hparams.add_hparam(\"level_interp\", [0, 1, 2])\n  # \"all\" or \"ranked\", interpolate all channels or a \"ranked\".\n  hparams.add_hparam(\"channel_interp\", \"all\")\n  # interpolate channels ranked according to squared L2 norm.\n  hparams.add_hparam(\"rank_interp\", 1)\n  # Whether on not to save frames as summaries\n  hparams.add_hparam(\"save_frames\", True)\n  hparams.parse(overrides)\n  return hparams"}, {"instruction": "def _check_vpcs_version(self):\n        \"\"\"\n        Checks if the VPCS executable version is >= 0.8b or == 0.6.1.\n        \"\"\"\n", "input": "", "output": "        try:\n            output = yield from subprocess_check_output(self._vpcs_path(), \"-v\", cwd=self.working_dir)\n            match = re.search(\"Welcome to Virtual PC Simulator, version ([0-9a-z\\.]+)\", output)\n            if match:\n                version = match.group(1)\n                self._vpcs_version = parse_version(version)\n                if self._vpcs_version < parse_version(\"0.6.1\"):\n                    raise VPCSError(\"VPCS executable version must be >= 0.6.1 but not a 0.8\")\n            else:\n                raise VPCSError(\"Could not determine the VPCS version for {}\".format(self._vpcs_path()))\n        except (OSError, subprocess.SubprocessError) as e:\n            raise VPCSError(\"Error while looking for the VPCS version: {}\".format(e))"}, {"instruction": "def plotJacobi(self,*args,**kwargs):\n        \"\"\"\n        NAME:\n\n           plotJacobi\n\n        PURPOSE:\n\n           plot the Jacobi integral along the orbit\n\n        INPUT:\n\n           OmegaP= pattern speed\n\n           pot= - Potential instance or list of instances in which the orbit \n                 was integrated\n\n           d1= - plot Ez vs d1: e.g., 't', 'z', 'R', 'vR', 'vT', 'vz'      \n\n           normed= if set, plot E(t)/E(0) rather than E(t)\n\n           ro= (Object-wide default) physical scale for distances to use to convert (can be Quantity)\n\n           vo= (Object-wide default) physical scale for velocities to use to convert (can be Quantity)\n\n           use_physical= use to override Object-wide default for using a physical scale for output\n\n           +bovy_plot.bovy_plot inputs\n\n        OUTPUT:\n\n           figure to output device\n\n        HISTORY:\n\n           2011-10-10 - Written - Bovy (IAS)\n\n        \"\"\"\n", "input": "", "output": "        if not kwargs.get('pot',None) is None: kwargs['pot']= flatten_potential(kwargs.get('pot'))\n        return self._orb.plotJacobi(*args,**kwargs)"}, {"instruction": "def list_licenses(service_instance=None):\n    '''\n    Lists all licenses on a vCenter.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter/ESXi host.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.list_licenses\n    '''\n", "input": "", "output": "    log.trace('Retrieving all licenses')\n    licenses = salt.utils.vmware.get_licenses(service_instance)\n    ret_dict = [{'key': l.licenseKey,\n                 'name': l.name,\n                 'description': l.labels[0].value if l.labels else None,\n                 # VMware handles unlimited capacity as 0\n                 'capacity': l.total if l.total > 0 else sys.maxsize,\n                 'used': l.used if l.used else 0}\n                 for l in licenses]\n    return ret_dict"}, {"instruction": "def _init_prtfmt(self, key=\"fmta\"):\n        \"\"\"Return print format for Grouper, which includes hdr1usr01 and num_usrgos.\"\"\"\n", "input": "", "output": "        prtfmt = self.gosubdag.prt_attr[key]\n        return prtfmt.replace(\"{NS}\", \"{NS} {hdr1usr01:2} {num_usrgos:>4} uGOs\")"}, {"instruction": "def finalize(self, **kwargs):\n        \"\"\"\n        Finalize executes any subclass-specific axes finalization steps.\n        The user calls poof and poof calls finalize.\n\n        Parameters\n        ----------\n        kwargs: generic keyword arguments.\n\n        \"\"\"\n", "input": "", "output": "        # Set the title and add the legend\n        self.set_title('ROC Curves for {}'.format(self.name))\n        self.ax.legend(loc='lower right', frameon=True)\n\n        # Set the limits for the ROC/AUC (always between 0 and 1)\n        self.ax.set_xlim([0.0, 1.0])\n        self.ax.set_ylim([0.0, 1.0])\n\n        # Set x and y axis labels\n        self.ax.set_ylabel('True Postive Rate')\n        self.ax.set_xlabel('False Positive Rate')"}, {"instruction": "def sha_hash(self) -> str:\n        \"\"\"\n        Return uppercase hex sha256 hash from signed raw document\n\n        :return:\n        \"\"\"\n", "input": "", "output": "        return hashlib.sha256(self.signed_raw().encode(\"ascii\")).hexdigest().upper()"}, {"instruction": "def image_feature_engineering(features, feature_tensors_dict):\n  \"\"\"Add a hidden layer on image features.\n\n  Args:\n    features: features dict\n    feature_tensors_dict: dict of feature-name: tensor\n  \"\"\"\n", "input": "", "output": "  engineered_features = {}\n  for name, feature_tensor in six.iteritems(feature_tensors_dict):\n    if name in features and features[name]['transform'] == IMAGE_TRANSFORM:\n      with tf.name_scope(name, 'Wx_plus_b'):\n        hidden = tf.contrib.layers.fully_connected(\n            feature_tensor,\n            IMAGE_HIDDEN_TENSOR_SIZE)\n        engineered_features[name] = hidden\n    else:\n      engineered_features[name] = feature_tensor\n  return engineered_features"}, {"instruction": "def _to_docstring(doc):\n    \"\"\"\n    format from Markdown to docstring\n    \"\"\"\n", "input": "", "output": "\n    def format_fn(line, status):\n        "}, {"instruction": "def _sanitize_to_unicode(obj):\n        \"\"\"Convert all strings records of the object to unicode\n\n        :param obj: object to sanitize to unicode.\n        :type obj: object\n\n        :return: Unicode string representation of the given object.\n        :rtype: str\n        \"\"\"\n", "input": "", "output": "        if isinstance(obj, dict):\n            return dict((BaseGELFHandler._sanitize_to_unicode(k), BaseGELFHandler._sanitize_to_unicode(v)) for k, v in obj.items())\n        if isinstance(obj, (list, tuple)):\n            return obj.__class__([BaseGELFHandler._sanitize_to_unicode(i) for i in obj])\n        if isinstance(obj, data):\n            obj = obj.decode('utf-8', errors='replace')\n        return obj"}, {"instruction": "def update(self, *args, **kwargs):\n        '''Preserves order if given an assoc list.\n        '''\n", "input": "", "output": "        arg = dict_arg(*args, **kwargs)\n        if isinstance(arg, list):\n          for key, val in arg:\n              self[key] = val\n        else:\n            super(AssocDict, self).update(arg)"}, {"instruction": "def get_ip_info(ip: str, exceptions: bool=False, timeout: int=10) -> tuple:\n    \"\"\"\n    Returns (ip, country_code, host) tuple of the IP address.\n    :param ip: IP address\n    :param exceptions: Raise Exception or not\n    :param timeout: Timeout in seconds. Note that timeout only affects geo IP part, not getting host name.\n    :return: (ip, country_code, host)\n    \"\"\"\n", "input": "", "output": "    import traceback\n    import socket\n    if not ip:  # localhost\n        return None, '', ''\n    host = ''\n    country_code = get_geo_ip(ip, exceptions=exceptions, timeout=timeout).get('country_code', '')\n    try:\n        res = socket.gethostbyaddr(ip)\n        host = res[0][:255] if ip else ''\n    except Exception as e:\n        msg = 'socket.gethostbyaddr({}) failed: {}'.format(ip, traceback.format_exc())\n        logger.error(msg)\n        if exceptions:\n            raise e\n    return ip, country_code, host"}, {"instruction": "def _extract_auth_config(self):\n        \"\"\"Obtains the authentication configurations.\"\"\"\n", "input": "", "output": "\n        service = self._service\n        if not service.authentication:\n            return {}\n\n        auth_infos = {}\n        for auth_rule in service.authentication.rules:\n            selector = auth_rule.selector\n            provider_ids_to_audiences = {}\n            for requirement in auth_rule.requirements:\n                provider_id = requirement.providerId\n                if provider_id and requirement.audiences:\n                    audiences = requirement.audiences.split(u\",\")\n                    provider_ids_to_audiences[provider_id] = audiences\n            auth_infos[selector] = AuthInfo(provider_ids_to_audiences)\n        return auth_infos"}, {"instruction": "def byteify(input_object):\n    \"\"\"Recursive function to transform an object to byte.\n\n    :param input_object: A python object such as unicode, dictionary or list.\n    :type: unicode, list, dict\n\n    :return: The object with byte only.\n    \"\"\"\n", "input": "", "output": "    if isinstance(input_object, dict):\n        return {byteify(key): byteify(value)\n                for key, value in list(input_object.items())}\n    elif isinstance(input_object, list):\n        return [byteify(element) for element in input_object]\n    elif isinstance(input_object, str):\n        return input_object.encode('utf-8')\n    else:\n        return input_object"}, {"instruction": "def timestamp_from_datetime(date_time):\n    \"\"\"Returns POSIX timestamp as float\"\"\"\n", "input": "", "output": "    if date_time.tzinfo is None:\n      return time.mktime((date_time.year, date_time.month, date_time.day, date_time.hour,\n                          date_time.minute, date_time.second,\n                          -1, -1, -1)) + date_time.microsecond / 1e6\n    return (date_time - _EPOCH).total_seconds()"}, {"instruction": "def conf_merger(user_dict, variable):\n    \"\"\"\n    Merge global configuration with user's personal configuration.\n\n    Global configuration has always higher priority.\n    \"\"\"\n", "input": "", "output": "    if variable not in globals().keys():\n        raise NameError(\"Unknown variable '%s'.\" % variable)\n\n    if variable not in user_dict:\n        return globals()[variable]\n\n    return globals()[variable] and user_dict[variable]"}, {"instruction": "def experiments_fmri_upsert_property(self, experiment_id, properties):\n        \"\"\"Upsert property of fMRI data object associated with given experiment.\n\n        Raises ValueError if given property dictionary results in an illegal\n        operation.\n\n        Parameters\n        ----------\n        experiment_id : string\n            Unique experiment identifier\n        properties : Dictionary()\n            Dictionary of property names and their new values.\n\n        Returns\n        -------\n        FMRIDataHandle\n            Handle for updated object of None if object doesn't exist\n        \"\"\"\n", "input": "", "output": "        # Get experiment fMRI to ensure that it exists. Needed to get fMRI\n        # data object identifier for given experiment identifier\n        fmri = self.experiments_fmri_get(experiment_id)\n        if fmri is None:\n            return None\n        # Update properties for fMRI object using the object identifier\n        return self.funcdata.upsert_object_property(fmri.identifier, properties)"}, {"instruction": "def setBendLength(self, x):\n        \"\"\" set bend length\n\n        :param x: new bend length to be assigned, [m]\n        :return: None\n        \"\"\"\n", "input": "", "output": "        if x != self.bend_length:\n            self.bend_length = x\n            self.refresh = True"}, {"instruction": "def valid_api_plugin(self, plugin):\n        \"\"\"\n        Validate an API plugin, ensuring it is an API plugin and has the\n        necessary fields present.\n\n        `plugin` is a subclass of scruffy's Plugin class.\n        \"\"\"\n", "input": "", "output": "        if (issubclass(plugin, APIPlugin)       and\n            hasattr(plugin, 'plugin_type')      and plugin.plugin_type == 'api' and\n            hasattr(plugin, 'request')          and plugin.request != None and\n            hasattr(plugin, 'request_class')    and plugin.request_class != None and\n            hasattr(plugin, 'response_class')   and plugin.response_class != None):\n            return True\n        return False"}, {"instruction": "def mysql_aes_encrypt(val, key):\n    \"\"\"Mysql AES encrypt value with secret key.\n\n    :param val: Plain text value.\n    :param key: The AES key.\n    :returns: The encrypted AES value.\n    \"\"\"\n", "input": "", "output": "    assert isinstance(val, binary_type) or isinstance(val, text_type)\n    assert isinstance(key, binary_type) or isinstance(key, text_type)\n    k = _mysql_aes_key(_to_binary(key))\n    v = _mysql_aes_pad(_to_binary(val))\n    e = _mysql_aes_engine(k).encryptor()\n\n    return e.update(v) + e.finalize()"}, {"instruction": "def _keygen(self, event, ts=None):\n        \"\"\"Generate redis key for event at timestamp.\n\n        :param event: event name\n        :param ts: timestamp, default to current timestamp if left as None\n        \"\"\"\n", "input": "", "output": "        return \"%s:%s\" % (self.namespace(ts or time.time()), event)"}, {"instruction": "def CountClientPlatformsByLabel(self, day_buckets):\n    \"\"\"Computes client-activity stats for all client platforms in the DB.\"\"\"\n", "input": "", "output": "\n    def ExtractPlatform(client_info):\n      return client_info.last_snapshot.knowledge_base.os\n\n    return self._CountClientStatisticByLabel(day_buckets, ExtractPlatform)"}, {"instruction": "def schema(self):\n        \"\"\"List[google.cloud.bigquery.schema.SchemaField]: Schema of the\n        destination table.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.load.schema\n        \"\"\"\n", "input": "", "output": "        schema = _helpers._get_sub_prop(self._properties, [\"load\", \"schema\", \"fields\"])\n        if schema is None:\n            return\n        return [SchemaField.from_api_repr(field) for field in schema]"}, {"instruction": "def _to_dict(self):\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n", "input": "", "output": "        _dict = {}\n        if hasattr(self, 'aggregations') and self.aggregations is not None:\n            _dict['aggregations'] = [x._to_dict() for x in self.aggregations]\n        return _dict"}, {"instruction": "def add_files(self, *filenames, **kw):\n        \"\"\"\n        Include added and/or removed files in the working tree in the next commit.\n\n        :param filenames: The filenames of the files to include in the next\n                          commit (zero or more strings). If no arguments are\n                          given all untracked files are added.\n        :param kw: Keyword arguments are ignored (instead of raising\n                   :exc:`~exceptions.TypeError`) to enable backwards\n                   compatibility with older versions of `vcs-repo-mgr`\n                   where the keyword argument `all` was used.\n        \"\"\"\n", "input": "", "output": "        # Make sure the local repository exists and supports a working tree.\n        self.create()\n        self.ensure_working_tree()\n        # Include added and/or removed files in the next commit.\n        logger.info(\"Staging changes to be committed in %s ..\", format_path(self.local))\n        self.context.execute(*self.get_add_files_command(*filenames))"}, {"instruction": "def addMonitor(self, monitorFriendlyName, monitorURL):\n        \"\"\"\n        Returns True if Monitor was added, otherwise False.\n        \"\"\"\n", "input": "", "output": "        url = self.baseUrl\n        url += \"newMonitor?apiKey=%s\" % self.apiKey\n        url += \"&monitorFriendlyName=%s\" % monitorFriendlyName\n        url += \"&monitorURL=%s&monitorType=1\" % monitorURL\n        url += \"&monitorAlertContacts=%s\" % monitorAlertContacts\n        url += \"&noJsonCallback=1&format=json\"\n        success, response = self.requestApi(url)\n        if success:\n            return True\n        else:\n            return False"}, {"instruction": "def add(self, tool):\n        \"\"\"\n        Adds a Tool to the list, logs the reference and TODO\n        \"\"\"\n", "input": "", "output": "        self.lstTools.append(tool)\n        self.lg.record_process(self._get_tool_str(tool))"}, {"instruction": "def parse_event_out(self, node):\n        \"\"\"\n        Parses <EventOut>\n\n        @param node: Node containing the <EventOut> element\n        @type node: xml.etree.Element\n        \"\"\"\n", "input": "", "output": "\n        try:\n            port = node.lattrib['port']\n        except:\n            self.raise_error('<EventOut> must be specify a port.')\n\n        action = EventOut(port)\n\n        self.current_event_handler.add_action(action)"}, {"instruction": "def from_ros_pose_msg(pose_msg,\n                          from_frame='unassigned',\n                          to_frame='world'):\n        \"\"\"Creates a RigidTransform from a ROS pose msg. \n        \n        Parameters\n        ----------\n        pose_msg : :obj:`geometry_msgs.msg.Pose`\n            ROS pose message\n        \"\"\"\n", "input": "", "output": "        quaternion = np.array([pose_msg.orientation.w,\n                               pose_msg.orientation.x,\n                               pose_msg.orientation.y,\n                               pose_msg.orientation.z])\n        position = np.array([pose_msg.position.x,\n                             pose_msg.position.y,\n                             pose_msg.position.z])\n        pose = RigidTransform(rotation=quaternion,\n                              translation=position,\n                              from_frame=from_frame,\n                              to_frame=to_frame)\n        return pose"}, {"instruction": "def _iter_names(self):\n        \"\"\"\n        Generate a key/value pair for each name in this table. The key is a\n        (platform_id, name_id) 2-tuple and the value is the unicode text\n        corresponding to that key.\n        \"\"\"\n", "input": "", "output": "        table_format, count, strings_offset = self._table_header\n        table_bytes = self._table_bytes\n\n        for idx in range(count):\n            platform_id, name_id, name = self._read_name(\n                table_bytes, idx, strings_offset\n            )\n            if name is None:\n                continue\n            yield ((platform_id, name_id), name)"}, {"instruction": "def soup(self):\n        \"\"\"Download the page and create the soup\"\"\"\n", "input": "", "output": "        try:\n            return self._soup\n        except AttributeError:\n            url = client.get_url(\"/presentations/%s\" % self.index)\n            content = self.client.fetch_no_cache(url).decode('utf-8')\n            self._soup = bs4.BeautifulSoup(content, \"html.parser\")\n\n            return self._soup"}, {"instruction": "def invalid_multipoly_handler(gdf, relation, way_ids):\n    \"\"\"\n    Handles invalid multipolygon geometries when there exists e.g. a feature without \n    geometry (geometry == NaN)\n\n    Parameters\n    ----------\n\n    gdf : gpd.GeoDataFrame\n        GeoDataFrame with Polygon geometries that should be converted into a MultiPolygon object.\n    relation : dict\n        OSM 'relation' dictionary\n    way_ids : list\n        A list of 'way' ids that should be converted into a MultiPolygon object. \n    \"\"\"\n", "input": "", "output": "\n    try:\n        gdf_clean = gdf.dropna(subset=['geometry'])\n        multipoly = MultiPolygon(list(gdf_clean['geometry']))\n        return multipoly\n\n    except Exception:\n        log(\"Invalid geometry at relation id %s.\\nWay-ids of the invalid MultiPolygon:\" % (\n        relation['id'], str(way_ids)))\n        return None"}, {"instruction": "def by_group_and_perm(cls, group_id, perm_name, db_session=None):\n        \"\"\"\n        return by by_user_and_perm and permission name\n\n        :param group_id:\n        :param perm_name:\n        :param db_session:\n        :return:\n        \"\"\"\n", "input": "", "output": "        db_session = get_db_session(db_session)\n        query = db_session.query(cls.model).filter(cls.model.group_id == group_id)\n        query = query.filter(cls.model.perm_name == perm_name)\n        return query.first()"}, {"instruction": "def parse(cls, conn):\n        \"\"\"Read a request from the HTTP connection ``conn``.\n\n        May raise ``BadHttpRequestError``.\n        \"\"\"\n", "input": "", "output": "\n        req = cls(conn)\n        req_line = yield from conn.reader.readline()\n        logger('HttpRequest').debug('req_line = %r', req_line)\n        req._parse_req_line(req_line)\n\n        header_line = yield from conn.reader.readline()\n        while len(header_line) > 0 and header_line != b'\\r\\n':\n            try:\n                req._parse_header(header_line)\n            except BadHttpHeaderError as e:\n                # Tolerating 'minor' mistakes\n                logger('HttpRequest').debug(traceback.format_exc())\n            header_line = yield from conn.reader.readline()\n        return req"}, {"instruction": "def _push_condition(predicate):\n    \"\"\"As we enter new conditions, this pushes them on the predicate stack.\"\"\"\n", "input": "", "output": "    global _depth\n    _check_under_condition()\n    _depth += 1\n    if predicate is not otherwise and len(predicate) > 1:\n        raise PyrtlError('all predicates for conditional assignments must wirevectors of len 1')\n    _conditions_list_stack[-1].append(predicate)\n    _conditions_list_stack.append([])"}, {"instruction": "def split_locale(loc):\n    '''\n    Split a locale specifier.  The general format is\n\n    language[_territory][.codeset][@modifier] [charmap]\n\n    For example:\n\n    ca_ES.UTF-8@valencia UTF-8\n    '''\n", "input": "", "output": "    def split(st, char):\n        "}, {"instruction": "def is_active(ext, metadata):\n    \"\"\"Is the cell active for the given file extension?\"\"\"\n", "input": "", "output": "    if metadata.get('run_control', {}).get('frozen') is True:\n        return False\n    if 'active' not in metadata:\n        return True\n    return ext.replace('.', '') in re.split('\\\\.|,', metadata['active'])"}, {"instruction": "def get_rows( self, key ):\n        \"\"\"Get the set of rows for the type-key\"\"\"\n", "input": "", "output": "        if key not in self.roots:\n            self.get_root( key )\n        if key == 'location':\n            return self.location_rows \n        else:\n            return self.rows"}, {"instruction": "def _find_tpls(self, name):\n        \"\"\"\n        Return plain, html templates for NAME\n\n        Arguments:\n        - `name`: str\n\n        Return: tuple\n        Exceptions: None\n        \"\"\"\n", "input": "", "output": "        return self._find_tpl(name, extension='.txt'), self._find_tpl(name, extension='.html')"}, {"instruction": "Produce a comma delimited text row from a JSONArray. Values containing the comma character will be quoted. Troublesome characters may be removed.\n\n@param ja\nA JSONArray of strings.\n@return A string ending in NEWLINE.", "input": "Java", "output": "public static String rowToString(JSONArray ja) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < ja.length(); i += 1) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      Object o = ja.opt(i);\n      if (o != null) {\n        String s = o.toString();\n        if (s.length() > 0 && (s.indexOf(',') >= 0 || s.indexOf('\\n') >= 0 || s.indexOf('\\r') >= 0 || s.indexOf(0) >= 0 || s.charAt(0) == '\"')) {\n          sb.append('\"');\n          int length = s.length();\n          for (int j = 0; j < length; j += 1) {\n            char c = s.charAt(j);\n            if (c >= ' ' && c != '\"') {\n              sb.append(c);\n            }\n          }\n          sb.append('\"');\n        } else {\n          sb.append(s);\n        }\n      }\n    }\n    sb.append('\\n');\n    return sb.toString();\n  }"}, {"instruction": "\u7ed9\u5b9a\u8303\u56f4\u5185\u7684\u6574\u6570\u5217\u8868\n\n@param start \u5f00\u59cb\uff08\u5305\u542b\uff09\n@param stop \u7ed3\u675f\uff08\u5305\u542b\uff09\n@param step \u6b65\u8fdb\n@return \u6574\u6570\u5217\u8868", "input": "Java", "output": "public static int[] range(int start, int stop, int step) {\r\n\t\tif (start < stop) {\r\n\t\t\tstep = Math.abs(step);\r\n\t\t} else if (start > stop) {\r\n\t\t\tstep = -Math.abs(step);\r\n\t\t} else {// start == end\r\n\t\t\treturn new int[] { start };\r\n\t\t}\r\n\r\n\t\tint size = Math.abs((stop - start) / step) + 1;\r\n\t\tint[] values = new int[size];\r\n\t\tint index = 0;\r\n\t\tfor (int i = start; (step > 0) ? i <= stop : i >= stop; i += step) {\r\n\t\t\tvalues[index] = i;\r\n\t\t\tindex++;\r\n\t\t}\r\n\t\treturn values;\r\n\t}"}, {"instruction": "returns the version of the backed up plugin,\nor null if there's no back up.", "input": "Java", "output": "@Exported\n    public String getBackupVersion() {\n        File backup = getBackupFile();\n        if (backup.exists()) {\n            try {\n                try (JarFile backupPlugin = new JarFile(backup)) {\n                    return backupPlugin.getManifest().getMainAttributes().getValue(\"Plugin-Version\");\n                }\n            } catch (IOException e) {\n                LOGGER.log(WARNING, \"Failed to get backup version from \" + backup, e);\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }"}, {"instruction": "Handles expected Attribute-related exceptions. Since the attribute index is a separate segment from the main one,\nit is highly likely that it may get temporarily out of sync with the main one, thus causing spurious StreamSegmentSealedExceptions\nor StreamSegmentNotExistsExceptions. If we get either of those, and they are consistent with our current state, the\nwe can safely ignore them; otherwise we should be rethrowing them.", "input": "Java", "output": "private CompletableFuture<Void> handleAttributeException(CompletableFuture<Void> future) {\n        return Futures.exceptionallyExpecting(\n                future,\n                ex -> (ex instanceof StreamSegmentSealedException && this.metadata.isSealedInStorage())\n                        || ((ex instanceof StreamSegmentNotExistsException || ex instanceof StreamSegmentMergedException)\n                        && (this.metadata.isMerged() || this.metadata.isDeleted())),\n                null);\n    }"}, {"instruction": "Splits the cookie token into attributes pairs.\n@param str input token.\n@return a map with the attribute pairs of the token if the input is valid.\nElse, returns null.", "input": "Java", "output": "private static Map<String, String> splitCookieToken(String tokenStr) {\n    Map<String, String> map = new HashMap<String, String>();\n    StringTokenizer st = new StringTokenizer(tokenStr, COOKIE_ATTR_SEPARATOR);\n\n    while (st.hasMoreTokens()) {\n      String part = st.nextToken();\n      int separator = part.indexOf(COOKIE_KEY_VALUE_SEPARATOR);\n      if (separator == -1) {\n        LOG.error(\"Invalid token string \" + tokenStr);\n        return null;\n      }\n      String key = part.substring(0, separator);\n      String value = part.substring(separator + 1);\n      map.put(key, value);\n    }\n    return map;\n  }"}, {"instruction": "Reads the contents of the user-specified {@code filePath} based on the given {@link FileInputFormat}.\nDepending on the provided {@link FileProcessingMode}, the source may periodically monitor (every {@code interval} ms)\nthe path for new data ({@link FileProcessingMode#PROCESS_CONTINUOUSLY}), or process once the data currently in the\npath and exit ({@link FileProcessingMode#PROCESS_ONCE}). In addition, if the path contains files not to be processed,\nthe user can specify a custom {@link FilePathFilter}. As a default implementation you can use\n{@link FilePathFilter#createDefaultFilter()}.\n\n<p><b>NOTES ON CHECKPOINTING: </b> If the {@code watchType} is set to {@link FileProcessingMode#PROCESS_ONCE},\nthe source monitors the path <b>once</b>, creates the {@link org.apache.flink.core.fs.FileInputSplit FileInputSplits}\nto be processed, forwards them to the downstream {@link ContinuousFileReaderOperator readers} to read the actual data,\nand exits, without waiting for the readers to finish reading. This implies that no more checkpoint barriers\nare going to be forwarded after the source exits, thus having no checkpoints after that point.\n\n@param inputFormat\nThe input format used to create the data stream\n@param filePath\nThe path of the file, as a URI (e.g., \"file:///some/local/file\" or \"hdfs://host:port/file/path\")\n@param watchType\nThe mode in which the source should operate, i.e. monitor path and react to new data, or process once and exit\n@param typeInformation\nInformation on the type of the elements in the output stream\n@param interval\nIn the case of periodic path monitoring, this specifies the interval (in millis) between consecutive path scans\n@param <OUT>\nThe type of the returned data stream\n@return The data stream that represents the data read from the given file", "input": "Java", "output": "@PublicEvolving\n\tpublic <OUT> DataStreamSource<OUT> readFile(FileInputFormat<OUT> inputFormat,\n\t\t\t\t\t\t\t\t\t\t\t\tString filePath,\n\t\t\t\t\t\t\t\t\t\t\t\tFileProcessingMode watchType,\n\t\t\t\t\t\t\t\t\t\t\t\tlong interval,\n\t\t\t\t\t\t\t\t\t\t\t\tTypeInformation<OUT> typeInformation) {\n\n\t\tPreconditions.checkNotNull(inputFormat, \"InputFormat must not be null.\");\n\t\tPreconditions.checkArgument(!StringUtils.isNullOrWhitespaceOnly(filePath), \"The file path must not be null or blank.\");\n\n\t\tinputFormat.setFilePath(filePath);\n\t\treturn createFileInput(inputFormat, typeInformation, \"Custom File Source\", watchType, interval);\n\t}"}, {"instruction": "Formats a link between two nodes\n\n@param from  from node\n@param to  to node\n@param label  label for this link\n@param tailport  tail port to use when formatting (dot-specific, \"sw\" or \"se)\n@return formatted link, not null", "input": "Java", "output": "private String formatPointer(PatriciaTrie.PatriciaNode<V> from, PatriciaTrie.PatriciaNode<V> to, String label,\n                    String tailport) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(getNodeId(from));\n        builder.append(\" -> \");\n        builder.append(getNodeId(to));\n        builder.append(\" [ \");\n        builder.append(\"label=\\\"\");\n        builder.append(label);\n        builder.append(\" \\\"\");\n        builder.append(\"tailport=\\\"\");\n        builder.append(tailport);\n        builder.append(\" \\\"\");\n        builder.append(\"fontcolor=\\\"#666666\\\" \");\n        builder.append(\" ]\");\n        builder.append(\"\\n\");\n        return builder.toString();\n    }"}, {"instruction": "Handle SLO Redirect profile request.\n\n@param response the response\n@param request  the request\n@throws Exception the exception", "input": "Java", "output": "@GetMapping(path = SamlIdPConstants.ENDPOINT_SAML2_SLO_PROFILE_REDIRECT)\n    protected void handleSaml2ProfileSLOPostRequest(final HttpServletResponse response,\n                                                    final HttpServletRequest request) throws Exception {\n        val decoder = getSamlProfileHandlerConfigurationContext().getSamlMessageDecoders().getInstance(HttpMethod.GET);\n        handleSloProfileRequest(response, request, decoder);\n    }"}, {"instruction": "This should be overriden for any custom columns", "input": "Java", "output": "@Override\n\tpublic Object getValueAt(int row, int col) {\n\t\t// Get the href and the required field\n\t\tHistoryReference href = hrefList.get(row);\n\t\ttry {\n\t\t\tswitch (this.columns[col]) {\n\t\t\tcase HREF_ID:\t\treturn href.getHistoryId();\n\t\t\tcase TYPE_FLAG:\t\treturn this.getHrefTypeIcon(href);\n\t\t\tcase METHOD:\t\treturn href.getMethod();\n\t\t\tcase URL:\t\t\treturn href.getURI().toString();\n\t\t\tcase CODE:\t\t\treturn href.getStatusCode();\n\t\t\tcase REASON:\t\treturn href.getReason();\n\t\t\tcase RTT:\t\t\treturn href.getRtt();\n\t\t\tcase SIZE:\t\t\treturn href.getResponseBodyLength();\n\t\t\tcase SESSION_ID:\treturn href.getSessionId();\n\t\t\tcase ALERT_FLAG:\treturn this.getHrefAlertIcon(href);\n\t\t\tcase TAGS:\t\t\treturn listToCsv(href.getTags());\n\t\t\tdefault:\t\t\treturn null;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(e.getMessage(), e);\n\t\t\treturn null;\n\t\t}\n\t}"}, {"instruction": "Evaluate the network (for classification) on the provided data set, with top N accuracy in addition to standard accuracy.\nFor 'standard' accuracy evaluation only, use topN = 1\n\n@param iterator   Iterator (data) to evaluate on\n@param labelsList List of labels. May be null.\n@param topN       N value for top N accuracy evaluation\n@return Evaluation object, summarizing the results of the evaluation on the provided DataSetIterator", "input": "Java", "output": "public <T extends Evaluation> T evaluate(DataSetIterator iterator, List<String> labelsList, int topN) {\n        if (labelsList == null)\n            labelsList = iterator.getLabels();\n\n        Layer outputLayer = getOutputLayer(0);\n        if(getConfiguration().isValidateOutputLayerConfig()){\n            OutputLayerUtil.validateOutputLayerForClassifierEvaluation(outputLayer.conf().getLayer(), Evaluation.class);\n        }\n\n        return (T)doEvaluation(iterator, new org.deeplearning4j.eval.Evaluation(labelsList, topN))[0];\n    }"}, {"instruction": "Instrumentation for RxJava 1 using function with {@link io.micronaut.tracing.instrument.util.TracingRunnable}..\n\n@param instrumenter A function that instruments an existing Runnable with {@link io.micronaut.tracing.instrument.util.TracingRunnable}.", "input": "Java", "output": "@PostConstruct\n    void init(TracingRunnableInstrumenter instrumenter) {\n        if (instrumenter != null) {\n            Func1<Action0, Action0> existing = RxJavaHooks.getOnScheduleAction();\n            if (existing != null && !(existing instanceof InstrumentScheduleAction)) {\n                RxJavaHooks.setOnScheduleAction(action0 ->\n                        new InstrumentScheduleAction(instrumenter).call(existing.call(action0))\n                );\n            } else {\n                RxJavaHooks.setOnScheduleAction(new InstrumentScheduleAction(instrumenter));\n            }\n        }\n    }"}, {"instruction": "partition a[left] to a[right], assumes left < right", "input": "Java", "output": "private int partition(double[] a, int[] indexes, int left, int right) {\n        int i = left - 1;\n        int j = right;\n        while (true) {\n            while (a[indexes[++i]] < a[indexes[right]]); // find item on left to swap, a[right] acts as sentinel\n            while (a[indexes[right]] < a[indexes[--j]]) { // find item on right to swap\n                if (j == left)\n                    break; // don't go out-of-bounds\n            }\n            if (i >= j)\n                break; // check if pointers cross\n            swap(a, indexes, i, j); // swap two elements into place\n        }\n        swap(a, indexes, i, right); // swap with partition element\n        return i;\n    }"}, {"instruction": "Gets a single {@link S3ObjectSummary} from s3. Since this method might return a wrong object if there are multiple\nobjects that match the given key, this method should be used only when it's guaranteed that the given key is unique\nin the given bucket.\n\n@param s3Client s3 client\n@param bucket   s3 bucket\n@param key      unique key for the object to be retrieved", "input": "Java", "output": "public static S3ObjectSummary getSingleObjectSummary(ServerSideEncryptingAmazonS3 s3Client, String bucket, String key)\n  {\n    final ListObjectsV2Request request = new ListObjectsV2Request()\n        .withBucketName(bucket)\n        .withPrefix(key)\n        .withMaxKeys(1);\n    final ListObjectsV2Result result = s3Client.listObjectsV2(request);\n\n    // Using getObjectSummaries().size() instead of getKeyCount as, in some cases\n    // it is observed that even though the getObjectSummaries returns some data\n    // keyCount is still zero.\n    if (result.getObjectSummaries().size() == 0) {\n      throw new ISE(\"Cannot find object for bucket[%s] and key[%s]\", bucket, key);\n    }\n    final S3ObjectSummary objectSummary = result.getObjectSummaries().get(0);\n    if (!objectSummary.getBucketName().equals(bucket) || !objectSummary.getKey().equals(key)) {\n      throw new ISE(\"Wrong object[%s] for bucket[%s] and key[%s]\", objectSummary, bucket, key);\n    }\n\n    return objectSummary;\n  }"}, {"instruction": "Find by principal name.\n@param principal name to search for\n@return records for given principal", "input": "Java", "output": "@View(name = \"by_principal\",\n        map = \"function(doc) { if (doc.principal && doc.deviceFingerprint && doc.recordDate) { emit(doc.principal, doc) } }\")\n    public List<CouchDbMultifactorAuthenticationTrustRecord> findByPrincipal(final String principal) {\n        val view = createQuery(\"by_principal\").key(principal);\n        return db.queryView(view, CouchDbMultifactorAuthenticationTrustRecord.class);\n    }"}, {"instruction": "This method is handling the IllegalAccess exceptions of Field.get()", "input": "Java", "output": "public final Object accessField(Field field, Object object) {\n\t\ttry {\n\t\t\tobject = field.get(object);\n\t\t} catch (NullPointerException npex) {\n\t\t\tthrow new NullKeyFieldException(\"Unable to access field \"+field+\" on object \"+object);\n\t\t} catch (IllegalAccessException iaex) {\n\t\t\tthrow new RuntimeException(\"This should not happen since we call setAccesssible(true) in PojoTypeInfo.\"\n\t\t\t+ \" fields: \" + field + \" obj: \" + object);\n\t\t}\n\t\treturn object;\n\t}"}, {"instruction": "Checks to see if the candidate displayName collides with any\nexisting display names or project names\n@param displayName The display name to test\n@param jobName The name of the job the user is configuring", "input": "Java", "output": "public FormValidation doCheckDisplayName(@QueryParameter String displayName,\n            @QueryParameter String jobName) {\n        displayName = displayName.trim();\n\n        if(LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.log(Level.FINE, \"Current job name is \" + jobName);\n        }\n\n        if(!isNameUnique(displayName, jobName)) {\n            return FormValidation.warning(Messages.Jenkins_CheckDisplayName_NameNotUniqueWarning(displayName));\n        }\n        else if(!isDisplayNameUnique(displayName, jobName)){\n            return FormValidation.warning(Messages.Jenkins_CheckDisplayName_DisplayNameNotUniqueWarning(displayName));\n        }\n        else {\n            return FormValidation.ok();\n        }\n    }"}, {"instruction": "An expectation for checking WebElement with given locator has specific text\n\n@param locator used to find the element\n@param value   used as expected text\n@return Boolean true when element has text value equal to @value", "input": "Java", "output": "public static ExpectedCondition<Boolean> textToBe(final By locator, final String value) {\n    return new ExpectedCondition<Boolean>() {\n      private String currentValue = null;\n\n      @Override\n      public Boolean apply(WebDriver driver) {\n        try {\n          currentValue = driver.findElement(locator).getText();\n          return currentValue.equals(value);\n        } catch (Exception e) {\n          return false;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.format(\"element found by %s to have text \\\"%s\\\". Current text: \\\"%s\\\"\",\n                             locator, value, currentValue);\n      }\n    };\n  }"}, {"instruction": "Optimize a Filtration for querying, possibly pulling out intervals and simplifying the dimFilter in the process.\n\n@return equivalent Filtration", "input": "Java", "output": "public Filtration optimize(final DruidQuerySignature querySignature)\n  {\n    return transform(\n        this,\n        ImmutableList.of(\n            CombineAndSimplifyBounds.instance(),\n            MoveTimeFiltersToIntervals.instance(),\n            ConvertBoundsToSelectors.create(querySignature),\n            ConvertSelectorsToIns.create(querySignature.getRowSignature()),\n            MoveMarkerFiltersToIntervals.instance(),\n            ValidateNoMarkerFiltersRemain.instance()\n        )\n    );\n  }"}, {"instruction": "Get Metadata.\n\n@param request  the request\n@param response the response\n@throws Exception the exception", "input": "Java", "output": "@GetMapping(path = WSFederationConstants.ENDPOINT_FEDERATION_METADATA)\n    public void doGet(final HttpServletRequest request, final HttpServletResponse response) throws Exception {\n        try {\n            response.setContentType(MediaType.TEXT_HTML_VALUE);\n            val out = response.getWriter();\n            val metadata = WSFederationMetadataWriter.produceMetadataDocument(casProperties);\n            out.write(DOM2Writer.nodeToString(metadata));\n        } catch (final Exception ex) {\n            LOGGER.error(\"Failed to get metadata document\", ex);\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        }\n    }"}, {"instruction": "Do the work.", "input": "Java", "output": "public void doIt() {\n    if (nodeidx == -1) {\n      GetLogsTask t = new GetLogsTask();\n      t.doIt();\n      bytes = t._bytes;\n    }\n    else {\n      H2ONode node = H2O.CLOUD._memary[nodeidx];\n      GetLogsTask t = new GetLogsTask();\n      Log.trace(\"GetLogsTask starting to node \" + nodeidx + \"...\");\n      // Synchronous RPC call to get ticks from remote (possibly this) node.\n      new RPC<>(node, t).call().get();\n      Log.trace(\"GetLogsTask completed to node \" + nodeidx);\n      bytes = t._bytes;\n    }\n  }"}, {"instruction": "Create create ticket granting ticket action.\n\n@param flow the flow", "input": "Java", "output": "protected void createCreateTicketGrantingTicketAction(final Flow flow) {\n        val action = createActionState(flow, CasWebflowConstants.STATE_ID_CREATE_TICKET_GRANTING_TICKET, CasWebflowConstants.ACTION_ID_CREATE_TICKET_GRANTING_TICKET);\n        createTransitionForState(action, CasWebflowConstants.TRANSITION_ID_SUCCESS_WITH_WARNINGS, CasWebflowConstants.STATE_ID_SHOW_AUTHN_WARNING_MSGS);\n        createTransitionForState(action, CasWebflowConstants.TRANSITION_ID_SUCCESS, CasWebflowConstants.STATE_ID_SEND_TICKET_GRANTING_TICKET);\n    }"}, {"instruction": "Removes the given slot from the slot manager.\n\n@param slotId identifying the slot to remove", "input": "Java", "output": "private void removeSlot(SlotID slotId) {\n\t\tTaskManagerSlot slot = slots.remove(slotId);\n\n\t\tif (null != slot) {\n\t\t\tfreeSlots.remove(slotId);\n\n\t\t\tif (slot.getState() == TaskManagerSlot.State.PENDING) {\n\t\t\t\t// reject the pending slot request --> triggering a new allocation attempt\n\t\t\t\trejectPendingSlotRequest(\n\t\t\t\t\tslot.getAssignedSlotRequest(),\n\t\t\t\t\tnew Exception(\"The assigned slot \" + slot.getSlotId() + \" was removed.\"));\n\t\t\t}\n\n\t\t\tAllocationID oldAllocationId = slot.getAllocationId();\n\n\t\t\tif (oldAllocationId != null) {\n\t\t\t\tfulfilledSlotRequests.remove(oldAllocationId);\n\n\t\t\t\tresourceActions.notifyAllocationFailure(\n\t\t\t\t\tslot.getJobId(),\n\t\t\t\t\toldAllocationId,\n\t\t\t\t\tnew FlinkException(\"The assigned slot \" + slot.getSlotId() + \" was removed.\"));\n\t\t\t}\n\t\t} else {\n\t\t\tLOG.debug(\"There was no slot registered with slot id {}.\", slotId);\n\t\t}\n\t}"}, {"instruction": "Notify all {@link ChannelFuture}s that were registered with {@link #add(ChannelPromise, int)} and\ntheir pendingDatasize isis smaller then the current writeCounter returned by {@link #writeCounter()}.\n\nAfter a {@link ChannelFuture} was notified it will be removed from this {@link ChannelFlushPromiseNotifier} and\nso not receive anymore notification.\n\nThe rest of the remaining {@link ChannelFuture}s will be failed with the given {@link Throwable}.\n\nSo after this operation this {@link ChannelFutureListener} is empty.", "input": "Java", "output": "public ChannelFlushPromiseNotifier notifyPromises(Throwable cause) {\n        notifyPromises();\n        for (;;) {\n            FlushCheckpoint cp = flushCheckpoints.poll();\n            if (cp == null) {\n                break;\n            }\n            if (tryNotify) {\n                cp.promise().tryFailure(cause);\n            } else {\n                cp.promise().setFailure(cause);\n            }\n        }\n        return this;\n    }"}, {"instruction": "\u8f6c\u6362\u6beb\u79d2\u4e3a\u5e26\u65f6\u95f4\u5355\u4f4d\u7684\u5b57\u7b26\u4e32\uff0c\u4f1a\u540c\u65f6\u5e26\u4e0b\u4e00\u7ea7\u7684\u5355\u4f4d\uff0c\u56db\u820d\u4e94\u5165", "input": "Java", "output": "public static String toTimeWithMinorUnit(long millis) {\n\t\tif (millis < MILLIS_PER_SECOND) {\n\t\t\treturn String.format(\"%4dms\", millis);\n\t\t}\n\n\t\tif (millis < MILLIS_PER_MINUTE) {\n\t\t\treturn String.format(\"%02ds\", millis / MILLIS_PER_SECOND);\n\t\t}\n\n\t\tif (millis < MILLIS_PER_HOUR) {\n\t\t\treturn String.format(\"%02dm%02ds\", millis / MILLIS_PER_MINUTE, (millis / MILLIS_PER_SECOND) % 60);\n\t\t}\n\n\t\tif (millis < MILLIS_PER_DAY) {\n\t\t\treturn String.format(\"%02dh%02dm\", millis / MILLIS_PER_HOUR, (millis / MILLIS_PER_MINUTE) % 60);\n\t\t}\n\n\t\treturn String.format(\"%dd%02dh\", millis / MILLIS_PER_DAY, (millis / MILLIS_PER_HOUR) % 24);\n\t}"}, {"instruction": "Returns the number of selected messages of the given message container.\n<p>\nBy default it returns the number of selected messages from {@code SelectableHttpMessagesContainer}s and for\n{@code SingleHttpMessageContainer}s returns 1 if it contains a message, 0 otherwise.\n</p>\n<p>\nNormally overridden if other implementations of {@code HttpMessageContainer} are supported. Default are\n{@code SingleHttpMessageContainer} and {@code SelectableHttpMessagesContainer}.\n</p>\n\n@param httpMessageContainer the container that will be evaluated\n@return the number of selected messages in the message container\n@see SingleHttpMessageContainer\n@see SelectableHttpMessagesContainer", "input": "Java", "output": "protected int getNumberOfSelectedMessages(HttpMessageContainer httpMessageContainer) {\n        if (httpMessageContainer instanceof SelectableHttpMessagesContainer) {\n            return ((SelectableHttpMessagesContainer) httpMessageContainer).getNumberOfSelectedMessages();\n        } else if (httpMessageContainer instanceof SingleHttpMessageContainer) {\n            return ((SingleHttpMessageContainer) httpMessageContainer).isEmpty() ? 0 : 1;\n        }\n\n        return 0;\n    }"}, {"instruction": "Patches the specified SSL policy with the data included in the request.\n\n<p>Sample code:\n\n<pre><code>\ntry (SslPolicyClient sslPolicyClient = SslPolicyClient.create()) {\nProjectGlobalSslPolicyName sslPolicy = ProjectGlobalSslPolicyName.of(\"[PROJECT]\", \"[SSL_POLICY]\");\nSslPolicy sslPolicyResource = SslPolicy.newBuilder().build();\nList&lt;String&gt; fieldMask = new ArrayList&lt;&gt;();\nOperation response = sslPolicyClient.patchSslPolicy(sslPolicy, sslPolicyResource, fieldMask);\n}\n</code></pre>\n\n@param sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and\ncomply with RFC1035.\n@param sslPolicyResource A SSL policy specifies the server-side support for SSL features. This\ncan be attached to a TargetHttpsProxy or a TargetSslProxy. This affects connections between\nclients and the HTTPS or SSL proxy load balancer. They do not affect the connection between\nthe load balancers and the backends.\n@param fieldMask The fields that should be serialized (even if they have empty values). If the\ncontaining message object has a non-null fieldmask, then all the fields in the field mask\n(and only those fields in the field mask) will be serialized. If the containing object does\nnot have a fieldmask, then only non-empty fields will be serialized.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation patchSslPolicy(\n      ProjectGlobalSslPolicyName sslPolicy, SslPolicy sslPolicyResource, List<String> fieldMask) {\n\n    PatchSslPolicyHttpRequest request =\n        PatchSslPolicyHttpRequest.newBuilder()\n            .setSslPolicy(sslPolicy == null ? null : sslPolicy.toString())\n            .setSslPolicyResource(sslPolicyResource)\n            .addAllFieldMask(fieldMask)\n            .build();\n    return patchSslPolicy(request);\n  }"}, {"instruction": "\u901a\u8fc7\u8fde\u63a5\u8fdc\u7a0b\u5730\u5740\u5f97\u5230\u672c\u673a\u5185\u7f51\u5730\u5740\n\n@param remoteAddress \u8fdc\u7a0b\u5730\u5740\n@return \u672c\u673a\u5185\u7f51\u5730\u5740", "input": "Java", "output": "private static InetAddress getLocalHostBySocket(InetSocketAddress remoteAddress) {\n        InetAddress host = null;\n        try {\n            // \u53bb\u8fde\u4e00\u4e0b\u8fdc\u7a0b\u5730\u5740\n            Socket socket = new Socket();\n            try {\n                socket.connect(remoteAddress, 1000);\n                // \u5f97\u5230\u672c\u5730\u5730\u5740\n                host = socket.getLocalAddress();\n            } finally {\n                IOUtils.closeQuietly(socket);\n            }\n        } catch (Exception e) {\n            LOGGER.warn(\"Can not connect to host {}, cause by :{}\",\n                remoteAddress.toString(), e.getMessage());\n        }\n        return host;\n    }"}, {"instruction": "Instantiates a template and begins execution.\n\n<p>This method is equivalent to executing the sequence\n[CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate],\n[InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],\n[DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].\n\n<p>The returned Operation can be used to track execution of workflow by polling\n[operations.get][google.longrunning.Operations.GetOperation]. The Operation will complete when\nentire workflow is finished.\n\n<p>The running workflow can be aborted via\n[operations.cancel][google.longrunning.Operations.CancelOperation]. This will cause any\ninflight jobs to be cancelled and workflow-owned clusters to be deleted.\n\n<p>The [Operation.metadata][google.longrunning.Operation.metadata] will be\n[WorkflowMetadata][google.cloud.dataproc.v1beta2.WorkflowMetadata].\n\n<p>On successful completion, [Operation.response][google.longrunning.Operation.response] will\nbe [Empty][google.protobuf.Empty].\n\n<p>Sample code:\n\n<pre><code>\ntry (WorkflowTemplateServiceClient workflowTemplateServiceClient = WorkflowTemplateServiceClient.create()) {\nString formattedParent = RegionName.format(\"[PROJECT]\", \"[REGION]\");\nWorkflowTemplate template = WorkflowTemplate.newBuilder().build();\nworkflowTemplateServiceClient.instantiateInlineWorkflowTemplateAsync(formattedParent, template).get();\n}\n</code></pre>\n\n@param parent Required. The \"resource name\" of the workflow template region, as described in\nhttps://cloud.google.com/apis/design/resource_names of the form\n`projects/{project_id}/regions/{region}`\n@param template Required. The workflow template to instantiate.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi(\n      \"The surface for long-running operations is not stable yet and may change in the future.\")\n  public final OperationFuture<Empty, WorkflowMetadata> instantiateInlineWorkflowTemplateAsync(\n      String parent, WorkflowTemplate template) {\n\n    InstantiateInlineWorkflowTemplateRequest request =\n        InstantiateInlineWorkflowTemplateRequest.newBuilder()\n            .setParent(parent)\n            .setTemplate(template)\n            .build();\n    return instantiateInlineWorkflowTemplateAsync(request);\n  }"}, {"instruction": "Get layer output type.\n\n@param inputType Array of InputTypes\n@return output type as InputType\n@throws InvalidKerasConfigurationException Invalid Keras config", "input": "Java", "output": "@Override\n    public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                    \"Keras SimpleRnn layer accepts only one input (received \" + inputType.length + \")\");\n        InputPreProcessor preProcessor = getInputPreprocessor(inputType);\n        if (preProcessor != null)\n            return preProcessor.getOutputType(inputType[0]);\n        else\n            return this.getSimpleRnnLayer().getOutputType(-1, inputType[0]);\n    }"}, {"instruction": "this method shouldn't be called from user", "input": "Java", "output": "@Deprecated\n    void addSublist(JFXListView<?> subList, int index) {\n        if (!sublistsProperty.get().contains(subList)) {\n            sublistsProperty.get().add(subList);\n            sublistsIndices.put(index, subList);\n            subList.getSelectionModel().selectedIndexProperty().addListener((o, oldVal, newVal) -> {\n                if (newVal.intValue() != -1) {\n                    updateOverAllSelectedIndex();\n                }\n            });\n        }\n    }"}, {"instruction": "Convert a SQL search pattern into an equivalent Java Regex.\n\n@param pattern input which may contain '%' or '_' wildcard characters, or\nthese characters escaped using {@code getSearchStringEscape()}.\n@return replace %/_ with regex search characters, also handle escaped\ncharacters.", "input": "Java", "output": "public static String patternToRegex(String pattern) {\n    if (pattern == null) {\n      return \".*\";\n    } else {\n      StringBuilder result = new StringBuilder(pattern.length());\n\n      boolean escaped = false;\n      for (int i = 0, len = pattern.length(); i < len; i++) {\n        char c = pattern.charAt(i);\n        if (escaped) {\n          if (c != SEARCH_STRING_ESCAPE) {\n            escaped = false;\n          }\n          result.append(c);\n        } else {\n          if (c == SEARCH_STRING_ESCAPE) {\n            escaped = true;\n            continue;\n          } else if (c == '%') {\n            result.append(\".*\");\n          } else if (c == '_') {\n            result.append('.');\n          } else {\n            result.append(Character.toLowerCase(c));\n          }\n        }\n      }\n      return result.toString();\n    }\n  }"}, {"instruction": "returns null. this can be improved in future but is good enough for most use-cases.", "input": "Java", "output": "public static TimestampSpec mergeTimestampSpec(List<TimestampSpec> toMerge)\n  {\n    if (toMerge == null || toMerge.size() == 0) {\n      return null;\n    }\n\n    TimestampSpec result = toMerge.get(0);\n    for (int i = 1; i < toMerge.size(); i++) {\n      if (toMerge.get(i) == null) {\n        continue;\n      }\n      if (!Objects.equals(result, toMerge.get(i))) {\n        return null;\n      }\n    }\n\n    return result;\n  }"}, {"instruction": "*************************************************************************", "input": "Java", "output": "private static DataSet<Centroid> getCentroidDataSet(ParameterTool params, ExecutionEnvironment env) {\n\t\tDataSet<Centroid> centroids;\n\t\tif (params.has(\"centroids\")) {\n\t\t\tcentroids = env.readCsvFile(params.get(\"centroids\"))\n\t\t\t\t.fieldDelimiter(\" \")\n\t\t\t\t.pojoType(Centroid.class, \"id\", \"x\", \"y\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Executing K-Means example with default centroid data set.\");\n\t\t\tSystem.out.println(\"Use --centroids to specify file input.\");\n\t\t\tcentroids = KMeansData.getDefaultCentroidDataSet(env);\n\t\t}\n\t\treturn centroids;\n\t}"}, {"instruction": "\u83b7\u5f97\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u6784\u9020\u5217\u8868\n\n@param <T> \u6784\u9020\u7684\u5bf9\u8c61\u7c7b\u578b\n@param beanClass \u7c7b\n@return \u5b57\u6bb5\u5217\u8868\n@throws SecurityException \u5b89\u5168\u68c0\u67e5\u5f02\u5e38", "input": "Java", "output": "@SuppressWarnings(\"unchecked\")\r\n\tpublic static <T> Constructor<T>[] getConstructors(Class<T> beanClass) throws SecurityException {\r\n\t\tAssert.notNull(beanClass);\r\n\t\tConstructor<?>[] constructors = CONSTRUCTORS_CACHE.get(beanClass);\r\n\t\tif (null != constructors) {\r\n\t\t\treturn (Constructor<T>[]) constructors;\r\n\t\t}\r\n\r\n\t\tconstructors = getConstructorsDirectly(beanClass);\r\n\t\treturn (Constructor<T>[]) CONSTRUCTORS_CACHE.put(beanClass, constructors);\r\n\t}"}, {"instruction": "Returns the details for the specified interconnect location. Gets a list of available\ninterconnect locations by making a list() request.\n\n<p>Sample code:\n\n<pre><code>\ntry (InterconnectLocationClient interconnectLocationClient = InterconnectLocationClient.create()) {\nProjectGlobalInterconnectLocationName interconnectLocation = ProjectGlobalInterconnectLocationName.of(\"[PROJECT]\", \"[INTERCONNECT_LOCATION]\");\nInterconnectLocation response = interconnectLocationClient.getInterconnectLocation(interconnectLocation);\n}\n</code></pre>\n\n@param interconnectLocation Name of the interconnect location to return.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final InterconnectLocation getInterconnectLocation(\n      ProjectGlobalInterconnectLocationName interconnectLocation) {\n\n    GetInterconnectLocationHttpRequest request =\n        GetInterconnectLocationHttpRequest.newBuilder()\n            .setInterconnectLocation(\n                interconnectLocation == null ? null : interconnectLocation.toString())\n            .build();\n    return getInterconnectLocation(request);\n  }"}, {"instruction": "Transport has active streams. Start sending keepalives if necessary.", "input": "Java", "output": "public synchronized void onTransportActive() {\n    if (state == State.IDLE) {\n      // When the transport goes active, we do not reset the nextKeepaliveTime. This allows us to\n      // quickly check whether the connection is still working.\n      state = State.PING_SCHEDULED;\n      if (pingFuture == null) {\n        pingFuture = scheduler.schedule(\n            sendPing,\n            keepAliveTimeInNanos - stopwatch.elapsed(TimeUnit.NANOSECONDS),\n            TimeUnit.NANOSECONDS);\n      }\n    } else if (state == State.IDLE_AND_PING_SENT) {\n      state = State.PING_SENT;\n    } // Other states are possible when keepAliveDuringTransportIdle == true\n  }"}, {"instruction": "Loads the data from the user folder into the new object.\n<p>\nIf the folder does not exist yet, a fresh new instance is created.", "input": "Java", "output": "public static @Nonnull ApiTokenStats load(@Nonnull User user) {\n        // even if we are not using statistics, we load the existing one in case the configuration\n        // is enabled afterwards to avoid erasing data\n        \n        ApiTokenStats apiTokenStats = null;\n        \n        File userFolder = user.getUserFolder();\n        if (userFolder != null) {\n            apiTokenStats = internalLoad(userFolder);\n        }\n        \n        if (apiTokenStats == null) {\n            apiTokenStats = new ApiTokenStats();\n        }\n        \n        apiTokenStats.user = user;\n        \n        return apiTokenStats;\n    }"}, {"instruction": "Attempts to convert the publisher to the given type.\n\n@param object The object to convert\n@param publisherType The publisher type\n@param <T> The generic type\n@return The Resulting in publisher", "input": "Java", "output": "public static <T> T convertPublisher(Object object, Class<T> publisherType) {\n        Objects.requireNonNull(object, \"Invalid argument [object]: \" + object);\n        Objects.requireNonNull(object, \"Invalid argument [publisherType]: \" + publisherType);\n        if (object instanceof CompletableFuture) {\n            @SuppressWarnings(\"unchecked\") Publisher<T> futurePublisher = (Publisher<T>) Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));\n            return ConversionService.SHARED.convert(futurePublisher, publisherType)\n                    .orElseThrow(() -> new IllegalArgumentException(\"Unsupported Reactive type: \" + object.getClass()));\n        } else {\n            return ConversionService.SHARED.convert(object, publisherType)\n                    .orElseThrow(() -> new IllegalArgumentException(\"Unsupported Reactive type: \" + object.getClass()));\n        }\n    }"}, {"instruction": "This method returns total amount of memory allocated within system\n\n@return", "input": "Java", "output": "@Override\n    public Table<AllocationStatus, Integer, Long> getAllocationStatistics() {\n        Table<AllocationStatus, Integer, Long> table = HashBasedTable.create();\n        table.put(AllocationStatus.HOST, 0, zeroUseCounter.get());\n        for (Integer deviceId : configuration.getAvailableDevices()) {\n            table.put(AllocationStatus.DEVICE, deviceId, getAllocatedDeviceMemory(deviceId));\n        }\n        return table;\n    }"}, {"instruction": "Sends a SavepointTriggerMessage to the job manager.", "input": "Java", "output": "private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {\n\t\tlogAndSysout(\"Triggering savepoint for job \" + jobId + '.');\n\t\tCompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory);\n\n\t\tlogAndSysout(\"Waiting for response...\");\n\n\t\tfinal String savepointPath;\n\n\t\ttry {\n\t\t\tsavepointPath = savepointPathFuture.get();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tThrowable cause = ExceptionUtils.stripExecutionException(e);\n\t\t\tthrow new FlinkException(\"Triggering a savepoint for the job \" + jobId + \" failed.\", cause);\n\t\t}\n\n\t\tlogAndSysout(\"Savepoint completed. Path: \" + savepointPath);\n\t\tlogAndSysout(\"You can resume your program from this savepoint with the run command.\");\n\n\t\treturn savepointPath;\n\t}"}, {"instruction": "Sign SAML response.\n\n@param samlResponse the SAML response\n@param privateKey   the private key\n@param publicKey    the public key\n@return the response", "input": "Java", "output": "public static String signSamlResponse(final String samlResponse, final PrivateKey privateKey, final PublicKey publicKey) {\n        val doc = constructDocumentFromXml(samlResponse);\n\n        if (doc != null) {\n            val signedElement = signSamlElement(doc.getRootElement(),\n                privateKey, publicKey);\n            doc.setRootElement((org.jdom.Element) signedElement.detach());\n            return new XMLOutputter().outputString(doc);\n        }\n        throw new IllegalArgumentException(\"Error signing SAML Response: Null document\");\n    }"}, {"instruction": "Build a new set of genes. Has two distinct modes of operation\n<ul>\n<li>Before the population has reached the culled size: will return a random set of genes.</li>\n<li>After: Parents will be selected among the population, a crossover will be applied followed by a mutation.</li>\n</ul>\n@return Returns the generated set of genes\n@throws GeneticGenerationException If buildNextGenes() can't generate a set that has not already been tried,\nor if the crossover and the mutation operators can't generate a set,\nthis exception is thrown.", "input": "Java", "output": "@Override\n    public double[] buildNextGenes() {\n        double[] result;\n\n        boolean hasAlreadyBeenTried;\n        int attemptsRemaining = MAX_NUM_GENERATION_ATTEMPTS;\n        do {\n            if (populationModel.isReadyToBreed()) {\n                result = buildOffspring();\n            } else {\n                result = buildRandomGenes();\n            }\n\n            hasAlreadyBeenTried = hasAlreadyBeenTried(result);\n            if (hasAlreadyBeenTried && --attemptsRemaining == 0) {\n                throw new GeneticGenerationException(\"Failed to generate a set of genes not already tried.\");\n            }\n        } while (hasAlreadyBeenTried);\n\n        previousGenes[previousGenesIdx] = result;\n        previousGenesIdx = ++previousGenesIdx % previousGenes.length;\n\n        return result;\n    }"}, {"instruction": "Get default diagram image as bytes array\n@return the default diagram image", "input": "Java", "output": "protected InputStream getDefaultDiagram(String diagramImageFileName) {\n        String imageFileName = diagramImageFileName != null ?\n                diagramImageFileName :\n                getDefaultDiagramImageFileName();\n        InputStream imageStream = getClass().getResourceAsStream(imageFileName);\n        if (imageStream == null) {\n            throw new ActivitiImageException(\"Error occurred while getting default diagram image from file: \" + imageFileName);\n        }\n        return imageStream;\n    }"}, {"instruction": "\u6784\u5efaIN\u8bed\u53e5\u4e2d\u7684\u503c\u90e8\u5206<br>\n\u5f00\u5934\u5fc5\u987b\u52a0\u7a7a\u683c\uff0c\u7c7b\u4f3c\uff1a\" (?,?,?)\" \u6216\u8005 \" (1,2,3,4)\"\n\n@param conditionStrBuilder \u6761\u4ef6\u8bed\u53e5\u6784\u5efa\u5668\n@param paramValues \u53c2\u6570\u96c6\u5408\uff0c\u7528\u4e8e\u53c2\u6570\u5360\u4f4d\u7b26\u5bf9\u5e94\u53c2\u6570\u56de\u586b", "input": "Java", "output": "private void buildValuePartForIN(StringBuilder conditionStrBuilder, List<Object> paramValues) {\r\n\t\tconditionStrBuilder.append(\" (\");\r\n\t\tfinal Object value = this.value;\r\n\t\tif (isPlaceHolder()) {\r\n\t\t\tList<?> valuesForIn;\r\n\t\t\t// \u5360\u4f4d\u7b26\u5bf9\u5e94\u503c\u5217\u8868\r\n\t\t\tif (value instanceof CharSequence) {\r\n\t\t\t\tvaluesForIn = StrUtil.split((CharSequence) value, ',');\r\n\t\t\t} else {\r\n\t\t\t\tvaluesForIn = Arrays.asList(Convert.convert(String[].class, value));\r\n\t\t\t\tif (null == valuesForIn) {\r\n\t\t\t\t\tvaluesForIn = CollUtil.newArrayList(Convert.toStr(value));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconditionStrBuilder.append(StrUtil.repeatAndJoin(\"?\", valuesForIn.size(), \",\"));\r\n\t\t\tif(null != paramValues) {\r\n\t\t\t\tparamValues.addAll(valuesForIn);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconditionStrBuilder.append(StrUtil.join(\",\", value));\r\n\t\t}\r\n\t\tconditionStrBuilder.append(')');\r\n\t}"}, {"instruction": "normal login handler part //todo: consider using mostly the same code as in proxy part below", "input": "Java", "output": "@Override\n  public boolean loginHandler(String target, HttpServletRequest request, HttpServletResponse response) throws IOException {\n    if (! isLoginTarget(target)) {\n      return false;\n    }\n\n    if (isPageRequest(request)) {\n      sendLoginForm(request, response);\n    } else {\n      ServletUtils.sendResponseError(response, HttpServletResponse.SC_UNAUTHORIZED, \"Access denied. Please login.\");\n    }\n    return true;\n  }"}, {"instruction": "Updates an instance's network interface. This method follows PATCH semantics.\n\n<p>Sample code:\n\n<pre><code>\ntry (InstanceClient instanceClient = InstanceClient.create()) {\nProjectZoneInstanceName instance = ProjectZoneInstanceName.of(\"[PROJECT]\", \"[ZONE]\", \"[INSTANCE]\");\nString networkInterface = \"\";\nNetworkInterface networkInterfaceResource = NetworkInterface.newBuilder().build();\nList&lt;String&gt; fieldMask = new ArrayList&lt;&gt;();\nOperation response = instanceClient.updateNetworkInterfaceInstance(instance, networkInterface, networkInterfaceResource, fieldMask);\n}\n</code></pre>\n\n@param instance The instance name for this request.\n@param networkInterface The name of the network interface to update.\n@param networkInterfaceResource A network interface resource attached to an instance.\n@param fieldMask The fields that should be serialized (even if they have empty values). If the\ncontaining message object has a non-null fieldmask, then all the fields in the field mask\n(and only those fields in the field mask) will be serialized. If the containing object does\nnot have a fieldmask, then only non-empty fields will be serialized.\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation updateNetworkInterfaceInstance(\n      ProjectZoneInstanceName instance,\n      String networkInterface,\n      NetworkInterface networkInterfaceResource,\n      List<String> fieldMask) {\n\n    UpdateNetworkInterfaceInstanceHttpRequest request =\n        UpdateNetworkInterfaceInstanceHttpRequest.newBuilder()\n            .setInstance(instance == null ? null : instance.toString())\n            .setNetworkInterface(networkInterface)\n            .setNetworkInterfaceResource(networkInterfaceResource)\n            .addAllFieldMask(fieldMask)\n            .build();\n    return updateNetworkInterfaceInstance(request);\n  }"}, {"instruction": "word pos\n\n@return", "input": "Java", "output": "public String[][] toWordTagArray()\n    {\n        List<Word> wordList = toSimpleWordList();\n        String[][] pair = new String[2][wordList.size()];\n        Iterator<Word> iterator = wordList.iterator();\n        for (int i = 0; i < pair[0].length; i++)\n        {\n            Word word = iterator.next();\n            pair[0][i] = word.value;\n            pair[1][i] = word.label;\n        }\n        return pair;\n    }"}, {"instruction": "Decodes the specified region of the buffer into an unadjusted frame length.  The default implementation is\ncapable of decoding the specified region into an unsigned 8/16/24/32/64 bit integer.  Override this method to\ndecode the length field encoded differently.  Note that this method must not modify the state of the specified\nbuffer (e.g. {@code readerIndex}, {@code writerIndex}, and the content of the buffer.)\n\n@throws DecoderException if failed to decode the specified region", "input": "Java", "output": "protected long getUnadjustedFrameLength(ByteBuf buf, int offset, int length, ByteOrder order) {\n        buf = buf.order(order);\n        long frameLength;\n        switch (length) {\n        case 1:\n            frameLength = buf.getUnsignedByte(offset);\n            break;\n        case 2:\n            frameLength = buf.getUnsignedShort(offset);\n            break;\n        case 3:\n            frameLength = buf.getUnsignedMedium(offset);\n            break;\n        case 4:\n            frameLength = buf.getUnsignedInt(offset);\n            break;\n        case 8:\n            frameLength = buf.getLong(offset);\n            break;\n        default:\n            throw new DecoderException(\n                    \"unsupported lengthFieldLength: \" + lengthFieldLength + \" (expected: 1, 2, 3, 4, or 8)\");\n        }\n        return frameLength;\n    }"}, {"instruction": "\u83b7\u53d6\u6ce8\u518c\u914d\u7f6e\n\n@param config consumer config\n@return", "input": "Java", "output": "private AbstractInterfaceConfig getRegisterConfig(ConsumerConfig config) {\n        String url = ZookeeperRegistryHelper.convertConsumerToUrl(config);\n        String addr = url.substring(0, url.indexOf(\"?\"));\n        for (Map.Entry<ConsumerConfig, String> consumerUrl : consumerUrls.entrySet()) {\n            if (consumerUrl.getValue().contains(addr)) {\n                return consumerUrl.getKey();\n            }\n        }\n        return null;\n    }"}, {"instruction": "\u901a\u8fc7DS\u6267\u884csql", "input": "Java", "output": "public static Object sqlRS(DataSource ds, String sql, Function<ResultSet, Object> fun) {\n        try (Connection conn = ds.getConnection();\n                Statement stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {\n            stmt.setFetchSize(Integer.MIN_VALUE);\n            try (ResultSet rs = stmt.executeQuery(sql)) {\n                return fun.apply(rs);\n            }\n        } catch (Exception e) {\n            logger.error(\"sqlRs has error, sql: {} \", sql);\n            throw new RuntimeException(e);\n        }\n    }"}, {"instruction": "<p>Appends to the <code>builder</code> the comparison of\ntwo <code>Object</code>s.</p>\n\n<ol>\n<li>Check if <code>lhs == rhs</code></li>\n<li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\na <code>null</code> object is less than a non-<code>null</code> object</li>\n<li>Check the object contents</li>\n</ol>\n\n<p>If <code>lhs</code> is an array, array comparison methods will be used.\nOtherwise <code>comparator</code> will be used to compare the objects.\nIf <code>comparator</code> is <code>null</code>, <code>lhs</code> must\nimplement {@link Comparable} instead.</p>\n\n@param lhs  left-hand object\n@param rhs  right-hand object\n@param comparator  <code>Comparator</code> used to compare the objects,\n<code>null</code> means treat lhs as <code>Comparable</code>\n@return this - used to chain append calls\n@throws ClassCastException  if <code>rhs</code> is not assignment-compatible\nwith <code>lhs</code>\n@since 2.0", "input": "Java", "output": "public CompareToBuilder append(final Object lhs, final Object rhs, final Comparator<?> comparator) {\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null) {\n            comparison = -1;\n            return this;\n        }\n        if (rhs == null) {\n            comparison = +1;\n            return this;\n        }\n        if (lhs.getClass().isArray()) {\n            // switch on type of array, to dispatch to the correct handler\n            // handles multi dimensional arrays\n            // throws a ClassCastException if rhs is not the correct array type\n            if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            }"}, {"instruction": "Raw digest byte [ ].\n\n@param alg  the alg\n@param salt the salt\n@param data the data\n@return the byte [ ]", "input": "Java", "output": "public static byte[] rawDigest(final String alg, final String salt, final String... data) {\n        try {\n            val digest = getMessageDigestInstance(alg);\n            Arrays.stream(data).forEach(d -> digest.update(d.getBytes(StandardCharsets.UTF_8)));\n            return digest.digest(salt.getBytes(StandardCharsets.UTF_8));\n        } catch (final Exception cause) {\n            throw new SecurityException(cause);\n        }\n    }"}, {"instruction": "Start the monitoring process.", "input": "Java", "output": "@Override\n    public synchronized void start() {\n        if (monitorActive) {\n            return;\n        }\n        lastTime.set(milliSecondFromNano());\n        long localCheckInterval = checkInterval.get();\n        if (localCheckInterval > 0) {\n            monitorActive = true;\n            monitor = new MixedTrafficMonitoringTask((GlobalChannelTrafficShapingHandler) trafficShapingHandler, this);\n            scheduledFuture =\n                executor.schedule(monitor, localCheckInterval, TimeUnit.MILLISECONDS);\n        }\n    }"}, {"instruction": "Validates all panels, throwing an exception if there's any validation error.\n<p>\nThe message of the exception can be shown in GUI components (for example, an error dialogue) callers can expect an\ninternationalised message.\n\n@throws Exception if there's any validation error.\n@see #initParam(Object)\n@see #saveParam()", "input": "Java", "output": "public void validateParam() throws Exception {\r\n        Enumeration<AbstractParamPanel> en = tablePanel.elements();\r\n        AbstractParamPanel panel = null;\r\n        while (en.hasMoreElements()) {\r\n            panel = en.nextElement();\r\n            try {\r\n                panel.validateParam(paramObject);\r\n            } catch (Exception e) {\r\n                showParamPanel(panel, panel.getName());\r\n                throw e;\r\n            }\r\n        }\r\n    }"}, {"instruction": "Return the layer size (number of units) for the specified layer.<br>\nNote that the meaning of the \"layer size\" can depend on the type of layer. For example:<br>\n- DenseLayer, OutputLayer, recurrent layers: number of units (nOut configuration option)<br>\n- ConvolutionLayer: the channels (number of channels)<br>\n- Subsampling layers, global pooling layers, etc: size of 0 is always returned<br>\n\n@param layerName Name of the layer to get the size of\n@return Size of the layer", "input": "Java", "output": "public int layerSize(String layerName) {\n        Layer l = getLayer(layerName);\n        if(l == null){\n            throw new IllegalArgumentException(\"No layer with name \\\"\" + layerName + \"\\\" exists\");\n        }\n        org.deeplearning4j.nn.conf.layers.Layer conf = l.conf().getLayer();\n        if (conf == null || !(conf instanceof FeedForwardLayer)) {\n            return 0;\n        }\n        FeedForwardLayer ffl = (FeedForwardLayer) conf;\n\n        // FIXME: int cast\n        return (int) ffl.getNOut();\n    }"}, {"instruction": "Filters a descriptor for {@link BuildStep}s by using {@link BuildStepDescriptor#isApplicable(Class)}.", "input": "Java", "output": "public static <T extends BuildStep&Describable<T>>\n    List<Descriptor<T>> filter(List<Descriptor<T>> base, Class<? extends AbstractProject> type) {\n        // descriptor of the project\n        Descriptor pd = Jenkins.getInstance().getDescriptor((Class) type);\n\n        List<Descriptor<T>> r = new ArrayList<>(base.size());\n        for (Descriptor<T> d : base) {\n            if (pd instanceof AbstractProjectDescriptor && !((AbstractProjectDescriptor)pd).isApplicable(d))\n                continue;\n\n            if (d instanceof BuildStepDescriptor) {\n                BuildStepDescriptor<T> bd = (BuildStepDescriptor<T>) d;\n                if(!bd.isApplicable(type))  continue;\n                r.add(bd);\n            } else {\n                // old plugins built before 1.150 may not implement BuildStepDescriptor\n                r.add(d);\n            }\n        }\n        return r;\n    }"}, {"instruction": "Sends the given response and status code to the given channel.\n\n@param channelHandlerContext identifying the open channel\n@param httpRequest originating http request\n@param response which should be sent\n@param statusCode of the message to send\n@param headers additional header values\n@param <P> type of the response", "input": "Java", "output": "public static <P extends ResponseBody> CompletableFuture<Void> sendResponse(\n\t\t\tChannelHandlerContext channelHandlerContext,\n\t\t\tHttpRequest httpRequest,\n\t\t\tP response,\n\t\t\tHttpResponseStatus statusCode,\n\t\t\tMap<String, String> headers) {\n\t\tStringWriter sw = new StringWriter();\n\t\ttry {\n\t\t\tmapper.writeValue(sw, response);\n\t\t} catch (IOException ioe) {\n\t\t\tLOG.error(\"Internal server error. Could not map response to JSON.\", ioe);\n\t\t\treturn sendErrorResponse(\n\t\t\t\tchannelHandlerContext,\n\t\t\t\thttpRequest,\n\t\t\t\tnew ErrorResponseBody(\"Internal server error. Could not map response to JSON.\"),\n\t\t\t\tHttpResponseStatus.INTERNAL_SERVER_ERROR,\n\t\t\t\theaders);\n\t\t}\n\t\treturn sendResponse(\n\t\t\tchannelHandlerContext,\n\t\t\thttpRequest,\n\t\t\tsw.toString(),\n\t\t\tstatusCode,\n\t\t\theaders);\n\t}"}, {"instruction": "\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u6c60<br>\n\u4f20\u5165\u963b\u585e\u7cfb\u6570\uff0c\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1aCPU\u53ef\u7528\u6838\u5fc3\u6570 / (1 - \u963b\u585e\u56e0\u5b50)<br>\nBlocking Coefficient(\u963b\u585e\u7cfb\u6570) = \u963b\u585e\u65f6\u95f4\uff0f\uff08\u963b\u585e\u65f6\u95f4+\u4f7f\u7528CPU\u7684\u65f6\u95f4\uff09<br>\n\u8ba1\u7b97\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u963b\u585e\u7cfb\u6570\u4e3a0\uff0c\u800cIO\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u963b\u585e\u7cfb\u6570\u5219\u63a5\u8fd1\u4e8e1\u3002\n\nsee: http://blog.csdn.net/partner4java/article/details/9417663\n\n@param blockingCoefficient \u963b\u585e\u7cfb\u6570\uff0c\u963b\u585e\u56e0\u5b50\u4ecb\u4e8e0~1\u4e4b\u95f4\u7684\u6570\uff0c\u963b\u585e\u56e0\u5b50\u8d8a\u5927\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u8d8a\u591a\u3002\n@return {@link ThreadPoolExecutor}\n@since 3.0.6", "input": "Java", "output": "public static ThreadPoolExecutor newExecutorByBlockingCoefficient(float blockingCoefficient) {\r\n\t\tif (blockingCoefficient >= 1 || blockingCoefficient < 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"[blockingCoefficient] must between 0 and 1, or equals 0.\");\r\n\t\t}\r\n\r\n\t\t// \u6700\u4f73\u7684\u7ebf\u7a0b\u6570 = CPU\u53ef\u7528\u6838\u5fc3\u6570 / (1 - \u963b\u585e\u7cfb\u6570)\r\n\t\tint poolSize = (int) (Runtime.getRuntime().availableProcessors() / (1 - blockingCoefficient));\r\n\t\treturn ExecutorBuilder.create().setCorePoolSize(poolSize).setMaxPoolSize(poolSize).setKeepAliveTime(0L).build();\r\n\t}"}, {"instruction": "\u6241\u5e73\u5316\u590d\u5236\n@param prefix \u524d\u7f00\n@param sourceMap \u539f\u59cbmap\n@param dstMap \u76ee\u6807map", "input": "Java", "output": "public static void flatCopyTo(String prefix, Map<String, Object> sourceMap,\n                                  Map<String, String> dstMap) {\n        for (Map.Entry<String, Object> entry : sourceMap.entrySet()) {\n            String key = prefix + entry.getKey();\n            Object value = entry.getValue();\n            if (value instanceof String) {\n                dstMap.put(key, (String) value);\n            } else if (value instanceof Number) {\n                dstMap.put(key, value.toString());\n            } else if (value instanceof Map) {\n                flatCopyTo(key + \".\", (Map<String, Object>) value, dstMap);\n            }\n        }\n    }"}, {"instruction": "make sure it now goes looking for that block index.", "input": "Java", "output": "private void ensureFetching(long blockIndex) {\n    if (fetching != null) {\n      if (fetching.futureBuf.isDone()) {\n        full.add(fetching);\n        fetching = null;\n      } else {\n        return;\n      }\n    }\n    for (WorkUnit w : full) {\n      if (w.blockIndex == blockIndex) {\n        return;\n      }\n    }\n    if (full.size() < BUF_COUNT) {\n      fetching = new WorkUnit(chan, bufSize, blockIndex);\n    } else {\n      // reuse the oldest full buffer\n      fetching = full.remove(0);\n      fetching.resetForIndex(blockIndex);\n    }\n    bytesRead += bufSize;\n    fetching.futureBuf = exec.submit(fetching);\n  }"}, {"instruction": "read from input stream, convert it to string, put into this.bodyContent", "input": "Java", "output": "private void dumpInputStream(){\n        //dump request body\n        exchange.startBlocking();\n        InputStream inputStream = exchange.getInputStream();\n        try {\n            if(config.isMaskEnabled() && inputStream.available() != -1) {\n                this.bodyContent = Mask.maskJson(inputStream, \"requestBody\");\n            } else {\n                try {\n                    this.bodyContent = StringUtils.inputStreamToString(inputStream, UTF_8);\n                } catch (IOException e) {\n                    logger.error(e.toString());\n                }\n            }\n        } catch (IOException e) {\n            logger.error(\"undertow inputstream error:\" + e.getMessage());\n        }\n    }"}, {"instruction": "Returns null if fails to decrypt properly.", "input": "Java", "output": "public static String unprotect(String data) {\n        if(data==null)      return null;\n        try {\n            Cipher cipher = Secret.getCipher(ALGORITHM);\n            cipher.init(Cipher.DECRYPT_MODE, DES_KEY);\n            String plainText = new String(cipher.doFinal(Base64.getDecoder().decode(data.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);\n            if(plainText.endsWith(MAGIC))\n                return plainText.substring(0,plainText.length()-3);\n            return null;\n        } catch (GeneralSecurityException | IllegalArgumentException e) {\n            return null;\n        }\n    }"}, {"instruction": "Deletes the path if it is empty. A path can only be empty if it is a directory which does\nnot contain any other directories/files.\n\n@param fileSystem to use\n@param path to be deleted if empty\n@return true if the path could be deleted; otherwise false\n@throws IOException if the delete operation fails", "input": "Java", "output": "public static boolean deletePathIfEmpty(FileSystem fileSystem, Path path) throws IOException {\n\t\tfinal FileStatus[] fileStatuses;\n\n\t\ttry {\n\t\t\tfileStatuses = fileSystem.listStatus(path);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t// path already deleted\n\t\t\treturn true;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t// could not access directory, cannot delete\n\t\t\treturn false;\n\t\t}\n\n\t\t// if there are no more files or if we couldn't list the file status try to delete the path\n\t\tif (fileStatuses == null) {\n\t\t\t// another indicator of \"file not found\"\n\t\t\treturn true;\n\t\t}\n\t\telse if (fileStatuses.length == 0) {\n\t\t\t// attempt to delete the path (will fail and be ignored if the path now contains\n\t\t\t// some files (possibly added concurrently))\n\t\t\treturn fileSystem.delete(path, false);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}"}, {"instruction": "[VARIABLE \"my_value\"]", "input": "Java", "output": "public List<Entity> runQueryOnProperty(String kind, String property, String value) {\n    // TODO change so that it's not necessary to hold the entities in a list for integration testing\n    // [START runQueryOnProperty]\n    StructuredQuery<Entity> query =\n        Query.newEntityQueryBuilder()\n            .setKind(kind)\n            .setFilter(PropertyFilter.eq(property, value))\n            .build();\n    QueryResults<Entity> results = datastore.run(query);\n    List<Entity> entities = Lists.newArrayList();\n    while (results.hasNext()) {\n      Entity result = results.next();\n      // do something with result\n      entities.add(result);\n    }\n    // [END runQueryOnProperty]\n    return entities;\n  }"}, {"instruction": "Perform SPNEGO login using the hadoop shim API if the configuration is available", "input": "Java", "output": "public static UserGroupInformation loginFromSpnegoKeytabAndReturnUGI(HiveConf hiveConf)\n    throws IOException {\n    String principal = hiveConf.getVar(ConfVars.HIVE_SERVER2_SPNEGO_PRINCIPAL);\n    String keyTabFile = hiveConf.getVar(ConfVars.HIVE_SERVER2_SPNEGO_KEYTAB);\n    if (principal.isEmpty() || keyTabFile.isEmpty()) {\n      throw new IOException(\"HiveServer2 SPNEGO principal or keytab is not correctly configured\");\n    } else {\n      return UserGroupInformation.loginUserFromKeytabAndReturnUGI(SecurityUtil.getServerPrincipal(principal, \"0.0.0.0\"), keyTabFile);\n    }\n  }"}, {"instruction": "Adds a table schema under the given key.", "input": "Java", "output": "public void putTableSchema(String key, TableSchema schema) {\n\t\tcheckNotNull(key);\n\t\tcheckNotNull(schema);\n\n\t\tfinal String[] fieldNames = schema.getFieldNames();\n\t\tfinal TypeInformation<?>[] fieldTypes = schema.getFieldTypes();\n\n\t\tfinal List<List<String>> values = new ArrayList<>();\n\t\tfor (int i = 0; i < schema.getFieldCount(); i++) {\n\t\t\tvalues.add(Arrays.asList(fieldNames[i], TypeStringUtils.writeTypeInfo(fieldTypes[i])));\n\t\t}\n\n\t\tputIndexedFixedProperties(\n\t\t\tkey,\n\t\t\tArrays.asList(TABLE_SCHEMA_NAME, TABLE_SCHEMA_TYPE),\n\t\t\tvalues);\n\t}"}, {"instruction": "If the session has a delegation token obtained from the metastore, then cancel it", "input": "Java", "output": "private void cancelDelegationToken() throws HiveSQLException {\n    if (delegationTokenStr != null) {\n      try {\n        Hive.get(getHiveConf()).cancelDelegationToken(delegationTokenStr);\n      } catch (HiveException e) {\n        throw new HiveSQLException(\"Couldn't cancel delegation token\", e);\n      }\n      // close the metastore connection created with this delegation token\n      Hive.closeCurrent();\n    }\n  }"}, {"instruction": "Processes the GRPC compression header which is composed of the compression flag and the outer\nframe length.", "input": "Java", "output": "private void processHeader() {\n    int type = nextFrame.readUnsignedByte();\n    if ((type & RESERVED_MASK) != 0) {\n      throw Status.INTERNAL.withDescription(\n          \"gRPC frame header malformed: reserved bits not zero\")\n          .asRuntimeException();\n    }\n    compressedFlag = (type & COMPRESSED_FLAG_MASK) != 0;\n\n    // Update the required length to include the length of the frame.\n    requiredLength = nextFrame.readInt();\n    if (requiredLength < 0 || requiredLength > maxInboundMessageSize) {\n      throw Status.RESOURCE_EXHAUSTED.withDescription(\n          String.format(\"gRPC message exceeds maximum size %d: %d\",\n              maxInboundMessageSize, requiredLength))\n          .asRuntimeException();\n    }\n\n    currentMessageSeqNo++;\n    statsTraceCtx.inboundMessage(currentMessageSeqNo);\n    transportTracer.reportMessageReceived();\n    // Continue reading the frame body.\n    state = State.BODY;\n  }"}, {"instruction": "Direct method for a complete ContentMatcher instance creation.\n@param xmlInputStream the stream of the XML file that need to be used for initialization\n@return a ContentMatcher instance", "input": "Java", "output": "public static ContentMatcher getInstance(InputStream xmlInputStream) {\r\n        ContentMatcher cm = new ContentMatcher();\r\n\r\n        // Load the pattern definitions from an XML file\r\n        try {\r\n            cm.loadXMLPatternDefinitions(xmlInputStream);\r\n            \r\n        } catch (JDOMException | IOException ex) {\r\n            throw new IllegalArgumentException(\"Failed to initialize the ContentMatcher object using that stream\", ex);\r\n        }\r\n        \r\n        return cm;\r\n    }"}, {"instruction": "Generate a project based on the specified {@link ProjectGenerationRequest}.\n@param request the generation request\n@return an entity defining the project\n@throws IOException if generation fails", "input": "Java", "output": "public ProjectGenerationResponse generate(ProjectGenerationRequest request)\n\t\t\tthrows IOException {\n\t\tLog.info(\"Using service at \" + request.getServiceUrl());\n\t\tInitializrServiceMetadata metadata = loadMetadata(request.getServiceUrl());\n\t\tURI url = request.generateUrl(metadata);\n\t\tCloseableHttpResponse httpResponse = executeProjectGenerationRequest(url);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tvalidateResponse(httpResponse, request.getServiceUrl());\n\t\treturn createResponse(httpResponse, httpEntity);\n\t}"}, {"instruction": "Called once the user logs in. Just forward to the top page.\nUsed only by {@link LegacySecurityRealm}.", "input": "Java", "output": "public void doLoginEntry( StaplerRequest req, StaplerResponse rsp ) throws IOException {\n        if(req.getUserPrincipal()==null) {\n            rsp.sendRedirect2(\"noPrincipal\");\n            return;\n        }\n\n        // TODO fire something in SecurityListener?\n\n        String from = req.getParameter(\"from\");\n        if(from!=null && from.startsWith(\"/\") && !from.equals(\"/loginError\")) {\n            rsp.sendRedirect2(from);    // I'm bit uncomfortable letting users redirected to other sites, make sure the URL falls into this domain\n            return;\n        }\n\n        String url = AbstractProcessingFilter.obtainFullRequestUrl(req);\n        if(url!=null) {\n            // if the login redirect is initiated by Acegi\n            // this should send the user back to where s/he was from.\n            rsp.sendRedirect2(url);\n            return;\n        }\n\n        rsp.sendRedirect2(\".\");\n    }"}, {"instruction": "Returns whether the system needs a restart, and if it is supported\ne.g. { restartRequired: true, restartSupported: false }", "input": "Java", "output": "@Restricted(DoNotUse.class) // WebOnly\n    public HttpResponse doRestartStatus() throws IOException {\n        JSONObject response = new JSONObject();\n        Jenkins jenkins = Jenkins.get();\n        response.put(\"restartRequired\", jenkins.getUpdateCenter().isRestartRequiredForCompletion());\n        response.put(\"restartSupported\", jenkins.getLifecycle().canRestart());\n        return HttpResponses.okJSON(response);\n    }"}, {"instruction": "ScalaTupleComparator", "input": "Java", "output": "protected void privateDuplicate(TupleComparatorBase<T> toClone) {\n\t\t// copy fields and serializer factories\n\t\tthis.keyPositions = toClone.keyPositions;\n\n\t\tthis.serializers = new TypeSerializer[toClone.serializers.length];\n\t\tfor (int i = 0; i < toClone.serializers.length; i++) {\n\t\t\tthis.serializers[i] = toClone.serializers[i].duplicate();\n\t\t}\n\n\t\tthis.comparators = new TypeComparator[toClone.comparators.length];\n\t\tfor (int i = 0; i < toClone.comparators.length; i++) {\n\t\t\tthis.comparators[i] = toClone.comparators[i].duplicate();\n\t\t}\n\n\t\tthis.normalizedKeyLengths = toClone.normalizedKeyLengths;\n\t\tthis.numLeadingNormalizableKeys = toClone.numLeadingNormalizableKeys;\n\t\tthis.normalizableKeyPrefixLen = toClone.normalizableKeyPrefixLen;\n\t\tthis.invertNormKey = toClone.invertNormKey;\n\t}"}, {"instruction": "Determine unauthorized service redirect url.\n\n@param context the context\n@return the uri", "input": "Java", "output": "protected URI determineUnauthorizedServiceRedirectUrl(final RequestContext context) {\n        val redirectUrl = WebUtils.getUnauthorizedRedirectUrlFromFlowScope(context);\n        val currentEvent = context.getCurrentEvent();\n        val eventAttributes = currentEvent.getAttributes();\n        LOGGER.debug(\"Finalizing the unauthorized redirect URL [{}] when processing event [{}] with attributes [{}]\",\n            redirectUrl, currentEvent.getId(), eventAttributes);\n        return redirectUrl;\n    }"}, {"instruction": "Retrieves the property of the given object and returns it as a list of {@link JSONObject}.\n\n<p>\nIf the value doesn't exist, this method returns an empty list. If the value is\na {@link JSONObject}, this method will return a singleton list. If it's a {@link JSONArray},\nthe contents will be returned as a list.\n\n<p>\nBecause of the way structured form submission work, this is convenient way of\nhandling repeated multi-value entries.\n\n@since 1.233", "input": "Java", "output": "public static List<JSONObject> toList(JSONObject parent, String propertyName) {\n        Object v = parent.get(propertyName);\n        if(v==null)\n            return Collections.emptyList();\n        if(v instanceof JSONObject)\n            return Collections.singletonList((JSONObject)v);\n        if(v instanceof JSONArray)\n            return (List)(JSONArray)v;\n\n        throw new IllegalArgumentException();\n    }"}, {"instruction": "Method returns an Optional that will contain a {@link MultifactorAuthenticationProvider} that has the\nsame id as the passed providerId parameter.\n\n@param providerId - the id to match\n@param context    - ApplicationContext\n@return - Optional", "input": "Java", "output": "public static Optional<MultifactorAuthenticationProvider> getMultifactorAuthenticationProviderById(final String providerId,\n                                                                                                       final ApplicationContext context) {\n        return getAvailableMultifactorAuthenticationProviders(context).values()\n            .stream()\n            .filter(p -> p.matches(providerId))\n            .findFirst();\n    }"}, {"instruction": "Extracts a time unit from a time value (milliseconds since midnight).", "input": "Java", "output": "public static int unixTimeExtract(TimeUnitRange range, int time) {\n\t\tassert time >= 0;\n\t\tassert time < MILLIS_PER_DAY;\n\t\tswitch (range) {\n\t\t\tcase HOUR:\n\t\t\t\treturn time / (int) MILLIS_PER_HOUR;\n\t\t\tcase MINUTE:\n\t\t\t\tfinal int minutes = time / (int) MILLIS_PER_MINUTE;\n\t\t\t\treturn minutes % 60;\n\t\t\tcase SECOND:\n\t\t\t\tfinal int seconds = time / (int) MILLIS_PER_SECOND;\n\t\t\t\treturn seconds % 60;\n\t\t\tdefault:\n\t\t\t\tthrow new ValidationException(\"unit \" + range + \" can not be applied to time variable\");\n\t\t}\n\t}"}, {"instruction": "\u5f3a\u884c\u6dfb\u52a0\uff0c\u66ff\u6362\u5df2\u6709\u7684\u9876\u70b9\n\n@param line\n@param vertex", "input": "Java", "output": "public void push(int line, Vertex vertex)\n    {\n        Iterator<Vertex> iterator = vertexes[line].iterator();\n        while (iterator.hasNext())\n        {\n            if (iterator.next().realWord.length() == vertex.realWord.length())\n            {\n                iterator.remove();\n                --size;\n                break;\n            }\n        }\n        vertexes[line].add(vertex);\n        ++size;\n    }"}, {"instruction": "Returns a substring of this.\n@param start the position of first code point\n@param until the position after last code point, exclusive.", "input": "Java", "output": "public UTF8String substring(final int start, final int until) {\n    if (until <= start || start >= numBytes) {\n      return EMPTY_UTF8;\n    }\n\n    int i = 0;\n    int c = 0;\n    while (i < numBytes && c < start) {\n      i += numBytesForFirstByte(getByte(i));\n      c += 1;\n    }\n\n    int j = i;\n    while (i < numBytes && c < until) {\n      i += numBytesForFirstByte(getByte(i));\n      c += 1;\n    }\n\n    if (i > j) {\n      byte[] bytes = new byte[i - j];\n      copyMemory(base, offset + j, bytes, BYTE_ARRAY_OFFSET, i - j);\n      return fromBytes(bytes);\n    } else {\n      return EMPTY_UTF8;\n    }\n  }"}, {"instruction": "The actual class name is irrelevant; this is functionally an enum.\n<p>Creating a {@code writeReplace} does not help much since XStream then just saves:\n{@code <installState class=\"jenkins.install.InstallState$CreateAdminUser\" resolves-to=\"jenkins.install.InstallState\">}\n@see #UNUSED_INNER_CLASSES\n@deprecated Should no longer be used, as {@link Jenkins} now saves only {@link #name}.", "input": "Java", "output": "@Deprecated\n    protected Object readResolve() {\n        // If we get invalid state from the configuration, fallback to unknown\n        if (StringUtils.isBlank(name)) {\n            LOGGER.log(Level.WARNING, \"Read install state with blank name: ''{0}''. It will be ignored\", name);\n            return UNKNOWN;\n        }\n        \n        InstallState state = InstallState.valueOf(name);\n        if (state == null) {\n            LOGGER.log(Level.WARNING, \"Cannot locate an extension point for the state ''{0}''. It will be ignored\", name);\n            return UNKNOWN;\n        }\n        \n        // Otherwise we return the actual state\n        return state;\n    }"}, {"instruction": "*************************************************************************\n* Setters / Getters * *\n************************************************************************", "input": "Java", "output": "public void setControl(Node control) {\n        if (control != null) {\n            this.control = control;\n            this.badge = new Group();\n            this.getChildren().add(control);\n            this.getChildren().add(badge);\n\n            // if the control got resized the badge must be rest\n            if (control instanceof Region) {\n                ((Region) control).widthProperty().addListener((o, oldVal, newVal) -> refreshBadge());\n                ((Region) control).heightProperty().addListener((o, oldVal, newVal) -> refreshBadge());\n            }\n            text.addListener((o, oldVal, newVal) -> refreshBadge());\n        }\n    }"}, {"instruction": "Closes the Operation Queue and fails all Operations in it with the given exception.\n\n@param causingException The exception to fail with. If null, it will default to ObjectClosedException.", "input": "Java", "output": "private void closeQueue(Throwable causingException) {\n        // Close the operation queue and extract any outstanding Operations from it.\n        Collection<CompletableOperation> remainingOperations = this.operationQueue.close();\n        if (remainingOperations != null && remainingOperations.size() > 0) {\n            // If any outstanding Operations were left in the queue, they need to be failed.\n            // If no other cause was passed, assume we are closing the queue because we are shutting down.\n            Throwable failException = causingException != null ? causingException : new CancellationException();\n            cancelIncompleteOperations(remainingOperations, failException);\n        }\n\n        // The commit queue will auto-close when we are done and it itself is empty. We just need to unblock it in case\n        // it was idle and waiting on a pending take() operation.\n        this.commitQueue.cancelPendingTake();\n    }"}, {"instruction": "Sign the given content using this Algorithm instance.\n\n@param headerBytes an array of bytes representing the base64 encoded header content to be verified against the signature.\n@param payloadBytes an array of bytes representing the base64 encoded payload content to be verified against the signature.\n@return the signature in a base64 encoded array of bytes\n@throws SignatureGenerationException if the Key is invalid.", "input": "Java", "output": "public byte[] sign(byte[] headerBytes, byte[] payloadBytes) throws SignatureGenerationException {\n    \t// default implementation; keep around until sign(byte[]) method is removed\n    \tbyte[] contentBytes = new byte[headerBytes.length + 1 + payloadBytes.length];\n    \t\n    \tSystem.arraycopy(headerBytes, 0, contentBytes, 0, headerBytes.length);\n    \tcontentBytes[headerBytes.length] = (byte)'.';\n    \tSystem.arraycopy(payloadBytes, 0, contentBytes, headerBytes.length + 1, payloadBytes.length);\n    \t\n    \treturn sign(contentBytes);\n    }"}, {"instruction": "Power to an integer.\n\n@param exponent the exponent.\n@return this value raised to the power given by the exponent.\nIf the exponent is 0, the value 1 is returned.", "input": "Java", "output": "public Rational pow(BigInteger exponent) throws NumberFormatException {\n        /* test for overflow */\n        if (exponent.compareTo(MAX_INT) == 1) {\n            throw new NumberFormatException(\"Exponent \" + exponent.toString() + \" too large.\");\n        }\n        if (exponent.compareTo(MIN_INT) == -1) {\n            throw new NumberFormatException(\"Exponent \" + exponent.toString() + \" too small.\");\n        }\n        /* promote to the simpler interface above */\n        return pow(exponent.intValue());\n    }"}, {"instruction": "Applies the given window function to each window. The window function is called for each\nevaluation of the window. The output of the window function is\ninterpreted as a regular non-windowed stream.\n\n<p>Note that this function requires that all data in the windows is buffered until the window\nis evaluated, as the function provides no means of incremental aggregation.\n\n@param function The process window function.\n@return The data stream that is the result of applying the window function to the window.", "input": "Java", "output": "@PublicEvolving\n\tpublic <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {\n\t\tString callLocation = Utils.getCallLocationName();\n\t\tfunction = input.getExecutionEnvironment().clean(function);\n\t\tTypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType());\n\t\treturn apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation);\n\t}"}, {"instruction": "Gets authentication provider for service.\n\n@param service the service\n@return the authentication provider for service", "input": "Java", "output": "public Collection<MultifactorAuthenticationProvider> getAuthenticationProviderForService(final RegisteredService service) {\n        val policy = service.getMultifactorPolicy();\n        if (policy != null) {\n            return policy.getMultifactorAuthenticationProviders().stream()\n                .map(MultifactorAuthenticationUtils::getMultifactorAuthenticationProviderFromApplicationContext)\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .collect(Collectors.toSet());\n        }\n        return null;\n    }"}, {"instruction": "A convenience method that performs click-and-hold at the location of the source element,\nmoves by a given offset, then releases the mouse.\n\n@param source element to emulate button down at.\n@param xOffset horizontal move offset.\n@param yOffset vertical move offset.\n@return A self reference.", "input": "Java", "output": "public Actions dragAndDropBy(WebElement source, int xOffset, int yOffset) {\n    if (isBuildingActions()) {\n      action.addAction(new ClickAndHoldAction(jsonMouse, (Locatable) source));\n      action.addAction(new MoveToOffsetAction(jsonMouse, null, xOffset, yOffset));\n      action.addAction(new ButtonReleaseAction(jsonMouse, null));\n    }\n\n    return moveInTicks(source, 0, 0)\n        .tick(defaultMouse.createPointerDown(LEFT.asArg()))\n        .tick(defaultMouse.createPointerMove(Duration.ofMillis(250), Origin.pointer(), xOffset, yOffset))\n        .tick(defaultMouse.createPointerUp(LEFT.asArg()));\n  }"}, {"instruction": "This method removes all cached constants", "input": "Java", "output": "@Override\n    public void purgeConstants() {\n        buffersCache = new HashMap<>();\n\n        protector.purgeProtector();\n\n        resetHappened = true;\n        logger.info(\"Resetting Constants...\");\n\n        for (Integer device : constantOffsets.keySet()) {\n            constantOffsets.get(device).set(0);\n            buffersCache.put(device, new ConcurrentHashMap<ArrayDescriptor, DataBuffer>());\n        }\n    }"}, {"instruction": "\u521b\u5efa\u5e26cluster\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\uff0c\u81ea\u52a8\u5b8c\u6210failover\u5207\u6362\uff0c\u670d\u52a1\u5668\u5217\u8868\u81ea\u52a8\u626b\u63cf\n\n@param zkServers\n@param destination\n@param username\n@param password\n@return", "input": "Java", "output": "public static CanalConnector newClusterConnector(String zkServers, String destination, String username,\n                                                     String password) {\n        ClusterCanalConnector canalConnector = new ClusterCanalConnector(username,\n            password,\n            destination,\n            new ClusterNodeAccessStrategy(destination, ZkClientx.getZkClient(zkServers)));\n        canalConnector.setSoTimeout(60 * 1000);\n        canalConnector.setIdleTimeout(60 * 60 * 1000);\n        return canalConnector;\n    }"}, {"instruction": "Check if job is paused.\n\n@return true if job is paused, false otherwise.", "input": "Java", "output": "public synchronized boolean isJobPaused(final String jobName, final String groupName)\n      throws SchedulerException {\n    if (!ifJobExist(jobName, groupName)) {\n      throw new SchedulerException(String.format(\"Job (job name %s, group name %s) doesn't \"\n          + \"exist'\", jobName, groupName));\n    }\n    final JobKey jobKey = new JobKey(jobName, groupName);\n    final JobDetail jobDetail = this.scheduler.getJobDetail(jobKey);\n    final List<? extends Trigger> triggers = this.scheduler.getTriggersOfJob(jobDetail.getKey());\n    for (final Trigger trigger : triggers) {\n      final TriggerState triggerState = this.scheduler.getTriggerState(trigger.getKey());\n      if (TriggerState.PAUSED.equals(triggerState)) {\n        return true;\n      }\n    }\n    return false;\n  }"}, {"instruction": "------------------------------------------------------------------------", "input": "Java", "output": "@Override\n\tpublic void onTaskFailure(Execution taskExecution, Throwable cause) {\n\t\tfinal ExecutionVertex ev = taskExecution.getVertex();\n\t\tfinal FailoverRegion failoverRegion = vertexToRegion.get(ev);\n\n\t\tif (failoverRegion == null) {\n\t\t\texecutionGraph.failGlobal(new FlinkException(\n\t\t\t\t\t\"Can not find a failover region for the execution \" + ev.getTaskNameWithSubtaskIndex(), cause));\n\t\t}\n\t\telse {\n\t\t\tLOG.info(\"Recovering task failure for {} #{} ({}) via restart of failover region\",\n\t\t\t\t\ttaskExecution.getVertex().getTaskNameWithSubtaskIndex(),\n\t\t\t\t\ttaskExecution.getAttemptNumber(),\n\t\t\t\t\ttaskExecution.getAttemptId());\n\n\t\t\tfailoverRegion.onExecutionFail(taskExecution, cause);\n\t\t}\n\t}"}, {"instruction": "Specifies that each entry should be automatically removed from the cache once a fixed duration\nhas elapsed after the entry's creation, the most recent replacement of its value, or its last\nread. Access time is reset by all cache read and write operations (including\n{@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by operations\non the collection-views of {@link Cache#asMap}.\n<p>\nExpired entries may be counted in {@link Cache#estimatedSize()}, but will never be visible to\nread or write operations. Expired entries are cleaned up as part of the routine maintenance\ndescribed in the class javadoc.\n<p>\nIf you can represent the duration as a {@link java.time.Duration} (which should be preferred\nwhen feasible), use {@link #expireAfterAccess(Duration)} instead.\n\n@param duration the length of time after an entry is last accessed that it should be\nautomatically removed\n@param unit the unit that {@code duration} is expressed in\n@return this {@code Caffeine} instance (for chaining)\n@throws IllegalArgumentException if {@code duration} is negative\n@throws IllegalStateException if the time to idle or variable expiration was already set", "input": "Java", "output": "@NonNull\n  public Caffeine<K, V> expireAfterAccess(@NonNegative long duration, @NonNull TimeUnit unit) {\n    requireState(expireAfterAccessNanos == UNSET_INT,\n        \"expireAfterAccess was already set to %s ns\", expireAfterAccessNanos);\n    requireState(expiry == null, \"expireAfterAccess may not be used with variable expiration\");\n    requireArgument(duration >= 0, \"duration cannot be negative: %s %s\", duration, unit);\n    this.expireAfterAccessNanos = unit.toNanos(duration);\n    return this;\n  }"}, {"instruction": "Return the currently-active lock posses for some task.\n\n@param task task for which to locate locks", "input": "Java", "output": "private List<TaskLockPosse> findLockPossesForTask(final Task task)\n  {\n    giant.lock();\n\n    try {\n      // Scan through all locks for this datasource\n      final NavigableMap<DateTime, SortedMap<Interval, List<TaskLockPosse>>> dsRunning = running.get(task.getDataSource());\n      if (dsRunning == null) {\n        return ImmutableList.of();\n      } else {\n        return dsRunning.values().stream()\n                        .flatMap(map -> map.values().stream())\n                        .flatMap(Collection::stream)\n                        .filter(taskLockPosse -> taskLockPosse.containsTask(task))\n                        .collect(Collectors.toList());\n      }\n    }\n    finally {\n      giant.unlock();\n    }\n  }"}, {"instruction": "Merge the absolute paths of source paths into the list of destination paths\n\n@param destinationPaths the path list which the source paths will be merged into\n@param sourcePaths source paths\n@param rootPath defined root path for source paths when they are not absolute path", "input": "Java", "output": "public static void mergeTypeClassPaths(\n      List<String> destinationPaths, final List<String> sourcePaths, final String rootPath) {\n    if (sourcePaths != null) {\n      for (String jar : sourcePaths) {\n        File file = new File(jar);\n        if (!file.isAbsolute()) {\n          file = new File(rootPath + File.separatorChar + jar);\n        }\n\n        String path = file.getAbsolutePath();\n        if (!destinationPaths.contains(path)) {\n          destinationPaths.add(path);\n        }\n      }\n    }\n  }"}, {"instruction": "Changes the icon size by changing the cookie", "input": "Java", "output": "public void doIconSize( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n        String qs = req.getQueryString();\n        if(qs==null)\n            throw new ServletException();\n        Cookie cookie = new Cookie(\"iconSize\", Functions.validateIconSize(qs));\n        cookie.setMaxAge(/* ~4 mo. */9999999); // #762\n        rsp.addCookie(cookie);\n        String ref = req.getHeader(\"Referer\");\n        if(ref==null)   ref=\".\";\n        rsp.sendRedirect2(ref);\n    }"}, {"instruction": "Adding the browser described by the capability, automatically finding out what platform the\nnode is launched from\n\n@param cap       describing the browser\n@param instances number of times this browser can be started on the node.", "input": "Java", "output": "public void addBrowser(DesiredCapabilities cap, int instances) {\n    String s = cap.getBrowserName();\n    if (s == null || \"\".equals(s)) {\n      throw new InvalidParameterException(cap + \" does seems to be a valid browser.\");\n    }\n    if (cap.getPlatform() == null) {\n      cap.setPlatform(Platform.getCurrent());\n    }\n    cap.setCapability(RegistrationRequest.MAX_INSTANCES, instances);\n    registrationRequest.getConfiguration().capabilities.add(cap);\n    registrationRequest.getConfiguration().fixUpCapabilities();\n  }"}, {"instruction": "Reverses the migration, in case you want to revert to the older format.\n@param args one parameter, {@code $JENKINS_HOME}", "input": "Java", "output": "public static void main(String... args) throws Exception {\n        if (args.length != 1) {\n            throw new Exception(\"pass one parameter, $JENKINS_HOME\");\n        }\n        File root = new File(args[0]);\n        File jobs = new File(root, \"jobs\");\n        if (!jobs.isDirectory()) {\n            throw new FileNotFoundException(\"no such $JENKINS_HOME \" + root);\n        }\n        new RunIdMigrator().unmigrateJobsDir(jobs);\n    }"}, {"instruction": "Finds all unused stubs for given mocks\n\n@param mocks full list of mocks", "input": "Java", "output": "public List<Invocation> find(List<?> mocks) {\n        List<Invocation> unused = new LinkedList<Invocation>();\n        for (Object mock : mocks) {\n            List<Stubbing> fromSingleMock = MockUtil.getInvocationContainer(mock).getStubbingsDescending();\n            for(Stubbing s : fromSingleMock) {\n                if (!s.wasUsed()) {\n                     unused.add(s.getInvocation());\n                }\n            }\n        }\n        return unused;\n    }"}, {"instruction": "Gets the zone to pick up for this instance.", "input": "Java", "output": "private static int getZoneOffset(String myZone, boolean preferSameZone, String[] availZones) {\n        for (int i = 0; i < availZones.length; i++) {\n            if (myZone != null && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone)) {\n                return i;\n            }\n        }\n        logger.warn(\"DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {},\" +\n                \" preferSameZone - {}. Defaulting to {}\", myZone, preferSameZone, availZones[0]);\n\n        return 0;\n    }"}, {"instruction": "Awaits the phase of this phaser to advance from the given phase\nvalue, throwing {@code InterruptedException} if interrupted\nwhile waiting, or returning immediately if the current phase is\nnot equal to the given phase value or this phaser is\nterminated.\n\n@param phase an arrival phase number, or negative value if\nterminated; this argument is normally the value returned by a\nprevious call to {@code arrive} or {@code arriveAndDeregister}.\n@return the next arrival phase number, or the argument if it is\nnegative, or the (negative) {@linkplain #getPhase() current phase}\nif terminated\n@throws InterruptedException if thread interrupted while waiting", "input": "Java", "output": "public int awaitAdvanceInterruptibly(int phase)\n        throws InterruptedException {\n        final Phaser root = this.root;\n        long s = (root == this) ? state : reconcileState();\n        int p = (int)(s >>> PHASE_SHIFT);\n        if (phase < 0)\n            return phase;\n        if (p == phase) {\n            QNode node = new QNode(this, phase, true, false, 0L);\n            p = root.internalAwaitAdvance(phase, node);\n            if (node.wasInterrupted)\n                throw new InterruptedException();\n        }\n        return p;\n    }"}, {"instruction": "Handle SSO HEAD profile redirect request (not allowed).\n\n@param response the response\n@param request  the request", "input": "Java", "output": "@RequestMapping(path = SamlIdPConstants.ENDPOINT_SAML2_SSO_PROFILE_REDIRECT, method = {RequestMethod.HEAD})\n    public void handleSaml2ProfileSsoRedirectHeadRequest(final HttpServletResponse response,\n                                                         final HttpServletRequest request) {\n        LOGGER.info(\"Endpoint [{}] called with HTTP HEAD returning 400 Bad Request\", SamlIdPConstants.ENDPOINT_SAML2_SSO_PROFILE_REDIRECT);\n        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }"}, {"instruction": "Copies all the resources for the given target directory. The base resource serves to calculate the relative\npath such that the directory structure is maintained.\n\n@param base      The base resource\n@param resources The resources to copy\n@param targetDir The target directory\n@throws IOException if there is an error", "input": "Java", "output": "public static void copyAll(Resource base, Resource[] resources, File targetDir) throws IOException {\n        final URL baseUrl = base.getURL();\n        for (Resource resource : resources) {\n            final InputStream input = resource.getInputStream();\n            final File target = new File(targetDir, resource.getURL().toString().substring(baseUrl.toString().length()));\n            copy(new BufferedInputStream(input), new BufferedOutputStream(Files.newOutputStream(target.toPath())));\n        }\n    }"}, {"instruction": "Utility method that can be used by subclasses wishing to combine the specified\n{@link ServletContextInitializer} parameters with those defined in this instance.\n@param initializers the initializers to merge\n@return a complete set of merged initializers (with the specified parameters\nappearing first)", "input": "Java", "output": "protected final ServletContextInitializer[] mergeInitializers(\n\t\t\tServletContextInitializer... initializers) {\n\t\tList<ServletContextInitializer> mergedInitializers = new ArrayList<>();\n\t\tmergedInitializers.add((servletContext) -> this.initParameters\n\t\t\t\t.forEach(servletContext::setInitParameter));\n\t\tmergedInitializers.add(new SessionConfiguringInitializer(this.session));\n\t\tmergedInitializers.addAll(Arrays.asList(initializers));\n\t\tmergedInitializers.addAll(this.initializers);\n\t\treturn mergedInitializers.toArray(new ServletContextInitializer[0]);\n\t}"}, {"instruction": "Construct a matrix from a copy of a 2-D array.\n\n@param A Two-dimensional array of doubles.\n@throws IllegalArgumentException All rows must have the same length", "input": "Java", "output": "public static Matrix constructWithCopy(double[][] A)\n    {\n        int m = A.length;\n        int n = A[0].length;\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            if (A[i].length != n)\n            {\n                throw new IllegalArgumentException\n                        (\"All rows must have the same length.\");\n            }\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }"}, {"instruction": "Cancels those Operations in the given list that have not yet completed with the given exception.", "input": "Java", "output": "private void cancelIncompleteOperations(Iterable<CompletableOperation> operations, Throwable failException) {\n        assert failException != null : \"no exception to set\";\n        int cancelCount = 0;\n        for (CompletableOperation o : operations) {\n            if (!o.isDone()) {\n                this.state.failOperation(o, failException);\n                cancelCount++;\n            }\n        }\n\n        log.warn(\"{}: Cancelling {} operations with exception: {}.\", this.traceObjectId, cancelCount, failException.toString());\n    }"}, {"instruction": "Create default global exception handlers.\n\n@param flow the flow", "input": "Java", "output": "protected void createDefaultEndStates(final Flow flow) {\n        createRedirectUnauthorizedServiceUrlEndState(flow);\n        createServiceErrorEndState(flow);\n        createRedirectEndState(flow);\n        createPostEndState(flow);\n        createInjectHeadersActionState(flow);\n        createGenericLoginSuccessEndState(flow);\n        createServiceWarningViewState(flow);\n        createEndWebflowEndState(flow);\n    }"}, {"instruction": "Auto-widen the scalar to every element of the frame", "input": "Java", "output": "private ValFrame scalar_op_frame(final double d, Frame fr) {\n    Frame res = new MRTask() {\n      @Override\n      public void map(Chunk[] chks, NewChunk[] cress) {\n        for (int c = 0; c < chks.length; c++) {\n          Chunk chk = chks[c];\n          NewChunk cres = cress[c];\n          for (int i = 0; i < chk._len; i++)\n            cres.addNum(op(d, chk.atd(i)));\n        }\n      }\n    }.doAll(fr.numCols(), Vec.T_NUM, fr).outputFrame(fr._names, null);\n    return cleanCategorical(fr, res); // Cleanup categorical misuse\n  }"}, {"instruction": "Retrieve a workflow by workflow id\n\n@param workflowId   the id of the workflow\n@param includeTasks specify if the tasks in the workflow need to be returned\n@return the requested workflow", "input": "Java", "output": "public Workflow getWorkflow(String workflowId, boolean includeTasks) {\n        Preconditions.checkArgument(StringUtils.isNotBlank(workflowId), \"workflow id cannot be blank\");\n        WorkflowPb.Workflow workflow = stub.getWorkflowStatus(\n                WorkflowServicePb.GetWorkflowStatusRequest.newBuilder()\n                        .setWorkflowId(workflowId)\n                        .setIncludeTasks(includeTasks)\n                        .build()\n        );\n        return protoMapper.fromProto(workflow);\n    }"}, {"instruction": "For the given input shape/type for the network, return a list of activation sizes for each layer in the network.<br>\ni.e., list.get(i) is the output activation sizes for layer i\n\n@param inputType Input type for the network\n@return A lits of activation types for the network, indexed by layer number", "input": "Java", "output": "public List<InputType> getLayerActivationTypes(@NonNull InputType inputType) {\n        List<InputType> out = new ArrayList<>();\n        int nLayers = confs.size();\n        for (int i = 0; i < nLayers; i++) {\n            InputPreProcessor preproc = getInputPreProcess(i);\n            if (preproc != null) {\n                inputType = preproc.getOutputType(inputType);\n            }\n\n            inputType = confs.get(i).getLayer().getOutputType(i, inputType);\n            out.add(inputType);\n        }\n        return out;\n    }"}, {"instruction": "\u5faa\u73af\u5411\u4e0a\u8f6c\u578b, \u83b7\u53d6\u5bf9\u8c61\u7684DeclaredField, \u5e76\u5f3a\u5236\u8bbe\u7f6e\u4e3a\u53ef\u8bbf\u95ee.\n\n\u5982\u5411\u4e0a\u8f6c\u578b\u5230Object\u4ecd\u65e0\u6cd5\u627e\u5230, \u8fd4\u56denull.\n\n\u56e0\u4e3agetFiled()\u4e0d\u80fd\u83b7\u53d6\u7236\u7c7b\u7684private\u5c5e\u6027, \u56e0\u6b64\u91c7\u7528\u5faa\u73af\u5411\u4e0a\u7684getDeclaredField();", "input": "Java", "output": "public static Field getField(final Class clazz, final String fieldName) {\n\t\tValidate.notNull(clazz, \"clazz can't be null\");\n\t\tValidate.notEmpty(fieldName, \"fieldName can't be blank\");\n\t\tfor (Class<?> superClass = clazz; superClass != Object.class; superClass = superClass.getSuperclass()) {\n\t\t\ttry {\n\t\t\t\tField field = superClass.getDeclaredField(fieldName);\n\t\t\t\tmakeAccessible(field);\n\t\t\t\treturn field;\n\t\t\t} catch (NoSuchFieldException e) {// NOSONAR\n\t\t\t\t// Field\u4e0d\u5728\u5f53\u524d\u7c7b\u5b9a\u4e49,\u7ee7\u7eed\u5411\u4e0a\u8f6c\u578b\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"}, {"instruction": "\u7528\u4e8eModel\u5bf9\u8c61\u8f6c\u5316\u4e3aDO\u5bf9\u8c61", "input": "Java", "output": "private DataMatrixDO modelToDo(DataMatrix matrix) {\n        DataMatrixDO matrixDo = new DataMatrixDO();\n        try {\n            matrixDo.setId(matrix.getId());\n            matrixDo.setGroupKey(matrix.getGroupKey());\n            matrixDo.setDescription(matrix.getDescription());\n            matrixDo.setMaster(matrix.getMaster());\n            matrixDo.setSlave(matrix.getSlave());\n            matrixDo.setGmtCreate(matrix.getGmtCreate());\n            matrixDo.setGmtModified(matrix.getGmtModified());\n        } catch (Exception e) {\n            logger.error(\"ERROR ## change the matrix Model to Do has an exception\");\n            throw new ManagerException(e);\n        }\n        return matrixDo;\n    }"}, {"instruction": "Gets json web key from jwks.\n\n@param jwks the jwks\n@return the json web key from jwks", "input": "Java", "output": "public static RsaJsonWebKey getJsonWebKeyFromJsonWebKeySet(final JsonWebKeySet jwks) {\n        if (jwks.getJsonWebKeys().isEmpty()) {\n            LOGGER.warn(\"No JSON web keys are available in the keystore\");\n            return null;\n        }\n\n        val key = (RsaJsonWebKey) jwks.getJsonWebKeys().get(0);\n        if (StringUtils.isBlank(key.getAlgorithm())) {\n            LOGGER.warn(\"Located JSON web key [{}] has no algorithm defined\", key);\n        }\n        if (StringUtils.isBlank(key.getKeyId())) {\n            LOGGER.warn(\"Located JSON web key [{}] has no key id defined\", key);\n        }\n\n        if (key.getPublicKey() == null) {\n            LOGGER.warn(\"Located JSON web key [{}] has no public key\", key);\n            return null;\n        }\n        return key;\n    }"}, {"instruction": "Convert a class name with underscores to the corresponding column name using \"_\". A name like \"CustomerNumber\"\nclass name would match a \"CUSTOMER_NUMBER\".\n\n@param name the class name to be converted\n@return the name using \"_\"", "input": "Java", "output": "public static String convertClassNameToUnderscoreName(String name) {\n        StringBuilder result = new StringBuilder();\n\n        if (name != null) {\n            int len = name.length();\n\n            if (len > 0) {\n                result.append(name.charAt(0));\n\n                for (int i = 1; i < len; i++) {\n                    if (true == Character.isUpperCase(name.charAt(i))) {\n                        result.append('_');\n                    }\n\n                    result.append(name.charAt(i));\n                }\n            }\n        }\n\n        return result.toString().toUpperCase();\n    }"}, {"instruction": "This private field in the superclass needs to be reset so that we can continue reporting leaks even\nif they're duplicates. This is ugly but ideally should not be called frequently (or at all).", "input": "Java", "output": "private void resetReportedLeaks() {\n        try {\n            Field reportedLeaks = ResourceLeakDetector.class.getDeclaredField(\"reportedLeaks\");\n            reportedLeaks.setAccessible(true);\n            Object f = reportedLeaks.get(this);\n            if (f instanceof Map) {\n                ((Map) f).clear();\n            }\n        }\n        catch (Throwable t) {\n            // do nothing\n        }\n    }"}, {"instruction": "\u89e3\u5bc6\n\n@param data SM2\u5bc6\u6587\uff0c\u5b9e\u9645\u5305\u542b\u4e09\u90e8\u5206\uff1aECC\u516c\u94a5\u3001\u771f\u6b63\u7684\u5bc6\u6587\u3001\u516c\u94a5\u548c\u539f\u6587\u7684SM3-HASH\u503c\n@param keyType \u79c1\u94a5\u6216\u516c\u94a5 {@link KeyType}\n@return \u52a0\u5bc6\u540e\u7684bytes\n@throws CryptoException \u5305\u62ecInvalidKeyException\u548cInvalidCipherTextException\u7684\u5305\u88c5\u5f02\u5e38", "input": "Java", "output": "@Override\r\n\tpublic byte[] decrypt(byte[] data, KeyType keyType) throws CryptoException {\r\n\t\tif (KeyType.PrivateKey != keyType) {\r\n\t\t\tthrow new IllegalArgumentException(\"Decrypt is only support by private key\");\r\n\t\t}\r\n\t\tckeckKey(keyType);\r\n\r\n\t\tlock.lock();\r\n\t\tfinal SM2Engine engine = getEngine();\r\n\t\ttry {\r\n\t\t\tengine.init(false, getCipherParameters(keyType));\r\n\t\t\treturn engine.processBlock(data, 0, data.length);\r\n\t\t} finally {\r\n\t\t\tlock.unlock();\r\n\t\t}\r\n\t}"}, {"instruction": "Deregister the given epoll from this {@link EventLoop}.", "input": "Java", "output": "void remove(AbstractEpollChannel ch) throws IOException {\n        assert inEventLoop();\n\n        if (ch.isOpen()) {\n            int fd = ch.socket.intValue();\n            if (channels.remove(fd) != null) {\n                // Remove the epoll. This is only needed if it's still open as otherwise it will be automatically\n                // removed once the file-descriptor is closed.\n                Native.epollCtlDel(epollFd.intValue(), ch.fd().intValue());\n            }\n        }\n    }"}, {"instruction": "Destroy is called after the produce or consume phase of a task finishes.", "input": "Java", "output": "@Override\n\tpublic void lazyDestroy() {\n\t\t// NOTE: if you change this logic, be sure to update recycle() as well!\n\t\tsynchronized (availableMemorySegments) {\n\t\t\tif (!isDestroyed) {\n\t\t\t\tMemorySegment segment;\n\t\t\t\twhile ((segment = availableMemorySegments.poll()) != null) {\n\t\t\t\t\treturnMemorySegment(segment);\n\t\t\t\t}\n\n\t\t\t\tBufferListener listener;\n\t\t\t\twhile ((listener = registeredListeners.poll()) != null) {\n\t\t\t\t\tlistener.notifyBufferDestroyed();\n\t\t\t\t}\n\n\t\t\t\tisDestroyed = true;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tnetworkBufferPool.destroyBufferPool(this);\n\t\t} catch (IOException e) {\n\t\t\tExceptionUtils.rethrow(e);\n\t\t}\n\t}"}, {"instruction": "Sets the Active SegmentChunk handle.\n\n@param handle The handle. Must not be read-only and for the last SegmentChunk.", "input": "Java", "output": "synchronized void setActiveChunkHandle(SegmentHandle handle) {\n        Preconditions.checkArgument(handle == null || !handle.isReadOnly(), \"Active SegmentChunk handle cannot be readonly.\");\n        SegmentChunk last = lastChunk();\n        Preconditions.checkState(last != null, \"Cannot set an Active SegmentChunk handle when there are no SegmentChunks.\");\n        Preconditions.checkArgument(handle == null || handle.getSegmentName().equals(last.getName()),\n                \"Active SegmentChunk handle must be for the last SegmentChunk.\");\n        this.activeChunkHandle = handle;\n    }"}, {"instruction": "Compute the broadcast rules according to:\nhttps://docs.scipy.org/doc/numpy-1.10.1/user/basics.broadcasting.html\n\nNote that the array can be null if the arrays are already equal\nin shape.\n\nThis function should be used in conjunction with\nthe shape ops.\n\n@param left the left array\n@param right the right array (the array to be broadcasted\n@return the broadcast dimensions if any", "input": "Java", "output": "public static int[] getBroadcastDimensions(int[] left,int[] right) {\n        if(Arrays.equals(left,right))\n            return null;\n\n        int n = Math.min(left.length,right.length);\n        List<Integer> dims = new ArrayList<>();\n        int leftIdx = left.length - 1;\n        int rightIdx = right.length - 1;\n        for(int i = n - 1; i >= 0; i--) {\n            if(left[leftIdx] != right[rightIdx] && right[rightIdx] == 1 || left[leftIdx] == 1) {\n                dims.add(i);\n            }\n            else if(left[leftIdx] != right[rightIdx]) {\n                throw new IllegalArgumentException(\"Unable to broadcast dimension \" + i + \" due to shape mismatch. Right shape must be 1. \"\n                        + \"Left array shape: \" + Arrays.toString(left) + \", right array shape: \" + Arrays.toString(right));\n            }\n\n            leftIdx--;\n            rightIdx--;\n        }\n\n        Collections.reverse(dims);\n        return Ints.toArray(dims);\n    }"}, {"instruction": "@deprecated Use {@link #getTimeMillis(CharSequence)} instead.\n\nReturns the date header value with the specified header name.  If\nthere are more than one header value for the specified header name, the\nfirst value is returned.\n\n@return the header value\n@throws ParseException\nif there is no such header or the header value is not a formatted date", "input": "Java", "output": "@Deprecated\n    public static Date getDateHeader(HttpMessage message, CharSequence name) throws ParseException {\n        String value = message.headers().get(name);\n        if (value == null) {\n            throw new ParseException(\"header not found: \" + name, 0);\n        }\n        Date date = DateFormatter.parseHttpDate(value);\n        if (date == null) {\n            throw new ParseException(\"header can't be parsed into a Date: \" + value, 0);\n        }\n        return date;\n    }"}, {"instruction": "Set the maximum value. The maximum value is an acceptable value if and\nonly if inclusive is set to true.\n\n@param maximumValue the maximum value\n@param inclusive whether the maximum value is a valid value\n@return this", "input": "Java", "output": "public DoubleParameter setMaximumValue(double maximumValue, boolean inclusive) {\n\t\tif (hasDefaultValue) {\n\t\t\tif (inclusive) {\n\t\t\t\tUtil.checkParameter(maximumValue >= defaultValue,\n\t\t\t\t\t\"Maximum value (\" + maximumValue + \") must be greater than or equal to default (\" + defaultValue + \")\");\n\t\t\t} else {\n\t\t\t\tUtil.checkParameter(maximumValue > defaultValue,\n\t\t\t\t\t\"Maximum value (\" + maximumValue + \") must be greater than default (\" + defaultValue + \")\");\n\t\t\t}\n\t\t} else if (hasMinimumValue) {\n\t\t\tif (inclusive && minimumValueInclusive) {\n\t\t\t\tUtil.checkParameter(maximumValue >= minimumValue,\n\t\t\t\t\t\"Maximum value (\" + maximumValue + \") must be greater than or equal to minimum (\" + minimumValue + \")\");\n\t\t\t} else {\n\t\t\t\tUtil.checkParameter(maximumValue > minimumValue,\n\t\t\t\t\t\"Maximum value (\" + maximumValue + \") must be greater than minimum (\" + minimumValue + \")\");\n\t\t\t}\n\t\t}\n\n\t\tthis.hasMaximumValue = true;\n\t\tthis.maximumValue = maximumValue;\n\t\tthis.maximumValueInclusive = inclusive;\n\n\t\treturn this;\n\t}"}, {"instruction": "Executes one instance of the task, or queues it up at most once should the task be currently running.", "input": "Java", "output": "void runAsync() {\n        // Determine if a task is running. If so, record the fact we want to have it run again, otherwise reserve our spot.\n        synchronized (this) {\n            Exceptions.checkNotClosed(this.closed, this);\n            if (this.running) {\n                this.runAgain = true;\n                return;\n            }\n\n            this.running = true;\n        }\n\n        // Execute the task.\n        runInternal();\n    }"}, {"instruction": "Get the offset associated with an address encoded by\n{@link TaskMemoryManager#encodePageNumberAndOffset(MemoryBlock, long)}", "input": "Java", "output": "public long getOffsetInPage(long pagePlusOffsetAddress) {\n    final long offsetInPage = decodeOffset(pagePlusOffsetAddress);\n    if (tungstenMemoryMode == MemoryMode.ON_HEAP) {\n      return offsetInPage;\n    } else {\n      // In off-heap mode, an offset is an absolute address. In encodePageNumberAndOffset, we\n      // converted the absolute address into a relative address. Here, we invert that operation:\n      final int pageNumber = decodePageNumber(pagePlusOffsetAddress);\n      assert (pageNumber >= 0 && pageNumber < PAGE_TABLE_SIZE);\n      final MemoryBlock page = pageTable[pageNumber];\n      assert (page != null);\n      return page.getBaseOffset() + offsetInPage;\n    }\n  }"}, {"instruction": "Update the AllServer list in the LoadBalancer if necessary and enabled\n\n@param ls", "input": "Java", "output": "protected void updateAllServerList(List<T> ls) {\n        // other threads might be doing this - in which case, we pass\n        if (serverListUpdateInProgress.compareAndSet(false, true)) {\n            try {\n                for (T s : ls) {\n                    s.setAlive(true); // set so that clients can start using these\n                                      // servers right away instead\n                                      // of having to wait out the ping cycle.\n                }\n                setServersList(ls);\n                super.forceQuickPing();\n            } finally {\n                serverListUpdateInProgress.set(false);\n            }\n        }\n    }"}, {"instruction": "Just record that this workspace is being used, without paying any attention to the synchronization support.", "input": "Java", "output": "public synchronized Lease record(@Nonnull FilePath p) {\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.log(Level.FINE, \"recorded \" + p, new Throwable(\"from \" + this));\n        }\n        Entry old = inUse.put(p.getRemote(), new Entry(p, false));\n        if (old!=null)\n            throw new AssertionError(\"Tried to record a workspace already owned: \"+old);\n        return lease(p);\n    }"}, {"instruction": "Checks whether {@link DateTimeFormat} pattern contains time zone-related field.", "input": "Java", "output": "private static boolean datetimeFormatSpecifiesZone(Slice formatString)\n    {\n        boolean quoted = false;\n        for (char c : formatString.toStringUtf8().toCharArray()) {\n            if (quoted) {\n                if (c == '\\'') {\n                    quoted = false;\n                }\n                continue;\n            }\n\n            switch (c) {\n                case 'z':\n                case 'Z':\n                    return true;\n                case '\\'':\n                    // '' (two apostrophes) in a pattern denote single apostrophe and here we interpret this as \"start quote\" + \"end quote\".\n                    // This has no impact on method's result value.\n                    quoted = true;\n                    break;\n            }\n        }\n        return false;\n    }"}, {"instruction": "Get parameter sets.\n\n@param statement statement\n@return parameter sets", "input": "Java", "output": "public List<List<Object>> getParameterSet(final Statement statement) {\n        List<List<Object>> result = new LinkedList<>();\n        for (ShardingExecuteGroup<StatementExecuteUnit> each : getExecuteGroups()) {\n            Optional<StatementExecuteUnit> target = getStatementExecuteUnit(statement, each);\n            if (target.isPresent()) {\n                result = getParameterSets(target.get());\n                break;\n            }\n        }\n        return result;\n    }"}, {"instruction": "Returns the host via {@link InetSocketAddress#getHostString} if it is possible,\ni.e. in jdk >= 7.\nOtherwise, return it via {@link InetSocketAddress#getHostName} which may incur a DNS lookup.", "input": "Java", "output": "public static String getHost(InetSocketAddress addr) {\n    try {\n      Method getHostStringMethod = InetSocketAddress.class.getMethod(\"getHostString\");\n      return (String) getHostStringMethod.invoke(addr);\n    } catch (NoSuchMethodException e) {\n      // noop\n    } catch (IllegalAccessException e) {\n      // noop\n    } catch (InvocationTargetException e) {\n      // noop\n    }\n    return addr.getHostName();\n  }"}, {"instruction": "Returns an {@link Iterable} that lists items in the normal order\nbut which hides the base iterator implementation details.\n\n@since 1.492", "input": "Java", "output": "public static <T> Iterable<T> wrap(final Iterable<T> base) {\n        return new Iterable<T>() {\n            public Iterator<T> iterator() {\n                final Iterator<T> itr = base.iterator();\n                return new Iterator<T>() {\n                    public boolean hasNext() {\n                        return itr.hasNext();\n                    }\n\n                    public T next() {\n                        return itr.next();\n                    }\n\n                    public void remove() {\n                        itr.remove();\n                    }\n                };\n            }\n        };\n    }"}, {"instruction": "The current flow element, will be filled during operation execution", "input": "Java", "output": "public FlowElement getCurrentFlowElement() {\n    if (currentFlowElement == null) {\n      String processDefinitionId = getProcessDefinitionId();\n      if (processDefinitionId != null) {\n        org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);\n        currentFlowElement = process.getFlowElement(getCurrentActivityId(), true);\n      }\n    }\n    return currentFlowElement;\n  }"}, {"instruction": "Shuts down a reader, releasing all of its segments. The reader should cease all operations.\n@param lastPosition The last position the reader successfully read from.", "input": "Java", "output": "static void readerShutdown(String readerId, Position lastPosition, StateSynchronizer<ReaderGroupState> sync) {\n        sync.updateState((state, updates) -> {\n            Set<Segment> segments = state.getSegments(readerId);\n            if (segments == null) {\n                return;\n            }\n            log.debug(\"Removing reader {} from reader grop. CurrentState is: {}\", readerId, state);\n            updates.add(new RemoveReader(readerId, lastPosition == null ? Collections.emptyMap()\n                    : lastPosition.asImpl().getOwnedSegmentsWithOffsets()));\n        });\n    }"}, {"instruction": "\u5bf9\u8c61\u8f6cMap<br>\n\u901a\u8fc7\u5b9e\u73b0{@link Editor} \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\u503c\uff0c\u5982\u679c\u8fd9\u4e2aEditor\u8fd4\u56denull\u5219\u5ffd\u7565\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4ee5\u4fbf\u5b9e\u73b0\uff1a\n\n<pre>\n1. \u5b57\u6bb5\u7b5b\u9009\uff0c\u53ef\u4ee5\u53bb\u9664\u4e0d\u9700\u8981\u7684\u5b57\u6bb5\n2. \u5b57\u6bb5\u53d8\u6362\uff0c\u4f8b\u5982\u5b9e\u73b0\u9a7c\u5cf0\u8f6c\u4e0b\u5212\u7ebf\n3. \u81ea\u5b9a\u4e49\u5b57\u6bb5\u524d\u7f00\u6216\u540e\u7f00\u7b49\u7b49\n</pre>\n\n@param bean bean\u5bf9\u8c61\n@param targetMap \u76ee\u6807\u7684Map\n@param ignoreNullValue \u662f\u5426\u5ffd\u7565\u503c\u4e3a\u7a7a\u7684\u5b57\u6bb5\n@param keyEditor \u5c5e\u6027\u5b57\u6bb5\uff08Map\u7684key\uff09\u7f16\u8f91\u5668\uff0c\u7528\u4e8e\u7b5b\u9009\u3001\u7f16\u8f91key\n@return Map\n@since 4.0.5", "input": "Java", "output": "public static Map<String, Object> beanToMap(Object bean, Map<String, Object> targetMap, boolean ignoreNullValue, Editor<String> keyEditor) {\r\n\t\tif (bean == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfinal Collection<PropDesc> props = BeanUtil.getBeanDesc(bean.getClass()).getProps();\r\n\r\n\t\tString key;\r\n\t\tMethod getter;\r\n\t\tObject value;\r\n\t\tfor (PropDesc prop : props) {\r\n\t\t\tkey = prop.getFieldName();\r\n\t\t\t// \u8fc7\u6ee4class\u5c5e\u6027\r\n\t\t\t// \u5f97\u5230property\u5bf9\u5e94\u7684getter\u65b9\u6cd5\r\n\t\t\tgetter = prop.getGetter();\r\n\t\t\tif (null != getter) {\r\n\t\t\t\t// \u53ea\u8bfb\u53d6\u6709getter\u65b9\u6cd5\u7684\u5c5e\u6027\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalue = getter.invoke(bean);\r\n\t\t\t\t} catch (Exception ignore) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (false == ignoreNullValue || (null != value && false == value.equals(bean))) {\r\n\t\t\t\t\tkey = keyEditor.edit(key);\r\n\t\t\t\t\tif (null != key) {\r\n\t\t\t\t\t\ttargetMap.put(key, value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn targetMap;\r\n\t}"}, {"instruction": "Downloads this blob to the given file path using specified blob read options.\n\n@param path destination\n@param options blob read options\n@throws StorageException upon failure", "input": "Java", "output": "public void downloadTo(Path path, BlobSourceOption... options) {\n    try (OutputStream outputStream = Files.newOutputStream(path);\n        ReadChannel reader = reader(options)) {\n      WritableByteChannel channel = Channels.newChannel(outputStream);\n      ByteBuffer bytes = ByteBuffer.allocate(DEFAULT_CHUNK_SIZE);\n      while (reader.read(bytes) > 0) {\n        bytes.flip();\n        channel.write(bytes);\n        bytes.clear();\n      }\n    } catch (IOException e) {\n      throw new StorageException(e);\n    }\n  }"}, {"instruction": "Removes all stale cached misconfigured hosts.\n<p>\n<strong>Note:</strong> This method should be called in a {@code synchronized} block with the object\n{@code misconfiguredHosts}.\n\n@see #misconfiguredHosts\n@see #cacheMisconfiguredHost(String, int, InetAddress)\n@see #getCachedMisconfiguredHost(String, int)", "input": "Java", "output": "private static void removeStaleCachedMisconfiguredHosts() {\r\n\t\tlong currentTime = System.currentTimeMillis();\r\n\t\tif (!((currentTime - timeStampLastStaleCheck) >= MAX_AGE_MISCONFIGURED_HOST_IN_MS)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttimeStampLastStaleCheck = currentTime;\r\n\r\n\t\tfor (MapIterator it = misconfiguredHosts.mapIterator(); it.hasNext();) {\r\n\t\t\tit.next();\r\n\r\n\t\t\tMisconfiguredHostCacheEntry entry = (MisconfiguredHostCacheEntry) it.getValue();\r\n\t\t\tif (entry.isStale(currentTime)) {\r\n\t\t\t\tlogger.info(\"Removing stale cached address of misconfigured (\\\"unrecognized_name\\\") host [host=\"\r\n\t\t\t\t\t\t+ entry.getHost() + \", port=\" + entry.getPort()\r\n\t\t\t\t\t\t+ \"], following connections will be attempted with the hostname.\");\r\n\t\t\t\tit.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t}"}, {"instruction": "\u662f\u5426\u4e3a\u65e5\u671f\u683c\u5f0f<br>\n\u5224\u65ad\u65b9\u5f0f\uff1a\n\n<pre>\n1\u3001\u6307\u5b9a\u5e8f\u53f7\n2\u3001org.apache.poi.ss.usermodel.DateUtil.isADateFormat\u65b9\u6cd5\u5224\u5b9a\n</pre>\n\n@param cell \u5355\u5143\u683c\n@param formatIndex \u683c\u5f0f\u5e8f\u53f7\n@return \u662f\u5426\u4e3a\u65e5\u671f\u683c\u5f0f", "input": "Java", "output": "private static boolean isDateType(Cell cell, int formatIndex) {\r\n\t\t// yyyy-MM-dd----- 14\r\n\t\t// yyyy\u5e74m\u6708d\u65e5---- 31\r\n\t\t// yyyy\u5e74m\u6708------- 57\r\n\t\t// m\u6708d\u65e5 ---------- 58\r\n\t\t// HH:mm----------- 20\r\n\t\t// h\u65f6mm\u5206 -------- 32\r\n\t\tif (formatIndex == 14 || formatIndex == 31 || formatIndex == 57 || formatIndex == 58 || formatIndex == 20 || formatIndex == 32) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}"}, {"instruction": "Returns the cache as a {@link Maybe}.\n\n@param name The name of the cache to retrieve\n@return The cache as a {@link Single}", "input": "Java", "output": "@Read\n    public Maybe<Map<String, Object>> getCache(@NotBlank @Selector String name) {\n        try {\n            final Cache<Object> cache = cacheManager.getCache(name);\n            return Flowable.fromPublisher(cache.getCacheInfo())\n                           .map(CacheInfo::get)\n                           .singleElement();\n        } catch (ConfigurationException e) {\n            // no cache exists\n            return Maybe.empty();\n        }\n    }"}, {"instruction": "\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u53ef\u80fd\u7684\u52a8\u4f5c\uff08\u52a8\u4f5c=shift | left | right + \u4f9d\u5b58\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u4e00\u6761\u65e2\u6709\u65b9\u5411\u53c8\u6709\u4f9d\u5b58\u5173\u7cfb\u540d\u79f0\u7684\u4f9d\u5b58\u8fb9\uff09\n@param source \u5f53\u524d\u72b6\u6001\n@param actions \u8f93\u51fa\u53ef\u80fd\u52a8\u4f5c", "input": "Java", "output": "void get_possible_actions(State source,\n                              List<Action> actions)\n    {\n        if (0 == L || -1 == R)\n        {\n            System.err.println(\"decoder: not initialized, please check if the root dependency relation is correct set by --root.\");\n            return;\n        }\n        actions.clear();\n\n        if (!source.buffer_empty())\n        {\n            actions.add(ActionFactory.make_shift());\n        }\n\n        if (source.stack_size() == 2)\n        {\n            if (source.buffer_empty())\n            {\n                actions.add(ActionFactory.make_right_arc(R));\n            }\n        }\n        else if (source.stack_size() > 2)\n        {\n            for (int l = 0; l < L; ++l)\n            {\n                if (l == R)\n                {\n                    continue;\n                }\n                actions.add(ActionFactory.make_left_arc(l));\n                actions.add(ActionFactory.make_right_arc(l));\n            }\n        }\n    }"}, {"instruction": "Triggers the schedule update now.\n\nTODO: ajax on the client side to wait until the update completion might be nice.", "input": "Java", "output": "@RequirePOST\n    public void doUpdateNow( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n        \n        for (NodeMonitor nodeMonitor : NodeMonitor.getAll()) {\n            Thread t = nodeMonitor.triggerUpdate();\n            String columnCaption = nodeMonitor.getColumnCaption();\n            if (columnCaption != null) {\n                t.setName(columnCaption);\n            }\n        }\n        rsp.forwardToPreviousPage(req);\n    }"}, {"instruction": "TODO optimize", "input": "Java", "output": "public ByteBuf preprocessJson(Integer jsonIndex, ByteBuf content) throws IOException {\n        String packet = URLDecoder.decode(content.toString(CharsetUtil.UTF_8), CharsetUtil.UTF_8.name());\n\n        if (jsonIndex != null) {\n            /**\n            * double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n            * (c) socket.io.js\n            *\n            * @see https://github.com/Automattic/socket.io-client/blob/1.3.3/socket.io.js#L2682\n            */\n            packet = packet.replace(\"\\\\\\\\n\", \"\\\\n\");\n\n            // skip \"d=\"\n            packet = packet.substring(2);\n        }\n\n        return Unpooled.wrappedBuffer(packet.getBytes(CharsetUtil.UTF_8));\n    }"}, {"instruction": "Parquet column names are case-sensitive unlike Hive, which converts all column names to lowercase.\nTherefore, when we look up columns we first check for exact match, and if that fails we look for a case-insensitive match.", "input": "Java", "output": "public static ColumnIO lookupColumnByName(GroupColumnIO groupColumnIO, String columnName)\n    {\n        ColumnIO columnIO = groupColumnIO.getChild(columnName);\n\n        if (columnIO != null) {\n            return columnIO;\n        }\n\n        for (int i = 0; i < groupColumnIO.getChildrenCount(); i++) {\n            if (groupColumnIO.getChild(i).getName().equalsIgnoreCase(columnName)) {\n                return groupColumnIO.getChild(i);\n            }\n        }\n\n        return null;\n    }"}, {"instruction": "\u6784\u5efa\u67e5\u8be2\u8ba2\u5355\u53c2\u6570\n\n@return <Map<String, String>>", "input": "Java", "output": "public Map<String, String> orderQueryBuild() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tif (getPayModel().equals(PayModel.SERVICEMODE)) {\n\t\t\tmap.put(\"sub_mch_id\", getSubMchId());\n\t\t\tmap.put(\"sub_appid\", getSubAppId());\n\t\t}\n\n\t\tmap.put(\"appid\", getAppId());\n\t\tmap.put(\"mch_id\", getMchId());\n\n\t\tif (StrKit.notBlank(getTransactionId())) {\n\t\t\tmap.put(\"transaction_id\", getTransactionId());\n\t\t} else {\n\t\t\tif (StrKit.isBlank(getOutTradeNo())) {\n\t\t\t\tthrow new IllegalArgumentException(\"out_trade_no,transaction_id \u4e0d\u80fd\u540c\u65f6\u4e3a\u7a7a\");\n\t\t\t}\n\t\t\tmap.put(\"out_trade_no\", getOutTradeNo());\n\t\t}\n\t\tmap.put(\"nonce_str\", String.valueOf(System.currentTimeMillis()));\n\t\tmap.put(\"sign\", PaymentKit.createSign(map, getPaternerKey()));\n\t\treturn map;\n\t}"}, {"instruction": "Sets the maximum size of the page.\n<p>\nIf the given maximum size is greater than the current maximum size a new page will be loaded, otherwise the current page\nwill be shrunk to meet the given maximum size. In both cases the {@code TableModelListener} will be notified of the\nchange.\n</p>\n<p>\nThe call to this method has no effect if the given maximum size is equal to the current maximum size.\n</p>\n\n@param maxPageSize the new maximum page size\n@throws IllegalArgumentException if {@code maxPageSize} is negative or zero.\n@see #setMaxPageSizeWithoutPageChanges(int)\n@see TableModelListener", "input": "Java", "output": "public void setMaxPageSize(final int maxPageSize) {\n\t\tif (maxPageSize <= 0) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter maxPageSize must be greater than zero.\");\n\t\t}\n\t\tif (this.maxPageSize == maxPageSize) {\n\t\t\treturn;\n\t\t}\n\t\tint oldMaxPageSize = this.maxPageSize;\n\t\tsetMaxPageSizeWithoutPageChanges(maxPageSize);\n\n\t\tint rowCount = getRowCount();\n\t\tif (rowCount > 0) {\n\t\t\tif (maxPageSize > oldMaxPageSize) {\n\t\t\t\tschedule(dataOffset);\n\t\t\t} else if (data.size() > maxPageSize) {\n\t\t\t\tfinal List<T> shrunkData = data.subList(0, maxPageSize);\n\n\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tsetData(dataOffset, new ArrayList<>(shrunkData));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}"}, {"instruction": "Read and parse data from /proc/stat and /proc/&lt;pid&gt;/stat.\nIf this doesn't work for some reason, the values will be -1.", "input": "Java", "output": "public void read() {\n    String pid = \"-1\";\n    try {\n      pid = getProcessId();\n      _pid = pid;\n    }\n    catch (Exception ignore) {}\n\n    File f = new File (\"/proc/stat\");\n    if (! f.exists()) {\n      return;\n    }\n\n    try {\n      readSystemProcFile();\n      readProcessProcFile(pid);\n      readProcessNumOpenFds(pid);\n      readProcessStatusFile(pid);\n      parseSystemProcFile(_systemData);\n      parseProcessProcFile(_processData);\n      parseProcessStatusFile(_processStatus);\n    }\n    catch (Exception ignore) {}\n  }"}, {"instruction": "Inherited.", "input": "Java", "output": "public Map<String, String> parseParameters(HttpServletRequest request) {\n    Map<String, String> parameters = parseHeaderParameters(request);\n\n    if (parameters == null) {\n      //if there is no header authorization parameters, then the oauth parameters are the supported OAuth request parameters.\n      parameters = new HashMap<String, String>();\n      for (String supportedOAuthParameter : getSupportedOAuthParameters()) {\n        String param = request.getParameter(supportedOAuthParameter);\n        if (param != null) {\n          parameters.put(supportedOAuthParameter, param);\n        }\n      }\n    }\n\n    return parameters;\n  }"}, {"instruction": "Inserts the given object into the current buffer. This method returns a pointer that\ncan be used to address the written record in this partition.\n\n@param record The object to be written to the partition.\n@return A pointer to the object in the partition.\n@throws IOException Thrown when the write failed.", "input": "Java", "output": "public final long appendRecord(T record) throws IOException {\n\t\tlong pointer = this.writeView.getCurrentPointer();\n\t\ttry {\n\t\t\tthis.serializer.serialize(record, this.writeView);\n\t\t\tthis.recordCounter++;\n\t\t\treturn pointer;\n\t\t} catch (EOFException e) {\n\t\t\t// we ran out of pages. \n\t\t\t// first, reset the pages and then we need to trigger a compaction\n\t\t\t//int oldCurrentBuffer = \n\t\t\tthis.writeView.resetTo(pointer);\n\t\t\t//for (int bufNum = this.partitionPages.size() - 1; bufNum > oldCurrentBuffer; bufNum--) {\n\t\t\t//\tthis.availableMemory.addMemorySegment(this.partitionPages.remove(bufNum));\n\t\t\t//}\n\t\t\tthrow e;\n\t\t}\n\t}"}, {"instruction": "Returns the trailers. It is only safe to call this once the source stream has been completely\nexhausted.", "input": "Java", "output": "public synchronized Headers trailers() throws IOException {\n    if (errorCode != null) {\n      throw errorException != null ? errorException : new StreamResetException(errorCode);\n    }\n    if (!source.finished || !source.receiveBuffer.exhausted() || !source.readBuffer.exhausted()) {\n      throw new IllegalStateException(\"too early; can't read the trailers yet\");\n    }\n    return source.trailers != null ? source.trailers : Util.EMPTY_HEADERS;\n  }"}, {"instruction": "\u5339\u914d\u6bcd\u6587\u672c\n\n@param text \u4e00\u4e9b\u6587\u672c\n@return \u4e00\u4e2apair\u5217\u8868", "input": "Java", "output": "public List<Hit<V>> parseText(String text)\n    {\n        int position = 1;\n        int currentState = 0;\n        List<Hit<V>> collectedEmits = new LinkedList<Hit<V>>();\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            storeEmits(position, currentState, collectedEmits);\n            ++position;\n        }\n\n        return collectedEmits;\n    }"}, {"instruction": "Returns the textual representations of the running issues (Java version and dependency) of the extensions of hte add-on,\nif any.\n<p>\nThe messages are internationalised thus suitable for UI components.\n\n@param requirements the run requirements of the add-on, whose extensions' run requirements will be used\n@param addOnSearcher the class responsible for searching add-ons with a given id, used to search for add-ons that are\nmissing for the add-on\n@return a {@code List} containing all the running issues of the add-on, empty if none\n@see #getRunningIssues(AddOn.BaseRunRequirements)\n@see #getUiExtensionsRunningIssues(AddOn.AddOnRunRequirements, AddOnSearcher)", "input": "Java", "output": "public static List<String> getUiExtensionsRunningIssues(AddOn.AddOnRunRequirements requirements, AddOnSearcher addOnSearcher) {\n        if (!requirements.hasExtensionsWithRunningIssues()) {\n            return new ArrayList<>(0);\n        }\n\n        List<String> issues = new ArrayList<>(10);\n        for (AddOn.ExtensionRunRequirements extReqs : requirements.getExtensionRequirements()) {\n            issues.addAll(getUiRunningIssues(extReqs, addOnSearcher));\n        }\n        return issues;\n    }"}, {"instruction": "default value is used for backwards compatibility", "input": "Java", "output": "@POST\n  @Path(\"/worker\")\n  @Consumes(MediaType.APPLICATION_JSON)\n  @ResourceFilters(ConfigResourceFilter.class)\n  public Response setWorkerConfig(\n      final WorkerBehaviorConfig workerBehaviorConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context final HttpServletRequest req\n  )\n  {\n    final SetResult setResult = configManager.set(\n        WorkerBehaviorConfig.CONFIG_KEY,\n        workerBehaviorConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n    if (setResult.isOk()) {\n      log.info(\"Updating Worker configs: %s\", workerBehaviorConfig);\n\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }"}, {"instruction": "Creates an image in the specified project using the data included in the request.\n\n<p>Sample code:\n\n<pre><code>\ntry (ImageClient imageClient = ImageClient.create()) {\nBoolean forceCreate = false;\nProjectName project = ProjectName.of(\"[PROJECT]\");\nImage imageResource = Image.newBuilder().build();\nOperation response = imageClient.insertImage(forceCreate, project, imageResource);\n}\n</code></pre>\n\n@param forceCreate Force image creation if true.\n@param project Project ID for this request.\n@param imageResource An Image resource. (== resource_for beta.images ==) (== resource_for\nv1.images ==)\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Operation insertImage(\n      Boolean forceCreate, ProjectName project, Image imageResource) {\n\n    InsertImageHttpRequest request =\n        InsertImageHttpRequest.newBuilder()\n            .setForceCreate(forceCreate)\n            .setProject(project == null ? null : project.toString())\n            .setImageResource(imageResource)\n            .build();\n    return insertImage(request);\n  }"}, {"instruction": "---------------------------------------------------------------------------------------------", "input": "Java", "output": "void writeSnapshotData(DataOutputView out) throws IOException {\n\t\tout.writeUTF(pojoClass.getName());\n\t\twriteOptionalMap(out, fieldSerializerSnapshots, PojoFieldUtils::writeField, TypeSerializerSnapshot::writeVersionedSnapshot);\n\t\twriteOptionalMap(out, registeredSubclassSerializerSnapshots, NoOpWriter.noopWriter(), TypeSerializerSnapshot::writeVersionedSnapshot);\n\t\twriteOptionalMap(out, nonRegisteredSubclassSerializerSnapshots, NoOpWriter.noopWriter(), TypeSerializerSnapshot::writeVersionedSnapshot);\n\t}"}, {"instruction": "Get sharding encryptor.\n\n@param logicTableName logic table name\n@param columnName column name\n@return optional of sharding encryptor", "input": "Java", "output": "public Optional<ShardingEncryptor> getShardingEncryptor(final String logicTableName, final String columnName) {\n        for (ShardingEncryptorStrategy each : shardingEncryptorStrategies.values()) {\n            Optional<ShardingEncryptor> result = each.getShardingEncryptor(logicTableName, columnName);\n            if (result.isPresent()) {\n                return result;\n            }\n        }\n        return Optional.absent();\n    }"}, {"instruction": "Sets the logging service for a specific cluster.\n\n<p>Sample code:\n\n<pre><code>\ntry (ClusterManagerClient clusterManagerClient = ClusterManagerClient.create()) {\nString projectId = \"\";\nString zone = \"\";\nString clusterId = \"\";\nString loggingService = \"\";\nOperation response = clusterManagerClient.setLoggingService(projectId, zone, clusterId, loggingService);\n}\n</code></pre>\n\n@param projectId Deprecated. The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840). This field has been deprecated\nand replaced by the name field.\n@param zone Deprecated. The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster resides. This field has been\ndeprecated and replaced by the name field.\n@param clusterId Deprecated. The name of the cluster to upgrade. This field has been deprecated\nand replaced by the name field.\n@param loggingService The logging service the cluster should use to write metrics. Currently\navailable options:\n<p>&#42; \"logging.googleapis.com\" - the Google Cloud Logging service &#42; \"none\" - no\nmetrics will be exported from the cluster\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "public final Operation setLoggingService(\n      String projectId, String zone, String clusterId, String loggingService) {\n\n    SetLoggingServiceRequest request =\n        SetLoggingServiceRequest.newBuilder()\n            .setProjectId(projectId)\n            .setZone(zone)\n            .setClusterId(clusterId)\n            .setLoggingService(loggingService)\n            .build();\n    return setLoggingService(request);\n  }"}, {"instruction": "\u5224\u65ad\u6307\u5b9a\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u652f\u6301\uff1a\n\n<pre>\n1. CharSequence\n2. Map\n3. Iterable\n4. Iterator\n5. Array\n</pre>\n\n@param obj \u88ab\u5224\u65ad\u7684\u5bf9\u8c61\n@return \u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u652f\u6301\uff0c\u8fd4\u56defalse\n@since 4.5.7", "input": "Java", "output": "@SuppressWarnings(\"rawtypes\")\r\n\tpublic static boolean isEmpty(Object obj) {\r\n\t\tif(null == obj) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(obj instanceof CharSequence) {\r\n\t\t\treturn StrUtil.isEmpty((CharSequence)obj);\r\n\t\t}else if(obj instanceof Map) {\r\n\t\t\treturn MapUtil.isEmpty((Map)obj);\r\n\t\t}else if(obj instanceof Iterable) {\r\n\t\t\treturn IterUtil.isEmpty((Iterable)obj);\r\n\t\t}else if(obj instanceof Iterator) {\r\n\t\t\treturn IterUtil.isEmpty((Iterator)obj);\r\n\t\t}else if(ArrayUtil.isArray(obj)) {\r\n\t\t\treturn ArrayUtil.isEmpty(obj);\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}"}, {"instruction": "Installs (and sets into the add-on) the resource bundle declared by the given add-on, if any.\n\n@param addOnClassLoader the ClassLoader of the add-on.\n@param addOn the add-on.\n@since TODO add version\n@see AddOn#getBundleData()", "input": "Java", "output": "static void installResourceBundle(AddOnClassLoader addOnClassLoader, AddOn addOn) {\n        AddOn.BundleData bundleData = addOn.getBundleData();\n        if (bundleData.isEmpty()) {\n            return;\n        }\n\n        try {\n            ResourceBundle resourceBundle = ResourceBundle.getBundle(\n                    bundleData.getBaseName(),\n                    Constant.getLocale(),\n                    addOnClassLoader,\n                    new ZapResourceBundleControl());\n            addOn.setResourceBundle(resourceBundle);\n            String bundlePrefix = bundleData.getPrefix();\n            if (!bundlePrefix.isEmpty()) {\n                Constant.messages.addMessageBundle(bundlePrefix, resourceBundle);\n            }\n        } catch (MissingResourceException e) {\n            logger.error(\"Declared bundle not found in \" + addOn.getId() + \" add-on:\", e);\n        }\n    }"}, {"instruction": "Like the standard next method but allows a\ncustomizable number of examples returned\n\n@param num the number of examples\n@return the next data applyTransformToDestination", "input": "Java", "output": "@Override\n    public DataSet next(int num) {\n        if (num <= cachedWindow.size())\n            return fromCached(num);\n        //no more sentences, return the left over\n        else if (num >= cachedWindow.size() && !iter.hasNext())\n            return fromCached(cachedWindow.size());\n\n        //need the next sentence\n        else {\n            while (cachedWindow.size() < num && iter.hasNext()) {\n                String sentence = iter.nextSentence();\n                if (sentence.isEmpty())\n                    continue;\n                List<Window> windows = Windows.windows(sentence, vec.getTokenizerFactory(), vec.getWindow(), vec);\n                if (windows.isEmpty() && !sentence.isEmpty())\n                    throw new IllegalStateException(\"Empty window on sentence\");\n                for (Window w : windows)\n                    w.setLabel(iter.currentLabel());\n                cachedWindow.addAll(windows);\n            }\n\n            return fromCached(num);\n        }\n\n    }"}, {"instruction": "Is cas authentication available?\n\n@param context the context\n@return the optional authn", "input": "Java", "output": "public Optional<Authentication> isCasAuthenticationAvailable(final WebContext context) {\n        val j2EContext = (J2EContext) context;\n        if (j2EContext != null) {\n            val tgtId = ticketGrantingTicketCookieGenerator.retrieveCookieValue(j2EContext.getRequest());\n\n            if (StringUtils.isNotBlank(tgtId)) {\n                val authentication = ticketRegistrySupport.getAuthenticationFrom(tgtId);\n                if (authentication != null) {\n                    return Optional.of(authentication);\n                }\n            }\n        }\n        return Optional.empty();\n    }"}, {"instruction": "Sets the access control policy on the specified resource. Replaces any existing policy.\n\n<p>Sample code:\n\n<pre><code>\ntry (SubnetworkClient subnetworkClient = SubnetworkClient.create()) {\nProjectRegionSubnetworkResourceName resource = ProjectRegionSubnetworkResourceName.of(\"[PROJECT]\", \"[REGION]\", \"[RESOURCE]\");\nRegionSetPolicyRequest regionSetPolicyRequestResource = RegionSetPolicyRequest.newBuilder().build();\nPolicy response = subnetworkClient.setIamPolicySubnetwork(resource.toString(), regionSetPolicyRequestResource);\n}\n</code></pre>\n\n@param resource Name or id of the resource for this request.\n@param regionSetPolicyRequestResource\n@throws com.google.api.gax.rpc.ApiException if the remote call fails", "input": "Java", "output": "@BetaApi\n  public final Policy setIamPolicySubnetwork(\n      String resource, RegionSetPolicyRequest regionSetPolicyRequestResource) {\n\n    SetIamPolicySubnetworkHttpRequest request =\n        SetIamPolicySubnetworkHttpRequest.newBuilder()\n            .setResource(resource)\n            .setRegionSetPolicyRequestResource(regionSetPolicyRequestResource)\n            .build();\n    return setIamPolicySubnetwork(request);\n  }"}, {"instruction": "Get the probability matrix (probability of the specified class, assuming an object is present, for all x/y\npositions), from the network output activations array\n\n@param networkOutput Network output activations\n@param example       Example number, in minibatch\n@param classNumber   Class number\n@return Confidence matrix", "input": "Java", "output": "public INDArray getProbabilityMatrix(INDArray networkOutput, int example, int classNumber){\n        //Input format: [minibatch, 5B+C, H, W], with order [x,y,w,h,c]\n        //Therefore: probabilities for class I is at depths 5B + classNumber\n\n        val bbs = layerConf().getBoundingBoxes().size(0);\n        INDArray conf = networkOutput.get(point(example), point(5*bbs + classNumber), all(), all());\n        return conf;\n    }"}, {"instruction": "This method initializes menuItemPolicy\n\n@return javax.swing.JMenuItem", "input": "Java", "output": "private ZapMenuItem getMenuItemPolicy() {\r\n        if (menuItemPolicy == null) {\r\n            menuItemPolicy = new ZapMenuItem(\"menu.analyse.scanPolicy\",\r\n                    getView().getMenuShortcutKeyStroke(KeyEvent.VK_P, 0, false));\r\n\r\n            menuItemPolicy.addActionListener(new java.awt.event.ActionListener() {\r\n                @Override\r\n                public void actionPerformed(java.awt.event.ActionEvent e) {\r\n                    showPolicyManagerDialog();\r\n                }\r\n            });\r\n\r\n        }\r\n        \r\n        return menuItemPolicy;\r\n    }"}, {"instruction": "Recursively retrieve files that match the given pattern,\nadding them to the given result list.\n\n@param fullPattern the pattern to match against,\nwith prepended root directory path\n@param dir         the current directory\n@param result      the Set of matching File instances to add to\n@throws IOException if directory contents could not be retrieved", "input": "Java", "output": "protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {\n        File[] dirContents = dir.listFiles();\n        if (dirContents == null) {\n            return;\n        }\n        for (File content : dirContents) {\n            String currPath = content.getAbsolutePath().replace(File.separator, \"/\");\n            if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + \"/\")) {\n                if (content.canRead()) {\n                    doRetrieveMatchingFiles(fullPattern, content, result);\n                }\n            }\n            if (getPathMatcher().match(fullPattern, currPath)) {\n                result.add(content);\n            }\n        }\n    }"}, {"instruction": "\u7528\u4e8eModel\u5bf9\u8c61\u8f6c\u5316\u4e3aDO\u5bf9\u8c61\n\n@param tableStat\n@return TableStatDO", "input": "Java", "output": "private TableStatDO tableStatModelToDo(TableStat tableStat) {\n        TableStatDO tableStatDO = new TableStatDO();\n        tableStatDO.setId(tableStat.getId());\n        tableStatDO.setPipelineId(tableStat.getPipelineId());\n        tableStatDO.setDataMediaPairId(tableStat.getDataMediaPairId());\n        tableStatDO.setFileSize(tableStat.getFileSize());\n        tableStatDO.setFileCount(tableStat.getFileCount());\n        tableStatDO.setDeleteCount(tableStat.getDeleteCount());\n        tableStatDO.setInsertCount(tableStat.getInsertCount());\n        tableStatDO.setUpdateCount(tableStat.getUpdateCount());\n        tableStatDO.setGmtCreate(tableStat.getGmtCreate());\n        tableStatDO.setGmtModified(tableStat.getGmtModified());\n        return tableStatDO;\n\n    }"}, {"instruction": "Applies a flat select function to the detected pattern sequence. For each pattern sequence\nthe provided {@link PatternFlatSelectFunction} is called. The pattern flat select function\ncan produce an arbitrary number of resulting elements.\n\n@param patternFlatSelectFunction The pattern flat select function which is called for each\ndetected pattern sequence.\n@param <R> Type of the resulting elements\n@return {@link DataStream} which contains the resulting elements from the pattern flat select\nfunction.", "input": "Java", "output": "public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {\n\t\t// we have to extract the output type from the provided pattern selection function manually\n\t\t// because the TypeExtractor cannot do that if the method is wrapped in a MapFunction\n\n\t\tfinal TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tpatternFlatSelectFunction,\n\t\t\tPatternFlatSelectFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tbuilder.getInputType(),\n\t\t\tnull,\n\t\t\tfalse);\n\n\t\treturn flatSelect(patternFlatSelectFunction, outTypeInfo);\n\t}"}, {"instruction": "Called once the changelog is determined.\n\n<p>\nDuring a build, Jenkins fetches the update of the workspace from SCM,\nand determines the changelog (see {@link SCM#checkout}). Immediately\nafter that, a build will invoke this method on all registered\n{@link SCMListener}s.\n\n<p>\nIf a build failed before we successfully determine changelog, this method\nwill not be invoked (for example, if \"cvs update\" failed.) OTOH, this method\nis invoked before the actual build (like ant invocation) happens.\n\n<p>\nThis is an opportunity for SCM-related plugins to act on changelog.\nA typical usage includes parsing commit messages and do cross-referencing\nbetween other systems. Implementations can also contribute {@link Action}\nto {@link AbstractBuild} (by {@code build.getActions().add(...)} to\ndisplay additional data on build views.\n\n<p>\nTODO: once we have cvsnews plugin, refer to its usage.\n\n@param build\nThe build in progress, which just finished determining changelog.\nAt this point this build is still in progress. Never null.\n@param listener\n{@link BuildListener} for on-going build. This can be used to report\nany errors or the general logging of what's going on. This will show\nup in the \"console output\" of the build. Never null.\n@param changelog\nSet of changes detected in this build. This is the same value\nreturned from {@link AbstractBuild#getChangeSet()} but passed\nseparately for convenience.\n\n@throws Exception\nIf any exception is thrown from this method, it will be recorded\nand causes the build to fail.\n@since 1.568", "input": "Java", "output": "public void onChangeLogParsed(Run<?,?> build, SCM scm, TaskListener listener, ChangeLogSet<?> changelog) throws Exception {\n        if (build instanceof AbstractBuild && listener instanceof BuildListener && Util.isOverridden(SCMListener.class, getClass(), \"onChangeLogParsed\", AbstractBuild.class, BuildListener.class, ChangeLogSet.class)) {\n            onChangeLogParsed((AbstractBuild) build, (BuildListener) listener, changelog);\n        }\n    }"}, {"instruction": "Splits a comma-separated header value. The returned set is case-insensitive and contains each\npart with whitespace removed.", "input": "Java", "output": "private static List<CharSequence> splitHeader(CharSequence header) {\n        final StringBuilder builder = new StringBuilder(header.length());\n        final List<CharSequence> protocols = new ArrayList<CharSequence>(4);\n        for (int i = 0; i < header.length(); ++i) {\n            char c = header.charAt(i);\n            if (Character.isWhitespace(c)) {\n                // Don't include any whitespace.\n                continue;\n            }\n            if (c == ',') {\n                // Add the string and reset the builder for the next protocol.\n                protocols.add(builder.toString());\n                builder.setLength(0);\n            } else {\n                builder.append(c);\n            }\n        }\n\n        // Add the last protocol\n        if (builder.length() > 0) {\n            protocols.add(builder.toString());\n        }\n\n        return protocols;\n    }"}, {"instruction": "Append a log event at the appropriate JUL level, depending on the log4j level.", "input": "Java", "output": "@Override\n    protected void append(LoggingEvent loggingEvent)\n    {\n        java.util.logging.Logger logger = java.util.logging.Logger.getLogger(loggingEvent.getLoggerName());\n        if (logger == null) {\n            LogLog.warn(format(\"Cannot obtain JUL %s. Verify that this appender is used while an appropriate LogManager is active.\", loggingEvent.getLoggerName()));\n            return;\n        }\n\n        Level level = loggingEvent.getLevel();\n        java.util.logging.Level julLevel = convertLog4jLevel(level);\n\n        LogRecord record = new LogRecord(julLevel, loggingEvent.getRenderedMessage());\n        record.setMillis(loggingEvent.getTimeStamp());\n        LocationInfo location = loggingEvent.getLocationInformation();\n        if (location != null) {\n            record.setSourceClassName(location.getClassName());\n            record.setSourceMethodName(location.getMethodName());\n        }\n\n        logger.log(record);\n    }"}, {"instruction": "Gets encrypter.\n\n@param samlObject    the saml object\n@param service       the service\n@param adaptor       the adaptor\n@param keyEncParams  the key enc params\n@param dataEncParams the data enc params\n@return the encrypter", "input": "Java", "output": "protected Encrypter getEncrypter(final Object samlObject,\n                                     final SamlRegisteredService service,\n                                     final SamlRegisteredServiceServiceProviderMetadataFacade adaptor,\n                                     final KeyEncryptionParameters keyEncParams,\n                                     final DataEncryptionParameters dataEncParams) {\n        val encrypter = new Encrypter(dataEncParams, keyEncParams);\n        encrypter.setKeyPlacement(Encrypter.KeyPlacement.PEER);\n        return encrypter;\n    }"}, {"instruction": "Gets login context.\n\n@param credential the credential\n@return the login context\n@throws GeneralSecurityException the general security exception", "input": "Java", "output": "protected LoginContext getLoginContext(final UsernamePasswordCredential credential) throws GeneralSecurityException {\n        val callbackHandler = new UsernamePasswordCallbackHandler(credential.getUsername(), credential.getPassword());\n        if (this.loginConfigurationFile != null && StringUtils.isNotBlank(this.loginConfigType)\n            && this.loginConfigurationFile.exists() && this.loginConfigurationFile.canRead()) {\n            final Configuration.Parameters parameters = new URIParameter(loginConfigurationFile.toURI());\n            val loginConfig = Configuration.getInstance(this.loginConfigType, parameters);\n            return new LoginContext(this.realm, null, callbackHandler, loginConfig);\n        }\n        return new LoginContext(this.realm, callbackHandler);\n    }"}, {"instruction": "Example of getting a subscription.", "input": "Java", "output": "public Subscription getSubscription(String subscriptionId) throws Exception {\n    // [START pubsub_get_subscription]\n    try (SubscriptionAdminClient subscriptionAdminClient = SubscriptionAdminClient.create()) {\n      ProjectSubscriptionName subscriptionName =\n          ProjectSubscriptionName.of(projectId, subscriptionId);\n      Subscription subscription = subscriptionAdminClient.getSubscription(subscriptionName);\n      return subscription;\n    }\n    // [END pubsub_get_subscription]\n  }"}, {"instruction": "\u6839\u636e\u540d\u5b57\u5728manager\u914d\u7f6e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u8f6c\u5316\u4e3a\u76ee\u6807\u7684\u5b57\u6bb5\u540d\u5b57", "input": "Java", "output": "private String translateColumnName(String srcColumnName, DataMediaPair dataMediaPair,\n                                       Multimap<String, String> translateDict) {\n        if (dataMediaPair.getColumnPairMode().isExclude() || CollectionUtils.isEmpty(dataMediaPair.getColumnPairs())) {\n            return srcColumnName; // \u9ed8\u8ba4\u540c\u540d\n        }\n\n        Collection<String> tColumnNames = translateDict.get(srcColumnName);\n        if (CollectionUtils.isEmpty(tColumnNames)) {\n            throw new TransformException(srcColumnName + \" is not found in column pairs: \" + translateDict.toString());\n        }\n        String columnName = tColumnNames.iterator().next();\n\n        return columnName;\n    }"}, {"instruction": "Resolve all of the type arguments for the given super type from the given type.\n\n@param type      The type to resolve from\n@param superTypeToResolve The suepr type to resolve from\n@return The type arguments to the interface", "input": "Java", "output": "public static Class[] resolveSuperTypeGenericArguments(Class<?> type, Class<?> superTypeToResolve) {\n        Type supertype = type.getGenericSuperclass();\n        Class<?> superclass = type.getSuperclass();\n        while (superclass != null && superclass != Object.class) {\n            if (supertype instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType) supertype;\n                if (pt.getRawType() == superTypeToResolve) {\n                    return resolveTypeArguments(supertype);\n                }\n            }\n\n            supertype = superclass.getGenericSuperclass();\n            superclass = superclass.getSuperclass();\n        }\n        return ReflectionUtils.EMPTY_CLASS_ARRAY;\n    }"}, {"instruction": "Reads a message body into across one or more frames. Control frames that occur between\nfragments will be processed. If the message payload is masked this will unmask as it's being\nprocessed.", "input": "Java", "output": "private void readMessage() throws IOException {\n    while (true) {\n      if (closed) throw new IOException(\"closed\");\n\n      if (frameLength > 0) {\n        source.readFully(messageFrameBuffer, frameLength);\n\n        if (!isClient) {\n          messageFrameBuffer.readAndWriteUnsafe(maskCursor);\n          maskCursor.seek(messageFrameBuffer.size() - frameLength);\n          toggleMask(maskCursor, maskKey);\n          maskCursor.close();\n        }\n      }\n\n      if (isFinalFrame) break; // We are exhausted and have no continuations.\n\n      readUntilNonControlFrame();\n      if (opcode != OPCODE_CONTINUATION) {\n        throw new ProtocolException(\"Expected continuation opcode. Got: \" + toHexString(opcode));\n      }\n    }\n  }"}, {"instruction": "Called when a stream is closed, we do things like:\n<ul>\n<li>Removing the stream from the map.\n<li>Optionally reporting the status.\n<li>Starting pending streams if we can.\n<li>Stopping the transport if this is the last live stream under a go-away status.\n</ul>\n\n@param streamId the Id of the stream.\n@param status the final status of this stream, null means no need to report.\n@param stopDelivery interrupt queued messages in the deframer\n@param errorCode reset the stream with this ErrorCode if not null.\n@param trailers the trailers received if not null", "input": "Java", "output": "void finishStream(\n      int streamId,\n      @Nullable Status status,\n      RpcProgress rpcProgress,\n      boolean stopDelivery,\n      @Nullable ErrorCode errorCode,\n      @Nullable Metadata trailers) {\n    synchronized (lock) {\n      OkHttpClientStream stream = streams.remove(streamId);\n      if (stream != null) {\n        if (errorCode != null) {\n          frameWriter.rstStream(streamId, ErrorCode.CANCEL);\n        }\n        if (status != null) {\n          stream\n              .transportState()\n              .transportReportStatus(\n                  status,\n                  rpcProgress,\n                  stopDelivery,\n                  trailers != null ? trailers : new Metadata());\n        }\n        if (!startPendingStreams()) {\n          stopIfNecessary();\n          maybeClearInUse(stream);\n        }\n      }\n    }\n  }"}, {"instruction": "/* Helper method to fetch flow priority from flow props", "input": "Java", "output": "private int getPriority(final ExecutableFlow exflow) {\n    final ExecutionOptions options = exflow.getExecutionOptions();\n    int priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;\n    if (options != null\n        && options.getFlowParameters() != null\n        && options.getFlowParameters()\n        .containsKey(ExecutionOptions.FLOW_PRIORITY)) {\n      try {\n        priority =\n            Integer.valueOf(options.getFlowParameters().get(\n                ExecutionOptions.FLOW_PRIORITY));\n      } catch (final NumberFormatException ex) {\n        priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;\n        logger.error(\n            \"Failed to parse flow priority for exec_id = \"\n                + exflow.getExecutionId(), ex);\n      }\n    }\n    return priority;\n  }"}, {"instruction": "Return next fix length string from buffer.", "input": "Java", "output": "public final String getFixString(final int len, String charsetName) {\r\n        if (position + len > origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\r\n                                                                                + (position + len - origin));\r\n\r\n        final int from = position;\r\n        final int end = from + len;\r\n        byte[] buf = buffer;\r\n        int found = from;\r\n        for (; (found < end) && buf[found] != '\\0'; found++)\r\n            /* empty loop */;\r\n\r\n        try {\r\n            String string = new String(buf, from, found - from, charsetName);\r\n            position += len;\r\n            return string;\r\n        } catch (UnsupportedEncodingException e) {\r\n            throw new IllegalArgumentException(\"Unsupported encoding: \" + charsetName, e);\r\n        }\r\n    }"}, {"instruction": "Handler for an inbound HTTP/2 RST_STREAM frame, terminating a stream.", "input": "Java", "output": "private void onRstStreamRead(int streamId, long errorCode) {\n    NettyClientStream.TransportState stream = clientStream(connection().stream(streamId));\n    if (stream != null) {\n      Status status = GrpcUtil.Http2Error.statusForCode((int) errorCode)\n          .augmentDescription(\"Received Rst Stream\");\n      stream.transportReportStatus(\n          status,\n          errorCode == Http2Error.REFUSED_STREAM.code()\n              ? RpcProgress.REFUSED : RpcProgress.PROCESSED,\n          false /*stop delivery*/,\n          new Metadata());\n      if (keepAliveManager != null) {\n        keepAliveManager.onDataReceived();\n      }\n    }\n  }"}, {"instruction": "\u83b7\u53d6\u6570\u5b57\u7c7b\u578b\u7684\u5355\u5143\u683c\u503c\n\n@param cell \u5355\u5143\u683c\n@return \u5355\u5143\u683c\u503c\uff0c\u53ef\u80fd\u4e3aLong\u3001Double\u3001Date", "input": "Java", "output": "private static Object getNumericValue(Cell cell) {\r\n\t\tfinal double value = cell.getNumericCellValue();\r\n\r\n\t\tfinal CellStyle style = cell.getCellStyle();\r\n\t\tif (null == style) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tfinal short formatIndex = style.getDataFormat();\r\n\t\t// \u5224\u65ad\u662f\u5426\u4e3a\u65e5\u671f\r\n\t\tif (isDateType(cell, formatIndex)) {\r\n\t\t\treturn DateUtil.date(cell.getDateCellValue());// \u4f7f\u7528Hutool\u7684DateTime\u5305\u88c5\r\n\t\t}\r\n\r\n\t\tfinal String format = style.getDataFormatString();\r\n\t\t// \u666e\u901a\u6570\u5b57\r\n\t\tif (null != format && format.indexOf(StrUtil.C_DOT) < 0) {\r\n\t\t\tfinal long longPart = (long) value;\r\n\t\t\tif (longPart == value) {\r\n\t\t\t\t// \u5bf9\u4e8e\u65e0\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8f6c\u4e3aLong\r\n\t\t\t\treturn longPart;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}"}, {"instruction": "\u4e8c\u5206\u641c\u7d22\n@param mdagDataArray\n@param node\n@return", "input": "Java", "output": "private int binarySearch(SimpleMDAGNode[] mdagDataArray, char node)\n    {\n        if (transitionSetSize < 1)\n        {\n            return -1;\n        }\n        int high = transitionSetBeginIndex + transitionSetSize - 1;\n        int low = transitionSetBeginIndex;\n        while (low <= high)\n        {\n            int mid = ((low + high) >>> 1);\n            int cmp = mdagDataArray[mid].getLetter() - node;\n\n            if (cmp < 0)\n                low = mid + 1;\n            else if (cmp > 0)\n                high = mid - 1;\n            else\n                return mid;\n        }\n        return -1;\n    }"}, {"instruction": "Convert a parquet 'map' logical type {@link Group} to a java map of string keys to groups/lists/primitive values", "input": "Java", "output": "private static Map<String, Object> convertLogicalMap(Group g, boolean binaryAsString)\n  {\n    /*\n      // Map<String, Integer> (nullable map, non-null values)\n      optional group my_map (MAP) {\n        repeated group map {\n          required binary str (UTF8);\n          required int32 num;\n        }\n      }\n\n      // Map<String, Integer> (nullable map, nullable values)\n      optional group my_map (MAP_KEY_VALUE) {(\n        repeated group map {\n          required binary key (UTF8);\n          optional int32 value;\n        }\n      }\n     */\n    assert isLogicalMapType(g.getType());\n    int mapEntries = g.getFieldRepetitionCount(0);\n    Map<String, Object> converted = new HashMap<>();\n    for (int i = 0; i < mapEntries; i++) {\n      Group mapEntry = g.getGroup(0, i);\n      String key = convertPrimitiveField(mapEntry, 0, binaryAsString).toString();\n      Object value = convertField(mapEntry, \"value\", binaryAsString);\n      converted.put(key, value);\n    }\n    return converted;\n  }"}, {"instruction": "An expectation for checking if the given text is present in the specified elements value\nattribute.\n\n@param locator used to find the element\n@param text    to be present in the value attribute of the element found by the locator\n@return true once the value attribute of the first element located by locator contains the\ngiven text", "input": "Java", "output": "public static ExpectedCondition<Boolean> textToBePresentInElementValue(final By locator,\n                                                                         final String text) {\n\n    return new ExpectedCondition<Boolean>() {\n      @Override\n      public Boolean apply(WebDriver driver) {\n        try {\n          String elementText = driver.findElement(locator).getAttribute(\"value\");\n          if (elementText != null) {\n            return elementText.contains(text);\n          }\n          return false;\n        } catch (StaleElementReferenceException e) {\n          return null;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return String.format(\"text ('%s') to be the value of element located by %s\",\n                             text, locator);\n      }\n    };\n  }"}, {"instruction": "!!! Only supports MySQL", "input": "Java", "output": "public static List<String> findSchemas(JdbcTemplate jdbcTemplate, final String schemaPattern,\n                                           final DdlSchemaFilter ddlSchemaFilter) {\n        List<String> schemas = findSchemas(jdbcTemplate, schemaPattern);\n        if (ddlSchemaFilter == null) {\n            return schemas;\n        }\n        List<String> filterSchemas = new ArrayList<String>();\n        for (String schema : schemas) {\n            if (ddlSchemaFilter.accept(schema)) {\n                filterSchemas.add(schema);\n            }\n        }\n        return filterSchemas;\n    }"}, {"instruction": "Gets resource from a String location.\n\n@param location the metadata location\n@return the resource from\n@throws IOException the exception", "input": "Java", "output": "public static AbstractResource getRawResourceFrom(final String location) throws IOException {\n        if (StringUtils.isBlank(location)) {\n            throw new IllegalArgumentException(\"Provided location does not exist and is empty\");\n        }\n        if (location.toLowerCase().startsWith(HTTP_URL_PREFIX)) {\n            return new UrlResource(location);\n        }\n        if (location.toLowerCase().startsWith(CLASSPATH_URL_PREFIX)) {\n            return new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()));\n        }\n        return new FileSystemResource(StringUtils.remove(location, FILE_URL_PREFIX));\n    }"}, {"instruction": "\u4ece\u6d41\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff0c\u8bfb\u5230\u8f93\u51fa\u6d41\u4e2d\n\n@param <T> \u8bfb\u53d6\u5bf9\u8c61\u7684\u7c7b\u578b\n@param in \u8f93\u5165\u6d41\n@return \u8f93\u51fa\u6d41\n@throws IORuntimeException IO\u5f02\u5e38\n@throws UtilException ClassNotFoundException\u5305\u88c5", "input": "Java", "output": "public static <T> T readObj(InputStream in) throws IORuntimeException, UtilException {\r\n\t\tif (in == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"The InputStream must not be null\");\r\n\t\t}\r\n\t\tObjectInputStream ois = null;\r\n\t\ttry {\r\n\t\t\tois = new ObjectInputStream(in);\r\n\t\t\t@SuppressWarnings(\"unchecked\") // may fail with CCE if serialised form is incorrect\r\n\t\t\tfinal T obj = (T) ois.readObject();\r\n\t\t\treturn obj;\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new IORuntimeException(e);\r\n\t\t} catch (ClassNotFoundException e) {\r\n\t\t\tthrow new UtilException(e);\r\n\t\t}\r\n\t}"}, {"instruction": "Create a {@link ConfigurationPropertyName} by adapting the given source. The name\nis split into elements around the given {@code separator}. This method is more\nlenient than {@link #of} in that it allows mixed case names and '{@code _}'\ncharacters. Other invalid characters are stripped out during parsing.\n<p>\nThe {@code elementValueProcessor} function may be used if additional processing is\nrequired on the extracted element values.\n@param name the name to parse\n@param separator the separator used to split the name\n@param elementValueProcessor a function to process element values\n@return a {@link ConfigurationPropertyName}", "input": "Java", "output": "static ConfigurationPropertyName adapt(CharSequence name, char separator,\n\t\t\tFunction<CharSequence, CharSequence> elementValueProcessor) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (name.length() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tElements elements = new ElementsParser(name, separator)\n\t\t\t\t.parse(elementValueProcessor);\n\t\tif (elements.getSize() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\treturn new ConfigurationPropertyName(elements);\n\t}"}, {"instruction": "Gets attribute merger.\n\n@param mergingPolicy the merging policy\n@return the attribute merger", "input": "Java", "output": "public static IAttributeMerger getAttributeMerger(final String mergingPolicy) {\n        switch (mergingPolicy.toLowerCase()) {\n            case \"multivalued\":\n            case \"multi_valued\":\n            case \"combine\":\n                return new MultivaluedAttributeMerger();\n            case \"add\":\n                return new NoncollidingAttributeAdder();\n            case \"replace\":\n            case \"overwrite\":\n            case \"override\":\n                return new ReplacingAttributeAdder();\n            default:\n                return new BaseAdditiveAttributeMerger() {\n                    @Override\n                    protected Map<String, List<Object>> mergePersonAttributes(final Map<String, List<Object>> toModify,\n                                                                              final Map<String, List<Object>> toConsider) {\n                        return new LinkedHashMap<>(toModify);\n                    }\n                };\n        }\n    }"}, {"instruction": "Calculate the ratio of similarity between 2 strings using LCS\n\n@param strA the first String\n@param strB the second String\n@return the percentage  double number", "input": "Java", "output": "public double getMatchRatio(String strA, String strB) {\n        if (strA == null && strB == null) {\n            return MAX_RATIO;\n            \n        } else if (strA == null || strB == null) {\n            return MIN_RATIO;\n        }\n        \n        if (strA.isEmpty() && strB.isEmpty()) {\n            return MAX_RATIO;\n            \n        } else if (strA.isEmpty() || strB.isEmpty()) {\n            return MIN_RATIO;\n        }\n                \n        //get the percentage match against the longer of the 2 strings\n        return (double)getLCS(strA, strB).length() / Math.max(strA.length(), strB.length());\n    }"}, {"instruction": "\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\n\n@param aggr \u5b57\u7b26\u4e32\u96c6\u5408\n@param str  \u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32\n@return", "input": "Java", "output": "public static boolean isInAggregate(String aggr, String str)\n    {\n        if (aggr != null && str != null)\n        {\n            str += \"1\";\n            for (int i = 0; i < str.length(); i++)\n            {\n                String s = str.substring(i, i + 1);\n                if (aggr.indexOf(s) == -1)\n                    return false;\n            }\n            return true;\n        }\n\n        return false;\n    }"}, {"instruction": "//////////////// Helper Methods ////////////////////", "input": "Java", "output": "private ResponseEntity<String> makeRestCall(String url) throws HygieiaException {\n        String jiraAccess = featureSettings.getJiraCredentials();\n        if (StringUtils.isEmpty(jiraAccess)) {\n            return restOperations.exchange(url, HttpMethod.GET, null, String.class);\n        } else {\n            String jiraAccessBase64 = new String(Base64.decodeBase64(jiraAccess));\n            String[] parts = jiraAccessBase64.split(\":\");\n            if (parts.length != 2) {\n                throw new HygieiaException(\"Invalid Jira credentials\", HygieiaException.INVALID_CONFIGURATION);\n            }\n            return restOperations.exchange(url, HttpMethod.GET, new HttpEntity<>(createHeaders(parts[0], parts[1])), String.class);\n        }\n    }"}, {"instruction": "Collect the RPC client information.\n\n@param rpcClientMetricsModel client information model", "input": "Java", "output": "public void collectClient(RpcClientLookoutModel rpcClientMetricsModel) {\n\n        try {\n            Id methodConsumerId = createMethodConsumerId(rpcClientMetricsModel);\n            MixinMetric methodConsumerMetric = Lookout.registry().mixinMetric(methodConsumerId);\n\n            recordCounterAndTimer(methodConsumerMetric, rpcClientMetricsModel);\n\n            recordSize(methodConsumerMetric, rpcClientMetricsModel);\n\n        } catch (Throwable t) {\n            LOGGER.error(LogCodes.getLog(LogCodes.ERROR_METRIC_REPORT_ERROR), t);\n        }\n    }"}, {"instruction": "Adds an indexed sequence of properties (with sub-properties) under a common key.\n\n<p>For example:\n\n<pre>\nschema.fields.0.type = INT, schema.fields.0.name = test\nschema.fields.1.type = LONG, schema.fields.1.name = test2\n</pre>\n\n<p>The arity of each subKeyValues must match the arity of propertyKeys.", "input": "Java", "output": "public void putIndexedFixedProperties(String key, List<String> subKeys, List<List<String>> subKeyValues) {\n\t\tcheckNotNull(key);\n\t\tcheckNotNull(subKeys);\n\t\tcheckNotNull(subKeyValues);\n\t\tfor (int idx = 0; idx < subKeyValues.size(); idx++) {\n\t\t\tfinal List<String> values = subKeyValues.get(idx);\n\t\t\tif (values == null || values.size() != subKeys.size()) {\n\t\t\t\tthrow new ValidationException(\"Values must have same arity as keys.\");\n\t\t\t}\n\t\t\tfor (int keyIdx = 0; keyIdx < values.size(); keyIdx++) {\n\t\t\t\tput(key + '.' + idx + '.' + subKeys.get(keyIdx), values.get(keyIdx));\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Deselect all options that display text matching the argument. That is, when given \"Bar\" this\nwould deselect an option like:\n\n&lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n\n@param text The visible text to match against\n@throws NoSuchElementException If no matching option elements are found\n@throws UnsupportedOperationException If the SELECT does not support multiple selections", "input": "Java", "output": "@Override\n  public void deselectByVisibleText(String text) {\n    if (!isMultiple()) {\n      throw new UnsupportedOperationException(\n        \"You may only deselect options of a multi-select\");\n    }\n\n    List<WebElement> options = element.findElements(By.xpath(\n      \".//option[normalize-space(.) = \" + Quotes.escape(text) + \"]\"));\n    if (options.isEmpty()) {\n      throw new NoSuchElementException(\"Cannot locate option with text: \" + text);\n    }\n\n    for (WebElement option : options) {\n      setSelected(option, false);\n    }\n  }"}, {"instruction": "Checks if the constant pool contains a reference to a given method, with any signature (return type and parameter types).\n\n@param className must be provided JVM-style, such as {@code java/lang/String}", "input": "Java", "output": "public boolean usesMethod(String className, String methodName) {\n\t\tint classIndex = findClass(className);\n\t\tif (classIndex == NOT_FOUND) return false;\n\t\tint methodNameIndex = findUtf8(methodName);\n\t\tif (methodNameIndex == NOT_FOUND) return false;\n\t\t\n\t\tfor (int i = 1; i < maxPoolSize; i++) {\n\t\t\tif (isMethod(i) && readValue(offsets[i]) == classIndex) {\n\t\t\t\tint nameAndTypeIndex = readValue(offsets[i] + 2);\n\t\t\t\tif (readValue(offsets[nameAndTypeIndex]) == methodNameIndex) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"}, {"instruction": "Blocks a non-worker-thread until completion or interruption.", "input": "Java", "output": "private int externalInterruptibleAwaitDone() throws InterruptedException {\n        int s;\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        while ((s = status) >= 0) {\n            if (U.compareAndSwapInt(this, STATUS, s, s | SIGNAL)) {\n                synchronized (this) {\n                    if (status >= 0)\n                        wait();\n                    else\n                        notifyAll();\n                }\n            }\n        }\n        return s;\n    }"}, {"instruction": "Update account info from account object.\n@param account to be updated\n@return this", "input": "Java", "output": "public CouchDbGoogleAuthenticatorAccount update(final OneTimeTokenAccount account) {\n        setId(account.getId());\n        setUsername(account.getUsername());\n        setSecretKey(account.getSecretKey());\n        setValidationCode(account.getValidationCode());\n        setScratchCodes(account.getScratchCodes());\n        setRegistrationDate(account.getRegistrationDate());\n        return this;\n    }"}, {"instruction": "\u8bbe\u7f6e\u901a\u7528Mapper\u914d\u7f6e\n\n@param config", "input": "Java", "output": "public void setConfig(Config config) {\n        this.config = config;\n        if(config.getResolveClass() != null){\n            try {\n                EntityHelper.setResolve(config.getResolveClass().newInstance());\n            } catch (Exception e) {\n                throw new MapperException(\"\u521b\u5efa \" + config.getResolveClass().getCanonicalName()\n                        + \" \u5b9e\u4f8b\u5931\u8d25\uff0c\u8bf7\u4fdd\u8bc1\u8be5\u7c7b\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u65b9\u6cd5!\", e);\n            }\n        }\n        if(config.getMappers() != null && config.getMappers().size() > 0){\n            for (Class mapperClass : config.getMappers()) {\n                registerMapper(mapperClass);\n            }\n        }\n    }"}, {"instruction": "This method initializes this", "input": "Java", "output": "private void initialize() {\r\n        this.setName(Constant.messages.getString(\"options.script.title\"));\r\n        this.setLayout(new GridBagLayout());\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridx = 0;\r\n        gbc.weightx = 1.0;\r\n        gbc.anchor = GridBagConstraints.LINE_START;\r\n        gbc.fill = GridBagConstraints.BOTH;\r\n\r\n        this.add(new JLabel(Constant.messages.getString(\"options.script.label.dirs\")), gbc);\r\n\r\n        tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(this.extension, getScriptDirModel());\r\n        \r\n        gbc.weighty = 1.0;\r\n        this.add(tokensOptionsPanel, gbc);\r\n\t}"}, {"instruction": "Initiates a forceful shutdown in which preexisting and new calls are cancelled. Although\nforceful, the shutdown process is still not instantaneous; {@link #isTerminated()} will likely\nreturn {@code false} immediately after this method returns.", "input": "Java", "output": "@Override\n  public ManagedChannelImpl shutdownNow() {\n    channelLogger.log(ChannelLogLevel.DEBUG, \"shutdownNow() called\");\n    shutdown();\n    uncommittedRetriableStreamsRegistry.onShutdownNow(SHUTDOWN_NOW_STATUS);\n    final class ShutdownNow implements Runnable {\n      @Override\n      public void run() {\n        if (shutdownNowed) {\n          return;\n        }\n        shutdownNowed = true;\n        maybeShutdownNowSubchannels();\n      }\n    }\n\n    syncContext.execute(new ShutdownNow());\n    return this;\n  }"}, {"instruction": "Perform kerberos login using the hadoop shim API if the configuration is available", "input": "Java", "output": "public static void loginFromKeytab(HiveConf hiveConf) throws IOException {\n    String principal = hiveConf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL);\n    String keyTabFile = hiveConf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB);\n    if (principal.isEmpty() || keyTabFile.isEmpty()) {\n      throw new IOException(\"HiveServer2 Kerberos principal or keytab is not correctly configured\");\n    } else {\n      UserGroupInformation.loginUserFromKeytab(SecurityUtil.getServerPrincipal(principal, \"0.0.0.0\"), keyTabFile);\n    }\n  }"}, {"instruction": "BC\u7684SM3withSM2\u7b7e\u540d\u5f97\u5230\u7684\u7ed3\u679c\u7684rs\u662fasn1\u683c\u5f0f\u7684\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8f6c\u5316\u6210\u76f4\u63a5\u62fc\u63a5r||s<br>\n\u6765\u81ea\uff1ahttps://blog.csdn.net/pridas/article/details/86118774\n\n@param rsDer rs in asn1 format\n@return sign result in plain byte array\n@since 4.5.0", "input": "Java", "output": "public static byte[] rsAsn1ToPlain(byte[] rsDer) {\r\n\t\tASN1Sequence seq = ASN1Sequence.getInstance(rsDer);\r\n\t\tbyte[] r = bigIntToFixexLengthBytes(ASN1Integer.getInstance(seq.getObjectAt(0)).getValue());\r\n\t\tbyte[] s = bigIntToFixexLengthBytes(ASN1Integer.getInstance(seq.getObjectAt(1)).getValue());\r\n\t\tbyte[] result = new byte[RS_LEN * 2];\r\n\t\tSystem.arraycopy(r, 0, result, 0, r.length);\r\n\t\tSystem.arraycopy(s, 0, result, RS_LEN, s.length);\r\n\t\treturn result;\r\n\t}"}, {"instruction": "This method initializes btnCancel\n\n@return javax.swing.JButton", "input": "Java", "output": "private JButton getBtnCancel() {\r\n\t\tif (btnCancel == null) {\r\n\t\t\tbtnCancel = new JButton();\r\n\t\t\tbtnCancel.setText(Constant.messages.getString(\"edit.find.button.cancel\"));\r\n\t\t\tbtnCancel.addActionListener(new java.awt.event.ActionListener() { \r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\r\n\r\n\t\t\t\t\tFindDialog.this.discard();\r\n\t\t\t\t\tFindDialog.this.dispatchEvent(new WindowEvent(FindDialog.this, WindowEvent.WINDOW_CLOSING));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\treturn btnCancel;\r\n\t}"}, {"instruction": "Gets the number of shared slots into which the given group can place subtasks or\nnested task groups.\n\n@param groupId The ID of the group.\n@return The number of shared slots available to the given job vertex.", "input": "Java", "output": "public int getNumberOfAvailableSlotsForGroup(AbstractID groupId) {\n\t\tsynchronized (lock) {\n\t\t\tMap<ResourceID, List<SharedSlot>> available = availableSlotsPerJid.get(groupId);\n\n\t\t\tif (available != null) {\n\t\t\t\tSet<SharedSlot> set = new HashSet<SharedSlot>();\n\n\t\t\t\tfor (List<SharedSlot> list : available.values()) {\n\t\t\t\t\tfor (SharedSlot slot : list) {\n\t\t\t\t\t\tset.add(slot);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn set.size();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// if no entry exists for a JobVertexID so far, then the vertex with that ID can\n\t\t\t\t// add a subtask into each shared slot of this group. Consequently, all\n\t\t\t\t// of them are available for that JobVertexID.\n\t\t\t\treturn allSlots.size();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Save this samediff instance as a zip file\nwith the training configuration\n@param trainingConfig the training configuration to save\n@param outputStream the output stream to write to\n@throws IOException", "input": "Java", "output": "public void saveWithTrainingConfig(TrainingConfig trainingConfig,OutputStream outputStream) throws  IOException {\n        ObjectMapper objectMapper = ObjectMapperHolder.getJsonMapper();\n        String configJson = objectMapper.writeValueAsString(trainingConfig);\n        ZipOutputStream zipfile = new ZipOutputStream(new CloseShieldOutputStream(outputStream));\n        ZipEntry config = new ZipEntry(TRAINING_CONFIG_JSON_ZIP_ENTRY_NAME);\n        zipfile.putNextEntry(config);\n        zipfile.write(configJson.getBytes());\n\n        ZipEntry sameDiff = new ZipEntry(SAMEDIFF_FILE_ENTRY_NAME);\n        zipfile.putNextEntry(sameDiff);\n\n        val fb = asFlatBuffers();\n        val offset = fb.position();\n\n        val array = fb.array();\n\n        try (BufferedOutputStream zipFileOutputStream = new BufferedOutputStream(zipfile);\n             val dos = new DataOutputStream(zipFileOutputStream)) {\n            dos.write(array, offset, array.length - offset);\n        }\n    }"}, {"instruction": "--------------------------------------------------------------------------------------------", "input": "Java", "output": "private int convertToInt(Object o, int defaultValue) {\n\t\tif (o.getClass() == Integer.class) {\n\t\t\treturn (Integer) o;\n\t\t}\n\t\telse if (o.getClass() == Long.class) {\n\t\t\tlong value = (Long) o;\n\t\t\tif (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n\t\t\t\treturn (int) value;\n\t\t\t} else {\n\t\t\t\tLOG.warn(\"Configuration value {} overflows/underflows the integer type.\", value);\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\treturn Integer.parseInt(o.toString());\n\t\t\t}\n\t\t\tcatch (NumberFormatException e) {\n\t\t\t\tLOG.warn(\"Configuration cannot evaluate value {} as an integer number\", o);\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Create generate service ticket action.\n\n@param flow the flow", "input": "Java", "output": "protected void createGenerateServiceTicketAction(final Flow flow) {\n        val handler = createActionState(flow,\n            CasWebflowConstants.STATE_ID_GENERATE_SERVICE_TICKET,\n            createEvaluateAction(CasWebflowConstants.ACTION_ID_GENERATE_SERVICE_TICKET));\n        createTransitionForState(handler, CasWebflowConstants.TRANSITION_ID_SUCCESS, CasWebflowConstants.STATE_ID_REDIRECT);\n        createTransitionForState(handler, CasWebflowConstants.TRANSITION_ID_WARN, CasWebflowConstants.STATE_ID_WARN);\n        createTransitionForState(handler, CasWebflowConstants.TRANSITION_ID_AUTHENTICATION_FAILURE, CasWebflowConstants.STATE_ID_HANDLE_AUTHN_FAILURE);\n        createTransitionForState(handler, CasWebflowConstants.TRANSITION_ID_ERROR, CasWebflowConstants.STATE_ID_INIT_LOGIN_FORM);\n        createTransitionForState(handler, CasWebflowConstants.TRANSITION_ID_GATEWAY, CasWebflowConstants.STATE_ID_GATEWAY_SERVICES_MGMT_CHECK);\n    }"}, {"instruction": "Creates a uima sentence iterator with the given path\n@param path the path to the root directory or file to read from\n@return the uima sentence iterator for the given root dir or file\n@throws Exception", "input": "Java", "output": "public static SentenceIterator createWithPath(String path) throws Exception {\n        return new UimaSentenceIterator(path,\n                        new UimaResource(AnalysisEngineFactory.createEngine(AnalysisEngineFactory\n                                        .createEngineDescription(TokenizerAnnotator.getDescription(),\n                                                        SentenceAnnotator.getDescription()))));\n    }"}, {"instruction": "Lookup words in text\n\n@param text  text to look up user dictionary matches for\n@return list of UserDictionaryMatch, not null", "input": "Java", "output": "public List<UserDictionaryMatch> findUserDictionaryMatches(String text) {\n        List<UserDictionaryMatch> matchInfos = new ArrayList<>();\n        int startIndex = 0;\n\n        while (startIndex < text.length()) {\n            int matchLength = 0;\n\n            while (startIndex + matchLength < text.length()\n                            && entries.containsKeyPrefix(text.substring(startIndex, startIndex + matchLength + 1))) {\n                matchLength++;\n            }\n\n            if (matchLength > 0) {\n                String match = text.substring(startIndex, startIndex + matchLength);\n                int[] details = entries.get(match);\n\n                if (details != null) {\n                    matchInfos.addAll(makeMatchDetails(startIndex, details));\n                }\n            }\n\n            startIndex++;\n        }\n\n        return matchInfos;\n    }"}, {"instruction": "Print values in a nice format, e.g. (1, 2, 3)\n\n@param start the beginning of the values, e.g. \"(\"\n@param separator the separator of values, e.g. \", \"\n@param end the end of the values, e.g. \")\"\n@param values the values to print\n\n@return neatly formatted value list", "input": "Java", "output": "public static String printValues(String start, String separator, String end, Iterator<?> values) {\n        if(start == null){\n            start = \"(\";\n        }\n        if (separator == null){\n            separator = \",\";\n        }\n        if (end == null){\n            end = \")\";\n        }\n\n        StringBuilder sb = new StringBuilder(start);\n        while(values.hasNext()) {\n            sb.append(print(values.next()));\n            if (values.hasNext()) {\n                sb.append(separator);\n            }\n        }\n        return sb.append(end).toString();\n    }"}, {"instruction": "To enable \"run out of the box for testing\".", "input": "Java", "output": "private static String[] prepareDefaultConf() throws IOException {\n    final File templateFolder = new File(\"test/local-conf-templates\");\n    final File localConfFolder = new File(\"local/conf\");\n    if (!localConfFolder.exists()) {\n      FileUtils.copyDirectory(templateFolder, localConfFolder.getParentFile());\n      log.info(\"Copied local conf templates from \" + templateFolder.getAbsolutePath());\n    }\n    log.info(\"Using conf at \" + localConfFolder.getAbsolutePath());\n    return new String[]{\"-conf\", \"local/conf\"};\n  }"}, {"instruction": "Put.\n\n@param service the service", "input": "Java", "output": "public void put(final RegisteredService service) {\n        val values = buildTableAttributeValuesMapFromService(service);\n        val putItemRequest = new PutItemRequest(dynamoDbProperties.getTableName(), values);\n        LOGGER.debug(\"Submitting put request [{}] for service id [{}]\", putItemRequest, service.getServiceId());\n        val putItemResult = amazonDynamoDBClient.putItem(putItemRequest);\n        LOGGER.debug(\"Service added with result [{}]\", putItemResult);\n    }"}, {"instruction": "Determines the number of consecutive characters that are encodable using text compaction.\n\n@param msg      the message\n@param startpos the start position within the message\n@return the requested character count", "input": "Java", "output": "private static int determineConsecutiveTextCount(CharSequence msg, int startpos) {\n    int len = msg.length();\n    int idx = startpos;\n    while (idx < len) {\n      char ch = msg.charAt(idx);\n      int numericCount = 0;\n      while (numericCount < 13 && isDigit(ch) && idx < len) {\n        numericCount++;\n        idx++;\n        if (idx < len) {\n          ch = msg.charAt(idx);\n        }\n      }\n      if (numericCount >= 13) {\n        return idx - startpos - numericCount;\n      }\n      if (numericCount > 0) {\n        //Heuristic: All text-encodable chars or digits are binary encodable\n        continue;\n      }\n      ch = msg.charAt(idx);\n\n      //Check if character is encodable\n      if (!isText(ch)) {\n        break;\n      }\n      idx++;\n    }\n    return idx - startpos;\n  }"}, {"instruction": "Releases all memory segments for the given owner.\n\n@param owner The owner memory segments are to be released.", "input": "Java", "output": "public void releaseAll(Object owner) {\n\t\tif (owner == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// -------------------- BEGIN CRITICAL SECTION -------------------\n\t\tsynchronized (lock) {\n\t\t\tif (isShutDown) {\n\t\t\t\tthrow new IllegalStateException(\"Memory manager has been shut down.\");\n\t\t\t}\n\n\t\t\t// get all segments\n\t\t\tfinal Set<MemorySegment> segments = allocatedSegments.remove(owner);\n\n\t\t\t// all segments may have been freed previously individually\n\t\t\tif (segments == null || segments.isEmpty()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// free each segment\n\t\t\tif (isPreAllocated) {\n\t\t\t\tfor (MemorySegment seg : segments) {\n\t\t\t\t\tmemoryPool.returnSegmentToPool(seg);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (MemorySegment seg : segments) {\n\t\t\t\t\tseg.free();\n\t\t\t\t}\n\t\t\t\tnumNonAllocatedPages += segments.size();\n\t\t\t}\n\n\t\t\tsegments.clear();\n\t\t}\n\t\t// -------------------- END CRITICAL SECTION -------------------\n\t}"}, {"instruction": "Sends a {@code RST_STREAM} frame even if we don't know about the stream. This error condition is most likely\ntriggered by the first frame of a stream being invalid. That is, there was an error reading the frame before\nwe could create a new stream.", "input": "Java", "output": "private ChannelFuture resetUnknownStream(final ChannelHandlerContext ctx, int streamId, long errorCode,\n                                             ChannelPromise promise) {\n        ChannelFuture future = frameWriter().writeRstStream(ctx, streamId, errorCode, promise);\n        if (future.isDone()) {\n            closeConnectionOnError(ctx, future);\n        } else {\n            future.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    closeConnectionOnError(ctx, future);\n                }\n            });\n        }\n        return future;\n    }"}, {"instruction": "Initialize field if not initialized and return the actual instance.\n\n@return Actual field instance.", "input": "Java", "output": "public FieldInitializationReport initialize() {\n        final AccessibilityChanger changer = new AccessibilityChanger();\n        changer.enableAccess(field);\n\n        try {\n            return acquireFieldInstance();\n        } catch(IllegalAccessException e) {\n            throw new MockitoException(\"Problems initializing field '\" + field.getName() + \"' of type '\" + field.getType().getSimpleName() + \"'\", e);\n        } finally {\n            changer.safelyDisableAccess(field);\n        }\n    }"}, {"instruction": "Create an n dimensional index\nbased on the given interval indices.\nStart and end represent the begin and\nend of each interval\n@param start the start indexes\n@param end the end indexes\n@return the interval index relative to the given\nstart and end indices", "input": "Java", "output": "public static INDArrayIndex[] createFromStartAndEnd(INDArray start, INDArray end) {\n        if (start.length() != end.length())\n            throw new IllegalArgumentException(\"Start length must be equal to end length\");\n        else {\n            if (start.length() > Integer.MAX_VALUE)\n                throw new ND4JIllegalStateException(\"Can't proceed with INDArray with length > Integer.MAX_VALUE\");\n\n            INDArrayIndex[] indexes = new INDArrayIndex[(int) start.length()];\n            for (int i = 0; i < indexes.length; i++) {\n                indexes[i] = NDArrayIndex.interval(start.getInt(i), end.getInt(i));\n            }\n            return indexes;\n        }\n    }"}, {"instruction": "Encode ticket id into a SHA-512.\n\n@param ticketId the ticket id\n@return the ticket", "input": "Java", "output": "protected String encodeTicketId(final String ticketId) {\n        if (!isCipherExecutorEnabled()) {\n            LOGGER.trace(MESSAGE);\n            return ticketId;\n        }\n        if (StringUtils.isBlank(ticketId)) {\n            return ticketId;\n        }\n        val encodedId = DigestUtils.sha512(ticketId);\n        LOGGER.debug(\"Encoded original ticket id [{}] to [{}]\", ticketId, encodedId);\n        return encodedId;\n    }"}, {"instruction": "Computes a visual representation of the approximate histogram with a given number of equal-sized bins\n\n@param size number of equal-sized bins to divide the histogram into\n\n@return visual representation of the histogram", "input": "Java", "output": "public Histogram toHistogram(int size)\n  {\n    Preconditions.checkArgument(size > 1, \"histogram size must be greater than 1\");\n\n    float[] breaks = new float[size + 1];\n    float delta = (max - min) / (size - 1);\n    breaks[0] = min - delta;\n    for (int i = 1; i < breaks.length - 1; ++i) {\n      breaks[i] = breaks[i - 1] + delta;\n    }\n    breaks[breaks.length - 1] = max;\n    return toHistogram(breaks);\n  }"}, {"instruction": "Shuts down the checkpoint coordinator.\n\n<p>After this method has been called, the coordinator does not accept\nand further messages and cannot trigger any further checkpoints.", "input": "Java", "output": "public void shutdown(JobStatus jobStatus) throws Exception {\n\t\tsynchronized (lock) {\n\t\t\tif (!shutdown) {\n\t\t\t\tshutdown = true;\n\t\t\t\tLOG.info(\"Stopping checkpoint coordinator for job {}.\", job);\n\n\t\t\t\tperiodicScheduling = false;\n\t\t\t\ttriggerRequestQueued = false;\n\n\t\t\t\t// shut down the hooks\n\t\t\t\tMasterHooks.close(masterHooks.values(), LOG);\n\t\t\t\tmasterHooks.clear();\n\n\t\t\t\t// shut down the thread that handles the timeouts and pending triggers\n\t\t\t\ttimer.shutdownNow();\n\n\t\t\t\t// clear and discard all pending checkpoints\n\t\t\t\tfor (PendingCheckpoint pending : pendingCheckpoints.values()) {\n\t\t\t\t\tpending.abort(CheckpointFailureReason.CHECKPOINT_COORDINATOR_SHUTDOWN);\n\t\t\t\t}\n\t\t\t\tpendingCheckpoints.clear();\n\n\t\t\t\tcompletedCheckpointStore.shutdown(jobStatus);\n\t\t\t\tcheckpointIdCounter.shutdown(jobStatus);\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Specifies a writer instance that caches should notify each time an entry is explicitly created\nor modified, or removed for any {@linkplain RemovalCause reason}. The writer is not notified\nwhen an entry is loaded or computed. Each cache created by this builder will invoke this writer\nas part of the atomic operation that modifies the cache.\n<p>\n<b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder\nreference; instead use the reference this method <i>returns</i>. At runtime, these point to the\nsame instance, but only the returned reference has the correct generic type information so as\nto ensure type safety. For best results, use the standard method-chaining idiom illustrated in\nthe class documentation above, configuring a builder and building your cache in a single\nstatement. Failure to heed this advice can result in a {@link ClassCastException} being thrown\nby a cache operation at some <i>undefined</i> point in the future.\n<p>\n<b>Warning:</b> any exception thrown by {@code writer} will be propagated to the {@code Cache}\nuser.\n<p>\nThis feature cannot be used in conjunction with {@link #weakKeys()} or {@link #buildAsync}.\n\n@param writer a writer instance that caches should notify each time an entry is explicitly\ncreated or modified, or removed for any reason\n@param <K1> the key type of the writer\n@param <V1> the value type of the writer\n@return the cache builder reference that should be used instead of {@code this} for any\nremaining configuration and cache building\n@throws IllegalStateException if a writer was already set or if the key strength is weak\n@throws NullPointerException if the specified writer is null", "input": "Java", "output": "@NonNull\n  public <K1 extends K, V1 extends V> Caffeine<K1, V1> writer(\n      @NonNull CacheWriter<? super K1, ? super V1> writer) {\n    requireState(this.writer == null, \"Writer was already set to %s\", this.writer);\n    requireState(keyStrength == null, \"Weak keys may not be used with CacheWriter\");\n\n    @SuppressWarnings(\"unchecked\")\n    Caffeine<K1, V1> self = (Caffeine<K1, V1>) this;\n    self.writer = requireNonNull(writer);\n    return self;\n  }"}, {"instruction": "Schedules or updates the consumer tasks of the result partition with the given ID.", "input": "Java", "output": "void scheduleOrUpdateConsumers(ResultPartitionID partitionId) {\n\n\t\tfinal Execution execution = currentExecution;\n\n\t\t// Abort this request if there was a concurrent reset\n\t\tif (!partitionId.getProducerId().equals(execution.getAttemptId())) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal IntermediateResultPartition partition = resultPartitions.get(partitionId.getPartitionId());\n\n\t\tif (partition == null) {\n\t\t\tthrow new IllegalStateException(\"Unknown partition \" + partitionId + \".\");\n\t\t}\n\n\t\tpartition.markDataProduced();\n\n\t\tif (partition.getIntermediateResult().getResultType().isPipelined()) {\n\t\t\t// Schedule or update receivers of this partition\n\t\t\texecution.scheduleOrUpdateConsumers(partition.getConsumers());\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"ScheduleOrUpdateConsumers msg is only valid for\" +\n\t\t\t\t\t\"pipelined partitions.\");\n\t\t}\n\t}"}, {"instruction": "Attach a {@link ConfigurationPropertySource} support to the specified\n{@link Environment}. Adapts each {@link PropertySource} managed by the environment\nto a {@link ConfigurationPropertySource} and allows classic\n{@link PropertySourcesPropertyResolver} calls to resolve using\n{@link ConfigurationPropertyName configuration property names}.\n<p>\nThe attached resolver will dynamically track any additions or removals from the\nunderlying {@link Environment} property sources.\n@param environment the source environment (must be an instance of\n{@link ConfigurableEnvironment})\n@see #get(Environment)", "input": "Java", "output": "public static void attach(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tPropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached != null && attached.getSource() != sources) {\n\t\t\tsources.remove(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\t\tattached = null;\n\t\t}\n\t\tif (attached == null) {\n\t\t\tsources.addFirst(new ConfigurationPropertySourcesPropertySource(\n\t\t\t\t\tATTACHED_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew SpringConfigurationPropertySources(sources)));\n\t\t}\n\t}"}, {"instruction": "Reads from a data input view a {@link TypeSerializerSnapshot} that was previously\nwritten using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.\n\n@param in the data input view\n@param userCodeClassLoader the user code class loader to use\n@param existingPriorSerializer the prior serializer. This would only be non-null if we are\nrestoring from a snapshot taken with Flink version <= 1.6.\n\n@return the read serializer configuration snapshot", "input": "Java", "output": "public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(\n\t\t\tDataInputView in,\n\t\t\tClassLoader userCodeClassLoader,\n\t\t\t@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {\n\n\t\tfinal TypeSerializerSnapshotSerializationProxy<T> proxy =\n\t\t\tnew TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer);\n\t\tproxy.read(in);\n\n\t\treturn proxy.getSerializerSnapshot();\n\t}"}, {"instruction": "Instantiates a user code class from is definition in the task configuration.\nThe class is instantiated without arguments using the null-ary constructor. Instantiation\nwill fail if this constructor does not exist or is not public.\n\n@param <T> The generic type of the user code class.\n@param config The task configuration containing the class description.\n@param cl The class loader to be used to load the class.\n@param superClass The super class that the user code class extends or implements, for type checking.\n\n@return An instance of the user code class.", "input": "Java", "output": "public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {\n\t\ttry {\n\t\t\tT stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl);\n\t\t\t// check if the class is a subclass, if the check is required\n\t\t\tif (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {\n\t\t\t\tthrow new RuntimeException(\"The class '\" + stub.getClass().getName() + \"' is not a subclass of '\" + \n\t\t\t\t\t\tsuperClass.getName() + \"' as is required.\");\n\t\t\t}\n\t\t\treturn stub;\n\t\t}\n\t\tcatch (ClassCastException ccex) {\n\t\t\tthrow new RuntimeException(\"The UDF class is not a proper subclass of \" + superClass.getName(), ccex);\n\t\t}\n\t}"}, {"instruction": "Retrieves a value for given key.\n@param key the key to retrieve a value for\n@returns {Promise} a promise that would be resolved in case of successful operation or rejected with\nvalue of the error message if the operation fails. It resolves with a value that is either:\n<ul>\n<li>undefined - the entry does not exist</li>\n<li>any other - the entry exists and value contains the actually one</li>\n</ul>\n@public", "input": "JavaScript", "output": "function (key) {\n\t\t\t\tvar pGet,\n\t\t\t\t\toMsr = startMeasurements(\"get\", key);\n\n\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"]\");\n\n\t\t\t\tpGet = this._callInstanceMethod(\"get\", arguments).then(function callInstanceHandler(v) {\n\t\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"] done\");\n\t\t\t\t\toMsr.endAsync();\n\t\t\t\t\treturn v;\n\t\t\t\t}, function (e) {\n\t\t\t\t\tLog.debug(\"Cache Manager: Getting key [\" + key + \"] failed. Error: \" + e);\n\t\t\t\t\toMsr.endAsync();\n\t\t\t\t\tthrow e;\n\t\t\t\t});\n\t\t\t\toMsr.endSync();\n\t\t\t\treturn pGet;\n\t\t\t}"}, {"instruction": "Drag Handlers", "input": "JavaScript", "output": "function(evt, x, y) {\n\n        var data = this.eventData(evt);\n        var label = { position: this.getLabelPosition(x, y, data.positionArgs) };\n        this.model.label(data.labelIdx, label);\n    }"}, {"instruction": "23.3.3.3 WeakMap.prototype.get(key)", "input": "JavaScript", "output": "function get(key) {\n        var state = getInternalState(this);\n        if (isObject(key)) {\n          var data = getWeakData(key);\n          if (data === true) return uncaughtFrozenStore(state).get(key);\n          return data ? data[state.id] : undefined;\n        }\n      }"}, {"instruction": "Cache size has been exceeded, create list of images sorted by timeStamp So we can purge the least recently used image", "input": "JavaScript", "output": "function compare (a, b) {\r\n    if (a.timeStamp > b.timeStamp) {\r\n      return -1;\r\n    }\r\n    if (a.timeStamp < b.timeStamp) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }"}, {"instruction": "same as Array.prototype.slice, but also works on typed arrays", "input": "JavaScript", "output": "function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t}"}, {"instruction": "////////////////", "input": "JavaScript", "output": "function initialise() {\n\n\t    DOMReady(function () {\n\n\t    \tfor (var i = 0; i < 10; i++) {\n\t\t\t\tcreateCommandHtml(true);\n\t    \t}\n\n\t\t\t// var rellax = new Rellax('.rellax');\n\n\t    });\n\n\t    document.addEventListener('webkitAnimationEnd', onAnimationEnded);\n\n\t}"}, {"instruction": "Completely all callbacks for every event, such as on object destruction", "input": "JavaScript", "output": "function() {\n        if (!this._callbacks) return;\n        this.__callbacksFrozen = false;\n        for (var event in this._callbacks) {\n            if (this._callbacks[event]) {\n                // Remove the normal way, in case we've got a nested loop\n                this._unbindCallbacks(event);\n                // Also completely delete the registered callback from handlers\n                delete handlers[event][this[0]];\n            }\n        }\n    }"}, {"instruction": "And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js", "input": "JavaScript", "output": "function ExtensionAPI(chartInstance) {\n    zrUtil.each(echartsAPIList, function (name) {\n        this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    }, this);\n}"}, {"instruction": "Get the current user's followed artists.\n@param {Object} [options] Options, being after and limit.\n@param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n@returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\nalbum objects. Not returned if a callback is given.", "input": "JavaScript", "output": "function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withQueryParameters(\n        {\n          type: 'artist'\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  }"}, {"instruction": "/* template", "input": "JavaScript", "output": "function() {\n      var _vm = this;\n      var _h = _vm.$createElement;\n      var _c = _vm._self._c || _h;\n      return _c(\n        _vm.tag,\n        {\n          tag: \"component\",\n          class: [!_vm.fluid ? \"container\" : \"container-fluid\"]\n        },\n        [_vm._t(\"default\")],\n        2\n      )\n    }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, key, value, properties) {\n            $super(key, value, properties);\n            switch(key) {\n\n                case 'chart.showLines':\n                    this.showLines = (value === 'false');\n                    this.mapper.mapValue((value === 'false') ? 0 : 1, [\"plotOptions\", \"area\", \"lineWidth\"]);\n                    break;\n                default:\n                    // no-op, ignore unsupported properties\n                    break;\n\n            }\n        }"}, {"instruction": "/*\nclass <className> () {}", "input": "JavaScript", "output": "function (node) {\n                _addResult(node);\n                ASTWalker.simple(node, {\n                    /*\n                        class <className> () {\n                            <methodName> () {\n                            \n                            }\n                        }\n                    */\n                    MethodDefinition: function (methodNode) {\n                        _addResult(methodNode, methodNode.key.start, node.id.name);\n                    }\n                });\n            }"}, {"instruction": "Build the legacy pyramid URLs (one tile per level)\n@function\n@param {object} options - infoJson\n@throws {Error}", "input": "JavaScript", "output": "function constructLevels(options) {\n        var levels = [];\n        for(var i = 0; i < options.sizes.length; i++) {\n            levels.push({\n                url: options['@id'] + '/full/' + options.sizes[i].width + ',/0/default.' + options.tileFormat,\n                width: options.sizes[i].width,\n                height: options.sizes[i].height\n            });\n        }\n        return levels.sort(function(a, b) {\n            return a.width - b.width;\n        });\n    }"}, {"instruction": "------------------------------ Attach global event listener ------------------------------", "input": "JavaScript", "output": "function addListener(eventType, fn){\n  if (document.addEventListener) {\n    document.addEventListener(eventType, fn, false);\n  } else {\n    document.attachEvent(\"on\" + eventType, fn);\n  }\n}"}, {"instruction": "Find the deepest React component completely containing the root of the\npassed-in instance (for use when entire React trees are nested within each\nother). If React trees are not nested, returns null.", "input": "JavaScript", "output": "function findRootContainerNode(inst) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  if (typeof inst.tag === 'number') {\n    while (inst['return']) {\n      inst = inst['return'];\n    }\n    if (inst.tag !== HostRoot) {\n      // This can happen if we're in a detached tree.\n      return null;\n    }\n    return inst.stateNode.containerInfo;\n  } else {\n    while (inst._hostParent) {\n      inst = inst._hostParent;\n    }\n    var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(inst);\n    return rootNode.parentNode;\n  }\n}"}, {"instruction": "This next function modelled on Cesium.geoJsonDataSource's defaultDescribe.", "input": "JavaScript", "output": "function describeWithoutUnderscores(properties, nameProperty) {\n  var html = \"\";\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      var value = properties[key];\n      if (typeof value === \"object\") {\n        value = describeWithoutUnderscores(value);\n      } else {\n        value = formatPropertyValue(value);\n      }\n      key = key.replace(/_/g, \" \");\n      if (defined(value)) {\n        html += \"<tr><th>\" + key + \"</th><td>\" + value + \"</td></tr>\";\n      }\n    }\n  }\n  if (html.length > 0) {\n    html =\n      '<table class=\"cesium-infoBox-defaultTable\"><tbody>' +\n      html +\n      \"</tbody></table>\";\n  }\n  return html;\n}"}, {"instruction": "Validate a book configuration for plugins and\nreturns an update configuration with default values.\n\n@param {Book}\n@param {OrderedMap<String:Plugin>}\n@return {Promise<Book>}", "input": "JavaScript", "output": "function validateConfig(book, plugins) {\n    return Promise.reduce(plugins, function(newBook, plugin) {\n        return validatePluginConfig(newBook, plugin);\n    }, book);\n}"}, {"instruction": "Return a string that shows the literal parent hierarchy of the selector\nin info.\n\n@param {!SelectorInfo} info\n@param {boolean=} useGroup true to append selectorGroup instead of selector\n@return {string} the literal parent hierarchy of the selector", "input": "JavaScript", "output": "function getCompleteSelectors(info, useGroup) {\n        if (info.parentSelectors) {\n            // Show parents with / separators.\n            var completeSelectors = info.parentSelectors + \" / \";\n            if (useGroup && info.selectorGroup) {\n                completeSelectors += info.selectorGroup;\n            } else {\n                completeSelectors += info.selector;\n            }\n            return completeSelectors;\n        } else if (useGroup && info.selectorGroup) {\n            return info.selectorGroup;\n        }\n\n        return info.selector;\n    }"}, {"instruction": "Print the names and majors of students in a sample spreadsheet:\nhttps://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit", "input": "JavaScript", "output": "function listMajors(auth) {\n  const sheets = google.sheets('v4');\n  sheets.spreadsheets.values.get(\n    {\n      auth: auth,\n      spreadsheetId: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',\n      range: 'Class Data!A2:E',\n    },\n    (err, res) => {\n      if (err) {\n        console.error('The API returned an error.');\n        throw err;\n      }\n      const rows = res.data.values;\n      if (rows.length === 0) {\n        console.log('No data found.');\n      } else {\n        console.log('Name, Major:');\n        for (const row of rows) {\n          // Print columns A and E, which correspond to indices 0 and 4.\n          console.log(`${row[0]}, ${row[4]}`);\n        }\n      }\n    }\n  );\n}"}, {"instruction": "called third", "input": "JavaScript", "output": "function interpretResponse(serverResponse) {\n  const bidResponses = [];\n  // currently server returns a single response which is the body property\n  if (serverResponse.body) {\n    serverResponse.body.bidderCode = BIDDER_CODE;\n    bidResponses.push(serverResponse.body);\n  }\n\n  return bidResponses;\n}"}, {"instruction": "Process Slate node leaves in preparation for MDAST transformation.", "input": "JavaScript", "output": "function processLeaves(leaf) {\n  /**\n   * Get an array of the mark types, converted to their MDAST equivalent\n   * types.\n   */\n  const { marks = [], text } = leaf;\n  const markTypes = marks.map(mark => markMap[mark.type]);\n\n  if (typeof leaf.text === 'string') {\n    /**\n     * Code marks must be removed from the marks array, and the presence of a\n     * code mark changes the text node type that should be used.\n     */\n    const { filteredMarkTypes, textNodeType } = processCodeMark(markTypes);\n    return { text, marks: filteredMarkTypes, textNodeType };\n  }\n\n  return { node: leaf.node, marks: markTypes };\n}"}, {"instruction": "The file item has been added to the DOM.", "input": "JavaScript", "output": "function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        }"}, {"instruction": "/*!\nThe following functions are taken from jQuery UI 1.8.17 but modified\n\nCopyright 2011, AUTHORS.txt (http://jqueryui.com/about)\nDual licensed under the MIT or GPL Version 2 licenses.\nhttp://jquery.org/license\n\nhttp://docs.jquery.com/UI", "input": "JavaScript", "output": "function visible( element ) {\n\t\t// check if one of the parents (until it's position parent) is invisible\n\t\t// prevent that elements in static area are always checked as invisible\n\n\t\t// list all items until the offsetParent item (with jQuery >1.6 you can use parentsUntil)\n\t\tvar oOffsetParent = jQuery(element).offsetParent();\n\t\tvar bOffsetParentFound = false;\n\t\tvar $refs = jQuery(element).parents().filter(function() {\n\t\t\tif (this === oOffsetParent) {\n\t\t\t\tbOffsetParentFound = true;\n\t\t\t}\n\t\t\treturn bOffsetParentFound;\n\t\t});\n\n\t\t// check for at least one item to be visible\n\t\treturn !jQuery(element).add($refs).filter(function() {\n\t\t\treturn jQuery.css( this, \"visibility\" ) === \"hidden\" || jQuery.expr.filters.hidden( this );\n\t\t}).length;\n\t}"}, {"instruction": "the exporter is buggy eg VCGLab | MeshLab and does not specify input_set", "input": "JavaScript", "output": "function getLastNumber(str){\n\t\t\t\t\tvar retval=\"\";\n\t\t\t\t\tfor (var i=str.length-1;i>=0;--i)\n\t\t\t\t\t\tif (str[i]>=\"0\"&&str[i]<=\"9\")\n\t\t\t\t\t\t\tretval=str[i]+retval;\n\t\t\t\t\tif (retval.length==0) return \"0\";\n\t\t\t\t\treturn retval;\n\t\t\t\t}"}, {"instruction": "Generate JSON icons map by parsing the generated CSS\n\n@param  {Object} options\n@return {void}", "input": "JavaScript", "output": "async function generateJson(options, generatorResult) {\n  const jsonPath = (\n    options.jsonPath ||\n    `${ path.join(options.outputDir, '/' + options.fontName) }.json`\n  )\n\n  const css = generatorResult.generateCss()\n  let map = {}\n\n  css.replace(CSS_PARSE_REGEX, (match, name, code) => map[name] = code)\n\n  await fsAsync.writeFile(jsonPath, JSON.stringify(map, null, 4))\n}"}, {"instruction": "------------------------------------------------------------------------------ Helpers ------------------------------------------------------------------------------ \nGets all of the Use Strict Directives in the Directive Prologue of a group of\nstatements.\n@param {ASTNode[]} statements Statements in the program or function body.\n@returns {ASTNode[]} All of the Use Strict Directives.", "input": "JavaScript", "output": "function getUseStrictDirectives(statements) {\n    const directives = [];\n\n    for (let i = 0; i < statements.length; i++) {\n        const statement = statements[i];\n\n        if (\n            statement.type === \"ExpressionStatement\" &&\n            statement.expression.type === \"Literal\" &&\n            statement.expression.value === \"use strict\"\n        ) {\n            directives[i] = statement;\n        } else {\n            break;\n        }\n    }\n\n    return directives;\n}"}, {"instruction": "Get the constructor for a type\n\nIf the type is not registered, use generic {module:core/abstracts.MediaObject}\n\n@function module:kurentoClient~MediaObjectCreator~getConstructor\n\n@param {external:string} type\n@param {external:Boolean} strict\n\n@return {module:core/abstracts.MediaObject}", "input": "JavaScript", "output": "function getConstructor(type, strict) {\n  var result = register.classes[type.qualifiedType] || register.abstracts[type\n      .qualifiedType] ||\n    register.classes[type.type] || register.abstracts[type.type] ||\n    register.classes[type] || register.abstracts[type];\n  if (result) return result;\n\n  if (type.hierarchy != undefined) {\n    for (var i = 0; i <= type.hierarchy.length - 1; i++) {\n      var result = register.classes[type.hierarchy[i]] || register.abstracts[\n        type.hierarchy[i]];\n      if (result) return result;\n    };\n  }\n  if (strict) {\n    var error = new SyntaxError(\"Unknown type '\" + type + \"'\")\n    error.type = type\n\n    throw error\n  }\n\n  console.warn(\"Unknown type '\", type, \"', using MediaObject instead\");\n  return register.abstracts.MediaObject;\n}"}, {"instruction": "Validates any given collection.\nBasically you can validate Audiences, Categories, Severity etc - everything that meets the criteria\n\nPositive cases :\n- \"Capitalcase\"\n\n@private\n@param {array} aEnum Enum to be validated.\n@param {array} oEnumComparison Enum comparison.\n@returns {boolean} Boolean response if the provided collection is valid.", "input": "JavaScript", "output": "function(aEnum, oEnumComparison) {\n\n\t\tif (aEnum && Array.isArray(aEnum) && aEnum.length) {\n\n\t\t\tfor (var i = 0; i < aEnum.length; i++) {\n\n\t\t\t\tif (oEnumComparison.hasOwnProperty(aEnum[i])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}"}, {"instruction": "Initialize the grid navigation holder to null.\n@param {Object} modelItem The model item object that represent a row.", "input": "JavaScript", "output": "function(modelItem) {\n\t\t\tif(!modelItem){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar modelId = this._model.getId(modelItem);\n\t\t\tif(this._dict[modelId]){\n\t\t\t\tthis._dict[modelId].gridChildren = null;\n\t\t\t}\n\t\t}"}, {"instruction": "client.enableSessionPersistence\n\n@description Enable session persistence of the requested type\n\n@param {Object}          loadBalancer      the loadBalancer or loadBalancerId\n@param {String}          type              HTTP_COOKIE or SOURCE_IP\n@param {function}        callback", "input": "JavaScript", "output": "function (loadBalancer, type, callback) {\n    var self = this,\n        loadBalancerId =\n          loadBalancer instanceof lb.LoadBalancer ? loadBalancer.id : loadBalancer;\n\n    if (!type || (type !== 'HTTP_COOKIE' && type !== 'SOURCE_IP')) {\n      throw new Error('Please provide a valid session persistence type');\n    }\n\n    self._request({\n      path: urlJoin(_urlPrefix, loadBalancerId, 'sessionpersistence'),\n      method: 'PUT',\n      body: {\n        sessionPersistence: {\n          persistenceType: type\n        }\n      }\n    }, function (err) {\n      return callback(err);\n    });\n  }"}, {"instruction": "Convert a list back to a js native array", "input": "JavaScript", "output": "function listAsArray(list){\n\n   return foldR( function(arraySoFar, listItem){\n      \n      arraySoFar.unshift(listItem);\n      return arraySoFar;\n           \n   }, [], list );\n   \n}"}, {"instruction": "An @import directive  @import \"lib\";  Depending on our environemnt, importing is done differently: In the browser, it's an XHR request, in Node, it would be a file-system operation. The function used for importing is stored in `import`, which we pass to the Import constructor.", "input": "JavaScript", "output": "function () {\n                var path, features, index = i;\n\n                save();\n\n                var dir = $re(/^@import?\\s+/);\n\n                var options = (dir ? this.importOptions() : null) || {};\n\n                if (dir && (path = this.entities.quoted() || this.entities.url())) {\n                    features = this.mediaFeatures();\n                    if ($char(';')) {\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, env.currentFileInfo);\n                    }\n                }\n\n                restore();\n            }"}, {"instruction": "Save `namespaces`.\n\n@param {String} namespaces\n@api private", "input": "JavaScript", "output": "function save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}"}, {"instruction": "@private\n\nRecursively walks Mustache tokens, and creates a tree that Vapid understands.\n\n@param {Object} tree - a memo that holds the total tree value\n@param {array} branch - Mustache tokens\n@param {string} branchToken - current branch name and params\n@return {Object} tree of sections, fields, params, etc.\n /* eslint-disable no-param-reassign", "input": "JavaScript", "output": "function _walk(tree, branch, branchToken = 'general') {\n  tree[branchToken] = tree[branchToken] || _initBranch(branchToken);\n\n  branch.forEach((leaf) => {\n    switch (leaf[0]) {\n      case 'name': {\n        _addToTree(tree, branchToken, leaf[1]);\n        break;\n      }\n      case '#': {\n        const [, keyword, remainder] = leaf[1].toLowerCase().match(LEAF_REGEX);\n\n        if (Utils.includes(Goatee.CONDITIONALS, keyword)) {\n          if (this.options.parseConditionals) {\n            _addToTree(tree, branchToken, Utils.trim(remainder));\n          }\n          _walk.call(this, tree, leaf[4], branchToken);\n        } else {\n          _walk.call(this, tree, leaf[4], leaf[1]);\n        }\n\n        break;\n      }\n      default: {\n        // Do nothing\n      }\n    }\n  });\n\n  return tree;\n}"}, {"instruction": "PKCS#1 (OAEP) mask generation function", "input": "JavaScript", "output": "function oaep_mgf1_arr(seed, len, hash)\n{\n    var mask = '', i = 0;\n\n    while (mask.length < len)\n    {\n        mask += hash(String.fromCharCode.apply(String, seed.concat([\n                (i & 0xff000000) >> 24,\n                (i & 0x00ff0000) >> 16,\n                (i & 0x0000ff00) >> 8,\n                i & 0x000000ff])));\n        i += 1;\n    }\n\n    return mask;\n}"}, {"instruction": "not save if out of bounds", "input": "JavaScript", "output": "function (start, end) {\n    var total = 0;\n\n    start = start || 0;\n    end = end || this.binCount;\n\n    for (var i = start; i < end; i++) {\n      total += this.frequencyByteData[i];\n    }\n\n    return total / (end - start);\n  }"}, {"instruction": "Helper to instantiate chess.js correctly on both browser and Node.", "input": "JavaScript", "output": "function Load(pgn) {\n  let chess = null;\n  if (Chess.Chess) {\n    chess = new Chess.Chess();\n  } else {\n    chess = new Chess();\n  }\n  chess.load_pgn(pgn);\n  return chess;\n}"}, {"instruction": "Returns all Documents that are 'open' in the UI somewhere (for now, this means open in an\ninline editor and/or a full-size editor). Only these Documents can be modified, and only\nthese Documents are synced with external changes on disk.\n@return {Array.<Document>}", "input": "JavaScript", "output": "function getAllOpenDocuments() {\n        var result = [];\n        var id;\n        for (id in _openDocuments) {\n            if (_openDocuments.hasOwnProperty(id)) {\n                result.push(_openDocuments[id]);\n            }\n        }\n        return result;\n    }"}, {"instruction": "Set the position of the visual highlighter.\n@param {string} elementId - The id of the DOM element that need to be highlighted\n@returns {exports}", "input": "JavaScript", "output": "function (elementId) {\n\t\t\t\tvar highlighter;\n\t\t\t\tvar targetDomElement;\n\t\t\t\tvar targetRect;\n\n\t\t\t\tif (_highLighter === null && !document.getElementById(\"ui5-highlighter\")) {\n\t\t\t\t\t_createHighLighter();\n\t\t\t\t} else {\n\t\t\t\t\t_showHighLighter();\n\t\t\t\t}\n\n\t\t\t\thighlighter = _highLighter.firstElementChild;\n\t\t\t\ttargetDomElement = document.getElementById(elementId);\n\n\t\t\t\tif (targetDomElement) {\n\t\t\t\t\ttargetRect = targetDomElement.getBoundingClientRect();\n\n\t\t\t\t\thighlighter.style.top = targetRect.top + \"px\";\n\t\t\t\t\thighlighter.style.left = targetRect.left + \"px\";\n\t\t\t\t\thighlighter.style.height = targetRect.height + \"px\";\n\t\t\t\t\thighlighter.style.width = targetRect.width + \"px\";\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}"}, {"instruction": "checks if companion is authorized to access a user's provider account.\n\n@param {object} req\n@param {object} res", "input": "JavaScript", "output": "function authorized (req, res) {\n  const { params, uppy } = req\n  const providerName = params.providerName\n\n  if (!uppy.providerTokens || !uppy.providerTokens[providerName]) {\n    return res.json({ authenticated: false })\n  }\n\n  const token = uppy.providerTokens[providerName]\n  uppy.provider.list({ token, uppy }, (err, response, body) => {\n    const notAuthenticated = Boolean(err)\n    if (notAuthenticated) {\n      logger.debug(`${providerName} failed authorizarion test err:${err}`, 'provider.auth.check')\n    }\n    return res.json({ authenticated: !notAuthenticated })\n  })\n}"}, {"instruction": "Replace table.\n@param {jQuery} $table - table jQuery element\n@param {Array.<Array.<object>>} tableData - table data\n@returns {jQuery}\n@ignore", "input": "JavaScript", "output": "function replaceTable($table, tableData) {\n  const cellIndexData = tableDataHandler.createCellIndexData(tableData);\n  const renderData = tableDataHandler.createRenderData(tableData, cellIndexData);\n  const $newTable = $(createTableHtml(renderData));\n\n  $table.replaceWith($newTable);\n\n  return $newTable;\n}"}, {"instruction": "We need to update this component if the sort order changes or our entry object\nchanges. Thanks to immutability, if any of the directory contents change, our\nentry object will change.", "input": "JavaScript", "output": "function (nextProps, nextState) {\n            return nextProps.forceRender ||\n                this.props.entry !== nextProps.entry ||\n                this.props.sortDirectoriesFirst !== nextProps.sortDirectoriesFirst ||\n                this.props.extensions !== nextProps.extensions ||\n                (nextState !== undefined && this.state.draggedOver !== nextState.draggedOver);\n        }"}, {"instruction": "Removes errors that occur inside a string node\n@param {ASTNode} node to check for matching errors.\n@returns {void}\n@private", "input": "JavaScript", "output": "function removeWhitespaceError(node) {\n            const locStart = node.loc.start;\n            const locEnd = node.loc.end;\n\n            errors = errors.filter(({ loc: errorLoc }) => {\n                if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {\n                    if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }"}, {"instruction": "Get the actual indent of node\n@param {ASTNode|Token} node Node to examine\n@param {boolean} [byLastLine=false] get indent of node's last line\n@returns {Object} The node's indent. Contains keys `space` and `tab`, representing the indent of each character. Also\ncontains keys `goodChar` and `badChar`, where `goodChar` is the amount of the user's desired indentation character, and\n`badChar` is the amount of the other indentation character.", "input": "JavaScript", "output": "function getNodeIndent(node, byLastLine) {\n            const token = byLastLine ? sourceCode.getLastToken(node) : sourceCode.getFirstToken(node);\n            const srcCharsBeforeNode = sourceCode.getText(token, token.loc.start.column).split(\"\");\n            const indentChars = srcCharsBeforeNode.slice(0, srcCharsBeforeNode.findIndex(char => char !== \" \" && char !== \"\\t\"));\n            const spaces = indentChars.filter(char => char === \" \").length;\n            const tabs = indentChars.filter(char => char === \"\\t\").length;\n\n            return {\n                space: spaces,\n                tab: tabs,\n                goodChar: indentType === \"space\" ? spaces : tabs,\n                badChar: indentType === \"space\" ? tabs : spaces\n            };\n        }"}, {"instruction": "Apply the operators that apply to the 'browser:reload' event\n@param {Rx.Observable} subject\n@param options\n@returns {Rx.Observable}", "input": "JavaScript", "output": "function applyReloadOperators(subject, options) {\n    var operators = [\n        {\n            option: \"reloadDebounce\",\n            fnName: \"debounce\"\n        },\n        {\n            option: \"reloadThrottle\",\n            fnName: \"throttle\"\n        },\n        {\n            option: \"reloadDelay\",\n            fnName: \"delay\"\n        }\n    ];\n\n    return applyOperators(\n        operators,\n        subject,\n        options,\n        options.getIn([\"debug\", \"scheduler\"])\n    );\n}"}, {"instruction": "Get a call object built with the provided options.\n@param {grpc.Channel} channel\n@param {string} path\n@param {grpc.Client~CallOptions=} options Options object.", "input": "JavaScript", "output": "function getCall(channel, path, options) {\n  var deadline;\n  var host;\n  var parent;\n  var propagate_flags;\n  var credentials;\n  if (options) {\n    deadline = options.deadline;\n    host = options.host;\n    parent = options.parent ? options.parent.call : undefined;\n    propagate_flags = options.propagate_flags;\n    credentials = options.credentials;\n  }\n  if (deadline === undefined) {\n    deadline = Infinity;\n  }\n  var call = channel.createCall(path, deadline, host,\n                                parent, propagate_flags);\n  if (credentials) {\n    call.setCredentials(credentials);\n  }\n  return call;\n}"}, {"instruction": "*\n@method insert(str, [index] = length)\n@returns String\n@short Adds `str` at [index]. Allows negative values.\n\n@example\n\n'dopamine'.insert('e', 3)       -> dopeamine\n'spelling eror'.insert('r', -3) -> spelling error\n\n@param {string} str\n@param {number} [index]\n\n*", "input": "JavaScript", "output": "function(str, substr, index) {\n    index = isUndefined(index) ? str.length : index;\n    return str.slice(0, index) + substr + str.slice(index);\n  }"}, {"instruction": "Checks if there are internal rules files that has to be loaded\n@returns {Promise} The returned promise resolves with an argument showing\nwhether internal rules can be loaded or not", "input": "JavaScript", "output": "function () {\n\t\t\t\tvar that = this;\n\n\t\t\t\tvar oInternalRulesPromise = new Promise(function (resolve) {\n\n\t\t\t\t\tif (that.bCanLoadInternalRules !== null) {\n\t\t\t\t\t\tresolve(that.bCanLoadInternalRules);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\ttype: \"HEAD\",\n\t\t\t\t\t\turl: sInternalPingFilePath,\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tthat.bCanLoadInternalRules = true;\n\t\t\t\t\t\t\tresolve(that.bCanLoadInternalRules);\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\tthat.bCanLoadInternalRules = false;\n\t\t\t\t\t\t\tresolve(that.bCanLoadInternalRules);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturn oInternalRulesPromise;\n\t\t\t}"}, {"instruction": "Get a list of indexes of nodes containing a non-axis-aligned rectangle\n\n@param  {array}  corners      An array containing each corner of the\nrectangle defined by its coordinates (x, y).\n@param  {array}  quadCorners  An array of the quad nodes' corners.\n@return {array}               An array of indexes containing one to\nfour integers.", "input": "JavaScript", "output": "function _quadCollision(corners, quadCorners) {\n    var indexes = [];\n\n    // Iterating through quads\n    for (var i = 0; i < 4; i++)\n      if (_geom.collision(corners, quadCorners[i]))\n        indexes.push(i);\n\n    return indexes;\n  }"}, {"instruction": "SECTION: handle `change` event", "input": "JavaScript", "output": "function shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}"}, {"instruction": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).\n\n@static\n@memberOf _\n@since 3.0.0\n@category Array\n@param {Array} array The array to query.\n@param {Function} [predicate=_.identity] The function invoked per iteration.\n@returns {Array} Returns the slice of `array`.\n@example\n\nvar users = [\n{ 'user': 'barney',  'active': true },\n{ 'user': 'fred',    'active': false },\n{ 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']", "input": "JavaScript", "output": "function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }"}, {"instruction": "This code walks the history of the master branch and prints results that look very similar to calling `git log` from the command line", "input": "JavaScript", "output": "function compileHistory(resultingArrayOfCommits) {\n  var lastSha;\n  if (historyCommits.length > 0) {\n    lastSha = historyCommits[historyCommits.length - 1].commit.sha();\n    if (\n      resultingArrayOfCommits.length == 1 &&\n      resultingArrayOfCommits[0].commit.sha() == lastSha\n    ) {\n      return;\n    }\n  }\n\n  resultingArrayOfCommits.forEach(function(entry) {\n    historyCommits.push(entry);\n  });\n\n  lastSha = historyCommits[historyCommits.length - 1].commit.sha();\n\n  walker = repo.createRevWalk();\n  walker.push(lastSha);\n  walker.sorting(nodegit.Revwalk.SORT.TIME);\n\n  return walker.fileHistoryWalk(historyFile, 500)\n    .then(compileHistory);\n}"}, {"instruction": "Create a notification\n@constructor", "input": "JavaScript", "output": "function Notification (payload) {\n  this.encoding = \"utf8\";\n  this.payload = {};\n  this.compiled = false;\n\n  this.aps = {};\n  this.expiry = 0;\n  this.priority = 10;\n\n  if (payload) {\n    for(let key in payload) {\n      if (payload.hasOwnProperty(key)) {\n        this[key] = payload[key];\n      }\n    }\n  }\n}"}, {"instruction": "Stroke a line of the given two points\n@name strokeLine\n@memberOf me.CanvasRenderer.prototype\n@function\n@param {Number} startX the start x coordinate\n@param {Number} startY the start y coordinate\n@param {Number} endX the end x coordinate\n@param {Number} endY the end y coordinate", "input": "JavaScript", "output": "function (startX, startY, endX, endY) {\n            var context = this.backBufferContext2D;\n\n            if (context < 1 / 255) {\n                // Fast path: don't draw fully transparent\n                return;\n            }\n\n            context.beginPath();\n            context.moveTo(startX, startY);\n            context.lineTo(endX, endY);\n            context.stroke();\n        }"}, {"instruction": "Create a button that when clicked will enter into stereo-rendering mode for VR.\n\nStructure: <div><button></div>\n\n@param {function} onClick - click event handler\n@returns {Element} Wrapper <div>.", "input": "JavaScript", "output": "function createEnterVRButton (onClick) {\n  var vrButton;\n  var wrapper;\n\n  // Create elements.\n  wrapper = document.createElement('div');\n  wrapper.classList.add(ENTER_VR_CLASS);\n  wrapper.setAttribute(constants.AFRAME_INJECTED, '');\n  vrButton = document.createElement('button');\n  vrButton.className = ENTER_VR_BTN_CLASS;\n  vrButton.setAttribute('title',\n    'Enter VR mode with a headset or fullscreen mode on a desktop. ' +\n    'Visit https://webvr.rocks or https://webvr.info for more information.');\n  vrButton.setAttribute(constants.AFRAME_INJECTED, '');\n\n  // Insert elements.\n  wrapper.appendChild(vrButton);\n  vrButton.addEventListener('click', function (evt) {\n    onClick();\n    evt.stopPropagation();\n  });\n  return wrapper;\n}"}, {"instruction": "Indicates if the current application is a variant of an existing one\n\n@param {sap.ui.core.Control} oControl - SAPUI5 control\n@returns {boolean} true if it's an application variant\n@public\n@function\n@name sap.ui.fl.Utils.isApplicationVariant", "input": "JavaScript", "output": "function (oControl) {\n\t\t\tvar sFlexReference = Utils.getComponentClassName(oControl);\n\t\t\tvar oAppComponent = Utils.getAppComponentForControl(oControl);\n\t\t\tvar sComponentName = Utils.getComponentName(oAppComponent);\n\t\t\treturn sFlexReference !== sComponentName;\n\t\t}"}, {"instruction": "/* BIFF2_??? where ??? is the name from [XLS]", "input": "JavaScript", "output": "function parse_BIFF2STR(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar str = parse_XLUnicodeString2(blob, length-7, opts);\n\tcell.t = 'str';\n\tcell.val = str;\n\treturn cell;\n}"}, {"instruction": "Counts repeated characters in a string. When 50% or more characters are the same,\nwe return false and therefore invalidate the string.\n@param {String} stringToTest The password string to check.\n@return {Boolean}", "input": "JavaScript", "output": "function characterOccurance(stringToTest) {\n    var chars = {},\n        allowedOccurancy,\n        valid = true;\n\n    stringToTest = _.toString(stringToTest);\n    allowedOccurancy = stringToTest.length / 2;\n\n    // Loop through string and accumulate character counts\n    _.each(stringToTest, function (char) {\n        if (!chars[char]) {\n            chars[char] = 1;\n        } else {\n            chars[char] += 1;\n        }\n    });\n\n    // check if any of the accumulated chars exceed the allowed occurancy\n    // of 50% of the words' length.\n    _.forIn(chars, function (charCount) {\n        if (charCount >= allowedOccurancy) {\n            valid = false;\n        }\n    });\n\n    return valid;\n}"}, {"instruction": "Dom ready.\n\n@param {Function} fn\n\n@link https://github.com/jed/alReady.js", "input": "JavaScript", "output": "function alReady ( fn ) {\n        var add = 'addEventListener';\n        var pre = document[ add ] ? '' : 'on';\n\n        ~document.readyState.indexOf( 'm' ) ? fn() :\n            'load DOMContentLoaded readystatechange'.replace( /\\w+/g, function( type, i ) {\n                ( i ? document : window )\n                    [ pre ? 'attachEvent' : add ]\n                (\n                    pre + type,\n                    function(){ if ( fn ) if ( i < 6 || ~document.readyState.indexOf( 'm' ) ) fn(), fn = 0 },\n                    !1\n                )\n            })\n    }"}, {"instruction": "A ResourceStream is a Node stream implementation for objects that are\nfetched from the API. Basically, any Collection of resources from the\nAPI can be wrapped in this stream, and the stream will fetch new pages\nof items as needed.\n\n@param {Collection} collection Response from initial collection request.\n@constructor", "input": "JavaScript", "output": "function ResourceStream(collection) {\n  var me = this;\n  BufferedReadable.call(me, {\n    objectMode: true\n  });\n\n  // @type {Collection} The collection whose data was last pushed into the\n  //     stream, such that if we have to go back for more, we should fetch\n  //     its `nextPage`.\n  me._collection = collection;\n\n  // @type {boolean} True iff a request for more items is in flight.\n  me._fetching = false;\n\n  // Ensure the initial collection's data is in the stream.\n  me._pushCollection();\n}"}, {"instruction": "Flatten an array\n@param {Array} array\n@param {Array} target\n@returns Array flattened array", "input": "JavaScript", "output": "function flatten(array, target) {\n\tconst result = target || [];\n\n\tfor (let i = 0; i < array.length; ++i) {\n\t\tif (Array.isArray(array[i])) {\n\t\t\tflatten(array[i], result);\n\t\t}\n\t\telse {\n\t\t\tresult.push(array[i]);\n\t\t}\n\t}\n\n\treturn result;\n}"}, {"instruction": "Get linefeed\n\n@param {Object} options\n@api private", "input": "JavaScript", "output": "function getLinefeed(options) {\n  var feeds = {\n    cr: '\\r',\n    crlf: '\\r\\n',\n    lf: '\\n',\n    lfcr: '\\n\\r'\n  };\n\n  return feeds[options.linefeed] || '\\n';\n}"}, {"instruction": "This is the full set of types that any JSEP node can be. Store them here to save space when minified", "input": "JavaScript", "output": "function(message, index) {\n\t\t\tvar error = new Error(message + ' at character ' + index);\n\t\t\terror.index = index;\n\t\t\terror.description = message;\n\t\t\tthrow error;\n\t\t}"}, {"instruction": "Returns the stack index for the given dataset based on groups and bar visibility.\n@param {number} [datasetIndex] - The dataset index\n@param {string} [name] - The stack name to find\n@returns {number} The stack index\n@private", "input": "JavaScript", "output": "function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t}"}, {"instruction": "BCP: 1670235674 MessageItem acts as a proxy to StandardListItem So, we should ensure if something is changed in MessageItem, it would be propagated to the StandardListItem", "input": "JavaScript", "output": "function (sName, oItem) {\n\t\t\t\t\tif (oItem._oMessagePopoverItem.getId() === this.getId() && oItem.getMetadata().getProperty(sName)) {\n\t\t\t\t\t\toItem.setProperty(sName, oValue);\n\t\t\t\t\t}\n\t\t\t\t}"}, {"instruction": "--- Compile Helpers ---", "input": "JavaScript", "output": "function getPackagePath(p) {\n      if (p.path) {\n        return p.path;\n      } else if (p.polyfill) {\n        return path.join('polyfills', p.namespace.toLowerCase(), p.name);\n      } else if (p.type === 'fix') {\n        return path.join(p.module.toLowerCase(), 'fixes', p.name);\n      } else if (p.type === 'locale') {\n        return path.join(p.module.toLowerCase(), p.code);\n      } else if (sourcePackageIsDependency(p)) {\n        return path.join(p.module.toLowerCase(), p.type, p.name);\n      } else {\n        return path.join(p.namespace.toLowerCase(), p.name);\n      }\n    }"}, {"instruction": "/*\nOutputs a log message for the given level. Leads to an <code>undefined</code> result\nin case of a WARNING.\n\n@param {sap.base.Log.Level} iLevel\nA log level, either DEBUG or WARNING\n@param {...string} aTexts\nThe main text of the message is constructed from the rest of the arguments by\njoining them\n@returns {boolean}\n<code>false</code>", "input": "JavaScript", "output": "function log(iLevel) {\n\t\t\t\tvar sLocation;\n\n\t\t\t\tif (Log.isLoggable(iLevel, sODataMetaModel)) {\n\t\t\t\t\tsLocation = Array.isArray(vLocation)\n\t\t\t\t\t\t? vLocation.join(\"/\")\n\t\t\t\t\t\t: vLocation;\n\t\t\t\t\tLog[iLevel === DEBUG ? \"debug\" : \"warning\"](\n\t\t\t\t\t\tArray.prototype.slice.call(arguments, 1).join(\"\")\n\t\t\t\t\t\t\t+ (sLocation ? \" at /\" + sLocation : \"\"),\n\t\t\t\t\t\tsResolvedPath, sODataMetaModel);\n\t\t\t\t}\n\t\t\t\tif (iLevel === WARNING) {\n\t\t\t\t\tvResult = undefined;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}"}, {"instruction": "Obtains the children of a remote resource\n@param location The location of the item to obtain children for\n@return A deferred that will provide the array of child objects when complete", "input": "JavaScript", "output": "function(location) {\n\t\t\tif (!location) {\n\t\t\t\tlocation = this._rootLocation;\n\t\t\t}\n\t\t\treturn _call(\"PROPFIND\", location, {depth:1}).then(function(response) {\n\t\t\t\tif (response.status !== 207) {\n\t\t\t\t\tthrow \"Error \" + response.status;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar multistatus = parseDAV_multistatus(response.responseText);\n\t\t\t\tvar childrenResponses = multistatus.response.slice(1);\n\t\t\t\t\n\t\t\t\tvar children = [];\n\t\t\t\twhile (childrenResponses.length !== 0) {\n\t\t\t\t\tchildren.push(createFile(childrenResponses.shift()));\n\t\t\t\t}\n\t\t\t\treturn children;\n\t\t\t});\n\t\t}"}, {"instruction": "$NON-NLS-0$", "input": "JavaScript", "output": "function(item, index, ar){\t\t\t\r\n\t\t\tvar option = document.createElement(\"option\"); //$NON-NLS-0$\r\n\t\t\toption.value = item.value;\r\n\t\t\toption.appendChild(document.createTextNode(typeof item.label === \"string\" ? item.label : item.value)); //$NON-NLS-0$\r\n\t\t\tif( item.selected  ){\r\n\t\t\t\toption.selected = 'selected'; //$NON-NLS-0$\r\n\t\t\t}\r\n\t\t\tthis.select.appendChild(option);\r\n\t\t}"}, {"instruction": "Get a text description of the resolution based on the zoom level\nmax width of the dataset, the bins per dimension and the maximum\nzoom.\n\n@param {int} zoomLevel The current zoomLevel (e.g. 0)\n@param {int} max_width The max width\n(e.g. 2 ** maxZoom * highestResolution * binsPerDimension)\n@param {int} bins_per_dimension The number of bins per tile dimension\n(e.g. 256)\n@param {int} maxZoom The maximum zoom level for this tileset\n\n@returns {string} A formatted string representation of the zoom level\n(e.g. \"30K\")", "input": "JavaScript", "output": "function getWidthBasedResolutionText(\n  zoomLevel, maxWidth, binsPerDimension, maxZoom\n) {\n  const resolution = maxWidth / ((2 ** zoomLevel) * binsPerDimension);\n\n  // we can't display a NaN resolution\n  if (!Number.isNaN(resolution)) {\n    // what is the maximum possible resolution?\n    // this will determine how we format the lower resolutions\n    const maxResolutionSize = maxWidth / ((2 ** maxZoom) * binsPerDimension);\n\n    const pp = precisionPrefix(maxResolutionSize, resolution);\n    const f = formatPrefix(`.${pp}`, resolution);\n    const formattedResolution = f(resolution);\n\n    return formattedResolution;\n  }\n  console.warn(\n    'NaN resolution, screen is probably too small. Dimensions:',\n    this.dimensions,\n  );\n\n  return '';\n}"}, {"instruction": "Converts all object property names to leading '--' style\n\n@param {object} varObj Object containing CSS custom property name:value pairs\n@returns {object}", "input": "JavaScript", "output": "function fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}"}, {"instruction": "Hash Password Setter", "input": "JavaScript", "output": "function hashPassword (data) {\n  var password = data.password\n  var hash = data.hash\n\n  if (password) {\n    var salt = bcrypt.genSaltSync(10)\n    hash = bcrypt.hashSync(password, salt)\n  }\n\n  this.hash = hash\n}"}, {"instruction": "readable event readable - some data is now available event data - switch to flowing mode - feeds chunks to handler event end - no more data event close - optional, indicates upstream close event error - duh", "input": "JavaScript", "output": "function(size) {\n    var buffers;\n    // read min(buffer, size || infinity)\n    if (size) {\n      buffers = [];\n      while (size && this.buffers.length && !this.buffers[0].eod) {\n        var first = this.buffers[0];\n        var buffer = first.read(size);\n        size -= buffer.length;\n        buffers.push(buffer);\n        if (first.eod && first.full) {\n          this.buffers.shift();\n        }\n      }\n      return Buffer.concat(buffers);\n    }\n\n    buffers = this.buffers.map(buf => buf.toBuffer())\n      .filter(Boolean);\n    this.buffers = [];\n    return Buffer.concat(buffers);\n  }"}, {"instruction": "Check to see if a node contains only identifers\n@param {ASTNode} node The node to check\n@returns {boolean} Whether or not the node contains only identifers", "input": "JavaScript", "output": "function containsOnlyIdentifiers(node) {\n            if (node.type === \"Identifier\") {\n                return true;\n            }\n\n            if (node.type === \"MemberExpression\") {\n                if (node.object.type === \"Identifier\") {\n                    return true;\n                }\n                if (node.object.type === \"MemberExpression\") {\n                    return containsOnlyIdentifiers(node.object);\n                }\n            }\n\n            return false;\n        }"}, {"instruction": "Creates an untitled document. The associated File has a fullPath that\nlooks like /some-random-string/Untitled-counter.fileExt.\n\n@param {number} counter - used in the name of the new Document's File\n@param {string} fileExt - file extension of the new Document's File, including \".\"\n@return {Document} - a new untitled Document", "input": "JavaScript", "output": "function createUntitledDocument(counter, fileExt) {\n        var filename = Strings.UNTITLED + \"-\" + counter + fileExt,\n            fullPath = _untitledDocumentPath + \"/\" + filename,\n            now = new Date(),\n            file = new InMemoryFile(fullPath, FileSystem);\n\n        FileSystem.addEntryForPathIfRequired(file, fullPath);\n\n        return new DocumentModule.Document(file, now, \"\");\n    }"}, {"instruction": "template that produces error message", "input": "JavaScript", "output": "function(errors) {\n      var\n        html = '<ul class=\"list\">'\n      ;\n      $.each(errors, function(index, value) {\n        html += '<li>' + value + '</li>';\n      });\n      html += '</ul>';\n      return $(html);\n    }"}, {"instruction": "column merge \uac00 \uc124\uc815\ub418\uc5b4 \uc788\uc744 \ub54c \ud5e4\ub354\uc758 \uacc4\uce35\uad6c\uc870 \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc838\uc628\ub2e4.\n@returns {Array}  \uacc4\uce35\uad6c\uc870 \ub9ac\uc2a4\ud2b8\n@private", "input": "JavaScript", "output": "function() {\n        var columns = this._getColumnData().columns;\n        var hierarchyList;\n\n        hierarchyList = _.map(columns, function(column) {\n            return this._getColumnHierarchy(column).reverse();\n        }, this);\n\n        return hierarchyList;\n    }"}, {"instruction": "Block to repeat until a condition becomes true.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"message0\": Blockly.Msg.CONTROL_REPEATUNTIL,\n      \"message1\": \"%1\",\n      \"message2\": \"%1\",\n      \"lastDummyAlign2\": \"RIGHT\",\n      \"args0\": [\n        {\n          \"type\": \"input_value\",\n          \"name\": \"CONDITION\",\n          \"check\": \"Boolean\"\n        }\n      ],\n      \"args1\": [\n        {\n          \"type\": \"input_statement\",\n          \"name\": \"SUBSTACK\"\n        }\n      ],\n      \"args2\": [\n        {\n          \"type\": \"field_image\",\n          \"src\": Blockly.mainWorkspace.options.pathToMedia + \"repeat.svg\",\n          \"width\": 24,\n          \"height\": 24,\n          \"alt\": \"*\",\n          \"flip_rtl\": true\n        }\n      ],\n      \"category\": Blockly.Categories.control,\n      \"extensions\": [\"colours_control\", \"shape_statement\"]\n    });\n  }"}, {"instruction": "Animated works by building a directed acyclic graph of dependencies\ntransparently when you render your Animated components.\n\nnew Animated.Value(0)\n.interpolate()        .interpolate()    new Animated.Value(1)\nopacity               translateY      scale\nstyle                         transform\nView#234                         style\nView#123\n\nA) Top Down phase\nWhen an Animated.Value is updated, we recursively go down through this\ngraph in order to find leaf nodes: the views that we flag as needing\nan update.\n\nB) Bottom Up phase\nWhen a view is flagged as needing an update, we recursively go back up\nin order to build the new value that it needs. The reason why we need\nthis two-phases process is to deal with composite props such as\ntransform which can receive values from multiple parents.", "input": "JavaScript", "output": "function findAnimatedStyles(node, styles) {\n  if (typeof node.update === 'function') styles.add(node)\n  else node.getChildren().forEach(child => findAnimatedStyles(child, styles))\n}"}, {"instruction": "Checks the origin and enables/disables CORS headers in the response.\n@param  {Object}   req express request object.\n@param  {Function} cb  callback that configures CORS.\n@return {null}", "input": "JavaScript", "output": "function handleCORS(req, cb) {\n    const origin = req.get('origin');\n    const trustedDomains = req.client && req.client.trustedDomains;\n\n    // Request must have an Origin header\n    if (!origin) {\n        return cb(null, DISABLE_CORS);\n    }\n\n    // Origin matches a client_trusted_domain\n    if (some(trustedDomains, {trusted_domain: origin})) {\n        return cb(null, ENABLE_CORS);\n    }\n\n    // Origin matches whitelist\n    if (getWhitelist().indexOf(url.parse(origin).hostname) > -1) {\n        return cb(null, ENABLE_CORS);\n    }\n\n    return cb(null, DISABLE_CORS);\n}"}, {"instruction": "PTR records with a TTL of 0 is considered a \"goodbye\" announcement. I.e. a DNS response broadcasted when a service shuts down in order to let the network know that the service is no longer going to be available.  For more info see: https://tools.ietf.org/html/rfc6762#section-8.4  This function returns an array of all resource records considered a goodbye record", "input": "JavaScript", "output": "function goodbyes (name, packet) {\n  return packet.answers.concat(packet.additionals)\n    .filter(function (rr) {\n      return rr.type === 'PTR' && rr.ttl === 0 && dnsEqual(rr.name, name)\n    })\n    .map(function (rr) {\n      return rr.data\n    })\n}"}, {"instruction": "Checks a given node against matching selectors and returns\nselector index (or 0 if none matched).\n\nThis function takes into account the ngProjectAs attribute: if present its value will be compared\nto the raw (un-parsed) CSS selector instead of using standard selector matching logic.", "input": "JavaScript", "output": "function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}"}, {"instruction": "Move by key\n\n@param right {boolean} direction to move", "input": "JavaScript", "output": "function (right) {\n            var p = this.coords.p_pointer;\n            var p_step = (this.options.max - this.options.min) / 100;\n            p_step = this.options.step / p_step;\n\n            if (right) {\n                p += p_step;\n            } else {\n                p -= p_step;\n            }\n\n            this.coords.x_pointer = this.toFixed(this.coords.w_rs / 100 * p);\n            this.is_key = true;\n            this.calc();\n        }"}, {"instruction": "B.2.3.2.1 CreateHTML(string, tag, attribute, value)", "input": "JavaScript", "output": "function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n}"}, {"instruction": "Checks the provided OTP token against system generated token\n\n@module otplib-authenticator/check\n@param {string} token - the OTP token to check\n@param {string} secret - your secret that is used to generate the token\n@param {object} options - options which was used to generate it originally\n@return {boolean}", "input": "JavaScript", "output": "function check(token, secret, options) {\n  const delta = checkDelta(token, secret, options);\n  return Number.isInteger(delta);\n}"}, {"instruction": "Intentionally not documented.", "input": "JavaScript", "output": "function (className, functionName, message) {\n            var msg = this.messageTable[message] ? this.messageTable[message] : message;\n\n            return className + \".\" + functionName + \": \" + msg;\n        }"}, {"instruction": "Get session from the store.\n@private", "input": "JavaScript", "output": "function getSession(sessions, sessionId) {\n  var sess = sessions[sessionId]\n\n  if (!sess) {\n    debug('no session in MemoryStore for %s',sessionId);\n    return;\n  }\n\n  // parse\n  sess = JSON.parse(sess)\n\n  var expires = typeof sess.cookie.expires === 'string' ?\n    new Date(sess.cookie.expires) :\n    sess.cookie.expires\n\n  // destroy expired session\n  if (expires && expires <= Date.now()) {\n    debug('Session %s is Expired in MemoryStore',sessionId);\n    delete sessions[sessionId];\n    return;\n  }\n\n  return sess\n}"}, {"instruction": "Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n@param {Float64Array} target - destination\n@param {Number} targetStartIndex - index in the destination to start copying into\n@param {Array} simplePolygon - array of points\n@param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n@returns {Number} - the index of the write head in the destination", "input": "JavaScript", "output": "function copyNestedRing(target, targetStartIndex, simplePolygon, size) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n  return targetIndex;\n}"}, {"instruction": "\u83b7\u53d6\u6216\u8005\u8bbe\u7f6eUploader\u914d\u7f6e\u9879\u3002\n@method option\n@grammar option( key ) => *\n@grammar option( key, val ) => self\n@example\n\n// \u521d\u59cb\u72b6\u6001\u56fe\u7247\u4e0a\u4f20\u524d\u4e0d\u4f1a\u538b\u7f29\nvar uploader = new WebUploader.Uploader({\ncompress: null;\n});\n\n// \u4fee\u6539\u540e\u56fe\u7247\u4e0a\u4f20\u524d\uff0c\u5c1d\u8bd5\u5c06\u56fe\u7247\u538b\u7f29\u52301600 * 1600\nuploader.option( 'compress', {\nwidth: 1600,\nheight: 1600\n});", "input": "JavaScript", "output": "function( key, val ) {\n                var opts = this.options;\n    \n                // setter\n                if ( arguments.length > 1 ) {\n    \n                    if ( $.isPlainObject( val ) &&\n                            $.isPlainObject( opts[ key ] ) ) {\n                        $.extend( opts[ key ], val );\n                    } else {\n                        opts[ key ] = val;\n                    }\n    \n                } else {    // getter\n                    return key ? opts[ key ] : opts;\n                }\n            }"}, {"instruction": "Logs a message at a given level.\n\n@param {String} levelTag the tag associated with the level at which to log\nthe message.\n@param {String} message the message to log.\n@param {Number} bufferMaxLength the maximum size to which the message\nbuffer can grow.", "input": "JavaScript", "output": "function(levelTag, message, bufferMaxLength)\n  {\n    // add the log level tag (e.g. info, warn, etc.) to the front of the message\n    message = Util.format('%s: %s', levelTag, message);\n\n    // if the buffer is full, evict old messages\n    while (buffer.length >= bufferMaxLength)\n    {\n      buffer.shift();\n    }\n\n    // add the new message to the buffer\n    buffer.push(message);\n  }"}, {"instruction": "Get the detailed information of an inspected instance.\n\n@param {Number} id", "input": "JavaScript", "output": "function getInstanceDetails (id) {\n  const instance = instanceMap.get(id)\n  if (!instance) {\n    const vnode = findInstanceOrVnode(id)\n\n    if (!vnode) return {}\n\n    const data = {\n      id,\n      name: getComponentName(vnode.fnOptions),\n      file: vnode.fnOptions.__file || null,\n      state: processProps({ $options: vnode.fnOptions, ...(vnode.devtoolsMeta && vnode.devtoolsMeta.renderContext.props) }),\n      functional: true\n    }\n\n    return data\n  } else {\n    const data = {\n      id: id,\n      name: getInstanceName(instance),\n      state: getInstanceState(instance)\n    }\n\n    let i\n    if ((i = instance.$vnode) && (i = i.componentOptions) && (i = i.Ctor) && (i = i.options)) {\n      data.file = i.__file || null\n    }\n\n    return data\n  }\n}"}, {"instruction": "Returns the number of fixed columns depending on the parameter <code>bConsiderVisibility</code>.\n\n@param {sap.ui.table.Table} oTable Instance of the table.\n@param {boolean} bConsiderVisibility If <code>false</code> the result of the <code>getComputedFixedColumnCount</code> function of the\ntable is returned. If <code>true</code> the visibility is included into the determination of the\ncount.\n@returns {int} Returns the number of fixed columns depending on the parameter <code>bConsiderVisibility</code>.", "input": "JavaScript", "output": "function(oTable, bConsiderVisibility) {\n\t\t\tvar iFixed = oTable.getComputedFixedColumnCount();\n\n\t\t\tif (!bConsiderVisibility) {\n\t\t\t\treturn iFixed;\n\t\t\t}\n\n\t\t\tif (iFixed <= 0 || oTable._bIgnoreFixedColumnCount) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tvar aColumns = oTable.getColumns();\n\t\t\tvar iVisibleFixedColumnCount = 0;\n\t\t\tiFixed = Math.min(iFixed, aColumns.length);\n\n\t\t\tfor (var i = 0; i < iFixed; i++) {\n\t\t\t\tif (aColumns[i].shouldRender()) {\n\t\t\t\t\tiVisibleFixedColumnCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn iVisibleFixedColumnCount;\n\t\t}"}, {"instruction": "Remote Event: Go to the given source node", "input": "JavaScript", "output": "function _onRemoteEdit(event, res) {\n        // res = {nodeId, name, value}\n\n        // detach from DOM change events\n        if (res.value === \"0\") {\n            Inspector.DOM.off(\".EditAgent\");\n            return;\n        }\n\n        // find and store the edited node\n        var node = DOMAgent.nodeWithId(res.nodeId);\n        node = node.children[0];\n        if (!node.location) {\n            return;\n        }\n        _editedNode = node;\n\n        // attach to character data modified events\n        Inspector.DOM.on(\"characterDataModified.EditAgent\", _onCharacterDataModified);\n    }"}, {"instruction": "------------------------------------------------------------------------------ Rule Definition ------------------------------------------------------------------------------ \nReports an \"Insert ...\" issue where text must be inserted.\n@param {RuleContext} context - The ESLint rule context.\n@param {number} offset - The source offset where to insert text.\n@param {string} text - The text to be inserted.\n@returns {void}", "input": "JavaScript", "output": "function reportInsert(context, offset, text) {\n  const pos = context.getSourceCode().getLocFromIndex(offset);\n  const range = [offset, offset];\n  context.report({\n    message: 'Insert `{{ code }}`',\n    data: { code: showInvisibles(text) },\n    loc: { start: pos, end: pos },\n    fix(fixer) {\n      return fixer.insertTextAfterRange(range, text);\n    }\n  });\n}"}, {"instruction": "Get dictionary of experiment keys and variations.\n\nhttp://visualwebsiteoptimizer.com/knowledge/integration-of-vwo-with-kissmetrics/\n\n@param {Function} fn\n@return {Object}", "input": "JavaScript", "output": "function experiments(fn) {\n  enqueue(function() {\n    var data = {};\n    var ids = window._vwo_exp_ids;\n    if (!ids) return fn();\n    each(ids, function(id) {\n      var name = variation(id);\n      if (name) data['Experiment: ' + id] = name;\n    });\n    fn(null, data);\n  });\n}"}, {"instruction": "When using multiple axes, adjust the number of ticks to match the highest\nnumber of ticks in that group", "input": "JavaScript", "output": "function adjustTickAmount() {\r\n\r\n\t\t\tif (maxTicks && !isDatetimeAxis && !categories && !isLinked) { // only apply to linear scale\r\n\t\t\t\tvar oldTickAmount = tickAmount,\r\n\t\t\t\t\tcalculatedTickAmount = tickPositions.length;\r\n\r\n\t\t\t\t// set the axis-level tickAmount to use below\r\n\t\t\t\ttickAmount = maxTicks[xOrY];\r\n\r\n\t\t\t\tif (calculatedTickAmount < tickAmount) {\r\n\t\t\t\t\twhile (tickPositions.length < tickAmount) {\r\n\t\t\t\t\t\ttickPositions.push(correctFloat(\r\n\t\t\t\t\t\t\ttickPositions[tickPositions.length - 1] + tickInterval\r\n\t\t\t\t\t\t));\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttransA *= (calculatedTickAmount - 1) / (tickAmount - 1);\r\n\t\t\t\t\tmax = tickPositions[tickPositions.length - 1];\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (defined(oldTickAmount) && tickAmount !== oldTickAmount) {\r\n\t\t\t\t\taxis.isDirty = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}"}, {"instruction": "/*\nGets the URL for the specified remote of a repo", "input": "JavaScript", "output": "function getRemoteUrl(repo, remote) {\n  return wrapPromise(function (resolve, reject) {\n    repo.config(function (err, config) {\n      if (err) {\n        reject(new Error('Failed to find git repository in ' + config.path))\n        return\n      }\n\n      resolve(config.items['remote.' + remote + '.url'])\n    })\n  })\n}"}, {"instruction": "Return a three.js constant determining blending\n\n@param {string} [blending=normal]\n- `none`, additive`, `subtractive`,`multiply` or `normal`.\n@returns {number}", "input": "JavaScript", "output": "function parseBlending (blending) {\n  switch (blending) {\n    case 'none': {\n      return THREE.NoBlending;\n    }\n    case 'additive': {\n      return THREE.AdditiveBlending;\n    }\n    case 'subtractive': {\n      return THREE.SubtractiveBlending;\n    }\n    case 'multiply': {\n      return THREE.MultiplyBlending;\n    }\n    default: {\n      return THREE.NormalBlending;\n    }\n  }\n}"}, {"instruction": "Checks whether a given reference is safe or not.\nThe reference is every reference of the upper scope's variable we are\nlooking now.\n\nIt's safeafe if the reference matches one of the following condition.\n- is readonly.\n- doesn't exist inside a local function and after the border.\n\n@param {eslint-scope.Reference} upperRef - A reference to check.\n@returns {boolean} `true` if the reference is safe.", "input": "JavaScript", "output": "function isSafeReference(upperRef) {\n        const id = upperRef.identifier;\n\n        return (\n            !upperRef.isWrite() ||\n            variable.scope.variableScope === upperRef.from.variableScope &&\n            id.range[0] < border\n        );\n    }"}, {"instruction": "Get the density of links as a percentage of the content\nThis is the amount of text that is inside a link divided by the total text in the node.\n\n@param Element\n@return number (float)", "input": "JavaScript", "output": "function(element) {\n    var textLength = this._getInnerText(element).length;\n    if (textLength === 0)\n      return 0;\n\n    var linkLength = 0;\n\n    // XXX implement _reduceNodeList?\n    this._forEachNode(element.getElementsByTagName(\"a\"), function(linkNode) {\n      linkLength += this._getInnerText(linkNode).length;\n    });\n\n    return linkLength / textLength;\n  }"}, {"instruction": "return a getUserMedia Constraints", "input": "JavaScript", "output": "function getConstraintObj(deviceId, facingMode, width, height){\n      var obj = { audio: false, video: {} };\n      obj.video.deviceId = {exact: deviceId};\n      if(facingMode) {\n        obj.video.facingMode = {exact: facingMode};\n      }\n      if(width) {\n        obj.video.width = {exact: width};\n      }\n      if(height) {\n        obj.video.height = {exact: height};\n      }\n      return obj;\n    }"}, {"instruction": "Show value inside the debug console", "input": "JavaScript", "output": "function WidgetSliderGUI() {\n        this.addOutput(\"\", \"number\");\n        this.properties = {\n            value: 0.5,\n            min: 0,\n            max: 1,\n            text: \"V\"\n        };\n        var that = this;\n        this.size = [140, 40];\n        this.slider = this.addWidget(\n            \"slider\",\n            \"V\",\n            this.properties.value,\n            function(v) {\n                that.properties.value = v;\n            },\n            this.properties\n        );\n        this.widgets_up = true;\n    }"}, {"instruction": "Initialize indent for node\n\n@returns {Node}", "input": "JavaScript", "output": "function() {\r\n            var $this = $(this);\r\n            $this.find('.treegrid-indent').remove();\r\n            var tpl = $this.treegrid('getSetting', 'indentTemplate');\r\n            var expander = $this.find('.treegrid-expander');\r\n            var depth = $this.treegrid('getDepth');\r\n            for (var i = 0; i < depth; i++) {\r\n                $(tpl).insertBefore(expander);\r\n            }\r\n            return $this;\r\n        }"}, {"instruction": "Point towards drop-down menu.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"TOWARDS\",\n          \"options\": [\n            [Blockly.Msg.MOTION_POINTTOWARDS_POINTER, '_mouse_'],\n            [Blockly.Msg.MOTION_POINTTOWARDS_RANDOM, '_random_']\n          ]\n        }\n      ],\n      \"colour\": Blockly.Colours.motion.secondary,\n      \"colourSecondary\": Blockly.Colours.motion.secondary,\n      \"colourTertiary\": Blockly.Colours.motion.tertiary,\n      \"extensions\": [\"output_string\"]\n    });\n  }"}, {"instruction": "Execute the down function of currently executed seeds.", "input": "JavaScript", "output": "function (specification, scope, callback) {\n    var executeUndoSeed = load('undo-seed');\n    if (arguments.length > 0) {\n      if (typeof specification === 'number') {\n        this.internals.argv.count = specification;\n\n        if (scope) {\n          this.internals.migrationMode = scope;\n          this.internals.matching = scope;\n        }\n      } else if (typeof specification === 'string') {\n        this.internals.migrationMode = scope;\n        this.internals.matching = scope;\n      }\n    }\n\n    return Promise.fromCallback(\n      function (callback) {\n        executeUndoSeed(this.internals, this.config, callback);\n      }.bind(this)\n    ).asCallback(callback);\n  }"}, {"instruction": "'{' '}'\n| '{' pair (ws pair)* '}'", "input": "JavaScript", "output": "function(){\n    var obj = new nodes.Object\n      , id, val, comma, hash;\n    this.expect('{');\n    this.skipWhitespace();\n\n    while (!this.accept('}')) {\n      if (this.accept('comment')\n        || this.accept('newline')) continue;\n\n      if (!comma) this.accept(',');\n      id = this.accept('ident') || this.accept('string');\n\n      if (!id) {\n        this.error('expected \"ident\" or \"string\", got {peek}');\n      }\n\n      hash = id.val.hash;\n\n      this.skipSpacesAndComments();\n      this.expect(':');\n\n      val = this.expression();\n\n      obj.setValue(hash, val);\n      obj.setKey(hash, id.val);\n\n      comma = this.accept(',');\n      this.skipWhitespace();\n    }\n\n    return obj;\n  }"}, {"instruction": "/* [MS-XLSB] 2.5.166", "input": "JavaScript", "output": "function parse_XLNullableWideString(data) {\n\tvar cchCharacters = data.read_shift(4);\n\treturn cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}"}, {"instruction": "/*eslint-enable no-loop-func", "input": "JavaScript", "output": "function getContextInfos(oContext, sModelName) {\n\t\t\t\tvar mContextInfos = {\n\t\t\t\t\tmodelName: (sModelName === 'undefined') ? 'none (default)' : sModelName,\n\t\t\t\t\tpath: oContext.getPath()\n\t\t\t\t};\n\n\t\t\t\tif (oContext.getModel().isA(\"sap.ui.model.odata.v4.ODataModel\")) { // ODataModel v4 throws an exception on getObject()\n\t\t\t\t\tmContextInfos.unverifiedPath = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (!oContext.getObject() == null) {\n\t\t\t\t\t\tmContextInfos.invalidPath = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn mContextInfos;\n\t\t\t}"}, {"instruction": "Returns value of the header with the specified <code>sHeaderName</code> from\nthe specified <code>sHeaders</code> section of MIME part.\n\n@param {string} sHeaders\nSection of MIME part representing HTTP headers\n@param {string} sHeaderName\nName of HTTP header in lower case\n@returns {string} The HTTP header value", "input": "JavaScript", "output": "function getHeaderValue(sHeaders, sHeaderName) {\n\t\tvar i,\n\t\t\taHeaderParts,\n\t\t\taHeaders = sHeaders.split(\"\\r\\n\");\n\n\t\tfor (i = 0; i < aHeaders.length; i += 1) {\n\t\t\taHeaderParts = aHeaders[i].split(\":\");\n\n\t\t\tif (aHeaderParts[0].toLowerCase().trim() === sHeaderName) {\n\t\t\t\treturn aHeaderParts[1].trim();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Orders the data by date for consumption on the chart tooltip\n@param  {areaChartData} data    Chart data\n@return {Object[]}               Chart data ordered by date\n@private", "input": "JavaScript", "output": "function getDataByDate(data) {\n            return d3Collection.nest()\n                .key(getDate)\n                .entries(\n                    data.sort((a, b) => a.date - b.date)\n                )\n                .map(d => {\n                    return assign({}, d, {\n                        date: new Date(d.key)\n                    });\n                });\n\n            // let b =  d3Collection.nest()\n            //                     .key(getDate).sortKeys(d3Array.ascending)\n            //                     .entries(data);\n        }"}, {"instruction": "Extracts a lowercased domain from a distinguished name for comparison\npurposes.\n\ne.g. \"CN=User,OU=MyBusiness,DC=example,DC=com\" will return \"example.com.\"", "input": "JavaScript", "output": "function dnToDomain (dn) {\n  if (!dn || typeof dn !== 'string') { return null }\n  var matches = domainDnRegex.exec(dn)\n  if (matches) {\n    return matches[1].replace(dnPartRegex, '$1.').toLowerCase()\n  } else {\n    return null\n  }\n}"}, {"instruction": "Constructs notification info URL for XHR\n\n@param {string=} localeParam - optional locale, defaults to 'brackets.getLocale()' when omitted.\n@returns {string} the new notification info url", "input": "JavaScript", "output": "function _getVersionInfoUrl(localeParam) {\n\n        var locale = localeParam || brackets.getLocale();\n\n        if (locale.length > 2) {\n            locale = locale.substring(0, 2);\n        }\n\n        return brackets.config.notification_info_url.replace(\"<locale>\", locale);\n    }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, rawData, fieldInfo, properties) {\n            // at the moment disabling \"total count\" mode, need a more sophisticated way to handle it\n            if(false && rawData.series['_tc'] && rawData.series['_tc'].length > 0) {\n                this.useTotalCount = true;\n                this.totalCount = parseInt(rawData.series['_tc'][0].rawY, 10);\n            }\n            else {\n                this.useTotalCount = false;\n            }\n            $super(rawData, fieldInfo, properties);\n        }"}, {"instruction": "Parses comma separated list of numbers and returns them an array. Used internally by the TextParser", "input": "JavaScript", "output": "function parseNumberArray( value ) {\n\n\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\treturn parseFloat( val );\n\n\t\t} );\n\n\t\treturn array;\n\n\t}"}, {"instruction": "return expression", "input": "JavaScript", "output": "function() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty\n      ? new nodes.Return\n      : new nodes.Return(expr);\n  }"}, {"instruction": "If there are promise handlers waiting for execution at the time the timeout fires, start another timeout to postpone timer execution after promise execution.", "input": "JavaScript", "output": "function wrapTimerHandler(vHandler) {\n\t\t\t\tvar fnWrappedHandler = function() {\n\t\t\t\t\tvar aArgs, fnHandler;\n\t\t\t\t\tif (bPromisesQueued) {\n\t\t\t\t\t\taArgs = [fnWrappedHandler, 0].concat(arguments);\n\t\t\t\t\t\t_timeout.apply(window, aArgs);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfnHandler = typeof vHandler !== \"function\" ? new Function(vHandler) : vHandler; // eslint-disable-line no-new-func\n\t\t\t\t\t\tfnHandler.apply(window, arguments);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn fnWrappedHandler;\n\t\t\t}"}, {"instruction": "\u89e3\u6790\u65e5\u671f\n@param { object | string | date | string | number } date\n@returns times", "input": "JavaScript", "output": "function parseDate(value) {\n  let date = value;\n  if (!value) {\n    return new Date().getTime();\n  }\n  if (isObject(date)) {\n    date = date.value || date;\n  }\n  // array\n  if (isArray(date)) {\n    date = new Date(...date).getTime();\n  } else {\n    // string number  null \u3001''\u3001undefined\n    date = new Date(date).getTime();\n  }\n  if (date) {\n    return date;\n  }\n  console.warn('Invalid Date ', value);\n  return new Date().getTime();\n}"}, {"instruction": "Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\n\n@api public", "input": "JavaScript", "output": "function getPlatformVariant() {\n  var contents = '';\n\n  if (process.platform !== 'linux') {\n    return '';\n  }\n\n  try {\n    contents = fs.readFileSync(process.execPath);\n\n    // Buffer.indexOf was added in v1.5.0 so cast to string for old node\n    // Delay contents.toStrings because it's expensive\n    if (!contents.indexOf) {\n      contents = contents.toString();\n    }\n\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\n      return 'musl';\n    }\n  } catch (err) { } // eslint-disable-line no-empty\n\n  return '';\n}"}, {"instruction": "\ub79c\ub354\ub9c1\n@returns {View.Layout.Header} this", "input": "JavaScript", "output": "function() {\n        var resizeHandleHeights;\n\n        this._destroyChildren();\n\n        this.$el.css({\n            height: this.dimensionModel.get('headerHeight') - TABLE_BORDER_WIDTH\n        }).html(this.template({\n            colGroup: this._getColGroupMarkup(),\n            tBody: this._getTableBodyMarkup()\n        }));\n\n        if (this.coordColumnModel.get('resizable')) {\n            resizeHandleHeights = this._getResizeHandleHeights();\n            this._addChildren(this.viewFactory.createHeaderResizeHandle(this.whichSide, resizeHandleHeights));\n            this.$el.append(this._renderChildren());\n        }\n\n        return this;\n    }"}, {"instruction": "Transfer learning logic.\n Scroll to the bottom of the page", "input": "JavaScript", "output": "function scrollToPageBottom() {\n  const scrollingElement = (document.scrollingElement || document.body);\n  scrollingElement.scrollTop = scrollingElement.scrollHeight;\n}"}, {"instruction": "fitty creation function", "input": "JavaScript", "output": "function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    // if target is a string\n    return typeof target === 'string' ?\n\n    // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) :\n\n    // create single fitty\n    fittyCreate([target], options)[0];\n  }"}, {"instruction": "Convert position on slider to percentage value of offset from beginning...\n@param position\n@returns {number}", "input": "JavaScript", "output": "function positionToPercent(position) {\n      var offset = vertical ? sliderDimensions.top : sliderDimensions.left;\n      var size = vertical ? sliderDimensions.height : sliderDimensions.width;\n      var calc = (position - offset) / size;\n\n      if (!vertical && $mdUtil.bidi() === 'rtl') {\n        calc = 1 - calc;\n      }\n\n      return Math.max(0, Math.min(1, vertical ? 1 - calc : calc));\n    }"}, {"instruction": "/*\tPrivate Methods\n==================================================", "input": "JavaScript", "output": "function () {\n\t\t\n\t\t// Create Layout\n\t\tthis._el.message_container = TL.Dom.create(\"div\", \"tl-message-container\", this._el.container);\n\t\tthis._el.loading_icon = TL.Dom.create(\"div\", this.options.message_icon_class, this._el.message_container);\n\t\tthis._el.message = TL.Dom.create(\"div\", \"tl-message-content\", this._el.message_container);\n\t\t\n\t\tthis._updateMessage();\n\t\t\n\t}"}, {"instruction": "Delete a given Queue", "input": "JavaScript", "output": "async function deleteQueue(\n  project = 'my-project-id', // Your GCP Project id\n  queue = 'my-appengine-queue', // Name of the Queue to delete\n  location = 'us-central1' // The GCP region in which to delete the queue\n) {\n  // Imports the Google Cloud Tasks library.\n  const cloudTasks = require('@google-cloud/tasks');\n\n  // Instantiates a client.\n  const client = new cloudTasks.CloudTasksClient();\n\n  // Get the fully qualified path to the queue\n  const name = client.queuePath(project, location, queue);\n\n  // Send delete queue request.\n  await client.deleteQueue({name});\n  console.log(`Deleted queue '${queue}'.`);\n}"}, {"instruction": "Decortaor for `sync` component helper.\n@param   {string}          path - Path in store\n@returns {VueDecorator}         - Vue decortaor to be used in cue class component.", "input": "JavaScript", "output": "function Sync(path) {\n  if (typeof path !== 'string' || arguments.length > 1) { throw new Error('Property decorators can be used for single property access') }\n  return createDecorator((options, key) => {\n    if (!options.computed) options.computed = {}\n    options.computed[key] = sync(path)\n  })\n}"}, {"instruction": "23.1.3.3 Map.prototype.delete(key) 23.2.3.4 Set.prototype.delete(value)", "input": "JavaScript", "output": "function (key) {\n        var that = this;\n        var state = getInternalState(that);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.next;\n          var prev = entry.previous;\n          delete state.index[entry.index];\n          entry.removed = true;\n          if (prev) prev.next = next;\n          if (next) next.previous = prev;\n          if (state.first == entry) state.first = next;\n          if (state.last == entry) state.last = prev;\n          if (DESCRIPTORS) state.size--;\n          else that.size--;\n        } return !!entry;\n      }"}, {"instruction": "Creates the d3 x and y axis, setting orientations\n@private", "input": "JavaScript", "output": "function buildAxis(){\n            xAxis = d3Axis.axisBottom(xScale);\n\n            yAxis = d3Axis.axisLeft(yScale)\n                .ticks(yTicks)\n                .tickPadding(yTickPadding)\n                .tickFormat(yAxisTickFormat);\n        }"}, {"instruction": "composeS : Semigroupoid s => (s y z, s x y, ..., s a b) -> s a z", "input": "JavaScript", "output": "function composeS(...args) {\n  if(!arguments.length) {\n    throw new TypeError(err)\n  }\n\n  const ms =\n    args.slice().reverse()\n\n  const head =\n    ms[0]\n\n  if(!isSemigroupoid(head)) {\n    throw new TypeError(err)\n  }\n\n  if(ms.length === 1) {\n    return head\n  }\n\n  return ms.slice().reduce((comp, m) => {\n    if(!isSameType(comp, m)) {\n      throw new TypeError(err)\n    }\n\n    return comp.compose(m)\n  })\n}"}, {"instruction": "creates a property binding (called via bind) to a published property.", "input": "JavaScript", "output": "function(property, observable, oneTime) {\n      if (oneTime) {\n        this[property] = observable;\n        return;\n      }\n      var computed = this.element.prototype.computed;\n      // Binding an \"out-only\" value to a computed property. Note that\n      // since this observer isn't opened, it doesn't need to be closed on\n      // cleanup.\n      if (computed && computed[property]) {\n        var privateComputedBoundValue = property + 'ComputedBoundObservable_';\n        this[privateComputedBoundValue] = observable;\n        return;\n      }\n      return this.bindToAccessor(property, observable, resolveBindingValue);\n    }"}, {"instruction": "Convert a raw string to an array of big-endian words\nCharacters >255 have their high-byte silently ignored.", "input": "JavaScript", "output": "function rstr2binb(input) {\n    var i, l = input.length * 8,\n      output = Array(input.length >> 2),\n      lo = output.length;\n    for (i = 0; i < lo; i += 1) {\n      output[i] = 0;\n    }\n    for (i = 0; i < l; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\n    }\n    return output;\n  }"}, {"instruction": "##### BEGIN: MODIFIED BY SAP functions crc32, utf8encode and utf8decode are replaced with implementations by SAP", "input": "JavaScript", "output": "function(buf, crc) {\n\n      var c = (typeof(crc) == \"undefined\" ? 0 : crc) ^ 0xffffffff;\n      var bArray  = typeof buf !== \"string\";\n      var n;\n\n      if (bArray) {\n        for (n = 0; n < buf.length; n++) {\n          c = SAP_CRC32_TABLE[(c ^ buf[n]) & 0xff] ^ (c >>> 8);\n        }\n      } else {\n        for (n = 0; n < buf.length; n++) {\n          c = SAP_CRC32_TABLE[(c ^ buf.charCodeAt(n)) & 0xff] ^ (c >>> 8);\n        }\n      }\n\n      return c ^ 0xffffffff;\n    }"}, {"instruction": "Wrapper for defined play method.\nPlay component by adding tick behavior and calling user's play method.\n\n@param playMethod {function}", "input": "JavaScript", "output": "function wrapPlay (playMethod) {\n  return function play () {\n    var sceneEl = this.el.sceneEl;\n    var shouldPlay = this.el.isPlaying && !this.isPlaying;\n    if (!this.initialized || !shouldPlay) { return; }\n    playMethod.call(this);\n    this.isPlaying = true;\n    this.eventsAttach();\n    // Add tick behavior.\n    if (!hasBehavior(this)) { return; }\n    sceneEl.addBehavior(this);\n  };\n}"}, {"instruction": "A parameter that specifies an arbitrary polygon on the globe.\n\n@alias GeoJsonParameter\n@constructor\n@extends FunctionParameter\n\n@param {Object} options Object with the following properties:\n@param {Terria} options.terria The Terria instance.\n@param {String} options.id The unique ID of this parameter.\n@param {String} [options.name] The name of this parameter. If not specified, the ID is used as the name.\n@param {String} [options.description] The description of the parameter.\n@param {Boolean} [options.defaultValue] The default value.", "input": "JavaScript", "output": "function(options) {\n  FunctionParameter.call(this, options);\n  this.regionParameter = options.regionParameter;\n  this.value = \"\";\n  this._subtype = undefined;\n}"}, {"instruction": "columns is a required parameter.", "input": "JavaScript", "output": "function getIdColumns(idColumnNames, columns) {\n  if (!defined(idColumnNames)) {\n    return [];\n  }\n  return idColumnNames.map(name => getColumnWithNameIdOrIndex(name, columns));\n}"}, {"instruction": "Wait until the Tab View has been closed", "input": "JavaScript", "output": "function tabView_waitForClosed() {\n    // Add event listener to wait until the tabview has been closed\n    var self = { closed: false };\n    function checkClosed() { self.closed = true; }\n    this._controller.window.addEventListener(\"tabviewhidden\", checkClosed, false);\n\n    try {\n      mozmill.utils.waitFor(function() {\n        return self.closed == true;\n      }, TIMEOUT, 100, \"TabView is still open.\");\n    } finally {\n      this._controller.window.removeEventListener(\"tabviewhidden\", checkClosed, false);\n    }\n\n    this._tabViewObject = null;\n    this._groupItemsObject = null;\n    this._tabItemsObject = null;\n  }"}, {"instruction": "/*", "input": "JavaScript", "output": "function genClassForVnode (vnode) {\n  let data = vnode.data;\n  let parentNode = vnode;\n  let childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}"}, {"instruction": "# zipWith :: (a -> b -> c) -> Array a -> Array b -> Array c . . Returns the result of combining, pairwise, the given arrays using the . given binary function. The length of the resulting array is equal to the . length of the shorter input array. . . See also [`zip`](#zip). . . ```javascript . > S.zipWith (a => b => a + b) (['a', 'b']) (['x', 'y', 'z']) . ['ax', 'by'] . . > S.zipWith (a => b => [a, b]) ([1, 3, 5]) ([2, 4]) . [[1, 2], [3, 4]] . ```", "input": "JavaScript", "output": "function zipWith(f) {\n    return function(xs) {\n      return function(ys) {\n        var result = [];\n        var len = Math.min (xs.length, ys.length);\n        for (var idx = 0; idx < len; idx += 1) {\n          result.push (f (xs[idx]) (ys[idx]));\n        }\n        return result;\n      };\n    };\n  }"}, {"instruction": "Process File\nTakes a reference to a single file, sends it to the relevant handler to be loaded and returns an object in the\nimportData format: {data: {}, images: []}\nThe data key contains JSON representing any data that should be imported\nThe image key contains references to images that will be stored (and where they will be stored)\n@param {File} file\n@returns {Promise(ImportData)}", "input": "JavaScript", "output": "function (file, ext) {\n        var fileHandler = _.find(this.handlers, function (handler) {\n            return _.includes(handler.extensions, ext);\n        });\n\n        return fileHandler.loadFile([_.pick(file, 'name', 'path')]).then(function (loadedData) {\n            // normalize the returned data\n            var importData = {};\n            importData[fileHandler.type] = loadedData;\n            return importData;\n        });\n    }"}, {"instruction": "---- Names and Paths ----------------------------------------------------------------------- \nName conversion function that converts a name in unified resource name syntax to a name in UI5 module name syntax.\nIf the name cannot be converted (e.g. doesn't end with '.js'), then <code>undefined</code> is returned.\n\n@param {string} sName Name in unified resource name syntax\n@returns {string|undefined} Name in UI5 (legacy) module name syntax (dot separated)\nor <code>undefined</code> when the name can't be converted\n@private", "input": "JavaScript", "output": "function urnToUI5(sName) {\n\t\t// UI5 module name syntax is only defined for JS resources\n\t\tif ( !/\\.js$/.test(sName) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tsName = sName.slice(0, -3);\n\t\tif ( /^jquery\\.sap\\./.test(sName) ) {\n\t\t\treturn sName; // do nothing\n\t\t}\n\t\treturn sName.replace(/\\//g, \".\");\n\t}"}, {"instruction": "'\\\\' . ' '*", "input": "JavaScript", "output": "function() {\n    var captures;\n    if (captures = /^\\\\(.)[ \\t]*/.exec(this.str)) {\n      var c = captures[1];\n      this.skip(captures);\n      return new Token('ident', new nodes.Literal(c));\n    }\n  }"}, {"instruction": "Register mouse down to detect mouse drag.", "input": "JavaScript", "output": "function (evt) {\n    if (!this.data.enabled) { return; }\n    // Handle only primary button.\n    if (evt.button !== 0) { return; }\n\n    var sceneEl = this.el.sceneEl;\n    var canvasEl = sceneEl && sceneEl.canvas;\n\n    this.mouseDown = true;\n    this.previousMouseEvent = evt;\n    this.showGrabbingCursor();\n\n    if (this.data.pointerLockEnabled && !this.pointerLocked) {\n      if (canvasEl.requestPointerLock) {\n        canvasEl.requestPointerLock();\n      } else if (canvasEl.mozRequestPointerLock) {\n        canvasEl.mozRequestPointerLock();\n      }\n    }\n  }"}, {"instruction": "Creates a local instance of a storage password.\n\n@param {Object} props The properties for the new storage password. For a list of available parameters,\nsee <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords\" target=\"_blank\">\nPOST storage/passwords</a> on Splunk Developer Portal.\n@return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.\n\n@method splunkjs.Service.StoragePasswords", "input": "JavaScript", "output": "function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.StoragePassword(this.service, props.name, entityNamespace);\n        }"}, {"instruction": "Define delegates for the given class for each property/method on the indicated prototype.", "input": "JavaScript", "output": "function defineDelegates(cls, prototype) {\n  const names = Object.getOwnPropertyNames(prototype);\n  names.forEach(name => {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, name);\n    if (!descriptor) {\n      return;\n    }\n    const delegate = createDelegate(name, descriptor);\n    if (delegate) {\n      Object.defineProperty(cls.prototype, name, delegate);\n    }\n  });\n}"}, {"instruction": "Helpers", "input": "JavaScript", "output": "function(e, attr){\n\t\t\tif(typeof e === \"string\"){\n\t\t\t\tvar elem = \n\t\t\t\t\tdocument.createElementNS(\"http://www.w3.org/2000/svg\",e);\n\t\t\t}else{\n\t\t\t\tvar elem = e;\n\t\t\t}\n\t\t\tif(attr){\n\t\t\t\tfor(var x in attr){\n\t\t\t\t\telem.setAttribute(x, attr[x]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn elem;\n\t\t}"}, {"instruction": "Validate a texture, either as a selector or as a URL.\nDetects whether `src` is pointing to an image or video and invokes the appropriate\ncallback.\n\n`src` will be passed into the callback\n\n@params {string|Element} src - URL or media element.\n@params {function} isImageCb - callback if texture is an image.\n@params {function} isVideoCb - callback if texture is a video.", "input": "JavaScript", "output": "function validateSrc (src, isImageCb, isVideoCb) {\n  checkIsImage(src, function isAnImageUrl (isImage) {\n    if (isImage) {\n      isImageCb(src);\n      return;\n    }\n    isVideoCb(src);\n  });\n}"}, {"instruction": "Get server type form request message.", "input": "JavaScript", "output": "function(route) {\n  if (!route) {\n    return null;\n  }\n  var idx = route.indexOf('.');\n  if (idx < 0) {\n    return null;\n  }\n  return route.substring(0, idx);\n}"}, {"instruction": "Emulates python's range() built-in. Returns an array of integers, counting\nup (or down) from start to end. Note that the range returned is up to, but\nNOT INCLUDING, end.\n.\n@param start  integer from which to start counting. If the end parameter is\nnot provided, this value is considered the end and start will\nbe zero.\n@param end    integer to which to count. If omitted, the function will count\nup from zero to the value of the start parameter. Note that\nthe array returned will count up to but will not include this\nvalue.\n@return       an array of consecutive integers.", "input": "JavaScript", "output": "function range(start, end)\n{\n    if (arguments.length == 1) {\n        var end = start;\n        start = 0;\n    }\n\n    var r = [];\n    if (start < end) {\n        while (start != end)\n            r.push(start++);\n    }\n    else {\n        while (start != end)\n            r.push(start--);\n    }\n    return r;\n}"}, {"instruction": "Performs a deep comparison between two values to determine if they are\nequivalent to each other. If a callback is provided it will be executed\nto compare values. If the callback returns `undefined` comparisons will\nbe handled by the method instead. The callback is bound to `thisArg` and\ninvoked with two arguments; (a, b).\n\n@static\n@memberOf _\n@category Objects\n@param {*} a The value to compare.\n@param {*} b The other value to compare.\n@param {Function} [callback] The function to customize comparing values.\n@param {*} [thisArg] The `this` binding of `callback`.\n@returns {boolean} Returns `true` if the values are equivalent, else `false`.\n@example\n\nvar object = { 'name': 'fred' };\nvar copy = { 'name': 'fred' };\n\nobject == copy;\n// => false\n\n_.isEqual(object, copy);\n// => true\n\nvar words = ['hello', 'goodbye'];\nvar otherWords = ['hi', 'goodbye'];\n\n_.isEqual(words, otherWords, function(a, b) {\nvar reGreet = /^(?:hello|hi)$/i,\naGreet = _.isString(a) && reGreet.test(a),\nbGreet = _.isString(b) && reGreet.test(b);\n\nreturn (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n});\n// => true", "input": "JavaScript", "output": "function isEqual(a, b, callback, thisArg) {\n      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n    }"}, {"instruction": "Returns whether the busy indicator is visible. It is considered as visible when the busy indicator element exists in the DOM as\na child of the table element. It is not checked whether the indicator is actually visible on the screen.\n\n@param {sap.ui.table.Table} oTable Instance of the table.\n@returns {boolean} Whether the busy indicator is visible.", "input": "JavaScript", "output": "function(oTable) {\n\t\t\tif (!oTable || !oTable.getDomRef()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn oTable.getDomRef().querySelector(\"#\" + oTable.getId() + \"-sapUiTableGridCnt > .sapUiLocalBusyIndicator\") != null;\n\t\t}"}, {"instruction": "Returns whether or not comments are inside a node type or not.\n@param {ASTNode} parent The Comment parent node.\n@param {string} nodeType The parent type to check against.\n@returns {boolean} True if the comment is inside nodeType.", "input": "JavaScript", "output": "function isParentNodeType(parent, nodeType) {\n            return parent.type === nodeType ||\n                (parent.body && parent.body.type === nodeType) ||\n                (parent.consequent && parent.consequent.type === nodeType);\n        }"}, {"instruction": "Starts the Cache Manager (all next calls to it will work against real cache data)\nUsages are meant for testing purposes. If its already on, nothing will happen\n@returns {*}\n@protected", "input": "JavaScript", "output": "function () {\n\t\t\t\tvar that = this;\n\t\t\t\treturn Promise.resolve().then(function () {\n\t\t\t\t\tvar oCfg = sap.ui.getCore().getConfiguration();\n\t\t\t\t\tif (!oCfg.isUI5CacheOn()) {\n\t\t\t\t\t\tsafeClearInstance(that);\n\t\t\t\t\t\tsap.ui.getCore().getConfiguration().setUI5CacheOn(true);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\t\t\t}"}, {"instruction": "/* eslint-disable prefer-object-spread/prefer-object-spread", "input": "JavaScript", "output": "function ReactResolver$$1(component) {\n  return isReactComponent(component) ? component : function (props) {\n    return React.createElement(VueContainer, _extends({}, props, { component: component }));\n  };\n}"}, {"instruction": "Supports old \"geospatial view state as separate props\" style TODO - this should either be moved into the core or deprecated", "input": "JavaScript", "output": "function getViewState(props) {\n  if (!props.viewState && 'latitude' in props && 'longitude' in props && 'zoom' in props) {\n    const {latitude, longitude, zoom, pitch = 0, bearing = 0} = props;\n    return {latitude, longitude, zoom, pitch, bearing};\n  }\n  return props.viewState;\n}"}, {"instruction": "for comparing mods before unassignment", "input": "JavaScript", "output": "function compareArray(a1, a2) {\n    if (a1.length != a2.length) return false;\n    for (var i = 0; i < a1.length; i++) {\n        if (a1[i] !== a2[i]) return false;\n    }\n    return true;\n  }"}, {"instruction": "Generates the index.html file\n@method writeIndex\n@param {Callback} cb The callback to execute after it's completed", "input": "JavaScript", "output": "function (cb) {\n            var self = this,\n                stack = new Y.Parallel();\n\n            Y.log('Preparing index.html', 'info', 'builder');\n            self.renderIndex(stack.add(function (html, view) {\n                stack.html = html;\n                stack.view = view;\n                if (self.options.dumpview) {\n                    Y.Files.writeFile(path.join(self.options.outdir, 'json', 'index.json'), JSON.stringify(view), stack.add(noop));\n                }\n                Y.Files.writeFile(path.join(self.options.outdir, 'index.html'), html, stack.add(noop));\n            }));\n\n            stack.done(function ( /* html, view */ ) {\n                Y.log('Writing index.html', 'info', 'builder');\n                cb(stack.html, stack.view);\n            });\n        }"}, {"instruction": "ANIMATION:", "input": "JavaScript", "output": "function(props, duration, easing, complete) {\n                    return this.each(function() { animate(this, props, duration, easing, complete); });\n                }"}, {"instruction": "Return true if the r,g,b,a values of this color are equal with the\ngiven one.\n@name equals\n@memberOf me.Color\n@function\n@param {me.Color} color\n@return {Boolean}", "input": "JavaScript", "output": "function (color) {\n            return (\n                (this.glArray[0] === color.glArray[0]) &&\n                (this.glArray[1] === color.glArray[1]) &&\n                (this.glArray[2] === color.glArray[2]) &&\n                (this.glArray[3] === color.glArray[3])\n            );\n        }"}, {"instruction": "Begins polling to determine when the specified stylesheet has finished loading\nin Gecko. Polling stops when all pending stylesheets have loaded or after 10\nseconds (to prevent stalls).\n\nThanks to Zach Leatherman for calling my attention to the @import-based\ncross-domain technique used here, and to Oleg Slobodskoi for an earlier\nsame-domain implementation. See Zach's blog for more details:\nhttp://www.zachleat.com/web/2010/07/29/load-css-dynamically/\n\n@method pollGecko\n@param {HTMLElement} node Style node to poll.\n@private", "input": "JavaScript", "output": "function pollGecko(node) {\n    var hasRules;\n\n    try {\n      // We don't really need to store this value or ever refer to it again, but\n      // if we don't store it, Closure Compiler assumes the code is useless and\n      // removes it.\n      hasRules = !!node.sheet.cssRules;\n    } catch (ex) {\n      // An exception means the stylesheet is still loading.\n      pollCount += 1;\n\n      if (pollCount < 200) {\n        setTimeout(function () { pollGecko(node); }, 50);\n      } else {\n        // We've been polling for 10 seconds and nothing's happened. Stop\n        // polling and finish the pending requests to avoid blocking further\n        // requests.\n        hasRules && finish('css');\n      }\n\n      return;\n    }\n\n    // If we get here, the stylesheet has loaded.\n    finish('css');\n  }"}, {"instruction": "Assertion errors, can provide a detailed error messages.\n\ninspect() and cliMessage() added to display errors with params.", "input": "JavaScript", "output": "function AssertionFailedError(params, template) {\n  this.params = params;\n  this.template = template;\n  // this.message = \"AssertionFailedError\";\n  let stack = new Error().stack;\n  // this.showDiff = true;\n  stack = stack ? stack.split('\\n').filter(line =>\n    // @todo cut assert things nicer\n    line.indexOf('lib/assert') < 0).join('\\n') : '';\n  this.showDiff = true;\n\n  this.actual = this.params.actual;\n  this.expected = this.params.expected;\n\n  this.inspect = () => {\n    const params = this.params || {};\n    const msg = params.customMessage || '';\n    return msg + subs(this.template, params);\n  };\n\n  this.cliMessage = () => this.inspect();\n}"}, {"instruction": "Determine if a type is abstract (not concrete).\n\nNote: This is used in place of the `graphql` version of the function in order\nto not break `instanceof` checks with Jest. This version also unwraps\nnon-null/list wrapper types.", "input": "JavaScript", "output": "function isAbstractType(type: GraphQLType): boolean {\n  const rawType = getRawType(type);\n  return (\n    rawType instanceof GraphQLInterfaceType ||\n    rawType instanceof GraphQLUnionType\n  );\n}"}, {"instruction": "constructor \nA loader for JSON manifests. Items inside the manifest are loaded before the loader completes. To load manifests\nusing JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}} as part of the\n{{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\nThe list of files in the manifest must be defined on the top-level JSON object in a `manifest` property. This\nexample shows a sample manifest definition, as well as how to to include a sub-manifest.\n\n{\n\"path\": \"assets/\",\n\"manifest\": [\n\"image.png\",\n{\"src\": \"image2.png\", \"id\":\"image2\"},\n{\"src\": \"sub-manifest.json\", \"type\":\"manifest\", \"callback\":\"jsonCallback\"}\n]\n}\n\nWhen a ManifestLoader has completed loading, the parent loader (usually a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\nbut could also be another ManifestLoader) will inherit all the loaded items, so you can access them directly.\n\nNote that the {{#crossLink \"JSONLoader\"}}{{/crossLink}} and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are\nhigher priority loaders, so manifests <strong>must</strong> set the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n{{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property to {{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}}.\n\nAdditionally, some browsers require the server to serve a JavaScript mime-type for JSONP, so it may not work in\nsome conditions.\n@class ManifestLoader\n@param {LoadItem|Object} loadItem\n@extends AbstractLoader\n@constructor", "input": "JavaScript", "output": "function ManifestLoader(loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.Types.MANIFEST);\n\n\t// Public Properties\n\t\t/**\n\t\t * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}},\n\t\t * used to pass plugins to new LoadQueues that may be created.\n\t\t * @property _plugins\n\t\t * @type {Array}\n\t\t * @private\n\t\t * @since 0.6.1\n\t\t */\n\t\tthis.plugins = null;\n\n\n\t// Protected Properties\n\t\t/**\n\t\t * An internal {{#crossLink \"LoadQueue\"}}{{/crossLink}} that loads the contents of the manifest.\n\t\t * @property _manifestQueue\n\t\t * @type {LoadQueue}\n\t\t * @private\n\t\t */\n\t\tthis._manifestQueue = null;\n\t}"}, {"instruction": "Set the resource path to be considered for the OData request URI of this\nquery request object. This method provides an alternative way to assign a\npath comprising a parameterization. If a path is provided, it overwrites\nany parameterization object that might have been specified separately.\n\n@param {string} sResourcePath\nResource path pointing to the entity set of the query result.\nMust include a valid parameterization if query contains\nparameters.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResultRequest#setResourcePath", "input": "JavaScript", "output": "function(sResourcePath) {\n\t\t\tthis._sResourcePath = sResourcePath;\n\t\t\tif (this._sResourcePath.indexOf(\"/\") != 0) {\n\t\t\t\tthrow \"Missing leading / (slash) for resource path\";\n\t\t\t}\n\t\t\tif (this._oQueryResult.getParameterization()) {\n\t\t\t\tvar iLastPathSep = sResourcePath.lastIndexOf(\"/\");\n\t\t\t\tif (iLastPathSep == -1) {\n\t\t\t\t\tthrow \"Missing navigation from parameter entity set to query result in resource path\";\n\t\t\t\t}\n\t\t\t\tvar sNavPropName = sResourcePath.substring(iLastPathSep + 1);\n\t\t\t\tif (sNavPropName != this._oQueryResult.getParameterization().getNavigationPropertyToQueryResult()) {\n\t\t\t\t\tthrow \"Invalid navigation property from parameter entity set to query result in resource path\";\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "classic build with sourcemaps", "input": "JavaScript", "output": "function build_dist_sourcemap(){\n  // run webpack\n  return gulp.src('index.js').pipe(webpackStream(createWebpackConfig({\n    mode: 'development',\n    entry: classicEntry,\n    output: {\n        filename:'oidc-client.js',\n        libraryTarget:'var',\n        library:'Oidc'\n    },\n    plugins: [],\n    devtool:'inline-source-map'\n  }), webpack))\n  .pipe(gulp.dest('dist/'));\n}"}, {"instruction": "Main generate function", "input": "JavaScript", "output": "function ngSwaggerGen(options) {\n  if (typeof options.swagger != 'string') {\n    console.error(\"Swagger file not specified in the 'swagger' option\");\n    process.exit(1);\n  }\n\n  var globalTunnel = require('global-tunnel-ng');\n  globalTunnel.initialize();\n  \n  $RefParser.bundle(options.swagger, { dereference: { circular: false } }).then(\n    data => {\n      doGenerate(data, options);\n    },\n    err => {\n      console.error(\n        `Error reading swagger location ${options.swagger}: ${err}`\n      );\n    }\n  ).catch(function (error) {\n    console.error(`Error: ${error}`);\n  });\n}"}, {"instruction": "Set camera projection matrix\n@param {clay.Matrix4} projectionMatrix", "input": "JavaScript", "output": "function (projectionMatrix) {\n        Matrix4.copy(this.projectionMatrix, projectionMatrix);\n        Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n        this.decomposeProjectionMatrix();\n    }"}, {"instruction": "Find index of value in array.\n\n@param arr {Array} Can also be a false-ish value.\n@param v {Object} Value to find.\n\nReturns -1 if not found, -2 if found multiple times.", "input": "JavaScript", "output": "function singleIndexOf(arr, v) {\n  var pos = -1;\n  var i, l;\n  if (!arr) {\n    return -1;\n  }\n  for (i = 0, l = arr.length; i < l; i++) {\n    if (arr[i] === v) {\n      if (pos >= 0) {\n        return -2;\n      }\n      pos = i;\n    }\n  }\n  return pos;\n}"}, {"instruction": "Undo elements to its previous state\n@type {Function}", "input": "JavaScript", "output": "function () {\n      if (!els.length) return\n      els.map(function (el) {\n        el.parentElement.removeChild(el)\n      })\n      els = []\n    }"}, {"instruction": "/*\nFinds the edge with the smallest slack that is incident on tree and returns\nit.", "input": "JavaScript", "output": "function findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}"}, {"instruction": "https://github.com/jsdoc3/jsdoc/issues/1272", "input": "JavaScript", "output": "function _detailedStringForDecryptionError(err, details) {\n    let result = err.name + '[msg: ' + err.message;\n\n    if (details) {\n        result += ', ' +\n            Object.keys(details).map(\n                (k) => k + ': ' + details[k],\n            ).join(', ');\n    }\n\n    result += ']';\n\n    return result;\n}"}, {"instruction": "Convert real value to percent\n\n@param value {Number} X in real\n@param no_min {boolean=} don't use min value\n@returns {Number} X in percent", "input": "JavaScript", "output": "function (value, no_min) {\n            var diapason = this.options.max - this.options.min,\n                one_percent = diapason / 100,\n                val, percent;\n\n            if (!diapason) {\n                this.no_diapason = true;\n                return 0;\n            }\n\n            if (no_min) {\n                val = value;\n            } else {\n                val = value - this.options.min;\n            }\n\n            percent = val / one_percent;\n\n            return this.toFixed(percent);\n        }"}, {"instruction": "Validate regular expression literals\n@param {ASTNode} node node to validate\n@returns {void}\n@private", "input": "JavaScript", "output": "function checkLiteral(node) {\n            const token = sourceCode.getFirstToken(node),\n                nodeType = token.type,\n                nodeValue = token.value;\n\n            if (nodeType === \"RegularExpression\") {\n                checkRegex(node, nodeValue, token.range[0]);\n            }\n        }"}, {"instruction": "/*", "input": "JavaScript", "output": "function handleError (err, vm, info) {\n  if (vm) {\n    let cur = vm;\n    while ((cur = cur.$parent)) {\n      const hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (let i = 0; i < hooks.length; i++) {\n          try {\n            const capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) return\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}"}, {"instruction": "Gets whether two dates have the same month and year.\n@param {Date} d1\n@param {Date} d2\n@returns {boolean}", "input": "JavaScript", "output": "function isSameMonthAndYear(d1, d2) {\n      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\n    }"}, {"instruction": "Converts an array of globs to full paths\n@function\n@param {array} globs - Array of globs and/or normal paths\n@return {array} Array of fully-qualified paths\n@requires glob", "input": "JavaScript", "output": "function convertGlobPaths(globs) {\n  return globs\n    .map(globString => glob.sync(globString))\n    .reduce((previous, current) => previous.concat(current), []);\n}"}, {"instruction": "Get the credentials from the ~/.aws/credentials file using the AWS_PROFILE env var to get the profile.\n\n@param profile The AWS profile to get the credentials from. Default to 'default'\n@returns {Promise} Will resolve with no parameters if it succeeds, rejects with the error if it fails (no credentials found for given profile.", "input": "JavaScript", "output": "function saveCredentialsInAWS(profile = 'default') {\n    credentials = new AWS.SharedIniFileCredentials({ profile });\n    return new Promise((resolve, reject) =>\n        credentials.refresh(err => {\n            if (err) {\n                reject(err);\n            }\n            AWS.config.credentials = credentials;\n            resolve();\n        })\n    );\n}"}, {"instruction": "Pauses the Current User's Playback\n@param {Object} [options] Options, for now device_id,\n@param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n@example playbackPause().then(...)\n@returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\notherwise an error. Not returned if a callback is given.", "input": "JavaScript", "output": "function(options, callback) {\n    return (\n      WebApiRequest.builder(this.getAccessToken())\n        .withPath('/v1/me/player/pause')\n        /*jshint camelcase: false */\n        .withQueryParameters(\n          options && options.device_id ? { device_id: options.device_id } : null\n        )\n        .withHeaders({ 'Content-Type': 'application/json' })\n        .build()\n        .execute(HttpManager.put, callback)\n    );\n  }"}, {"instruction": "validate(values, props) -> errors", "input": "JavaScript", "output": "function validate({ username, password }, { i18n }) {\n  const errors = {}\n\n  if (!username) {\n    errors.username = i18n.t`Username is required`\n  } else if (validUsernames.indexOf(username)) {\n    errors.username = i18n.t`Sorry ${username}, you can't get in.`\n  }\n\n  return errors\n}"}, {"instruction": "Returns unique values from an array.\n\nNote: ugly code is ugly, but efficient: http://jsperf.com/array-unique2/8\n\n@param  Array  array\n@return Array", "input": "JavaScript", "output": "function unique(array) {\n    \"use strict\";\n    var o = {},\n        r = [];\n    for (var i = 0, len = array.length; i !== len; i++) {\n        var d = array[i];\n        if (typeof o[d] === \"undefined\") {\n            o[d] = 1;\n            r[r.length] = d;\n        }\n    }\n    return r;\n}"}, {"instruction": "Sets up the Auto Update environment", "input": "JavaScript", "output": "function setupAutoUpdate() {\n        updateJsonHandler = new StateHandler(updateJsonPath);\n        updateDomain.on('data', receiveMessageFromNode);\n\n        updateDomain.exec('initNode', {\n            messageIds: MessageIds,\n            updateDir: updateDir,\n            requester: domainID\n        });\n    }"}, {"instruction": "The default function used to format a Date to String, passed to the `format`\nprop.\n@param {Date} d\n@return {String}", "input": "JavaScript", "output": "function defaultFormat(d) {\n  if ((0, _DateUtils.isDate)(d)) {\n    var year = d.getFullYear();\n    var month = '' + (d.getMonth() + 1);\n    var day = '' + d.getDate();\n    return year + '-' + month + '-' + day;\n  }\n  return '';\n}"}, {"instruction": "Recursively replace @imports with the text at that url", "input": "JavaScript", "output": "function(text, url, callback) {\n    var done = function(map) {\n      callback(this.flatten(text, url, map));\n    }.bind(this);\n    this.loader.process(text, url, done);\n  }"}, {"instruction": "Returns search options for sifter (the system\nfor scoring and sorting results).\n\n@see https://github.com/brianreavis/sifter.js\n@return {object}", "input": "JavaScript", "output": "function() {\n\t\t\tvar settings = this.settings;\n\t\t\tvar sort = settings.sortField;\n\t\t\tif (typeof sort === 'string') {\n\t\t\t\tsort = [{field: sort}];\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tfields      : settings.searchField,\n\t\t\t\tconjunction : settings.searchConjunction,\n\t\t\t\tsort        : sort\n\t\t\t};\n\t\t}"}, {"instruction": "options.path must be specified; callback(err, data)", "input": "JavaScript", "output": "function devToolsInterface(options, callback) {\n    options.host = options.host || defaults.HOST;\n    options.port = options.port || defaults.PORT;\n    options.secure = !!(options.secure);\n    options.useHostName = !!(options.useHostName);\n    externalRequest(options.secure ? https : http, options, callback);\n}"}, {"instruction": "Add cf routes command *", "input": "JavaScript", "output": "function describeRoute(route) {\n\t\tvar host = route.Host;\n\t\tvar domain = route.DomainName;\n\t\tvar apps = route.Apps;\n\t\tvar appsNum = route.Apps.length;\n\n\t\tvar strResult = \"\\n\" + host + \"\\t\" + domain;\n\n\t\tif(appsNum != 0){\n\t\t\tstrResult += \"\\t\" + route.Apps[0].Name;\n\t\t\tif(appsNum > 1){\n\t\t\t\tfor(var i = 1; i < appsNum; i++){\n\t\t\t\t\tstrResult += \", \" + route.Apps[i].Name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn strResult;\n\t}"}, {"instruction": "Subclass of `glob.GlobSync`\n@param {string}     pattern      Pattern to be matched.\n@param {Object}     options      `options` for `glob`\n@param {function()} shouldIgnore Method to check whether a directory should be ignored.\n@constructor", "input": "JavaScript", "output": "function GlobSync(pattern, options, shouldIgnore) {\n\n    /**\n     * We don't put this thing to argument `options` to avoid\n     * further problems, such as `options` validation.\n     *\n     * Use `Symbol` as much as possible to avoid confliction.\n     */\n    this[IGNORE] = shouldIgnore;\n\n    Sync.call(this, pattern, options);\n}"}, {"instruction": "/*\\\nRaphael\n[ method ]\n*\nCreates a canvas object on which to draw.\nYou must do this first, as all future calls to drawing methods\nfrom this instance will be bound to this canvas.\n> Parameters\n*\n- container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n- width (number)\n- height (number)\n- callback (function) #optional callback function which is going to be executed in the context of newly created paper\nor\n- x (number)\n- y (number)\n- width (number)\n- height (number)\n- callback (function) #optional callback function which is going to be executed in the context of newly created paper\nor\n- all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n- callback (function) #optional callback function which is going to be executed in the context of newly created paper\nor\n- onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve\u2019s \u201cDOMLoad\u201d event. In this case method returns `undefined`.\n= (object) @Paper\n> Usage\n| // Each of the following examples create a canvas\n| // that is 320px wide by 200px high.\n| // Canvas is created at the viewport\u2019s 10,50 coordinate.\n| var paper = Raphael(10, 50, 320, 200);\n| // Canvas is created at the top left corner of the #notepad element\n| // (or its top right corner in dir=\"rtl\" elements)\n| var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n| // Same as above\n| var paper = Raphael(\"notepad\", 320, 200);\n| // Image dump\n| var set = Raphael([\"notepad\", 320, 200, {\n|     type: \"rect\",\n|     x: 10,\n|     y: 10,\n|     width: 25,\n|     height: 25,\n|     stroke: \"#f00\"\n| }, {\n|     type: \"text\",\n|     x: 30,\n|     y: 40,\n|     text: \"Dump\"\n| }]);\n\\", "input": "JavaScript", "output": "function R(first) {\n        if (R.is(first, \"function\")) {\n            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n        } else if (R.is(first, array)) {\n            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n        } else {\n            var args = Array.prototype.slice.call(arguments, 0);\n            if (R.is(args[args.length - 1], \"function\")) {\n                var f = args.pop();\n                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n                    f.call(R._engine.create[apply](R, args));\n                });\n            } else {\n                return R._engine.create[apply](R, arguments);\n            }\n        }\n    }"}, {"instruction": "Set a property on an object. Adds the new property and\ntriggers change notification if the property doesn't\nalready exist.", "input": "JavaScript", "output": "function set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}"}, {"instruction": "Prints CasperJS help.", "input": "JavaScript", "output": "function printHelp() {\n        /* global slimer */\n        var engine = phantom.casperEngine === 'slimerjs' ? slimer : phantom;\n        var version = [engine.version.major, engine.version.minor, engine.version.patch].join('.');\n        return __terminate([\n            'CasperJS version ' + phantom.casperVersion.toString() +\n            ' at ' + phantom.casperPath + ', using ' + phantom.casperEngine + ' version ' + version,\n            fs.read(fs.pathJoin(phantom.casperPath, 'bin', 'usage.txt'))\n        ].join('\\n'));\n    }"}, {"instruction": "Test bind path to make sure it's working\n@param {string} bindPath\n@return {boolean}", "input": "JavaScript", "output": "function tryBindPath(serverless, bindPath, testFile) {\n  const options = [\n    'run',\n    '--rm',\n    '-v',\n    `${bindPath}:/test`,\n    'alpine',\n    'ls',\n    `/test/${testFile}`\n  ];\n  try {\n    const ps = dockerCommand(options);\n    if (process.env.SLS_DEBUG) {\n      serverless.cli.log(`Trying bindPath ${bindPath} (${options})`);\n      serverless.cli.log(ps.stdout.trim());\n    }\n    return ps.stdout.trim() === `/test/${testFile}`;\n  } catch (err) {\n    return false;\n  }\n}"}, {"instruction": "Add animation to the view", "input": "JavaScript", "output": "function createGridClipShape(rect, seriesModel, cb) {\n    var rectEl = new graphic.Rect({\n        shape: {\n            x: rect.x - 10,\n            y: rect.y - 10,\n            width: 0,\n            height: rect.height + 20\n        }\n    });\n    graphic.initProps(rectEl, {\n        shape: {\n            width: rect.width + 20,\n            height: rect.height + 20\n        }\n    }, seriesModel, cb);\n\n    return rectEl;\n}"}, {"instruction": "Fetches the published versions of npm from the npm registry\n@return {Promise.<versions[]>} - Array of the available versions", "input": "JavaScript", "output": "function getAvailableNPMVersions () {\n  return new Promise((resolve, reject) => {\n    exec('npm view npm versions --json', (err, stdout) => {\n      if (err) {\n        let error = 'We could not show latest available versions. Try running this script again '\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)'\n        return reject(error)\n      }\n\n      resolve(JSON.parse(stdout))\n    })\n  })\n}"}, {"instruction": "Buffer data from socket to present\nwell formed packets", "input": "JavaScript", "output": "function BufferLayer(socket) {\n\t//for ssl connection\n\tthis.securePair = null;\n\tthis.socket = socket;\n\n\tvar self = this;\n\t// bind event\n\tthis.socket.on('data', function(data) {\n\t\ttry {\n\t\t\tself.recv(data);\n\t\t}\n\t\tcatch(e) {\n\t\t\tself.socket.destroy();\n\t\t\tself.emit('error', e);\n\t\t}\n\t}).on('close', function() {\n\t\tself.emit('close');\n\t}).on('error', function (err) {\n\t\tself.emit('error', err);\n\t});\n\n\t//buffer data\n\tthis.buffers = [];\n\tthis.bufferLength = 0;\n\t//expected size\n\tthis.expectedSize = 0;\n}"}, {"instruction": "Only use for SSL (RDP security layer TODO)\n@see http://msdn.microsoft.com/en-us/library/cc240518.aspx\n@param opt {object} Classic type options\n@returns {type.Component}", "input": "JavaScript", "output": "function serverSecurityData(opt) {\n\tvar self = {\n\t\t__TYPE__ : MessageType.SC_SECURITY,\n\t\tencryptionMethod : new type.UInt32Le(),\n\t\tencryptionLevel : new type.UInt32Le() \n\t};\n\t\n\treturn new type.Component(self, opt);\n}"}, {"instruction": "Given an AST and an array of variableDeclaration nodes, return a new AST with\nall the declarations at the top of the AST.", "input": "JavaScript", "output": "function addTopDeclarationNodes(ast: Object, declarationNodes: Object[]) {\n  const statements = [];\n  declarationNodes.forEach(declarationNode => {\n    statements.push(getDeclarations(declarationNode));\n  });\n  statements.push(ast);\n  return t.program(statements);\n}"}, {"instruction": "returns an object with event handlers used at addDomListener", "input": "JavaScript", "output": "function createBindingHandlers({\n    fullEventName,\n    domEventHandler,\n    selector\n}) {\n    return {\n        bindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).on(fullEventName, selector, domEventHandler);\n            }\n        },\n        unbindHandler(evt = {}) {\n            const { node } = evt;\n            if (node) {\n                dom.$(node).off(fullEventName, selector, domEventHandler);\n            }\n        }\n    };\n}"}, {"instruction": "Changes the user's password.", "input": "JavaScript", "output": "function onChangePassword() {\n  var password = $('#changed-password').val();\n  activeUser().updatePassword(password).then(function() {\n    refreshUserData();\n    alertSuccess('Password changed!');\n  }, onAuthError);\n}"}, {"instruction": "12.2.5.4.2 The \"before html\" insertion mode ------------------------------------------------------------------", "input": "JavaScript", "output": "function startTagBeforeHtml(p, token) {\n    if (token.tagName === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = BEFORE_HEAD_MODE;\n    }\n\n    else\n        tokenBeforeHtml(p, token);\n}"}, {"instruction": "Binds a framebuffer\n\nThis function pretty much soley exists because I spent hours\ntrying to figure out why something I wrote wasn't working only\nto realize I forget to set the viewport dimensions.\nMy hope is this function will fix that.\n\nIt is effectively the same as\n\ngl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\ngl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n\n@param {WebGLRenderingContext} gl the WebGLRenderingContext\n@param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\nIf not passed will bind the canvas.\n@param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n@memberOf module:twgl/framebuffers", "input": "JavaScript", "output": "function bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || gl.FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}"}, {"instruction": "Load the resource at the given path.\n@name orion.explorer.FileExplorer#loadResourceList\n@function\n@param {String|Object} path The path of the resource to load, or an object with a ChildrenLocation or ContentLocation field giving the path.\n@param {Boolean} [force] If true, force reload even if the path is unchanged. Useful\nwhen the client knows the resource underlying the current path has changed.\n@param {Function} postLoad a function to call after loading the resource. <b>Deprecated</b>: use the returned promise instead.\n@returns {orion.Promise}", "input": "JavaScript", "output": "function(path, force, postLoad) {\n\t\t\tif (path && typeof path === \"object\") {\n\t\t\t\tpath = path.ChildrenLocation || path.ContentLocation;\n\t\t\t}\n\t\t\tpath = mFileUtils.makeRelative(path);\n\t\t\tvar self = this;\n\t\t\tif (force || path !== this.treeRoot.Path || path !== this._lastPath) {\n\t\t\t\tthis._lastPath = path;\n\t\t\t\treturn this.load(this.fileClient.read(path, true), i18nUtil.formatMessage(messages[\"Loading ${0}\"], path), postLoad).then(function() {\n\t\t\t\t\tself.treeRoot.Path = path;\n\t\t\t\t\treturn self.treeRoot;\n\t\t\t\t}, function(err) {\n\t\t\t\t\tself.treeRoot.Path = null;\n\t\t\t\t\treturn new Deferred().reject(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn new Deferred().resolve(self.treeRoot);\n\t\t}"}, {"instruction": "amount of pixels to drag to determine direction of swipe", "input": "JavaScript", "output": "function(e, isDown) {\n\t    _preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);\n\n\t\t_shout('preventDragEvent', e, isDown, _preventObj);\n\t\treturn _preventObj.prevent;\n\n\t}"}, {"instruction": "Subtracts matrix b from matrix a\n\n@param {mat3} out the receiving matrix\n@param {mat3} a the first operand\n@param {mat3} b the second operand\n@returns {mat3} out", "input": "JavaScript", "output": "function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}"}, {"instruction": "Add a column split on a string or number valued field, producing a column for\neach distinct value of the field.\n\n@param {String} fieldName The name of field to split on.\n@return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n\n@method splunkjs.Service.PivotSpecification", "input": "JavaScript", "output": "function(fieldName) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (!utils.contains([\"number\", \"string\"], f.type)) {\n                throw new Error(\"Field was of type \" + f.type + \", expected number or string.\");\n            }\n\n            var col = {\n                fieldName: fieldName,\n                owner: f.owner,\n                type: f.type\n            };\n\n            if (\"number\" === f.type) {\n                col.display = \"all\";\n            }\n\n            this.columns.push(col);\n\n            return this;\n        }"}, {"instruction": "/* Older versions of node do not have fs.exists so we implement our own", "input": "JavaScript", "output": "function checkFileExists(filename, callback) {\n  if (fs.exists !== undefined) {\n    fs.exists(filename, callback);\n  } else {\n    fs.stat(filename, function (err) {\n      callback(!err);\n    });\n  }\n}"}, {"instruction": "removes array item by given index", "input": "JavaScript", "output": "function shift(arr, index) {\n    for (let i = index; i < arr.length; i++) {\n        arr[i] = arr[i + 1];\n    }\n    delete arr[arr.length - 1];\n    arr.length -= 1;\n}"}, {"instruction": "textutil -convert txt -stdout foo.doc", "input": "JavaScript", "output": "function extractText( filePath, options, cb ) {\n  var result = ''\n    , error = null\n    , textutil = spawn( 'textutil', ['-convert', 'txt', '-stdout', filePath] )\n    ;\n\n  textutil.stdout.on( 'data', function( buffer ) {\n    result += buffer.toString();\n  });\n\n  textutil.stderr.on( 'error', function( buffer ) {\n    if ( !error ) {\n      error = '';\n    }\n    error += buffer.toString();\n  });\n\n  textutil.on( 'close', function( /* code */ ) {\n    if ( error ) {\n      error = new Error( 'textutil read of file named [[ ' +\n        path.basename( filePath ) + ' ]] failed: ' + error );\n      cb( error, null );\n      return;\n    }\n    cb( null, result.trim() );\n  });\n}"}, {"instruction": "(C) 1995-2013 Jean-loup Gailly and Mark Adler (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin  This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.  Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Use ordinary array, since untyped makes no boost here", "input": "JavaScript", "output": "function makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}"}, {"instruction": "Creates and returns a QueryList.\n\n@param memoryIndex The index in memory where the QueryList should be saved. If null,\nthis is is a content query and the QueryList will be saved later through directiveCreate.\n@param predicate The type for which the query will search\n@param descend Whether or not to descend into children\n@param read What to save in the query\n@returns QueryList<T>", "input": "JavaScript", "output": "function query(memoryIndex, predicate, descend, read) {\n    ngDevMode && assertPreviousIsParent();\n    var queryList = new QueryList$1();\n    var queries = getCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(null, queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}"}, {"instruction": "Update the zoom and center (X and Y) springs.\n@function\n@returns {Boolean} True if any change has been made, false otherwise.", "input": "JavaScript", "output": "function() {\n        var _this = this;\n        this._adjustCenterSpringsForZoomPoint(function() {\n            _this.zoomSpring.update();\n        });\n\n        this.centerSpringX.update();\n        this.centerSpringY.update();\n\n        var changed = this.centerSpringX.current.value !== this._oldCenterX ||\n            this.centerSpringY.current.value !== this._oldCenterY ||\n            this.zoomSpring.current.value !== this._oldZoom;\n\n        this._oldCenterX = this.centerSpringX.current.value;\n        this._oldCenterY = this.centerSpringY.current.value;\n        this._oldZoom    = this.zoomSpring.current.value;\n\n        return changed;\n    }"}, {"instruction": "primary ('.' id)+ '='?\n| primary", "input": "JavaScript", "output": "function() {\n    var node = this.primary();\n    if (node) {\n      while (this.accept('.')) {\n        var id = new nodes.Ident(this.expect('ident').val.string);\n        node = new nodes.Member(node, id);\n      }\n      this.skipSpaces();\n      if (this.accept('=')) {\n        node.val = this.list();\n        // @block support\n        if (node.val.isEmpty) this.assignAtblock(node.val);\n      }\n    }\n    return node;\n  }"}, {"instruction": "\u7f16\u8bd1\u666e\u901a\u8282\u70b9\n\n@param {ANode} aNode \u8282\u70b9\u5bf9\u8c61\n@param {CompileSourceBuffer} sourceBuffer \u7f16\u8bd1\u6e90\u7801\u7684\u4e2d\u95f4buffer\n@param {Component} owner \u6240\u5c5e\u7ec4\u4ef6\u5b9e\u4f8b\u73af\u5883\n@param {Object} extra \u7f16\u8bd1\u6240\u9700\u7684\u4e00\u4e9b\u989d\u5916\u4fe1\u606f", "input": "JavaScript", "output": "function (aNode, sourceBuffer, owner) {\n        elementSourceCompiler.tagStart(sourceBuffer, aNode);\n        elementSourceCompiler.inner(sourceBuffer, aNode, owner);\n        elementSourceCompiler.tagEnd(sourceBuffer, aNode);\n    }"}, {"instruction": "Serializes a capabilities object. This is defined as a standalone function\nso it may be type checked (where Capabilities[Symbols.serialize] has type\nchecking disabled since it is defined with [] access on a struct).\n\n@param {!Capabilities} caps The capabilities to serialize.\n@return {!Object<string, ?>} The JSON representation of this instance.\nNote, the returned object may contain nested promised values.", "input": "JavaScript", "output": "function serialize(caps) {\n  let ret = {};\n  for (let key of caps.keys()) {\n    let cap = caps.get(key);\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap;\n    }\n  }\n  return ret;\n}"}, {"instruction": "Poll for stats every `ms`.\n\n@param {Number} ms", "input": "JavaScript", "output": "function pollStats(ms) {\n    request('./stats', function (data) {\n        o('li.inactive .count').text(data.inactiveCount);\n        o('li.active .count').text(data.activeCount);\n        o('li.complete .count').text(data.completeCount);\n        o('li.failed .count').text(data.failedCount);\n        o('li.delayed .count').text(data.delayedCount);\n        setTimeout(function () {\n            pollStats(ms);\n        }, ms);\n    });\n}"}, {"instruction": "Sends a command to node to cause a restart.", "input": "JavaScript", "output": "function restartNode() {\n        try {\n            _nodeConnection.domains.base.restartNode();\n        } catch (e) {\n            window.alert(\"Failed trying to restart Node: \" + e.message);\n        }\n    }"}, {"instruction": "Prepare the function used to generate the uncompressed content from this ZipFile.\n@param {DataReader} reader the reader to use.\n@param {number} from the offset from where we should read the data.\n@param {number} length the length of the data to read.\n@param {JSZip.compression} compression the compression used on this file.\n@param {number} uncompressedSize the uncompressed size to expect.\n@return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).", "input": "JavaScript", "output": "function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    }"}, {"instruction": "Move the access token from the request body to the request header", "input": "JavaScript", "output": "function formatRequest(p, qs) {\n\t\tvar token = qs.access_token;\n\t\tdelete qs.access_token;\n\t\tp.headers.Authorization = 'Bearer ' + token;\n\n\t\treturn true;\n\t}"}, {"instruction": "Using top-down recursion, linearly scan the JSON tree to determine which values should be deduplicated.", "input": "JavaScript", "output": "function collectDuplicates(value) {\n    if (value == null || typeof value !== 'object') {\n      return;\n    }\n    const metadata = metadataForVal.get(value);\n    // Only consider duplicates with hashes longer than 2 (excludes [] and {}).\n    if (metadata && metadata.value !== value && metadata.hash.length > 2) {\n      metadata.isDuplicate = true;\n      return;\n    }\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        collectDuplicates(value[i]);\n      }\n    } else {\n      for (const k in value) {\n        if (value.hasOwnProperty(k) && value[k] !== undefined) {\n          collectDuplicates(value[k]);\n        }\n      }\n    }\n  }"}, {"instruction": "Function: create\n\nCreates the cell path for the given cell. The cell path is a\nconcatenation of the indices of all ancestors on the (finite) path to\nthe root, eg. \"0.0.0.1\".\n\nParameters:\n\ncell - Cell whose path should be returned.", "input": "JavaScript", "output": "function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t}"}, {"instruction": "Check the JWT token for collab server", "input": "JavaScript", "output": "function checkCollabServerToken(authorization) {\n\t\tif (authorization.substr(0, 7) !== \"Bearer \") {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tvar decoded = jwt.verify(authorization.substr(7), options.configParams.get(\"orion.jwt.secret\"));\n\t\t\treturn true;\n\t\t} catch (ex) {\n\t\t\treturn false;\n\t\t}\n\t}"}, {"instruction": "Removes an object from canvas and returns it\n@method remove\n@param object {Object} Object to remove\n@return {Object} removed object", "input": "JavaScript", "output": "function (object) {\n      removeFromArray(this._objects, object);\n      if (this.getActiveObject() === object) {\n\n        // removing active object should fire \"selection:cleared\" events\n        this.fire('before:selection:cleared', { target: object });\n        this.discardActiveObject();\n        this.fire('selection:cleared');\n      }\n      this.renderAll();\n      return object;\n    }"}, {"instruction": "Mimic Array.forEach() API, but with an async callback function. Execute each callback on each array item serially. Useful when using WebDriverIO API.  Added due because of problem with chrome driver when too many requests are made simultaneously. https://bugs.chromium.org/p/chromedriver/issues/detail?id=2152#c9  @param {object[]} array Input array items to iterate over @param {function} callback Async function to excute on each array item @param {object} option Additional options. 'extractValue' will extract the .value object from a WebdriverIO", "input": "JavaScript", "output": "async function forEachAsync(array, callback, option = {}) {\n  const {\n    extractValue = true,\n    unify: unifyResults = true,\n    expandArrayResults = true,\n  } = option;\n  const inputArray = Array.isArray(array) ? array : [array];\n  const values = [];\n  for (let index = 0; index < inputArray.length; index++) {\n    let res;\n    try {\n      res = await callback(inputArray[index], index, inputArray);\n      if (Array.isArray(res) && expandArrayResults) {\n        res.forEach(val => values.push(val));\n      } else if (res) {\n        values.push(res);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n  if (unifyResults) {\n    return unify(values, { extractValue: true });\n  }\n  return values;\n}"}, {"instruction": "JavaScript code to be evaluated  `window.location.href`", "input": "JavaScript", "output": "function () {\n                    var str, j = i, e;\n\n                    if (input.charAt(j) === '~') { j++; e = true; } // Escaped strings\n                    if (input.charAt(j) !== '`') { return; }\n                    if (env.javascriptEnabled !== undefined && !env.javascriptEnabled) {\n                        error(\"You are using JavaScript, which has been disabled.\");\n                    }\n\n                    if (e) { $char('~'); }\n\n                    str = $re(/^`([^`]*)`/);\n                    if (str) {\n                        return new(tree.JavaScript)(str[1], i, e);\n                    }\n                }"}, {"instruction": "Sets handlers on all of our input fields on the sandbox dom", "input": "JavaScript", "output": "function setHandlers() {\n    d3.select(`.${chartSelectorClass}`).on('change', _handleChartSelectorChange);\n    d3.select(`.${dataSelectorClass}`).on('change', _handleDataSelectorChange);\n\n    d3.select(`.${dataSubmitButtonClass}`).on('click', _handleDataUpdate);\n    d3.select(`.${dataResetButtonClass}`).on('click', _handleDataReset);\n    d3.select(`.${dataInputSizeToggleClass}`).on('click', _handleDataSizeToggle);\n\n    d3.select(`.${configSubmitButtonClass}`).on('click', _handleConfigUpdate);\n    d3.select(`.${configResetButtonClass}`).on('click', _handleConfigReset);\n\n    d3.select(`.${configAddTooltipClass}`).on('click', _handleAddTooltip.bind(null, tooltipTypes.basic))\n    d3.select(`.${configAddMiniTooltipClass}`).on('click', _handleAddTooltip.bind(null, tooltipTypes.mini))\n}"}, {"instruction": "Returns an array of names of merged-column which contains every column name in the given array.\n@param {Array.<String>} columnNames - an array of column names to test\n@returns {Array.<String>}\n@private", "input": "JavaScript", "output": "function(columnNames) {\n        var columnModel = this.columnModel;\n        var mergedColumnNames = _.pluck(columnModel.get('complexHeaderColumns'), 'name');\n\n        return _.filter(mergedColumnNames, function(mergedColumnName) {\n            var unitColumnNames = columnModel.getUnitColumnNamesIfMerged(mergedColumnName);\n\n            return _.every(unitColumnNames, function(name) {\n                return _.contains(columnNames, name);\n            });\n        });\n    }"}, {"instruction": "Creates a type derived from {@link CatalogMember} based on a given URL.\n\n@param {String} url The derived type name.\n@param {Terria} terria The Terria instance.\n@param {Boolean} allowLoad Whether it's ok to attempt to load the URL and detect failures. We generally do this for WMS type services, but not for local files.\n@returns {CatalogMember} The constructed data item or promise, or undefined if the URL is not supported.", "input": "JavaScript", "output": "function(url, terria, allowLoad, index) {\n  index = index || 0;\n  if (index >= mapping.length) {\n    return undefined;\n  }\n  if (\n    (mapping[index].matcher && !mapping[index].matcher(url)) ||\n    (mapping[index].requiresLoad && !allowLoad)\n  ) {\n    return createCatalogItemFromUrl(url, terria, allowLoad, index + 1);\n  } else {\n    var item = new mapping[index].constructor(terria);\n    if (!allowLoad) {\n      return item;\n    }\n    item.url = url;\n    item.name = url;\n    return item\n      .load()\n      .yield(item)\n      .otherwise(function(e) {\n        console.log(e);\n        return createCatalogItemFromUrl(url, terria, allowLoad, index + 1);\n      });\n  }\n}"}, {"instruction": "Creates a new general purpose modal dialog using the default template and the template variables given\nas parameters as described.\n\n@param {string} dlgClass A class name identifier for the dialog. Typically one of DefaultDialogs.*\n@param {string=} title The title of the dialog. Can contain HTML markup. Defaults to \"\".\n@param {string=} message The message to display in the dialog. Can contain HTML markup. Defaults to \"\".\n@param {Array.<{className: string, id: string, text: string}>=} buttons An array of buttons where each button\nhas a class, id and text property. The id is used in \"data-button-id\". Defaults to a single Ok button.\nTypically className is one of DIALOG_BTN_CLASS_*, id is one of DIALOG_BTN_*\n@param {boolean=} autoDismiss Whether to automatically dismiss the dialog when one of the buttons\nis clicked. Default true. If false, you'll need to manually handle button clicks and the Esc\nkey, and dismiss the dialog yourself when ready by calling `close()` on the returned dialog.\n@return {Dialog}", "input": "JavaScript", "output": "function showModalDialog(dlgClass, title, message, buttons, autoDismiss) {\n        var templateVars = {\n            dlgClass: dlgClass,\n            title:    title   || \"\",\n            message:  message || \"\",\n            buttons:  buttons || [{ className: DIALOG_BTN_CLASS_PRIMARY, id: DIALOG_BTN_OK, text: Strings.OK }]\n        };\n        var template = Mustache.render(DialogTemplate, templateVars);\n\n        return showModalDialogUsingTemplate(template, autoDismiss);\n    }"}, {"instruction": "draw the image layer\n@ignore", "input": "JavaScript", "output": "function (renderer) {\n            var viewport = me.game.viewport,\n                width = this.imagewidth,\n                height = this.imageheight,\n                bw = viewport.bounds.width,\n                bh = viewport.bounds.height,\n                ax = this.anchorPoint.x,\n                ay = this.anchorPoint.y,\n                x = this.pos.x,\n                y = this.pos.y;\n\n            if (this.ratio.x === this.ratio.y === 0) {\n                x = x + ax * (bw - width);\n                y = y + ay * (bh - height);\n            }\n\n            renderer.translate(x, y);\n            renderer.drawPattern(\n                this._pattern,\n                0,\n                0,\n                viewport.width * 2,\n                viewport.height * 2\n            );\n        }"}, {"instruction": "Compile and link the given template and store values for element, scope, and controller.\n@param {string} template\n@returns {angular.JQLite} The root compiled element.", "input": "JavaScript", "output": "function createDatepickerInstance(template) {\n    var outputElement = $compile(template)(pageScope);\n    pageScope.$apply();\n\n    ngElement = outputElement[0].tagName == 'MD-DATEPICKER' ?\n        outputElement : outputElement.find('md-datepicker');\n    element = ngElement[0];\n    scope = ngElement.isolateScope();\n    controller = ngElement.controller('mdDatepicker');\n\n    return outputElement;\n  }"}, {"instruction": "Determines whether the given path is a \"resource path\" or a \"collection path\".\nResource paths operate on a single REST resource, whereas collection paths operate on\na collection of resources.\n\nNOTE: This algorithm is subject to change. Over time, it should get smarter and better at determining request types.\n\n@param   {Request} req\n@returns {boolean}", "input": "JavaScript", "output": "function isCollectionRequest (req) {\n  let isCollection = responseIsCollection(req);\n\n  if (isCollection === undefined) {\n    isCollection = !lastPathSegmentIsAParameter(req);\n  }\n\n  return isCollection;\n}"}, {"instruction": "save entitlements", "input": "JavaScript", "output": "function setEntitlements(file, entitlements) {\n    const plistContent = plist.build(entitlements);\n\n    mkpath.sync(path.dirname(file));\n\n    fs.writeFileSync(file, plistContent, \"utf8\");\n  }"}, {"instruction": "Constructs a DateTimeFormatter_ object which implements the Formatter_\ninterface.\n\nInternal object to construct and store a goog.i18n.DateTimeFormat for the\na datetime pattern and formats dates using the fallback interval pattern\n(e.g. '{0} \u2013 {1}').\n\n@param {string} dateTimePattern Datetime pattern used to format the dates.\n@param {string} fallbackPattern Fallback interval pattern to be used with the\ndatetime pattern.\n@param {!DateTimeSymbolsType} dateTimeSymbols Symbols to use with\nthe datetime format.\n@constructor\n@implements {Formatter_}\n@private", "input": "JavaScript", "output": "function(\n    dateTimePattern, fallbackPattern, dateTimeSymbols) {\n  /**\n   * Date time pattern used to format the dates.\n   * @private {string}\n   */\n  this.dateTimePattern_ = dateTimePattern;\n\n  /**\n   * Date time formatter used to format the dates.\n   * @private {!DateTimeFormat}\n   */\n  this.dateTimeFormatter_ =\n      new DateTimeFormat(dateTimePattern, dateTimeSymbols);\n\n  /**\n   * Fallback interval pattern.\n   * @private {string}\n   */\n  this.fallbackPattern_ = fallbackPattern;\n}"}, {"instruction": "Create a Collection object from a response containing a list of resources.\n\n@param {Object} response Full payload from a response to a\ncollection request.\n@param {Dispatcher} dispatcher\n@param {Object} [dispatchOptions]\n@returns {Object} Collection", "input": "JavaScript", "output": "function Collection(response, dispatcher, dispatchOptions) {\n  if (!Collection.isCollectionResponse(response)) {\n    throw new Error(\n        'Cannot create Collection from response that does not have resources');\n  }\n\n  this.data = response.data;\n  this._response = response;\n  this._dispatcher = dispatcher;\n  this._dispatchOptions = dispatchOptions;\n}"}, {"instruction": "Copyright (c) 2006-2017, JGraph Ltd\nCopyright (c) 2006-2017, Gaudenz Alder\n \nClass: mxPrintPreview\n\nImplements printing of a diagram across multiple pages. The following opens\na print preview for an existing graph:\n\n(code)\nvar preview = new mxPrintPreview(graph);\npreview.open();\n(end)\n\nUse <mxUtils.getScaleForPageCount> as follows in order to print the graph\nacross a given number of pages:\n\n(code)\nvar pageCount = mxUtils.prompt('Enter page count', '1');\n\nif (pageCount != null)\n{\nvar scale = mxUtils.getScaleForPageCount(pageCount, graph);\nvar preview = new mxPrintPreview(graph, scale);\npreview.open();\n}\n(end)\n\nAdditional pages:\n\nTo add additional pages before and after the output, <getCoverPages> and\n<getAppendices> can be used, respectively.\n\n(code)\nvar preview = new mxPrintPreview(graph, 1);\n\npreview.getCoverPages = function(w, h)\n{\nreturn [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n{\ndiv.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n}))];\n};\n\npreview.getAppendices = function(w, h)\n{\nreturn [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n{\ndiv.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n}))];\n};\n\npreview.open();\n(end)\n\nCSS:\n\nThe CSS from the original page is not carried over to the print preview.\nTo add CSS to the page, use the css argument in the <open> function or\noverride <writeHead> to add the respective link tags as follows:\n\n(code)\nvar writeHead = preview.writeHead;\npreview.writeHead = function(doc, css)\n{\nwriteHead.apply(this, arguments);\ndoc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n};\n(end)\n\nPadding:\n\nTo add a padding to the page in the preview (but not the print output), use\nthe following code:\n\n(code)\npreview.writeHead = function(doc)\n{\nwriteHead.apply(this, arguments);\n\ndoc.writeln('<style type=\"text/css\">');\ndoc.writeln('@media screen {');\ndoc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\ndoc.writeln('}');\ndoc.writeln('</style>');\n};\n(end)\n\nHeaders:\n\nApart from setting the title argument in the mxPrintPreview constructor you\ncan override <renderPage> as follows to add a header to any page:\n\n(code)\nvar oldRenderPage = mxPrintPreview.prototype.renderPage;\nmxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n{\nvar div = oldRenderPage.apply(this, arguments);\n\nvar header = document.createElement('div');\nheader.style.position = 'absolute';\nheader.style.top = '0px';\nheader.style.width = '100%';\nheader.style.textAlign = 'right';\nmxUtils.write(header, 'Your header here');\ndiv.firstChild.appendChild(header);\n\nreturn div;\n};\n(end)\n\nThe pageNumber argument contains the number of the current page, starting at\n1. To display a header on the first page only, check pageNumber and add a\nvertical offset in the constructor call for the height of the header.\n\nPage Format:\n\nFor landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\nthe pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\nKeep in mind that one can not set the defaults for the print dialog\nof the operating system from JavaScript so the user must manually choose\na page format that matches this setting.\n\nYou can try passing the following CSS directive to <open> to set the\npage format in the print dialog to landscape. However, this CSS\ndirective seems to be ignored in most major browsers, including IE.\n\n(code)\n@page {\nsize: landscape;\n}\n(end)\n\nNote that the print preview behaves differently in IE when used from the\nfilesystem or via HTTP so printing should always be tested via HTTP.\n\nIf you are using a DOCTYPE in the source page you can override <getDoctype>\nand provide the same DOCTYPE for the print preview if required. Here is\nan example for IE8 standards mode.\n\n(code)\nvar preview = new mxPrintPreview(graph);\npreview.getDoctype = function()\n{\nreturn '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n};\npreview.open();\n(end)\n\nConstructor: mxPrintPreview\n\nConstructs a new print preview for the given parameters.\n\nParameters:\n\ngraph - <mxGraph> to be previewed.\nscale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\nborder - Border in pixels along each side of every page. Note that the\nactual print function in the browser will add another border for\nprinting.\npageFormat - <mxRectangle> that specifies the page format (in pixels).\nThis should match the page format of the printer. Default uses the\n<mxGraph.pageFormat> of the given graph.\nx0 - Optional left offset of the output. Default is 0.\ny0 - Optional top offset of the output. Default is 0.\nborderColor - Optional color of the page border. Default is no border.\nNote that a border is sometimes useful to highlight the printed page\nborder in the print preview of the browser.\ntitle - Optional string that is used for the window title. Default\nis 'Printer-friendly version'.\npageSelector - Optional boolean that specifies if the page selector\nshould appear in the window with the print preview. Default is true.", "input": "JavaScript", "output": "function mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n}"}, {"instruction": "Creates a button that when clicked will enter into stereo-rendering mode for AR.\n\nStructure: <div><button></div>\n\n@param {function} enterARHandler\n@returns {Element} Wrapper <div>.", "input": "JavaScript", "output": "function createEnterARButton (clickHandler) {\n  var arButton;\n\n  // Create elements.\n  arButton = document.createElement('button');\n  arButton.className = ENTER_AR_BTN_CLASS;\n  arButton.setAttribute('title', 'Enter AR mode.');\n  arButton.setAttribute('aframe-injected', '');\n\n  arButton.addEventListener('click', function (evt) {\n    document.getElementsByClassName(ENTER_AR_BTN_CLASS)[0].style.display = 'none';\n    document.getElementsByClassName(EXIT_AR_BTN_CLASS)[0].style.display = 'inline-block';\n    clickHandler();\n  });\n  return arButton;\n}"}, {"instruction": "This method will toggle the referenced CSS class (by the provided index)\nwithin the given context.\n\n@param context The styling context that will be updated with the\nnewly provided class value.\n@param index The index of the CSS class which is being updated.\n@param addOrRemove Whether or not to add or remove the CSS class", "input": "JavaScript", "output": "function updateClassProp(context, index, addOrRemove) {\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}"}, {"instruction": "The margins push the \"home\" region in from the sides by the specified amounts.\n@function\n@param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.", "input": "JavaScript", "output": "function(margins) {\n        $.console.assert($.type(margins) === 'object', '[Viewport.setMargins] margins must be an object');\n\n        this._margins = $.extend({\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        }, margins);\n\n        this._updateContainerInnerSize();\n        if (this.viewer) {\n            this.viewer.forceRedraw();\n        }\n    }"}, {"instruction": "Given an array of values, a type, and a default value,\nensure the given array's contents ALL adhere to the provided type,\nreturning the default value if type check fails.\n\nIf the given value to check isn't an Array, delegates to SPE.utils.ensureTypedArg.\n\n@param  {Array|boolean|string|number|object} arg          The array of values to check type of.\n@param  {String} type         The type that should be adhered to.\n@param  {(boolean|string|number|object)} defaultValue A default fallback value.\n@return {(boolean|string|number|object)}              The given value if type check passes, or the default value if it fails.", "input": "JavaScript", "output": "function( arg, type, defaultValue ) {\n        'use strict';\n\n        // If the argument being checked is an array, loop through\n        // it and ensure all the values are of the correct type,\n        // falling back to the defaultValue if any aren't.\n        if ( Array.isArray( arg ) ) {\n            for ( var i = arg.length - 1; i >= 0; --i ) {\n                if ( typeof arg[ i ] !== type ) {\n                    return defaultValue;\n                }\n            }\n\n            return arg;\n        }\n\n        // If the arg isn't an array then just fallback to\n        // checking the type.\n        return this.ensureTypedArg( arg, type, defaultValue );\n    }"}, {"instruction": "Built {type.Componen} from gcc user data\n@param userData {type.Component} GCC data from client\n@returns {type.Component} GCC encoded client user data", "input": "JavaScript", "output": "function writeConferenceCreateRequest (userData) {\n    var userDataStream = new type.Stream(userData.size());\n    userData.write(userDataStream);\n    \n    return new type.Component([\n\t    per.writeChoice(0), per.writeObjectIdentifier(t124_02_98_oid),\n\t    per.writeLength(userData.size() + 14), per.writeChoice(0),\n\t    per.writeSelection(0x08), per.writeNumericString(\"1\", 1), per.writePadding(1),\n\t    per.writeNumberOfSet(1), per.writeChoice(0xc0),\n\t    per.writeOctetStream(new Buffer(h221_cs_key), 4), per.writeOctetStream(userDataStream.getValue())\n    ]);\n}"}, {"instruction": "Initialize the point\n@param {Object} series The series object containing this point\n@param {Object} options The data in either number, array or object format", "input": "JavaScript", "output": "function (series, options) {\r\n\t\tvar point = this,\r\n\t\t\tcounters = series.chart.counters,\r\n\t\t\tdefaultColors;\r\n\t\tpoint.series = series;\r\n\t\tpoint.applyOptions(options);\r\n\t\tpoint.pointAttr = {};\r\n\r\n\t\tif (series.options.colorByPoint) {\r\n\t\t\tdefaultColors = series.chart.options.colors;\r\n\t\t\tif (!point.options) {\r\n\t\t\t\tpoint.options = {};\r\n\t\t\t}\r\n\t\t\tpoint.color = point.options.color = point.color || defaultColors[counters.color++];\r\n\r\n\t\t\t// loop back to zero\r\n\t\t\tcounters.wrapColor(defaultColors.length);\r\n\t\t}\r\n\r\n\t\tseries.chart.pointCount++;\r\n\t\treturn point;\r\n\t}"}, {"instruction": "\u6309\u7c7b\u522b\u548c\u53c2\u6570\u6570\u7ec4\u83b7\u53d6 mock \u6570\u636e\n@param {Number} format - \u6570\u636e\u6a21\u578b\u7684\u7c7b\u578b\n@param {Array} params - \u53c2\u6570\u6570\u7ec4\n@param {Array} ds - \u6570\u636e\u6a21\u578b\u7684\u6570\u636e\u6e90, \u5305\u62ec\u6240\u6709\u6570\u636e\u6a21\u578b", "input": "JavaScript", "output": "function (format, params, ds) {\n      this.ds = ds;\n      this.errorData = [];\n      this._sortParams(params);\n      var result = this._getMockByParams(format, params);\n      return {\n        json: result,\n        error: this.errorData\n      };\n    }"}, {"instruction": "{{{1 numeric encode", "input": "JavaScript", "output": "function encode_numeric(str) {\n    var len = str.length;\n    var bits = [];\n\n    for (var i = 0; i < len; i += 3) {\n        var s = str.substr(i, 3);\n        var b = Math.ceil(s.length * 10 / 3);\n        pushBits(bits, b, parseInt(s, 10));\n    }\n\n    var res = {};\n\n    var d = [0, 0, 0, 1];\n    pushBits(d, 14, len);\n    res.data27 = d.concat(bits);\n\n    if (len < 4096) {\n        var d = [0, 0, 0, 1];\n        pushBits(d, 12, len);\n        res.data10 = d.concat(bits);\n    }\n\n    if (len < 1024) {\n        var d = [0, 0, 0, 1];\n        pushBits(d, 10, len);\n        res.data1 = d.concat(bits);\n    }\n\n    return res;\n}"}, {"instruction": "Create a new has one instance.", "input": "JavaScript", "output": "function HasOne(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }"}, {"instruction": "This function memoize results for _computeMarkerId\nsince many of the times user will be playing around with the same zoom\nfactor, we can take advantage of this and cache the results for a\ngiven combination of highlight state, zoom transform value and maxZoom config.\n@returns{Function} memoize wrapper to the _computeMarkerId operation.\n@memberof Marker/helper", "input": "JavaScript", "output": "function _memoizedComputeMarkerId() {\n    let cache = {};\n\n    return (highlight, transform, { maxZoom }) => {\n        const cacheKey = `${highlight};${transform};${maxZoom}`;\n\n        if (cache[cacheKey]) {\n            return cache[cacheKey];\n        }\n\n        const markerId = _computeMarkerId(highlight, transform, { maxZoom });\n\n        cache[cacheKey] = markerId;\n\n        return markerId;\n    };\n}"}, {"instruction": "This module provides the {@link jQuery#selectText} API.\n\n@namespace\n@name module:sap/ui/dom/jquery/selectText\n@public\n@since 1.58\n \nSets the text selection in the first element of the collection.\n\n<b>Note</b>: This feature is only supported for input element\u2019s type of text, search, url, tel and password.\n\n@param {int} iStart Start position of the selection (inclusive)\n@param {int} iEnd End position of the selection (exclusive)\n@return {jQuery} The jQuery collection\n@public\n@name jQuery#selectText\n@author SAP SE\n@since 0.9.0\n@function\n@requires module:sap/ui/dom/jquery/selectText", "input": "JavaScript", "output": "function selectText(iStart, iEnd) {\n\t\tvar oDomRef = this.get(0);\n\n\t\ttry {\n\t\t\t// In Chrome 58 and above selection start is set to selection end when the first parameter of a setSelectionRange call is negative.\n\t\t\tif (typeof (oDomRef.selectionStart) === \"number\") {\n\t\t\t\toDomRef.setSelectionRange(iStart > 0 ? iStart : 0, iEnd);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// note: some browsers fail to read the \"selectionStart\" and \"selectionEnd\" properties from HTMLInputElement, e.g.: The input element's type \"number\" does not support selection.\n\t\t}\n\n\t\treturn this;\n\t}"}, {"instruction": "Construct glide.\n\n@param  {String} selector\n@param  {Object} options", "input": "JavaScript", "output": "function Glide(selector) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Glide);\n\n    this._c = {};\n    this._t = [];\n    this._e = new EventsBus();\n\n    this.disabled = false;\n    this.selector = selector;\n    this.settings = mergeOptions(defaults, options);\n    this.index = this.settings.startAt;\n  }"}, {"instruction": "Return default list of env variables with their assigned value, if any.", "input": "JavaScript", "output": "function _getFileContents(values) {\n  const env = getDefaultSlateEnv();\n\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && env.hasOwnProperty(key)) {\n      env[key] = values[key];\n    }\n  }\n\n  return Object.entries(env)\n    .map((keyValues) => {\n      return `${keyValues.join('=')}\\r\\n`;\n    })\n    .join('\\r\\n\\r\\n');\n}"}, {"instruction": "Gets presigned posts\n\n@param {string} siteId\n@param {Object} checksums\n@return {Object}", "input": "JavaScript", "output": "async function _getPresignedPosts(siteId, checksums) {\n  const endpoint = url.resolve(apiURL, `/sites/${siteId}/presigned_posts`);\n  const body = { checksums };\n  const response = await got.post(endpoint, { body, json: true, headers: _bearer() });\n\n  return response.body.presignedPosts;\n}"}, {"instruction": "To see the overview of app variants, a key user has created from an app", "input": "JavaScript", "output": "function(bAsKeyUser) {\n\t\t\tvar oDescriptor = fnGetDescriptor();\n\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\tvar fnCancel = function() {\n\t\t\t\t\tAppVariantUtils.closeOverviewDialog();\n\t\t\t\t};\n\t\t\t\tsap.ui.require([\"sap/ui/rta/appVariant/AppVariantOverviewDialog\"], function(AppVariantOverviewDialog) {\n\t\t\t\t\tif (!oAppVariantOverviewDialog) {\n\t\t\t\t\t\toAppVariantOverviewDialog = new AppVariantOverviewDialog({\n\t\t\t\t\t\t\tidRunningApp: oDescriptor[\"sap.app\"].id,\n\t\t\t\t\t\t\tisOverviewForKeyUser: bAsKeyUser\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\toAppVariantOverviewDialog.attachCancel(fnCancel);\n\n\t\t\t\t\toAppVariantOverviewDialog.oPopup.attachOpened(function() {\n\t\t\t\t\t\tresolve(oAppVariantOverviewDialog);\n\t\t\t\t\t});\n\n\t\t\t\t\toAppVariantOverviewDialog.open();\n\t\t\t\t});\n\t\t\t});\n\t\t}"}, {"instruction": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n**************************************************************************** /* global Reflect, Promise", "input": "JavaScript", "output": "function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return extendStatics(d, b);\n}"}, {"instruction": "Parse the input, then return the root node.\n\n@return {Node}\n@api private", "input": "JavaScript", "output": "function(){\n    var block = this.parent = this.root;\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash);\n      // normalize cached imports\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n      Parser.cache.set(this.hash, block);\n    }\n    return block;\n  }"}, {"instruction": "Loads the given name (or [name, options] pair) from the given table object\nholding the available presets or plugins.\n\nReturns undefined if the preset or plugin is not available; passes through\nname unmodified if it (or the first element of the pair) is not a string.", "input": "JavaScript", "output": "function loadBuiltin(builtinTable, name) {\n  if (isArray(name) && typeof name[0] === \"string\") {\n    if (builtinTable.hasOwnProperty(name[0])) {\n      return [builtinTable[name[0]]].concat(name.slice(1));\n    }\n    return;\n  } else if (typeof name === \"string\") {\n    return builtinTable[name];\n  }\n  // Could be an actual preset/plugin module\n  return name;\n}"}, {"instruction": "Called by native code when returning error result from an action.", "input": "JavaScript", "output": "function (callbackId, args) {\n        // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.\n        // Derive success from status.\n        cordova.callbackFromNative(callbackId, false, args.status, [args.message], args.keepCallback);\n    }"}, {"instruction": "Get stylesheets from `documentFragment`\n\n@param {Object} options configuration options of `loadCssom`\n@returns {Array<Object>}", "input": "JavaScript", "output": "function getStylesheetsFromDocumentFragment(options) {\n\tconst { rootNode, convertDataToStylesheet } = options;\n\treturn (\n\t\tArray.from(rootNode.children)\n\t\t\t.filter(filerStyleAndLinkAttributesInDocumentFragment)\n\t\t\t// Reducer to convert `<style></style>` and `<link>` references to `CSSStyleSheet` object\n\t\t\t.reduce((out, node) => {\n\t\t\t\tconst nodeName = node.nodeName.toUpperCase();\n\t\t\t\tconst data = nodeName === 'STYLE' ? node.textContent : node;\n\t\t\t\tconst isLink = nodeName === 'LINK';\n\t\t\t\tconst stylesheet = convertDataToStylesheet({\n\t\t\t\t\tdata,\n\t\t\t\t\tisLink,\n\t\t\t\t\troot: rootNode\n\t\t\t\t});\n\t\t\t\tout.push(stylesheet.sheet);\n\t\t\t\treturn out;\n\t\t\t}, [])\n\t);\n}"}, {"instruction": "/* Plugin constructor\n==================================================", "input": "JavaScript", "output": "function Plugin(element, options) {\n    this.element = element;\n\n    this.options = $.extend(true, {}, defaults, options);\n    this.options.share = options.share; //simple solution to allow order of buttons\n\n    this._defaults = defaults;\n    this._name = pluginName;\n\n    this.init();\n  }"}, {"instruction": "Handle when the DOM is ready", "input": "JavaScript", "output": "function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If there are functions bound, to execute\n\t\t\tif ( jQuery.readyList ) {\n\t\t\t\t// Execute all of them\n\t\t\t\tjQuery.each( jQuery.readyList, function(){\n\t\t\t\t\tthis.call( document, jQuery );\n\t\t\t\t});\n\n\t\t\t\t// Reset the list of functions\n\t\t\t\tjQuery.readyList = null;\n\t\t\t}\n\n\t\t\t// Trigger any bound ready events\n\t\t\tjQuery(document).triggerHandler(\"ready\");\n\t\t}\n\t}"}, {"instruction": "Sets up the binding index before executing any `pureFunctionX` instructions.\n\nThe index must be restored after the pure function is executed\n\n{@link reserveSlots}", "input": "JavaScript", "output": "function moveBindingIndexToReservedSlot(offset) {\n    var currentSlot = viewData[BINDING_INDEX];\n    viewData[BINDING_INDEX] = tView.bindingStartIndex - offset;\n    return currentSlot;\n}"}, {"instruction": "emulate functionref.apply for IE mac and IE win < 5.5", "input": "JavaScript", "output": "function xbDebugApplyFunction(funcname, funcref, thisref, argumentsref)\n{\n    var rv;\n\n    if (!funcref)\n    {\n        alert('xbDebugApplyFunction: funcref is null');\n    }\n\n    if (typeof(funcref.apply) != 'undefined')\n        return funcref.apply(thisref, argumentsref);\n\n    var applyexpr = 'thisref.xbDebug_orig_' + funcname + '(';\n    var i;\n\n    for (i = 0; i < argumentsref.length; i++)\n    {\n        applyexpr += 'argumentsref[' + i + '],';\n    }\n\n    if (argumentsref.length > 0)\n    {\n        applyexpr = applyexpr.substring(0, applyexpr.length - 1);\n    }\n\n    applyexpr += ')';\n\n    return eval(applyexpr);\n}"}, {"instruction": "Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n@param {Date} oDate JavaScript date object. Time related information is cut.\n@returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.", "input": "JavaScript", "output": "function createUTCDate(oDate) {\n\t\t\tvar oUTCDate = new Date(Date.UTC(0, 0, 1));\n\n\t\t\toUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n\n\t\t\treturn oUTCDate;\n\t\t}"}, {"instruction": "generate webpack entry file for markdown docs", "input": "JavaScript", "output": "function buildDocsEntry() {\n  const output = join('docs/src/docs-entry.js');\n  const getName = fullPath => fullPath.replace(/\\/(en|zh)/, '.$1').split('/').pop().replace('.md', '');\n  const docs = glob\n    .sync([\n      join('docs/**/*.md'),\n      join('packages/**/*.md'),\n      '!**/node_modules/**'\n    ])\n    .map(fullPath => {\n      const name = getName(fullPath);\n      return `'${name}': () => import('${path.relative(join('docs/src'), fullPath).replace(/\\\\/g, '/')}')`;\n    });\n\n  const content = `${tips}\nexport default {\n  ${docs.join(',\\n  ')}\n};\n`;\n  fs.writeFileSync(output, content);\n}"}, {"instruction": "Build demo", "input": "JavaScript", "output": "function buildDemo(file) {\r\n    var doc = JSON.parse(fs.read(file));\r\n\r\n    if (doc.name) {\r\n      var destination = file.replace('docs/json', \"demo/_src/pages/components\").replace(\".json\", \".md\"),\r\n        template = {\r\n          template: \"component.html\",\r\n          title: doc.name,\r\n          demo: doc.demo,\r\n          asset_root: \"../\",\r\n          year: new Date().getFullYear()\r\n        },\r\n        header = \"\";\r\n\r\n      header += '\\n\\n #' + doc.name + ' Demo';\r\n      header += '\\n<p class=\"back_link\"><a href=\"https://formstone.it/components/' + doc.name.toLowerCase().replace(/ /g, \"\") + '\">View Documentation</a></p>';\r\n\r\n      fs.write(destination, JSON.stringify(template) + header);\r\n    }\r\n  }"}, {"instruction": "Creates an object with the agregations bindings of a UI5 control.\n@param {Object} control\n@returns {Object}\n@private", "input": "JavaScript", "output": "function (control) {\n\t\t\t\tvar aggregations = control.getMetadata().getAllAggregations();\n\t\t\t\tvar aggregationsBindingData = Object.create(null);\n\n\t\t\t\tfor (var key in aggregations) {\n\t\t\t\t\tif (aggregations.hasOwnProperty(key) && control.getBinding(key)) {\n\t\t\t\t\t\taggregationsBindingData[key] = Object.create(null);\n\t\t\t\t\t\taggregationsBindingData[key].model = this._getModelFromContext(control, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn aggregationsBindingData;\n\t\t\t}"}, {"instruction": "\"Natural\" union type.\n\nThis representation doesn't require a wrapping object and is therefore\nsimpler and generally closer to what users expect. However it cannot be used\nto represent all Avro unions since some lead to ambiguities (e.g. if two\nnumber types are in the union).\n\nCurrently, this union supports at most one type in each of the categories\nbelow:\n\n+ `null`\n+ `boolean`\n+ `int`, `long`, `float`, `double`\n+ `string`, `enum`\n+ `bytes`, `fixed`\n+ `array`\n+ `map`, `record`", "input": "JavaScript", "output": "function UnwrappedUnionType(schema, opts) {\n  UnionType.call(this, schema, opts);\n\n  this._dynamicBranches = null;\n  this._bucketIndices = {};\n  this.types.forEach(function (type, index) {\n    if (Type.isType(type, 'abstract', 'logical')) {\n      if (!this._dynamicBranches) {\n        this._dynamicBranches = [];\n      }\n      this._dynamicBranches.push({index: index, type: type});\n    } else {\n      var bucket = getTypeBucket(type);\n      if (this._bucketIndices[bucket] !== undefined) {\n        throw new Error(f('ambiguous unwrapped union: %j', this));\n      }\n      this._bucketIndices[bucket] = index;\n    }\n  }, this);\n\n  Object.freeze(this);\n}"}, {"instruction": "return x*y for bigInts x and y. This is faster when y<x.", "input": "JavaScript", "output": "function mult(x, y) {\n  var ans=expand(x, x.length+y.length);\n  mult_(ans, y);\n  return trim(ans, 1);\n}"}, {"instruction": "This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest", "input": "JavaScript", "output": "function flushOnChangesQueue() {\n      try {\n        if (!(--onChangesTtl)) {\n          // We have hit the TTL limit so reset everything\n          onChangesQueue = undefined;\n          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\\n', TTL);\n        }\n        // We must run this hook in an apply since the $$postDigest runs outside apply\n        $rootScope.$apply(function() {\n          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {\n            onChangesQueue[i]();\n          }\n          // Reset the queue to trigger a new schedule next time there is a change\n          onChangesQueue = undefined;\n        });\n      } finally {\n        onChangesTtl++;\n      }\n    }"}, {"instruction": "Parses a YAML string and returns the value.\n\n@param {string} text - The YAML string to be parsed\n@param {function} [reviver] - Not currently supported. Provided for consistency with {@link JSON.parse}\n@returns {*}", "input": "JavaScript", "output": "function yamlParse (text, reviver) {\n    try {\n      return yaml.safeLoad(text);\n    }\n    catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      }\n      else {\n        // https://github.com/nodeca/js-yaml/issues/153\n        throw ono(e, e.message);\n      }\n    }\n  }"}, {"instruction": "Returns the default number of simultaneous requests.\n@export @public @method\n@name getDefaultSimultaneousRequests\n\n@returns {number} The default number of simultaneous requests.", "input": "JavaScript", "output": "function getDefaultSimultaneousRequests() {\n  const infoString = getBrowserInfo();\n  const info = infoString.split(' ');\n  const browserName = info[0];\n  const browserVersion = info[1];\n  const browserData = maxSimultaneousRequests[browserName];\n\n  if (!browserData) {\n    return maxSimultaneousRequests.default;\n  }\n\n  if (!browserData[browserVersion]) {\n    return browserData.default;\n  }\n\n  return browserData[browserVersion];\n}"}, {"instruction": "Pick the object\n@param  {number} x Mouse position x\n@param  {number} y Mouse position y\n@return {clay.Node}", "input": "JavaScript", "output": "function(x, y) {\n        var renderer = this.renderer;\n\n        var ratio = this.downSampleRatio;\n        x = Math.ceil(ratio * x);\n        y = Math.ceil(ratio * (this.height - y));\n\n        this._frameBuffer.bind(renderer);\n        var pixel = new Uint8Array(4);\n        var _gl = renderer.gl;\n        // TODO out of bounds ?\n        // preserveDrawingBuffer ?\n        _gl.readPixels(x, y, 1, 1, _gl.RGBA, _gl.UNSIGNED_BYTE, pixel);\n        this._frameBuffer.unbind(renderer);\n        // Skip interpolated pixel because of anti alias\n        if (pixel[3] === 255) {\n            var id = unpackID(pixel[0], pixel[1], pixel[2]);\n            if (id) {\n                var el = this._lookupTable[id - this.lookupOffset];\n                return el;\n            }\n        }\n    }"}, {"instruction": "Create a function so we can use it inside of webpack's watch function.", "input": "JavaScript", "output": "function eslintFn() {\n  return gulp\n    .src([config.files.docs.srcJS])\n    .pipe(eslint())\n    .pipe(eslint.formatEach(\"stylish\", process.stderr));\n}"}, {"instruction": "add multiple items to the list via BindingContext", "input": "JavaScript", "output": "function(aContexts, oBindingInfo, bSuppressInvalidate) {\n\t\t\tfor (var i = 0; i < aContexts.length; i++) {\n\t\t\t\tthis.addListItem(aContexts[i], oBindingInfo, bSuppressInvalidate);\n\t\t\t}\n\t\t}"}, {"instruction": "Proxies the first require call in order to draw back all changes to the Module.wrapper.\nThus our changes don't influence other modules\n\n@param {!String} path", "input": "JavaScript", "output": "function requireProxy(path) {\n    reset();\n    currentModule.require = nodeRequire;\n    return nodeRequire.call(currentModule, path);  // node's require only works when \"this\" points to the module\n}"}, {"instruction": "---------------------------------------------------------------------", "input": "JavaScript", "output": "function replaceText(id, text) {\n    var element = document.getElementById(id)\n    if (null == element) {\n//      alert(\"error: can't find element with id '\" + id + \"'\")\n        return\n    }\n\n    element.innerHTML = text\n}"}, {"instruction": "Recolor an image using 2d canvas", "input": "JavaScript", "output": "function recolorBillboard(img, color) {\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  // Copy the image contents to the canvas\n  var context = canvas.getContext(\"2d\");\n  context.drawImage(img, 0, 0);\n  var image = context.getImageData(0, 0, canvas.width, canvas.height);\n  var normClr = [color.red, color.green, color.blue, color.alpha];\n\n  var length = image.data.length; //pixel count * 4\n  for (var i = 0; i < length; i += 4) {\n    for (var j = 0; j < 4; j++) {\n      image.data[j + i] *= normClr[j];\n    }\n  }\n\n  context.putImageData(image, 0, 0);\n  return canvas.toDataURL();\n  //    return context.getImageData(0, 0, canvas.width, canvas.height);\n}"}, {"instruction": "/*\nLints the directory passed in as a command line argument", "input": "JavaScript", "output": "function lintDirectory () {\n  var shouldFix = args.hasOwnProperty('fix');\n\n  cli = new eslint.CLIEngine({ configFile: configFilePath, fix: shouldFix });\n\n  report = cli.executeOnFiles(dir);\n\n  if (shouldFix) {\n    eslint.CLIEngine.outputFixes(report);\n  }\n\n  console.log(cli.getFormatter()(report.results)); // eslint-disable-line\n\n  // End with exit code 1 if there are errors\n  // Use process.exit instead of throwing to mimic the behaviour of eslints bin\n  // We don't want a stacktrace, it would just be confusing\n  if (report.errorCount) {\n      process.exit(1); // eslint-disable-line\n  }\n}"}, {"instruction": "/*\tEvents\n==================================================", "input": "JavaScript", "output": "function(error) {\n\t\tthis._state.loaded = true;\n\t\tthis.fire(\"loaded\", this.data);\n\t\tif (this.message) {\n\t\t\tthis.message.hide();\n\t\t}\n\t\tif (!(error || this.options.background)) {\n\t\t\tthis.showMeta();\n\t\t}\n\t\tthis.updateDisplay();\n\t}"}, {"instruction": "Like _getNextNode, but for DOM implementations with no\nfirstElementChild/nextElementSibling functionality...", "input": "JavaScript", "output": "function(node, ignoreSelfAndKids) {\n    function nextSiblingEl(n) {\n      do {\n        n = n.nextSibling;\n      } while (n && n.nodeType !== n.ELEMENT_NODE);\n      return n;\n    }\n    // First check for kids if those aren't being ignored\n    if (!ignoreSelfAndKids && node.children[0]) {\n      return node.children[0];\n    }\n    // Then for siblings...\n    var next = nextSiblingEl(node);\n    if (next) {\n      return next;\n    }\n    // And finally, move up the parent chain *and* find a sibling\n    // (because this is depth-first traversal, we will have already\n    // seen the parent nodes themselves).\n    do {\n      node = node.parentNode;\n      if (node)\n        next = nextSiblingEl(node);\n    } while (node && !next);\n    return node && next;\n  }"}, {"instruction": "jshint ;_; /* AFFIX CLASS DEFINITION\n======================", "input": "JavaScript", "output": "function (element, options) {\n    this.options = $.extend({}, $.fn.affix.defaults, options)\n    this.$window = $(window).on('scroll.affix.data-api', $.proxy(this.checkPosition, this))\n    this.$element = $(element)\n    this.checkPosition()\n  }"}, {"instruction": "Drawing in Canvas", "input": "JavaScript", "output": "function _onMakeImage() {\n\t\t\tthis._elImage.src = this._elCanvas.toDataURL(\"image/png\");\n\t\t\tthis._elImage.style.display = \"block\";\n\t\t\tthis._elCanvas.style.display = \"none\";\t\t\t\n\t\t}"}, {"instruction": "\u5faa\u73af\u904d\u5386\u6570\u7ec4\u96c6\u5408\n\n@inner\n@param {Array} source \u6570\u7ec4\u6e90\n@param {function(Array,Number):boolean} iterator \u904d\u5386\u51fd\u6570", "input": "JavaScript", "output": "function each(source, iterator) {\n        if (source instanceof Array) {\n            for (var i = 0, len = source.length; i < len; i++) {\n                if (iterator(source[i], i) === false) {\n                    break;\n                }\n            }\n        }\n    }"}, {"instruction": "Iterate over an input collection, invoking an `iterator` function for each element in the\ncollection and passing to it three arguments: `(value, index, collection)`. The `iterator`\nfunction can end iteration early by returning `false`.\n\n@name each\n@api public\n@param {Function(value, key, collection)} iterator The function to invoke per iteration.\n@param {Array|Object|string} collection The collection to iterate over.\n@return {undefined} Because `each` is run only for side effects, always returns `undefined`.\n@example\nvar log = console.log.bind(console);\n\neach(log, ['a', 'b', 'c']);\n//-> 'a', 0, ['a', 'b', 'c']\n//-> 'b', 1, ['a', 'b', 'c']\n//-> 'c', 2, ['a', 'b', 'c']\n//=> undefined\n\neach(log, 'tim');\n//-> 't', 2, 'tim'\n//-> 'i', 1, 'tim'\n//-> 'm', 0, 'tim'\n//=> undefined\n\n// Note: Iteration order not guaranteed across environments\neach(log, { name: 'tim', occupation: 'enchanter' });\n//-> 'tim', 'name', { name: 'tim', occupation: 'enchanter' }\n//-> 'enchanter', 'occupation', { name: 'tim', occupation: 'enchanter' }\n//=> undefined", "input": "JavaScript", "output": "function each(iterator, collection) {\n  return (isArrayLike(collection) ? arrayEach : baseEach).call(this, iterator, collection);\n}"}, {"instruction": "add icons to registry and insert the font style", "input": "JavaScript", "output": "function loadFont(oFontMetadata) {\n\t\t\t\tfor (var sKey in oFontMetadata) {\n\t\t\t\t\toFontMetadata[sKey] = parseInt(oFontMetadata[sKey], 16);\n\t\t\t\t}\n\t\t\t\tmRegistry[collectionName] = oFontMetadata;\n\t\t\t\tIconPool.insertFontFaceStyle(oConfig.fontFamily, oConfig.fontURI, collectionName);\n\t\t\t\tmFontRegistry[collectionName].metadataLoaded = true;\n\t\t\t}"}, {"instruction": "Service resolution helper.\n\nIt is used both by client and server channels, to respectively decode errors\nand responses, or requests.", "input": "JavaScript", "output": "function Adapter(clientSvc, serverSvc, hash, isRemote) {\n  this._clientSvc = clientSvc;\n  this._serverSvc = serverSvc;\n  this._hash = hash; // Convenience to access it when creating handshakes.\n  this._isRemote = !!isRemote;\n  this._readers = createReaders(clientSvc, serverSvc);\n}"}, {"instruction": "Use timeInterval to set the period between notches, in seconds,\nadding notches as the number of pixels per second increases.\n\nNote that if you override the default function, you'll almost\ncertainly want to override formatTimeCallback, primaryLabelInterval\nand/or secondaryLabelInterval so they all work together.\n\n@param: pxPerSec", "input": "JavaScript", "output": "function timeInterval(pxPerSec) {\n    var retval = 1;\n    if (pxPerSec >= 25 * 100) {\n        retval = 0.01;\n    } else if (pxPerSec >= 25 * 40) {\n        retval = 0.025;\n    } else if (pxPerSec >= 25 * 10) {\n        retval = 0.1;\n    } else if (pxPerSec >= 25 * 4) {\n        retval = 0.25;\n    } else if (pxPerSec >= 25) {\n        retval = 1;\n    } else if (pxPerSec * 5 >= 25) {\n        retval = 5;\n    } else if (pxPerSec * 15 >= 25) {\n        retval = 15;\n    } else {\n        retval = Math.ceil(0.5 / pxPerSec) * 60;\n    }\n    return retval;\n}"}, {"instruction": "Helper - get arguments of a path drawing command", "input": "JavaScript", "output": "function (str) {\n    var output = [];\n    var idx = 0;\n    var c, num;\n\n    var nextNumber = function () {\n      var chars = [];\n\n      while (/[^-\\d\\.]/.test(str.charAt(idx))) {\n        // skip the non-digit characters\n        idx++;\n      }\n\n      if ('-' === str.charAt(idx)) {\n        chars.push('-');\n        idx++;\n      }\n\n      while ((c = str.charAt(idx)) && /[\\d\\.Ee]/.test(c)) {\n        chars.push(c);\n        idx++;\n      }\n\n      return parseFloat(chars.join(''));\n    };\n\n    while (!isNaN(num = nextNumber())) output.push(num);\n\n    return output;\n  }"}, {"instruction": "converts a dash or hypen separated string to camelCase", "input": "JavaScript", "output": "function unDashHyphen (str) {\n  return str\n    .trim()\n    .toLowerCase()\n    .replace(/[-_\\s]+(.)?/g, function (match, c) {\n      return c ? c.toUpperCase() : \"\";\n    });\n}"}, {"instruction": "constructor", "input": "JavaScript", "output": "function init(cols, rows, tilewidth, tileheight) {\n         this._super(me.TMXRenderer, \"init\", [cols, rows, tilewidth, tileheight]);\n\n         this.hTilewidth = tilewidth / 2;\n         this.hTileheight = tileheight / 2;\n         this.originX = this.rows * this.hTilewidth;\n       }"}, {"instruction": "Get all the nodes from a source.\n@param sourceFile The source file object.\n@returns {Observable<ts.Node>} An observable of all the nodes in the source.", "input": "JavaScript", "output": "function getSourceNodes(sourceFile) {\n    const nodes = [sourceFile];\n    const result = [];\n    while (nodes.length > 0) {\n        const node = nodes.shift();\n        if (node) {\n            result.push(node);\n            if (node.getChildCount(sourceFile) >= 0) {\n                nodes.unshift(...node.getChildren());\n            }\n        }\n    }\n    return result;\n}"}, {"instruction": "Convert the keys in an `obj` using a `convert` function.\n\n@param {Object} obj\n@param {Function} convert", "input": "JavaScript", "output": "function aliasByFunction (obj, convert) {\n  // have to create another object so that ie8 won't infinite loop on keys\n  var output = {};\n  for (var key in obj) output[convert(key)] = obj[key];\n  return output;\n}"}, {"instruction": "Default onTouchEnd handler.\n@param {jQuery.Event} oEvent  Event object", "input": "JavaScript", "output": "function (oEvent) {\n\t\t\tvar iPageY = oEvent.changedTouches && oEvent.changedTouches.length ? oEvent.changedTouches[0].pageY : oEvent.pageY;\n\n\t\t\tif (this._bIsDrag === false) {\n\t\t\t\tthis.fireTap(oEvent);\n\t\t\t\tthis._dragSession = null;\n\t\t\t}\n\n\t\t\tthis._bIsDrag = true;\n\n\t\t\tif (!this.getIsExpanded()) {\n\t\t\t\tthis._dragSession = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._endDrag(iPageY, oEvent.timeStamp);\n\n\t\t\tthis._mousedown = false;\n\t\t}"}, {"instruction": "/*\tEvents\n==================================================", "input": "JavaScript", "output": "function(e) {\n\t\tthis.youtube_loaded = true;\n\t\tthis._el.content_item = document.getElementById(this._el.content_item.id);\n\t\tthis.onMediaLoaded();\n\n\t}"}, {"instruction": "Register an overlay\nIf the MetaModel was not loaded yet when evaluating addODataProperty, the\nplugin returns editable = false. Therefore we must make an extra check after\nthe MetaModel is loaded.\n@param  {sap.ui.dt.Overlay} oOverlay overlay object\n@override", "input": "JavaScript", "output": "function(oOverlay) {\n\t\t\tvar oModel = oOverlay.getElement().getModel();\n\t\t\tif (oModel){\n\t\t\t\tvar oMetaModel = oModel.getMetaModel();\n\t\t\t\tif (oMetaModel && oMetaModel.loaded){\n\t\t\t\t\toMetaModel.loaded().then(function(){\n\t\t\t\t\t\tthis.evaluateEditable([oOverlay], {onRegistration: true});\n\t\t\t\t\t}.bind(this));\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.prototype.registerElementOverlay.apply(this, arguments);\n\t\t}"}, {"instruction": "Returns the value that is the nearest power of 2 less than or equal to the given value.\n@param {Number} value the reference value. The power of 2 returned is less than or equal to this value.\n@returns {Number} the value that is the nearest power of 2 less than or equal to the reference value", "input": "JavaScript", "output": "function (value) {\n                var power = Math.floor(Math.log(value) / Math.log(2));\n                return Math.pow(2, power);\n            }"}, {"instruction": "Find the symbol name of an AssignmentNode. Recurses into the chain of\nobjects to the root object.\n@param {AssignmentNode} node\n@return {string | null} Returns the name when found, else returns null.", "input": "JavaScript", "output": "function findSymbolName (node) {\n  const math = getMath()\n  let n = node\n\n  while (n) {\n    if (math.isSymbolNode(n)) {\n      return n.name\n    }\n    n = n.object\n  }\n\n  return null\n}"}, {"instruction": "Reads files from .desktop and computes a version hash.\n\n@param {string} dir - path\n@returns {Promise<Object>}", "input": "JavaScript", "output": "function readFilesAndComputeDesktopHash(dir) {\n    const desktopHash = crypto.createHash('sha1');\n\n    return new Promise((resolve, reject) => {\n        getFileList(dir)\n            .catch(reject)\n            .then(readAndHashFiles)\n            .catch(reject)\n            .then((result) => {\n                const hash = result.files.reduce(\n                    (tmpHash, file) => {\n                        tmpHash += result.fileHashes[file];\n                        return tmpHash;\n                    }, ''\n                );\n                desktopHash.update(hash);\n                result.hash = desktopHash.digest('hex');\n                resolve(result);\n            });\n    });\n}"}, {"instruction": "url:        null, type:       'GET',", "input": "JavaScript", "output": "function( mockHandler, requestSettings ) {\n\t\t\tif ( mockHandler.logging === false ||\n\t\t\t\t ( typeof mockHandler.logging === 'undefined' && $.mockjaxSettings.logging === false ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( window.console && console.log ) {\n\t\t\t\tvar message = 'MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url;\n\t\t\t\tvar request = $.extend({}, requestSettings);\n\n\t\t\t\tif (typeof console.log === 'function') {\n\t\t\t\t\tconsole.log(message, request);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconsole.log( message + ' ' + JSON.stringify(request) );\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.log(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "Extracts metadata from metadata map by scope key\n@param {object} mMetadata metadata map received from loader\n@param {string} sScopeKey scope name to be extracted\n@private", "input": "JavaScript", "output": "function getScopeBasedDesignTime(mMetadata, sScopeKey) {\n\t\tvar mResult = mMetadata;\n\n\t\tif (\"default\" in mMetadata) {\n\t\t\tmResult = merge(\n\t\t\t\t{},\n\t\t\t\tmMetadata.default,\n\t\t\t\tsScopeKey !== \"default\" && mMetadata[sScopeKey] || null\n\t\t\t);\n\t\t}\n\n\t\treturn mResult;\n\t}"}, {"instruction": "helper function to add some resiliency to volatile GH api endpoints", "input": "JavaScript", "output": "async function runRetryable (fn, maxRetries) {\n  let lastError\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn()\n    } catch (error) {\n      await new Promise((resolve, reject) => setTimeout(resolve, CHECK_INTERVAL))\n      lastError = error\n    }\n  }\n  // Silently eat 404s.\n  if (lastError.status !== 404) throw lastError\n}"}, {"instruction": "**************************************************\nThis class is a scanner for the visitor pattern. *\n************************************************** \nConstructor, parameters are:\nvisitor: the visitor implementation, it must be a class with a visit(element) method.\nscanElementsOnly: a flag telling whether to scan html elements only or all html nodes.", "input": "JavaScript", "output": "function DocumentScanner(visitor, scanElementsOnly) {\n\tthis.visitor = visitor;\n\tthis.scanElementsOnly = scanElementsOnly;\n\n\t/**\n\t * Scans the element\n\t */\n\tthis.scan = function(element) {\n\t\tif (this.visitor.visit(element)) {\n\t\t\t// visit child elements\n\t\t\tvar children = element.childNodes;\n\t\t\tfor(var i = 0; i < children.length; i++) {\n\t\t\t\tif(!this.scanElementsOnly || children[i].nodeType == 1)\n\t\t\t\t\tthis.scan(children[i]);\n\t\t\t}\n\t\t}\t\t\n\t}\t\n}"}, {"instruction": "\u68c0\u6d4b\u662f\u5426\u5b58\u5728\u73af\n@param {Number} id - \u8981\u68c0\u6d4b\u7684id\n@param {Array} traversePath - \u904d\u5386\u65f6\u5b58\u7684\u8def\u5f84\n@return {String|undefined}  - \u5b58\u5728\u73af\u65f6\u8fd4\u56de\u73af\u7684\u540d\u79f0, \u5426\u5219\u8fd4\u56de undefined", "input": "JavaScript", "output": "function (id, traversePath) {\n      var datatype = this.ds.find(function (dt) {\n        return dt.id == id;\n      });\n      if (datatype.format != 0 && datatype.format != 2 || datatype.id === 10000) {\n        // \u975e\u54c8\u5e0c\u3001\u975e\u6570\u7ec4\u3001\u53ef\u53d8\u7c7b\u578b\u65f6\u4e0d\u4f1a\u6709\u5faa\u73af\u4f9d\u8d56\u4ea7\u751f\n        return;\n      }\n      var foundLoop = traversePath.find(function (item) {\n        // todo: \u8fd9\u91cc\u4e0d\u4f7f\u7528\u4e25\u683c\u76f8\u7b49\u5224\u65ad, \u56e0\u4e3a\u540e\u7aef\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u6709\u65f6\u662f\u5b57\u7b26\u6709\u65f6\u662f\u6570\u5b57\n        return item.id == id;\n      });\n      if (foundLoop) {\n        // \u5982\u679c\u5b58\u5728\u73af, \u5c31\u8fd4\u56de\u6570\u636e\u7c7b\u578b\u7684\u540d\u79f0\n        // console.log(traversePath)\n        // console.log(foundLoop.name)\n        return '<' + foundLoop.name + '>';\n      } else {\n        traversePath.push({\n          id: id,\n          name: datatype.name\n        });\n      }\n    }"}, {"instruction": "Helper function to get the text of a given document and send it to tern.\nIf DocumentManager successfully gets the file's text then we'll send it to the tern node domain.\nThe Promise for getDocumentText() is returned so that custom fail functions can be used.\n\n@param {string} filePath - the path of the file to get the text of\n@return {jQuery.Promise} - the Promise returned from DocumentMangaer.getDocumentText()", "input": "JavaScript", "output": "function getDocText(filePath) {\n                if (!FileSystem.isAbsolutePath(filePath) || // don't handle URLs\n                        filePath.slice(0, 2) === \"//\") { // don't handle protocol-relative URLs like //example.com/main.js (see #10566)\n                    return (new $.Deferred()).reject().promise();\n                }\n\n                var file = FileSystem.getFileForPath(filePath),\n                    promise = DocumentManager.getDocumentText(file);\n\n                promise.done(function (docText) {\n                    resolvedFiles[name] = filePath;\n                    numResolvedFiles++;\n                    replyWith(name, filterText(docText));\n                });\n                return promise;\n            }"}, {"instruction": "Updating the marks for editor content", "input": "JavaScript", "output": "function clearMarks(editor, arr, classes) {\n    for (var i = 0; i < arr.length; ++i) {\n      var mark = arr[i];\n      if (mark instanceof CodeMirror.TextMarker) {\n        mark.clear();\n      } else {\n        editor.removeLineClass(mark, \"background\", classes.chunk);\n        editor.removeLineClass(mark, \"background\", classes.start);\n        editor.removeLineClass(mark, \"background\", classes.end);\n      }\n    }\n    arr.length = 0;\n  }"}, {"instruction": "wrap session methods", "input": "JavaScript", "output": "function wrapmethods(sess) {\n      var _reload = sess.reload\n      var _save = sess.save;\n\n      function reload(callback) {\n        debug('reloading %s', this.id)\n        _reload.call(this, function () {\n          wrapmethods(req.session)\n          callback.apply(this, arguments)\n        })\n      }\n\n      function save() {\n        debug('saving %s', this.id);\n        savedHash = hash(this);\n        _save.apply(this, arguments);\n      }\n\n      Object.defineProperty(sess, 'reload', {\n        configurable: true,\n        enumerable: false,\n        value: reload,\n        writable: true\n      })\n\n      Object.defineProperty(sess, 'save', {\n        configurable: true,\n        enumerable: false,\n        value: save,\n        writable: true\n      });\n    }"}, {"instruction": "Returns the minimum value for a component with an implicit value to equal a\nreference value. A `null` optimal value means that there is no need for an\nupdate since the implicit value and the reference are equal.\n\n@param {Component} component Component of the computed value.\n@param {any}       implicit  The implicit value of the component.\n@param {any}       reference The reference value for the component.\n@return                      the minimum value making the component to equal\nthe reference value.", "input": "JavaScript", "output": "function getOptimalUpdate(component, implicit, reference) {\n  if (equal(implicit, reference)) {\n    return null;\n  }\n  if (isSingleProperty(component.schema)) {\n    return reference;\n  }\n  var optimal = {};\n  Object.keys(reference).forEach(function(key) {\n    var needsUpdate = !equal(reference[key], implicit[key]);\n    if (needsUpdate) {\n      optimal[key] = reference[key];\n    }\n  });\n  return optimal;\n}"}, {"instruction": "@private\n\nSets the project root to the given directory, resetting the ProjectModel and file tree in the process.\n\n@param {Directory} rootEntry directory object for the project root\n@return {$.Promise} resolved when the project is done setting up", "input": "JavaScript", "output": "function _setProjectRoot(rootEntry) {\n        var d = new $.Deferred();\n        model.setProjectRoot(rootEntry).then(function () {\n            d.resolve();\n            model.reopenNodes(PreferencesManager.getViewState(\"project.treeState\", _getProjectViewStateContext()));\n        });\n        return d.promise();\n    }"}, {"instruction": "/* @type {Object.<string, ConfigView>} List of open views", "input": "JavaScript", "output": "function ConfigView(doc, $container) {\n        this.$container = $container;\n        this.doc = doc;\n        this.json = JSON.parse(this.doc.getText());\n        this.$view = $(Mustache.render(ConfigViewContent, this.json));\n        this.$view.css({\n            \"background-image\": \"url(file://\" + FileUtils.getNativeModuleDirectoryPath(_module) + \"/htmlContent/logo-sm.png)\",\n            \"background-position\": \"bottom right\",\n            \"background-repeat\": \"no-repeat\"\n        });\n        $container.append(this.$view);\n    }"}, {"instruction": "Utils", "input": "JavaScript", "output": "function removeFromArray(array, value) {\n    if (array.includes(value)) {\n      var value_index = array.indexOf(value);\n      array.splice(value_index, 1);\n    }\n\n    return array;\n  }"}, {"instruction": "returns the key used for calculating signature", "input": "JavaScript", "output": "function getSigningKey(date, region, secretKey) {\n  if (!isObject(date)) {\n    throw new TypeError('date should be of type \"object\"')\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"')\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"')\n  }\n  var dateLine = makeDateShort(date),\n    hmac1 = Crypto.createHmac('sha256', 'AWS4' + secretKey).update(dateLine).digest(),\n    hmac2 = Crypto.createHmac('sha256', hmac1).update(region).digest(),\n    hmac3 = Crypto.createHmac('sha256', hmac2).update('s3').digest()\n  return Crypto.createHmac('sha256', hmac3).update('aws4_request').digest()\n}"}, {"instruction": "The keys in this object are timezones that we know may be ambiguous after\na preliminary scan through the olson_tz object.\n\nThe array of timezones to compare must be in the order that daylight savings\nstarts for the regions.", "input": "JavaScript", "output": "function () {\r\n              var ambiguity_list = AMBIGUITIES[timezone_name],\r\n                  length = ambiguity_list.length,\r\n                  i = 0,\r\n                  tz = ambiguity_list[0];\r\n\r\n              for (; i < length; i += 1) {\r\n                  tz = ambiguity_list[i];\r\n\r\n                  if (jstz.date_is_dst(jstz.dst_start_for(tz))) {\r\n                      timezone_name = tz;\r\n                      return;\r\n                  }\r\n              }\r\n          }"}, {"instruction": "\u64ad\u653e\u504f\u79fb\u91cf the offset of current playing audio \n@language=en\n@private Initialize.", "input": "JavaScript", "output": "function(){\n        this._context = context;\n        this._gainNode = context.createGain ? context.createGain() : context.createGainNode();\n        this._gainNode.connect(context.destination);\n\n        this._onAudioEvent = this._onAudioEvent.bind(this);\n        this._onDecodeComplete = this._onDecodeComplete.bind(this);\n        this._onDecodeError = this._onDecodeError.bind(this);\n    }"}, {"instruction": "Checks if an expression is a variable that can only be observed within the given function.\n@param {ASTNode} expression The expression to check\n@param {ASTNode} surroundingFunction The function node\n@returns {boolean} `true` if the expression is a variable which is local to the given function, and is never\nreferenced in a closure.", "input": "JavaScript", "output": "function isLocalVariableWithoutEscape(expression, surroundingFunction) {\n            if (expression.type !== \"Identifier\") {\n                return false;\n            }\n\n            const variable = resolveVariable(expression);\n\n            if (!variable) {\n                return false;\n            }\n\n            return variable.references.every(reference => identifierToSurroundingFunctionMap.get(reference.identifier) === surroundingFunction) &&\n                variable.defs.every(def => identifierToSurroundingFunctionMap.get(def.name) === surroundingFunction);\n        }"}, {"instruction": "Each layout consists of vertical panels, that contains its position and horizontal views. Flex-like positions of panels and views defined by 'grow' and 'size' parameters. View or panel with 'size' has exactly <size> height or width respectively. View or panel with 'grow' fills <grow> part of the residuary space (it works like flex-grow). By default, position = { grow: 1 }", "input": "JavaScript", "output": "function (position) {\n  if (!_.has(position, \"grow\") && !_.has(position, \"size\")) {\n    position = { grow: 1 };\n  }\n\n  return position;\n}"}, {"instruction": "Read all \"data-*\" attributes from a node", "input": "JavaScript", "output": "function attributeData(node) {\n    var store = {}\n    $.each(node.attributes || emptyArray, function(i, attr){\n      if (attr.name.indexOf('data-') == 0)\n        store[camelize(attr.name.replace('data-', ''))] =\n          $.zepto.deserializeValue(attr.value)\n    })\n    return store\n  }"}, {"instruction": "Resize method bound to the polar\n@param {module:echarts/coord/polar/PolarModel} polarModel\n@param {module:echarts/ExtensionAPI} api", "input": "JavaScript", "output": "function resizePolar(polar, polarModel, api) {\n    var center = polarModel.get('center');\n    var width = api.getWidth();\n    var height = api.getHeight();\n\n    polar.cx = parsePercent(center[0], width);\n    polar.cy = parsePercent(center[1], height);\n\n    var radiusAxis = polar.getRadiusAxis();\n    var size = Math.min(width, height) / 2;\n    var radius = parsePercent(polarModel.get('radius'), size);\n    radiusAxis.inverse\n        ? radiusAxis.setExtent(radius, 0)\n        : radiusAxis.setExtent(0, radius);\n}"}, {"instruction": "Locates the instance of lm.controls.Splitter in the array of\nregistered splitters and returns a map containing the contentItem\nbefore and after the splitters, both of which are affected if the\nsplitter is moved\n\n@param   {lm.controls.Splitter} splitter\n\n@returns {Object} A map of contentItems that the splitter affects", "input": "JavaScript", "output": "function( splitter ) {\n\t\tvar index = lm.utils.indexOf( splitter, this._splitter );\n\t\t\n\t\treturn {\n\t\t\tbefore: this.contentItems[ index ],\n\t\t\tafter: this.contentItems[ index + 1 ]\n\t\t};\n\t}"}, {"instruction": "handle debouncing a function for better performance on scroll", "input": "JavaScript", "output": "function debounce(fn, delay) {\n        return function () {\n          var self = this, args = arguments;\n          clearTimeout(timer);\n          console.log('debounce()');\n          timer = setTimeout(function () {\n            fn.apply(self, args);\n          }, delay);\n        };\n      }"}, {"instruction": "Copyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n \nClass: mxEdgeHandler\n\nGraph event handler that reconnects edges and modifies control points and\nthe edge label location. Uses <mxTerminalMarker> for finding and\nhighlighting new source and target vertices. This handler is automatically\ncreated in <mxGraph.createHandler> for each selected edge.\n\nTo enable adding/removing control points, the following code can be used:\n\n(code)\nmxEdgeHandler.prototype.addEnabled = true;\nmxEdgeHandler.prototype.removeEnabled = true;\n(end)\n\nNote: This experimental feature is not recommended for production use.\n\nConstructor: mxEdgeHandler\n\nConstructs an edge handler for the specified <mxCellState>.\n\nParameters:\n\nstate - <mxCellState> of the cell to be handled.", "input": "JavaScript", "output": "function mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n}"}, {"instruction": "}}}", "input": "JavaScript", "output": "function createDragbars(li) //{{{\n      {\n        var i;\n        for (i = 0; i < li.length; i++) {\n          dragbar[li[i]] = insertDragbar(li[i]);\n        }\n      }"}, {"instruction": "Calls a method recoursively downwards on the tree\n\n@param   {String} functionName      the name of the function to be called\n@param   {[Array]}functionArguments optional arguments that are passed to every function\n@param   {[bool]} bottomUp          Call methods from bottom to top, defaults to false\n@param   {[bool]} skipSelf          Don't invoke the method on the class that calls it, defaults to false\n\n@returns {void}", "input": "JavaScript", "output": "function( functionName, functionArguments, bottomUp, skipSelf ) {\n\t\tvar i;\n\n\t\tif( bottomUp !== true && skipSelf !== true ) {\n\t\t\tthis[ functionName ].apply( this, functionArguments || [] );\n\t\t}\n\t\tfor( i = 0; i < this.contentItems.length; i++ ) {\n\t\t\tthis.contentItems[ i ].callDownwards( functionName, functionArguments, bottomUp );\n\t\t}\n\t\tif( bottomUp === true && skipSelf !== true ) {\n\t\t\tthis[ functionName ].apply( this, functionArguments || [] );\n\t\t}\n\t}"}, {"instruction": "Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n@param {ASTNode} node An ArrayExpression or ArrayPattern node.\n@returns {void}", "input": "JavaScript", "output": "function addNullElementsToIgnoreList(node) {\n            let previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(element => {\n                let token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (astUtils.isCommaToken(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }"}, {"instruction": "field can be: 1. function 2. regular property - ex: 'prop' 3. nested property path - ex: 'nested.prop'", "input": "JavaScript", "output": "function collect(obj, field) {\n      // utility function to get nested property\n      function dig(obj, selector) {\n        var result = obj;\n        var splitter = selector.split('.');\n\n        for (var i = 0; i < splitter.length; i++) {\n          if (typeof result === 'undefined' || result === null) {\n            return undefined;\n          }\n\n          result = result[splitter[i]];\n        }\n\n        return result;\n      }\n\n      if (typeof field === 'function') return field(obj);\n      if (typeof field === 'string') return dig(obj, field);\n      return undefined;\n    }"}, {"instruction": "Monkey-patch CodeMirror to prevent modes from being overwritten by extensions.\nWe may rely on the tokens provided by some of these modes.", "input": "JavaScript", "output": "function _patchCodeMirror() {\n        var _original_CodeMirror_defineMode = CodeMirror.defineMode;\n        function _wrapped_CodeMirror_defineMode(name) {\n            if (CodeMirror.modes[name]) {\n                console.error(\"There already is a CodeMirror mode with the name \\\"\" + name + \"\\\"\");\n                return;\n            }\n            _original_CodeMirror_defineMode.apply(CodeMirror, arguments);\n        }\n        CodeMirror.defineMode = _wrapped_CodeMirror_defineMode;\n    }"}, {"instruction": "Remove an article from a level.\n\n@param {Summary} summary\n@param {String|SummaryArticle} level: level to remove\n@return {Summary}", "input": "JavaScript", "output": "function removeArticle(summary, level) {\n    // Coerce to level\n    level = is.string(level)? level : level.getLevel();\n\n    var parent = summary.getParent(level);\n\n    var articles = parent.getArticles();\n    // Find the index to remove\n    var index = articles.findIndex(function(art) {\n        return art.getLevel() === level;\n    });\n    if (index === -1) {\n        return summary;\n    }\n\n    // Remove from children\n    articles = articles.remove(index);\n    parent = parent.set('articles', articles);\n\n    // Reindex the level from here\n    parent = indexArticleLevels(parent);\n\n    return mergeAtLevel(summary, parent.getLevel(), parent);\n}"}, {"instruction": "Returns the spherical area for a list of coordinates.\n\n[Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\nRobert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\nPolygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\nLaboratory, Pasadena, CA, June 2007\n\n@param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\nring. If the ring is oriented clockwise, the area will be positive,\notherwise it will be negative.\n@param {number} radius The sphere radius.\n@return {number} Area (in square meters).", "input": "JavaScript", "output": "function getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area += toRadians(x2 - x1) *\n        (2 + Math.sin(toRadians(y1)) +\n        Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return area * radius * radius / 2.0;\n}"}, {"instruction": "Find vertex by name", "input": "JavaScript", "output": "function findVertex(name) {\r\n\t\tvar objects = alasql.databases[alasql.useid].objects;\r\n\t\tfor (var k in objects) {\r\n\t\t\tif (objects[k].name === name) {\r\n\t\t\t\treturn objects[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}"}, {"instruction": "/*\nReturns a flattened acc info object (infos of children are merged together)\nNote: The info object does only contain a focusable flag (true if one of the children is focusable)\nand a combined description.\n@see sap.ui.core.Control#getAccessibilityInfo", "input": "JavaScript", "output": "function(oControl) {\n\t\t\tif (oControl && typeof oControl.getAccessibilityInfo === \"function\") {\n\t\t\t\tif (typeof oControl.getVisible === \"function\" && !oControl.getVisible()) {\n\t\t\t\t\treturn ACCInfoHelper._normalize({});\n\t\t\t\t}\n\t\t\t\tvar oSource = oControl.getAccessibilityInfo();\n\t\t\t\tif (oSource) {\n\t\t\t\t\tvar oTarget = {};\n\t\t\t\t\tACCInfoHelper._flatten(oSource, oTarget);\n\t\t\t\t\treturn oTarget;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}"}, {"instruction": "Search for abbreviation in editor from current caret position\n@param {IEmmetEditor} editor Editor instance\n@return {String}", "input": "JavaScript", "output": "function findAbbreviation(editor) {\n\t\tvar r = range(editor.getSelectionRange());\n\t\tvar content = String(editor.getContent());\n\t\tif (r.length()) {\n\t\t\t// abbreviation is selected by user\n\t\t\treturn r.substring(content);\n\t\t}\n\t\t\n\t\t// search for new abbreviation from current caret position\n\t\tvar curLine = editor.getCurrentLineRange();\n\t\treturn actionUtils.extractAbbreviation(content.substring(curLine.start, r.start));\n\t}"}, {"instruction": "Conditionally set basic authentication on a server request object.\n\n@method _auth\n@private\n@param {Object} request A superagent request object\n@param {Object} options A WPRequest _options object\n@param {Boolean} forceAuthentication whether to force authentication on the request\n@param {Object} A superagent request object, conditionally configured to use basic auth", "input": "JavaScript", "output": "function _auth( request, options, forceAuthentication ) {\n\t// If we're not supposed to authenticate, don't even start\n\tif ( ! forceAuthentication && ! options.auth && ! options.nonce ) {\n\t\treturn request;\n\t}\n\n\t// Enable nonce in options for Cookie authentication http://wp-api.org/guides/authentication.html\n\tif ( options.nonce ) {\n\t\trequest.set( 'X-WP-Nonce', options.nonce );\n\t\treturn request;\n\t}\n\n\t// Retrieve the username & password from the request options if they weren't provided\n\tconst username = options.username;\n\tconst password = options.password;\n\n\t// If no username or no password, can't authenticate\n\tif ( ! username || ! password ) {\n\t\treturn request;\n\t}\n\n\t// Can authenticate: set basic auth parameters on the request\n\treturn request.auth( username, password );\n}"}, {"instruction": "\u6dfb\u52a0\u5e74\u6708\u65e5\u7b49\u6587\u672c\n@param { array } arr\n@param {string } text\n@param { object } props", "input": "JavaScript", "output": "function formatText(arr, text, props) {\n  const formatArray = [];\n  const localeCode = props.locale;\n  for (let i = 0; i < arr.length; i += 1) {\n    const el = arr[i];\n    formatArray.push(isArray(el) ?\n      formatText(el, locale[localeCode].surfix[colFlags[i]], props) :\n      {\n        text: addZero(el.text) +\n              (isUndefined(text) ? locale[localeCode].surfix[colFlags[i]] : text),\n        value: el.value,\n      });\n  }\n  return formatArray;\n}"}, {"instruction": "Executes the provided `callback` once for each enumerable own property in the\nobject and constructs a new object from the results. The `callback` is\ninvoked with three arguments:\n\n- the property value\n- the property name\n- the object being traversed\n\nProperties that are added after the call to `mapObject` will not be visited\nby `callback`. If the values of existing properties are changed, the value\npassed to `callback` will be the value at the time `mapObject` visits them.\nProperties that are deleted before being visited are not visited.\n\n@grep function objectMap()\n@grep function objMap()\n\n@param {?object} object\n@param {function} callback\n@param {*} context\n@return {?object}", "input": "JavaScript", "output": "function mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}"}, {"instruction": "initWebGL  Initialize WebGL, returning the GL context or null if WebGL isn't available or could not be initialized.", "input": "JavaScript", "output": "function initWebGL() {\n  gl = null;\n\n  try {\n    gl = canvas.getContext(\"experimental-webgl\");\n  }\n  catch(e) {\n    alert(e);\n  }\n\n  // If we don't have a GL context, give up now\n\n  if (!gl) {\n    alert(\"Unable to initialize WebGL. Your browser may not support it.\");\n  }\n}"}, {"instruction": "PATHS", "input": "JavaScript", "output": "function (ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }"}, {"instruction": "Calls the provided DOM prototype method and returns its result. If the\nmethod is not available, use fallbackMethodName to call the method in a\nclobber-vulnerable way, and use fallbackTest to check if the\nmethod was clobbered, throwing an exception if so.\n@param {?Function} fn\n@param {*} object\n@param {string} fallbackMethodName\n@param {!Array<*>} args\n@return {?}", "input": "JavaScript", "output": "function genericMethodCall(fn, object, fallbackMethodName, args) {\n  if (fn) {\n    return fn.apply(object, args);\n  }\n  // IE8 and IE9 will return 'object' for\n  // CSSStyleDeclaration.(get|set)Attribute, so we can't use typeof.\n  if (userAgentProduct.IE && document.documentMode < 10) {\n    if (!object[fallbackMethodName].call) {\n      throw new Error('IE Clobbering detected');\n    }\n  } else if (typeof object[fallbackMethodName] != 'function') {\n    throw new Error('Clobbering detected');\n  }\n  return object[fallbackMethodName].apply(object, args);\n}"}, {"instruction": "Tests whether a batch can be started.\n@private\n@param {number[]} batch_ops The operations in the batch we are checking.\n@param {number[]} completed_ops Previously completed operations.\n@return {boolean}", "input": "JavaScript", "output": "function _areBatchRequirementsMet(batch_ops, completed_ops) {\n  var dependencies = common.flatMap(batch_ops, function(op) {\n    return OP_DEPENDENCIES[op] || [];\n  });\n  for (var i = 0; i < dependencies.length; i++) {\n    var required_dep = dependencies[i];\n    if (batch_ops.indexOf(required_dep) === -1 &&\n        completed_ops.indexOf(required_dep) === -1) {\n      return false;\n    }\n  }\n  return true;\n}"}, {"instruction": "Return an option value that has a default, but may be overridden by a\ncallback or a node instance attribute.\n\nEvaluation sequence:<br>\n\nIf tree.options.<optionName> is a callback that returns something, use that.<br>\nElse if node.<optionName> is defined, use that.<br>\nElse if tree.options.<optionName> is a value, use that.<br>\nElse use `defaultValue`.\n\n@param {string} optionName name of the option property (on node and tree)\n@param {FancytreeNode} node passed to the callback\n@param {object} nodeObject where to look for the local option property, e.g. `node` or `node.data`\n@param {object} treeOption where to look for the tree option, e.g. `tree.options` or `tree.options.dnd5`\n@param {any} [defaultValue]\n@returns {any}\n\n@example\n// Check for node.foo, tree,options.foo(), and tree.options.foo:\n$.ui.fancytree.evalOption(\"foo\", node, node, tree.options);\n// Check for node.data.bar, tree,options.qux.bar(), and tree.options.qux.bar:\n$.ui.fancytree.evalOption(\"bar\", node, node.data, tree.options.qux);\n\n@since 2.22", "input": "JavaScript", "output": "function(\n\t\t\t\toptionName,\n\t\t\t\tnode,\n\t\t\t\tnodeObject,\n\t\t\t\ttreeOptions,\n\t\t\t\tdefaultValue\n\t\t\t) {\n\t\t\t\tvar ctx,\n\t\t\t\t\tres,\n\t\t\t\t\ttree = node.tree,\n\t\t\t\t\ttreeOpt = treeOptions[optionName],\n\t\t\t\t\tnodeOpt = nodeObject[optionName];\n\n\t\t\t\tif ($.isFunction(treeOpt)) {\n\t\t\t\t\tctx = {\n\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\ttree: tree,\n\t\t\t\t\t\twidget: tree.widget,\n\t\t\t\t\t\toptions: tree.widget.options,\n\t\t\t\t\t\ttypeInfo: tree.types[node.type] || {},\n\t\t\t\t\t};\n\t\t\t\t\tres = treeOpt.call(tree, { type: optionName }, ctx);\n\t\t\t\t\tif (res == null) {\n\t\t\t\t\t\tres = nodeOpt;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres = nodeOpt != null ? nodeOpt : treeOpt;\n\t\t\t\t}\n\t\t\t\tif (res == null) {\n\t\t\t\t\tres = defaultValue; // no option set at all: return default\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}"}, {"instruction": "SAP MODIFICATION Because touchcancel is used together with touchend, jQuery.fn.bind is used to replace jQuery.fn.one due to the fact that jQuery.fn.one doesn't work for multiple events.", "input": "JavaScript", "output": "function stopHandler( event ) {\n\t\t\t\t\t$this.unbind( touchMoveEvent, moveHandler )\n\t\t\t\t\t\t.unbind( touchStopEvent, stopHandler );\n\n\t\t\t\t\tif ( start && stop ) {\n\t\t\t\t\t\t$.event.special.swipe.handleSwipe( start, stop );\n\t\t\t\t\t}\n\t\t\t\t\tstart = stop = undefined;\n\t\t\t\t}"}, {"instruction": "Add additional information to the armor version of an OpenPGP binary\npacket block.\n@author  Alex\n@version 2011-12-16\n@param {String} customComment (optional) additional comment to add to the armored string\n@returns {String} The header information", "input": "JavaScript", "output": "function addheader(customComment) {\n  let result = \"\";\n  if (config.show_version) {\n    result += \"Version: \" + config.versionstring + '\\r\\n';\n  }\n  if (config.show_comment) {\n    result += \"Comment: \" + config.commentstring + '\\r\\n';\n  }\n  if (customComment) {\n    result += \"Comment: \" + customComment + '\\r\\n';\n  }\n  result += '\\r\\n';\n  return result;\n}"}, {"instruction": "Creates and initializes specified collection of extensions.\nEach extension receives access to instance of glide and rest of components.\n\n@param {Object} glide\n@param {Object} extensions\n\n@returns {Object}", "input": "JavaScript", "output": "function mount(glide, extensions, events) {\n  var components = {};\n\n  for (var name in extensions) {\n    if (isFunction(extensions[name])) {\n      components[name] = extensions[name](glide, components, events);\n    } else {\n      warn('Extension must be a function');\n    }\n  }\n\n  for (var _name in components) {\n    if (isFunction(components[_name].mount)) {\n      components[_name].mount();\n    }\n  }\n\n  return components;\n}"}, {"instruction": "PURE_IMPORTS_START _map PURE_IMPORTS_END", "input": "JavaScript", "output": "function pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(plucker(properties, length))(source); };\n}"}, {"instruction": "Get the canvas size\n@param {Boolean} sketch If set to true return the size of the sketch canvas\n@returns {OpenSeadragon.Point} The size of the canvas", "input": "JavaScript", "output": "function(sketch) {\n        var canvas = this._getContext(sketch).canvas;\n        return new $.Point(canvas.width, canvas.height);\n    }"}, {"instruction": "/*", "input": "JavaScript", "output": "function preTransformVFor (el, options) {\n  var exp = getAndRemoveAttr(el, 'v-for');\n  if (!exp) {\n    return\n  }\n\n  var res = parseFor(exp);\n  if (!res) {\n    if (process.env.NODE_ENV !== 'production' && options.warn) {\n      options.warn((\"Invalid v-for expression: \" + exp));\n    }\n    return\n  }\n\n  var desc = {\n    '@expression': res.for,\n    '@alias': res.alias\n  };\n  if (res.iterator2) {\n    desc['@key'] = res.iterator1;\n    desc['@index'] = res.iterator2;\n  } else {\n    desc['@index'] = res.iterator1;\n  }\n\n  delete el.attrsMap['v-for'];\n  addRawAttr(el, '[[repeat]]', desc);\n}"}, {"instruction": "Shows a {@link sap.m.MessageBox} when a service call has failed.\nOnly the first error message will be display.\n@param {string} sDetails a technical error to be displayed on request\n@private", "input": "JavaScript", "output": "function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}"}, {"instruction": "Handler for `swipestart` event. Calculates entry points of the user's tap.\n\n@param {Object} event\n@return {Void}", "input": "JavaScript", "output": "function start(event) {\n      if (!disabled && !Glide.disabled) {\n        this.disable();\n\n        var swipe = this.touches(event);\n\n        swipeSin = null;\n        swipeStartX = toInt(swipe.pageX);\n        swipeStartY = toInt(swipe.pageY);\n\n        this.bindSwipeMove();\n        this.bindSwipeEnd();\n\n        Events.emit('swipe.start');\n      }\n    }"}, {"instruction": "Registration", "input": "JavaScript", "output": "function supportsObject(grip, noGrip = false) {\n  const type = getGripType(grip, noGrip);\n  if (noGrip === true || !isGrip(grip)) {\n    return type == \"function\";\n  }\n\n  return type == \"Function\";\n}"}, {"instruction": "Draws the data entries inside the tooltip\n@param  {Object} dataPoint   Data entry from to take the info\n@return void\n@private", "input": "JavaScript", "output": "function updateContent(dataPoint){\n            var topics = dataPoint[topicLabel];\n\n            // sort order by topicsOrder array if passed\n            if (topicsOrder.length) {\n                topics = _sortByTopicsOrder(topics);\n            } else if (topics.length && topics[0].name) {\n                topics = _sortByAlpha(topics);\n            }\n\n            cleanContent();\n            updateTitle(dataPoint);\n            resetSizeAndPositionPointers();\n            topics.forEach(updateTopicContent);\n        }"}, {"instruction": "Get a pre-signed URL for a given operation name.\n\n@note You must ensure that you have static or previously resolved\ncredentials if you call this method synchronously (with no callback),\notherwise it may not properly sign the request. If you cannot guarantee\nthis (you are using an asynchronous credential provider, i.e., EC2\nIAM roles), you should always call this method with an asynchronous\ncallback.\n@note Not all operation parameters are supported when using pre-signed\nURLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n`ContentLength`, or `Tagging` must be provided as headers when sending a\nrequest. If you are using pre-signed URLs to upload from a browser and\nneed to use these fields, see {createPresignedPost}.\n@note The default signer allows altering the request by adding corresponding\nheaders to set some parameters (e.g. Range) and these added parameters\nwon't be signed. You must use signatureVersion v4 to to include these\nparameters in the signed portion of the URL and enforce exact matching\nbetween headers and signed params in the URL.\n@note This operation cannot be used with a promise. See note above regarding\nasynchronous credentials and use with a callback.\n@param operation [String] the name of the operation to call\n@param params [map] parameters to pass to the operation. See the given\noperation for the expected operation parameters. In addition, you can\nalso pass the \"Expires\" parameter to inform S3 how long the URL should\nwork for.\n@option params Expires [Integer] (900) the number of seconds to expire\nthe pre-signed URL operation in. Defaults to 15 minutes.\n@param callback [Function] if a callback is provided, this function will\npass the URL as the second parameter (after the error parameter) to\nthe callback function.\n@return [String] if called synchronously (with no callback), returns the\nsigned URL.\n@return [null] nothing is returned if a callback is provided.\n@example Pre-signing a getObject operation (synchronously)\nvar params = {Bucket: 'bucket', Key: 'key'};\nvar url = s3.getSignedUrl('getObject', params);\nconsole.log('The URL is', url);\n@example Pre-signing a putObject (asynchronously)\nvar params = {Bucket: 'bucket', Key: 'key'};\ns3.getSignedUrl('putObject', params, function (err, url) {\nconsole.log('The URL is', url);\n});\n@example Pre-signing a putObject operation with a specific payload\nvar params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\nvar url = s3.getSignedUrl('putObject', params);\nconsole.log('The URL is', url);\n@example Passing in a 1-minute expiry time for a pre-signed URL\nvar params = {Bucket: 'bucket', Key: 'key', Expires: 60};\nvar url = s3.getSignedUrl('getObject', params);\nconsole.log('The URL is', url); // expires in 60 seconds", "input": "JavaScript", "output": "function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  }"}, {"instruction": "\u83b7\u53d6\u6e10\u53d8\u51fd\u6570\n@param  {Array} colors \u591a\u4e2a\u989c\u8272\n@return {String} \u989c\u8272\u503c", "input": "JavaScript", "output": "function gradient(colors) {\n    var points = [];\n    if (isString(colors)) {\n      colors = colors.split('-');\n    }\n    each(colors, function (color) {\n      if (color.indexOf('#') === -1) {\n        color = ColorUtil.toRGB(color);\n      }\n      points.push(rgb2arr(color));\n    });\n    return function (percent) {\n      return calColor(points, percent);\n    };\n  }"}, {"instruction": "Keeps the selection state in sync", "input": "JavaScript", "output": "function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t}"}, {"instruction": "Checks if a header already exists. If it does not, sets the value to whatever is passed as\n`defaultValue`\n\n@param {object} headers\n@param {String} headerKey\n@param {String} defaultValue", "input": "JavaScript", "output": "function (headers, headerKey, defaultValue) {\n        var headerName = _.findKey(headers, function (value, key) {\n            return key.toLowerCase() === headerKey.toLowerCase();\n        });\n\n        if (!headerName) {\n            headers[headerKey] = defaultValue;\n        }\n    }"}, {"instruction": "Reset context state\n@name reset\n@memberOf me.Renderer.prototype\n@function", "input": "JavaScript", "output": "function reset() {\n         this.resetTransform();\n         this.setBlendMode(this.settings.blendMode);\n         this.setColor(\"#000000\");\n         this.currentTint.setColor(255, 255, 255, 1.0);\n         this.cache.clear();\n         this.currentScissor[0] = 0;\n         this.currentScissor[1] = 0;\n         this.currentScissor[2] = this.backBufferCanvas.width;\n         this.currentScissor[3] = this.backBufferCanvas.height;\n         this.updateBounds();\n       }"}, {"instruction": "Based off of the plugin by Clint Helfers, with permission. http://blindsignals.com/index.php/2009/07/jquery-delay/", "input": "JavaScript", "output": "function( time, type ) {\n\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\ttype = type || \"fx\";\n\n\t\treturn this.queue( type, function() {\n\t\t\tvar elem = this;\n\t\t\tsetTimeout(function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t}, time );\n\t\t});\n\t}"}, {"instruction": "setup events to detect gestures on the document", "input": "JavaScript", "output": "function setup() {\n  if(Hammer.READY) {\n    return;\n  }\n\n  // find what eventtypes we add listeners to\n  Event.determineEventTypes();\n\n  // Register all gestures inside Hammer.gestures\n  Utils.each(Hammer.gestures, function(gesture){\n    Detection.register(gesture);\n  });\n\n  // Add touch events on the document\n  Event.onTouch(Hammer.DOCUMENT, EVENT_MOVE, Detection.detect);\n  Event.onTouch(Hammer.DOCUMENT, EVENT_END, Detection.detect);\n\n  // Hammer is ready...!\n  Hammer.READY = true;\n}"}, {"instruction": "Checks if a value is a valid locator.\n@param {!(By|Function|ByHash)} locator The value to check.\n@return {!(By|Function)} The valid locator.\n@throws {TypeError} If the given value does not define a valid locator\nstrategy.", "input": "JavaScript", "output": "function check(locator) {\n  if (locator instanceof By || typeof locator === 'function') {\n    return locator;\n  }\n\n  if (locator\n      && typeof locator === 'object'\n      && typeof locator.using === 'string'\n      && typeof locator.value === 'string') {\n    return new By(locator.using, locator.value);\n  }\n\n  for (let key in locator) {\n    if (locator.hasOwnProperty(key) && By.hasOwnProperty(key)) {\n      return By[key](locator[key]);\n    }\n  }\n  throw new TypeError('Invalid locator');\n}"}, {"instruction": "focusToFirstCode\nFocus to first code tag content of pre tag\n@param {jQuery} $pre pre tag\n@param {WysiwygEditor} wwe wysiwygEditor", "input": "JavaScript", "output": "function focusToFirstCode($pre, wwe) {\n  const range = wwe.getEditor().getSelection().cloneRange();\n  $pre.removeClass(CODEBLOCK_CLASS_TEMP);\n\n  range.setStartBefore($pre.get(0).firstChild);\n  range.collapse(true);\n\n  wwe.getEditor().setSelection(range);\n}"}, {"instruction": "setup events to detect gestures on the document\nthis function is called when creating an new instance\n@private", "input": "JavaScript", "output": "function setup(opts) {\n  if (GestureDetector.READY) {\n    return;\n  }\n\n  // find what eventtypes we add listeners to\n  Event.determineEventTypes();\n\n  // Register all gestures inside GestureDetector.gestures\n  Utils.each(GestureDetector.gestures, function(gesture) {\n    Detection.register(gesture);\n  });\n\n  // Add touch events on the document\n  Event.onTouch(GestureDetector.DOCUMENT, EVENT_MOVE, Detection.detect, opts);\n  Event.onTouch(GestureDetector.DOCUMENT, EVENT_END, Detection.detect, opts);\n\n  // GestureDetector is ready...!\n  GestureDetector.READY = true;\n}"}, {"instruction": "Returns the difficulty as a number, or if too large (i.e. PoA network) null", "input": "JavaScript", "output": "function checkDifficulty(value) {\n    var v = bignumber_1.bigNumberify(value);\n    try {\n        return v.toNumber();\n    }\n    catch (error) { }\n    return null;\n}"}, {"instruction": "override", "input": "JavaScript", "output": "function($super, axis, formatter, chart) {\n            $super(axis, formatter, chart);\n            var fontSize = 11,\n                tickLabelPadding = 2;\n\n            if(this.isVertical) {\n                this.checkFirstLabelFit(axis, formatter, chart, fontSize);\n            }\n            else {\n                this.checkLastLabelFit(axis, formatter, chart, fontSize);\n            }\n        }"}, {"instruction": "Wrapper to allow the use of object methods as static methods of Immutable.", "input": "JavaScript", "output": "function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }"}, {"instruction": "Style strike.\n@param {object} sq - squire editor instance", "input": "JavaScript", "output": "function styleStrike(sq) {\n  if (sq.hasFormat('S')) {\n    sq.changeFormat(null, {tag: 'S'});\n  } else if (!sq.hasFormat('a') && !sq.hasFormat('PRE')) {\n    if (sq.hasFormat('code')) {\n      sq.changeFormat(null, {tag: 'code'});\n    }\n    sq.strikethrough();\n  }\n}"}, {"instruction": "\u83b7\u53d6\u9875\u9762\u4e0a\u4e0b\u6587", "input": "JavaScript", "output": "function getPageCtx(pageCtx) {\n  var ctx = pageCtx;\n\n  if (!ctx) {\n    var pages = getCurrentPages();\n    ctx = pages[pages.length - 1];\n  }\n\n  return ctx;\n}"}, {"instruction": "Updates _viewStateCache from the given editor's actual current state\n@param {!Editor} editor - editor restore cached data\n@private", "input": "JavaScript", "output": "function _restoreEditorViewState(editor) {\n        // We want to ignore the current state of the editor, so don't call __getViewState()\n        var viewState = ViewStateManager.getViewState(editor.document.file);\n        if (viewState) {\n            editor.restoreViewState(viewState);\n        }\n    }"}, {"instruction": "Iterates over the available log entries.\n\nBoth parameter functions gets a log entry object passed in with the following properties:\n<ul>\n<li>{jQuery.sap.log.Level} oLogEntry.level One of the log levels FATAL, ERROR, WARNING, INFO, DEBUG, TRACE</li>\n<li>{string} oLogEntry.message     The logged message</li>\n<li>{string} oLogEntry.details     The optional details for the message</li>\n<li>{string} oLogEntry.component   The optional log component under which the message was logged</li>\n<li>{float}  oLogEntry.timestamp   The timestamp when the log entry was written</li>\n<li>{object} oLogEntry.supportInfo The optional support info object</li>\n</ul>\n\n@param {function} fnFilter Filter function to filter out irrelevant log entries.\nIf the function returns <code>true</code> the log entry is kept, otherwise it's filtered out.\n@param {string} fnCheck Check function to check the remaining log entries.\nIf the function returns <code>true</code> the checking procedure is stopped,\notherwise the next entry is passed for checking.", "input": "JavaScript", "output": "function(fnFilter, fnCheck) {\n\t\t\tvar aLog = Log.getLogEntries(); //oScope.getLoggedObjects(); /*getLoggedObjects returns only log entries with supportinfo*/\n\t\t\tvar oLogEntry;\n\t\t\tfor (var i = 0; i < aLog.length; i++) {\n\t\t\t\toLogEntry = aLog[i];\n\t\t\t\tif (fnFilter(oLogEntry)) {\n\t\t\t\t\tif (fnCheck(oLogEntry)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "Return unique array.\n\n@param {Array} arr\n@return {Array}\n@api private", "input": "JavaScript", "output": "function unique(arr) {\n  var ret = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (~ret.indexOf(arr[i])) continue;\n    ret.push(arr[i]);\n  }\n\n  return ret;\n}"}, {"instruction": "Guard the specified event. If the event is not interesting, guard returns `true`. Otherwise, it returns `false`.", "input": "JavaScript", "output": "function(evt, view) {\n\n        if (evt.type === 'mousedown' && evt.button === 2) {\n            // handled as `contextmenu` type\n            return true;\n        }\n\n        if (this.options.guard && this.options.guard(evt, view)) {\n            return true;\n        }\n\n        if (evt.data && evt.data.guarded !== undefined) {\n            return evt.data.guarded;\n        }\n\n        if (view && view.model && (view.model instanceof joint.dia.Cell)) {\n            return false;\n        }\n\n        if (this.svg === evt.target || this.el === evt.target || $.contains(this.svg, evt.target)) {\n            return false;\n        }\n\n        return true;    // Event guarded. Paper should not react on it in any way.\n    }"}, {"instruction": "internal helper to get nodes and edges as separate collections with single iteration over elements", "input": "JavaScript", "output": "function byGroup() {\n    var nodes = this.spawn();\n    var edges = this.spawn();\n\n    for (var i = 0; i < this.length; i++) {\n      var ele = this[i];\n\n      if (ele.isNode()) {\n        nodes.merge(ele);\n      } else {\n        edges.merge(ele);\n      }\n    }\n\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  }"}, {"instruction": "/*!\nCalculates the interpolated tween values of an Object for a given\ntimestamp.\n@param {Number} forPosition The position to compute the state for.\n@param {Object} currentState Current state properties.\n@param {Object} originalState: The original state properties the Object is\ntweening from.\n@param {Object} targetState: The destination state properties the Object\nis tweening to.\n@param {number} duration: The length of the tween in milliseconds.\n@param {number} timestamp: The UNIX epoch time at which the tween began.\n@param {Object} easing: This Object's keys must correspond to the keys in\ntargetState.", "input": "JavaScript", "output": "function tweenProps (forPosition, currentState, originalState, targetState,\n      duration, timestamp, easing) {\n      var normalizedPosition = (forPosition - timestamp) / duration;\n\n      var prop;\n      for (prop in currentState) {\n        if (currentState.hasOwnProperty(prop)) {\n          currentState[prop] = tweenProp(originalState[prop],\n            targetState[prop], formula[easing[prop]], normalizedPosition);\n        }\n      }\n\n      return currentState;\n    }"}, {"instruction": "### Parse Options\nTake the given options and ensure they are valid pagination options, else use the defaults\n@param {options} options\n@returns {options} options sanitised for pagination", "input": "JavaScript", "output": "function parseOptions(options) {\n        options = _.defaults(options || {}, defaults);\n\n        if (options.limit !== 'all') {\n            options.limit = parseInt(options.limit, 10) || defaults.limit;\n        }\n\n        options.page = parseInt(options.page, 10) || defaults.page;\n\n        return options;\n    }"}, {"instruction": "The loaded method is invoked after the initial batch of data arrives from the server.\nWhen this resolves, all data which existed prior to calling $asArray() is now cached\nlocally in the array.\n\nAs a shortcut is also possible to pass resolve/reject methods directly into this\nmethod just as they would be passed to .then()\n\n@param {Function} [resolve]\n@param {Function} [reject]\n@returns a promise", "input": "JavaScript", "output": "function(resolve, reject) {\n          var promise = this._sync.ready();\n          if( arguments.length ) {\n            // allow this method to be called just like .then\n            // by passing any arguments on to .then\n            promise = promise.then.call(promise, resolve, reject);\n          }\n          return promise;\n        }"}, {"instruction": "Returns all cookies formatted as a string to be put into the Cookie Header.", "input": "JavaScript", "output": "function() {\n            var cookieString = \"\";\n\n            utils.forEach(this._cookieStore, function (cookieValue, cookieKey) {\n                cookieString += cookieKey;\n                cookieString += '=';\n                cookieString += cookieValue;\n                cookieString += '; ';\n            });\n\n            return cookieString;\n\n        }"}, {"instruction": "DomRenderer#attach( data ) -> this\n- data (HTMLElement|Object): DOM node or event data (`data.body`)\n\nEvent callback to attach a node to the viewport", "input": "JavaScript", "output": "function( data ){\n\n            // interpred data as either dom node or event data\n            var el = (data.nodeType && data) || (data.body && data.body.view)\n                ;\n\n            if ( el ){\n                // attach to viewport\n                this.el.appendChild( el );\n            }\n\n            return this;\n        }"}, {"instruction": "List of client ids the user has visited", "input": "JavaScript", "output": "function (done) {\n      var index = 'users:' + user._id + ':clients'\n      Client.__client.zrevrange(index, 0, -1, function (err, ids) {\n        if (err) { return done(err) }\n        done(null, ids)\n      })\n    }"}, {"instruction": "Find the key in the map object given a header name.\n\nReturns undefined if not found.\n\n@param   String  name  Header name\n@return  String|Undefined", "input": "JavaScript", "output": "function find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}"}, {"instruction": "To authenticate using PLAIN and a simple username and password\ncombination, the application provides a callback function for\nauthenticating a connecting user given their specified username and\npassword. (The test used here - namely that the password is always\nthe username in reverse - is of course NOT recommended in practice!\n:-)", "input": "JavaScript", "output": "function authenticate(username, password) {\n    console.log('Authenticating as ' + username);\n    return username.split('').reverse().join('') === password;\n}"}, {"instruction": "$NON-NLS-0$", "input": "JavaScript", "output": "function(branchLocation, name) {\n\t\t\t\t\tvar addMsg = i18nUtil.formatMessage(messages[\"Adding branch ${0}...\"], name);\n\t\t\t\t\tprogress.progress(serviceRegistry.getService(\"orion.git.provider\").addBranch(branchLocation, name), addMsg).then(function() { //$NON-NLS-0$\n\t\t\t\t\t\tdispatchModelEventOn({type: \"modelChanged\", action: \"addBranch\", branch: name}); //$NON-NLS-1$ //$NON-NLS-0$\n\t\t\t\t\t}, function(error){\n\t\t\t\t\t\tif(error.status===409){\n\t\t\t\t\t\t\tcommandInvocation.parameters = branchNameParameters;\n\t\t\t\t\t\t\tcommandService.collectParameters(commandInvocation);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdisplayErrorOnStatus(error);\n\t\t\t\t\t});\n\t\t\t\t}"}, {"instruction": "Resets an existing tern server.", "input": "JavaScript", "output": "function resetTernServer() {\n    // If a server is already created just reset the analysis data \n    if (ternServer) {\n        ternServer.reset();\n        Infer.resetGuessing();\n        // tell the main thread we're ready to start processing again\n        self.postMessage({type: MessageIds.TERN_WORKER_READY});\n    }\n}"}, {"instruction": "/* TODO: convert to BIFF8 font struct", "input": "JavaScript", "output": "function parse_BIFF2FONTXTRA(blob, length) {\n\tblob.l += 6; // unknown\n\tblob.l += 2; // font weight \"bls\"\n\tblob.l += 1; // charset\n\tblob.l += 3; // unknown\n\tblob.l += 1; // font family\n\tblob.l += length - 13;\n}"}, {"instruction": "Update mark when resizing", "input": "JavaScript", "output": "function updateMarkWhenResizing() {\n    const helper = getHelper();\n\n    ml.getAll().forEach(marker => {\n      helper.updateMarkerWithExtraInfo(marker);\n    });\n\n    editor.eventManager.emit('markerUpdated', ml.getAll());\n  }"}, {"instruction": "Checks whether a node has the '_super' property.\n@param {Node[]} nodes An array of nodes.\n@returns {Boolean}", "input": "JavaScript", "output": "function checkForSuper(nodes) {\n  if (nodes.length === 0) return false;\n\n  return nodes.some((n) => {\n    if (utils.isCallExpression(n.expression)) {\n      const fnCallee = n.expression.callee;\n      return utils.isMemberExpression(fnCallee) &&\n        utils.isThisExpression(fnCallee.object) &&\n        utils.isIdentifier(fnCallee.property) &&\n        fnCallee.property.name === '_super';\n    } else if (utils.isReturnStatement(n)) {\n      if (!n.argument || !utils.isCallExpression(n.argument)) return false;\n\n      const fnCallee = n.argument.callee;\n      return fnCallee.property.name === '_super';\n    }\n\n    return false;\n  });\n}"}, {"instruction": "/*\nAdjusts the ranks for all nodes in the graph such that all nodes v have\nrank(v) >= 0 and at least one node w has rank(w) = 0.", "input": "JavaScript", "output": "function normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}"}, {"instruction": "overrides the lunr tokenizer in order to define custom token separators", "input": "JavaScript", "output": "function overrideLunrTokenizer() {\n\n\t\tvar origTokenizer = lunr.tokenizer;\n\t\tvar rSeparators = /[-./#_,;\\(\\)=><|]/g;\n\n\t\tlunr.tokenizer = function(str) {\n\t\t\treturn origTokenizer.call(lunr, str).reduce( function (result, token) {\n\t\t\t\tif ( rSeparators.test(token) ) {\n\t\t\t\t\ttoken = token.replace(rSeparators, \" \");\n\t\t\t\t\tresult.push.apply(result, token.toLowerCase().split(/ +/));\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(token.toLowerCase());\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}, []);\n\t\t};\n\t\tObject.keys(origTokenizer).forEach(function (key) {\n\t\t\tlunr.tokenizer[key] = origTokenizer[key];\n\t\t});\n\t}"}, {"instruction": "Count spaces before/after arrow(`=>`) token.\n@param {Object} tokens Tokens before/after arrow.\n@returns {Object} count of space before/after arrow.", "input": "JavaScript", "output": "function countSpaces(tokens) {\n            const before = tokens.arrow.range[0] - tokens.before.range[1];\n            const after = tokens.after.range[0] - tokens.arrow.range[1];\n\n            return { before, after };\n        }"}, {"instruction": "/*!\nRecursively check the equality of two objects.\nOnce basic sameness has been established it will\ndefer to `deepEqual` for each enumerable key\nin the object.\n\n@param {Mixed} a\n@param {Mixed} b\n@return {Boolean} result", "input": "JavaScript", "output": "function objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}"}, {"instruction": "Constructor for `splunkjs.Service.DataModel`.\n\n@constructor\n@param {Object} props A dictionary of properties used to create a\n`DataModel` instance.\n@return {splunkjs.Service.DataModel} A new `DataModel` instance.\n\n@method splunkjs.Service.DataModels", "input": "JavaScript", "output": "function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.DataModel(this.service, props.name, entityNamespace, props);\n        }"}, {"instruction": "https://github.com/digi-trust/dt-cdn/wiki/Integration-Guide", "input": "JavaScript", "output": "function _getDigiTrustObject(key) {\n  function getDigiTrustId() {\n    let digiTrustUser = window.DigiTrust && (config.getConfig('digiTrustId') || window.DigiTrust.getUser({member: key}));\n    return (digiTrustUser && digiTrustUser.success && digiTrustUser.identity) || null;\n  }\n  let digiTrustId = getDigiTrustId();\n  // Verify there is an ID and this user has not opted out\n  if (!digiTrustId || (digiTrustId.privacy && digiTrustId.privacy.optout)) {\n    return null;\n  }\n  return digiTrustId;\n}"}, {"instruction": "<include src=\"assert.js\"> \nAlias for document.getElementById. Found elements must be HTMLElements.\n@param {string} id The ID of the element to find.\n@return {HTMLElement} The found element or null if not found.", "input": "JavaScript", "output": "function $(id) {\n  var el = document.getElementById(id);\n  return el ? assertInstanceof(el, HTMLElement) : null;\n}"}, {"instruction": "Retrieves help content vie the luis.json from\nthe arguments input by the user.\n\n@param args The arguments input by the user\n@returns {Promise<*>}1]", "input": "JavaScript", "output": "async function getHelpContents(args, output) {\n    if ('!' in args) {\n        return getAllCommands(process.stdout);\n    }\n\n    if (args._.length == 0) {\n        return getGeneralHelpContents(output);\n    }\n    else if (args._.length == 1) {\n        return getVerbHelp(args._[0], output);\n    } else if (args._.length >= 2) {\n        const operation = getOperation(args._[0], args._[1]);\n        if (operation) {\n            output.write(`${operation.description}\\n\\n`);\n            output.write(`Usage:\\n${chalk.cyan.bold(operation.command)}\\n\\n`);\n            return getHelpContentsForOperation(operation, output);\n        } else {\n            return getVerbHelp(args._[0], output);\n        }\n    }\n\n    return getGeneralHelpContents(output);\n}"}, {"instruction": "Walks through the call graph from a defined starting function, true if nodeCheck holds for every relevant node in the callgraph\n@callGraph {callGraph} As returned by buildGlobalFuncCallGraph\n@funcName {string} full qualified name of the starting function\n@context {Object} provides additional context information that can be used by the nodeCheck function\n@nodeCheck {(ASTNode, context) -> bool} applied on every relevant node in the call graph\n@return {bool} returns map from contract name to contract call graph", "input": "JavaScript", "output": "function analyseCallGraph (callGraph, funcName, context, nodeCheck) {\n  return analyseCallGraphInternal(callGraph, funcName, context, (a, b) => a || b, nodeCheck, {})\n}"}, {"instruction": "Closes the context menu of a column.\n\n@param {sap.ui.table.Table} oTable Instance of the table.\n@param {int} iColumnIndex The index of the column to close the context menu on.\n@see openContextMenu\n@see openColumnContextMenu\n@private", "input": "JavaScript", "output": "function(oTable, iColumnIndex) {\n\t\t\tif (!oTable ||\n\t\t\t\tiColumnIndex == null || iColumnIndex < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oColumns = oTable.getColumns();\n\t\t\tif (iColumnIndex >= oColumns.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oColumn = oColumns[iColumnIndex];\n\t\t\toColumn._closeMenu();\n\t\t}"}, {"instruction": "/*\nconst sqRootBiggest = compose(Math.max, Math.sqrt, Math.trunc);\nsqRootBiggest(10, 5); // 3\nsqRootBiggest(7, 0, 16); // 4", "input": "JavaScript", "output": "function compose(fn1, fn2 /*, fn3, etc */) {\n  if (!arguments.length) {\n    throw new Error(\n      'expected at least one (and probably more) function arguments'\n    );\n  }\n  var fns = arguments;\n\n  return function() {\n    var result = fns[0].apply(this, arguments);\n    var len = fns.length;\n    for (var i = 1; i < len; i++) {\n      result = fns[i].call(this, result);\n    }\n    return result;\n  };\n}"}, {"instruction": "Determines the nearest ancestor of a node that is scrollable.\n\nNOTE: This can be expensive if used repeatedly or on a node nested deeply.\n\n@param {?DOMNode} node Node from which to start searching.\n@return {?DOMWindow|DOMElement} Scroll parent of the supplied node.", "input": "JavaScript", "output": "function(node) {\n    if (!node) {\n      return null;\n    }\n    var ownerDocument = node.ownerDocument;\n    while (node && node !== ownerDocument.body) {\n      if (_isNodeScrollable(node, 'overflow') ||\n          _isNodeScrollable(node, 'overflowY') ||\n          _isNodeScrollable(node, 'overflowX')) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return ownerDocument.defaultView || ownerDocument.parentWindow;\n  }"}, {"instruction": "/* Given a comma-separated string of layer names, returns the layer objects corresponding to them.", "input": "JavaScript", "output": "function findLayers(layers, names) {\n  if (!defined(names)) {\n    // If a list of layers is not specified, we're using all layers.\n    return layers;\n  }\n  return names.split(\",\").map(function(id) {\n    return findLayer(layers, id);\n  });\n}"}, {"instruction": "Recursively dive()s every custom component in a wrapper until\nthe target component is found.\n\n@param {ShallowWrapper} wrapper A ShallowWrapper to search\n@param {ComponentType} target A react custom component that, when found, will end recursion\n@param {Adapter} adapter An Enzyme adapter\n@returns {ShallowWrapper|undefined} A ShallowWrapper for the target, or\nundefined if it can't be found", "input": "JavaScript", "output": "function deepRender(wrapper, target, adapter) {\n  const node = wrapper[NODE];\n  const element = node && adapter.nodeToElement(node);\n  if (wrapper.type() === target) {\n    return wrapper.dive();\n  }\n  if (element && isCustomComponentElement(element, adapter)) {\n    return deepRender(wrapper.dive(), target, adapter);\n  }\n  const children = wrapper.children();\n  for (let i = 0; i < children.length; i += 1) {\n    const found = deepRender(children.at(i), target, adapter);\n    if (typeof found !== 'undefined') {\n      return found;\n    }\n  }\n  return undefined;\n}"}, {"instruction": "*\n@method every([ms] = 1, [arg1], [arg2], ...)\n@returns Function\n@short Executes the function every `ms` milliseconds.\n@extra Returns a reference to itself. `every` uses `setTimeout`, which\nmeans that you are guaranteed a period of idle time equal to [ms]\nafter execution has finished. Compare this to `setInterval` which\nwill try to run a function every [ms], even when execution itself\ntakes up a portion of that time. In most cases avoiding `setInterval`\nis better as calls won't \"back up\" when the CPU is under strain,\nhowever this also means that calls are less likely to happen at\nexact intervals of [ms], so the use case here should be considered.\nAdditionally, `every` can curry arguments passed in after [ms], and\nalso be canceled with `cancel`.\n\n@example\n\nlogHello.every(1000)        -> logs every second\nlogArgs.every(1000, 'Hola') -> logs 'hola' every second\n\n@param {number} [ms]\n@param {any} [arg1]\n@param {any} [arg2]\n\n*", "input": "JavaScript", "output": "function(fn, ms, args) {\n    function execute () {\n      // Set the delay first here, so that cancel\n      // can be called within the executing function.\n      setDelay(fn, ms, execute);\n      fn.apply(fn, args);\n    }\n    setDelay(fn, ms, execute);\n    return fn;\n  }"}, {"instruction": "Move the file or directory at the given path to a system dependent trash\nlocation, calling back asynchronously with a possibly null FileSystemError\nstring. Directories will be moved even when non-empty.\n\n@param {string} path\n@param {function(string)=} callback", "input": "JavaScript", "output": "function moveToTrash(path, callback) {\n        appshell.fs.moveToTrash(path, function (err) {\n            callback(_mapError(err));\n        });\n    }"}, {"instruction": "Insert a screen reader hint for a comment\n\n@param {String} documentId The ID of the document\n@param {String} annotationId The ID of tha assocated annotation\n@param {Object} comment The comment to insert a hint for", "input": "JavaScript", "output": "function insertComment(documentId, annotationId, comment) {\n  let list = document.querySelector(`pdf-annotate-screenreader-comment-list-${annotationId}`);\n  let promise;\n\n  if (!list) {\n    promise = renderScreenReaderComments(documentId, annotationId, []).then(() => {\n      list = document.querySelector(`pdf-annotate-screenreader-comment-list-${annotationId}`);\n      return true;\n    });\n  } else {\n    promise = Promise.resolve(true);\n  }\n\n  promise.then(() => {\n    insertScreenReaderComment(comment);\n  });\n}"}, {"instruction": "The 64-bit implementation of the NIST specified Sigma1 function\n\n@private\n@param {Int_64} x The 64-bit integer argument\n@return {Int_64} The NIST specified output of the function", "input": "JavaScript", "output": "function sigma1_64(x)\n\t{\n\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),\n\t\t\trotr41 = rotr_64(x, 41);\n\n\t\treturn new Int_64(\n\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\n\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);\n\t}"}, {"instruction": "}}}", "input": "JavaScript", "output": "function parseKey(e) //{{{\n      {\n        if (e.ctrlKey || e.metaKey) {\n          return true;\n        }\n        shift_down = e.shiftKey ? true : false;\n        var nudge = shift_down ? 10 : 1;\n\n        switch (e.keyCode) {\n        case 37:\n          doNudge(e, -nudge, 0);\n          break;\n        case 39:\n          doNudge(e, nudge, 0);\n          break;\n        case 38:\n          doNudge(e, 0, -nudge);\n          break;\n        case 40:\n          doNudge(e, 0, nudge);\n          break;\n        case 27:\n          if (options.allowSelect) Selection.release();\n          break;\n        case 9:\n          return true;\n        }\n\n        return false;\n      }"}, {"instruction": "Function: getName\n\nReturns the name for the given value.", "input": "JavaScript", "output": "function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}"}, {"instruction": "first pass to try to find fields that will need to be sorted in-memory", "input": "JavaScript", "output": "function getBasicInMemoryFields(index, selector, userFields) {\n\n  userFields = sortFieldsByIndex(userFields, index);\n\n  // check if any of the user selectors lose precision\n  var needToFilterInMemory = false;\n  for (var i = 0, len = userFields.length; i < len; i++) {\n    var field = userFields[i];\n    if (needToFilterInMemory || !checkFieldInIndex(index, field)) {\n      return userFields.slice(i);\n    }\n    if (i < len - 1 && userOperatorLosesPrecision(selector, field)) {\n      needToFilterInMemory = true;\n    }\n  }\n  return [];\n}"}, {"instruction": "Transform start/end and route into series of lines\n@param {g.point} sourcePoint start point\n@param {g.point} targetPoint end point\n@param {g.point[]} route optional list of route\n@return {g.line[]} [description]", "input": "JavaScript", "output": "function createLines(sourcePoint, targetPoint, route) {\n        // make a flattened array of all points\n        var points = [].concat(sourcePoint, route, targetPoint);\n        return points.reduce(function(resultLines, point, idx) {\n            // if there is a next point, make a line with it\n            var nextPoint = points[idx + 1];\n            if (nextPoint != null) {\n                resultLines[idx] = g.line(point, nextPoint);\n            }\n            return resultLines;\n        }, []);\n    }"}, {"instruction": "Retrieve the value of an individual preference.\n\n@param {string} prefName\nThe preference to get the value of.\n@param {boolean/number/string} defaultValue\nThe default value if preference cannot be found.\n@param {boolean/number/string} defaultBranch\nIf true the value will be read from the default branch (optional)\n@param {string} interfaceType\nInterface to use for the complex value (optional)\n(nsILocalFile, nsISupportsString, nsIPrefLocalizedString)\n\n@return The value of the requested preference\n@type boolean/int/string/complex", "input": "JavaScript", "output": "function preferences_getPref(prefName, defaultValue, defaultBranch,\n                                         interfaceType) {\n    try {\n      branch = defaultBranch ? this.defaultPrefBranch : this.prefBranch;\n\n      // If interfaceType has been set, handle it differently\n      if (interfaceType != undefined) {\n        return branch.getComplexValue(prefName, interfaceType);\n      }\n\n      switch (typeof defaultValue) {\n        case ('boolean'):\n          return branch.getBoolPref(prefName);\n        case ('string'):\n          return branch.getCharPref(prefName);\n        case ('number'):\n          return branch.getIntPref(prefName);\n        default:\n          return undefined;\n      }\n    } catch(e) {\n      return defaultValue;\n    }\n  }"}, {"instruction": "mirror jQuery#val functionality: reads opearte on first match, write operates on all matches", "input": "JavaScript", "output": "function val(newVal) {\n      var query;\n\n      if (!arguments.length) {\n        ttEach(this.first(), function(t) { query = t.getVal(); });\n        return query;\n      }\n\n      else {\n        ttEach(this, function(t) { t.setVal(newVal); });\n        return this;\n      }\n    }"}, {"instruction": "Compare this specificity to another.\n@param {Specificity} other The other specificity to compare to.\n@return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.\n@method compare", "input": "JavaScript", "output": "function(other) {\n        var comps = [\"a\", \"b\", \"c\", \"d\"],\n            i, len;\n\n        for (i=0, len=comps.length; i < len; i++) {\n            if (this[comps[i]] < other[comps[i]]) {\n                return -1;\n            } else if (this[comps[i]] > other[comps[i]]) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }"}, {"instruction": "Returns a list of elements that have had polymer-elements created but\nare not yet ready to register. The list is an array of element definitions.", "input": "JavaScript", "output": "function() {\n      var e$ = [];\n      for (var i=0, l=elements.length, e; (i<l) && \n          (e=elements[i]); i++) {\n        if (e.__queue && !e.__queue.flushable) {\n          e$.push(e);\n        }\n      }\n      return e$;\n    }"}, {"instruction": "convert relative path to absolute path.", "input": "JavaScript", "output": "function convert( name, _path, contents ) {\n    var rDefine = /(define\\s*\\(\\s*('|\").*?\\2\\s*,\\s*\\[)([\\s\\S]*?)\\]/ig,\n        rDeps = /('|\")(.*?)\\1/g,\n        root = _path.substr( 0, _path.length - name.length - 3 ),\n        dir = path.dirname( _path ),\n        m, m2, deps, dep, _path2;\n\n    contents = contents.replace( rDefine, function( m, m1, m2, m3 ) {\n        return m1 + m3.replace( rDeps, function( m, m1, m2 ) {\n            m2 = path.join( dir, m2 );\n            m2 = path.relative( root, m2 );\n\n            m2 = m2.replace(/\\\\/g, '/');\n            return m1 + m2 + m1;\n        }) + ']';\n    });\n\n    return contents;\n}"}, {"instruction": "Parses a JSON string into a Javascript object.\n@function\n@param {String} string\n@returns {Object}", "input": "JavaScript", "output": "function(string) {\n            if (window.JSON && window.JSON.parse) {\n                $.parseJSON = window.JSON.parse;\n            } else {\n                // Should only be used by IE8 in non standards mode\n                $.parseJSON = function(string) {\n                    /*jshint evil:true*/\n                    //eslint-disable-next-line no-eval\n                    return eval('(' + string + ')');\n                };\n            }\n            return $.parseJSON(string);\n        }"}, {"instruction": "client.getNodeServiceEvents\n\n@description retrieve a list of events associated with the activity\nbetween the node and the load balancer\n\n@param {Object}          loadBalancer      the loadBalancer or loadBalancerId\n@param {function}        callback", "input": "JavaScript", "output": "function (loadBalancer, callback) {\n    var self = this,\n        loadBalancerId =\n          loadBalancer instanceof lb.LoadBalancer ? loadBalancer.id : loadBalancer;\n\n    self._request({\n      path: urlJoin(_urlPrefix, loadBalancerId, 'nodes', 'events')\n    }, function (err, body) {\n      return err\n        ? callback(err)\n        : callback(err, body.nodeServiceEvents);\n    });\n  }"}, {"instruction": "/////////////////////////////////////// Hidden Functions /////////////////////////////////////////", "input": "JavaScript", "output": "function checkCozyMode(oRef) {\n\t\tif (!oRef) {\n\t\t\treturn false;\n\t\t}\n\t\toRef = oRef.$ ? oRef.$() : jQuery(oRef);\n\t\treturn oRef.closest(\".sapUiSizeCompact,.sapUiSizeCondensed,.sapUiSizeCozy\").hasClass(\"sapUiSizeCozy\");\n\t}"}, {"instruction": "Get the next sibling within a container. This will walk up the\nDOM if a node's siblings have been exhausted.\n\n@param {DOMElement|DOMTextNode} node\n@return {?DOMElement|DOMTextNode}", "input": "JavaScript", "output": "function getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}"}, {"instruction": "Creates a new extension installer dialog.\n@constructor\n@param {{install: function(url), cancel: function()}} installer The installer backend to use.", "input": "JavaScript", "output": "function InstallExtensionDialog(installer, _isUpdate) {\n        this._installer = installer;\n        this._state = STATE_CLOSED;\n        this._installResult = null;\n        this._isUpdate = _isUpdate;\n\n        // Timeout before we allow user to leave STATE_INSTALL_CANCELING without waiting for a resolution\n        // (per-instance so we can poke it for unit testing)\n        this._cancelTimeout = 10 * 1000;\n    }"}, {"instruction": "eslint-disable-next-line no-unused-vars", "input": "JavaScript", "output": "function renderComponent() {\n    var svg = d3.select('svg');\n    svg.select('.horizontal')\n      .datum([0.15, 0.85])\n      .call(horizontalSvgLine);\n    svg.select('.vertical')\n      .datum([0.2, 0.4, 0.6, 0.8])\n      .call(verticalSvgLine);\n\n    var canvas = d3.select('canvas').node();\n    var ctx = canvas.getContext('2d');\n    horizontalCanvasLine.context(ctx)([0.15, 0.85]);\n    verticalCanvasLine.context(ctx)([0.2, 0.4, 0.6, 0.8]);\n}"}, {"instruction": "Computes the maximum sum of values for any date\n\n@return {Number} Max value", "input": "JavaScript", "output": "function getMaxValueByDate() {\n            let keys = uniq(data.map(o => o.name));\n            let maxValueByDate = d3Array.max(dataByDateFormatted, function(d){\n                let vals = keys.map((key) => d[key]);\n\n                return d3Array.sum(vals);\n            });\n\n            return maxValueByDate;\n        }"}, {"instruction": "A Value is a comma-delimited list of Expressions In a Rule, a Value represents everything after the `:`, and before the `;`.", "input": "JavaScript", "output": "function() {\n                var e, expressions = [];\n\n                e = $(this.expression);\n                while (e) {\n                    expressions.push(e);\n                    if (! $(',')) { break; }\n                    e = $(this.expression);\n                }\n\n                if (expressions.length > 1) {\n                    return new tree.Value(expressions.map(function(e) {\n                        return e.value[0];\n                    }));\n                } else if (expressions.length === 1) {\n                    return new tree.Value(expressions);\n                }\n            }"}, {"instruction": "Loads configuration data from a JSON file into this config object.\n@note Loading configuration will reset all existing configuration\non the object.\n@!macro nobrowser\n@param path [String] the path relative to your process's current\nworking directory to load configuration from.\n@return [AWS.Config] the same configuration object", "input": "JavaScript", "output": "function loadFromPath(path) {\n    this.clear();\n\n    var options = JSON.parse(AWS.util.readFileSync(path));\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);\n    var chain = new AWS.CredentialProviderChain();\n    chain.providers.unshift(fileSystemCreds);\n    chain.resolve(function (err, creds) {\n      if (err) throw err;\n      else options.credentials = creds;\n    });\n\n    this.constructor(options);\n\n    return this;\n  }"}, {"instruction": "Annoying method to copy nodes to an array, thanks to IE", "input": "JavaScript", "output": "function(nodes) {\n      nodes = nodes || [];\n\n      var results = [];\n      for (var i = 0; i < nodes.length; ++i) {\n        results.push(nodes.item(i));\n      }\n      return results;\n    }"}, {"instruction": "@\n#.destroy\n@comp Crafty Core\n@kind Method\n\n@sign public this .destroy(void)\nWill remove all event listeners and delete all properties as well as removing from the stage", "input": "JavaScript", "output": "function() {\n        //remove all event handlers, delete from entities\n        this.each(function() {\n            var comp;\n            this.trigger(\"Remove\");\n            for (var compName in this.__c) {\n                comp = components[compName];\n                if (comp && \"remove\" in comp) comp.remove.call(this, true);\n\n                // update map from component to (entityId -> entity)\n                delete compEntities[compName][this[0]];\n            }\n            this._unbindAll();\n            delete entities[this[0]];\n        });\n    }"}, {"instruction": "\u83b7\u53d6\u6587\u7ae0\u7684\u7b80\u4ecb\uff0c\u5373\u524d5\u884c\u5185\u5bb9\n@param  {String} post \u6587\u7ae0\u5185\u5bb9\n@param  {Number} line \u884c\u6570\uff0c\u9ed8\u8ba4\u4e3a10\u884c\n@return {String}      \u6587\u7ae0\u7b80\u4ecb", "input": "JavaScript", "output": "function getPostIntro(body) {\n  let isBlankReg = /^\\s+$/,\n    start = 0;\n  return body.split('\\n').filter((item) => {\n    if (start < 5 && !isBlankReg.test(item)) {\n      start++;\n      return true;\n    }\n  }).join('\\n')\n}"}, {"instruction": "/*!\n@param {Object} easingObject\n@param {Object} tokenData", "input": "JavaScript", "output": "function collapseEasingObject (easingObject, tokenData) {\n      Tweenable.each(tokenData, function (prop) {\n        var currentProp = tokenData[prop];\n        var chunkNames = currentProp.chunkNames;\n        var chunkLength = chunkNames.length;\n        var composedEasingString = '';\n\n        for (var i = 0; i < chunkLength; i++) {\n          composedEasingString += ' ' + easingObject[chunkNames[i]];\n          delete easingObject[chunkNames[i]];\n        }\n\n        easingObject[prop] = composedEasingString.substr(1);\n      });\n    }"}, {"instruction": "Encrypt plaintext input.\n@param  {Uint8Array} plaintext   The cleartext input to be encrypted\n@param  {Uint8Array} nonce       The nonce (16 bytes)\n@param  {Uint8Array} adata       Associated data to sign\n@returns {Promise<Uint8Array>}    The ciphertext output", "input": "JavaScript", "output": "async function(plaintext, nonce, adata) {\n      const [\n        omacNonce,\n        omacAdata\n      ] = await Promise.all([\n        omac(zero, nonce),\n        omac(one, adata)\n      ]);\n      const ciphered = await ctr(plaintext, omacNonce);\n      const omacCiphered = await omac(two, ciphered);\n      const tag = omacCiphered; // Assumes that omac(*).length === tagLength.\n      for (let i = 0; i < tagLength; i++) {\n        tag[i] ^= omacAdata[i] ^ omacNonce[i];\n      }\n      return util.concatUint8Array([ciphered, tag]);\n    }"}, {"instruction": "isn't it redundant? app.listen(8888);", "input": "JavaScript", "output": "function writeToDisk(dataURL, fileName) {\n    var fileExtension = fileName.split('.').pop(),\n        fileRootNameWithBase = './uploads/' + fileName,\n        filePath = fileRootNameWithBase,\n        fileID = 2,\n        fileBuffer;\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n        filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension;\n        fileID += 1;\n    }\n\n    dataURL = dataURL.split(',').pop();\n    fileBuffer = new Buffer(dataURL, 'base64');\n    fs.writeFileSync(filePath, fileBuffer);\n\n    console.log('filePath', filePath);\n}"}, {"instruction": "Initialize the generator\n\n@param {Output}\n@return {Output}", "input": "JavaScript", "output": "function onInit(output) {\n    return Promise(output)\n    .then(prepareI18n)\n    .then(prepareResources)\n    .then(copyPluginAssets);\n}"}, {"instruction": "Get the bounding box (width, height, x and y) for the element", "input": "JavaScript", "output": "function () {\r\n\t\tvar bBox,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\trotation = this.rotation,\r\n\t\t\trad = rotation * deg2rad;\r\n\r\n\t\ttry { // fails in Firefox if the container has display: none\r\n\t\t\t// use extend because IE9 is not allowed to change width and height in case\r\n\t\t\t// of rotation (below)\r\n\t\t\tbBox = extend({}, this.element.getBBox());\r\n\t\t} catch (e) {\r\n\t\t\tbBox = { width: 0, height: 0 };\r\n\t\t}\r\n\t\twidth = bBox.width;\r\n\t\theight = bBox.height;\r\n\r\n\t\t// adjust for rotated text\r\n\t\tif (rotation) {\r\n\t\t\tbBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));\r\n\t\t\tbBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));\r\n\t\t}\r\n\r\n\t\treturn bBox;\r\n\t}"}, {"instruction": "Returns true if a swipe happened after the last touchstart event fired on\nevent.target.\n\nWe need to differentiate a swipe from a tap before we let the event open\nor close the tooltip. A swipe is when a touchmove (scroll) event happens\non the body between the touchstart and the touchend events of an element.\n\n@param {object} target The HTML element that may have triggered the swipe\n@returns {boolean}\n@protected", "input": "JavaScript", "output": "function(target) {\n\t\t\n\t\tvar swiped = false;\n\t\t\n\t\tfor (var i = this.__touchEvents.length - 1; i >= 0; i--) {\n\t\t\t\n\t\t\tvar e = this.__touchEvents[i];\n\t\t\t\n\t\t\tif (e.type == 'touchmove') {\n\t\t\t\tswiped = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\te.type == 'touchstart'\n\t\t\t\t&&\ttarget === e.target\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn swiped;\n\t}"}, {"instruction": "Retrieves the smallest horizontal (degrees=0) rectangle which contains\nthis rectangle.\n@returns {OpenSeadragon.Rect}", "input": "JavaScript", "output": "function() {\n        if (this.degrees === 0) {\n            return this.clone();\n        }\n        var topLeft = this.getTopLeft();\n        var topRight = this.getTopRight();\n        var bottomLeft = this.getBottomLeft();\n        var bottomRight = this.getBottomRight();\n        var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n        var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n        return new $.Rect(\n            minX,\n            minY,\n            maxX - minX,\n            maxY - minY);\n    }"}, {"instruction": "Helper method for unwrapping jQuery/DOM/string elements\n@param callback", "input": "JavaScript", "output": "function(a) {\n            if ( !a ) {\n                return null;\n            } else if ( a instanceof jQuery ) {\n                return a[0];\n            } else if ( a instanceof Object ) {\n                return a;\n            }\n            return $('#'+a)[0];\n        }"}, {"instruction": "Returns a view limiter that prevents zooming in beyond the given\nresolution.\n@param {number} size The image width in pixels.\n@return {FlatViewLimiter}", "input": "JavaScript", "output": "function(size) {\n    return function limitResolution(params) {\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n      var width = params.width;\n      var minZoom = pixelRatio() * width / size;\n      params.zoom = clamp(params.zoom, minZoom, Infinity);\n      return params;\n    };\n  }"}, {"instruction": "Fetch the model from the server. If the server's representation of the\nmodel differs from its current attributes, they will be overriden,\ntriggering a <code>\"change\"</code> event.\n@param {Object} fetchOptions Optional options to set 'keys',\n'include' and 'includeACL' option.\n@param {AuthOptions} options\n@return {Promise} A promise that is fulfilled when the fetch\ncompletes.", "input": "JavaScript", "output": "function(fetchOptions = {}, options) {\n        var self = this;\n        var request = _request(\n          'classes',\n          this.className,\n          this.id,\n          'GET',\n          transformFetchOptions(fetchOptions),\n          options\n        );\n        return request.then(function(response) {\n          const fetchedAttrs = self.parse(response);\n          if (!fetchOptions.keys) self._cleanupUnsetKeys(fetchedAttrs);\n          self._finishFetch(fetchedAttrs, true);\n          return self;\n        });\n      }"}, {"instruction": "A mixin for all OData V4 bindings.\n\n@alias sap.ui.model.odata.v4.ODataBinding\n@mixin", "input": "JavaScript", "output": "function ODataBinding() {\n\t\t// maps a canonical path of a quasi-absolute or relative binding to a cache object that may\n\t\t// be reused\n\t\tthis.mCacheByResourcePath = undefined;\n\t\tthis.oCachePromise = SyncPromise.resolve();\n\t\tthis.mCacheQueryOptions = undefined;\n\t\t// used to create cache only for the latest call to #fetchCache\n\t\tthis.oFetchCacheCallToken = undefined;\n\t\t// change reason to be used when the binding is resumed\n\t\tthis.sResumeChangeReason = ChangeReason.Change;\n\t}"}, {"instruction": "i18n: - from .library/appData/manifest/sap.ui5/library/i18n - from library resources (if \"messagebundle.properties\" exists)", "input": "JavaScript", "output": "function i18n() {\n\t\t\t\tconst i18nElement = findChild(libraryAppData, \"i18n\");\n\t\t\t\tif ( i18nElement ) {\n\t\t\t\t\tconst i18n = i18nElement._;\n\t\t\t\t\tif ( i18n === \"false\" ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if ( i18n === \"true\" ) {\n\t\t\t\t\t\treturn \"messagebundle.properties\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn i18n;\n\t\t\t\t\t}\n\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property taken from .library appData: '%s'\", library.i18n);\n\t\t\t\t} else {\n\t\t\t\t\tif ( libBundle.findResource(\"messagebundle.properties\") != null ) {\n\t\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property determined from resources: '%s'\", library.i18n);\n\t\t\t\t\t\treturn \"messagebundle.properties\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "success handler", "input": "JavaScript", "output": "function() {\n          socket[options.decodedPropertyName] = decoded;\n          socket.emit('authenticated');\n          if (server.$emit) {\n            server.$emit('authenticated', socket);\n          } else {\n            //try getting the current namespace otherwise fallback to all sockets.\n            var namespace = (server.nsps && socket.nsp &&\n                             server.nsps[socket.nsp.name]) ||\n                            server.sockets;\n\n            // explicit namespace\n            namespace.emit('authenticated', socket);\n          }\n        }"}, {"instruction": "Private function, gets a Unicode code point from a JavaScript UTF-16 string handling surrogate pairs appropriately", "input": "JavaScript", "output": "function codePointAt(str, idx){\n\t\tif(idx === undefined){\n\t\t\tidx = 0;\n\t\t}\n\t\tvar code = str.charCodeAt(idx);\n\n\t\t// if a high surrogate\n\t\tif (0xD800 <= code && code <= 0xDBFF && \n\t\t\tidx < str.length - 1){\n\t\t\tvar hi = code;\n\t\t\tvar low = str.charCodeAt(idx + 1);\n\t\t\tif (0xDC00 <= low && low <= 0xDFFF){\n\t\t\t\treturn ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t\t\t}\n\t\t\treturn hi;\n\t\t}\n\t\t\n\t\t// if a low surrogate\n\t\tif (0xDC00 <= code && code <= 0xDFFF &&\n\t\t\tidx >= 1){\n\t\t\tvar hi = str.charCodeAt(idx - 1);\n\t\t\tvar low = code;\n\t\t\tif (0xD800 <= hi && hi <= 0xDBFF){\n\t\t\t\treturn ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n\t\t\t}\n\t\t\treturn low;\n\t\t}\n\t\t\n\t\t//just return the char if an unmatched surrogate half or a \n\t\t//single-char codepoint\n\t\treturn code;\n\t}"}, {"instruction": "Gathers angular-wrapped versions of each element\n@param elements\n@returns {{}}", "input": "JavaScript", "output": "function getAngularElements (elements) {\n    var obj = {};\n    for (var key in elements) {\n      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);\n    }\n    return obj;\n  }"}, {"instruction": "Snatch wysiwyg command.\n@param {{command: object}} commandWrapper - wysiwyg command wrapper\n@private", "input": "JavaScript", "output": "function _snatchWysiwygCommand(commandWrapper) {\n  const {command} = commandWrapper;\n\n  if (!command.isWWType()) {\n    return;\n  }\n\n  switch (command.getName()) {\n  case 'AddRow':\n    commandWrapper.command = wwAddRow;\n    break;\n  case 'AddCol':\n    commandWrapper.command = wwAddCol;\n    break;\n  case 'RemoveRow':\n    commandWrapper.command = wwRemoveRow;\n    break;\n  case 'RemoveCol':\n    commandWrapper.command = wwRemoveCol;\n    break;\n  case 'AlignCol':\n    commandWrapper.command = wwAlignCol;\n    break;\n  default:\n  }\n}"}, {"instruction": "Takes a model, and searches for a value by the property\n@param  {Object} model     The dictionary to search against\n@param  {String} property  A path within a dictionary (i.e. 'window.location.href')\n@param  {Object} data      Additional information from the get request that is\npassed to functions in the child model\n@return {Promise}", "input": "JavaScript", "output": "function resolveValue(model, property) {\n  var unwrappedContext = typeof model[property] === 'function' ? model[property]() : model[property];\n  return Postmate.Promise.resolve(unwrappedContext);\n}"}, {"instruction": "image-specific code (override to implement e.g. Canvas or SVG tile layer)", "input": "JavaScript", "output": "function (tilePoint) {\n\t\treturn L.Util.template(this._url, L.extend({\n\t\t\ts: this._getSubdomain(tilePoint),\n\t\t\tz: tilePoint.z,\n\t\t\tx: tilePoint.x,\n\t\t\ty: tilePoint.y\n\t\t}, this.options));\n\t}"}, {"instruction": "Initialize a new Record.\nYou could either use\n```js\nvar records = new Model();\n```\n@or\n```js\nvar records = Model.new();\n```\n\n@class Model\n@method new\n@param {object} attributes - Optional: The records attributes\n\n@return {Record}", "input": "JavaScript", "output": "function(data, castType) {\n    data = data || {}\n\n    // if it's already a record\n    if (data.definition && data._exists) {\n      if (this.add) this.add(data)\n      return data\n    }\n\n    if (this.chained) {\n      var record = this.model.new()\n      if (this.definition.temporary) {\n        record.definition = this.definition\n      }\n\n      record.__chainedModel = this\n      record.set(data, castType)\n\n      this.add(record)\n\n      return record\n    }\n\n    return new this(data, castType)\n  }"}, {"instruction": "Checks for an active Internet connection by doing a DNS lookup of Microsoft.com.\n\n@return {Promise.<boolean>} - True if lookup succeeded (or if we skip the test)", "input": "JavaScript", "output": "function checkInternetConnection () {\n  return new Promise((resolve) => {\n    require('dns').lookup('microsoft.com', (err) => {\n      if (err && err.code === 'ENOTFOUND') {\n        resolve(false)\n      } else {\n        resolve(true)\n      }\n    })\n  })\n}"}, {"instruction": "Clear all elements.\n\n@private", "input": "JavaScript", "output": "function () {\n        var elMap = this._elMap;\n        elMap.each(function (el) {\n            removeEl(el, elMap);\n        });\n        this._elMap = zrUtil.createHashMap();\n    }"}, {"instruction": "Resets the given <code>List</code> selection\nand scrolls to the top.", "input": "JavaScript", "output": "function() {\n\t\t\t\tvar oSelectedItem = this._getList().getSelectedItem();\n\n\t\t\t\tif (oSelectedItem) {\n\t\t\t\t\tthis._toggleListItem(oSelectedItem, false);\n\t\t\t\t\tsetTimeout(this._scrollPageTo.bind(this, 0, 0), 0);\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "has length 2", "input": "JavaScript", "output": "function(module, shim) {\n\t\t\tif ( Array.isArray(shim) ) {\n\t\t\t\tshim = { deps : shim };\n\t\t\t}\n\t\t\tmShims[module + '.js'] = shim;\n\t\t}"}, {"instruction": "Writes the additonal style HTML into the rendermanger (see renderStep)", "input": "JavaScript", "output": "function(rm, sId, iIdx){\n\t\trm.write(\"<div\");\n\t\trm.writeAttribute(\"id\", sId + \"-add\" + iIdx);\n\t\trm.addClass(\"sapUiRoadMapStepAdd\" + iIdx);\n\t\trm.writeClasses();\n\t\trm.write(\"></div>\");\n\t}"}, {"instruction": "# last :: Foldable f => f a -> Maybe a . . Returns Just the last element of the given structure if the structure . contains at least one element; Nothing otherwise. . . ```javascript . > S.last ([1, 2, 3]) . Just (3) . . > S.last ([]) . Nothing . . > S.last (Cons (1) (Cons (2) (Cons (3) (Nil)))) . Just (3) . . > S.last (Nil) . Nothing . ```", "input": "JavaScript", "output": "function last(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray (foldable)) {\n      return foldable.length > 0 ? Just (foldable[foldable.length - 1])\n                                 : Nothing;\n    }\n    return Z.reduce (function(_, x) { return Just (x); }, Nothing, foldable);\n  }"}, {"instruction": "list-specific helper function to set nested children's `level` prop automatically", "input": "JavaScript", "output": "function addNestedLevelProps(childNode, level) {\n  let currentLevel = level;\n\n  if (childNode.tagName) {\n    childNode.level = currentLevel;\n  }\n\n  return currentLevel;\n}"}, {"instruction": "Adds an InfoWindow to the map\n@param infoWindowOptions:google.maps.InfoWindowOptions (optional)\n@param callback:function(InfoWindow:google.maps.InfoWindowOptions) (optional)\n@return $(google.maps.InfoWindowOptions)\n@see http://code.google.com/intl/sv-SE/apis/maps/documentation/javascript/reference.html#InfoWindowOptions", "input": "JavaScript", "output": "function(a, b) {\n            var c = new google.maps.InfoWindow(a);\n            this._call(b, c);\n            return $(c);\n        }"}, {"instruction": "get returns the value of the given key. If that value is undefined, it returns optionalDefaultValue instead.", "input": "JavaScript", "output": "function(key, optionalDefaultValue) {\n\t\tvar data = this.storage.read(this._namespacePrefix + key)\n\t\treturn this._deserialize(data, optionalDefaultValue)\n\t}"}, {"instruction": "Sticky Sidebar Plugin Defintion.\n@param {Object|String} - config", "input": "JavaScript", "output": "function _jQueryPlugin(config){\n      return this.each(function(){\n        var $this = plugin(this),\n          data = plugin(this).data(DATA_NAMESPACE);\n\n          if( ! data ){\n            data = new StickySidebar(this, typeof config == 'object' && config);\n            $this.data(DATA_NAMESPACE, data);\n          }\n\n          if( 'string' === typeof config){\n            if (data[config] === undefined && ['destroy', 'updateSticky'].indexOf(config) === -1)\n              throw new Error('No method named \"'+ config +'\"');\n\n            data[config]();\n          }\n      });\n    }"}, {"instruction": "Manage the codecasting stream. Wait for code events (for each panel) then\nupdate the appropriate panel", "input": "JavaScript", "output": "function codecastStream() {\n    if (!(jsbin && jsbin.panels && jsbin.panels.panels)) return;\n    var editors = jsbin.panels.panels;\n\n    function setCode(event) {\n      var panelId = event.type;\n      if (!editors[panelId]) return;\n      var cursor = editors[panelId].editor.getCursor();\n      editors[panelId].setCode(event.data);\n      editors[panelId].editor.setCursor(cursor);\n    }\n\n    // Update the url when the revision is bumped\n    es.addEventListener('bump-revision', function (event) {\n      window.location.pathname = cleanPath(event.data) + '/edit';\n    });\n    // on data, update the panels, which will cause an automatic render\n    es.addEventListener('css', setCode);\n    es.addEventListener('javascript', setCode);\n    es.addEventListener('html', setCode);\n  }"}, {"instruction": "gets an iframes document in a cross browser compatible manner", "input": "JavaScript", "output": "function getiframeDocument($iframe) {\n            var iframeDoc = $iframe[0].contentWindow || $iframe[0].contentDocument;\n            if (iframeDoc.document) {\n                iframeDoc = iframeDoc.document;\n            }\n            return iframeDoc;\n        }"}, {"instruction": "hide dom", "input": "JavaScript", "output": "function hideDom(path){\n        var arrElements = document.querySelectorAll(path);\n        var element;\n        for(var i=0,len=arrElements.length;i<len;i++){\n            element = arrElements[i];\n            element._lastDispaly = element.style.display;\n            element.style.display = 'none';\n        }\n    }"}, {"instruction": "Turns off the event handlers for a given event, optionally for a specific preference\nor a specific handler function.\n\n@param {string} event Name of the event for which to turn off listening\n@param {string|Function} preferenceID Name of a specific preference or the handler function\n@param {?Function} handler Specific handler which should stop being notified", "input": "JavaScript", "output": "function (event, preferenceID, handler) {\n            if (typeof preferenceID === \"function\") {\n                handler = preferenceID;\n                preferenceID = null;\n            }\n\n            if (preferenceID) {\n                var pref = this.getPreference(preferenceID);\n                pref.off(event, handler);\n            } else {\n                this._off_internal(event, handler);\n            }\n        }"}, {"instruction": "Get a list of valid query sort inputs.\n@param model: A mongoose model object.\n@param logger: A logging object.\n@returns {Array}: A list of fields.", "input": "JavaScript", "output": "function(model, logger) {\n    // This line has to come first\n    validationHelper.validateModel(model, logger)\n    const Log = logger.bind()\n\n    let sortableFields = this.getReadableFields(model, Log)\n\n    for (let i = sortableFields.length - 1; i >= 0; i--) {\n      let descendingField = '-' + sortableFields[i]\n      sortableFields.splice(i, 0, descendingField)\n    }\n\n    return sortableFields\n  }"}, {"instruction": "Remember\n\n@param {Object} options\n@return {Remember}\n@api public", "input": "JavaScript", "output": "function Remember(options) {\n  if(!(this instanceof Remember)) return new Remember(options);\n  options = options || {};\n  this.excepts = [];\n  this.ids = {};\n  var self = this;\n\n  // localstorage namespace\n  this.namespace = options.namespace || 'remember:';\n\n  // pull from storage\n  this.pull();\n\n  this.oninput = bind(this, this.input);\n  this.onselect = bind(this, this.select);\n\n  // bindings\n  delegate.bind(document, inputs, 'input', this.oninput);\n  delegate.bind(document, buttons, 'click', this.onselect);\n}"}, {"instruction": "Deep merge two objects.\n@param target\n@param ...sources", "input": "JavaScript", "output": "function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}"}, {"instruction": "Action creator for document change event. Used to create action objects\nto be passed to dispatch.\n@param  {Object} change - Document change object from Firebase callback\n@param  {Object} [originalMeta={}] - Original meta data of action\n@return {Object}                   [description]", "input": "JavaScript", "output": "function docChangeEvent(change, originalMeta = {}) {\n  const meta = { ...cloneDeep(originalMeta), path: change.doc.ref.path };\n  if (originalMeta.subcollections && !originalMeta.storeAs) {\n    meta.subcollections[0] = { ...meta.subcollections[0], doc: change.doc.id };\n  } else {\n    meta.doc = change.doc.id;\n  }\n  return {\n    type: changeTypeToEventType[change.type] || actionTypes.DOCUMENT_MODIFIED,\n    meta,\n    payload: {\n      data: change.doc.data(),\n      ordered: { oldIndex: change.oldIndex, newIndex: change.newIndex },\n    },\n  };\n}"}, {"instruction": "Transform url-key names into something more presentable\n@param key\n@returns {string}", "input": "JavaScript", "output": "function getKeyName(key) {\n    if (key.indexOf(\"ui\") > -1) {\n        if (key === \"ui\") {\n            return \"UI\";\n        }\n        if (key === \"ui-external\") {\n            return \"UI External\";\n        }\n    }\n    return key.substr(0, 1).toUpperCase() + key.substring(1);\n}"}, {"instruction": "@name Client.getSubZones\n@description gets a list of the subzones for a provided zone\n\n@param {object|Number}     zone          the zone of the record to query for\n@param {Function}          callback      handles the callback of your api call", "input": "JavaScript", "output": "function(zone, callback) {\n    var self = this,\n        zoneId = zone instanceof dns.Zone ? zone.id : zone;\n\n    var requestOptions = {\n      path: urlJoin(_urlPrefix, zoneId, 'subdomains'),\n      method: 'GET'\n    };\n\n    self._request(requestOptions, function(err, body, res) {\n      return err\n        ? callback(err)\n        : callback(null, body.domains.map(function (result) {\n        return new dns.Zone(self, result);\n      }), res);\n    });\n  }"}, {"instruction": "/* See if an element is within eruda.", "input": "JavaScript", "output": "function exports(el) {\n  let parentNode = el.parentNode\n\n  if (!parentNode) return false\n\n  while (parentNode) {\n    parentNode = parentNode.parentNode\n    if (parentNode && parentNode.id === 'eruda') return true\n  }\n\n  return false\n}"}, {"instruction": "Log when a file changes\n@param {BrowserSync} bs\n@param data", "input": "JavaScript", "output": "function(bs, data) {\n        if (canLogFileChange(bs, data)) {\n            if (data.path[0] === \"*\") {\n                return logger.info(\n                    \"{cyan:Reloading files that match: {magenta:%s\",\n                    data.path\n                );\n            }\n\n            logger.info(\n                \"{cyan:File event [\" + data.event + \"] : {magenta:%s\",\n                data.path\n            );\n        }\n    }"}, {"instruction": "/*------------------------------------------------------------------------ \nPicks the layout engine from an array of guesses.\n\n@private\n@param {Array} guesses An array of guesses.\n@returns {null|string} The detected layout engine.", "input": "JavaScript", "output": "function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }"}, {"instruction": "Copyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n \nClass: mxTooltipHandler\n\nGraph event handler that displays tooltips. <mxGraph.getTooltip> is used to\nget the tooltip for a cell or handle. This handler is built-into\n<mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n\nExample:\n\n(code>\nnew mxTooltipHandler(graph);\n(end)\n\nConstructor: mxTooltipHandler\n\nConstructs an event handler that displays tooltips with the specified\ndelay (in milliseconds). If no delay is specified then a default delay\nof 500 ms (0.5 sec) is used.\n\nParameters:\n\ngraph - Reference to the enclosing <mxGraph>.\ndelay - Optional delay in milliseconds.", "input": "JavaScript", "output": "function mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n}"}, {"instruction": "/*\nAuthor: Zion Orent <zorent@ics.com>\nCopyright (c) 2015 Intel Corporation.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "input": "JavaScript", "output": "function exit()\n{\n\tconsole.log(\"Exiting\");\n\n\tif (myLEDController_obj)\n\t{\n\t\t// clear the bits we set earlier\n\t\tmyLEDController_obj.ledFullOff(3, false);\n\t\tmyLEDController_obj.ledFullOn(4, false);\n\t}\n\tmyLEDController_obj = null;\n\tif (LEDController_lib)\n\t{\n\t\tLEDController_lib.cleanUp();\n\t\tLEDController_lib = null;\n\t}\n\tprocess.exit(0);\n}"}, {"instruction": "Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists", "input": "JavaScript", "output": "function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}"}, {"instruction": "Track textures used by material components, so that they can be safely\ndisposed when no longer in use. Textures must be registered here, and not\nthrough registerMaterial(), because textures may not be attached at the\ntime the material is registered.\n\n@param {Event} e", "input": "JavaScript", "output": "function (e) {\n    if (!this.textureCounts[e.detail.texture.uuid]) {\n      this.textureCounts[e.detail.texture.uuid] = 0;\n    }\n    this.textureCounts[e.detail.texture.uuid]++;\n  }"}, {"instruction": "Returns a new Summary with a part inserted at given index\n\n@param {Summary} summary\n@param {Part} part\n@param {Number} index\n@return {Summary}", "input": "JavaScript", "output": "function insertPart(summary, part, index) {\n    part = SummaryPart(part);\n\n    var parts = summary.getParts().insert(index, part);\n    return indexLevels(summary.set('parts', parts));\n}"}, {"instruction": "Exports the passed entities to JSON.\n@param passedConfiguration the object having the keys:\n- entities: the entity objects to export (key: entity name, value: the entity),\n- forceNoFiltering: whether to filter out unchanged entities,\n- application:\n- forSeveralApplications: whether more than one application have to be generated,\n- name: application base name,\n- type: application type\n@returns The exported entities.", "input": "JavaScript", "output": "function exportEntities(passedConfiguration) {\n  init(passedConfiguration);\n  createJHipsterJSONFolder(\n    passedConfiguration.application.forSeveralApplications ? configuration.application.name : ''\n  );\n  if (!configuration.forceNoFiltering) {\n    filterOutUnchangedEntities();\n  }\n  if (shouldFilterOutEntitiesBasedOnMicroservice()) {\n    filterOutEntitiesByMicroservice();\n  }\n  writeEntities(passedConfiguration.application.forSeveralApplications ? configuration.application.name : '');\n  return Object.values(configuration.entities);\n}"}, {"instruction": "returns the number of digits of precision after the decimal point optionally accepts a maximum number, after which point it will stop looking and return the max", "input": "JavaScript", "output": "function(num, max) {\n            max = max || Infinity;\n            var precision = 0;\n\n            while(precision < max && num.toFixed(precision) !== num.toString()) {\n                precision += 1;\n            }\n\n            return precision;\n        }"}, {"instruction": "Stops event observing for a particular event handler\n@method stopObserving\n@depracated Since 0.8.34. Use `off` instead.\n@param {String} eventName\n@param {Function} handler", "input": "JavaScript", "output": "function(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    if (this.__eventListeners[eventName]) {\n      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n    }\n  }"}, {"instruction": "curry : ((a, b, c) -> d) -> a -> b -> c -> d", "input": "JavaScript", "output": "function curry(fn) {\n  return function(...xs) {\n    const args =\n      xs.length ? xs : [ undefined ]\n\n    if(args.length < fn.length) {\n      return curry(Function.bind.apply(fn, [ null ].concat(args)))\n    }\n\n    const val = args.length === fn.length\n      ? fn.apply(null, args)\n      : args.reduce(applyCurry, fn)\n\n    if(isFunction(val)) {\n      return curry(val)\n    }\n\n    return val\n  }\n}"}, {"instruction": "Update the site\n\n@param {string} siteId\n@param {Object} manifest", "input": "JavaScript", "output": "async function _updateSite(siteId, tree, manifest, content) {\n  const endpoint = url.resolve(apiURL, `/sites/${siteId}`);\n  const body = { tree, content, manifest };\n  const response = await got.post(endpoint, { body, json: true, headers: _bearer() });\n  return response.body.site;\n}"}, {"instruction": "Remove animator\n@param {clay.animate.Animator} animator", "input": "JavaScript", "output": "function (animator) {\n        var clips = animator.getClips();\n        for (var i = 0; i < clips.length; i++) {\n            this.removeClip(clips[i]);\n        }\n        animator.animation = null;\n    }"}, {"instruction": "Returns number representation of object's complexity\n@method complexity\n@return {Number} complexity", "input": "JavaScript", "output": "function() {\n      return this.paths.reduce(function(total, path) {\n        return total + ((path && path.complexity) ? path.complexity() : 0);\n      }, 0);\n    }"}, {"instruction": "render html from uml\n@param {string} umlCode - plant uml code text\n@returns {string} - rendered html", "input": "JavaScript", "output": "function plantUMLReplacer(umlCode) {\n    let renderedHTML;\n\n    try {\n      if (!plantumlEncoder) {\n        throw new Error('plantuml-encoder dependency required');\n      }\n      renderedHTML = `<img src=\"${rendererURL}${plantumlEncoder.encode(umlCode)}\" />`;\n    } catch (err) {\n      renderedHTML = `Error occurred on encoding uml: ${err.message}`;\n    }\n\n    return renderedHTML;\n  }"}, {"instruction": "Function comparing an object's properties to a given descriptive\nobject.\n\n@param  {object} object      - The object to compare.\n@param  {object} description - The description's mapping.\n@return {boolean}            - Whether the object matches the description.", "input": "JavaScript", "output": "function compare(object, description) {\n  let ok = true,\n      k;\n\n  // If we reached here via a recursive call, object may be undefined because\n  // not all items in a collection will have the same deep nesting structure.\n  if (!object)\n    return false;\n\n  for (k in description) {\n    if (type.object(description[k])) {\n      ok = ok && compare(object[k], description[k]);\n    }\n    else if (type.array(description[k])) {\n      ok = ok && !!~description[k].indexOf(object[k]);\n    }\n    else {\n      if (object[k] !== description[k])\n        return false;\n    }\n  }\n\n  return ok;\n}"}, {"instruction": "DeleteMany function exposed as a mongoose wrapper.\n@param model: A mongoose model.\n@param payload: Either an array of ids or an array of objects containing an id and a \"hardDelete\" flag.\n@param Log: A logging object.\n@returns {object} A promise returning true if the delete succeeds.\n@private", "input": "JavaScript", "output": "function _deleteMany(model, payload, Log) {\n  let request = { payload: payload }\n  return _deleteManyHandler(model, request, Log)\n}"}, {"instruction": "The non-streamed request handler is only for the cases where neither the request or response can have streams. In this case, a req.stream indicates that the request is fragmented across multiple frames.", "input": "JavaScript", "output": "function RequestCallbackHandler(callback, thisp) {\n    var self = this;\n    self.callback = callback;\n    self.thisp = thisp || self;\n}"}, {"instruction": "Compares the given values using <code>===</code> and <code>></code>.\n\n@param {any} vValue1\nthe first value to compare\n@param {any} vValue2\nthe second value to compare\n@return {int}\nthe result of the compare: <code>0</code> if the values are equal, <code>-1</code> if the\nfirst value is smaller, <code>1</code> if the first value is larger, <code>NaN</code> if\nthey cannot be compared", "input": "JavaScript", "output": "function simpleCompare(vValue1, vValue2) {\n\t\tif (vValue1 === vValue2) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (vValue1 === null || vValue2 === null\n\t\t\t\t|| vValue1 === undefined || vValue2 === undefined) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn vValue1 > vValue2 ? 1 : -1;\n\t}"}, {"instruction": "private", "input": "JavaScript", "output": "function() {\n        this._containerInnerSize = new $.Point(\n            Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),\n            Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))\n        );\n    }"}, {"instruction": "\u83b7\u53d6\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u7236\u8f88\u8282\u70b9\n@param {*} item\n@param {*} uncheckableItemValues", "input": "JavaScript", "output": "function getParents(item: Object) {\n    let parents = [];\n\n    if (!item.parent) {\n      return parents;\n    }\n\n    parents.push(item.parent);\n    parents = parents.concat(getParents(item.parent));\n\n    return parents;\n  }"}, {"instruction": "Copies properties of `source` to `object`.\n\n@private\n@param {Object} source The object to copy properties from.\n@param {Array} props The property identifiers to copy.\n@param {Object} [object={}] The object to copy properties to.\n@param {Function} [customizer] The function to customize copied values.\n@returns {Object} Returns `object`.", "input": "JavaScript", "output": "function copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      _baseAssignValue(object, key, newValue);\n    } else {\n      _assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}"}, {"instruction": "Sort children nodes\n\n@param {TreeNode[]}               children children of node to be sorted\n@param {string | function | null} sort sort method\nSee SunburstSeries.js for details.", "input": "JavaScript", "output": "function sort(children, sortOrder) {\n    if (typeof sortOrder === 'function') {\n        return children.sort(sortOrder);\n    }\n    else {\n        var isAsc = sortOrder === 'asc';\n        return children.sort(function (a, b) {\n            var diff = (a.getValue() - b.getValue()) * (isAsc ? 1 : -1);\n            return diff === 0\n                ? (a.dataIndex - b.dataIndex) * (isAsc ? -1 : 1)\n                : diff;\n        });\n    }\n}"}, {"instruction": "function generateTemplateSource(html, editor, name) { var code = null; try { code = window.reactTemplates.convertTemplateToReact(html.trim().replace(/\\r/g, ''), {modules: 'none', name: name}); clearMessage(editor); } catch (e) { if (e.name === 'RTCodeError') { //index: -1 line: -1 message: \"Document should have a root element\" name: \"RTCodeError\" editor.annotate({line: e.line, message: e.message, index: e.index}); } else { editor.annotate({line: 1, message: e.message}); } //showMessage(editor, msg); console.log(e); } return code; }", "input": "JavaScript", "output": "function showMessage(editor, msg) {\n        if (editor && editor.showMessage) {\n            editor.annotate({line: 1, message: msg})\n        }\n    }"}, {"instruction": "Returns an object of show and hide triggers.\n\nIf a trigger is supplied,\nit is used to show the tooltip; otherwise, it will use the `trigger`\noption passed to the `$tooltipProvider.options` method; else it will\ndefault to the trigger supplied to this directive factory.\n\nThe hide trigger is based on the show trigger. If the `trigger` option\nwas passed to the `$tooltipProvider.options` method, it will use the\nmapped trigger from `triggerMap` or the passed trigger if the map is\nundefined; otherwise, it uses the `triggerMap` value of the show\ntrigger; else it will just use the show trigger.", "input": "JavaScript", "output": "function getTriggers ( trigger ) {\n        var show = trigger || options.trigger || defaultTriggerShow;\n        var hide = triggerMap[show] || show;\n        return {\n          show: show,\n          hide: hide\n        };\n      }"}, {"instruction": "Helper functions needed in wait*() methods. Casts timeout argument to integer and checks if next step\nfunction is really a function and if it has been given (if required - depending on isThenRequired flag).\n\n@param   Number   timeout        The max amount of time to wait, in milliseconds\n@param   Function then           Next step to process (optional or required, depending on isThenRequired flag)\n@param   String   methodName     Name of the method, inside of which the helper has been called\n@param   Number   defaultTimeout The default max amount of time to wait, in milliseconds (optional)\n@param   Boolean  isThenRequired Determines if the next step function should be considered as required\n@returns Number", "input": "JavaScript", "output": "function getTimeoutAndCheckNextStepFunction(timeout, then, methodName, defaultTimeout, isThenRequired) {\n    if (isThenRequired || then) {\n        var isFunction = utils.isFunction(then); // Optimization to perform \"isFunction\" check only once.\n\n        if (isThenRequired && !isFunction) {\n            throw new CasperError(methodName + \"() needs a step function\");\n        } else if (then && !isFunction) {\n            throw new CasperError(methodName + \"() next step definition must be a function\");\n        }\n    }\n\n    timeout = ~~timeout || ~~defaultTimeout;\n    if (timeout < 0) {\n        throw new CasperError(methodName + \"() only accepts an integer >= 0 as a timeout value\");\n    }\n\n    return timeout;\n}"}, {"instruction": "Create an interpolation binding with 4 expressions.", "input": "JavaScript", "output": "function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    var different = bindingUpdated4(v0, v1, v2, v3);\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +\n            suffix :\n        NO_CHANGE;\n}"}, {"instruction": "this function can be outsourced in future when the ComponentMetadata is not used anymore and the new Application manifest is used - but for now we keep it as it will be one of the common use cases to have the classical ComponentMetadata and this should be transformed into the new manifest structure for compatibility converter for array with string values to object", "input": "JavaScript", "output": "function(a, fnCallback) {\n\t\t\tvar o = {};\n\t\t\tif (a) {\n\t\t\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\t\t\tvar oValue = a[i];\n\t\t\t\t\tif (typeof oValue === \"string\") {\n\t\t\t\t\t\to[oValue] = typeof fnCallback === \"function\" && fnCallback(oValue) || {};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn o;\n\t\t}"}, {"instruction": "PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END", "input": "JavaScript", "output": "function distinctUntilKeyChanged(key, compare) {\n    return Object(_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__[\"distinctUntilChanged\"])(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}"}, {"instruction": "Apply median filter.\nWhen used without parameters the default window is 3x3.\n@param {Number} [size=3] square mask size: size x size\n@returns {Sharp}\n@throws {Error} Invalid parameters", "input": "JavaScript", "output": "function median (size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw new Error('Invalid median size ' + size);\n  }\n  return this;\n}"}, {"instruction": "We create a Comment node for CSS comments `/* */`, but keep the LeSS comments `//` silent, by just skipping over them.", "input": "JavaScript", "output": "function () {\n                var comment;\n\n                if (input.charAt(i) !== '/') { return; }\n\n                if (input.charAt(i + 1) === '/') {\n                    return new(tree.Comment)($re(/^\\/\\/.*/), true, i, env.currentFileInfo);\n                }\n                comment = $re(/^\\/\\*(?:[^*]|\\*+[^\\/*])*\\*+\\/\\n?/);\n                if (comment) {\n                    return new(tree.Comment)(comment, false, i, env.currentFileInfo);\n                }\n            }"}, {"instruction": "Reports `import`, `export`, `as`, and `from` keywords of a given node if\nusage of spacing around those keywords is invalid.\n\nThis rule handles the `*` token in module declarations.\n\nimport*as A from \"./a\"; /*error Expected space(s) after \"import\".\nerror Expected space(s) before \"as\".\n\n@param {ASTNode} node - A node to report.\n@returns {void}", "input": "JavaScript", "output": "function checkSpacingForModuleDeclaration(node) {\n            const firstToken = sourceCode.getFirstToken(node);\n\n            checkSpacingBefore(firstToken, PREV_TOKEN_M);\n            checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n            if (node.type === \"ExportDefaultDeclaration\") {\n                checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n            }\n\n            if (node.source) {\n                const fromToken = sourceCode.getTokenBefore(node.source);\n\n                checkSpacingBefore(fromToken, PREV_TOKEN_M);\n                checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n            }\n        }"}, {"instruction": "Prefill customer fields based on URL query string", "input": "JavaScript", "output": "function (suppliedConfig, urlParams) {\n    $.each(suppliedConfig.customer_fields, function (key) {\n      if (!urlParams['customer.' + key]) return\n      suppliedConfig.customer_fields[key].prefilled = urlParams['customer.' + key];\n    });\n    return suppliedConfig\n  }"}, {"instruction": "the function is used when no update function is given", "input": "JavaScript", "output": "function defaultUpdateFunction(instance, data) {\n    if (instance.isMatreshkaArray) {\n        instance.recreate(data);\n    } else if (instance.isMatreshkaObject) {\n        instance.setData(data, { replaceData: true });\n    } else {\n        // for other objects just extend them with given data\n        nofn.assign(instance, data);\n    }\n}"}, {"instruction": "/* jshint ignore:start \nInitialize the V1 version of Pricing\n\n@constructor Twilio.Pricing.V1\n\n@property {Twilio.Pricing.V1.MessagingList} messaging - messaging resource\n@property {Twilio.Pricing.V1.PhoneNumberList} phoneNumbers -\nphoneNumbers resource\n@property {Twilio.Pricing.V1.VoiceList} voice - voice resource\n\n@param {Twilio.Pricing} domain - The twilio domain\n /* jshint ignore:end", "input": "JavaScript", "output": "function V1(domain) {\n  Version.prototype.constructor.call(this, domain, 'v1');\n\n  // Resources\n  this._messaging = undefined;\n  this._phoneNumbers = undefined;\n  this._voice = undefined;\n}"}, {"instruction": "The same as <code>find()</code> method, but restricts matched result\nto <code>tag</code> type\n@param {String} text\n@param {Number} pos\n@returns {Object}", "input": "JavaScript", "output": "function(text, pos) {\n\t\t\tvar result = this.find(text, pos);\n\t\t\tif (result && result.type == 'tag') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}"}, {"instruction": "Get coordinates of a rectangle's lower right corner from its top points\nand its lower left corner.\n\n@param  {object} A rectangle defined by two points (x1, y1) and (x2, y2).\n@param  {object} A corner's coordinates (x, y).\n@return {object} Coordinates of the corner (x, y).", "input": "JavaScript", "output": "function(r, llc) {\n      return {\n        x: llc.x - r.x1 + r.x2,\n        y: llc.y - r.y1 + r.y2\n      };\n    }"}, {"instruction": "gets an legacy lambda name", "input": "JavaScript", "output": "function getLegacyName(tuple) {\n    if (Array.isArray(tuple)) {\n      var verb = tuple[0]\n      var path = getLegacyLambdaName(tuple[1])\n      return [`${app}-production-${verb}${path}`, `${app}-staging-${verb}${path}`]\n    }\n    else {\n      var path = getLegacyLambdaName(tuple)\n      return [`${app}-production-get${path}`, `${app}-staging-get${path}`]\n    }\n  }"}, {"instruction": "Check whether it should stop traversing ancestors at the given node.\n@param {ASTNode} node A node to check.\n@returns {boolean} `true` if it should stop traversing.", "input": "JavaScript", "output": "function isBoundary(node) {\n    const t = node.type;\n\n    return (\n        t === \"FunctionDeclaration\" ||\n        t === \"FunctionExpression\" ||\n        t === \"ArrowFunctionExpression\" ||\n\n        /*\n         * Don't report the await expressions on for-await-of loop since it's\n         * asynchronous iteration intentionally.\n         */\n        (t === \"ForOfStatement\" && node.await === true)\n    );\n}"}, {"instruction": "\"An editing host is a node that is either an Element whose isContentEditable property returns true but whose parent node is not an element or whose isContentEditable property returns false, or a Document whose designMode is enabled.\"", "input": "JavaScript", "output": "function isEditingHost(node) {\n        return node &&\n            ((node.nodeType == 9 && node.designMode == \"on\") ||\n            (isEditableElement(node) && !isEditableElement(node.parentNode)));\n    }"}, {"instruction": "*\nGets the selection state for a package/module.\nPackage names must end with a slash, modules must not.\nIf an ancestor package of the package/module does not exists, undefined is returned.\n@param {object} oObject The resulting hierarchy object\n@param {string} sName The name to be set in the hierarchy\n@returns {boolean} the selected state of a name", "input": "JavaScript", "output": "function (oObject, sName) {\n\t\t\tsName = sName === '/' ? '' : sName;\n\t\t\tvar aNames = sName.split('/'),\n\t\t\t\tl = aNames.length, i;\n\n\t\t\tif (l > 0) {\n\t\t\t\tfor (i = 0; oObject && i < l - 1; i++) {\n\t\t\t\t\tif (!oObject[aNames[i]]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\toObject = oObject[aNames[i]];\n\t\t\t\t}\n\t\t\t\treturn oObject[aNames[l - 1]];\n\t\t\t}\n\t\t}"}, {"instruction": "/* GLTFREGISTRY", "input": "JavaScript", "output": "function GLTFRegistry() {\n\n    var objects = {};\n\n    return    {\n\n        get: function ( key ) {\n\n            return objects[ key ];\n\n        },\n\n        add: function ( key, object ) {\n\n            objects[ key ] = object;\n\n        },\n\n        remove: function ( key ) {\n\n            delete objects[ key ];\n\n        },\n\n        removeAll: function () {\n\n            objects = {};\n\n        }\n\n    };\n\n}"}, {"instruction": "Populate `_hostNode` on the rendered host/text component with the given\nDOM node. The passed `inst` can be a composite.", "input": "JavaScript", "output": "function precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}"}, {"instruction": "Sets which annotations types are shown in the annotation ruler.  Annotations are visible by default.\n\n@param {Object} types a hash table mapping annotation type to visibility (i.e. AnnotationType.ANNOTATION_INFO -> true).\n@since 14.0", "input": "JavaScript", "output": "function(types) {\n\t\t\tif (textUtil.compare(this._annotationTypesVisible, types)) return;\n\t\t\tthis._annotationTypesVisible = types;\n\t\t\tif (!this._annotationRuler || !this._textView || !this._annotationRulerVisible) { return; }\n\t\t\tthis._annotationRuler.setAnnotationTypeVisible(types);\n\t\t\tthis._textView.redrawLines(0, undefined, this._annotationRuler);\n\t\t}"}, {"instruction": "/*\nGeoJSON MultiLineString Class\nnew MultiLineString();\nnew MultiLineString([ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]);\nnew MultiLineString({\ntype: \"MultiLineString\",\ncoordinates: [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]\n});", "input": "JavaScript", "output": "function MultiLineString(input){\n    if(input && input.type === \"MultiLineString\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.MultiLineString\";\n    }\n\n    this.type = \"MultiLineString\";\n  }"}, {"instruction": "show goto", "input": "JavaScript", "output": "function showGoto(targets) {\n        if (!_currentMenu) {\n            return;\n        }\n        _currentMenu.createBody();\n        var i;\n        for (i in targets) {\n            _currentMenu.addItem(targets[i]);\n        }\n        _currentMenu.show();\n    }"}, {"instruction": "Function to format an individual tick mark\n@private", "input": "JavaScript", "output": "function(time, index, ticks, format) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar formats = options.time.displayFormats;\n\t\tvar minorFormat = formats[me._unit];\n\t\tvar majorUnit = me._majorUnit;\n\t\tvar majorFormat = formats[majorUnit];\n\t\tvar majorTime = +adapter.startOf(time, majorUnit);\n\t\tvar majorTickOpts = options.ticks.major;\n\t\tvar major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n\t\tvar label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n\t\tvar tickOpts = major ? majorTickOpts : options.ticks.minor;\n\t\tvar formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n\n\t\treturn formatter ? formatter(label, index, ticks) : label;\n\t}"}, {"instruction": "Skip transition and create new iframe\n\n@param {Object} shell shell instance\n@param {Object} options\n@param {string} options.targetPageId targetPageId\n@param {Object} options.targetPageMeta pageMeta of target page\n@param {string} options.sourcePageId sourcePageId\n@param {Object} options.sourcePageMeta pageMeta of source page\n@param {boolean} options.newPage whether a new iframe should be created (false)\n@param {boolean} options.isForward whether transition direction is forward (true)\n@param {Function} options.onComplete complete callback", "input": "JavaScript", "output": "function skipTransitionAndCreate (shell, options) {\n  let {sourcePageId, targetPageId, onComplete} = options\n\n  hideAllIFrames()\n  fixRootPageScroll(shell, {sourcePageId, targetPageId})\n  onComplete && onComplete()\n\n  let iframe = getIFrame(targetPageId)\n  css(iframe, 'z-index', activeZIndex++)\n\n  shell.afterSwitchPage(options)\n}"}, {"instruction": "async strategy ensures processing order by chaining the callbacks", "input": "JavaScript", "output": "function asyncStrategy(node, oAggregation, mAggregations) {\n\t\t\tvar childNode,\n\t\t\t\tpChain = Promise.resolve(),\n\t\t\t\taChildPromises = [];\n\n\t\t\tfor (childNode = node.firstChild; childNode; childNode = childNode.nextSibling) {\n\t\t\t\tpChain = pChain.then(fnCallback.bind(null, node, oAggregation, mAggregations, childNode));\n\t\t\t\taChildPromises.push(pChain);\n\t\t\t}\n\t\t\treturn Promise.all(aChildPromises);\n\t\t}"}, {"instruction": "This method is like `_.forOwn` except that it iterates over elements\nof a `collection` in the opposite order.\n\n@static\n@memberOf _\n@category Objects\n@param {Object} object The object to iterate over.\n@param {Function} [callback=identity] The function called per iteration.\n@param {*} [thisArg] The `this` binding of `callback`.\n@returns {Object} Returns `object`.\n@example\n\n_.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\nconsole.log(key);\n});\n// => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'", "input": "JavaScript", "output": "function forOwnRight(object, callback, thisArg) {\n      var props = keys(object),\n          length = props.length;\n\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        var key = props[length];\n        if (callback(object[key], key, object) === false) {\n          break;\n        }\n      }\n      return object;\n    }"}, {"instruction": "It clones original object into the new one. It is necessary to retain the options information valid\nfor all nodes.\n@param original Object to clone\n@returns {Object} Cloned object", "input": "JavaScript", "output": "function (original) {\n                var clone = {};\n                var i, keys = Object.keys(original);\n\n                for (i = 0; i < keys.length; i++) {\n                    // copy each property into the clone\n                    clone[keys[i]] = original[keys[i]];\n                }\n\n                return clone;\n            }"}, {"instruction": "/* Is the given date in the accepted range?", "input": "JavaScript", "output": "function(inst, date) {\n\t\tvar yearSplit, currentYear,\n\t\t\tminDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\tmaxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\tminYear = null,\n\t\t\tmaxYear = null,\n\t\t\tyears = this._get(inst, \"yearRange\");\n\t\t\tif (years){\n\t\t\t\tyearSplit = years.split(\":\");\n\t\t\t\tcurrentYear = new Date().getFullYear();\n\t\t\t\tminYear = parseInt(yearSplit[0], 10);\n\t\t\t\tmaxYear = parseInt(yearSplit[1], 10);\n\t\t\t\tif ( yearSplit[0].match(/[+\\-].*/) ) {\n\t\t\t\t\tminYear += currentYear;\n\t\t\t\t}\n\t\t\t\tif ( yearSplit[1].match(/[+\\-].*/) ) {\n\t\t\t\t\tmaxYear += currentYear;\n\t\t\t\t}\n\t\t\t}\n\n\t\treturn ((!minDate || date.getTime() >= minDate.getTime()) &&\n\t\t\t(!maxDate || date.getTime() <= maxDate.getTime()) &&\n\t\t\t(!minYear || date.getFullYear() >= minYear) &&\n\t\t\t(!maxYear || date.getFullYear() <= maxYear));\n\t}"}, {"instruction": "PrivateFunction: _newXHR\n_Private_ helper function to create XMLHttpRequests.\n\nThis function creates XMLHttpRequests across all implementations.\n\nReturns:\nA new XMLHttpRequest.", "input": "JavaScript", "output": "function ()\r\n    {\r\n        var xhr = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest();\r\n            if (xhr.overrideMimeType) {\r\n                xhr.overrideMimeType(\"text/xml; charset=utf-8\");\r\n            }\r\n        } else if (window.ActiveXObject) {\r\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n\r\n        // use Function.bind() to prepend ourselves as an argument\r\n        xhr.onreadystatechange = this.func.bind(null, this);\r\n\r\n        return xhr;\r\n    }"}, {"instruction": "Constructs a rotation gesture recognizer.\n@alias RotationRecognizer\n@constructor\n@augments GestureRecognizer\n@classdesc A concrete gesture recognizer subclass that looks for two finger rotation gestures.\n@param {EventTarget} target The document element this gesture recognizer observes for mouse and touch events.\n@param {Function} callback An optional function to call when this gesture is recognized. If non-null, the\nfunction is called when this gesture is recognized, and is passed a single argument: this gesture recognizer,\ne.g., <code>gestureCallback(recognizer)</code>.\n@throws {ArgumentError} If the specified target is null or undefined.", "input": "JavaScript", "output": "function (target, callback) {\n            GestureRecognizer.call(this, target, callback);\n\n            // Intentionally not documented.\n            this._rotation = 0;\n\n            // Intentionally not documented.\n            this._offsetRotation = 0;\n\n            // Intentionally not documented.\n            this.referenceAngle = 0;\n\n            // Intentionally not documented.\n            this.interpretThreshold = 20;\n\n            // Intentionally not documented.\n            this.weight = 0.4;\n\n            // Intentionally not documented.\n            this.rotationTouches = [];\n        }"}, {"instruction": "Likewise, we want to know if a profile is specified early, in particular to save the window state data.", "input": "JavaScript", "output": "function profileFromArgs(args) {\n\tif (!args) return null;\n\tconst profileIndex = args.indexOf('--profile');\n\tif (profileIndex <= 0 || profileIndex >= args.length - 1) return null;\n\tconst profileValue = args[profileIndex + 1];\n\treturn profileValue ? profileValue : null;\n}"}, {"instruction": "Add command for bot to clear the room history (requires client reload).\ne.g. \"bot clr\" or \"@bot clear room\" or \"bot clr from June 3, 2018 17:30\".\n@param {Robot} robot The Hubot instance", "input": "JavaScript", "output": "function load (robot) {\n  robot.respond(/\\b(clean room|clr)( from (.*))?(\\.|!|)?$/i, async (res) => {\n    try {\n      const from = res.match[3] || 'May 19, 2015 04:36:09' // clear all if not given date\n      const oldest = new Date(from).toISOString()\n      const cleaned = await cleanRoomHistory(robot, res.message.user, oldest).catch()\n      if (typeof cleaned === 'undefined') {\n        res.reply(`Sorry, I'm afraid I can't do that.`)\n      }\n    } catch (err) {\n      res.reply(`That wasn't a valid date`)\n    }\n  })\n}"}, {"instruction": "Calculates the position of the fisrt/last step (with fix for Safari in RTL mode) to make the position and scroll calculations running (see comment on getRTLFactor for RTL behavior)", "input": "JavaScript", "output": "function(oRoadMap, bLast){\n\t\tvar iScrollWidth = oRoadMap.$(\"steparea\").get(0).scrollWidth;\n\t\tif (sap.ui.getCore().getConfiguration().getRTL() && Device.browser.webkit) {\n\t\t\treturn bLast ? 0 : ( -1) * iScrollWidth;\n\t\t}\n\t\treturn bLast ? iScrollWidth : 0;\n\t}"}, {"instruction": "@class StaticAsset\n@implements Asset\n@classdesc\n\nAn immutable {@link Asset} compatible with {@link WebGlStage} and\n{@link CssStage}.\n\n@param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} element The\nunderlying pixel source.\n@throws If the pixel source is unsupported.", "input": "JavaScript", "output": "function StaticAsset(element) {\n  var supported = false;\n  for (var type in propertyMap) {\n    if (global[type] && element instanceof global[type]) {\n      supported = true;\n      this._widthProp = propertyMap[type][0];\n      this._heightProp = propertyMap[type][1];\n      break;\n    }\n  }\n  if (!supported) {\n    throw new Error('Unsupported pixel source');\n  }\n\n  this._element = element;\n}"}, {"instruction": "Get the parent ES6 component node from the current scope\n\n@returns {ASTNode} component node, null if we are not in a component", "input": "JavaScript", "output": "function () {\n      let scope = context.getScope();\n      while (scope && scope.type !== 'class') {\n        scope = scope.upper;\n      }\n      const node = scope && scope.block;\n      if (!node || !utils.isES6Component(node)) {\n        return null;\n      }\n      return node;\n    }"}, {"instruction": "Adds two 64-bit numbers Like the original implementation, does not rely on 32-bit operations", "input": "JavaScript", "output": "function int64add(dst, x, y) {\n        var w0 = (x.l & 0xffff) + (y.l & 0xffff);\n        var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);\n        var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);\n        var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);\n        dst.l = (w0 & 0xffff) | (w1 << 16);\n        dst.h = (w2 & 0xffff) | (w3 << 16);\n      }"}, {"instruction": "Specify that only a page of the query result shall be returned. A page is\ndescribed by its boundaries, that are row numbers for the first and last\nrows in the query result to be returned.\n\n@param {Number}\nstart The first row of the query result to be returned.\nNumbering starts at 1. Passing null is equivalent to start\nwith the first row.\n@param {Number}\nend The last row of the query result to be returned. Passing\nnull is equivalent to get all rows up to the end of the query\nresult.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResultRequest#setResultPageBoundaries", "input": "JavaScript", "output": "function(start, end) {\n\t\t\tif (start != null && typeof start !== \"number\") {\n\t\t\t\tthrow \"Start value must be null or numeric\"; // TODO\n\t\t\t}\n\t\t\tif (end !== null && typeof end !== \"number\") {\n\t\t\t\tthrow \"End value must be null or numeric\"; // TODO\n\t\t\t}\n\n\t\t\tif (start == null) {\n\t\t\t\tstart = 1;\n\t\t\t}\n\n\t\t\tif (start < 1 || start > (end == null ? start : end)) {\n\t\t\t\tthrow \"Invalid values for requested page boundaries\"; // TODO\n\t\t\t}\n\n\t\t\tthis._iSkipRequestOption = (start > 1) ? start - 1 : null;\n\t\t\tthis._iTopRequestOption = (end != null) ? (end - start + 1) : null;\n\t\t}"}, {"instruction": "Message-Id header", "input": "JavaScript", "output": "function do_msgid_header (cb) {\n        const msgid = trans.header.get('message-id');\n        const mmatch = /@([^>]+)>/.exec(msgid);\n        if (mmatch) {\n            return plugin.do_lookups(connection, cb, mmatch[1], 'msgid');\n        }\n        cb();\n    }"}, {"instruction": "@private\nProcess and load the current theme into the editor\n\n@return {$.Promise} promise object resolved with the theme object and all\ncorresponding new css/less and scrollbar information", "input": "JavaScript", "output": "function loadCurrentTheme() {\n        var theme = getCurrentTheme();\n\n        var pending = theme && FileUtils.readAsText(theme.file)\n            .then(function (lessContent) {\n                return lessifyTheme(lessContent.replace(commentRegex, \"\"), theme);\n            })\n            .then(function (content) {\n                var result = extractScrollbars(content);\n                theme.scrollbar = result.scrollbar;\n                return result.content;\n            })\n            .then(function (cssContent) {\n                $(\"body\").toggleClass(\"dark\", theme.dark);\n                styleNode.text(cssContent);\n                return theme;\n            });\n\n        return $.when(pending);\n    }"}, {"instruction": "Issues a request to cancel a statement.\n\n@param {Object} statementContext\n@param {Object} statement\n@param {Function} callback", "input": "JavaScript", "output": "function sendCancelStatement(statementContext, statement, callback)\n{\n  var url;\n  var json;\n\n  // use different rest endpoints based on whether the statement id is available\n  if (statementContext.statementId)\n  {\n    url = '/queries/' + statementContext.statementId + '/abort-request';\n  }\n  else\n  {\n    url  = '/queries/v1/abort-request';\n    json =\n    {\n      requestId: statementContext.requestId\n    };\n  }\n\n  // issue a request to cancel the statement\n  statementContext.services.sf.request(\n  {\n    method   : 'POST',\n    url      : url,\n    json     : json,\n    callback : function(err)\n    {\n      // if a callback was specified, invoke it\n      if (Util.isFunction(callback))\n      {\n        callback(Errors.externalize(err), statement);\n      }\n    }\n  });\n}"}, {"instruction": "/*\noverwrite Labels isDisplayOnly function to use the editable property of the Form\nto determine the mode.\n\nIf DisplayOnly is set explicitly on the Label, this is used.", "input": "JavaScript", "output": "function _labelIsDisplayOnly(){\n\n\t\tif (this.getDisplayOnly) {\n\t\t\tif (!this.isPropertyInitial(\"displayOnly\")) {\n\t\t\t\treturn this.getDisplayOnly();\n\t\t\t}\n\n\t\t\tvar oFormElement = this.getParent();\n\t\t\tvar oFormContainer = oFormElement.getParent();\n\n\t\t\tif (oFormContainer) {\n\t\t\t\tvar oForm = oFormContainer.getParent();\n\n\t\t\t\tif (oForm) {\n\t\t\t\t\treturn !oForm.getEditable();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\n\t}"}, {"instruction": "hook for the deprecated property viewId on the route, will not prefix the id with the component\n\n@name sap.ui.core.routing.TargetCache#_getViewWithGlobalId\n@returns {*}\n@private\n \n@param {string} sName logs an error if it is empty or undefined\n@param {string} sType whether it's a 'View' or 'Component'\n@private", "input": "JavaScript", "output": "function (sName, sType) {\n\n\t\t\t\tif (!sName) {\n\t\t\t\t\tvar sMessage = \"A name for the \" + sType.toLowerCase() + \" has to be defined\";\n\t\t\t\t\tLog.error(sMessage, this);\n\t\t\t\t\tthrow Error(sMessage);\n\t\t\t\t}\n\n\t\t\t}"}, {"instruction": "`String.prototype.search` method https://tc39.github.io/ecma262/#sec-string.prototype.search", "input": "JavaScript", "output": "function search(regexp) {\n        var O = requireObjectCoercible(this);\n        var searcher = regexp == undefined ? undefined : regexp[SEARCH];\n        return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n      }"}, {"instruction": "Builds a function call graph for the current contracts.\nExample Contract call graph:\n\n{\n\"KingOfTheEtherThrone\": {\n\"contracts\": {...},                                        // Contract node as defined in abstractAstView.js\n\"functions\": {\n\"KingOfTheEtherThrone.claimThrone(string memory)\": {    // function in KingOfEtherThrone\n\"node\": {...},                                        // function node as defined in abstractAstView.js\n\"calls\": {                                            // list of full qualified function names which are called form this function\n}\n}\n}\n},\n\"foo\": {\n\"contract\": {...},           // Contract node as definded in abstractAstView.js\n\"functions\": {}             // map from full qualified function name to func node\n}\n}\n\n@contracts {list contracts} Expects as input the contract structure defined in abstractAstView.js\n@return {map (string -> Contract Call Graph)} returns map from contract name to contract call graph", "input": "JavaScript", "output": "function buildGlobalFuncCallGraph (contracts) {\n  var callGraph = {}\n  contracts.forEach((contract) => {\n    var filterNodes = (node) => { return common.isLocalCallGraphRelevantNode(node) || common.isExternalDirectCall(node) }\n    var getNodeIdent = (node) => { return common.getFullQualifiedFunctionCallIdent(contract.node, node) }\n    var getFunDefIdent = (funcDef) => { return common.getFullQuallyfiedFuncDefinitionIdent(contract.node, funcDef.node, funcDef.parameters) }\n\n    callGraph[common.getContractName(contract.node)] = { contract: contract, functions: buildLocalFuncCallGraphInternal(contract.functions, filterNodes, getNodeIdent, getFunDefIdent) }\n  })\n\n  return callGraph\n}"}, {"instruction": "A simple router function that does nothing but respond \"OK\". Can be used for load balancer health checks, for example.", "input": "JavaScript", "output": "function ping(req, res) {\n  if (url.parse(req.url).pathname == '/ping') {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('OK');\n    return true;\n  }\n  return false;\n}"}, {"instruction": "Private: Format a date according to the `weekday`, `day`, `month`, and `year` attribute values.  This doesn't use Intl.DateTimeFormat to avoid creating text in the user's language when the majority of the surrounding text is in English. There's currently no way to separate the language from the format in Intl.  el - The local-time element to format.  Returns a date String or null if no date formats are provided.", "input": "JavaScript", "output": "function formatDate(el: Element, date: Date) {\n  // map attribute values to strftime\n  const props = {\n    weekday: {\n      short: '%a',\n      long: '%A'\n    },\n    day: {\n      numeric: '%e',\n      '2-digit': '%d'\n    },\n    month: {\n      short: '%b',\n      long: '%B'\n    },\n    year: {\n      numeric: '%Y',\n      '2-digit': '%y'\n    }\n  }\n\n  // build a strftime format string\n  let format = isDayFirst() ? 'weekday day month year' : 'weekday month day, year'\n  for (const prop in props) {\n    const value = props[prop][el.getAttribute(prop)]\n    format = format.replace(prop, value || '')\n  }\n\n  // clean up year separator comma\n  format = format.replace(/(\\s,)|(,\\s$)/, '')\n\n  // squeeze spaces from final string\n  return strftime(date, format)\n    .replace(/\\s+/, ' ')\n    .trim()\n}"}, {"instruction": "Provides a cross-browser way to set a CSS value on a CSS declaration.\n@param {!CSSStyleDeclaration} cssStyle A CSS style object.\n@param {string} propName A property name.\n@param {string} sanitizedValue Sanitized value of the property to be set\non the CSS style object.\n@supported IE8 and newer.", "input": "JavaScript", "output": "function setCssProperty(cssStyle, propName, sanitizedValue) {\n  genericMethodCall(\n      Methods.SET_PROPERTY, cssStyle,\n      cssStyle.setProperty ? 'setProperty' : 'setAttribute',\n      [propName, sanitizedValue]);\n}"}, {"instruction": "Replace any characters that can't be sent on with an underscore", "input": "JavaScript", "output": "function sanitizeTags(value, telegraf) {\n  const blacklist = telegraf ? /:|\\|/g : /:|\\||@|,/g;\n  // Replace reserved chars with underscores.\n  return String(value).replace(blacklist, '_');\n}"}, {"instruction": "Checks whether or not there is a transition.\n\n@param styles The cached styles to use for the calculation. If null, getComputedStyle()\nwill be used.\n\n@returns {boolean} True if there is no transition/duration; false otherwise.", "input": "JavaScript", "output": "function noTransitionFound(styles) {\n          styles = styles || window.getComputedStyle(element[0]);\n\n          return styles.transitionDuration == '0s' || (!styles.transition && !styles.transitionProperty);\n        }"}, {"instruction": "/* eslint-disable-next-line no-unused-vars", "input": "JavaScript", "output": "function stylesheetOverride(stylesheet, props, themeData) {\n  return {\n    ...stylesheet,\n    pointerBorder: { fill: themeData[\"tooltip.backgroundColor\"] },\n    pointerBody: { fill: themeData[\"tooltip.backgroundColor\"] }\n  };\n}"}, {"instruction": "/* Event maniupluation\n================================================== Add an event", "input": "JavaScript", "output": "function(data) {\n\t\tvar unique_id = this.config.addEvent(data);\n\n\t\tvar n = this._getEventIndex(unique_id);\n\t\tvar d = this.config.events[n];\n\n\t\tthis._storyslider.createSlide(d, this.config.title ? n+1 : n);\n\t\tthis._storyslider._updateDrawSlides();\n\n\t\tthis._timenav.createMarker(d, n);\n\t\tthis._timenav._updateDrawTimeline(false);\n\n\t\tthis.fire(\"added\", {unique_id: unique_id});\n\t}"}, {"instruction": "Determine if provided node is the last of their parent block.\n@private\n@param {ASTNode} node - node to test\n@returns {boolean} True if `node` is last of their parent block.", "input": "JavaScript", "output": "function isLastNode(node) {\n            const token = sourceCode.getTokenAfter(node);\n\n            return !token || (token.type === \"Punctuator\" && token.value === \"}\");\n        }"}, {"instruction": "checks the given module's functions code for invalidContent returns an array which contains the functions with invalid content", "input": "JavaScript", "output": "function(oController, viewId, aInvalidContent, fnProcessInvalidFunction) {\n\t\t\t\tvar _aInvalidControllerFunctions = [];\n\t\t\t\tObject.keys(oController).forEach(function(sProtoKey) {\n\t\t\t\t\tvar sFnContent = oController[sProtoKey].toString().replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n\n\t\t\t\t\taInvalidContent.forEach(function(sInvalidContent) {\n\t\t\t\t\t\tif (sFnContent.indexOf(sInvalidContent) > 0) {\n\t\t\t\t\t\t\tfnProcessInvalidFunction(oController.getMetadata().getName(), sProtoKey, sInvalidContent, viewId);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\n\t\t\t\t});\n\t\t\t\treturn _aInvalidControllerFunctions;\n\t\t\t}"}, {"instruction": "/*\nrecursive function to get a dependencie Set which is ordered so that no depencies exist to a later on entry\n@return Set with all the dependencies.", "input": "JavaScript", "output": "function getAllDependencies(allVariables, currentKey, dependencies = new Set()) {\n\n    if (!allVariables[currentKey].dependencies.length) {\n\n        dependencies.add(`${currentKey}: ${allVariables[currentKey].value}`);\n        return Array.from(dependencies);\n    } else {\n\n        allVariables[currentKey].dependencies.forEach(dependecy => {\n            getAllDependencies(allVariables, dependecy, dependencies).forEach(newDependency => dependencies.add(newDependency));\n        });\n\n        dependencies.add(`${currentKey}: ${allVariables[currentKey].value}`);\n        return Array.from(dependencies);\n    }\n}"}, {"instruction": "PrivateFunction: _restartRequest\n_Private_ function to restart a request that is presumed dead.\n\nParameters:\n(Integer) i - The index of the request in the queue.", "input": "JavaScript", "output": "function (i)\r\n    {\r\n        var req = this._requests[i];\r\n        if (req.dead === null) {\r\n            req.dead = new Date();\r\n        }\r\n\r\n        this._processRequest(i);\r\n    }"}, {"instruction": "Strips the .ts or .tsx file extension from a path and returns the base filename.", "input": "JavaScript", "output": "function getBasename(relativePath) {\n    const mayBeSuffix = [\".ts\", \".tsx\", \".d.ts\"];\n    let mayBePath = relativePath;\n    mayBeSuffix.map(suffix => {\n        const tmpPath = path_1.default.basename(relativePath, suffix);\n        if (tmpPath.length < mayBePath.length) {\n            mayBePath = tmpPath;\n        }\n    });\n    // Return whichever path is shorter. If they're the same length then nothing was stripped.\n    return mayBePath;\n}"}, {"instruction": "Removes the given value from the history values.\n\n@private", "input": "JavaScript", "output": "function(sValue) {\n\t\t\tvar aHistory = this._initHistory();\n\t\t\tfor (var i = 0; i < aHistory.length; i++) {\n\t\t\t\tif (aHistory[i] == sValue) {\n\t\t\t\t\taHistory.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "scoped", "input": "JavaScript", "output": "function clear () {\n      if (!window.confirm(i18n('Are you certain you want to clear your draft?'))) {\n        return\n      }\n      textArea.value = ''\n      hasContent.set(!!textArea.value)\n      save()\n    }"}, {"instruction": "This class is used to maintain all the accessibility roles, tooltips, etc., needed for the ShellBar control life cycle.\n@alias sap/f/shellBar/Accessibility\n@since 1.64\n@private", "input": "JavaScript", "output": "function (oContext) {\n\t\tif (oContext) {\n\t\t\toControl = oContext;\n\t\t\toControl.addDelegate(this._controlDelegate, false, this);\n\t\t}\n\n\t\tthis.oRb = Core.getLibraryResourceBundle(\"sap.f\");\n\t}"}, {"instruction": "Converts the current instance to a Javascript date\n@return {Date}", "input": "JavaScript", "output": "function toJSDate() {\n      if (this.zone == ICAL.Timezone.localTimezone) {\n        if (this.isDate) {\n          return new Date(this.year, this.month - 1, this.day);\n        } else {\n          return new Date(this.year, this.month - 1, this.day,\n                          this.hour, this.minute, this.second, 0);\n        }\n      } else {\n        return new Date(this.toUnixTime() * 1000);\n      }\n    }"}, {"instruction": "Unhightlight the highlighted line", "input": "JavaScript", "output": "function() {\n\t\t\tvar annotationModel = this.getAnnotationModel();\n\t\t\tvar textModel = this.getModel();\n\t\t\tif (textModel.getBaseModel) {\n\t\t\t\ttextModel = textModel.getBaseModel();\n\t\t\t}\n\t\t\tvar type = AT.ANNOTATION_HIGHLIGHTED_LINE;\n\t\t\tvar annotations = annotationModel.getAnnotations(0, textModel.getCharCount());\n\t\t\tvar remove = null;\n\t\t\twhile (annotations.hasNext()) {\n\t\t\t\tvar annotation = annotations.next();\n\t\t\t\tif (annotation.type === type) {\n\t\t\t\t\tremove = annotation;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (remove) {\n\t\t\t\tannotationModel.removeAnnotation(remove);\n\t\t\t}\n\t\t}"}, {"instruction": "\u5c06\u4e24\u4e2a\u70b9\u5747\u5206\u6210count\u4e2a\u70b9", "input": "JavaScript", "output": "function _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index = void 0;\n  var t = 1 / (count + 1);\n  var formerEnd = _getSegmentPoints(former)[0];\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n  return result;\n}"}, {"instruction": "---------------------------------------------------------------------------", "input": "JavaScript", "output": "function replaceInFile (filename, regex, replacement) {\n    let contents = fs.readFileSync (filename, 'utf8')\n    const parts = contents.split (regex)\n    const newContents = parts[0] + replacement + parts[1]\n    fs.truncateSync (filename)\n    fs.writeFileSync (filename, newContents)\n}"}, {"instruction": "Binds swipe's moving event.\n\n@return {Void}", "input": "JavaScript", "output": "function bindSwipeMove() {\n      var _this2 = this;\n\n      Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n        _this2.move(event);\n      }, Glide.settings.throttle), capture);\n    }"}, {"instruction": "\u5220\u9664\u7701\u8282\u70b9\u4e0b\u6240\u6709\u7684\u5b50\u8282\u70b9\n\n@param {any} [data=[]]\n@returns", "input": "JavaScript", "output": "function removeChildren(data = []) {\n  const ds = cloneDeep(data);\n  ds.forEach((item) => {\n    if (item.children) delete item.children;\n  });\n  return ds;\n}"}, {"instruction": "Loads a configuration from a package.json file.\n@param {string} filePath The filename to load.\n@returns {Object} The configuration object from the file.\n@throws {Error} If the file cannot be read.\n@private", "input": "JavaScript", "output": "function loadPackageJSONConfigFile(filePath) {\n    debug(`Loading package.json config file: ${filePath}`);\n    try {\n        return loadJSONConfigFile(filePath).eslintConfig || null;\n    } catch (e) {\n        debug(`Error reading package.json file: ${filePath}`);\n        e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n        throw e;\n    }\n}"}, {"instruction": "The worker receives a message to load the index and to query the index", "input": "JavaScript", "output": "function handleMessage(message) {\n  var type = message.data.type;\n  var id = message.data.id;\n  var payload = message.data.payload;\n  switch(type) {\n    case 'load-index':\n      makeRequest(SEARCH_TERMS_URL, function(searchInfo) {\n        index = createIndex(loadIndex(searchInfo));\n        self.postMessage({type: type, id: id, payload: true});\n      });\n      break;\n    case 'query-index':\n      self.postMessage({type: type, id: id, payload: {query: payload, results: queryIndex(payload)}});\n      break;\n    default:\n      self.postMessage({type: type, id: id, payload: {error: 'invalid message type'}})\n  }\n}"}, {"instruction": "Function: removeAllStylenames\n\nRemoves all stylenames from the given style and returns the updated\nstyle.", "input": "JavaScript", "output": "function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t}"}, {"instruction": "Checks if value is not undefined, in which case the\nsetter function for a given property is called.\nReturns true if value is set, false otherwise.\n\n@private", "input": "JavaScript", "output": "function checkAndSetProperty(oControl, property, value) {\n\t\t\tif (value !== undefined) {\n\t\t\t\tvar fSetter = oControl['set' + capitalize(property)];\n\t\t\t\tif (typeof (fSetter) === \"function\") {\n\t\t\t\t\tfSetter.call(oControl, value);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}"}, {"instruction": "Convert object to meta by value.", "input": "JavaScript", "output": "function (obj) {\n  return Object.getOwnPropertyNames(obj).map(function (name) {\n    return {\n      name: name,\n      value: obj[name]\n    }\n  })\n}"}, {"instruction": "/* search in a sorted array.\n\nreturns the index of the last element for which func returns\ngreater than zero, or array.length if no such element exists.", "input": "JavaScript", "output": "function binarySearch(array, func) {\n    // min is inclusive, max exclusive.\n    let min = 0,\n        max = array.length;\n\n    while (min < max) {\n        const mid = (min + max) >> 1;\n        const res = func(array[mid]);\n        if (res > 0) {\n            // the element at 'mid' is too big; set it as the new max.\n            max = mid;\n        } else {\n            // the element at 'mid' is too small. 'min' is inclusive, so +1.\n            min = mid + 1;\n        }\n    }\n    // presumably, min==max now.\n    return min;\n}"}, {"instruction": "We set our dependencies as externals on our app bundler when developing (isDevelopment ? dependencies : []).forEach(function (dep) { appBundler.external(dep); }); The rebundle process", "input": "JavaScript", "output": "function () {\n\t\tvar start = Date.now();\n\t\tgutil.log('Building APP bundle');\n\t\tappBundler.bundle()\n\t\t\t.on('error', gutil.log)\n\t\t\t.pipe(source('main.js'))\n\t\t\t.pipe(gulpif(!isDevelopment, streamify(uglify())))\n\t\t\t.pipe(gulp.dest(configs.folders[options.environment]))\n\t\t\t.pipe(notify(function () {\n\t\t\t\tgutil.log('APP bundle built in ' + (Date.now() - start) + 'ms');\n\t\t\t}))\n\t\t\t.pipe(connect.reload());\n\t}"}, {"instruction": "Override the broken getFunctionName() method from JsUnit\nThis file must be loaded _after_ the jsunitCore.js", "input": "JavaScript", "output": "function getFunctionName(aFunction) {\n    var regexpResult = aFunction.toString().match(/function (\\w*)/);\n    if (regexpResult && regexpResult[1]) {\n        return regexpResult[1];\n    }\n    return 'anonymous';\n}"}, {"instruction": "request aborted", "input": "JavaScript", "output": "function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }"}, {"instruction": "Used to assert that actual matches expected value, where expected may be a function or a string.", "input": "JavaScript", "output": "function assertMatch(actual, expected, message) {\n  if (isRegExp(expected))\n    assert(expected.test(actual), message || `Expected \"${actual}\" to match \"${expected}\"`);\n  else if (typeof expected === 'function')\n    assert(expected(actual), message);\n  else\n    assert.deepEqual(actual, expected, message);\n}"}, {"instruction": "Running", "input": "JavaScript", "output": "function run() {\n\treturn Promise.resolve()\n\t\t.then(loadEnvFile)\n\t\t.then(loadConfigFile)\n\t\t.then(mergeOptions)\n\t\t.then(startBroker)\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tprocess.exit(1);\n\t\t});\n}"}, {"instruction": "get a list of pointers\n@returns {Array}     touchlist", "input": "JavaScript", "output": "function() {\n      var self = this;\n      var touchlist = [];\n\n      // we can use forEach since pointerEvents only is in IE10\n      Object.keys(self.pointers).sort().forEach(function(id) {\n        touchlist.push(self.pointers[id]);\n      });\n      return touchlist;\n    }"}, {"instruction": "Creates a catalog item from the supplied resource and adds it to the supplied parent if necessary..\n@private\n@param resource The Ckan resource\n@param rootCkanGroup The root group of all items in this Ckan hierarchy\n@param itemData The data of the item to build the catalog item from\n@param extras\n@param parent The parent group to add the item to once it's constructed - set this to rootCkanGroup for flat hierarchies.\n@returns {CatalogItem} The catalog item added, or undefined if no catalog item was added.", "input": "JavaScript", "output": "function addItem(resource, rootCkanGroup, itemData, extras, parent) {\n  var item =\n    rootCkanGroup.terria.catalog.shareKeyIndex[\n      parent.uniqueId + \"/\" + resource.id\n    ];\n  var alreadyExists = defined(item);\n\n  if (!alreadyExists) {\n    item = createItemFromResource(\n      resource,\n      rootCkanGroup,\n      itemData,\n      extras,\n      parent\n    );\n\n    if (item) {\n      parent.add(item);\n    }\n  }\n\n  return item;\n}"}, {"instruction": "runner", "input": "JavaScript", "output": "function traverseDirectory(pathname, callback) {\n\tpathname = pathname.replace(/\\\\/g, \"/\")\n\treturn new Promise(function(resolve, reject) {\n\t\tfs.lstat(pathname, function(err, stat) {\n\t\t\tif (err) reject(err)\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\tfs.readdir(pathname, function(err, pathnames) {\n\t\t\t\t\tif (err) reject(err)\n\t\t\t\t\tvar promises = []\n\t\t\t\t\tfor (var i = 0; i < pathnames.length; i++) {\n\t\t\t\t\t\tpathnames[i] = path.join(pathname, pathnames[i])\n\t\t\t\t\t\tpromises.push(traverseDirectory(pathnames[i], callback))\n\t\t\t\t\t}\n\t\t\t\t\tcallback(pathname, stat, pathnames)\n\t\t\t\t\tresolve(Promise.all(promises))\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcallback(pathname, stat)\n\t\t\t\tresolve(pathname)\n\t\t\t}\n\t\t})\n\t})\n}"}, {"instruction": "This module provides the following jQuery selectors:\n<ul>\n<li>:focusable/li>\n<li>:sapFocusable</li>\n<li>:sapTabbable</li>\n</ul>\n@namespace\n@name module:sap/ui/dom/jquery/Selectors\n@public\n@since 1.58\n Using \"Object.getOwnPropertyDescriptor\" to not trigger the \"getter\" - see jquery.sap.stubs", "input": "JavaScript", "output": "function getValue(oTarget, sProperty) {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(oTarget, sProperty);\n\t\treturn descriptor && descriptor.value;\n\t}"}, {"instruction": "Removes the given controller from the GUI.\n@param {Controller} controller\n@instance", "input": "JavaScript", "output": "function(controller) {\n      // TODO listening?\n      this.__ul.removeChild(controller.__li);\n      this.__controllers.splice(this.__controllers.indexOf(controller), 1);\n      const _this = this;\n      common.defer(function() {\n        _this.onResize();\n      });\n    }"}, {"instruction": "---\ncategory: utilities/DOM\n---\n\nWrapper function for window.matchMedia\n\nsee https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n\n@param {string} query - media query string\n@param {ReactComponent|DomNode} el - component or DOM node\n@returns {Object} a media query list object", "input": "JavaScript", "output": "function matchMedia (query, el) {\n  const node = findDOMNode(el) || document\n  return canUseDOM && ownerWindow(node).matchMedia(query)\n}"}, {"instruction": "Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.\n\n@constructor\n@param {Number} initialClock Initial value for the clock.\n@param {Function} comparer Comparer to determine causality of events based on absolute time.", "input": "JavaScript", "output": "function VirtualTimeScheduler(initialClock, comparer) {\n      this.clock = initialClock;\n      this.comparer = comparer;\n      this.isEnabled = false;\n      this.queue = new PriorityQueue(1024);\n      __super__.call(this);\n    }"}, {"instruction": "measure the given text size in pixels\n@name measureText\n@memberOf me.BitmapText.prototype\n@function\n@param {String} [text]\n@param {me.Rect} [ret] a object in which to store the text metrics\n@returns {TextMetrics} a TextMetrics object with two properties: `width` and `height`, defining the output dimensions", "input": "JavaScript", "output": "function (text, ret) {\n            text = text || this._text;\n\n            var strings = (\"\" + text).split(\"\\n\");\n            var stringHeight = measureTextHeight(this);\n            var textMetrics  = ret || this.getBounds();\n\n            textMetrics.height = textMetrics.width = 0;\n\n            for (var i = 0; i < strings.length; i++) {\n                textMetrics.width = Math.max(measureTextWidth(this, strings[i]), textMetrics.width);\n                textMetrics.height += stringHeight;\n            }\n            return textMetrics;\n        }"}, {"instruction": "\u6587\u4ef6\u961f\u5217, \u7528\u6765\u5b58\u50a8\u5404\u4e2a\u72b6\u6001\u4e2d\u7684\u6587\u4ef6\u3002\n@class Queue\n@extends Mediator", "input": "JavaScript", "output": "function Queue() {\n    \n            /**\n             * \u7edf\u8ba1\u6587\u4ef6\u6570\u3002\n             * * `numOfQueue` \u961f\u5217\u4e2d\u7684\u6587\u4ef6\u6570\u3002\n             * * `numOfSuccess` \u4e0a\u4f20\u6210\u529f\u7684\u6587\u4ef6\u6570\n             * * `numOfCancel` \u88ab\u79fb\u9664\u7684\u6587\u4ef6\u6570\n             * * `numOfProgress` \u6b63\u5728\u4e0a\u4f20\u4e2d\u7684\u6587\u4ef6\u6570\n             * * `numOfUploadFailed` \u4e0a\u4f20\u9519\u8bef\u7684\u6587\u4ef6\u6570\u3002\n             * * `numOfInvalid` \u65e0\u6548\u7684\u6587\u4ef6\u6570\u3002\n             * @property {Object} stats\n             */\n            this.stats = {\n                numOfQueue: 0,\n                numOfSuccess: 0,\n                numOfCancel: 0,\n                numOfProgress: 0,\n                numOfUploadFailed: 0,\n                numOfInvalid: 0\n            };\n    \n            // \u4e0a\u4f20\u961f\u5217\uff0c\u4ec5\u5305\u62ec\u7b49\u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\n            this._queue = [];\n    \n            // \u5b58\u50a8\u6240\u6709\u6587\u4ef6\n            this._map = {};\n        }"}, {"instruction": "Prefix css classes in a block\n\n@param {String} prefix\n@param {Block} block\n@return {Block}\n@api private", "input": "JavaScript", "output": "function prefixClasses(prefix, block){\n  utils.assertString(prefix, 'prefix');\n  utils.assertType(block, 'block', 'block');\n\n  var _prefix = this.prefix;\n\n  this.options.prefix = this.prefix = prefix.string;\n  block = this.visit(block);\n  this.options.prefix = this.prefix = _prefix;\n  return block;\n}"}, {"instruction": "Get the number of elements in an array block.\n\n@param tap {Tap} A tap positioned at the beginning of an array block.", "input": "JavaScript", "output": "function readArraySize(tap) {\n  var n = tap.readLong();\n  if (n < 0) {\n    n = -n;\n    tap.skipLong(); // Skip size.\n  }\n  return n;\n}"}, {"instruction": "enqueue an element to the next spot in the queue.", "input": "JavaScript", "output": "function(element, check, go) {\n      var shouldAdd = element.__queue && !element.__queue.check;\n      if (shouldAdd) {\n        queueForElement(element).push(element);\n        element.__queue.check = check;\n        element.__queue.go = go;\n      }\n      return (this.indexOf(element) !== 0);\n    }"}, {"instruction": "/* eslint-disable valid-typeof", "input": "JavaScript", "output": "function isBrowseStorage (storage) {\n  try {\n    var testKey = '__xe_t'\n    storage.setItem(testKey, 1)\n    storage.removeItem(testKey)\n    return true\n  } catch (e) {\n    return false\n  }\n}"}, {"instruction": "Step through all source packages and transpose dependencies on the build function to be dependent on the function call instead, ensuring that the function is finally called. Although we could simply push the call body into the build package, this way allows the source to be faithfully rebuilt no matter where the build call occurs.", "input": "JavaScript", "output": "function transposeDependencies() {\n        sourcePackages.forEach(function(p) {\n          if (p.name === fnCallName) {\n            // Do not transpose the call package itself. After this loop\n            // there should be only one dependency on the build function anymore.\n            return;\n          }\n          var index = p.dependencies.indexOf(fnName);\n          if (index !== -1) {\n            p.dependencies.splice(index, 1, fnCallName);\n          }\n        });\n      }"}, {"instruction": "destructive transform (faster)", "input": "JavaScript", "output": "function (point, scale) {\n\t\tscale = scale || 1;\n\t\tpoint.x = scale * (this._a * point.x + this._b);\n\t\tpoint.y = scale * (this._c * point.y + this._d);\n\t\treturn point;\n\t}"}, {"instruction": "Allow this block to be managed with the keyboard", "input": "JavaScript", "output": "function() {\n    this.inner.setAttribute('tabindex', 0);\n    this.inner.addEventListener('keyup', (e) => {\n      if (e.target !== this.inner) { return; }\n\n      switch(e.keyCode) {\n        case 13:\n          this.mediator.trigger(\"block:create\", 'Text', null, this.el, { autoFocus: true });\n          break;\n        case 8:\n          this.onDeleteClick.call(this, new CustomEvent('click'));\n          return;\n      }\n    });\n  }"}, {"instruction": "turns off the scroll shadow on view containers so they don't interfere with dragging\n@private\n@param {Boolean} disable - true to disable, false to enable", "input": "JavaScript", "output": "function _suppressScrollShadowsOnAllViews(disable) {\n        _.forEach(_views, function (view) {\n            if (disable) {\n                ViewUtils.removeScrollerShadow(view.$openFilesContainer[0], null);\n            } else if (view.$openFilesContainer[0].scrollHeight > view.$openFilesContainer[0].clientHeight) {\n                ViewUtils.addScrollerShadow(view.$openFilesContainer[0], null, true);\n            }\n        });\n    }"}, {"instruction": "Texture Blur *****************************************", "input": "JavaScript", "output": "function LGraphTextureBlur() {\n            this.addInput(\"Texture\", \"Texture\");\n            this.addInput(\"Iterations\", \"number\");\n            this.addInput(\"Intensity\", \"number\");\n            this.addOutput(\"Blurred\", \"Texture\");\n            this.properties = {\n                intensity: 1,\n                iterations: 1,\n                preserve_aspect: false,\n                scale: [1, 1],\n                precision: LGraphTexture.DEFAULT\n            };\n        }"}, {"instruction": "This class represents a single search node in the exploration tree for\nA* algorithm.\n\n@param {Object} node  original node in the graph", "input": "JavaScript", "output": "function NodeSearchState(node) {\n  this.node = node;\n\n  // How we came to this node?\n  this.parent = null;\n\n  this.closed = false;\n  this.open = 0;\n\n  this.distanceToSource = Number.POSITIVE_INFINITY;\n  // the f(n) = g(n) + h(n) value\n  this.fScore = Number.POSITIVE_INFINITY;\n\n  // used to reconstruct heap when fScore is updated.\n  this.heapIndex = -1;\n}"}, {"instruction": "Private Attempt to send the event to the socket. If socket no longer exists, remove it from set", "input": "JavaScript", "output": "function sendToMultiple(send, msg, destinations, type) {\n  destinations = destinations instanceof Array && destinations || [destinations];\n  destinations.forEach(function(destination) {\n    var set, socketIds;\n    set = subscriptions[type];\n    if ((socketIds = set.members(destination))) {\n      return socketIds.slice(0).forEach(function(socketId) {\n        if (!send.socketId(socketId, msg, destination)) {\n          return set.removeFromAll(socketId);\n        }\n      });\n    }\n  });\n  return true;\n}"}, {"instruction": "/* eslint-disable", "input": "JavaScript", "output": "function requestUrl(url, callback) {\n  var req = new XMLHttpRequest();\n  req.addEventListener(\"load\", function () {\n    callback(req.responseText);\n  });\n  req.open(\"GET\", url);\n  req.send();\n}"}, {"instruction": "Called when the result stream reads a new chunk.\n\n@param {Chunk} chunk", "input": "JavaScript", "output": "function onResultStreamData(chunk)\n  {\n    // unsubscribe from the result stream's 'data' and 'close' events\n    resultStream.removeListener('data', onResultStreamData);\n    resultStream.removeListener('close', onResultStreamClose);\n\n    // get all the rows in the chunk that overlap with the requested window,\n    // and use the resulting array as the new row buffer\n    var chunkStart = chunk.getStartIndex();\n    var chunkEnd = chunk.getEndIndex();\n    rowBuffer = chunk.getRows().slice(\n        Math.max(chunkStart, start) - chunkStart,\n        Math.min(chunkEnd, end) + 1 - chunkStart);\n\n    // reset the row index\n    rowIndex = 0;\n\n    // process the row buffer\n    processRowBuffer();\n  }"}, {"instruction": "11.12 Conditional Operator", "input": "JavaScript", "output": "function parseConditionalExpression() {\n        var expr, consequent, alternate;\n\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            consequent = parseConditionalExpression();\n            expect(':');\n            alternate = parseConditionalExpression();\n\n            expr = delegate.createConditionalExpression(expr, consequent, alternate);\n        }\n\n        return expr;\n    }"}, {"instruction": "object draw<br>\nnot to be called by the end user<br>\ncalled by the game manager on each game loop\n@name draw\n@memberOf me.Entity\n@function\n@protected\n@param {me.CanvasRenderer|me.WebGLRenderer} renderer a renderer object\n@param {me.Rect} region to draw", "input": "JavaScript", "output": "function (renderer, rect) {\n            var renderable = this.renderable;\n            if (renderable instanceof me.Renderable) {\n                // predraw (apply transforms)\n                renderable.preDraw(renderer);\n\n                // draw the object\n                renderable.draw(renderer, rect);\n\n                // postdraw (clean-up);\n                renderable.postDraw(renderer);\n            }\n        }"}, {"instruction": "Builds the data to be POSTed to elastic search.\n\n@param {string} searchTerm The plain-text query to search for.\n@param {number} maxResults The max number of results to search for.", "input": "JavaScript", "output": "function buildRequestData(searchTerm, maxResults) {\n  var requestData = {\n    numHits: maxResults,\n    fuzzy: {\n      maxEdits: 2,\n      minLength: 5,\n      prefixLength: 2\n    }\n  };\n\n  if (searchTerm instanceof Array) {\n    requestData[\"addresses\"] = searchTerm.map(processAddress);\n  } else {\n    requestData[\"addr\"] = processAddress(searchTerm);\n  }\n  return requestData;\n}"}, {"instruction": "/* return a promise and a function. When the function is called,\nthe promise will be resolved.", "input": "JavaScript", "output": "function awaitFunctionCall() {\n                let func;\n                const promise = new Promise((resolve, reject) => {\n                    func = function(...args) {\n                        resolve(args);\n                        return new Promise((resolve, reject) => {\n                            // give us some time to process the result before\n                            // continuing\n                            global.setTimeout(resolve, 1);\n                        });\n                    };\n                });\n                return {func, promise};\n            }"}, {"instruction": "client.getNetworks\n\n@description Display the currently available networks\n\n@param {Function}    callback    f(err, networks) where networks is an array of networks\n@returns {*}", "input": "JavaScript", "output": "function (callback) {\n      return this._request({\n        path: this._extension\n      }, function (err, body, res) {\n        return err\n          ? callback(err)\n          : callback(null, body.networks, res);\n      });\n    }"}, {"instruction": "Just a convenience wrapper to enable sourcemaps in an easier-to-read fashion\nthan `setDevTool()`.\n@TODO: Only sets the javascript sourcemaps now. Would be nice to make loaders\nenable their specific sourcemaps when `sourceMaps()` is used.\n\n@param {string} [devtool]\n@return {Function}", "input": "JavaScript", "output": "function sourceMaps(devtool = 'cheap-module-eval-source-map') {\n  return (context, util) => {\n    context.sourceMaps = true\n\n    return util.merge({ devtool })\n  }\n}"}, {"instruction": "if the user specifies include_docs=true, then we don't want to block the main cursor while we're fetching the doc", "input": "JavaScript", "output": "function fetchDocAsynchronously(metadata, row, winningRev$$1) {\n    var key = metadata.id + \"::\" + winningRev$$1;\n    docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n      row.doc = decodeDoc(e.target.result);\n      if (opts.conflicts) {\n        var conflicts = pouchdbMerge.collectConflicts(metadata);\n        if (conflicts.length) {\n          row.doc._conflicts = conflicts;\n        }\n      }\n      fetchAttachmentsIfNecessary(row.doc, opts, txn);\n    };\n  }"}, {"instruction": "removes a given listener by looking at all registered targets and their listeners. if there are no more listeners to a target, the registered target is removed from the mTargets map.", "input": "JavaScript", "output": "function destroy(oListener) {\n\t\tfor (var n in mTargets) {\n\t\t\tvar oTargetConfig = mTargets[n];\n\t\t\tfor (var i = 0; i < oTargetConfig.listeners.length; i++) {\n\t\t\t\tif (oTargetConfig.listeners[i] === oListener) {\n\t\t\t\t\toTargetConfig.listeners.splice(i, 1);\n\t\t\t\t\toTargetConfig.configurations.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (oTargetConfig.listeners && oTargetConfig.listeners.length === 0) {\n\t\t\t\tdelete mTargets[n];\n\t\t\t\toTargetConfig.object._observer = undefined;\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Load and setup plugins\n\n@param {Output}\n@return {Promise<Output>}", "input": "JavaScript", "output": "function preparePlugins(output) {\n    var book = output.getBook();\n\n    return Promise()\n\n    // Only load plugins for main book\n    .then(function() {\n        if (book.isLanguageBook()) {\n            return output.getPlugins();\n        } else {\n            return Plugins.loadForBook(book);\n        }\n    })\n\n    // Update book's configuration using the plugins\n    .then(function(plugins) {\n        return Plugins.validateConfig(book, plugins)\n        .then(function(newBook) {\n            return output.merge({\n                book: newBook,\n                plugins: plugins\n            });\n        });\n    });\n}"}, {"instruction": "Parse CSS", "input": "JavaScript", "output": "function parseCSS(content) {\r\n    var _return = {},\r\n      parts = content.split(\"\\n\"),\r\n      keys = [\r\n        \"name\",\r\n        \"description\",\r\n        \"type\"\r\n      ];\r\n\r\n    for (var pi in parts) {\r\n      var p = parts[pi];\r\n\r\n      for (var ki in keys) {\r\n        var key = keys[ki];\r\n\r\n        if (p.indexOf(\"@\"+key) > -1) {\r\n          var pset = p.split(\"@\"+key),\r\n          part = pset[ pset.length - 1 ].trim();\r\n\r\n          _return[key] = part;\r\n        }\r\n      }\r\n    }\r\n    return _return;\r\n  }"}, {"instruction": "If the TypeDoc readme doesn't have this header\nIt won't be accessible in docusaurus", "input": "JavaScript", "output": "function addHeaderToReadme(packageName) {\n\n    const readmePath = path.join(destDir, packageName, 'api', 'README.md');\n    const readmeText = fs.readFileSync(readmePath).toString();\n\n    var docusaurusHeader = \n    `---\\n` + \n    `id: index\\n` +\n    `---\\n\\n`;\n\n    try {\n        fs.writeFileSync(readmePath, docusaurusHeader);\n        fs.appendFileSync(readmePath, readmeText);\n    } catch (err) {\n        console.log(chalk.red(err));\n    }\n\n}"}, {"instruction": "Cleans up element by removing all its invisible children (which we don't want to render as Markdown)", "input": "JavaScript", "output": "function cleanUpElement(element) {\n\t\tconst childNodes = element.childNodes;\n\n\t\tfor (let i = 0; i < childNodes.length; i++) {\n\t\t\tconst node = childNodes[i];\n\n\t\t\tlet isVisible = node.nodeType === 1 ? window.getComputedStyle(node).display !== 'none' : true;\n\t\t\tif (isVisible && ['input', 'textarea', 'script', 'noscript', 'style', 'select', 'option', 'button'].indexOf(node.nodeName.toLowerCase()) >= 0) isVisible = false;\n\n\t\t\tif (!isVisible) {\n\t\t\t\telement.removeChild(node);\n\t\t\t} else {\n\t\t\t\tcleanUpElement(node);\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "Delimiter functions", "input": "JavaScript", "output": "function checkDelimiter(\n    delim: AnyParseNode,\n    context: FunctionContext,\n): SymbolParseNode {\n    const symDelim = checkSymbolNodeType(delim);\n    if (symDelim && utils.contains(delimiters, symDelim.text)) {\n        return symDelim;\n    } else {\n        throw new ParseError(\n            \"Invalid delimiter: '\" +\n            (symDelim ? symDelim.text : JSON.stringify(delim)) +\n            \"' after '\" + context.funcName + \"'\", delim);\n    }\n}"}, {"instruction": "Properties of a ListOperationsRequest.\n@memberof google.longrunning\n@interface IListOperationsRequest\n@property {string|null} [name] ListOperationsRequest name\n@property {string|null} [filter] ListOperationsRequest filter\n@property {number|null} [pageSize] ListOperationsRequest pageSize\n@property {string|null} [pageToken] ListOperationsRequest pageToken\n \nConstructs a new ListOperationsRequest.\n@memberof google.longrunning\n@classdesc Represents a ListOperationsRequest.\n@implements IListOperationsRequest\n@constructor\n@param {google.longrunning.IListOperationsRequest=} [properties] Properties to set", "input": "JavaScript", "output": "function ListOperationsRequest(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }"}, {"instruction": "@class errors.QueryResultError\n@augments external:Error\n@description\n\nThis error is specified as the rejection reason for all result-specific methods when the result doesn't match\nthe expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\n\nThe error applies to the result from the following methods: {@link Database#none none},\n{@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\n\nSupported errors:\n\n- `No return data was expected.`, method {@link Database#none none}\n- `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\n- `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\n\nLike any other error, this one is notified with through the global event {@link event:error error}.\n\nThe type is available from the {@link errors} namespace.\n\n@property {string} name\nStandard {@link external:Error Error} property - error type name = `QueryResultError`.\n\n@property {string} message\nStandard {@link external:Error Error} property - the error message.\n\n@property {string} stack\nStandard {@link external:Error Error} property - the stack trace.\n\n@property {object} result\nThe original $[Result] object that was received.\n\n@property {number} received\nTotal number of rows received. It is simply the value of `result.rows.length`.\n\n@property {number} code\nError code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\n\n@property {string} query\nQuery that was executed.\n\nNormally, it is the query already formatted with values, if there were any.\nBut if you are using initialization option `pgFormatting`, then the query string is before formatting.\n\n@property {*} values\nValues passed in as query parameters. Available only when initialization option `pgFormatting` is used.\nOtherwise, the values are within the pre-formatted `query` string.\n\n@example\n\nconst QueryResultError = pgp.errors.QueryResultError;\nconst qrec = pgp.errors.queryResultErrorCode;\n\nconst initOptions = {\n\n// pg-promise initialization options...\n\nerror: (err, e) => {\nif (err instanceof QueryResultError) {\n// A query returned unexpected number of records, and thus rejected;\n\n// we can check the error code, if we want specifics:\nif(err.code === qrec.noData) {\n// expected some data, but received none;\n}\n\n// If you write QueryResultError into the console,\n// you will get a nicely formatted output.\n\nconsole.log(err);\n\n// See also: err, e.query, e.params, etc.\n}\n}\n};\n\n@see\n{@link queryResult}, {@link Database#none none}, {@link Database#one one},\n{@link Database#oneOrNone oneOrNone}, {@link Database#many many}", "input": "JavaScript", "output": "function QueryResultError(code, result, query, values) {\n    const temp = Error.apply(this, arguments);\n    temp.name = this.name = 'QueryResultError';\n    this.stack = temp.stack;\n    this.message = errorMessages[code].message;\n    this.code = code;\n    this.result = result;\n    this.query = query;\n    this.values = values;\n    this.received = result.rows.length;\n}"}, {"instruction": "/* =========================================================== /* lifecycle methods /* =========================================================== \nCalled when the controller is instantiated.\n@public", "input": "JavaScript", "output": "function () {\n\t\t\tBaseController.prototype.onInit.call(this);\n\n\t\t\t// manually call the handler once at startup as device API won't do this for us\n\t\t\tthis._onOrientationChange({\n\t\t\t\tlandscape: Device.orientation.landscape\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"tools\").attachPatternMatched(this._onMatched, this);\n\t\t}"}, {"instruction": "flatten nested array (the nesting can be to any depth).\n@param array {Array}\n@param i {int}\n@returns {Array}\n@private", "input": "JavaScript", "output": "function flatten(array, i) {\n  i = i || 0;\n\n  if(i >= array.length)\n    return array;\n\n  if(isArray(array[i])) {\n    return flatten(array.slice(0,i)\n      .concat(array[i], array.slice(i+1)), i);\n  }\n  return flatten(array, i+1);\n}"}, {"instruction": "The base implementation of `_.toString` which doesn't convert nullish\nvalues to empty strings.\n\n@private\n@param {*} value The value to process.\n@returns {string} Returns the string.", "input": "JavaScript", "output": "function baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value === 'string') {\n    return value\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : ''\n  }\n  var result = value + ''\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}"}, {"instruction": "Checks package.json of the extracted extension for npm dependencies\nand runs npm install when required.\n@param {Object} validationResult return value of the validation procedure\n@param {Function} callback function to be called after the end of validation procedure", "input": "JavaScript", "output": "function performNpmInstallIfRequired(npmOptions, validationResult, callback) {\n\n    function finish() {\n        callback(null, validationResult);\n    }\n\n    var installDirectory = path.join(validationResult.extractDir, validationResult.commonPrefix);\n    var packageJson;\n\n    try {\n        packageJson = fs.readJsonSync(path.join(installDirectory, \"package.json\"));\n    } catch (e) {\n        packageJson = null;\n    }\n\n    if (!packageJson || !packageJson.dependencies || !Object.keys(packageJson.dependencies).length) {\n        return finish();\n    }\n\n    _performNpmInstall(installDirectory, npmOptions, function (err) {\n        if (err) {\n            validationResult.errors.push([Errors.NPM_INSTALL_FAILED, err.toString()]);\n        }\n        finish();\n    });\n}"}, {"instruction": "Write resources from workspace matching the given pattern to the given fs destination\n\n@private\n@param {Object} parameters Parameters\n@param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n@param {string} parameters.pattern Pattern to match resources in workspace against\n@param {string} parameters.targetPath Path to write the resources to\n@returns {Promise<number>} Promise resolving with number of resources written to given directory", "input": "JavaScript", "output": "async function writeResourcesToDir({workspace, pattern, targetPath}) {\n\tconst fsTarget = resourceFactory.createAdapter({\n\t\tfsBasePath: targetPath,\n\t\tvirBasePath: \"/resources/\"\n\t});\n\n\tlet allResources;\n\tif (workspace.byGlobSource) { // API only available on duplex collections\n\t\tallResources = await workspace.byGlobSource(pattern);\n\t} else {\n\t\tallResources = await workspace.byGlob(pattern);\n\t}\n\n\t// write all resources to the tmp folder\n\tawait Promise.all(allResources.map((resource) => fsTarget.write(resource)));\n\treturn allResources.length;\n}"}, {"instruction": "Get nde events\nreturn node events and optionally\ncheck if the node has already a specific event\nto avoid duplicated callbacks\n\n@param {node} node\n@param {string} name event name\n@param {object} fn callback\n@returns {object}", "input": "JavaScript", "output": "function getNodeEvents(node, name = null, fn = null) {\n    const cache = (node[uid] = node[uid] || []);\n    const data = { all: cache, evt: null, found: null};\n    if (name && fn && utils.size(cache) > 0) {\n        each(cache, (cl, i) => {\n            if (cl.eventName == name && cl.fn.toString() == fn.toString()) {\n                data.found = true;\n                data.evt = i;\n                return false;\n            }\n        })\n    }\n    return data;\n}"}, {"instruction": "Listen for errors and display them in the DOM,\nso that the user does not need to open the console", "input": "JavaScript", "output": "function addOnErrorHook () {\n\n\t\twindow.addEventListener(\"error\", function(error) {\n\t\t\terror.preventDefault();\n\t\t\tvar oErrorOutput = document.createElement(\"span\");\n\t\t\toErrorOutput.innerText = error.message; // use save API\n\t\t\toErrorOutput.style.cssText = \"position:absolute; top:1rem; left:1rem\";\n\t\t\tif (!document.body) {\n\t\t\t\tdocument.write(\"<span></span>\"); // add content via document.write to ensure document.body is created;\n\t\t\t}\n\t\t\tdocument.body.appendChild(oErrorOutput);\n\t\t});\n\t}"}, {"instruction": "extended", "input": "JavaScript", "output": "function( meta ){\n\n            this.els.fps.innerHTML = meta.fps.toFixed(2);\n            this.els.ipf.innerHTML = meta.ipf;\n        }"}, {"instruction": "Returns the value of an individual property.\n\n@param {string} url\nURL of the string bundle.\n@param {string} prefName\nThe property to get the value of.\n\n@return The value of the requested property\n@type string", "input": "JavaScript", "output": "function getProperty(url, prefName) {\n  var sbs = Cc[\"@mozilla.org/intl/stringbundle;1\"]\n            .getService(Ci.nsIStringBundleService);\n  var bundle = sbs.createBundle(url);\n\n  try {\n    return bundle.GetStringFromName(prefName);\n  } catch (ex) {\n    throw new Error(arguments.callee.name + \": Unknown property - \" + prefName);\n  }\n}"}, {"instruction": "un-marshall a data chunk, for ease of matching body is converted to string", "input": "JavaScript", "output": "function(data, escapeHeaderValues) {\n    const onFrame = jasmine.createSpy('onFrame');\n    const onIncomingPing = jasmine.createSpy('onIncomingPing');\n    const parser = new StompJs.Parser(onFrame, onIncomingPing);\n\n    parser.parseChunk(data);\n\n    const rawFrame = onFrame.calls.first().args[0];\n    return StompJs.FrameImpl.fromRawFrame(rawFrame, escapeHeaderValues);\n  }"}, {"instruction": "/*\nOutputs a warning message with the current nesting level; takes care not to\nconstruct the message or serialize XML in vain.\n\n@param {Element} [oElement]\nany XML DOM element which is serialized to the details\n@param {...string} aTexts\nthe main text of the message is constructed from the rest of the arguments by\njoining them separated by single spaces", "input": "JavaScript", "output": "function warn(oElement) {\n\t\t\t\tif (bWarning) {\n\t\t\t\t\tif (!bCallerLoggedForWarnings) {\n\t\t\t\t\t\tbCallerLoggedForWarnings = true;\n\t\t\t\t\t\tLog.warning(\"Warning(s) during processing of \" + sCaller, null,\n\t\t\t\t\t\t\tsXMLPreprocessor);\n\t\t\t\t\t}\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\tgetNestingLevel() + Array.prototype.slice.call(arguments, 1).join(\" \"),\n\t\t\t\t\t\toElement && serializeSingleElement(oElement), sXMLPreprocessor);\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "targeting snapsIE >= 0.2", "input": "JavaScript", "output": "function getFailureMessage(exceptionMessage) {\n            var msg = 'Snapsie failed: ';\n            if (exceptionMessage) {\n                if (exceptionMessage ==\n                    \"Automation server can't create object\") {\n                    msg += 'Is it installed? Does it have permission to run '\n                        + 'as an add-on? See http://snapsie.sourceforge.net/';\n                }\n                else {\n                    msg += exceptionMessage;\n                }\n            }\n            else {\n                msg += 'Undocumented error';\n            }\n            return msg;\n        }"}, {"instruction": "Transforms the searchable templates by removing the `searchable` prefix.\n\nThis makes them usable in the `SearchBox` component.\n\n@param {object} templates The widget templates\n@returns {object} the formatted templates", "input": "JavaScript", "output": "function transformTemplates(templates) {\n  const allTemplates = {\n    ...templates,\n    submit: templates.searchableSubmit,\n    reset: templates.searchableReset,\n    loadingIndicator: templates.searchableLoadingIndicator,\n  };\n\n  const {\n    searchableReset,\n    searchableSubmit,\n    searchableLoadingIndicator,\n    ...transformedTemplates\n  } = allTemplates;\n\n  return transformedTemplates;\n}"}, {"instruction": "Calculates the height and width of text on the canvas Width is found by using the canvas measureText function Height is only estimated -- it calculates the font size in pixels, and sets the height to 110% of that.", "input": "JavaScript", "output": "function() {\n        var ctx = this._drawContext;\n        ctx.font = this._fontString();\n        this.w = ctx.measureText(this._text).width;\n\n        var size = this._textFont.size || this.defaultSize;\n        this.h = 1.1 * this._getFontHeight(size);\n\n        /* Offset the MBR for text alignment*/\n        if (this._textAlign === \"left\" || this._textAlign === \"start\") {\n            this.offsetBoundary(0, 0, 0, 0);\n        } else if (this._textAlign === \"center\") {\n            this.offsetBoundary(this.w / 2, 0, -this.w / 2, 0);\n        } else if (this._textAlign === \"end\" || this._textAlign === \"right\") {\n            this.offsetBoundary(this.w, 0, -this.w, 0);\n        }\n    }"}, {"instruction": "Test if current element contains block-level children\n@param {AbbreviationNode} node\n@return {Boolean}", "input": "JavaScript", "output": "function(node) {\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \n\t\t\t\t|| node.children.some(function(child) {\n\t\t\t\t\treturn this.isBlock(child);\n\t\t\t\t}, this);\n\t\t}"}, {"instruction": "var node = wysihtml5.dom.domNode(element).prev({nodeTypes: [1,3], ignoreBlankTexts: true});", "input": "JavaScript", "output": "function(options) {\n        var prevNode = node.previousSibling,\n            types = (options && options.nodeTypes) ? options.nodeTypes : defaultNodeTypes;\n        \n        if (!prevNode) {\n          return null;\n        }\n\n        if (\n          (!wysihtml5.lang.array(types).contains(prevNode.nodeType)) || // nodeTypes check.\n          (options && options.ignoreBlankTexts && _isBlankText(prevNode)) // Blank text nodes bypassed if set\n        ) {\n          return wysihtml5.dom.domNode(prevNode).prev(options);\n        }\n        \n        return prevNode;\n      }"}, {"instruction": "/*\nExecute the given callback once the DOM is ready (which might already be the case).", "input": "JavaScript", "output": "function whenReady(callback) {\n\n\t\tfunction onLoaded() {\n\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", onLoaded, false );\n\t\t\tcallback();\n\t\t}\n\n\t\tif ( document.readyState === 'complete' ) {\n\t\t\tcallback();\n\t\t} else {\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", onLoaded, false );\n\t\t}\n\t}"}, {"instruction": "Hooks into React's state management and applies the componentstate\nto GoldenLayout\n\n@private\n@returns {void}", "input": "JavaScript", "output": "function( nextProps, nextState ) {\n\t\tthis._container.setState( nextState );\n\t\tthis._originalComponentWillUpdate.call( this._reactComponent, nextProps, nextState );\n\t}"}, {"instruction": "Add a proximity based constraint for finding objects with key point\nvalues near the point given.\n@param {String} key The key that the AV.GeoPoint is stored in.\n@param {AV.GeoPoint} point The reference AV.GeoPoint that is used.\n@return {AV.Query} Returns the query, so you can chain this call.", "input": "JavaScript", "output": "function(key, point) {\n        if (!(point instanceof AV.GeoPoint)) {\n          // Try to cast it to a GeoPoint, so that near(\"loc\", [20,30]) works.\n          point = new AV.GeoPoint(point);\n        }\n        this._addCondition(key, '$nearSphere', point);\n        return this;\n      }"}, {"instruction": "getModuleUrl returns different urls for win platform\nso that's why we need a different check here\n@see #getModuleUrl\n@param {!string} pathOrUrl that should be checked if it's absolute\n@return {!boolean} returns true if pathOrUrl is absolute url on win platform\nor when it's absolute path on other platforms", "input": "JavaScript", "output": "function isAbsolutePathOrUrl(pathOrUrl) {\n        return brackets.platform === \"win\" ? PathUtils.isAbsoluteUrl(pathOrUrl) : FileSystem.isAbsolutePath(pathOrUrl);\n    }"}, {"instruction": "Checks a node to see if it's followed by a semicolon.\n@param {ASTNode} node The node to check.\n@returns {void}", "input": "JavaScript", "output": "function checkForSemicolon(node) {\n\t\t\t\tvar lastToken = sourceCode.getLastToken(node);\n\n\t\t\t\tif (never) {\n\t\t\t\t\tif (isUnnecessarySemicolon(lastToken)) {\n\t\t\t\t\t\treport(node, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!isSemicolon(lastToken)) {\n\t\t\t\t\t\tif (!exceptOneLine || !isOneLinerBlock(node)) {\n\t\t\t\t\t\t\treport(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (exceptOneLine && isOneLinerBlock(node)) {\n\t\t\t\t\t\t\treport(node, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "Limit the resultset to `n` records\n@class Model\n@method limit\n@param {integer} limit - The limit as a number.\n@param {integer} offset - Optional offset.\n\n@see Model.exec\n\n@return {Model}", "input": "JavaScript", "output": "function(limit, offset) {\n    const self = this.chain()._unresolve() // if the collection is already resolved, return a unresolved and empty copy!\n\n    offset = offset || self.getInternal('offset') || 0\n\n    if (typeof limit === 'string') limit = parseInt(limit)\n    if (typeof offset === 'string') offset = parseInt(offset)\n\n    if (!isNaN(limit)) {\n      self.setInternal('limit', limit)\n      self.setInternal('no_relation_cache', true)\n    }\n    if (!isNaN(offset)) {\n      self.setInternal('offset', offset)\n      self.setInternal('no_relation_cache', true)\n    }\n\n    if (!limit) {\n      self.clearInternal('offset', offset)\n      self.clearInternal('limit', limit)\n    }\n\n    return self\n  }"}, {"instruction": "Register event handler to suppress event within busy section", "input": "JavaScript", "output": "function registerInteractionHandler(fnHandler) {\n\t\t\tvar aSuppressHandler = [],\n\t\t\t\toParentDOM = this.$parent.get(0),\n\t\t\t\toBlockLayerDOM = this.$blockLayer.get(0);\n\n\t\t\tfor (var i = 0; i < aPreventedEvents.length; i++) {\n\t\t\t\t// Add event listeners with \"useCapture\" settings to suppress events before dispatching/bubbling starts\n\t\t\t\toParentDOM.addEventListener(aPreventedEvents[i], fnHandler, {\n\t\t\t\t\tcapture: true,\n\t\t\t\t\tpassive: false\n\t\t\t\t});\n\t\t\t\taSuppressHandler.push(EventTriggerHook.suppress(aPreventedEvents[i], oParentDOM, oBlockLayerDOM));\n\t\t\t}\n\t\t\t//for jQuery triggered events we also need the keydown handler\n\t\t\tthis.$blockLayer.bind('keydown', fnHandler);\n\n\t\t\treturn aSuppressHandler;\n\t\t}"}, {"instruction": "}}}", "input": "JavaScript", "output": "function newSelection(e) //{{{\n    {\n      if (options.disabled) {\n        return false;\n      }\n      if (!options.allowSelect) {\n        return false;\n      }\n      btndown = true;\n      docOffset = getPos($img);\n      Selection.disableHandles();\n      Tracker.setCursor('crosshair');\n      var pos = mouseAbs(e);\n      Coords.setPressed(pos);\n      Selection.update();\n      Tracker.activateHandlers(selectDrag, doneSelect, e.type.substring(0,5)==='touch');\n      KeyManager.watchKeys();\n\n      e.stopPropagation();\n      e.preventDefault();\n      return false;\n    }"}, {"instruction": "Returns the normalized resource name from the given full resource path.\n\n@param   {string}    path - The full resource path (e.g. \"/restaurants/washington/seattle/joes-diner\")\n@returns {string}         - The normalized resource name (e.g. \"/joes-diner\")", "input": "JavaScript", "output": "function getNameFromPath (path) {\n  path = _(path).toString();\n  let lastSlash = path.substring(0, path.length - 1).lastIndexOf(\"/\");\n  if (lastSlash === -1) {\n    return normalizeName(path);\n  }\n  else {\n    return normalizeName(path.substring(lastSlash));\n  }\n}"}, {"instruction": "/\\s*,\\s", "input": "JavaScript", "output": "function(name,loc) {\n\t\t// slow\n\t\tif(loc === undefined) loc = 0;\n\t\twhile (name[0] == ' '){\n\t\t\tloc++;\n\t\t\tname = name.substr(1);\n\t\t};\n\t\tname = name.trim();\n\t\treturn new Identifier(new Token('IDENTIFIER',name,loc,name.length));\n\t}"}, {"instruction": "show notification popup", "input": "JavaScript", "output": "function showNotification(msg, type, reloadPage){\n    // defaults to false\n    reloadPage = reloadPage || false;\n\n    $('#notify_message').removeClass();\n    $('#notify_message').addClass('alert-' + type);\n    $('#notify_message').html(msg);\n    $('#notify_message').slideDown(600).delay(2500).slideUp(600, function(){\n        if(reloadPage === true){\n            location.reload();\n        }\n    });\n}"}, {"instruction": "Checks that the line segments of this polygon do not intersect each other.\n@method isSimple\n@param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n@return {Boolean}\n@todo Should it check all segments with all others?", "input": "JavaScript", "output": "function polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}"}, {"instruction": "Sets the value for multiple styles on a node.  If a value is specified as\n'' (empty string), the corresponding style property will be unset.\n\n@param {DOMElement} node\n@param {object} styles", "input": "JavaScript", "output": "function setValueForStyles(node, styles, getStack) {\n  const style = node.style;\n  for (let styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n    const isCustomProperty = styleName.indexOf('--') === 0;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isCustomProperty) {\n        warnValidStyle(styleName, styles[styleName], getStack);\n      }\n    }\n    const styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n    if (isCustomProperty) {\n      const name = isCustomProperty ? styleName : hyphenateStyleName(styleName);\n      style.setProperty(name, styleValue);\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}"}, {"instruction": "Allowing namespace constraints such as ES6:String to only build for that namespace.", "input": "JavaScript", "output": "function getNamespaceConstraints() {\n    var map = {};\n    getModuleNames(m).forEach(function(n) {\n      var split = n.split(':');\n      var moduleName = split[0];\n      var namespaceName = split[1];\n      if (namespaceName) {\n        if (SPLIT_MODULES.indexOf(moduleName) === -1) {\n          warn('Module ' + moduleName + ' is not ready to be split!');\n          warn('Exiting...');\n          process.exit();\n        }\n        var constraints = map[moduleName] || {};\n        constraints[namespaceName] = true;\n        map[moduleName] = constraints;\n      }\n    });\n    return map;\n  }"}, {"instruction": "/* eslint-enable \nLoader used to create Skeleton objects", "input": "JavaScript", "output": "function Skeleton({ width, height, dark, ...other }) {\n  return (\n    <StyledSkeleton dark={dark} customWidth={width} customHeight={height} {...other}>\n      &nbsp;\n    </StyledSkeleton>\n  );\n}"}, {"instruction": "Private Static Methods", "input": "JavaScript", "output": "function(value)\n\t\t\t{\n\t\t\t\tswitch (typeof value)\n\t\t\t\t{\n\t\t\t\t\tcase \"number\":\n\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\treturn value + \"\";\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\treturn \"\\\"\" + value + \"\\\"\";\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (value === undefined)\n\t\t\t\t\t\t\treturn \"undefined\";\n\t\t\t\t\t\tif (value === null)\n\t\t\t\t\t\t\treturn \"null\";\n\t\t\t\t\t\tvar hash = value[_HASH_KEY];\n\t\t\t\t\t\tif (!hash)\n\t\t\t\t\t\t\thash = value[_HASH_KEY] = \"#\" + (++_hashCount);\n\t\t\t\t\t\treturn hash;\n\t\t\t\t}\n\t\t\t}"}, {"instruction": "Sets up the current instance using members from the passed data object.\n\n@param {Object} aData               An object with members of the duration\n@param {Number} aData.weeks         Duration in weeks\n@param {Number} aData.days          Duration in days\n@param {Number} aData.hours         Duration in hours\n@param {Number} aData.minutes       Duration in minutes\n@param {Number} aData.seconds       Duration in seconds\n@param {Boolean} aData.isNegative   If true, the duration is negative", "input": "JavaScript", "output": "function fromData(aData) {\n      var propsToCopy = [\"weeks\", \"days\", \"hours\",\n                         \"minutes\", \"seconds\", \"isNegative\"];\n      for (var key in propsToCopy) {\n        /* istanbul ignore if */\n        if (!propsToCopy.hasOwnProperty(key)) {\n          continue;\n        }\n        var prop = propsToCopy[key];\n        if (aData && prop in aData) {\n          this[prop] = aData[prop];\n        } else {\n          this[prop] = 0;\n        }\n      }\n    }"}, {"instruction": "code from this gist: https://gist.github.com/dchest/4582374 (no license declared)", "input": "JavaScript", "output": "function Salsa20(key, nonce) {\n    // Constants.\n    this.rounds = 20; // number of Salsa rounds\n    this.sigmaWords = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574];\n\n    // State.\n    this.keyWords = [];           // key words\n    this.nonceWords = [0, 0];     // nonce words\n    this.counterWords = [0, 0];   // block counter words\n\n    // Output buffer.\n    this.block = [];        // output block of 64 bytes\n    this.blockUsed = 64;     // number of block bytes used\n\n    this.setKey(key);\n    this.setNonce(nonce);\n}"}, {"instruction": "Convert string to printable,replace all control chars and unicode to hex escape", "input": "JavaScript", "output": "function toPrint(s,isRaw) {\n  var ctrl=/[\\x00-\\x1F\\x7F-\\x9F]/,unicode=/[\\u009F-\\uFFFF]/;\n  s=s.split('').map(function (c) {\n    if (!isRaw && printEscapeMap.hasOwnProperty(c)) return printEscapeMap[c];\n    else if (unicode.test(c)) return '\\\\u'+('00'+ord(c).toString(16).toUpperCase()).slice(-4);\n    else if (ctrl.test(c)) return '\\\\x'+(\"0\"+ord(c).toString(16).toUpperCase()).slice(-2);\n    return c;\n  }).join('');\n  return s;\n}"}, {"instruction": "We have to remember current server data and client data.\nThe `sync` method has no access to it.\n`updated_at` is already set to \"Date.now\" when the overridden `sync.update` is called.\nSee https://github.com/tgriesser/bookshelf/blob/79c526870e618748caf94e7476a0bc796ee090a6/src/model.js#L955", "input": "JavaScript", "output": "function save(data) {\n            this.clientData = _.cloneDeep(data) || {};\n            this.serverData = _.cloneDeep(this.attributes);\n\n            return ParentModel.prototype.save.apply(this, arguments);\n        }"}, {"instruction": "Create a middleware for filtering files.\n\n@param {Object} filters\n@return {Function}", "input": "JavaScript", "output": "function filterFiles (filters) {\n  return (files, metalsmith, done) => {\n    filter(files, filters, metalsmith.metadata(), done)\n  }\n}"}, {"instruction": "Creates an error object to be thrown when the reporter specified in the options was not found.\n\n@public\n@param {string} message - Error message to be displayed.\n@param {string} reporter - User-specified reporter value.\n@returns {Error} instance detailing the error condition", "input": "JavaScript", "output": "function createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = 'ERR_MOCHA_INVALID_REPORTER';\n  err.reporter = reporter;\n  return err;\n}"}, {"instruction": "Coerces the HTTP request body to a Buffer\n\n@param {string|Buffer} body\n@param {*} encoding", "input": "JavaScript", "output": "function getBodyAsBuffer(body, encoding) {\n  return body instanceof Buffer\n    ? body\n    : Buffer.from(`${body || ''}`, normalizeBodyEncoding(encoding));\n}"}, {"instruction": "True if is interaction with external contract (change in context, no delegate calls) (send, call of other contracts)\n@node {ASTNode} some AstNode\n@return {bool}", "input": "JavaScript", "output": "function isInteraction (node) {\n  return isLLCall(node) || isLLSend(node) || isExternalDirectCall(node) || isTransfer(node) || isLLCall050(node) || isLLSend050(node)\n}"}, {"instruction": "extended", "input": "JavaScript", "output": "function( options ){\n\n            parent.init.call( this );\n            this.options.defaults({\n                channel: 'collisions:candidates' //default channel\n            });\n            this.options( options );\n\n            this.encounters = [];\n            this.candidates = [];\n\n            this.clear();\n        }"}, {"instruction": "Unescapes a double quoted string.\n\n@param string value A double quoted string.\n\n@return string The unescaped string.", "input": "JavaScript", "output": "function(value)\n\t{\n\t\tvar callback = function(m) {\n\t\t\treturn new YamlUnescaper().unescapeCharacter(m);\n\t\t};\n\n\t\t// evaluate the string\n\t\treturn value.replace(new RegExp(YamlUnescaper.REGEX_ESCAPED_CHARACTER, 'g'), callback);\n\t}"}, {"instruction": "/*\nEnable link preview popup when force touch is appled to link elements\n\n@return   bool", "input": "JavaScript", "output": "function() {\n                var deferred = $q.defer();\n\n                this.isAvailable().then(function() {\n                    window.ThreeDeeTouch.enableLinkPreview();\n                        deferred.resolve(true);\n                },\n                function(err) {\n                    deferred.reject(err);\n                });\n\n                return deferred.promise;\n            }"}, {"instruction": "tutorials can have only one parent so there is no risk for loops", "input": "JavaScript", "output": "function saveChildren(node) {\n        node.children.forEach(function(child) {\n            var originalFileName = child.name;\n            var isHtmlTutorial = child.type === tutorial.TYPES.HTML;\n            var title = 'Tutorial: ' + child.title;\n            var fileName = helper.tutorialToUrl(child.name);\n\n            generateTutorial(title, child, fileName, originalFileName, isHtmlTutorial);\n            saveChildren(child);\n        });\n    }"}, {"instruction": "-----------------------------------------------------------------------------", "input": "JavaScript", "output": "function getIdlType(type) {\n    var result\n\n\n    if (-1 == NativeTypes.indexOf(type.name)) {\n        result = \"<a href='javascript:showInterface(\\\"\" + type.name + \"\\\"); void(0);'>\" + type.name + \"</a>\"\n    }\n    else {\n        result = type.name\n    }\n\n    for (var i=0; i<type.rank; i++) {\n        result += \"[]\"\n    }\n\n    return \"<span class='type'>\" + result + \"</span>\"\n}"}, {"instruction": "11.14 Comma Operator", "input": "JavaScript", "output": "function parseExpression() {\n        var expr, startToken = lookahead;\n\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }"}, {"instruction": "Write a Cues element to the blobStream using the global `cues` array of CuePoints (use addCuePoint()).\nThe seek entry for the Cues in the SeekHead is updated.", "input": "JavaScript", "output": "function writeCues() {\n                var\n                    ebml = {\n                        \"id\": 0x1C53BB6B,\n                        \"data\": cues\n                    },\n                    \n                    cuesBuffer = new ArrayBufferDataStream(16 + cues.length * 32); // Pretty crude estimate of the buffer size we'll need\n                \n                writeEBML(cuesBuffer, blobBuffer.pos, ebml);\n                blobBuffer.write(cuesBuffer.getAsDataArray());\n                \n                // Now we know where the Cues element has ended up, we can update the SeekHead\n                seekPoints.Cues.positionEBML.data = fileOffsetToSegmentRelative(ebml.offset);\n            }"}, {"instruction": "Generate a URL with the host data given by opts and the given path", "input": "JavaScript", "output": "function genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}"}, {"instruction": "ORIGINAL SOURCE: https://github.com/getsentry/raven-js/\nGiven a child DOM element, returns a query-selector statement describing that\nand its ancestors\ne.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n@param elem\n@returns {string}", "input": "JavaScript", "output": "function htmlTreeAsString (elem) {\n  var MAX_TRAVERSE_HEIGHT = 5\n  var MAX_OUTPUT_LEN = 80\n  var out = []\n  var height = 0\n  var len = 0\n  var separator = ' > '\n  var sepLength = separator.length\n  var nextStr\n\n  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n    nextStr = htmlElementAsString(elem)\n    // bail out if\n    // - nextStr is the 'html' element\n    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n    //   (ignore this limit if we are on the first iteration)\n    if (\n      nextStr === 'html' ||\n      (height > 1 &&\n       len + (out.length * sepLength) + nextStr.length >= MAX_OUTPUT_LEN)\n    ) {\n      break\n    }\n\n    out.push(nextStr)\n\n    len += nextStr.length\n    elem = elem.parentNode\n  }\n\n  return out.reverse().join(separator)\n}"}, {"instruction": "Returns the currency symbols available for this locale.\nCurrency symbols get accumulated by custom currency symbols.\n\n@returns {object} the map of all currency symbols available in this locale, e.g.\n{\n\"AUD\": \"A$\",\n\"BRL\": \"R$\",\n\"EUR\": \"\u20ac\",\n\"GBP\": \"\u00a3\",\n}\n@public\n@since 1.60", "input": "JavaScript", "output": "function() {\n\t\t\t// Lookup into global Config\n\t\t\tvar mCustomCurrencies = this._get(\"currency\"),\n\t\t\t\tmCustomCurrencySymbols = {},\n\t\t\t\tsIsoCode;\n\n\t\t\tfor (var sCurrencyKey in mCustomCurrencies) {\n\t\t\t\tsIsoCode = mCustomCurrencies[sCurrencyKey].isoCode;\n\n\t\t\t\tif (mCustomCurrencies[sCurrencyKey].symbol) {\n\t\t\t\t\tmCustomCurrencySymbols[sCurrencyKey] = mCustomCurrencies[sCurrencyKey].symbol;\n\t\t\t\t} else if (sIsoCode) {\n\t\t\t\t\tmCustomCurrencySymbols[sCurrencyKey] = this._get(\"currencySymbols\")[sIsoCode];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Object.assign({}, this._get(\"currencySymbols\"), mCustomCurrencySymbols);\n\t\t}"}, {"instruction": "callback to be executed when the call to stat completes or immediately if a stat object was passed as an argument", "input": "JavaScript", "output": "function doReadFile(stat) {\n            if (stat.size > (FileUtils.MAX_FILE_SIZE)) {\n                callback(FileSystemError.EXCEEDS_MAX_FILE_SIZE);\n            } else {\n                appshell.fs.readFile(path, encoding, function (_err, _data, encoding, preserveBOM) {\n                    if (_err) {\n                        callback(_mapError(_err));\n                    } else {\n                        callback(null, _data, encoding, preserveBOM, stat);\n                    }\n                });\n            }\n        }"}, {"instruction": "Build CSS", "input": "JavaScript", "output": "function() {\n    return gulp\n      .src(item.dest + item.name + '.css')\n      .pipe(rename(item.name + '.min.css'))\n      .pipe(cleanCSS())\n      .pipe(gulp.dest(item.dest));\n  }"}, {"instruction": "Displays the UI for a signed out user.", "input": "JavaScript", "output": "function() {\n  document.getElementById('user-signed-in').style.display = 'none';\n  document.getElementById('user-signed-out').style.display = 'block';\n  ui.start('#firebaseui-container', getUiConfig());\n}"}, {"instruction": "do x=floor(x/n) for bigInt x and integer n, and return the remainder", "input": "JavaScript", "output": "function divInt_(x, n) {\n  var i, r=0, s;\n  for (i=x.length-1; i>=0; i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}"}, {"instruction": "/* Ensure a date is within any min/max bounds.", "input": "JavaScript", "output": "function(inst, date) {\n\t\tvar minDate = this._getMinMaxDate(inst, \"min\"),\n\t\t\tmaxDate = this._getMinMaxDate(inst, \"max\"),\n\t\t\tnewDate = (minDate && date < minDate ? minDate : date);\n\t\treturn (maxDate && newDate > maxDate ? maxDate : newDate);\n\t}"}, {"instruction": "\u83b7\u53d6\u6587\u7ae0\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u5728\u6587\u7ae0\u5934\u90e8\u901a\u8fc7[key]: value \u7684\u5f62\u5f0f\n@param  {String} body \u6587\u7ae0\u5185\u5bb9\n[intro]: \u6587\u7ae0\u7684\u4ecb\u7ecd\u6587\u7ae0\u7684\u4ecb\u7ecd\u6587\u7ae0\u7684\u4ecb\u7ecd\n@return {Object}      \u6587\u7ae0\u7684\u914d\u7f6e\u53c2\u6570", "input": "JavaScript", "output": "function getPostQuery(body) {\n  if (!body) return {};\n\n  let result = {};\n  let commentReg = /^\\[(\\w+)\\]\\:([\\s|\\S]+)/;\n  body.split('\\r\\n').every((item) => {\n    let itemMatch = item.match(commentReg);\n    if (itemMatch && itemMatch.length == 3) {\n      let queryKey = itemMatch[1],\n        queryVal = itemMatch[2];\n      result[queryKey] = queryVal && queryVal.trim();\n      return true;\n    } else {\n      return false;\n    }\n  })\n\n  return result;\n}"}, {"instruction": "Create a new item in the current project.\n\n@param baseDir {string|Directory} Full path of the directory where the item should go.\nDefaults to the project root if the entry is not valid or not within the project.\n@param initialName {string} Initial name for the item\n@param skipRename {boolean} If true, don't allow the user to rename the item\n@param isFolder {boolean} If true, create a folder instead of a file\n@return {$.Promise} A promise object that will be resolved with the File\nof the created object, or rejected if the user cancelled or entered an illegal\nfilename.", "input": "JavaScript", "output": "function createNewItem(baseDir, initialName, skipRename, isFolder) {\n        baseDir = model.getDirectoryInProject(baseDir);\n\n        if (skipRename) {\n            if(isFolder) {\n                return model.createAtPath(baseDir + initialName + \"/\");\n            }\n            return model.createAtPath(baseDir + initialName);\n        }\n        return actionCreator.startCreating(baseDir, initialName, isFolder);\n    }"}, {"instruction": "Mimic Array.filter() API, but with an async callback function. Execute each callback on each array item serially. Useful when using WebDriverIO API. Added due because of problem with chrome driver when too many requests are made simultaneously. https://bugs.chromium.org/p/chromedriver/issues/detail?id=2152#c9 @param {object[]} array Input array items to iterate over @param {function} callback Async function to excute on each array item @param {object} option Additional options. 'extractValue' will extract the .value object from a WebdriverIO", "input": "JavaScript", "output": "async function filterAsync(array, callback, option = {}) {\n  const {\n    extractValue = true,\n  } = option;\n  const inputArray = Array.isArray(array) ? array : [array];\n  const values = [];\n  for (let index = 0; index < inputArray.length; index++) {\n    try {\n      const res = unify(await callback(inputArray[index], index, inputArray), { extractValue });\n      const value = Array.isArray(res) ? res[0] : res;\n\n      if (value) {\n        values.push(inputArray[index]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n  return values;\n}"}, {"instruction": "Returns the encoded vast url if it exists on a bid object, only if prebid-cache\nis disabled, and description_url is not already set on a given input\n@param {AdapterBidResponse} bid object to check for vast url\n@param {Object} components the object to check that description_url is NOT set on\n@param {string} prop the property of components that would contain description_url\n@return {string | undefined} The encoded vast url if it exists, or undefined", "input": "JavaScript", "output": "function getDescriptionUrl(bid, components, prop) {\n  if (config.getConfig('cache.url')) { return; }\n\n  if (!deepAccess(components, `${prop}.description_url`)) {\n    const vastUrl = bid && bid.vastUrl;\n    if (vastUrl) { return encodeURIComponent(vastUrl); }\n  } else {\n    logError(`input cannnot contain description_url`);\n  }\n}"}, {"instruction": "Adaptive text sizing function\n\n@private\n@param width Parent width\n@param height Parent height\n@param fontSize Requested text size\n@param scale Proportional scale of text", "input": "JavaScript", "output": "function textSize(width, height, fontSize, scale) {\n\t    var stageWidth = parseInt(width, 10);\n\t    var stageHeight = parseInt(height, 10);\n\n\t    var bigSide = Math.max(stageWidth, stageHeight);\n\t    var smallSide = Math.min(stageWidth, stageHeight);\n\n\t    var newHeight = 0.8 * Math.min(smallSide, bigSide * scale);\n\t    return Math.round(Math.max(fontSize, newHeight));\n\t}"}, {"instruction": "Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n\n@param id ID associated with the file.\n@param uploadId AWS uploadId for this file\n@param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n@returns {qq.Promise}", "input": "JavaScript", "output": "function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }"}, {"instruction": "Given a simple array of css color strings, eg. [\"red\", \"orange\", \"black\"],\nreturn an evenly spaced array suitable to instantiate a color map.\n@private\n@param  {String[]} simpleArray A simple array of css color strings, eg. [\"red\", \"orange\", \"black\"].\n@return {Object[]} An array of {color, offset} objects.", "input": "JavaScript", "output": "function simpleArrayToArray(simpleArray) {\n  return simpleArray\n    .map(function(el, index) {\n      return {\n        color: el,\n        offset: simpleArray.length === 1 ? 0 : index / (simpleArray.length - 1)\n      };\n    })\n    .filter(function(o) {\n      return o.color !== \"\";\n    });\n}"}, {"instruction": "return true if the given doc matches the supplied selector", "input": "JavaScript", "output": "function matchesSelector(doc, selector) {\n  /* istanbul ignore if */\n  if (typeof selector !== 'object') {\n    // match the CouchDB error message\n    throw 'Selector error: expected a JSON object';\n  }\n\n  selector = massageSelector(selector);\n  var row = {\n    'doc': doc\n  };\n\n  var rowsMatched = filterInMemoryFields([row], { 'selector': selector }, Object.keys(selector));\n  return rowsMatched && rowsMatched.length === 1;\n}"}, {"instruction": "Sets bytes for node\n@param {Node} node\n@param {ArrayBuffer|Uint8Array|string|undefined} bytes", "input": "JavaScript", "output": "function setBytes(node, bytes) {\n    if (typeof bytes === 'string') {\n        bytes = ByteUtils.base64ToBytes(bytes);\n    }\n    setText(node, bytes ? ByteUtils.bytesToBase64(ByteUtils.arrayToBuffer(bytes)) : undefined);\n}"}, {"instruction": "called when the layer is removed from the game world or a container", "input": "JavaScript", "output": "function onDeactivateEvent() {\n         // cancel all event subscriptions\n         me.event.unsubscribe(this.vpChangeHdlr);\n         me.event.unsubscribe(this.vpResizeHdlr);\n         me.event.unsubscribe(this.vpLoadedHdlr);\n       }"}, {"instruction": "Convolve the image with the specified kernel.\n\n@example\nsharp(input)\n.convolve({\nwidth: 3,\nheight: 3,\nkernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n})\n.raw()\n.toBuffer(function(err, data, info) {\n// data contains the raw pixel data representing the convolution\n// of the input image with the horizontal Sobel operator\n});\n\n@param {Object} kernel\n@param {Number} kernel.width - width of the kernel in pixels.\n@param {Number} kernel.height - width of the kernel in pixels.\n@param {Array<Number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n@param {Number} [kernel.scale=sum] - the scale of the kernel in pixels.\n@param {Number} [kernel.offset=0] - the offset of the kernel in pixels.\n@returns {Sharp}\n@throws {Error} Invalid parameters", "input": "JavaScript", "output": "function convolve (kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) ||\n      !is.integer(kernel.width) || !is.integer(kernel.height) ||\n      !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) ||\n      kernel.height * kernel.width !== kernel.kernel.length\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  }\n  // Default scale is sum of kernel values\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  }\n  // Clip scale to a minimum value of 1\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n  this.options.convKernel = kernel;\n  return this;\n}"}, {"instruction": "+'s are replaced with spaces when used in query params, this returns them to +'s, then removes remaining whitespace. https://github.com/badges/shields/pull/1546", "input": "JavaScript", "output": "function decodeDataUrlFromQueryParam(value) {\n  if (typeof value !== 'string') {\n    return undefined\n  }\n  const maybeDataUrl = prependPrefix(value, 'data:')\n    .replace(/ /g, '+')\n    .replace(/\\s/g, '')\n  return isDataUrl(maybeDataUrl) ? maybeDataUrl : undefined\n}"}, {"instruction": "A node in the dynamic tree. The client does not interact with this directly.\n\n@prop {AABB} aabb Enlarged AABB\n@prop {integer} height 0: leaf, -1: free node", "input": "JavaScript", "output": "function TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n}"}, {"instruction": "Get the URI to locate the entity set for the query result.\n\n@param {String}\nsServiceRootURI (optional) Identifies the root of the OData\nservice\n\n@returns {String} The resource path of the URI pointing to the entity\nset. It is a relative URI unless a service root is given, which\nwould then prefixed in order to return a complete URL.\n@public\n@function\n@name sap.ui.model.analytics.odata4analytics.QueryResultRequest#getURIToQueryResultEntitySet", "input": "JavaScript", "output": "function(sServiceRootURI) {\n\t\t\tvar sURI = null;\n\t\t\tif (this._sResourcePath != null) {\n\t\t\t\tsURI = (sServiceRootURI ? sServiceRootURI : \"\") + this._sResourcePath;\n\t\t\t} else if (this._oQueryResult.getParameterization()) {\n\t\t\t\tif (!this._oParameterizationRequest) {\n\t\t\t\t\tthrow \"Missing parameterization request\";\n\t\t\t\t} else {\n\t\t\t\t\tsURI = this._oParameterizationRequest.getURIToParameterizationEntry(sServiceRootURI) + \"/\"\n\t\t\t\t\t\t\t+ this._oQueryResult.getParameterization().getNavigationPropertyToQueryResult();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsURI = (sServiceRootURI ? sServiceRootURI : \"\") + \"/\" + this._oQueryResult.getEntitySet().getQName();\n\t\t\t}\n\t\t\treturn sURI;\n\t\t}"}, {"instruction": "Opens the panel. If a config value is passed, creates a new panelRef\nusing $mdPanel.open(config); Otherwise, called open on the panelRef,\nassuming one has already been created.\n@param {!Object=} opt_config", "input": "JavaScript", "output": "function openPanel(preset, opt_config) {\n    // TODO(ErinCoughlan): Investigate why panelRef.open() doesn't return\n    // panelRef.\n    var openPromise;\n\n    if (panelRef) {\n      openPromise = panelRef.open();\n    } else {\n      openPromise = $mdPanel.open(preset, opt_config);\n    }\n\n    openPromise.then(function(createdPanelRef) {\n      panelRef = createdPanelRef;\n      return panelRef;\n    });\n\n    flushPanel();\n  }"}, {"instruction": "/*\nThis function initializes the js_graph objects inspecting the html document", "input": "JavaScript", "output": "function initPageObjects()\n{\n\tif(isCanvas(document.body))\n\t{\n\t\tvar newCanvas = new Canvas(document.body);\n\t\tnewCanvas.initCanvas();\n\t\tcanvases.push(newCanvas);\n\t}\n\telse\n\t{\t\n\t\tvar divs = document.getElementsByTagName('div');\n\t\tvar i;\n\t\tfor(i = 0; i < divs.length; i++)\n\t\t{\n\t\t\tif(isCanvas(divs[i]) && !findCanvas(divs[i].id))\n\t\t\t{\n\t\t\t\tvar newCanvas = new Canvas(divs[i]);\n\t\t\t\tnewCanvas.initCanvas();\n\t\t\t\tcanvases.push(newCanvas);\n\t\t\t\tnewCanvas.fitBlocks();\n\t\t\t\tnewCanvas.alignBlocks();\n\t\t\t}\n\t\t}\n\t}\n}"}, {"instruction": "~~~~~~~~ // Reducers // ~~~~~~~~ //", "input": "JavaScript", "output": "function getReducerName(type) {\n  const trailer = type.match(/s$/) ? '' : 's';\n  return `${type.slice(0, 1).toLowerCase()}${type.slice(1)}${trailer}`;\n}"}, {"instruction": "cloudant", "input": "JavaScript", "output": "function viewSearch (ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, { type: 'search' }, qs, callback)\n    }"}, {"instruction": "Clones a given metadata instance\n@param source the instance to clone\n@returns {*} cloned metadata", "input": "JavaScript", "output": "function cloneMetadata(source) {\n\t\t\tvar backupMetadata = initMetadata(source.__ui5version);\n\t\t\tfor (var index in source.__byIndex__) {\n\t\t\t\tbackupMetadata.__byIndex__[index] = source.__byIndex__[index];\n\t\t\t}\n\t\t\tfor (var key in source.__byKey__) {\n\t\t\t\tbackupMetadata.__byKey__[key] = source.__byKey__[key];\n\t\t\t}\n\t\t\treturn backupMetadata;\n\t\t}"}, {"instruction": "Set the opacity of the drawer.\n@param {Number} opacity\n@return {OpenSeadragon.Drawer} Chainable.", "input": "JavaScript", "output": "function( opacity ) {\n        $.console.error(\"drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.\");\n        var world = this.viewer.world;\n        for (var i = 0; i < world.getItemCount(); i++) {\n            world.getItemAt( i ).setOpacity( opacity );\n        }\n        return this;\n    }"}, {"instruction": "/*\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 2); // [1, 2, 'a', 'c', 'e', 5, 6]\ninsert([1, 2, 5, 6], 'a', 2); // [1, 2, 'a', 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 0); // ['a', 'c', 'e', 1, 2, 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e']); // ['a', 'c', 'e', 1, 2, 5, 6]", "input": "JavaScript", "output": "function insert(arr1, arr2, index) {\n  if (!Array.isArray(arr1)) {\n    throw new Error('expected an array for first argument');\n  }\n  if (arguments.length > 2 && typeof index != 'number') {\n    throw new Error('expected a number for third argument');\n  }\n  if (!Array.isArray(arr2)) {\n    arr2 = [arr2];\n  }\n  if (!index) {\n    return arr2.concat(arr1);\n  }\n  var front = arr1.slice(0, index);\n  var back = arr1.slice(index);\n  return front.concat(arr2, back);\n}"}, {"instruction": "Sets up the map including the speaker audio points.", "input": "JavaScript", "output": "function() {\n    // Loop through the tiles and setup the audio listeners.\n    for (var i=0; i<this.grid.length; i++) {\n      if (this.grid[i] === 2) {\n        var y = Math.floor(i / this.size);\n        var x = i % this.size;\n        game.audio.speaker(x, y);\n      }\n    }\n  }"}, {"instruction": "Opens the given collection.\n\n@param   {DataStore}         dataStore  - The DataStore to operate on\n@param   {string|Resource}   collection - The collection path or a Resource object\n@param   {function}          callback   - Called with Error, collection Resource, and Resource array", "input": "JavaScript", "output": "function openCollection (dataStore, collection, callback) {\n  if (_.isString(collection)) {\n    collection = new Resource(collection, \"\", \"\");\n  }\n  else if (!(collection instanceof Resource)) {\n    throw ono(\"Expected a string or Resource object. Got a %s instead.\", typeof (collection));\n  }\n\n  // Normalize the collection name\n  let collectionName = collection.valueOf(dataStore.__router, true);\n\n  // Open the data store\n  dataStore.__openDataStore(collectionName, (err, resources) => {\n    callback(err, collection, resources);\n  });\n}"}, {"instruction": "//////////////////////////////////////////////////////////// Converts a connection string or object into its safe copy: if password is present, it is masked with symbol '#'.", "input": "JavaScript", "output": "function getSafeConnection(cn) {\n    if (typeof cn === 'object') {\n        const copy = Object.assign({}, cn);\n        if (typeof copy.password === 'string') {\n            copy.password = copy.password.replace(/./g, '#');\n        }\n        if (typeof copy.connectionString === 'string') {\n            copy.connectionString = maskPassword(copy.connectionString);\n        }\n        return copy;\n    }\n    return maskPassword(cn);\n}"}, {"instruction": "Creates a local instance of an alert group.\n\n@param {Object} props The properties for the alert group.\n@return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.\n\n@method splunkjs.Service.FiredAlertGroupCollection", "input": "JavaScript", "output": "function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.FiredAlertGroup(this.service, props.name, entityNamespace);\n        }"}, {"instruction": "traditional ordinal numbers above 31 are not commonly used in colloquial Welsh", "input": "JavaScript", "output": "function (number) {\n            var b = number,\n                output = '',\n                lookup = [\n                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed\n                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed\n                ];\n\n            if (b > 20) {\n                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {\n                    output = 'fed'; // not 30ain, 70ain or 90ain\n                } else {\n                    output = 'ain';\n                }\n            } else if (b > 0) {\n                output = lookup[b];\n            }\n\n            return number + output;\n        }"}, {"instruction": "This method is like `_.set` except that accepts `updater` to produce the\nvalue to set. Use `_.updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.\n\n@static\n@memberOf _\n@since 4.6.0\n@category Object\n@param {Object} object The object to modify.\n@param {Array|string} path The path of the property to set.\n@param {Function} updater The function to produce the updated value.\n@returns {Object} Returns `object`.\n@example\n\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0", "input": "JavaScript", "output": "function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }"}, {"instruction": "\"A collapsed block prop is either a collapsed line break that is not an extraneous line break, or an Element that is an inline node and whose children are all either invisible or collapsed block props and that has at least one child that is a collapsed block prop.\"", "input": "JavaScript", "output": "function isCollapsedBlockProp(node) {\n\tif (isCollapsedLineBreak(node)\n\t&& !isExtraneousLineBreak(node)) {\n\t\treturn true;\n\t}\n\n\tif (!isInlineNode(node)\n\t|| node.nodeType != Node.ELEMENT_NODE) {\n\t\treturn false;\n\t}\n\n\tvar hasCollapsedBlockPropChild = false;\n\tfor (var i = 0; i < node.childNodes.length; i++) {\n\t\tif (!isInvisible(node.childNodes[i])\n\t\t&& !isCollapsedBlockProp(node.childNodes[i])) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isCollapsedBlockProp(node.childNodes[i])) {\n\t\t\thasCollapsedBlockPropChild = true;\n\t\t}\n\t}\n\n\treturn hasCollapsedBlockPropChild;\n}"}, {"instruction": "Handle the response from the tern node domain when\nit responds with the definition\n\n@param response - the response from the node domain", "input": "JavaScript", "output": "function handleJumptoDef(response) {\n\n        var file = response.file,\n            offset = response.offset;\n\n        var $deferredJump = getPendingRequest(file, offset, MessageIds.TERN_JUMPTODEF_MSG);\n\n        if ($deferredJump) {\n            response.fullPath = getResolvedPath(response.resultFile);\n            $deferredJump.resolveWith(null, [response]);\n        }\n    }"}, {"instruction": "Simple bootstrapper for attaching logger and watch plugins by default. Other plugins can be attached through `monitor.use(plugin, options)`.", "input": "JavaScript", "output": "function bootstrap(monitor) {\n    plugins.logger.attach.call(monitor, options);\n    if (options.watch) {\n      plugins.watch.attach.call(monitor, options);\n    }\n  }"}, {"instruction": "Main function to run the sandbox", "input": "JavaScript", "output": "function main() {\n    loadDependencies();\n    setInitialData();\n    domHelpers.initDomElements();\n\n    setDataInInputField();\n    setConfigInInputField();\n    setChartSelectorType();\n    setNewChart();\n    setHandlers();\n}"}, {"instruction": "Creates an instance of VASTClient.\n@param  {Number} cappingFreeLunch - The number of first calls to skip.\n@param  {Number} cappingMinimumTimeInterval - The minimum time interval between two consecutive calls.\n@param  {Storage} customStorage - A custom storage to use instead of the default one.\n@constructor", "input": "JavaScript", "output": "function VASTClient(cappingFreeLunch, cappingMinimumTimeInterval, customStorage) {\n    classCallCheck(this, VASTClient);\n\n    this.cappingFreeLunch = cappingFreeLunch || 0;\n    this.cappingMinimumTimeInterval = cappingMinimumTimeInterval || 0;\n    this.defaultOptions = {\n      withCredentials: false,\n      timeout: 0\n    };\n    this.vastParser = new VASTParser();\n    this.storage = customStorage || new Storage();\n\n    // Init values if not already set\n    if (this.lastSuccessfulAd === undefined) {\n      this.lastSuccessfulAd = 0;\n    }\n\n    if (this.totalCalls === undefined) {\n      this.totalCalls = 0;\n    }\n    if (this.totalCallsTimeout === undefined) {\n      this.totalCallsTimeout = 0;\n    }\n  }"}, {"instruction": "---------------------------------------------------------------------", "input": "JavaScript", "output": "function buildHttpURL(uri) {\n    var port     = weinre_port\n    var pathname = weinre_pathname\n\n    if (pathname == \"/index.html\") pathname = \"/\"\n\n    if (weinre_protocol == \"file:\") {\n        return uri\n    }\n\n    else if (weinre_protocol == \"http:\") {\n        if (port != \"\") port = \":\" + port\n\n        return weinre_protocol + \"//\" + weinre_host + port + pathname + uri\n    }\n\n    else if (weinre_protocol == \"https:\") {\n        if (port != \"\") port = \":\" + port\n\n        return weinre_protocol + \"//\" + weinre_host + port + pathname + uri\n    }\n}"}, {"instruction": "/*\nConvert an array of little-endian words to a hex string.", "input": "JavaScript", "output": "function (binarray) {\r\n        var hex_tab = \"0123456789abcdef\";\r\n        var str = \"\";\r\n        for(var i = 0; i < binarray.length * 4; i++)\r\n        {\r\n            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +\r\n                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);\r\n        }\r\n        return str;\r\n    }"}, {"instruction": "Reset the tracking by hiding the tooltip, the hover series state and the hover point", "input": "JavaScript", "output": "function resetTracker() {\r\n\t\t\tvar hoverSeries = chart.hoverSeries,\r\n\t\t\t\thoverPoint = chart.hoverPoint;\r\n\r\n\t\t\tif (hoverPoint) {\r\n\t\t\t\thoverPoint.onMouseOut();\r\n\t\t\t}\r\n\r\n\t\t\tif (hoverSeries) {\r\n\t\t\t\thoverSeries.onMouseOut();\r\n\t\t\t}\r\n\r\n\t\t\tif (tooltip) {\r\n\t\t\t\ttooltip.hide();\r\n\t\t\t}\r\n\r\n\t\t\thoverX = null;\r\n\t\t}"}, {"instruction": "PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END", "input": "JavaScript", "output": "function (obj) {\n    return function (subscriber) {\n        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__[\"observable\"]]();\n        if (typeof obs.subscribe !== 'function') {\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n}"}, {"instruction": "Internal *", "input": "JavaScript", "output": "function addTransformsToNotifier(notifier) {\n  notifier\n    .addTransform(transforms.baseData)\n    .addTransform(transforms.handleItemWithError)\n    .addTransform(transforms.addBody)\n    .addTransform(sharedTransforms.addMessageWithError)\n    .addTransform(sharedTransforms.addTelemetryData)\n    .addTransform(sharedTransforms.addConfigToPayload)\n    .addTransform(transforms.scrubPayload)\n    .addTransform(sharedTransforms.itemToPayload);\n}"}, {"instruction": "/* [MS-XLS] 2.5.198.21", "input": "JavaScript", "output": "function parse_NameParsedFormula(blob, length, opts, cce) {\n\tvar target = blob.l + length;\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tvar rgcb;\n\tif(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n\treturn [rgce, rgcb];\n}"}, {"instruction": "ServiceCatalog class\n\n@description wrapper for the service catalog response from keystone\n\n@param {object}  catalog     the raw data to parse into the catalog\n@constructor", "input": "JavaScript", "output": "function (catalog) {\n  var self = this;\n\n  self.services = {};\n\n  _.each(catalog, function (service) {\n    // Special hack for rackspace with two compute types\n    if (service.type === 'compute' && service.name === 'cloudServers') {\n      return;\n    }\n\n    self.services[service.name] = new Service(service);\n  });\n}"}, {"instruction": "Convert the JSON object to a padded buffer.\n\nPad the JSON with extra whitespace to fit the next 4-byte boundary. This ensures proper alignment\nfor the section that follows.\n\n@param {Object} [json] The JSON object.\n@returns {Buffer} The padded JSON buffer.\n\n@private", "input": "JavaScript", "output": "function getJsonBufferPadded(json) {\n    let string = JSON.stringify(json);\n\n    const boundary = 4;\n    const byteLength = Buffer.byteLength(string);\n    const remainder = byteLength % boundary;\n    const padding = (remainder === 0) ? 0 : boundary - remainder;\n    let whitespace = '';\n    for (let i = 0; i < padding; ++i) {\n        whitespace += ' ';\n    }\n    string += whitespace;\n\n    return Buffer.from(string);\n}"}, {"instruction": "Build an includePaths string\nfrom the options.includePaths array and the SASS_PATH environment variable\n\n@param {Object} options\n@api private", "input": "JavaScript", "output": "function buildIncludePaths(options) {\n  options.includePaths = options.includePaths || [];\n\n  if (process.env.hasOwnProperty('SASS_PATH')) {\n    options.includePaths = options.includePaths.concat(\n      process.env.SASS_PATH.split(path.delimiter)\n    );\n  }\n\n  // Preserve the behaviour people have come to expect.\n  // This behaviour was removed from Sass in 3.4 and\n  // LibSass in 3.5.\n  options.includePaths.unshift(process.cwd());\n\n  return options.includePaths.join(path.delimiter);\n}"}, {"instruction": "Helper that creates a NDEF record containing an absolute URI.\n\nAn Absolute URI record means the URI describes the payload of the record.\n\nFor example a SOAP message could use \"http://schemas.xmlsoap.org/soap/envelope/\"\nas the type and XML content for the payload.\n\nAbsolute URI can also be used to write LaunchApp records for Windows.\n\nSee 2.4.2 Payload Type of the NDEF Specification\nhttp://www.nfc-forum.org/specs/spec_list#ndefts\n\nNote that by default, Android will open the URI defined in the type\nfield of an Absolute URI record (TNF=3) and ignore the payload.\nBlackBerry and Windows do not open the browser for TNF=3.\n\nTo write a URI as the payload use ndef.uriRecord(uri)\n\n@uri String\n@payload byte[] or String\n@id byte[] (optional)", "input": "JavaScript", "output": "function (uri, payload, id) {\n        if (!id) { id = []; }\n        if (!payload) { payload = []; }\n        return ndef.record(ndef.TNF_ABSOLUTE_URI, uri, id, payload);\n    }"}, {"instruction": "Executes the CLI based on an array of arguments that is passed in.\n@param {string|Array|Object} args The arguments to process.\n@returns {int} The exit code for the operation.", "input": "JavaScript", "output": "function execute(args) {\n    try {\n        const currentOptions = options.parse(args)\n        return executeOptions(currentOptions)\n    } catch (error) {\n        console.error(error.message)\n        return 1\n    }\n}"}, {"instruction": "Returns an unqualified search string by removing any leading 'search '\ncommand.  This method does a simple search at the beginning of the\nsearch.", "input": "JavaScript", "output": "function(q) {\n            var workingQ = '' + q;\n            workingQ = workingQ.replace(this.reLTrimCommand, '');\n            if (workingQ.substring(0, 7) == 'search ') {\n                return workingQ.substring(7).replace(this.reLTrimCommand, '');\n            }\n            return q;\n        }"}, {"instruction": "/* -----[ Tokenizer ]-----", "input": "JavaScript", "output": "function is_alphanumeric_char(ch) {\n        ch = ch.charCodeAt(0);\n        return (ch >= 48 && ch <= 57) ||\n                (ch >= 65 && ch <= 90) ||\n                (ch >= 97 && ch <= 122);\n}"}, {"instruction": "Tells if an object is a primitive type or a \"real\" object\nArrays are considered primitive", "input": "JavaScript", "output": "function isPrimitiveType (obj) {\n  return ( typeof obj === 'boolean' ||\n       typeof obj === 'number' ||\n       typeof obj === 'string' ||\n       obj === null ||\n       util.isDate(obj) ||\n       util.isArray(obj));\n}"}, {"instruction": "Determines whether a provided address matches the provided parent domain in order\nto avoid certain attack vectors.\n\n@param {String} srvAddress The address to check against a domain\n@param {String} parentDomain The domain to check the provided address against\n@return {Boolean} Whether the provided address matches the parent domain", "input": "JavaScript", "output": "function matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}"}, {"instruction": "\u5206\u6790\u6ce8\u91ca\u4e2d\u4f9d\u8d56\u7528\u6cd5\u3002\n@param {String} comment \u6ce8\u91ca\u5185\u5bb9\n@param {Callback} [callback] \u53ef\u4ee5\u901a\u8fc7\u6b64\u53c2\u6570\u6765\u66ff\u6362\u539f\u6709\u66ff\u6362\u56de\u8c03\u51fd\u6570\u3002\n@memberOf fis.compile", "input": "JavaScript", "output": "function analyseComment(comment, callback) {\n  var reg = /(@(require|async|require\\.async)\\s+)('[^']+'|\"[^\"]+\"|[^\\s;!@#%^&*()]+)/g;\n  callback = callback || function(m, prefix, type, value) {\n    type = type === 'require' ? type : 'async';\n\n    return prefix + map[type].wrap(value);\n  };\n\n  return comment.replace(reg, callback).replace(/(?:@|#)\\s+sourceMappingURL=([^\\s]+)/g, function(_, value) {\n    return '# sourceMappingURL=' + map.sourceMap.wrap(value);\n  });\n}"}, {"instruction": "Get Custom Fingerprint.  Take a string of datapoints and eturn a 32-bit integer representing the browsers fingerprint.", "input": "JavaScript", "output": "function() {\n      var bar = '|';\n      var key = \"\";\n      for (var i = 0; i < arguments.length; i++) {\n        key += arguments[i] + bar;\n      }\n      return murmurhash3_32_gc(key, 256);\n    }"}, {"instruction": "Returns a JSON (array) representation", "input": "JavaScript", "output": "function toJSON() {\n  const s = [];\n  let entry = this.head;\n  while (entry) {\n    s.push({ key: entry.key.toJSON(), value: entry.value.toJSON() });\n    entry = entry.newer;\n  }\n  return s;\n}"}, {"instruction": "Makes a call to reset user's account password by sms code and new password.\nThe sms code is sent by AV.User.requestPasswordResetBySmsCode.\n@param {String} code The sms code sent by AV.User.Cloud.requestSmsCode\n@param {String} password The new password.\n@return {Promise} A promise that will be resolved with the result\nof the function.", "input": "JavaScript", "output": "function(code, password) {\n        var json = { password: password };\n        var request = AVRequest(\n          'resetPasswordBySmsCode',\n          null,\n          code,\n          'PUT',\n          json\n        );\n        return request;\n      }"}, {"instruction": "Retrieve a property from an object\n@param {Object} object\n@param {Index} index\n@return {*} Returns the value of the property\n@private", "input": "JavaScript", "output": "function _getObjectProperty (object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1)\n  }\n\n  const key = index.dimension(0)\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property')\n  }\n\n  return getSafeProperty(object, key)\n}"}, {"instruction": "Returns true when a named property exists.\n\n@param {String} name     The property name\n@return {Boolean}        True, when property is found", "input": "JavaScript", "output": "function(name) {\n      var props = this.jCal[PROPERTY_INDEX];\n      var len = props.length;\n\n      var i = 0;\n      for (; i < len; i++) {\n        // 0 is property name\n        if (props[i][NAME_INDEX] === name) {\n          return true;\n        }\n      }\n\n      return false;\n    }"}, {"instruction": "Create touchable component based on passed parameter and platform.\nIt also returns default props for specific touchable types.", "input": "JavaScript", "output": "function makeTouchable(TouchableComponent) {\n    var Touchable = TouchableComponent || reactNative.Platform.select({\n      android: reactNative.TouchableNativeFeedback,\n      ios: reactNative.TouchableHighlight,\n      default: reactNative.TouchableHighlight\n    });\n    var defaultTouchableProps = {};\n\n    if (Touchable === reactNative.TouchableHighlight) {\n      defaultTouchableProps = {\n        underlayColor: 'rgba(0, 0, 0, 0.1)'\n      };\n    }\n\n    return {\n      Touchable: Touchable,\n      defaultTouchableProps: defaultTouchableProps\n    };\n  }"}, {"instruction": "Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n\n- Use `exec_mode=normal` to return a search job ID immediately (default).\nPoll for completion to find out when you can retrieve search results.\n\n- Use `exec_mode=blocking` to return the search job ID when the search has finished.\n\nTo run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.\n\n@example\n\nservice.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\nconsole.log(\"CREATED\": newJob.sid);\n});\n\n@param {String} query The search query.\n@param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=\" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n@param {Object} namespace Namespace information:\n- `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n- `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n- `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n@param {Function} callback A function to call with the created job: `(err, createdJob)`.\n\n@endpoint search/jobs\n@method splunkjs.Service", "input": "JavaScript", "output": "function(query, params, namespace, callback) {\n            if (!callback && utils.isFunction(namespace)) {\n                callback = namespace;\n                namespace = null;\n            }\n            \n            var jobs = new root.Jobs(this, namespace);\n            return jobs.search(query, params, callback);\n        }"}, {"instruction": "Case-insensitive scan of current elements only (do not descend).", "input": "JavaScript", "output": "function scanLevel(element) {\n        if (element) {\n          for (var i = 0, len = element.length; i < len; i++) {\n            if (element[i].nodeName.toLowerCase() === nodeName) {\n              return element[i];\n            }\n          }\n        }\n        return null;\n      }"}, {"instruction": "`URLSearchParams.prototype.has` method https://url.spec.whatwg.org/#dom-urlsearchparams-has", "input": "JavaScript", "output": "function has(name) {\n    validateArgumentsLength(arguments.length, 1);\n    var entries = getInternalParamsState(this).entries;\n    var key = name + '';\n    var i = 0;\n    while (i < entries.length) if (entries[i++].key === key) return true;\n    return false;\n  }"}, {"instruction": "Normalize all injections into Object-based format", "input": "JavaScript", "output": "function normalizeInject (options) {\n  var inject = options.inject;\n  if (Array.isArray(inject)) {\n    var normalized = options.inject = {};\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = inject[i];\n    }\n  }\n}"}, {"instruction": "Output all assets using a generator\n\n@param {Generator} generator\n@param {Output} output\n@return {Promise<Output>}", "input": "JavaScript", "output": "function generateAssets(generator, output) {\n    var assets = output.getAssets();\n    var logger = output.getLogger();\n\n    // Is generator ignoring assets?\n    if (!generator.onAsset) {\n        return Promise(output);\n    }\n\n    return Promise.reduce(assets, function(out, assetFile) {\n        logger.debug.ln('copy asset \"' + assetFile + '\"');\n\n        return generator.onAsset(out, assetFile);\n    }, output);\n}"}, {"instruction": "Resolves property names or property paths defined with period-delimited strings or arrays of strings. Property names that are found on the source object are used directly (even if they include a period). Nested property names that include periods, within a path, are only understood in array paths.", "input": "JavaScript", "output": "function getPropertyByPath(source: Object, path: string | Array<string>): any {\n  if (typeof path === 'string' && source.hasOwnProperty(path)) {\n    return source[path];\n  }\n\n  const parsedPath = typeof path === 'string' ? path.split('.') : path;\n  return parsedPath.reduce((previous, key) => {\n    if (previous === undefined) {\n      return previous;\n    }\n    return previous[key];\n  }, source);\n}"}, {"instruction": "Create a serializer\n\nMethod simply wraps a serializer provided by a user\nso it adds context to the error\n\n@returns {function} Serialization function", "input": "JavaScript", "output": "function createSerializer(serializer) {\n  var applyFn = function serializationWrapper(v, cb) {\n    try {\n      return cb ? serializer(v, cb) : serializer(v);\n    } catch (e) {\n      var modifiedError = new Error('Could not serialize value: ' + e.message);\n      modifiedError.value = v;\n      modifiedError.serializer = serializer;\n      throw modifiedError;\n    }\n  };\n\n  // We can check how many parameters the function has and activate the asynchronous\n  // operation if the number of parameters the function accepts is > 1\n  return {\n    apply: applyFn,\n    async: serializer.length > 1\n  };\n}"}, {"instruction": "Traverses all the children of the specified node\n\n@param {Node} node", "input": "JavaScript", "output": "function (node) {\n    this.level++;\n    for (var i = 0, count = node.childNodes.length; i < count; i++) {\n      this._visit(node.childNodes[i]);\n    }\n    this.level--;\n  }"}, {"instruction": "Returns a function that takes an object as an input and maps the object's keys using `mapper`. If the input is not an object, the input is returned unchanged.", "input": "JavaScript", "output": "function keyMapper(mapper) {\n  return obj => {\n    if (!isObject(obj) || Array.isArray(obj)) {\n      return obj;\n    }\n\n    const keys = Object.keys(obj);\n    const out = {};\n\n    for (let i = 0, l = keys.length; i < l; ++i) {\n      const key = keys[i];\n      out[mapper(key)] = obj[key];\n    }\n\n    return out;\n  };\n}"}, {"instruction": "ensure that control and library are loaded", "input": "JavaScript", "output": "function getObjectFallback(oClassObject) {\n\t\t\t\t// some modules might not return a class definition, so we fallback to the global\n\t\t\t\t// this is against the AMD definition, but is required for backward compatibility\n\t\t\t\tif (!oClassObject) {\n\t\t\t\t\tLog.error(\"Control '\" + sClassName + \"' did not return a class definition from sap.ui.define.\", \"\", \"XMLTemplateProcessor\");\n\t\t\t\t\toClassObject = ObjectPath.get(sClassName);\n\t\t\t\t}\n\t\t\t\tif (!oClassObject) {\n\t\t\t\t\tLog.error(\"Can't find object class '\" + sClassName + \"' for XML-view\", \"\", \"XMLTemplateProcessor\");\n\t\t\t\t}\n\t\t\t\treturn oClassObject;\n\t\t\t}"}, {"instruction": "istanbul ignore next", "input": "JavaScript", "output": "async function deleteBranch(branchName, abandonAssociatedPr = false) {\n  await config.storage.deleteBranch(branchName);\n  // istanbul ignore if\n  if (abandonAssociatedPr) {\n    const pr = await getBranchPr(branchName);\n    await abandonPr(pr.number);\n  }\n}"}, {"instruction": "Perform a request to the homeserver without any credentials.\n@param {Function} callback Optional. The callback to invoke on\nsuccess/failure. See the promise return values for more information.\n@param {string} method The HTTP method e.g. \"GET\".\n@param {string} path The HTTP path <b>after</b> the supplied prefix e.g.\n\"/createRoom\".\n\n@param {Object=} queryParams A dict of query params (these will NOT be\nurlencoded). If unspecified, there will be no query params.\n\n@param {Object} data The HTTP JSON body.\n\n@param {Object=} opts additional options\n\n@param {Number=} opts.localTimeoutMs The maximum amount of time to wait before\ntiming out the request. If not specified, there is no timeout.\n\n@param {sting=} opts.prefix The full prefix to use e.g.\n\"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n\n@param {Object=} opts.headers map of additional request headers\n\n@return {module:client.Promise} Resolves to <code>{data: {Object},\nheaders: {Object}, code: {Number}}</code>.\nIf <code>onlyData</code> is set, this will resolve to the <code>data</code>\nobject only.\n@return {module:http-api.MatrixError} Rejects with an error if a problem\noccurred. This includes network problems and Matrix-specific error JSON.", "input": "JavaScript", "output": "function(callback, method, path, queryParams, data, opts) {\n        opts = opts || {};\n        const prefix = opts.prefix !== undefined ? opts.prefix : this.opts.prefix;\n        const fullUri = this.opts.baseUrl + prefix + path;\n\n        return this.requestOtherUrl(\n            callback, method, fullUri, queryParams, data, opts,\n        );\n    }"}, {"instruction": "/* [MS-XLS] 2.4.173", "input": "JavaScript", "output": "function parse_MTRSettings(blob) {\n\tvar fMTREnabled = blob.read_shift(4) !== 0x00;\n\tvar fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n\tvar cUserThreadCount = blob.read_shift(4);\n\treturn [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n}"}, {"instruction": "Remove padding from a string.", "input": "JavaScript", "output": "function unpad(str) {\n  const lines = str.split(\"\\n\");\n  const m = lines[1] && lines[1].match(/^\\s+/);\n  if (!m) {\n    return str;\n  }\n  const spaces = m[0].length;\n  return lines\n    .map(line => line.slice(spaces))\n    .join(\"\\n\")\n    .trim();\n}"}, {"instruction": "adds a class on NewComponent events", "input": "JavaScript", "output": "function() {\n        var comp,\n            c = this.__c,\n            str = \"\";\n        for (comp in c) {\n            str += \" \" + comp;\n        }\n        str = str.substr(1);\n        this._element.className = str;\n    }"}, {"instruction": "Returns deepest child of current section (or section itself)\nwhich includes given position.\n@param  {Number} pos\n@return {CSSSection}", "input": "JavaScript", "output": "function(pos) {\n\t\t\tif (!this.range.inside(pos)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfor (var i = 0, il = this.children.length, m; i < il; i++) {\n\t\t\t\tm = this.children[i].matchDeep(pos);\n\t\t\t\tif (m) {\n\t\t\t\t\treturn m;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn this.parent ? this : null;\n\t\t}"}, {"instruction": "clone the array to avoid modifying the original", "input": "JavaScript", "output": "function(callbacks, args) {\n            if (!callbacks.length) {\n                return typeof done === 'function' ? done() : true;\n            }\n\n            var callback = callbacks.shift();\n            callback.apply(context, args);\n\n            // Is the callback synchronous ?\n            if (callback.length === nbArguments) {\n                iterator(callbacks, args, done);\n            }\n        }"}, {"instruction": "Checks whether the property of 2 given member expression nodes are the same\nproperty or not.\n\n@param {ASTNode} left - A member expression node to check.\n@param {ASTNode} right - Another member expression node to check.\n@returns {boolean} `true` if the member expressions have the same property.", "input": "JavaScript", "output": "function isSameProperty(left, right) {\n    if (left.property.type === \"Identifier\" &&\n        left.property.type === right.property.type &&\n        left.property.name === right.property.name &&\n        left.computed === right.computed\n    ) {\n        return true;\n    }\n\n    const lname = astUtils.getStaticPropertyName(left);\n    const rname = astUtils.getStaticPropertyName(right);\n\n    return lname !== null && lname === rname;\n}"}, {"instruction": "matches another field", "input": "JavaScript", "output": "function(value, identifier) {\n      var\n        $form = $(this),\n        matchingValue\n      ;\n      if( $('[data-validate=\"'+ identifier +'\"]').length > 0 ) {\n        matchingValue = $('[data-validate=\"'+ identifier +'\"]').val();\n      }\n      else if($('#' + identifier).length > 0) {\n        matchingValue = $('#' + identifier).val();\n      }\n      else if($('[name=\"' + identifier +'\"]').length > 0) {\n        matchingValue = $('[name=\"' + identifier + '\"]').val();\n      }\n      else if( $('[name=\"' + identifier +'[]\"]').length > 0 ) {\n        matchingValue = $('[name=\"' + identifier +'[]\"]');\n      }\n      return (matchingValue !== undefined)\n        ? ( value.toString() == matchingValue.toString() )\n        : false\n      ;\n    }"}, {"instruction": "this could be rewritten with actual FS apis / globs, but this is simpler", "input": "JavaScript", "output": "function getFlatFiles(mfsData, output, getAssetPermissions, curBase = \"\") {\n  for (const path of Object.keys(mfsData)) {\n    const item = mfsData[path];\n    const curPath = `${curBase}/${path}`;\n    // directory\n    if (item[\"\"] === true) getFlatFiles(item, output, getAssetPermissions, curPath);\n    // file\n    else if (!curPath.endsWith(\"/\")) {\n      output[curPath.substr(1)] = {\n        source: mfsData[path],\n        permissions: getAssetPermissions(curPath.substr(1))\n      };\n    }\n  }\n}"}, {"instruction": "invokeToneAssistant calls the invokeToneAsync function to get the tone information for the user's\ninput text (input.text in the payload json object), adds/updates the user's tone in the payload's context,\nand sends the payload to the assistant service to get a response which is printed to screen.\n@param payload a json object containing the basic information needed to converse with the Assistant Service's\nmessage endpoint.\n\nNote: as indicated below, the console.log statements can be replaced with application-specific code to process\nthe err or data object returned by the Assistant Service.", "input": "JavaScript", "output": "function invokeToneAssistant(payload, maintainToneHistoryInContext) {\n  tone_detection\n    .invokeToneAsync(payload, toneAnalyzer)\n    .then(tone => {\n      tone_detection.updateUserTone(\n        payload,\n        tone,\n        maintainToneHistoryInContext\n      );\n      assistant.message(payload, function(err, data) {\n        if (err) {\n          // APPLICATION-SPECIFIC CODE TO PROCESS THE ERROR\n          // FROM ASSISTANT SERVICE\n          console.error(JSON.stringify(err, null, 2));\n        } else {\n          // APPLICATION-SPECIFIC CODE TO PROCESS THE DATA\n          // FROM ASSISTANT SERVICE\n          console.log(JSON.stringify(data, null, 2));\n        }\n      });\n    })\n    .catch(function(err) {\n      console.log(JSON.stringify(err, null, 2));\n    });\n}"}, {"instruction": "returns false, true, or the squash value to indicate the \"default parameter url squash policy\".", "input": "JavaScript", "output": "function getSquashPolicy(config, isOptional) {\n      var squash = config.squash;\n      if (!isOptional || squash === false) return false;\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n      if (squash === true || isString(squash)) return squash;\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n    }"}, {"instruction": "Emit controls section of pieces editor modal: the cancel/save buttons, etc.", "input": "JavaScript", "output": "function() {\n      var req = self.apos.templates.contextReq;\n      return self.partial('controls', { controls: self.getEditControls(req), options: self.options });\n    }"}, {"instruction": "This song and dance is to fix methods to a different length from what they actually accept in order to stay in line with spec. Additionally passing argument length, as some methods throw assertion errors based on this (undefined check is not enough). Fortunately for now spec is such that passing 3 actual arguments covers all requirements. Note that passing the argument length also forces the compiler to not rewrite length of the compiled function.", "input": "JavaScript", "output": "function fixArgumentLength(fn) {\n  var staticFn = function(a) {\n    var args = arguments;\n    return fn(a, args[1], args[2], args.length - 1);\n  };\n  staticFn.instance = function(b) {\n    var args = arguments;\n    return fn(this, b, args[1], args.length);\n  };\n  return staticFn;\n}"}, {"instruction": "This is an internal class and is intentionally not documented.", "input": "JavaScript", "output": "function (sector, tileMatrix, row, column, imagePath) {\n            this.sector = sector;\n            this.tileMatrix = tileMatrix;\n            this.row = row;\n            this.column = column;\n            this.imagePath = imagePath;\n\n            this.texelSize = (sector.deltaLatitude() * Angle.DEGREES_TO_RADIANS) / tileMatrix.tileHeight;\n\n            this.tileKey = tileMatrix.levelNumber.toString() + \".\" + row.toString() + \".\" + column.toString();\n\n            this.gpuCacheKey = imagePath;\n        }"}, {"instruction": "-------------------------------------------------------------------------- Helpers -------------------------------------------------------------------------- \nGet exact callee name from expression\n@param {ASTNode} node CallExpression or NewExpression node\n@returns {string} name", "input": "JavaScript", "output": "function extractNameFromExpression(node) {\n\n            let name = \"\";\n\n            if (node.callee.type === \"MemberExpression\") {\n                const property = node.callee.property;\n\n                if (property.type === \"Literal\" && (typeof property.value === \"string\")) {\n                    name = property.value;\n                } else if (property.type === \"Identifier\" && !node.callee.computed) {\n                    name = property.name;\n                }\n            } else {\n                name = node.callee.name;\n            }\n            return name;\n        }"}, {"instruction": "Focus on the open extension tab", "input": "JavaScript", "output": "function focusTab(tabId) {\n    var updateProperties = { \"active\": true };\n    chrome.tabs.update(tabId, updateProperties, function (tab) { });\n  }"}, {"instruction": "Strip device-specific IDs from React Native file:// paths", "input": "JavaScript", "output": "function normalizeUrl(url, pathStripRe) {\n  if (url.indexOf('/') !== -1) {\n    return url.replace(/^file\\:\\/\\//, '').replace(pathStripRe, '');\n  } else {\n    return '/' + url;\n  }\n}"}, {"instruction": "Clean value to boolean\nIf value is not a boolean or can't be converted, an error is thrown\nThis is probably unnecessary but more a precaution\n@param {any} value", "input": "JavaScript", "output": "function ensureBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'string' && value.toLowerCase() === 'true') {\n    return true;\n  } else if (typeof value === 'string' && value.toLowerCase() === 'false') {\n    return false;\n  } else if (value === 1) {\n    return true;\n  } else if (value === 0) {\n    return false;\n  }\n  throw new Error(`Unexpected value for boolean: ${value}`);\n}"}, {"instruction": "Checks if `value` is a number.\n\nNote: `NaN` is considered a number. See http://es5.github.io/#x8.5.\n\n@static\n@memberOf _\n@category Objects\n@param {*} value The value to check.\n@returns {boolean} Returns `true` if the `value` is a number, else `false`.\n@example\n\n_.isNumber(8.4 * 5);\n// => true", "input": "JavaScript", "output": "function isNumber(value) {\n    return typeof value == 'number' ||\n      value && typeof value == 'object' && toString.call(value) == numberClass || false;\n  }"}, {"instruction": "writes the new version to package.json", "input": "JavaScript", "output": "function updateVersion () {\n    start(`Updating ${\"package.json\".cyan} version from ${oldVersion.cyan} to ${newVersion.cyan}...`);\n    pkg.version = newVersion;\n    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));\n    done();\n    abortCmds.push('git checkout package.json');\n    pushCmds.push('git add package.json');\n  }"}, {"instruction": "Retrieve the computed style from a specified element.\n\n@param el\n@param styleProperty\n@return The computed style value.\n@type String", "input": "JavaScript", "output": "function(el, styleProperty){\n            if(el.currentStyle){\n                return el.currentStyle[styleProperty];\n            }else if(window.getComputedStyle){\n                var cssProperty = styleProperty.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n                var computedStyle = window.getComputedStyle(el, \"\");\n                return computedStyle.getPropertyValue(cssProperty);\n            }else{\n                return \"\";\n            }\n        }"}, {"instruction": "Is the current git workspace dirty?", "input": "JavaScript", "output": "function isDirty () {\n  return pify(git.raw.bind(git))(['status', '-s'])\n    .then((out) => {\n      if (out && out.trim().length > 0) {\n        throw new Error('Dirty git repo, aborting')\n      }\n    })\n}"}, {"instruction": "Highlight the searching keywords", "input": "JavaScript", "output": "function highlightKeywords() {\n      var q = url('?q');\n      if (q !== null) {\n        var keywords = q.split(\"%20\");\n        keywords.forEach(function (keyword) {\n          if (keyword !== \"\") {\n            $('.data-searchable *').mark(keyword);\n            $('article *').mark(keyword);\n          }\n        });\n      }\n    }"}, {"instruction": "Collect common metadata for each object in the value tree, ensuring that equivalent values have the *same reference* to the same metadata. Note that the hashes generated are not exactly JSON, but still identify equivalent values. Runs in linear time due to hashing in a bottom-up recursion.", "input": "JavaScript", "output": "function collectMetadata(value) {\n    if (value == null || typeof value !== 'object') {\n      return JSON.stringify(value);\n    }\n    let hash;\n    if (Array.isArray(value)) {\n      hash = '[';\n      for (let i = 0; i < value.length; i++) {\n        hash += collectMetadata(value[i]) + ',';\n      }\n    } else {\n      hash = '{';\n      for (const k in value) {\n        if (value.hasOwnProperty(k) && value[k] !== undefined) {\n          hash += k + ':' + collectMetadata(value[k]) + ',';\n        }\n      }\n    }\n    let metadata = metadataForHash.get(hash);\n    if (!metadata) {\n      metadata = {value, hash, isDuplicate: false};\n      metadataForHash.set(hash, metadata);\n    }\n    metadataForVal.set(value, metadata);\n    return hash;\n  }"}, {"instruction": "Inlines CSS into HTML, adds media query CSS into the <style> tag of the email, and compresses the HTML", "input": "JavaScript", "output": "function inliner(css) {\n  var css = fs.readFileSync(css).toString();\n  var mqCss = siphon(css);\n\n  var pipe = lazypipe()\n    .pipe($.inlineCss, {\n      applyStyleTags: false,\n      removeStyleTags: true,\n      preserveMediaQueries: true,\n      removeLinkTags: false\n    })\n    .pipe($.replace, '<!-- <style> -->', `<style>${mqCss}</style>`)\n    .pipe($.replace, '<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\">', '')\n    .pipe($.htmlmin, {\n      collapseWhitespace: true,\n      minifyCSS: true\n    });\n\n  return pipe();\n}"}, {"instruction": "This function returns the route object matched by the identifier passed as parameter.\n@private", "input": "JavaScript", "output": "function findRouteByIdentifier(sIdf){\n\t\t\tvar i;\n\t\t\tfor (i = 0 ; i < routes.length ; i++) {\n\t\t\t\tif (routes[i].sIdentifier === sIdf) {\n\t\t\t\t\treturn routes[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}"}, {"instruction": "Creates an object with the entry names and file names\nto be transformed.\n\n@param {String} dirName - Name of the directory to read.\n\n@returns {Object} with webpack entry points.", "input": "JavaScript", "output": "function getEntries(dirName) {\n  const entries = {};\n  getExamples(dirName, (entryName, filename) => {\n    entries[entryName] = filename;\n  });\n  return entries;\n}"}, {"instruction": "From http://blog.stevenlevithan.com/archives/faster-trim-javascript\nprofiler shows this is much faster than the previous implementation in both IE and Firefox.\n\n@param {String} str The string to trim.\n@param {String} (Optional) delim The characters to remove from the start/end of the string.\n\n@type String\n@return A trimmed string.", "input": "JavaScript", "output": "function(str, delim) {\n            if (delim) return str.replace(new RegExp(\"^[\\\\s\" + delim + \"]+\"),'').replace(new RegExp(\"[\\\\s\" + delim + \"]+$\"), '');\n            else return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n        }"}, {"instruction": "Stringify the given `arr`.\n\n@param {Array} arr\n@param {String} prefix\n@return {String}\n@api private", "input": "JavaScript", "output": "function stringifyArray(arr, prefix) {\n  var ret = [];\n  if (!prefix) throw new TypeError('stringify expects an object');\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(stringify(arr[i], prefix + '[]'));\n  }\n  return ret.join('&');\n}"}, {"instruction": "tracks which channels are active", "input": "JavaScript", "output": "function connect() {\r\n    easyrtc.enableDebug(false);\r\n    easyrtc.enableDataChannels(true);\r\n    easyrtc.enableVideo(false);\r\n    easyrtc.enableAudio(false);\r\n    easyrtc.enableVideoReceive(false);\r\n    easyrtc.enableAudioReceive(false);\r\n    easyrtc.setDataChannelOpenListener(openListener);\r\n    easyrtc.setDataChannelCloseListener(closeListener);\r\n    easyrtc.setPeerListener(addToConversation);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.connect(\"easyrtc.dataMessaging\", loginSuccess, loginFailure);\r\n}"}, {"instruction": "Reports a given function node if the node matches the following patterns.\n\n- Not allowed by options.\n- The body is empty.\n- The body doesn't have any comments.\n\n@param {ASTNode} node - A function node to report. This is one of\nan ArrowFunctionExpression, a FunctionDeclaration, or a\nFunctionExpression.\n@returns {void}", "input": "JavaScript", "output": "function reportIfEmpty(node) {\n            const kind = getKind(node);\n            const name = astUtils.getFunctionNameWithKind(node);\n            const innerComments = sourceCode.getTokens(node.body, {\n                includeComments: true,\n                filter: astUtils.isCommentToken\n            });\n\n            if (allowed.indexOf(kind) === -1 &&\n                node.body.type === \"BlockStatement\" &&\n                node.body.body.length === 0 &&\n                innerComments.length === 0\n            ) {\n                context.report({\n                    node,\n                    loc: node.body.loc.start,\n                    messageId: \"unexpected\",\n                    data: { name }\n                });\n            }\n        }"}, {"instruction": "Converts Array or ArrayBuffer to string\n@param {Array|Uint8Array|ArrayBuffer} arr\n@return {string}", "input": "JavaScript", "output": "function bytesToString(arr) {\n    if (arr instanceof ArrayBuffer) {\n        arr = new Uint8Array(arr);\n    }\n    return textDecoder.decode(arr);\n}"}, {"instruction": "Create conversion event params to be sent to the logging endpoint\n@param  {Object} options                           Object containing values needed to build conversion event\n@param  {Object} options.attributes                Object representing user attributes and values which need to be recorded\n@param  {string} options.clientEngine              The client we are using: node or javascript\n@param  {string} options.clientVersion             The version of the client\n@param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup\n@param  {string} options.eventKey                  Event key representing the event which needs to be recorded\n@param  {Object} options.eventTags                 Object with event-specific tags\n@param  {Object} options.logger                    Logger object\n@param  {string} options.userId                    ID for user\n@return {Object}                                   Params to be used in conversion event logging endpoint call", "input": "JavaScript", "output": "function(options) {\n    var conversionEvent = {\n      httpVerb: HTTP_VERB,\n    };\n\n    var commonParams = getCommonEventParams(options);\n    conversionEvent.url = ENDPOINT;\n\n    var snapshot = getVisitorSnapshot(options.configObj,\n                                            options.eventKey,\n                                            options.eventTags,\n                                            options.logger);\n\n    commonParams.visitors[0].snapshots = [snapshot];\n    conversionEvent.params = commonParams;\n\n    return conversionEvent;\n  }"}, {"instruction": "=================== new v2 =================== list", "input": "JavaScript", "output": "function postAddListValue (req, res, next) {\n    let key = req.body.key;\n    let value = req.body.value;\n    let type = req.body.type;\n    let connectionId = req.body.connectionId;\n    getConnection(req, res, function () {\n        addListValue(key, value, type, res, next);\n    }, connectionId);\n}"}, {"instruction": "http://docs.jquery.com/Plugins/Validation/valid", "input": "JavaScript", "output": "function() {\n\t\tif ( $(this[0]).is(\"form\")) {\n\t\t\treturn this.validate().form();\n\t\t} else {\n\t\t\tvar valid = true;\n\t\t\tvar validator = $(this[0].form).validate();\n\t\t\tthis.each(function() {\n\t\t\t\tvalid = valid && validator.element(this);\n\t\t\t});\n\t\t\treturn valid;\n\t\t}\n\t}"}, {"instruction": "Parse Style variables to object", "input": "JavaScript", "output": "function findVariables(string) {\n  // Do not parse empty files. Otherwise gonzales.parse will fail\n  if (!string) {\n    return [];\n  }\n\n  var out = [],\n      ast = gonzales.parse(string, {\n        syntax: 'less'\n      });\n\n  ast.traverseByType('value', function(subAst) {\n    subAst.traverseByType('variable', function(node) {\n      out.push(node.content.toString());\n    });\n  });\n\n  return out;\n}"}, {"instruction": "`URLSearchParams.prototype.forEach` method", "input": "JavaScript", "output": "function forEach(callback /* , thisArg */) {\n    var entries = getInternalParamsState(this).entries;\n    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);\n    var i = 0;\n    var entry;\n    while (i < entries.length) {\n      entry = entries[i++];\n      boundFunction(entry.value, entry.key, this);\n    }\n  }"}, {"instruction": "Simple trick to fake touch event support\nthis is enough for most libraries like Modernizr and Hammer", "input": "JavaScript", "output": "function fakeTouchSupport() {\n        var objs = [window, document.documentElement];\n        var props = ['ontouchstart', 'ontouchmove', 'ontouchcancel', 'ontouchend'];\n\n        for(var o=0; o<objs.length; o++) {\n            for(var p=0; p<props.length; p++) {\n                if(objs[o] && objs[o][props[p]] == undefined) {\n                    objs[o][props[p]] = null;\n                }\n            }\n        }\n    }"}, {"instruction": "Gets an actual movement value corrected by offset.\n\n@return {Number}", "input": "JavaScript", "output": "function get() {\n      var offset = this.offset;\n      var translate = this.translate;\n\n      if (Components.Direction.is('rtl')) {\n        return translate + offset;\n      }\n\n      return translate - offset;\n    }"}, {"instruction": "Finds out the data entry that is closer to the given position on pixels\n@param  {Number} mouseX X position of the mouse\n@return {Object}        Data entry that is closer to that x axis position", "input": "JavaScript", "output": "function getNearestDataPoint(mouseX) {\n            let dateFromInvertedX = xScale.invert(mouseX);\n            let bisectDate = d3Array.bisector(getDate).left;\n            let dataEntryIndex = bisectDate(dataByDate, dateFromInvertedX, 1);\n            let dataEntryForXPosition = dataByDate[dataEntryIndex];\n            let previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n            let nearestDataPoint;\n\n            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n                nearestDataPoint = findOutNearestDate(dateFromInvertedX, dataEntryForXPosition, previousDataEntryForXPosition);\n            } else {\n                nearestDataPoint = dataEntryForXPosition;\n            }\n\n            return nearestDataPoint;\n        }"}, {"instruction": "Resolves the version using an array of UA patterns.\n\n@private\n@param {Array} patterns An array of UA patterns.\n@returns {null|string} The detected version.", "input": "JavaScript", "output": "function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }"}, {"instruction": "`getStep` is a helper function that returns a step element defined by parameter. If a number is given, step with index given by the number is returned, if a string is given step element with such id is returned, if DOM element is given it is returned if it is a correct step element.", "input": "JavaScript", "output": "function( step ) {\n            if ( typeof step === \"number\" ) {\n                step = step < 0 ? steps[ steps.length + step ] : steps[ step ];\n            } else if ( typeof step === \"string\" ) {\n                step = lib.util.byId( step );\n            }\n            return ( step && step.id && stepsData[ \"impress-\" + step.id ] ) ? step : null;\n        }"}, {"instruction": "------------------------------ GOOGLE MAP /*\ncustom map with google api\ncheck out the link below for more information about api usage\nhttps://developers.google.com/maps/documentation/javascript/examples/marker-simple", "input": "JavaScript", "output": "function initializeMap() {\r\n\t\t\tif($('.map').length) {\r\n\t\t\t\tvar mapCanvas = $('#map-canvas');\r\n\t\t\t\tvar myLatlng = new google.maps.LatLng(mapCanvas.data(\"latitude\"),mapCanvas.data(\"longitude\"));\r\n\t\t\t\tvar mapOptions = {\r\n\t\t\t\t\tzoom: mapCanvas.data(\"zoom\"),\r\n\t\t\t\t\tcenter: myLatlng\r\n\t\t\t\t}\r\n\t\t\t\tvar map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);\r\n\t\t\t\t\r\n\t\t\t\tvar marker = new google.maps.Marker({\r\n\t\t\t\t  position: myLatlng,\r\n\t\t\t\t  map: map\r\n\t\t  \t});\r\n\t\t\t}\r\n\t\t  \r\n\t\t}"}, {"instruction": "We want the smallest scaled file to be uploaded first", "input": "JavaScript", "output": "function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    }"}, {"instruction": "Creates an array with the control properties that are inherited.\n@param {Object} control - UI5 control.\n@returns {Array}\n@private", "input": "JavaScript", "output": "function (control) {\n\t\t\t\tvar result = [];\n\t\t\t\tvar inheritedMetadata = control.getMetadata().getParent();\n\n\t\t\t\twhile (inheritedMetadata instanceof ElementMetadata) {\n\t\t\t\t\tresult.push(this._copyInheritedProperties(control, inheritedMetadata));\n\t\t\t\t\tinheritedMetadata = inheritedMetadata.getParent();\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}"}, {"instruction": "Named container of edited source\n@type EditContainer\n@param {String} source\n@param {Object} options", "input": "JavaScript", "output": "function EditContainer(source, options) {\n\t\tthis.options = utils.extend({offset: 0}, options);\n\t\t/**\n\t\t * Source code of edited structure. All changes in the structure are \n\t\t * immediately reflected into this property\n\t\t */\n\t\tthis.source = source;\n\t\t\n\t\t/** \n\t\t * List of all editable children\n\t\t * @private \n\t\t */\n\t\tthis._children = [];\n\t\t\n\t\t/**\n\t\t * Hash of all positions of container\n\t\t * @private\n\t\t */\n\t\tthis._positions = {\n\t\t\tname: 0\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}"}, {"instruction": "listing descendant nodes\n\n@param {Node} node\n@param {Function} [pred] - predicate function", "input": "JavaScript", "output": "function listDescendant(node, pred) {\n  const descendants = [];\n  pred = pred || func.ok;\n\n  // start DFS(depth first search) with node\n  (function fnWalk(current) {\n    if (node !== current && pred(current)) {\n      descendants.push(current);\n    }\n    for (let idx = 0, len = current.childNodes.length; idx < len; idx++) {\n      fnWalk(current.childNodes[idx]);\n    }\n  })(node);\n\n  return descendants;\n}"}, {"instruction": "remember the state of the bound property and copy it to both accus", "input": "JavaScript", "output": "function() {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t}"}, {"instruction": "Returns the events of a search job with given parameters.\n\n@example\n\nvar job = service.jobs().item(\"mysid\");\njob.events({count: 10}, function(err, events, job) {\nconsole.log(\"Fields: \", events.fields);\n});\n\n@param {Object} params The parameters for retrieving events. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fevents\" target=\"_blank\">GET search/jobs/{search_id}/events</a> endpoint in the REST API documentation.\n@param {Function} callback A function to call when the events are retrieved: `(err, events, job)`.\n\n@endpoint search/jobs/{search_id}/events\n@method splunkjs.Service.Job", "input": "JavaScript", "output": "function(params, callback) {\n            callback = callback || function() {};\n            params = params || {};\n            params.output_mode = params.output_mode || \"json_rows\"; \n            \n            var that = this;\n            return this.get(\"events\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        }"}, {"instruction": "Parse nodes in FBXTree.Objects.Material", "input": "JavaScript", "output": "function ( textureMap ) {\n\n\t\t\tvar materialMap = new Map();\n\n\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialMap;\n\n\t\t}"}, {"instruction": "Change current page", "input": "JavaScript", "output": "function changePage(pageNumber) {\n      var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {\n        this.prevPage = this.currentPage;\n        this.currentPage = pageNumber;\n        if (emit) this.pageChanged();\n      }\n    }"}, {"instruction": "Create output directory", "input": "JavaScript", "output": "function createDirectory(filenames, next) {\n        fs.exists(config.folder, function(exists) {\n          if (!exists) {\n            fs.mkdir(config.folder, function(err) {\n              if (err) {\n                next(err);\n              } else {\n                next(null, filenames);\n              }\n            });\n          } else {\n            next(null, filenames);\n          }\n        });\n      }"}, {"instruction": "rgb \u989c\u8272\u8f6c\u6362\u6210\u6570\u7ec4", "input": "JavaScript", "output": "function rgb2arr(str) {\n  var arr = [];\n  arr.push(parseInt(str.substr(1, 2), 16));\n  arr.push(parseInt(str.substr(3, 2), 16));\n  arr.push(parseInt(str.substr(5, 2), 16));\n  return arr;\n}"}, {"instruction": "@\n#.bind\n@comp Crafty Core\n@kind Method\n\n@sign public this .bind(String eventName, Function callback)\n@param eventName - Name of the event to bind to\n@param callback - Method to execute when the event is triggered\n\nAttach the current entity (or entities) to listen for an event.\n\nCallback will be invoked when an event with the event name passed\nis triggered. Depending on the event, some data may be passed\nvia an argument to the callback function.\n\nThe first argument is the event name (can be anything) whilst the\nsecond argument is the callback. If the event has data, the\ncallback should have an argument.\n\nEvents are arbitrary and provide communication between components.\nYou can trigger or bind an event even if it doesn't exist yet.\n\nUnlike DOM events, Crafty events are executed synchronously.\n\n@example\n~~~\nthis.attr(\"triggers\", 0); //set a trigger count\nthis.bind(\"myevent\", function() {\nthis.triggers++; //whenever myevent is triggered, increment\n});\nthis.bind(\"UpdateFrame\", function() {\nthis.trigger(\"myevent\"); //trigger myevent on every frame\n});\n~~~\n\n@see .trigger, .unbind", "input": "JavaScript", "output": "function(event, callback) {\n        //  To learn how the event system functions, see the comments for Crafty._callbackMethods\n        //optimization for 1 entity\n        if (this.length === 1) {\n            this._bindCallback(event, callback);\n        } else {\n            for (var i = 0; i < this.length; i++) {\n                var e = entities[this[i]];\n                if (e) {\n                    e._bindCallback(event, callback);\n                }\n            }\n        }\n        return this;\n    }"}, {"instruction": "Creates an interpolation binding with 7 expressions.", "input": "JavaScript", "output": "function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    var different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    different = bindingUpdated(v6) || different;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\n        NO_CHANGE;\n}"}, {"instruction": "Gets the first visible child in the openMenuNode\nNecessary incase menu nodes are being dynamically hidden", "input": "JavaScript", "output": "function firstVisibleChild() {\n        for (var i = 0; i < openMenuNode.children.length; ++i) {\n          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {\n            return openMenuNode.children[i];\n          }\n        }\n      }"}, {"instruction": "Flip the clock face", "input": "JavaScript", "output": "function(time, doNotAddPlayClass) {\n\t\t\tif(!time) {\n\t\t\t\ttime = this.factory.time.getDayCounter(this.showSeconds);\n\t\t\t}\n\n\t\t\tthis.autoIncrement();\n\n\t\t\tthis.base(time, doNotAddPlayClass);\n\t\t}"}, {"instruction": "Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points. @deprecated @param rhs Right hand side vector. @return Solution vector.", "input": "JavaScript", "output": "function(rhs) {\n\n            console.warn('deprecated');\n\n            var n = rhs.length;\n            // `x` is a solution vector.\n            var x = [];\n            var tmp = [];\n            var b = 2.0;\n\n            x[0] = rhs[0] / b;\n\n            // Decomposition and forward substitution.\n            for (var i = 1; i < n; i++) {\n                tmp[i] = 1 / b;\n                b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];\n                x[i] = (rhs[i] - x[i - 1]) / b;\n            }\n\n            for (i = 1; i < n; i++) {\n                // Backsubstitution.\n                x[n - i - 1] -= tmp[n - i] * x[n - i];\n            }\n\n            return x;\n        }"}, {"instruction": "Hooks and props are merged as arrays.", "input": "JavaScript", "output": "function mergeHook (\n  parentVal,\n  childVal\n) {\n  const res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}"}, {"instruction": "Matches settings for currectly matching media breakpoint.\n\n@param {Object} points\n@returns {Object}", "input": "JavaScript", "output": "function match(points) {\n      if (typeof window.matchMedia !== 'undefined') {\n        for (var point in points) {\n          if (points.hasOwnProperty(point)) {\n            if (window.matchMedia('(max-width: ' + point + 'px)').matches) {\n              return points[point];\n            }\n          }\n        }\n      }\n\n      return defaults;\n    }"}, {"instruction": "According to: http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/", "input": "JavaScript", "output": "function XdrStreamingTransport(transUrl) {\n  if (!XDRObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);\n}"}, {"instruction": "mouse event management (mousewheel)\nXXX: mousewheel is deprecated\n@ignore", "input": "JavaScript", "output": "function onMouseWheel(e) {\n       /* jshint expr:true */\n       if (e.target === me.video.renderer.getScreenCanvas()) {\n         // create a (fake) normalized event object\n         e.type = \"wheel\"; // dispatch mouse event to registered object\n\n         return dispatchEvent(normalizeEvent(e));\n       }\n\n       return true;\n     }"}, {"instruction": "Disables text selection and dragging, with optional whitelist callbacks.\n@param {function(Event):boolean=} opt_allowSelectStart Unless this function\nis defined and returns true, the onselectionstart event will be\nsurpressed.\n@param {function(Event):boolean=} opt_allowDragStart Unless this function\nis defined and returns true, the ondragstart event will be surpressed.", "input": "JavaScript", "output": "function disableTextSelectAndDrag(opt_allowSelectStart, opt_allowDragStart) {\n  // Disable text selection.\n  document.onselectstart = function(e) {\n    if (!(opt_allowSelectStart && opt_allowSelectStart.call(this, e)))\n      e.preventDefault();\n  };\n\n  // Disable dragging.\n  document.ondragstart = function(e) {\n    if (!(opt_allowDragStart && opt_allowDragStart.call(this, e)))\n      e.preventDefault();\n  };\n}"}, {"instruction": "process items to extract files to be uploaded\n@param  {File[]} items items to process\n@param  {Event} event event that led to upload", "input": "JavaScript", "output": "function loadFiles(items, event) {\n      if(!items.length){\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(\n          Array.prototype.map.call(items, function(item){\n            // bind all properties except for callback\n            var entry = item;\n            if('function' === typeof item.webkitGetAsEntry){\n              entry = item.webkitGetAsEntry();\n            }\n            return processItem.bind(null, entry, \"\", files);\n          }),\n          function(){\n            if(files.length){\n              // at least one file found\n              appendFilesFromFileList(files, event);\n            }\n          }\n      );\n    }"}, {"instruction": "Write the API meta data used for the AutoComplete widget\n@method writeAPIMeta\n@param {Callback} cb The callback to execute when complete\n@async", "input": "JavaScript", "output": "function (cb) {\n            Y.log('Writing API Meta Data', 'info', 'builder');\n            var self = this;\n            this.renderAPIMeta(function (js) {\n                fs.writeFile(path.join(self.options.outdir, 'api.js'), js, Y.charset, cb);\n            });\n        }"}, {"instruction": "\u83b7\u53d6\u5bbd\u5ea6\n@param  {HTMLElement} el  dom\u8282\u70b9\n@param  {Number} defaultValue \u9ed8\u8ba4\u503c\n@return {Number} \u5bbd\u5ea6", "input": "JavaScript", "output": "function getWidth(el, defaultValue) {\n    var width = this.getStyle(el, 'width', defaultValue);\n    if (width === 'auto') {\n      width = el.offsetWidth;\n    }\n    return parseFloat(width);\n  }"}, {"instruction": "Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).\nUpdate the `aria-activedescendant` attribute.", "input": "JavaScript", "output": "function render() {\n      var checked = rgCtrl.getViewValue() == attr.value;\n\n      if (checked === lastChecked) return;\n\n      if (element[0].parentNode.nodeName.toLowerCase() !== 'md-radio-group') {\n        // If the radioButton is inside a div, then add class so highlighting will work\n        element.parent().toggleClass(CHECKED_CSS, checked);\n      }\n\n      if (checked) {\n        rgCtrl.setActiveDescendant(element.attr('id'));\n      }\n\n      lastChecked = checked;\n\n      element\n        .attr('aria-checked', checked)\n        .toggleClass(CHECKED_CSS, checked);\n    }"}, {"instruction": "----------------------------------------------------------------------------", "input": "JavaScript", "output": "function isSubquery(str, parenthesisLevel) {\n\treturn  parenthesisLevel - (str.replace(/\\(/g,'').length - str.replace(/\\)/g,'').length )\n}"}, {"instruction": "Apply a linear transform to array of arcs.  The provided array of arcs is\nmodified in place.\n\n@param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n@param {Array<number>} scale Scale for each dimension.\n@param {Array<number>} translate Translation for each dimension.", "input": "JavaScript", "output": "function transformArcs(arcs, scale, translate) {\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\n    transformArc(arcs[i], scale, translate);\n  }\n}"}, {"instruction": "Invoked when a splitter's dragListener fires dragStart. Calculates the splitters\nmovement area once (so that it doesn't need calculating on every mousemove event)\n\n@param   {lm.controls.Splitter} splitter\n\n@returns {void}", "input": "JavaScript", "output": "function( splitter ) {\n\t\tvar items = this._getItemsForSplitter( splitter ),\n\t\t\tminSize = this.layoutManager.config.dimensions[ this._isColumn ? 'minItemHeight' : 'minItemWidth' ];\n\t\n\t\tthis._splitterPosition = 0;\n\t\tthis._splitterMinPosition = -1 * ( items.before.element[ this._dimension ]() - minSize );\n\t\tthis._splitterMaxPosition = items.after.element[ this._dimension ]() - minSize;\n\t}"}, {"instruction": "Pings the given URL to check that this is a valid path.\nIf the ping is successful - redirects to the given URL.\nIf something goes wrong - falls back to a default public URL.\n@private\n@param {string} sUrl URL that needs to be pinged and redirected to\n@param {string} sTopicId The ID of the topic to open", "input": "JavaScript", "output": "function (sUrl, sTopicId) {\n\t\t\tthis._pingUrl(sUrl).then(function success() {\n\t\t\t\tmLibrary.URLHelper.redirect(sUrl, true);\n\t\t\t}, function error() {\n\t\t\t\tjQuery.sap.log.info(\"Support Assistant tried to load documentation link in \" + sUrl + \"but fail\");\n\t\t\t\tsUrl = \"https://ui5.sap.com/#/topic/\" + sTopicId;\n\t\t\t\tmLibrary.URLHelper.redirect(sUrl, true);\n\t\t\t});\n\t\t}"}, {"instruction": "Function: attach\nAttach to an already created and authenticated BOSH session.\n\nThis function is provided to allow Strophe to attach to BOSH\nsessions which have been created externally, perhaps by a Web\napplication.  This is often used to support auto-login type features\nwithout putting user credentials into the page.\n\nParameters:\n(String) jid - The full JID that is bound by the session.\n(String) sid - The SID of the BOSH session.\n(String) rid - The current RID of the BOSH session.  This RID\nwill be used by the next request.\n(Function) callback The connect callback function.\n(Integer) wait - The optional HTTPBIND wait value.  This is the\ntime the server will wait before returning an empty result for\na request.  The default setting of 60 seconds is recommended.\nOther settings will require tweaks to the Strophe.TIMEOUT value.\n(Integer) hold - The optional HTTPBIND hold value.  This is the\nnumber of connections the server will hold at one time.  This\nshould almost always be set to 1 (the default).\n(Integer) wind - The optional HTTBIND window value.  This is the\nallowed range of request ids that are valid.  The default is 5.", "input": "JavaScript", "output": "function (jid, sid, rid, callback, wait, hold, wind)\r\n    {\r\n        this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\r\n    }"}, {"instruction": "Ensure that an array exists at [key] on `object`, and add `value` to it.\n\n@param {Object} object the object to mutate\n@param {string} key the object's key\n@param {*} value the value to add\n@returns {void}\n@private", "input": "JavaScript", "output": "function ensureArrayAndPush(object, key, value) {\n            if (!Array.isArray(object[key])) {\n                object[key] = [];\n            }\n            object[key].push(value);\n        }"}, {"instruction": "`triggerEvent` builds a custom DOM event with given `eventName` and `detail` data and triggers it on element given as `el`.", "input": "JavaScript", "output": "function( el, eventName, detail ) {\n            var event = document.createEvent( \"CustomEvent\" );\n            event.initCustomEvent( eventName, true, true, detail );\n            el.dispatchEvent( event );\n        }"}, {"instruction": "Returns the history into formatted output depending on the passed format.\n\n@public\n@method\n@param {string} sFormat The format into which the history object will be converted. Possible values are listed in sap.ui.support.HistoryFormats.\n@name sap.ui.support.History.getFormattedHistory\n@returns {*} All analysis history objects in the correct format.", "input": "JavaScript", "output": "function (sFormat) {\n\t\t\tvar oFormattedHistory,\n\t\t\t\taHistory = this.getHistory();\n\n\t\t\tswitch (sFormat) {\n\t\t\t\tcase library.HistoryFormats.Abap:\n\t\t\t\t\toFormattedHistory = AbapHistoryFormatter.format(aHistory);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\toFormattedHistory = StringHistoryFormatter.format(aHistory);\n\t\t\t}\n\n\t\t\treturn oFormattedHistory;\n\t\t}"}, {"instruction": "Function: getStylename\n\nReturns the stylename in a style of the form [(stylename|key=value);] or\nan empty string if the given style does not contain a stylename.\n\nParameters:\n\nstyle - String of the form [(stylename|key=value);].", "input": "JavaScript", "output": "function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t}"}, {"instruction": "Removes value from an array.\nPresence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n@static\n@memberOf fabric.util\n@method removeFromArray\n@param {Array} array\n@param {Any} value\n@return {Array} original array", "input": "JavaScript", "output": "function removeFromArray(array, value) {\n    var idx = array.indexOf(value);\n    if (idx !== -1) {\n      array.splice(idx, 1);\n    }\n    return array;\n  }"}, {"instruction": "Transparently handle JSONP. Although this does require wrapping the Request#send() method which is a bit nasty. Other alternative is to always pass the response on and include this middleware after the routes.", "input": "JavaScript", "output": "function () {\n    return function (req, res, next) {\n      var _send = res.send;\n      res.send = function (body) {\n        var callback = req.params.callback,\n            isJSONP  = res.get('Content-Type') === 'application/json' && callback;\n\n        if (body && req.method !== 'HEAD' && isJSONP) {\n          res.contentType('js');\n          body = callback + '(' + body.toString().trim() + ');';\n        }\n        _send.call(this, body);\n      };\n      next();\n    };\n  }"}, {"instruction": "Returns pointer coordinates relative to canvas.\n@method getPointer\n@return {Object} object with \"x\" and \"y\" number values", "input": "JavaScript", "output": "function (e) {\n      var pointer = getPointer(e);\n      return {\n        x: pointer.x - this._offset.left,\n        y: pointer.y - this._offset.top\n      };\n    }"}, {"instruction": "Remove a specific event handler for a given event.\n@function\n@param {String} eventName - Name of event for which the handler is to be removed.\n@param {OpenSeadragon.EventHandler} handler - Function to be removed.", "input": "JavaScript", "output": "function ( eventName, handler ) {\n        var events = this.events[ eventName ],\n            handlers = [],\n            i;\n        if ( !events ) {\n            return;\n        }\n        if ( $.isArray( events ) ) {\n            for ( i = 0; i < events.length; i++ ) {\n                if ( events[i].handler !== handler ) {\n                    handlers.push( events[ i ] );\n                }\n            }\n            this.events[ eventName ] = handlers;\n        }\n    }"}, {"instruction": "Creates a mongoDB object representation of this object.\n\n<pre><code>\n{\n'_id' : , // {number} id for this file\n'filename' : , // {string} name for this file\n'contentType' : , // {string} mime type for this file\n'length' : , // {number} size of this file?\n'chunksize' : , // {number} chunk size used by this file\n'uploadDate' : , // {Date}\n'aliases' : , // {array of string}\n'metadata' : , // {string}\n}\n</code></pre>\n\n@ignore", "input": "JavaScript", "output": "function(self, callback) {\n  // Calcuate the length\n  var mongoObject = {\n    _id: self.fileId,\n    filename: self.filename,\n    contentType: self.contentType,\n    length: self.position ? self.position : 0,\n    chunkSize: self.chunkSize,\n    uploadDate: self.uploadDate,\n    aliases: self.aliases,\n    metadata: self.metadata\n  };\n\n  var md5Command = { filemd5: self.fileId, root: self.root };\n  self.db.command(md5Command, function(err, results) {\n    if (err) return callback(err);\n\n    mongoObject.md5 = results.md5;\n    callback(null, mongoObject);\n  });\n}"}, {"instruction": "Matches curly braces content right after given position\n@param  {String} content CSS content. Must not contain comments!\n@param  {Number} pos     Search start position\n@return {Range}", "input": "JavaScript", "output": "function(content, pos, sanitize) {\n\t\t\tif (sanitize) {\n\t\t\t\tcontent = this.sanitize(content);\n\t\t\t}\n\n\t\t\tvar stream = stringStream(content);\n\t\t\tstream.start = stream.pos = pos;\n\t\t\tvar stack = [], ranges = [];\n\t\t\tvar ch;\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tstack.push(stream.pos - 1);\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\tif (!stack.length) {\n\t\t\t\t\t\tthrow 'Invalid source structure (check for curly braces)';\n\t\t\t\t\t}\n\t\t\t\t\tranges.push(range.create2(stack.pop(), stream.pos));\n\t\t\t\t\tif (!stack.length) {\n\t\t\t\t\t\treturn ranges;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstream.skipQuoted();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ranges;\n\t\t}"}, {"instruction": "Register an alias name associated with a font-icon library style ;", "input": "JavaScript", "output": "function fontSet(alias, className) {\n    config.fontSets.push({\n      alias: alias,\n      fontSet: className || alias\n    });\n    return this;\n  }"}, {"instruction": "A small colored rectangle with rounded corners.", "input": "JavaScript", "output": "function Badge({ className, children, color = \"primary\" }: Props): React.Node {\n  const classes = cn(\n    {\n      badge: true,\n      [`badge-${color}`]: color,\n    },\n    className\n  );\n  return <span className={classes}>{children}</span>;\n}"}, {"instruction": "TODO: not used here anymore and needs to be moved", "input": "JavaScript", "output": "function setProviderFromEndpoint (endpoint, context, cb) {\n    var oldProvider = web3.currentProvider\n\n    if (endpoint === 'ipc') {\n      web3.setProvider(new web3.providers.IpcProvider())\n    } else {\n      web3.setProvider(new web3.providers.HttpProvider(endpoint))\n    }\n    if (web3.isConnected()) {\n      executionContext = context\n      self._updateBlockGasLimit()\n      self.event.trigger('contextChanged', ['web3'])\n      self.event.trigger('web3EndpointChanged')\n      cb()\n    } else {\n      web3.setProvider(oldProvider)\n      var alertMsg = 'Not possible to connect to the Web3 provider. '\n      alertMsg += 'Make sure the provider is running and a connection is open (via IPC or RPC).'\n      cb(alertMsg)\n    }\n  }"}, {"instruction": "Calls the provided function only after all of the channels specified\nhave been fired. All channels must be sticky channels.", "input": "JavaScript", "output": "function (h, c) {\n        var len = c.length;\n        var i = len;\n        var f = function () {\n            if (!(--i)) h();\n        };\n        for (var j = 0; j < len; j++) {\n            if (c[j].state === 0) {\n                throw Error('Can only use join with sticky channels.');\n            }\n            c[j].subscribe(f);\n        }\n        if (!len) h();\n    }"}, {"instruction": "The following function does what document.importNode(node, true) would do for us here; however that method is broken in Safari/1.3, so we have to emulate it.", "input": "JavaScript", "output": "function xmlImportNode(doc, node) {\n  if (node.nodeType == DOM_TEXT_NODE) {\n    return domCreateTextNode(doc, node.nodeValue);\n\n  } else if (node.nodeType == DOM_CDATA_SECTION_NODE) {\n    return domCreateCDATASection(doc, node.nodeValue);\n\n  } else if (node.nodeType == DOM_ELEMENT_NODE) {\n    var newNode = domCreateElement(doc, node.nodeName);\n    for (var i = 0; i < node.attributes.length; ++i) {\n      var an = node.attributes[i];\n      var name = an.nodeName;\n      var value = an.nodeValue;\n      domSetAttribute(newNode, name, value);\n    }\n\n    for (var c = node.firstChild; c; c = c.nextSibling) {\n      var cn = arguments.callee(doc, c);\n      domAppendChild(newNode, cn);\n    }\n\n    return newNode;\n\n  } else {\n    return domCreateComment(doc, node.nodeName);\n  }\n}"}, {"instruction": "/* [MS-XLS] 2.4.4 TODO", "input": "JavaScript", "output": "function parse_Array(blob, length, opts) {\n\tvar ref = parse_Ref(blob, 6);\n\t/* TODO: fAlwaysCalc */\n\tswitch(opts.biff) {\n\t\tcase 2: blob.l ++; length -= 7; break;\n\t\tcase 3: case 4: blob.l += 2; length -= 8; break;\n\t\tdefault: blob.l += 6; length -= 12;\n\t}\n\treturn [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n}"}, {"instruction": "settings: { zoomOnMouseWheel moveOnMouseMove moveOnMouseWheel } The value can be: true / false / 'shift' / 'ctrl' / 'alt'.", "input": "JavaScript", "output": "function isAvailableBehavior(behaviorToCheck, e, settings) {\n    var setting = settings[behaviorToCheck];\n    return !behaviorToCheck || (\n        setting && (!zrUtil.isString(setting) || e.event[setting + 'Key'])\n    );\n}"}, {"instruction": "Seeds either the static or version controlled seeders, controlled by\nthe passed mode.", "input": "JavaScript", "output": "function (mode, scope, callback) {\n    var executeSeed = load('seed');\n    if (scope) {\n      this.internals.migrationMode = scope;\n      this.internals.matching = scope;\n    }\n\n    this.internals.mode = mode || 'vc';\n    return Promise.fromCallback(\n      function (callback) {\n        executeSeed(this.internals, this.config, callback);\n      }.bind(this)\n    ).asCallback(callback);\n  }"}, {"instruction": "A stream that the server can read from. Used for calls that are streaming\nfrom the client side.\n@constructor grpc~ServerReadableStream\n@extends external:Readable\n@borrows grpc~ServerUnaryCall#sendMetadata as\ngrpc~ServerReadableStream#sendMetadata\n@borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n@param {grpc.internal~Call} call The call object to read data with\n@param {grpc.Metadata} metadata The request metadata from the client\n@param {grpc~deserialize} deserialize Deserialization function for reads", "input": "JavaScript", "output": "function ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}"}, {"instruction": "calculate delta(sum of length difference of rows) values of given DSV\n@param {string} code - code to be test\n@param {string|RegExp} delimiter - delimiter to test\n@returns {number} delta value for code\n@ignore", "input": "JavaScript", "output": "function calcDSVDelta(code, delimiter) {\n  let rows, delta;\n\n  try {\n    csv.COLUMN_SEPARATOR = delimiter;\n    rows = csv.parse(code);\n\n    if (rows[0].length < 2) {\n      // parsing completely failed\n      throw new Error('parser fail');\n    }\n\n    // sum of all length difference of all rows\n    delta = rows.map(row => row.length)\n      .reduce((a, b) => ({\n        deltaSum: a.deltaSum + Math.abs(a.length - b),\n        length: b\n      }), {\n        deltaSum: 0,\n        length: rows[0].length\n      }).deltaSum;\n  } catch (e) {\n    delta = Infinity;\n  }\n\n  return delta;\n}"}, {"instruction": "Sets version in 'package.json' in http://semver.org friendly mode\n\n@param {String} type   Could be 'major', 'minor' or 'patch'\n@param {String} suffix Suffic string, example: 'alpha', 'pre-alpha', 'beta'", "input": "JavaScript", "output": "function setVersion(type, suffix) {\n        var file = 'package.json',\n            VERSION_REGEX = /([\\'|\\\"]version[\\'|\\\"][ ]*:[ ]*[\\'|\\\"])([\\d|.]*)(-\\w+)*([\\'|\\\"])/,\n            contents = grunt.file.read(file),\n            version;\n        contents = contents.replace(VERSION_REGEX, function(match, left, center) {\n            version = center;\n            if (type) {\n                version = require('semver').inc(version, type);\n            }\n            //semver.inc strips our suffix if it existed\n            if (suffix) {\n                version += '-' + suffix;\n            }\n            return left + version + '\"';\n        });\n        grunt.log.ok('Version set to ' + version.cyan);\n        grunt.file.write(file, contents);\n        return version;\n    }"}, {"instruction": "Shows an error dialog indicating that the given file could not be opened due to the given error\n@param {!FileSystemError} name\n@return {!Dialog}", "input": "JavaScript", "output": "function showFileOpenError(name, path) {\n        return Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.ERROR_OPENING_FILE_TITLE,\n            StringUtils.format(\n                Strings.ERROR_OPENING_FILE,\n                StringUtils.breakableUrl(path),\n                FileUtils.getFileErrorString(name)\n            )\n        );\n    }"}, {"instruction": "Creates a default toolbar providing basic buttons and functionality.\n\n@param {sap.ui.table.CreationRow} oCreationRow The creation row to get the settings for the toolbar creation from.\n@returns {sap.m.OverflowToolbar} The default toolbar.", "input": "JavaScript", "output": "function createDefaultToolbar(oCreationRow) {\n\t\treturn new OverflowToolbar({\n\t\t\tcontent: [\n\t\t\t\tnew ToolbarSpacer(),\n\t\t\t\tnew Button({\n\t\t\t\t\ttext: TableUtils.getResourceText(\"TBL_CREATIONROW_APPLY\"),\n\t\t\t\t\ttype: MLibrary.ButtonType.Emphasized,\n\t\t\t\t\tenabled: oCreationRow.getApplyEnabled(),\n\t\t\t\t\tpress: function() {\n\t\t\t\t\t\toCreationRow._fireApply();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t],\n\t\t\tstyle: MLibrary.ToolbarStyle.Clear,\n\t\t\tariaLabelledBy: [oCreationRow.getId() + \"-label\"]\n\t\t});\n\t}"}, {"instruction": "**********", "input": "JavaScript", "output": "function module(name, section) {\n      var module = cache[name];\n      if (!module) {\n        module = cache[name] = {\n          name: name,\n          url: (NG_DOCS.html5Mode ? '' : '#/') + section + '/' + name,\n          globals: [],\n          controllers: [],\n          directives: [],\n          services: [],\n          others: [],\n          service: function(name) {\n            var service =  cache[this.name + ':' + name];\n            if (!service) {\n              service = {name: name};\n              cache[this.name + ':' + name] = service;\n              this.services.push(service);\n            }\n            return service;\n          },\n          types: [],\n          filters: []\n        };\n        modules.push(module);\n      }\n      return module;\n    }"}, {"instruction": "Function: addStylename\n\nAdds the specified stylename to the given style if it does not already\ncontain the stylename.", "input": "JavaScript", "output": "function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t}"}, {"instruction": "The name has been updated if the user presses enter.", "input": "JavaScript", "output": "function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }"}, {"instruction": "Function: getColor\n\nReturns the color value for the given key in the given associative\narray or the given default value if the value is null. If the value\nis <mxConstants.NONE> then null is returned.\n\nParameters:\n\narray - Associative array that contains the value for the key.\nkey - Key whose value should be returned.\ndefaultValue - Value to be returned if the value for the given\nkey is null. Default is null.", "input": "JavaScript", "output": "function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t}"}, {"instruction": "Undeclared grammar", "input": "JavaScript", "output": "function undeclaredGrammar(grammarName, namespace, interval) {\n  var message = namespace ?\n      'Grammar ' + grammarName + ' is not declared in namespace ' + Namespace.toString(namespace) :\n      'Undeclared grammar ' + grammarName;\n  return createError(message, interval);\n}"}, {"instruction": "Constructs a GeoJSON FeatureCollection object. Applications typically do not call this constructor.\nIt is called by {@link GeoJSON} as GeoJSON is read.\n@alias GeoJSONFeatureCollection\n@constructor\n@classdesc Contains the data associated with a GeoJSON Feature Collection Object.\nAn object of type \"FeatureCollection\" must have a member with the name \"features\".\nThe value corresponding to \"features\" is an array. Each element in the array is a feature object as\ndefined in {@link GeoJSONFeature}.\nTo include information on the coordinate range for feature collections, a GeoJSON object may have a member\nnamed \"bbox\".\n@param {Object} features An object containing the data associated with the GeoJSON FeatureCollection\nfeatures.\n@param {Object} bbox An object containing the value of GeoJSON FeatureCollection bbox member.\n@throws {ArgumentError} If the specified mandatory features parameter is null or undefined.", "input": "JavaScript", "output": "function (features,  bbox) {\n\n            if (!features) {\n                throw new ArgumentError(\n                    Logger.logMessage(Logger.LEVEL_SEVERE, \"GeoJSONFeatureCollection\", \"constructor\",\n                        \"missingFeatures\"));\n            }\n\n            if (Object.prototype.toString.call(features) !== '[object Array]') {\n                throw new ArgumentError(\n                    Logger.logMessage(Logger.LEVEL_SEVERE, \"GeoJSONFeatureCollection\", \"constructor\",\n                        \"invalidFeatures\"));\n            }\n\n            // Documented in defineProperties below.\n            this._features = features;\n\n            // Documented in defineProperties below.\n            this._bbox = bbox;\n        }"}, {"instruction": "Given a string and an index, look backwards to find the string of whitespace following the next previous line break.", "input": "JavaScript", "output": "function getIndentation(str, index) {\n  let indentStart = index;\n  let indentEnd = index;\n  while (indentStart) {\n    const c = str.charCodeAt(indentStart - 1);\n    // line break\n    if (c === 10 || c === 13 || c === 0x2028 || c === 0x2029) {\n      break;\n    }\n    indentStart--;\n    // not white space\n    if (c !== 9 && c !== 11 && c !== 12 && c !== 32 && c !== 160) {\n      indentEnd = indentStart;\n    }\n  }\n  return str.substring(indentStart, indentEnd);\n}"}, {"instruction": "Get ReplicaSet status\n\n@param {Admin} a collection instance.\n@param {Object} [options] Optional settings. See Admin.prototype.replSetGetStatus for a list of options.\n@param {Admin~resultCallback} [callback] The command result callback.", "input": "JavaScript", "output": "function replSetGetStatus(admin, options, callback) {\n  executeDbAdminCommand(admin.s.db, { replSetGetStatus: 1 }, options, callback);\n}"}, {"instruction": "TODO(dbeam): DO NOT USE. THIS IS DEPRECATED. Use an action-link instead.\nCall this to stop clicks on <a href=\"#\"> links from scrolling to the top of\nthe page (and possibly showing a # in the link).", "input": "JavaScript", "output": "function preventDefaultOnPoundLinkClicks() {\n  document.addEventListener('click', function(e) {\n    var anchor = findAncestor(/** @type {Node} */(e.target), function(el) {\n      return el.tagName == 'A';\n    });\n    // Use getAttribute() to prevent URL normalization.\n    if (anchor && anchor.getAttribute('href') == '#')\n      e.preventDefault();\n  });\n}"}, {"instruction": "/ ZUI change begin", "input": "JavaScript", "output": "function(bar, placement) {\n            var options = this.options;\n            placement = placement || options.scaleValuePlacement;\n            placement = placement ? placement.toLowerCase() : 'auto';\n            if(placement === 'auto') {\n                placement = bar.y < 15 ? 'insdie' : 'outside';\n            }\n\n            var y = placement === 'insdie' ? (bar.y + 10) : (bar.y - 10);\n            var ctx = this.chart.ctx;\n            ctx.font = helpers.fontString(options.scaleFontSize, options.scaleFontStyle, options.scaleFontFamily);\n            ctx.textBaseline = \"middle\";\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = options.scaleFontColor;\n            ctx.fillText(bar.value, bar.x, y);\n        }"}, {"instruction": "Return true if `node` is wrapped any one of `types`.\n@param {TxtNode} node is target node\n@param {string[]} types are wrapped target node\n@returns {boolean}", "input": "JavaScript", "output": "function isNodeWrapped(node, types) {\n    var parents = getParents(node);\n    var parentsTypes = parents.map(function(parent) {\n        return parent.type;\n    });\n    return types.some(function(type) {\n        return parentsTypes.some(function(parentType) {\n            return parentType === type;\n        });\n    });\n}"}, {"instruction": "gets the metadata that should be printed next to each event", "input": "JavaScript", "output": "function getEventMetadata({ event, payload }) {\n  if (event === 'state') {\n    return chalk.bold(payload.value);\n  }\n\n  if (event === 'instance-start' || event === 'instance-stop') {\n    if (payload.dc != null) {\n      return chalk.green(`(${payload.dc})`);\n    }\n  }\n\n  return '';\n}"}, {"instruction": "Finds intersection of two ranges\n@param {Range} range\n@returns {Range} <code>null</code> if ranges does not overlap", "input": "JavaScript", "output": "function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.max(range.start, this.start);\n\t\t\t\tvar end = Math.min(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}"}, {"instruction": "Expression for $, returns the evaluator function", "input": "JavaScript", "output": "function capture( previousExpr, detection ) {\n\n      // extract meaning from the detection      \n      var capturing = !!detection[CAPTURING_INDEX];\n\n      if (!capturing)          \n         return previousExpr; // don't wrap at all, return given expr as-is      \n      \n      return lazyIntersection(previousExpr, head);\n            \n   }"}, {"instruction": "/* TODO", "input": "JavaScript", "output": "function write_sty_xlml(wb, opts)/*:string*/ {\n\t/* Styles */\n\tvar styles/*:Array<string>*/ = ['<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>'];\n\topts.cellXfs.forEach(function(xf, id) {\n\t\tvar payload/*:Array<string>*/ = [];\n\t\tpayload.push(writextag('NumberFormat', null, {\"ss:Format\": escapexml(SSF._table[xf.numFmtId])}));\n\t\tstyles.push(writextag('Style', payload.join(\"\"), {\"ss:ID\": \"s\" + (21+id)}));\n\t});\n\treturn writextag(\"Styles\", styles.join(\"\"));\n}"}, {"instruction": "Event handler for 'native.keyboardshow' event, sets keyboard.height to the\nreported height and keyboard.isOpening to true. Then calls\nkeyboardWaitForResize with keyboardShow or keyboardUpdateViewportHeight as\nthe callback depending on whether the event was triggered by a focusin or\nan orientationchange.", "input": "JavaScript", "output": "function keyboardNativeShow(e) {\n  clearTimeout(keyboardFocusOutTimer);\n  //console.log(\"keyboardNativeShow fired at: \" + Date.now());\n  //console.log(\"keyboardNativeshow window.innerHeight: \" + window.innerHeight);\n\n  if (!ionic.keyboard.isOpen || ionic.keyboard.isClosing) {\n    ionic.keyboard.isOpening = true;\n    ionic.keyboard.isClosing = false;\n  }\n\n  ionic.keyboard.height = e.keyboardHeight;\n  //console.log('nativeshow keyboard height:' + e.keyboardHeight);\n\n  if (wasOrientationChange) {\n    keyboardWaitForResize(keyboardUpdateViewportHeight, true);\n  } else {\n    keyboardWaitForResize(keyboardShow, true);\n  }\n}"}, {"instruction": "extended", "input": "JavaScript", "output": "function( dir, result ){\n\n            result = result || new Physics.vector();\n\n            return result.clone( dir ).normalize().mult( this.radius );\n        }"}, {"instruction": "override", "input": "JavaScript", "output": "function($super) {\n            $super();\n            // if the user-specified min is greater than the max, switch them\n            if(this.userMin > this.userMax) {\n                var temp = this.userMin;\n                this.userMin = this.userMax;\n                this.userMax = temp;\n            }\n            this.adjustUserMin();\n            this.adjustUserMax();\n        }"}, {"instruction": "MUST be called after `prepareSource` called\nHere we need to make auto series, especially for auto legend. But we\ndo not modify series.name in option to avoid side effects.", "input": "JavaScript", "output": "function autoSeriesName(seriesModel) {\n    // User specified name has higher priority, otherwise it may cause\n    // series can not be queried unexpectedly.\n    var name = seriesModel.name;\n    if (!modelUtil.isNameSpecified(seriesModel)) {\n        seriesModel.name = getSeriesAutoName(seriesModel) || name;\n    }\n}"}, {"instruction": "Fires the XHR request -- may be invoked immediately or on a gradually expanding retry window for reconnects", "input": "JavaScript", "output": "function () {\r\n                req.date = new Date();\r\n                if (self._conn.options.customHeaders){\r\n                    var headers = self._conn.options.customHeaders;\r\n                    for (var header in headers) {\r\n                        if (headers.hasOwnProperty(header)) {\r\n                            req.xhr.setRequestHeader(header, headers[header]);\r\n                        }\r\n                    }\r\n                }\r\n                req.xhr.send(req.data);\r\n            }"}, {"instruction": "eslint-disable-next-line no-unused-vars", "input": "JavaScript", "output": "function toggleSlideShowMode() {\n  const streams = room.remoteStreams;\n  const cb = (evt) => {\n    console.log('SlideShowMode changed', evt);\n  };\n  slideShowMode = !slideShowMode;\n  streams.forEach((stream) => {\n    if (localStream.getID() !== stream.getID()) {\n      console.log('Updating config');\n      stream.updateConfiguration({ slideShowMode }, cb);\n    }\n  });\n}"}, {"instruction": "\u6dfb\u52a0\u78b0\u649e\u76d1\u542c\n@param {Number} typeA \u78b0\u649e\u7c7b\u578bA\n@param {Number} typeB \u78b0\u649e\u7c7b\u578bB\n@param {Object} listenerConfig \u56de\u8c03\u51fd\u6570\u914d\u7f6e\n@param {Physics~collisionCallback} listenerConfig.begin \u5f00\u59cb\u63a5\u89e6\u56de\u8c03\n@param {Physics~collisionCallback} listenerConfig.preSolve \u5904\u7406\u524d\u78b0\u649e\u56de\u8c03\n@param {Physics~collisionCallback} listenerConfig.postSolve \u5904\u7406\u540e\u78b0\u649e\u56de\u8c03\n@param {Physics~collisionCallback} listenerConfig.separate \u5206\u79bb\u56de\u8c03", "input": "JavaScript", "output": "function(typeA, typeB, listenerConfig){\n            var begin = listenerConfig.begin||function(arbiter){\n                return true;\n            };\n\n            var preSolve = listenerConfig.preSolve||function(arbiter){\n                return true;\n            };\n\n            var postSolve = listenerConfig.postSolve||function(arbiter){\n\n            };\n\n            var separate = listenerConfig.separate||function(arbiter){\n\n            };\n\n            this.space.addCollisionHandler(typeA, typeB, begin, preSolve, postSolve, separate);\n        }"}, {"instruction": "Block for when broadcast received.\n@this Blockly.Block", "input": "JavaScript", "output": "function() {\n    this.jsonInit({\n      \"id\": \"event_whenbroadcastreceived\",\n      \"message0\": Blockly.Msg.EVENT_WHENBROADCASTRECEIVED,\n      \"args0\": [\n        {\n          \"type\": \"field_variable\",\n          \"name\": \"BROADCAST_OPTION\",\n          \"variableTypes\": [Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE],\n          \"variable\": Blockly.Msg.DEFAULT_BROADCAST_MESSAGE_NAME\n        }\n      ],\n      \"category\": Blockly.Categories.event,\n      \"extensions\": [\"colours_event\", \"shape_hat\"]\n    });\n  }"}, {"instruction": "Creates a new search client.\n@param {Object} options The options object\n@param {orion.serviceregistry.ServiceRegistry} options.serviceRegistry The service registry\n@name orion.searchClient.Searcher\n@class Provides API for searching the workspace.", "input": "JavaScript", "output": "function Searcher(options) {\n\t\tthis._registry= options.serviceRegistry;\n\t\tthis._commandService = options.commandService;\n\t\tthis._fileClient = options.fileService;\n\t\t//TODO clean up the search client API. Make any helper private\n\t\tthis._registry.registerService(\"orion.core.search.client\", this); //$NON-NLS-1$\n\t}"}, {"instruction": "filtering to enable a white-list version of Sinon FakeXhr, where whitelisted requests are passed through to real XHR", "input": "JavaScript", "output": "function each(collection, callback) {\n        if (!collection) {\n            return;\n        }\n\n        for (var i = 0, l = collection.length; i < l; i += 1) {\n            callback(collection[i]);\n        }\n    }"}, {"instruction": "Utility function that creates new folders\nbased off dir argument", "input": "JavaScript", "output": "function createDirectory(dir) {\n    if (!fs.existsSync(dir)) {\n        dryRun ? console.log(`...CREATE the '${dir}' folder.`) : fs.mkdirSync(dir);\n    }\n}"}, {"instruction": "Function: setCellStyles\n\nAssigns the value for the given key in the styles of the given cells, or\nremoves the key from the styles if the value is null.\n\nParameters:\n\nmodel - <mxGraphModel> to execute the transaction in.\ncells - Array of <mxCells> to be updated.\nkey - Key of the style to be changed.\nvalue - New value for the given key.", "input": "JavaScript", "output": "function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t}"}, {"instruction": "File loading ------------------------------------------------", "input": "JavaScript", "output": "function(plugins) {\n    _.each(\n      plugins,\n      _.bind(function(plugin) {\n        if (!this.plugins[plugin]) {\n          this.plugins[plugin] = this.requirePlugin(plugin);\n        }\n      }, this)\n    );\n  }"}, {"instruction": "Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n\n@public\n@param {string} message - Error message to be displayed.\n@returns {Error} instance detailing the error condition", "input": "JavaScript", "output": "function createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = 'ERR_MOCHA_INVALID_EXCEPTION';\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}"}, {"instruction": "Use mouse events for entropy, if we do not have enough entropy by the time we need it, entropy will be generated by Math.random.", "input": "JavaScript", "output": "function(ev) {\n    this.count = this.count || 0;\n    if (this.count >= 256 || rng_pptr >= rng_psize) {\n      if (window.removeEventListener)\n        window.removeEventListener(\"mousemove\", onMouseMoveListener, false);\n      else if (window.detachEvent)\n        window.detachEvent(\"onmousemove\", onMouseMoveListener);\n      return;\n    }\n    try {\n      var mouseCoordinates = ev.x + ev.y;\n      rng_pool[rng_pptr++] = mouseCoordinates & 255;\n      this.count += 1;\n    } catch (e) {\n      // Sometimes Firefox will deny permission to access event properties for some reason. Ignore.\n    }\n  }"}, {"instruction": "Texture Channels to Texture *****************************************", "input": "JavaScript", "output": "function LGraphChannelsTexture() {\n            this.addInput(\"R\", \"Texture\");\n            this.addInput(\"G\", \"Texture\");\n            this.addInput(\"B\", \"Texture\");\n            this.addInput(\"A\", \"Texture\");\n\n            this.addOutput(\"Texture\", \"Texture\");\n\n            this.properties = {\n                precision: LGraphTexture.DEFAULT,\n                R: 1,\n                G: 1,\n                B: 1,\n                A: 1\n            };\n            this._color = vec4.create();\n            this._uniforms = {\n                u_textureR: 0,\n                u_textureG: 1,\n                u_textureB: 2,\n                u_textureA: 3,\n                u_color: this._color\n            };\n        }"}, {"instruction": "/* At this point, any content is assumed to be an URL", "input": "JavaScript", "output": "function(url)  {\n\t\t\t\t\tvar self = this,\n\t\t\t\t\t\tdeferred = $.Deferred();\n\t\t\t\t\t/* we are using load so one can specify a target with: url.html #targetelement */\n\t\t\t\t\tvar $container = $('<div></div>').load(url, function(response, status){\n\t\t\t\t\t\tif ( status !== \"error\" ) {\n\t\t\t\t\t\t\tdeferred.resolve($container.contents());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t});\n\t\t\t\t\treturn deferred.promise();\n\t\t\t\t}"}, {"instruction": "Canacel a preapproval payment using the preapprovalModule\n@param id\n@param callback\n@returns {*}", "input": "JavaScript", "output": "function cancelPreapprovalPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preapprovalModule.update({\n      id: id,\n      status: 'cancelled'\n    }, callback);\n  }"}, {"instruction": "The functions in this file return custom JS property descriptors\nthat are supposed to be assigned to Model fields.\n\nSome include the logic to look up models using foreign keys and\nto add or remove relationships between models.\n\n@module descriptors\n \nDefines a basic non-key attribute.\n@param  {string} fieldName - the name of the field the descriptor will be assigned to.", "input": "JavaScript", "output": "function attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}"}, {"instruction": "if (transform == null) { throw new Error(`No transform found for ${ccName}`); }", "input": "JavaScript", "output": "function statsMethod (query = {}) {\n    const reqParams = Object.assign({}, defaults, query);\n\n    debug(\"stats request\", endpoint.url, reqParams);\n    return transport(endpoint.url, reqParams).then(function (response) {\n      if (response == null) return;\n\n      // response is something like \"GameID is required\"\n      if (typeof response === \"string\") throw new Error(response);\n\n      return transform ? transform(response) : response;\n    });\n  }"}, {"instruction": "Returns bucketed experiment ID to compare against experiment user is being called into\n@param {Object} group        Group that experiment is in\n@param {string} bucketingId  Bucketing ID\n@param {string} userId       ID of user to be bucketed into experiment\n@param {Object} logger       Logger implementation\n@return {string} ID of experiment if user is bucketed into experiment within the group, null otherwise", "input": "JavaScript", "output": "function(group, bucketingId, userId, logger) {\n    var bucketingKey = sprintf('%s%s', bucketingId, group.id);\n    var bucketValue = module.exports._generateBucketValue(bucketingKey);\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME, bucketValue, userId));\n    var trafficAllocationConfig = group.trafficAllocation;\n    var bucketedExperimentId = module.exports._findBucket(bucketValue, trafficAllocationConfig);\n    return bucketedExperimentId;\n  }"}, {"instruction": "Finds and returns the first 'meta charset' element in the head.\n\n@param {Node} head the section to search for the meta charset node.\n@returns {Node} the '<meta charset>' node or null.", "input": "JavaScript", "output": "function findMetaViewport(head) {\n  for (let node = head.firstChild; node !== null; node = node.nextSibling) {\n    if (node.tagName === 'meta' && node.attribs.name === 'viewport') {\n      return node;\n    }\n  }\n  return null;\n}"}, {"instruction": "Override configuration values\n\n@method setConfig\n\n@param {Object}", "input": "JavaScript", "output": "function setConfig (options) {\n  Object.keys(options).forEach((option) => {\n    if (config[option] !== undefined) {\n      config[option] = options[option]\n    }\n  })\n}"}, {"instruction": "Finds siblings nodes of the passed node.\n\n@param  {Element} node\n@return {Array}", "input": "JavaScript", "output": "function siblings(node) {\n  if (node && node.parentNode) {\n    var n = node.parentNode.firstChild;\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== node) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  }\n\n  return [];\n}"}, {"instruction": "/*\ndeep assign\n@param {Object} oldData oldData\n@param {Object} newData newData", "input": "JavaScript", "output": "function assign (oldData, newData) {\n  Object.keys(newData).forEach(k => {\n    if (isObject(newData[k]) && oldData[k] && isObject(oldData[k])) {\n      assign(oldData[k], newData[k])\n      let obj = JSON.parse(JSON.stringify({\n        [k]: oldData[k]\n      }))\n      Object.assign(oldData, obj)\n    } else {\n      oldData[k] = newData[k]\n    }\n  })\n}"}, {"instruction": "Extend properties to target if not exist.\n@param  {Object} target\n@param  {Object} source\n@return {Object}\n@memberOf clay.core.util", "input": "JavaScript", "output": "function (target, source) {\n        if (source) {\n            for (var propName in source) {\n                if (target[propName] === undefined) {\n                    target[propName] = source[propName];\n                }\n            }\n        }\n        return target;\n    }"}, {"instruction": "strips trailing slashes and compares urls", "input": "JavaScript", "output": "function _isCurrentUrl(href, currentUrl) {\n        if (!currentUrl) {\n            return false;\n        }\n\n        var strippedHref = href.replace(/\\/+$/, ''),\n            strippedCurrentUrl = currentUrl.replace(/\\/+$/, '');\n        return strippedHref === strippedCurrentUrl;\n    }"}, {"instruction": "@ngdoc method\n@name bundler.default:default#htmlTags\n@methodOf bundler.default:default\n@function\n@description\nFunction called by view.js to build the view HTML\n\n\n@param {String} type Either start/js/css\n@param {Boolean} pack Pack with resolveAssetLink ?\n@returns {[String]} List of script tag strings", "input": "JavaScript", "output": "function htmlTags(type,pack) {\n    var dests;\n\n    // jshint validthis:true\n    if (type === 'start') {\n      return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];\n    }\n\n    if (pack) {\n      dests = { urls: {} };\n      // jshint validthis:true\n      dests.urls[type] = resolveAssetLink(this.client, type);\n      return [ htmlTag[type](dests) ];\n    } else {\n      // jshint validthis:true\n      var entries = this.entries(type);\n      dests = this.dests;\n      return entries.map(function(entry) {\n        return htmlTag[type](dests,entry);\n      });\n    }\n  }"}, {"instruction": "https://gist.github.com/1044128/", "input": "JavaScript", "output": "function(element) {\n  if ('outerHTML' in element) return element.outerHTML;\n  var ns = \"http://www.w3.org/1999/xhtml\";\n  var container = document.createElementNS(ns, '_');\n  var elemProto = (window.HTMLElement || window.Element).prototype;\n  var xmlSerializer = new XMLSerializer();\n  var html;\n  if (document.xmlVersion) {\n    return xmlSerializer.serializeToString(element);\n  } else {\n    container.appendChild(element.cloneNode(false));\n    html = container.innerHTML.replace('><', '>' + element.innerHTML + '<');\n    container.innerHTML = '';\n    return html;\n  }\n}"}, {"instruction": "/* global dom", "input": "JavaScript", "output": "function noParentScrolled(element, offset) {\n\telement = dom.getComposedParent(element);\n\twhile (element && element.nodeName.toLowerCase() !== 'html') {\n\t\tif (element.scrollTop) {\n\t\t\toffset += element.scrollTop;\n\t\t\tif (offset >= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telement = dom.getComposedParent(element);\n\t}\n\treturn true;\n}"}, {"instruction": "Z Sorting function\n@ignore", "input": "JavaScript", "output": "function _sortZ(a, b) {\n         return b.pos && a.pos ? b.pos.z - a.pos.z : a.pos ? -Infinity : Infinity;\n       }"}, {"instruction": "@description Formats API response into handlebars/theme format.\n\n@return {Object} containing page variables", "input": "JavaScript", "output": "function formatPageResponse(result) {\n    var response = {};\n\n    if (result.posts) {\n        response.posts = result.posts;\n    }\n\n    if (result.meta && result.meta.pagination) {\n        response.pagination = result.meta.pagination;\n    }\n\n    _.each(result.data, function (data, name) {\n        if (data.meta) {\n            // Move pagination to be a top level key\n            response[name] = data;\n            response[name].pagination = data.meta.pagination;\n            delete response[name].meta;\n        } else {\n            // This is a single object, don't wrap it in an array\n            response[name] = data[0];\n        }\n    });\n\n    return response;\n}"}, {"instruction": "Check if the node is a React ES5 component\n\n@param {ASTNode} node The AST node being checked.\n@returns {Boolean} True if the node is a React ES5 component, false if not", "input": "JavaScript", "output": "function (node) {\n      if (!node.parent) {\n        return false;\n      }\n      return /^(React\\.)?createClass$/.test(sourceCode.getText(node.parent.callee));\n    }"}, {"instruction": "Properties of a Timestamp.\n@memberof google.protobuf\n@interface ITimestamp\n@property {number|null} [seconds] Timestamp seconds\n@property {number|null} [nanos] Timestamp nanos\n \nConstructs a new Timestamp.\n@memberof google.protobuf\n@classdesc Represents a Timestamp.\n@implements ITimestamp\n@constructor\n@param {google.protobuf.ITimestamp=} [properties] Properties to set", "input": "JavaScript", "output": "function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }"}, {"instruction": "Traverse an object or array, and return a clone with all ISO strings parsed\ninto Date objects.\n\n@param {Object} obj\n@return {Object}", "input": "JavaScript", "output": "function traverse (input, strict) {\n  if (strict === undefined) strict = true;\n\n  if (is.object(input)) return object(input, strict);\n  if (is.array(input)) return array(input, strict);\n  return input;\n}"}, {"instruction": "\u58f0\u660e\u5f0f\u4e8b\u4ef6\u7684\u76d1\u542c\u51fd\u6570\n\n@param {Object} eventBind \u7ed1\u5b9a\u4fe1\u606f\u5bf9\u8c61\n@param {boolean} isComponentEvent \u662f\u5426\u7ec4\u4ef6\u81ea\u5b9a\u4e49\u4e8b\u4ef6\n@param {Data} data \u6570\u636e\u73af\u5883\n@param {Event} e \u4e8b\u4ef6\u5bf9\u8c61", "input": "JavaScript", "output": "function getEventListener(eventExpr, owner, data, isComponentEvent) {\n    return function (e) {\n        var method = findMethod(owner, eventExpr.name, data);\n\n        if (typeof method === 'function') {\n            method.apply(owner, evalArgs(\n                eventExpr.args,\n                new Data(\n                    { $event: isComponentEvent ? e : e || window.event },\n                    data\n                ),\n                owner\n            ));\n        }\n    };\n}"}, {"instruction": "Return the cadence of notches that get labels in the primary color.\nEG, return 2 if every 2nd notch should be labeled,\nreturn 10 if every 10th notch should be labeled, etc.\n\nNote that if you override the default function, you'll almost\ncertainly want to override formatTimeCallback, primaryLabelInterval\nand/or secondaryLabelInterval so they all work together.\n\n@param pxPerSec", "input": "JavaScript", "output": "function primaryLabelInterval(pxPerSec) {\n    var retval = 1;\n    if (pxPerSec >= 25 * 100) {\n        retval = 10;\n    } else if (pxPerSec >= 25 * 40) {\n        retval = 4;\n    } else if (pxPerSec >= 25 * 10) {\n        retval = 10;\n    } else if (pxPerSec >= 25 * 4) {\n        retval = 4;\n    } else if (pxPerSec >= 25) {\n        retval = 1;\n    } else if (pxPerSec * 5 >= 25) {\n        retval = 5;\n    } else if (pxPerSec * 15 >= 25) {\n        retval = 15;\n    } else {\n        retval = Math.ceil(0.5 / pxPerSec) * 60;\n    }\n    return retval;\n}"}, {"instruction": "OAuth2 Web Server Authentication Flow (Authorization Code)\nAccess Token Request\n\n@param {String} code - Authorization code\n@param {Object} [params] - Optional parameters to send in token retrieval\n@param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n@param {Callback.<TokenResponse>} [callback] - Callback function\n@returns {Promise.<TokenResponse>}", "input": "JavaScript", "output": "function(code, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n    params = _.extend({\n      grant_type : \"authorization_code\",\n      code : code,\n      client_id : this.clientId,\n      redirect_uri : this.redirectUri\n    }, params || {});\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n    return this._postParams(params, callback);\n  }"}, {"instruction": "Create a new UndoManager with an optional maximum history size.", "input": "JavaScript", "output": "function UndoManager (maxItems) {\n    this.maxItems  = maxItems || 50;\n    this.state = NORMAL_STATE;\n    this.dontCompose = false;\n    this.undoStack = [];\n    this.redoStack = [];\n  }"}, {"instruction": "Functions from lodash 4.0.0-pre \nThe base implementation of `_.pick` without support for individual\nproperty names.\n\n@private\n@param {Object} object The source object.\n@param {string[]} props The property names to pick.\n@returns {Object} Returns the new object.", "input": "JavaScript", "output": "function basePick(object, props) {\n  object = Object(object);\n\n  const { length } = props;\n  const result = {};\n  let index = -1;\n\n  while (++index < length) {\n    const key = props[index];\n    if (key in object) {\n      result[key] = object[key];\n    }\n  }\n\n  return result;\n}"}, {"instruction": "/*\nvar apply_impulse = function(body, j, r){\nbody.v = vadd(body.v, vmult(j, body.m_inv));\nbody.w += body.i_inv*vcross(r, j);\n};\n\nvar apply_impulses = function(a, b, r1, r2, j)\n{\napply_impulse(a, vneg(j), r1);\napply_impulse(b, j, r2);\n};", "input": "JavaScript", "output": "function(body, jx, jy, r){\n//  body.v = body.v.add(vmult(j, body.m_inv));\n    body.vx += jx * body.m_inv;\n    body.vy += jy * body.m_inv;\n//  body.w += body.i_inv*vcross(r, j);\n    body.w += body.i_inv*(r.x*jy - r.y*jx);\n}"}, {"instruction": "/*\n<functionName>: function() {}", "input": "JavaScript", "output": "function (node) {\n                if (node.body && node.body.type === \"FunctionDeclaration\") {\n                    if (node.label) {\n                        _addResult(node.label);\n                    }\n                }\n            }"}, {"instruction": "Test screen rotation", "input": "JavaScript", "output": "function rotateScreen(r) {\n    lcd.setRotation(r);\n    lcd.fillRect(0, 0, 5, 5, ili9341.ILI9341_WHITE);\n    if (r < 4) {\n        r++;\n        setTimeout(function() { rotateScreen(r); }, 1000);\n    }\n}"}, {"instruction": "Removes project from shared projects.\nAlso removes all references from the other table.", "input": "JavaScript", "output": "function removeProject(project) {\n\t\treturn sharedProject.findOne({'location': project}).exec()\n\t\t.then(function(doc) {\n\t\t\tif (doc.users.length > 0) {\n\t\t\t\treturn userProjectsCollection.removeProjectReferences(doc.users, project).exec();\n\t\t\t}\n\t\t})\n\t\t.then(function() {\n\t\t\treturn sharedProject.remove({location: project}).exec();\n\t\t});\n\t}"}, {"instruction": "@classdesc\nWraps a jCal component, adding convenience methods to add, remove and\nupdate subcomponents and properties.\n\n@class\n@alias ICAL.Component\n@param {Array|String} jCal         Raw jCal component data OR name of new\ncomponent\n@param {ICAL.Component} parent     Parent component to associate", "input": "JavaScript", "output": "function Component(jCal, parent) {\n    if (typeof(jCal) === 'string') {\n      // jCal spec (name, properties, components)\n      jCal = [jCal, [], []];\n    }\n\n    // mostly for legacy reasons.\n    this.jCal = jCal;\n\n    this.parent = parent || null;\n  }"}, {"instruction": "checks if selector targets a tag\n@param  {String} selector the selector\n@return {Boolean}         if the selector targets a tag", "input": "JavaScript", "output": "function targetsTag (selector) {\n  const selectors = simpleSelectorParser.process(selector).res\n\n  return selectors.filter((selector) => {\n    let selectorNodes = selector.nodes.concat([]).reverse() // clone the array\n\n    for (const node of selectorNodes) {\n      if (node.type === 'cominator') { break }\n\n      if (node.type === 'tag') { return true }\n    }\n\n    return false\n  }).length > 0\n}"}, {"instruction": "Get the timings.\n\n@return {Object}", "input": "JavaScript", "output": "function getTiming () {\n  let nativeTiming\n  let performance = window.performance\n  if (performance && performance.timing) {\n    nativeTiming = performance.timing.toJSON\n      ? performance.timing.toJSON()\n      : util.fn.extend({}, performance.timing)\n  } else {\n    nativeTiming = {}\n  }\n  return util.fn.extend(nativeTiming, recorder)\n}"}, {"instruction": "/*\nChecks if there is a hunk header coming before a new file starts\n\nHunk header is a group of three lines started by ( `--- ` , `+++ ` , `@@` )", "input": "JavaScript", "output": "function existHunkHeader(line, lineIdx) {\n      var idx = lineIdx;\n\n      while (idx < diffLines.length - 3) {\n        if (utils.startsWith(line, 'diff')) {\n          return false;\n        }\n\n        if (\n          utils.startsWith(diffLines[idx], oldFileNameHeader) &&\n          utils.startsWith(diffLines[idx + 1], newFileNameHeader) &&\n          utils.startsWith(diffLines[idx + 2], hunkHeaderPrefix)\n        ) {\n          return true;\n        }\n\n        idx++;\n      }\n\n      return false;\n    }"}, {"instruction": "Current position of an element relative to the document.", "input": "JavaScript", "output": "function offset ( elem, orientation ) {\n\n        var rect = elem.getBoundingClientRect(),\n            doc = elem.ownerDocument,\n            docElem = doc.documentElement,\n            pageOffset = getPageOffset();\n\n        // getBoundingClientRect contains left scroll in Chrome on Android.\n        // I haven't found a feature detection that proves this. Worst case\n        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.\n        if ( /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) ) {\n            pageOffset.x = 0;\n        }\n\n        return orientation ? (rect.top + pageOffset.y - docElem.clientTop) : (rect.left + pageOffset.x - docElem.clientLeft);\n    }"}, {"instruction": "OAuth2Strategy\n\nProvider is an object defining the details of the authentication API.\nClient is an object containing provider registration info and options.\nVerify is the Passport callback to invoke after authenticating", "input": "JavaScript", "output": "function OAuth2Strategy (provider, client, verify) {\n  Strategy.call(this)\n  this.provider = provider\n  this.endpoints = provider.endpoints\n  this.mapping = provider.mapping\n  this.client = client\n  this.name = provider.id\n  this.verify = verify\n}"}, {"instruction": "Fix Mode7 comments when they are bad", "input": "JavaScript", "output": "function (text) {\n        if (text.charAt(0) === '[') {\n            switch (text.charAt(text.length - 1)) {\n                case ']':\n                    return text;\n                case '\"':\n                    return text + ']';\n                case ',':\n                    return text.substring(0, text.length - 1) + '\"]';\n                default:\n                    return _formatmode7(text.substring(0, text.length - 1));\n            }\n        } else {\n            return text;\n        }\n    }"}, {"instruction": "It will remove resize/scroll events and won't recalculate popper position\nwhen they are triggered. It also won't trigger onUpdate callback anymore,\nunless you call `update` method manually.\n@method\n@memberof Popper", "input": "JavaScript", "output": "function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    if (window.cancelAnimationFrame) {\n      cancelAnimationFrame(this.scheduleUpdate);\n    }\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}"}, {"instruction": "COUNTUP AND CODE VISUALIZER", "input": "JavaScript", "output": "function createCountUp() {\n    establishOptionsFromInputs();\n    demo = new CountUp('myTargetElement', endVal, options);\n    if (!demo.error) {\n      errorSection.style.display = 'none';\n      if (input('useOnComplete').checked) {\n        demo.start(methodToCallOnComplete);\n      }\n      else {\n        demo.start();\n      }\n      updateCodeVisualizer();\n    }\n    else {\n      errorSection.style.display = 'block';\n      document.getElementById('error').innerHTML = demo.error;\n      console.error(demo.error);\n    }\n  }"}]
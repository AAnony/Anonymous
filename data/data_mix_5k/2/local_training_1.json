[{"instruction": "Summarizing the code.", "input": "def cycle(self, *args):\n        \"\"\"\"\"\"\n        if not args:\n            raise TypeError('no items for cycling given')\n        return args[self.index0 % len(args)]", "output": "Cycles among the arguments with the current loop index.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete(self):\n        \"\"\"\n        \"\"\"\n        client = self._instance._client\n        client.instance_admin_client.delete_cluster(self.name)", "output": "Delete this cluster.\n\n        For example:\n\n        .. literalinclude:: snippets.py\n            :start-after: [START bigtable_delete_cluster]\n            :end-before: [END bigtable_delete_cluster]\n\n        Marks a cluster and all of its tables for permanent deletion in 7 days.\n\n        Immediately upon completion of the request:\n\n        * Billing will cease for all of the cluster's reserved resources.\n        * The cluster's ``delete_time`` field will be set 7 days in the future.\n\n        Soon afterward:\n\n        * All tables within the cluster will become unavailable.\n\n        At the cluster's ``delete_time``:\n\n        * The cluster and **all of its tables** will immediately and\n          irrevocably disappear from the API, and their data will be\n          permanently deleted.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_batch_begin(self, train, **kwargs):\n        \"\"\n        if not self.learn.gan_trainer.gen_mode and train: self.learn.opt.lr *= self.mult_lr", "output": "Multiply the current lr if necessary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def undeploy(self, no_confirm=False, remove_logs=False):\n        \"\"\"\n        \n        \"\"\"\n\n        if not no_confirm: # pragma: no cover\n            confirm = input(\"Are you sure you want to undeploy? [y/n] \")\n            if confirm != 'y':\n                return\n\n        if self.use_alb:\n            self.zappa.undeploy_lambda_alb(self.lambda_name)\n\n        if self.use_apigateway:\n            if remove_logs:\n                self.zappa.remove_api_gateway_logs(self.lambda_name)\n\n            domain_name = self.stage_config.get('domain', None)\n            base_path = self.stage_config.get('base_path', None)\n\n            # Only remove the api key when not specified\n            if self.api_key_required and self.api_key is None:\n                api_id = self.zappa.get_api_id(self.lambda_name)\n                self.zappa.remove_api_key(api_id, self.api_stage)\n\n            gateway_id = self.zappa.undeploy_api_gateway(\n                self.lambda_name,\n                domain_name=domain_name,\n                base_path=base_path\n            )\n\n        self.unschedule()  # removes event triggers, including warm up event.\n\n        self.zappa.delete_lambda_function(self.lambda_name)\n        if remove_logs:\n            self.zappa.remove_lambda_function_logs(self.lambda_name)\n\n        click.echo(click.style(\"Done\", fg=\"green\", bold=True) + \"!\")", "output": "Tear down an existing deployment.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_eval_and_decode(self):\n    \"\"\"\"\"\"\n    eval_steps = self._hparams.eval_freq_in_steps\n    packed_dataset = \"_packed\" in self._hparams.problem.name\n    mlperf_log.transformer_print(key=mlperf_log.TRAIN_LOOP)\n    for i in range(0, self._train_spec.max_steps, eval_steps):\n      mlperf_log.transformer_print(\n          key=mlperf_log.TRAIN_EPOCH, value=i // eval_steps)\n      if packed_dataset and i > 0:\n        problem = registry.problem(self._hparams.problem.name + \"_packed\")\n        p_hparams = problem.get_hparams(self._hparams)\n        self._hparams.problem = problem\n        self._hparams.problem_hparams = p_hparams\n      self._estimator.train(\n          self._train_spec.input_fn,\n          steps=eval_steps,\n          hooks=self._train_spec.hooks)\n      self._set_eval_dir_name(\"eval\")\n      self._estimator.evaluate(\n          self._eval_spec.input_fn,\n          steps=self._eval_spec.steps,\n          hooks=self._eval_spec.hooks,\n          name=\"eval\")\n      if packed_dataset:\n        problem = registry.problem(\n            self._hparams.problem.name.replace(\"_packed\", \"\"))\n        p_hparams = problem.get_hparams(self._hparams)\n        self._hparams.problem = problem\n        self._hparams.problem_hparams = p_hparams\n      mlperf_log.transformer_print(key=mlperf_log.EVAL_START)\n      if self._hparams.mlperf_mode:\n        self._decode_hparams.mlperf_decode_step = i + eval_steps\n      self.decode(dataset_split=tf.estimator.ModeKeys.EVAL)\n      d_hparams = self._decode_hparams\n      if self._hparams.mlperf_mode and d_hparams.mlperf_success:\n        mlperf_log.transformer_print(\n            key=mlperf_log.RUN_STOP, value={\"success\": \"true\"})\n        break\n\n    d_hparams = self._decode_hparams\n    if self._hparams.mlperf_mode and not d_hparams.mlperf_success:\n      mlperf_log.transformer_print(\n          key=mlperf_log.RUN_STOP, value={\"success\": \"false\"})", "output": "Does eval and decode after training every eval_freq_in_steps.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def envs():\n    '''\n    \n    '''\n    saltenvs = []\n    for container in __opts__.get('azurefs', []):\n        saltenvs.append(container.get('saltenv', 'base'))\n    # Remove duplicates\n    return list(set(saltenvs))", "output": "Each container configuration can have an environment setting, or defaults\n    to base", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def orc(self, path):\n        \"\"\"\n        \"\"\"\n        if isinstance(path, basestring):\n            path = [path]\n        return self._df(self._jreader.orc(_to_seq(self._spark._sc, path)))", "output": "Loads ORC files, returning the result as a :class:`DataFrame`.\n\n        >>> df = spark.read.orc('python/test_support/sql/orc_partitioned')\n        >>> df.dtypes\n        [('a', 'bigint'), ('b', 'int'), ('c', 'int')]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _player_step_tuple(self, envs_step_tuples):\n    \"\"\"\"\"\"\n    ob, reward, done, info = envs_step_tuples[\"env\"]\n    ob = self._augment_observation(ob, reward, self.cumulative_reward)\n    return ob, reward, done, info", "output": "Augment observation, return usual step tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _escalation_rules_to_string(escalation_rules):\n    ''\n    result = ''\n    for rule in escalation_rules:\n        result += 'escalation_delay_in_minutes: {0} '.format(rule['escalation_delay_in_minutes'])\n        for target in rule['targets']:\n            result += '{0}:{1} '.format(target['type'], target['id'])\n    return result", "output": "convert escalation_rules dict to a string for comparison", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_properties(self, response):\n        \"\"\"\n        \"\"\"\n        self._properties.clear()\n        self._properties.update(response)", "output": "Helper for :meth:`reload`.\n\n        :type response: dict\n        :param response: resource mapping from server", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def winrm_cmd(session, command, flags, **kwargs):\n    '''\n    \n    '''\n    log.debug('Executing WinRM command: %s %s', command, flags)\n    # rebuild the session to ensure we haven't timed out\n    session.protocol.transport.build_session()\n    r = session.run_cmd(command, flags)\n    return r.status_code", "output": "Wrapper for commands to be run against Windows boxes using WinRM.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_locations(self, provider=None):\n        '''\n        \n        '''\n        mapper = salt.cloud.Map(self._opts_defaults())\n        return salt.utils.data.simple_types_filter(\n            mapper.location_list(provider)\n        )", "output": "List all available locations in configured cloud systems", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_dict(self):\n        \"\"\"\n        \"\"\"\n        if self.all_:\n            return {\"all\": True}\n\n        return {\n            \"keys\": self.keys,\n            \"ranges\": [keyrange._to_dict() for keyrange in self.ranges],\n        }", "output": "Return keyset's state as a dict.\n\n        The result can be used to serialize the instance and reconstitute\n        it later using :meth:`_from_dict`.\n\n        :rtype: dict\n        :returns: state of this instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def keypair_add(name, pubfile=None, pubkey=None, profile=None, **kwargs):\n    '''\n    \n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.keypair_add(\n        name,\n        pubfile,\n        pubkey\n    )", "output": "Add a keypair to nova (nova keypair-add)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' nova.keypair_add mykey pubfile='/home/myuser/.ssh/id_rsa.pub'\n        salt '*' nova.keypair_add mykey pubkey='ssh-rsa <key> myuser@mybox'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_list(self, name: str) -> List[str]:\n        \"\"\"\"\"\"\n        norm_name = _normalized_headers[name]\n        return self._as_list.get(norm_name, [])", "output": "Returns all values for the given header as a list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def host_update(hostid, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'host.update'\n            params = {\"hostid\": hostid}\n            params = _params_extend(params, _ignore_name=True, **kwargs)\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['hostids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": ".. versionadded:: 2016.3.0\n\n    Update existing hosts\n\n    .. note::\n        This function accepts all standard host and host.update properties:\n        keyword argument names differ depending on your zabbix version, see the\n        documentation for `host objects`_ and the documentation for `updating\n        hosts`_.\n\n        .. _`host objects`: https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\n        .. _`updating hosts`: https://www.zabbix.com/documentation/2.4/manual/api/reference/host/update\n\n    :param hostid: ID of the host to update\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n    :param visible_name: string with visible name of the host, use\n        'visible_name' instead of 'name' parameter to not mess with value\n        supplied from Salt sls file.\n\n    :return: ID of the updated host.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.host_update 10084 name='Zabbix server2'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_numeric_feature_names(example):\n  \"\"\"\n  \"\"\"\n  numeric_features = ('float_list', 'int64_list')\n  features = get_example_features(example)\n  return sorted([\n      feature_name for feature_name in features\n      if features[feature_name].WhichOneof('kind') in numeric_features\n  ])", "output": "Returns a list of feature names for float and int64 type features.\n\n  Args:\n    example: An example.\n\n  Returns:\n    A list of strings of the names of numeric features.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def profile_device_get(name, device_name, remote_addr=None,\n                       cert=None, key=None, verify_cert=True):\n    ''' \n    '''\n    profile = profile_get(\n        name,\n        remote_addr,\n        cert,\n        key,\n        verify_cert,\n        _raw=True\n    )\n\n    return _get_property_dict_item(profile, 'devices', device_name)", "output": "Get a profile device.\n\n        name :\n            The name of the profile to get the device from.\n\n        device_name :\n            The name of the device to retrieve.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_device_get default eth0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_colors(use=True, theme=None):\n    '''\n    \n\n    '''\n\n    colors = {\n        'BLACK': TextFormat('black'),\n        'DARK_GRAY': TextFormat('bold', 'black'),\n        'RED': TextFormat('red'),\n        'LIGHT_RED': TextFormat('bold', 'red'),\n        'GREEN': TextFormat('green'),\n        'LIGHT_GREEN': TextFormat('bold', 'green'),\n        'YELLOW': TextFormat('yellow'),\n        'LIGHT_YELLOW': TextFormat('bold', 'yellow'),\n        'BLUE': TextFormat('blue'),\n        'LIGHT_BLUE': TextFormat('bold', 'blue'),\n        'MAGENTA': TextFormat('magenta'),\n        'LIGHT_MAGENTA': TextFormat('bold', 'magenta'),\n        'CYAN': TextFormat('cyan'),\n        'LIGHT_CYAN': TextFormat('bold', 'cyan'),\n        'LIGHT_GRAY': TextFormat('white'),\n        'WHITE': TextFormat('bold', 'white'),\n        'DEFAULT_COLOR': TextFormat('default'),\n        'ENDC': TextFormat('reset'),\n    }\n    if theme:\n        colors.update(get_color_theme(theme))\n\n    if not use:\n        for color in colors:\n            colors[color] = ''\n    if isinstance(use, six.string_types):\n        # Try to set all of the colors to the passed color\n        if use in colors:\n            for color in colors:\n                # except for color reset\n                if color == 'ENDC':\n                    continue\n                colors[color] = colors[use]\n\n    return colors", "output": "Return the colors as an easy to use dict. Pass `False` to deactivate all\n    colors by setting them to empty strings. Pass a string containing only the\n    name of a single color to be used in place of all colors. Examples:\n\n    .. code-block:: python\n\n        colors = get_colors()  # enable all colors\n        no_colors = get_colors(False)  # disable all colors\n        red_colors = get_colors('RED')  # set all colors to red", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sink(self, name, filter_=None, destination=None):\n        \"\"\"\n        \"\"\"\n        return Sink(name, filter_, destination, client=self)", "output": "Creates a sink bound to the current client.\n\n        :type name: str\n        :param name: the name of the sink to be constructed.\n\n        :type filter_: str\n        :param filter_: (optional) the advanced logs filter expression\n                        defining the entries exported by the sink.  If not\n                        passed, the instance should already exist, to be\n                        refreshed via :meth:`Sink.reload`.\n\n        :type destination: str\n        :param destination: destination URI for the entries exported by\n                            the sink.  If not passed, the instance should\n                            already exist, to be refreshed via\n                            :meth:`Sink.reload`.\n\n        :rtype: :class:`google.cloud.logging.sink.Sink`\n        :returns: Sink created with the current client.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _size_fmt(num):\n    '''\n    \n    '''\n    try:\n        num = int(num)\n        if num < 1024:\n            return '{0} bytes'.format(num)\n        num /= 1024.0\n        for unit in ('KiB', 'MiB', 'GiB', 'TiB', 'PiB'):\n            if num < 1024.0:\n                return '{0:3.1f} {1}'.format(num, unit)\n            num /= 1024.0\n    except Exception:\n        log.error('Unable to format file size for \\'%s\\'', num)\n        return 'unknown'", "output": "Format bytes as human-readable file sizes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clear_job_cache(hours=24):\n    '''\n    \n    '''\n    threshold = time.time() - hours * 60 * 60\n    for root, dirs, files in salt.utils.files.safe_walk(os.path.join(__opts__['cachedir'], 'minion_jobs'),\n                                                  followlinks=False):\n        for name in dirs:\n            try:\n                directory = os.path.join(root, name)\n                mtime = os.path.getmtime(directory)\n                if mtime < threshold:\n                    shutil.rmtree(directory)\n            except OSError as exc:\n                log.error('Attempt to clear cache with saltutil.clear_job_cache FAILED with: %s', exc)\n                return False\n    return True", "output": "Forcibly removes job cache folders and files on a minion.\n\n    .. versionadded:: 2018.3.0\n\n    WARNING: The safest way to clear a minion cache is by first stopping\n    the minion and then deleting the cache files before restarting it.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.clear_job_cache hours=12", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def can_user_run(self, user, command, groups):\n        '''\n        \n\n        '''\n        log.info('%s wants to run %s with groups %s', user, command, groups)\n        for key, val in groups.items():\n            if user not in val['users']:\n                if '*' not in val['users']:\n                    continue  # this doesn't grant permissions, pass\n            if (command not in val['commands']) and (command not in val.get('aliases', {}).keys()):\n                if '*' not in val['commands']:\n                    continue  # again, pass\n            log.info('Slack user %s permitted to run %s', user, command)\n            return (key, val,)  # matched this group, return the group\n        log.info('Slack user %s denied trying to run %s', user, command)\n        return ()", "output": "Break out the permissions into the following:\n\n        Check whether a user is in any group, including whether a group has the '*' membership\n\n        :type user: str\n        :param user: The username being checked against\n\n        :type command: str\n        :param command: The command that is being invoked (e.g. test.ping)\n\n        :type groups: dict\n        :param groups: the dictionary with groups permissions structure.\n\n        :rtype: tuple\n        :returns: On a successful permitting match, returns 2-element tuple that contains\n            the name of the group that successfully matched, and a dictionary containing\n            the configuration of the group so it can be referenced.\n\n            On failure it returns an empty tuple", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_range_vector(size: int, device: int) -> torch.Tensor:\n    \"\"\"\n    \n    \"\"\"\n    if device > -1:\n        return torch.cuda.LongTensor(size, device=device).fill_(1).cumsum(0) - 1\n    else:\n        return torch.arange(0, size, dtype=torch.long)", "output": "Returns a range vector with the desired size, starting at 0. The CUDA implementation\n    is meant to avoid copy data from CPU to GPU.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_mirrors(config_path=_DEFAULT_CONFIG_PATH):\n    '''\n    \n    '''\n    _validate_config(config_path)\n\n    cmd = ['mirror', 'list', '-config={}'.format(config_path), '-raw=true']\n\n    cmd_ret = _cmd_run(cmd)\n    ret = [line.strip() for line in cmd_ret.splitlines()]\n\n    log.debug('Found mirrors: %s', len(ret))\n    return ret", "output": "Get a list of all the mirrored remote repositories.\n\n    :param str config_path: The path to the configuration file for the aptly instance.\n\n    :return: A list of the mirror names.\n    :rtype: list\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' aptly.list_mirrors", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def infer(self, setup: QuaRelType, answer_0: QuaRelType, answer_1: QuaRelType) -> int:\n        \"\"\"\n        \n        \"\"\"\n        if self._check_quarels_compatible(setup, answer_0):\n            if self._check_quarels_compatible(setup, answer_1):\n                # Found two answers\n                return -2\n            else:\n                return 0\n        elif self._check_quarels_compatible(setup, answer_1):\n            return 1\n        else:\n            return -1", "output": "Take the question and check if it is compatible with either of the answer choices.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def decompress_decoder_1d(x, hparams, name=None):\n  \"\"\"\n  \"\"\"\n  x = tf.expand_dims(x, axis=2)\n  output = decompress_decoder(x, hparams,\n                              strides=(2, 1),\n                              kernel=(hparams.kernel_size, 1),\n                              name=name)\n  return tf.squeeze(output, axis=2)", "output": "Decoder that decompresses 1-D inputs by 2**num_compress_steps.\n\n  Args:\n    x: Tensor of shape [batch, compress_length, channels].\n    hparams: HParams.\n    name: string, variable scope.\n\n  Returns:\n    Tensor of shape [batch, length, hparams.hidden_size].", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def handle_market_open(self, session_label, data_portal):\n        \"\"\"\n        \"\"\"\n        ledger = self._ledger\n        ledger.start_of_session(session_label)\n\n        adjustment_reader = data_portal.adjustment_reader\n        if adjustment_reader is not None:\n            # this is None when running with a dataframe source\n            ledger.process_dividends(\n                session_label,\n                self._asset_finder,\n                adjustment_reader,\n            )\n\n        self._current_session = session_label\n\n        cal = self._trading_calendar\n        self._market_open, self._market_close = self._execution_open_and_close(\n            cal,\n            session_label,\n        )\n\n        self.start_of_session(ledger, session_label, data_portal)", "output": "Handles the start of each session.\n\n        Parameters\n        ----------\n        session_label : Timestamp\n            The label of the session that is about to begin.\n        data_portal : DataPortal\n            The current data portal.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_request(self, request):\n        \"\"\"\n        \"\"\"\n        cookies = request.cookies or {}\n\n        # Bootstrap CookieJar.\n        if not isinstance(cookies, cookielib.CookieJar):\n            cookies = cookiejar_from_dict(cookies)\n\n        # Merge with session cookies\n        merged_cookies = merge_cookies(\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\n\n        # Set environment's basic authentication if not explicitly set.\n        auth = request.auth\n        if self.trust_env and not auth and not self.auth:\n            auth = get_netrc_auth(request.url)\n\n        p = PreparedRequest()\n        p.prepare(\n            method=request.method.upper(),\n            url=request.url,\n            files=request.files,\n            data=request.data,\n            json=request.json,\n            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n            params=merge_setting(request.params, self.params),\n            auth=merge_setting(auth, self.auth),\n            cookies=merged_cookies,\n            hooks=merge_hooks(request.hooks, self.hooks),\n        )\n        return p", "output": "Constructs a :class:`PreparedRequest <PreparedRequest>` for\n        transmission and returns it. The :class:`PreparedRequest` has settings\n        merged from the :class:`Request <Request>` instance and those of the\n        :class:`Session`.\n\n        :param request: :class:`Request` instance to prepare with this\n            session's settings.\n        :rtype: requests.PreparedRequest", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_network_settings():\n    '''\n    \n    '''\n    if __grains__['lsb_distrib_id'] == 'nilrt':\n        raise salt.exceptions.CommandExecutionError('Not supported in this version.')\n    settings = []\n    networking = 'no' if _get_state() == 'offline' else 'yes'\n    settings.append('networking={0}'.format(networking))\n    hostname = __salt__['network.get_hostname']\n    settings.append('hostname={0}'.format(hostname))\n    return settings", "output": "Return the contents of the global network script.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ip.get_network_settings", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _passwd_opts(self):\n        '''\n        \n        '''\n        # TODO ControlMaster does not work without ControlPath\n        # user could take advantage of it if they set ControlPath in their\n        # ssh config.  Also, ControlPersist not widely available.\n        options = ['ControlMaster=auto',\n                   'StrictHostKeyChecking=no',\n                   ]\n        if self.opts['_ssh_version'] > (4, 9):\n            options.append('GSSAPIAuthentication=no')\n        options.append('ConnectTimeout={0}'.format(self.timeout))\n        if self.opts.get('ignore_host_keys'):\n            options.append('StrictHostKeyChecking=no')\n        if self.opts.get('no_host_keys'):\n            options.extend(['StrictHostKeyChecking=no',\n                            'UserKnownHostsFile=/dev/null'])\n\n        if self.passwd:\n            options.extend(['PasswordAuthentication=yes',\n                            'PubkeyAuthentication=yes'])\n        else:\n            options.extend(['PasswordAuthentication=no',\n                            'PubkeyAuthentication=yes',\n                            'KbdInteractiveAuthentication=no',\n                            'ChallengeResponseAuthentication=no',\n                            'BatchMode=yes'])\n        if self.port:\n            options.append('Port={0}'.format(self.port))\n        if self.user:\n            options.append('User={0}'.format(self.user))\n        if self.identities_only:\n            options.append('IdentitiesOnly=yes')\n\n        ret = []\n        for option in options:\n            ret.append('-o {0} '.format(option))\n        return ''.join(ret)", "output": "Return options to pass to ssh", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def render_as_text(self, limit=None):\n        \"\"\"\"\"\"\n        lines = traceback.format_exception(self.exc_type, self.exc_value,\n                                           self.frames[0], limit=limit)\n        return ''.join(lines).rstrip()", "output": "Return a string with the traceback.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_backward_begin(self, smooth_loss:Tensor, **kwargs:Any)->None:\n        \"\"\n        self.losses.append(smooth_loss)\n        if self.pbar is not None and hasattr(self.pbar,'child'):\n            self.pbar.child.comment = f'{smooth_loss:.4f}'", "output": "Record the loss before any other callback has a chance to modify it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_checkout_target(self):\n        '''\n        \n        '''\n        if self.role == 'git_pillar' and self.branch == '__env__':\n            try:\n                return self.all_saltenvs\n            except AttributeError:\n                # all_saltenvs not configured for this remote\n                pass\n            target = self.opts.get('pillarenv') \\\n                or self.opts.get('saltenv') \\\n                or 'base'\n            return self.base \\\n                if target == 'base' \\\n                else six.text_type(target)\n        return self.branch", "output": "Resolve dynamically-set branch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        \"\"\"\n        \"\"\"\n        _logger.info('Start dispatcher')\n        if dispatcher_env_vars.NNI_MODE == 'resume':\n            self.load_checkpoint()\n\n        while True:\n            command, data = receive()\n            if data:\n                data = json_tricks.loads(data)\n\n            if command is None or command is CommandType.Terminate:\n                break\n            if multi_thread_enabled():\n                result = self.pool.map_async(self.process_command_thread, [(command, data)])\n                self.thread_results.append(result)\n                if any([thread_result.ready() and not thread_result.successful() for thread_result in self.thread_results]):\n                    _logger.debug('Caught thread exception')\n                    break\n            else:\n                self.enqueue_command(command, data)\n                if self.worker_exceptions:\n                    break\n\n        _logger.info('Dispatcher exiting...')\n        self.stopping = True\n        if multi_thread_enabled():\n            self.pool.close()\n            self.pool.join()\n        else:\n            self.default_worker.join()\n            self.assessor_worker.join()\n\n        _logger.info('Terminated by NNI manager')", "output": "Run the tuner.\n        This function will never return unless raise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def evaluate_regressor(model, data, target=\"target\", verbose=False):\n    \"\"\"\n    \n    \"\"\"\n    model = _get_model(model)\n\n    if verbose:\n        print(\"\")\n        print(\"Other Framework\\t\\tPredicted\\t\\tDelta\")\n\n    max_error = 0\n    error_squared = 0\n\n    for index,row in data.iterrows():\n        predicted = model.predict(dict(row))[_to_unicode(target)]\n        other_framework = row[\"prediction\"]\n        delta = predicted - other_framework\n\n        if verbose:\n            print(\"%s\\t\\t\\t\\t%s\\t\\t\\t%0.4f\" % (other_framework, predicted, delta))\n\n        max_error = max(abs(delta), max_error)\n        error_squared = error_squared + (delta * delta)\n\n    ret = {\n        \"samples\": len(data),\n        \"rmse\": _math.sqrt(error_squared / len(data)),\n        \"max_error\": max_error\n    }\n\n    if verbose:\n        print(\"results: %s\" % ret)\n    return ret", "output": "Evaluate a CoreML regression model and compare against predictions\n    from the original framework (for testing correctness of conversion)\n\n    Parameters\n    ----------\n    filename: [str | MLModel]\n        File path from which to load the MLModel from (OR) a loaded version of\n        MLModel.\n\n    data: [str | Dataframe]\n        Test data on which to evaluate the models (dataframe,\n        or path to a .csv file).\n\n    target: str\n       Name of the column in the dataframe that must be interpreted\n       as the target column.\n\n    verbose: bool\n       Set to true for a more verbose output.\n\n    See Also\n    --------\n    evaluate_classifier\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> metrics = coremltools.utils.evaluate_regressor(spec, 'data_and_predictions.csv', 'target')\n        >>> print(metrics)\n        {\"samples\": 10, \"rmse\": 0.0, max_error: 0.0}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_weight(name, backend, socket=DEFAULT_SOCKET_URL):\n    '''\n    \n    '''\n    ha_conn = _get_conn(socket)\n    ha_cmd = haproxy.cmds.getWeight(server=name, backend=backend)\n    return ha_conn.sendCmd(ha_cmd)", "output": "Get server weight\n\n    name\n        Server name\n\n    backend\n        haproxy backend\n\n    socket\n        haproxy stats socket, default ``/var/run/haproxy.sock``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' haproxy.get_weight web1.example.com www", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def super(self):\n        \"\"\"\"\"\"\n        if self._depth + 1 >= len(self._stack):\n            return self._context.environment. \\\n                undefined('there is no parent block called %r.' %\n                          self.name, name='super')\n        return BlockReference(self.name, self._context, self._stack,\n                              self._depth + 1)", "output": "Super the block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reader(self, name, stream, outbuf):\n        \"\"\"\n        \n        \"\"\"\n        while True:\n            s = stream.readline()\n            if not s:\n                break\n            s = s.decode('utf-8').rstrip()\n            outbuf.append(s)\n            logger.debug('%s: %s' % (name, s))\n        stream.close()", "output": "Thread runner for reading lines of from a subprocess into a buffer.\n\n        :param name: The logical name of the stream (used for logging only).\n        :param stream: The stream to read from. This will typically a pipe\n                       connected to the output stream of a subprocess.\n        :param outbuf: The list to append the read lines to.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sparse_series_to_coo(ss, row_levels=(0, ), column_levels=(1, ),\n                          sort_labels=False):\n    \"\"\"\n    \n    \"\"\"\n\n    import scipy.sparse\n\n    if ss.index.nlevels < 2:\n        raise ValueError('to_coo requires MultiIndex with nlevels > 2')\n    if not ss.index.is_unique:\n        raise ValueError('Duplicate index entries are not allowed in to_coo '\n                         'transformation.')\n\n    # to keep things simple, only rely on integer indexing (not labels)\n    row_levels = [ss.index._get_level_number(x) for x in row_levels]\n    column_levels = [ss.index._get_level_number(x) for x in column_levels]\n\n    v, i, j, rows, columns = _to_ijv(ss, row_levels=row_levels,\n                                     column_levels=column_levels,\n                                     sort_labels=sort_labels)\n    sparse_matrix = scipy.sparse.coo_matrix(\n        (v, (i, j)), shape=(len(rows), len(columns)))\n    return sparse_matrix, rows, columns", "output": "Convert a SparseSeries to a scipy.sparse.coo_matrix using index\n    levels row_levels, column_levels as the row and column\n    labels respectively. Returns the sparse_matrix, row and column labels.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hash_tuples(vals, encoding='utf8', hash_key=None):\n    \"\"\"\n    \n    \"\"\"\n    is_tuple = False\n    if isinstance(vals, tuple):\n        vals = [vals]\n        is_tuple = True\n    elif not is_list_like(vals):\n        raise TypeError(\"must be convertible to a list-of-tuples\")\n\n    from pandas import Categorical, MultiIndex\n\n    if not isinstance(vals, ABCMultiIndex):\n        vals = MultiIndex.from_tuples(vals)\n\n    # create a list-of-Categoricals\n    vals = [Categorical(vals.codes[level],\n                        vals.levels[level],\n                        ordered=False,\n                        fastpath=True)\n            for level in range(vals.nlevels)]\n\n    # hash the list-of-ndarrays\n    hashes = (_hash_categorical(cat,\n                                encoding=encoding,\n                                hash_key=hash_key)\n              for cat in vals)\n    h = _combine_hash_arrays(hashes, len(vals))\n    if is_tuple:\n        h = h[0]\n\n    return h", "output": "Hash an MultiIndex / list-of-tuples efficiently\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    vals : MultiIndex, list-of-tuples, or single tuple\n    encoding : string, default 'utf8'\n    hash_key : string key to encode, default to _default_hash_key\n\n    Returns\n    -------\n    ndarray of hashed values array", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_backward_begin(self, last_loss, last_output, **kwargs):\n        \"\"\n        last_loss = last_loss.detach().cpu()\n        if self.gen_mode:\n            self.smoothenerG.add_value(last_loss)\n            self.glosses.append(self.smoothenerG.smooth)\n            self.last_gen = last_output.detach().cpu()\n        else:\n            self.smoothenerC.add_value(last_loss)\n            self.closses.append(self.smoothenerC.smooth)", "output": "Record `last_loss` in the proper list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_from(self, parent_path):\n        \"\"\"\"\"\"\n        path_cls = type(parent_path)\n        is_dir = path_cls.is_dir\n        exists = path_cls.exists\n        scandir = parent_path._accessor.scandir\n        if not is_dir(parent_path):\n            return iter([])\n        return self._select_from(parent_path, is_dir, exists, scandir)", "output": "Iterate over all child paths of `parent_path` matched by this\n        selector.  This can contain parent_path itself.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        '''\n        \n        '''\n        import salt.runner\n        self.parse_args()\n\n        # Setup file logging!\n        self.setup_logfile_logger()\n        verify_log(self.config)\n        profiling_enabled = self.options.profiling_enabled\n\n        runner = salt.runner.Runner(self.config)\n        if self.options.doc:\n            runner.print_docs()\n            self.exit(salt.defaults.exitcodes.EX_OK)\n\n        # Run this here so SystemExit isn't raised anywhere else when\n        # someone tries to use the runners via the python API\n        try:\n            if check_user(self.config['user']):\n                pr = salt.utils.profile.activate_profile(profiling_enabled)\n                try:\n                    ret = runner.run()\n                    # In older versions ret['data']['retcode'] was used\n                    # for signaling the return code. This has been\n                    # changed for the orchestrate runner, but external\n                    # runners might still use it. For this reason, we\n                    # also check ret['data']['retcode'] if\n                    # ret['retcode'] is not available.\n                    if isinstance(ret, dict) and 'retcode' in ret:\n                        self.exit(ret['retcode'])\n                    elif isinstance(ret, dict) and 'retcode' in ret.get('data', {}):\n                        self.exit(ret['data']['retcode'])\n                finally:\n                    salt.utils.profile.output_profile(\n                        pr,\n                        stats_path=self.options.profiling_path,\n                        stop=True)\n\n        except SaltClientError as exc:\n            raise SystemExit(six.text_type(exc))", "output": "Execute salt-run", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cond_latents_at_level(cond_latents, level, hparams):\n  \"\"\"\"\"\"\n  if cond_latents:\n    if hparams.latent_dist_encoder in [\"conv_net\", \"conv3d_net\"]:\n      return [cond_latent[level] for cond_latent in cond_latents]\n    elif hparams.latent_dist_encoder in [\"pointwise\", \"conv_lstm\"]:\n      return cond_latents[level]", "output": "Returns a single or list of conditional latents at level 'level'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def posix_rename(self, oldpath, newpath):\n        \"\"\"\n        \n        \"\"\"\n        oldpath = self._adjust_cwd(oldpath)\n        newpath = self._adjust_cwd(newpath)\n        self._log(DEBUG, \"posix_rename({!r}, {!r})\".format(oldpath, newpath))\n        self._request(\n            CMD_EXTENDED, \"posix-rename@openssh.com\", oldpath, newpath\n        )", "output": "Rename a file or folder from ``oldpath`` to ``newpath``, following\n        posix conventions.\n\n        :param str oldpath: existing name of the file or folder\n        :param str newpath: new name for the file or folder, will be\n            overwritten if it already exists\n\n        :raises:\n            ``IOError`` -- if ``newpath`` is a folder, posix-rename is not\n            supported by the server or something else goes wrong\n\n        :versionadded: 2.2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def assign_default_storage_policy_to_datastore(policy, datastore,\n                                               service_instance=None):\n    '''\n    \n    '''\n    log.trace('Assigning policy %s to datastore %s', policy, datastore)\n    profile_manager = salt.utils.pbm.get_profile_manager(service_instance)\n    # Find policy\n    policies = salt.utils.pbm.get_storage_policies(profile_manager, [policy])\n    if not policies:\n        raise VMwareObjectRetrievalError('Policy \\'{0}\\' was not found'\n                                         ''.format(policy))\n    policy_ref = policies[0]\n    # Find datastore\n    target_ref = _get_proxy_target(service_instance)\n    ds_refs = salt.utils.vmware.get_datastores(service_instance, target_ref,\n                                               datastore_names=[datastore])\n    if not ds_refs:\n        raise VMwareObjectRetrievalError('Datastore \\'{0}\\' was not '\n                                         'found'.format(datastore))\n    ds_ref = ds_refs[0]\n    salt.utils.pbm.assign_default_storage_policy_to_datastore(\n        profile_manager, policy_ref, ds_ref)\n    return True", "output": "Assigns a storage policy as the default policy to a datastore.\n\n    policy\n        Name of the policy to assign.\n\n    datastore\n        Name of the datastore to assign.\n        The datastore needs to be visible to the VMware entity the proxy\n        points to.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.assign_storage_policy_to_datastore\n            policy='policy name' datastore=ds1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def connect_host(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The connect_host function must be called with '\n            '-f or --function.'\n        )\n\n    host_name = kwargs.get('host') if kwargs and 'host' in kwargs else None\n\n    if not host_name:\n        raise SaltCloudSystemExit(\n            'You must specify name of the host system.'\n        )\n\n    # Get the service instance\n    si = _get_si()\n\n    host_ref = salt.utils.vmware.get_mor_by_property(si, vim.HostSystem, host_name)\n    if not host_ref:\n        raise SaltCloudSystemExit(\n            'Specified host system does not exist.'\n        )\n\n    if host_ref.runtime.connectionState == 'connected':\n        return {host_name: 'host system already connected'}\n\n    try:\n        task = host_ref.ReconnectHost_Task()\n        salt.utils.vmware.wait_for_task(task, host_name, 'connect host', 5, 'info')\n    except Exception as exc:\n        log.error(\n            'Error while connecting host %s: %s',\n            host_name, exc,\n            # Show the traceback if the debug logging level is enabled\n            exc_info_on_loglevel=logging.DEBUG\n        )\n        return {host_name: 'failed to connect host'}\n\n    return {host_name: 'connected host'}", "output": "Connect the specified host system in this VMware environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f connect_host my-vmware-config host=\"myHostSystemName\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_environment(self, environ):\n        \"\"\"\"\"\"\n        if environ:\n            q_environ = self._process.processEnvironment()\n            for k, v in environ.items():\n                q_environ.insert(k, v)\n            self._process.setProcessEnvironment(q_environ)", "output": "Set the environment on the QProcess.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_comparison_method(cls, op):\n        \"\"\"\n        \n        \"\"\"\n        def wrapper(self, other):\n            if isinstance(other, ABCSeries):\n                # the arrays defer to Series for comparison ops but the indexes\n                #  don't, so we have to unwrap here.\n                other = other._values\n\n            result = op(self._data, maybe_unwrap_index(other))\n            return result\n\n        wrapper.__doc__ = op.__doc__\n        wrapper.__name__ = '__{}__'.format(op.__name__)\n        return wrapper", "output": "Create a comparison method that dispatches to ``cls.values``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start(name, quiet=False, path=None):\n    '''\n    \n    '''\n    data = _do_names(name, 'start', path=path)\n    if data and not quiet:\n        __jid_event__.fire_event(\n            {'data': data, 'outputter': 'lxc_start'}, 'progress')\n    return data", "output": "Start the named container.\n\n    path\n        path to the container parent\n        default: /var/lib/lxc (system default)\n\n        .. versionadded:: 2015.8.0\n\n    .. code-block:: bash\n\n        salt-run lxc.start name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bleu_wrapper(ref_filename, hyp_filename, case_sensitive=False):\n  \"\"\"\"\"\"\n  ref_lines = text_encoder.native_to_unicode(\n      tf.gfile.Open(ref_filename, \"r\").read()).split(\"\\n\")\n  hyp_lines = text_encoder.native_to_unicode(\n      tf.gfile.Open(hyp_filename, \"r\").read()).split(\"\\n\")\n  assert len(ref_lines) == len(hyp_lines), (\"{} != {}\".format(\n      len(ref_lines), len(hyp_lines)))\n  if not case_sensitive:\n    ref_lines = [x.lower() for x in ref_lines]\n    hyp_lines = [x.lower() for x in hyp_lines]\n  ref_tokens = [bleu_tokenize(x) for x in ref_lines]\n  hyp_tokens = [bleu_tokenize(x) for x in hyp_lines]\n  return compute_bleu(ref_tokens, hyp_tokens)", "output": "Compute BLEU for two files (reference and hypothesis translation).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next_checkpoint(model_dir, timeout_mins=240):\n  \"\"\"\n  \"\"\"\n  last_ckpt = None\n  timeout_secs = None\n  if timeout_mins != -1:\n    timeout_secs = timeout_mins * 60\n  while True:\n    last_ckpt = tf.contrib.training.wait_for_new_checkpoint(\n        model_dir, last_ckpt, seconds_to_sleep=60, timeout=timeout_secs)\n\n    if last_ckpt is None:\n      tf.logging.info(\n          \"Eval timeout: no new checkpoints within %dm\" % timeout_mins)\n      break\n\n    yield last_ckpt", "output": "Yields successive checkpoints from model_dir.\n\n  Args:\n    model_dir: The directory in which checkpoints are saved.\n    timeout_mins: The maximum amount of time in minutes to wait\n                  between checkpoints. Set this to -1 to wait indefinitely.\n  Yields:\n    last_ckpt: a new checkpoint path, or None if the timeout was reached.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_dns(ip, interface='Local Area Connection', index=1):\n    '''\n    \n    '''\n    servers = get_dns_servers(interface)\n\n    # Return False if could not find the interface\n    if servers is False:\n        return False\n\n    # Return true if configured\n    try:\n        if servers[index - 1] == ip:\n            return True\n    except IndexError:\n        pass\n\n    # If configured in the wrong order delete it\n    if ip in servers:\n        rm_dns(ip, interface)\n\n    cmd = ['netsh', 'interface', 'ip', 'add', 'dns',\n           interface, ip, 'index={0}'.format(index), 'validate=no']\n\n    return __salt__['cmd.retcode'](cmd, python_shell=False) == 0", "output": "Add the DNS server to the network interface\n    (index starts from 1)\n\n    Note: if the interface DNS is configured by DHCP, all the DNS servers will\n    be removed from the interface and the requested DNS will be the only one\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_dns_client.add_dns <ip> <interface> <index>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_states(self, states):\n        \"\"\"\"\"\"\n        states = pickle.loads(states)\n        if isinstance(states, tuple) and len(states) == 2:\n            self.states, self.optimizer = states\n        else:\n            self.states = states\n        self.states_synced = dict.fromkeys(self.states.keys(), False)", "output": "Sets updater states.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_nested_object(obj):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if isinstance(obj, ABCSeries) and is_object_dtype(obj):\n\n        if any(isinstance(v, ABCSeries) for v in obj.values):\n            return True\n\n    return False", "output": "return a boolean if we have a nested object, e.g. a Series with 1 or\n    more Series elements\n\n    This may not be necessarily be performant.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def group(self, *args, **kwargs):\n        \"\"\"\n        \"\"\"\n        def decorator(f):\n            cmd = group(*args, **kwargs)(f)\n            self.add_command(cmd)\n            return cmd\n        return decorator", "output": "A shortcut decorator for declaring and attaching a group to\n        the group.  This takes the same arguments as :func:`group` but\n        immediately registers the created command with this instance by\n        calling into :meth:`add_command`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_mixed_type_key(obj):\n    \"\"\"\n\n    \"\"\"\n    if isinstance(obj, _BaseNetwork):\n        return obj._get_networks_key()\n    elif isinstance(obj, _BaseAddress):\n        return obj._get_address_key()\n    return NotImplemented", "output": "Return a key suitable for sorting between networks and addresses.\n\n    Address and Network objects are not sortable by default; they're\n    fundamentally different so the expression\n\n        IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')\n\n    doesn't make any sense.  There are some times however, where you may wish\n    to have ipaddress sort these for you anyway. If you need to do this, you\n    can use this function as the key= argument to sorted().\n\n    Args:\n      obj: either a Network or Address object.\n    Returns:\n      appropriate key.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reverse_url(self, name: str, *args: Any) -> str:\n        \"\"\"\"\"\"\n        return self.application.reverse_url(name, *args)", "output": "Alias for `Application.reverse_url`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resume(profile_process='worker'):\n    \"\"\"\n    \n    \"\"\"\n    profile_process2int = {'worker': 0, 'server': 1}\n    check_call(_LIB.MXProcessProfilePause(int(0),\n                                          profile_process2int[profile_process],\n                                          profiler_kvstore_handle))", "output": "Resume paused profiling.\n\n    Parameters\n    ----------\n    profile_process : string\n        whether to profile kvstore `server` or `worker`.\n        server can only be profiled when kvstore is of type dist.\n        if this is not passed, defaults to `worker`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def trading_pnl(self):\n        \"\"\"\n        \n        \"\"\"\n        last_price = self._data_proxy.get_last_price(self._order_book_id)\n        return self._contract_multiplier * (self._trade_quantity * last_price - self._trade_cost)", "output": "[float] \u4ea4\u6613\u76c8\u4e8f\uff0c\u7b56\u7565\u5728\u5f53\u524d\u4ea4\u6613\u65e5\u4ea7\u751f\u7684\u76c8\u4e8f\u4e2d\u6765\u6e90\u4e8e\u5f53\u65e5\u6210\u4ea4\u7684\u90e8\u5206", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_argument(self, dest, nargs=1, obj=None):\n        \"\"\"\n        \"\"\"\n        if obj is None:\n            obj = dest\n        self._args.append(Argument(dest=dest, nargs=nargs, obj=obj))", "output": "Adds a positional argument named `dest` to the parser.\n\n        The `obj` can be used to identify the option in the order list\n        that is returned from the parser.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map_column(self, value):\n        \"\"\"\n        \n        \"\"\"\n        if value in self.null_values:\n            return r'\\\\N'\n        else:\n            return default_escape(six.text_type(value))", "output": "Applied to each column of every row returned by `rows`.\n\n        Default behaviour is to escape special characters and identify any self.null_values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def edit(self, *, reason=None, **options):\n        \"\"\"\n        \"\"\"\n\n        try:\n            position = options.pop('position')\n        except KeyError:\n            pass\n        else:\n            await self._move(position, reason=reason)\n            self.position = position\n\n        if options:\n            data = await self._state.http.edit_channel(self.id, reason=reason, **options)\n            self._update(self.guild, data)", "output": "|coro|\n\n        Edits the channel.\n\n        You must have the :attr:`~Permissions.manage_channels` permission to\n        use this.\n\n        Parameters\n        ----------\n        name: :class:`str`\n            The new category's name.\n        position: :class:`int`\n            The new category's position.\n        nsfw: :class:`bool`\n            To mark the category as NSFW or not.\n        reason: Optional[:class:`str`]\n            The reason for editing this category. Shows up on the audit log.\n\n        Raises\n        ------\n        InvalidArgument\n            If position is less than 0 or greater than the number of categories.\n        Forbidden\n            You do not have permissions to edit the category.\n        HTTPException\n            Editing the category failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_positional_embedding(x, max_length, name=None, positions=None):\n  \"\"\"\n  \"\"\"\n  with tf.name_scope(\"add_positional_embedding\"):\n    _, length, depth = common_layers.shape_list(x)\n    var = tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)\n    if positions is None:\n      pad_length = tf.maximum(0, length - max_length)\n      sliced = tf.cond(\n          tf.less(length, max_length),\n          lambda: tf.slice(var, [0, 0], [length, -1]),\n          lambda: tf.pad(var, [[0, pad_length], [0, 0]]))\n      return x + tf.expand_dims(sliced, 0)\n    else:\n      return x + tf.gather(var, tf.to_int32(positions))", "output": "Adds positional embedding.\n\n  Args:\n    x: Tensor with shape [batch, length, depth].\n    max_length: int representing static maximum size of any dimension.\n    name: str representing name of the embedding tf.Variable.\n    positions: Tensor with shape [batch, length].\n\n  Returns:\n    Tensor of same shape as x.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def multinomial_sample(x, vocab_size=None, sampling_method=\"random\",\n                       temperature=1.0):\n  \"\"\"\n  \"\"\"\n  vocab_size = vocab_size or common_layers.shape_list(x)[-1]\n  if sampling_method == \"random\" and temperature > 0.0:\n    samples = tf.multinomial(tf.reshape(x, [-1, vocab_size]) / temperature, 1)\n  else:\n    samples = tf.argmax(x, axis=-1)\n  reshaped_samples = tf.reshape(samples, common_layers.shape_list(x)[:-1])\n  return reshaped_samples", "output": "Multinomial sampling from a n-dimensional tensor.\n\n  Args:\n    x: Tensor of shape [..., vocab_size]. Parameterizes logits of multinomial.\n    vocab_size: Number of classes in multinomial distribution.\n    sampling_method: String, \"random\" or otherwise deterministic.\n    temperature: Positive float.\n\n  Returns:\n    Tensor of shape [...].", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def aligned_umap(activations, umap_options={}, normalize=True, verbose=False):\n    \"\"\"\"\"\"\n\n    umap_defaults = dict(\n        n_components=2, n_neighbors=50, min_dist=0.05, verbose=verbose, metric=\"cosine\"\n    )\n    umap_defaults.update(umap_options)\n\n    # if passed a list of activations, we combine them and later split the layouts\n    if type(activations) is list or type(activations) is tuple:\n        num_activation_groups = len(activations)\n        combined_activations = np.concatenate(activations)\n    else:\n        num_activation_groups = 1\n        combined_activations = activations\n    try:\n        layout = UMAP(**umap_defaults).fit_transform(combined_activations)\n    except (RecursionError, SystemError) as exception:\n        log.error(\"UMAP failed to fit these activations. We're not yet sure why this sometimes occurs.\")\n        raise ValueError(\"UMAP failed to fit activations: %s\", exception)\n\n    if normalize:\n        layout = normalize_layout(layout)\n\n    if num_activation_groups > 1:\n        layouts = np.split(layout, num_activation_groups, axis=0)\n        return layouts\n    else:\n        return layout", "output": "`activations` can be a list of ndarrays. In that case a list of layouts is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_cached_response(self, request, response):\n        \"\"\"\n        \"\"\"\n        cache_url = self.cache_url(request.url)\n\n        cached_response = self.serializer.loads(request, self.cache.get(cache_url))\n\n        if not cached_response:\n            # we didn't have a cached response\n            return response\n\n        # Lets update our headers with the headers from the new request:\n        # http://tools.ietf.org/html/draft-ietf-httpbis-p4-conditional-26#section-4.1\n        #\n        # The server isn't supposed to send headers that would make\n        # the cached body invalid. But... just in case, we'll be sure\n        # to strip out ones we know that might be problmatic due to\n        # typical assumptions.\n        excluded_headers = [\"content-length\"]\n\n        cached_response.headers.update(\n            dict(\n                (k, v)\n                for k, v in response.headers.items()\n                if k.lower() not in excluded_headers\n            )\n        )\n\n        # we want a 200 b/c we have content via the cache\n        cached_response.status = 200\n\n        # update our cache\n        self.cache.set(cache_url, self.serializer.dumps(request, cached_response))\n\n        return cached_response", "output": "On a 304 we will get a new set of headers that we want to\n        update our cached value with, assuming we have one.\n\n        This should only ever be called when we've sent an ETag and\n        gotten a 304 as the response.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_dups(head):\n    \"\"\"\n    \n    \"\"\"\n    hashset = set()\n    prev = Node()\n    while head:\n        if head.val in hashset:\n            prev.next = head.next\n        else:\n            hashset.add(head.val)\n            prev = head\n        head = head.next", "output": "Time Complexity: O(N)\n    Space Complexity: O(N)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unpause_trial(self, trial):\n        \"\"\"\"\"\"\n        assert trial.status == Trial.PAUSED, trial.status\n        self.set_status(trial, Trial.PENDING)", "output": "Sets PAUSED trial to pending to allow scheduler to start.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_history(self, directory):\r\n        \"\"\"\"\"\"\r\n        try:\r\n            directory = osp.abspath(to_text_string(directory))\r\n            if directory in self.history:\r\n                self.histindex = self.history.index(directory)\r\n        except Exception:\r\n            user_directory = get_home_dir()\r\n            self.chdir(directory=user_directory, browsing_history=True)", "output": "Update browse history", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(cont=None, path=None, local_file=None, return_bin=False, profile=None):\n    '''\n    \n\n    '''\n    swift_conn = _auth(profile)\n\n    if cont is None:\n        return swift_conn.get_account()\n\n    if path is None:\n        return swift_conn.get_container(cont)\n\n    if return_bin is True:\n        return swift_conn.get_object(cont, path, return_bin)\n\n    if local_file is not None:\n        return swift_conn.get_object(cont, path, local_file)\n\n    return False", "output": "List the contents of a container, or return an object from a container. Set\n    return_bin to True in order to retrieve an object wholesale. Otherwise,\n    Salt will attempt to parse an XML response.\n\n    CLI Example to list containers:\n\n    .. code-block:: bash\n\n        salt myminion swift.get\n\n    CLI Example to list the contents of a container:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer\n\n    CLI Example to return the binary contents of an object:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer myfile.png return_bin=True\n\n    CLI Example to save the binary contents of an object to a local file:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer myfile.png local_file=/tmp/myfile.png", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def server_delete(s_name, **connection_args):\n    '''\n    \n    '''\n    ret = True\n    server = _server_get(s_name, **connection_args)\n    if server is None:\n        return False\n    nitro = _connect(**connection_args)\n    if nitro is None:\n        return False\n    try:\n        NSServer.delete(nitro, server)\n    except NSNitroError as error:\n        log.debug('netscaler module error - NSServer.delete() failed: %s', error)\n        ret = False\n    _disconnect(nitro)\n    return ret", "output": "Delete a server\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' netscaler.server_delete 'serverName'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mapPartitions(self, f, preservesPartitioning=False):\n        \"\"\"\n        \n        \"\"\"\n        def func(s, iterator):\n            return f(iterator)\n        return self.mapPartitionsWithIndex(func, preservesPartitioning)", "output": "Return a new RDD by applying a function to each partition of this RDD.\n\n        >>> rdd = sc.parallelize([1, 2, 3, 4], 2)\n        >>> def f(iterator): yield sum(iterator)\n        >>> rdd.mapPartitions(f).collect()\n        [3, 7]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unread_data(self, data: bytes) -> None:\n        \"\"\" \n        \"\"\"\n        warnings.warn(\"unread_data() is deprecated \"\n                      \"and will be removed in future releases (#3260)\",\n                      DeprecationWarning,\n                      stacklevel=2)\n        if not data:\n            return\n\n        if self._buffer_offset:\n            self._buffer[0] = self._buffer[0][self._buffer_offset:]\n            self._buffer_offset = 0\n        self._size += len(data)\n        self._cursor -= len(data)\n        self._buffer.appendleft(data)\n        self._eof_counter = 0", "output": "rollback reading some data from stream, inserting it to buffer head.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main(argv=None):\n  \"\"\"\n  \n  \"\"\"\n  try:\n    _name_of_script, filepath = argv\n  except ValueError:\n    raise ValueError(argv)\n  print_accuracies(filepath=filepath, test_start=FLAGS.test_start,\n                   test_end=FLAGS.test_end, which_set=FLAGS.which_set,\n                   nb_iter=FLAGS.nb_iter, base_eps_iter=FLAGS.base_eps_iter,\n                   batch_size=FLAGS.batch_size)", "output": "Print accuracies", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_unique_tags(tag_list):\n  \"\"\"\"\"\"\n  frozen_tags_seen = set()\n  for tags in tag_list:\n    frozen_tags = frozenset(tags)\n    if frozen_tags in frozen_tags_seen:\n      raise ValueError(\"Tags %r used repeatedly\" % tags)\n    frozen_tags_seen.add(frozen_tags)", "output": "Checks that tag list contains each set of tags only once.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_to_ascii(statement):\n    \"\"\"\n    \n    \"\"\"\n    import unicodedata\n\n    text = unicodedata.normalize('NFKD', statement.text)\n    text = text.encode('ascii', 'ignore').decode('utf-8')\n\n    statement.text = str(text)\n    return statement", "output": "Converts unicode characters to ASCII character equivalents.\n    For example: \"p\u00e5 f\u00e9d\u00e9ral\" becomes \"pa federal\".", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_floating(self):\n        \"\"\"\"\"\"\n        return (\n            self.is_numpy_compatible and np.issubdtype(self.as_numpy_dtype, np.floating)\n        ) or self.base_dtype == bfloat16", "output": "Returns whether this is a (non-quantized, real) floating point type.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_all(self):\n        \"\"\"\n        \"\"\"\n        if not self.vars:\n            return self.parent\n        if not self.parent:\n            return self.vars\n        return dict(self.parent, **self.vars)", "output": "Return the complete context as dict including the exported\n        variables.  For optimizations reasons this might not return an\n        actual copy so be careful with using it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _GetMessageFromFactory(factory, full_name):\n  \"\"\"\n  \"\"\"\n  proto_descriptor = factory.pool.FindMessageTypeByName(full_name)\n  proto_cls = factory.GetPrototype(proto_descriptor)\n  return proto_cls", "output": "Get a proto class from the MessageFactory by name.\n\n  Args:\n    factory: a MessageFactory instance.\n    full_name: str, the fully qualified name of the proto type.\n  Returns:\n    A class, for the type identified by full_name.\n  Raises:\n    KeyError, if the proto is not found in the factory's descriptor pool.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename(self, new_name):\r\n        \"\"\"\"\"\"\r\n        old_name = self.name\r\n        self.name = new_name\r\n        pypath = self.relative_pythonpath  # ??\r\n        self.root_path = self.root_path[:-len(old_name)]+new_name\r\n        self.relative_pythonpath = pypath  # ??\r\n        self.save()", "output": "Rename project and rename its root path accordingly.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def Expand(self, macro_ref_str):\n    \"\"\"\n    \"\"\"\n    match = _MACRO_RE.match(macro_ref_str)\n    if match is None or match.group(0) != macro_ref_str:\n      raise PDDMError('Failed to parse macro reference: \"%s\"' % macro_ref_str)\n    if match.group('name') not in self._macros:\n      raise PDDMError('No macro named \"%s\".' % match.group('name'))\n    return self._Expand(match, [], macro_ref_str)", "output": "Expands the macro reference.\n\n    Args:\n      macro_ref_str: String of a macro reference (i.e. foo(a, b)).\n\n    Returns:\n      The text from the expansion.\n\n    Raises:\n      PDDMError if there are any issues.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(config, section, opt, value):\n        \"\"\"\n        \"\"\"\n        if section not in config.keys():\n            config[section] = {}\n\n        config[section][opt] = value", "output": "Sets specified option in the config.\n\n        Args:\n            config (configobj.ConfigObj): config to work on.\n            section (str): section name.\n            opt (str): option name.\n            value: value to set option to.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def format(self, source):\n        \"\"\"\n        \"\"\"\n        self._jwrite = self._jwrite.format(source)\n        return self", "output": "Specifies the underlying output data source.\n\n        :param source: string, name of the data source, e.g. 'json', 'parquet'.\n\n        >>> df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_params(net):\n    \"\"\"\"\"\"\n    for module in net.modules():\n        if isinstance(module, nn.Conv2d):\n            init.kaiming_normal(module.weight, mode=\"fan_out\")\n            if module.bias:\n                init.constant(module.bias, 0)\n        elif isinstance(module, nn.BatchNorm2d):\n            init.constant(module.weight, 1)\n            init.constant(module.bias, 0)\n        elif isinstance(module, nn.Linear):\n            init.normal(module.weight, std=1e-3)\n            if module.bias:\n                init.constant(module.bias, 0)", "output": "Init layer parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_warning_menu(self):\r\n        \"\"\"\"\"\"\r\n        editor = self.get_current_editor()\r\n        check_results = editor.get_current_warnings()\r\n        self.warning_menu.clear()\r\n        filename = self.get_current_filename()\r\n        for message, line_number in check_results:\r\n            error = 'syntax' in message\r\n            text = message[:1].upper() + message[1:]\r\n            icon = ima.icon('error') if error else ima.icon('warning')\r\n            slot = lambda _checked, _l=line_number: self.load(filename, goto=_l)\r\n            action = create_action(self, text=text, icon=icon, triggered=slot)\r\n            self.warning_menu.addAction(action)", "output": "Update warning list menu", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chugid_and_umask(runas, umask, group=None):\n    '''\n    \n    '''\n    set_runas = False\n    set_grp = False\n\n    current_user = getpass.getuser()\n    if runas and runas != current_user:\n        set_runas = True\n        runas_user = runas\n    else:\n        runas_user = current_user\n\n    current_grp = grp.getgrgid(pwd.getpwnam(getpass.getuser()).pw_gid).gr_name\n    if group and group != current_grp:\n        set_grp = True\n        runas_grp = group\n    else:\n        runas_grp = current_grp\n\n    if set_runas or set_grp:\n        chugid(runas_user, runas_grp)\n    if umask is not None:\n        os.umask(umask)", "output": "Helper method for for subprocess.Popen to initialise uid/gid and umask\n    for the new process.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_pretty_usage(usage):\n    \"\"\"\n    \n    \"\"\"\n\n    if usage is not None and usage.strip() != \"\":\n        usage = \"\\n\".join(map(lambda u: u.strip(), usage.split(\"\\n\")))\n        return \"%s\\n\\n\" % usage", "output": "Makes the usage description pretty and returns a formatted string if `usage`\n    is not an empty string. Otherwise, returns None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def del_password(name, root=None):\n    '''\n    \n    '''\n    cmd = ['passwd']\n    if root is not None:\n        cmd.extend(('-R', root))\n    cmd.extend(('-d', name))\n\n    __salt__['cmd.run'](cmd, python_shell=False, output_loglevel='quiet')\n    uinfo = info(name, root=root)\n    return not uinfo['passwd'] and uinfo['name'] == name", "output": ".. versionadded:: 2014.7.0\n\n    Delete the password from name user\n\n    name\n        User to delete\n\n    root\n        Directory to chroot into\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' shadow.del_password username", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def foreach_model(self, fn):\n        \"\"\"\n        \"\"\"\n\n        results = ray.get([w.foreach_model.remote(fn) for w in self.workers])\n        out = []\n        for r in results:\n            out.extend(r)\n        return out", "output": "Apply the given function to each model replica in each worker.\n\n        Returns:\n            List of results from applying the function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cp(device, from_minor, to_minor):  # pylint: disable=C0103\n    '''\n    \n    '''\n    _validate_device(device)\n\n    try:\n        int(from_minor)\n        int(to_minor)\n    except Exception:\n        raise CommandExecutionError(\n            'Invalid minor number passed to partition.cp'\n        )\n\n    cmd = 'parted -m -s {0} cp {1} {2}'.format(device, from_minor, to_minor)\n    out = __salt__['cmd.run'](cmd).splitlines()\n    return out", "output": "Copies the file system on the partition <from-minor> to partition\n    <to-minor>, deleting the original contents of the destination\n    partition.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' partition.cp /dev/sda 2 3", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_trial(self, name, specification):\n        \"\"\"\"\"\"\n        payload = {\"name\": name, \"spec\": specification}\n        response = requests.post(urljoin(self._path, \"trials\"), json=payload)\n        return self._deserialize(response)", "output": "Adds a trial by name and specification (dict).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _init_from_dt(self, data, nthread):\n        \"\"\"\n        \n        \"\"\"\n        ptrs = (ctypes.c_void_p * data.ncols)()\n        if hasattr(data, \"internal\") and hasattr(data.internal, \"column\"):\n            # datatable>0.8.0\n            for icol in range(data.ncols):\n                col = data.internal.column(icol)\n                ptr = col.data_pointer\n                ptrs[icol] = ctypes.c_void_p(ptr)\n        else:\n            # datatable<=0.8.0\n            from datatable.internal import frame_column_data_r  # pylint: disable=no-name-in-module,import-error\n            for icol in range(data.ncols):\n                ptrs[icol] = frame_column_data_r(data, icol)\n\n        # always return stypes for dt ingestion\n        feature_type_strings = (ctypes.c_char_p * data.ncols)()\n        for icol in range(data.ncols):\n            feature_type_strings[icol] = ctypes.c_char_p(data.stypes[icol].name.encode('utf-8'))\n\n        handle = ctypes.c_void_p()\n        _check_call(_LIB.XGDMatrixCreateFromDT(\n            ptrs, feature_type_strings,\n            c_bst_ulong(data.shape[0]),\n            c_bst_ulong(data.shape[1]),\n            ctypes.byref(handle),\n            nthread))\n        self.handle = handle", "output": "Initialize data from a datatable Frame.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def request_cert(name, master, ticket, port=\"5665\"):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n    cert = \"{0}ca.crt\".format(get_certs_path())\n\n    # Checking if execution is needed.\n    if os.path.isfile(cert):\n        ret['comment'] = 'No execution needed. Cert: {0} already exists.'.format(cert)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'Certificate request from icinga2 master would be executed'\n        return ret\n\n    # Executing the command.\n    cert_request = __salt__['icinga2.request_cert'](name, master, ticket, port)\n    if not cert_request['retcode']:\n        ret['comment'] = \"Certificate request from icinga2 master executed\"\n        ret['changes']['cert'] = \"Executed. Certificate requested: {0}\".format(cert)\n        return ret\n\n    ret['comment'] = \"FAILED. Certificate requested failed with output: {0}\".format(cert_request['stdout'])\n    ret['result'] = False\n    return ret", "output": "Request CA certificate from master icinga2 node.\n\n    name\n        The domain name for which this certificate will be saved\n\n    master\n        Icinga2 master node for which this certificate will be saved\n\n    ticket\n        Authentication ticket generated on icinga2 master\n\n    port\n        Icinga2 port, defaults to 5665", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _jitter(c, magnitude:uniform):\n    \"\"\n    c.flow.add_((torch.rand_like(c.flow)-0.5)*magnitude*2)\n    return c", "output": "Replace pixels by random neighbors at `magnitude`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def public_url(self):\n        \"\"\"\n        \"\"\"\n        return \"{storage_base_url}/{bucket_name}/{quoted_name}\".format(\n            storage_base_url=_API_ACCESS_ENDPOINT,\n            bucket_name=self.bucket.name,\n            quoted_name=quote(self.name.encode(\"utf-8\")),\n        )", "output": "The public URL for this blob.\n\n        Use :meth:`make_public` to enable anonymous access via the returned\n        URL.\n\n        :rtype: `string`\n        :returns: The public URL for this blob.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __init_from_np2d(self, mat, params_str, ref_dataset):\n        \"\"\"\"\"\"\n        if len(mat.shape) != 2:\n            raise ValueError('Input numpy.ndarray must be 2 dimensional')\n\n        self.handle = ctypes.c_void_p()\n        if mat.dtype == np.float32 or mat.dtype == np.float64:\n            data = np.array(mat.reshape(mat.size), dtype=mat.dtype, copy=False)\n        else:\n            # change non-float data to float data, need to copy\n            data = np.array(mat.reshape(mat.size), dtype=np.float32)\n\n        ptr_data, type_ptr_data, _ = c_float_array(data)\n        _safe_call(_LIB.LGBM_DatasetCreateFromMat(\n            ptr_data,\n            ctypes.c_int(type_ptr_data),\n            ctypes.c_int(mat.shape[0]),\n            ctypes.c_int(mat.shape[1]),\n            ctypes.c_int(C_API_IS_ROW_MAJOR),\n            c_str(params_str),\n            ref_dataset,\n            ctypes.byref(self.handle)))\n        return self", "output": "Initialize data from a 2-D numpy matrix.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addlist(self, key, valuelist=[]):\n        \"\"\"\n        \n        \"\"\"\n        for value in valuelist:\n            self.add(key, value)\n        return self", "output": "Add the values in <valuelist> to the list of values for <key>. If <key>\n        is not in the dictionary, the values in <valuelist> become the values\n        for <key>.\n\n        Example:\n          omd = omdict([(1,1)])\n          omd.addlist(1, [11, 111])\n          omd.allitems() == [(1, 1), (1, 11), (1, 111)]\n          omd.addlist(2, [2])\n          omd.allitems() == [(1, 1), (1, 11), (1, 111), (2, 2)]\n\n        Returns: <self>.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def channel_interpolate(layer1, n_channel1, layer2, n_channel2):\n  \"\"\"\n  \"\"\"\n  def inner(T):\n    batch_n = T(layer1).get_shape().as_list()[0]\n    arr1 = T(layer1)[..., n_channel1]\n    arr2 = T(layer2)[..., n_channel2]\n    weights = (np.arange(batch_n)/float(batch_n-1))\n    S = 0\n    for n in range(batch_n):\n      S += (1-weights[n]) * tf.reduce_mean(arr1[n])\n      S += weights[n] * tf.reduce_mean(arr2[n])\n    return S\n  return inner", "output": "Interpolate between layer1, n_channel1 and layer2, n_channel2.\n\n  Optimize for a convex combination of layer1, n_channel1 and\n  layer2, n_channel2, transitioning across the batch.\n\n  Args:\n    layer1: layer to optimize 100% at batch=0.\n    n_channel1: neuron index to optimize 100% at batch=0.\n    layer2: layer to optimize 100% at batch=N.\n    n_channel2: neuron index to optimize 100% at batch=N.\n\n  Returns:\n    Objective", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xpathNextParent(self, ctxt):\n        \"\"\" \"\"\"\n        if ctxt is None: ctxt__o = None\n        else: ctxt__o = ctxt._o\n        ret = libxml2mod.xmlXPathNextParent(ctxt__o, self._o)\n        if ret is None:raise xpathError('xmlXPathNextParent() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Traversal function for the \"parent\" direction The parent\n          axis contains the parent of the context node, if there is\n           one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_root_path(self, language):\n        \"\"\"\n        \n        \"\"\"\n        path = None\n\n        # Get path of the current project\n        if self.main and self.main.projects:\n            path = self.main.projects.get_active_project_path()\n\n        # If there's no project, use the output of getcwd_or_home.\n        if not path:\n            # We can't use getcwd_or_home for Python because if it\n            # returns home and you have a lot of Python files on it\n            # then computing Rope completions takes a long time\n            # and blocks the PyLS server.\n            # Instead we use an empty directory inside our config one,\n            # just like we did for Rope in Spyder 3.\n            if language == 'python':\n                path = get_conf_path('lsp_root_path')\n                if not osp.exists(path):\n                    os.mkdir(path)\n            else:\n                path = getcwd_or_home()\n\n        return path", "output": "Get root path to pass to the LSP servers.\n\n        This can be the current project path or the output of\n        getcwd_or_home (except for Python, see below).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def minion_config(opts, vm_):\n    '''\n    \n    '''\n\n    # Don't start with a copy of the default minion opts; they're not always\n    # what we need. Some default options are Null, let's set a reasonable default\n    minion = {\n        'master': 'salt',\n        'log_level': 'info',\n        'hash_type': 'sha256',\n    }\n\n    # Now, let's update it to our needs\n    minion['id'] = vm_['name']\n    master_finger = salt.config.get_cloud_config_value('master_finger', vm_, opts)\n    if master_finger is not None:\n        minion['master_finger'] = master_finger\n    minion.update(\n        # Get ANY defined minion settings, merging data, in the following order\n        # 1. VM config\n        # 2. Profile config\n        # 3. Global configuration\n        salt.config.get_cloud_config_value(\n            'minion', vm_, opts, default={}, search_global=True\n        )\n    )\n\n    make_master = salt.config.get_cloud_config_value('make_master', vm_, opts)\n    if 'master' not in minion and make_master is not True:\n        raise SaltCloudConfigError(\n            'A master setting was not defined in the minion\\'s configuration.'\n        )\n\n    # Get ANY defined grains settings, merging data, in the following order\n    # 1. VM config\n    # 2. Profile config\n    # 3. Global configuration\n    minion.setdefault('grains', {}).update(\n        salt.config.get_cloud_config_value(\n            'grains', vm_, opts, default={}, search_global=True\n        )\n    )\n    return minion", "output": "Return a minion's configuration for the provided options and VM", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _indent(s, indent='  '):\n    \"\"\"\"\"\"\n    if isinstance(s, six.string_types):\n        return '\\n'.join(('%s%s' % (indent, line) for line in s.splitlines()))\n    return s", "output": "Intent each line with indent", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_cpu_config(config_spec, cpu_props):\n    '''\n    \n    '''\n    log.trace('Configuring virtual machine CPU '\n              'settings cpu_props=%s', cpu_props)\n    if 'count' in cpu_props:\n        config_spec.numCPUs = int(cpu_props['count'])\n    if 'cores_per_socket' in cpu_props:\n        config_spec.numCoresPerSocket = int(cpu_props['cores_per_socket'])\n    if 'nested' in cpu_props and cpu_props['nested']:\n        config_spec.nestedHVEnabled = cpu_props['nested']  # True\n    if 'hotadd' in cpu_props and cpu_props['hotadd']:\n        config_spec.cpuHotAddEnabled = cpu_props['hotadd']  # True\n    if 'hotremove' in cpu_props and cpu_props['hotremove']:\n        config_spec.cpuHotRemoveEnabled = cpu_props['hotremove']", "output": "Sets CPU core count to the given value\n\n    config_spec\n        vm.ConfigSpec object\n\n    cpu_props\n        CPU properties dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pandas_dtype(dtype):\n    \"\"\"\n    \n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, PandasExtensionDtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except Exception:\n        # we don't want to force a repr of the non-string\n        if not isinstance(dtype, str):\n            raise TypeError(\"data type not understood\")\n        raise TypeError(\"data type '{}' not understood\".format(\n            dtype))\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, 'object', 'O']:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == 'O':\n        raise TypeError(\"dtype '{}' not understood\".format(dtype))\n\n    return npdtype", "output": "Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(self, key, where=None, start=None, stop=None):\n        \"\"\"\n        \n\n        \"\"\"\n        where = _ensure_term(where, scope_level=1)\n        try:\n            s = self.get_storer(key)\n        except KeyError:\n            # the key is not a valid store, re-raising KeyError\n            raise\n        except Exception:\n\n            if where is not None:\n                raise ValueError(\n                    \"trying to remove a node with a non-None where clause!\")\n\n            # we are actually trying to remove a node (with children)\n            s = self.get_node(key)\n            if s is not None:\n                s._f_remove(recursive=True)\n                return None\n\n        # remove the node\n        if com._all_none(where, start, stop):\n            s.group._f_remove(recursive=True)\n\n        # delete from the table\n        else:\n            if not s.is_table:\n                raise ValueError(\n                    'can only remove with where on objects written as tables')\n            return s.delete(where=where, start=start, stop=stop)", "output": "Remove pandas object partially by specifying the where condition\n\n        Parameters\n        ----------\n        key : string\n            Node to remove or delete rows from\n        where : list of Term (or convertible) objects, optional\n        start : integer (defaults to None), row number to start selection\n        stop  : integer (defaults to None), row number to stop selection\n\n        Returns\n        -------\n        number of rows removed (or None if not a Table)\n\n        Exceptions\n        ----------\n        raises KeyError if key is not a valid store", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    \n    \"\"\"\n    if model == \"cnn\":\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, \"cnn\")]\n    else:\n        return [_trim_css_to_bounds(_rect_to_css(face), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, model)]", "output": "Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset_window_layout(self):\r\n        \"\"\"\"\"\"\r\n        answer = QMessageBox.warning(self, _(\"Warning\"),\r\n                     _(\"Window layout will be reset to default settings: \"\r\n                       \"this affects window position, size and dockwidgets.\\n\"\r\n                       \"Do you want to continue?\"),\r\n                     QMessageBox.Yes | QMessageBox.No)\r\n        if answer == QMessageBox.Yes:\r\n            self.setup_layout(default=True)", "output": "Reset window layout to default", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_chinese_char(self, cp):\n        \"\"\"\"\"\"\n        # This defines a \"chinese character\" as anything in the CJK Unicode block:\n        #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n        #\n        # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n        # despite its name. The modern Korean Hangul alphabet is a different block,\n        # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n        # space-separated words, so they are not treated specially and handled\n        # like the all of the other languages.\n        if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n                (cp >= 0x3400 and cp <= 0x4DBF) or  #\n                (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n                (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n                (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n                (cp >= 0x2B820 and cp <= 0x2CEAF) or\n                (cp >= 0xF900 and cp <= 0xFAFF) or  #\n                (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n            return True\n\n        return False", "output": "Checks whether CP is the codepoint of a CJK character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cached_manylinux_wheel(self, package_name, package_version, disable_progress=False):\n        \"\"\"\n        \n        \"\"\"\n        cached_wheels_dir = os.path.join(tempfile.gettempdir(), 'cached_wheels')\n        if not os.path.isdir(cached_wheels_dir):\n            os.makedirs(cached_wheels_dir)\n\n        wheel_file = '{0!s}-{1!s}-{2!s}'.format(package_name, package_version, self.manylinux_wheel_file_suffix)\n        wheel_path = os.path.join(cached_wheels_dir, wheel_file)\n\n        if not os.path.exists(wheel_path) or not zipfile.is_zipfile(wheel_path):\n            # The file is not cached, download it.\n            wheel_url = self.get_manylinux_wheel_url(package_name, package_version)\n            if not wheel_url:\n                return None\n\n            print(\" - {}=={}: Downloading\".format(package_name, package_version))\n            with open(wheel_path, 'wb') as f:\n                self.download_url_with_progress(wheel_url, f, disable_progress)\n\n            if not zipfile.is_zipfile(wheel_path):\n                return None\n        else:\n            print(\" - {}=={}: Using locally cached manylinux wheel\".format(package_name, package_version))\n\n        return wheel_path", "output": "Gets the locally stored version of a manylinux wheel. If one does not exist, the function downloads it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _render_filenames(filenames, zip_file, saltenv, template):\n    '''\n    \n    '''\n    if not template:\n        return (filenames, zip_file)\n\n    # render the path as a template using path_template_engine as the engine\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError(\n            'Attempted to render file paths with unavailable engine '\n            '{0}'.format(template)\n        )\n\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        '''\n        Render :param:`contents` into a literal pathname by writing it to a\n        temp file, rendering that file, and returning the result.\n        '''\n        # write out path to temp file\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](\n            tmp_path_fn,\n            to_str=True,\n            **kwargs\n        )\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            # Failed to render the template\n            raise CommandExecutionError(\n                'Failed to render file path with error: {0}'.format(\n                    data['data']\n                )\n            )\n        else:\n            return data['data']\n\n    filenames = _render(filenames)\n    zip_file = _render(zip_file)\n    return (filenames, zip_file)", "output": "Process markup in the :param:`filenames` and :param:`zipfile` variables (NOT the\n    files under the paths they ultimately point to) according to the markup\n    format provided by :param:`template`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_scanner (type, prop_set):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .property_set import PropertySet\n        assert isinstance(type, basestring)\n        assert isinstance(prop_set, PropertySet)\n    if registered (type):\n        scanner_type = __types [type]['scanner']\n        if scanner_type:\n            return scanner.get (scanner_type, prop_set.raw ())\n            pass\n\n    return None", "output": "Returns a scanner instance appropriate to 'type' and 'property_set'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gae_advantages(td_deltas, mask, lambda_=0.95, gamma=0.99):\n  \n  \"\"\"\n\n  return rewards_to_go(td_deltas, mask, lambda_ * gamma)", "output": "r\"\"\"Computes the GAE advantages given the one step TD-residuals.\n\n  The formula for a GAE advantage estimator is as follows:\n\n  A_{bt} = \\sum_{l=0}^{\\infty}(\\gamma * \\lambda)^{l}(\\delta_{b,t+l}).\n\n  Internally we just call rewards_to_go, since it is the same computation.\n\n  Args:\n    td_deltas: np.ndarray of shape (B, T) of one step TD-residuals.\n    mask: np.ndarray of shape (B, T) of mask for the residuals. It maybe the\n      case that the `td_deltas` are already masked correctly since they are\n      produced by `deltas(...)`\n    lambda_: float, lambda parameter for GAE estimators.\n    gamma: float, lambda parameter for GAE estimators.\n\n  Returns:\n    GAE advantage estimates.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup_table(self):\r\n        \"\"\"\"\"\"\r\n        self.horizontalHeader().setStretchLastSection(True)\r\n        self.adjust_columns()\r\n        self.columnAt(0)\r\n        # Sorting columns\r\n        self.setSortingEnabled(False)\r\n        self.sortByColumn(0, Qt.DescendingOrder)", "output": "Setup table", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lookup_default(self, name):\n        \"\"\"\n        \"\"\"\n        if self.default_map is not None:\n            rv = self.default_map.get(name)\n            if callable(rv):\n                rv = rv()\n            return rv", "output": "Looks up the default for a parameter name.  This by default\n        looks into the :attr:`default_map` if available.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_optimizer(self, kvstore='local', optimizer='sgd',\n                       optimizer_params=(('learning_rate', 0.01),),\n                       force_init=False):\n        \"\"\"\n        \"\"\"\n        assert self.binded and self.params_initialized\n        if self.optimizer_initialized and not force_init:\n            self.logger.warning('optimizer already initialized, ignoring.')\n            return\n\n        for module in self._modules:\n            module.init_optimizer(kvstore=kvstore, optimizer=optimizer,\n                                  optimizer_params=optimizer_params, force_init=force_init)\n\n        self.optimizer_initialized = True", "output": "Installs and initializes optimizers.\n\n        Parameters\n        ----------\n        kvstore : str or KVStore\n            Default `'local'`.\n        optimizer : str or Optimizer\n            Default `'sgd'`\n        optimizer_params : dict\n            Default ``(('learning_rate', 0.01),)``. The default value is not a dictionary,\n            just to avoid pylint warning of dangerous default values.\n        force_init : bool\n            Default ``False``, indicating whether we should force re-initializing the\n            optimizer in the case an optimizer is already installed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mimic_adam_with_adafactor(hparams):\n  \"\"\"\n  \"\"\"\n  assert \"adam\" in hparams.optimizer\n  hparams.optimizer = \"adafactor\"\n  hparams.optimizer_adafactor_beta1 = hparams.optimizer_adam_beta1\n  hparams.optimizer_adafactor_beta2 = hparams.optimizer_adam_beta2\n  hparams.optimizer_adafactor_multiply_by_parameter_scale = False\n  hparams.optimizer_adafactor_factored = False\n  hparams.optimizer_adafactor_clipping_threshold = None\n  hparams.optimizer_adafactor_decay_type = \"adam\"", "output": "Switch from Adam to Adafactor, approximating the behavior of Adam.\n\n  Some minor things may be different, like epsilon and beta1 correction.\n\n  Args:\n    hparams: model hyperparameters where \"adam\" in hparams.optimizer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mtf_image_transformer_base_imagenet():\n  \"\"\"\"\"\"\n  hparams = mtf_image_transformer_base_cifar()\n  hparams.mesh_shape = \"batch:32\"\n  hparams.layout = \"batch:batch\"\n  hparams.batch_size = 128\n  hparams.d_ff = 2048\n  hparams.hidden_size = 512\n  hparams.num_decoder_layers = 12\n  hparams.learning_rate = 0.5\n  hparams.learning_rate_warmup_steps = 31250\n  hparams.layer_preprocess_sequence = \"none\"\n  hparams.layer_postprocess_sequence = \"dan\"\n  hparams.layer_prepostprocess_dropout = 0.1\n  hparams.unconditional = True\n  return hparams", "output": "Data parallel CIFAR parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _lstrip_word(word, prefix):\n    '''\n    \n    '''\n\n    if six.text_type(word).startswith(prefix):\n        return six.text_type(word)[len(prefix):]\n    return word", "output": "Return a copy of the string after the specified prefix was removed\n    from the beginning of the string", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_bytes_list(cls, function_descriptor_list):\n        \"\"\"\n        \"\"\"\n        assert isinstance(function_descriptor_list, list)\n        if len(function_descriptor_list) == 0:\n            # This is a function descriptor of driver task.\n            return FunctionDescriptor.for_driver_task()\n        elif (len(function_descriptor_list) == 3\n              or len(function_descriptor_list) == 4):\n            module_name = ensure_str(function_descriptor_list[0])\n            class_name = ensure_str(function_descriptor_list[1])\n            function_name = ensure_str(function_descriptor_list[2])\n            if len(function_descriptor_list) == 4:\n                return cls(module_name, function_name, class_name,\n                           function_descriptor_list[3])\n            else:\n                return cls(module_name, function_name, class_name)\n        else:\n            raise Exception(\n                \"Invalid input for FunctionDescriptor.from_bytes_list\")", "output": "Create a FunctionDescriptor instance from list of bytes.\n\n        This function is used to create the function descriptor from\n        backend data.\n\n        Args:\n            cls: Current class which is required argument for classmethod.\n            function_descriptor_list: list of bytes to represent the\n                function descriptor.\n\n        Returns:\n            The FunctionDescriptor instance created from the bytes list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deviation(self, series, start, limit, mean):\n        '''\n        \n        '''\n        d = []\n        for x in range(start, limit):\n            d.append(float(series[x] - mean))\n        return d", "output": ":type start: int\n        :type limit: int\n        :type mean: int\n        :rtype: list()", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_logical(self, rule, field, value):\n        \"\"\"  \"\"\"\n        if not isinstance(value, Sequence):\n            self._error(field, errors.BAD_TYPE)\n            return\n\n        validator = self._get_child_validator(\n            document_crumb=rule, allow_unknown=False,\n            schema=self.target_validator.validation_rules)\n\n        for constraints in value:\n            _hash = (mapping_hash({'turing': constraints}),\n                     mapping_hash(self.target_validator.types_mapping))\n            if _hash in self.target_validator._valid_schemas:\n                continue\n\n            validator(constraints, normalize=False)\n            if validator._errors:\n                self._error(validator._errors)\n            else:\n                self.target_validator._valid_schemas.add(_hash)", "output": "{'allowed': ('allof', 'anyof', 'noneof', 'oneof')}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def group_get(auth=None, **kwargs):\n    '''\n    \n    '''\n    cloud = get_operator_cloud(auth)\n    kwargs = _clean_kwargs(**kwargs)\n    return cloud.get_group(**kwargs)", "output": "Get a single group\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' keystoneng.group_get name=group1\n        salt '*' keystoneng.group_get name=group2 domain_id=b62e76fbeeff4e8fb77073f591cf211e\n        salt '*' keystoneng.group_get name=0e4febc2a5ab4f2c8f374b054162506d", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, remotepath, localpath, callback=None):\n        \"\"\"\n        \n        \"\"\"\n        with open(localpath, \"wb\") as fl:\n            size = self.getfo(remotepath, fl, callback)\n        s = os.stat(localpath)\n        if s.st_size != size:\n            raise IOError(\n                \"size mismatch in get!  {} != {}\".format(s.st_size, size)\n            )", "output": "Copy a remote file (``remotepath``) from the SFTP server to the local\n        host as ``localpath``.  Any exception raised by operations will be\n        passed through.  This method is primarily provided as a convenience.\n\n        :param str remotepath: the remote file to copy\n        :param str localpath: the destination path on the local host\n        :param callable callback:\n            optional callback function (form: ``func(int, int)``) that accepts\n            the bytes transferred so far and the total bytes to be transferred\n\n        .. versionadded:: 1.4\n        .. versionchanged:: 1.7.4\n            Added the ``callback`` param", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zip_html(self):\n        \"\"\"\n        \n        \"\"\"\n        zip_fname = os.path.join(BUILD_PATH, 'html', 'pandas.zip')\n        if os.path.exists(zip_fname):\n            os.remove(zip_fname)\n        dirname = os.path.join(BUILD_PATH, 'html')\n        fnames = os.listdir(dirname)\n        os.chdir(dirname)\n        self._run_os('zip',\n                     zip_fname,\n                     '-r',\n                     '-q',\n                     *fnames)", "output": "Compress HTML documentation into a zip file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rlmb_long_stochastic_discrete_simulation_deterministic_starts():\n  \"\"\"\"\"\"\n  hparams = rlmb_base_stochastic_discrete()\n  hparams.generative_model_params = \"next_frame_basic_stochastic_discrete_long\"\n  hparams.ppo_epochs_num = 1000\n  hparams.simulation_random_starts = False\n  return hparams", "output": "Long setting with stochastic discrete model & deterministic sim starts.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_schedule(schedule):\n  \"\"\"\n  \"\"\"\n  interpolation, steps, pmfs = schedule\n  return interpolation + ' ' + ' '.join(\n      '@' + str(s) + ' ' + ' '.join(map(str, p)) for s, p in zip(steps, pmfs))", "output": "Encodes a schedule tuple into a string.\n\n  Args:\n    schedule: A tuple containing (interpolation, steps, pmfs), where\n      interpolation is a string specifying the interpolation strategy, steps\n      is an int array_like of shape [N] specifying the global steps, and pmfs is\n      an array_like of shape [N, M] where pmf[i] is the sampling distribution\n      at global step steps[i]. N is the number of schedule requirements to\n      interpolate and M is the size of the probability space.\n\n  Returns:\n    The string encoding of the schedule tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RandomNormalInitializer(stddev=1e-2):\n  \"\"\"\"\"\"\n  def init(shape, rng):\n    return (stddev * backend.random.normal(rng, shape)).astype('float32')\n  return init", "output": "An initializer function for random normal coefficients.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_path_sum(root, sum):\n    \"\"\"\n    \n    \"\"\"\n    if root is None:\n        return False\n    if root.left is None and root.right is None and root.val == sum:\n        return True\n    sum -= root.val\n    return has_path_sum(root.left, sum) or has_path_sum(root.right, sum)", "output": ":type root: TreeNode\n    :type sum: int\n    :rtype: bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dataset_generator(filepath,\n                      dataset,\n                      chunk_size=1,\n                      start_idx=None,\n                      end_idx=None):\n  \"\"\"\"\"\"\n  encoder = dna_encoder.DNAEncoder(chunk_size=chunk_size)\n  with h5py.File(filepath, \"r\") as h5_file:\n    # Get input keys from h5_file\n    src_keys = [s % dataset for s in [\"%s_in\", \"%s_na\", \"%s_out\"]]\n    src_values = [h5_file[k] for k in src_keys]\n    inp_data, mask_data, out_data = src_values\n    assert len(set([v.len() for v in src_values])) == 1\n\n    if start_idx is None:\n      start_idx = 0\n    if end_idx is None:\n      end_idx = inp_data.len()\n\n    for i in range(start_idx, end_idx):\n      if i % 100 == 0:\n        print(\"Generating example %d for %s\" % (i, dataset))\n      inputs, mask, outputs = inp_data[i], mask_data[i], out_data[i]\n      ex_dict = to_example_dict(encoder, inputs, mask, outputs)\n      # Original data has one output for every 128 input bases. Ensure that the\n      # ratio has been maintained given the chunk size and removing EOS.\n      assert (len(ex_dict[\"inputs\"]) - 1) == ((\n          128 // chunk_size) * ex_dict[\"targets_shape\"][0])\n      yield ex_dict", "output": "Generate example dicts.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_series_or_dataframe_operations(cls):\n        \"\"\"\n        \n        \"\"\"\n\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, center=False,\n                    win_type=None, on=None, axis=0, closed=None):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window,\n                                   min_periods=min_periods,\n                                   center=center, win_type=win_type,\n                                   on=on, axis=axis, closed=closed)\n\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods,\n                                     center=center, axis=axis)\n\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n                min_periods=0, adjust=True, ignore_na=False,\n                axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                               alpha=alpha, min_periods=min_periods,\n                               adjust=adjust, ignore_na=ignore_na, axis=axis)\n\n        cls.ewm = ewm", "output": "Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_simple_binding(jboss_config, binding_name, profile=None):\n    '''\n    \n       '''\n    log.debug(\"======================== MODULE FUNCTION: jboss7.read_simple_binding, %s\", binding_name)\n    return __read_simple_binding(jboss_config, binding_name, profile=profile)", "output": "Read jndi binding in the running jboss instance\n\n    jboss_config\n        Configuration dictionary with properties specified above.\n    binding_name\n        Binding name to be created\n    profile\n        The profile name (JBoss domain mode only)\n\n    CLI Example:\n\n        .. code-block:: bash\n\n        salt '*' jboss7.read_simple_binding '{\"cli_path\": \"integration.modules.sysmod.SysModuleTest.test_valid_docs\", \"controller\": \"10.11.12.13:9999\", \"cli_user\": \"jbossadm\", \"cli_password\": \"jbossadm\"}' my_binding_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def merge(left, right, merged):\n    \"\"\" \n    \"\"\"\n\n    left_cursor, right_cursor = 0, 0\n    while left_cursor < len(left) and right_cursor < len(right):\n        # Sort each one and place into the result\n        if left[left_cursor] <= right[right_cursor]:\n            merged[left_cursor+right_cursor]=left[left_cursor]\n            left_cursor += 1\n        else:\n            merged[left_cursor + right_cursor] = right[right_cursor]\n            right_cursor += 1\n    # Add the left overs if there's any left to the result\n    for left_cursor in range(left_cursor, len(left)):\n        merged[left_cursor + right_cursor] = left[left_cursor]\n    # Add the left overs if there's any left to the result\n    for right_cursor in range(right_cursor, len(right)):\n        merged[left_cursor + right_cursor] = right[right_cursor]\n\n    # Return result\n    return merged", "output": "Merge helper\n        Complexity: O(n)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def running(opts):\n    '''\n    \n    '''\n\n    ret = []\n    proc_dir = os.path.join(opts['cachedir'], 'proc')\n    if not os.path.isdir(proc_dir):\n        return ret\n    for fn_ in os.listdir(proc_dir):\n        path = os.path.join(proc_dir, fn_)\n        try:\n            data = _read_proc_file(path, opts)\n            if data is not None:\n                ret.append(data)\n        except (IOError, OSError):\n            # proc files may be removed at any time during this process by\n            # the minion process that is executing the JID in question, so\n            # we must ignore ENOENT during this process\n            pass\n    return ret", "output": "Return the running jobs on this minion", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def position_to_value(self, y):\n        \"\"\"\"\"\"\n        vsb = self.editor.verticalScrollBar()\n        return vsb.minimum()+max([0, (y-self.offset)/self.get_scale_factor()])", "output": "Convert position in pixels to value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_train_begin(self, **kwargs:Any)->None:\n        \"\"\n        self.best = float('inf') if self.operator == np.less else -float('inf')", "output": "Initializes the best value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_ipv6_filter(ip, options=None):\n    '''\n    \n    '''\n    _is_ipv6 = _is_ipv(ip, 6, options=options)\n    return isinstance(_is_ipv6, six.string_types)", "output": "Returns a bool telling if the value passed to it was a valid IPv6 address.\n\n    ip\n        The IP address.\n\n    net: False\n        Consider IP addresses followed by netmask.\n\n    options\n        CSV of options regarding the nature of the IP address. E.g.: loopback, multicast, private etc.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_eval():\n    \"\"\" \n    \"\"\"\n\n    global trainloader\n    global testloader\n    global net\n\n    (x_train, y_train) = trainloader\n    (x_test, y_test) = testloader\n\n    # train procedure\n    net.fit(\n        x=x_train,\n        y=y_train,\n        batch_size=args.batch_size,\n        validation_data=(x_test, y_test),\n        epochs=args.epochs,\n        shuffle=True,\n        callbacks=[\n            SendMetrics(),\n            EarlyStopping(min_delta=0.001, patience=10),\n            TensorBoard(log_dir=TENSORBOARD_DIR),\n        ],\n    )\n\n    # trial report final acc to tuner\n    _, acc = net.evaluate(x_test, y_test)\n    logger.debug(\"Final result is: %.3f\", acc)\n    nni.report_final_result(acc)", "output": "train and eval the model", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_env_cache(opts, env_cache):\n    '''\n    \n    '''\n    if not os.path.isfile(env_cache):\n        return None\n    try:\n        with salt.utils.files.fopen(env_cache, 'rb') as fp_:\n            log.trace('Returning env cache data from %s', env_cache)\n            serial = salt.payload.Serial(opts)\n            return salt.utils.data.decode(serial.load(fp_))\n    except (IOError, OSError):\n        pass\n    return None", "output": "Returns cached env names, if present. Otherwise returns None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _StructPackEncoder(wire_type, format):\n  \"\"\"\n  \"\"\"\n\n  value_size = struct.calcsize(format)\n\n  def SpecificEncoder(field_number, is_repeated, is_packed):\n    local_struct_pack = struct.pack\n    if is_packed:\n      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)\n      local_EncodeVarint = _EncodeVarint\n      def EncodePackedField(write, value):\n        write(tag_bytes)\n        local_EncodeVarint(write, len(value) * value_size)\n        for element in value:\n          write(local_struct_pack(format, element))\n      return EncodePackedField\n    elif is_repeated:\n      tag_bytes = TagBytes(field_number, wire_type)\n      def EncodeRepeatedField(write, value):\n        for element in value:\n          write(tag_bytes)\n          write(local_struct_pack(format, element))\n      return EncodeRepeatedField\n    else:\n      tag_bytes = TagBytes(field_number, wire_type)\n      def EncodeField(write, value):\n        write(tag_bytes)\n        return write(local_struct_pack(format, value))\n      return EncodeField\n\n  return SpecificEncoder", "output": "Return a constructor for an encoder for a fixed-width field.\n\n  Args:\n      wire_type:  The field's wire type, for encoding tags.\n      format:  The format string to pass to struct.pack().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def symlink_remove(link):\n    \"\"\"\n    \"\"\"\n    # https://stackoverflow.com/q/26554135/6400719\n    if os.path.isdir(path2str(link)) and is_windows:\n        # this should only be on Py2.7 and windows\n        os.rmdir(path2str(link))\n    else:\n        os.unlink(path2str(link))", "output": "Remove a symlink. Used for model shortcut links.\n\n    link (unicode / Path): The path to the symlink.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cmd(tgt,\n        fun,\n        arg=(),\n        timeout=None,\n        tgt_type='glob',\n        kwarg=None):\n    '''\n    \n    '''\n    client = salt.client.ssh.client.SSHClient(mopts=__opts__)\n    return client.cmd(\n            tgt,\n            fun,\n            arg,\n            timeout,\n            tgt_type,\n            kwarg)", "output": ".. versionadded:: 2015.5.0\n    .. versionchanged:: 2017.7.0\n        The ``expr_form`` argument has been renamed to ``tgt_type``, earlier\n        releases must use ``expr_form``.\n\n    Execute a single command via the salt-ssh subsystem and return all\n    routines at once\n\n    A wrapper around the :py:meth:`SSHClient.cmd\n    <salt.client.ssh.client.SSHClient.cmd>` method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scheduled_sample_prob(ground_truth_x,\n                          generated_x,\n                          batch_size,\n                          scheduled_sample_var):\n  \"\"\"\n  \"\"\"\n  probability_threshold = scheduled_sample_var\n  probability_of_generated = tf.random_uniform([batch_size])\n  return tf.where(probability_of_generated > probability_threshold,\n                  generated_x, ground_truth_x)", "output": "Probability based scheduled sampling.\n\n  Args:\n    ground_truth_x: tensor of ground-truth data points.\n    generated_x: tensor of generated data points.\n    batch_size: batch size\n    scheduled_sample_var: probability of choosing from ground_truth.\n  Returns:\n    New batch with randomly selected data points.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join_options(options):\n    \"\"\"\n    \"\"\"\n    rv = []\n    any_prefix_is_slash = False\n    for opt in options:\n        prefix = split_opt(opt)[0]\n        if prefix == '/':\n            any_prefix_is_slash = True\n        rv.append((len(prefix), opt))\n\n    rv.sort(key=lambda x: x[0])\n\n    rv = ', '.join(x[1] for x in rv)\n    return rv, any_prefix_is_slash", "output": "Given a list of option strings this joins them in the most appropriate\n    way and returns them in the form ``(formatted_string,\n    any_prefix_is_slash)`` where the second item in the tuple is a flag that\n    indicates if any of the option prefixes was a slash.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_actions_from_items(self, items):\r\n        \"\"\"\"\"\"\r\n        fromcursor_act = create_action(self, text=_('Go to cursor position'),\r\n                                       icon=ima.icon('fromcursor'),\r\n                                       triggered=self.go_to_cursor_position)\r\n        fullpath_act = create_action(self, text=_('Show absolute path'),\r\n                                     toggled=self.toggle_fullpath_mode)\r\n        fullpath_act.setChecked(self.show_fullpath)\r\n        allfiles_act = create_action(self, text=_('Show all files'),\r\n                                     toggled=self.toggle_show_all_files)\r\n        allfiles_act.setChecked(self.show_all_files)\r\n        comment_act = create_action(self, text=_('Show special comments'),\r\n                                    toggled=self.toggle_show_comments)\r\n        comment_act.setChecked(self.show_comments)\r\n        group_cells_act = create_action(self, text=_('Group code cells'),\r\n                                        toggled=self.toggle_group_cells)\r\n        group_cells_act.setChecked(self.group_cells)\r\n        sort_files_alphabetically_act = create_action(\r\n            self, text=_('Sort files alphabetically'),\r\n            toggled=self.toggle_sort_files_alphabetically)\r\n        sort_files_alphabetically_act.setChecked(\r\n            self.sort_files_alphabetically)\r\n        actions = [fullpath_act, allfiles_act, group_cells_act, comment_act,\r\n                   sort_files_alphabetically_act, fromcursor_act]\r\n        return actions", "output": "Reimplemented OneColumnTree method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_detach(name, profile=None, timeout=300, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_detach(\n        name,\n        timeout\n    )", "output": "Attach a block storage volume\n\n    name\n        Name of the new volume to attach\n\n    server_name\n        Name of the server to detach from\n\n    profile\n        Profile to build on\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_detach myblock profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enforce_tags(Resource, Tags, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    authargs = {'region': region, 'key': key, 'keyid': keyid, 'profile': profile}\n    current = list_tags_for_resource(Resource=Resource, **authargs)\n    if current is None:\n        log.error('Failed to list tags for CloudFront resource `%s`.', Resource)\n        return False\n    if current == Tags:  # Short-ciruits save cycles!\n        return True\n    remove = [k for k in current if k not in Tags]\n    removed = untag_resource(Resource=Resource, TagKeys=remove, **authargs)\n    if removed is False:\n        log.error('Failed to remove tags (%s) from CloudFront resource `%s`.', remove, Resource)\n        return False\n    add = {k: v for k, v in Tags.items() if current.get(k) != v}\n    added = tag_resource(Resource=Resource, Tags=add, **authargs)\n    if added is False:\n        log.error('Failed to add tags (%s) to CloudFront resource `%s`.', add, Resource)\n        return False\n    return True", "output": "Enforce a given set of tags on a CloudFront resource:  adding, removing, or changing them\n    as necessary to ensure the resource's tags are exactly and only those specified.\n\n    Resource\n        The ARN of the affected CloudFront resource.\n\n    Tags\n        Dict of {'Tag': 'Value', ...} providing the tags to be enforced.\n\n    region\n        Region to connect to.\n\n    key\n        Secret key to use.\n\n    keyid\n        Access key to use.\n\n    profile\n        Dict, or pillar key pointing to a dict, containing AWS region/key/keyid.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_cloudfront.enforce_tags Tags='{Owner: Infra, Role: salt_master}' \\\\\n                Resource='arn:aws:cloudfront::012345678012:distribution/ETLNABCDEF123'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_lib(self, version):\n        \"\"\"\n        \n        \"\"\"\n        if os.path.exists(POETRY_LIB_BACKUP):\n            shutil.rmtree(POETRY_LIB_BACKUP)\n\n        # Backup the current installation\n        if os.path.exists(POETRY_LIB):\n            shutil.copytree(POETRY_LIB, POETRY_LIB_BACKUP)\n            shutil.rmtree(POETRY_LIB)\n\n        try:\n            self._make_lib(version)\n        except Exception:\n            if not os.path.exists(POETRY_LIB_BACKUP):\n                raise\n\n            shutil.copytree(POETRY_LIB_BACKUP, POETRY_LIB)\n            shutil.rmtree(POETRY_LIB_BACKUP)\n\n            raise\n        finally:\n            if os.path.exists(POETRY_LIB_BACKUP):\n                shutil.rmtree(POETRY_LIB_BACKUP)", "output": "Packs everything into a single lib/ directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fill(self, background_shape, img):\n        \"\"\"\n        \n        \"\"\"\n        background_shape = tuple(background_shape)\n        return self._fill(background_shape, img)", "output": "Return a proper background image of background_shape, given img.\n\n        Args:\n            background_shape (tuple): a shape (h, w)\n            img: an image\n        Returns:\n            a background image", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_np(v):\n    ''''''\n    if isinstance(v, float): return np.array(v)\n    if isinstance(v, (np.ndarray, np.generic)): return v\n    if isinstance(v, (list,tuple)): return [to_np(o) for o in v]\n    if isinstance(v, Variable): v=v.data\n    if torch.cuda.is_available():\n        if is_half_tensor(v): v=v.float()\n    if isinstance(v, torch.FloatTensor): v=v.float()\n    return v.cpu().numpy()", "output": "returns an np.array object given an input of np.array, list, tuple, torch variable or tensor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_recent_repeated_responses(chatbot, conversation, sample=10, threshold=3, quantity=3):\n    \"\"\"\n    \n    \"\"\"\n    from collections import Counter\n\n    # Get the most recent statements from the conversation\n    conversation_statements = list(chatbot.storage.filter(\n        conversation=conversation,\n        order_by=['id']\n    ))[sample * -1:]\n\n    text_of_recent_responses = [\n        statement.text for statement in conversation_statements\n    ]\n\n    counter = Counter(text_of_recent_responses)\n\n    # Find the n most common responses from the conversation\n    most_common = counter.most_common(quantity)\n\n    return [\n        counted[0] for counted in most_common\n        if counted[1] >= threshold\n    ]", "output": "A filter that eliminates possibly repetitive responses to prevent\n    a chat bot from repeating statements that it has recently said.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(app_id):\n    '''\n    \n    '''\n    cmd = 'sqlite3 \"/Library/Application Support/com.apple.TCC/TCC.db\" ' \\\n          '\"DELETE from access where client=\\'{0}\\'\"'.format(app_id)\n    call = __salt__['cmd.run_all'](\n        cmd,\n        output_loglevel='debug',\n        python_shell=False\n    )\n\n    if call['retcode'] != 0:\n        comment = ''\n        if 'stderr' in call:\n            comment += call['stderr']\n        if 'stdout' in call:\n            comment += call['stdout']\n\n        raise CommandExecutionError('Error removing app: {0}'.format(comment))\n\n    return True", "output": "Remove a bundle ID or command as being allowed to use assistive access.\n\n    app_id\n        The bundle ID or command to remove from assistive access list.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' assistive.remove /usr/bin/osascript\n        salt '*' assistive.remove com.smileonmymac.textexpander", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def index_fields(self, vocab: Vocabulary) -> None:\n        \"\"\"\n        \n        \"\"\"\n        if not self.indexed:\n            self.indexed = True\n            for field in self.fields.values():\n                field.index(vocab)", "output": "Indexes all fields in this ``Instance`` using the provided ``Vocabulary``.\n        This `mutates` the current object, it does not return a new ``Instance``.\n        A ``DataIterator`` will call this on each pass through a dataset; we use the ``indexed``\n        flag to make sure that indexing only happens once.\n\n        This means that if for some reason you modify your vocabulary after you've\n        indexed your instances, you might get unexpected behavior.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lock(backend=None, remote=None):\n    '''\n    \n    '''\n    fileserver = salt.fileserver.Fileserver(__opts__)\n    locked, errors = fileserver.lock(back=backend, remote=remote)\n    ret = {}\n    if locked:\n        ret['locked'] = locked\n    if errors:\n        ret['errors'] = errors\n    if not ret:\n        return 'No locks were set'\n    return ret", "output": ".. versionadded:: 2015.5.0\n\n    Set a fileserver update lock for VCS fileserver backends (:mod:`git\n    <salt.fileserver.gitfs>`, :mod:`hg <salt.fileserver.hgfs>`, :mod:`svn\n    <salt.fileserver.svnfs>`).\n\n    .. note::\n\n        This will only operate on enabled backends (those configured in\n        :conf_master:`fileserver_backend`).\n\n    backend\n        Only set the update lock for the specified backend(s).\n\n    remote\n        If not None, then any remotes which contain the passed string will have\n        their lock cleared. For example, a ``remote`` value of ``*github.com*``\n        will remove the lock from all github.com remotes.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run fileserver.lock\n        salt-run fileserver.lock backend=git,hg\n        salt-run fileserver.lock backend=git remote='*github.com*'\n        salt-run fileserver.lock remote=bitbucket", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_order_params(self,\n                              asset,\n                              amount,\n                              limit_price,\n                              stop_price,\n                              style):\n        \"\"\"\n        \n        \"\"\"\n\n        if not self.initialized:\n            raise OrderDuringInitialize(\n                msg=\"order() can only be called from within handle_data()\"\n            )\n\n        if style:\n            if limit_price:\n                raise UnsupportedOrderParameters(\n                    msg=\"Passing both limit_price and style is not supported.\"\n                )\n\n            if stop_price:\n                raise UnsupportedOrderParameters(\n                    msg=\"Passing both stop_price and style is not supported.\"\n                )\n\n        for control in self.trading_controls:\n            control.validate(asset,\n                             amount,\n                             self.portfolio,\n                             self.get_datetime(),\n                             self.trading_client.current_data)", "output": "Helper method for validating parameters to the order API function.\n\n        Raises an UnsupportedOrderParameters if invalid arguments are found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_account(self, account):\n        ''\n        if account.account_cookie not in self.account_list:\n            if self.cash_available > account.init_cash:\n                account.portfolio_cookie = self.portfolio_cookie\n                account.user_cookie = self.user_cookie\n                self.cash.append(self.cash_available - account.init_cash)\n                self.account_list.append(account.account_cookie)\n                account.save()\n                return account\n        else:\n            pass", "output": "portfolio add a account/stratetgy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def upgrade(self, using=None, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        return self._get_connection(using).indices.upgrade(index=self._name, **kwargs)", "output": "Upgrade the index to the latest format.\n\n        Any additional keyword arguments will be passed to\n        ``Elasticsearch.indices.upgrade`` unchanged.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_char_states(self, char_embed, is_training, reuse, char_ids, char_lengths):\n        \"\"\"\"\"\"\n        max_char_length = self.cfg.max_char_length\n\n        inputs = dropout(tf.nn.embedding_lookup(char_embed, char_ids),\n                         self.cfg.dropout, is_training)\n        inputs = tf.reshape(\n            inputs, shape=[max_char_length, -1, self.cfg.char_embed_dim])\n        char_lengths = tf.reshape(char_lengths, shape=[-1])\n        with tf.variable_scope('char_encoding', reuse=reuse):\n            cell_fw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            cell_bw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            _, (left_right, right_left) = tf.nn.bidirectional_dynamic_rnn(\n                cell_fw=cell_fw,\n                cell_bw=cell_bw,\n                sequence_length=char_lengths,\n                inputs=inputs,\n                time_major=True,\n                dtype=tf.float32\n            )\n\n        left_right = tf.reshape(left_right, shape=[-1, self.cfg.char_embed_dim])\n\n        right_left = tf.reshape(right_left, shape=[-1, self.cfg.char_embed_dim])\n\n        states = tf.concat([left_right, right_left], axis=1)\n        out_shape = tf.shape(char_ids)[1:3]\n        out_shape = tf.concat([out_shape, tf.constant(\n            value=[self.cfg.char_embed_dim * 2], dtype=tf.int32)], axis=0)\n        return tf.reshape(states, shape=out_shape)", "output": "Build char embedding network for the QA model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _linux_wwns():\n    '''\n    \n    '''\n    ret = []\n    for fc_file in glob.glob('/sys/class/fc_host/*/port_name'):\n        with salt.utils.files.fopen(fc_file, 'r') as _wwn:\n            content = _wwn.read()\n            for line in content.splitlines():\n                ret.append(line.rstrip()[2:])\n    return ret", "output": "Return Fibre Channel port WWNs from a Linux host.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_default_storage_policy_of_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Listing the default storage policy of datastore \\'%s\\'', datastore)\n    # Find datastore\n    target_ref = _get_proxy_target(service_instance)\n    ds_refs = salt.utils.vmware.get_datastores(service_instance, target_ref,\n                                               datastore_names=[datastore])\n    if not ds_refs:\n        raise VMwareObjectRetrievalError('Datastore \\'{0}\\' was not '\n                                         'found'.format(datastore))\n    profile_manager = salt.utils.pbm.get_profile_manager(service_instance)\n    policy = salt.utils.pbm.get_default_storage_policy_of_datastore(\n        profile_manager, ds_refs[0])\n    return _get_policy_dict(policy)", "output": "Returns a list of datastores assign the the storage policies.\n\n    datastore\n        Name of the datastore to assign.\n        The datastore needs to be visible to the VMware entity the proxy\n        points to.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.list_default_storage_policy_of_datastore datastore=ds1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _SkipFieldValue(tokenizer):\n  \"\"\"\n  \"\"\"\n  # String/bytes tokens can come in multiple adjacent string literals.\n  # If we can consume one, consume as many as we can.\n  if tokenizer.TryConsumeByteString():\n    while tokenizer.TryConsumeByteString():\n      pass\n    return\n\n  if (not tokenizer.TryConsumeIdentifier() and\n      not _TryConsumeInt64(tokenizer) and not _TryConsumeUint64(tokenizer) and\n      not tokenizer.TryConsumeFloat()):\n    raise ParseError('Invalid field value: ' + tokenizer.token)", "output": "Skips over a field value.\n\n  Args:\n    tokenizer: A tokenizer to parse the field name and values.\n\n  Raises:\n    ParseError: In case an invalid field value is found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        # for compatibility with higher dims\n        if axis != 0:\n            raise ValueError(\"cannot reindex series on non-zero axis!\")\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self.reindex(index=labels, **kwargs)", "output": "Conform Series to new index with optional filling logic.\n\n        .. deprecated:: 0.21.0\n            Use ``Series.reindex`` instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_show(id=None, name=None, profile=None):  # pylint: disable=C0103\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    ret = {}\n    if name:\n        for image in g_client.images.list():\n            if image.name == name:\n                id = image.id  # pylint: disable=C0103\n                continue\n    if not id:\n        return {\n            'result': False,\n            'comment':\n                'Unable to resolve image ID '\n                'for name \\'{0}\\''.format(name)\n            }\n    try:\n        image = g_client.images.get(id)\n    except exc.HTTPNotFound:\n        return {\n            'result': False,\n            'comment': 'No image with ID {0}'.format(id)\n            }\n    log.debug(\n        'Properties of image %s:\\n%s',\n        image.name, pprint.PrettyPrinter(indent=4).pformat(image)\n    )\n\n    schema = image_schema(profile=profile)\n    if len(schema.keys()) == 1:\n        schema = schema['image']\n    for key in schema:\n        if key in image:\n            ret[key] = image[key]\n    return ret", "output": "Return details about a specific image (glance image-show)\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.image_show", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_label(label_data):\n    \"\"\"\n    \"\"\"\n    systole = label_data[:, 1]\n    diastole = label_data[:, 2]\n    systole_encode = np.array([\n            (x < np.arange(600)) for x in systole\n        ], dtype=np.uint8)\n    diastole_encode = np.array([\n            (x < np.arange(600)) for x in diastole\n        ], dtype=np.uint8)\n    return systole_encode, diastole_encode", "output": "Run encoding to encode the label into the CDF target.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delivery_report(err, msg):\n    '''  '''\n    if err is not None:\n        log.error('Message delivery failed: %s', err)\n    else:\n        log.debug('Message delivered to %s [%s]', msg.topic(), msg.partition())", "output": "Called once for each message produced to indicate delivery result.\n        Triggered by poll() or flush().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hosts(self, host):\n        \"\"\"\n        \n        \"\"\"\n        try:\n            return shlex.split(host)\n        except ValueError:\n            raise Exception(\"Unparsable host {}\".format(host))", "output": "Return a list of host_names from host value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _virt_call(domain, function, section, comment,\n               connection=None, username=None, password=None, **kwargs):\n    '''\n    \n    '''\n    ret = {'name': domain, 'changes': {}, 'result': True, 'comment': ''}\n    targeted_domains = fnmatch.filter(__salt__['virt.list_domains'](), domain)\n    changed_domains = list()\n    ignored_domains = list()\n    for targeted_domain in targeted_domains:\n        try:\n            response = __salt__['virt.{0}'.format(function)](targeted_domain,\n                                                             connection=connection,\n                                                             username=username,\n                                                             password=password,\n                                                             **kwargs)\n            if isinstance(response, dict):\n                response = response['name']\n            changed_domains.append({'domain': targeted_domain, function: response})\n        except libvirt.libvirtError as err:\n            ignored_domains.append({'domain': targeted_domain, 'issue': six.text_type(err)})\n    if not changed_domains:\n        ret['result'] = False\n        ret['comment'] = 'No changes had happened'\n        if ignored_domains:\n            ret['changes'] = {'ignored': ignored_domains}\n    else:\n        ret['changes'] = {section: changed_domains}\n        ret['comment'] = comment\n\n    return ret", "output": "Helper to call the virt functions. Wildcards supported.\n\n    :param domain:\n    :param function:\n    :param section:\n    :param comment:\n    :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smooth_distribution(p, eps=0.0001):\n    \"\"\"\n    \"\"\"\n    is_zeros = (p == 0).astype(np.float32)\n    is_nonzeros = (p != 0).astype(np.float32)\n    n_zeros = is_zeros.sum()\n    n_nonzeros = p.size - n_zeros\n    if not n_nonzeros:\n        raise ValueError('The discrete probability distribution is malformed. All entries are 0.')\n    eps1 = eps * float(n_zeros) / float(n_nonzeros)\n    assert eps1 < 1.0, 'n_zeros=%d, n_nonzeros=%d, eps1=%f' % (n_zeros, n_nonzeros, eps1)\n    hist = p.astype(np.float32)\n    hist += eps * is_zeros + (-eps1) * is_nonzeros\n    assert (hist <= 0).sum() == 0\n    return hist", "output": "Given a discrete distribution (may have not been normalized to 1),\n    smooth it by replacing zeros with eps multiplied by a scaling factor and taking the\n    corresponding amount off the non-zero values.\n    Ref: http://web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pdb_has_stopped(self, fname, lineno, shellwidget):\r\n        \"\"\"\"\"\"\r\n        # This is a unique form of the edit_goto signal that is intended to\r\n        # prevent keyboard input from accidentally entering the editor\r\n        # during repeated, rapid entry of debugging commands.\r\n        self.edit_goto[str, int, str, bool].emit(fname, lineno, '', False)\r\n        self.activateWindow()\r\n        shellwidget._control.setFocus()", "output": "Python debugger has just stopped at frame (fname, lineno)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _gather_group_members(group, groups, users):\n    '''\n    \n    '''\n    _group = __salt__['group.info'](group)\n\n    if not _group:\n        log.warning('Group %s does not exist, ignoring.', group)\n        return\n\n    for member in _group['members']:\n        if member not in users:\n            users[member] = groups[group]", "output": "Gather group members", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table(self):\n        \"\"\"\n        \n        \"\"\"\n        return pd.DataFrame([\n            self.message,\n        ]).set_index(\n            'account_cookie',\n            drop=False\n        ).T", "output": "\u6253\u5370\u51faaccount\u7684\u5185\u5bb9", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vb_get_network_adapters(machine_name=None, machine=None):\n    '''\n    \n    '''\n\n    if machine_name:\n        machine = vb_get_box().findMachine(machine_name)\n    network_adapters = []\n\n    for i in range(vb_get_max_network_slots()):\n        try:\n            inetwork_adapter = machine.getNetworkAdapter(i)\n            network_adapter = vb_xpcom_to_attribute_dict(\n                inetwork_adapter, 'INetworkAdapter'\n            )\n            network_adapter['properties'] = inetwork_adapter.getProperties('')\n            network_adapters.append(network_adapter)\n        except Exception:\n            pass\n\n    return network_adapters", "output": "A valid machine_name or a machine is needed to make this work!\n\n    @param machine_name:\n    @type machine_name: str\n    @param machine:\n    @type machine: IMachine\n    @return: INetorkAdapter's converted to dicts\n    @rtype: [dict]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_logger(self):\n        \"\"\"\"\"\"\n\n        if not self.result_logger:\n            if not os.path.exists(self.local_dir):\n                os.makedirs(self.local_dir)\n            if not self.logdir:\n                self.logdir = tempfile.mkdtemp(\n                    prefix=\"{}_{}\".format(\n                        str(self)[:MAX_LEN_IDENTIFIER], date_str()),\n                    dir=self.local_dir)\n            elif not os.path.exists(self.logdir):\n                os.makedirs(self.logdir)\n\n            self.result_logger = UnifiedLogger(\n                self.config,\n                self.logdir,\n                upload_uri=self.upload_dir,\n                loggers=self.loggers,\n                sync_function=self.sync_function)", "output": "Init logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_thing_type(thingTypeName,\n            region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_thing_type(thingTypeName=thingTypeName)\n        return {'deleted': True}\n    except ClientError as e:\n        err = __utils__['boto3.get_error'](e)\n        if e.response.get('Error', {}).get('Code') == 'ResourceNotFoundException':\n            return {'deleted': True}\n        return {'deleted': False, 'error': err}", "output": "Given a thing type name, delete it.\n\n    Returns {deleted: true} if the thing type was deleted and returns\n    {deleted: false} if the thing type was not deleted.\n\n    .. versionadded:: 2016.11.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.delete_thing_type mythingtype", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _convert_parsed_show_output(parsed_data):\n    '''\n    \n    '''\n    # Match lines like \"main: xenial [snapshot]\" or \"test [local]\".\n    source_pattern = re.compile(r'(?:(?P<component>\\S+):)?\\s*(?P<name>\\S+)\\s+\\[(?P<type>\\S+)\\]')\n    sources = list()\n\n    if 'architectures' in parsed_data:\n        parsed_data['architectures'] = [item.strip() for item in parsed_data['architectures'].split()]\n        parsed_data['architectures'] = sorted(parsed_data['architectures'])\n\n    for source in parsed_data.get('sources', []):\n        # Retain the key/value of only the matching named groups.\n        matches = source_pattern.search(source)\n\n        if matches:\n            groups = matches.groupdict()\n            sources.append({key: groups[key] for key in groups if groups[key]})\n    if sources:\n        parsed_data['sources'] = sources\n\n    return parsed_data", "output": "Convert matching string values to lists/dictionaries.\n\n    :param dict parsed_data: The text of the command output that needs to be parsed.\n\n    :return: A dictionary containing the modified configuration data.\n    :rtype: dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enter_maintenance_mode(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The enter_maintenance_mode function must be called with '\n            '-f or --function.'\n        )\n\n    host_name = kwargs.get('host') if kwargs and 'host' in kwargs else None\n\n    host_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.HostSystem, host_name)\n\n    if not host_name or not host_ref:\n        raise SaltCloudSystemExit(\n            'You must specify a valid name of the host system.'\n        )\n\n    if host_ref.runtime.inMaintenanceMode:\n        return {host_name: 'already in maintenance mode'}\n\n    try:\n        task = host_ref.EnterMaintenanceMode(timeout=0, evacuatePoweredOffVms=True)\n        salt.utils.vmware.wait_for_task(task, host_name, 'enter maintenance mode')\n    except Exception as exc:\n        log.error(\n            'Error while moving host system %s in maintenance mode: %s',\n            host_name, exc,\n            # Show the traceback if the debug logging level is enabled\n            exc_info_on_loglevel=logging.DEBUG\n        )\n        return {host_name: 'failed to enter maintenance mode'}\n\n    return {host_name: 'entered maintenance mode'}", "output": "To put the specified host system in maintenance mode in this VMware environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f enter_maintenance_mode my-vmware-config host=\"myHostSystemName\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put(self, entity):\n        \"\"\"\n        \"\"\"\n        if self._status != self._IN_PROGRESS:\n            raise ValueError(\"Batch must be in progress to put()\")\n\n        if entity.key is None:\n            raise ValueError(\"Entity must have a key\")\n\n        if self.project != entity.key.project:\n            raise ValueError(\"Key must be from same project as batch\")\n\n        if entity.key.is_partial:\n            entity_pb = self._add_partial_key_entity_pb()\n            self._partial_key_entities.append(entity)\n        else:\n            entity_pb = self._add_complete_key_entity_pb()\n\n        _assign_entity_to_pb(entity_pb, entity)", "output": "Remember an entity's state to be saved during :meth:`commit`.\n\n        .. note::\n           Any existing properties for the entity will be replaced by those\n           currently set on this instance.  Already-stored properties which do\n           not correspond to keys set on this instance will be removed from\n           the datastore.\n\n        .. note::\n           Property values which are \"text\" ('unicode' in Python2, 'str' in\n           Python3) map to 'string_value' in the datastore;  values which are\n           \"bytes\" ('str' in Python2, 'bytes' in Python3) map to 'blob_value'.\n\n        When an entity has a partial key, calling :meth:`commit` sends it as\n        an ``insert`` mutation and the key is completed. On return,\n        the key for the ``entity`` passed in is updated to match the key ID\n        assigned by the server.\n\n        :type entity: :class:`google.cloud.datastore.entity.Entity`\n        :param entity: the entity to be saved.\n\n        :raises: :class:`~exceptions.ValueError` if the batch is not in\n                 progress, if entity has no key assigned, or if the key's\n                 ``project`` does not match ours.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def np_to_list(elem):\n  \"\"\"\"\"\"\n  if isinstance(elem, list):\n    return elem\n  elif isinstance(elem, tuple):\n    return list(elem)\n  elif isinstance(elem, np.ndarray):\n    return list(elem)\n  else:\n    raise ValueError(\n        'Input elements of a sequence should be either a numpy array, a '\n        'python list or tuple. Got {}'.format(type(elem)))", "output": "Returns list from list, tuple or ndarray.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_permission(FunctionName, StatementId, Qualifier=None,\n                      region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        kwargs = {}\n        if Qualifier is not None:\n            kwargs['Qualifier'] = Qualifier\n        conn.remove_permission(FunctionName=FunctionName, StatementId=StatementId,\n                               **kwargs)\n        return {'updated': True}\n    except ClientError as e:\n        return {'updated': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove a permission from a lambda function.\n\n    Returns {removed: true} if the permission was removed and returns\n    {removed: False} if the permission was not removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_lamba.remove_permission my_function my_id", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, fn:PathOrStr):\n        \"\"\n        x = image2np(self.data*255).astype(np.uint8)\n        PIL.Image.fromarray(x).save(fn)", "output": "Save the image to `fn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dir_list(self, tgt_env):\n        '''\n        \n        '''\n        def _traverse(tree, blobs, prefix):\n            '''\n            Traverse through a pygit2 Tree object recursively, accumulating all\n            the empty directories within it in the \"blobs\" list\n            '''\n            for entry in iter(tree):\n                if entry.oid not in self.repo:\n                    # Entry is a submodule, skip it\n                    continue\n                blob = self.repo[entry.oid]\n                if not isinstance(blob, pygit2.Tree):\n                    continue\n                blobs.append(\n                    salt.utils.path.join(prefix, entry.name, use_posixpath=True)\n                )\n                if blob:\n                    _traverse(\n                        blob, blobs, salt.utils.path.join(\n                            prefix, entry.name, use_posixpath=True)\n                    )\n\n        ret = set()\n        tree = self.get_tree(tgt_env)\n        if not tree:\n            return ret\n        if self.root(tgt_env):\n            try:\n                oid = tree[self.root(tgt_env)].oid\n                tree = self.repo[oid]\n            except KeyError:\n                return ret\n            if not isinstance(tree, pygit2.Tree):\n                return ret\n            relpath = lambda path: os.path.relpath(path, self.root(tgt_env))\n        else:\n            relpath = lambda path: path\n        blobs = []\n        if tree:\n            _traverse(tree, blobs, self.root(tgt_env))\n        add_mountpoint = lambda path: salt.utils.path.join(\n            self.mountpoint(tgt_env), path, use_posixpath=True)\n        for blob in blobs:\n            ret.add(add_mountpoint(relpath(blob)))\n        if self.mountpoint(tgt_env):\n            ret.add(self.mountpoint(tgt_env))\n        return ret", "output": "Get a list of directories for the target environment using pygit2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install_translator(qapp):\r\n    \"\"\"\"\"\"\r\n    global QT_TRANSLATOR\r\n    if QT_TRANSLATOR is None:\r\n        qt_translator = QTranslator()\r\n        if qt_translator.load(\"qt_\"+QLocale.system().name(),\r\n                      QLibraryInfo.location(QLibraryInfo.TranslationsPath)):\r\n            QT_TRANSLATOR = qt_translator # Keep reference alive\r\n    if QT_TRANSLATOR is not None:\r\n        qapp.installTranslator(QT_TRANSLATOR)", "output": "Install Qt translator to the QApplication instance", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_sample_weight(pipeline_steps, sample_weight=None):\n    \"\"\"\n\n    \"\"\"\n    sample_weight_dict = {}\n    if not isinstance(sample_weight, type(None)):\n        for (pname, obj) in pipeline_steps:\n            if inspect.getargspec(obj.fit).args.count('sample_weight'):\n                step_sw = pname + '__sample_weight'\n                sample_weight_dict[step_sw] = sample_weight\n\n    if sample_weight_dict:\n        return sample_weight_dict\n    else:\n        return None", "output": "Recursively iterates through all objects in the pipeline and sets sample weight.\n\n    Parameters\n    ----------\n    pipeline_steps: array-like\n        List of (str, obj) tuples from a scikit-learn pipeline or related object\n    sample_weight: array-like\n        List of sample weight\n    Returns\n    -------\n    sample_weight_dict:\n        A dictionary of sample_weight", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_resource_config(cls, resource):\n        \"\"\"\n        \"\"\"\n        if \"jobReference\" not in resource or \"jobId\" not in resource[\"jobReference\"]:\n            raise KeyError(\n                \"Resource lacks required identity information: \"\n                '[\"jobReference\"][\"jobId\"]'\n            )\n        job_id = resource[\"jobReference\"][\"jobId\"]\n        if (\n            \"configuration\" not in resource\n            or cls._JOB_TYPE not in resource[\"configuration\"]\n        ):\n            raise KeyError(\n                \"Resource lacks required configuration: \"\n                '[\"configuration\"][\"%s\"]' % cls._JOB_TYPE\n            )\n        return job_id, resource[\"configuration\"]", "output": "Helper for :meth:`from_api_repr`\n\n        :type resource: dict\n        :param resource: resource for the job\n\n        :rtype: dict\n        :returns: tuple (string, dict), where the first element is the\n                  job ID and the second contains job-specific configuration.\n        :raises: :class:`KeyError` if the resource has no identifier, or\n                 is missing the appropriate configuration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def requote_redirect_url(self, val: bool) -> None:\n        \"\"\"\"\"\"\n        warnings.warn(\"session.requote_redirect_url modification \"\n                      \"is deprecated #2778\",\n                      DeprecationWarning,\n                      stacklevel=2)\n        self._requote_redirect_url = val", "output": "Do URL requoting on redirection handling.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def str_decode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    \n    \"\"\"\n    if encoding in _cpython_optimized_decoders:\n        # CPython optimized implementation\n        f = lambda x: x.decode(encoding, errors)\n    else:\n        decoder = codecs.getdecoder(encoding)\n        f = lambda x: decoder(x, errors)[0]\n    return _na_map(f, arr)", "output": "Decode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\n    python3.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    Series or Index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping():\n    '''\n    \n    '''\n\n    dev = conn()\n    # Check that the underlying netconf connection still exists.\n    if dev._conn is None:\n        return False\n\n    # call rpc only if ncclient queue is empty. If not empty that means other\n    # rpc call is going on.\n    if hasattr(dev._conn, '_session'):\n        if dev._conn._session._transport.is_active():\n            # there is no on going rpc call. buffer tell can be 1 as it stores\n            # remaining char after \"]]>]]>\" which can be a new line char\n            if dev._conn._session._buffer.tell() <= 1 and \\\n                    dev._conn._session._q.empty():\n                return _rpc_file_list(dev)\n            else:\n                log.debug('skipped ping() call as proxy already getting data')\n                return True\n        else:\n            # ssh connection is lost\n            return False\n    else:\n        # other connection modes, like telnet\n        return _rpc_file_list(dev)", "output": "Ping?  Pong!", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next_frame_basic_recurrent():\n  \"\"\"\"\"\"\n  hparams = basic_stochastic.next_frame_basic_stochastic_discrete()\n  hparams.filter_double_steps = 2\n  hparams.hidden_size = 64\n  hparams.video_num_input_frames = 4\n  hparams.video_num_target_frames = 4\n  hparams.concat_internal_states = False\n  hparams.add_hparam(\"num_lstm_layers\", 2)\n  hparams.add_hparam(\"num_lstm_filters\", 256)\n  return hparams", "output": "Basic 2-frame recurrent model with stochastic tower.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def poll_event(self):\n        \"\"\"\n        \"\"\"\n        try:\n            msg = await self.recv()\n            await self.received_message(msg)\n        except websockets.exceptions.ConnectionClosed as exc:\n            if self._can_handle_close(exc.code):\n                log.info('Websocket closed with %s (%s), attempting a reconnect.', exc.code, exc.reason)\n                raise ResumeWebSocket(self.shard_id) from exc\n            else:\n                log.info('Websocket closed with %s (%s), cannot reconnect.', exc.code, exc.reason)\n                raise ConnectionClosed(exc, shard_id=self.shard_id) from exc", "output": "Polls for a DISPATCH event and handles the general gateway loop.\n\n        Raises\n        ------\n        ConnectionClosed\n            The websocket connection was terminated for unhandled reasons.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_progress(opts, out, progress):\n    '''\n    \n    '''\n    return salt.loader.raw_mod(opts,\n                                out,\n                                'rawmodule',\n                                mod='output')['{0}.progress_iter'.format(out)](progress)", "output": "Get the progress bar from the given outputter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete(queue_id):\n    '''\n    \n\n    '''\n\n    ret = {'message': '',\n           'result': True\n           }\n\n    if not queue_id:\n        log.error('Require argument queue_id')\n\n    if not queue_id == 'ALL':\n        queue = show_queue()\n        _message = None\n        for item in queue:\n            if item['queue_id'] == queue_id:\n                _message = item\n\n        if not _message:\n            ret['message'] = 'No message in queue with ID {0}'.format(queue_id)\n            ret['result'] = False\n            return ret\n\n    cmd = 'postsuper -d {0}'.format(queue_id)\n    result = __salt__['cmd.run_all'](cmd)\n\n    if result['retcode'] == 0:\n        if queue_id == 'ALL':\n            ret['message'] = 'Successfully removed all messages'\n        else:\n            ret['message'] = 'Successfully removed message with queue id {0}'.format(queue_id)\n    else:\n        if queue_id == 'ALL':\n            ret['message'] = 'Unable to removed all messages'\n        else:\n            ret['message'] = 'Unable to remove message with queue id {0}: {1}'.format(queue_id, result['stderr'])\n    return ret", "output": "Delete message(s) from the mail queue\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' postfix.delete 5C33CA0DEA\n\n        salt '*' postfix.delete ALL", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def options(self, **options):\n        \"\"\"\n        \"\"\"\n        for k in options:\n            self._jreader = self._jreader.option(k, to_str(options[k]))\n        return self", "output": "Adds input options for the underlying data source.\n\n        You can set the following option(s) for reading files:\n            * ``timeZone``: sets the string that indicates a timezone to be used to parse timestamps\n                in the JSON/CSV datasources or partition values.\n                If it isn't set, it uses the default value, session local timezone.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_current_text(self):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        text = self.currentText()\r\n        if osp.isdir(text) and text:\r\n            if text[-1] == os.sep:\r\n                text = text[:-1]\r\n        self.add_text(text)", "output": "Add current text to combo box history (convenient method).\r\n        If path ends in os separator (\"\\\" windows, \"/\" unix) remove it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def highlight_block(self, text):\r\n        \"\"\"\"\"\"\r\n        text = to_text_string(text)\r\n        inside_comment = tbh.get_state(self.currentBlock().previous()) == self.INSIDE_COMMENT\r\n        self.setFormat(0, len(text),\r\n                       self.formats[\"comment\" if inside_comment else \"normal\"])\r\n        \r\n        match = self.PROG.search(text)\r\n        index = 0\r\n        while match:\r\n            for key, value in list(match.groupdict().items()):\r\n                if value:\r\n                    start, end = match.span(key)\r\n                    index += end-start\r\n                    if key == \"comment_start\":\r\n                        inside_comment = True\r\n                        self.setFormat(start, len(text)-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"comment_end\":\r\n                        inside_comment = False\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif inside_comment:\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"define\":\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"number\"])\r\n                    else:\r\n                        self.setFormat(start, end-start, self.formats[key])\r\n                    \r\n            match = self.PROG.search(text, match.end())\r\n        \r\n        self.highlight_spaces(text)\r\n        \r\n        last_state = self.INSIDE_COMMENT if inside_comment else self.NORMAL\r\n        tbh.set_state(self.currentBlock(), last_state)", "output": "Implement highlight specific for C/C++.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def normalVectorRDD(sc, numRows, numCols, numPartitions=None, seed=None):\n        \"\"\"\n        \n        \"\"\"\n        return callMLlibFunc(\"normalVectorRDD\", sc._jsc, numRows, numCols, numPartitions, seed)", "output": "Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the standard normal distribution.\n\n        :param sc: SparkContext used to create the RDD.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ `N(0.0, 1.0)`.\n\n        >>> import numpy as np\n        >>> mat = np.matrix(RandomRDDs.normalVectorRDD(sc, 100, 100, seed=1).collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - 0.0) < 0.1\n        True\n        >>> abs(mat.std() - 1.0) < 0.1\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect(self, pattern, timeout=-1):\n        \"\"\"\"\"\"\n\n        if self.blocking:\n            raise RuntimeError(\"expect can only be used on non-blocking commands.\")\n\n        try:\n            self.subprocess.expect(pattern=pattern, timeout=timeout)\n        except pexpect.EOF:\n            pass", "output": "Waits on the given pattern to appear in std_out", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _process_all_1(self, texts:Collection[str]) -> List[List[str]]:\n        \"\"\n        tok = self.tok_func(self.lang)\n        if self.special_cases: tok.add_special_cases(self.special_cases)\n        return [self.process_text(str(t), tok) for t in texts]", "output": "Process a list of `texts` in one process.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_outputs(self):\n        \"\"\"\n        \"\"\"\n        out_size = mx_uint()\n        handles = ctypes.POINTER(NDArrayHandle)()\n        check_call(_LIB.MXExecutorOutputs(self.handle,\n                                          ctypes.byref(out_size), ctypes.byref(handles)))\n        num_output = out_size.value\n        outputs = [_ndarray_cls(NDArrayHandle(handles[i])) for i in range(num_output)]\n        return outputs", "output": "List all the output NDArray.\n\n        Returns\n        -------\n        A list of ndarray bound to the heads of executor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_np(self, x_val, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n\n    if self.sess is None:\n      raise ValueError(\"Cannot use `generate_np` when no `sess` was\"\n                       \" provided\")\n\n    packed = self.construct_variables(kwargs)\n    fixed, feedable, _, hash_key = packed\n\n    if hash_key not in self.graphs:\n      self.construct_graph(fixed, feedable, x_val, hash_key)\n    else:\n      # remove the None arguments, they are just left blank\n      for k in list(feedable.keys()):\n        if feedable[k] is None:\n          del feedable[k]\n\n    x, new_kwargs, x_adv = self.graphs[hash_key]\n\n    feed_dict = {x: x_val}\n\n    for name in feedable:\n      feed_dict[new_kwargs[name]] = feedable[name]\n\n    return self.sess.run(x_adv, feed_dict)", "output": "Generate adversarial examples and return them as a NumPy array.\n    Sub-classes *should not* implement this method unless they must\n    perform special handling of arguments.\n\n    :param x_val: A NumPy array with the original inputs.\n    :param **kwargs: optional parameters used by child classes.\n    :return: A NumPy array holding the adversarial examples.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_info(call=None, kwargs=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The image_info function must be called with -f or --function.'\n        )\n\n    if kwargs is None:\n        kwargs = {}\n\n    name = kwargs.get('name', None)\n    image_id = kwargs.get('image_id', None)\n\n    if image_id:\n        if name:\n            log.warning(\n                'Both the \\'image_id\\' and \\'name\\' arguments were provided. '\n                '\\'image_id\\' will take precedence.'\n            )\n    elif name:\n        image_id = get_image_id(kwargs={'name': name})\n    else:\n        raise SaltCloudSystemExit(\n            'The image_info function requires either a \\'name or an \\'image_id\\' '\n            'to be provided.'\n        )\n\n    server, user, password = _get_xml_rpc()\n    auth = ':'.join([user, password])\n\n    info = {}\n    response = server.one.image.info(auth, int(image_id))[1]\n    tree = _get_xml(response)\n    info[tree.find('NAME').text] = _xml_to_dict(tree)\n\n    return info", "output": "Retrieves information for a given image. Either a name or an image_id must be\n    supplied.\n\n    .. versionadded:: 2016.3.0\n\n    name\n        The name of the image for which to gather information. Can be used instead\n        of ``image_id``.\n\n    image_id\n        The ID of the image for which to gather information. Can be used instead of\n        ``name``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f image_info opennebula name=my-image\n        salt-cloud --function image_info opennebula image_id=5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _posix_split_name(self, name):\n        \"\"\"\n        \"\"\"\n        prefix = name[:LENGTH_PREFIX + 1]\n        while prefix and prefix[-1] != \"/\":\n            prefix = prefix[:-1]\n\n        name = name[len(prefix):]\n        prefix = prefix[:-1]\n\n        if not prefix or len(name) > LENGTH_NAME:\n            raise ValueError(\"name is too long\")\n        return prefix, name", "output": "Split a name longer than 100 chars into a prefix\n           and a name part.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_dictlist(data):\n    '''\n    \n    '''\n    if isinstance(data, list):\n        for element in data:\n            if isinstance(element, dict):\n                if len(element) != 1:\n                    return False\n            else:\n                return False\n        return True\n    return False", "output": "Returns True if data is a list of one-element dicts (as found in many SLS\n    schemas), otherwise returns False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_pb(self):\n        \"\"\"\n        \"\"\"\n        max_age = _helpers._timedelta_to_duration_pb(self.max_age)\n        return table_v2_pb2.GcRule(max_age=max_age)", "output": "Converts the garbage collection rule to a protobuf.\n\n        :rtype: :class:`.table_v2_pb2.GcRule`\n        :returns: The converted current object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_len(self, key):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        return len(data[key])", "output": "Return sequence length", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGValidateCtxt(self, ctxt, options):\n        \"\"\" \"\"\"\n        if ctxt is None: ctxt__o = None\n        else: ctxt__o = ctxt._o\n        ret = libxml2mod.xmlTextReaderRelaxNGValidateCtxt(self._o, ctxt__o, options)\n        return ret", "output": "Use RelaxNG schema context to validate the document as it\n          is processed. Activation is only possible before the first\n          Read(). If @ctxt is None, then RelaxNG schema validation is\n           deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _import_api():\n    '''\n    \n    '''\n    global api\n    full_url = 'https://{0}:{1}/pve-docs/api-viewer/apidoc.js'.format(url, port)\n    returned_data = requests.get(full_url, verify=verify_ssl)\n\n    re_filter = re.compile('(?<=pveapi =)(.*)(?=^;)', re.DOTALL | re.MULTILINE)\n    api_json = re_filter.findall(returned_data.text)[0]\n    api = salt.utils.json.loads(api_json)", "output": "Download https://<url>/pve-docs/api-viewer/apidoc.js\n    Extract content of pveapi var (json formated)\n    Load this json content into global variable \"api\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lst_avg(lst):\n    '''\n    \n    '''\n    salt.utils.versions.warn_until(\n        'Neon',\n        'This results of this function are currently being rounded.'\n        'Beginning in the Salt Neon release, results will no longer be '\n        'rounded and this warning will be removed.',\n        stacklevel=3\n    )\n\n    if not isinstance(lst, collections.Hashable):\n        return float(sum(lst)/len(lst))\n    return float(lst)", "output": "Returns the average value of a list.\n\n    .. code-block:: jinja\n\n        {% my_list = [1,2,3,4] -%}\n        {{ set my_list | avg }}\n\n    will be rendered as:\n\n    .. code-block:: yaml\n\n        2.5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_ssh_key(host,\n                username,\n                password,\n                protocol=None,\n                port=None,\n                certificate_verify=False):\n    '''\n    \n\n    '''\n    if protocol is None:\n        protocol = 'https'\n    if port is None:\n        port = 443\n\n    url = '{0}://{1}:{2}/host/ssh_root_authorized_keys'.format(protocol,\n                                                               host,\n                                                               port)\n    ret = {}\n    try:\n        result = salt.utils.http.query(url,\n                                       status=True,\n                                       text=True,\n                                       method='GET',\n                                       username=username,\n                                       password=password,\n                                       verify_ssl=certificate_verify)\n        if result.get('status') == 200:\n            ret['status'] = True\n            ret['key'] = result['text']\n        else:\n            ret['status'] = False\n            ret['Error'] = result['error']\n    except Exception as msg:\n        ret['status'] = False\n        ret['Error'] = msg\n\n    return ret", "output": "Retrieve the authorized_keys entry for root.\n    This function only works for ESXi, not vCenter.\n\n    :param host: The location of the ESXi Host\n    :param username: Username to connect as\n    :param password: Password for the ESXi web endpoint\n    :param protocol: defaults to https, can be http if ssl is disabled on ESXi\n    :param port: defaults to 443 for https\n    :param certificate_verify: If true require that the SSL connection present\n                               a valid certificate\n    :return: True if upload is successful\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vsphere.get_ssh_key my.esxi.host root bad-password certificate_verify=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_copy(self, connection):\n        \"\"\"\n        \n        \"\"\"\n        if not self.does_schema_exist(connection):\n            logger.info(\"Creating schema for %s\", self.table)\n            self.create_schema(connection)\n\n        if not self.does_table_exist(connection):\n            logger.info(\"Creating table %s\", self.table)\n            self.create_table(connection)\n\n        if self.enable_metadata_columns:\n            self._add_metadata_columns(connection)\n\n        if self.do_truncate_table:\n            logger.info(\"Truncating table %s\", self.table)\n            self.truncate_table(connection)\n\n        if self.do_prune():\n            logger.info(\"Removing %s older than %s from %s\", self.prune_column, self.prune_date, self.prune_table)\n            self.prune(connection)", "output": "Perform pre-copy sql - such as creating table, truncating, or removing data older than x.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_auto_dict(values, source='auto'):\n    '''\n    \n\n    '''\n    for name, value in values.items():\n        values[name] = from_auto(name, value, source)\n\n    return values", "output": "Pass an entire dictionary to from_auto\n\n    .. note::\n        The key will be passed as the name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def padded_neg_log_perplexity(predictions,\n                              labels,\n                              weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  num, den = common_layers.padded_cross_entropy(\n      predictions, labels, 0.0, weights_fn=weights_fn, reduce_sum=False)\n  return (-num, den)", "output": "Average log-perplexity exluding padding 0s. No smoothing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_common_type(types):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError('no types given')\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, (PandasExtensionDtype, ExtensionDtype))\n           for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype('datetime64[ns]')\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype('timedelta64[ns]')\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])", "output": "Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_properties_from_api_repr(self, resource):\n        \"\"\"\"\"\"\n        self.name = resource.get(\"name\")\n        self.number = resource[\"projectNumber\"]\n        self.labels = resource.get(\"labels\", {})\n        self.status = resource[\"lifecycleState\"]\n        if \"parent\" in resource:\n            self.parent = resource[\"parent\"]", "output": "Update specific properties from its API representation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join_cluster(host, user='rabbit', ram_node=None, runas=None):\n    '''\n    \n    '''\n    cmd = [RABBITMQCTL, 'join_cluster']\n    if ram_node:\n        cmd.append('--ram')\n    cmd.append('{0}@{1}'.format(user, host))\n\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    stop_app(runas)\n    res = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    start_app(runas)\n\n    return _format_response(res, 'Join')", "output": "Join a rabbit cluster\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.join_cluster rabbit.example.com rabbit", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_table_columns(metadata):\n    \"\"\" \n    \"\"\"\n    cols = OrderedDict()\n    for col in metadata.c:\n        name = str(col).rpartition(\".\")[2]\n        cols[name] = col.type.python_type.__name__\n    return cols", "output": "Extract columns names and python typos from metadata\n\n    Args:\n        metadata: Table metadata\n\n    Returns:\n        dict with columns names and python types", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespace_match(pattern: str, namespace: str):\n    \"\"\"\n    \n    \"\"\"\n    if pattern[0] == '*' and namespace.endswith(pattern[1:]):\n        return True\n    elif pattern == namespace:\n        return True\n    return False", "output": "Matches a namespace pattern against a namespace string.  For example, ``*tags`` matches\n    ``passage_tags`` and ``question_tags`` and ``tokens`` matches ``tokens`` but not\n    ``stemmed_tokens``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_element(tup, elem):\n    \"\"\"\n    \n    \"\"\"\n    try:\n        return tup, tup.index(elem)\n    except ValueError:\n        return tuple(chain(tup, (elem,))), len(tup)", "output": "Create a tuple containing all elements of tup, plus elem.\n\n    Returns the new tuple and the index of elem in the new tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_calltip(self, signature, doc='', parameter='', parameter_doc='',\r\n                     color=_DEFAULT_TITLE_COLOR, is_python=False):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        # Find position of calltip\r\n        point = self._calculate_position()\r\n\r\n        # Format text\r\n        tiptext, wrapped_lines = self._format_signature(\r\n            signature,\r\n            doc,\r\n            parameter,\r\n            parameter_doc,\r\n            color,\r\n            is_python,\r\n        )\r\n\r\n        self._update_stylesheet(self.calltip_widget)\r\n\r\n        # Show calltip\r\n        self.calltip_widget.show_tip(point, tiptext, wrapped_lines)", "output": "Show calltip.\r\n\r\n        Calltips look like tooltips but will not disappear if mouse hovers\r\n        them. They are useful for displaying signature information on methods\r\n        and functions.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def yank_fields_from_attrs(attrs, _as=None, sort=True):\n    \"\"\"\n    \n    \"\"\"\n    fields_with_names = []\n    for attname, value in list(attrs.items()):\n        field = get_field_as(value, _as)\n        if not field:\n            continue\n        fields_with_names.append((attname, field))\n\n    if sort:\n        fields_with_names = sorted(fields_with_names, key=lambda f: f[1])\n    return OrderedDict(fields_with_names)", "output": "Extract all the fields in given attributes (dict)\n    and return them ordered", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _remove_persistent_module(mod, comment):\n    '''\n    \n    '''\n    conf = _get_modules_conf()\n    mod_name = _strip_module_name(mod)\n    if not mod_name or mod_name not in mod_list(True):\n        return set()\n    escape_mod = re.escape(mod)\n    if comment:\n        __salt__['file.comment'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod))\n    else:\n        __salt__['file.sed'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod), '')\n    return set([mod_name])", "output": "Remove module from configuration file. If comment is true only comment line\n    where module is.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_dependencies_met():\n    \"\"\"\n    \n    \"\"\"\n    # Method added in `cryptography==1.1`; not available in older versions\n    from cryptography.x509.extensions import Extensions\n    if getattr(Extensions, \"get_extension_for_class\", None) is None:\n        raise ImportError(\"'cryptography' module missing required functionality.  \"\n                          \"Try upgrading to v1.3.4 or newer.\")\n\n    # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509\n    # attribute is only present on those versions.\n    from OpenSSL.crypto import X509\n    x509 = X509()\n    if getattr(x509, \"_x509\", None) is None:\n        raise ImportError(\"'pyOpenSSL' module missing required functionality. \"\n                          \"Try upgrading to v0.14 or newer.\")", "output": "Verifies that PyOpenSSL's package-level dependencies have been met.\n    Throws `ImportError` if they are not met.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_class_docstrings(app, what, name, obj, options, lines):\n    \"\"\"\n    \n\n    \"\"\"\n    if what == \"class\":\n        joined = '\\n'.join(lines)\n\n        templates = [\n            \"\"\".. rubric:: Attributes\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\",\n            \"\"\".. rubric:: Methods\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\"\n        ]\n\n        for template in templates:\n            if template in joined:\n                joined = joined.replace(template, '')\n        lines[:] = joined.split('\\n')", "output": "For those classes for which we use ::\n\n    :template: autosummary/class_without_autosummary.rst\n\n    the documented attributes/methods have to be listed in the class\n    docstring. However, if one of those lists is empty, we use 'None',\n    which then generates warnings in sphinx / ugly html output.\n    This \"autodoc-process-docstring\" event connector removes that part\n    from the processed docstring.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _minimize_constraints_fun_summation(x):\n    '''\n    \n    '''\n    summation = sum([x[i] for i in CONSTRAINT_PARAMS_IDX])\n    return CONSTRAINT_UPPERBOUND >= summation >= CONSTRAINT_LOWERBOUND", "output": "Minimize constraints fun summation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dict(self, time, code):\n        '''\n        \n        '''\n        try:\n            return self.dicts[(QA_util_to_datetime(time), str(code))]\n        except Exception as e:\n            raise e", "output": "'give the time,code tuple and turn the dict'\n        :param time:\n        :param code:\n        :return:  \u5b57\u5178dict \u7c7b\u578b", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exponential_timeout_generator(initial, maximum, multiplier, deadline):\n    \"\"\"\n    \"\"\"\n    if deadline is not None:\n        deadline_datetime = datetime_helpers.utcnow() + datetime.timedelta(\n            seconds=deadline\n        )\n    else:\n        deadline_datetime = datetime.datetime.max\n\n    timeout = initial\n    while True:\n        now = datetime_helpers.utcnow()\n        yield min(\n            # The calculated timeout based on invocations.\n            timeout,\n            # The set maximum timeout.\n            maximum,\n            # The remaining time before the deadline is reached.\n            float((deadline_datetime - now).seconds),\n        )\n        timeout = timeout * multiplier", "output": "A generator that yields exponential timeout values.\n\n    Args:\n        initial (float): The initial timeout.\n        maximum (float): The maximum timeout.\n        multiplier (float): The multiplier applied to the timeout.\n        deadline (float): The overall deadline across all invocations.\n\n    Yields:\n        float: A timeout value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sections_to_variance_sections(self, sections_over_time):\n    '''\n    '''\n    variance_sections = []\n\n    for i in range(len(sections_over_time[0])):\n      time_sections = [sections[i] for sections in sections_over_time]\n      variance = np.var(time_sections, axis=0)\n      variance_sections.append(variance)\n\n    return variance_sections", "output": "Computes the variance of corresponding sections over time.\n\n    Returns:\n      a list of np arrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean(ctx, state, dry_run=False, bare=False, user=False):\n    \"\"\"\"\"\"\n    from ..core import do_clean\n    do_clean(ctx=ctx, three=state.three, python=state.python, dry_run=dry_run,\n             system=state.system)", "output": "Uninstalls all packages not specified in Pipfile.lock.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect_element(__funcname=_qualified_name, **named):\n    \"\"\"\n    \n    \"\"\"\n    def _expect_element(collection):\n        if isinstance(collection, (set, frozenset)):\n            # Special case the error message for set and frozen set to make it\n            # less verbose.\n            collection_for_error_message = tuple(sorted(collection))\n        else:\n            collection_for_error_message = collection\n\n        template = (\n            \"%(funcname)s() expected a value in {collection} \"\n            \"for argument '%(argname)s', but got %(actual)s instead.\"\n        ).format(collection=collection_for_error_message)\n        return make_check(\n            ValueError,\n            template,\n            complement(op.contains(collection)),\n            repr,\n            funcname=__funcname,\n        )\n    return preprocess(**valmap(_expect_element, named))", "output": "Preprocessing decorator that verifies inputs are elements of some\n    expected collection.\n\n    Examples\n    --------\n    >>> @expect_element(x=('a', 'b'))\n    ... def foo(x):\n    ...    return x.upper()\n    ...\n    >>> foo('a')\n    'A'\n    >>> foo('b')\n    'B'\n    >>> foo('c')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    Traceback (most recent call last):\n       ...\n    ValueError: ...foo() expected a value in ('a', 'b') for argument 'x',\n    but got 'c' instead.\n\n    Notes\n    -----\n    A special argument, __funcname, can be provided as a string to override the\n    function name shown in error messages.  This is most often used on __init__\n    or __new__ methods to make errors refer to the class name instead of the\n    function name.\n\n    This uses the `in` operator (__contains__) to make the containment check.\n    This allows us to use any custom container as long as the object supports\n    the container protocol.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_list(search_opts=None, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_list(search_opts=search_opts)", "output": "List storage volumes\n\n    search_opts\n        Dictionary of search options\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_list search_opts='{\"display_name\": \"myblock\"}' profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def GSSAuth(auth_method, gss_deleg_creds=True):\n    \"\"\"\n    \n    \"\"\"\n    if _API == \"MIT\":\n        return _SSH_GSSAPI(auth_method, gss_deleg_creds)\n    elif _API == \"SSPI\" and os.name == \"nt\":\n        return _SSH_SSPI(auth_method, gss_deleg_creds)\n    else:\n        raise ImportError(\"Unable to import a GSS-API / SSPI module!\")", "output": "Provide SSH2 GSS-API / SSPI authentication.\n\n    :param str auth_method: The name of the SSH authentication mechanism\n                            (gssapi-with-mic or gss-keyex)\n    :param bool gss_deleg_creds: Delegate client credentials or not.\n                                 We delegate credentials by default.\n    :return: Either an `._SSH_GSSAPI` (Unix) object or an\n             `_SSH_SSPI` (Windows) object\n\n    :raises: ``ImportError`` -- If no GSS-API / SSPI module could be imported.\n\n    :see: `RFC 4462 <http://www.ietf.org/rfc/rfc4462.txt>`_\n    :note: Check for the available API and return either an `._SSH_GSSAPI`\n           (MIT GSSAPI) object or an `._SSH_SSPI` (MS SSPI) object. If you\n           get python-gssapi working on Windows, python-gssapi\n           will be used and a `._SSH_GSSAPI` object will be returned.\n           If there is no supported API available,\n           ``None`` will be returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _update_val(self, val, result_score_list):\n        \"\"\"\n        \"\"\"\n        self._update_pbar()\n        if val == 'Timeout':\n            self._update_pbar(pbar_msg=('Skipped pipeline #{0} due to time out. '\n                                        'Continuing to the next pipeline.'.format(self._pbar.n)))\n            result_score_list.append(-float('inf'))\n        else:\n            result_score_list.append(val)\n        return result_score_list", "output": "Update values in the list of result scores and self._pbar during pipeline evaluation.\n\n        Parameters\n        ----------\n        val: float or \"Timeout\"\n            CV scores\n        result_score_list: list\n            A list of CV scores\n\n        Returns\n        -------\n        result_score_list: list\n            A updated list of CV scores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_user_gnupghome(user):\n    '''\n    \n    '''\n    if user == 'salt':\n        gnupghome = os.path.join(__salt__['config.get']('config_dir'), 'gpgkeys')\n    else:\n        gnupghome = os.path.join(_get_user_info(user)['home'], '.gnupg')\n\n    return gnupghome", "output": "Return default GnuPG home directory path for a user", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        self.root_path = root_path\r\n        self.install_model()\r\n        index = self.fsmodel.setRootPath(root_path)\r\n        self.proxymodel.setup_filter(self.root_path, [])\r\n        self.setRootIndex(self.proxymodel.mapFromSource(index))", "output": "Set root path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def plot(self, key, funcname):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        import spyder.pyplot as plt\r\n        plt.figure()\r\n        getattr(plt, funcname)(data[key])\r\n        plt.show()", "output": "Plot item", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clear_lock(self, lock_type='update'):\n        '''\n        \n        '''\n        lock_file = self._get_lock_file(lock_type=lock_type)\n\n        def _add_error(errlist, exc):\n            msg = ('Unable to remove update lock for {0} ({1}): {2} '\n                   .format(self.url, lock_file, exc))\n            log.debug(msg)\n            errlist.append(msg)\n\n        success = []\n        failed = []\n\n        try:\n            os.remove(lock_file)\n        except OSError as exc:\n            if exc.errno == errno.ENOENT:\n                # No lock file present\n                pass\n            elif exc.errno == errno.EISDIR:\n                # Somehow this path is a directory. Should never happen\n                # unless some wiseguy manually creates a directory at this\n                # path, but just in case, handle it.\n                try:\n                    shutil.rmtree(lock_file)\n                except OSError as exc:\n                    _add_error(failed, exc)\n            else:\n                _add_error(failed, exc)\n        else:\n            msg = 'Removed {0} lock for {1} remote \\'{2}\\''.format(\n                lock_type,\n                self.role,\n                self.id\n            )\n            log.debug(msg)\n            success.append(msg)\n        return success, failed", "output": "Clear update.lk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_args(args, root):\n    \"\"\"\n    \n    \"\"\"\n\n    extension_args = {}\n\n    for arg in args:\n        parse_extension_arg(arg, extension_args)\n\n    for name in sorted(extension_args, key=len):\n        path = name.split('.')\n        update_namespace(root, path, extension_args[name])", "output": "Encapsulates a set of custom command line arguments in key=value\n    or key.namespace=value form into a chain of Namespace objects,\n    where each next level is an attribute of the Namespace object on the\n    current level\n\n    Parameters\n    ----------\n    args : list\n        A list of strings representing arguments in key=value form\n    root : Namespace\n        The top-level element of the argument tree", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_state_changed(self, state):\n        \"\"\"\"\"\"\n        if state:\n            self.editor.sig_key_pressed.connect(self._on_key_pressed)\n        else:\n            self.editor.sig_key_pressed.disconnect(self._on_key_pressed)", "output": "Connect/disconnect sig_key_pressed signal.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.log_file != PIPE and not (self.log_file == DEVNULL and _HAS_NATIVE_DEVNULL):\n            try:\n                self.log_file.close()\n            except Exception:\n                pass\n\n        if self.process is None:\n            return\n\n        try:\n            self.send_remote_shutdown_command()\n        except TypeError:\n            pass\n\n        try:\n            if self.process:\n                for stream in [self.process.stdin,\n                               self.process.stdout,\n                               self.process.stderr]:\n                    try:\n                        stream.close()\n                    except AttributeError:\n                        pass\n                self.process.terminate()\n                self.process.wait()\n                self.process.kill()\n                self.process = None\n        except OSError:\n            pass", "output": "Stops the service.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_allowed_shape_ranges(spec):\n    \"\"\"\n    \n    \"\"\"\n\n    shaper = NeuralNetworkShaper(spec, False)\n    inputs = _get_input_names(spec)\n    output = {}\n\n    for input in inputs:\n        output[input] = shaper.shape(input)\n\n    return output", "output": "For a given model specification, returns a dictionary with a shape range object for each input feature name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_portfolio_info(self, portfolio_code):\n        \"\"\"\n        \n        \"\"\"\n        url = self.config[\"portfolio_url\"] + portfolio_code\n        html = self._get_html(url)\n        match_info = re.search(r\"(?<=SNB.cubeInfo = ).*(?=;\\n)\", html)\n        if match_info is None:\n            raise Exception(\n                \"cant get portfolio info, portfolio html : {}\".format(html)\n            )\n        try:\n            portfolio_info = json.loads(match_info.group())\n        except Exception as e:\n            raise Exception(\"get portfolio info error: {}\".format(e))\n        return portfolio_info", "output": "\u83b7\u53d6\u7ec4\u5408\u4fe1\u606f\n        :return: \u5b57\u5178", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hybrid_forward(self, F, data, gamma, beta):\n        \"\"\"\"\"\"\n        # TODO(haibin): LayerNorm does not support fp16 safe reduction. Issue is tracked at:\n        # https://github.com/apache/incubator-mxnet/issues/14073\n        if self._dtype:\n            data = data.astype('float32')\n            gamma = gamma.astype('float32')\n            beta = beta.astype('float32')\n        norm_data = F.LayerNorm(data, gamma=gamma, beta=beta, axis=self._axis, eps=self._epsilon)\n        if self._dtype:\n            norm_data = norm_data.astype(self._dtype)\n        return norm_data", "output": "forward computation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_keys_to_action(self):\n    \"\"\"\n    \"\"\"\n    # Based on gym AtariEnv.get_keys_to_action()\n    keyword_to_key = {\n        \"UP\": ord(\"w\"),\n        \"DOWN\": ord(\"s\"),\n        \"LEFT\": ord(\"a\"),\n        \"RIGHT\": ord(\"d\"),\n        \"FIRE\": ord(\" \"),\n    }\n\n    keys_to_action = {}\n\n    for action_id, action_meaning in enumerate(self.action_meanings):\n      keys_tuple = tuple(sorted([\n          key for keyword, key in keyword_to_key.items()\n          if keyword in action_meaning]))\n      assert keys_tuple not in keys_to_action\n      keys_to_action[keys_tuple] = action_id\n\n    # Special actions:\n    keys_to_action[(ord(\"r\"),)] = self.RETURN_DONE_ACTION\n    keys_to_action[(ord(\"c\"),)] = self.TOGGLE_WAIT_ACTION\n    keys_to_action[(ord(\"n\"),)] = self.WAIT_MODE_NOOP_ACTION\n\n    return keys_to_action", "output": "Get mapping from keyboard keys to actions.\n\n    Required by gym.utils.play in environment or top level wrapper.\n\n    Returns:\n      {\n        Unicode code point for keyboard key: action (formatted for step()),\n        ...\n      }", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _absent(name, dataset_type, force=False, recursive=False, recursive_all=False):\n    '''\n    \n\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    ## log configuration\n    dataset_type = dataset_type.lower()\n    log.debug('zfs.%s_absent::%s::config::force = %s',\n              dataset_type, name, force)\n    log.debug('zfs.%s_absent::%s::config::recursive = %s',\n              dataset_type, name, recursive)\n\n    ## destroy dataset if needed\n    if __salt__['zfs.exists'](name, **{'type': dataset_type}):\n        ## NOTE: dataset found with the name and dataset_type\n        if not __opts__['test']:\n            mod_res = __salt__['zfs.destroy'](name, **{'force': force, 'recursive': recursive, 'recursive_all': recursive_all})\n        else:\n            mod_res = OrderedDict([('destroyed', True)])\n\n        ret['result'] = mod_res['destroyed']\n        if ret['result']:\n            ret['changes'][name] = 'destroyed'\n            ret['comment'] = '{0} {1} was destroyed'.format(\n                dataset_type,\n                name,\n            )\n        else:\n            ret['comment'] = 'failed to destroy {0} {1}'.format(\n                dataset_type,\n                name,\n            )\n            if 'error' in mod_res:\n                ret['comment'] = mod_res['error']\n    else:\n        ## NOTE: no dataset found with name of the dataset_type\n        ret['comment'] = '{0} {1} is absent'.format(\n            dataset_type,\n            name\n        )\n\n    return ret", "output": "internal shared function for *_absent\n\n    name : string\n        name of dataset\n    dataset_type : string [filesystem, volume, snapshot, or bookmark]\n        type of dataset to remove\n    force : boolean\n        try harder to destroy the dataset\n    recursive : boolean\n        also destroy all the child datasets\n    recursive_all : boolean\n        recursively destroy all dependents, including cloned file systems\n        outside the target hierarchy. (-R)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _shuffle_tfrecord(path, random_gen):\n  \"\"\"\"\"\"\n  # Read all records\n  record_iter = tf.compat.v1.io.tf_record_iterator(path)\n  all_records = [\n      r for r in utils.tqdm(\n          record_iter, desc=\"Reading...\", unit=\" examples\", leave=False)\n  ]\n  # Shuffling in memory\n  random_gen.shuffle(all_records)\n  # Write all record back\n  with tf.io.TFRecordWriter(path) as writer:\n    for record in utils.tqdm(\n        all_records, desc=\"Writing...\", unit=\" examples\", leave=False):\n      writer.write(record)", "output": "Shuffle a single record file in memory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_create(alias, passwd, usrgrps, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'user.create'\n            params = {\"alias\": alias, \"passwd\": passwd, \"usrgrps\": []}\n            # User groups\n            if not isinstance(usrgrps, list):\n                usrgrps = [usrgrps]\n            for usrgrp in usrgrps:\n                params['usrgrps'].append({\"usrgrpid\": usrgrp})\n\n            params = _params_extend(params, _ignore_name=True, **kwargs)\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['userids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": ".. versionadded:: 2016.3.0\n\n    Create new zabbix user\n\n    .. note::\n        This function accepts all standard user properties: keyword argument\n        names differ depending on your zabbix version, see here__.\n\n        .. __: https://www.zabbix.com/documentation/2.0/manual/appendix/api/user/definitions#user\n\n    :param alias: user alias\n    :param passwd: user's password\n    :param usrgrps: user groups to add the user to\n\n    :param _connection_user: zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: url of zabbix frontend (can also be set in opts or pillar, see module's docstring)\n\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess\n                      with value supplied from Salt sls file.\n\n    :return: On success string with id of the created user.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.user_create james password007 '[7, 12]' firstname='James Bond'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_weight_param_summary(wp):\n    \"\"\"\n    \"\"\"\n    summary_str = ''\n    if wp.HasField('quantization'):\n        nbits = wp.quantization.numberOfBits\n        quant_type = 'linearly' if wp.quantization.HasField('linearQuantization') else 'lookup-table'\n        summary_str += '{}-bit {} quantized'.format(nbits, quant_type)\n\n    if len(wp.floatValue) > 0:\n        summary_str += '({} floatValues)'.format(len(wp.floatValue))\n    if len(wp.float16Value) > 0:\n        summary_str += '({} bytes float16Values)'.format(len(wp.float16Value))\n    if len(wp.rawValue) > 0:\n        summary_str += '({} bytes rawValues)'.format(len(wp.rawValue))\n\n    return summary_str", "output": "Get a summary of _NeuralNetwork_pb2.WeightParams\n    Args:\n    wp : _NeuralNetwork_pb2.WeightParams - the _NeuralNetwork_pb2.WeightParams message to display\n    Returns:\n    a str summary for wp", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_batch(self, dataloader):\n        \"\"\"\n        \n        \"\"\"\n        sum_losses = 0\n        len_losses = 0\n        for input_data, input_label in tqdm(dataloader):\n            data = gluon.utils.split_and_load(input_data, self.ctx, even_split=False)\n            label = gluon.utils.split_and_load(input_label, self.ctx, even_split=False)\n            batch_size = input_data.shape[0]\n            sum_losses, len_losses = self.train(data, label, batch_size)\n            sum_losses += sum_losses\n            len_losses += len_losses\n\n        return sum_losses, len_losses", "output": "Description : training for LipNet", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def offset(self, num_to_skip):\n        \"\"\"\n        \"\"\"\n        return self.__class__(\n            self._parent,\n            projection=self._projection,\n            field_filters=self._field_filters,\n            orders=self._orders,\n            limit=self._limit,\n            offset=num_to_skip,\n            start_at=self._start_at,\n            end_at=self._end_at,\n        )", "output": "Skip to an offset in a query.\n\n        If the current query already has specified an offset, this will\n        overwrite it.\n\n        Args:\n            num_to_skip (int): The number of results to skip at the beginning\n                of query results. (Must be non-negative.)\n\n        Returns:\n            ~.firestore_v1beta1.query.Query: An offset query. Acts as a\n            copy of the current query, modified with the newly added\n            \"offset\" field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_org_details(organization_id):\n    '''\n    \n    '''\n\n    qdata = salt.utils.http.query(\n        '{0}/organization/{1}'.format(_base_url(), organization_id),\n        method='GET',\n        decode=True,\n        decode_type='json',\n        header_dict={\n            'X-DC-DEVKEY': _api_key(),\n            'Content-Type': 'application/json',\n        },\n    )\n    return qdata", "output": "Return the details for an organization\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run digicert.get_org_details 34\n\n    Returns a dictionary with the org details, or with 'error' and 'status' keys.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cancel(self, client=None):\n        \"\"\"\n        \"\"\"\n        client = self._require_client(client)\n\n        extra_params = {}\n        if self.location:\n            extra_params[\"location\"] = self.location\n\n        api_response = client._connection.api_request(\n            method=\"POST\", path=\"%s/cancel\" % (self.path,), query_params=extra_params\n        )\n        self._set_properties(api_response[\"job\"])\n        # The Future interface requires that we return True if the *attempt*\n        # to cancel was successful.\n        return True", "output": "API call:  cancel job via a POST request\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/cancel\n\n        :type client: :class:`~google.cloud.bigquery.client.Client` or\n                      ``NoneType``\n        :param client: the client to use.  If not passed, falls back to the\n                       ``client`` stored on the current dataset.\n\n        :rtype: bool\n        :returns: Boolean indicating that the cancel request was sent.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def insertInto(self, tableName, overwrite=False):\n        \"\"\"\n        \"\"\"\n        self._jwrite.mode(\"overwrite\" if overwrite else \"append\").insertInto(tableName)", "output": "Inserts the content of the :class:`DataFrame` to the specified table.\n\n        It requires that the schema of the class:`DataFrame` is the same as the\n        schema of the table.\n\n        Optionally overwriting any existing data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _decode_input_tensor_to_features_dict(feature_map, hparams):\n  \"\"\"\n  \"\"\"\n  inputs = tf.convert_to_tensor(feature_map[\"inputs\"])\n  input_is_image = False\n\n  x = inputs\n  p_hparams = hparams.problem_hparams\n  # Add a third empty dimension\n  x = tf.expand_dims(x, axis=[2])\n  x = tf.to_int32(x)\n  input_space_id = tf.constant(p_hparams.input_space_id)\n  target_space_id = tf.constant(p_hparams.target_space_id)\n\n  features = {}\n  features[\"input_space_id\"] = input_space_id\n  features[\"target_space_id\"] = target_space_id\n  features[\"decode_length\"] = (\n      IMAGE_DECODE_LENGTH if input_is_image else tf.shape(x)[1] + 50)\n  features[\"inputs\"] = x\n  return features", "output": "Convert the interactive input format (see above) to a dictionary.\n\n  Args:\n    feature_map: dict with inputs.\n    hparams: model hyperparameters\n\n  Returns:\n    a features dictionary, as expected by the decoder.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_target_variable (self, targets, variable, value, append=0):\n        \"\"\" \n        \"\"\"\n        if isinstance (targets, str):\n            targets = [targets]\n        if isinstance(value, str):\n            value = [value]\n\n        assert is_iterable(targets)\n        assert isinstance(variable, basestring)\n        assert is_iterable(value)\n\n        if targets:\n            if append:\n                bjam_interface.call(\"set-target-variable\", targets, variable, value, \"true\")\n            else:\n                bjam_interface.call(\"set-target-variable\", targets, variable, value)", "output": "Sets a target variable.\n\n        The 'variable' will be available to bjam when it decides\n        where to generate targets, and will also be available to\n        updating rule for that 'taret'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def avail_images(call=None):\n    '''\n    \n    '''\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The avail_images function must be called with '\n            '-f or --function, or with the --list-images option.'\n        )\n\n    templates = {}\n    vm_properties = [\n        \"name\",\n        \"config.template\",\n        \"config.guestFullName\",\n        \"config.hardware.numCPU\",\n        \"config.hardware.memoryMB\"\n    ]\n\n    vm_list = salt.utils.vmware.get_mors_with_properties(_get_si(), vim.VirtualMachine, vm_properties)\n\n    for vm in vm_list:\n        if \"config.template\" in vm and vm[\"config.template\"]:\n            templates[vm[\"name\"]] = {\n                'name': vm[\"name\"],\n                'guest_fullname': vm[\"config.guestFullName\"] if \"config.guestFullName\" in vm else \"N/A\",\n                'cpus': vm[\"config.hardware.numCPU\"] if \"config.hardware.numCPU\" in vm else \"N/A\",\n                'ram': vm[\"config.hardware.memoryMB\"] if \"config.hardware.memoryMB\" in vm else \"N/A\"\n            }\n\n    return templates", "output": "Return a list of all the templates present in this VMware environment with basic\n    details\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud --list-images my-vmware-config", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_padding(builder, layer, input_names, output_names, keras_layer):\n    \"\"\"\n    \n    \"\"\"\n    _check_data_format(keras_layer)\n    # Get input and output names\n    input_name, output_name = (input_names[0], output_names[0])\n\n    is_1d = isinstance(keras_layer, _keras.layers.ZeroPadding1D)\n\n    padding = keras_layer.padding\n    top = left = bottom = right = 0\n    if is_1d:\n        if type(padding) is int:\n            left = right = padding\n        elif type(padding) is tuple:\n            if type(padding[0]) is int:\n                left, right = padding\n            elif type(padding[0]) is tuple and len(padding[0]) == 2:\n                left, right = padding[0]\n            else:\n                raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n        else:\n            raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n    else:\n        if type(padding) is int:\n            top = left = bottom = right = padding\n        elif type(padding) is tuple:\n            if type(padding[0]) is int:\n                top, left = padding\n                bottom, right = padding\n            elif type(padding[0]) is tuple:\n                top, bottom = padding[0]\n                left, right = padding[1]\n            else:\n                raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n        else:\n            raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n\n    # Now add the layer\n    builder.add_padding(name = layer,\n        left = left, right=right, top=top, bottom=bottom, value = 0,\n        input_name = input_name, output_name=output_name\n        )", "output": "Convert padding layer from keras to coreml.\n    Keras only supports zero padding at this time.\n    Parameters\n    ----------\n    keras_layer: layer\n        A keras layer object.\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def crossproduct(d):\n    \"\"\"\n    \n    \"\"\"\n\n    from .. import SArray\n    d = [list(zip(list(d.keys()), x)) for x in _itertools.product(*list(d.values()))]\n    sa = [{k:v for (k,v) in x} for x in d]\n    return SArray(sa).unpack(column_name_prefix='')", "output": "Create an SFrame containing the crossproduct of all provided options.\n\n    Parameters\n    ----------\n    d : dict\n        Each key is the name of an option, and each value is a list\n        of the possible values for that option.\n\n    Returns\n    -------\n    out : SFrame\n        There will be a column for each key in the provided dictionary,\n        and a row for each unique combination of all values.\n\n    Example\n    -------\n    settings = {'argument_1':[0, 1],\n                'argument_2':['a', 'b', 'c']}\n    print crossproduct(settings)\n    +------------+------------+\n    | argument_2 | argument_1 |\n    +------------+------------+\n    |     a      |     0      |\n    |     a      |     1      |\n    |     b      |     0      |\n    |     b      |     1      |\n    |     c      |     0      |\n    |     c      |     1      |\n    +------------+------------+\n    [6 rows x 2 columns]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_info_file(tensorboard_info):\n  \"\"\"\n  \"\"\"\n  payload = \"%s\\n\" % _info_to_string(tensorboard_info)\n  with open(_get_info_file_path(), \"w\") as outfile:\n    outfile.write(payload)", "output": "Write TensorBoardInfo to the current process's info file.\n\n  This should be called by `main` once the server is ready. When the\n  server shuts down, `remove_info_file` should be called.\n\n  Args:\n    tensorboard_info: A valid `TensorBoardInfo` object.\n\n  Raises:\n    ValueError: If any field on `info` is not of the correct type.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self):\n        \"\"\"\n        \n        \"\"\"\n\n        swagger = None\n\n        # First check if there is inline swagger\n        if self.definition_body:\n            swagger = self._read_from_definition_body()\n\n        if not swagger and self.definition_uri:\n            # If not, then try to download it from the given URI\n            swagger = self._download_swagger(self.definition_uri)\n\n        return swagger", "output": "Gets the Swagger document from either of the given locations. If we fail to retrieve or parse the Swagger\n        file, this method will return None.\n\n        Returns\n        -------\n        dict:\n            Swagger document. None, if we cannot retrieve the document", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def initialize_schema(connection):\n  \"\"\"\n  \"\"\"\n  cursor = connection.cursor()\n  cursor.execute(\"PRAGMA application_id={}\".format(_TENSORBOARD_APPLICATION_ID))\n  cursor.execute(\"PRAGMA user_version={}\".format(_TENSORBOARD_USER_VERSION))\n  with connection:\n    for statement in _SCHEMA_STATEMENTS:\n      lines = statement.strip('\\n').split('\\n')\n      message = lines[0] + ('...' if len(lines) > 1 else '')\n      logger.debug('Running DB init statement: %s', message)\n      cursor.execute(statement)", "output": "Initializes the TensorBoard sqlite schema using the given connection.\n\n  Args:\n    connection: A sqlite DB connection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _clone(self):\n        \"\"\"\n        \"\"\"\n        cloned_self = self.__class__(\n            *self.flat_path, project=self.project, namespace=self.namespace\n        )\n        # If the current parent has already been set, we re-use\n        # the same instance\n        cloned_self._parent = self._parent\n        return cloned_self", "output": "Duplicates the Key.\n\n        Most attributes are simple types, so don't require copying. Other\n        attributes like ``parent`` are long-lived and so we re-use them.\n\n        :rtype: :class:`google.cloud.datastore.key.Key`\n        :returns: A new ``Key`` instance with the same data as the current one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_reactor(self, tag):\n        '''\n        \n        '''\n        reactors = self.list_all()\n        for reactor in reactors:\n            _tag = next(six.iterkeys(reactor))\n            if _tag == tag:\n                self.minion.opts['reactor'].remove(reactor)\n                return {'status': True, 'comment': 'Reactor deleted.'}\n\n        return {'status': False, 'comment': 'Reactor does not exists.'}", "output": "Delete a reactor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __reg_query_value(handle, value_name):\n        '''\n        \n        '''\n        # item_value, item_type = win32api.RegQueryValueEx(self.__reg_uninstall_handle, value_name)\n        item_value, item_type = win32api.RegQueryValueEx(handle, value_name)  # pylint: disable=no-member\n        if six.PY2 and isinstance(item_value, six.string_types) and not isinstance(item_value, six.text_type):\n            try:\n                item_value = six.text_type(item_value, encoding='mbcs')\n            except UnicodeError:\n                pass\n        if item_type == win32con.REG_EXPAND_SZ:\n            # expects Unicode input\n            win32api.ExpandEnvironmentStrings(item_value)  # pylint: disable=no-member\n            item_type = win32con.REG_SZ\n        return item_value, item_type", "output": "Calls RegQueryValueEx\n\n        If PY2 ensure unicode string and expand REG_EXPAND_SZ before returning\n        Remember to catch not found exceptions when calling.\n\n        Args:\n            handle (object): open registry handle.\n            value_name (str): Name of the value you wished returned\n\n        Returns:\n            tuple: type, value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def project_present(name, description=None, enabled=True, profile=None,\n                    **connection_args):\n    '''\n    \n\n    '''\n\n    return tenant_present(name, description=description, enabled=enabled, profile=profile,\n                          **connection_args)", "output": "Ensures that the keystone project exists\n    Alias for tenant_present from V2 API to fulfill\n    V3 API naming convention.\n\n    .. versionadded:: 2016.11.0\n\n    name\n        The name of the project to manage\n\n    description\n        The description to use for this project\n\n    enabled\n        Availability state for this project\n\n    .. code-block:: yaml\n\n        nova:\n            keystone.project_present:\n                - enabled: True\n                - description: 'Nova Compute Service'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __create_orget_address(conn, name, region):\n    '''\n    \n    '''\n    try:\n        addy = conn.ex_get_address(name, region)\n    except ResourceNotFoundError:  # pylint: disable=W0703\n        addr_kwargs = {\n            'name': name,\n            'region': region\n        }\n        new_addy = create_address(addr_kwargs, \"function\")\n        addy = conn.ex_get_address(new_addy['name'], new_addy['region'])\n\n    return addy", "output": "Reuse or create a static IP address.\n    Returns a native GCEAddress construct to use with libcloud.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def queue_put_stoppable(self, q, obj):\n        \"\"\" \"\"\"\n        while not self.stopped():\n            try:\n                q.put(obj, timeout=5)\n                break\n            except queue.Full:\n                pass", "output": "Put obj to queue, but will give up when the thread is stopped", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expires(self):\n        \"\"\"\n        \"\"\"\n        expiration_time = self._properties.get(\"expirationTime\")\n        if expiration_time is not None:\n            # expiration_time will be in milliseconds.\n            return google.cloud._helpers._datetime_from_microseconds(\n                1000.0 * float(expiration_time)\n            )", "output": "Union[datetime.datetime, None]: Datetime at which the table will be\n        deleted.\n\n        Raises:\n            ValueError: For invalid value types.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _resizeColumnsToContents(self, header, data, limit_ms):\r\n        \"\"\"\"\"\"\r\n        max_col = data.model().columnCount()\r\n        if limit_ms is None:\r\n            max_col_ms = None\r\n        else:\r\n            max_col_ms = limit_ms / max(1, max_col)\r\n        for col in range(max_col):\r\n            self._resizeColumnToContents(header, data, col, max_col_ms)", "output": "Resize all the colummns to its contents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _query_response_to_snapshot(response_pb, collection, expected_prefix):\n    \"\"\"\n    \"\"\"\n    if not response_pb.HasField(\"document\"):\n        return None\n\n    document_id = _helpers.get_doc_id(response_pb.document, expected_prefix)\n    reference = collection.document(document_id)\n    data = _helpers.decode_dict(response_pb.document.fields, collection._client)\n    snapshot = document.DocumentSnapshot(\n        reference,\n        data,\n        exists=True,\n        read_time=response_pb.read_time,\n        create_time=response_pb.document.create_time,\n        update_time=response_pb.document.update_time,\n    )\n    return snapshot", "output": "Parse a query response protobuf to a document snapshot.\n\n    Args:\n        response_pb (google.cloud.proto.firestore.v1beta1.\\\n            firestore_pb2.RunQueryResponse): A\n        collection (~.firestore_v1beta1.collection.CollectionReference): A\n            reference to the collection that initiated the query.\n        expected_prefix (str): The expected prefix for fully-qualified\n            document names returned in the query results. This can be computed\n            directly from ``collection`` via :meth:`_parent_info`.\n\n    Returns:\n        Optional[~.firestore.document.DocumentSnapshot]: A\n        snapshot of the data returned in the query. If ``response_pb.document``\n        is not set, the snapshot will be :data:`None`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_settings(self, index=None, name=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"GET\", _make_path(index, \"_settings\", name), params=params\n        )", "output": "Retrieve settings for one or more (or all) indices.\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html>`_\n\n        :arg index: A comma-separated list of index names; use `_all` or empty\n            string to perform the operation on all indices\n        :arg name: The name of the settings that should be included\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\n            expression resolves into no concrete indices. (This includes `_all`\n            string or when no indices have been specified)\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete\n            indices that are open, closed or both., default ['open', 'closed'],\n            valid choices are: 'open', 'closed', 'none', 'all'\n        :arg flat_settings: Return settings in flat format (default: false)\n        :arg ignore_unavailable: Whether specified concrete indices should be\n            ignored when unavailable (missing or closed)\n        :arg include_defaults: Whether to return all default setting for each of\n            the indices., default False\n        :arg local: Return local information, do not retrieve the state from\n            master node (default: false)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def connect_database(url):\n    \"\"\"\n    \n\n    \"\"\"\n    db = _connect_database(url)\n    db.copy = lambda: _connect_database(url)\n    return db", "output": "create database object by url\n\n    mysql:\n        mysql+type://user:passwd@host:port/database\n    sqlite:\n        # relative path\n        sqlite+type:///path/to/database.db\n        # absolute path\n        sqlite+type:////path/to/database.db\n        # memory database\n        sqlite+type://\n    mongodb:\n        mongodb+type://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n        more: http://docs.mongodb.org/manual/reference/connection-string/\n    sqlalchemy:\n        sqlalchemy+postgresql+type://user:passwd@host:port/database\n        sqlalchemy+mysql+mysqlconnector+type://user:passwd@host:port/database\n        more: http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\n    redis:\n        redis+taskdb://host:port/db\n    elasticsearch:\n        elasticsearch+type://host:port/?index=pyspider\n    local:\n        local+projectdb://filepath,filepath\n\n    type:\n        taskdb\n        projectdb\n        resultdb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_element(driver, by):\n    \"\"\"\"\"\"\n    try:\n        return driver.find_element(*by)\n    except NoSuchElementException as e:\n        raise e\n    except WebDriverException as e:\n        raise e", "output": "Looks up an element. Logs and re-raises ``WebDriverException``\n    if thrown.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deploy_ray_func(func, partition, kwargs):  # pragma: no cover\n    \"\"\"\n    \"\"\"\n    try:\n        return func(partition, **kwargs)\n    # Sometimes Arrow forces us to make a copy of an object before we operate\n    # on it. We don't want the error to propagate to the user, and we want to\n    # avoid copying unless we absolutely have to.\n    except ValueError:\n        return func(partition.copy(), **kwargs)", "output": "Deploy a function to a partition in Ray.\n\n    Note: Ray functions are not detected by codecov (thus pragma: no cover)\n\n    Args:\n        func: The function to apply.\n        partition: The partition to apply the function to.\n        kwargs: A dictionary of keyword arguments for the function.\n\n    Returns:\n        The result of the function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter_by_folder(self, include=None, exclude=None):\n        \"\"\n        include,exclude = listify(include),listify(exclude)\n        def _inner(o):\n            if isinstance(o, Path): n = o.relative_to(self.path).parts[0]\n            else: n = o.split(os.path.sep)[len(str(self.path).split(os.path.sep))]\n            if include and not n in include: return False\n            if exclude and     n in exclude: return False\n            return True\n        return self.filter_by_func(_inner)", "output": "Only keep filenames in `include` folder or reject the ones in `exclude`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_svn_page(html):\n    # type: (Union[str, Text]) -> Optional[Match[Union[str, Text]]]\n    \"\"\"\n    \n    \"\"\"\n    return (re.search(r'<title>[^<]*Revision \\d+:', html) and\n            re.search(r'Powered by (?:<a[^>]*?>)?Subversion', html, re.I))", "output": "Returns true if the page appears to be the index page of an svn repository", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_audit_sink(self, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_audit_sink_with_http_info(body, **kwargs)\n        else:\n            (data) = self.create_audit_sink_with_http_info(body, **kwargs)\n            return data", "output": "create an AuditSink\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_audit_sink(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param V1alpha1AuditSink body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1alpha1AuditSink\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map(self, map_fn, name=\"Map\"):\n        \"\"\"\n        \"\"\"\n        op = Operator(\n            _generate_uuid(),\n            OpType.Map,\n            name,\n            map_fn,\n            num_instances=self.env.config.parallelism)\n        return self.__register(op)", "output": "Applies a map operator to the stream.\n\n        Attributes:\n             map_fn (function): The user-defined logic of the map.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def send_cmd(cmd, args, ret):\n        \"\"\"\n        \"\"\"\n        from dvc.daemon import daemon\n\n        if not Analytics._is_enabled(cmd):\n            return\n\n        analytics = Analytics()\n        analytics.collect_cmd(args, ret)\n        daemon([\"analytics\", analytics.dump()])", "output": "Collect and send analytics for CLI command.\n\n        Args:\n            args (list): parsed args for the CLI command.\n            ret (int): return value of the CLI command.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smartos_zone_pkgin_data():\n    '''\n    \n    '''\n    # Provides:\n    #   pkgin_repositories\n\n    grains = {\n        'pkgin_repositories': [],\n    }\n\n    pkginrepo = re.compile('^(?:https|http|ftp|file)://.*$')\n    if os.path.isfile('/opt/local/etc/pkgin/repositories.conf'):\n        with salt.utils.files.fopen('/opt/local/etc/pkgin/repositories.conf', 'r') as fp_:\n            for line in fp_:\n                line = salt.utils.stringutils.to_unicode(line)\n                if pkginrepo.match(line):\n                    grains['pkgin_repositories'].append(line)\n\n    return grains", "output": "SmartOS zone pkgsrc information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self, where=None, columns=None, **kwargs):\n        \"\"\"\n        \"\"\"\n\n        if not self.read_axes(where=where, **kwargs):\n            return None\n\n        raise NotImplementedError(\"Panel is removed in pandas 0.25.0\")", "output": "we have n indexable columns, with an arbitrary number of data\n        axes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    \n    \"\"\"\n    from .multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)", "output": "Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex(levels=[['a'], ['a', 'b']],\n               codes=[[0, 0], [0, 1]],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def insert_option_group(self, idx, *args, **kwargs):\n        \"\"\"\"\"\"\n        group = self.add_option_group(*args, **kwargs)\n\n        self.option_groups.pop()\n        self.option_groups.insert(idx, group)\n\n        return group", "output": "Insert an OptionGroup at a given position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def click_and_hold(self, on_element=None):\n        \"\"\"\n        \n        \"\"\"\n        if on_element:\n            self.move_to_element(on_element)\n        if self._driver.w3c:\n            self.w3c_actions.pointer_action.click_and_hold()\n            self.w3c_actions.key_action.pause()\n        else:\n            self._actions.append(lambda: self._driver.execute(\n                                 Command.MOUSE_DOWN, {}))\n        return self", "output": "Holds down the left mouse button on an element.\n\n        :Args:\n         - on_element: The element to mouse down.\n           If None, clicks on current mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop_volume(name, force=False):\n    '''\n    \n    '''\n    volinfo = info()\n    if name not in volinfo:\n        log.error('Cannot stop non-existing volume %s', name)\n        return False\n    if int(volinfo[name]['status']) != 1:\n        log.warning('Attempt to stop already stopped volume %s', name)\n        return True\n\n    cmd = 'volume stop {0}'.format(name)\n    if force:\n        cmd += ' force'\n\n    return _gluster(cmd)", "output": "Stop a gluster volume\n\n    name\n        Volume name\n\n    force\n        Force stop the volume\n\n        .. versionadded:: 2015.8.4\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glusterfs.stop_volume mycluster", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_visible_toolbars(self):\r\n        \"\"\"\"\"\"\r\n        toolbars = []\r\n        for toolbar in self.toolbarslist:\r\n            if toolbar.toggleViewAction().isChecked():\r\n                toolbars.append(toolbar)\r\n        self.visible_toolbars = toolbars", "output": "Collects the visible toolbars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _extract_apis_from_events(function_logical_id, serverless_function_events, collector):\n        \"\"\"\n        \n        \"\"\"\n        count = 0\n        for _, event in serverless_function_events.items():\n\n            if SamApiProvider._FUNCTION_EVENT_TYPE_API == event.get(SamApiProvider._TYPE):\n                api_resource_id, api = SamApiProvider._convert_event_api(function_logical_id, event.get(\"Properties\"))\n                collector.add_apis(api_resource_id, [api])\n                count += 1\n\n        LOG.debug(\"Found '%d' API Events in Serverless function with name '%s'\", count, function_logical_id)", "output": "Given an AWS::Serverless::Function Event Dictionary, extract out all 'Api' events and store  within the\n        collector\n\n        Parameters\n        ----------\n        function_logical_id : str\n            LogicalId of the AWS::Serverless::Function\n\n        serverless_function_events : dict\n            Event Dictionary of a AWS::Serverless::Function\n\n        collector : ApiCollector\n            Instance of the API collector that where we will save the API information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_training(train_mode): #pylint: disable=redefined-outer-name\n    \"\"\"\n    \"\"\"\n    prev = ctypes.c_int()\n    check_call(_LIB.MXAutogradSetIsTraining(\n        ctypes.c_int(train_mode), ctypes.byref(prev)))\n    return bool(prev.value)", "output": "Set status to training/predicting. This affects ctx.is_train in operator\n    running context. For example, Dropout will drop inputs randomly when\n    train_mode=True while simply passing through if train_mode=False.\n\n    Parameters\n    ----------\n    train_mode: bool\n\n    Returns\n    -------\n    previous state before this set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def config(name,\n           config,\n           write=True):\n    '''\n    \n\n    '''\n\n    _build_config_tree(name, config)\n    configs = _render_configuration()\n\n    if __opts__.get('test', False):\n        comment = 'State syslog_ng will write \\'{0}\\' into {1}'.format(\n            configs,\n            __SYSLOG_NG_CONFIG_FILE\n        )\n        return _format_state_result(name, result=None, comment=comment)\n\n    succ = write\n    if write:\n        succ = _write_config(config=configs)\n\n    return _format_state_result(name, result=succ,\n                                changes={'new': configs, 'old': ''})", "output": "Builds syslog-ng configuration. This function is intended to be used from\n    the state module, users should not use it directly!\n\n    name : the id of the Salt document or it is the format of <statement name>.id\n    config : the parsed YAML code\n    write : if True, it writes  the config into the configuration file,\n    otherwise just returns it\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' syslog_ng.config name='s_local' config=\"[{'tcp':[{'ip':'127.0.0.1'},{'port':1233}]}]\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mouseMoveEvent(self, event):\n        \"\"\"\n        \"\"\"\n        self.line_number_hint = self.editor.get_linenumber_from_mouse_event(\n            event)\n        self.update()", "output": "Override Qt method.\n\n        Draw semitransparent breakpoint hint.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _build_resource_from_properties(obj, filter_fields):\n    \"\"\"\n    \"\"\"\n    partial = {}\n    for filter_field in filter_fields:\n        api_field = obj._PROPERTY_TO_API_FIELD.get(filter_field)\n        if api_field is None and filter_field not in obj._properties:\n            raise ValueError(\"No property %s\" % filter_field)\n        elif api_field is not None:\n            partial[api_field] = obj._properties.get(api_field)\n        else:\n            # allows properties that are not defined in the library\n            # and properties that have the same name as API resource key\n            partial[filter_field] = obj._properties[filter_field]\n\n    return partial", "output": "Build a resource based on a ``_properties`` dictionary, filtered by\n    ``filter_fields``, which follow the name of the Python object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformer_bas8l_8h_big_uncond_dr03_imgnet():\n  \"\"\"\"\"\"\n  hparams = imagetransformer_base_14l_8h_big_dr01()\n  # num_hidden_layers\n  hparams.num_decoder_layers = 8\n  hparams.num_heads = 8\n  hparams.hidden_size = 512\n  hparams.filter_size = 2048\n  hparams.layer_prepostprocess_dropout = 0.3\n  return hparams", "output": "big 1d model for conditional image generation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_archive_formats():\n    \"\"\"\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats", "output": "Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, htpasswd_file=None, runas=None):\n    '''\n    \n\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'comment': '',\n           'result': None}\n\n    exists = __salt__['file.grep'](\n        htpasswd_file, '^{0}:'.format(name))['retcode'] == 0\n\n    if not exists:\n        if __opts__['test']:\n            ret['result'] = None\n        else:\n            ret['result'] = True\n        ret['comment'] = 'User already not in file'\n    else:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User \\'{0}\\' is set to be removed from htpasswd file'.format(name)\n            ret['changes'] = {name: True}\n        else:\n            userdel_ret = __salt__['webutil.userdel'](\n                htpasswd_file, name, runas=runas, all_results=True)\n\n            ret['result'] = userdel_ret['retcode'] == 0\n            ret['comment'] = userdel_ret['stderr']\n\n            if ret['result']:\n                ret['changes'] = {name: True}\n\n    return ret", "output": "Make sure the user is not in the specified htpasswd file\n\n    name\n        User name\n\n    htpasswd_file\n        Path to the htpasswd file\n\n    runas\n        The system user to run htpasswd command with", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_authorizer(self, restapi, uri, authorizer):\n        \"\"\"\n        \n        \"\"\"\n        authorizer_type = authorizer.get(\"type\", \"TOKEN\").upper()\n        identity_validation_expression = authorizer.get('validation_expression', None)\n\n        authorizer_resource = troposphere.apigateway.Authorizer(\"Authorizer\")\n        authorizer_resource.RestApiId = troposphere.Ref(restapi)\n        authorizer_resource.Name = authorizer.get(\"name\", \"ZappaAuthorizer\")\n        authorizer_resource.Type = authorizer_type\n        authorizer_resource.AuthorizerUri = uri\n        authorizer_resource.IdentitySource = \"method.request.header.%s\" % authorizer.get('token_header', 'Authorization')\n        if identity_validation_expression:\n            authorizer_resource.IdentityValidationExpression = identity_validation_expression\n\n        if authorizer_type == 'TOKEN':\n            if not self.credentials_arn:\n                self.get_credentials_arn()\n            authorizer_resource.AuthorizerResultTtlInSeconds = authorizer.get('result_ttl', 300)\n            authorizer_resource.AuthorizerCredentials = self.credentials_arn\n        if authorizer_type == 'COGNITO_USER_POOLS':\n            authorizer_resource.ProviderARNs = authorizer.get('provider_arns')\n\n        self.cf_api_resources.append(authorizer_resource.title)\n        self.cf_template.add_resource(authorizer_resource)\n\n        return authorizer_resource", "output": "Create Authorizer for API gateway", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bb_pad_collate(samples:BatchSamples, pad_idx:int=0) -> Tuple[FloatTensor, Tuple[LongTensor, LongTensor]]:\n    \"\"\n    if isinstance(samples[0][1], int): return data_collate(samples)\n    max_len = max([len(s[1].data[1]) for s in samples])\n    bboxes = torch.zeros(len(samples), max_len, 4)\n    labels = torch.zeros(len(samples), max_len).long() + pad_idx\n    imgs = []\n    for i,s in enumerate(samples):\n        imgs.append(s[0].data[None])\n        bbs, lbls = s[1].data\n        if not (bbs.nelement() == 0):\n            bboxes[i,-len(lbls):] = bbs\n            labels[i,-len(lbls):] = tensor(lbls)\n    return torch.cat(imgs,0), (bboxes,labels)", "output": "Function that collect `samples` of labelled bboxes and adds padding with `pad_idx`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_global_config_dir():\n        \"\"\"\n        \"\"\"\n        from appdirs import user_config_dir\n\n        return user_config_dir(\n            appname=Config.APPNAME, appauthor=Config.APPAUTHOR\n        )", "output": "Returns global config location. E.g. ~/.config/dvc/config.\n\n        Returns:\n            str: path to the global config directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_symbol(prototxt_fname):\n    \"\"\"\n    \"\"\"\n    sym, output_name, input_dim = _parse_proto(prototxt_fname)\n    exec(sym)                   # pylint: disable=exec-used\n    _locals = locals()\n    exec(\"ret = \" + output_name, globals(), _locals)  # pylint: disable=exec-used\n    ret = _locals['ret']\n    return ret, input_dim", "output": "Convert caffe model definition into Symbol\n\n    Parameters\n    ----------\n    prototxt_fname : str\n        Filename of the prototxt file\n\n    Returns\n    -------\n    Symbol\n        Converted Symbol\n    tuple\n        Input shape", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start_router(router_class, router_name):\n    \"\"\"\n    \"\"\"\n    handle = router_class.remote(router_name)\n    ray.experimental.register_actor(router_name, handle)\n    handle.start.remote()\n    return handle", "output": "Wrapper for starting a router and register it.\n\n    Args:\n        router_class: The router class to instantiate.\n        router_name: The name to give to the router.\n\n    Returns:\n        A handle to newly started router actor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reference_image_path(cls, project, location, product, reference_image):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}\",\n            project=project,\n            location=location,\n            product=product,\n            reference_image=reference_image,\n        )", "output": "Return a fully-qualified reference_image string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_module(prefix, epoch, data_names, data_shapes):\n    \"\"\"\n    \"\"\"\n    sym, arg_params, aux_params = mx.model.load_checkpoint(prefix, epoch)\n\n    # We don't need CTC loss for prediction, just a simple softmax will suffice.\n    # We get the output of the layer just before the loss layer ('pred_fc') and add softmax on top\n    pred_fc = sym.get_internals()['pred_fc_output']\n    sym = mx.sym.softmax(data=pred_fc)\n\n    mod = mx.mod.Module(symbol=sym, context=mx.cpu(), data_names=data_names, label_names=None)\n    mod.bind(for_training=False, data_shapes=data_shapes)\n    mod.set_params(arg_params, aux_params, allow_missing=False)\n    return mod", "output": "Loads the model from checkpoint specified by prefix and epoch, binds it\n    to an executor, and sets its parameters and returns a mx.mod.Module", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def describe_api_models(restApiId, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        models = _multi_call(conn.get_models, 'items', restApiId=restApiId)\n        return {'models': [_convert_datetime_str(model) for model in models]}\n    except ClientError as e:\n        return {'error': __utils__['boto3.get_error'](e)}", "output": "Get all models for a given API\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_apigateway.describe_api_models restApiId", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write(self, to_write):\n        \"\"\"\n        \n        \"\"\"\n        self._file.write(to_write.encode(self._encoding or\n                                         self._default_encoding))", "output": "Helper to call encode before writing to file for Python 3 compat.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _normalize_cursor(self, cursor, orders):\n        \"\"\"\"\"\"\n        if cursor is None:\n            return\n\n        if not orders:\n            raise ValueError(_NO_ORDERS_FOR_CURSOR)\n\n        document_fields, before = cursor\n\n        order_keys = [order.field.field_path for order in orders]\n\n        if isinstance(document_fields, document.DocumentSnapshot):\n            snapshot = document_fields\n            document_fields = snapshot.to_dict()\n            document_fields[\"__name__\"] = snapshot.reference\n\n        if isinstance(document_fields, dict):\n            # Transform to list using orders\n            values = []\n            data = document_fields\n            for order_key in order_keys:\n                try:\n                    values.append(field_path_module.get_nested_value(order_key, data))\n                except KeyError:\n                    msg = _MISSING_ORDER_BY.format(order_key, data)\n                    raise ValueError(msg)\n            document_fields = values\n\n        if len(document_fields) != len(orders):\n            msg = _MISMATCH_CURSOR_W_ORDER_BY.format(document_fields, order_keys)\n            raise ValueError(msg)\n\n        _transform_bases = (transforms.Sentinel, transforms._ValueList)\n\n        for index, key_field in enumerate(zip(order_keys, document_fields)):\n            key, field = key_field\n\n            if isinstance(field, _transform_bases):\n                msg = _INVALID_CURSOR_TRANSFORM\n                raise ValueError(msg)\n\n            if key == \"__name__\" and isinstance(field, six.string_types):\n                document_fields[index] = self._parent.document(field)\n\n        return document_fields, before", "output": "Helper: convert cursor to a list of values based on orders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _beam_decode(self,\n                   features,\n                   decode_length,\n                   beam_size,\n                   top_beams,\n                   alpha,\n                   use_tpu=False):\n    \"\"\"\n    \"\"\"\n    return self._beam_decode_slow(features, decode_length, beam_size, top_beams,\n                                  alpha, use_tpu)", "output": "Beam search decoding.\n\n    Models should ideally implement a more efficient version of this function.\n\n    Args:\n      features: an map of string to `Tensor`\n      decode_length: an integer.  How many additional timesteps to decode.\n      beam_size: number of beams.\n      top_beams: an integer. How many of the beams to return.\n      alpha: Float that controls the length penalty. larger the alpha, stronger\n        the preference for longer translations.\n      use_tpu: A bool, whether to do beam decode on TPU.\n\n    Returns:\n       samples: an integer `Tensor`. Top samples from the beam search", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def satisfier(self, term):  # type: (Term) -> Assignment\n        \"\"\"\n        \n        \"\"\"\n        assigned_term = None  # type: Term\n\n        for assignment in self._assignments:\n            if assignment.dependency.name != term.dependency.name:\n                continue\n\n            if (\n                not assignment.dependency.is_root\n                and not assignment.dependency.name == term.dependency.name\n            ):\n                if not assignment.is_positive():\n                    continue\n\n                assert not term.is_positive()\n\n                return assignment\n\n            if assigned_term is None:\n                assigned_term = assignment\n            else:\n                assigned_term = assigned_term.intersect(assignment)\n\n            # As soon as we have enough assignments to satisfy term, return them.\n            if assigned_term.satisfies(term):\n                return assignment\n\n        raise RuntimeError(\"[BUG] {} is not satisfied.\".format(term))", "output": "Returns the first Assignment in this solution such that the sublist of\n        assignments up to and including that entry collectively satisfies term.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def unpin(self):\n        \"\"\"\n        \"\"\"\n\n        await self._state.http.unpin_message(self.channel.id, self.id)\n        self.pinned = False", "output": "|coro|\n\n        Unpins the message.\n\n        You must have the :attr:`~Permissions.manage_messages` permission to do\n        this in a non-private channel context.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to unpin the message.\n        NotFound\n            The message or channel was not found or deleted.\n        HTTPException\n            Unpinning the message failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_circuit_provider(name, asn=None):\n    '''\n    \n    '''\n\n    nb_circuit_provider = get_('circuits', 'providers', name=name)\n    payload = {}\n    if nb_circuit_provider:\n        if nb_circuit_provider['asn'] == asn:\n            return False\n        else:\n            log.error('Duplicate provider with different ASN: %s: %s', name, asn)\n            raise CommandExecutionError(\n                'Duplicate provider with different ASN: {}: {}'.format(name, asn)\n            )\n    else:\n        payload = {\n            'name': name,\n            'slug': slugify(name)\n        }\n        if asn:\n            payload['asn'] = asn\n        circuit_provider = _add('circuits', 'providers', payload)\n        if circuit_provider:\n            return {'circuits': {'providers': {circuit_provider['id']: payload}}}\n        else:\n            return circuit_provider", "output": ".. versionadded:: 2019.2.0\n\n    Create a new Netbox circuit provider\n\n    name\n        The name of the circuit provider\n    asn\n        The ASN of the circuit provider\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion netbox.create_circuit_provider Telia 1299", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_frame(self, index=True, name=None):\n        \"\"\"\n        \n        \"\"\"\n\n        from pandas import DataFrame\n        if name is not None:\n            if not is_list_like(name):\n                raise TypeError(\"'name' must be a list / sequence \"\n                                \"of column names.\")\n\n            if len(name) != len(self.levels):\n                raise ValueError(\"'name' should have same length as \"\n                                 \"number of levels on index.\")\n            idx_names = name\n        else:\n            idx_names = self.names\n\n        # Guarantee resulting column order\n        result = DataFrame(\n            OrderedDict([\n                ((level if lvlname is None else lvlname),\n                 self._get_level_values(level))\n                for lvlname, level in zip(idx_names, range(len(self.levels)))\n            ]),\n            copy=False\n        )\n\n        if index:\n            result.index = self\n        return result", "output": "Create a DataFrame with the levels of the MultiIndex as columns.\n\n        Column ordering is determined by the DataFrame constructor with data as\n        a dict.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Set the index of the returned DataFrame as the original MultiIndex.\n\n        name : list / sequence of strings, optional\n            The passed names should substitute index level names.\n\n        Returns\n        -------\n        DataFrame : a DataFrame containing the original MultiIndex data.\n\n        See Also\n        --------\n        DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exclusion_indices_for_range(self, start_idx, end_idx):\n        \"\"\"\n        \n        \"\"\"\n        itree = self._minute_exclusion_tree\n        if itree.overlaps(start_idx, end_idx):\n            ranges = []\n            intervals = itree[start_idx:end_idx]\n            for interval in intervals:\n                ranges.append(interval.data)\n            return sorted(ranges)\n        else:\n            return None", "output": "Returns\n        -------\n        List of tuples of (start, stop) which represent the ranges of minutes\n        which should be excluded when a market minute window is requested.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def meanApprox(self, timeout, confidence=0.95):\n        \"\"\"\n        \n        \"\"\"\n        jrdd = self.map(float)._to_java_object_rdd()\n        jdrdd = self.ctx._jvm.JavaDoubleRDD.fromRDD(jrdd.rdd())\n        r = jdrdd.meanApprox(timeout, confidence).getFinalValue()\n        return BoundedFloat(r.mean(), r.confidence(), r.low(), r.high())", "output": ".. note:: Experimental\n\n        Approximate operation to return the mean within a timeout\n        or meet the confidence.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> r = sum(range(1000)) / 1000.0\n        >>> abs(rdd.meanApprox(1000) - r) / r < 0.05\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def translate_bytes(val):\n    '''\n    \n    '''\n    try:\n        val = int(val)\n    except (TypeError, ValueError):\n        if not isinstance(val, six.string_types):\n            val = six.text_type(val)\n    return val", "output": "These values can be expressed as an integer number of bytes, or a string\n    expression (i.e. 100mb, 1gb, etc.).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def delete_invite(self, invite):\n        \"\"\"\n        \"\"\"\n\n        invite_id = utils.resolve_invite(invite)\n        await self.http.delete_invite(invite_id)", "output": "|coro|\n\n        Revokes an :class:`.Invite`, URL, or ID to an invite.\n\n        You must have the :attr:`~.Permissions.manage_channels` permission in\n        the associated guild to do this.\n\n        Parameters\n        ----------\n        invite: Union[:class:`.Invite`, :class:`str`]\n            The invite to revoke.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to revoke invites.\n        NotFound\n            The invite is invalid or expired.\n        HTTPException\n            Revoking the invite failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getConf(self, key, defaultValue=_NoValue):\n        \"\"\"\n        \"\"\"\n        return self.sparkSession.conf.get(key, defaultValue)", "output": "Returns the value of Spark SQL configuration property for the given key.\n\n        If the key is not set and defaultValue is set, return\n        defaultValue. If the key is not set and defaultValue is not set, return\n        the system default value.\n\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\")\n        u'200'\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\", u\"10\")\n        u'10'\n        >>> sqlContext.setConf(\"spark.sql.shuffle.partitions\", u\"50\")\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\", u\"10\")\n        u'50'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_delete(self, path: str, handler: _WebHandler,\n                   **kwargs: Any) -> AbstractRoute:\n        \"\"\"\n        \n        \"\"\"\n        return self.add_route(hdrs.METH_DELETE, path, handler, **kwargs)", "output": "Shortcut for add_route with method DELETE", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self):\n        \"\"\"\"\"\"\n        id = self.get(\"id\")\n        if not id:\n            id = \"(none)\"\n        else:\n            id = id[0]\n\n        parent = self.get(\"parent\")\n        if not parent:\n            parent = \"(none)\"\n        else:\n            parent = parent[0]\n\n        print \"'%s'\" % id\n        print \"Parent project:%s\", parent\n        print \"Requirements:%s\", self.get(\"requirements\")\n        print \"Default build:%s\", string.join(self.get(\"debuild-build\"))\n        print \"Source location:%s\", string.join(self.get(\"source-location\"))\n        print \"Projects to build:%s\", string.join(self.get(\"projects-to-build\").sort());", "output": "Prints the project attributes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_search_space(path):\n    ''''''\n    content = json.dumps(get_json_content(path))\n    if not content:\n        raise ValueError('searchSpace file should not be empty')\n    return content", "output": "load search space content", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_bool(val):\n    '''\n    \n    '''\n    if val is None:\n        return False\n    if isinstance(val, bool):\n        return val\n    if isinstance(val, (six.text_type, six.string_types)):\n        return val.lower() in ('yes', '1', 'true')\n    if isinstance(val, six.integer_types):\n        return val > 0\n    if not isinstance(val, collections.Hashable):\n        return bool(val)\n    return False", "output": "Returns the logical value.\n\n    .. code-block:: jinja\n\n        {{ 'yes' | to_bool }}\n\n    will be rendered as:\n\n    .. code-block:: text\n\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def masked_rec_array_to_mgr(data, index, columns, dtype, copy):\n    \"\"\"\n    \n    \"\"\"\n\n    # essentially process a record array then fill it\n    fill_value = data.fill_value\n    fdata = ma.getdata(data)\n    if index is None:\n        index = get_names_from_index(fdata)\n        if index is None:\n            index = ibase.default_index(len(data))\n    index = ensure_index(index)\n\n    if columns is not None:\n        columns = ensure_index(columns)\n    arrays, arr_columns = to_arrays(fdata, columns)\n\n    # fill if needed\n    new_arrays = []\n    for fv, arr, col in zip(fill_value, arrays, arr_columns):\n        mask = ma.getmaskarray(data[col])\n        if mask.any():\n            arr, fv = maybe_upcast(arr, fill_value=fv, copy=True)\n            arr[mask] = fv\n        new_arrays.append(arr)\n\n    # create the manager\n    arrays, arr_columns = reorder_arrays(new_arrays, arr_columns, columns)\n    if columns is None:\n        columns = arr_columns\n\n    mgr = arrays_to_mgr(arrays, arr_columns, index, columns, dtype)\n\n    if copy:\n        mgr = mgr.copy()\n    return mgr", "output": "Extract from a masked rec array and create the manager.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_running():\n    '''\n    \n    '''\n    ret = []\n    for line in _machinectl('list')['stdout'].splitlines():\n        try:\n            ret.append(line.split()[0])\n        except IndexError:\n            pass\n    return sorted(ret)", "output": "Lists running nspawn containers\n\n    .. note::\n\n        ``nspawn.list`` also works to list running containers\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion nspawn.list_running\n        salt myminion nspawn.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _nodetool(cmd):\n    '''\n    \n    '''\n    nodetool = __salt__['config.option']('cassandra.nodetool')\n    host = __salt__['config.option']('cassandra.host')\n    return __salt__['cmd.run_stdout']('{0} -h {1} {2}'.format(nodetool, host, cmd))", "output": "Internal cassandra nodetool wrapper. Some functions are not\n    available via pycassa so we must rely on nodetool.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def instance_norm(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs, {'epsilon' : 'eps'})\n    new_attrs['eps'] = attrs.get('epsilon', 1e-5)\n    return 'InstanceNorm', new_attrs, inputs", "output": "Instance Normalization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_hg_revision(repopath):\r\n    \"\"\"\r\n    \"\"\"\r\n    try:\r\n        assert osp.isdir(osp.join(repopath, '.hg'))\r\n        proc = programs.run_program('hg', ['id', '-nib', repopath])\r\n        output, _err = proc.communicate()\r\n        # output is now: ('eba7273c69df+ 2015+ default\\n', None)\r\n        # Split 2 times max to allow spaces in branch names.\r\n        return tuple(output.decode().strip().split(None, 2))\r\n    except (subprocess.CalledProcessError, AssertionError, AttributeError,\r\n            OSError):\r\n        return (None, None, None)", "output": "Return Mercurial revision for the repository located at repopath\r\n       Result is a tuple (global, local, branch), with None values on error\r\n       For example:\r\n           >>> get_hg_revision(\".\")\r\n           ('eba7273c69df+', '2015+', 'default')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_and_uncompress(self, fileobj, dst_path):\n    \"\"\"\n    \"\"\"\n    try:\n      with tarfile.open(mode=\"r|*\", fileobj=fileobj) as tgz:\n        for tarinfo in tgz:\n          abs_target_path = _merge_relative_path(dst_path, tarinfo.name)\n\n          if tarinfo.isfile():\n            self._extract_file(tgz, tarinfo, abs_target_path)\n          elif tarinfo.isdir():\n            tf_v1.gfile.MakeDirs(abs_target_path)\n          else:\n            # We do not support symlinks and other uncommon objects.\n            raise ValueError(\n                \"Unexpected object type in tar archive: %s\" % tarinfo.type)\n\n        total_size_str = tf_utils.bytes_to_readable_str(\n            self._total_bytes_downloaded, True)\n        self._print_download_progress_msg(\n            \"Downloaded %s, Total size: %s\" % (self._url, total_size_str),\n            flush=True)\n    except tarfile.ReadError:\n      raise IOError(\"%s does not appear to be a valid module.\" % self._url)", "output": "Streams the content for the 'fileobj' and stores the result in dst_path.\n\n    Args:\n      fileobj: File handle pointing to .tar/.tar.gz content.\n      dst_path: Absolute path where to store uncompressed data from 'fileobj'.\n\n    Raises:\n      ValueError: Unknown object encountered inside the TAR file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gpu_memory_info(device_id=0):\n    \"\"\"\n\n    \"\"\"\n    free = ctypes.c_uint64()\n    total = ctypes.c_uint64()\n    dev_id = ctypes.c_int(device_id)\n    check_call(_LIB.MXGetGPUMemoryInformation64(dev_id, ctypes.byref(free), ctypes.byref(total)))\n    return (free.value, total.value)", "output": "Query CUDA for the free and total bytes of GPU global memory.\n\n    Parameters\n    ----------\n    device_id : int, optional\n        The device id of the GPU device.\n\n    Raises\n    ------\n    Will raise an exception on any CUDA error.\n\n    Returns\n    -------\n    (free, total) : (int, int)\n        The number of GPUs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def discount_rewards(r):\n    \"\"\"\"\"\"\n    discounted_r = np.zeros_like(r)\n    running_add = 0\n    for t in reversed(range(0, r.size)):\n        # Reset the sum, since this was a game boundary (pong specific!).\n        if r[t] != 0:\n            running_add = 0\n        running_add = running_add * gamma + r[t]\n        discounted_r[t] = running_add\n    return discounted_r", "output": "take 1D float array of rewards and compute discounted reward", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mtf_image_transformer_cifar_mp_4x():\n  \"\"\"\"\"\"\n  hparams = mtf_image_transformer_base_cifar()\n  hparams.mesh_shape = \"model:4;batch:8\"\n  hparams.layout = \"batch:batch;d_ff:model;heads:model\"\n  hparams.batch_size = 32\n  hparams.num_heads = 8\n  hparams.d_ff = 8192\n  return hparams", "output": "Data parallel CIFAR parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def status(self, targets, jobs=None, remote=None, show_checksums=False):\n        \"\"\"\n        \"\"\"\n        cloud = self._get_cloud(remote, \"status\")\n        return self.repo.cache.local.status(\n            targets, jobs=jobs, remote=cloud, show_checksums=show_checksums\n        )", "output": "Check status of data items in a cloud-agnostic way.\n\n        Args:\n            targets (list): list of targets to check status for.\n            jobs (int): number of jobs that can be running simultaneously.\n            remote (dvc.remote.base.RemoteBase): optional remote to compare\n                targets to. By default remote from core.remote config option\n                is used.\n            show_checksums (bool): show checksums instead of file names in\n                information messages.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def post_card(message,\n              hook_url=None,\n              title=None,\n              theme_color=None):\n    '''\n    \n    '''\n\n    if not hook_url:\n        hook_url = _get_hook_url()\n\n    if not message:\n        log.error('message is a required option.')\n\n    payload = {\n        \"text\": message,\n        \"title\": title,\n        \"themeColor\": theme_color\n    }\n\n    result = salt.utils.http.query(hook_url,\n                                   method='POST',\n                                   data=salt.utils.json.dumps(payload),\n                                   status=True)\n\n    if result['status'] <= 201:\n        return True\n    else:\n        return {\n            'res': False,\n            'message': result.get('body', result['status'])\n        }", "output": "Send a message to an MS Teams channel.\n    :param message:     The message to send to the MS Teams channel.\n    :param hook_url:    The Teams webhook URL, if not specified in the configuration.\n    :param title:       Optional title for the posted card\n    :param theme_color:  Optional hex color highlight for the posted card\n    :return:            Boolean if message was sent successfully.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' msteams.post_card message=\"Build is done\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def forward_backward(self, x):\n        \"\"\"\"\"\"\n        (src_seq, tgt_seq, src_valid_length, tgt_valid_length), batch_size = x\n        with mx.autograd.record():\n            out, _ = self._model(src_seq, tgt_seq[:, :-1],\n                                 src_valid_length, tgt_valid_length - 1)\n            smoothed_label = self._label_smoothing(tgt_seq[:, 1:])\n            ls = self._loss(out, smoothed_label, tgt_valid_length - 1).sum()\n            ls = (ls * (tgt_seq.shape[1] - 1)) / batch_size / self._rescale_loss\n        ls.backward()\n        return ls", "output": "Perform forward and backward computation for a batch of src seq and dst seq", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dzip_exact(*dicts):\n    \"\"\"\n    \n    \"\"\"\n    if not same(*map(viewkeys, dicts)):\n        raise ValueError(\n            \"dict keys not all equal:\\n\\n%s\" % _format_unequal_keys(dicts)\n        )\n    return {k: tuple(d[k] for d in dicts) for k in dicts[0]}", "output": "Parameters\n    ----------\n    *dicts : iterable[dict]\n        A sequence of dicts all sharing the same keys.\n\n    Returns\n    -------\n    zipped : dict\n        A dict whose keys are the union of all keys in *dicts, and whose values\n        are tuples of length len(dicts) containing the result of looking up\n        each key in each dict.\n\n    Raises\n    ------\n    ValueError\n        If dicts don't all have the same keys.\n\n    Examples\n    --------\n    >>> result = dzip_exact({'a': 1, 'b': 2}, {'a': 3, 'b': 4})\n    >>> result == {'a': (1, 3), 'b': (2, 4)}\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _init_vocab_from_list(self, vocab_list):\n    \"\"\"\n    \"\"\"\n    def token_gen():\n      for token in vocab_list:\n        if token not in RESERVED_TOKENS:\n          yield token\n\n    self._init_vocab(token_gen())", "output": "Initialize tokens from a list of tokens.\n\n    It is ok if reserved tokens appear in the vocab list. They will be\n    removed. The set of tokens in vocab_list should be unique.\n\n    Args:\n      vocab_list: A list of tokens.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rand_zoom(scale:uniform=1.0, p:float=1.):\n    \"\"\n    return zoom(scale=scale, **rand_pos, p=p)", "output": "Randomized version of `zoom`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_keyid(keyname):\n    '''\n    \n    '''\n    if not keyname:\n        return None\n    keypairs = list_keypairs(call='function')\n    keyid = keypairs[keyname]['id']\n    if keyid:\n        return keyid\n    raise SaltCloudNotFound('The specified ssh key could not be found.')", "output": "Return the ID of the keyname", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cached_path(url_or_filename: Union[str, Path], cache_dir: str = None) -> str:\n    \"\"\"\n    \n    \"\"\"\n    if cache_dir is None:\n        cache_dir = CACHE_DIRECTORY\n    if isinstance(url_or_filename, Path):\n        url_or_filename = str(url_or_filename)\n\n    url_or_filename = os.path.expanduser(url_or_filename)\n    parsed = urlparse(url_or_filename)\n\n    if parsed.scheme in ('http', 'https', 's3'):\n        # URL, so get it from the cache (downloading if necessary)\n        return get_from_cache(url_or_filename, cache_dir)\n    elif os.path.exists(url_or_filename):\n        # File, and it exists.\n        return url_or_filename\n    elif parsed.scheme == '':\n        # File, but it doesn't exist.\n        raise FileNotFoundError(\"file {} not found\".format(url_or_filename))\n    else:\n        # Something unknown\n        raise ValueError(\"unable to parse {} as a URL or as a local path\".format(url_or_filename))", "output": "Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_node(graph, text):\n    \"\"\"\"\"\"\n    match = _NODEPAT.match(text)\n    if match is not None:\n        node = match.group(1)\n        graph.node(node, label=match.group(2), shape='circle')\n        return node\n    match = _LEAFPAT.match(text)\n    if match is not None:\n        node = match.group(1)\n        graph.node(node, label=match.group(2), shape='box')\n        return node\n    raise ValueError('Unable to parse node: {0}'.format(text))", "output": "parse dumped node", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_pkgs(versions_as_list=False, **kwargs):\n    '''\n    \n    '''\n    versions_as_list = salt.utils.data.is_true(versions_as_list)\n    # 'removed', 'purge_desired' not yet implemented or not applicable\n    if any([salt.utils.data.is_true(kwargs.get(x))\n            for x in ('removed', 'purge_desired')]):\n        return {}\n\n    if 'pkg.list_pkgs' in __context__:\n        if versions_as_list:\n            return __context__['pkg.list_pkgs']\n        else:\n            ret = copy.deepcopy(__context__['pkg.list_pkgs'])\n            __salt__['pkg_resource.stringify'](ret)\n            return ret\n\n    ret = {}\n    cmd = ['port', 'installed']\n    out = salt.utils.mac_utils.execute_return_result(cmd)\n    for line in out.splitlines():\n        try:\n            name, version_num, active = re.split(r'\\s+', line.lstrip())[0:3]\n            version_num = version_num[1:]\n        except ValueError:\n            continue\n        if not LIST_ACTIVE_ONLY or active == '(active)':\n            __salt__['pkg_resource.add_pkg'](ret, name, version_num)\n\n    __salt__['pkg_resource.sort_pkglist'](ret)\n    __context__['pkg.list_pkgs'] = copy.deepcopy(ret)\n    if not versions_as_list:\n        __salt__['pkg_resource.stringify'](ret)\n    return ret", "output": "List the packages currently installed in a dict::\n\n        {'<package_name>': '<version>'}\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.list_pkgs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def empty(self):\n        \"\"\"\n        \n        \"\"\"\n        self._lock.acquire()\n        try:\n            out = self._buffer_tobytes()\n            del self._buffer[:]\n            if (self._event is not None) and not self._closed:\n                self._event.clear()\n            return out\n        finally:\n            self._lock.release()", "output": "Clear out the buffer and return all data that was in it.\n\n        :return:\n            any data that was in the buffer prior to clearing it out, as a\n            `str`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_save_containers(platforms, registry, load_cache) -> int:\n    \"\"\"\n    \n    \"\"\"\n    from joblib import Parallel, delayed\n    if len(platforms) == 0:\n        return 0\n\n    platform_results = Parallel(n_jobs=PARALLEL_BUILDS, backend=\"multiprocessing\")(\n        delayed(_build_save_container)(platform, registry, load_cache)\n        for platform in platforms)\n\n    is_error = False\n    for platform_result in platform_results:\n        if platform_result is not None:\n            logging.error('Failed to generate %s', platform_result)\n            is_error = True\n\n    return 1 if is_error else 0", "output": "Entry point to build and upload all built dockerimages in parallel\n    :param platforms: List of platforms\n    :param registry: Docker registry name\n    :param load_cache: Load cache before building\n    :return: 1 if error occurred, 0 otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_tf_checkpoint(path):\n    \"\"\"\"\"\"\n    from tensorflow.python import pywrap_tensorflow\n    tensors = {}\n    reader = pywrap_tensorflow.NewCheckpointReader(path)\n    var_to_shape_map = reader.get_variable_to_shape_map()\n    for key in sorted(var_to_shape_map):\n        tensor = reader.get_tensor(key)\n        tensors[key] = tensor\n    return tensors", "output": "read tensorflow checkpoint", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_with_random_selector(x, func, num_cases):\n  \"\"\"\n  \"\"\"\n  sel = tf.random_uniform([], maxval=num_cases, dtype=tf.int32)\n  # Pass the real x only to one of the func calls.\n  return control_flow_ops.merge([\n      func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case)\n      for case in range(num_cases)\n  ])[0]", "output": "Computes func(x, sel), with sel sampled from [0...num_cases-1].\n\n  Args:\n    x: input Tensor.\n    func: Python function to apply.\n    num_cases: Python int32, number of cases to sample sel from.\n\n  Returns:\n    The result of func(x, sel), where func receives the value of the\n    selector as a python integer, but sel is sampled dynamically.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def utime(self, path, times):\n        \"\"\"\n        \n        \"\"\"\n        path = self._adjust_cwd(path)\n        if times is None:\n            times = (time.time(), time.time())\n        self._log(DEBUG, \"utime({!r}, {!r})\".format(path, times))\n        attr = SFTPAttributes()\n        attr.st_atime, attr.st_mtime = times\n        self._request(CMD_SETSTAT, path, attr)", "output": "Set the access and modified times of the file specified by ``path``.\n        If ``times`` is ``None``, then the file's access and modified times\n        are set to the current time.  Otherwise, ``times`` must be a 2-tuple\n        of numbers, of the form ``(atime, mtime)``, which is used to set the\n        access and modified times, respectively.  This bizarre API is mimicked\n        from Python for the sake of consistency -- I apologize.\n\n        :param str path: path of the file to modify\n        :param tuple times:\n            ``None`` or a tuple of (access time, modified time) in standard\n            internet epoch time (seconds since 01 January 1970 GMT)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def daemonize(redirect_out=True):\n    '''\n    \n    '''\n    # Avoid circular import\n    import salt.utils.crypt\n    try:\n        pid = os.fork()\n        if pid > 0:\n            # exit first parent\n            salt.utils.crypt.reinit_crypto()\n            os._exit(salt.defaults.exitcodes.EX_OK)\n    except OSError as exc:\n        log.error('fork #1 failed: %s (%s)', exc.errno, exc)\n        sys.exit(salt.defaults.exitcodes.EX_GENERIC)\n\n    # decouple from parent environment\n    os.chdir('/')\n    # noinspection PyArgumentList\n    os.setsid()\n    os.umask(0o022)  # pylint: disable=blacklisted-function\n\n    # do second fork\n    try:\n        pid = os.fork()\n        if pid > 0:\n            salt.utils.crypt.reinit_crypto()\n            sys.exit(salt.defaults.exitcodes.EX_OK)\n    except OSError as exc:\n        log.error('fork #2 failed: %s (%s)', exc.errno, exc)\n        sys.exit(salt.defaults.exitcodes.EX_GENERIC)\n\n    salt.utils.crypt.reinit_crypto()\n\n    # A normal daemonization redirects the process output to /dev/null.\n    # Unfortunately when a python multiprocess is called the output is\n    # not cleanly redirected and the parent process dies when the\n    # multiprocessing process attempts to access stdout or err.\n    if redirect_out:\n        with salt.utils.files.fopen('/dev/null', 'r+') as dev_null:\n            # Redirect python stdin/out/err\n            # and the os stdin/out/err which can be different\n            os.dup2(dev_null.fileno(), sys.stdin.fileno())\n            os.dup2(dev_null.fileno(), sys.stdout.fileno())\n            os.dup2(dev_null.fileno(), sys.stderr.fileno())\n            os.dup2(dev_null.fileno(), 0)\n            os.dup2(dev_null.fileno(), 1)\n            os.dup2(dev_null.fileno(), 2)", "output": "Daemonize a process", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reshape(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    if len(inputs) == 1:\n        return 'reshape', attrs, inputs[0]\n    reshape_shape = list(proto_obj._params[inputs[1].name].asnumpy())\n    reshape_shape = [int(i) for i in reshape_shape]\n    new_attrs = {'shape': reshape_shape}\n    return 'reshape', new_attrs, inputs[:1]", "output": "Reshape the given array by the shape attribute.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def assign(name, value):\n    '''\n    \n    '''\n    ret = {}\n    cmd = 'sysctl {0}=\"{1}\"'.format(name, value)\n    data = __salt__['cmd.run_all'](cmd)\n\n    # Certain values cannot be set from this console, at the current\n    # securelevel or there are other restrictions that prevent us\n    # from applying the setting rightaway.\n    if re.match(r'^sysctl:.*: Operation not permitted$', data['stderr']) or \\\n      data['retcode'] != 0:\n        raise CommandExecutionError('sysctl failed: {0}'.format(\n            data['stderr']))\n    new_name, new_value = data['stdout'].split(':', 1)\n    ret[new_name] = new_value.split(' -> ')[-1]\n    return ret", "output": "Assign a single sysctl parameter for this minion\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' sysctl.assign net.inet.ip.forwarding 1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _copy_dist_from_dir(link_path, location):\n    \"\"\"\n\n    \"\"\"\n\n    # Note: This is currently VERY SLOW if you have a lot of data in the\n    # directory, because it copies everything with `shutil.copytree`.\n    # What it should really do is build an sdist and install that.\n    # See https://github.com/pypa/pip/issues/2195\n\n    if os.path.isdir(location):\n        rmtree(location)\n\n    # build an sdist\n    setup_py = 'setup.py'\n    sdist_args = [sys.executable]\n    sdist_args.append('-c')\n    sdist_args.append(SETUPTOOLS_SHIM % setup_py)\n    sdist_args.append('sdist')\n    sdist_args += ['--dist-dir', location]\n    logger.info('Running setup.py sdist for %s', link_path)\n\n    with indent_log():\n        call_subprocess(sdist_args, cwd=link_path, show_stdout=False)\n\n    # unpack sdist into `location`\n    sdist = os.path.join(location, os.listdir(location)[0])\n    logger.info('Unpacking sdist %s into %s', sdist, location)\n    unpack_file(sdist, location, content_type=None, link=None)", "output": "Copy distribution files in `link_path` to `location`.\n\n    Invoked when user requests to install a local directory. E.g.:\n\n        pip install .\n        pip install ~/dev/git-repos/python-prompt-toolkit", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def AddRow(self, *args):\n        '''  '''\n        NumRows = len(self.Rows)  # number of existing rows is our row number\n        CurrentRowNumber = NumRows  # this row's number\n        CurrentRow = []  # start with a blank row and build up\n        # -------------------------  Add the elements to a row  ------------------------- #\n        for i, element in enumerate(args):  # Loop through list of elements and add them to the row\n            element.Position = (CurrentRowNumber, i)\n            element.ParentContainer = self\n            CurrentRow.append(element)\n        # -------------------------  Append the row to list of Rows  ------------------------- #\n        self.Rows.append(CurrentRow)", "output": "Parms are a variable number of Elements", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def multi_split(s, split):\n    # type: (S, Iterable[S]) -> List[S]\n    \"\"\"\"\"\"\n    for r in split:\n        s = s.replace(r, \"|\")\n    return [i for i in s.split(\"|\") if len(i) > 0]", "output": "Splits on multiple given separators.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_instancenorm(net, node, model, builder):\n    \"\"\"\n    \"\"\"\n    import numpy as _np\n    input_name, output_name = _get_input_output_name(net, node)\n\n    name = node['name']\n    inputs = node['inputs']\n    outputs = node['outputs']\n\n\n    data_blob_name = _get_node_name(net, inputs[0][0])\n    gamma_blob_name = _get_node_name(net, inputs[1][0])\n    beta_blob_name = _get_node_name(net, inputs[2][0])\n    channels = _get_node_channels(net, inputs[0][0])\n\n    bn_output_name = output_name + '_bn_'\n\n    builder.add_batchnorm(\n        name = name + '_normalize',\n        channels = channels,\n        gamma = _np.ones((channels, )),\n        beta = _np.zeros((channels, )),\n        mean = None,\n        variance = None,\n        input_name = input_name,\n        output_name = bn_output_name,\n        compute_mean_var = True,\n        instance_normalization = True)\n\n    gamma_input_names = [bn_output_name, gamma_blob_name]\n    gamma_output_name = output_name + '_mult_gamma'\n    builder.add_elementwise(name=name+'_mult_gamma', input_names=gamma_input_names,\n        output_name = gamma_output_name, mode='MULTIPLY', alpha = None)\n    beta_input_names = [gamma_output_name, beta_blob_name]\n    builder.add_elementwise(name=name+'_add_beta', input_names=beta_input_names,\n        output_name = output_name, mode='ADD', alpha=None)", "output": "Convert an instance norm layer from mxnet to coreml.\n\n    Parameters\n    ----------\n    net: network\n        A mxnet network object.\n\n    node: layer\n        Node to convert.\n\n    model: model\n        An model for MXNet\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_user(name, **client_args):\n    '''\n    \n    '''\n    if not user_exists(name, **client_args):\n        log.info('User \\'%s\\' does not exist', name)\n        return False\n\n    client = _client(**client_args)\n    client.drop_user(name)\n\n    return True", "output": "Remove a user.\n\n    name\n        Name of the user to remove\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' influxdb.remove_user <name>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_parent_scope(block):\n        \"\"\"\"\"\"\n        original = block\n        if not TextBlockHelper.is_fold_trigger(block):\n            # search level of next non blank line\n            while block.text().strip() == '' and block.isValid():\n                block = block.next()\n            ref_lvl = TextBlockHelper.get_fold_lvl(block) - 1\n            block = original\n            while (block.blockNumber() and\n                   (not TextBlockHelper.is_fold_trigger(block) or\n                    TextBlockHelper.get_fold_lvl(block) > ref_lvl)):\n                block = block.previous()\n        return block", "output": "Find parent scope, if the block is not a fold trigger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode(self, input_str):\n    \"\"\"\"\"\"\n    inputs = self.encoders[\"inputs\"].encode(input_str) + [EOS_ID]\n    batch_inputs = np.reshape(inputs, [1, -1, 1, 1])  # Make it 3D.\n    return batch_inputs", "output": "Input str to features dict, ready for inference.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_table_data(self):\r\n        \"\"\"\"\"\"\r\n        data = self._simplify_shape(\r\n                self.table_widget.get_data())\r\n        if self.table_widget.array_btn.isChecked():\r\n            return array(data)\r\n        elif pd and self.table_widget.df_btn.isChecked():\r\n            info = self.table_widget.pd_info\r\n            buf = io.StringIO(self.table_widget.pd_text)\r\n            return pd.read_csv(buf, **info)\r\n        return data", "output": "Return clipboard processed as data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _path_condition_name(self, api_id, path):\n        \"\"\"\n        \n        \"\"\"\n        # only valid characters for CloudFormation logical id are [A-Za-z0-9], but swagger paths can contain\n        # slashes and curly braces for templated params, e.g., /foo/{customerId}. So we'll replace\n        # non-alphanumeric characters.\n        path_logical_id = path.replace('/', 'SLASH').replace('{', 'OB').replace('}', 'CB')\n        return '{}{}PathCondition'.format(api_id, path_logical_id)", "output": "Generate valid condition logical id from the given API logical id and swagger resource path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_request_body(fn):\n    '''\n    \n    '''\n    @functools.wraps(fn)\n    def wrapped(*args, **kwargs):  # pylint: disable=C0111\n        if cherrypy.request.process_request_body is not False:\n            fn(*args, **kwargs)\n    return wrapped", "output": "A decorator to skip a processor function if process_request_body is False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_column(self, data, column_name=\"\", inplace=False):\n        \"\"\"\n        \n        \"\"\"\n        # Check type for pandas dataframe or SArray?\n        if not isinstance(data, SArray):\n            raise TypeError(\"Must give column as SArray\")\n        if not isinstance(column_name, str):\n            raise TypeError(\"Invalid column name: must be str\")\n\n        if inplace:\n            self.__is_dirty__ = True\n            with cython_context():\n                if self._is_vertex_frame():\n                    graph_proxy = self.__graph__.__proxy__.add_vertex_field(data.__proxy__, column_name)\n                    self.__graph__.__proxy__ = graph_proxy\n                elif self._is_edge_frame():\n                    graph_proxy = self.__graph__.__proxy__.add_edge_field(data.__proxy__, column_name)\n                    self.__graph__.__proxy__ = graph_proxy\n            return self\n        else:\n            return super(GFrame, self).add_column(data, column_name, inplace=inplace)", "output": "Adds the specified column to this SFrame.  The number of elements in\n        the data given must match every other column of the SFrame.\n\n        If inplace == False (default) this operation does not modify the\n        current SFrame, returning a new SFrame.\n\n        If inplace == True, this operation modifies the current\n        SFrame, returning self.\n\n        Parameters\n        ----------\n        data : SArray\n            The 'column' of data.\n\n        column_name : string\n            The name of the column. If no name is given, a default name is chosen.\n\n        inplace : bool, optional. Defaults to False.\n            Whether the SFrame is modified in place.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reraise(additional_msg):\n  \"\"\"\"\"\"\n  exc_type, exc_value, exc_traceback = sys.exc_info()\n  msg = str(exc_value) + \"\\n\" + additional_msg\n  six.reraise(exc_type, exc_type(msg), exc_traceback)", "output": "Reraise an exception with an additional message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _memoize(f):\n  \"\"\"\"\"\"\n  nothing = object()  # Unique \"no value\" sentinel object.\n  cache = {}\n  # Use a reentrant lock so that if f references the resulting wrapper we die\n  # with recursion depth exceeded instead of deadlocking.\n  lock = threading.RLock()\n  @functools.wraps(f)\n  def wrapper(arg):\n    if cache.get(arg, nothing) is nothing:\n      with lock:\n        if cache.get(arg, nothing) is nothing:\n          cache[arg] = f(arg)\n    return cache[arg]\n  return wrapper", "output": "Memoizing decorator for f, which must have exactly 1 hashable argument.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_close(self):\n        ''' \n\n        '''\n        log.info('WebSocket connection closed: code=%s, reason=%r', self.close_code, self.close_reason)\n        if self.connection is not None:\n            self.application.client_lost(self.connection)", "output": "Clean up when the connection is closed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lossless_float_to_int(funcname, func, argname, arg):\n    \"\"\"\n    \n    \"\"\"\n    if not isinstance(arg, float):\n        return arg\n\n    arg_as_int = int(arg)\n    if arg == arg_as_int:\n        warnings.warn(\n            \"{f} expected an int for argument {name!r}, but got float {arg}.\"\n            \" Coercing to int.\".format(\n                f=funcname,\n                name=argname,\n                arg=arg,\n            ),\n        )\n        return arg_as_int\n\n    raise TypeError(arg)", "output": "A preprocessor that coerces integral floats to ints.\n\n    Receipt of non-integral floats raises a TypeError.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_indicator_MFI(DataFrame, N=14):\n    \"\"\"\n    \n    \"\"\"\n    C = DataFrame['close']\n    H = DataFrame['high']\n    L = DataFrame['low']\n    VOL = DataFrame['volume']\n    TYP = (C + H + L) / 3\n    V1 = SUM(IF(TYP > REF(TYP, 1), TYP * VOL, 0), N) / \\\n        SUM(IF(TYP < REF(TYP, 1), TYP * VOL, 0), N)\n    mfi = 100 - (100 / (1 + V1))\n    DICT = {'MFI': mfi}\n\n    return pd.DataFrame(DICT)", "output": "\u8d44\u91d1\u6307\u6807\n    TYP := (HIGH + LOW + CLOSE)/3;\n    V1:=SUM(IF(TYP>REF(TYP,1),TYP*VOL,0),N)/SUM(IF(TYP<REF(TYP,1),TYP*VOL,0),N);\n    MFI:100-(100/(1+V1));\n    \u8d4b\u503c: (\u6700\u9ad8\u4ef7 + \u6700\u4f4e\u4ef7 + \u6536\u76d8\u4ef7)/3\n    V1\u8d4b\u503c:\u5982\u679cTYP>1\u65e5\u524d\u7684TYP,\u8fd4\u56deTYP*\u6210\u4ea4\u91cf(\u624b),\u5426\u5219\u8fd4\u56de0\u7684N\u65e5\u7d2f\u548c/\u5982\u679cTYP<1\u65e5\u524d\u7684TYP,\u8fd4\u56deTYP*\u6210\u4ea4\u91cf(\u624b),\u5426\u5219\u8fd4\u56de0\u7684N\u65e5\u7d2f\u548c\n    \u8f93\u51fa\u8d44\u91d1\u6d41\u91cf\u6307\u6807:100-(100/(1+V1))", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expand(tmpl, *args, **kwargs):\n    \"\"\"\n    \"\"\"\n    replacer = functools.partial(_expand_variable_match, list(args), kwargs)\n    return _VARIABLE_RE.sub(replacer, tmpl)", "output": "Expand a path template with the given variables.\n\n    ..code-block:: python\n\n        >>> expand('users/*/messages/*', 'me', '123')\n        users/me/messages/123\n        >>> expand('/v1/{name=shelves/*/books/*}', name='shelves/1/books/3')\n        /v1/shelves/1/books/3\n\n    Args:\n        tmpl (str): The path template.\n        args: The positional variables for the path.\n        kwargs: The named variables for the path.\n\n    Returns:\n        str: The expanded path\n\n    Raises:\n        ValueError: If a positional or named variable is required by the\n            template but not specified or if an unexpected template expression\n            is encountered.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def items(self):\n        \"\"\"\"\"\"\n        result = [(key, self._mapping[key]) for key in list(self._queue)]\n        result.reverse()\n        return result", "output": "Return a list of items.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait_for_winexe(host, port, username, password, timeout=900):\n    '''\n    \n    '''\n    start = time.time()\n    log.debug(\n        'Attempting winexe connection to host %s on port %s',\n        host, port\n    )\n    try_count = 0\n    while True:\n        try_count += 1\n        try:\n            # Shell out to winexe to check %TEMP%\n            ret_code = run_winexe_command(\n                \"sc\", \"query winexesvc\", host, username, password, port\n            )\n            if ret_code == 0:\n                log.debug('winexe connected...')\n                return True\n            log.debug('Return code was %s', ret_code)\n        except socket.error as exc:\n            log.debug('Caught exception in wait_for_winexesvc: %s', exc)\n\n        if time.time() - start > timeout:\n            return False\n        time.sleep(1)", "output": "Wait until winexe connection can be established.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_author(self, *, name, url=EmptyEmbed, icon_url=EmptyEmbed):\n        \"\"\"\n        \"\"\"\n\n        self._author = {\n            'name': str(name)\n        }\n\n        if url is not EmptyEmbed:\n            self._author['url'] = str(url)\n\n        if icon_url is not EmptyEmbed:\n            self._author['icon_url'] = str(icon_url)\n\n        return self", "output": "Sets the author for the embed content.\n\n        This function returns the class instance to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        name: :class:`str`\n            The name of the author.\n        url: :class:`str`\n            The URL for the author.\n        icon_url: :class:`str`\n            The URL of the author icon. Only HTTP(S) is supported.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def minimum(lhs, rhs):\n    \"\"\"\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)", "output": "Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def diff(self, n, axis=0):\n        \"\"\"\n        \"\"\"\n        if axis == 0:\n            # Cannot currently calculate diff across multiple blocks since this\n            # function is invoked via apply\n            raise NotImplementedError\n        new_values = (self.values - self.shift(n, axis=axis)[0].values).asi8\n\n        # Reshape the new_values like how algos.diff does for timedelta data\n        new_values = new_values.reshape(1, len(new_values))\n        new_values = new_values.astype('timedelta64[ns]')\n        return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]", "output": "1st discrete difference\n\n        Parameters\n        ----------\n        n : int, number of periods to diff\n        axis : int, axis to diff upon. default 0\n\n        Return\n        ------\n        A list with a new TimeDeltaBlock.\n\n        Note\n        ----\n        The arguments here are mimicking shift so they are called correctly\n        by apply.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(domain, key, user=None):\n    '''\n    \n\n    '''\n    cmd = 'defaults read \"{0}\" \"{1}\"'.format(domain, key)\n    return __salt__['cmd.run'](cmd, runas=user)", "output": "Write a default to the system\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' macdefaults.read com.apple.CrashReporter DialogType\n\n        salt '*' macdefaults.read NSGlobalDomain ApplePersistence\n\n    domain\n        The name of the domain to read from\n\n    key\n        The key of the given domain to read from\n\n    user\n        The user to write the defaults to", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter_by_func(self, func:Callable)->'ItemList':\n        \"\"\n        self.items = array([o for o in self.items if func(o)])\n        return self", "output": "Only keep elements for which `func` returns `True`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pprint(self, *args, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        pprint.pprint(self.asList(), *args, **kwargs)", "output": "Pretty-printer for parsed results as a list, using the\n        `pprint <https://docs.python.org/3/library/pprint.html>`_ module.\n        Accepts additional positional or keyword args as defined for\n        `pprint.pprint <https://docs.python.org/3/library/pprint.html#pprint.pprint>`_ .\n\n        Example::\n\n            ident = Word(alphas, alphanums)\n            num = Word(nums)\n            func = Forward()\n            term = ident | num | Group('(' + func + ')')\n            func <<= ident + Group(Optional(delimitedList(term)))\n            result = func.parseString(\"fna a,b,(fnb c,d,200),100\")\n            result.pprint(width=40)\n\n        prints::\n\n            ['fna',\n             ['a',\n              'b',\n              ['(', 'fnb', ['c', 'd', '200'], ')'],\n              '100']]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _connect(**kwargs):\n    '''\n    \n    '''\n    connargs = {}\n    for name in ['uri', 'server', 'port', 'tls', 'no_verify', 'binddn',\n                 'bindpw', 'anonymous']:\n        connargs[name] = _config(name, **kwargs)\n\n    return _LDAPConnection(**connargs).ldap", "output": "Instantiate LDAP Connection class and return an LDAP connection object", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def error_msg_from_exception(e):\n    \"\"\"\n    \"\"\"\n    msg = ''\n    if hasattr(e, 'message'):\n        if isinstance(e.message, dict):\n            msg = e.message.get('message')\n        elif e.message:\n            msg = '{}'.format(e.message)\n    return msg or '{}'.format(e)", "output": "Translate exception into error message\n\n    Database have different ways to handle exception. This function attempts\n    to make sense of the exception object and construct a human readable\n    sentence.\n\n    TODO(bkyryliuk): parse the Presto error message from the connection\n                     created via create_engine.\n    engine = create_engine('presto://localhost:3506/silver') -\n      gives an e.message as the str(dict)\n    presto.connect('localhost', port=3506, catalog='silver') - as a dict.\n    The latter version is parsed correctly by this function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_delete(user_id=None, name=None, profile=None, **connection_args):\n    '''\n    \n    '''\n    kstone = auth(profile, **connection_args)\n    if name:\n        for user in kstone.users.list():\n            if user.name == name:\n                user_id = user.id\n                break\n    if not user_id:\n        return {'Error': 'Unable to resolve user id'}\n    kstone.users.delete(user_id)\n    ret = 'User ID {0} deleted'.format(user_id)\n    if name:\n\n        ret += ' ({0})'.format(name)\n    return ret", "output": "Delete a user (keystone user-delete)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.user_delete c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.user_delete user_id=c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.user_delete name=nova", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hook(self, m:nn.Module, i:Tensors, o:Tensors)->Tuple[Rank0Tensor,Rank0Tensor]:\n        \"\"\n        return o.mean().item(),o.std().item()", "output": "Take the mean and std of `o`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _interfaces_ipconfig(out):\n    '''\n    \n    '''\n    ifaces = dict()\n    iface = None\n    adapter_iface_regex = re.compile(r'adapter (\\S.+):$')\n\n    for line in out.splitlines():\n        if not line:\n            continue\n        # TODO what does Windows call Infiniband and 10/40gige adapters\n        if line.startswith('Ethernet'):\n            iface = ifaces[adapter_iface_regex.search(line).group(1)]\n            iface['up'] = True\n            addr = None\n            continue\n        if iface:\n            key, val = line.split(',', 1)\n            key = key.strip(' .')\n            val = val.strip()\n            if addr and key == 'Subnet Mask':\n                addr['netmask'] = val\n            elif key in ('IP Address', 'IPv4 Address'):\n                if 'inet' not in iface:\n                    iface['inet'] = list()\n                addr = {'address': val.rstrip('(Preferred)'),\n                        'netmask': None,\n                        'broadcast': None}  # TODO find the broadcast\n                iface['inet'].append(addr)\n            elif 'IPv6 Address' in key:\n                if 'inet6' not in iface:\n                    iface['inet'] = list()\n                # XXX What is the prefixlen!?\n                addr = {'address': val.rstrip('(Preferred)'),\n                        'prefixlen': None}\n                iface['inet6'].append(addr)\n            elif key == 'Physical Address':\n                iface['hwaddr'] = val\n            elif key == 'Media State':\n                # XXX seen used for tunnel adaptors\n                # might be useful\n                iface['up'] = (val != 'Media disconnected')", "output": "Returns a dictionary of interfaces with various information about each\n    (up/down state, ip address, netmask, and hwaddr)\n\n    NOTE: This is not used by any function and may be able to be removed in the\n    future.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(saltenv='base', test=None):\n    '''\n    \n    '''\n    sevent = salt.utils.event.get_event(\n            'master',\n            __opts__['sock_dir'],\n            __opts__['transport'],\n            opts=__opts__,\n            listen=True)\n\n    master_key = salt.utils.master.get_master_key('root', __opts__)\n\n    __jid_event__.fire_event({'key': master_key}, 'salt/reactors/manage/list')\n\n    results = sevent.get_event(wait=30, tag='salt/reactors/manage/list-results')\n    reactors = results['reactors']\n    return reactors", "output": "List currently configured reactors\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run reactor.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wiki_2x2_base():\n  \"\"\"\n  \"\"\"\n  hparams = mtf_transformer.mtf_transformer_base_lm()\n  hparams.shared_embedding_and_softmax_weights = False\n  # no dropout - dataset is big enough to avoid overfitting.\n  hparams.attention_dropout = 0.0\n  hparams.relu_dropout = 0.0\n  hparams.layer_prepostprocess_dropout = 0.0\n  hparams.max_length = 1024\n  # 4 sequences per core\n  hparams.batch_size = 32\n  # We don't use linear decay in these experiments, since we don't want\n  # a sharp jump in quality at the end of the training schedule.\n  # You can insert this once you find the right architecture.\n  hparams.learning_rate_schedule = \"rsqrt_decay\"\n  hparams.mesh_shape = \"all:8\"\n  hparams.layout = \"batch:all;experts:all\"\n\n  # parameters for mixture-of-experts\n  moe.set_default_moe_hparams(hparams)\n  hparams.moe_num_experts = 16\n  hparams.moe_hidden_size = 8192\n\n  hparams.decoder_layers = [\"att\", \"drd\"] * 6\n  hparams.d_model = 1024\n  hparams.d_ff = 2048\n  hparams.d_kv = 128\n  hparams.num_heads = 4\n\n  return hparams", "output": "Set of architectural experiments - language model on wikipedia on a 2x2.\n\n  1 epoch = ~180k steps at batch size 32 - we may never finish an epoch!\n\n  Returns:\n    a hparams", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_header_accept(self, accepts):\n        \"\"\"\n        \n        \"\"\"\n        if not accepts:\n            return\n\n        accepts = [x.lower() for x in accepts]\n\n        if 'application/json' in accepts:\n            return 'application/json'\n        else:\n            return ', '.join(accepts)", "output": "Returns `Accept` based on an array of accepts provided.\n\n        :param accepts: List of headers.\n        :return: Accept (e.g. application/json).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_plugin_title(self):\n        \"\"\"\"\"\"\n        if self.dockwidget is not None:\n            win = self.dockwidget\n        elif self.undocked_window is not None:\n            win = self.undocked_window\n        else:\n            return\n        win.setWindowTitle(self.get_plugin_title())", "output": "Update plugin title, i.e. dockwidget or window title", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_tags(filesystemid,\n                tags,\n                keyid=None,\n                key=None,\n                profile=None,\n                region=None,\n                **kwargs):\n    '''\n    \n    '''\n\n    client = _get_conn(key=key, keyid=keyid, profile=profile, region=region)\n\n    new_tags = []\n    for k, v in six.iteritems(tags):\n        new_tags.append({'Key': k, 'Value': v})\n\n    client.create_tags(FileSystemId=filesystemid, Tags=new_tags)", "output": "Creates or overwrites tags associated with a file system.\n    Each tag is a key-value pair. If a tag key specified in the request\n    already exists on the file system, this operation overwrites\n    its value with the value provided in the request.\n\n    filesystemid\n        (string) - ID of the file system for whose tags will be modified.\n\n    tags\n        (dict) - The tags to add to the file system\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'my-minion' boto_efs.create_tags", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rank():\n    \"\"\" \n    \"\"\"\n    rank_data_url = 'https://raw.githubusercontent.com/Microsoft/LightGBM/master/examples/lambdarank/'\n    x_train, y_train = sklearn.datasets.load_svmlight_file(cache(rank_data_url + 'rank.train'))\n    x_test, y_test = sklearn.datasets.load_svmlight_file(cache(rank_data_url + 'rank.test'))\n    q_train = np.loadtxt(cache(rank_data_url + 'rank.train.query'))\n    q_test = np.loadtxt(cache(rank_data_url + 'rank.test.query'))\n    return x_train, y_train, x_test, y_test, q_train, q_test", "output": "Ranking datasets from lightgbm repository.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def annotation_path(cls, project, incident, annotation):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/incidents/{incident}/annotations/{annotation}\",\n            project=project,\n            incident=incident,\n            annotation=annotation,\n        )", "output": "Return a fully-qualified annotation string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __clean_tmp(sfn):\n    '''\n    \n    '''\n    if sfn.startswith(os.path.join(tempfile.gettempdir(),\n                                   salt.utils.files.TEMPFILE_PREFIX)):\n        # Don't remove if it exists in file_roots (any saltenv)\n        all_roots = itertools.chain.from_iterable(\n                six.itervalues(__opts__['file_roots']))\n        in_roots = any(sfn.startswith(root) for root in all_roots)\n        # Only clean up files that exist\n        if os.path.exists(sfn) and not in_roots:\n            os.remove(sfn)", "output": "Clean out a template temp file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def catalog(self):\n        \"\"\"\n        \"\"\"\n        from pyspark.sql.catalog import Catalog\n        if not hasattr(self, \"_catalog\"):\n            self._catalog = Catalog(self)\n        return self._catalog", "output": "Interface through which the user may create, drop, alter or query underlying\n        databases, tables, functions etc.\n\n        :return: :class:`Catalog`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode(self, s):\n    \"\"\"\n    \"\"\"\n    try:\n      import matplotlib.image as im  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf.logging.warning(\n          \"Reading an image requires matplotlib to be installed: %s\", e)\n      raise NotImplementedError(\"Image reading not implemented.\")\n    return im.imread(s)", "output": "Transform a string with a filename into a list of RGB integers.\n\n    Args:\n      s: path to the file with an image.\n\n    Returns:\n      ids: list of integers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_mp4(from_idx, to_idx, _params):\n    \"\"\"\n    \n    \"\"\"\n    succ = set()\n    fail = set()\n    for idx in range(from_idx, to_idx):\n        name = 's' + str(idx)\n        save_folder = '{src_path}/{nm}'.format(src_path=_params['src_path'], nm=name)\n        if idx == 0 or os.path.isdir(save_folder):\n            continue\n        script = \"http://spandh.dcs.shef.ac.uk/gridcorpus/{nm}/video/{nm}.mpg_vcd.zip\".format( \\\n                    nm=name)\n        down_sc = 'cd {src_path} && curl {script} --output {nm}.mpg_vcd.zip && \\\n                    unzip {nm}.mpg_vcd.zip'.format(script=script,\n                                                   nm=name,\n                                                   src_path=_params['src_path'])\n        try:\n            print(down_sc)\n            os.system(down_sc)\n            succ.add(idx)\n        except OSError as error:\n            print(error)\n            fail.add(idx)\n    return (succ, fail)", "output": "download mp4s", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def MapDecoder(field_descriptor, new_default, is_message_map):\n  \"\"\"\"\"\"\n\n  key = field_descriptor\n  tag_bytes = encoder.TagBytes(field_descriptor.number,\n                               wire_format.WIRETYPE_LENGTH_DELIMITED)\n  tag_len = len(tag_bytes)\n  local_DecodeVarint = _DecodeVarint\n  # Can't read _concrete_class yet; might not be initialized.\n  message_type = field_descriptor.message_type\n\n  def DecodeMap(buffer, pos, end, message, field_dict):\n    submsg = message_type._concrete_class()\n    value = field_dict.get(key)\n    if value is None:\n      value = field_dict.setdefault(key, new_default(message))\n    while 1:\n      # Read length.\n      (size, pos) = local_DecodeVarint(buffer, pos)\n      new_pos = pos + size\n      if new_pos > end:\n        raise _DecodeError('Truncated message.')\n      # Read sub-message.\n      submsg.Clear()\n      if submsg._InternalParse(buffer, pos, new_pos) != new_pos:\n        # The only reason _InternalParse would return early is if it\n        # encountered an end-group tag.\n        raise _DecodeError('Unexpected end-group tag.')\n\n      if is_message_map:\n        value[submsg.key].MergeFrom(submsg.value)\n      else:\n        value[submsg.key] = submsg.value\n\n      # Predict that the next tag is another copy of the same repeated field.\n      pos = new_pos + tag_len\n      if buffer[new_pos:pos] != tag_bytes or new_pos == end:\n        # Prediction failed.  Return.\n        return new_pos\n\n  return DecodeMap", "output": "Returns a decoder for a map field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_summary_metadata(display_name, description, num_thresholds):\n  \"\"\"\n  \"\"\"\n  pr_curve_plugin_data = plugin_data_pb2.PrCurvePluginData(\n      version=PROTO_VERSION, num_thresholds=num_thresholds)\n  content = pr_curve_plugin_data.SerializeToString()\n  return summary_pb2.SummaryMetadata(\n      display_name=display_name,\n      summary_description=description,\n      plugin_data=summary_pb2.SummaryMetadata.PluginData(\n          plugin_name=PLUGIN_NAME,\n          content=content))", "output": "Create a `summary_pb2.SummaryMetadata` proto for pr_curves plugin data.\n\n  Arguments:\n    display_name: The display name used in TensorBoard.\n    description: The description to show in TensorBoard.\n    num_thresholds: The number of thresholds to use for PR curves.\n\n  Returns:\n    A `summary_pb2.SummaryMetadata` protobuf object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main():\n    \"\"\"\"\"\"\n    desc = 'Generate character statistics from a source tree'\n    parser = argparse.ArgumentParser(description=desc)\n    parser.add_argument(\n        '--src',\n        dest='src',\n        required=True,\n        help='The root of the source tree'\n    )\n    parser.add_argument(\n        '--out',\n        dest='out',\n        default='chars.py',\n        help='The output filename'\n    )\n\n    args = parser.parse_args()\n\n    stats = generate_statistics(args.src)\n    with open(args.out, 'wb') as out_f:\n        out_f.write('CHARS={0}\\n'.format(stats))", "output": "The main function of the script", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _convert_to_border(cls, border_dict):\n        \"\"\"\n        \n        \"\"\"\n\n        from openpyxl.styles import Border\n\n        _border_key_map = {\n            'diagonalup': 'diagonalUp',\n            'diagonaldown': 'diagonalDown',\n        }\n\n        border_kwargs = {}\n        for k, v in border_dict.items():\n            if k in _border_key_map:\n                k = _border_key_map[k]\n            if k == 'color':\n                v = cls._convert_to_color(v)\n            if k in ['left', 'right', 'top', 'bottom', 'diagonal']:\n                v = cls._convert_to_side(v)\n            border_kwargs[k] = v\n\n        return Border(**border_kwargs)", "output": "Convert ``border_dict`` to an openpyxl v2 Border object\n        Parameters\n        ----------\n        border_dict : dict\n            A dict with zero or more of the following keys (or their synonyms).\n                'left'\n                'right'\n                'top'\n                'bottom'\n                'diagonal'\n                'diagonal_direction'\n                'vertical'\n                'horizontal'\n                'diagonalUp' ('diagonalup')\n                'diagonalDown' ('diagonaldown')\n                'outline'\n        Returns\n        -------\n        border : openpyxl.styles.Border", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_yielded(yielded: _Yieldable) -> Future:\n    \"\"\"\n\n    \"\"\"\n    if yielded is None or yielded is moment:\n        return moment\n    elif yielded is _null_future:\n        return _null_future\n    elif isinstance(yielded, (list, dict)):\n        return multi(yielded)  # type: ignore\n    elif is_future(yielded):\n        return typing.cast(Future, yielded)\n    elif isawaitable(yielded):\n        return _wrap_awaitable(yielded)  # type: ignore\n    else:\n        raise BadYieldError(\"yielded unknown object %r\" % (yielded,))", "output": "Convert a yielded object into a `.Future`.\n\n    The default implementation accepts lists, dictionaries, and\n    Futures. This has the side effect of starting any coroutines that\n    did not start themselves, similar to `asyncio.ensure_future`.\n\n    If the `~functools.singledispatch` library is available, this function\n    may be extended to support additional types. For example::\n\n        @convert_yielded.register(asyncio.Future)\n        def _(asyncio_future):\n            return tornado.platform.asyncio.to_tornado_future(asyncio_future)\n\n    .. versionadded:: 4.1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_model_snapshots(self, job_id, snapshot_id=None, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if job_id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'job_id'.\")\n        return self.transport.perform_request(\n            \"GET\",\n            _make_path(\n                \"_ml\", \"anomaly_detectors\", job_id, \"model_snapshots\", snapshot_id\n            ),\n            params=params,\n            body=body,\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html>`_\n\n        :arg job_id: The ID of the job to fetch\n        :arg snapshot_id: The ID of the snapshot to fetch\n        :arg body: Model snapshot selection criteria\n        :arg desc: True if the results should be sorted in descending order\n        :arg end: The filter 'end' query parameter\n        :arg from_: Skips a number of documents\n        :arg size: The default number of documents returned in queries as a\n            string.\n        :arg sort: Name of the field to sort on\n        :arg start: The filter 'start' query parameter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_rpmmacros(runas='root'):\n    '''\n    \n    '''\n    home = os.path.expanduser('~')\n    rpmbuilddir = os.path.join(home, 'rpmbuild')\n    if not os.path.isdir(rpmbuilddir):\n        __salt__['file.makedirs_perms'](name=rpmbuilddir, user=runas, group='mock')\n\n    mockdir = os.path.join(home, 'mock')\n    if not os.path.isdir(mockdir):\n        __salt__['file.makedirs_perms'](name=mockdir, user=runas, group='mock')\n\n    rpmmacros = os.path.join(home, '.rpmmacros')\n    with salt.utils.files.fopen(rpmmacros, 'w') as afile:\n        afile.write(\n            salt.utils.stringutils.to_str('%_topdir {0}\\n'.format(rpmbuilddir))\n        )\n        afile.write('%signature gpg\\n')\n        afile.write('%_source_filedigest_algorithm 8\\n')\n        afile.write('%_binary_filedigest_algorithm 8\\n')\n        afile.write('%_gpg_name packaging@saltstack.com\\n')", "output": "Create the .rpmmacros file in user's home directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rae(label, pred):\n    \"\"\"\"\"\"\n    numerator = np.mean(np.abs(label - pred), axis=None)\n    denominator = np.mean(np.abs(label - np.mean(label, axis=None)), axis=None)\n    return numerator / denominator", "output": "computes the relative absolute error (condensed using standard deviation formula)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ParseAbstractInteger(text, is_long=False):\n  \"\"\"\n  \"\"\"\n  # Do the actual parsing. Exception handling is propagated to caller.\n  try:\n    # We force 32-bit values to int and 64-bit values to long to make\n    # alternate implementations where the distinction is more significant\n    # (e.g. the C++ implementation) simpler.\n    if is_long:\n      return long(text, 0)\n    else:\n      return int(text, 0)\n  except ValueError:\n    raise ValueError('Couldn\\'t parse integer: %s' % text)", "output": "Parses an integer without checking size/signedness.\n\n  Args:\n    text: The text to parse.\n    is_long: True if the value should be returned as a long integer.\n\n  Returns:\n    The integer value.\n\n  Raises:\n    ValueError: Thrown Iff the text is not a valid integer.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_selected_cb(parents, combobox):\n    \"\"\"\n    \n    \"\"\"\n    if parents is not None and len(parents) == 0:\n        combobox.setCurrentIndex(0)\n    else:\n        item = parents[-1]\n        for i in range(combobox.count()):\n            if combobox.itemData(i) == item:\n                combobox.setCurrentIndex(i)\n                break", "output": "Update the combobox with the selected item based on the parents.\n\n    Parameters\n    ----------\n    parents : list of :class:`FoldScopeHelper`\n    combobox : :class:`qtpy.QtWidets.QComboBox`\n        The combobox to populate\n\n    Returns\n    -------\n    None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bias(self, arr:Collection, is_item:bool=True):\n        \"\"\n        idx = self.get_idx(arr, is_item)\n        m = self.model\n        layer = m.i_bias if is_item else m.u_bias\n        return layer(idx).squeeze()", "output": "Bias for item or user (based on `is_item`) for all in `arr`. (Set model to `cpu` and no grad.)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def indexables(self):\n        \"\"\"  \"\"\"\n        if self._indexables is None:\n\n            d = self.description\n\n            # the index columns is just a simple index\n            self._indexables = [GenericIndexCol(name='index', axis=0)]\n\n            for i, n in enumerate(d._v_names):\n\n                dc = GenericDataIndexableCol(\n                    name=n, pos=i, values=[n], version=self.version)\n                self._indexables.append(dc)\n\n        return self._indexables", "output": "create the indexables from the table description", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install(cert,\n            password,\n            keychain=\"/Library/Keychains/System.keychain\",\n            allow_any=False,\n            keychain_password=None):\n    '''\n    \n    '''\n    if keychain_password is not None:\n        unlock_keychain(keychain, keychain_password)\n\n    cmd = 'security import {0} -P {1} -k {2}'.format(cert, password, keychain)\n    if allow_any:\n        cmd += ' -A'\n    return __salt__['cmd.run'](cmd)", "output": "Install a certificate\n\n    cert\n        The certificate to install\n\n    password\n        The password for the certificate being installed formatted in the way\n        described for openssl command in the PASS PHRASE ARGUMENTS section.\n\n        Note: The password given here will show up as plaintext in the job returned\n        info.\n\n    keychain\n        The keychain to install the certificate to, this defaults to\n        /Library/Keychains/System.keychain\n\n    allow_any\n        Allow any application to access the imported certificate without warning\n\n    keychain_password\n        If your keychain is likely to be locked pass the password and it will be unlocked\n        before running the import\n\n        Note: The password given here will show up as plaintext in the returned job\n        info.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' keychain.install test.p12 test123", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_template_data(template_file):\n    \"\"\"\n    \n    \"\"\"\n\n    if not pathlib.Path(template_file).exists():\n        raise ValueError(\"Template file not found at {}\".format(template_file))\n\n    with open(template_file, 'r') as fp:\n        try:\n            return yaml_parse(fp.read())\n        except (ValueError, yaml.YAMLError) as ex:\n            raise ValueError(\"Failed to parse template: {}\".format(str(ex)))", "output": "Read the template file, parse it as JSON/YAML and return the template as a dictionary.\n\n    Parameters\n    ----------\n    template_file : string\n        Path to the template to read\n\n    Returns\n    -------\n    Template data as a dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_factors(n):\n    \"\"\"\n    \"\"\"\n\n    def factor(n, i, combi, res):\n        \"\"\"[summary]\n        helper function\n\n        Arguments:\n            n {[int]} -- [number]\n            i {[int]} -- [to tested divisor]\n            combi {[list]} -- [catch divisors]\n            res {[list]} -- [all factors of the number n]\n        \n        Returns:\n            [list] -- [res]\n        \"\"\"\n\n        while i * i <= n:\n            if n % i == 0:\n                res += combi + [i, int(n/i)],\n                factor(n/i, i, combi+[i], res)\n            i += 1\n        return res\n    return factor(n, 2, [], [])", "output": "[summary]\n    \n    Arguments:\n        n {[int]} -- [to analysed number]\n    \n    Returns:\n        [list of lists] -- [all factors of the number n]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait_input(self, prompt=''):\r\n        \"\"\"\"\"\"\r\n        self.new_prompt(prompt)\r\n        self.setFocus()\r\n        self.input_mode = True\r\n        self.input_loop = QEventLoop()\r\n        self.input_loop.exec_()\r\n        self.input_loop = None", "output": "Wait for input (raw_input support)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_path(python):\n    \"\"\"\n    \"\"\"\n\n    python = Path(python).as_posix()\n    out, err = run(\n        [python, \"-c\", \"import json, sys; print(json.dumps(sys.path))\"], nospin=True\n    )\n    if out:\n        return json.loads(out)\n    else:\n        return []", "output": "Load the :mod:`sys.path` from the given python executable's environment as json\n\n    :param str python: Path to a valid python executable\n    :return: A python representation of the `sys.path` value of the given python executable.\n    :rtype: list\n\n    >>> load_path(\"/home/user/.virtualenvs/requirementslib-5MhGuG3C/bin/python\")\n    ['', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python37.zip', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7/lib-dynload', '/home/user/.pyenv/versions/3.7.0/lib/python3.7', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7/site-packages', '/home/user/git/requirementslib/src']", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def optionally(preprocessor):\n    \"\"\"\n    \"\"\"\n    @wraps(preprocessor)\n    def wrapper(func, argname, arg):\n        return arg if arg is None else preprocessor(func, argname, arg)\n\n    return wrapper", "output": "Modify a preprocessor to explicitly allow `None`.\n\n    Parameters\n    ----------\n    preprocessor : callable[callable, str, any -> any]\n        A preprocessor to delegate to when `arg is not None`.\n\n    Returns\n    -------\n    optional_preprocessor : callable[callable, str, any -> any]\n        A preprocessor that delegates to `preprocessor` when `arg is not None`.\n\n    Examples\n    --------\n    >>> def preprocessor(func, argname, arg):\n    ...     if not isinstance(arg, int):\n    ...         raise TypeError('arg must be int')\n    ...     return arg\n    ...\n    >>> @preprocess(a=optionally(preprocessor))\n    ... def f(a):\n    ...     return a\n    ...\n    >>> f(1)  # call with int\n    1\n    >>> f('a')  # call with not int\n    Traceback (most recent call last):\n       ...\n    TypeError: arg must be int\n    >>> f(None) is None  # call with explicit None\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stats_timing(stats_key, stats_logger):\n    \"\"\"\"\"\"\n    start_ts = now_as_float()\n    try:\n        yield start_ts\n    except Exception as e:\n        raise e\n    finally:\n        stats_logger.timing(stats_key, now_as_float() - start_ts)", "output": "Provide a transactional scope around a series of operations.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def isID(self, elem, attr):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        if attr is None: attr__o = None\n        else: attr__o = attr._o\n        ret = libxml2mod.xmlIsID(self._o, elem__o, attr__o)\n        return ret", "output": "Determine whether an attribute is of type ID. In case we\n          have DTD(s) then this is done if DTD loading has been\n          requested. In the case of HTML documents parsed with the\n           HTML parser, then ID detection is done systematically.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _StructMessageToJsonObject(self, message):\n    \"\"\"\"\"\"\n    fields = message.fields\n    ret = {}\n    for key in fields:\n      ret[key] = self._ValueMessageToJsonObject(fields[key])\n    return ret", "output": "Converts Struct message according to Proto3 JSON Specification.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, name_or_klass):\n        \"\"\"\n        \n        \"\"\"\n        if not isinstance(name_or_klass, str):\n            name_or_klass = name_or_klass.__name__\n        return self._extensions[name_or_klass]", "output": "Get a extension by name (or class).\n\n        :param name_or_klass: The name or the class of the extension to get\n        :type name_or_klass: str or type\n        :rtype: spyder.api.mode.EditorExtension", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_project(self, path):\r\n        \"\"\"\"\"\"\r\n        self.open_project(path=path)\r\n        self.setup_menu_actions()\r\n        self.add_to_recent(path)", "output": "Create a new project.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_shell(pid=None, max_depth=6):\n    \"\"\"\n    \"\"\"\n    pid = str(pid or os.getpid())\n    mapping = _get_process_mapping()\n    login_shell = os.environ.get('SHELL', '')\n    for _ in range(max_depth):\n        try:\n            proc = mapping[pid]\n        except KeyError:\n            break\n        name = os.path.basename(proc.args[0]).lower()\n        if name in SHELL_NAMES:\n            return (name, proc.args[0])\n        elif proc.args[0].startswith('-'):\n            # This is the login shell. Use the SHELL environ if possible\n            # because it provides better information.\n            if login_shell:\n                name = login_shell.lower()\n            else:\n                name = proc.args[0][1:].lower()\n            return (os.path.basename(name), name)\n        pid = proc.ppid     # Go up one level.\n    return None", "output": "Get the shell that the supplied pid or os.getpid() is running in.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def PositionalEncoding(x, params, **unused_kwargs):\n  \"\"\"\"\"\"\n  if not isinstance(x, (list, tuple)):  # non-chunked inputs\n    symbol_size = np.shape(x)[1]\n    return x + params[:, :symbol_size, :]\n  # Chunked case: apply to all chunks selecting as much as needed.\n  offset = 0\n  results = []\n  for chunk in x:\n    symbol_size = np.shape(chunk)[1]\n    results.append(chunk + params[:, offset:offset + symbol_size, :])\n    offset += symbol_size\n  return results", "output": "Implements bare positional encoding.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expanding(self, *args, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        from pandas.core.window import ExpandingGroupby\n        return ExpandingGroupby(self, *args, **kwargs)", "output": "Return an expanding grouper, providing expanding\n        functionality per group.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def data(self, index, role):\r\n        \"\"\"\"\"\"\r\n        if role == Qt.ToolTipRole:\r\n            root_dir = self.path_list[0].split(osp.sep)[-1]\r\n            if index.data() == root_dir:\r\n                return osp.join(self.root_path, root_dir)\r\n        return QSortFilterProxyModel.data(self, index, role)", "output": "Show tooltip with full path only for the root directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_protobuf_value(value_pb, val):\n    \"\"\"\n    \"\"\"\n    attr, val = _pb_attr_value(val)\n    if attr == \"key_value\":\n        value_pb.key_value.CopyFrom(val)\n    elif attr == \"timestamp_value\":\n        value_pb.timestamp_value.CopyFrom(val)\n    elif attr == \"entity_value\":\n        entity_pb = entity_to_protobuf(val)\n        value_pb.entity_value.CopyFrom(entity_pb)\n    elif attr == \"array_value\":\n        if len(val) == 0:\n            array_value = entity_pb2.ArrayValue(values=[])\n            value_pb.array_value.CopyFrom(array_value)\n        else:\n            l_pb = value_pb.array_value.values\n            for item in val:\n                i_pb = l_pb.add()\n                _set_protobuf_value(i_pb, item)\n    elif attr == \"geo_point_value\":\n        value_pb.geo_point_value.CopyFrom(val)\n    else:  # scalar, just assign\n        setattr(value_pb, attr, val)", "output": "Assign 'val' to the correct subfield of 'value_pb'.\n\n    The Protobuf API uses different attribute names based on value types\n    rather than inferring the type.\n\n    Some value types (entities, keys, lists) cannot be directly\n    assigned; this function handles them correctly.\n\n    :type value_pb: :class:`.entity_pb2.Value`\n    :param value_pb: The value protobuf to which the value is being assigned.\n\n    :type val: :class:`datetime.datetime`, boolean, float, integer, string,\n               :class:`google.cloud.datastore.key.Key`,\n               :class:`google.cloud.datastore.entity.Entity`\n    :param val: The value to be assigned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def contextMenuEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        if self.model.showndata:\r\n            self.refresh_menu()\r\n            self.menu.popup(event.globalPos())\r\n            event.accept()\r\n        else:\r\n            self.empty_ws_menu.popup(event.globalPos())\r\n            event.accept()", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_img(object, handle, **kwargs):\n    \"\"\"\"\"\"\n\n    if isinstance(object, np.ndarray):\n        normalized = _normalize_array(object)\n        object = PIL.Image.fromarray(normalized)\n\n    if isinstance(object, PIL.Image.Image):\n        object.save(handle, **kwargs)  # will infer format from handle's url ext.\n    else:\n        raise ValueError(\"Can only save_img for numpy arrays or PIL.Images!\")", "output": "Save numpy array as image file on CNS.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def uniform_binning_correction(x, n_bits=8):\n  \"\"\"\n  \"\"\"\n  n_bins = 2**n_bits\n  batch_size, height, width, n_channels = common_layers.shape_list(x)\n  hwc = float(height * width * n_channels)\n\n  x = x + tf.random_uniform(\n      shape=(batch_size, height, width, n_channels),\n      minval=0.0, maxval=1.0/n_bins)\n  objective = -np.log(n_bins) * hwc * tf.ones(batch_size)\n  return x, objective", "output": "Replaces x^i with q^i(x) = U(x, x + 1.0 / 256.0).\n\n  Args:\n    x: 4-D Tensor of shape (NHWC)\n    n_bits: optional.\n  Returns:\n    x: x ~ U(x, x + 1.0 / 256)\n    objective: Equivalent to -q(x)*log(q(x)).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def draw_boxes(im, boxes, labels=None, color=None):\n    \"\"\"\n    \n    \"\"\"\n    boxes = np.asarray(boxes, dtype='int32')\n    if labels is not None:\n        assert len(labels) == len(boxes), \"{} != {}\".format(len(labels), len(boxes))\n    areas = (boxes[:, 2] - boxes[:, 0] + 1) * (boxes[:, 3] - boxes[:, 1] + 1)\n    sorted_inds = np.argsort(-areas)    # draw large ones first\n    assert areas.min() > 0, areas.min()\n    # allow equal, because we are not very strict about rounding error here\n    assert boxes[:, 0].min() >= 0 and boxes[:, 1].min() >= 0 \\\n        and boxes[:, 2].max() <= im.shape[1] and boxes[:, 3].max() <= im.shape[0], \\\n        \"Image shape: {}\\n Boxes:\\n{}\".format(str(im.shape), str(boxes))\n\n    im = im.copy()\n    if color is None:\n        color = (15, 128, 15)\n    if im.ndim == 2 or (im.ndim == 3 and im.shape[2] == 1):\n        im = cv2.cvtColor(im, cv2.COLOR_GRAY2BGR)\n    for i in sorted_inds:\n        box = boxes[i, :]\n        if labels is not None:\n            im = draw_text(im, (box[0], box[1]), labels[i], color=color)\n        cv2.rectangle(im, (box[0], box[1]), (box[2], box[3]),\n                      color=color, thickness=1)\n    return im", "output": "Args:\n        im (np.ndarray): a BGR image in range [0,255]. It will not be modified.\n        boxes (np.ndarray): a numpy array of shape Nx4 where each row is [x1, y1, x2, y2].\n        labels: (list[str] or None)\n        color: a 3-tuple BGR color (in range [0, 255])\n\n    Returns:\n        np.ndarray: a new image.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_system_date(newdate):\n    '''\n    \n    '''\n    fmts = ['%Y-%m-%d', '%m-%d-%Y', '%m-%d-%y',\n            '%m/%d/%Y', '%m/%d/%y', '%Y/%m/%d']\n    # Get date/time object from newdate\n    dt_obj = _try_parse_datetime(newdate, fmts)\n    if dt_obj is None:\n        return False\n\n    # Set time using set_system_date_time()\n    return set_system_date_time(years=dt_obj.year,\n                                months=dt_obj.month,\n                                days=dt_obj.day)", "output": "Set the Windows system date. Use <mm-dd-yy> format for the date.\n\n    Args:\n        newdate (str):\n            The date to set. Can be any of the following formats\n\n            - YYYY-MM-DD\n            - MM-DD-YYYY\n            - MM-DD-YY\n            - MM/DD/YYYY\n            - MM/DD/YY\n            - YYYY/MM/DD\n\n    Returns:\n        bool: ``True`` if successful, otherwise ``False``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' system.set_system_date '03-28-13'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_blobs(self, prefix=''):\n    \"\"\"\"\"\"\n    return [b.name for b in self.bucket.list_blobs(prefix=prefix)]", "output": "Lists names of all blobs by their prefix.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dataset(self, dataset_ref, retry=DEFAULT_RETRY):\n        \"\"\"\n        \"\"\"\n        if isinstance(dataset_ref, str):\n            dataset_ref = DatasetReference.from_string(\n                dataset_ref, default_project=self.project\n            )\n\n        api_response = self._call_api(retry, method=\"GET\", path=dataset_ref.path)\n        return Dataset.from_api_repr(api_response)", "output": "Fetch the dataset referenced by ``dataset_ref``\n\n        Args:\n            dataset_ref (Union[ \\\n                :class:`~google.cloud.bigquery.dataset.DatasetReference`, \\\n                str, \\\n            ]):\n                A reference to the dataset to fetch from the BigQuery API.\n                If a string is passed in, this method attempts to create a\n                dataset reference from a string using\n                :func:`~google.cloud.bigquery.dataset.DatasetReference.from_string`.\n            retry (:class:`google.api_core.retry.Retry`):\n                (Optional) How to retry the RPC.\n\n        Returns:\n            google.cloud.bigquery.dataset.Dataset:\n                A ``Dataset`` instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deploy_api(self, ret):\n        '''\n        \n        '''\n        if self.restApiId:\n            res = self._cleanup_api()\n            if not res.get('deleted'):\n                ret['comment'] = 'Failed to cleanup restAreId {0}'.format(self.restApiId)\n                ret['abort'] = True\n                ret['result'] = False\n                return ret\n            return ret\n\n        response = __salt__['boto_apigateway.create_api'](name=self.rest_api_name,\n                                                          description=_Swagger.AWS_API_DESCRIPTION,\n                                                          **self._common_aws_args)\n\n        if not response.get('created'):\n            ret['result'] = False\n            ret['abort'] = True\n            if 'error' in response:\n                ret['comment'] = 'Failed to create rest api: {0}.'.format(response['error']['message'])\n            return ret\n\n        self.restApiId = response.get('restapi', {}).get('id')\n\n        return _log_changes(ret, 'deploy_api', response.get('restapi'))", "output": "this method create the top level rest api in AWS apigateway", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_data(label, image):\n    \"\"\"\n    \n    \"\"\"\n    base_url = 'http://yann.lecun.com/exdb/mnist/'\n    with gzip.open(download_file(base_url+label, os.path.join('data',label))) as flbl:\n        magic, num = struct.unpack(\">II\", flbl.read(8))\n        label = np.fromstring(flbl.read(), dtype=np.int8)\n    with gzip.open(download_file(base_url+image, os.path.join('data',image)), 'rb') as fimg:\n        magic, num, rows, cols = struct.unpack(\">IIII\", fimg.read(16))\n        image = np.fromstring(fimg.read(), dtype=np.uint8).reshape(len(label), rows, cols)\n    return (label, image)", "output": "download and read data into numpy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_plugin(self):\r\n        \"\"\"\"\"\"\r\n        self.main.add_dockwidget(self)\r\n\r\n        self.focus_changed.connect(self.main.plugin_focus_changed)\r\n        self.edit_goto.connect(self.main.editor.load)\r\n        self.edit_goto[str, int, str, bool].connect(\r\n                         lambda fname, lineno, word, processevents:\r\n                         self.main.editor.load(fname, lineno, word,\r\n                                               processevents=processevents))\r\n        self.main.editor.breakpoints_saved.connect(self.set_spyder_breakpoints)\r\n        self.main.editor.run_in_current_ipyclient.connect(self.run_script)\r\n        self.main.editor.run_cell_in_ipyclient.connect(self.run_cell)\r\n        self.main.workingdirectory.set_current_console_wd.connect(\r\n                                     self.set_current_client_working_directory)\r\n\r\n        self.tabwidget.currentChanged.connect(self.update_working_directory)\r\n\r\n        self._remove_old_stderr_files()", "output": "Register plugin in Spyder's main window", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_elements_by_class_name(self, name):\n        \"\"\"\n        \n        \"\"\"\n        return self.find_elements(by=By.CLASS_NAME, value=name)", "output": "Finds elements by class name.\n\n        :Args:\n         - name: The class name of the elements to find.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_class_name('foo')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ntile(n):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.ntile(int(n)))", "output": "Window function: returns the ntile group id (from 1 to `n` inclusive)\n    in an ordered window partition. For example, if `n` is 4, the first\n    quarter of the rows will get value 1, the second quarter will get 2,\n    the third quarter will get 3, and the last quarter will get 4.\n\n    This is equivalent to the NTILE function in SQL.\n\n    :param n: an integer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gather_file_data(name):\n    \"\"\"\n    \n    \"\"\"\n    res = {'name': name}\n    try:\n        res['mtime'] = osp.getmtime(name)\n        res['size'] = osp.getsize(name)\n    except OSError:\n        pass\n    return res", "output": "Gather data about a given file.\n\n    Returns a dict with fields name, mtime and size, containing the relevant\n    data for the fiel.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_service(protocol=None, service_address=None, scheduler='wlc'):\n    '''\n    \n    '''\n\n    cmd = '{0} -A {1}'.format(__detect_os(),\n                              _build_cmd(protocol=protocol,\n                                         service_address=service_address,\n                                         scheduler=scheduler))\n    out = __salt__['cmd.run_all'](cmd, python_shell=False)\n\n    # A non-zero return code means fail\n    if out['retcode']:\n        ret = out['stderr'].strip()\n    else:\n        ret = True\n    return ret", "output": "Add a virtual service.\n\n    protocol\n        The service protocol(only support tcp, udp and fwmark service).\n\n    service_address\n        The LVS service address.\n\n    scheduler\n        Algorithm for allocating TCP connections and UDP datagrams to real servers.\n\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lvs.add_service tcp 1.1.1.1:80 rr", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train(cls, rdd, k=10, maxIterations=20, docConcentration=-1.0,\n              topicConcentration=-1.0, seed=None, checkpointInterval=10, optimizer=\"em\"):\n        \"\"\"\n        \"\"\"\n        model = callMLlibFunc(\"trainLDAModel\", rdd, k, maxIterations,\n                              docConcentration, topicConcentration, seed,\n                              checkpointInterval, optimizer)\n        return LDAModel(model)", "output": "Train a LDA model.\n\n        :param rdd:\n          RDD of documents, which are tuples of document IDs and term\n          (word) count vectors. The term count vectors are \"bags of\n          words\" with a fixed-size vocabulary (where the vocabulary size\n          is the length of the vector). Document IDs must be unique\n          and >= 0.\n        :param k:\n          Number of topics to infer, i.e., the number of soft cluster\n          centers.\n          (default: 10)\n        :param maxIterations:\n          Maximum number of iterations allowed.\n          (default: 20)\n        :param docConcentration:\n          Concentration parameter (commonly named \"alpha\") for the prior\n          placed on documents' distributions over topics (\"theta\").\n          (default: -1.0)\n        :param topicConcentration:\n          Concentration parameter (commonly named \"beta\" or \"eta\") for\n          the prior placed on topics' distributions over terms.\n          (default: -1.0)\n        :param seed:\n          Random seed for cluster initialization. Set as None to generate\n          seed based on system time.\n          (default: None)\n        :param checkpointInterval:\n          Period (in iterations) between checkpoints.\n          (default: 10)\n        :param optimizer:\n          LDAOptimizer used to perform the actual calculation. Currently\n          \"em\", \"online\" are supported.\n          (default: \"em\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ConvertScalarFieldValue(value, field, require_str=False):\n  \"\"\"\n  \"\"\"\n  if field.cpp_type in _INT_TYPES:\n    return _ConvertInteger(value)\n  elif field.cpp_type in _FLOAT_TYPES:\n    return _ConvertFloat(value)\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_BOOL:\n    return _ConvertBool(value, require_str)\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_STRING:\n    if field.type == descriptor.FieldDescriptor.TYPE_BYTES:\n      return base64.b64decode(value)\n    else:\n      # Checking for unpaired surrogates appears to be unreliable,\n      # depending on the specific Python version, so we check manually.\n      if _UNPAIRED_SURROGATE_PATTERN.search(value):\n        raise ParseError('Unpaired surrogate')\n      return value\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_ENUM:\n    # Convert an enum value.\n    enum_value = field.enum_type.values_by_name.get(value, None)\n    if enum_value is None:\n      try:\n        number = int(value)\n        enum_value = field.enum_type.values_by_number.get(number, None)\n      except ValueError:\n        raise ParseError('Invalid enum value {0} for enum type {1}.'.format(\n            value, field.enum_type.full_name))\n      if enum_value is None:\n        raise ParseError('Invalid enum value {0} for enum type {1}.'.format(\n            value, field.enum_type.full_name))\n    return enum_value.number", "output": "Convert a single scalar field value.\n\n  Args:\n    value: A scalar value to convert the scalar field value.\n    field: The descriptor of the field to convert.\n    require_str: If True, the field value must be a str.\n\n  Returns:\n    The converted scalar field value\n\n  Raises:\n    ParseError: In case of convert problems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        self.alive.value = False\n        qsize = 0\n        try:\n            while True:\n                self.queue.get(timeout=0.1)\n                qsize += 1\n        except QEmptyExcept:\n            pass\n        print(\"Queue size on reset: {}\".format(qsize))\n        for i, p in enumerate(self.proc):\n            p.join()\n        self.proc.clear()", "output": "Resets the generator by stopping all processes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __get_managed_files_rpm(self):\n        '''\n        \n        '''\n        dirs = set()\n        links = set()\n        files = set()\n\n        for line in salt.utils.stringutils.to_str(self._syscall(\"rpm\", None, None, '-qlav')[0]).split(os.linesep):\n            line = line.strip()\n            if not line:\n                continue\n            line = line.replace(\"\\t\", \" \").split(\" \")\n            if line[0][0] == \"d\":\n                dirs.add(line[-1])\n            elif line[0][0] == \"l\":\n                links.add(line[-1])\n            elif line[0][0] == \"-\":\n                files.add(line[-1])\n\n        return sorted(files), sorted(dirs), sorted(links)", "output": "Get a list of all system files, belonging to the RedHat package manager.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chown(self, path, owner, group, recursive=False):\n        \"\"\"\n        \n        \"\"\"\n        bite = self.get_bite()\n        if owner:\n            if group:\n                return all(bite.chown(self.list_path(path), \"%s:%s\" % (owner, group),\n                                      recurse=recursive))\n            return all(bite.chown(self.list_path(path), owner, recurse=recursive))\n        return list(bite.chgrp(self.list_path(path), group, recurse=recursive))", "output": "Use snakebite.chown/chgrp, if available.\n\n        One of owner or group must be set. Just setting group calls chgrp.\n\n        :param path: update-able file(s)\n        :type path: either a string or sequence of strings\n        :param owner: new owner, can be blank\n        :type owner: string\n        :param group: new group, can be blank\n        :type group: string\n        :param recursive: change just listed entry(ies) or all in directories\n        :type recursive: boolean, default is False\n        :return: list of all changed items", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_list(auth=None, **kwargs):\n    '''\n    \n    '''\n    cloud = get_operator_cloud(auth)\n    kwargs = _clean_kwargs(**kwargs)\n    return cloud.list_images(**kwargs)", "output": "List images\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glanceng.image_list\n        salt '*' glanceng.image_list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_gl_class_type(obj_class):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if obj_class == _SFrame:\n        return \"SFrame\"\n    elif obj_class == _SGraph:\n        return \"SGraph\"\n    elif obj_class == _SArray:\n        return \"SArray\"\n    elif _is_not_pickle_safe_gl_model_class(obj_class):\n        return \"Model\"\n    else:\n        return None", "output": "Internal util to get the type of the GLC class. The pickle file stores\n    this name so that it knows how to construct the object on unpickling.\n\n    Parameters\n    ----------\n    obj_class    : Class which has to be categorized.\n\n    Returns\n    ----------\n    A class type for the pickle file to save.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_running(name, no_start=False, path=None):\n    '''\n    \n    '''\n    _ensure_exists(name, path=path)\n    pre = state(name, path=path)\n    if pre == 'running':\n        # This will be a no-op but running the function will give us a pretty\n        # return dict.\n        return start(name, path=path)\n    elif pre == 'stopped':\n        if no_start:\n            raise CommandExecutionError(\n                'Container \\'{0}\\' is not running'.format(name)\n            )\n        return start(name, path=path)\n    elif pre == 'frozen':\n        if no_start:\n            raise CommandExecutionError(\n                'Container \\'{0}\\' is not running'.format(name)\n            )\n        return unfreeze(name, path=path)", "output": "If the container is not currently running, start it. This function returns\n    the state that the container was in before changing\n\n    path\n        path to the container parent directory\n        default: /var/lib/lxc (system)\n\n        .. versionadded:: 2015.8.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addCondition(self, *fns, **kwargs):\n        \"\"\"\n        \"\"\"\n        msg = kwargs.get(\"message\", \"failed user-defined condition\")\n        exc_type = ParseFatalException if kwargs.get(\"fatal\", False) else ParseException\n        for fn in fns:\n            fn = _trim_arity(fn)\n            def pa(s,l,t):\n                if not bool(fn(s,l,t)):\n                    raise exc_type(s,l,msg)\n            self.parseAction.append(pa)\n        self.callDuringTry = self.callDuringTry or kwargs.get(\"callDuringTry\", False)\n        return self", "output": "Add a boolean predicate function to expression's list of parse actions. See\n        :class:`setParseAction` for function call signatures. Unlike ``setParseAction``,\n        functions passed to ``addCondition`` need to return boolean success/fail of the condition.\n\n        Optional keyword arguments:\n        - message = define a custom message to be used in the raised exception\n        - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException\n\n        Example::\n\n            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))\n            year_int = integer.copy()\n            year_int.addCondition(lambda toks: toks[0] >= 2000, message=\"Only support years 2000 and later\")\n            date_str = year_int + '/' + integer + '/' + integer\n\n            result = date_str.parseString(\"1999/12/31\")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_group(path, follow_symlinks=True):\n    '''\n    \n    '''\n    func_name = '{0}.get_group'.format(__virtualname__)\n    if __opts__.get('fun', '') == func_name:\n        log.info('The function %s should not be used on Windows systems; '\n                 'see function docs for details. The value returned is the '\n                 'user (owner).', func_name)\n\n    return get_user(path, follow_symlinks)", "output": "Return the group that owns a given file\n\n    Under Windows, this will return the user (owner) of the file.\n\n    While a file in Windows does have a 'primary group', this rarely used\n    attribute generally has no bearing on permissions unless intentionally\n    configured and is only used to support Unix compatibility features (e.g.\n    Services For Unix, NFS services).\n\n    Salt, therefore, remaps this function to provide functionality that\n    somewhat resembles Unix behavior for API compatibility reasons. When\n    managing Windows systems, this function is superfluous and will generate\n    an info level log entry if used directly.\n\n    If you do actually want to access the 'primary group' of a file, use\n    `file.get_pgroup`.\n\n    Args:\n        path (str): The path to the file or directory\n\n        follow_symlinks (bool):\n            If the object specified by ``path`` is a symlink, get attributes of\n            the linked file instead of the symlink itself. Default is True\n\n    Returns:\n        str: The name of the owner\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' file.get_group c:\\\\temp\\\\test.txt", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_global_logging(serialization_dir: str, file_friendly_logging: bool) -> logging.FileHandler:\n    \"\"\"\n    \n    \"\"\"\n\n    # If we don't have a terminal as stdout,\n    # force tqdm to be nicer.\n    if not sys.stdout.isatty():\n        file_friendly_logging = True\n\n    Tqdm.set_slower_interval(file_friendly_logging)\n    std_out_file = os.path.join(serialization_dir, \"stdout.log\")\n    sys.stdout = TeeLogger(std_out_file, # type: ignore\n                           sys.stdout,\n                           file_friendly_logging)\n    sys.stderr = TeeLogger(os.path.join(serialization_dir, \"stderr.log\"), # type: ignore\n                           sys.stderr,\n                           file_friendly_logging)\n\n    stdout_handler = logging.FileHandler(std_out_file)\n    stdout_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))\n    logging.getLogger().addHandler(stdout_handler)\n\n    return stdout_handler", "output": "This function configures 3 global logging attributes - streaming stdout and stderr\n    to a file as well as the terminal, setting the formatting for the python logging\n    library and setting the interval frequency for the Tqdm progress bar.\n\n    Note that this function does not set the logging level, which is set in ``allennlp/run.py``.\n\n    Parameters\n    ----------\n    serialization_dir : ``str``, required.\n        The directory to stream logs to.\n    file_friendly_logging : ``bool``, required.\n        Whether logs should clean the output to prevent carriage returns\n        (used to update progress bars on a single terminal line). This\n        option is typically only used if you are running in an environment\n        without a terminal.\n\n    Returns\n    -------\n    ``logging.FileHandler``\n        A logging file handler that can later be closed and removed from the global logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def returner(ret):\n    '''\n    \n    '''\n    write_profile = __opts__.get('etcd.returner_write_profile')\n    if write_profile:\n        ttl = __opts__.get(write_profile, {}).get('etcd.ttl')\n    else:\n        ttl = __opts__.get('etcd.ttl')\n\n    client, path = _get_conn(__opts__, write_profile)\n    # Make a note of this minion for the external job cache\n    client.set(\n        '/'.join((path, 'minions', ret['id'])),\n        ret['jid'],\n        ttl=ttl,\n    )\n\n    for field in ret:\n        # Not using os.path.join because we're not dealing with file paths\n        dest = '/'.join((\n            path,\n            'jobs',\n            ret['jid'],\n            ret['id'],\n            field\n        ))\n        client.set(dest, salt.utils.json.dumps(ret[field]), ttl=ttl)", "output": "Return data to an etcd server or cluster", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dorefa(bitW, bitA, bitG):\n    \"\"\"\n    \n    \"\"\"\n    def quantize(x, k):\n        n = float(2 ** k - 1)\n\n        @tf.custom_gradient\n        def _quantize(x):\n            return tf.round(x * n) / n, lambda dy: dy\n\n        return _quantize(x)\n\n    def fw(x):\n        if bitW == 32:\n            return x\n\n        if bitW == 1:   # BWN\n            E = tf.stop_gradient(tf.reduce_mean(tf.abs(x)))\n\n            @tf.custom_gradient\n            def _sign(x):\n                return tf.where(tf.equal(x, 0), tf.ones_like(x), tf.sign(x / E)) * E, lambda dy: dy\n\n            return _sign(x)\n\n        x = tf.tanh(x)\n        x = x / tf.reduce_max(tf.abs(x)) * 0.5 + 0.5\n        return 2 * quantize(x, bitW) - 1\n\n    def fa(x):\n        if bitA == 32:\n            return x\n        return quantize(x, bitA)\n\n    def fg(x):\n        if bitG == 32:\n            return x\n\n        @tf.custom_gradient\n        def _identity(input):\n            def grad_fg(x):\n                rank = x.get_shape().ndims\n                assert rank is not None\n                maxx = tf.reduce_max(tf.abs(x), list(range(1, rank)), keep_dims=True)\n                x = x / maxx\n                n = float(2**bitG - 1)\n                x = x * 0.5 + 0.5 + tf.random_uniform(\n                    tf.shape(x), minval=-0.5 / n, maxval=0.5 / n)\n                x = tf.clip_by_value(x, 0.0, 1.0)\n                x = quantize(x, bitG) - 0.5\n                return x * maxx * 2\n\n            return input, grad_fg\n\n        return _identity(x)\n    return fw, fa, fg", "output": "Return the three quantization functions fw, fa, fg, for weights, activations and gradients respectively", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chmod(self, mode):\n        \"\"\"\n        \n        \"\"\"\n        if self._closed:\n            self._raise_closed()\n        self._accessor.chmod(self, mode)", "output": "Change the permissions of the path, like os.chmod().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mouseReleaseEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        self.QT_CLASS.mouseReleaseEvent(self, event)\r\n        text = self.get_line_at(event.pos())\r\n        if get_error_match(text) and not self.has_selected_text():\r\n            if self.go_to_error is not None:\r\n                self.go_to_error.emit(text)", "output": "Go to error", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(\n    ctx,\n    state,\n    bare=False,\n    dry_run=None,\n    outdated=False,\n    **kwargs\n):\n    \"\"\"\"\"\"\n    from ..core import (\n        ensure_project,\n        do_outdated,\n        do_lock,\n        do_sync,\n        project,\n    )\n\n    ensure_project(three=state.three, python=state.python, warn=True, pypi_mirror=state.pypi_mirror)\n    if not outdated:\n        outdated = bool(dry_run)\n    if outdated:\n        do_outdated(pypi_mirror=state.pypi_mirror)\n    packages = [p for p in state.installstate.packages if p]\n    editable = [p for p in state.installstate.editables if p]\n    if not packages:\n        echo(\n            \"{0} {1} {2} {3}{4}\".format(\n                crayons.white(\"Running\", bold=True),\n                crayons.red(\"$ pipenv lock\", bold=True),\n                crayons.white(\"then\", bold=True),\n                crayons.red(\"$ pipenv sync\", bold=True),\n                crayons.white(\".\", bold=True),\n            )\n        )\n    else:\n        for package in packages + editable:\n            if package not in project.all_packages:\n                echo(\n                    \"{0}: {1} was not found in your Pipfile! Aborting.\"\n                    \"\".format(\n                        crayons.red(\"Warning\", bold=True),\n                        crayons.green(package, bold=True),\n                    ),\n                    err=True,\n                )\n                ctx.abort()\n\n    do_lock(\n        clear=state.clear,\n        pre=state.installstate.pre,\n        keep_outdated=state.installstate.keep_outdated,\n        pypi_mirror=state.pypi_mirror,\n    )\n    do_sync(\n        ctx=ctx,\n        dev=state.installstate.dev,\n        three=state.three,\n        python=state.python,\n        bare=bare,\n        dont_upgrade=not state.installstate.keep_outdated,\n        user=False,\n        clear=state.clear,\n        unused=False,\n        sequential=state.installstate.sequential,\n        pypi_mirror=state.pypi_mirror,\n    )", "output": "Runs lock, then sync.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_lars_path(weighted_data, weighted_labels):\n        \"\"\"\n        \"\"\"\n        x_vector = weighted_data\n        alphas, _, coefs = lars_path(x_vector,\n                                     weighted_labels,\n                                     method='lasso',\n                                     verbose=False)\n        return alphas, coefs", "output": "Generates the lars path for weighted data.\n\n        Args:\n            weighted_data: data that has been weighted by kernel\n            weighted_label: labels, weighted by kernel\n\n        Returns:\n            (alphas, coefs), both are arrays corresponding to the\n            regularization parameter and coefficients, respectively", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dummy_dataloader(dataloader, target_shape):\n    \"\"\"\"\"\"\n    data_iter = enumerate(dataloader)\n    _, data_batch = next(data_iter)\n    logging.debug('Searching target batch shape: %s', target_shape)\n    while data_batch[0].shape != target_shape:\n        logging.debug('Skip batch with shape %s', data_batch[0].shape)\n        _, data_batch = next(data_iter)\n    logging.debug('Found target dummy batch.')\n\n    class DummyIter():\n        def __init__(self, batch):\n            self._batch = batch\n\n        def __iter__(self):\n            while True:\n                yield self._batch\n\n    return DummyIter(data_batch)", "output": "Return a dummy data loader which returns a fixed data batch of target shape", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _transform_should_cast(self, func_nm):\n        \"\"\"\n        \n        \"\"\"\n        return (self.size().fillna(0) > 0).any() and (\n            func_nm not in base.cython_cast_blacklist)", "output": "Parameters:\n        -----------\n        func_nm: str\n            The name of the aggregation function being performed\n\n        Returns:\n        --------\n        bool\n            Whether transform should attempt to cast the result of aggregation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def revnet_step(name, x, hparams, reverse=True):\n  \"\"\"\n  \"\"\"\n  with tf.variable_scope(name, reuse=tf.AUTO_REUSE):\n    if hparams.coupling == \"additive\":\n      coupling_layer = functools.partial(\n          additive_coupling, name=\"additive\", reverse=reverse,\n          mid_channels=hparams.coupling_width,\n          activation=hparams.activation, dropout=hparams.coupling_dropout)\n    else:\n      coupling_layer = functools.partial(\n          affine_coupling, name=\"affine\", reverse=reverse,\n          mid_channels=hparams.coupling_width,\n          activation=hparams.activation, dropout=hparams.coupling_dropout)\n    ops = [\n        functools.partial(actnorm, name=\"actnorm\", reverse=reverse),\n        functools.partial(invertible_1x1_conv, name=\"invertible\",\n                          reverse=reverse), coupling_layer]\n\n    if reverse:\n      ops = ops[::-1]\n\n    objective = 0.0\n    for op in ops:\n      x, curr_obj = op(x=x)\n      objective += curr_obj\n    return x, objective", "output": "One step of glow generative flow.\n\n  Actnorm + invertible 1X1 conv + affine_coupling.\n\n  Args:\n    name: used for variable scope.\n    x: input\n    hparams: coupling_width is the only hparam that is being used in\n             this function.\n    reverse: forward or reverse pass.\n  Returns:\n    z: Output of one step of reversible flow.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def safe_isinstance(value, types=None, class_names=None):\n    \"\"\"\n    \"\"\"\n    # inspect is being imported here because I seriously doubt\n    # that this function will be used outside of the type\n    # checking below.\n    import inspect\n    result = False\n    if types is not None:\n        result = result or isinstance(value, types)\n    if class_names is not None and not result:\n        # this doesn't work with inheritance, but normally\n        # either the class will already be imported within the module,\n        # or the class doesn't have any subclasses. For example: PropertySet\n        if isinstance(class_names, basestring):\n            class_names = [class_names]\n        # this is the part that makes it \"safe\".\n        try:\n            base_names = [class_.__name__ for class_ in inspect.getmro(value.__class__)]\n            for name in class_names:\n                if name in base_names:\n                    return True\n        except AttributeError:\n            pass\n    return result", "output": "To prevent circular imports, this extends isinstance()\n    by checking also if `value` has a particular class name (or inherits from a\n    particular class name). This check is safe in that an AttributeError is not\n    raised in case `value` doesn't have a __class__ attribute.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exe(self):\n        \"\"\"\n        \"\"\"\n        return self._buckets[self.curr_bucket_key]['exe'][tuple(self.data_shapes.items())]", "output": "Get the current executor\n\n        Returns\n        -------\n        exe : mxnet.executor.Executor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def avail_images(conn=None):\n    '''\n    \n    '''\n    if not conn:\n        conn = get_conn()\n\n    all_images = []\n    # The list of public image projects can be found via:\n    #   % gcloud compute images list\n    # and looking at the \"PROJECT\" column in the output.\n    public_image_projects = (\n        'centos-cloud', 'coreos-cloud', 'debian-cloud', 'google-containers',\n        'opensuse-cloud', 'rhel-cloud', 'suse-cloud', 'ubuntu-os-cloud',\n        'windows-cloud'\n    )\n    for project in public_image_projects:\n        all_images.extend(conn.list_images(project))\n\n    # Finally, add the images in this current project last so that it overrides\n    # any image that also exists in any public project.\n    all_images.extend(conn.list_images())\n\n    ret = {}\n    for img in all_images:\n        ret[img.name] = {}\n        for attr in dir(img):\n            if attr.startswith('_'):\n                continue\n            ret[img.name][attr] = getattr(img, attr)\n    return ret", "output": "Return a dict of all available VM images on the cloud provider with\n    relevant data.\n\n    Note that for GCE, there are custom images within the project, but the\n    generic images are in other projects.  This returns a dict of images in\n    the project plus images in well-known public projects that provide supported\n    images, as listed on this page:\n    https://cloud.google.com/compute/docs/operating-systems/\n\n    If image names overlap, the image in the current project is used.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def info(vm, info_type='all', key='uuid'):\n    '''\n    \n    '''\n    ret = {}\n    if info_type not in ['all', 'block', 'blockstats', 'chardev', 'cpus', 'kvm', 'pci', 'spice', 'version', 'vnc']:\n        ret['Error'] = 'Requested info_type is not available'\n        return ret\n    if key not in ['uuid', 'alias', 'hostname']:\n        ret['Error'] = 'Key must be either uuid, alias or hostname'\n        return ret\n    vm = lookup('{0}={1}'.format(key, vm), one=True)\n    if 'Error' in vm:\n        return vm\n    # vmadm info <uuid> [type,...]\n    cmd = 'vmadm info {uuid} {type}'.format(\n        uuid=vm,\n        type=info_type\n    )\n    res = __salt__['cmd.run_all'](cmd)\n    retcode = res['retcode']\n    if retcode != 0:\n        ret['Error'] = res['stderr'] if 'stderr' in res else _exit_status(retcode)\n        return ret\n    return salt.utils.json.loads(res['stdout'])", "output": "Lookup info on running kvm\n\n    vm : string\n        vm to be targeted\n    info_type : string [all|block|blockstats|chardev|cpus|kvm|pci|spice|version|vnc]\n        info type to return\n    key : string [uuid|alias|hostname]\n        value type of 'vm' parameter\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vmadm.info 186da9ab-7392-4f55-91a5-b8f1fe770543\n        salt '*' vmadm.info 186da9ab-7392-4f55-91a5-b8f1fe770543 vnc\n        salt '*' vmadm.info nacl key=alias\n        salt '*' vmadm.info nacl vnc key=alias", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_persistent_module(mod):\n    '''\n    \n    '''\n    conf = _get_modules_conf()\n    if not os.path.exists(conf):\n        __salt__['file.touch'](conf)\n    mod_name = _strip_module_name(mod)\n    if not mod_name or mod_name in mod_list(True) or mod_name \\\n            not in available():\n        return set()\n    escape_mod = re.escape(mod)\n    # If module is commented only uncomment it\n    if __salt__['file.search'](conf,\n                               '^#[\\t ]*{0}[\\t ]*$'.format(escape_mod),\n                               multiline=True):\n        __salt__['file.uncomment'](conf, escape_mod)\n    else:\n        __salt__['file.append'](conf, mod)\n    return set([mod_name])", "output": "Add module to configuration file to make it persistent. If module is\n    commented uncomment it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cluster_remove(version,\n                   name='main',\n                   stop=False):\n    '''\n    \n\n    '''\n    cmd = [salt.utils.path.which('pg_dropcluster')]\n    if stop:\n        cmd += ['--stop']\n    cmd += [version, name]\n    cmdstr = ' '.join([pipes.quote(c) for c in cmd])\n    ret = __salt__['cmd.run_all'](cmdstr, python_shell=False)\n    # FIXME - return Boolean ?\n    if ret.get('retcode', 0) != 0:\n        log.error('Error removing a Postgresql cluster %s/%s', version, name)\n    else:\n        ret['changes'] = ('Successfully removed'\n                          ' cluster {0}/{1}').format(version, name)\n    return ret", "output": "Remove a cluster on a Postgres server. By default it doesn't try\n    to stop the cluster.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' postgres.cluster_remove '9.3'\n\n        salt '*' postgres.cluster_remove '9.3' 'main'\n\n        salt '*' postgres.cluster_remove '9.3' 'main' stop=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _aws_encode_changebatch(o):\n    '''\n    \n    '''\n    change_idx = 0\n    while change_idx < len(o['Changes']):\n        o['Changes'][change_idx]['ResourceRecordSet']['Name'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['Name'])\n        if 'ResourceRecords' in o['Changes'][change_idx]['ResourceRecordSet']:\n            rr_idx = 0\n            while rr_idx < len(o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords']):\n                o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords'][rr_idx]['Value'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords'][rr_idx]['Value'])\n                rr_idx += 1\n        if 'AliasTarget' in o['Changes'][change_idx]['ResourceRecordSet']:\n            o['Changes'][change_idx]['ResourceRecordSet']['AliasTarget']['DNSName'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['AliasTarget']['DNSName'])\n        change_idx += 1\n    return o", "output": "helper method to process a change batch & encode the bits which need encoding.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def acquire(\n        self, timeout: Union[float, datetime.timedelta] = None\n    ) -> Awaitable[_ReleasingContextManager]:\n        \"\"\"\n        \"\"\"\n        waiter = Future()  # type: Future[_ReleasingContextManager]\n        if self._value > 0:\n            self._value -= 1\n            waiter.set_result(_ReleasingContextManager(self))\n        else:\n            self._waiters.append(waiter)\n            if timeout:\n\n                def on_timeout() -> None:\n                    if not waiter.done():\n                        waiter.set_exception(gen.TimeoutError())\n                    self._garbage_collect()\n\n                io_loop = ioloop.IOLoop.current()\n                timeout_handle = io_loop.add_timeout(timeout, on_timeout)\n                waiter.add_done_callback(\n                    lambda _: io_loop.remove_timeout(timeout_handle)\n                )\n        return waiter", "output": "Decrement the counter. Returns an awaitable.\n\n        Block if the counter is zero and wait for a `.release`. The awaitable\n        raises `.TimeoutError` after the deadline.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _split_result_for_readers(axis, num_splits, df):  # pragma: no cover\n    \"\"\"\n    \"\"\"\n    splits = split_result_of_axis_func_pandas(axis, num_splits, df)\n    if not isinstance(splits, list):\n        splits = [splits]\n    return splits", "output": "Splits the DataFrame read into smaller DataFrames and handles all edge cases.\n\n    Args:\n        axis: Which axis to split over.\n        num_splits: The number of splits to create.\n        df: The DataFrame after it has been read.\n\n    Returns:\n        A list of pandas DataFrames.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _expand_sources(sources):\n    '''\n    \n    '''\n    if sources is None:\n        return []\n    if isinstance(sources, six.string_types):\n        sources = [x.strip() for x in sources.split(',')]\n    elif isinstance(sources, (float, six.integer_types)):\n        sources = [six.text_type(sources)]\n    return [path\n            for source in sources\n            for path in _glob(source)]", "output": "Expands a user-provided specification of source files into a list of paths.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_backup(name):\n    \n    '''\n    if name in list_backups():\n        raise CommandExecutionError('Backup already present: {0}'.format(name))\n\n    ps_cmd = ['Backup-WebConfiguration',\n              '-Name', \"'{0}'\".format(name)]\n\n    cmd_ret = _srvmgr(ps_cmd)\n\n    if cmd_ret['retcode'] != 0:\n        msg = 'Unable to backup web configuration: {0}\\nError: {1}' \\\n              ''.format(name, cmd_ret['stderr'])\n        raise CommandExecutionError(msg)\n\n    return name in list_backups()", "output": "r'''\n    Backup an IIS Configuration on the System.\n\n    .. versionadded:: 2017.7.0\n\n    .. note::\n        Backups are stored in the ``$env:Windir\\System32\\inetsrv\\backup``\n        folder.\n\n    Args:\n        name (str): The name to give the backup\n\n    Returns:\n        bool: True if successful, otherwise False\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_iis.create_backup good_config_20170209", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self):\n        \"\"\"\"\"\"\n        assert self.database is not None\n\n        cmd = \"SELECT count from {} WHERE rowid={}\"\n        self._execute(cmd.format(self.STATE_INFO_TABLE, self.STATE_INFO_ROW))\n        ret = self._fetchall()\n        assert len(ret) == 1\n        assert len(ret[0]) == 1\n        count = self._from_sqlite(ret[0][0]) + self.inserts\n\n        if count > self.row_limit:\n            msg = \"cleaning up state, this might take a while.\"\n            logger.warning(msg)\n\n            delete = count - self.row_limit\n            delete += int(self.row_limit * (self.row_cleanup_quota / 100.0))\n            cmd = (\n                \"DELETE FROM {} WHERE timestamp IN (\"\n                \"SELECT timestamp FROM {} ORDER BY timestamp ASC LIMIT {});\"\n            )\n            self._execute(\n                cmd.format(self.STATE_TABLE, self.STATE_TABLE, delete)\n            )\n\n            self._vacuum()\n\n            cmd = \"SELECT COUNT(*) FROM {}\"\n\n            self._execute(cmd.format(self.STATE_TABLE))\n            ret = self._fetchall()\n            assert len(ret) == 1\n            assert len(ret[0]) == 1\n            count = ret[0][0]\n\n        cmd = \"UPDATE {} SET count = {} WHERE rowid = {}\"\n        self._execute(\n            cmd.format(\n                self.STATE_INFO_TABLE,\n                self._to_sqlite(count),\n                self.STATE_INFO_ROW,\n            )\n        )\n\n        self._update_cache_directory_state()\n\n        self.database.commit()\n        self.cursor.close()\n        self.database.close()\n        self.database = None\n        self.cursor = None\n        self.inserts = 0", "output": "Saves state database.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_exists(name, user=None, password=None, host=None, port=None,\n                database='admin', authdb=None):\n    '''\n    \n    '''\n    users = user_list(user, password, host, port, database, authdb)\n\n    if isinstance(users, six.string_types):\n        return 'Failed to connect to mongo database'\n\n    for user in users:\n        if name == dict(user).get('user'):\n            return True\n\n    return False", "output": "Checks if a user exists in MongoDB\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mongodb.user_exists <name> <user> <password> <host> <port> <database>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def DownloadResource(url, path):\n    ''''''\n    import requests\n    from six import BytesIO\n    import zipfile\n    print(\"Downloading... {} to {}\".format(url, path))\n    r = requests.get(url, stream=True)\n    z = zipfile.ZipFile(BytesIO(r.content))\n    z.extractall(path)\n    print(\"Completed download and extraction.\")", "output": "Downloads resources from s3 by url and unzips them to the provided path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_disk(self, path, **kwargs):\n        \"\"\"\n        \"\"\"\n        path = ensure_path(path)\n        path = path.with_suffix(\".jsonl\")\n        srsly.write_jsonl(path, self.patterns)", "output": "Save the entity ruler patterns to a directory. The patterns will be\n        saved as newline-delimited JSON (JSONL).\n\n        path (unicode / Path): The JSONL file to load.\n        **kwargs: Other config paramters, mostly for consistency.\n        RETURNS (EntityRuler): The loaded entity ruler.\n\n        DOCS: https://spacy.io/api/entityruler#to_disk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(format, string, extra_types=None, evaluate_result=True, case_sensitive=False):\n    '''\n    '''\n    p = Parser(format, extra_types=extra_types, case_sensitive=case_sensitive)\n    return p.parse(string, evaluate_result=evaluate_result)", "output": "Using \"format\" attempt to pull values from \"string\".\n\n    The format must match the string contents exactly. If the value\n    you're looking for is instead just a part of the string use\n    search().\n\n    If ``evaluate_result`` is True the return value will be an Result instance with two attributes:\n\n     .fixed - tuple of fixed-position values from the string\n     .named - dict of named values from the string\n\n    If ``evaluate_result`` is False the return value will be a Match instance with one method:\n\n     .evaluate_result() - This will return a Result instance like you would get\n                          with ``evaluate_result`` set to True\n\n    The default behaviour is to match strings case insensitively. You may match with\n    case by specifying case_sensitive=True.\n\n    If the format is invalid a ValueError will be raised.\n\n    See the module documentation for the use of \"extra_types\".\n\n    In the case there is no match parse() will return None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def strip_extras_markers_from_requirement(req):\n    # type: (TRequirement) -> TRequirement\n    \"\"\"\n    \n    \"\"\"\n    if req is None:\n        raise TypeError(\"Must pass in a valid requirement, received {0!r}\".format(req))\n    if getattr(req, \"marker\", None) is not None:\n        marker = req.marker  # type: TMarker\n        marker._markers = _strip_extras_markers(marker._markers)\n        if not marker._markers:\n            req.marker = None\n        else:\n            req.marker = marker\n    return req", "output": "Given a :class:`~packaging.requirements.Requirement` instance with markers defining\n    *extra == 'name'*, strip out the extras from the markers and return the cleaned\n    requirement\n\n    :param PackagingRequirement req: A packaging requirement to clean\n    :return: A cleaned requirement\n    :rtype: PackagingRequirement", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def readerWalker(self):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlReaderWalker(self._o)\n        if ret is None:raise treeError('xmlReaderWalker() failed')\n        __tmp = xmlTextReader(_obj=ret)\n        return __tmp", "output": "Create an xmltextReader for a preparsed document.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def active():\n    '''\n    \n    '''\n    ret = {}\n    # TODO: This command should be extended to collect more information, such as UUID.\n    devices = __salt__['cmd.run_stdout']('dmsetup ls --target crypt')\n    out_regex = re.compile(r'(?P<devname>\\w+)\\W+\\((?P<major>\\d+), (?P<minor>\\d+)\\)')\n\n    log.debug(devices)\n    for line in devices.split('\\n'):\n        match = out_regex.match(line)\n        if match:\n            dev_info = match.groupdict()\n            ret[dev_info['devname']] = dev_info\n        else:\n            log.warning('dmsetup output does not match expected format')\n\n    return ret", "output": "List existing device-mapper device details.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        self.curr_idx = 0\n        #shuffle data in each bucket\n        random.shuffle(self.idx)\n        for i, buck in enumerate(self.sentences):\n            self.indices[i], self.sentences[i], self.characters[i], self.label[i] = shuffle(self.indices[i],\n                                                                                            self.sentences[i],\n                                                                                            self.characters[i],\n                                                                                            self.label[i])\n\n        self.ndindex = []\n        self.ndsent = []\n        self.ndchar = []\n        self.ndlabel = []\n\n        #for each bucket of data\n        for i, buck in enumerate(self.sentences):\n            #append the lists with an array\n            self.ndindex.append(ndarray.array(self.indices[i], dtype=self.dtype))\n            self.ndsent.append(ndarray.array(self.sentences[i], dtype=self.dtype))\n            self.ndchar.append(ndarray.array(self.characters[i], dtype=self.dtype))\n            self.ndlabel.append(ndarray.array(self.label[i], dtype=self.dtype))", "output": "Resets the iterator to the beginning of the data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dropna(self, how='any', thresh=None, subset=None):\n        \"\"\"\n        \"\"\"\n        if how is not None and how not in ['any', 'all']:\n            raise ValueError(\"how ('\" + how + \"') should be 'any' or 'all'\")\n\n        if subset is None:\n            subset = self.columns\n        elif isinstance(subset, basestring):\n            subset = [subset]\n        elif not isinstance(subset, (list, tuple)):\n            raise ValueError(\"subset should be a list or tuple of column names\")\n\n        if thresh is None:\n            thresh = len(subset) if how == 'any' else 1\n\n        return DataFrame(self._jdf.na().drop(thresh, self._jseq(subset)), self.sql_ctx)", "output": "Returns a new :class:`DataFrame` omitting rows with null values.\n        :func:`DataFrame.dropna` and :func:`DataFrameNaFunctions.drop` are aliases of each other.\n\n        :param how: 'any' or 'all'.\n            If 'any', drop a row if it contains any nulls.\n            If 'all', drop a row only if all its values are null.\n        :param thresh: int, default None\n            If specified, drop rows that have less than `thresh` non-null values.\n            This overwrites the `how` parameter.\n        :param subset: optional list of column names to consider.\n\n        >>> df4.na.drop().show()\n        +---+------+-----+\n        |age|height| name|\n        +---+------+-----+\n        | 10|    80|Alice|\n        +---+------+-----+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_update_available(self):\n        \"\"\"\n        \"\"\"\n        # Don't perform any check for development versions\n        if 'dev' in self.version:\n            return (False, latest_release)\n\n        # Filter releases\n        if is_stable_version(self.version):\n            releases = [r for r in self.releases if is_stable_version(r)]\n        else:\n            releases = [r for r in self.releases\n                        if not is_stable_version(r) or r in self.version]\n\n        latest_release = releases[-1]\n\n        return (check_version(self.version, latest_release, '<'),\n                latest_release)", "output": "Checks if there is an update available.\n\n        It takes as parameters the current version of Spyder and a list of\n        valid cleaned releases in chronological order.\n        Example: ['2.3.2', '2.3.3' ...] or with github ['2.3.4', '2.3.3' ...]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample_view(min_dist, max_dist=None):\n  '''\n  '''\n  if max_dist is None:\n    max_dist = min_dist\n  dist = np.random.uniform(min_dist, max_dist)\n  eye = np.random.normal(size=3)\n  eye = normalize(eye)*dist\n  return lookat(eye)", "output": "Sample random camera position.\n  \n  Sample origin directed camera position in given distance\n  range from the origin. ModelView matrix is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _update_expression_reference(self, # pylint: disable=no-self-use\n                                     grammar: Grammar,\n                                     parent_expression_nonterminal: str,\n                                     child_expression_nonterminal: str) -> None:\n        \"\"\"\n        \n        \"\"\"\n        grammar[parent_expression_nonterminal].members = \\\n                [member if member.name != child_expression_nonterminal\n                 else grammar[child_expression_nonterminal]\n                 for member in grammar[parent_expression_nonterminal].members]", "output": "When we add a new expression, there may be other expressions that refer to\n        it, and we need to update those to point to the new expression.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def local_attention2d_spatial_decoder(x, kv_dim, heads_dim,\n                                      feedforward_dim, hparams):\n  \"\"\"\"\"\"\n  batch_dim, length_dim, model_dim = x.shape.dims\n  blocks_h_dim = mtf.Dimension(\"blocksh\", hparams.block_height)\n  blocks_w_dim = mtf.Dimension(\"blocksw\", hparams.block_width)\n  num_h_blocks_dim = mtf.Dimension(\"num_h_blocks\",\n                                   hparams.img_len // hparams.block_height)\n  num_w_blocks_dim = mtf.Dimension(\n      \"num_w_blocks\",\n      hparams.img_len * hparams.num_channels // hparams.block_width)\n  x = mtf.transpose(\n      mtf.reshape(\n          x,\n          mtf.Shape([\n              batch_dim, num_h_blocks_dim, blocks_h_dim,\n              num_w_blocks_dim, blocks_w_dim, model_dim\n          ])),\n      mtf.Shape([\n          batch_dim, num_h_blocks_dim, num_w_blocks_dim,\n          blocks_h_dim, blocks_w_dim, model_dim\n      ]))\n  # Image Transformer Decoder\n  # [ self attention - ffn - residual + dropout] x n\n  for layer in range(hparams.num_decoder_layers):\n    layer_name = \"decoder_layer_%d\" % layer\n    with tf.variable_scope(layer_name):\n      # Self attention layer\n      x += layer_prepostprocess_dropout(\n          mtf.layers.local_2d_self_attention_spatial_blocks(\n              mtf.layers.layer_norm(x, model_dim, name=\"layer_norm_att\"),\n              kv_dim,\n              heads_dim,\n              memory_h_dim=num_h_blocks_dim,\n              memory_w_dim=num_w_blocks_dim,\n              name=\"self_att\"), hparams)\n      # ffn layer\n      x += layer_prepostprocess_dropout(\n          mtf.layers.dense_relu_dense(\n              mtf.layers.layer_norm(x, model_dim, name=\"layer_norm_ffn\"),\n              feedforward_dim,\n              hparams.dropout,\n              dropout_broadcast_dims=[length_dim]), hparams)\n\n  output = mtf.layers.layer_norm(x, model_dim, name=\"final_layer_norm\")\n  return output", "output": "Image Transformer decoder with local2D spatial layers.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_image(name):\n    '''\n    \n    '''\n    try:\n        images = __salt__['glance.image_list'](name=name)\n    except kstone_Unauthorized:\n        return False, 'keystoneclient: Unauthorized'\n    except glance_Unauthorized:\n        return False, 'glanceclient: Unauthorized'\n    log.debug('Got images: %s', images)\n\n    if type(images) is dict and len(images) == 1 and 'images' in images:\n        images = images['images']\n\n    images_list = images.values() if type(images) is dict else images\n\n    if not images_list:\n        return None, 'No image with name \"{0}\"'.format(name)\n    elif len(images_list) == 1:\n        return images_list[0], 'Found image {0}'.format(name)\n    elif len(images_list) > 1:\n        return False, 'Found more than one image with given name'\n    else:\n        raise NotImplementedError", "output": "Tries to find image with given name, returns\n        - image, 'Found image <name>'\n        - None, 'No such image found'\n        - False, 'Found more than one image with given name'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def close(self):\n        \"\"\"\n        \"\"\"\n        if self._closed:\n            return\n\n        await self.http.close()\n        self._closed = True\n\n        for voice in self.voice_clients:\n            try:\n                await voice.disconnect()\n            except Exception:\n                # if an error happens during disconnects, disregard it.\n                pass\n\n        if self.ws is not None and self.ws.open:\n            await self.ws.close()\n\n        self._ready.clear()", "output": "|coro|\n\n        Closes the connection to discord.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write_file_ifaces(iface, data, **settings):\n    '''\n    \n    '''\n    try:\n        eth_template = JINJA.get_template('debian_eth.jinja')\n        source_template = JINJA.get_template('debian_source.jinja')\n    except jinja2.exceptions.TemplateNotFound:\n        log.error('Could not load template debian_eth.jinja')\n        return ''\n\n    # Read /etc/network/interfaces into a dict\n    adapters = _parse_interfaces()\n    # Apply supplied settings over on-disk settings\n    adapters[iface] = data\n\n    ifcfg = ''\n    for adapter in adapters:\n        if 'type' in adapters[adapter] and adapters[adapter]['type'] == 'source':\n            tmp = source_template.render({'name': adapter, 'data': adapters[adapter]})\n        else:\n            tmp = eth_template.render({'name': adapter, 'data': adapters[adapter]})\n        ifcfg = ifcfg + tmp\n        if adapter == iface:\n            saved_ifcfg = tmp\n\n    _SEPARATE_FILE = False\n    if 'filename' in settings:\n        if not settings['filename'].startswith('/'):\n            filename = '{0}/{1}'.format(_DEB_NETWORK_DIR, settings['filename'])\n        else:\n            filename = settings['filename']\n        _SEPARATE_FILE = True\n    else:\n        if 'filename' in adapters[adapter]['data']:\n            filename = adapters[adapter]['data']\n        else:\n            filename = _DEB_NETWORK_FILE\n\n    if not os.path.exists(os.path.dirname(filename)):\n        msg = '{0} cannot be written.'\n        msg = msg.format(os.path.dirname(filename))\n        log.error(msg)\n        raise AttributeError(msg)\n    with salt.utils.files.flopen(filename, 'w') as fout:\n        if _SEPARATE_FILE:\n            fout.write(salt.utils.stringutils.to_str(saved_ifcfg))\n        else:\n            fout.write(salt.utils.stringutils.to_str(ifcfg))\n\n    # Return as an array so the difflib works\n    return saved_ifcfg.split('\\n')", "output": "Writes a file to disk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_namespaced_pod_preset(self, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_namespaced_pod_preset_with_http_info(namespace, body, **kwargs)\n        else:\n            (data) = self.create_namespaced_pod_preset_with_http_info(namespace, body, **kwargs)\n            return data", "output": "create a PodPreset\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_namespaced_pod_preset(namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param V1alpha1PodPreset body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1alpha1PodPreset\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mask_zero_div_zero(x, y, result, copy=False):\n    \"\"\"\n    \n    \"\"\"\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n    if zmask.any():\n        shape = result.shape\n\n        nan_mask = (zmask & (x == 0)).ravel()\n        neginf_mask = (zmask & (x < 0)).ravel()\n        posinf_mask = (zmask & (x > 0)).ravel()\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype('float64', copy=copy).ravel()\n\n            np.putmask(result, nan_mask, np.nan)\n            np.putmask(result, posinf_mask, np.inf)\n            np.putmask(result, neginf_mask, -np.inf)\n\n            result = result.reshape(shape)\n\n    return result", "output": "Set results of 0 / 0 or 0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n    copy : bool (default False)\n        Whether to always create a new array or try to fill in the existing\n        array if possible.\n\n    Returns\n    -------\n    filled_result : ndarray\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x / y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def max_date(self, rows: List[Row], column: DateColumn) -> Date:\n        \"\"\"\n        \n        \"\"\"\n        cell_values = [row.values[column.name] for row in rows]\n        if not cell_values:\n            return Date(-1, -1, -1)\n        if not all([isinstance(value, Date) for value in cell_values]):\n            raise ExecutionError(f\"Invalid values for date selection function: {cell_values}\")\n        return max(cell_values)", "output": "Takes a list of rows and a column and returns the max of the values under that column in\n        those rows.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _adorn_subplots(self):\n        \"\"\"\"\"\"\n        if len(self.axes) > 0:\n            all_axes = self._get_subplots()\n            nrows, ncols = self._get_axes_layout()\n            _handle_shared_axes(axarr=all_axes, nplots=len(all_axes),\n                                naxes=nrows * ncols, nrows=nrows,\n                                ncols=ncols, sharex=self.sharex,\n                                sharey=self.sharey)\n\n        for ax in self.axes:\n            if self.yticks is not None:\n                ax.set_yticks(self.yticks)\n\n            if self.xticks is not None:\n                ax.set_xticks(self.xticks)\n\n            if self.ylim is not None:\n                ax.set_ylim(self.ylim)\n\n            if self.xlim is not None:\n                ax.set_xlim(self.xlim)\n\n            ax.grid(self.grid)\n\n        if self.title:\n            if self.subplots:\n                if is_list_like(self.title):\n                    if len(self.title) != self.nseries:\n                        msg = ('The length of `title` must equal the number '\n                               'of columns if using `title` of type `list` '\n                               'and `subplots=True`.\\n'\n                               'length of title = {}\\n'\n                               'number of columns = {}').format(\n                            len(self.title), self.nseries)\n                        raise ValueError(msg)\n\n                    for (ax, title) in zip(self.axes, self.title):\n                        ax.set_title(title)\n                else:\n                    self.fig.suptitle(self.title)\n            else:\n                if is_list_like(self.title):\n                    msg = ('Using `title` of type `list` is not supported '\n                           'unless `subplots=True` is passed')\n                    raise ValueError(msg)\n                self.axes[0].set_title(self.title)", "output": "Common post process unrelated to data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __interact_writen(self, fd, data):\n        '''\n        '''\n\n        while data != b'' and self.isalive():\n            n = os.write(fd, data)\n            data = data[n:]", "output": "This is used by the interact() method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list(self, parts: Any) -> str:\n        \"\"\"\n        \"\"\"\n        _ = self.translate\n        if len(parts) == 0:\n            return \"\"\n        if len(parts) == 1:\n            return parts[0]\n        comma = u\" \\u0648 \" if self.code.startswith(\"fa\") else u\", \"\n        return _(\"%(commas)s and %(last)s\") % {\n            \"commas\": comma.join(parts[:-1]),\n            \"last\": parts[len(parts) - 1],\n        }", "output": "Returns a comma-separated list for the given list of parts.\n\n        The format is, e.g., \"A, B and C\", \"A and B\" or just \"A\" for lists\n        of size 1.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def htmlNewDocNoDtD(URI, ExternalID):\n    \"\"\" \"\"\"\n    ret = libxml2mod.htmlNewDocNoDtD(URI, ExternalID)\n    if ret is None:raise treeError('htmlNewDocNoDtD() failed')\n    return xmlDoc(_obj=ret)", "output": "Creates a new HTML document without a DTD node if @URI and\n       @ExternalID are None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_resource_attribute(self, attr):\n        \"\"\"\n        \"\"\"\n        if attr not in self.resource_attributes:\n            raise KeyError(\"%s is not in resource attributes\" % attr)\n\n        return self.resource_attributes[attr]", "output": "Gets the resource attribute if available\n\n        :param attr: Name of the attribute\n        :return: Value of the attribute, if set in the resource. None otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_proto(self, message, **kw):\n        \"\"\"\n        \"\"\"\n        self.entries.append(ProtobufEntry(payload=message, **kw))", "output": "Add a protobuf entry to be logged during :meth:`commit`.\n\n        :type message: protobuf message\n        :param message: the protobuf entry\n\n        :type kw: dict\n        :param kw: (optional) additional keyword arguments for the entry.\n                   See :class:`~google.cloud.logging.entries.LogEntry`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xpathNextFollowing(self, cur):\n        \"\"\" \"\"\"\n        if cur is None: cur__o = None\n        else: cur__o = cur._o\n        ret = libxml2mod.xmlXPathNextFollowing(self._o, cur__o)\n        if ret is None:raise xpathError('xmlXPathNextFollowing() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Traversal function for the \"following\" direction The\n          following axis contains all nodes in the same document as\n          the context node that are after the context node in\n          document order, excluding any descendants and excluding\n          attribute nodes and namespace nodes; the nodes are ordered\n           in document order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reset_bind(self):\n        \"\"\"\"\"\"\n        self.binded = False\n        self._exec_group = None\n        self._data_shapes = None\n        self._label_shapes = None", "output": "Internal function to reset binded state.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_to_distribution(dist):\n    \"\"\"\"\"\"\n    try:\n        dist.add_qt_bindings()\n    except AttributeError:\n        raise ImportError(\"This script requires guidata 1.5+\")\n    for _modname in ('spyder', 'spyderplugins'):\n        dist.add_module_data_files(_modname, (\"\", ),\n                                   ('.png', '.svg', '.html', '.png', '.txt',\n                                    '.js', '.inv', '.ico', '.css', '.doctree',\n                                    '.qm', '.py',),\n                                   copy_to_root=False)", "output": "Add package to py2exe/cx_Freeze distribution object\n    Extension to guidata.disthelpers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remote_addr(self):\n        \"\"\"\n        \"\"\"\n        if not hasattr(self, \"_remote_addr\"):\n            if self.app.config.PROXIES_COUNT == 0:\n                self._remote_addr = \"\"\n            elif self.app.config.REAL_IP_HEADER and self.headers.get(\n                self.app.config.REAL_IP_HEADER\n            ):\n                self._remote_addr = self.headers[\n                    self.app.config.REAL_IP_HEADER\n                ]\n            elif self.app.config.FORWARDED_FOR_HEADER:\n                forwarded_for = self.headers.get(\n                    self.app.config.FORWARDED_FOR_HEADER, \"\"\n                ).split(\",\")\n                remote_addrs = [\n                    addr\n                    for addr in [addr.strip() for addr in forwarded_for]\n                    if addr\n                ]\n                if self.app.config.PROXIES_COUNT == -1:\n                    self._remote_addr = remote_addrs[0]\n                elif len(remote_addrs) >= self.app.config.PROXIES_COUNT:\n                    self._remote_addr = remote_addrs[\n                        -self.app.config.PROXIES_COUNT\n                    ]\n                else:\n                    self._remote_addr = \"\"\n            else:\n                self._remote_addr = \"\"\n        return self._remote_addr", "output": "Attempt to return the original client ip based on X-Forwarded-For\n        or X-Real-IP. If HTTP headers are unavailable or untrusted, returns\n        an empty string.\n\n        :return: original client ip.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_balancers(profile, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    libcloud_kwargs = salt.utils.args.clean_kwargs(**libcloud_kwargs)\n    balancers = conn.list_balancers(**libcloud_kwargs)\n    ret = []\n    for balancer in balancers:\n        ret.append(_simple_balancer(balancer))\n    return ret", "output": "Return a list of load balancers.\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's list_balancers method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_storage.list_balancers profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self):\n        \"\"\"\n        \"\"\"\n        if len(self.call_queue):\n            return self.apply(lambda x: x).get()\n        try:\n            return ray.get(self.oid)\n        except RayTaskError as e:\n            handle_ray_task_error(e)", "output": "Gets the object out of the plasma store.\n\n        Returns:\n            The object from the plasma store.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_blank_page(self):\r\n        \"\"\"\"\"\"\r\n        loading_template = Template(BLANK)\r\n        page = loading_template.substitute(css_path=self.css_path)\r\n        return page", "output": "Create html page to show while the kernel is starting", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _record_hyper_configs(self, hyper_configs):\n        \"\"\"\n        \"\"\"\n        self.hyper_configs.append(hyper_configs)\n        self.configs_perf.append(dict())\n        self.num_finished_configs.append(0)\n        self.num_configs_to_run.append(len(hyper_configs))\n        self.increase_i()", "output": "after generating one round of hyperconfigs, this function records the generated hyperconfigs,\n        creates a dict to record the performance when those hyperconifgs are running, set the number of finished configs\n        in this round to be 0, and increase the round number.\n\n        Parameters\n        ----------\n        hyper_configs: list\n            the generated hyperconfigs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_java_object_rdd(self):\n        \"\"\" \n        \"\"\"\n        rdd = self._pickled()\n        return self.ctx._jvm.SerDeUtil.pythonToJava(rdd._jrdd, True)", "output": "Return a JavaRDD of Object by unpickling\n\n        It will convert each Python object into Java object by Pyrolite, whenever the\n        RDD is serialized in batch or not.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chhome(name, home, persist=False):\n    '''\n    \n    '''\n    pre_info = info(name)\n    if not pre_info:\n        raise CommandExecutionError(\n            'User \\'{0}\\' does not exist'.format(name)\n        )\n    if home == pre_info['home']:\n        return True\n    cmd = ['usermod', '-d', home]\n    if persist:\n        cmd.append('-m')\n    cmd.append(name)\n    __salt__['cmd.run'](cmd, python_shell=False)\n    return info(name).get('home') == home", "output": "Set a new home directory for an existing user\n\n    name\n        Username to modify\n\n    home\n        New home directory to set\n\n    persist : False\n        Set to ``True`` to prevent configuration files in the new home\n        directory from being overwritten by the files from the skeleton\n        directory.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' user.chhome foo /home/users/foo True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_breakpoints(self):\n        \"\"\"\"\"\"\n        breakpoints = []\n        block = self.editor.document().firstBlock()\n        for line_number in range(1, self.editor.document().blockCount()+1):\n            data = block.userData()\n            if data and data.breakpoint:\n                breakpoints.append((line_number, data.breakpoint_condition))\n            block = block.next()\n        return breakpoints", "output": "Get breakpoints", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def proxy_type(v):\n    \"\"\"  \"\"\"\n    proxies = []\n    if re.match(r\"((http|socks5):\\/\\/.)?(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}):(\\d{1,5})\", v):\n        proxies.append({\"http\": v,\n                        \"https\": v})\n        return proxies\n    elif re.match(r\"((http|socks5):\\/\\/.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}:(\\d{1,5})\", v):\n        proxies.append({\"http\": v,\n                        \"https\": v})\n        return proxies\n    elif is_proxy_list(v, proxies):\n        return proxies\n    else:\n        raise argparse.ArgumentTypeError(\n            \"Proxy should follow IP:PORT or DOMAIN:PORT format\")", "output": "Match IP:PORT or DOMAIN:PORT in a losse manner", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformer_sep_channels_16l_16h_imgnet_lrg_loc():\n  \"\"\"\"\"\"\n  hparams = imagetransformer_sep_channels_12l_16h_imagenet_large()\n  hparams.num_hidden_layers = 16\n  hparams.local_attention = True\n  hparams.batch_size = 1\n  hparams.block_length = 256\n  return hparams", "output": "separate rgb embeddings.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def toArray(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.isTransposed:\n            return np.asfortranarray(\n                self.values.reshape((self.numRows, self.numCols)))\n        else:\n            return self.values.reshape((self.numRows, self.numCols), order='F')", "output": "Return an numpy.ndarray\n\n        >>> m = DenseMatrix(2, 2, range(4))\n        >>> m.toArray()\n        array([[ 0.,  2.],\n               [ 1.,  3.]])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def identify_repo(repo_url):\n    \"\"\"\n    \"\"\"\n    repo_url_values = repo_url.split('+')\n    if len(repo_url_values) == 2:\n        repo_type = repo_url_values[0]\n        if repo_type in [\"git\", \"hg\"]:\n            return repo_type, repo_url_values[1]\n        else:\n            raise UnknownRepoType\n    else:\n        if 'git' in repo_url:\n            return 'git', repo_url\n        elif 'bitbucket' in repo_url:\n            return 'hg', repo_url\n        else:\n            raise UnknownRepoType", "output": "Determine if `repo_url` should be treated as a URL to a git or hg repo.\n\n    Repos can be identified by prepending \"hg+\" or \"git+\" to the repo URL.\n\n    :param repo_url: Repo URL of unknown type.\n    :returns: ('git', repo_url), ('hg', repo_url), or None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_punctuation(self, char):\n        \"\"\"\"\"\"\n        cp = ord(char)\n        # We treat all non-letter/number ASCII as punctuation.\n        # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n        # Punctuation class but we treat them as punctuation anyways, for\n        # consistency.\n        group0 = cp >= 33 and cp <= 47\n        group1 = cp >= 58 and cp <= 64\n        group2 = cp >= 91 and cp <= 96\n        group3 = cp >= 123 and cp <= 126\n        if (group0 or group1 or group2 or group3):\n            return True\n        cat = unicodedata.category(char)\n        if cat.startswith('P'):\n            return True\n        return False", "output": "Checks whether `chars` is a punctuation character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _canonize_content_input(self, dataset, single_style):\n        \"\"\"\n        \n        \"\"\"\n        unpack = lambda x: x\n        if isinstance(dataset, _tc.SArray):\n            dataset = _tc.SFrame({self.content_feature: dataset})\n            if single_style:\n                unpack = lambda sf: sf['stylized_' + self.content_feature]\n        elif isinstance(dataset, _tc.Image):\n            dataset = _tc.SFrame({self.content_feature: [dataset]})\n            if single_style:\n                unpack = lambda sf: sf['stylized_' + self.content_feature][0]\n        return dataset, unpack", "output": "Takes input and returns tuple of the input in canonical form (SFrame)\n        along with an unpack callback function that can be applied to\n        prediction results to \"undo\" the canonization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def blink_figure(self):\n        \"\"\"\"\"\"\n        if self.fig:\n            self._blink_flag = not self._blink_flag\n            self.repaint()\n            if self._blink_flag:\n                timer = QTimer()\n                timer.singleShot(40, self.blink_figure)", "output": "Blink figure once.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def metric(self, name, filter_=None, description=\"\"):\n        \"\"\"\n        \"\"\"\n        return Metric(name, filter_, client=self, description=description)", "output": "Creates a metric bound to the current client.\n\n        :type name: str\n        :param name: the name of the metric to be constructed.\n\n        :type filter_: str\n        :param filter_: the advanced logs filter expression defining the\n                        entries tracked by the metric.  If not\n                        passed, the instance should already exist, to be\n                        refreshed via :meth:`Metric.reload`.\n\n        :type description: str\n        :param description: the description of the metric to be constructed.\n                            If not passed, the instance should already exist,\n                            to be refreshed via :meth:`Metric.reload`.\n\n        :rtype: :class:`google.cloud.logging.metric.Metric`\n        :returns: Metric created with the current client.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_existing_weight(self, weight, trainable=None):\n    \"\"\"\"\"\"\n    if trainable is None: trainable = weight.trainable\n    self.add_weight(name=weight.name, shape=weight.shape, dtype=weight.dtype,\n                    trainable=trainable, getter=lambda *_, **__: weight)", "output": "Calls add_weight() to register but not create an existing weight.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stats(local=False, remote=False, jail=None, chroot=None, root=None):\n    '''\n    \n    '''\n\n    opts = ''\n    if local:\n        opts += 'l'\n    if remote:\n        opts += 'r'\n\n    cmd = _pkg(jail, chroot, root)\n    cmd.append('stats')\n    if opts:\n        cmd.append('-' + opts)\n    out = __salt__['cmd.run'](cmd, output_loglevel='trace', python_shell=False)\n    return [x.strip('\\t') for x in salt.utils.itertools.split(out, '\\n')]", "output": "Return pkgng stats.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.stats\n\n    local\n        Display stats only for the local package database.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats local=True\n\n    remote\n        Display stats only for the remote package database(s).\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats remote=True\n\n    jail\n        Retrieve stats from the specified jail.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats jail=<jail name or id>\n            salt '*' pkg.stats jail=<jail name or id> local=True\n            salt '*' pkg.stats jail=<jail name or id> remote=True\n\n    chroot\n        Retrieve stats from the specified chroot (ignored if ``jail`` is\n        specified).\n\n    root\n        Retrieve stats from the specified root (ignored if ``jail`` is\n        specified).\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats chroot=/path/to/chroot\n            salt '*' pkg.stats chroot=/path/to/chroot local=True\n            salt '*' pkg.stats chroot=/path/to/chroot remote=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install_given_reqs(\n    to_install,  # type: List[InstallRequirement]\n    install_options,  # type: List[str]\n    global_options=(),  # type: Sequence[str]\n    *args, **kwargs\n):\n    # type: (...) -> List[InstallRequirement]\n    \"\"\"\n    \n    \"\"\"\n\n    if to_install:\n        logger.info(\n            'Installing collected packages: %s',\n            ', '.join([req.name for req in to_install]),\n        )\n\n    with indent_log():\n        for requirement in to_install:\n            if requirement.conflicts_with:\n                logger.info(\n                    'Found existing installation: %s',\n                    requirement.conflicts_with,\n                )\n                with indent_log():\n                    uninstalled_pathset = requirement.uninstall(\n                        auto_confirm=True\n                    )\n            try:\n                requirement.install(\n                    install_options,\n                    global_options,\n                    *args,\n                    **kwargs\n                )\n            except Exception:\n                should_rollback = (\n                    requirement.conflicts_with and\n                    not requirement.install_succeeded\n                )\n                # if install did not succeed, rollback previous uninstall\n                if should_rollback:\n                    uninstalled_pathset.rollback()\n                raise\n            else:\n                should_commit = (\n                    requirement.conflicts_with and\n                    requirement.install_succeeded\n                )\n                if should_commit:\n                    uninstalled_pathset.commit()\n            requirement.remove_temporary_source()\n\n    return to_install", "output": "Install everything in the given list.\n\n    (to be called after having downloaded and unpacked the packages)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(key, default=None):\n    '''\n    \n    '''\n    store = load()\n\n    if isinstance(key, six.string_types):\n        return store.get(key, default)\n    elif default is None:\n        return [store[k] for k in key if k in store]\n    else:\n        return [store.get(k, default) for k in key]", "output": "Get a (list of) value(s) from the minion datastore\n\n    .. versionadded:: 2015.8.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' data.get key\n        salt '*' data.get '[\"key1\", \"key2\"]'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def as_objective(obj):\n  \"\"\"\n  \"\"\"\n  if isinstance(obj, Objective):\n    return obj\n  elif callable(obj):\n    return obj\n  elif isinstance(obj, str):\n    layer, n = obj.split(\":\")\n    layer, n = layer.strip(), int(n)\n    return channel(layer, n)", "output": "Convert obj into Objective class.\n\n  Strings of the form \"layer:n\" become the Objective channel(layer, n).\n  Objectives are returned unchanged.\n\n  Args:\n    obj: string or Objective.\n\n  Returns:\n    Objective", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def state_apply(state_name, **kwargs):\n    '''\n    \n    '''\n    # A new salt client is instantiated with the default configuration because the main module's\n    # client is hardcoded to local\n    # If the minion is running with a master, a non-local client is needed to lookup states\n    caller = salt.client.Caller()\n    if kwargs:\n        return caller.cmd('state.apply', state_name, **kwargs)\n    else:\n        return caller.cmd('state.apply', state_name)", "output": "Runs :py:func:`state.apply <salt.modules.state.apply>` with given options to set up test data.\n    Intended to be used for optional test setup or teardown\n\n    Reference the :py:func:`state.apply <salt.modules.state.apply>` module documentation for arguments and usage options\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltcheck.state_apply postfix", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_pax_header(self, info, encoding):\n        \"\"\"\n        \"\"\"\n        info[\"magic\"] = POSIX_MAGIC\n        pax_headers = self.pax_headers.copy()\n\n        # Test string fields for values that exceed the field length or cannot\n        # be represented in ASCII encoding.\n        for name, hname, length in (\n                (\"name\", \"path\", LENGTH_NAME), (\"linkname\", \"linkpath\", LENGTH_LINK),\n                (\"uname\", \"uname\", 32), (\"gname\", \"gname\", 32)):\n\n            if hname in pax_headers:\n                # The pax header has priority.\n                continue\n\n            # Try to encode the string as ASCII.\n            try:\n                info[name].encode(\"ascii\", \"strict\")\n            except UnicodeEncodeError:\n                pax_headers[hname] = info[name]\n                continue\n\n            if len(info[name]) > length:\n                pax_headers[hname] = info[name]\n\n        # Test number fields for values that exceed the field limit or values\n        # that like to be stored as float.\n        for name, digits in ((\"uid\", 8), (\"gid\", 8), (\"size\", 12), (\"mtime\", 12)):\n            if name in pax_headers:\n                # The pax header has priority. Avoid overflow.\n                info[name] = 0\n                continue\n\n            val = info[name]\n            if not 0 <= val < 8 ** (digits - 1) or isinstance(val, float):\n                pax_headers[name] = str(val)\n                info[name] = 0\n\n        # Create a pax extended header if necessary.\n        if pax_headers:\n            buf = self._create_pax_generic_header(pax_headers, XHDTYPE, encoding)\n        else:\n            buf = b\"\"\n\n        return buf + self._create_header(info, USTAR_FORMAT, \"ascii\", \"replace\")", "output": "Return the object as a ustar header block. If it cannot be\n           represented this way, prepend a pax extended header sequence\n           with supplement information.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_trial_complete(self,\n                          trial_id,\n                          result=None,\n                          error=False,\n                          early_terminated=False):\n        \"\"\"\n        \"\"\"\n        ho_trial = self._get_hyperopt_trial(trial_id)\n        if ho_trial is None:\n            return\n        ho_trial[\"refresh_time\"] = hpo.utils.coarse_utcnow()\n        if error:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_ERROR\n            ho_trial[\"misc\"][\"error\"] = (str(TuneError), \"Tune Error\")\n        elif early_terminated:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_ERROR\n            ho_trial[\"misc\"][\"error\"] = (str(TuneError), \"Tune Removed\")\n        else:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_DONE\n            hp_result = self._to_hyperopt_result(result)\n            ho_trial[\"result\"] = hp_result\n        self._hpopt_trials.refresh()\n        del self._live_trial_mapping[trial_id]", "output": "Passes the result to HyperOpt unless early terminated or errored.\n\n        The result is internally negated when interacting with HyperOpt\n        so that HyperOpt can \"maximize\" this value, as it minimizes on default.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_valid_label(self, label):\n        \"\"\"\"\"\"\n        if len(label.shape) != 2 or label.shape[1] < 5:\n            msg = \"Label with shape (1+, 5+) required, %s received.\" % str(label)\n            raise RuntimeError(msg)\n        valid_label = np.where(np.logical_and(label[:, 0] >= 0, label[:, 3] > label[:, 1],\n                                              label[:, 4] > label[:, 2]))[0]\n        if valid_label.size < 1:\n            raise RuntimeError('Invalid label occurs.')", "output": "Validate label and its shape.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def label_from_re(self, pat:str, full_path:bool=False, label_cls:Callable=None, **kwargs)->'LabelList':\n        \"\"\n        pat = re.compile(pat)\n        def _inner(o):\n            s = str((os.path.join(self.path,o) if full_path else o).as_posix())\n            res = pat.search(s)\n            assert res,f'Failed to find \"{pat}\" in \"{s}\"'\n            return res.group(1)\n        return self.label_from_func(_inner, label_cls=label_cls, **kwargs)", "output": "Apply the re in `pat` to determine the label of every filename.  If `full_path`, search in the full name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_dash(self, dashboard_id):\n        \"\"\"\"\"\"\n        session = db.session()\n        data = json.loads(request.form.get('data'))\n        dash = models.Dashboard()\n        original_dash = (\n            session\n            .query(models.Dashboard)\n            .filter_by(id=dashboard_id).first())\n\n        dash.owners = [g.user] if g.user else []\n        dash.dashboard_title = data['dashboard_title']\n\n        if data['duplicate_slices']:\n            # Duplicating slices as well, mapping old ids to new ones\n            old_to_new_sliceids = {}\n            for slc in original_dash.slices:\n                new_slice = slc.clone()\n                new_slice.owners = [g.user] if g.user else []\n                session.add(new_slice)\n                session.flush()\n                new_slice.dashboards.append(dash)\n                old_to_new_sliceids['{}'.format(slc.id)] = \\\n                    '{}'.format(new_slice.id)\n\n            # update chartId of layout entities\n            # in v2_dash positions json data, chartId should be integer,\n            # while in older version slice_id is string type\n            for value in data['positions'].values():\n                if (\n                    isinstance(value, dict) and value.get('meta') and\n                    value.get('meta').get('chartId')\n                ):\n                    old_id = '{}'.format(value.get('meta').get('chartId'))\n                    new_id = int(old_to_new_sliceids[old_id])\n                    value['meta']['chartId'] = new_id\n        else:\n            dash.slices = original_dash.slices\n        dash.params = original_dash.params\n\n        self._set_dash_metadata(dash, data)\n        session.add(dash)\n        session.commit()\n        dash_json = json.dumps(dash.data)\n        session.close()\n        return json_success(dash_json)", "output": "Copy dashboard", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setNNIManagerIp(experiment_config, port, config_file_name):\n    ''''''\n    if experiment_config.get('nniManagerIp') is None:\n        return True, None\n    ip_config_dict = dict()\n    ip_config_dict['nni_manager_ip'] = { 'nniManagerIp' : experiment_config['nniManagerIp'] }\n    response = rest_put(cluster_metadata_url(port), json.dumps(ip_config_dict), REST_TIME_OUT)\n    err_message = None\n    if not response or not response.status_code == 200:\n        if response is not None:\n            err_message = response.text\n            _, stderr_full_path = get_log_path(config_file_name)\n            with open(stderr_full_path, 'a+') as fout:\n                fout.write(json.dumps(json.loads(err_message), indent=4, sort_keys=True, separators=(',', ':')))\n        return False, err_message\n    return True, None", "output": "set nniManagerIp", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def preserve_channel_dim(func):\n    \"\"\"\"\"\"\n    @wraps(func)\n    def wrapped_function(img, *args, **kwargs):\n        shape = img.shape\n        result = func(img, *args, **kwargs)\n        if len(shape) == 3 and shape[-1] == 1 and len(result.shape) == 2:\n            result = np.expand_dims(result, axis=-1)\n        return result\n\n    return wrapped_function", "output": "Preserve dummy channel dim.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_client_tab(self, client, given_name):\r\n        \"\"\"\"\"\"\r\n        index = self.get_client_index_from_id(id(client))\r\n\r\n        if given_name is not None:\r\n            client.given_name = given_name\r\n        self.tabwidget.setTabText(index, client.get_name())", "output": "Rename client's tab", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_numeric_methods_binary(cls):\n        \"\"\"\n        \n        \"\"\"\n        cls.__add__ = _make_arithmetic_op(operator.add, cls)\n        cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n        cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n        cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n        cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n        cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n\n        cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n        cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n\n        # TODO: rmod? rdivmod?\n        cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n        cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n        cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n        cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n        cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n        cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)", "output": "Add in numeric methods.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def masked_max(vector: torch.Tensor,\n               mask: torch.Tensor,\n               dim: int,\n               keepdim: bool = False,\n               min_val: float = -1e7) -> torch.Tensor:\n    \"\"\"\n    \n    \"\"\"\n    one_minus_mask = (1.0 - mask).byte()\n    replaced_vector = vector.masked_fill(one_minus_mask, min_val)\n    max_value, _ = replaced_vector.max(dim=dim, keepdim=keepdim)\n    return max_value", "output": "To calculate max along certain dimensions on masked values\n\n    Parameters\n    ----------\n    vector : ``torch.Tensor``\n        The vector to calculate max, assume unmasked parts are already zeros\n    mask : ``torch.Tensor``\n        The mask of the vector. It must be broadcastable with vector.\n    dim : ``int``\n        The dimension to calculate max\n    keepdim : ``bool``\n        Whether to keep dimension\n    min_val : ``float``\n        The minimal value for paddings\n\n    Returns\n    -------\n    A ``torch.Tensor`` of including the maximum values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_parameters(self, parameter_id):\n        \"\"\"\n        \n        \"\"\"\n        if not self.history:\n            self.init_search()\n\n        new_father_id = None\n        generated_graph = None\n        if not self.training_queue:\n            new_father_id, generated_graph = self.generate()\n            new_model_id = self.model_count\n            self.model_count += 1\n            self.training_queue.append((generated_graph, new_father_id, new_model_id))\n            self.descriptors.append(generated_graph.extract_descriptor())\n\n        graph, father_id, model_id = self.training_queue.pop(0)\n\n        # from graph to json\n        json_model_path = os.path.join(self.path, str(model_id) + \".json\")\n        json_out = graph_to_json(graph, json_model_path)\n        self.total_data[parameter_id] = (json_out, father_id, model_id)\n\n        return json_out", "output": "Returns a set of trial neural architecture, as a serializable object.\n\n        Parameters\n        ----------\n        parameter_id : int", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_in_notebook(self,\n                         labels=None,\n                         predict_proba=True,\n                         show_predicted_value=True,\n                         **kwargs):\n        \"\"\"\"\"\"\n\n        from IPython.core.display import display, HTML\n        display(HTML(self.as_html(labels=labels,\n                                  predict_proba=predict_proba,\n                                  show_predicted_value=show_predicted_value,\n                                  **kwargs)))", "output": "Shows html explanation in ipython notebook.\n\n        See as_html() for parameters.\n        This will throw an error if you don't have IPython installed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_rabit_checkpoint(self):\n        \"\"\"\n        \"\"\"\n        version = ctypes.c_int()\n        _check_call(_LIB.XGBoosterLoadRabitCheckpoint(\n            self.handle, ctypes.byref(version)))\n        return version.value", "output": "Initialize the model by load from rabit checkpoint.\n\n        Returns\n        -------\n        version: integer\n            The version number of the model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_bulk_size(size):\n    \"\"\"\n    \"\"\"\n    prev = ctypes.c_int()\n    check_call(_LIB.MXEngineSetBulkSize(\n        ctypes.c_int(size), ctypes.byref(prev)))\n    return prev.value", "output": "Set size limit on bulk execution.\n\n    Bulk execution bundles many operators to run together.\n    This can improve performance when running a lot of small\n    operators sequentially.\n\n    Parameters\n    ----------\n    size : int\n        Maximum number of operators that can be bundled in a bulk.\n\n    Returns\n    -------\n    int\n        Previous bulk size.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def value_opt_step(i,\n                   opt_state,\n                   opt_update,\n                   value_net_apply,\n                   padded_observations,\n                   padded_rewards,\n                   reward_mask,\n                   gamma=0.99):\n  \"\"\"\"\"\"\n  value_params = trax_opt.get_params(opt_state)\n  # Note this partial application here and argnums above in ppo_opt_step.\n  g = grad(functools.partial(value_loss, value_net_apply))(\n      value_params,\n      padded_observations,\n      padded_rewards,\n      reward_mask,\n      gamma=gamma)\n  return opt_update(i, g, opt_state)", "output": "Value optimizer step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def createFileParserCtxt(filename):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlCreateFileParserCtxt(filename)\n    if ret is None:raise parserError('xmlCreateFileParserCtxt() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a parser context for a file content. Automatic\n      support for ZLIB/Compress compressed document is provided\n       by default if found at compile-time.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch_defense_data(self):\n    \"\"\"\"\"\"\n    if self.defenses_data_initialized:\n      return\n    logging.info('Fetching defense data from datastore')\n    # init data from datastore\n    self.submissions.init_from_datastore()\n    self.dataset_batches.init_from_datastore()\n    self.adv_batches.init_from_datastore()\n    # read dataset metadata\n    self.read_dataset_metadata()\n    # mark as initialized\n    self.defenses_data_initialized = True", "output": "Lazy initialization of data necessary to execute defenses.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def compress_for_rename(paths):\n    \"\"\"\n    \"\"\"\n    case_map = dict((os.path.normcase(p), p) for p in paths)\n    remaining = set(case_map)\n    unchecked = sorted(set(os.path.split(p)[0]\n                           for p in case_map.values()), key=len)\n    wildcards = set()\n\n    def norm_join(*a):\n        return os.path.normcase(os.path.join(*a))\n\n    for root in unchecked:\n        if any(os.path.normcase(root).startswith(w)\n               for w in wildcards):\n            # This directory has already been handled.\n            continue\n\n        all_files = set()\n        all_subdirs = set()\n        for dirname, subdirs, files in os.walk(root):\n            all_subdirs.update(norm_join(root, dirname, d)\n                               for d in subdirs)\n            all_files.update(norm_join(root, dirname, f)\n                             for f in files)\n        # If all the files we found are in our remaining set of files to\n        # remove, then remove them from the latter set and add a wildcard\n        # for the directory.\n        if not (all_files - remaining):\n            remaining.difference_update(all_files)\n            wildcards.add(root + os.sep)\n\n    return set(map(case_map.__getitem__, remaining)) | wildcards", "output": "Returns a set containing the paths that need to be renamed.\n\n    This set may include directories when the original sequence of paths\n    included every file on disk.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def execute_only_once():\n    \"\"\"\n    \n    \"\"\"\n    f = inspect.currentframe().f_back\n    ident = (f.f_code.co_filename, f.f_lineno)\n    if ident in _EXECUTE_HISTORY:\n        return False\n    _EXECUTE_HISTORY.add(ident)\n    return True", "output": "Each called in the code to this function is guaranteed to return True the\n    first time and False afterwards.\n\n    Returns:\n        bool: whether this is the first time this function gets called from this line of code.\n\n    Example:\n        .. code-block:: python\n\n            if execute_only_once():\n                # do something only once", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def task_absent(name):\n    '''\n    \n    '''\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n\n    task = __salt__['kapacitor.get_task'](name)\n\n    if task:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Task would have been deleted'\n        else:\n            result = __salt__['kapacitor.delete_task'](name)\n            ret['result'] = result['success']\n            if not ret['result']:\n                ret['comment'] = 'Could not disable task'\n                if result.get('stderr'):\n                    ret['comment'] += '\\n' + result['stderr']\n                return ret\n            ret['comment'] = 'Task was deleted'\n        ret['changes'][name] = 'deleted'\n    else:\n        ret['comment'] = 'Task does not exist'\n\n    return ret", "output": "Ensure that a task is absent from Kapacitor.\n\n    name\n        Name of the task.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def combine_concat_plans(plans, concat_axis):\n    \"\"\"\n    \n    \"\"\"\n    if len(plans) == 1:\n        for p in plans[0]:\n            yield p[0], [p[1]]\n\n    elif concat_axis == 0:\n        offset = 0\n        for plan in plans:\n            last_plc = None\n\n            for plc, unit in plan:\n                yield plc.add(offset), [unit]\n                last_plc = plc\n\n            if last_plc is not None:\n                offset += last_plc.as_slice.stop\n\n    else:\n        num_ended = [0]\n\n        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval\n\n        plans = list(map(iter, plans))\n        next_items = list(map(_next_or_none, plans))\n\n        while num_ended[0] != len(next_items):\n            if num_ended[0] > 0:\n                raise ValueError(\"Plan shapes are not aligned\")\n\n            placements, units = zip(*next_items)\n\n            lengths = list(map(len, placements))\n            min_len, max_len = min(lengths), max(lengths)\n\n            if min_len == max_len:\n                yield placements[0], units\n                next_items[:] = map(_next_or_none, plans)\n            else:\n                yielded_placement = None\n                yielded_units = [None] * len(next_items)\n                for i, (plc, unit) in enumerate(next_items):\n                    yielded_units[i] = unit\n                    if len(plc) > min_len:\n                        # trim_join_unit updates unit in place, so only\n                        # placement needs to be sliced to skip min_len.\n                        next_items[i] = (plc[min_len:],\n                                         trim_join_unit(unit, min_len))\n                    else:\n                        yielded_placement = plc\n                        next_items[i] = _next_or_none(plans[i])\n\n                yield yielded_placement, yielded_units", "output": "Combine multiple concatenation plans into one.\n\n    existing_plan is updated in-place.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zfill(self, width):\n        \"\"\"\n        \n        \"\"\"\n        result = str_pad(self._parent, width, side='left', fillchar='0')\n        return self._wrap_result(result)", "output": "Pad strings in the Series/Index by prepending '0' characters.\n\n        Strings in the Series/Index are padded with '0' characters on the\n        left of the string to reach a total string length  `width`. Strings\n        in the Series/Index with length greater or equal to `width` are\n        unchanged.\n\n        Parameters\n        ----------\n        width : int\n            Minimum length of resulting string; strings with length less\n            than `width` be prepended with '0' characters.\n\n        Returns\n        -------\n        Series/Index of objects\n\n        See Also\n        --------\n        Series.str.rjust : Fills the left side of strings with an arbitrary\n            character.\n        Series.str.ljust : Fills the right side of strings with an arbitrary\n            character.\n        Series.str.pad : Fills the specified sides of strings with an arbitrary\n            character.\n        Series.str.center : Fills boths sides of strings with an arbitrary\n            character.\n\n        Notes\n        -----\n        Differs from :meth:`str.zfill` which has special handling\n        for '+'/'-' in the string.\n\n        Examples\n        --------\n        >>> s = pd.Series(['-1', '1', '1000', 10, np.nan])\n        >>> s\n        0      -1\n        1       1\n        2    1000\n        3      10\n        4     NaN\n        dtype: object\n\n        Note that ``10`` and ``NaN`` are not strings, therefore they are\n        converted to ``NaN``. The minus sign in ``'-1'`` is treated as a\n        regular character and the zero is added to the left of it\n        (:meth:`str.zfill` would have moved it to the left). ``1000``\n        remains unchanged as it is longer than `width`.\n\n        >>> s.str.zfill(3)\n        0     0-1\n        1     001\n        2    1000\n        3     NaN\n        4     NaN\n        dtype: object", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _combine_args(self):\n        \"\"\"\n        \"\"\"\n        child_path = self._parse_path(self._flat_path)\n\n        if self._parent is not None:\n            if self._parent.is_partial:\n                raise ValueError(\"Parent key must be complete.\")\n\n            # We know that _parent.path() will return a copy.\n            child_path = self._parent.path + child_path\n            self._flat_path = self._parent.flat_path + self._flat_path\n            if (\n                self._namespace is not None\n                and self._namespace != self._parent.namespace\n            ):\n                raise ValueError(\"Child namespace must agree with parent's.\")\n            self._namespace = self._parent.namespace\n            if self._project is not None and self._project != self._parent.project:\n                raise ValueError(\"Child project must agree with parent's.\")\n            self._project = self._parent.project\n\n        return child_path", "output": "Sets protected data by combining raw data set from the constructor.\n\n        If a ``_parent`` is set, updates the ``_flat_path`` and sets the\n        ``_namespace`` and ``_project`` if not already set.\n\n        :rtype: :class:`list` of :class:`dict`\n        :returns: A list of key parts with kind and ID or name set.\n        :raises: :class:`ValueError` if the parent key is not complete.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_(key, value, profile=None):\n    '''\n    \n    '''\n    db = _get_db(profile)\n    return db.save({'_id': uuid4().hex, key: value})", "output": "Set a key/value pair in couchdb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait(name, ignore_already_stopped=False, fail_on_exit_status=False):\n    '''\n    \n    '''\n    try:\n        pre = state(name)\n    except CommandExecutionError:\n        # Container doesn't exist anymore\n        return {'result': ignore_already_stopped,\n                'comment': 'Container \\'{0}\\' absent'.format(name)}\n    already_stopped = pre == 'stopped'\n    response = _client_wrapper('wait', name)\n    _clear_context()\n    try:\n        post = state(name)\n    except CommandExecutionError:\n        # Container doesn't exist anymore\n        post = None\n\n    if already_stopped:\n        success = ignore_already_stopped\n    elif post == 'stopped':\n        success = True\n    else:\n        success = False\n\n    result = {'result': success,\n              'state': {'old': pre, 'new': post},\n              'exit_status': response}\n    if already_stopped:\n        result['comment'] = 'Container \\'{0}\\' already stopped'.format(name)\n    if fail_on_exit_status and result['result']:\n        result['result'] = result['exit_status'] == 0\n    return result", "output": "Wait for the container to exit gracefully, and return its exit code\n\n    .. note::\n\n        This function will block until the container is stopped.\n\n    name\n        Container name or ID\n\n    ignore_already_stopped\n        Boolean flag that prevents execution to fail, if a container\n        is already stopped.\n\n    fail_on_exit_status\n        Boolean flag to report execution as failure if ``exit_status``\n        is different than 0.\n\n    **RETURN DATA**\n\n    A dictionary will be returned, containing the following keys:\n\n    - ``status`` - A dictionary showing the prior state of the container as\n      well as the new state\n    - ``result`` - A boolean noting whether or not the action was successful\n    - ``exit_status`` - Exit status for the container\n    - ``comment`` - Only present if the container is already stopped\n\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion docker.wait mycontainer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nearest_neighbor(self, x, means):\n    \"\"\"\n    \"\"\"\n    x_norm_sq = tf.reduce_sum(tf.square(x), axis=-1, keep_dims=True)\n    means_norm_sq = tf.reduce_sum(tf.square(means), axis=-1, keep_dims=True)\n    scalar_prod = tf.matmul(\n        tf.transpose(x, perm=[1, 0, 2]), tf.transpose(means, perm=[0, 2, 1]))\n    scalar_prod = tf.transpose(scalar_prod, perm=[1, 0, 2])\n    dist = x_norm_sq + tf.transpose(\n        means_norm_sq, perm=[2, 0, 1]) - 2 * scalar_prod\n\n    if self.hparams.soft_em:\n      nearest_idx = tf.stack(\n          [\n              tf.multinomial(\n                  -dist[:, i, :], num_samples=self.hparams.num_samples)\n              for i in range(self.hparams.num_blocks)\n          ],\n          axis=1)\n      nearest_hot = tf.one_hot(nearest_idx, depth=self.hparams.block_v_size)\n      nearest_hot = tf.reduce_mean(nearest_hot, axis=-2)\n    else:\n      if self.hparams.random_top_k > 1:\n        _, top_k_idx = tf.nn.top_k(-dist, k=self.hparams.random_top_k)\n        nearest_idx = tf.gather(\n            top_k_idx,\n            tf.random_uniform(\n                [1],\n                minval=0,\n                maxval=self.hparams.random_top_k - 1,\n                dtype=tf.int32),\n            axis=-1)\n      else:\n        if self.hparams.use_scales:\n          dist /= tf.reshape(self.hparams.scales,\n                             [1, 1, self.hparams.moe_num_experts])\n        nearest_idx = tf.argmax(-dist, axis=-1)\n      nearest_hot = tf.one_hot(nearest_idx, self.hparams.block_v_size)\n    return nearest_hot", "output": "Find the nearest element in means to elements in x.\n\n    Args:\n        x: Batch of encoder continuous latent states sliced/projected into\n           shape [-1, num_blocks, block_dim].\n        means: Embedding means of shape.\n\n    Returns:\n      Tensor with nearest element in mean encoded in one-hot notation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def port_policy_present(name, sel_type, protocol=None, port=None, sel_range=None):\n    '''\n    \n    '''\n    ret = {'name': name, 'result': False, 'changes': {}, 'comment': ''}\n    old_state = __salt__['selinux.port_get_policy'](\n        name=name,\n        sel_type=sel_type,\n        protocol=protocol,\n        port=port, )\n    if old_state:\n        ret.update({'result': True,\n                    'comment': 'SELinux policy for \"{0}\" already present '.format(name) +\n                               'with specified sel_type \"{0}\", protocol \"{1}\" and port \"{2}\".'.format(\n                                   sel_type, protocol, port)})\n        return ret\n    if __opts__['test']:\n        ret.update({'result': None})\n    else:\n        add_ret = __salt__['selinux.port_add_policy'](\n            name=name,\n            sel_type=sel_type,\n            protocol=protocol,\n            port=port,\n            sel_range=sel_range, )\n        if add_ret['retcode'] != 0:\n            ret.update({'comment': 'Error adding new policy: {0}'.format(add_ret)})\n        else:\n            ret.update({'result': True})\n            new_state = __salt__['selinux.port_get_policy'](\n                name=name,\n                sel_type=sel_type,\n                protocol=protocol,\n                port=port, )\n            ret['changes'].update({'old': old_state, 'new': new_state})\n    return ret", "output": ".. versionadded:: 2019.2.0\n\n    Makes sure an SELinux port policy for a given port, protocol and SELinux context type is present.\n\n    name\n        The protocol and port spec. Can be formatted as ``(tcp|udp)/(port|port-range)``.\n\n    sel_type\n        The SELinux Type.\n\n    protocol\n        The protocol for the port, ``tcp`` or ``udp``. Required if name is not formatted.\n\n    port\n        The port or port range. Required if name is not formatted.\n\n    sel_range\n        The SELinux MLS/MCS Security Range.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_get_trade_gap(start, end):\n    ''\n    start, end = QA_util_get_real_datelist(start, end)\n    if start is not None:\n        return trade_date_sse.index(end) + 1 - trade_date_sse.index(start)\n    else:\n        return 0", "output": "\u8fd4\u56destart_day\u5230end_day\u4e2d\u95f4\u6709\u591a\u5c11\u4e2a\u4ea4\u6613\u5929 \u7b97\u9996\u5c3e", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def toVector(value):\n        \"\"\"\n        \n        \"\"\"\n        if isinstance(value, Vector):\n            return value\n        elif TypeConverters._can_convert_to_list(value):\n            value = TypeConverters.toList(value)\n            if all(map(lambda v: TypeConverters._is_numeric(v), value)):\n                return DenseVector(value)\n        raise TypeError(\"Could not convert %s to vector\" % value)", "output": "Convert a value to a MLlib Vector, if possible.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_subdirectories(path, include, exclude, show_all):\r\n    \"\"\"\"\"\"\r\n    try:\r\n        # > 1 because of '..'\r\n        return len( listdir(path, include, exclude,\r\n                            show_all, folders_only=True) ) > 1\r\n    except (IOError, OSError):\r\n        return False", "output": "Return True if path has subdirectories", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def push_note(device=None, title=None, body=None):\n    '''\n    \n    '''\n    spb = _SaltPushbullet(device)\n    res = spb.push_note(title, body)\n\n    return res", "output": "Pushing a text note.\n\n    :param device:   Pushbullet target device\n    :param title:    Note title\n    :param body:     Note body\n\n    :return:            Boolean if message was sent successfully.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt \"*\" pushbullet.push_note device=\"Chrome\" title=\"Example title\" body=\"Example body.\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_secret(\n        name,\n        namespace='default',\n        data=None,\n        source=None,\n        template=None,\n        saltenv='base',\n        **kwargs):\n    '''\n    \n    '''\n    if source:\n        data = __read_and_render_yaml_file(source, template, saltenv)\n    elif data is None:\n        data = {}\n\n    data = __enforce_only_strings_dict(data)\n\n    # encode the secrets using base64 as required by kubernetes\n    for key in data:\n        data[key] = base64.b64encode(data[key])\n\n    body = kubernetes.client.V1Secret(\n        metadata=__dict_to_object_meta(name, namespace, {}),\n        data=data)\n\n    cfg = _setup_conn(**kwargs)\n\n    try:\n        api_instance = kubernetes.client.CoreV1Api()\n        api_response = api_instance.create_namespaced_secret(\n            namespace, body)\n\n        return api_response.to_dict()\n    except (ApiException, HTTPError) as exc:\n        if isinstance(exc, ApiException) and exc.status == 404:\n            return None\n        else:\n            log.exception(\n                'Exception when calling '\n                'CoreV1Api->create_namespaced_secret'\n            )\n            raise CommandExecutionError(exc)\n    finally:\n        _cleanup(**cfg)", "output": "Creates the kubernetes secret as defined by the user.\n\n    CLI Examples::\n\n        salt 'minion1' kubernetes.create_secret \\\n            passwords default '{\"db\": \"letmein\"}'\n\n        salt 'minion2' kubernetes.create_secret \\\n            name=passwords namespace=default data='{\"db\": \"letmein\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _pipe(obj, func, *args, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    if isinstance(func, tuple):\n        func, target = func\n        if target in kwargs:\n            msg = '%s is both the pipe target and a keyword argument' % target\n            raise ValueError(msg)\n        kwargs[target] = obj\n        return func(*args, **kwargs)\n    else:\n        return func(obj, *args, **kwargs)", "output": "Apply a function ``func`` to object ``obj`` either by passing obj as the\n    first argument to the function or, in the case that the func is a tuple,\n    interpret the first element of the tuple as a function and pass the obj to\n    that function as a keyword argument whose key is the value of the second\n    element of the tuple.\n\n    Parameters\n    ----------\n    func : callable or tuple of (callable, string)\n        Function to apply to this object or, alternatively, a\n        ``(callable, data_keyword)`` tuple where ``data_keyword`` is a\n        string indicating the keyword of `callable`` that expects the\n        object.\n    args : iterable, optional\n        positional arguments passed into ``func``.\n    kwargs : dict, optional\n        a dictionary of keyword arguments passed into ``func``.\n\n    Returns\n    -------\n    object : the return type of ``func``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def PopupGetText(message, title=None, default_text='', password_char='', size=(None, None), button_color=None,\n                 background_color=None, text_color=None, icon=DEFAULT_WINDOW_ICON, font=None, no_titlebar=False,\n                 grab_anywhere=False, keep_on_top=False, location=(None, None)):\n    \"\"\"\n    \n    \"\"\"\n\n    layout = [[Text(message, auto_size_text=True, text_color=text_color, background_color=background_color, font=font)],\n              [InputText(default_text=default_text, size=size, password_char=password_char)],\n              [CloseButton('Ok', size=(60, 20), bind_return_key=True), CloseButton('Cancel', size=(60, 20))]]\n\n    _title = title if title is not None else message\n\n    window = Window(title=_title, icon=icon, auto_size_text=True, button_color=button_color, no_titlebar=no_titlebar,\n                    background_color=background_color, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top,\n                    location=location)\n\n    (button, input_values) = window.Layout(layout).Read()\n\n    if button != 'Ok':\n        return None\n    else:\n        return input_values[0]", "output": "Display Popup with text entry field\n    :param message:\n    :param default_text:\n    :param password_char:\n    :param size:\n    :param button_color:\n    :param background_color:\n    :param text_color:\n    :param icon:\n    :param font:\n    :param no_titlebar:\n    :param grab_anywhere:\n    :param keep_on_top:\n    :param location:\n    :return: Text entered or None if window was closed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attr(self, key):\n        \"\"\"\n        \"\"\"\n        ret = ctypes.c_char_p()\n        success = ctypes.c_int()\n        _check_call(_LIB.XGBoosterGetAttr(\n            self.handle, c_str(key), ctypes.byref(ret), ctypes.byref(success)))\n        if success.value != 0:\n            return py_str(ret.value)\n        return None", "output": "Get attribute string from the Booster.\n\n        Parameters\n        ----------\n        key : str\n            The key to get attribute from.\n\n        Returns\n        -------\n        value : str\n            The attribute value of the key, returns None if attribute do not exist.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self, directory=''):\n        \"\"\"\n        \n        \"\"\"\n        with self.no_unpicklable_properties():\n            file_name = os.path.join(directory, 'job-instance.pickle')\n            if self.__module__ == '__main__':\n                d = pickle.dumps(self)\n                module_name = os.path.basename(sys.argv[0]).rsplit('.', 1)[0]\n                d = d.replace(b'(c__main__', \"(c\" + module_name)\n                open(file_name, \"wb\").write(d)\n\n            else:\n                pickle.dump(self, open(file_name, \"wb\"))", "output": "Dump instance to file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exists(self, path):\n        \"\"\"\n        \n        \"\"\"\n        import hdfs\n        try:\n            self.client.status(path)\n            return True\n        except hdfs.util.HdfsError as e:\n            if str(e).startswith('File does not exist: '):\n                return False\n            else:\n                raise e", "output": "Returns true if the path exists and false otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def detect_django_settings():\n    \"\"\"\n    \n    \"\"\"\n\n    matches = []\n    for root, dirnames, filenames in os.walk(os.getcwd()):\n        for filename in fnmatch.filter(filenames, '*settings.py'):\n            full = os.path.join(root, filename)\n            if 'site-packages' in full:\n                continue\n            full = os.path.join(root, filename)\n            package_path = full.replace(os.getcwd(), '')\n            package_module = package_path.replace(os.sep, '.').split('.', 1)[1].replace('.py', '')\n\n            matches.append(package_module)\n    return matches", "output": "Automatically try to discover Django settings files,\n    return them as relative module paths.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_repository(self, repository, body, params=None):\n        \"\"\"\n        \n        \"\"\"\n        for param in (repository, body):\n            if param in SKIP_IN_PATH:\n                raise ValueError(\"Empty value passed for a required argument.\")\n        return self.transport.perform_request('PUT', _make_path('_snapshot',\n            repository), params=params, body=body)", "output": "Registers a shared file system repository.\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html>`_\n\n        :arg repository: A repository name\n        :arg body: The repository definition\n        :arg master_timeout: Explicit operation timeout for connection to master\n            node\n        :arg timeout: Explicit operation timeout\n        :arg verify: Whether to verify the repository after creation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def _retrieve_guilds_after_strategy(self, retrieve):\n        \"\"\"\"\"\"\n        after = self.after.id if self.after else None\n        data = await self.get_guilds(retrieve, after=after)\n        if len(data):\n            if self.limit is not None:\n                self.limit -= retrieve\n            self.after = Object(id=int(data[0]['id']))\n        return data", "output": "Retrieve guilds using after parameter.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def disable(name, stop=False, **kwargs):\n    '''\n    \n    '''\n\n    # non-existent as registrered service\n    if not enabled(name):\n        return False\n\n    # down_file: file that prevent sv autostart\n    svc_realpath = _get_svc_path(name)[0]\n    down_file = os.path.join(svc_realpath, 'down')\n\n    if stop:\n        stop(name)\n\n    if not os.path.exists(down_file):\n        try:\n            salt.utils.files.fopen(down_file, \"w\").close()  # pylint: disable=resource-leakage\n        except IOError:\n            log.error('Unable to create file %s', down_file)\n            return False\n\n    return True", "output": "Don't start service ``name`` at boot\n    Returns ``True`` if operation is successful\n\n    name\n        the service's name\n\n    stop\n        if True, also stops the service\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.disable <name> [stop=True]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def datasets_list_files(self, owner_slug, dataset_slug, **kwargs):  # noqa: E501\n        \"\"\"\n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.datasets_list_files_with_http_info(owner_slug, dataset_slug, **kwargs)  # noqa: E501\n        else:\n            (data) = self.datasets_list_files_with_http_info(owner_slug, dataset_slug, **kwargs)  # noqa: E501\n            return data", "output": "List dataset files  # noqa: E501\n\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.datasets_list_files(owner_slug, dataset_slug, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str owner_slug: Dataset owner (required)\n        :param str dataset_slug: Dataset name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def path(self):\n        \"\"\"\n        \n        \"\"\"\n        location = self.client.table_location(self.table, self.database)\n        if not location:\n            raise Exception(\"Couldn't find location for table: {0}\".format(str(self)))\n        return location", "output": "Returns the path to this table in HDFS.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_valid_project(self, path):\r\n        \"\"\"\"\"\"\r\n        spy_project_dir = osp.join(path, '.spyproject')\r\n        if osp.isdir(path) and osp.isdir(spy_project_dir):\r\n            return True\r\n        else:\r\n            return False", "output": "Check if a directory is a valid Spyder project", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_pos(token):\n    \"\"\"\n    \"\"\"\n    # TODO: This is a first take. The rules here are crude approximations.\n    # For many of these, full dependencies are needed to properly resolve\n    # PoS mappings.\n    if token.pos == \"\u9023\u4f53\u8a5e,*,*,*\":\n        if re.match(r\"[\u3053\u305d\u3042\u3069\u6b64\u5176\u5f7c]\u306e\", token.surface):\n            return token.pos + \",DET\"\n        if re.match(r\"[\u3053\u305d\u3042\u3069\u6b64\u5176\u5f7c]\", token.surface):\n            return token.pos + \",PRON\"\n        return token.pos + \",ADJ\"\n    return token.pos", "output": "If necessary, add a field to the POS tag for UD mapping.\n    Under Universal Dependencies, sometimes the same Unidic POS tag can\n    be mapped differently depending on the literal token or its context\n    in the sentence. This function adds information to the POS tag to\n    resolve ambiguous mappings.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pairwise_euclid_distance(A, B):\n    \"\"\"\n    \"\"\"\n    batchA = tf.shape(A)[0]\n    batchB = tf.shape(B)[0]\n\n    sqr_norm_A = tf.reshape(tf.reduce_sum(tf.pow(A, 2), 1), [1, batchA])\n    sqr_norm_B = tf.reshape(tf.reduce_sum(tf.pow(B, 2), 1), [batchB, 1])\n    inner_prod = tf.matmul(B, A, transpose_b=True)\n\n    tile_1 = tf.tile(sqr_norm_A, [batchB, 1])\n    tile_2 = tf.tile(sqr_norm_B, [1, batchA])\n    return (tile_1 + tile_2 - 2 * inner_prod)", "output": "Pairwise Euclidean distance between two matrices.\n    :param A: a matrix.\n    :param B: a matrix.\n\n    :returns: A tensor for the pairwise Euclidean between A and B.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def DiagonalGate(x, params, **kwargs):\n  \"\"\"\"\"\"\n  del params\n  del kwargs\n  # x : [batch, 1, length, depth]\n  x = np.pad(\n      x, [(0, 0), (0, 0), (1, 1), (0, 0)], mode='constant', constant_values=0.0)\n  depth = x.shape[-1] // 3\n  assert 3 * depth == x.shape[-1], ('Depth must be divisible by 3', depth,\n                                    x.shape)\n  xs = [\n      x[:, :, :-2, :depth], x[:, :, 1:-1, depth:2 * depth],\n      x[:, :, 2:, 2 * depth:3 * depth]\n  ]\n  return np.concatenate(xs, axis=3)", "output": "Split channels in 3 parts. Shifts 1st and 3rd sections to left/right.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_thing_shadow(self, **kwargs):\n        \n        \"\"\"\n        thing_name = self._get_required_parameter('thingName', **kwargs)\n        payload = self._get_required_parameter('payload', **kwargs)\n\n        return self._shadow_op('update', thing_name, payload)", "output": "r\"\"\"\n        Updates the thing shadow for the specified thing.\n\n        :Keyword Arguments:\n            * *thingName* (``string``) --\n              [REQUIRED]\n              The name of the thing.\n            * *payload* (``bytes or seekable file-like object``) --\n              [REQUIRED]\n              The state information, in JSON format.\n\n        :returns: (``dict``) --\n        The output from the UpdateThingShadow operation\n            * *payload* (``bytes``) --\n              The state information, in JSON format.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def refresh(self):\r\n        \"\"\"\"\"\"\r\n        self._update_id_list()\r\n        for _id in self.history[:]:\r\n            if _id not in self.id_list:\r\n                self.history.remove(_id)", "output": "Remove editors that are not longer open.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def continuous_future(self,\n                          root_symbol_str,\n                          offset=0,\n                          roll='volume',\n                          adjustment='mul'):\n        \"\"\"\n        \"\"\"\n        return self.asset_finder.create_continuous_future(\n            root_symbol_str,\n            offset,\n            roll,\n            adjustment,\n        )", "output": "Create a specifier for a continuous contract.\n\n        Parameters\n        ----------\n        root_symbol_str : str\n            The root symbol for the future chain.\n\n        offset : int, optional\n            The distance from the primary contract. Default is 0.\n\n        roll_style : str, optional\n            How rolls are determined. Default is 'volume'.\n\n        adjustment : str, optional\n            Method for adjusting lookback prices between rolls. Options are\n            'mul', 'add', and None. Default is 'mul'.\n\n        Returns\n        -------\n        continuous_future : ContinuousFuture\n            The continuous future specifier.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pow(self, other, axis=\"columns\", level=None, fill_value=None):\r\n        \"\"\"\r\n        \"\"\"\r\n        return self._binary_op(\r\n            \"pow\", other, axis=axis, level=level, fill_value=fill_value\r\n        )", "output": "Pow this DataFrame against another DataFrame/Series/scalar.\r\n\r\n        Args:\r\n            other: The object to use to apply the pow against this.\r\n            axis: The axis to pow over.\r\n            level: The Multilevel index level to apply pow over.\r\n            fill_value: The value to fill NaNs with.\r\n\r\n        Returns:\r\n            A new DataFrame with the Pow applied.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema(self, schema):\n        \"\"\"\n        \"\"\"\n        from pyspark.sql import SparkSession\n        spark = SparkSession.builder.getOrCreate()\n        if isinstance(schema, StructType):\n            jschema = spark._jsparkSession.parseDataType(schema.json())\n            self._jreader = self._jreader.schema(jschema)\n        elif isinstance(schema, basestring):\n            self._jreader = self._jreader.schema(schema)\n        else:\n            raise TypeError(\"schema should be StructType or string\")\n        return self", "output": "Specifies the input schema.\n\n        Some data sources (e.g. JSON) can infer the input schema automatically from data.\n        By specifying the schema here, the underlying data source can skip the schema\n        inference step, and thus speed up data loading.\n\n        :param schema: a :class:`pyspark.sql.types.StructType` object or a DDL-formatted string\n                       (For example ``col0 INT, col1 DOUBLE``).\n\n        >>> s = spark.read.schema(\"col0 INT, col1 DOUBLE\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _blobs_page_start(iterator, page, response):\n    \"\"\"\n    \"\"\"\n    page.prefixes = tuple(response.get(\"prefixes\", ()))\n    iterator.prefixes.update(page.prefixes)", "output": "Grab prefixes after a :class:`~google.cloud.iterator.Page` started.\n\n    :type iterator: :class:`~google.api_core.page_iterator.Iterator`\n    :param iterator: The iterator that is currently in use.\n\n    :type page: :class:`~google.cloud.api.core.page_iterator.Page`\n    :param page: The page that was just created.\n\n    :type response: dict\n    :param response: The JSON API response for a page of blobs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_api_repr(cls, resource, client):\n        \"\"\"\n        \"\"\"\n        job_id, config_resource = cls._get_resource_config(resource)\n        config = CopyJobConfig.from_api_repr(config_resource)\n        # Copy required fields to the job.\n        copy_resource = config_resource[\"copy\"]\n        destination = TableReference.from_api_repr(copy_resource[\"destinationTable\"])\n        sources = []\n        source_configs = copy_resource.get(\"sourceTables\")\n        if source_configs is None:\n            single = copy_resource.get(\"sourceTable\")\n            if single is None:\n                raise KeyError(\"Resource missing 'sourceTables' / 'sourceTable'\")\n            source_configs = [single]\n        for source_config in source_configs:\n            table_ref = TableReference.from_api_repr(source_config)\n            sources.append(table_ref)\n        job = cls(job_id, sources, destination, client=client, job_config=config)\n        job._set_properties(resource)\n        return job", "output": "Factory:  construct a job given its API representation\n\n        .. note:\n\n           This method assumes that the project found in the resource matches\n           the client's project.\n\n        :type resource: dict\n        :param resource: dataset job representation returned from the API\n\n        :type client: :class:`google.cloud.bigquery.client.Client`\n        :param client: Client which holds credentials and project\n                       configuration for the dataset.\n\n        :rtype: :class:`google.cloud.bigquery.job.CopyJob`\n        :returns: Job parsed from ``resource``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setIfMissing(self, key, value):\n        \"\"\"\"\"\"\n        if self.get(key) is None:\n            self.set(key, value)\n        return self", "output": "Set a configuration property, if not already set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_all(recommended=False, restart=True):\n    '''\n    \n    '''\n    to_update = _get_available(recommended, restart)\n\n    if not to_update:\n        return {}\n\n    for _update in to_update:\n        cmd = ['softwareupdate', '--install', _update]\n        salt.utils.mac_utils.execute_return_success(cmd)\n\n    ret = {}\n    updates_left = _get_available()\n\n    for _update in to_update:\n        ret[_update] = True if _update not in updates_left else False\n\n    return ret", "output": "Install all available updates. Returns a dictionary containing the name\n    of the update and the status of its installation.\n\n    :param bool recommended: If set to True, only install the recommended\n        updates. If set to False (default) all updates are installed.\n\n    :param bool restart: Set this to False if you do not want to install updates\n        that require a restart. Default is True\n\n    :return: A dictionary containing the updates that were installed and the\n        status of its installation. If no updates were installed an empty\n        dictionary is returned.\n\n    :rtype: dict\n\n    CLI Example:\n\n    .. code-block:: bash\n\n       salt '*' softwareupdate.update_all", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def link(src, path):\n    '''\n    \n    '''\n    src = os.path.expanduser(src)\n\n    if not os.path.isabs(src):\n        raise SaltInvocationError('File path must be absolute.')\n\n    try:\n        os.link(src, path)\n        return True\n    except (OSError, IOError):\n        raise CommandExecutionError('Could not create \\'{0}\\''.format(path))\n    return False", "output": ".. versionadded:: 2014.1.0\n\n    Create a hard link to a file\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' file.link /path/to/file /path/to/link", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def append(self, key, _item):  # type: (Union[Key, str], Any) -> Table\n        \"\"\"\n        \n        \"\"\"\n        if not isinstance(_item, Item):\n            _item = item(_item)\n\n        self._value.append(key, _item)\n\n        if isinstance(key, Key):\n            key = key.key\n\n        if key is not None:\n            super(Table, self).__setitem__(key, _item)\n\n        m = re.match(\"(?s)^[^ ]*([ ]+).*$\", self._trivia.indent)\n        if not m:\n            return self\n\n        indent = m.group(1)\n\n        if not isinstance(_item, Whitespace):\n            m = re.match(\"(?s)^([^ ]*)(.*)$\", _item.trivia.indent)\n            if not m:\n                _item.trivia.indent = indent\n            else:\n                _item.trivia.indent = m.group(1) + indent + m.group(2)\n\n        return self", "output": "Appends a (key, item) to the table.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_principal(name, enctypes=None):\n    '''\n    \n    '''\n    ret = {}\n\n    krb_cmd = 'addprinc -randkey'\n\n    if enctypes:\n        krb_cmd += ' -e {0}'.format(enctypes)\n\n    krb_cmd += ' {0}'.format(name)\n\n    cmd = __execute_kadmin(krb_cmd)\n\n    if cmd['retcode'] != 0 or cmd['stderr']:\n        if not cmd['stderr'].splitlines()[-1].startswith('WARNING:'):\n            ret['comment'] = cmd['stderr'].splitlines()[-1]\n            ret['result'] = False\n\n            return ret\n\n    return True", "output": "Create Principal\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'kdc.example.com' kerberos.create_principal host/example.com", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _load_params(params, logger=logging):\n    \"\"\"\n    \"\"\"\n    if isinstance(params, str):\n        cur_path = os.path.dirname(os.path.realpath(__file__))\n        param_file_path = os.path.join(cur_path, params)\n        logger.info('Loading params from file %s' % param_file_path)\n        save_dict = nd_load(param_file_path)\n        arg_params = {}\n        aux_params = {}\n        for k, v in save_dict.items():\n            tp, name = k.split(':', 1)\n            if tp == 'arg':\n                arg_params[name] = v\n            if tp == 'aux':\n                aux_params[name] = v\n        return arg_params, aux_params\n    elif isinstance(params, (tuple, list)) and len(params) == 2:\n        return params[0], params[1]\n    else:\n        raise ValueError('Unsupported params provided. Must be either a path to the param file or'\n                         ' a pair of dictionaries representing arg_params and aux_params')", "output": "Given a str as a path to the .params file or a pair of params,\n    returns two dictionaries representing arg_params and aux_params.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(self):\n        \"\"\n        if not self.removed:\n            self.hook.remove()\n            self.removed=True", "output": "Remove the hook from the model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shuffle_step(entries, step):\n    '''\n    \n    '''\n    answer = []\n    for i in range(0, len(entries), step):\n        sub = entries[i:i+step]\n        shuffle(sub)\n        answer += sub\n    return answer", "output": "Shuffle the step", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformerpp_base_8l_8h_big_cond_dr03_dan():\n  \"\"\"\"\"\"\n  hparams = imagetransformerpp_sep_channels_8l_8h()\n  hparams.hidden_size = 512\n  hparams.num_heads = 8\n  hparams.filter_size = 2048\n  hparams.batch_size = 4\n  hparams.max_length = 3075\n  hparams.layer_prepostprocess_dropout = 0.3\n  hparams.layer_preprocess_sequence = \"none\"\n  hparams.layer_postprocess_sequence = \"dan\"\n  hparams.summarize_grads = True\n  hparams.learning_rate = 0.01\n  return hparams", "output": "big 1d model for conditional image generation.2.99 on cifar10.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _enum_elements(name, server=None):\n    '''\n    \n    '''\n    elements = []\n    data = _api_get(name, server)\n\n    if any(data['extraProperties']['childResources']):\n        for element in data['extraProperties']['childResources']:\n            elements.append(element)\n        return elements\n    return None", "output": "Enum elements", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def config(_config=None, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    if _config is None:\n        _config = {}\n    _config.update(kwargs)\n\n    def wrapper(func):\n        func._config = _config\n        return func\n    return wrapper", "output": "A decorator for setting the default kwargs of `BaseHandler.crawl`.\n    Any self.crawl with this callback will use this config.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample(path, start, length):\n    \"\"\"\n    \n    \"\"\"\n    # initialize vocabulary and sequence length\n    param.seq_len = 1\n    ds = CharRNNData(param.corpus, 100000)\n\n    pred = OfflinePredictor(PredictConfig(\n        model=Model(),\n        session_init=SaverRestore(path),\n        input_names=['input', 'c0', 'h0', 'c1', 'h1'],\n        output_names=['prob', 'last_state']))\n\n    # feed the starting sentence\n    initial = np.zeros((1, param.rnn_size))\n    for c in start[:-1]:\n        x = np.array([[ds.char2idx[c]]], dtype='int32')\n        _, state = pred(x, initial, initial, initial, initial)\n\n    def pick(prob):\n        t = np.cumsum(prob)\n        s = np.sum(prob)\n        return(int(np.searchsorted(t, np.random.rand(1) * s)))\n\n    # generate more\n    ret = start\n    c = start[-1]\n    for k in range(length):\n        x = np.array([[ds.char2idx[c]]], dtype='int32')\n        prob, state = pred(x, state[0, 0], state[0, 1], state[1, 0], state[1, 1])\n        c = ds.chars[pick(prob[0])]\n        ret += c\n    print(ret)", "output": ":param path: path to the model\n    :param start: a `str`. the starting characters\n    :param length: a `int`. the length of text to generate", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_feature(value):\n  \"\"\"\"\"\"\n  if isinstance(value, FeatureConnector):\n    return value\n  elif utils.is_dtype(value):  # tf.int32, tf.string,...\n    return Tensor(shape=(), dtype=tf.as_dtype(value))\n  elif isinstance(value, dict):\n    return FeaturesDict(value)\n  else:\n    raise ValueError('Feature not supported: {}'.format(value))", "output": "Convert the given value to Feature if necessary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_multi(self, entities):\n        \"\"\"\n        \"\"\"\n        if isinstance(entities, Entity):\n            raise ValueError(\"Pass a sequence of entities\")\n\n        if not entities:\n            return\n\n        current = self.current_batch\n        in_batch = current is not None\n\n        if not in_batch:\n            current = self.batch()\n            current.begin()\n\n        for entity in entities:\n            current.put(entity)\n\n        if not in_batch:\n            current.commit()", "output": "Save entities in the Cloud Datastore.\n\n        :type entities: list of :class:`google.cloud.datastore.entity.Entity`\n        :param entities: The entities to be saved to the datastore.\n\n        :raises: :class:`ValueError` if ``entities`` is a single entity.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_coeffs(orig_pts:Points, targ_pts:Points)->Tensor:\n    \"\"\n    matrix = []\n    #The equations we'll need to solve.\n    for p1, p2 in zip(targ_pts, orig_pts):\n        matrix.append([p1[0], p1[1], 1, 0, 0, 0, -p2[0]*p1[0], -p2[0]*p1[1]])\n        matrix.append([0, 0, 0, p1[0], p1[1], 1, -p2[1]*p1[0], -p2[1]*p1[1]])\n\n    A = FloatTensor(matrix)\n    B = FloatTensor(orig_pts).view(8, 1)\n    #The 8 scalars we seek are solution of AX = B\n    return _solve_func(B,A)[0][:,0]", "output": "Find 8 coeff mentioned [here](https://web.archive.org/web/20150222120106/xenia.media.mit.edu/~cwren/interpolator/).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sorted(self, wantdirs=False):\n        \"\"\"\n        \n        \"\"\"\n\n        def add_dir(dirs, d):\n            dirs.add(d)\n            logger.debug('add_dir added %s', d)\n            if d != self.base:\n                parent, _ = os.path.split(d)\n                assert parent not in ('', '/')\n                add_dir(dirs, parent)\n\n        result = set(self.files)    # make a copy!\n        if wantdirs:\n            dirs = set()\n            for f in result:\n                add_dir(dirs, os.path.dirname(f))\n            result |= dirs\n        return [os.path.join(*path_tuple) for path_tuple in\n                sorted(os.path.split(path) for path in result)]", "output": "Return sorted files in directory order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_policy(policyName, policyDocument,\n            region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        if not isinstance(policyDocument, string_types):\n            policyDocument = salt.utils.json.dumps(policyDocument)\n        policy = conn.create_policy(policyName=policyName,\n                                    policyDocument=policyDocument)\n        if policy:\n            log.info('The newly created policy version is %s', policy['policyVersionId'])\n\n            return {'created': True, 'versionId': policy['policyVersionId']}\n        else:\n            log.warning('Policy was not created')\n            return {'created': False}\n    except ClientError as e:\n        return {'created': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Given a valid config, create a policy.\n\n    Returns {created: true} if the policy was created and returns\n    {created: False} if the policy was not created.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.create_policy my_policy \\\\\n              '{\"Version\":\"2015-12-12\",\\\\\n              \"Statement\":[{\"Effect\":\"Allow\",\\\\\n                            \"Action\":[\"iot:Publish\"],\\\\\n                            \"Resource\":[\"arn:::::topic/foo/bar\"]}]}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _SetPath(self, path):\n    \"\"\"\n    \"\"\"\n    old_path = self._path\n    if old_path and not io_wrapper.IsCloudPath(old_path):\n      try:\n        # We're done with the path, so store its size.\n        size = tf.io.gfile.stat(old_path).length\n        logger.debug('Setting latest size of %s to %d', old_path, size)\n        self._finalized_sizes[old_path] = size\n      except tf.errors.OpError as e:\n        logger.error('Unable to get size of %s: %s', old_path, e)\n\n    self._path = path\n    self._loader = self._loader_factory(path)", "output": "Sets the current path to watch for new events.\n\n    This also records the size of the old path, if any. If the size can't be\n    found, an error is logged.\n\n    Args:\n      path: The full path of the file to watch.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def construct_error_message(driver_id, error_type, message, timestamp):\n    \"\"\"\n    \"\"\"\n    builder = flatbuffers.Builder(0)\n    driver_offset = builder.CreateString(driver_id.binary())\n    error_type_offset = builder.CreateString(error_type)\n    message_offset = builder.CreateString(message)\n\n    ray.core.generated.ErrorTableData.ErrorTableDataStart(builder)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddDriverId(\n        builder, driver_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddType(\n        builder, error_type_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddErrorMessage(\n        builder, message_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddTimestamp(\n        builder, timestamp)\n    error_data_offset = ray.core.generated.ErrorTableData.ErrorTableDataEnd(\n        builder)\n    builder.Finish(error_data_offset)\n\n    return bytes(builder.Output())", "output": "Construct a serialized ErrorTableData object.\n\n    Args:\n        driver_id: The ID of the driver that the error should go to. If this is\n            nil, then the error will go to all drivers.\n        error_type: The type of the error.\n        message: The error message.\n        timestamp: The time of the error.\n\n    Returns:\n        The serialized object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_layer_converter_fn(layer, add_custom_layers = False):\n    \"\"\"\n    \"\"\"\n    layer_type = type(layer)\n    if layer_type in _KERAS_LAYER_REGISTRY:\n        convert_func = _KERAS_LAYER_REGISTRY[layer_type]\n        if convert_func is _layers2.convert_activation:\n            act_name = _layers2._get_activation_name_from_keras_layer(layer)\n            if act_name == 'CUSTOM':\n                return None\n        return convert_func\n    elif add_custom_layers:\n        return None\n    else:\n        raise TypeError(\"Keras layer of type %s is not supported.\" % type(layer))", "output": "Get the right converter function for Keras", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_timestamp_field(dataset_expr, deltas, checkpoints):\n    \"\"\"\n    \"\"\"\n    measure = dataset_expr.dshape.measure\n    if TS_FIELD_NAME not in measure.names:\n        dataset_expr = bz.transform(\n            dataset_expr,\n            **{TS_FIELD_NAME: dataset_expr[AD_FIELD_NAME]}\n        )\n        deltas = _ad_as_ts(deltas)\n        checkpoints = _ad_as_ts(checkpoints)\n    else:\n        _check_datetime_field(TS_FIELD_NAME, measure)\n\n    return dataset_expr, deltas, checkpoints", "output": "Verify that the baseline and deltas expressions have a timestamp field.\n\n    If there is not a ``TS_FIELD_NAME`` on either of the expressions, it will\n    be copied from the ``AD_FIELD_NAME``. If one is provided, then we will\n    verify that it is the correct dshape.\n\n    Parameters\n    ----------\n    dataset_expr : Expr\n        The baseline expression.\n    deltas : Expr or None\n        The deltas expression if any was provided.\n    checkpoints : Expr or None\n        The checkpoints expression if any was provided.\n\n    Returns\n    -------\n    dataset_expr, deltas : Expr\n        The new baseline and deltas expressions to use.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def evaluate(data_loader):\n    \"\"\"\n    \"\"\"\n    translation_out = []\n    all_inst_ids = []\n    avg_loss_denom = 0\n    avg_loss = 0.0\n    for _, (src_seq, tgt_seq, src_valid_length, tgt_valid_length, inst_ids) \\\n            in enumerate(data_loader):\n        src_seq = src_seq.as_in_context(ctx)\n        tgt_seq = tgt_seq.as_in_context(ctx)\n        src_valid_length = src_valid_length.as_in_context(ctx)\n        tgt_valid_length = tgt_valid_length.as_in_context(ctx)\n        # Calculating Loss\n        out, _ = model(src_seq, tgt_seq[:, :-1], src_valid_length, tgt_valid_length - 1)\n        loss = loss_function(out, tgt_seq[:, 1:], tgt_valid_length - 1).mean().asscalar()\n        all_inst_ids.extend(inst_ids.asnumpy().astype(np.int32).tolist())\n        avg_loss += loss * (tgt_seq.shape[1] - 1)\n        avg_loss_denom += (tgt_seq.shape[1] - 1)\n        # Translate\n        samples, _, sample_valid_length =\\\n            translator.translate(src_seq=src_seq, src_valid_length=src_valid_length)\n        max_score_sample = samples[:, 0, :].asnumpy()\n        sample_valid_length = sample_valid_length[:, 0].asnumpy()\n        for i in range(max_score_sample.shape[0]):\n            translation_out.append(\n                [tgt_vocab.idx_to_token[ele] for ele in\n                 max_score_sample[i][1:(sample_valid_length[i] - 1)]])\n    avg_loss = avg_loss / avg_loss_denom\n    real_translation_out = [None for _ in range(len(all_inst_ids))]\n    for ind, sentence in zip(all_inst_ids, translation_out):\n        real_translation_out[ind] = sentence\n    return avg_loss, real_translation_out", "output": "Evaluate given the data loader\n\n    Parameters\n    ----------\n    data_loader : DataLoader\n\n    Returns\n    -------\n    avg_loss : float\n        Average loss\n    real_translation_out : list of list of str\n        The translation output", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_resources_vms(call=None, resFilter=None, includeConfig=True):\n    '''\n    \n    '''\n\n    timeoutTime = time.time() + 60\n    while True:\n        log.debug('Getting resource: vms.. (filter: %s)', resFilter)\n        resources = query('get', 'cluster/resources')\n        ret = {}\n        badResource = False\n        for resource in resources:\n            if 'type' in resource and resource['type'] in ['openvz', 'qemu',\n                                                           'lxc']:\n                try:\n                    name = resource['name']\n                except KeyError:\n                    badResource = True\n                    log.debug('No name in VM resource %s', repr(resource))\n                    break\n\n                ret[name] = resource\n\n                if includeConfig:\n                    # Requested to include the detailed configuration of a VM\n                    ret[name]['config'] = get_vmconfig(\n                        ret[name]['vmid'],\n                        ret[name]['node'],\n                        ret[name]['type']\n                    )\n\n        if time.time() > timeoutTime:\n            raise SaltCloudExecutionTimeout('FAILED to get the proxmox '\n                                            'resources vms')\n\n        # Carry on if there wasn't a bad resource return from Proxmox\n        if not badResource:\n            break\n\n        time.sleep(0.5)\n\n    if resFilter is not None:\n        log.debug('Filter given: %s, returning requested '\n                  'resource: nodes', resFilter)\n        return ret[resFilter]\n\n    log.debug('Filter not given: %s, returning all resource: nodes', ret)\n    return ret", "output": "Retrieve all VMs available on this environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f get_resources_vms my-proxmox-config", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def num_data(self):\n        \"\"\"\n        \"\"\"\n        if self.handle is not None:\n            ret = ctypes.c_int()\n            _safe_call(_LIB.LGBM_DatasetGetNumData(self.handle,\n                                                   ctypes.byref(ret)))\n            return ret.value\n        else:\n            raise LightGBMError(\"Cannot get num_data before construct dataset\")", "output": "Get the number of rows in the Dataset.\n\n        Returns\n        -------\n        number_of_rows : int\n            The number of rows in the Dataset.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def instr(str, substr):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.instr(_to_java_column(str), substr))", "output": "Locate the position of the first occurrence of substr column in the given string.\n    Returns null if either of the arguments are null.\n\n    .. note:: The position is not zero based, but 1 based index. Returns 0 if substr\n        could not be found in str.\n\n    >>> df = spark.createDataFrame([('abcd',)], ['s',])\n    >>> df.select(instr(df.s, 'b').alias('s')).collect()\n    [Row(s=2)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_data(self, minion):\n        '''\n        \n        '''\n        if isinstance(self.raw[minion], six.string_types):\n            return {'host': self.raw[minion]}\n        if isinstance(self.raw[minion], dict):\n            return self.raw[minion]\n        return False", "output": "Return the configured ip", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_list(user=None, password=None, host=None, port=None, database='admin', authdb=None):\n    '''\n    \n    '''\n    conn = _connect(user, password, host, port, authdb=authdb)\n    if not conn:\n        return 'Failed to connect to mongo database'\n\n    try:\n        log.info('Listing users')\n        mdb = pymongo.database.Database(conn, database)\n\n        output = []\n        mongodb_version = _version(mdb)\n\n        if _LooseVersion(mongodb_version) >= _LooseVersion('2.6'):\n            for user in mdb.command('usersInfo')['users']:\n                output.append(\n                    {'user': user['user'],\n                     'roles': user['roles']}\n                )\n        else:\n            for user in mdb.system.users.find():\n                output.append(\n                    {'user': user['user'],\n                     'readOnly': user.get('readOnly', 'None')}\n                )\n        return output\n\n    except pymongo.errors.PyMongoError as err:\n        log.error('Listing users failed with error: %s', err)\n        return six.text_type(err)", "output": "List users of a MongoDB database\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mongodb.user_list <user> <password> <host> <port> <database>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_summary_struct(self):\n        \"\"\"\n        \n        \"\"\"\n\n        model_fields = [\n            (\"Method\", 'method'),\n            (\"Number of distance components\", 'num_distance_components'),\n            (\"Number of examples\", 'num_examples'),\n            (\"Number of feature columns\", 'num_features'),\n            (\"Number of unpacked features\", 'num_unpacked_features'),\n            (\"Total training time (seconds)\", 'training_time')]\n\n        ball_tree_fields = [\n            (\"Tree depth\", 'tree_depth'),\n            (\"Leaf size\", 'leaf_size')]\n\n        lsh_fields = [\n            (\"Number of hash tables\", 'num_tables'),\n            (\"Number of projections per table\", 'num_projections_per_table')]\n\n        sections = [model_fields]\n        section_titles = ['Attributes']\n\n        if (self.method == 'ball_tree'):\n            sections.append(ball_tree_fields)\n            section_titles.append('Ball Tree Attributes')\n\n        if (self.method == 'lsh'):\n            sections.append(lsh_fields)\n            section_titles.append('LSH Attributes')\n\n        return (sections, section_titles)", "output": "Returns a structured description of the model, including (where\n        relevant) the schema of the training data, description of the training\n        data, training statistics, and model hyperparameters.\n\n        Returns\n        -------\n        sections : list (of list of tuples)\n            A list of summary sections.\n              Each section is a list.\n                Each item in a section list is a tuple of the form:\n                  ('<label>','<field>')\n        section_titles: list\n            A list of section titles.\n              The order matches that of the 'sections' object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(self, input):\n        \"\"\"\n        \n        \"\"\"\n        result = self._parseIso8601(input)\n        if not result:\n            result = self._parseSimple(input)\n        if result is not None:\n            return result\n        else:\n            raise ParameterException(\"Invalid time delta - could not parse %s\" % input)", "output": "Parses a time delta from the input.\n\n        See :py:class:`TimeDeltaParameter` for details on supported formats.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run_migrations_online():\n    \"\"\"\n\n    \"\"\"\n\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: https://alembic.sqlalchemy.org/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    engine = engine_from_config(config.get_section(config.config_ini_section),\n                                prefix='sqlalchemy.',\n                                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    kwargs = {}\n    if engine.name in ('sqlite', 'mysql'):\n        kwargs = {\n            'transaction_per_migration': True,\n            'transactional_ddl': True,\n        }\n    configure_args = current_app.extensions['migrate'].configure_args\n    if configure_args:\n        kwargs.update(configure_args)\n\n    context.configure(connection=connection,\n                      target_metadata=target_metadata,\n                      # compare_type=True,\n                      process_revision_directives=process_revision_directives,\n                      **kwargs)\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()", "output": "Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def resolve(self, host: str,\n                      port: int, family: int) -> List[Dict[str, Any]]:\n        \"\"\"\"\"\"", "output": "Return IP address for given hostname", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def center_crop(im, min_sz=None):\n    \"\"\"  \"\"\"\n    r,c,*_ = im.shape\n    if min_sz is None: min_sz = min(r,c)\n    start_r = math.ceil((r-min_sz)/2)\n    start_c = math.ceil((c-min_sz)/2)\n    return crop(im, start_r, start_c, min_sz)", "output": "Return a center crop of an image", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def global_lppooling(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    p_value = attrs.get('p', 2)\n    new_attrs = translation_utils._add_extra_attributes(attrs, {'global_pool': True,\n                                                                'kernel': (1, 1),\n                                                                'pool_type': 'lp',\n                                                                'p_value': p_value})\n    new_attrs = translation_utils._remove_attributes(new_attrs, ['p'])\n    return 'Pooling', new_attrs, inputs", "output": "Performs global lp pooling on the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_train_begin(self, **kwargs: Any) -> None:\n        \"\"\n        self.path.parent.mkdir(parents=True, exist_ok=True)      \n        self.file = self.path.open('a') if self.append else self.path.open('w')\n        self.file.write(','.join(self.learn.recorder.names[:(None if self.add_time else -1)]) + '\\n')", "output": "Prepare file with metric names.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def apply(\n        self,\n        func,\n        num_splits=None,\n        other_axis_partition=None,\n        maintain_partitioning=True,\n        **kwargs\n    ):\n        \"\"\"\n        \"\"\"\n        import dask\n\n        if num_splits is None:\n            num_splits = len(self.list_of_blocks)\n\n        if other_axis_partition is not None:\n            return [\n                DaskFramePartition(dask.delayed(obj))\n                for obj in deploy_func_between_two_axis_partitions(\n                    self.axis,\n                    func,\n                    num_splits,\n                    len(self.list_of_blocks),\n                    kwargs,\n                    *dask.compute(\n                        *tuple(\n                            self.list_of_blocks + other_axis_partition.list_of_blocks\n                        )\n                    )\n                )\n            ]\n\n        args = [self.axis, func, num_splits, kwargs, maintain_partitioning]\n\n        args.extend(dask.compute(*self.list_of_blocks))\n        return [\n            DaskFramePartition(dask.delayed(obj)) for obj in deploy_axis_func(*args)\n        ]", "output": "Applies func to the object.\n\n        See notes in Parent class about this method.\n\n        Args:\n            func: The function to apply.\n            num_splits: The number of times to split the result object.\n            other_axis_partition: Another `DaskFrameAxisPartition` object to apply to\n                func with this one.\n\n        Returns:\n            A list of `DaskFramePartition` objects.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _field_to_json(field, row_value):\n    \"\"\"\n    \"\"\"\n    if row_value is None:\n        return None\n\n    if field.mode == \"REPEATED\":\n        return _repeated_field_to_json(field, row_value)\n\n    if field.field_type == \"RECORD\":\n        return _record_field_to_json(field.fields, row_value)\n\n    return _scalar_field_to_json(field, row_value)", "output": "Convert a field into JSON-serializable values.\n\n    Args:\n        field ( \\\n            :class:`~google.cloud.bigquery.schema.SchemaField`, \\\n        ):\n            The SchemaField to use for type conversion and field name.\n\n        row_value (Union[ \\\n            Sequence[list], \\\n            any, \\\n        ]):\n            Row data to be inserted. If the SchemaField's mode is\n            REPEATED, assume this is a list. If not, the type\n            is inferred from the SchemaField's field_type.\n\n    Returns:\n        any:\n            A JSON-serializable object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, filepath):\n    \"\"\"\n    \"\"\"\n    # Simultaneously iterating through the different data sets in the hdf5\n    # file is >100x slower and the data set is small (26.7MB). Hence, we first\n    # load everything into memory before yielding the samples.\n    image_array, class_array, values_array = _load_data(filepath)\n    for image, classes, values in moves.zip(image_array, class_array,\n                                            values_array):\n      yield dict(\n          image=np.expand_dims(image, -1),\n          label_shape=classes[1],\n          label_scale=classes[2],\n          label_orientation=classes[3],\n          label_x_position=classes[4],\n          label_y_position=classes[5],\n          value_shape=values[1],\n          value_scale=values[2],\n          value_orientation=values[3],\n          value_x_position=values[4],\n          value_y_position=values[5])", "output": "Generates examples for the dSprites data set.\n\n    Args:\n      filepath: path to the dSprites hdf5 file.\n\n    Yields:\n      Dictionaries with images, latent classes, and latent values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy(self, existing_inputs):\n        \"\"\"\"\"\"\n        return PPOPolicyGraph(\n            self.observation_space,\n            self.action_space,\n            self.config,\n            existing_inputs=existing_inputs)", "output": "Creates a copy of self using existing input placeholders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sinks_api(self):\n        \"\"\"\n        \"\"\"\n        if self._sinks_api is None:\n            if self._use_grpc:\n                self._sinks_api = _gapic.make_sinks_api(self)\n            else:\n                self._sinks_api = JSONSinksAPI(self)\n        return self._sinks_api", "output": "Helper for log sink-related API calls.\n\n        See\n        https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.sinks", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _lazily_initialize(self):\n    \"\"\"\"\"\"\n    # TODO(nickfelt): remove on-demand imports once dep situation is fixed.\n    import tensorflow.compat.v1 as tf\n    with self._initialization_lock:\n      if self._session:\n        return\n      graph = tf.Graph()\n      with graph.as_default():\n        self.initialize_graph()\n      # Don't reserve GPU because libpng can't run on GPU.\n      config = tf.ConfigProto(device_count={'GPU': 0})\n      self._session = tf.Session(graph=graph, config=config)", "output": "Initialize the graph and session, if this has not yet been done.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag = request.args.get('tag')\n    run = request.args.get('run')\n    experiment = request.args.get('experiment')\n    output_format = request.args.get('format')\n    (body, mime_type) = self.scalars_impl(tag, run, experiment, output_format)\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag and single run, return array of ScalarEvents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def absent(name, **connection_args):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    #check if db exists and remove it\n    if __salt__['mysql.db_exists'](name, **connection_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = \\\n                'Database {0} is present and needs to be removed'.format(name)\n            return ret\n        if __salt__['mysql.db_remove'](name, **connection_args):\n            ret['comment'] = 'Database {0} has been removed'.format(name)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            err = _get_mysql_error()\n            if err is not None:\n                ret['comment'] = 'Unable to remove database {0} ' \\\n                                 '({1})'.format(name, err)\n                ret['result'] = False\n                return ret\n    else:\n        err = _get_mysql_error()\n        if err is not None:\n            ret['comment'] = err\n            ret['result'] = False\n            return ret\n\n    # fallback\n    ret['comment'] = ('Database {0} is not present, so it cannot be removed'\n            ).format(name)\n    return ret", "output": "Ensure that the named database is absent\n\n    name\n        The name of the database to remove", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def open_fileswitcher_dlg(self):\r\n        \"\"\"\"\"\"\r\n        if not self.tabs.count():\r\n            return\r\n        if self.fileswitcher_dlg is not None and \\\r\n          self.fileswitcher_dlg.is_visible:\r\n            self.fileswitcher_dlg.hide()\r\n            self.fileswitcher_dlg.is_visible = False\r\n            return\r\n        self.fileswitcher_dlg = FileSwitcher(self, self, self.tabs, self.data,\r\n                                             ima.icon('TextFileIcon'))\r\n        self.fileswitcher_dlg.sig_goto_file.connect(self.set_stack_index)\r\n        self.fileswitcher_dlg.show()\r\n        self.fileswitcher_dlg.is_visible = True", "output": "Open file list management dialog box", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_namespaced_replication_controller(self, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_namespaced_replication_controller_with_http_info(namespace, body, **kwargs)\n        else:\n            (data) = self.create_namespaced_replication_controller_with_http_info(namespace, body, **kwargs)\n            return data", "output": "create a ReplicationController\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_namespaced_replication_controller(namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param V1ReplicationController body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1ReplicationController\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table_spec_path(cls, project, location, dataset, table_spec):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/datasets/{dataset}/tableSpecs/{table_spec}\",\n            project=project,\n            location=location,\n            dataset=dataset,\n            table_spec=table_spec,\n        )", "output": "Return a fully-qualified table_spec string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install(app_id, enable=True):\n    '''\n    \n    '''\n    ge_el_capitan = True if _LooseVersion(__grains__['osrelease']) >= salt.utils.stringutils.to_str('10.11') else False\n    client_type = _client_type(app_id)\n    enable_str = '1' if enable else '0'\n    cmd = 'sqlite3 \"/Library/Application Support/com.apple.TCC/TCC.db\" ' \\\n          '\"INSERT or REPLACE INTO access VALUES(\\'kTCCServiceAccessibility\\',\\'{0}\\',{1},{2},1,NULL{3})\"'.\\\n        format(app_id, client_type, enable_str, ',NULL' if ge_el_capitan else '')\n\n    call = __salt__['cmd.run_all'](\n        cmd,\n        output_loglevel='debug',\n        python_shell=False\n    )\n    if call['retcode'] != 0:\n        comment = ''\n        if 'stderr' in call:\n            comment += call['stderr']\n        if 'stdout' in call:\n            comment += call['stdout']\n\n        raise CommandExecutionError('Error installing app: {0}'.format(comment))\n\n    return True", "output": "Install a bundle ID or command as being allowed to use\n    assistive access.\n\n    app_id\n        The bundle ID or command to install for assistive access.\n\n    enabled\n        Sets enabled or disabled status. Default is ``True``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' assistive.install /usr/bin/osascript\n        salt '*' assistive.install com.smileonmymac.textexpander", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    \n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)", "output": "Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _common_prefix(names):\n    \"\"\"\"\"\"\n    if not names:\n        return ''\n    prefix = names[0]\n    for name in names:\n        i = 0\n        while i < len(prefix) and i < len(name) and prefix[i] == name[i]:\n            i += 1\n        prefix = prefix[:i]\n    return prefix", "output": "Get the common prefix for all names", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def registerJavaUDAF(self, name, javaClassName):\n        \"\"\"\n        \"\"\"\n\n        self.sparkSession._jsparkSession.udf().registerJavaUDAF(name, javaClassName)", "output": "Register a Java user-defined aggregate function as a SQL function.\n\n        :param name: name of the user-defined aggregate function\n        :param javaClassName: fully qualified name of java class\n\n        >>> spark.udf.registerJavaUDAF(\"javaUDAF\", \"test.org.apache.spark.sql.MyDoubleAvg\")\n        >>> df = spark.createDataFrame([(1, \"a\"),(2, \"b\"), (3, \"a\")],[\"id\", \"name\"])\n        >>> df.createOrReplaceTempView(\"df\")\n        >>> spark.sql(\"SELECT name, javaUDAF(id) as avg from df group by name\").collect()\n        [Row(name=u'b', avg=102.0), Row(name=u'a', avg=102.0)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(prefix='', ruby=None, runas=None, gem_bin=None):\n    '''\n    \n    '''\n    cmd = ['list']\n    if prefix:\n        cmd.append(prefix)\n    stdout = _gem(cmd,\n                  ruby,\n                  gem_bin=gem_bin,\n                  runas=runas)\n    ret = {}\n    for line in salt.utils.itertools.split(stdout, '\\n'):\n        match = re.match(r'^([^ ]+) \\((.+)\\)', line)\n        if match:\n            gem = match.group(1)\n            versions = match.group(2).split(', ')\n            ret[gem] = versions\n    return ret", "output": "List locally installed gems.\n\n    :param prefix: string :\n        Only list gems when the name matches this prefix.\n    :param gem_bin: string : None\n        Full path to ``gem`` binary to use.\n    :param ruby: string : None\n        If RVM or rbenv are installed, the ruby version and gemset to use.\n        Ignored if ``gem_bin`` is specified.\n    :param runas: string : None\n        The user to run gem as.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' gem.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_rsa_key(path, passphrase):\n    '''\n    \n    '''\n    log.debug('salt.crypt.get_rsa_key: Loading private key')\n    return _get_key_with_evict(path, six.text_type(os.path.getmtime(path)), passphrase)", "output": "Read a private key off the disk.  Poor man's simple cache in effect here,\n    we memoize the result of calling _get_rsa_with_evict.  This means the first\n    time _get_key_with_evict is called with a path and a timestamp the result\n    is cached.  If the file (the private key) does not change then its\n    timestamp will not change and the next time the result is returned from the\n    cache.  If the key DOES change the next time _get_rsa_with_evict is called\n    it is called with different parameters and the fn is run fully to retrieve\n    the key from disk.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_df(self, data_file):\n        \"\"\"\n        \n        \"\"\"\n\n        crawler = QAHistoryFinancialCrawler()\n\n        with open(data_file, 'rb') as df:\n            data = crawler.parse(download_file=df)\n\n        return crawler.to_df(data)", "output": "\u8bfb\u53d6\u5386\u53f2\u8d22\u52a1\u6570\u636e\u6587\u4ef6\uff0c\u5e76\u8fd4\u56depandas\u7ed3\u679c \uff0c \u7c7b\u4f3cgpcw20171231.zip\u683c\u5f0f\uff0c\u5177\u4f53\u5b57\u6bb5\u542b\u4e49\u53c2\u8003\n\n        https://github.com/rainx/pytdx/issues/133\n\n        :param data_file: \u6570\u636e\u6587\u4ef6\u5730\u5740\uff0c \u6570\u636e\u6587\u4ef6\u7c7b\u578b\u53ef\u4ee5\u4e3a .zip \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u89e3\u538b\u540e\u7684 .dat\n        :return: pandas DataFrame\u683c\u5f0f\u7684\u5386\u53f2\u8d22\u52a1\u6570\u636e", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_render_wrapper(func):\n    \"\"\"\n    \"\"\"\n    global RENDER_WRAPPER\n    if not hasattr(func, \"__call__\"):\n        raise ValueError(Errors.E110.format(obj=type(func)))\n    RENDER_WRAPPER = func", "output": "Set an optional wrapper function that is called around the generated\n    HTML markup on displacy.render. This can be used to allow integration into\n    other platforms, similar to Jupyter Notebooks that require functions to be\n    called around the HTML. It can also be used to implement custom callbacks\n    on render, or to embed the visualization in a custom page.\n\n    func (callable): Function to call around markup before rendering it. Needs\n        to take one argument, the HTML markup, and should return the desired\n        output of displacy.render.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup(app):\n    '''  '''\n    app.add_autodocumenter(ColorDocumenter)\n    app.add_autodocumenter(EnumDocumenter)\n    app.add_autodocumenter(PropDocumenter)\n    app.add_autodocumenter(ModelDocumenter)", "output": "Required Sphinx extension setup function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_train_knns(self, data_activations):\n    \"\"\"\n    \n    \"\"\"\n    knns_ind = {}\n    knns_labels = {}\n\n    for layer in self.layers:\n      # Pre-process representations of data to normalize and remove training data mean.\n      data_activations_layer = copy.copy(data_activations[layer])\n      nb_data = data_activations_layer.shape[0]\n      data_activations_layer /= np.linalg.norm(\n          data_activations_layer, axis=1).reshape(-1, 1)\n      data_activations_layer -= self.centers[layer]\n\n      # Use FALCONN to find indices of nearest neighbors in training data.\n      knns_ind[layer] = np.zeros(\n          (data_activations_layer.shape[0], self.neighbors), dtype=np.int32)\n      knn_errors = 0\n      for i in range(data_activations_layer.shape[0]):\n        query_res = self.query_objects[layer].find_k_nearest_neighbors(\n            data_activations_layer[i], self.neighbors)\n        try:\n          knns_ind[layer][i, :] = query_res\n        except:  # pylint: disable-msg=W0702\n          knns_ind[layer][i, :len(query_res)] = query_res\n          knn_errors += knns_ind[layer].shape[1] - len(query_res)\n\n      # Find labels of neighbors found in the training data.\n      knns_labels[layer] = np.zeros((nb_data, self.neighbors), dtype=np.int32)\n      for data_id in range(nb_data):\n        knns_labels[layer][data_id, :] = self.train_labels[knns_ind[layer][data_id]]\n\n    return knns_ind, knns_labels", "output": "Given a data_activation dictionary that contains a np array with activations for each layer,\n    find the knns in the training data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_multi_precision(self, index, weight, grad, state):\n        \"\"\"\n        \"\"\"\n        if self.multi_precision and weight.dtype == numpy.float16:\n            # Wrapper for mixed precision\n            weight_master_copy = state[0]\n            original_state = state[1]\n            grad32 = grad.astype(numpy.float32)\n            self.update(index, weight_master_copy, grad32, original_state)\n            cast(weight_master_copy, dtype=weight.dtype, out=weight)\n        else:\n            self.update(index, weight, grad, state)", "output": "Updates the given parameter using the corresponding gradient and state.\n        Mixed precision version.\n\n        Parameters\n        ----------\n        index : int\n            The unique index of the parameter into the individual learning\n            rates and weight decays. Learning rates and weight decay\n            may be set via `set_lr_mult()` and `set_wd_mult()`, respectively.\n        weight : NDArray\n            The parameter to be updated.\n        grad : NDArray\n            The gradient of the objective with respect to this parameter.\n        state : any obj\n            The state returned by `create_state()`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _service_is_chkconfig(name):\n    '''\n    \n    '''\n    cmdline = '/sbin/chkconfig --list {0}'.format(name)\n    return __salt__['cmd.retcode'](cmdline, python_shell=False, ignore_retcode=True) == 0", "output": "Return True if the service is managed by chkconfig.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_categorical(y, nb_classes, num_classes=None):\n  \"\"\"\n  \n  \"\"\"\n  if num_classes is not None:\n    if nb_classes is not None:\n      raise ValueError(\"Should not specify both nb_classes and its deprecated \"\n                       \"alias, num_classes\")\n    warnings.warn(\"`num_classes` is deprecated. Switch to `nb_classes`.\"\n                  \" `num_classes` may be removed on or after 2019-04-23.\")\n    nb_classes = num_classes\n    del num_classes\n  y = np.array(y, dtype='int').ravel()\n  n = y.shape[0]\n  categorical = np.zeros((n, nb_classes))\n  categorical[np.arange(n), y] = 1\n  return categorical", "output": "Converts a class vector (integers) to binary class matrix.\n  This is adapted from the Keras function with the same name.\n  :param y: class vector to be converted into a matrix\n            (integers from 0 to nb_classes).\n  :param nb_classes: nb_classes: total number of classes.\n  :param num_classses: depricated version of nb_classes\n  :return: A binary matrix representation of the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _minion_event(self, load):\n        '''\n        \n        '''\n        if 'id' not in load:\n            return False\n        if 'events' not in load and ('tag' not in load or 'data' not in load):\n            return False\n        if 'events' in load:\n            for event in load['events']:\n                if 'data' in event:\n                    event_data = event['data']\n                else:\n                    event_data = event\n                self.event.fire_event(event_data, event['tag'])  # old dup event\n                if load.get('pretag') is not None:\n                    self.event.fire_event(event_data, salt.utils.event.tagify(event['tag'], base=load['pretag']))\n        else:\n            tag = load['tag']\n            self.event.fire_event(load, tag)\n        return True", "output": "Receive an event from the minion and fire it on the master event\n        interface", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def seek(self, idx):\n        \"\"\"\"\"\"\n        assert not self.writable\n        self._check_pid(allow_reset=True)\n        pos = ctypes.c_size_t(self.idx[idx])\n        check_call(_LIB.MXRecordIOReaderSeek(self.handle, pos))", "output": "Sets the current read pointer position.\n\n        This function is internally called by `read_idx(idx)` to find the current\n        reader pointer position. It doesn't return anything.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _netstat_aix():\n    '''\n    \n    '''\n    ret = []\n    ## AIX 6.1 - 7.2, appears to ignore addr_family field contents\n    ## for addr_family in ('inet', 'inet6'):\n    for addr_family in ('inet',):\n        # Lookup connections\n        cmd = 'netstat -n -a -f {0} | tail -n +3'.format(addr_family)\n        out = __salt__['cmd.run'](cmd, python_shell=True)\n        for line in out.splitlines():\n            comps = line.split()\n            if len(comps) < 5:\n                continue\n\n            proto_seen = None\n            tcp_flag = True\n            if 'tcp' == comps[0] or 'tcp4' == comps[0]:\n                proto_seen = 'tcp'\n            elif 'tcp6' == comps[0]:\n                proto_seen = 'tcp6'\n            elif 'udp' == comps[0] or 'udp4' == comps[0]:\n                proto_seen = 'udp'\n                tcp_flag = False\n            elif 'udp6' == comps[0]:\n                proto_seen = 'udp6'\n                tcp_flag = False\n\n            if tcp_flag:\n                if len(comps) >= 6:\n                    ret.append({\n                        'proto': proto_seen,\n                        'recv-q': comps[1],\n                        'send-q': comps[2],\n                        'local-address': comps[3],\n                        'remote-address': comps[4],\n                        'state': comps[5]})\n            else:\n                if len(comps) >= 5:\n                    ret.append({\n                        'proto': proto_seen,\n                        'local-address': comps[3],\n                        'remote-address': comps[4]})\n    return ret", "output": "Return netstat information for SunOS flavors", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, num_examples, data_path, label_path):\n    \"\"\"\n    \"\"\"\n    images = _extract_mnist_images(data_path, num_examples)\n    labels = _extract_mnist_labels(label_path, num_examples)\n    data = list(zip(images, labels))\n\n    # Data is shuffled automatically to distribute classes uniformly.\n    for image, label in data:\n      yield {\n          \"image\": image,\n          \"label\": label,\n      }", "output": "Generate MNIST examples as dicts.\n\n    Args:\n      num_examples (int): The number of example.\n      data_path (str): Path to the data files\n      label_path (str): Path to the labels\n\n    Yields:\n      Generator yielding the next examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_role(username, role, **kwargs):\n    '''\n    \n    '''\n    role_line = 'username {0} role {1}'.format(username, role)\n    return config(role_line, **kwargs)", "output": "Assign role to username.\n\n    username\n        Username for role configuration\n\n    role\n        Configure role for username\n\n    no_save_config\n        If True, don't save configuration commands to startup configuration.\n        If False, save configuration to startup configuration.\n        Default: False\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd set_role username=daniel role=vdc-admin.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_levels(self, arcs):\n        \"\"\"\n        \"\"\"\n        levels = set(map(lambda arc: arc[\"end\"] - arc[\"start\"], arcs))\n        return sorted(list(levels))", "output": "Calculate available arc height \"levels\".\n        Used to calculate arrow heights dynamically and without wasting space.\n\n        args (list): Individual arcs and their start, end, direction and label.\n        RETURNS (list): Arc levels sorted from lowest to highest.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def network_interface_get(name, resource_group, **kwargs):\n    '''\n    \n\n    '''\n    netconn = __utils__['azurearm.get_client']('network', **kwargs)\n    try:\n        nic = netconn.network_interfaces.get(\n            network_interface_name=name,\n            resource_group_name=resource_group\n        )\n        result = nic.as_dict()\n    except CloudError as exc:\n        __utils__['azurearm.log_cloud_error']('network', str(exc), **kwargs)\n        result = {'error': str(exc)}\n\n    return result", "output": ".. versionadded:: 2019.2.0\n\n    Get details about a specific network interface.\n\n    :param name: The name of the network interface to query.\n\n    :param resource_group: The resource group name assigned to the\n        network interface.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call azurearm_network.network_interface_get test-iface0 testgroup", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_raw_trace(raw_trace):\n  \"\"\"\"\"\"\n  trace = trace_events_pb2.Trace()\n  trace.ParseFromString(raw_trace)\n  return ''.join(trace_events_json.TraceEventsJsonStream(trace))", "output": "Processes raw trace data and returns the UI data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_splits(self, assets, dt):\n        \"\"\"\n        \n        \"\"\"\n        if self._adjustment_reader is None or not assets:\n            return []\n\n        # convert dt to # of seconds since epoch, because that's what we use\n        # in the adjustments db\n        seconds = int(dt.value / 1e9)\n\n        splits = self._adjustment_reader.conn.execute(\n            \"SELECT sid, ratio FROM SPLITS WHERE effective_date = ?\",\n            (seconds,)).fetchall()\n\n        splits = [split for split in splits if split[0] in assets]\n        splits = [(self.asset_finder.retrieve_asset(split[0]), split[1])\n                  for split in splits]\n\n        return splits", "output": "Returns any splits for the given sids and the given dt.\n\n        Parameters\n        ----------\n        assets : container\n            Assets for which we want splits.\n        dt : pd.Timestamp\n            The date for which we are checking for splits. Note: this is\n            expected to be midnight UTC.\n\n        Returns\n        -------\n        splits : list[(asset, float)]\n            List of splits, where each split is a (asset, ratio) tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ToMicroseconds(self):\n    \"\"\"\"\"\"\n    micros = _RoundTowardZero(self.nanos, _NANOS_PER_MICROSECOND)\n    return self.seconds * _MICROS_PER_SECOND + micros", "output": "Converts a Duration to microseconds.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def under_variable_scope():\n    \"\"\"\n    \n\n    \"\"\"\n\n    def _impl(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            name = func.__name__\n            with tf.variable_scope(name):\n                return func(*args, **kwargs)\n        return wrapper\n    return _impl", "output": "Returns:\n        A decorator which makes the function happen under a variable scope,\n        which is named by the function itself.\n\n    Example:\n\n    .. code-block:: python\n\n        @under_variable_scope()\n        def mid_level(x):\n            with argscope(Conv2D, kernel_shape=3, nl=BNReLU):\n                x = Conv2D('conv1', x, 512, stride=1)\n                x = Conv2D('conv2', x, 256, stride=1)\n            return x", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clip_lower(self, threshold):\n        \"\"\"\n        \n        \"\"\"\n        with cython_context():\n            return SArray(_proxy=self.__proxy__.clip(threshold, float('nan')))", "output": "Create new SArray with all values clipped to the given lower bound. This\n        function can operate on numeric arrays, as well as vector arrays, in\n        which case each individual element in each vector is clipped. Throws an\n        exception if the SArray is empty or the types are non-numeric.\n\n        Parameters\n        ----------\n        threshold : float\n            The lower bound used to clip values.\n\n        Returns\n        -------\n        out : SArray\n\n        See Also\n        --------\n        clip, clip_upper\n\n        Examples\n        --------\n        >>> sa = turicreate.SArray([1,2,3])\n        >>> sa.clip_lower(2)\n        dtype: int\n        Rows: 3\n        [2, 2, 3]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_lenet():\n    \"\"\"\n    \"\"\"\n    data = mx.symbol.Variable('data')\n\n    # first conv\n    conv1 = mx.symbol.CaffeOp(data_0=data, num_weight=2,\n                              prototxt=\"layer{type:\\\"Convolution\\\" \"\n                                       \"convolution_param { num_output: 20 kernel_size: 5 stride: 1} }\")\n    act1 = mx.symbol.CaffeOp(data_0=conv1, prototxt=\"layer{type:\\\"TanH\\\"}\")\n    pool1 = mx.symbol.CaffeOp(data_0=act1,\n                              prototxt=\"layer{type:\\\"Pooling\\\" pooling_param { pool: MAX kernel_size: 2 stride: 2}}\")\n\n    # second conv\n    conv2 = mx.symbol.CaffeOp(data_0=pool1, num_weight=2,\n                              prototxt=\"layer{type:\\\"Convolution\\\" \"\n                                       \"convolution_param { num_output: 50 kernel_size: 5 stride: 1} }\")\n    act2 = mx.symbol.CaffeOp(data_0=conv2, prototxt=\"layer{type:\\\"TanH\\\"}\")\n    pool2 = mx.symbol.CaffeOp(data_0=act2,\n                              prototxt=\"layer{type:\\\"Pooling\\\" pooling_param { pool: MAX kernel_size: 2 stride: 2}}\")\n\n    fc1 = mx.symbol.CaffeOp(data_0=pool2, num_weight=2,\n                            prototxt=\"layer{type:\\\"InnerProduct\\\" inner_product_param{num_output: 500} }\")\n    act3 = mx.symbol.CaffeOp(data_0=fc1, prototxt=\"layer{type:\\\"TanH\\\"}\")\n\n    # second fullc\n    fc2 = mx.symbol.CaffeOp(data_0=act3, num_weight=2,\n                            prototxt=\"layer{type:\\\"InnerProduct\\\"inner_product_param{num_output: 10} }\")\n    if use_caffe_loss:\n        label = mx.symbol.Variable('softmax_label')\n        lenet = mx.symbol.CaffeLoss(data=fc2, label=label, grad_scale=1, name='softmax',\n                                    prototxt=\"layer{type:\\\"SoftmaxWithLoss\\\"}\")\n    else:\n        lenet = mx.symbol.SoftmaxOutput(data=fc2, name='softmax')\n    return lenet", "output": "LeCun, Yann, Leon Bottou, Yoshua Bengio, and Patrick\n    Haffner. \"Gradient-based learning applied to document recognition.\"\n    Proceedings of the IEEE (1998)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_max_position_size(self,\n                              asset=None,\n                              max_shares=None,\n                              max_notional=None,\n                              on_error='fail'):\n        \"\"\"\n        \"\"\"\n        control = MaxPositionSize(asset=asset,\n                                  max_shares=max_shares,\n                                  max_notional=max_notional,\n                                  on_error=on_error)\n        self.register_trading_control(control)", "output": "Set a limit on the number of shares and/or dollar value held for the\n        given sid. Limits are treated as absolute values and are enforced at\n        the time that the algo attempts to place an order for sid. This means\n        that it's possible to end up with more than the max number of shares\n        due to splits/dividends, and more than the max notional due to price\n        improvement.\n\n        If an algorithm attempts to place an order that would result in\n        increasing the absolute value of shares/dollar value exceeding one of\n        these limits, raise a TradingControlException.\n\n        Parameters\n        ----------\n        asset : Asset, optional\n            If provided, this sets the guard only on positions in the given\n            asset.\n        max_shares : int, optional\n            The maximum number of shares to hold for an asset.\n        max_notional : float, optional\n            The maximum value to hold for an asset.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load(fh, encoding=None, is_verbose=False):\n    \"\"\"\n    \"\"\"\n\n    try:\n        fh.seek(0)\n        if encoding is not None:\n            up = Unpickler(fh, encoding=encoding)\n        else:\n            up = Unpickler(fh)\n        up.is_verbose = is_verbose\n\n        return up.load()\n    except (ValueError, TypeError):\n        raise", "output": "load a pickle, with a provided encoding\n\n    if compat is True:\n       fake the old class hierarchy\n       if it works, then return the new type objects\n\n    Parameters\n    ----------\n    fh : a filelike object\n    encoding : an optional encoding\n    is_verbose : show exception output", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_all_packages(mirror=DEFAULT_MIRROR,\n                      cyg_arch='x86_64'):\n    '''\n    \n    '''\n    if 'cyg.all_packages' not in __context__:\n        __context__['cyg.all_packages'] = {}\n    if mirror not in __context__['cyg.all_packages']:\n        __context__['cyg.all_packages'][mirror] = []\n    if not __context__['cyg.all_packages'][mirror]:\n        pkg_source = '/'.join([mirror, cyg_arch, 'setup.bz2'])\n\n        file_data = _urlopen(pkg_source).read()\n        file_lines = bz2.decompress(file_data).decode('utf_8',\n                                                      errors='replace'\n                                                     ).splitlines()\n\n        packages = [re.search('^@ ([^ ]+)', line).group(1) for\n                    line in file_lines if re.match('^@ [^ ]+', line)]\n\n        __context__['cyg.all_packages'][mirror] = packages\n\n    return __context__['cyg.all_packages'][mirror]", "output": "Return the list of packages based on the mirror provided.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write(self, bytestring):\n        ''''''\n        with self._lock:\n            if self._closed:\n                raise IOError('Writer is closed')\n            self._byte_queue.put(bytestring)", "output": "Enqueue the given bytes to be written asychronously", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rest_put(url, data, timeout):\n    ''''''\n    try:\n        response = requests.put(url, headers={'Accept': 'application/json', 'Content-Type': 'application/json'},\\\n                                data=data, timeout=timeout)\n        return response\n    except Exception as e:\n        print('Get exception {0} when sending http put to url {1}'.format(str(e), url))\n        return None", "output": "Call rest put method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_google_images(path:PathOrStr, search_term:str, size:str='>400*300', n_images:int=10, format:str='jpg',\n                            max_workers:int=defaults.cpus, timeout:int=4) -> FilePathList:\n    \"\"\"\n    \n    \"\"\"\n    label_path = Path(path)/search_term\n    search_url = _search_url(search_term, size=size, format=format)\n    if n_images <= 100: img_tuples = _fetch_img_tuples(search_url, format=format, n_images=n_images)\n    else:               img_tuples = _fetch_img_tuples_webdriver(search_url, format=format, n_images=n_images)\n    downloaded_images = _download_images(label_path, img_tuples, max_workers=max_workers, timeout=timeout)\n    if len(downloaded_images) == 0: raise RuntimeError(f\"Couldn't download any images.\")\n    verify_images(label_path, max_workers=max_workers)\n    return get_image_files(label_path)", "output": "Search for `n_images` images on Google, matching `search_term` and `size` requirements,\n    download them into `path`/`search_term` and verify them, using `max_workers` threads.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bind(_self, **kwargs):\n        \"\"\"\n        \"\"\"\n        return Logger(\n            {**_self._extra, **kwargs},\n            _self._exception,\n            _self._record,\n            _self._lazy,\n            _self._ansi,\n            _self._raw,\n            _self._depth,\n        )", "output": "Bind attributes to the ``extra`` dict of each logged message record.\n\n        This is used to add custom context to each logging call.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the ``extra`` dict.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which sends record with the customized ``extra``\n            dict.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[ip]} - {message}\")\n        1\n        >>> class Server:\n        ...     def __init__(self, ip):\n        ...         self.ip = ip\n        ...         self.logger = logger.bind(ip=ip)\n        ...     def call(self, message):\n        ...         self.logger.info(message)\n        ...\n        >>> instance_1 = Server(\"192.168.0.200\")\n        >>> instance_2 = Server(\"127.0.0.1\")\n        >>> instance_1.call(\"First instance\")\n        192.168.0.200 - First instance\n        >>> instance_2.call(\"Second instance\")\n        127.0.0.1 - Second instance", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def spinner(\n    spinner_name=None,\n    start_text=None,\n    handler_map=None,\n    nospin=False,\n    write_to_stdout=True,\n):\n    \"\"\"\n    \"\"\"\n\n    from .spin import create_spinner\n\n    has_yaspin = None\n    try:\n        import yaspin\n    except ImportError:\n        has_yaspin = False\n        if not nospin:\n            raise RuntimeError(\n                \"Failed to import spinner! Reinstall vistir with command:\"\n                \" pip install --upgrade vistir[spinner]\"\n            )\n        else:\n            spinner_name = \"\"\n    else:\n        has_yaspin = True\n        spinner_name = \"\"\n    use_yaspin = (has_yaspin is False) or (nospin is True)\n    if has_yaspin is None or has_yaspin is True and not nospin:\n        use_yaspin = True\n    if start_text is None and use_yaspin is True:\n        start_text = \"Running...\"\n    with create_spinner(\n        spinner_name=spinner_name,\n        text=start_text,\n        handler_map=handler_map,\n        nospin=nospin,\n        use_yaspin=use_yaspin,\n        write_to_stdout=write_to_stdout,\n    ) as _spinner:\n        yield _spinner", "output": "Get a spinner object or a dummy spinner to wrap a context.\n\n    :param str spinner_name: A spinner type e.g. \"dots\" or \"bouncingBar\" (default: {\"bouncingBar\"})\n    :param str start_text: Text to start off the spinner with (default: {None})\n    :param dict handler_map: Handler map for signals to be handled gracefully (default: {None})\n    :param bool nospin: If true, use the dummy spinner (default: {False})\n    :param bool write_to_stdout: Writes to stdout if true, otherwise writes to stderr (default: True)\n    :return: A spinner object which can be manipulated while alive\n    :rtype: :class:`~vistir.spin.VistirSpinner`\n\n    Raises:\n        RuntimeError -- Raised if the spinner extra is not installed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ending_long_process(self, message=\"\"):\n        \"\"\"\n        \n        \"\"\"\n        QApplication.restoreOverrideCursor()\n        self.show_message(message, timeout=2000)\n        QApplication.processEvents()", "output": "Clear main window's status bar and restore mouse cursor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_availabilities(date):\n    \"\"\"\n    \n    \"\"\"\n    day_of_week = dateutil.parser.parse(date).weekday()\n    availabilities = []\n    available_probability = 0.3\n    if day_of_week == 0:\n        start_hour = 10\n        while start_hour <= 16:\n            if random.random() < available_probability:\n                # Add an availability window for the given hour, with duration determined by another random number.\n                appointment_type = get_random_int(1, 4)\n                if appointment_type == 1:\n                    availabilities.append('{}:00'.format(start_hour))\n                elif appointment_type == 2:\n                    availabilities.append('{}:30'.format(start_hour))\n                else:\n                    availabilities.append('{}:00'.format(start_hour))\n                    availabilities.append('{}:30'.format(start_hour))\n            start_hour += 1\n\n    if day_of_week == 2 or day_of_week == 4:\n        availabilities.append('10:00')\n        availabilities.append('16:00')\n        availabilities.append('16:30')\n\n    return availabilities", "output": "Helper function which in a full implementation would  feed into a backend API to provide query schedule availability.\n    The output of this function is an array of 30 minute periods of availability, expressed in ISO-8601 time format.\n\n    In order to enable quick demonstration of all possible conversation paths supported in this example, the function\n    returns a mixture of fixed and randomized results.\n\n    On Mondays, availability is randomized; otherwise there is no availability on Tuesday / Thursday and availability at\n    10:00 - 10:30 and 4:00 - 5:00 on Wednesday / Friday.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_event(event_file_name):\n    \"\"\"\n    \n    \"\"\"\n\n    if event_file_name == STDIN_FILE_NAME:\n        # If event is empty, listen to stdin for event data until EOF\n        LOG.info(\"Reading invoke payload from stdin (you can also pass it from file with --event)\")\n\n    # click.open_file knows to open stdin when filename is '-'. This is safer than manually opening streams, and\n    # accidentally closing a standard stream\n    with click.open_file(event_file_name, 'r') as fp:\n        return fp.read()", "output": "Read the event JSON data from the given file. If no file is provided, read the event from stdin.\n\n    :param string event_file_name: Path to event file, or '-' for stdin\n    :return string: Contents of the event file or stdin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_employee(emp_id, key=None, value=None, items=None):\n    '''\n    \n    '''\n    if items is None:\n        if key is None or value is None:\n            return {'Error': 'At least one key/value pair is required'}\n        items = {key: value}\n    elif isinstance(items, six.string_types):\n        items = salt.utils.yaml.safe_load(items)\n\n    xml_items = ''\n    for pair in items:\n        xml_items += '<field id=\"{0}\">{1}</field>'.format(pair, items[pair])\n    xml_items = '<employee>{0}</employee>'.format(xml_items)\n\n    status, result = _query(\n        action='employees',\n        command=emp_id,\n        data=xml_items,\n        method='POST',\n    )\n\n    return show_employee(emp_id, ','.join(items.keys()))", "output": "Update one or more items for this employee. Specifying an empty value will\n    clear it for that employee.\n\n    CLI Examples:\n\n        salt myminion bamboohr.update_employee 1138 nickname Curly\n        salt myminion bamboohr.update_employee 1138 nickname ''\n        salt myminion bamboohr.update_employee 1138 items='{\"nickname\": \"Curly\"}\n        salt myminion bamboohr.update_employee 1138 items='{\"nickname\": \"\"}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _dispatch(name, *args, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n\n        def outer(self, *args, **kwargs):\n            def f(x):\n                x = self._shallow_copy(x, groupby=self._groupby)\n                return getattr(x, name)(*args, **kwargs)\n            return self._groupby.apply(f)\n        outer.__name__ = name\n        return outer", "output": "Dispatch to apply.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_image(source_region, image_id, name, profile, description=None, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    libcloud_kwargs = salt.utils.args.clean_kwargs(**libcloud_kwargs)\n    image = conn.get_image(image_id, **libcloud_kwargs)\n    new_image = conn.copy_image(source_region, image, name,\n                                description=description, **libcloud_kwargs)\n    return _simple_image(new_image)", "output": "Copies an image from a source region to the current region.\n\n    :param source_region: Region to copy the node from.\n    :type source_region: ``str``\n\n    :param image_id: Image to copy.\n    :type image_id: ``str``\n\n    :param name: name for new image.\n    :type name: ``str``\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param description: description for new image.\n    :type name: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's copy_image method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_compute.copy_image us-east1 image1 'new image' profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _bytes_to_unicode(value):\n    \"\"\"\n    \"\"\"\n    result = value.decode(\"utf-8\") if isinstance(value, six.binary_type) else value\n    if isinstance(result, six.text_type):\n        return result\n    else:\n        raise ValueError(\"%r could not be converted to unicode\" % (value,))", "output": "Converts bytes to a unicode value, if necessary.\n\n    :type value: bytes\n    :param value: bytes value to attempt string conversion on.\n\n    :rtype: str\n    :returns: The original value converted to unicode (if bytes) or as passed\n              in if it started out as unicode.\n\n    :raises ValueError: if the value could not be converted to unicode.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ext_pillar(minion_id,\n               pillar,\n               *args,\n               **kwargs):\n    '''\n    \n    '''\n    return SQLite3ExtPillar().fetch(minion_id, pillar, *args, **kwargs)", "output": "Execute queries against SQLite3, merge and return as a dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_SU_save_stock_info_tushare(client=DATABASE):\n    '''\n        \n    '''\n    df = QATs.get_stock_basics()\n    print(\" Get stock info from tushare,stock count is %d\" % len(df))\n    coll = client.stock_info_tushare\n    client.drop_collection(coll)\n    json_data = json.loads(df.reset_index().to_json(orient='records'))\n    coll.insert(json_data)\n    print(\" Save data to stock_info_tushare collection\uff0c OK\")", "output": "\u83b7\u53d6 \u80a1\u7968\u7684 \u57fa\u672c\u4fe1\u606f\uff0c\u5305\u542b\u80a1\u7968\u7684\u5982\u4e0b\u4fe1\u606f\n\n        code,\u4ee3\u7801\n        name,\u540d\u79f0\n        industry,\u6240\u5c5e\u884c\u4e1a\n        area,\u5730\u533a\n        pe,\u5e02\u76c8\u7387\n        outstanding,\u6d41\u901a\u80a1\u672c(\u4ebf)\n        totals,\u603b\u80a1\u672c(\u4ebf)\n        totalAssets,\u603b\u8d44\u4ea7(\u4e07)\n        liquidAssets,\u6d41\u52a8\u8d44\u4ea7\n        fixedAssets,\u56fa\u5b9a\u8d44\u4ea7\n        reserved,\u516c\u79ef\u91d1\n        reservedPerShare,\u6bcf\u80a1\u516c\u79ef\u91d1\n        esp,\u6bcf\u80a1\u6536\u76ca\n        bvps,\u6bcf\u80a1\u51c0\u8d44\n        pb,\u5e02\u51c0\u7387\n        timeToMarket,\u4e0a\u5e02\u65e5\u671f\n        undp,\u672a\u5206\u5229\u6da6\n        perundp, \u6bcf\u80a1\u672a\u5206\u914d\n        rev,\u6536\u5165\u540c\u6bd4(%)\n        profit,\u5229\u6da6\u540c\u6bd4(%)\n        gpr,\u6bdb\u5229\u7387(%)\n        npr,\u51c0\u5229\u6da6\u7387(%)\n        holders,\u80a1\u4e1c\u4eba\u6570\n\n        add by tauruswang\n\n    \u5728\u547d\u4ee4\u884c\u5de5\u5177 quantaxis \u4e2d\u8f93\u5165 save stock_info_tushare \u4e2d\u7684\u547d\u4ee4\n    :param client:\n    :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_resource_reference(cls, ref_value):\n        \"\"\"\n        \n\n        \"\"\"\n        no_result = (None, None)\n\n        if not isinstance(ref_value, string_types):\n            return no_result\n\n        splits = ref_value.split(cls._resource_ref_separator, 1)\n\n        # Either there is no 'dot' (or) one of the values is empty string (Ex: when you split \"LogicalId.\")\n        if len(splits) != 2 or not all(splits):\n            return no_result\n\n        return splits[0], splits[1]", "output": "Splits a resource reference of structure \"LogicalId.Property\" and returns the \"LogicalId\" and \"Property\"\n        separately.\n\n        :param string ref_value: Input reference value which *may* contain the structure \"LogicalId.Property\"\n        :return string, string: Returns two values - logical_id, property. If the input does not contain the structure,\n            then both `logical_id` and property will be None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_rowcount(self, query_results):\n        \"\"\"\n        \"\"\"\n        total_rows = 0\n        num_dml_affected_rows = query_results.num_dml_affected_rows\n\n        if query_results.total_rows is not None and query_results.total_rows > 0:\n            total_rows = query_results.total_rows\n        if num_dml_affected_rows is not None and num_dml_affected_rows > 0:\n            total_rows = num_dml_affected_rows\n        self.rowcount = total_rows", "output": "Set the rowcount from query results.\n\n        Normally, this sets rowcount to the number of rows returned by the\n        query, but if it was a DML statement, it sets rowcount to the number\n        of modified rows.\n\n        :type query_results:\n            :class:`~google.cloud.bigquery.query._QueryResults`\n        :param query_results: results of a query", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_env_error_message(error, show_traceback, using_user_site):\n    \"\"\"\n    \"\"\"\n    parts = []\n\n    # Mention the error if we are not going to show a traceback\n    parts.append(\"Could not install packages due to an EnvironmentError\")\n    if not show_traceback:\n        parts.append(\": \")\n        parts.append(str(error))\n    else:\n        parts.append(\".\")\n\n    # Spilt the error indication from a helper message (if any)\n    parts[-1] += \"\\n\"\n\n    # Suggest useful actions to the user:\n    #  (1) using user site-packages or (2) verifying the permissions\n    if error.errno == errno.EACCES:\n        user_option_part = \"Consider using the `--user` option\"\n        permissions_part = \"Check the permissions\"\n\n        if not using_user_site:\n            parts.extend([\n                user_option_part, \" or \",\n                permissions_part.lower(),\n            ])\n        else:\n            parts.append(permissions_part)\n        parts.append(\".\\n\")\n\n    return \"\".join(parts).strip() + \"\\n\"", "output": "Format an error message for an EnvironmentError\n\n    It may occur anytime during the execution of the install command.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_aux_param(self, param_name, layer_index, blob_index):\n        \"\"\" \"\"\"\n        self.add_param('aux:%s' % param_name, layer_index, blob_index)", "output": "Add an aux param to .params file. Example: moving_mean in BatchNorm layer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_focus_client(self):\r\n        \"\"\"\"\"\"\r\n        widget = QApplication.focusWidget()\r\n        for client in self.get_clients():\r\n            if widget is client or widget is client.get_control():\r\n                return client", "output": "Return current client with focus, if any", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_defenses(self):\n    \"\"\"\"\"\"\n    print_header('PREPARING DEFENSE DATA')\n    # verify that defense data not written yet\n    if not self.ask_when_work_is_populated(self.defense_work):\n      return\n    self.defense_work = eval_lib.DefenseWorkPieces(\n        datastore_client=self.datastore_client)\n    # load results of attacks\n    self.submissions.init_from_datastore()\n    self.dataset_batches.init_from_datastore()\n    self.adv_batches.init_from_datastore()\n    self.attack_work.read_all_from_datastore()\n    # populate classification results\n    print_header('Initializing classification batches')\n    self.class_batches.init_from_adversarial_batches_write_to_datastore(\n        self.submissions, self.adv_batches)\n    if self.verbose:\n      print(self.class_batches)\n    # populate work pieces\n    print_header('Preparing defense work pieces')\n    self.defense_work.init_from_class_batches(\n        self.class_batches.data, num_shards=self.num_defense_shards)\n    self.defense_work.write_all_to_datastore()\n    if self.verbose:\n      print(self.defense_work)", "output": "Prepares all data needed for evaluation of defenses.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _pep440_version_cmp(pkg1, pkg2, ignore_epoch=False):\n    '''\n    \n    '''\n    normalize = lambda x: six.text_type(x).split('!', 1)[-1] \\\n        if ignore_epoch else six.text_type(x)\n    pkg1 = normalize(pkg1)\n    pkg2 = normalize(pkg2)\n\n    try:\n        if pkg_resources.parse_version(pkg1) < pkg_resources.parse_version(pkg2):\n            return -1\n        if pkg_resources.parse_version(pkg1) == pkg_resources.parse_version(pkg2):\n            return 0\n        if pkg_resources.parse_version(pkg1) > pkg_resources.parse_version(pkg2):\n            return 1\n    except Exception as exc:\n        log.exception(exc)\n    return None", "output": "Compares two version strings using pkg_resources.parse_version.\n    Return -1 if version1 < version2, 0 if version1 ==version2,\n    and 1 if version1 > version2. Return None if there was a problem\n    making the comparison.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_dvportgroup_out_shaping(pg_name, out_shaping, out_shaping_conf):\n    '''\n    \n    '''\n    log.trace('Building portgroup\\'s \\'%s\\' out shaping policy', pg_name)\n    if out_shaping_conf.get('average_bandwidth'):\n        out_shaping.averageBandwidth = vim.LongPolicy()\n        out_shaping.averageBandwidth.value = \\\n                out_shaping_conf['average_bandwidth']\n    if out_shaping_conf.get('burst_size'):\n        out_shaping.burstSize = vim.LongPolicy()\n        out_shaping.burstSize.value = out_shaping_conf['burst_size']\n    if 'enabled' in out_shaping_conf:\n        out_shaping.enabled = vim.BoolPolicy()\n        out_shaping.enabled.value = out_shaping_conf['enabled']\n    if out_shaping_conf.get('peak_bandwidth'):\n        out_shaping.peakBandwidth = vim.LongPolicy()\n        out_shaping.peakBandwidth.value = out_shaping_conf['peak_bandwidth']", "output": "Applies the values in out_shaping_conf to an out_shaping object\n\n    pg_name\n        The name of the portgroup\n\n    out_shaping\n        The vim.DVSTrafficShapingPolicy to apply the config to\n\n    out_shaping_conf\n        The out shaping config", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_file(self, path, tgt_env):\n        '''\n        \n        '''\n        tree = self.get_tree(tgt_env)\n        if not tree:\n            # Branch/tag/SHA not found in repo\n            return None, None, None\n        blob = None\n        depth = 0\n        while True:\n            depth += 1\n            if depth > SYMLINK_RECURSE_DEPTH:\n                blob = None\n                break\n            try:\n                file_blob = tree / path\n                if stat.S_ISLNK(file_blob.mode):\n                    # Path is a symlink. The blob data corresponding to\n                    # this path's object ID will be the target of the\n                    # symlink. Follow the symlink and set path to the\n                    # location indicated in the blob data.\n                    stream = six.StringIO()\n                    file_blob.stream_data(stream)\n                    stream.seek(0)\n                    link_tgt = stream.read()\n                    stream.close()\n                    path = salt.utils.path.join(\n                        os.path.dirname(path), link_tgt, use_posixpath=True)\n                else:\n                    blob = file_blob\n                    if isinstance(blob, git.Tree):\n                        # Path is a directory, not a file.\n                        blob = None\n                    break\n            except KeyError:\n                # File not found or repo_path points to a directory\n                blob = None\n                break\n        if isinstance(blob, git.Blob):\n            return blob, blob.hexsha, blob.mode\n        return None, None, None", "output": "Find the specified file in the specified environment", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def htmlAutoCloseTag(self, name, elem):\n        \"\"\" \"\"\"\n        ret = libxml2mod.htmlAutoCloseTag(self._o, name, elem)\n        return ret", "output": "The HTML DTD allows a tag to implicitly close other tags.\n          The list is kept in htmlStartClose array. This function\n          checks if the element or one of it's children would\n           autoclose the given tag.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main(args):\n  \"\"\"\n  \n  \"\"\"\n  print_in_box('Validating submission ' + args.submission_filename)\n  random.seed()\n  temp_dir = args.temp_dir\n  delete_temp_dir = False\n  if not temp_dir:\n    temp_dir = tempfile.mkdtemp()\n    logging.info('Created temporary directory: %s', temp_dir)\n    delete_temp_dir = True\n  validator = submission_validator_lib.SubmissionValidator(temp_dir,\n                                                           args.use_gpu)\n  if validator.validate_submission(args.submission_filename,\n                                   args.submission_type):\n    print_in_box('Submission is VALID!')\n  else:\n    print_in_box('Submission is INVALID, see log messages for details')\n  if delete_temp_dir:\n    logging.info('Deleting temporary directory: %s', temp_dir)\n    subprocess.call(['rm', '-rf', temp_dir])", "output": "Validates the submission.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def response_class(self, cls):\n        \"\"\"\n        \n        \"\"\"\n        s = self._clone()\n        s._response_class = cls\n        return s", "output": "Override the default wrapper used for the response.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wider_pre_dense(layer, n_add, weighted=True):\n    '''\n    '''\n    if not weighted:\n        return StubDense(layer.input_units, layer.units + n_add)\n\n    n_units2 = layer.units\n\n    teacher_w, teacher_b = layer.get_weights()\n    rand = np.random.randint(n_units2, size=n_add)\n    student_w = teacher_w.copy()\n    student_b = teacher_b.copy()\n\n    # target layer update (i)\n    for i in range(n_add):\n        teacher_index = rand[i]\n        new_weight = teacher_w[teacher_index, :]\n        new_weight = new_weight[np.newaxis, :]\n        student_w = np.concatenate((student_w, add_noise(new_weight, student_w)), axis=0)\n        student_b = np.append(student_b, add_noise(teacher_b[teacher_index], student_b))\n\n    new_pre_layer = StubDense(layer.input_units, n_units2 + n_add)\n    new_pre_layer.set_weights((student_w, student_b))\n\n    return new_pre_layer", "output": "wider previous dense layer.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_metadata(self, handler):\n        \"\"\"  \"\"\"\n        if self.meta == 'category':\n            new_metadata = self.metadata\n            cur_metadata = handler.read_metadata(self.cname)\n            if (new_metadata is not None and cur_metadata is not None and\n                    not array_equivalent(new_metadata, cur_metadata)):\n                raise ValueError(\"cannot append a categorical with \"\n                                 \"different categories to the existing\")", "output": "validate that kind=category does not change the categories", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shuffle_models(self, start_iteration=0, end_iteration=-1):\n        \"\"\"\n        \"\"\"\n        _safe_call(_LIB.LGBM_BoosterShuffleModels(\n            self.handle,\n            ctypes.c_int(start_iteration),\n            ctypes.c_int(end_iteration)))\n        return self", "output": "Shuffle models.\n\n        Parameters\n        ----------\n        start_iteration : int, optional (default=0)\n            The first iteration that will be shuffled.\n        end_iteration : int, optional (default=-1)\n            The last iteration that will be shuffled.\n            If <= 0, means the last available iteration.\n\n        Returns\n        -------\n        self : Booster\n            Booster with shuffled models.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter(self, func, dropna=True, *args, **kwargs):  # noqa\n        \"\"\"\n        \n        \"\"\"\n        if isinstance(func, str):\n            wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n        else:\n            wrapper = lambda x: func(x, *args, **kwargs)\n\n        # Interpret np.nan as False.\n        def true_and_notna(x, *args, **kwargs):\n            b = wrapper(x, *args, **kwargs)\n            return b and notna(b)\n\n        try:\n            indices = [self._get_index(name) for name, group in self\n                       if true_and_notna(group)]\n        except ValueError:\n            raise TypeError(\"the filter must return a boolean result\")\n        except TypeError:\n            raise TypeError(\"the filter must return a boolean result\")\n\n        filtered = self._apply_filter(indices, dropna)\n        return filtered", "output": "Return a copy of a Series excluding elements from groups that\n        do not satisfy the boolean criterion specified by func.\n\n        Parameters\n        ----------\n        func : function\n            To apply to each group. Should return True or False.\n        dropna : Drop groups that do not pass the filter. True by default;\n            if False, groups that evaluate False are filled with NaNs.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n        ...                           'foo', 'bar'],\n        ...                    'B' : [1, 2, 3, 4, 5, 6],\n        ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n        >>> grouped = df.groupby('A')\n        >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n        1    2\n        3    4\n        5    6\n        Name: B, dtype: int64\n\n        Returns\n        -------\n        filtered : Series", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_aliased_type(cls, other_base):\n        \"\"\"\n        \n        \"\"\"\n        docstring = dedent(\n            \"\"\"\n            A {t} that names another {t}.\n\n            Parameters\n            ----------\n            term : {t}\n            {{name}}\n            \"\"\"\n        ).format(t=other_base.__name__)\n\n        doc = format_docstring(\n            owner_name=other_base.__name__,\n            docstring=docstring,\n            formatters={'name': PIPELINE_ALIAS_NAME_DOC},\n        )\n\n        return type(\n            'Aliased' + other_base.__name__,\n            (cls, other_base),\n            {'__doc__': doc,\n             '__module__': other_base.__module__},\n        )", "output": "Factory for making Aliased{Filter,Factor,Classifier}.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def decode_base64(data: str) -> bytes:\n    \"\"\"\n    \"\"\"\n    missing_padding = len(data) % 4\n    if missing_padding != 0:\n        data += \"=\" * (4 - missing_padding)\n    return base64.decodebytes(data.encode(\"utf-8\"))", "output": "Decode base64, padding being optional.\n\n    :param data: Base64 data as an ASCII byte string\n    :returns: The decoded byte string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def avail_images(call=None):\n    '''\n    \n    '''\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The avail_images function must be called with '\n            '-f or --function, or with the --list-images option'\n        )\n\n    fetch = True\n    page = 1\n    ret = {}\n\n    while fetch:\n        items = query(method='images', command='?page=' + six.text_type(page) + '&per_page=200')\n\n        for image in items['images']:\n            ret[image['name']] = {}\n            for item in six.iterkeys(image):\n                ret[image['name']][item] = image[item]\n\n        page += 1\n        try:\n            fetch = 'next' in items['links']['pages']\n        except KeyError:\n            fetch = False\n\n    return ret", "output": "Return a list of the images that are on the provider", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def refresh(self, index=None):\r\n        \"\"\"\"\"\"\r\n        if index is None:\r\n            index = self.get_stack_index()\r\n        # Set current editor\r\n        if self.get_stack_count():\r\n            index = self.get_stack_index()\r\n            finfo = self.data[index]\r\n            editor = finfo.editor\r\n            editor.setFocus()\r\n            self._refresh_outlineexplorer(index, update=False)\r\n            self.__refresh_statusbar(index)\r\n            self.__refresh_readonly(index)\r\n            self.__check_file_status(index)\r\n            self.__modify_stack_title()\r\n            self.update_plugin_title.emit()\r\n        else:\r\n            editor = None\r\n        # Update the modification-state-dependent parameters\r\n        self.modification_changed()\r\n        # Update FindReplace binding\r\n        self.find_widget.set_editor(editor, refresh=False)", "output": "Refresh tabwidget", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mtf_image_transformer_cifar_4x():\n  \"\"\"\"\"\"\n  hparams = mtf_image_transformer_base_cifar()\n  hparams.mesh_shape = \"batch:32\"\n  hparams.layout = \"batch:batch\"\n  hparams.batch_size = 128\n  return hparams", "output": "Data parallel CIFAR parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resizeEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        if not self.isMaximized() and not self.fullscreen_flag:\r\n            self.window_size = self.size()\r\n        QMainWindow.resizeEvent(self, event)\r\n\r\n        # To be used by the tour to be able to resize\r\n        self.sig_resized.emit(event)", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_game(game_name, game_mode=\"NoFrameskip-v4\"):\n  \"\"\"\n  \"\"\"\n  if game_name not in ATARI_GAMES:\n    raise ValueError(\"Game %s not in ATARI_GAMES\" % game_name)\n  if game_mode not in ATARI_GAME_MODES:\n    raise ValueError(\"Unknown ATARI game mode: %s.\" % game_mode)\n  camel_game_name = misc_utils.snakecase_to_camelcase(game_name) + game_mode\n  # Create and register the Problem\n  cls = type(\"Gym%sRandom\" % camel_game_name,\n             (T2TGymEnv,), {\"base_env_name\": camel_game_name})\n  registry.register_problem(cls)", "output": "Create and register problems for the game.\n\n  Args:\n    game_name: str, one of the games in ATARI_GAMES, e.g. \"bank_heist\".\n    game_mode: the frame skip and sticky keys config.\n\n  Raises:\n    ValueError: if game_name or game_mode are wrong.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_tcp_line(line):\n    '''\n    \n    '''\n    ret = {}\n    comps = line.strip().split()\n    sl = comps[0].rstrip(':')\n    ret[sl] = {}\n    l_addr, l_port = comps[1].split(':')\n    r_addr, r_port = comps[2].split(':')\n    ret[sl]['local_addr'] = hex2ip(l_addr, True)\n    ret[sl]['local_port'] = int(l_port, 16)\n    ret[sl]['remote_addr'] = hex2ip(r_addr, True)\n    ret[sl]['remote_port'] = int(r_port, 16)\n    ret[sl]['state'] = int(comps[3], 16)\n    return ret", "output": "Parse a single line from the contents of /proc/net/tcp or /proc/net/tcp6", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def availability_set_delete(name, resource_group, **kwargs):\n    '''\n    \n\n    '''\n    result = False\n    compconn = __utils__['azurearm.get_client']('compute', **kwargs)\n    try:\n        compconn.availability_sets.delete(\n            resource_group_name=resource_group,\n            availability_set_name=name\n        )\n        result = True\n\n    except CloudError as exc:\n        __utils__['azurearm.log_cloud_error']('compute', str(exc), **kwargs)\n\n    return result", "output": ".. versionadded:: 2019.2.0\n\n    Delete an availability set.\n\n    :param name: The availability set to delete.\n\n    :param resource_group: The resource group name assigned to the\n        availability set.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call azurearm_compute.availability_set_delete testset testgroup", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_or_create_vocab(self, data_dir, tmp_dir, force_get=False):\n    \"\"\"\"\"\"\n    # We assume that vocab file is present in data_dir directory where the\n    # data generated will be stored.\n    vocab_filepath = os.path.join(data_dir, self.vocab_filename)\n    encoder = text_encoder.SubwordTextEncoder(vocab_filepath)\n    return encoder", "output": "Get vocab for distill problems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _read_requirements(metadata, extras):\n    \"\"\"\n    \"\"\"\n    extras = extras or ()\n    requirements = []\n    for entry in metadata.run_requires:\n        if isinstance(entry, six.text_type):\n            entry = {\"requires\": [entry]}\n            extra = None\n        else:\n            extra = entry.get(\"extra\")\n        if extra is not None and extra not in extras:\n            continue\n        for line in entry.get(\"requires\", []):\n            r = requirementslib.Requirement.from_line(line)\n            if r.markers:\n                contained = get_contained_extras(r.markers)\n                if (contained and not any(e in contained for e in extras)):\n                    continue\n                marker = get_without_extra(r.markers)\n                r.markers = str(marker) if marker else None\n                line = r.as_line(include_hashes=False)\n            requirements.append(line)\n    return requirements", "output": "Read wheel metadata to know what it depends on.\n\n    The `run_requires` attribute contains a list of dict or str specifying\n    requirements. For dicts, it may contain an \"extra\" key to specify these\n    requirements are for a specific extra. Unfortunately, not all fields are\n    specificed like this (I don't know why); some are specified with markers.\n    So we jump though these terrible hoops to know exactly what we need.\n\n    The extra extraction is not comprehensive. Tt assumes the marker is NEVER\n    something like `extra == \"foo\" and extra == \"bar\"`. I guess this never\n    makes sense anyway? Markers are just terrible.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QUANTILE(src_column, *args):\n    \"\"\"\n    \n    \"\"\"\n    if len(args) == 1:\n        quantiles = args[0]\n    else:\n        quantiles = list(args)\n\n    if not _is_non_string_iterable(quantiles):\n        quantiles = [quantiles]\n    query = \",\".join([str(i) for i in quantiles])\n    return (\"__builtin__quantile__[\" + query + \"]\", [src_column])", "output": "Builtin approximate quantile aggregator for groupby.\n    Accepts as an argument, one or more of a list of quantiles to query.\n    For instance:\n\n    To extract the median\n\n    >>> sf.groupby(\"user\",\n    ...   {'rating_quantiles':tc.aggregate.QUANTILE('rating', 0.5)})\n\n    To extract a few quantiles\n\n    >>> sf.groupby(\"user\",\n    ...   {'rating_quantiles':tc.aggregate.QUANTILE('rating', [0.25,0.5,0.75])})\n\n    Or equivalently\n\n    >>> sf.groupby(\"user\",\n    ...     {'rating_quantiles':tc.aggregate.QUANTILE('rating', 0.25,0.5,0.75)})\n\n    The returned quantiles are guaranteed to have 0.5% accuracy. That is to say,\n    if the requested quantile is 0.50, the resultant quantile value may be\n    between 0.495 and 0.505 of the true quantile.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def assertStructIsInline(self, obj):\n        \"\"\"\n        \n        \"\"\"\n\n        N.enforce_number(obj, N.UOffsetTFlags)\n        if obj != self.Offset():\n            msg = (\"flatbuffers: Tried to write a Struct at an Offset that \"\n                   \"is different from the current Offset of the Builder.\")\n            raise StructIsNotInlineError(msg)", "output": "Structs are always stored inline, so need to be created right\n        where they are used. You'll get this error if you created it\n        elsewhere.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RetrievePluginAsset(self, run, plugin_name, asset_name):\n    \"\"\"\n    \"\"\"\n    accumulator = self.GetAccumulator(run)\n    return accumulator.RetrievePluginAsset(plugin_name, asset_name)", "output": "Return the contents for a specific plugin asset from a run.\n\n    Args:\n      run: The string name of the run.\n      plugin_name: The string name of a plugin.\n      asset_name: The string name of an asset.\n\n    Returns:\n      The string contents of the plugin asset.\n\n    Raises:\n      KeyError: If the asset is not available.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def textConcat(self, content, len):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlTextConcat(self._o, content, len)\n        return ret", "output": "Concat the given string at the end of the existing node\n           content", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def raw_mentions(self):\n        \"\"\"\n        \"\"\"\n        return [int(x) for x in re.findall(r'<@!?([0-9]+)>', self.content)]", "output": "A property that returns an array of user IDs matched with\n        the syntax of <@user_id> in the message content.\n\n        This allows you to receive the user IDs of mentioned users\n        even in a private message context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_tags(self):\n    \"\"\"\"\"\"\n    return sorted([frozenset(meta_graph.meta_info_def.tags)\n                   for meta_graph in self.meta_graphs])", "output": "Returns a list of set of tags.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_attrgetter(self, obj):\n        \"\"\"\"\"\"\n        class Dummy(object):\n            def __init__(self, attrs, index=None):\n                self.attrs = attrs\n                self.index = index\n            def __getattribute__(self, item):\n                attrs = object.__getattribute__(self, \"attrs\")\n                index = object.__getattribute__(self, \"index\")\n                if index is None:\n                    index = len(attrs)\n                    attrs.append(item)\n                else:\n                    attrs[index] = \".\".join([attrs[index], item])\n                return type(self)(attrs, index)\n        attrs = []\n        obj(Dummy(attrs))\n        return self.save_reduce(operator.attrgetter, tuple(attrs))", "output": "attrgetter serializer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exists(self, path):\n        \"\"\"\n        \n        \"\"\"\n\n        cmd = load_hadoop_cmd() + ['fs', '-stat', path]\n        logger.debug('Running file existence check: %s', subprocess.list2cmdline(cmd))\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, universal_newlines=True)\n        stdout, stderr = p.communicate()\n        if p.returncode == 0:\n            return True\n        else:\n            not_found_pattern = \"^.*No such file or directory$\"\n            not_found_re = re.compile(not_found_pattern)\n            for line in stderr.split('\\n'):\n                if not_found_re.match(line):\n                    return False\n            raise hdfs_error.HDFSCliError(cmd, p.returncode, stdout, stderr)", "output": "Use ``hadoop fs -stat`` to check file existence.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def send_message(self, message):\n        ''' \n\n        '''\n        try:\n            if _message_test_port is not None:\n                _message_test_port.sent.append(message)\n            yield message.send(self)\n        except (WebSocketClosedError, StreamClosedError): # Tornado 4.x may raise StreamClosedError\n            # on_close() is / will be called anyway\n            log.warning(\"Failed sending message as connection was closed\")\n        raise gen.Return(None)", "output": "Send a Bokeh Server protocol message to the connected client.\n\n        Args:\n            message (Message) : a message to send", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prf_divide(numerator, denominator):\n    \"\"\"\n    \"\"\"\n    result = numerator / denominator\n    mask = denominator == 0.0\n    if not mask.any():\n        return result\n\n    # remove nan\n    result[mask] = 0.0\n    return result", "output": "Performs division and handles divide-by-zero.\n\n    On zero-division, sets the corresponding result elements to zero.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def categories(self):\n        \"\"\"\n        \"\"\"\n        r = [ch for ch in self._channels.values() if isinstance(ch, CategoryChannel)]\n        r.sort(key=lambda c: (c.position, c.id))\n        return r", "output": "List[:class:`CategoryChannel`]: A list of categories that belongs to this guild.\n\n        This is sorted by the position and are in UI order from top to bottom.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def double_tab_complete(self):\r\n        \"\"\"\"\"\"\r\n        opts = self._complete_options()\r\n        if len(opts) > 1:\r\n            self.completer().complete()", "output": "If several options available a double tab displays options.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_rnn_layer(mode, num_layers, input_size, hidden_size, dropout, weight_dropout):\n    \"\"\"\"\"\"\n    if mode == 'rnn_relu':\n        rnn_block = functools.partial(rnn.RNN, activation='relu')\n    elif mode == 'rnn_tanh':\n        rnn_block = functools.partial(rnn.RNN, activation='tanh')\n    elif mode == 'lstm':\n        rnn_block = rnn.LSTM\n    elif mode == 'gru':\n        rnn_block = rnn.GRU\n\n    block = rnn_block(hidden_size, num_layers, dropout=dropout,\n                      input_size=input_size)\n\n    if weight_dropout:\n        apply_weight_drop(block, '.*h2h_weight', rate=weight_dropout)\n\n    return block", "output": "create rnn layer given specs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def status(name, sig=None):\n    '''\n    \n    '''\n\n    proxy_fn = 'dummy.service_status'\n    resp = __proxy__[proxy_fn](name)\n    if resp['comment'] == 'stopped':\n        return False\n    if resp['comment'] == 'running':\n        return True", "output": "Return the status for a service via dummy, returns a bool\n    whether the service is running.\n\n    .. versionadded:: 2016.11.3\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.status <service name>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_certificate(result):\n    \"\"\"\n    \n    \"\"\"\n    cert_body = \"\"\"-----BEGIN CERTIFICATE-----\\n{0}\\n-----END CERTIFICATE-----\\n\"\"\".format(\n        \"\\n\".join(textwrap.wrap(base64.b64encode(result).decode('utf8'), 64)))\n    signed_crt = open(\"{}/signed.crt\".format(gettempdir()), \"w\")\n    signed_crt.write(cert_body)\n    signed_crt.close()\n\n    return True", "output": "Encode cert bytes to PEM encoded cert file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _compute_experiment_from_runs(self):\n    \"\"\"\"\"\"\n    hparam_infos = self._compute_hparam_infos()\n    if not hparam_infos:\n      return None\n    metric_infos = self._compute_metric_infos()\n    return api_pb2.Experiment(hparam_infos=hparam_infos,\n                              metric_infos=metric_infos)", "output": "Computes a minimal Experiment protocol buffer by scanning the runs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def estimate_pruned_members(self, *, days):\n        \"\"\"\n        \"\"\"\n\n        if not isinstance(days, int):\n            raise InvalidArgument('Expected int for ``days``, received {0.__class__.__name__} instead.'.format(days))\n\n        data = await self._state.http.estimate_pruned_members(self.id, days)\n        return data['pruned']", "output": "|coro|\n\n        Similar to :meth:`prune_members` except instead of actually\n        pruning members, it returns how many members it would prune\n        from the guild had it been called.\n\n        Parameters\n        -----------\n        days: :class:`int`\n            The number of days before counting as inactive.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to prune members.\n        HTTPException\n            An error occurred while fetching the prune members estimate.\n        InvalidArgument\n            An integer was not passed for ``days``.\n\n        Returns\n        ---------\n        :class:`int`\n            The number of members estimated to be pruned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def version_msg():\n    \"\"\"\"\"\"\n    python_version = sys.version[:3]\n    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    message = u'Cookiecutter %(version)s from {} (Python {})'\n    return message.format(location, python_version)", "output": "Return the Cookiecutter version, location and Python powering it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_gid(group=None):\n    '''\n    \n    '''\n    if not HAS_GRP:\n        return None\n    if group is None:\n        try:\n            return os.getegid()\n        except AttributeError:\n            return None\n    else:\n        try:\n            return grp.getgrnam(group).gr_gid\n        except KeyError:\n            return None", "output": "Get the gid for a given group name. If no group given, the current egid\n    will be returned. If the group does not exist, None will be returned. On\n    systems which do not support grp or os.getegid it will return None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_kexgss_hostkey(self, m):\n        \"\"\"\n        \n        \"\"\"\n        # client mode\n        host_key = m.get_string()\n        self.transport.host_key = host_key\n        sig = m.get_string()\n        self.transport._verify_key(host_key, sig)\n        self.transport._expect_packet(MSG_KEXGSS_CONTINUE, MSG_KEXGSS_COMPLETE)", "output": "Parse the SSH2_MSG_KEXGSS_HOSTKEY message (client mode).\n\n        :param `.Message` m: The content of the SSH2_MSG_KEXGSS_HOSTKEY message", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_csv(cls, path:PathOrStr, csv_name:str, cols:IntsOrStrs=0, delimiter:str=None, header:str='infer',\n                 processor:PreProcessors=None, **kwargs)->'ItemList':\n        \"\"\"\"\"\"\n        df = pd.read_csv(Path(path)/csv_name, delimiter=delimiter, header=header)\n        return cls.from_df(df, path=path, cols=cols, processor=processor, **kwargs)", "output": "Create an `ItemList` in `path` from the inputs in the `cols` of `path/csv_name`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(self, reference, document_data, merge=False):\n        \"\"\"\n        \"\"\"\n        if merge is not False:\n            write_pbs = _helpers.pbs_for_set_with_merge(\n                reference._document_path, document_data, merge\n            )\n        else:\n            write_pbs = _helpers.pbs_for_set_no_merge(\n                reference._document_path, document_data\n            )\n\n        self._add_write_pbs(write_pbs)", "output": "Add a \"change\" to replace a document.\n\n        See\n        :meth:`~.firestore_v1beta1.document.DocumentReference.set` for\n        more information on how ``option`` determines how the change is\n        applied.\n\n        Args:\n            reference (~.firestore_v1beta1.document.DocumentReference):\n                A document reference that will have values set in this batch.\n            document_data (dict):\n                Property names and values to use for replacing a document.\n            merge (Optional[bool] or Optional[List<apispec>]):\n                If True, apply merging instead of overwriting the state\n                of the document.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def htmlCreatePushParser(SAX, chunk, size, URI):\n    \"\"\" \"\"\"\n    ret = libxml2mod.htmlCreatePushParser(SAX, chunk, size, URI)\n    if ret is None:raise parserError('htmlCreatePushParser() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a progressive HTML parser context to build either an\n      event flow if the SAX object is not None, or a DOM tree\n       otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_vocab_from_args(args: argparse.Namespace):\n    \"\"\"\n    \n    \"\"\"\n    parameter_path = args.param_path\n    overrides = args.overrides\n    serialization_dir = args.serialization_dir\n\n    params = Params.from_file(parameter_path, overrides)\n\n    make_vocab_from_params(params, serialization_dir)", "output": "Just converts from an ``argparse.Namespace`` object to params.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def restore(self):\n        \"\"\"\"\"\"\n        signal.signal(signal.SIGINT, self.original_sigint)\n        signal.signal(signal.SIGTERM, self.original_sigterm)\n        if os.name == 'nt':\n            signal.signal(signal.SIGBREAK, self.original_sigbreak)", "output": "Restore signal handlers to their original settings.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_resource(resource, name=None, tags=None, region=None, key=None,\n                     keyid=None, profile=None, **kwargs):\n    '''\n    \n    '''\n\n    try:\n        try:\n            conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n            create_resource = getattr(conn, 'create_' + resource)\n        except AttributeError:\n            raise AttributeError('{0} function does not exist for boto VPC '\n                                 'connection.'.format('create_' + resource))\n\n        if name and _get_resource_id(resource, name, region=region, key=key,\n                                     keyid=keyid, profile=profile):\n            return {'created': False, 'error': {'message':\n                    'A {0} named {1} already exists.'.format(\n                        resource, name)}}\n\n        r = create_resource(**kwargs)\n\n        if r:\n            if isinstance(r, bool):\n                return {'created': True}\n            else:\n                log.info('A %s with id %s was created', resource, r.id)\n                _maybe_set_name_tag(name, r)\n                _maybe_set_tags(tags, r)\n\n                if name:\n                    _cache_id(name,\n                              sub_resource=resource,\n                              resource_id=r.id,\n                              region=region,\n                              key=key, keyid=keyid,\n                              profile=profile)\n                return {'created': True, 'id': r.id}\n        else:\n            if name:\n                e = '{0} {1} was not created.'.format(resource, name)\n            else:\n                e = '{0} was not created.'.format(resource)\n            log.warning(e)\n            return {'created': False, 'error': {'message': e}}\n    except BotoServerError as e:\n        return {'created': False, 'error': __utils__['boto.get_error'](e)}", "output": "Create a VPC resource. Returns the resource id if created, or False\n    if not created.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy2(src, dst):\n    \"\"\"\n\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst)\n    copystat(src, dst)", "output": "Copy data and all stat info (\"cp -p src dst\").\n\n    The destination may be a directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\n        \"\"\"\n        info = self._env.reset()[self.brain_name]\n        n_agents = len(info.agents)\n        self._check_agents(n_agents)\n        self.game_over = False\n\n        if not self._multiagent:\n            obs, reward, done, info = self._single_step(info)\n        else:\n            obs, reward, done, info = self._multi_step(info)\n        return obs", "output": "Resets the state of the environment and returns an initial observation.\n        In the case of multi-agent environments, this is a list.\n        Returns: observation (object/list): the initial observation of the\n            space.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _authenticate(secrets_file):\n    \"\"\"\n    \"\"\"\n    flow = oauthclient.flow_from_clientsecrets(\n        secrets_file,\n        scope=OAUTH_SCOPE,\n        message=('Failed to initialized OAuth 2.0 flow with secrets '\n                 'file: %s' % secrets_file))\n    storage = oauthfile.Storage(OAUTH_CREDENTIALS_FILE)\n    credentials = storage.get()\n    if credentials is None or credentials.invalid:\n        credentials = oauthtools.run_flow(flow, storage, oauthtools.argparser.parse_args(args=[]))\n    http = httplib2.Http()\n    return credentials.authorize(http)", "output": "Runs the OAuth 2.0 installed application flow.\n\n    Returns:\n      An authorized httplib2.Http instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ConsumeInteger(tokenizer, is_signed=False, is_long=False):\n  \"\"\"\n  \"\"\"\n  try:\n    result = ParseInteger(tokenizer.token, is_signed=is_signed, is_long=is_long)\n  except ValueError as e:\n    raise tokenizer.ParseError(str(e))\n  tokenizer.NextToken()\n  return result", "output": "Consumes an integer number from tokenizer.\n\n  Args:\n    tokenizer: A tokenizer used to parse the number.\n    is_signed: True if a signed integer must be parsed.\n    is_long: True if a long integer must be parsed.\n\n  Returns:\n    The integer parsed.\n\n  Raises:\n    ParseError: If an integer with given characteristics couldn't be consumed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def eval_valid(self, feval=None):\n        \"\"\"\n        \"\"\"\n        return [item for i in range_(1, self.__num_dataset)\n                for item in self.__inner_eval(self.name_valid_sets[i - 1], i, feval)]", "output": "Evaluate for validation data.\n\n        Parameters\n        ----------\n        feval : callable or None, optional (default=None)\n            Customized evaluation function.\n            Should accept two parameters: preds, train_data,\n            and return (eval_name, eval_result, is_higher_better) or list of such tuples.\n            For multi-class task, the preds is group by class_id first, then group by row_id.\n            If you want to get i-th row preds in j-th class, the access way is preds[j * num_data + i].\n\n        Returns\n        -------\n        result : list\n            List with evaluation results.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema(self):\n        \"\"\"\n        \"\"\"\n        prop = self._properties.get(\"schema\", {})\n        return [SchemaField.from_api_repr(field) for field in prop.get(\"fields\", [])]", "output": "List[:class:`~google.cloud.bigquery.schema.SchemaField`]: The schema\n        for the data.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query.tableDefinitions.(key).schema\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externalDataConfiguration.schema", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cmd(command, *args, **kwargs):\n    '''\n    \n    '''\n    for k in list(kwargs):\n        if k.startswith('__pub_'):\n            kwargs.pop(k)\n    local_command = '.'.join(['nxos', command])\n    log.info('local command: %s', local_command)\n    if local_command not in __salt__:\n        return False\n    return __salt__[local_command](*args, **kwargs)", "output": "NOTE: This function is preserved for backwards compatibilty.  This allows\n    commands to be executed using either of the following syntactic forms.\n\n    salt '*' nxos.cmd <function>\n\n    or\n\n    salt '*' nxos.<function>\n\n    command\n        function from `salt.modules.nxos` to run\n\n    args\n        positional args to pass to `command` function\n\n    kwargs\n        key word arguments to pass to `command` function\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd sendline 'show ver'\n        salt '*' nxos.cmd show_run\n        salt '*' nxos.cmd check_password username=admin password='$5$lkjsdfoi$blahblahblah' encrypted=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mode_number(self, rows: List[Row], column: NumberColumn) -> Number:\n        \"\"\"\n        \n        \"\"\"\n        most_frequent_list = self._get_most_frequent_values(rows, column)\n        if not most_frequent_list:\n            return 0.0  # type: ignore\n        most_frequent_value = most_frequent_list[0]\n        if not isinstance(most_frequent_value, Number):\n            raise ExecutionError(f\"Invalid valus for mode_number: {most_frequent_value}\")\n        return most_frequent_value", "output": "Takes a list of rows and a column and returns the most frequent value under\n        that column in those rows.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def readerForMemory(buffer, size, URL, encoding, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlReaderForMemory(buffer, size, URL, encoding, options)\n    if ret is None:raise treeError('xmlReaderForMemory() failed')\n    return xmlTextReader(_obj=ret)", "output": "Create an xmltextReader for an XML in-memory document. The\n      parsing flags @options are a combination of xmlParserOption.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift_right(x, pad_value=None):\n  \"\"\"\"\"\"\n  if pad_value is None:\n    shifted_targets = tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])[:, :-1, :, :]\n  else:\n    shifted_targets = tf.concat([pad_value, x], axis=1)[:, :-1, :, :]\n  return shifted_targets", "output": "Shift the second dimension of x right by one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def compress_encoder_2d(x, hparams, name=None):\n  \"\"\"\n  \"\"\"\n  return compress_encoder(\n      x,\n      hparams,\n      strides=(2, 2),\n      kernel_size=(hparams.kernel_size, hparams.kernel_size),\n      name=name)", "output": "Encoder that compresses 2-D inputs by 2**num_compress_steps.\n\n  Args:\n    x: Tensor of shape [batch, height, width, channels].\n    hparams: HParams.\n    name: string, variable scope.\n\n  Returns:\n    Tensor of shape [batch, latent_length, hparams.hidden_size], where\n      latent_length is\n      hparams.num_latents * (height*width) / 2**(hparams.num_compress_steps).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rlmb_base_sv2p():\n  \"\"\"\"\"\"\n  hparams = rlmb_base()\n  hparams.learning_rate_bump = 1.0\n  hparams.generative_model = \"next_frame_sv2p\"\n  hparams.generative_model_params = \"next_frame_sv2p_atari\"\n  return hparams", "output": "Base setting with sv2p as world model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _params_extend(params, _ignore_name=False, **kwargs):\n    '''\n    \n\n    '''\n    # extend params value by optional zabbix API parameters\n    for key in kwargs:\n        if not key.startswith('_'):\n            params.setdefault(key, kwargs[key])\n\n    # ignore name parameter passed from Salt state module, use firstname or visible_name instead\n    if _ignore_name:\n        params.pop('name', None)\n        if 'firstname' in params:\n            params['name'] = params.pop('firstname')\n        elif 'visible_name' in params:\n            params['name'] = params.pop('visible_name')\n\n    return params", "output": "Extends the params dictionary by values from keyword arguments.\n\n    .. versionadded:: 2016.3.0\n\n    :param params: Dictionary with parameters for zabbix API.\n    :param _ignore_name: Salt State module is passing first line as 'name' parameter. If API uses optional parameter\n    'name' (for ex. host_create, user_create method), please use 'visible_name' or 'firstname' instead of 'name' to\n    not mess these values.\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: Extended params dictionary with parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unload_extension(self, name):\n        \"\"\"\n        \"\"\"\n\n        lib = self.__extensions.get(name)\n        if lib is None:\n            raise errors.ExtensionNotLoaded(name)\n\n        self._remove_module_references(lib.__name__)\n        self._call_module_finalizers(lib, name)", "output": "Unloads an extension.\n\n        When the extension is unloaded, all commands, listeners, and cogs are\n        removed from the bot and the module is un-imported.\n\n        The extension can provide an optional global function, ``teardown``,\n        to do miscellaneous clean-up if necessary. This function takes a single\n        parameter, the ``bot``, similar to ``setup`` from\n        :meth:`~.Bot.load_extension`.\n\n        Parameters\n        ------------\n        name: :class:`str`\n            The extension name to unload. It must be dot separated like\n            regular Python imports if accessing a sub-module. e.g.\n            ``foo.test`` if you want to import ``foo/test.py``.\n\n        Raises\n        -------\n        ExtensionNotLoaded\n            The extension was not loaded.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hypermedia_out():\n    '''\n    \n    '''\n    request = cherrypy.serving.request\n    request._hypermedia_inner_handler = request.handler\n\n    # If handler has been explicitly set to None, don't override.\n    if request.handler is not None:\n        request.handler = hypermedia_handler", "output": "Determine the best handler for the requested content type\n\n    Wrap the normal handler and transform the output from that handler into the\n    requested content type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_from_class_batches(self, class_batches, num_shards=None):\n    \"\"\"\n    \"\"\"\n    shards_for_submissions = {}\n    shard_idx = 0\n    for idx, (batch_id, batch_val) in enumerate(iteritems(class_batches)):\n      work_id = DEFENSE_WORK_ID_PATTERN.format(idx)\n      submission_id = batch_val['submission_id']\n      shard_id = None\n      if num_shards:\n        shard_id = shards_for_submissions.get(submission_id)\n        if shard_id is None:\n          shard_id = shard_idx % num_shards\n          shards_for_submissions[submission_id] = shard_id\n          shard_idx += 1\n      # Note: defense also might have following fields populated by worker:\n      # stat_correct, stat_error, stat_target_class, stat_num_images\n      self.work[work_id] = {\n          'claimed_worker_id': None,\n          'claimed_worker_start_time': None,\n          'is_completed': False,\n          'error': None,\n          'elapsed_time': None,\n          'submission_id': submission_id,\n          'shard_id': shard_id,\n          'output_classification_batch_id': batch_id,\n      }", "output": "Initializes work pieces from classification batches.\n\n    Args:\n      class_batches: dict with classification batches, could be obtained\n        as ClassificationBatches.data\n      num_shards: number of shards to split data into,\n        if None then no sharding is done.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pillar_minions(self, expr, delimiter, greedy):\n        '''\n        \n        '''\n        return self._check_cache_minions(expr, delimiter, greedy, 'pillar')", "output": "Return the minions found by looking via pillar", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_banks_to_remove(redis_server, bank, path=''):\n    '''\n    \n    '''\n    current_path = bank if not path else '{path}/{bank}'.format(path=path, bank=bank)\n    bank_paths_to_remove = [current_path]\n    # as you got here, you'll be removed\n\n    bank_key = _get_bank_redis_key(current_path)\n    child_banks = redis_server.smembers(bank_key)\n    if not child_banks:\n        return bank_paths_to_remove  # this bank does not have any child banks so we stop here\n    for child_bank in child_banks:\n        bank_paths_to_remove.extend(_get_banks_to_remove(redis_server, child_bank, path=current_path))\n        # go one more level deeper\n        # and also remove the children of this child bank (if any)\n    return bank_paths_to_remove", "output": "A simple tree tarversal algorithm that builds the list of banks to remove,\n    starting from an arbitrary node in the tree.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def winsorize(row, min_percentile, max_percentile):\n    \"\"\"\n    \n    \"\"\"\n    a = row.copy()\n    nan_count = isnan(row).sum()\n    nonnan_count = a.size - nan_count\n\n    # NOTE: argsort() sorts nans to the end of the array.\n    idx = a.argsort()\n\n    # Set values at indices below the min percentile to the value of the entry\n    # at the cutoff.\n    if min_percentile > 0:\n        lower_cutoff = int(min_percentile * nonnan_count)\n        a[idx[:lower_cutoff]] = a[idx[lower_cutoff]]\n\n    # Set values at indices above the max percentile to the value of the entry\n    # at the cutoff.\n    if max_percentile < 1:\n        upper_cutoff = int(ceil(nonnan_count * max_percentile))\n        # if max_percentile is close to 1, then upper_cutoff might not\n        # remove any values.\n        if upper_cutoff < nonnan_count:\n            start_of_nans = (-nan_count) if nan_count else None\n            a[idx[upper_cutoff:start_of_nans]] = a[idx[upper_cutoff - 1]]\n\n    return a", "output": "This implementation is based on scipy.stats.mstats.winsorize", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_pythonpath(self, at_start=False):\r\n        \"\"\"\"\"\"\r\n        if at_start:\r\n            current_path = self.get_option('current_project_path',\r\n                                           default=None)\r\n        else:\r\n            current_path = self.get_active_project_path()\r\n        if current_path is None:\r\n            return []\r\n        else:\r\n            return [current_path]", "output": "Get project path as a list to be added to PYTHONPATH", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_valid_version():\n    '''\n    \n    '''\n\n    # Locate the full path to npm\n    npm_path = salt.utils.path.which('npm')\n\n    # pylint: disable=no-member\n    res = salt.modules.cmdmod.run('{npm} --version'.format(npm=npm_path), output_loglevel='quiet')\n    npm_version, valid_version = _LooseVersion(res), _LooseVersion('1.2')\n    # pylint: enable=no-member\n    if npm_version < valid_version:\n        raise CommandExecutionError(\n            '\\'npm\\' is not recent enough({0} < {1}). Please Upgrade.'.format(\n                npm_version, valid_version\n            )\n        )", "output": "Check the version of npm to ensure this module will work. Currently\n    npm must be at least version 1.2.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cbday_roll(self):\n        \"\"\"\n        \n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith('S'):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func", "output": "Define default roll function to be called in apply method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def websocket_url_for_server_url(url):\n    ''' \n\n    '''\n    if url.startswith(\"http:\"):\n        reprotocoled = \"ws\" + url[4:]\n    elif url.startswith(\"https:\"):\n        reprotocoled = \"wss\" + url[5:]\n    else:\n        raise ValueError(\"URL has unknown protocol \" + url)\n    if reprotocoled.endswith(\"/\"):\n        return reprotocoled + \"ws\"\n    else:\n        return reprotocoled + \"/ws\"", "output": "Convert an ``http(s)`` URL for a Bokeh server websocket endpoint into\n    the appropriate ``ws(s)`` URL\n\n    Args:\n        url (str):\n            An ``http(s)`` URL\n\n    Returns:\n        str:\n            The corresponding ``ws(s)`` URL ending in ``/ws``\n\n    Raises:\n        ValueError:\n            If the input URL is not of the proper form.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_code_tolist(code, auto_fill=True):\n    \"\"\"\n    \"\"\"\n\n    if isinstance(code, str):\n        if auto_fill:\n            return [QA_util_code_tostr(code)]\n        else:\n            return [code]\n\n    elif isinstance(code, list):\n        if auto_fill:\n            return [QA_util_code_tostr(item) for item in code]\n        else:\n            return [item for item in code]", "output": "\u8f6c\u6362code==> list\n\n    Arguments:\n        code {[type]} -- [description]\n\n    Keyword Arguments:\n        auto_fill {bool} -- \u662f\u5426\u81ea\u52a8\u8865\u5168(\u4e00\u822c\u662f\u7528\u4e8e\u80a1\u7968/\u6307\u6570/etf\u7b496\u4f4d\u6570,\u671f\u8d27\u4e0d\u9002\u7528) (default: {True})\n\n    Returns:\n        [list] -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stopped(name,\n            kill=False,\n            remote_addr=None,\n            cert=None,\n            key=None,\n            verify_cert=True):\n    '''\n    \n    '''\n    ret = {\n        'name': name,\n        'kill': kill,\n\n        'remote_addr': remote_addr,\n        'cert': cert,\n        'key': key,\n        'verify_cert': verify_cert,\n\n        'changes': {}\n    }\n\n    try:\n        container = __salt__['lxd.container_get'](\n            name, remote_addr, cert, key, verify_cert, _raw=True\n        )\n    except CommandExecutionError as e:\n        return _error(ret, six.text_type(e))\n    except SaltInvocationError as e:\n        # Container not found\n        return _error(ret, 'Container \"{0}\" not found'.format(name))\n\n    if container.status_code == CONTAINER_STATUS_STOPPED:\n        return _success(ret, 'Container \"{0}\" is already stopped'.format(name))\n\n    if __opts__['test']:\n        ret['changes']['stopped'] = \\\n            'Would stop the container \"{0}\"'.format(name)\n        return _unchanged(ret, ret['changes']['stopped'])\n\n    container.stop(force=kill, wait=True)\n    ret['changes']['stopped'] = \\\n        'Stopped the container \"{0}\"'.format(name)\n    return _success(ret, ret['changes']['stopped'])", "output": "Ensure a LXD container is stopped, kill it if kill is true else stop it\n\n    name :\n        The name of the container to stop\n\n    kill :\n        kill if true\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Zertifikate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enable_plugin(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    cmd = [_get_rabbitmq_plugin(), 'enable', name]\n    ret = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    return _format_response(ret, 'Enabled')", "output": "Enable a RabbitMQ plugin via the rabbitmq-plugins command.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.enable_plugin foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _indent(lines, prefix=\"  \"):\n    \"\"\"\n    \"\"\"\n    indented = []\n    for line in lines.split(\"\\n\"):\n        indented.append(prefix + line)\n    return \"\\n\".join(indented)", "output": "Indent some text.\n\n    Note that this is present as ``textwrap.indent``, but not in Python 2.\n\n    Args:\n        lines (str): The newline delimited string to be indented.\n        prefix (Optional[str]): The prefix to indent each line with. Default\n            to two spaces.\n\n    Returns:\n        str: The newly indented content.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_pid_to_pidfile(pidfile_path):\n    \"\"\" \n\n        \"\"\"\n    open_flags = (os.O_CREAT | os.O_EXCL | os.O_WRONLY)\n    open_mode = 0o644\n    pidfile_fd = os.open(pidfile_path, open_flags, open_mode)\n    pidfile = os.fdopen(pidfile_fd, 'w')\n\n    # According to the FHS 2.3 section on PID files in /var/run:\n    #\n    #   The file must consist of the process identifier in\n    #   ASCII-encoded decimal, followed by a newline character. For\n    #   example, if crond was process number 25, /var/run/crond.pid\n    #   would contain three characters: two, five, and newline.\n\n    pid = os.getpid()\n    pidfile.write(\"%s\\n\" % pid)\n    pidfile.close()", "output": "Write the PID in the named PID file.\n\n        Get the numeric process ID (\u201cPID\u201d) of the current process\n        and write it to the named file as a line of text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def current_changed(self, index):\r\n        \"\"\"\"\"\"\r\n#        count = self.get_stack_count()\r\n#        for btn in (self.filelist_btn, self.previous_btn, self.next_btn):\r\n#            btn.setEnabled(count > 1)\r\n\r\n        editor = self.get_current_editor()\r\n        if editor.lsp_ready and not editor.document_opened:\r\n            editor.document_did_open()\r\n        if index != -1:\r\n            editor.setFocus()\r\n            logger.debug(\"Set focus to: %s\" % editor.filename)\r\n        else:\r\n            self.reset_statusbar.emit()\r\n        self.opened_files_list_changed.emit()\r\n\r\n        self.stack_history.refresh()\r\n        self.stack_history.remove_and_append(index)\r\n\r\n        # Needed to avoid an error generated after moving/renaming\r\n        # files outside Spyder while in debug mode.\r\n        # See issue 8749.\r\n        try:\r\n            logger.debug(\"Current changed: %d - %s\" %\r\n                         (index, self.data[index].editor.filename))\r\n        except IndexError:\r\n            pass\r\n\r\n        self.update_plugin_title.emit()\r\n        if editor is not None:\r\n            # Needed in order to handle the close of files open in a directory\r\n            # that has been renamed. See issue 5157\r\n            try:\r\n                self.current_file_changed.emit(self.data[index].filename,\r\n                                               editor.get_position('cursor'))\r\n            except IndexError:\r\n                pass", "output": "Stack index has changed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_activation(net, node, module, builder):\n    \"\"\"\n    \"\"\"\n    input_name, output_name = _get_input_output_name(net, node)\n    name = node['name']\n    mx_non_linearity = _get_attrs(node)['act_type']\n    #TODO add SCALED_TANH, SOFTPLUS, SOFTSIGN, SIGMOID_HARD, LEAKYRELU, PRELU, ELU, PARAMETRICSOFTPLUS, THRESHOLDEDRELU, LINEAR\n    if mx_non_linearity == 'relu':\n        non_linearity = 'RELU'\n    elif mx_non_linearity == 'tanh':\n        non_linearity = 'TANH'\n    elif mx_non_linearity == 'sigmoid':\n        non_linearity = 'SIGMOID'\n    else:\n        raise TypeError('Unknown activation type %s' % mx_non_linearity)\n    builder.add_activation(name = name,\n                           non_linearity = non_linearity,\n                           input_name = input_name,\n                           output_name = output_name)", "output": "Convert an activation layer from mxnet to coreml.\n\n    Parameters\n    ----------\n    network: net\n        A mxnet network object.\n\n    layer: node\n        Node to convert.\n\n    module: module\n        An module for MXNet\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hash():\n    '''\n    \n    '''\n    # Using bitmask to emulate rollover behavior of C unsigned 32 bit int\n    bitmask = 0xffffffff\n    h = 0\n\n    for i in bytearray(salt.utils.stringutils.to_bytes(__grains__['id'])):\n        h = (h + i) & bitmask\n        h = (h + (h << 10)) & bitmask\n        h = (h ^ (h >> 6)) & bitmask\n\n    h = (h + (h << 3)) & bitmask\n    h = (h ^ (h >> 11)) & bitmask\n    h = (h + (h << 15)) & bitmask\n\n    return (h & (_HASH_SIZE - 1)) & bitmask", "output": "Jenkins One-At-A-Time Hash Function\n    More Info: http://en.wikipedia.org/wiki/Jenkins_hash_function#one-at-a-time", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def entity_from_dict(self, entity_dict):\n        \"\"\"\n        \"\"\"\n        entity = entity_dict[\"entity\"]\n        role = entity_dict[\"role\"]\n\n        if entity == \"allUsers\":\n            entity = self.all()\n\n        elif entity == \"allAuthenticatedUsers\":\n            entity = self.all_authenticated()\n\n        elif \"-\" in entity:\n            entity_type, identifier = entity.split(\"-\", 1)\n            entity = self.entity(entity_type=entity_type, identifier=identifier)\n\n        if not isinstance(entity, _ACLEntity):\n            raise ValueError(\"Invalid dictionary: %s\" % entity_dict)\n\n        entity.grant(role)\n        return entity", "output": "Build an _ACLEntity object from a dictionary of data.\n\n        An entity is a mutable object that represents a list of roles\n        belonging to either a user or group or the special types for all\n        users and all authenticated users.\n\n        :type entity_dict: dict\n        :param entity_dict: Dictionary full of data from an ACL lookup.\n\n        :rtype: :class:`_ACLEntity`\n        :returns: An Entity constructed from the dictionary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_namespaced_ingress(self, name, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n        else:\n            (data) = self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n            return data", "output": "replace the specified Ingress\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_namespaced_ingress(name, namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Ingress (required)\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param NetworkingV1beta1Ingress body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: NetworkingV1beta1Ingress\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_get_macroindex_list(ip=None, port=None):\n    \"\"\"\n\n\n    \"\"\"\n    global extension_market_list\n    extension_market_list = QA_fetch_get_extensionmarket_list(\n    ) if extension_market_list is None else extension_market_list\n\n    return extension_market_list.query('market==38')", "output": "\u5b8f\u89c2\u6307\u6807\u5217\u8868\n\n    Keyword Arguments:\n        ip {[type]} -- [description] (default: {None})\n        port {[type]} -- [description] (default: {None})\n\n        38        10      \u5b8f\u89c2\u6307\u6807         HG", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _crop_pad_default(x, size, padding_mode='reflection', row_pct:uniform = 0.5, col_pct:uniform = 0.5):\n    \"\"\n    padding_mode = _pad_mode_convert[padding_mode]\n    size = tis2hw(size)\n    if x.shape[1:] == torch.Size(size): return x\n    rows,cols = size\n    row_pct,col_pct = _minus_epsilon(row_pct,col_pct)\n    if x.size(1)<rows or x.size(2)<cols:\n        row_pad = max((rows-x.size(1)+1)//2, 0)\n        col_pad = max((cols-x.size(2)+1)//2, 0)\n        x = F.pad(x[None], (col_pad,col_pad,row_pad,row_pad), mode=padding_mode)[0]\n    row = int((x.size(1)-rows+1)*row_pct)\n    col = int((x.size(2)-cols+1)*col_pct)\n    x = x[:, row:row+rows, col:col+cols]\n    return x.contiguous()", "output": "Crop and pad tfm - `row_pct`,`col_pct` sets focal point.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_revision(self, dest, url, rev_options):\n        \"\"\"\n        \n        \"\"\"\n        rev = rev_options.arg_rev\n        sha, is_branch = self.get_revision_sha(dest, rev)\n\n        if sha is not None:\n            rev_options = rev_options.make_new(sha)\n            rev_options.branch_name = rev if is_branch else None\n\n            return rev_options\n\n        # Do not show a warning for the common case of something that has\n        # the form of a Git commit hash.\n        if not looks_like_hash(rev):\n            logger.warning(\n                \"Did not find branch or tag '%s', assuming revision or ref.\",\n                rev,\n            )\n\n        if not rev.startswith('refs/'):\n            return rev_options\n\n        # If it looks like a ref, we have to fetch it explicitly.\n        self.run_command(\n            ['fetch', '-q', url] + rev_options.to_args(),\n            cwd=dest,\n        )\n        # Change the revision to the SHA of the ref we fetched\n        sha = self.get_revision(dest, rev='FETCH_HEAD')\n        rev_options = rev_options.make_new(sha)\n\n        return rev_options", "output": "Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def conv_bn_lrelu(ni:int, nf:int, ks:int=3, stride:int=1)->nn.Sequential:\n    \"\"\n    return nn.Sequential(\n        nn.Conv2d(ni, nf, kernel_size=ks, bias=False, stride=stride, padding=ks//2),\n        nn.BatchNorm2d(nf),\n        nn.LeakyReLU(negative_slope=0.1, inplace=True))", "output": "Create a seuence Conv2d->BatchNorm2d->LeakyReLu layer.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getconfig():\n    '''\n    \n    '''\n    try:\n        config = '/etc/selinux/config'\n        with salt.utils.files.fopen(config, 'r') as _fp:\n            for line in _fp:\n                line = salt.utils.stringutils.to_unicode(line)\n                if line.strip().startswith('SELINUX='):\n                    return line.split('=')[1].capitalize().strip()\n    except (IOError, OSError, AttributeError):\n        return None\n    return None", "output": "Return the selinux mode from the config file\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' selinux.getconfig", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_show(name, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_show(name)", "output": "Create a block storage volume\n\n    name\n        Name of the volume\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_show myblock profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_cond_latents(cond_latents, hparams):\n  \"\"\"\"\"\"\n  if cond_latents is None:\n    return\n  if not isinstance(cond_latents[0], list):\n    cond_latents = [cond_latents]\n  exp_num_latents = hparams.num_cond_latents\n  if hparams.latent_dist_encoder == \"conv_net\":\n    exp_num_latents += int(hparams.cond_first_frame)\n  if len(cond_latents) != exp_num_latents:\n    raise ValueError(\"Expected number of cond_latents: %d, got %d\" %\n                     (exp_num_latents, len(cond_latents)))\n  for cond_latent in cond_latents:\n    if len(cond_latent) != hparams.n_levels - 1:\n      raise ValueError(\"Expected level_latents to be %d, got %d\" %\n                       (hparams.n_levels - 1, len(cond_latent)))", "output": "Shape checking for cond_latents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def row(*args, **kwargs):\n    \"\"\" \n    \"\"\"\n\n    sizing_mode = kwargs.pop('sizing_mode', None)\n    children = kwargs.pop('children', None)\n\n    children = _handle_children(*args, children=children)\n\n    row_children = []\n    for item in children:\n        if isinstance(item, LayoutDOM):\n            if sizing_mode is not None and _has_auto_sizing(item):\n                item.sizing_mode = sizing_mode\n            row_children.append(item)\n        else:\n            raise ValueError(\"\"\"Only LayoutDOM items can be inserted into a row. Tried to insert: %s of type %s\"\"\" % (item, type(item)))\n\n    return Row(children=row_children, sizing_mode=sizing_mode, **kwargs)", "output": "Create a row of Bokeh Layout objects. Forces all objects to\n    have the same sizing_mode, which is required for complex layouts to work.\n\n    Args:\n        children (list of :class:`~bokeh.models.layouts.LayoutDOM` ): A list of instances for\n            the row. Can be any of the following - :class:`~bokeh.models.plots.Plot`,\n            :class:`~bokeh.models.widgets.widget.Widget`,\n            :class:`~bokeh.models.layouts.Row`,\n            :class:`~bokeh.models.layouts.Column`,\n            :class:`~bokeh.models.tools.ToolbarBox`,\n            :class:`~bokeh.models.layouts.Spacer`.\n\n        sizing_mode (``\"fixed\"``, ``\"stretch_both\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"`` ): How\n            will the items in the layout resize to fill the available space.\n            Default is ``\"fixed\"``. For more information on the different\n            modes see :attr:`~bokeh.models.layouts.LayoutDOM.sizing_mode`\n            description on :class:`~bokeh.models.layouts.LayoutDOM`.\n\n    Returns:\n        Row: A row of LayoutDOM objects all with the same sizing_mode.\n\n    Examples:\n\n        >>> row([plot_1, plot_2])\n        >>> row(children=[widget_box_1, plot_1], sizing_mode='stretch_both')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def highlight_max(self, subset=None, color='yellow', axis=0):\n        \"\"\"\n        \n        \"\"\"\n        return self._highlight_handler(subset=subset, color=color, axis=axis,\n                                       max_=True)", "output": "Highlight the maximum by shading the background.\n\n        Parameters\n        ----------\n        subset : IndexSlice, default None\n            a valid slice for ``data`` to limit the style application to.\n        color : str, default 'yellow'\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            apply to each column (``axis=0`` or ``'index'``), to each row\n            (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n            with ``axis=None``.\n\n        Returns\n        -------\n        self : Styler", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def snapshots_create(container, name=None, remote_addr=None,\n                     cert=None, key=None, verify_cert=True):\n    '''\n    \n    '''\n    cont = container_get(\n        container, remote_addr, cert, key, verify_cert, _raw=True\n    )\n    if not name:\n        name = datetime.now().strftime('%Y%m%d%H%M%S')\n\n    cont.snapshots.create(name)\n\n    for c in snapshots_all(container).get(container):\n        if c.get('name') == name:\n            return {'name': name}\n\n    return {'name': False}", "output": "Create a snapshot for a container\n\n    container :\n        The name of the container to get.\n\n    name :\n        The name of the snapshot.\n\n    remote_addr :\n        An URL to a remote server. The 'cert' and 'key' fields must also be\n        provided if 'remote_addr' is defined.\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Verify the ssl certificate.  Default: True\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.snapshots_create test-container test-snapshot", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_fun(fun):\n    '''\n    \n    '''\n    conn, mdb = _get_conn(ret=None)\n    ret = {}\n    rdata = mdb.saltReturns.find_one({'fun': fun}, {'_id': 0})\n    if rdata:\n        ret = rdata\n    return ret", "output": "Return the most recent jobs that have executed the named function", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_minions():\n    '''\n    \n    '''\n    query = '''SELECT DISTINCT minion_id\n               FROM {keyspace}.minions;'''.format(keyspace=_get_keyspace())\n\n    ret = []\n\n    # cassandra_cql.cql_query may raise a CommandExecutionError\n    try:\n        data = __salt__['cassandra_cql.cql_query'](query)\n        if data:\n            for row in data:\n                minion = row.get('minion_id')\n                if minion:\n                    ret.append(minion)\n    except CommandExecutionError:\n        log.critical('Could not get the list of minions.')\n        raise\n    except Exception as e:\n        log.critical(\n            'Unexpected error while getting list of minions: %s', e)\n        raise\n\n    return ret", "output": "Return a list of minions", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def print_row(self, **kwargs):\n        '''\n        \n        '''\n        meta_string = '|'\n        for key in self.column_names:\n            float_specifier = ''\n            if isinstance(kwargs[key], float):\n                float_specifier = '.3f'\n            meta_string += \" {%s:<{width}%s}|\" % (key, float_specifier)\n        kwargs['width'] = self.column_width - 1\n\n        print(meta_string.format(**kwargs))\n        print(self.hr)", "output": "keys of kwargs must be the names passed to __init__(...) as `column_names`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_load(jid, load, minions=None):\n    '''\n    \n    '''\n    serv = _get_serv(ret=None)\n\n    # create legacy request in case an InfluxDB 0.8.x version is used\n    if \"influxdb08\" in serv.__module__:\n        req = [\n            {\n                'name': 'jids',\n                'columns': ['jid', 'load'],\n                'points': [\n                    [jid, salt.utils.json.dumps(load)]\n                ],\n            }\n        ]\n    # create InfluxDB 0.9+ version request\n    else:\n        req = [\n            {\n                'measurement': 'jids',\n                'tags': {\n                    'jid': jid\n                },\n                'fields': {\n                    'load': salt.utils.json.dumps(load)\n                }\n            }\n        ]\n\n    try:\n        serv.write_points(req)\n    except Exception as ex:\n        log.critical('Failed to store load with InfluxDB returner: %s', ex)", "output": "Save the load to the specified jid", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _encrypt_private(self, ret, dictkey, target):\n        '''\n        \n        '''\n        # encrypt with a specific AES key\n        pubfn = os.path.join(self.opts['pki_dir'],\n                             'minions',\n                             target)\n        key = salt.crypt.Crypticle.generate_key_string()\n        pcrypt = salt.crypt.Crypticle(\n            self.opts,\n            key)\n        try:\n            pub = salt.crypt.get_rsa_pub_key(pubfn)\n        except (ValueError, IndexError, TypeError):\n            return self.crypticle.dumps({})\n        except IOError:\n            log.error('AES key not found')\n            return {'error': 'AES key not found'}\n\n        pret = {}\n        if not six.PY2:\n            key = salt.utils.stringutils.to_bytes(key)\n        if HAS_M2:\n            pret['key'] = pub.public_encrypt(key, RSA.pkcs1_oaep_padding)\n        else:\n            cipher = PKCS1_OAEP.new(pub)\n            pret['key'] = cipher.encrypt(key)\n        pret[dictkey] = pcrypt.dumps(\n            ret if ret is not False else {}\n        )\n        return pret", "output": "The server equivalent of ReqChannel.crypted_transfer_decode_dictentry", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exit_interpreter(self):\r\n        \"\"\"\"\"\"\r\n        self.interpreter.exit_flag = True\r\n        if self.multithreaded:\r\n            self.interpreter.stdin_write.write(to_binary_string('\\n'))\r\n        self.interpreter.restore_stds()", "output": "Exit interpreter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_weight(self):\n        \"\"\"\n        \"\"\"\n        if self.weight is None:\n            self.weight = self.get_field('weight')\n        return self.weight", "output": "Get the weight of the Dataset.\n\n        Returns\n        -------\n        weight : numpy array or None\n            Weight for each data point from the Dataset.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ssh_usernames(vm_, opts, default_users=None):\n    '''\n    \n    '''\n    if default_users is None:\n        default_users = ['root']\n\n    usernames = salt.config.get_cloud_config_value(\n        'ssh_username', vm_, opts\n    )\n\n    if not isinstance(usernames, list):\n        usernames = [usernames]\n\n    # get rid of None's or empty names\n    usernames = [x for x in usernames if x]\n    # Keep a copy of the usernames the user might have provided\n    initial = usernames[:]\n\n    # Add common usernames to the list to be tested\n    for name in default_users:\n        if name not in usernames:\n            usernames.append(name)\n    # Add the user provided usernames to the end of the list since enough time\n    # might need to pass before the remote service is available for logins and\n    # the proper username might have passed its iteration.\n    # This has detected in a CentOS 5.7 EC2 image\n    usernames.extend(initial)\n    return usernames", "output": "Return the ssh_usernames. Defaults to a built-in list of users for trying.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup_menu(self):\r\n        \"\"\"\"\"\"\r\n        self.copy_action = create_action(self, _('Copy'),\r\n                                         shortcut=keybinding('Copy'),\r\n                                         icon=ima.icon('editcopy'),\r\n                                         triggered=self.copy,\r\n                                         context=Qt.WidgetShortcut)\r\n        menu = QMenu(self)\r\n        add_actions(menu, [self.copy_action, ])\r\n        return menu", "output": "Setup context menu", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_number_matches(self, pattern, source_text='', case=False,\r\n                           regexp=False):\r\n        \"\"\"\"\"\"\r\n        pattern = to_text_string(pattern)\r\n        if not pattern:\r\n            return 0\r\n\r\n        if not regexp:\r\n            pattern = re.escape(pattern)\r\n\r\n        if not source_text:\r\n            source_text = to_text_string(self.toPlainText())\r\n\r\n        try:\r\n            if case:\r\n                regobj = re.compile(pattern)\r\n            else:\r\n                regobj = re.compile(pattern, re.IGNORECASE)\r\n        except sre_constants.error:\r\n            return None\r\n\r\n        number_matches = 0\r\n        for match in regobj.finditer(source_text):\r\n            number_matches += 1\r\n\r\n        return number_matches", "output": "Get the number of matches for the searched text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, file:PathLikeOrBinaryStream= 'data_save.pkl')->None:\n        \"\"\n        if not getattr(self, 'label_list', False):\n            warn(\"Serializing the `DataBunch` only works when you created it using the data block API.\")\n            return\n        try_save(self.label_list, self.path, file)", "output": "Save the `DataBunch` in `self.path/file`. `file` can be file-like (file or buffer)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_simple_equity_info(sids,\n                            start_date,\n                            end_date,\n                            symbols=None,\n                            names=None,\n                            exchange='TEST'):\n    \"\"\"\n    \n    \"\"\"\n    num_assets = len(sids)\n    if symbols is None:\n        symbols = list(ascii_uppercase[:num_assets])\n    else:\n        symbols = list(symbols)\n\n    if names is None:\n        names = [str(s) + \" INC.\" for s in symbols]\n\n    return pd.DataFrame(\n        {\n            'symbol': symbols,\n            'start_date': pd.to_datetime([start_date] * num_assets),\n            'end_date': pd.to_datetime([end_date] * num_assets),\n            'asset_name': list(names),\n            'exchange': exchange,\n        },\n        index=sids,\n        columns=(\n            'start_date',\n            'end_date',\n            'symbol',\n            'exchange',\n            'asset_name',\n        ),\n    )", "output": "Create a DataFrame representing assets that exist for the full duration\n    between `start_date` and `end_date`.\n\n    Parameters\n    ----------\n    sids : array-like of int\n    start_date : pd.Timestamp, optional\n    end_date : pd.Timestamp, optional\n    symbols : list, optional\n        Symbols to use for the assets.\n        If not provided, symbols are generated from the sequence 'A', 'B', ...\n    names : list, optional\n        Names to use for the assets.\n        If not provided, names are generated by adding \" INC.\" to each of the\n        symbols (which might also be auto-generated).\n    exchange : str, optional\n        The exchange name.\n\n    Returns\n    -------\n    info : pd.DataFrame\n        DataFrame representing newly-created assets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert(model, feature_names = None, target = 'target', force_32bit_float = True):\n    \"\"\"\n    \n    \"\"\"\n    return _MLModel(_convert_tree_ensemble(model, feature_names, target, force_32bit_float = force_32bit_float))", "output": "Convert a trained XGBoost model to Core ML format.\n\n    Parameters\n    ----------\n    decision_tree : Booster\n        A trained XGboost tree model.\n\n    feature_names: [str] | str\n        Names of input features that will be exposed in the Core ML model\n        interface.\n\n        Can be set to one of the following:\n\n        - None for using the feature names from the model.\n        - List of names of the input features that should be exposed in the\n          interface to the Core ML model. These input features are in the same\n          order as the XGboost model.\n\n    target: str\n        Name of the output feature name exposed to the Core ML model.\n\n    force_32bit_float: bool\n        If True, then the resulting CoreML model will use 32 bit floats internally.\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n\t\t# Convert it with default input and output names\n\t\t>>> import coremltools\n\t\t>>> coreml_model = coremltools.converters.xgboost.convert(model)\n\n\t\t# Saving the Core ML model to a file.\n\t\t>>> coremltools.save('my_model.mlmodel')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pad_to_multiple_2d(x, block_shape):\n  \"\"\"\n  \"\"\"\n  old_shape = x.get_shape().dims\n  last = old_shape[-1]\n  if len(old_shape) == 4:\n    height_padding = -common_layers.shape_list(x)[1] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[2] % block_shape[1]\n    paddings = [[0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n  elif len(old_shape) == 5:\n    height_padding = -common_layers.shape_list(x)[2] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[3] % block_shape[1]\n    paddings = [[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n\n  padded_x = tf.pad(x, paddings)\n  padded_shape = padded_x.get_shape().as_list()\n  padded_shape = padded_shape[:-1] + [last]\n  padded_x.set_shape(padded_shape)\n  return padded_x", "output": "Making sure x is a multiple of shape.\n\n  Args:\n    x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor\n    block_shape: a 2-d list of integer shapes\n\n  Returns:\n    padded_x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def aggregate_task_lm_losses(hparams,\n                             problem_hparams,\n                             logits,\n                             feature_name,\n                             feature):\n  \"\"\"\"\"\"\n  summaries = []\n  vocab_size = problem_hparams.vocab_size[feature_name]\n  if vocab_size is not None and hasattr(hparams, \"vocab_divisor\"):\n    vocab_size += (-vocab_size) % hparams.vocab_divisor\n  modality = problem_hparams.modality[feature_name]\n  loss = hparams.loss.get(feature_name, modalities.get_loss(modality))\n  weights_fn = hparams.weights_fn.get(\n      feature_name, modalities.get_weights_fn(modality))\n  loss_num = 0.\n  loss_den = 0.\n  for task in hparams.problem.task_list:\n    loss_num_, loss_den_ = loss(\n        logits, feature,\n        lambda x: common_layers.weights_multi_problem_all(x, task.task_id),  # pylint: disable=cell-var-from-loop\n        hparams, vocab_size, weights_fn)\n\n    loss_num += loss_num_\n    loss_den += loss_den_\n\n    loss_val = loss_num_ / tf.maximum(1.0, loss_den_)\n    summaries.append([task.name+\"_loss\", loss_val])\n\n  return loss_num, loss_den, summaries", "output": "LM loss for multiproblems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_apply_state(meta_graph, state_ops, feed_map):\n  \"\"\"\"\"\"\n  for node in meta_graph.graph_def.node:\n    keys_to_purge = []\n    tensor_name = node.name + \":0\"\n    # Verify that the node is a state op and that its due to be rewired\n    # in the feedmap.\n    if node.op in state_ops and tensor_name in feed_map:\n      node.op = \"Placeholder\"\n      for key in node.attr:\n        # Only shape and dtype are required for Placeholder. Remove other\n        # attributes.\n        if key != \"shape\":\n          keys_to_purge.append(key)\n      for key in keys_to_purge:\n        del node.attr[key]\n      node.attr[\"dtype\"].type = types_pb2.DT_RESOURCE", "output": "Replaces state ops with non state Placeholder ops for the apply graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_set(set=None, new_set=None, family='ipv4'):\n    '''\n    \n    '''\n\n    if not set:\n        return 'Error: Set needs to be specified'\n\n    if not new_set:\n        return 'Error: New name for set needs to be specified'\n\n    settype = _find_set_type(set)\n    if not settype:\n        return 'Error: Set does not exist'\n\n    settype = _find_set_type(new_set)\n    if settype:\n        return 'Error: New Set already exists'\n\n    cmd = '{0} rename {1} {2}'.format(_ipset_cmd(), set, new_set)\n    out = __salt__['cmd.run'](cmd, python_shell=False)\n\n    if not out:\n        out = True\n    return out", "output": ".. versionadded:: 2014.7.0\n\n    Delete ipset set.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ipset.rename_set custom_set new_set=new_set_name\n\n        IPv6:\n        salt '*' ipset.rename_set custom_set new_set=new_set_name family=ipv6", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_password_update(user_id=None, name=None, password=None,\n                         profile=None, **connection_args):\n    '''\n    \n    '''\n    kstone = auth(profile, **connection_args)\n    if name:\n        for user in kstone.users.list():\n            if user.name == name:\n                user_id = user.id\n                break\n    if not user_id:\n        return {'Error': 'Unable to resolve user id'}\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        kstone.users.update(user=user_id, password=password)\n    else:\n        kstone.users.update_password(user=user_id, password=password)\n    ret = 'Password updated for user ID {0}'.format(user_id)\n    if name:\n        ret += ' ({0})'.format(name)\n    return ret", "output": "Update a user's password (keystone user-password-update)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.user_password_update c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update user_id=c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update name=nova password=12345", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_initialize(self, folder):\n        \"\"\" \n        \"\"\"\n        if not os.path.isdir(folder):\n            raise ValueError('Invalid folder: ' + folder)\n\n        resources = []\n        resource = {'path': 'INSERT_SCRIPT_PATH_HERE'}\n        resources.append(resource)\n\n        username = self.get_config_value(self.CONFIG_NAME_USER)\n        meta_data = {\n            'id': username + '/INSERT_KERNEL_SLUG_HERE',\n            'title': 'INSERT_TITLE_HERE',\n            'code_file': 'INSERT_CODE_FILE_PATH_HERE',\n            'language': 'INSERT_LANGUAGE_HERE',\n            'kernel_type': 'INSERT_KERNEL_TYPE_HERE',\n            'is_private': 'true',\n            'enable_gpu': 'false',\n            'enable_internet': 'false',\n            'dataset_sources': [],\n            'competition_sources': [],\n            'kernel_sources': [],\n        }\n        meta_file = os.path.join(folder, self.KERNEL_METADATA_FILE)\n        with open(meta_file, 'w') as f:\n            json.dump(meta_data, f, indent=2)\n\n        return meta_file", "output": "create a new kernel in a specified folder from template, including\n            json metadata that grabs values from the configuration.\n             Parameters\n            ==========\n            folder: the path of the folder", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def itemsize(self):\n        \"\"\"\n        \n        \"\"\"\n        warnings.warn(\"{obj}.itemsize is deprecated and will be removed \"\n                      \"in a future version\".format(obj=type(self).__name__),\n                      FutureWarning, stacklevel=2)\n        return self._ndarray_values.itemsize", "output": "Return the size of the dtype of the item of the underlying data.\n\n        .. deprecated:: 0.23.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def video_l1_loss(top_out, targets, model_hparams, vocab_size, weights_fn):\n  \"\"\"\"\"\"\n  del vocab_size  # unused arg\n  logits = top_out\n  logits = tf.reshape(logits, [-1] + common_layers.shape_list(logits)[2:-1])\n  targets = tf.reshape(targets, [-1] + common_layers.shape_list(targets)[2:])\n  weights = weights_fn(targets)\n  # Shift targets by 0.5 so later just casting to int gives the prediction.\n  # So for int targets, say 0 and 7, we actually train to predict 0.5 and 7.5.\n  # Later (in merics or infer) this is cast to int anyway. Also, we have no\n  # loss beyond cutoff = 0.2 as these are already correct predictions.\n  targets = tf.to_float(targets) + 0.5\n  loss = video_l1_internal_loss(logits, targets, model_hparams)\n  return tf.reduce_sum(loss * weights), tf.reduce_sum(weights)", "output": "Compute loss numerator and denominator for one shard of output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _legacy_init(self, name, arr):\n        \"\"\"\n        \"\"\"\n        warnings.warn(\n            \"\\033[91mCalling initializer with init(str, NDArray) has been deprecated.\" \\\n            \"please use init(mx.init.InitDesc(...), NDArray) instead.\\033[0m\",\n            DeprecationWarning, stacklevel=3)\n        if not isinstance(name, string_types):\n            raise TypeError('name must be string')\n        if not isinstance(arr, NDArray):\n            raise TypeError('arr must be NDArray')\n        if name.startswith('upsampling'):\n            self._init_bilinear(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('weight'):\n            self._init_zero(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('bias'):\n            self._init_loc_bias(name, arr)\n        elif name.endswith('bias'):\n            self._init_bias(name, arr)\n        elif name.endswith('gamma'):\n            self._init_gamma(name, arr)\n        elif name.endswith('beta'):\n            self._init_beta(name, arr)\n        elif name.endswith('weight'):\n            self._init_weight(name, arr)\n        elif name.endswith(\"moving_mean\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_var\"):\n            self._init_one(name, arr)\n        elif name.endswith(\"moving_inv_var\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_avg\"):\n            self._init_zero(name, arr)\n        elif name.endswith('min'):\n            self._init_zero(name, arr)\n        elif name.endswith('max'):\n            self._init_one(name, arr)\n        else:\n            self._init_default(name, arr)", "output": "Legacy initialization method.\n\n        Parameters\n        ----------\n        name : str\n            Name of corresponding NDArray.\n\n        arr : NDArray\n            NDArray to be initialized.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def simple_cnn(actns:Collection[int], kernel_szs:Collection[int]=None,\n               strides:Collection[int]=None, bn=False) -> nn.Sequential:\n    \"\"\n    nl = len(actns)-1\n    kernel_szs = ifnone(kernel_szs, [3]*nl)\n    strides    = ifnone(strides   , [2]*nl)\n    layers = [conv_layer(actns[i], actns[i+1], kernel_szs[i], stride=strides[i],\n              norm_type=(NormType.Batch if bn and i<(len(strides)-1) else None)) for i in range_of(strides)]\n    layers.append(PoolFlatten())\n    return nn.Sequential(*layers)", "output": "CNN with `conv_layer` defined by `actns`, `kernel_szs` and `strides`, plus batchnorm if `bn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_field_at(self, index, *, name, value, inline=True):\n        \"\"\"\n        \"\"\"\n\n        try:\n            field = self._fields[index]\n        except (TypeError, IndexError, AttributeError):\n            raise IndexError('field index out of range')\n\n        field['name'] = str(name)\n        field['value'] = str(value)\n        field['inline'] = inline\n        return self", "output": "Modifies a field to the embed object.\n\n        The index must point to a valid pre-existing field.\n\n        This function returns the class instance to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        index: :class:`int`\n            The index of the field to modify.\n        name: :class:`str`\n            The name of the field.\n        value: :class:`str`\n            The value of the field.\n        inline: :class:`bool`\n            Whether the field should be displayed inline.\n\n        Raises\n        -------\n        IndexError\n            An invalid index was provided.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map_across_blocks(self, map_func):\n        \"\"\"\n        \"\"\"\n        preprocessed_map_func = self.preprocess_func(map_func)\n        new_partitions = np.array(\n            [\n                [part.apply(preprocessed_map_func) for part in row_of_parts]\n                for row_of_parts in self.partitions\n            ]\n        )\n        return self.__constructor__(new_partitions)", "output": "Applies `map_func` to every partition.\n\n        Args:\n            map_func: The function to apply.\n\n        Returns:\n            A new BaseFrameManager object, the type of object that called this.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_data(self, filename=None):\r\n        \"\"\"\"\"\"\r\n        if filename is None:\r\n            filename = self.filename\r\n            if filename is None:\r\n                filename = getcwd_or_home()\r\n            filename, _selfilter = getsavefilename(self, _(\"\"),\r\n                                                   filename,\r\n                                                   iofunctions.save_filters)\r\n            if filename:\r\n                self.filename = filename\r\n            else:\r\n                return False\r\n        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))\r\n        QApplication.processEvents()\r\n\r\n        error_message = self.shellwidget.save_namespace(self.filename)\r\n        self.shellwidget._kernel_reply = None\r\n\r\n        QApplication.restoreOverrideCursor()\r\n        QApplication.processEvents()\r\n        if error_message is not None:\r\n            if 'Some objects could not be saved:' in error_message:\r\n                save_data_message = (\r\n                    _('<b>Some objects could not be saved:</b>')\r\n                    + '<br><br><code>{obj_list}</code>'.format(\r\n                        obj_list=error_message.split(': ')[1]))\r\n            else:\r\n                save_data_message = _(\r\n                    '<b>Unable to save current workspace</b>'\r\n                    '<br><br>Error message:<br>') + error_message\r\n            QMessageBox.critical(self, _(\"\"), save_data_message)\r\n        self.save_button.setEnabled(self.filename is not None)", "output": "Save data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mnist_common_generator(tmp_dir,\n                           training,\n                           how_many,\n                           data_filename,\n                           label_filename,\n                           start_from=0):\n  \"\"\"\n  \"\"\"\n  data_path = os.path.join(tmp_dir, data_filename)\n  labels_path = os.path.join(tmp_dir, label_filename)\n  images = _extract_mnist_images(data_path, 60000 if training else 10000)\n  labels = _extract_mnist_labels(labels_path, 60000 if training else 10000)\n  # Shuffle the data to make sure classes are well distributed.\n  data = list(zip(images, labels))\n  random.shuffle(data)\n  images, labels = list(zip(*data))\n  return image_utils.image_generator(images[start_from:start_from + how_many],\n                                     labels[start_from:start_from + how_many])", "output": "Image generator for MNIST.\n\n  Args:\n    tmp_dir: path to temporary storage directory.\n    training: a Boolean; if true, we use the train set, otherwise the test set.\n    how_many: how many images and labels to generate.\n    data_filename: file that contains features data.\n    label_filename: file that contains labels.\n    start_from: from which image to start.\n\n  Returns:\n    An instance of image_generator that produces MNIST images.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def regexpExec(self, content):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlRegexpExec(self._o, content)\n        return ret", "output": "Check if the regular expression generates the value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def coalesce(self, numPartitions, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        if shuffle:\n            # Decrease the batch size in order to distribute evenly the elements across output\n            # partitions. Otherwise, repartition will possibly produce highly skewed partitions.\n            batchSize = min(10, self.ctx._batchSize or 1024)\n            ser = BatchedSerializer(PickleSerializer(), batchSize)\n            selfCopy = self._reserialize(ser)\n            jrdd_deserializer = selfCopy._jrdd_deserializer\n            jrdd = selfCopy._jrdd.coalesce(numPartitions, shuffle)\n        else:\n            jrdd_deserializer = self._jrdd_deserializer\n            jrdd = self._jrdd.coalesce(numPartitions, shuffle)\n        return RDD(jrdd, self.ctx, jrdd_deserializer)", "output": "Return a new RDD that is reduced into `numPartitions` partitions.\n\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).glom().collect()\n        [[1], [2, 3], [4, 5]]\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).coalesce(1).glom().collect()\n        [[1, 2, 3, 4, 5]]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, end_ix):\n        \"\"\"\n        \n        \"\"\"\n        if self.most_recent_ix == end_ix:\n            return self.current\n\n        target = end_ix - self.cal_start - self.offset + 1\n        self.current = self.window.seek(target)\n\n        self.most_recent_ix = end_ix\n        return self.current", "output": "Returns\n        -------\n        out : A np.ndarray of the equity pricing up to end_ix after adjustments\n              and rounding have been applied.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nac(x, depth, name=None, reuse=None):\n  \"\"\"\"\"\"\n  with tf.variable_scope(name, default_name=\"nac\", values=[x], reuse=reuse):\n    x_shape = shape_list(x)\n    w = tf.get_variable(\"w\", [x_shape[-1], depth])\n    m = tf.get_variable(\"m\", [x_shape[-1], depth])\n    w = tf.tanh(w) * tf.nn.sigmoid(m)\n    x_flat = tf.reshape(x, [-1, x_shape[-1]])\n    res_flat = tf.matmul(x_flat, w)\n    return tf.reshape(res_flat, x_shape[:-1] + [depth])", "output": "NAC as in https://arxiv.org/abs/1808.00508.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, config=None):\n        \"\"\"\n        \"\"\"\n        if config is not None:\n            clist = [config]\n        else:\n            clist = [\n                self._system_config,\n                self._global_config,\n                self._repo_config,\n                self._local_config,\n            ]\n\n        for conf in clist:\n            if conf.filename is None:\n                continue\n\n            try:\n                logger.debug(\"Writing '{}'.\".format(conf.filename))\n                dname = os.path.dirname(os.path.abspath(conf.filename))\n                try:\n                    os.makedirs(dname)\n                except OSError as exc:\n                    if exc.errno != errno.EEXIST:\n                        raise\n                conf.write()\n            except Exception as exc:\n                msg = \"failed to write config '{}'\".format(conf.filename)\n                raise ConfigError(msg, exc)", "output": "Saves config to config files.\n\n        Args:\n            config (configobj.ConfigObj): optional config object to save.\n\n        Raises:\n            dvc.config.ConfigError: thrown if failed to write config file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_tall_finetune_textclass():\n  \"\"\"\"\"\"\n  hparams = transformer_tall()\n  hparams.learning_rate_constant = 6.25e-5\n  hparams.learning_rate_schedule = (\"linear_warmup*constant*linear_decay\")\n  hparams.multiproblem_schedule_max_examples = 0\n  hparams.multiproblem_target_eval_only = True\n  hparams.learning_rate_warmup_steps = 50\n  # Set train steps to learning_rate_decay_steps or less\n  hparams.learning_rate_decay_steps = 25000\n  hparams.multiproblem_reweight_label_loss = True\n  hparams.multiproblem_label_weight = 0.95\n  return hparams", "output": "Hparams for transformer on LM for finetuning on text class problems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def post_work_result(self, function_arn, work_item):\n        \"\"\"\n        \n        \"\"\"\n        url = self._get_work_url(function_arn)\n\n        runtime_logger.info('Posting work result for invocation id [{}] to {}'.format(work_item.invocation_id, url))\n        request = Request(url, work_item.payload or b'')\n\n        request.add_header(HEADER_INVOCATION_ID, work_item.invocation_id)\n        request.add_header(HEADER_AUTH_TOKEN, self.auth_token)\n\n        urlopen(request)\n\n        runtime_logger.info('Posted work result for invocation id [{}]'.format(work_item.invocation_id))", "output": "Post the result of processing work item by :code:`function_arn`.\n\n        :param function_arn: Arn of the Lambda function intended to receive the work for processing.\n        :type function_arn: string\n\n        :param work_item: The WorkItem holding the results of the work being posted.\n        :type work_item: WorkItem\n\n        :returns: None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bytenet_base():\n  \"\"\"\"\"\"\n  hparams = common_hparams.basic_params1()\n  hparams.batch_size = 2048\n  hparams.hidden_size = 768\n  hparams.dropout = 0.2\n  hparams.symbol_dropout = 0.2\n  hparams.label_smoothing = 0.1\n  hparams.clip_grad_norm = 2.0\n  hparams.num_hidden_layers = 4\n  hparams.kernel_height = 3\n  hparams.kernel_width = 1\n  hparams.learning_rate_decay_scheme = \"exp\"\n  hparams.learning_rate = 0.05\n  hparams.learning_rate_warmup_steps = 3000\n  hparams.initializer_gain = 1.0\n  hparams.weight_decay = 3.0\n  hparams.num_sampled_classes = 0\n  hparams.sampling_method = \"argmax\"\n  hparams.optimizer_adam_epsilon = 1e-6\n  hparams.optimizer_adam_beta1 = 0.85\n  hparams.optimizer_adam_beta2 = 0.997\n  hparams.add_hparam(\"num_block_repeat\", 4)\n  return hparams", "output": "Set of hyperparameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_pb(self):\n        \"\"\"\n        \"\"\"\n        union = table_v2_pb2.GcRule.Union(rules=[rule.to_pb() for rule in self.rules])\n        return table_v2_pb2.GcRule(union=union)", "output": "Converts the union into a single GC rule as a protobuf.\n\n        :rtype: :class:`.table_v2_pb2.GcRule`\n        :returns: The converted current object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_option(**kwargs):\n        \"\"\"\n        \"\"\"\n        if len(kwargs) != 1:\n            raise TypeError(_BAD_OPTION_ERR)\n\n        name, value = kwargs.popitem()\n        if name == \"last_update_time\":\n            return _helpers.LastUpdateOption(value)\n        elif name == \"exists\":\n            return _helpers.ExistsOption(value)\n        else:\n            extra = \"{!r} was provided\".format(name)\n            raise TypeError(_BAD_OPTION_ERR, extra)", "output": "Create a write option for write operations.\n\n        Write operations include :meth:`~.DocumentReference.set`,\n        :meth:`~.DocumentReference.update` and\n        :meth:`~.DocumentReference.delete`.\n\n        One of the following keyword arguments must be provided:\n\n        * ``last_update_time`` (:class:`google.protobuf.timestamp_pb2.\\\n               Timestamp`): A timestamp. When set, the target document must\n               exist and have been last updated at that time. Protobuf\n               ``update_time`` timestamps are typically returned from methods\n               that perform write operations as part of a \"write result\"\n               protobuf or directly.\n        * ``exists`` (:class:`bool`): Indicates if the document being modified\n              should already exist.\n\n        Providing no argument would make the option have no effect (so\n        it is not allowed). Providing multiple would be an apparent\n        contradiction, since ``last_update_time`` assumes that the\n        document **was** updated (it can't have been updated if it\n        doesn't exist) and ``exists`` indicate that it is unknown if the\n        document exists or not.\n\n        Args:\n            kwargs (Dict[str, Any]): The keyword arguments described above.\n\n        Raises:\n            TypeError: If anything other than exactly one argument is\n                provided by the caller.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dataset_status_cli(self, dataset, dataset_opt=None):\n        \"\"\" \n        \"\"\"\n        dataset = dataset or dataset_opt\n        return self.dataset_status(dataset)", "output": "wrapper for client for dataset_status, with additional\n            dataset_opt to get the status of a dataset from the API\n             Parameters\n            ==========\n            dataset_opt: an alternative to dataset", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rotate_v2(array, k):\n    \"\"\"\n    \n    \"\"\"\n    array = array[:]\n\n    def reverse(arr, a, b):\n        while a < b:\n            arr[a], arr[b] = arr[b], arr[a]\n            a += 1\n            b -= 1\n\n    n = len(array)\n    k = k % n\n    reverse(array, 0, n - k - 1)\n    reverse(array, n - k, n - 1)\n    reverse(array, 0, n - 1)\n    return array", "output": "Reverse segments of the array, followed by the entire array\n    T(n)- O(n)\n    :type array: List[int]\n    :type k: int\n    :rtype: void Do not return anything, modify nums in-place instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_employees(order_by='id'):\n    '''\n    \n    '''\n    ret = {}\n    status, result = _query(action='employees', command='directory')\n    root = ET.fromstring(result)\n    directory = root.getchildren()\n    for cat in directory:\n        if cat.tag != 'employees':\n            continue\n        for item in cat:\n            emp_id = item.items()[0][1]\n            emp_ret = {'id': emp_id}\n            for details in item.getchildren():\n                emp_ret[details.items()[0][1]] = details.text\n            ret[emp_ret[order_by]] = emp_ret\n    return ret", "output": "Show all employees for this company.\n\n    CLI Example:\n\n        salt myminion bamboohr.list_employees\n\n    By default, the return data will be keyed by ID. However, it can be ordered\n    by any other field. Keep in mind that if the field that is chosen contains\n    duplicate values (i.e., location is used, for a company which only has one\n    location), then each duplicate value will be overwritten by the previous.\n    Therefore, it is advisable to only sort by fields that are guaranteed to be\n    unique.\n\n    CLI Examples:\n\n        salt myminion bamboohr.list_employees order_by=id\n        salt myminion bamboohr.list_employees order_by=displayName\n        salt myminion bamboohr.list_employees order_by=workEmail", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_commit_response(commit_response_pb):\n    \"\"\"\n    \"\"\"\n    mut_results = commit_response_pb.mutation_results\n    index_updates = commit_response_pb.index_updates\n    completed_keys = [\n        mut_result.key for mut_result in mut_results if mut_result.HasField(\"key\")\n    ]  # Message field (Key)\n    return index_updates, completed_keys", "output": "Extract response data from a commit response.\n\n    :type commit_response_pb: :class:`.datastore_pb2.CommitResponse`\n    :param commit_response_pb: The protobuf response from a commit request.\n\n    :rtype: tuple\n    :returns: The pair of the number of index updates and a list of\n              :class:`.entity_pb2.Key` for each incomplete key\n              that was completed in the commit.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect_dimensions(__funcname=_qualified_name, **dimensions):\n    \"\"\"\n    \n    \"\"\"\n    if isinstance(__funcname, str):\n        def get_funcname(_):\n            return __funcname\n    else:\n        get_funcname = __funcname\n\n    def _expect_dimension(expected_ndim):\n        def _check(func, argname, argvalue):\n            actual_ndim = argvalue.ndim\n            if actual_ndim != expected_ndim:\n                if actual_ndim == 0:\n                    actual_repr = 'scalar'\n                else:\n                    actual_repr = \"%d-D array\" % actual_ndim\n                raise ValueError(\n                    \"{func}() expected a {expected:d}-D array\"\n                    \" for argument {argname!r}, but got a {actual}\"\n                    \" instead.\".format(\n                        func=get_funcname(func),\n                        expected=expected_ndim,\n                        argname=argname,\n                        actual=actual_repr,\n                    )\n                )\n            return argvalue\n        return _check\n    return preprocess(**valmap(_expect_dimension, dimensions))", "output": "Preprocessing decorator that verifies inputs are numpy arrays with a\n    specific dimensionality.\n\n    Examples\n    --------\n    >>> from numpy import array\n    >>> @expect_dimensions(x=1, y=2)\n    ... def foo(x, y):\n    ...    return x[0] + y[0, 0]\n    ...\n    >>> foo(array([1, 1]), array([[1, 1], [2, 2]]))\n    2\n    >>> foo(array([1, 1]), array([1, 1]))  # doctest: +NORMALIZE_WHITESPACE\n    ...                                    # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n       ...\n    ValueError: ...foo() expected a 2-D array for argument 'y',\n    but got a 1-D array instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wider_next_conv(layer, start_dim, total_dim, n_add, weighted=True):\n    '''\n    '''\n    n_dim = get_n_dim(layer)\n    if not weighted:\n        return get_conv_class(n_dim)(layer.input_channel + n_add,\n                                     layer.filters,\n                                     kernel_size=layer.kernel_size,\n                                     stride=layer.stride)\n    n_filters = layer.filters\n    teacher_w, teacher_b = layer.get_weights()\n\n    new_weight_shape = list(teacher_w.shape)\n    new_weight_shape[1] = n_add\n    new_weight = np.zeros(tuple(new_weight_shape))\n\n    student_w = np.concatenate((teacher_w[:, :start_dim, ...].copy(),\n                                add_noise(new_weight, teacher_w),\n                                teacher_w[:, start_dim:total_dim, ...].copy()), axis=1)\n    new_layer = get_conv_class(n_dim)(layer.input_channel + n_add,\n                                      n_filters,\n                                      kernel_size=layer.kernel_size,\n                                      stride=layer.stride)\n    new_layer.set_weights((student_w, teacher_b))\n    return new_layer", "output": "wider next conv layer.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def safe_listdir(path):\n    \"\"\"\n    \n    \"\"\"\n    try:\n        return os.listdir(path)\n    except (PermissionError, NotADirectoryError):\n        pass\n    except OSError as e:\n        # Ignore the directory if does not exist, not a directory or\n        # permission denied\n        ignorable = (\n            e.errno in (errno.ENOTDIR, errno.EACCES, errno.ENOENT)\n            # Python 2 on Windows needs to be handled this way :(\n            or getattr(e, \"winerror\", None) == 267\n        )\n        if not ignorable:\n            raise\n    return ()", "output": "Attempt to list contents of path, but suppress some exceptions.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_file_combobox(self, text, choices, option, default=NoDefault,\r\n                             tip=None, restart=False, filters=None,\r\n                             adjust_to_contents=False,\r\n                             default_line_edit=False):\r\n        \"\"\"\"\"\"\r\n        combobox = FileComboBox(self, adjust_to_contents=adjust_to_contents,\r\n                                default_line_edit=default_line_edit)\r\n        combobox.restart_required = restart\r\n        combobox.label_text = text\r\n        edit = combobox.lineEdit()\r\n        edit.label_text = text\r\n        edit.restart_required = restart\r\n        self.lineedits[edit] = (option, default)\r\n\r\n        if tip is not None:\r\n            combobox.setToolTip(tip)\r\n        combobox.addItems(choices)\r\n\r\n        msg = _('Invalid file path')\r\n        self.validate_data[edit] = (osp.isfile, msg)\r\n        browse_btn = QPushButton(ima.icon('FileIcon'), '', self)\r\n        browse_btn.setToolTip(_(\"Select file\"))\r\n        browse_btn.clicked.connect(lambda: self.select_file(edit, filters))\r\n\r\n        layout = QGridLayout()\r\n        layout.addWidget(combobox, 0, 0, 0, 9)\r\n        layout.addWidget(browse_btn, 0, 10)\r\n        layout.setContentsMargins(0, 0, 0, 0)\r\n        widget = QWidget(self)\r\n        widget.combobox = combobox\r\n        widget.browse_btn = browse_btn\r\n        widget.setLayout(layout)\r\n\r\n        return widget", "output": "choices: couples (name, key)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_metadata_for_build_wheel(metadata_directory, config_settings):\n    \"\"\"\n    \"\"\"\n    backend = _build_backend()\n    try:\n        hook = backend.prepare_metadata_for_build_wheel\n    except AttributeError:\n        return _get_wheel_metadata_from_wheel(backend, metadata_directory,\n                                              config_settings)\n    else:\n        return hook(metadata_directory, config_settings)", "output": "Invoke optional prepare_metadata_for_build_wheel\n\n    Implements a fallback by building a wheel if the hook isn't defined.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def merge_diff(initial_config=None,\n               initial_path=None,\n               merge_config=None,\n               merge_path=None,\n               saltenv='base'):\n    '''\n    \n    '''\n    if initial_path:\n        initial_config = __salt__['cp.get_file_str'](initial_path, saltenv=saltenv)\n    candidate_config = merge_text(initial_config=initial_config,\n                                  merge_config=merge_config,\n                                  merge_path=merge_path,\n                                  saltenv=saltenv)\n    clean_running_dict = tree(config=initial_config)\n    clean_running = _print_config_text(clean_running_dict)\n    return _get_diff_text(clean_running, candidate_config)", "output": "Return the merge diff, as text, after merging the merge config into the\n    initial config.\n\n    initial_config\n        The initial configuration sent as text. This argument is ignored when\n        ``initial_path`` is set.\n\n    initial_path\n        Absolute or remote path from where to load the initial configuration\n        text. This argument allows any URI supported by\n        :py:func:`cp.get_url <salt.modules.cp.get_url>`), e.g., ``salt://``,\n        ``https://``, ``s3://``, ``ftp:/``, etc.\n\n    merge_config\n        The config to be merged into the initial config, sent as text. This\n        argument is ignored when ``merge_path`` is set.\n\n    merge_path\n        Absolute or remote path from where to load the merge configuration\n        text. This argument allows any URI supported by\n        :py:func:`cp.get_url <salt.modules.cp.get_url>`), e.g., ``salt://``,\n        ``https://``, ``s3://``, ``ftp:/``, etc.\n\n    saltenv: ``base``\n        Salt fileserver environment from which to retrieve the file.\n        Ignored if ``initial_path`` or ``merge_path`` is not a ``salt://`` URL.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' iosconfig.merge_diff initial_path=salt://path/to/running.cfg merge_path=salt://path/to/merge.cfg", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def new(self):\n        '''\n        \n        '''\n        dbname = self._label()\n        self.db_path = os.path.join(self.path, dbname)\n        if not os.path.exists(self.db_path):\n            os.makedirs(self.db_path)\n        self._opened = True\n        self.list_tables()\n\n        return dbname", "output": "Create a new database and opens it.\n\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resize_imgs(self, targ, new_path, resume=True, fn=None):\n        \"\"\"\n        \n        \"\"\"\n        dest = resize_imgs(self.fnames, targ, self.path, new_path, resume, fn)\n        return self.__class__(self.fnames, self.y, self.transform, dest)", "output": "resize all images in the dataset and save them to `new_path`\n        \n        Arguments:\n        targ (int): the target size\n        new_path (string): the new folder to save the images\n        resume (bool): if true (default), allow resuming a partial resize operation by checking for the existence\n        of individual images rather than the existence of the directory\n        fn (function): custom resizing function Img -> Img", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_package_set(package_set, should_ignore=None):\n    # type: (PackageSet, Optional[Callable[[str], bool]]) -> CheckResult\n    \"\"\"\n    \"\"\"\n    if should_ignore is None:\n        def should_ignore(name):\n            return False\n\n    missing = dict()\n    conflicting = dict()\n\n    for package_name in package_set:\n        # Info about dependencies of package_name\n        missing_deps = set()  # type: Set[Missing]\n        conflicting_deps = set()  # type: Set[Conflicting]\n\n        if should_ignore(package_name):\n            continue\n\n        for req in package_set[package_name].requires:\n            name = canonicalize_name(req.project_name)  # type: str\n\n            # Check if it's missing\n            if name not in package_set:\n                missed = True\n                if req.marker is not None:\n                    missed = req.marker.evaluate()\n                if missed:\n                    missing_deps.add((name, req))\n                continue\n\n            # Check if there's a conflict\n            version = package_set[name].version  # type: str\n            if not req.specifier.contains(version, prereleases=True):\n                conflicting_deps.add((name, version, req))\n\n        if missing_deps:\n            missing[package_name] = sorted(missing_deps, key=str)\n        if conflicting_deps:\n            conflicting[package_name] = sorted(conflicting_deps, key=str)\n\n    return missing, conflicting", "output": "Check if a package set is consistent\n\n    If should_ignore is passed, it should be a callable that takes a\n    package name and returns a boolean.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_status(self, status_code: int, reason: str = None) -> None:\n        \"\"\"\n        \"\"\"\n        self._status_code = status_code\n        if reason is not None:\n            self._reason = escape.native_str(reason)\n        else:\n            self._reason = httputil.responses.get(status_code, \"Unknown\")", "output": "Sets the status code for our response.\n\n        :arg int status_code: Response status code.\n        :arg str reason: Human-readable reason phrase describing the status\n            code. If ``None``, it will be filled in from\n            `http.client.responses` or \"Unknown\".\n\n        .. versionchanged:: 5.0\n\n           No longer validates that the response code is in\n           `http.client.responses`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def text_has_been_edited(self, text):\r\n        \"\"\"\"\"\"\r\n        self.find(changed=True, forward=True, start_highlight_timer=True)", "output": "Find text has been edited (this slot won't be triggered when \r\n        setting the search pattern combo box text programmatically)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_url(self):\n        '''\n        \n        '''\n        if self.role in ('git_pillar', 'winrepo'):\n            # With winrepo and git_pillar, the remote is specified in the\n            # format '<branch> <url>', so that we can get a unique identifier\n            # to hash for each remote.\n            try:\n                self.branch, self.url = self.id.split(None, 1)\n            except ValueError:\n                self.branch = self.conf['branch']\n                self.url = self.id\n        else:\n            self.url = self.id", "output": "Examine self.id and assign self.url (and self.branch, for git_pillar)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_virtualserver(self, name):\n        '''\n        \n        '''\n        vs = self.bigIP.LocalLB.VirtualServer\n        for v in vs.get_list():\n            if v.split('/')[-1] == name:\n                return True\n        return False", "output": "Check to see if a virtual server exists", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table_data_client(self):\n        \"\"\"\n        \"\"\"\n        if self._table_data_client is None:\n            self._table_data_client = _create_gapic_client(bigtable_v2.BigtableClient)(\n                self\n            )\n        return self._table_data_client", "output": "Getter for the gRPC stub used for the Table Admin API.\n\n        For example:\n\n        .. literalinclude:: snippets.py\n            :start-after: [START bigtable_table_data_client]\n            :end-before: [END bigtable_table_data_client]\n\n        :rtype: :class:`.bigtable_v2.BigtableClient`\n        :returns: A BigtableClient object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _shallow_copy_with_infer(self, values, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        attributes['copy'] = False\n        if not len(values) and 'dtype' not in kwargs:\n            attributes['dtype'] = self.dtype\n        if self._infer_as_myclass:\n            try:\n                return self._constructor(values, **attributes)\n            except (TypeError, ValueError):\n                pass\n        return Index(values, **attributes)", "output": "Create a new Index inferring the class with passed value, don't copy\n        the data, use the same object attributes with passed in attributes\n        taking precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        kwargs : updates the default attributes for this Index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def posttrans_hook(conduit):\n    \"\"\"\n    \n    \"\"\"\n    # Integrate Yum with Salt\n    if 'SALT_RUNNING' not in os.environ:\n        with open(CK_PATH, 'w') as ck_fh:\n            ck_fh.write('{chksum} {mtime}\\n'.format(chksum=_get_checksum(), mtime=_get_mtime()))", "output": "Hook after the package installation transaction.\n\n    :param conduit:\n    :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _closest_ref_length(references, trans_length):\n    \"\"\"\n    \"\"\"\n    ref_lengths = (len(reference) for reference in references)\n    closest_ref_len = min(ref_lengths,\n                          key=lambda ref_length: (abs(ref_length - trans_length), ref_length))\n\n    return closest_ref_len", "output": "Find the reference that has the closest length to the translation.\n\n    Parameters\n    ----------\n    references: list(list(str))\n        A list of references.\n    trans_length: int\n        Length of the translation.\n\n    Returns\n    -------\n    closest_ref_len: int\n        Length of the reference that is closest to the translation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def store(bank, key, data, cachedir):\n    '''\n    \n    '''\n    base = os.path.join(cachedir, os.path.normpath(bank))\n    try:\n        os.makedirs(base)\n    except OSError as exc:\n        if exc.errno != errno.EEXIST:\n            raise SaltCacheError(\n                'The cache directory, {0}, could not be created: {1}'.format(\n                    base, exc\n                )\n            )\n\n    outfile = os.path.join(base, '{0}.p'.format(key))\n    tmpfh, tmpfname = tempfile.mkstemp(dir=base)\n    os.close(tmpfh)\n    try:\n        with salt.utils.files.fopen(tmpfname, 'w+b') as fh_:\n            fh_.write(__context__['serial'].dumps(data))\n        # On Windows, os.rename will fail if the destination file exists.\n        salt.utils.atomicfile.atomic_rename(tmpfname, outfile)\n    except IOError as exc:\n        raise SaltCacheError(\n            'There was an error writing the cache file, {0}: {1}'.format(\n                base, exc\n            )\n        )", "output": "Store information in a file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def host_status(hostname=None, **kwargs):\n    '''\n    \n    '''\n\n    if not hostname:\n        raise CommandExecutionError('Missing hostname parameter')\n\n    target = 'host'\n    numeric = kwargs.get('numeric')\n    data = _status_query(target, hostname, enumerate=numeric)\n\n    ret = {'result': data['result']}\n    if ret['result']:\n        ret['status'] = data.get('json_data', {}).get('data', {}).get(target, {}).get('status',\n                                                                                      not numeric and 'Unknown' or 2)\n    else:\n        ret['error'] = data['error']\n    return ret", "output": "Check status of a particular host By default\n    statuses are returned in a numeric format.\n\n    Parameters:\n\n    hostname\n        The hostname to check the status of the service in Nagios.\n\n    numeric\n        Turn to false in order to return status in text format\n        ('OK' instead of 0, 'Warning' instead of 1 etc)\n\n    :return: status:     'OK', 'Warning', 'Critical' or 'Unknown'\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nagios_rpc.host_status hostname=webserver.domain.com\n        salt '*' nagios_rpc.host_status hostname=webserver.domain.com numeric=False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write(self, len, buf):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlOutputBufferWrite(self._o, len, buf)\n        return ret", "output": "Write the content of the array in the output I/O buffer\n          This routine handle the I18N transcoding from internal\n          UTF-8 The buffer is lossless, i.e. will store in case of\n           partial or delayed writes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_host_keys(self, filename):\n        \"\"\"\n        \n        \"\"\"\n        self._host_keys_filename = filename\n        self._host_keys.load(filename)", "output": "Load host keys from a local host-key file.  Host keys read with this\n        method will be checked after keys loaded via `load_system_host_keys`,\n        but will be saved back by `save_host_keys` (so they can be modified).\n        The missing host key policy `.AutoAddPolicy` adds keys to this set and\n        saves them, when connecting to a previously-unknown server.\n\n        This method can be called multiple times.  Each new set of host keys\n        will be merged with the existing set (new replacing old if there are\n        conflicts).  When automatically saving, the last hostname is used.\n\n        :param str filename: the filename to read\n\n        :raises: ``IOError`` -- if the filename could not be read", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _checkpoint_trial_if_needed(self, trial):\n        \"\"\"\"\"\"\n        if trial.should_checkpoint():\n            # Save trial runtime if possible\n            if hasattr(trial, \"runner\") and trial.runner:\n                self.trial_executor.save(trial, storage=Checkpoint.DISK)\n            self.trial_executor.try_checkpoint_metadata(trial)", "output": "Checkpoints trial based off trial.last_result.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _invalid(m, comment=INVALID_RESPONSE, out=None):\n    '''\n    \n    '''\n    return _set_status(m, status=False, comment=comment, out=out)", "output": "Return invalid status.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_subnet(subnet_id=None, subnet_name=None, region=None, key=None,\n                  keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    return _delete_resource(resource='subnet', name=subnet_name,\n                            resource_id=subnet_id, region=region, key=key,\n                            keyid=keyid, profile=profile)", "output": "Given a subnet ID or name, delete the subnet.\n\n    Returns True if the subnet was deleted and returns False if the subnet was not deleted.\n\n    .. versionchanged:: 2015.8.0\n        Added subnet_name argument\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_vpc.delete_subnet 'subnet-6a1fe403'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_options(slot, appointment_type, date, booking_map):\n    \"\"\"\n    \n    \"\"\"\n    day_strings = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if slot == 'AppointmentType':\n        return [\n            {'text': 'cleaning (30 min)', 'value': 'cleaning'},\n            {'text': 'root canal (60 min)', 'value': 'root canal'},\n            {'text': 'whitening (30 min)', 'value': 'whitening'}\n        ]\n    elif slot == 'Date':\n        # Return the next five weekdays.\n        options = []\n        potential_date = datetime.datetime.today()\n        while len(options) < 5:\n            potential_date = potential_date + datetime.timedelta(days=1)\n            if potential_date.weekday() < 5:\n                options.append({'text': '{}-{} ({})'.format((potential_date.month), potential_date.day, day_strings[potential_date.weekday()]),\n                                'value': potential_date.strftime('%A, %B %d, %Y')})\n        return options\n    elif slot == 'Time':\n        # Return the availabilities on the given date.\n        if not appointment_type or not date:\n            return None\n\n        availabilities = try_ex(lambda: booking_map[date])\n        if not availabilities:\n            return None\n\n        availabilities = get_availabilities_for_duration(get_duration(appointment_type), availabilities)\n        if len(availabilities) == 0:\n            return None\n\n        options = []\n        for i in range(min(len(availabilities), 5)):\n            options.append({'text': build_time_output_string(availabilities[i]), 'value': build_time_output_string(availabilities[i])})\n\n        return options", "output": "Build a list of potential options for a given slot, to be used in responseCard generation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_table(self):\n        \"\"\"\n        \n        \"\"\"\n\n        gso_table = self._gso_table\n        gso_df = self.df\n        columns = list(gso_df.columns)\n        selected = gso_df[self.columns]\n        col_index = [(col, columns.index(col)) for col in self.columns]\n        keys = np.empty(selected.shape, dtype=np.uint64)\n        for o, (idx, row) in enumerate(selected.iterrows()):\n            for j, (col, v) in enumerate(col_index):\n                val = row[col]\n                # Allow columns with mixed str and None (GH 23633)\n                val = '' if val is None else val\n                key = gso_table.get(val, None)\n                if key is None:\n                    # Stata prefers human numbers\n                    key = (v + 1, o + 1)\n                    gso_table[val] = key\n                keys[o, j] = self._convert_key(key)\n        for i, col in enumerate(self.columns):\n            gso_df[col] = keys[:, i]\n\n        return gso_table, gso_df", "output": "Generates the GSO lookup table for the DataFRame\n\n        Returns\n        -------\n        gso_table : OrderedDict\n            Ordered dictionary using the string found as keys\n            and their lookup position (v,o) as values\n        gso_df : DataFrame\n            DataFrame where strl columns have been converted to\n            (v,o) values\n\n        Notes\n        -----\n        Modifies the DataFrame in-place.\n\n        The DataFrame returned encodes the (v,o) values as uint64s. The\n        encoding depends on teh dta version, and can be expressed as\n\n        enc = v + o * 2 ** (o_size * 8)\n\n        so that v is stored in the lower bits and o is in the upper\n        bits. o_size is\n\n          * 117: 4\n          * 118: 6\n          * 119: 5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def del_export(exports='/etc/exports', path=None):\n    '''\n    \n    '''\n    edict = list_exports(exports)\n    del edict[path]\n    _write_exports(exports, edict)\n    return edict", "output": "Remove an export\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nfs.del_export /media/storage", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rand(x_bounds, x_types):\n    '''\n    \n    '''\n    outputs = []\n\n    for i, _ in enumerate(x_bounds):\n        if x_types[i] == \"discrete_int\":\n            temp = x_bounds[i][random.randint(0, len(x_bounds[i]) - 1)]\n            outputs.append(temp)\n        elif x_types[i] == \"range_int\":\n            temp = random.randint(x_bounds[i][0], x_bounds[i][1])\n            outputs.append(temp)\n        elif x_types[i] == \"range_continuous\":\n            temp = random.uniform(x_bounds[i][0], x_bounds[i][1])\n            outputs.append(temp)\n        else:\n            return None\n\n    return outputs", "output": "Random generate variable value within their bounds", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def name(self, pretty=False):\n        \"\"\"\n        \n        \"\"\"\n        name = self.os_release_attr('name') \\\n            or self.lsb_release_attr('distributor_id') \\\n            or self.distro_release_attr('name') \\\n            or self.uname_attr('name')\n        if pretty:\n            name = self.os_release_attr('pretty_name') \\\n                or self.lsb_release_attr('description')\n            if not name:\n                name = self.distro_release_attr('name') \\\n                       or self.uname_attr('name')\n                version = self.version(pretty=True)\n                if version:\n                    name = name + ' ' + version\n        return name or ''", "output": "Return the name of the OS distribution, as a string.\n\n        For details, see :func:`distro.name`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cond_init(m:nn.Module, init_func:LayerFunc):\n    \"\"\n    if (not isinstance(m, bn_types)) and requires_grad(m): init_default(m, init_func)", "output": "Initialize the non-batchnorm layers of `m` with `init_func`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_dtype(self, dtype):\n        \"\"\"\n        \n        \"\"\"\n        codes = _recode_for_categories(self.codes, self.categories,\n                                       dtype.categories)\n        return type(self)(codes, dtype=dtype, fastpath=True)", "output": "Internal method for directly updating the CategoricalDtype\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Notes\n        -----\n        We don't do any validation here. It's assumed that the dtype is\n        a (valid) instance of `CategoricalDtype`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_bytes(self, exclude=tuple(), disable=None, **kwargs):\n        \"\"\"\n        \"\"\"\n        if disable is not None:\n            deprecation_warning(Warnings.W014)\n            exclude = disable\n        serializers = OrderedDict()\n        serializers[\"vocab\"] = lambda: self.vocab.to_bytes()\n        serializers[\"tokenizer\"] = lambda: self.tokenizer.to_bytes(exclude=[\"vocab\"])\n        serializers[\"meta.json\"] = lambda: srsly.json_dumps(self.meta)\n        for name, proc in self.pipeline:\n            if name in exclude:\n                continue\n            if not hasattr(proc, \"to_bytes\"):\n                continue\n            serializers[name] = lambda proc=proc: proc.to_bytes(exclude=[\"vocab\"])\n        exclude = util.get_serialization_exclude(serializers, exclude, kwargs)\n        return util.to_bytes(serializers, exclude)", "output": "Serialize the current state to a binary string.\n\n        exclude (list): Names of components or serialization fields to exclude.\n        RETURNS (bytes): The serialized form of the `Language` object.\n\n        DOCS: https://spacy.io/api/language#to_bytes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset ():\n    \"\"\" \n    \"\"\"\n    global __prefixes_suffixes, __suffixes_to_types, __types, __rule_names_to_types, __target_suffixes_cache\n\n    __register_features ()\n\n    # Stores suffixes for generated targets.\n    __prefixes_suffixes = [property.PropertyMap(), property.PropertyMap()]\n\n    # Maps suffixes to types\n    __suffixes_to_types = {}\n\n    # A map with all the registered types, indexed by the type name\n    # Each entry is a dictionary with following values:\n    # 'base': the name of base type or None if type has no base\n    # 'derived': a list of names of type which derive from this one\n    # 'scanner': the scanner class registered for this type, if any\n    __types = {}\n\n    # Caches suffixes for targets with certain properties.\n    __target_suffixes_cache = {}", "output": "Clear the module state. This is mainly for testing purposes.\n        Note that this must be called _after_ resetting the module 'feature'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rest_post(url, data, timeout, show_error=False):\n    ''''''\n    try:\n        response = requests.post(url, headers={'Accept': 'application/json', 'Content-Type': 'application/json'},\\\n                                 data=data, timeout=timeout)\n        return response\n    except Exception as exception:\n        if show_error:\n            print_error(exception)\n        return None", "output": "Call rest post method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def teardown_tempdir(dir):\n    \n    '''\n\n    if ssh_conn:\n        delete_tree(dir)\n\n    assert_valid_dir(dir)\n    shutil.rmtree(dir)", "output": "r'''\n    Cleanup temporary directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _insert(self, key, records, count):\n        \"\"\"  \"\"\"\n        if key not in self.records:\n            assert key not in self.counts\n            self.records[key] = records\n            self.counts[key] = count\n        else:\n            self.records[key] = np.vstack((self.records[key], records))\n            assert key in self.counts\n            self.counts[key] += count", "output": "Insert records according to key", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def json_iso_dttm_ser(obj, pessimistic: Optional[bool] = False):\n    \"\"\"\n    \n    \"\"\"\n    val = base_json_conv(obj)\n    if val is not None:\n        return val\n    if isinstance(obj, (datetime, date, time, pd.Timestamp)):\n        obj = obj.isoformat()\n    else:\n        if pessimistic:\n            return 'Unserializable [{}]'.format(type(obj))\n        else:\n            raise TypeError(\n                'Unserializable object {} of type {}'.format(obj, type(obj)))\n    return obj", "output": "json serializer that deals with dates\n\n    >>> dttm = datetime(1970, 1, 1)\n    >>> json.dumps({'dttm': dttm}, default=json_iso_dttm_ser)\n    '{\"dttm\": \"1970-01-01T00:00:00\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_token(url, email, secret_key):\n    '''\n    \n    '''\n    url = urlparse.urljoin(url, 'authenticate')\n    data_dict = {\"email\": email, \"secret_key\": secret_key}\n    query = salt.utils.http.query(url, data=data_dict, method='POST',\n                                  decode=True)\n    error = query.get('error')\n    if error:\n        log.error('Cannot obtain NSoT authentication token due to: %s.', error)\n        log.debug('Please verify NSoT URL %s is reachable and email %s is valid', url, email)\n        return False\n    else:\n        log.debug('successfully obtained token from nsot!')\n        return query['dict'].get('auth_token')", "output": "retrieve the auth_token from nsot\n\n    :param url: str\n    :param email: str\n    :param secret_key: str\n    :return: str", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enable_auto_login(name, password):\n    '''\n    \n    '''\n    # Make the entry into the defaults file\n    cmd = ['defaults',\n           'write',\n           '/Library/Preferences/com.apple.loginwindow.plist',\n           'autoLoginUser',\n           name]\n    __salt__['cmd.run'](cmd)\n    current = get_auto_login()\n\n    # Create/Update the kcpassword file with an obfuscated password\n    o_password = _kcpassword(password=password)\n    with salt.utils.files.set_umask(0o077):\n        with salt.utils.files.fopen('/etc/kcpassword', 'w' if six.PY2 else 'wb') as fd:\n            fd.write(o_password)\n\n    return current if isinstance(current, bool) else current.lower() == name.lower()", "output": ".. versionadded:: 2016.3.0\n\n    Configures the machine to auto login with the specified user\n\n    Args:\n\n        name (str): The user account use for auto login\n\n        password (str): The password to user for auto login\n\n            .. versionadded:: 2017.7.3\n\n    Returns:\n        bool: ``True`` if successful, otherwise ``False``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' user.enable_auto_login stevej", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_frame(stack, start=0):\n  \"\"\"\"\"\"\n  # We want to find the first place where the layer was called\n  # that is *not* an __init__ function of an inheriting layer.\n  frame = inspect.getframeinfo(stack[start][0])\n  # If we are in an init, move on.\n  if frame.function == '__init__':\n    return _find_frame(stack, start + 1)\n  return frame", "output": "Find the frame with the caller on the stack.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(df, path):\n        \"\"\"\n        \n        \"\"\"\n        buffer = []\n        size = _reset_df_and_get_size(df)\n        with get_tqdm(total=size) as pbar:\n            for dp in df:\n                buffer.append(dp)\n                pbar.update()\n        np.savez_compressed(path, buffer=np.asarray(buffer, dtype=np.object))", "output": "Args:\n            df (DataFlow): the DataFlow to serialize.\n            path (str): output npz file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_setup() -> Tuple[PackagesType, PackagesType, Set[str], Set[str]]:\n    \"\"\"\"\"\"\n    essential_packages: PackagesType = {}\n    test_packages: PackagesType = {}\n    essential_duplicates: Set[str] = set()\n    test_duplicates: Set[str] = set()\n\n    with open('setup.py') as setup_file:\n        contents = setup_file.read()\n\n    # Parse out essential packages.\n    package_string = re.search(r\"\"\"install_requires=\\[[\\s\\n]*['\"](.*?)['\"],?[\\s\\n]*\\]\"\"\",\n                               contents, re.DOTALL).groups()[0].strip()\n    for package in re.split(r\"\"\"['\"],[\\s\\n]+['\"]\"\"\", package_string):\n        module, version = parse_package(package)\n        if module in essential_packages:\n            essential_duplicates.add(module)\n        else:\n            essential_packages[module] = version\n\n    # Parse packages only needed for testing.\n    package_string = re.search(r\"\"\"tests_require=\\[[\\s\\n]*['\"](.*?)['\"],?[\\s\\n]*\\]\"\"\",\n                               contents, re.DOTALL).groups()[0].strip()\n    for package in re.split(r\"\"\"['\"],[\\s\\n]+['\"]\"\"\", package_string):\n        module, version = parse_package(package)\n        if module in test_packages:\n            test_duplicates.add(module)\n        else:\n            test_packages[module] = version\n\n    return essential_packages, test_packages, essential_duplicates, test_duplicates", "output": "Parse all dependencies out of the setup.py script.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_id(name=None, cidr=None, tags=None, region=None, key=None, keyid=None,\n           profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        return {'id': _get_id(vpc_name=name, cidr=cidr, tags=tags, region=region,\n                              key=key, keyid=keyid, profile=profile)}\n    except BotoServerError as e:\n        return {'error': __utils__['boto.get_error'](e)}", "output": "Given VPC properties, return the VPC id if a match is found.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_vpc.get_id myvpc", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def autoencoder_basic():\n  \"\"\"\"\"\"\n  hparams = common_hparams.basic_params1()\n  hparams.optimizer = \"adam\"\n  hparams.learning_rate_constant = 0.0002\n  hparams.learning_rate_warmup_steps = 500\n  hparams.learning_rate_schedule = \"constant * linear_warmup\"\n  hparams.label_smoothing = 0.0\n  hparams.batch_size = 128\n  hparams.hidden_size = 64\n  hparams.num_hidden_layers = 5\n  hparams.initializer = \"uniform_unit_scaling\"\n  hparams.initializer_gain = 1.0\n  hparams.weight_decay = 0.0\n  hparams.kernel_height = 4\n  hparams.kernel_width = 4\n  hparams.dropout = 0.05\n  hparams.add_hparam(\"max_hidden_size\", 1024)\n  hparams.add_hparam(\"bottleneck_bits\", 128)\n  hparams.add_hparam(\"bottleneck_shared_bits\", 0)\n  hparams.add_hparam(\"bottleneck_shared_bits_start_warmup\", 0)\n  hparams.add_hparam(\"bottleneck_shared_bits_stop_warmup\", 0)\n  hparams.add_hparam(\"bottleneck_noise\", 0.1)\n  hparams.add_hparam(\"bottleneck_warmup_steps\", 2000)\n  hparams.add_hparam(\"sample_height\", 32)\n  hparams.add_hparam(\"sample_width\", 32)\n  hparams.add_hparam(\"discriminator_batchnorm\", True)\n  hparams.add_hparam(\"num_sliced_vecs\", 20000)\n  hparams.add_hparam(\"sliced_do_tanh\", int(True))\n  hparams.add_hparam(\"discriminator_size\", 256)\n  hparams.add_hparam(\"discriminator_kernel_size\", 6)\n  hparams.add_hparam(\"discriminator_strides\", 4)\n  hparams.add_hparam(\"discriminator_pure_mean\", int(False))\n  hparams.add_hparam(\"code_loss_factor\", 1.0)\n  hparams.add_hparam(\"gan_codes_warmup_steps\", 16000)\n  hparams.add_hparam(\"gan_loss_factor\", 0.0)\n  hparams.add_hparam(\"bottleneck_l2_factor\", 0.05)\n  hparams.add_hparam(\"gumbel_temperature\", 0.5)\n  hparams.add_hparam(\"gumbel_noise_factor\", 0.5)\n  hparams.add_hparam(\"vq_temperature\", 0.001)\n  hparams.add_hparam(\"use_vq_loss\", int(False))\n  hparams.add_hparam(\"discriminator\", \"double\")\n  return hparams", "output": "Basic autoencoder model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sorted_resource_labels(labels):\n    \"\"\"\"\"\"\n    head = [label for label in TOP_RESOURCE_LABELS if label in labels]\n    tail = sorted(label for label in labels if label not in TOP_RESOURCE_LABELS)\n    return head + tail", "output": "Sort label names, putting well-known resource labels first.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def metric_create(self, project, metric_name, filter_, description):\n        \"\"\"\n        \"\"\"\n        parent = \"projects/%s\" % (project,)\n        metric_pb = LogMetric(name=metric_name, filter=filter_, description=description)\n        self._gapic_api.create_log_metric(parent, metric_pb)", "output": "API call:  create a metric resource.\n\n        See\n        https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics/create\n\n        :type project: str\n        :param project: ID of the project in which to create the metric.\n\n        :type metric_name: str\n        :param metric_name: the name of the metric\n\n        :type filter_: str\n        :param filter_: the advanced logs filter expression defining the\n                        entries exported by the metric.\n\n        :type description: str\n        :param description: description of the metric.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _build_url(url, _params):\n    \"\"\"\"\"\"\n\n    # Support for unicode domain names and paths.\n    scheme, netloc, path, params, query, fragment = urlparse(url)\n    netloc = netloc.encode('idna').decode('utf-8')\n    if not path:\n        path = '/'\n\n    if six.PY2:\n        if isinstance(scheme, six.text_type):\n            scheme = scheme.encode('utf-8')\n        if isinstance(netloc, six.text_type):\n            netloc = netloc.encode('utf-8')\n        if isinstance(path, six.text_type):\n            path = path.encode('utf-8')\n        if isinstance(params, six.text_type):\n            params = params.encode('utf-8')\n        if isinstance(query, six.text_type):\n            query = query.encode('utf-8')\n        if isinstance(fragment, six.text_type):\n            fragment = fragment.encode('utf-8')\n\n    enc_params = _encode_params(_params)\n    if enc_params:\n        if query:\n            query = '%s&%s' % (query, enc_params)\n        else:\n            query = enc_params\n    url = (urlunparse([scheme, netloc, path, params, query, fragment]))\n    return url", "output": "Build the actual URL to use.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def eq_or_parent(self, other):\n        \"\"\"\n        \"\"\"\n        return self.parts[: len(other.parts)] == other.parts[: len(self.parts)]", "output": "Check whether ``other`` is an ancestor.\n\n        Returns:\n            (bool) True IFF ``other`` is an ancestor or equal to ``self``,\n            else False.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stack_annotations(annotations_sarray):\n    \"\"\"\n    \n    \"\"\"\n    _raise_error_if_not_sarray(annotations_sarray, variable_name='annotations_sarray')\n    sf = _tc.SFrame({'annotations': annotations_sarray}).add_row_number('row_id')\n    sf = sf.stack('annotations', new_column_name='annotations', drop_na=True)\n    if len(sf) == 0:\n        cols = ['row_id', 'confidence', 'label', 'height', 'width', 'x', 'y']\n        return _tc.SFrame({k: [] for k in cols})\n    sf = sf.unpack('annotations', column_name_prefix='')\n    sf = sf.unpack('coordinates', column_name_prefix='')\n    del sf['type']\n    return sf", "output": "Converts object detection annotations (ground truth or predictions) to\n    stacked format (an `SFrame` where each row is one object instance).\n\n    Parameters\n    ----------\n    annotations_sarray: SArray\n        An `SArray` with unstacked predictions, exactly formatted as the\n        annotations column when training an object detector or when making\n        predictions.\n\n    Returns\n    -------\n    annotations_sframe: An `SFrame` with stacked annotations.\n\n    See also\n    --------\n    unstack_annotations\n\n    Examples\n    --------\n    Predictions are returned by the object detector in unstacked format:\n\n    >>> predictions = detector.predict(images)\n\n    By converting it to stacked format, it is easier to get an overview of\n    object instances:\n\n    >>> turicreate.object_detector.util.stack_annotations(predictions)\n    Data:\n    +--------+------------+-------+-------+-------+-------+--------+\n    | row_id | confidence | label |   x   |   y   | width | height |\n    +--------+------------+-------+-------+-------+-------+--------+\n    |   0    |    0.98    |  dog  | 123.0 | 128.0 |  80.0 | 182.0  |\n    |   0    |    0.67    |  cat  | 150.0 | 183.0 | 129.0 | 101.0  |\n    |   1    |    0.8     |  dog  |  50.0 | 432.0 |  65.0 |  98.0  |\n    +--------+------------+-------+-------+-------+-------+--------+\n    [3 rows x 7 columns]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _init_client():\n    \"\"\"\n    \"\"\"\n    if client is not None:\n        return\n\n    global _mysql_kwargs, _table_name\n    _mysql_kwargs = {\n        'host': __opts__.get('mysql.host', '127.0.0.1'),\n        'user': __opts__.get('mysql.user', None),\n        'passwd': __opts__.get('mysql.password', None),\n        'db': __opts__.get('mysql.database', _DEFAULT_DATABASE_NAME),\n        'port': __opts__.get('mysql.port', 3306),\n        'unix_socket': __opts__.get('mysql.unix_socket', None),\n        'connect_timeout': __opts__.get('mysql.connect_timeout', None),\n        'autocommit': True,\n    }\n    _table_name = __opts__.get('mysql.table_name', _table_name)\n    # TODO: handle SSL connection parameters\n\n    for k, v in _mysql_kwargs.items():\n        if v is None:\n            _mysql_kwargs.pop(k)\n    kwargs_copy = _mysql_kwargs.copy()\n    kwargs_copy['passwd'] = \"<hidden>\"\n    log.info(\"mysql_cache: Setting up client with params: %r\", kwargs_copy)\n    # The MySQL client is created later on by run_query\n    _create_table()", "output": "Initialize connection and create table if needed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def extract_kwargs(names:Collection[str], kwargs:KWArgs):\n    \"\"\n    new_kwargs = {}\n    for arg_name in names:\n        if arg_name in kwargs:\n            arg_val = kwargs.pop(arg_name)\n            new_kwargs[arg_name] = arg_val\n    return new_kwargs, kwargs", "output": "Extract the keys in `names` from the `kwargs`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_host_ipv4addr_info(ipv4addr=None, mac=None,\n                                        discovered_data=None,\n                                        return_fields=None, **api_opts):\n    '''\n    \n    '''\n    infoblox = _get_infoblox(**api_opts)\n    return infoblox.get_host_ipv4addr_object(ipv4addr, mac, discovered_data, return_fields)", "output": "Get host ipv4addr information\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-call infoblox.get_ipv4addr ipv4addr=123.123.122.12\n        salt-call infoblox.get_ipv4addr mac=00:50:56:84:6e:ae\n        salt-call infoblox.get_ipv4addr mac=00:50:56:84:6e:ae return_fields=host return_fields='mac,host,configure_for_dhcp,ipv4addr'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attach(zone, force=False, brand_opts=None):\n    '''\n    \n    '''\n    ret = {'status': True}\n\n    ## attach zone\n    res = __salt__['cmd.run_all']('zoneadm -z {zone} attach{force}{brand_opts}'.format(\n        zone=zone,\n        force=' -F' if force else '',\n        brand_opts=' {0}'.format(brand_opts) if brand_opts else '',\n    ))\n    ret['status'] = res['retcode'] == 0\n    ret['message'] = res['stdout'] if ret['status'] else res['stderr']\n    ret['message'] = ret['message'].replace('zoneadm: ', '')\n    if ret['message'] == '':\n        del ret['message']\n\n    return ret", "output": "Attach the specified zone.\n\n    zone : string\n        name of the zone\n    force : boolean\n        force the zone into the \"installed\" state with no validation\n    brand_opts : string\n        brand specific options to pass\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' zoneadm.attach lawrence\n        salt '*' zoneadm.attach lawrence True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_attach_volumes(name, kwargs, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The create_attach_volumes action must be called with '\n            '-a or --action.'\n        )\n\n    volumes = literal_eval(kwargs['volumes'])\n    node = kwargs['node']\n    conn = get_conn()\n    node_data = _expand_node(conn.ex_get_node(node))\n    letter = ord('a') - 1\n\n    for idx, volume in enumerate(volumes):\n        volume_name = '{0}-sd{1}'.format(name, chr(letter + 2 + idx))\n\n        volume_dict = {\n          'disk_name': volume_name,\n          'location': node_data['extra']['zone']['name'],\n          'size': volume['size'],\n          'type': volume.get('type', 'pd-standard'),\n          'image': volume.get('image', None),\n          'snapshot': volume.get('snapshot', None),\n          'auto_delete': volume.get('auto_delete', False)\n        }\n\n        create_disk(volume_dict, 'function')\n        attach_disk(name, volume_dict, 'action')", "output": ".. versionadded:: 2017.7.0\n\n    Create and attach multiple volumes to a node. The 'volumes' and 'node'\n    arguments are required, where 'node' is a libcloud node, and 'volumes'\n    is a list of maps, where each map contains:\n\n    size\n        The size of the new disk in GB. Required.\n\n    type\n        The disk type, either pd-standard or pd-ssd. Optional, defaults to pd-standard.\n\n    image\n        An image to use for this new disk. Optional.\n\n    snapshot\n        A snapshot to use for this new disk. Optional.\n\n    auto_delete\n        An option(bool) to keep or remove the disk upon instance deletion.\n        Optional, defaults to False.\n\n    Volumes are attached in the order in which they are given, thus on a new\n    node the first volume will be /dev/sdb, the second /dev/sdc, and so on.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _multiple_callbacks(callbacks, *args, **kwargs):\n    \"\"\"\n    \"\"\"\n    if isinstance(callbacks, list):\n        for cb in callbacks:\n            cb(*args, **kwargs)\n        return\n    if callbacks:\n        callbacks(*args, **kwargs)", "output": "Sends args and kwargs to any configured callbacks.\n    This handles the cases where the 'callbacks' variable\n    is ``None``, a single function, or a list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_installable_file(path):\n    # type: (PipfileType) -> bool\n    \"\"\"\"\"\"\n    from packaging import specifiers\n\n    if isinstance(path, Mapping):\n        path = convert_entry_to_path(path)\n\n    # If the string starts with a valid specifier operator, test if it is a valid\n    # specifier set before making a path object (to avoid breaking windows)\n    if any(path.startswith(spec) for spec in \"!=<>~\"):\n        try:\n            specifiers.SpecifierSet(path)\n        # If this is not a valid specifier, just move on and try it as a path\n        except specifiers.InvalidSpecifier:\n            pass\n        else:\n            return False\n\n    parsed = urlparse(path)\n    is_local = (\n        not parsed.scheme\n        or parsed.scheme == \"file\"\n        or (len(parsed.scheme) == 1 and os.name == \"nt\")\n    )\n    if parsed.scheme and parsed.scheme == \"file\":\n        path = vistir.compat.fs_decode(vistir.path.url_to_path(path))\n    normalized_path = vistir.path.normalize_path(path)\n    if is_local and not os.path.exists(normalized_path):\n        return False\n\n    is_archive = pip_shims.shims.is_archive_file(normalized_path)\n    is_local_project = os.path.isdir(normalized_path) and is_installable_dir(\n        normalized_path\n    )\n    if is_local and is_local_project or is_archive:\n        return True\n\n    if not is_local and pip_shims.shims.is_archive_file(parsed.path):\n        return True\n\n    return False", "output": "Determine if a path can potentially be installed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def size(self):\n        \"\"\"\"\"\"\n        size = {}\n        if self._w3c:\n            size = self._execute(Command.GET_ELEMENT_RECT)['value']\n        else:\n            size = self._execute(Command.GET_ELEMENT_SIZE)['value']\n        new_size = {\"height\": size[\"height\"],\n                    \"width\": size[\"width\"]}\n        return new_size", "output": "The size of the element.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_frame(url, skiprows):\n    \"\"\"\n    \n    \"\"\"\n    return pd.read_csv(\n        url,\n        skiprows=skiprows,\n        skipinitialspace=True,\n        na_values=[\"Bank holiday\", \"Not available\"],\n        parse_dates=[\"Date\"],\n        index_col=\"Date\",\n    ).dropna(how='all') \\\n     .tz_localize('UTC') \\\n     .rename(columns=COLUMN_NAMES)", "output": "Load a DataFrame of data from a Bank of Canada site.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_outputs(self, merge_multi_context=True):\n        \"\"\"\n        \"\"\"\n        assert self.binded and self.params_initialized\n        return self._curr_module.get_outputs(merge_multi_context=merge_multi_context)", "output": "Gets outputs from a previous forward computation.\n\n        Parameters\n        ----------\n        merge_multi_context : bool\n            Defaults to ``True``. In the case when data-parallelism is used, the outputs\n            will be collected from multiple devices. A ``True`` value indicate that we\n            should merge the collected results so that they look like from a single\n            executor.\n\n        Returns\n        -------\n        list of numpy arrays or list of list of numpy arrays\n            If `merge_multi_context` is ``True``, it is like ``[out1, out2]``. Otherwise, it\n            is like ``[[out1_dev1, out1_dev2], [out2_dev1, out2_dev2]]``. All the output\n            elements are numpy arrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def out_format(data, out, opts=None, **kwargs):\n    '''\n    \n    '''\n    return try_printout(data, out, opts, **kwargs)", "output": "Return the formatted outputter string for the passed data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_values(self, dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        values = self.values\n        if is_object_dtype(dtype):\n            values = values._box_values(values._data)\n\n        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when\n            # the analogous NumPy-backed column would be a 2-D ndarray.\n            values = values.reshape(1, -1)\n        return values", "output": "Returns an ndarray of values.\n\n        Parameters\n        ----------\n        dtype : np.dtype\n            Only `object`-like dtypes are respected here (not sure\n            why).\n\n        Returns\n        -------\n        values : ndarray\n            When ``dtype=object``, then and object-dtype ndarray of\n            boxed values is returned. Otherwise, an M8[ns] ndarray\n            is returned.\n\n            DatetimeArray is always 1-d. ``get_values`` will reshape\n            the return value to be the same dimensionality as the\n            block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def neuron(layer_name, channel_n, x=None, y=None, batch=None):\n  \"\"\"\n  \"\"\"\n  def inner(T):\n    layer = T(layer_name)\n    shape = tf.shape(layer)\n    x_ = shape[1] // 2 if x is None else x\n    y_ = shape[2] // 2 if y is None else y\n\n    if batch is None:\n      return layer[:, x_, y_, channel_n]\n    else:\n      return layer[batch, x_, y_, channel_n]\n  return inner", "output": "Visualize a single neuron of a single channel.\n\n  Defaults to the center neuron. When width and height are even numbers, we\n  choose the neuron in the bottom right of the center 2x2 neurons.\n\n  Odd width & height:               Even width & height:\n\n  +---+---+---+                     +---+---+---+---+\n  |   |   |   |                     |   |   |   |   |\n  +---+---+---+                     +---+---+---+---+\n  |   | X |   |                     |   |   |   |   |\n  +---+---+---+                     +---+---+---+---+\n  |   |   |   |                     |   |   | X |   |\n  +---+---+---+                     +---+---+---+---+\n                                    |   |   |   |   |\n                                    +---+---+---+---+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def op(scalars_layout, collections=None):\n  \"\"\"\n  \"\"\"\n  # TODO(nickfelt): remove on-demand imports once dep situation is fixed.\n  import tensorflow.compat.v1 as tf\n\n  assert isinstance(scalars_layout, layout_pb2.Layout)\n  summary_metadata = metadata.create_summary_metadata()\n  return tf.summary.tensor_summary(name=metadata.CONFIG_SUMMARY_TAG,\n                                   tensor=tf.constant(\n                                       scalars_layout.SerializeToString(),\n                                       dtype=tf.string),\n                                   collections=collections,\n                                   summary_metadata=summary_metadata)", "output": "Creates a summary that contains a layout.\n\n  When users navigate to the custom scalars dashboard, they will see a layout\n  based on the proto provided to this function.\n\n  Args:\n    scalars_layout: The scalars_layout_pb2.Layout proto that specifies the\n        layout.\n    collections: Optional list of graph collections keys. The new\n        summary op is added to these collections. Defaults to\n        `[Graph Keys.SUMMARIES]`.\n\n  Returns:\n    A tensor summary op that writes the layout to disk.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_tokens_to_ids(self, tokens):\n        \"\"\"\"\"\"\n        ids = []\n        for token in tokens:\n            ids.append(self.vocab[token])\n        if len(ids) > self.max_len:\n            logger.warning(\n                \"Token indices sequence length is longer than the specified maximum \"\n                \" sequence length for this BERT model ({} > {}). Running this\"\n                \" sequence through BERT will result in indexing errors\".format(len(ids), self.max_len)\n            )\n        return ids", "output": "Converts a sequence of tokens into ids using the vocab.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def server_show(server_id, profile=None, **kwargs):\n    '''\n    \n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.server_show(server_id)", "output": "Return detailed information for an active server\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.server_show <server_id>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ext_pillar(minion_id, pillar, **kwargs):\n    '''\n    \n    '''\n\n    # If reclass is installed, __virtual__ put it onto the search path, so we\n    # don't need to protect against ImportError:\n    # pylint: disable=3rd-party-module-not-gated\n    from reclass.adapters.salt import ext_pillar as reclass_ext_pillar\n    from reclass.errors import ReclassException\n    # pylint: enable=3rd-party-module-not-gated\n\n    try:\n        # the source path we used above isn't something reclass needs to care\n        # about, so filter it:\n        filter_out_source_path_option(kwargs)\n\n        # if no inventory_base_uri was specified, initialize it to the first\n        # file_roots of class 'base' (if that exists):\n        set_inventory_base_uri_default(__opts__, kwargs)\n\n        # I purposely do not pass any of __opts__ or __salt__ or __grains__\n        # to reclass, as I consider those to be Salt-internal and reclass\n        # should not make any assumptions about it.\n        return reclass_ext_pillar(minion_id, pillar, **kwargs)\n\n    except TypeError as e:\n        if 'unexpected keyword argument' in six.text_type(e):\n            arg = six.text_type(e).split()[-1]\n            raise SaltInvocationError('ext_pillar.reclass: unexpected option: '\n                                      + arg)\n        else:\n            raise\n\n    except KeyError as e:\n        if 'id' in six.text_type(e):\n            raise SaltInvocationError('ext_pillar.reclass: __opts__ does not '\n                                      'define minion ID')\n        else:\n            raise\n\n    except ReclassException as e:\n        raise SaltInvocationError('ext_pillar.reclass: {0}'.format(e))", "output": "Obtain the Pillar data from **reclass** for the given ``minion_id``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pre_fork(self, process_manager):\n        '''\n        \n        '''\n        salt.transport.mixins.auth.AESReqServerMixin.pre_fork(self, process_manager)\n        if USE_LOAD_BALANCER:\n            self.socket_queue = multiprocessing.Queue()\n            process_manager.add_process(\n                LoadBalancerServer, args=(self.opts, self.socket_queue)\n            )\n        elif not salt.utils.platform.is_windows():\n            self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            _set_tcp_keepalive(self._socket, self.opts)\n            self._socket.setblocking(0)\n            self._socket.bind((self.opts['interface'], int(self.opts['ret_port'])))", "output": "Pre-fork we need to create the zmq router device", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bail_out(self, message, from_error=False):\n        \"\"\"\n        \n        \"\"\"\n        if from_error or self.transport is None or self.transport.is_closing():\n            logger.error(\n                \"Transport closed @ %s and exception \"\n                \"experienced during error handling\",\n                (\n                    self.transport.get_extra_info(\"peername\")\n                    if self.transport is not None\n                    else \"N/A\"\n                ),\n            )\n            logger.debug(\"Exception:\", exc_info=True)\n        else:\n            self.write_error(ServerError(message))\n            logger.error(message)", "output": "In case if the transport pipes are closed and the sanic app encounters\n        an error while writing data to the transport pipe, we log the error\n        with proper details.\n\n        :param message: Error message to display\n        :param from_error: If the bail out was invoked while handling an\n            exception scenario.\n\n        :type message: str\n        :type from_error: bool\n\n        :return: None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def package(self):\n        \"\"\"\n        \"\"\"\n        cmake = self.configure_cmake()\n        cmake.install()\n        self.copy(pattern=\"LICENSE.txt\", dst=\"licenses\")\n        self.copy(pattern=\"FindFlatBuffers.cmake\", dst=os.path.join(\"lib\", \"cmake\", \"flatbuffers\"), src=\"CMake\")\n        self.copy(pattern=\"flathash*\", dst=\"bin\", src=\"bin\")\n        self.copy(pattern=\"flatc*\", dst=\"bin\", src=\"bin\")\n        if self.settings.os == \"Windows\" and self.options.shared:\n            if self.settings.compiler == \"Visual Studio\":\n                shutil.move(os.path.join(self.package_folder, \"lib\", \"%s.dll\" % self.name),\n                            os.path.join(self.package_folder, \"bin\", \"%s.dll\" % self.name))\n            elif self.settings.compiler == \"gcc\":\n                shutil.move(os.path.join(self.package_folder, \"lib\", \"lib%s.dll\" % self.name),\n                            os.path.join(self.package_folder, \"bin\", \"lib%s.dll\" % self.name))", "output": "Copy Flatbuffers' artifacts to package folder", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ensure_tf_install():  # pylint: disable=g-statement-before-imports\n  \"\"\"\n  \"\"\"\n  try:\n    import tensorflow as tf\n  except ImportError:\n    # Print more informative error message, then reraise.\n    print(\"\\n\\nFailed to import TensorFlow. Please note that TensorFlow is not \"\n          \"installed by default when you install TensorFlow Datasets. This is \"\n          \"so that users can decide whether to install the GPU-enabled \"\n          \"TensorFlow package. To use TensorFlow Datasets, please install the \"\n          \"most recent version of TensorFlow, by following instructions at \"\n          \"https://tensorflow.org/install.\\n\\n\")\n    raise\n\n  tf_version = distutils.version.LooseVersion(tf.__version__)\n  v_1_12 = distutils.version.LooseVersion(\"1.12.0\")\n  if tf_version < v_1_12:\n    raise ImportError(\n        \"This version of TensorFlow Datasets requires TensorFlow \"\n        \"version >= {required}; Detected an installation of version {present}. \"\n        \"Please upgrade TensorFlow to proceed.\".format(\n            required=\"1.12.0\",\n            present=tf.__version__))\n  _patch_tf(tf)", "output": "Attempt to import tensorflow, and ensure its version is sufficient.\n\n  Raises:\n    ImportError: if either tensorflow is not importable or its version is\n    inadequate.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_indicator(self, time, code, indicator_name=None):\n        \"\"\"\n        \n        \"\"\"\n        try:\n            return self.data.loc[(pd.Timestamp(time), code), indicator_name]\n        except:\n            raise ValueError('CANNOT FOUND THIS DATE&CODE')", "output": "\u83b7\u53d6\u67d0\u4e00\u65f6\u95f4\u7684\u67d0\u4e00\u53ea\u80a1\u7968\u7684\u6307\u6807", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def adjust_learning_rate(optimizer, epoch):\n    \"\"\"\"\"\"\n    lr = args.lr * (0.1 ** (epoch // 30))\n    for param_group in optimizer.param_groups:\n        param_group['lr'] = lr", "output": "Sets the learning rate to the initial LR decayed by 10 every 30 epochs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _try_get_state_scope(name, mark_name_scope_used=True):\n  \"\"\"\n  \"\"\"\n  tmp_scope_name = tf_v1.get_variable_scope().name\n  if tmp_scope_name:\n    tmp_scope_name += \"/\"\n  with tf.name_scope(tmp_scope_name):\n    # Pick an unused variable scope.\n    with tf_v1.variable_scope(\n        None, default_name=name, auxiliary_name_scope=False) as vs:\n      abs_state_scope = vs.name + \"/\"\n    # Verify that the name scope is available and mark it used if requested.\n    graph = tf_v1.get_default_graph()\n    unique_name_scope = graph.unique_name(name, mark_name_scope_used) + \"/\"\n    if unique_name_scope != abs_state_scope:\n      raise RuntimeError(\n          \"variable_scope %s was unused but the corresponding \"\n          \"name_scope was already taken.\" % abs_state_scope)\n  return abs_state_scope", "output": "Returns a fresh variable/name scope for a module's state.\n\n  In order to import a module into a given scope without major complications\n  we require the scope to be empty. This function deals with deciding an unused\n  scope where to define the module state. This is non trivial in cases where\n  name_scope and variable_scopes are out of sync, e.g. tpus or re-entering\n  scopes.\n\n  Args:\n    name: A string with the name of the module as supplied by the client.\n    mark_name_scope_used: a boolean, indicating whether to mark the name\n        scope of the returned value as used.\n\n  Raises:\n    RuntimeError: if the name scope of the freshly created variable scope is\n        already used.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_input_buffer(self, text):\r\n        \"\"\"\"\"\"\r\n        if self.current_prompt_pos is not None:\r\n            self.replace_text(self.current_prompt_pos, 'eol', text)\r\n        else:\r\n            self.insert(text)\r\n        self.set_cursor_position('eof')", "output": "Set input buffer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def num_col(self):\n        \"\"\"\n        \"\"\"\n        ret = ctypes.c_uint()\n        _check_call(_LIB.XGDMatrixNumCol(self.handle,\n                                         ctypes.byref(ret)))\n        return ret.value", "output": "Get the number of columns (features) in the DMatrix.\n\n        Returns\n        -------\n        number of columns : int", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_global_steps():\n        \"\"\"\"\"\"\n        global_step = tf.Variable(0, name=\"global_step\", trainable=False, dtype=tf.int32)\n        increment_step = tf.assign(global_step, tf.add(global_step, 1))\n        return global_step, increment_step", "output": "Creates TF ops to track and increment global training step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _paste_mask(box, mask, shape):\n    \"\"\"\n    \n    \"\"\"\n    # int() is floor\n    # box fpcoor=0.0 -> intcoor=0.0\n    x0, y0 = list(map(int, box[:2] + 0.5))\n    # box fpcoor=h -> intcoor=h-1, inclusive\n    x1, y1 = list(map(int, box[2:] - 0.5))    # inclusive\n    x1 = max(x0, x1)    # require at least 1x1\n    y1 = max(y0, y1)\n\n    w = x1 + 1 - x0\n    h = y1 + 1 - y0\n\n    # rounding errors could happen here, because masks were not originally computed for this shape.\n    # but it's hard to do better, because the network does not know the \"original\" scale\n    mask = (cv2.resize(mask, (w, h)) > 0.5).astype('uint8')\n    ret = np.zeros(shape, dtype='uint8')\n    ret[y0:y1 + 1, x0:x1 + 1] = mask\n    return ret", "output": "Args:\n        box: 4 float\n        mask: MxM floats\n        shape: h,w\n    Returns:\n        A uint8 binary image of hxw.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def feature_importances_(self):\n        \"\"\"\n        \n\n        \"\"\"\n        if getattr(self, 'booster', None) is not None and self.booster != 'gbtree':\n            raise AttributeError('Feature importance is not defined for Booster type {}'\n                                 .format(self.booster))\n        b = self.get_booster()\n        score = b.get_score(importance_type=self.importance_type)\n        all_features = [score.get(f, 0.) for f in b.feature_names]\n        all_features = np.array(all_features, dtype=np.float32)\n        return all_features / all_features.sum()", "output": "Feature importances property\n\n        .. note:: Feature importance is defined only for tree boosters\n\n            Feature importance is only defined when the decision tree model is chosen as base\n            learner (`booster=gbtree`). It is not defined for other base learner types, such\n            as linear learners (`booster=gblinear`).\n\n        Returns\n        -------\n        feature_importances_ : array of shape ``[n_features]``", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def merge_unscoped_hparams(scopes_and_hparams):\n  \"\"\"\"\"\"\n  merged_values = {}\n  for (scope, hparams) in scopes_and_hparams:\n    for key, value in six.iteritems(hparams.values()):\n      scoped_key = \"%s.%s\" % (scope, key)\n      merged_values[scoped_key] = value\n\n  return hparam.HParams(**merged_values)", "output": "Merge multiple HParams into one with scopes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def since(version):\n    \"\"\"\n    \n    \"\"\"\n    import re\n    indent_p = re.compile(r'\\n( +)')\n\n    def deco(f):\n        indents = indent_p.findall(f.__doc__)\n        indent = ' ' * (min(len(m) for m in indents) if indents else 0)\n        f.__doc__ = f.__doc__.rstrip() + \"\\n\\n%s.. versionadded:: %s\" % (indent, version)\n        return f\n    return deco", "output": "A decorator that annotates a function to append the version of Spark the function was added.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _drop_nodes_from_errorpaths(self, _errors, dp_items, sp_items):\n        \"\"\" \n        \"\"\"\n        dp_basedepth = len(self.document_path)\n        sp_basedepth = len(self.schema_path)\n        for error in _errors:\n            for i in sorted(dp_items, reverse=True):\n                error.document_path = \\\n                    drop_item_from_tuple(error.document_path, dp_basedepth + i)\n            for i in sorted(sp_items, reverse=True):\n                error.schema_path = \\\n                    drop_item_from_tuple(error.schema_path, sp_basedepth + i)\n            if error.child_errors:\n                self._drop_nodes_from_errorpaths(error.child_errors,\n                                                 dp_items, sp_items)", "output": "Removes nodes by index from an errorpath, relatively to the\n            basepaths of self.\n\n        :param errors: A list of :class:`errors.ValidationError` instances.\n        :param dp_items: A list of integers, pointing at the nodes to drop from\n                         the :attr:`document_path`.\n        :param sp_items: Alike ``dp_items``, but for :attr:`schema_path`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __process_acl(self, load, auth_list):\n        '''\n        \n        '''\n        if 'eauth' not in load:\n            return auth_list\n        fstr = '{0}.process_acl'.format(load['eauth'])\n        if fstr not in self.auth:\n            return auth_list\n        try:\n            return self.auth[fstr](auth_list, self.opts)\n        except Exception as e:\n            log.debug('Authentication module threw %s', e)\n            return auth_list", "output": "Allows eauth module to modify the access list right before it'll be applied to the request.\n        For example ldap auth module expands entries", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_sqlite_connection_provider(db_uri):\n  \"\"\"\n  \"\"\"\n  uri = urlparse.urlparse(db_uri)\n  if uri.scheme != 'sqlite':\n    raise ValueError('Scheme is not sqlite: ' + db_uri)\n  if uri.netloc:\n    raise ValueError('Can not connect to SQLite over network: ' + db_uri)\n  if uri.path == ':memory:':\n    raise ValueError('Memory mode SQLite not supported: ' + db_uri)\n  path = os.path.expanduser(uri.path)\n  params = _get_connect_params(uri.query)\n  # TODO(@jart): Add thread-local pooling.\n  return lambda: sqlite3.connect(path, **params)", "output": "Returns function that returns SQLite Connection objects.\n\n  Args:\n    db_uri: A string URI expressing the DB file, e.g. \"sqlite:~/tb.db\".\n\n  Returns:\n    A function that returns a new PEP-249 DB Connection, which must be closed,\n    each time it is called.\n\n  Raises:\n    ValueError: If db_uri is not a valid sqlite file URI.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rm_automaster(name, device, config='/etc/auto_salt'):\n    '''\n    \n    '''\n    contents = automaster(config)\n    if name not in contents:\n        return True\n    # The entry is present, get rid of it\n    lines = []\n    try:\n        with salt.utils.files.fopen(config, 'r') as ifile:\n            for line in ifile:\n                line = salt.utils.stringutils.to_unicode(line)\n                if line.startswith('#'):\n                    # Commented\n                    lines.append(line)\n                    continue\n                if not line.strip():\n                    # Blank line\n                    lines.append(line)\n                    continue\n                comps = line.split()\n                if len(comps) != 3:\n                    # Invalid entry\n                    lines.append(line)\n                    continue\n\n                comps = line.split()\n                prefix = \"/..\"\n                name_chk = comps[0].replace(prefix, \"\")\n                device_fmt = comps[2].split(\":\")\n\n                if device:\n                    if name_chk == name and device_fmt[1] == device:\n                        continue\n                else:\n                    if name_chk == name:\n                        continue\n                lines.append(line)\n    except (IOError, OSError) as exc:\n        msg = \"Couldn't read from {0}: {1}\"\n        raise CommandExecutionError(msg.format(config, exc))\n\n    try:\n        with salt.utils.files.fopen(config, 'wb') as ofile:\n            ofile.writelines(salt.utils.data.encode(lines))\n    except (IOError, OSError) as exc:\n        msg = \"Couldn't write to {0}: {1}\"\n        raise CommandExecutionError(msg.format(config, exc))\n\n    # Update automount\n    __salt__['cmd.run']('automount -cv')\n    return True", "output": "Remove the mount point from the auto_master\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mount.rm_automaster /mnt/foo /dev/sdg", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def activated(self, item):\r\n        \"\"\"\"\"\"\r\n        itemdata = self.data.get(id(self.currentItem()))\r\n        if itemdata is not None:\r\n            filename, lineno, colno = itemdata\r\n            self.sig_edit_goto.emit(filename, lineno, self.search_text)", "output": "Double-click event", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def path_exists_glob(path):\n    '''\n    \n\n    '''\n    return True if glob.glob(os.path.expanduser(path)) else False", "output": "Tests to see if path after expansion is a valid path (file or directory).\n    Expansion allows usage of ? * and character ranges []. Tilde expansion\n    is not supported. Returns True/False.\n\n    .. versionadded:: 2014.7.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' file.path_exists_glob /etc/pam*/pass*", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shapeless_placeholder(x, axis, name):\n    \"\"\"\n    \n    \"\"\"\n    shp = x.get_shape().as_list()\n    if not isinstance(axis, list):\n        axis = [axis]\n    for a in axis:\n        if shp[a] is None:\n            raise ValueError(\"Axis {} of shape {} is already unknown!\".format(a, shp))\n        shp[a] = None\n    x = tf.placeholder_with_default(x, shape=shp, name=name)\n    return x", "output": "Make the static shape of a tensor less specific.\n\n    If you want to feed to a tensor, the shape of the feed value must match\n    the tensor's static shape. This function creates a placeholder which\n    defaults to x if not fed, but has a less specific static shape than x.\n    See also `tensorflow#5680 <https://github.com/tensorflow/tensorflow/issues/5680>`_.\n\n    Args:\n        x: a tensor\n        axis(int or list of ints): these axes of ``x.get_shape()`` will become\n            None in the output.\n        name(str): name of the output tensor\n\n    Returns:\n        a tensor equal to x, but shape information is partially cleared.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def discriminator(self, inputs, outputs):\n        \"\"\" \"\"\"\n        l = tf.concat([inputs, outputs], 3)\n        with argscope(Conv2D, kernel_size=4, strides=2, activation=BNLReLU):\n            l = (LinearWrap(l)\n                 .Conv2D('conv0', NF, activation=tf.nn.leaky_relu)\n                 .Conv2D('conv1', NF * 2)\n                 .Conv2D('conv2', NF * 4)\n                 .Conv2D('conv3', NF * 8, strides=1, padding='VALID')\n                 .Conv2D('convlast', 1, strides=1, padding='VALID', activation=tf.identity)())\n        return l", "output": "return a (b, 1) logits", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def type(self):\n        \"\"\" \n        \"\"\"\n        kv_type = ctypes.c_char_p()\n        check_call(_LIB.MXKVStoreGetType(self.handle, ctypes.byref(kv_type)))\n        return py_str(kv_type.value)", "output": "Returns the type of this kvstore.\n\n        Returns\n        -------\n        type : str\n            the string type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _tokenize_wordpiece(self, text):\n        \"\"\"\n        \"\"\"\n\n        output_tokens = []\n        for token in self.basic_tokenizer._whitespace_tokenize(text):\n            chars = list(token)\n            if len(chars) > self.max_input_chars_per_word:\n                output_tokens.append(self.vocab.unknown_token)\n                continue\n            is_bad = False\n            start = 0\n            sub_tokens = []\n            while start < len(chars):\n                end = len(chars)\n                cur_substr = None\n                while start < end:\n                    substr = ''.join(chars[start:end])\n                    if start > 0:\n                        substr = '##' + substr\n                    if substr in self.vocab:\n                        cur_substr = substr\n                        break\n                    end -= 1\n                if cur_substr is None:\n                    is_bad = True\n                    break\n                sub_tokens.append(cur_substr)\n                start = end\n            if is_bad:\n                output_tokens.append(self.vocab.unknown_token)\n            else:\n                output_tokens.extend(sub_tokens)\n        return output_tokens", "output": "Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BERTBasicTokenizer.\n\n        Returns:\n          A list of wordpiece tokens.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_key_file(user,\n                   source,\n                   config='.ssh/authorized_keys',\n                   saltenv='base',\n                   fingerprint_hash_type=None):\n    '''\n    \n    '''\n    keyfile = __salt__['cp.cache_file'](source, saltenv)\n    if not keyfile:\n        return {}\n    s_keys = _validate_keys(keyfile, fingerprint_hash_type)\n    if not s_keys:\n        err = 'No keys detected in {0}. Is file properly ' \\\n              'formatted?'.format(source)\n        log.error(err)\n        __context__['ssh_auth.error'] = err\n        return {}\n    else:\n        ret = {}\n        for key in s_keys:\n            ret[key] = check_key(\n                user,\n                key,\n                s_keys[key]['enc'],\n                s_keys[key]['comment'],\n                s_keys[key]['options'],\n                config=config,\n                fingerprint_hash_type=fingerprint_hash_type)\n        return ret", "output": "Check a keyfile from a source destination against the local keys and\n    return the keys to change\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ssh.check_key_file root salt://ssh/keyfile", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_pidfile(pidfile):\n    '''\n    \n    '''\n    try:\n        with salt.utils.files.fopen(pidfile) as pdf:\n            pid = pdf.read().strip()\n        return int(pid)\n    except (OSError, IOError, TypeError, ValueError):\n        return -1", "output": "Return the pid from a pidfile as an integer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_nonnegative(value):\n  \"\"\"\"\"\"\n  if isinstance(value, tf.Tensor):\n    with tf.control_dependencies([tf.assert_greater_equal(value, 0)]):\n      value = tf.identity(value)\n  elif value < 0:\n    raise ValueError(\"Value must be non-negative.\")\n  return value", "output": "Check that the value is nonnegative.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def authenticate_redirect(self, callback_uri: str = None) -> None:\n        \"\"\"\n        \"\"\"\n        http = self.get_auth_http_client()\n        response = await http.fetch(\n            self._oauth_request_token_url(callback_uri=callback_uri)\n        )\n        self._on_request_token(self._OAUTH_AUTHENTICATE_URL, None, response)", "output": "Just like `~OAuthMixin.authorize_redirect`, but\n        auto-redirects if authorized.\n\n        This is generally the right interface to use if you are using\n        Twitter for single-sign on.\n\n        .. versionchanged:: 3.1\n           Now returns a `.Future` and takes an optional callback, for\n           compatibility with `.gen.coroutine`.\n\n        .. versionchanged:: 6.0\n\n           The ``callback`` argument was removed. Use the returned\n           awaitable object instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attention_lm_moe_base_memeff():\n  \"\"\"\"\"\"\n  hparams = attention_lm_moe_base_long_seq()\n  hparams.use_sepconv = False\n\n  hparams.diet_experts = True\n  hparams.layer_preprocess_sequence = \"n\"\n  hparams.layer_postprocess_sequence = \"da\"\n  hparams.layer_prepostprocess_dropout = 0.0\n  hparams.memory_efficient_ffn = True\n  hparams.attention_type = AttentionType.MEMORY_EFFICIENT\n  hparams.num_heads = 8\n  hparams.factored_logits = True\n  return hparams", "output": "Base model with attention expert.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def render(dson_input, saltenv='base', sls='', **kwargs):\n    '''\n    \n    '''\n    if not isinstance(dson_input, six.string_types):\n        dson_input = dson_input.read()\n\n    log.debug('DSON input = %s', dson_input)\n\n    if dson_input.startswith('#!'):\n        dson_input = dson_input[(dson_input.find('\\n') + 1):]\n    if not dson_input.strip():\n        return {}\n    return dson.loads(dson_input)", "output": "Accepts DSON data as a string or as a file object and runs it through the\n    JSON parser.\n\n    :rtype: A Python data structure", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_home_dir():\n    \"\"\"\"\"\"\n    _home_dir = os.environ.get('MXNET_HOME', os.path.join('~', '.mxnet'))\n    # expand ~ to actual path\n    _home_dir = os.path.expanduser(_home_dir)\n    return _home_dir", "output": "Get home directory for storing datasets/models/pre-trained word embeddings", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _cancel_grpc(operations_stub, operation_name):\n    \"\"\"\n    \"\"\"\n    request_pb = operations_pb2.CancelOperationRequest(name=operation_name)\n    operations_stub.CancelOperation(request_pb)", "output": "Cancel an operation using a gRPC client.\n\n    Args:\n        operations_stub (google.longrunning.operations_pb2.OperationsStub):\n            The gRPC operations stub.\n        operation_name (str): The name of the operation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(cyg_arch='x86_64', mirrors=None):\n    '''\n    \n    '''\n    args = []\n    args.append('--upgrade-also')\n\n    # Can't update something that isn't installed\n    if not _check_cygwin_installed(cyg_arch):\n        LOG.debug('Cygwin (%s) not installed, could not update', cyg_arch)\n        return False\n\n    return _run_silent_cygwin(cyg_arch=cyg_arch, args=args, mirrors=mirrors)", "output": "Update all packages.\n\n    cyg_arch : x86_64\n        Specify the cygwin architecture update\n        Current options are x86 and x86_64\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cyg.update\n        salt '*' cyg.update dos2unix mirrors=\"[{'http://mirror': 'http://url/to/public/key}]\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def serialize(self):\n        '''\n        \n        '''\n        serialized = {'type': self.__type__}\n        for argname in self._attributes:\n            if argname == 'required':\n                # This is handled elsewhere\n                continue\n            argvalue = self._get_argname_value(argname)\n            if argvalue is not None:\n                if argvalue is Null:\n                    argvalue = None\n                # None values are not meant to be included in the\n                # serialization, since this is not None...\n                if self.__serialize_attr_aliases__ and argname in self.__serialize_attr_aliases__:\n                    argname = self.__serialize_attr_aliases__[argname]\n                serialized[argname] = argvalue\n        return serialized", "output": "Return a serializable form of the config instance", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_current_cell(self):\r\n        \"\"\"\"\"\"\r\n        cursor = self.textCursor()\r\n        cursor.movePosition(QTextCursor.StartOfBlock)\r\n        cur_pos = prev_pos = cursor.position()\r\n\r\n        # Moving to the next line that is not a separator, if we are\r\n        # exactly at one of them\r\n        while self.is_cell_separator(cursor):\r\n            cursor.movePosition(QTextCursor.NextBlock)\r\n            prev_pos = cur_pos\r\n            cur_pos = cursor.position()\r\n            if cur_pos == prev_pos:\r\n                return cursor, False\r\n        prev_pos = cur_pos\r\n        # If not, move backwards to find the previous separator\r\n        while not self.is_cell_separator(cursor):\r\n            cursor.movePosition(QTextCursor.PreviousBlock)\r\n            prev_pos = cur_pos\r\n            cur_pos = cursor.position()\r\n            if cur_pos == prev_pos:\r\n                if self.is_cell_separator(cursor):\r\n                    return cursor, False\r\n                else:\r\n                    break\r\n        cursor.setPosition(prev_pos)\r\n        cell_at_file_start = cursor.atStart()\r\n        # Once we find it (or reach the beginning of the file)\r\n        # move to the next separator (or the end of the file)\r\n        # so we can grab the cell contents\r\n        while not self.is_cell_separator(cursor):\r\n            cursor.movePosition(QTextCursor.NextBlock,\r\n                                QTextCursor.KeepAnchor)\r\n            cur_pos = cursor.position()\r\n            if cur_pos == prev_pos:\r\n                cursor.movePosition(QTextCursor.EndOfBlock,\r\n                                    QTextCursor.KeepAnchor)\r\n                break\r\n            prev_pos = cur_pos\r\n        cell_at_file_end = cursor.atEnd()\r\n        return cursor, cell_at_file_start and cell_at_file_end", "output": "Select cell under cursor\r\n        cell = group of lines separated by CELL_SEPARATORS\r\n        returns the textCursor and a boolean indicating if the\r\n        entire file is selected", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_object(filename, obj):\n    \"\"\"\"\"\"\n    logging.info('saving {}...'.format(filename))\n    try:\n        with gzip.GzipFile(filename, 'wb') as f:\n            f.write(pickle.dumps(obj, 1))\n    except Exception as e:\n        logging.error('save failure: {}'.format(e))\n        raise", "output": "Compresses and pickles given object to the given filename.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _config_getter(get_opt,\n                   key,\n                   value_regex=None,\n                   cwd=None,\n                   user=None,\n                   password=None,\n                   ignore_retcode=False,\n                   output_encoding=None,\n                   **kwargs):\n    '''\n    \n    '''\n    kwargs = salt.utils.args.clean_kwargs(**kwargs)\n    global_ = kwargs.pop('global', False)\n    if kwargs:\n        salt.utils.args.invalid_kwargs(kwargs)\n\n    if cwd is None:\n        if not global_:\n            raise SaltInvocationError(\n                '\\'cwd\\' argument required unless global=True'\n            )\n    else:\n        cwd = _expand_path(cwd, user)\n\n    if get_opt == '--get-regexp':\n        if value_regex is not None \\\n                and not isinstance(value_regex, six.string_types):\n            value_regex = six.text_type(value_regex)\n    else:\n        # Ignore value_regex\n        value_regex = None\n\n    command = ['git', 'config']\n    command.extend(_which_git_config(global_, cwd, user, password,\n                                     output_encoding=output_encoding))\n    command.append(get_opt)\n    command.append(key)\n    if value_regex is not None:\n        command.append(value_regex)\n    return _git_run(command,\n                    cwd=cwd,\n                    user=user,\n                    password=password,\n                    ignore_retcode=ignore_retcode,\n                    failhard=False,\n                    output_encoding=output_encoding)", "output": "Common code for config.get_* functions, builds and runs the git CLI command\n    and returns the result dict for the calling function to parse.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_job(self, job_id, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if job_id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'job_id'.\")\n        return self.transport.perform_request(\n            \"DELETE\", _make_path(\"_ml\", \"anomaly_detectors\", job_id), params=params\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-job.html>`_\n\n        :arg job_id: The ID of the job to delete\n        :arg force: True if the job should be forcefully deleted, default False\n        :arg wait_for_completion: Should this request wait until the operation\n            has completed before returning, default True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _draw_rect(ax:plt.Axes, b:Collection[int], color:str='white', text=None, text_size=14):\n    \"\"\n    patch = ax.add_patch(patches.Rectangle(b[:2], *b[-2:], fill=False, edgecolor=color, lw=2))\n    _draw_outline(patch, 4)\n    if text is not None:\n        patch = ax.text(*b[:2], text, verticalalignment='top', color=color, fontsize=text_size, weight='bold')\n        _draw_outline(patch,1)", "output": "Draw bounding box on `ax`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _start(self, worker=None):\n        \"\"\"\"\"\"\n        if worker:\n            self._queue_workers.append(worker)\n\n        if self._queue_workers and self._running_threads < self._max_threads:\n            #print('Queue: {0} Running: {1} Workers: {2} '\n            #       'Threads: {3}'.format(len(self._queue_workers),\n            #                                 self._running_threads,\n            #                                 len(self._workers),\n            #                                 len(self._threads)))\n            self._running_threads += 1\n            worker = self._queue_workers.popleft()\n            thread = QThread()\n            if isinstance(worker, PythonWorker):\n                worker.moveToThread(thread)\n                worker.sig_finished.connect(thread.quit)\n                thread.started.connect(worker._start)\n                thread.start()\n            elif isinstance(worker, ProcessWorker):\n                thread.quit()\n                worker._start()\n            self._threads.append(thread)\n        else:\n            self._timer.start()\n\n        if self._workers:\n            for w in self._workers:\n                if w.is_finished():\n                    self._bag_collector.append(w)\n                    self._workers.remove(w)\n\n        if self._threads:\n            for t in self._threads:\n                if t.isFinished():\n                    self._threads.remove(t)\n                    self._running_threads -= 1\n\n        if len(self._threads) == 0 and len(self._workers) == 0:\n            self._timer.stop()\n            self._timer_worker_delete.start()", "output": "Start threads and check for inactive workers.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_service_exec():\n    '''\n    \n    '''\n    contextkey = 'systemd._get_service_exec'\n    if contextkey not in __context__:\n        executables = ('update-rc.d', 'chkconfig')\n        for executable in executables:\n            service_exec = salt.utils.path.which(executable)\n            if service_exec is not None:\n                break\n        else:\n            raise CommandExecutionError(\n                'Unable to find sysv service manager (tried {0})'.format(\n                    ', '.join(executables)\n                )\n            )\n        __context__[contextkey] = service_exec\n    return __context__[contextkey]", "output": "Returns the path to the sysv service manager (either update-rc.d or\n    chkconfig)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_setitem_lengths(indexer, value, values):\n    \"\"\"\n    \n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (isinstance(indexer, np.ndarray) and\n                    indexer.dtype == np.bool_ and\n                    len(indexer[indexer]) == len(value)):\n                raise ValueError(\"cannot set using a list-like indexer \"\n                                 \"with a different length than the value\")\n    # slice\n    elif isinstance(indexer, slice):\n\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\"cannot set using a slice indexer with a \"\n                                 \"different length than the value\")", "output": "Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        The key for the setitem\n    value : array-like\n        The value for the setitem\n    values : array-like\n        The values being set into\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't\n        match.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _calculate_price_by_slippage(self, action: str, price: float) -> float:\n        \"\"\"\n        \n        \"\"\"\n        if action == \"buy\":\n            return price * (1 + self.slippage)\n        if action == \"sell\":\n            return price * (1 - self.slippage)\n        return price", "output": "\u8ba1\u7b97\u8003\u8651\u6ed1\u70b9\u4e4b\u540e\u7684\u4ef7\u683c\n        :param action: \u4ea4\u6613\u52a8\u4f5c\uff0c \u652f\u6301 ['buy', 'sell']\n        :param price: \u539f\u59cb\u4ea4\u6613\u4ef7\u683c\n        :return: \u8003\u8651\u6ed1\u70b9\u540e\u7684\u4ea4\u6613\u4ef7\u683c", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def Reload(self):\n    \"\"\"\"\"\"\n    logger.info('Beginning EventMultiplexer.Reload()')\n    self._reload_called = True\n    # Build a list so we're safe even if the list of accumulators is modified\n    # even while we're reloading.\n    with self._accumulators_mutex:\n      items = list(self._accumulators.items())\n    items_queue = queue.Queue()\n    for item in items:\n      items_queue.put(item)\n\n    # Methods of built-in python containers are thread-safe so long as the GIL\n    # for the thread exists, but we might as well be careful.\n    names_to_delete = set()\n    names_to_delete_mutex = threading.Lock()\n\n    def Worker():\n      \"\"\"Keeps reloading accumulators til none are left.\"\"\"\n      while True:\n        try:\n          name, accumulator = items_queue.get(block=False)\n        except queue.Empty:\n          # No more runs to reload.\n          break\n\n        try:\n          accumulator.Reload()\n        except (OSError, IOError) as e:\n          logger.error('Unable to reload accumulator %r: %s', name, e)\n        except directory_watcher.DirectoryDeletedError:\n          with names_to_delete_mutex:\n            names_to_delete.add(name)\n        finally:\n          items_queue.task_done()\n\n    if self._max_reload_threads > 1:\n      num_threads = min(\n          self._max_reload_threads, len(items))\n      logger.info('Starting %d threads to reload runs', num_threads)\n      for i in xrange(num_threads):\n        thread = threading.Thread(target=Worker, name='Reloader %d' % i)\n        thread.daemon = True\n        thread.start()\n      items_queue.join()\n    else:\n      logger.info(\n          'Reloading runs serially (one after another) on the main '\n          'thread.')\n      Worker()\n\n    with self._accumulators_mutex:\n      for name in names_to_delete:\n        logger.warn('Deleting accumulator %r', name)\n        del self._accumulators[name]\n    logger.info('Finished with EventMultiplexer.Reload()')\n    return self", "output": "Call `Reload` on every `EventAccumulator`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def merge_text(initial_config=None,\n               initial_path=None,\n               merge_config=None,\n               merge_path=None,\n               saltenv='base'):\n    '''\n    \n    '''\n    candidate_tree = merge_tree(initial_config=initial_config,\n                                initial_path=initial_path,\n                                merge_config=merge_config,\n                                merge_path=merge_path,\n                                saltenv=saltenv)\n    return _print_config_text(candidate_tree)", "output": "Return the merge result of the ``initial_config`` with the ``merge_config``,\n    as plain text.\n\n    initial_config\n        The initial configuration sent as text. This argument is ignored when\n        ``initial_path`` is set.\n\n    initial_path\n        Absolute or remote path from where to load the initial configuration\n        text. This argument allows any URI supported by\n        :py:func:`cp.get_url <salt.modules.cp.get_url>`), e.g., ``salt://``,\n        ``https://``, ``s3://``, ``ftp:/``, etc.\n\n    merge_config\n        The config to be merged into the initial config, sent as text. This\n        argument is ignored when ``merge_path`` is set.\n\n    merge_path\n        Absolute or remote path from where to load the merge configuration\n        text. This argument allows any URI supported by\n        :py:func:`cp.get_url <salt.modules.cp.get_url>`), e.g., ``salt://``,\n        ``https://``, ``s3://``, ``ftp:/``, etc.\n\n    saltenv: ``base``\n        Salt fileserver environment from which to retrieve the file.\n        Ignored if ``initial_path`` or ``merge_path`` is not a ``salt://`` URL.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' iosconfig.merge_text initial_path=salt://path/to/running.cfg merge_path=salt://path/to/merge.cfg", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transform (list, pattern, indices = [1]):\n    \"\"\" \n    \"\"\"\n    result = []\n\n    for e in list:\n        m = re.match (pattern, e)\n\n        if m:\n            for i in indices:\n                result.append (m.group (i))\n\n    return result", "output": "Matches all elements of 'list' agains the 'pattern'\n        and returns a list of the elements indicated by indices of\n        all successfull matches. If 'indices' is omitted returns\n        a list of first paranthethised groups of all successfull\n        matches.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_bst(root):\n    \"\"\"\n    \n    \"\"\"\n\n    stack = []\n    pre = None\n    \n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        if pre and root.val <= pre.val:\n            return False\n        pre = root\n        root = root.right\n\n    return True", "output": ":type root: TreeNode\n    :rtype: bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def serve_file(self, load):\n        '''\n        \n        '''\n        ret = {'data': '',\n               'dest': ''}\n\n        if 'env' in load:\n            # \"env\" is not supported; Use \"saltenv\".\n            load.pop('env')\n\n        if 'path' not in load or 'loc' not in load or 'saltenv' not in load:\n            return ret\n        if not isinstance(load['saltenv'], six.string_types):\n            load['saltenv'] = six.text_type(load['saltenv'])\n\n        fnd = self.find_file(load['path'], load['saltenv'])\n        if not fnd.get('back'):\n            return ret\n        fstr = '{0}.serve_file'.format(fnd['back'])\n        if fstr in self.servers:\n            return self.servers[fstr](load, fnd)\n        return ret", "output": "Serve up a chunk of a file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pad_sentences(sentences, padding_word=\"</s>\"):\n    \"\"\"\n    \"\"\"\n    sequence_length = max(len(x) for x in sentences)\n    padded_sentences = []\n    for i, sentence in enumerate(sentences):\n        num_padding = sequence_length - len(sentence)\n        new_sentence = sentence + [padding_word] * num_padding\n        padded_sentences.append(new_sentence)\n    return padded_sentences", "output": "Pads all sentences to the same length. The length is defined by the longest sentence.\n    Returns padded sentences.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_fold_trigger(block):\n        \"\"\"\n        \n        \"\"\"\n        if block is None:\n            return False\n        state = block.userState()\n        if state == -1:\n            state = 0\n        return bool(state & 0x04000000)", "output": "Checks if the block is a fold trigger.\n\n        :param block: block to check\n        :return: True if the block is a fold trigger (represented as a node in\n            the fold panel)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _send_error_report(\n        self, message, report_location=None, http_context=None, user=None\n    ):\n        \"\"\"\n        \"\"\"\n        error_report = self._build_error_report(\n            message, report_location, http_context, user\n        )\n        self.report_errors_api.report_error_event(error_report)", "output": "Makes the call to the Error Reporting API.\n\n        This is the lower-level interface to build and send the payload,\n        generally users will use either report() or report_exception() to\n        automatically gather the parameters for this method.\n\n        :type message: str\n        :param message: The stack trace that was reported or logged by the\n                   service.\n\n        :type report_location: dict\n        :param report_location:  The location in the source code where the\n               decision was made to report the error, usually the place\n               where it was logged. For a logged exception this would be the\n               source line where the exception is logged, usually close to\n               the place where it was caught.\n\n               This should be a Python dict that contains the keys 'filePath',\n               'lineNumber', and 'functionName'\n\n        :type http_context: :class`google.cloud.error_reporting.HTTPContext`\n        :param http_context: The HTTP request which was processed when the\n                             error was triggered.\n\n        :type user: str\n        :param user: The user who caused or was affected by the crash. This can\n                     be a user ID, an email address, or an arbitrary token that\n                     uniquely identifies the user. When sending an error\n                     report, leave this field empty if the user was not\n                     logged in. In this  case the Error Reporting system will\n                     use other data, such as remote IP address,\n                     to distinguish affected users.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write_config(config, newlines=2):\n    '''\n    \n    '''\n    text = config\n    if isinstance(config, dict) and len(list(list(config.keys()))) == 1:\n        key = next(six.iterkeys(config))\n        text = config[key]\n\n    try:\n        with salt.utils.files.fopen(__SYSLOG_NG_CONFIG_FILE, 'a') as fha:\n            fha.write(salt.utils.stringutils.to_str(text))\n\n            for _ in range(0, newlines):\n                fha.write(salt.utils.stringutils.to_str(os.linesep))\n        return True\n    except Exception as err:\n        log.error(six.text_type(err))\n        return False", "output": "Writes the given parameter config into the config file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def batch_market_order(self, share_counts):\n        \"\"\"\n        \"\"\"\n        style = MarketOrder()\n        order_args = [\n            (asset, amount, style)\n            for (asset, amount) in iteritems(share_counts)\n            if amount\n        ]\n        return self.blotter.batch_order(order_args)", "output": "Place a batch market order for multiple assets.\n\n        Parameters\n        ----------\n        share_counts : pd.Series[Asset -> int]\n            Map from asset to number of shares to order for that asset.\n\n        Returns\n        -------\n        order_ids : pd.Index[str]\n            Index of ids for newly-created orders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def array_repeat(col, count):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.array_repeat(_to_java_column(col), count))", "output": "Collection function: creates an array containing a column repeated count times.\n\n    >>> df = spark.createDataFrame([('ab',)], ['data'])\n    >>> df.select(array_repeat(df.data, 3).alias('r')).collect()\n    [Row(r=[u'ab', u'ab', u'ab'])]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def call_color(*args, **kwargs):\n    '''\n    \n    '''\n    res = dict()\n\n    colormap = {\n        'red': Const.COLOR_RED,\n        'green': Const.COLOR_GREEN,\n        'blue': Const.COLOR_BLUE,\n        'orange': Const.COLOR_ORANGE,\n        'pink': Const.COLOR_PINK,\n        'white': Const.COLOR_WHITE,\n        'yellow': Const.COLOR_YELLOW,\n        'daylight': Const.COLOR_DAYLIGHT,\n        'purple': Const.COLOR_PURPLE,\n    }\n\n    devices = _get_lights()\n    color = kwargs.get(\"gamut\")\n    if color:\n        color = color.split(\",\")\n        if len(color) == 2:\n            try:\n                color = {\"xy\": [float(color[0]), float(color[1])]}\n            except Exception as ex:\n                color = None\n        else:\n            color = None\n\n    if not color:\n        color = colormap.get(kwargs.get(\"color\", 'white'), Const.COLOR_WHITE)\n    color.update({\"transitiontime\": max(min(kwargs.get(\"transition\", 0), 200), 0)})\n\n    for dev_id in 'id' not in kwargs and sorted(devices.keys()) or _get_devices(kwargs):\n        res[dev_id] = _set(dev_id, color)\n\n    return res", "output": "Set a color to the lamp.\n\n    Options:\n\n    * **id**: Specifies a device ID. Can be a comma-separated values. All, if omitted.\n    * **color**: Fixed color. Values are: red, green, blue, orange, pink, white,\n                 yellow, daylight, purple. Default white.\n    * **transition**: Transition 0~200.\n\n    Advanced:\n\n    * **gamut**: XY coordinates. Use gamut according to the Philips HUE devices documentation.\n                 More: http://www.developers.meethue.com/documentation/hue-xy-values\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' hue.color\n        salt '*' hue.color id=1\n        salt '*' hue.color id=1,2,3 oolor=red transition=30\n        salt '*' hue.color id=1 gamut=0.3,0.5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_netmask(cls, arg):\n        \"\"\"\n        \"\"\"\n        if arg not in cls._netmask_cache:\n            if isinstance(arg, _compat_int_types):\n                prefixlen = arg\n            else:\n                try:\n                    # Check for a netmask in prefix length form\n                    prefixlen = cls._prefix_from_prefix_string(arg)\n                except NetmaskValueError:\n                    # Check for a netmask or hostmask in dotted-quad form.\n                    # This may raise NetmaskValueError.\n                    prefixlen = cls._prefix_from_ip_string(arg)\n            netmask = IPv4Address(cls._ip_int_from_prefix(prefixlen))\n            cls._netmask_cache[arg] = netmask, prefixlen\n        return cls._netmask_cache[arg]", "output": "Make a (netmask, prefix_len) tuple from the given argument.\n\n        Argument can be:\n        - an integer (the prefix length)\n        - a string representing the prefix length (e.g. \"24\")\n        - a string representing the prefix netmask (e.g. \"255.255.255.0\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_role_mapping(self, name=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"GET\", _make_path(\"_security\", \"role_mapping\", name), params=params\n        )", "output": "`<https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html>`_\n\n        :arg name: Role-Mapping name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _all_indexes_same(indexes):\n    \"\"\"\n    \n    \"\"\"\n    first = indexes[0]\n    for index in indexes[1:]:\n        if not first.equals(index):\n            return False\n    return True", "output": "Determine if all indexes contain the same elements.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    bool\n        True if all indexes contain the same elements, False otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def installed(name, default=False, user=None):\n    '''\n    \n    '''\n    ret = {'name': name, 'result': None, 'comment': '', 'changes': {}}\n\n    if name.startswith('python-'):\n        name = re.sub(r'^python-', '', name)\n\n    if __opts__['test']:\n        ret['comment'] = 'python {0} is set to be installed'.format(name)\n        return ret\n\n    ret = _check_pyenv(ret, user)\n    if ret['result'] is False:\n        if not __salt__['pyenv.install'](user):\n            ret['comment'] = 'pyenv failed to install'\n            return ret\n        else:\n            return _check_and_install_python(ret, name, default, user=user)\n    else:\n        return _check_and_install_python(ret, name, default, user=user)", "output": "Verify that the specified python is installed with pyenv. pyenv is\n    installed if necessary.\n\n    name\n        The version of python to install\n\n    default : False\n        Whether to make this python the default.\n\n    user: None\n        The user to run pyenv as.\n\n        .. versionadded:: 0.17.0\n\n    .. versionadded:: 0.16.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _id_map(minion_id, dns_name):\n    '''\n    \n    '''\n    bank = 'digicert/minions'\n    cache = salt.cache.Cache(__opts__, syspaths.CACHE_DIR)\n    dns_names = cache.fetch(bank, minion_id)\n    if not isinstance(dns_names, list):\n        dns_names = []\n    if dns_name not in dns_names:\n        dns_names.append(dns_name)\n    cache.store(bank, minion_id, dns_names)", "output": "Maintain a relationship between a minion and a dns name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def emitCurrentToken(self):\n        \"\"\"\n        \"\"\"\n        token = self.currentToken\n        # Add token to the queue to be yielded\n        if (token[\"type\"] in tagTokenTypes):\n            token[\"name\"] = token[\"name\"].translate(asciiUpper2Lower)\n            if token[\"type\"] == tokenTypes[\"EndTag\"]:\n                if token[\"data\"]:\n                    self.tokenQueue.append({\"type\": tokenTypes[\"ParseError\"],\n                                            \"data\": \"attributes-in-end-tag\"})\n                if token[\"selfClosing\"]:\n                    self.tokenQueue.append({\"type\": tokenTypes[\"ParseError\"],\n                                            \"data\": \"self-closing-flag-on-end-tag\"})\n        self.tokenQueue.append(token)\n        self.state = self.dataState", "output": "This method is a generic handler for emitting the tags. It also sets\n        the state to \"data\" because that's what's needed after a token has been\n        emitted.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clear_lock(self, back=None, remote=None):\n        '''\n        \n        '''\n        back = self.backends(back)\n        cleared = []\n        errors = []\n        for fsb in back:\n            fstr = '{0}.clear_lock'.format(fsb)\n            if fstr in self.servers:\n                good, bad = clear_lock(self.servers[fstr],\n                                       fsb,\n                                       remote=remote)\n                cleared.extend(good)\n                errors.extend(bad)\n        return cleared, errors", "output": "Clear the update lock for the enabled fileserver backends\n\n        back\n            Only clear the update lock for the specified backend(s). The\n            default is to clear the lock for all enabled backends\n\n        remote\n            If specified, then any remotes which contain the passed string will\n            have their lock cleared.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(database, table, key):\n    \"\"\"\"\"\"\n    field = random.randrange(10)\n    value = ''.join(random.choice(string.printable) for i in range(100))\n    with database.batch() as batch:\n        batch.update(table=table, columns=('id', 'field%d' % field),\n                     values=[(key, value)])", "output": "Does a single update operation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def relaxNGNewMemParserCtxt(buffer, size):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlRelaxNGNewMemParserCtxt(buffer, size)\n    if ret is None:raise parserError('xmlRelaxNGNewMemParserCtxt() failed')\n    return relaxNgParserCtxt(_obj=ret)", "output": "Create an XML RelaxNGs parse context for that memory buffer\n       expected to contain an XML RelaxNGs file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def autocorrelation_plot(series, ax=None, **kwds):\n    \"\"\"\n    \n    \"\"\"\n    import matplotlib.pyplot as plt\n    n = len(series)\n    data = np.asarray(series)\n    if ax is None:\n        ax = plt.gca(xlim=(1, n), ylim=(-1.0, 1.0))\n    mean = np.mean(data)\n    c0 = np.sum((data - mean) ** 2) / float(n)\n\n    def r(h):\n        return ((data[:n - h] - mean) *\n                (data[h:] - mean)).sum() / float(n) / c0\n    x = np.arange(n) + 1\n    y = lmap(r, x)\n    z95 = 1.959963984540054\n    z99 = 2.5758293035489004\n    ax.axhline(y=z99 / np.sqrt(n), linestyle='--', color='grey')\n    ax.axhline(y=z95 / np.sqrt(n), color='grey')\n    ax.axhline(y=0.0, color='black')\n    ax.axhline(y=-z95 / np.sqrt(n), color='grey')\n    ax.axhline(y=-z99 / np.sqrt(n), linestyle='--', color='grey')\n    ax.set_xlabel(\"Lag\")\n    ax.set_ylabel(\"Autocorrelation\")\n    ax.plot(x, y, **kwds)\n    if 'label' in kwds:\n        ax.legend()\n    ax.grid()\n    return ax", "output": "Autocorrelation plot for time series.\n\n    Parameters:\n    -----------\n    series: Time series\n    ax: Matplotlib axis object, optional\n    kwds : keywords\n        Options to pass to matplotlib plotting method\n\n    Returns:\n    -----------\n    class:`matplotlib.axis.Axes`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def equals(self, other):\n        \"\"\"\n        \n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if not isinstance(other, MultiIndex):\n            other_vals = com.values_from_object(ensure_index(other))\n            return array_equivalent(self._ndarray_values, other_vals)\n\n        if self.nlevels != other.nlevels:\n            return False\n\n        if len(self) != len(other):\n            return False\n\n        for i in range(self.nlevels):\n            self_codes = self.codes[i]\n            self_codes = self_codes[self_codes != -1]\n            self_values = algos.take_nd(np.asarray(self.levels[i]._values),\n                                        self_codes, allow_fill=False)\n\n            other_codes = other.codes[i]\n            other_codes = other_codes[other_codes != -1]\n            other_values = algos.take_nd(\n                np.asarray(other.levels[i]._values),\n                other_codes, allow_fill=False)\n\n            # since we use NaT both datetime64 and timedelta64\n            # we can have a situation where a level is typed say\n            # timedelta64 in self (IOW it has other values than NaT)\n            # but types datetime64 in other (where its all NaT)\n            # but these are equivalent\n            if len(self_values) == 0 and len(other_values) == 0:\n                continue\n\n            if not array_equivalent(self_values, other_values):\n                return False\n\n        return True", "output": "Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See Also\n        --------\n        equal_levels", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_train(batch_id, batch_num, metric, step_loss, log_interval, epoch_id, learning_rate):\n    \"\"\"\n    \"\"\"\n    metric_nm, metric_val = metric.get()\n    if not isinstance(metric_nm, list):\n        metric_nm = [metric_nm]\n        metric_val = [metric_val]\n\n    train_str = '[Epoch %d Batch %d/%d] loss=%.4f, lr=%.7f, metrics:' + \\\n                ','.join([i + ':%.4f' for i in metric_nm])\n    logging.info(train_str, epoch_id + 1, batch_id + 1, batch_num, \\\n                 step_loss / log_interval, \\\n                 learning_rate, \\\n                 *metric_val)", "output": "Generate and print out the log message for training.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def grad_to_image(gradient):\n    \"\"\"\"\"\"\n    gradient = gradient - gradient.min()\n    gradient /= gradient.max()\n    gradient = np.uint8(gradient * 255).transpose(1, 2, 0)\n    gradient = gradient[..., ::-1]\n    return gradient", "output": "Convert gradients of image obtained using `get_image_grad`\n    into image. This shows parts of the image that is most strongly activating\n    the output neurons.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_jids():\n    '''\n    \n    '''\n    with _get_serv(ret=None, commit=True) as cur:\n\n        sql = '''SELECT jid, load\n                FROM jids'''\n\n        cur.execute(sql)\n        data = cur.fetchall()\n        ret = {}\n        for jid, load in data:\n            ret[jid] = salt.utils.jid.format_jid_instance(jid,\n                                                          salt.utils.json.loads(load))\n        return ret", "output": "Return a list of all job ids", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_dvs_network_resource_pools(network_resource_pools, resource_dicts):\n    '''\n    \n    '''\n    for res_dict in resource_dicts:\n        ress = [r for r in network_resource_pools if r.key == res_dict['key']]\n        if ress:\n            res = ress[0]\n        else:\n            res = vim.DVSNetworkResourcePoolConfigSpec()\n            res.key = res_dict['key']\n            res.allocationInfo = \\\n                    vim.DVSNetworkResourcePoolAllocationInfo()\n            network_resource_pools.append(res)\n        if res_dict.get('limit'):\n            res.allocationInfo.limit = res_dict['limit']\n        if res_dict.get('num_shares') and res_dict.get('share_level'):\n            if not res.allocationInfo.shares:\n                res.allocationInfo.shares = vim.SharesInfo()\n            res.allocationInfo.shares.shares = res_dict['num_shares']\n            res.allocationInfo.shares.level = \\\n                    vim.SharesLevel(res_dict['share_level'])", "output": "Applies the values of the resource dictionaries to network resource pools,\n    creating the resource pools if required\n    (vim.DVSNetworkResourcePoolConfigSpec)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_host_hostname(name, domains=None, **api_opts):\n    '''\n    \n    '''\n    name = name.lower().rstrip('.')\n    if not domains:\n        return name.split('.')[0]\n    domain = get_host_domainname(name, domains, **api_opts)\n    if domain and domain in name:\n        return name.rsplit('.' + domain)[0]\n    return name", "output": "Get hostname\n\n    If no domains are passed, the hostname is checked for a zone in infoblox,\n    if no zone split on first dot.\n\n    If domains are provided, the best match out of the list is truncated from\n    the fqdn leaving the hostname.\n\n    If no matching domains are found the fqdn is returned.\n\n    dots at end of names are ignored.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-call infoblox.get_host_hostname fqdn=localhost.xxx.t.domain.com \\\n            domains=\"['domain.com', 't.domain.com']\"\n        #returns: localhost.xxx\n\n        salt-call infoblox.get_host_hostname fqdn=localhost.xxx.t.domain.com\n        #returns: localhost", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reboot(name, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The restart action must be called with -a or --action.'\n        )\n\n    data = show_instance(name, call='action')\n    if data.get('status') == 'off':\n        return {'success': True,\n                'action': 'stop',\n                'status': 'off',\n                'msg': 'Machine is already off.'}\n\n    ret = query(droplet_id=data['id'],\n                command='actions',\n                args={'type': 'reboot'},\n                http_method='post')\n\n    return {'success': True,\n            'action': ret['action']['type'],\n            'state': ret['action']['status']}", "output": "Reboot a droplet in DigitalOcean.\n\n    .. versionadded:: 2015.8.8\n\n    name\n        The name of the droplet to restart.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -a reboot droplet_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _lcs(p, l):\n        \"\"\" \"\"\"\n        # Dynamic Programming Finding LCS\n        if len(p) == 0:\n            return 0\n        P = np.array(list(p)).reshape((1, len(p)))\n        L = np.array(list(l)).reshape((len(l), 1))\n        M = np.ndarray(shape=(len(P), len(L)), dtype=np.int32)\n        for i in range(M.shape[0]):\n            for j in range(M.shape[1]):\n                up = 0 if i == 0 else M[i-1, j]\n                left = 0 if j == 0 else M[i, j-1]\n\n                if i == 0 or j == 0:\n                    M[i, j] = max(up, left, M[i, j])\n                else:\n                    M[i, j] = M[i, j] + M[i - 1, j - 1]\n        return M.max()", "output": "Calculates the Longest Common Subsequence between p and l (both list of int) and returns its length", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_command(self, ctx, args):\n        \"\"\"\n        \n        \"\"\"\n        original_cmd_name = click.utils.make_str(args[0])\n\n        try:\n            return super(DYMMixin, self).resolve_command(ctx, args)\n        except click.exceptions.UsageError as error:\n            error_msg = str(error)\n            matches = difflib.get_close_matches(original_cmd_name,\n                                                self.list_commands(ctx), self.max_suggestions, self.cutoff)\n            if matches:\n                error_msg += '\\n\\nDid you mean one of these?\\n    %s' % '\\n    '.join(matches)  # pylint: disable=line-too-long\n\n            raise click.exceptions.UsageError(error_msg, error.ctx)", "output": "Overrides clicks ``resolve_command`` method\n        and appends *Did you mean ...* suggestions\n        to the raised exception message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def predict_array(self, arr):\n        \"\"\"\n        \n        \"\"\"\n        precompute = self.precompute\n        self.precompute = False\n        pred = super().predict_array(arr)\n        self.precompute = precompute\n        return pred", "output": "This over-ride is necessary because otherwise the learner method accesses the wrong model when it is called\n        with precompute set to true\n\n        Args:\n            arr: a numpy array to be used as input to the model for prediction purposes\n        Returns:\n            a numpy array containing the predictions from the model", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rar(rarfile, sources, template=None, cwd=None, runas=None):\n    '''\n    \n    '''\n    cmd = ['rar', 'a', '-idp', '{0}'.format(rarfile)]\n    cmd.extend(_expand_sources(sources))\n    return __salt__['cmd.run'](cmd,\n                               cwd=cwd,\n                               template=template,\n                               runas=runas,\n                               python_shell=False).splitlines()", "output": "Uses `rar for Linux`_ to create rar files\n\n    .. _`rar for Linux`: http://www.rarlab.com/\n\n    rarfile\n        Path of rar file to be created\n\n    sources\n        Comma-separated list of sources to include in the rar file. Sources can\n        also be passed in a Python list.\n\n        .. versionchanged:: 2017.7.0\n            Globbing is now supported for this argument\n\n    cwd : None\n        Run the rar command from the specified directory. Use this argument\n        along with relative file paths to create rar files which do not\n        contain the leading directories. If not specified, this will default\n        to the home directory of the user under which the salt minion process\n        is running.\n\n        .. versionadded:: 2014.7.1\n\n    template : None\n        Can be set to 'jinja' or another supported template engine to render\n        the command arguments before execution:\n\n        .. code-block:: bash\n\n            salt '*' archive.rar template=jinja /tmp/rarfile.rar '/tmp/sourcefile1,/tmp/{{grains.id}}.txt'\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' archive.rar /tmp/rarfile.rar /tmp/sourcefile1,/tmp/sourcefile2\n        # Globbing for sources (2017.7.0 and later)\n        salt '*' archive.rar /tmp/rarfile.rar '/tmp/sourcefile*'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def def_emb_sz(classes, n, sz_dict=None):\n    \"\"\n    sz_dict = ifnone(sz_dict, {})\n    n_cat = len(classes[n])\n    sz = sz_dict.get(n, int(emb_sz_rule(n_cat)))  # rule of thumb\n    return n_cat,sz", "output": "Pick an embedding size for `n` depending on `classes` if not given in `sz_dict`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def extract_references_from_wets(wet_files, metadata_dir, out_dir,\n                                 tmp_dir=None):\n  \"\"\"\"\"\"\n  # Setup output files\n  shard_files = make_ref_shard_files(out_dir)\n\n  num_refs = 0\n  for i, wet_file in enumerate(wet_files):\n    num_refs_in_wet = 0\n    tf.logging.info(\"Processing file %d\", i)\n\n    # Read metadata file\n    metadata_fname = os.path.join(\n        metadata_dir, os.path.basename(wet_file)) + cc_utils.METADTA_SUFFIX\n    with tf.gfile.Open(cc_utils.readahead(metadata_fname)) as f:\n      wet_metadata = json.loads(f.read())\n\n    if not wet_metadata:\n      # No references in this WET file\n      continue\n\n    if wet_file.startswith(\"http\"):\n      # download\n      if not tmp_dir:\n        tmp_dir = tempfile.gettempdir()\n      record_gen = cc_utils.wet_records_from_url(wet_file, tmp_dir)\n    else:\n      # local\n      record_gen = cc_utils.wet_records_from_file_obj(\n          cc_utils.gzip_memfile(wet_file), take_ownership=True)\n\n    for wet_record in record_gen:\n      shard_ids = wet_metadata.get(wet_record.url)\n      if not shard_ids:\n        # URL not in dataset\n        continue\n\n      # Serialize and write out\n      ex = _make_example_from_record(wet_record)\n      ex_str = ex.SerializeToString()\n      for shard_id in shard_ids:\n        shard_files[shard_id].write(ex_str)\n      num_refs += 1\n      num_refs_in_wet += 1\n\n    tf.logging.info(\"Wrote out %d references for this WET\", num_refs_in_wet)\n\n  tf.logging.info(\"Wrote out %d references total\", num_refs)\n\n  # Cleanup\n  for shard_file in shard_files:\n    shard_file.close()", "output": "Extract references from WET files into sharded output files.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_all_subscriptions_by_topic(name, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n    '''\n    cache_key = _subscriptions_cache_key(name)\n    try:\n        return __context__[cache_key]\n    except KeyError:\n        pass\n\n    conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n    ret = conn.get_all_subscriptions_by_topic(get_arn(name, region, key, keyid, profile))\n    __context__[cache_key] = ret['ListSubscriptionsByTopicResponse']['ListSubscriptionsByTopicResult']['Subscriptions']\n    return __context__[cache_key]", "output": "Get list of all subscriptions to a specific topic.\n\n    CLI example to delete a topic::\n\n        salt myminion boto_sns.get_all_subscriptions_by_topic mytopic region=us-east-1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _thread_main(self):\n        \"\"\"\n        \"\"\"\n        _LOGGER.debug(\"Background thread started.\")\n\n        quit_ = False\n        while True:\n            batch = self._cloud_logger.batch()\n            items = _get_many(\n                self._queue,\n                max_items=self._max_batch_size,\n                max_latency=self._max_latency,\n            )\n\n            for item in items:\n                if item is _WORKER_TERMINATOR:\n                    quit_ = True\n                    # Continue processing items, don't break, try to process\n                    # all items we got back before quitting.\n                else:\n                    batch.log_struct(**item)\n\n            self._safely_commit_batch(batch)\n\n            for _ in range(len(items)):\n                self._queue.task_done()\n\n            if quit_:\n                break\n\n        _LOGGER.debug(\"Background thread exited gracefully.\")", "output": "The entry point for the worker thread.\n\n        Pulls pending log entries off the queue and writes them in batches to\n        the Cloud Logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def print_evaluation(period=1, show_stdv=True):\n    \"\"\"\n    \"\"\"\n    def callback(env):\n        \"\"\"internal function\"\"\"\n        if env.rank != 0 or (not env.evaluation_result_list) or period is False or period == 0:\n            return\n        i = env.iteration\n        if i % period == 0 or i + 1 == env.begin_iteration or i + 1 == env.end_iteration:\n            msg = '\\t'.join([_fmt_metric(x, show_stdv) for x in env.evaluation_result_list])\n            rabit.tracker_print('[%d]\\t%s\\n' % (i, msg))\n    return callback", "output": "Create a callback that print evaluation result.\n\n    We print the evaluation results every **period** iterations\n    and on the first and the last iterations.\n\n    Parameters\n    ----------\n    period : int\n        The period to log the evaluation results\n\n    show_stdv : bool, optional\n         Whether show stdv if provided\n\n    Returns\n    -------\n    callback : function\n        A callback that print evaluation every period iterations.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _env_is_exposed(env):\n    '''\n    \n    '''\n    if __opts__['svnfs_env_whitelist']:\n        salt.utils.versions.warn_until(\n            'Neon',\n            'The svnfs_env_whitelist config option has been renamed to '\n            'svnfs_saltenv_whitelist. Please update your configuration.'\n        )\n        whitelist = __opts__['svnfs_env_whitelist']\n    else:\n        whitelist = __opts__['svnfs_saltenv_whitelist']\n\n    if __opts__['svnfs_env_blacklist']:\n        salt.utils.versions.warn_until(\n            'Neon',\n            'The svnfs_env_blacklist config option has been renamed to '\n            'svnfs_saltenv_blacklist. Please update your configuration.'\n        )\n        blacklist = __opts__['svnfs_env_blacklist']\n    else:\n        blacklist = __opts__['svnfs_saltenv_blacklist']\n\n    return salt.utils.stringutils.check_whitelist_blacklist(\n        env,\n        whitelist=whitelist,\n        blacklist=blacklist,\n    )", "output": "Check if an environment is exposed by comparing it against a whitelist and\n    blacklist.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_cache_subnet_groups(name=None, region=None, key=None,\n                             keyid=None, profile=None):\n    '''\n    \n    '''\n    return [g['CacheSubnetGroupName'] for g in\n            get_all_cache_subnet_groups(name, region, key, keyid, profile)]", "output": "Return a list of all cache subnet group names\n\n    CLI example::\n\n        salt myminion boto_elasticache.list_subnet_groups region=us-east-1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def months_between(date1, date2, roundOff=True):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.months_between(\n        _to_java_column(date1), _to_java_column(date2), roundOff))", "output": "Returns number of months between dates date1 and date2.\n    If date1 is later than date2, then the result is positive.\n    If date1 and date2 are on the same day of month, or both are the last day of month,\n    returns an integer (time of day will be ignored).\n    The result is rounded off to 8 digits unless `roundOff` is set to `False`.\n\n    >>> df = spark.createDataFrame([('1997-02-28 10:30:00', '1996-10-30')], ['date1', 'date2'])\n    >>> df.select(months_between(df.date1, df.date2).alias('months')).collect()\n    [Row(months=3.94959677)]\n    >>> df.select(months_between(df.date1, df.date2, False).alias('months')).collect()\n    [Row(months=3.9495967741935485)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_ownership(obj, raise_if_false=True):\n    \"\"\"\n    \"\"\"\n    if not obj:\n        return False\n\n    security_exception = SupersetSecurityException(\n        \"You don't have the rights to alter [{}]\".format(obj))\n\n    if g.user.is_anonymous:\n        if raise_if_false:\n            raise security_exception\n        return False\n    roles = [r.name for r in get_user_roles()]\n    if 'Admin' in roles:\n        return True\n    session = db.create_scoped_session()\n    orig_obj = session.query(obj.__class__).filter_by(id=obj.id).first()\n\n    # Making a list of owners that works across ORM models\n    owners = []\n    if hasattr(orig_obj, 'owners'):\n        owners += orig_obj.owners\n    if hasattr(orig_obj, 'owner'):\n        owners += [orig_obj.owner]\n    if hasattr(orig_obj, 'created_by'):\n        owners += [orig_obj.created_by]\n\n    owner_names = [o.username for o in owners if o]\n\n    if (\n            g.user and hasattr(g.user, 'username') and\n            g.user.username in owner_names):\n        return True\n    if raise_if_false:\n        raise security_exception\n    else:\n        return False", "output": "Meant to be used in `pre_update` hooks on models to enforce ownership\n\n    Admin have all access, and other users need to be referenced on either\n    the created_by field that comes with the ``AuditMixin``, or in a field\n    named ``owners`` which is expected to be a one-to-many with the User\n    model. It is meant to be used in the ModelView's pre_update hook in\n    which raising will abort the update.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def revoke_auth(preserve_minion_cache=False):\n    '''\n    \n    '''\n    masters = list()\n    ret = True\n    if 'master_uri_list' in __opts__:\n        for master_uri in __opts__['master_uri_list']:\n            masters.append(master_uri)\n    else:\n        masters.append(__opts__['master_uri'])\n\n    for master in masters:\n        channel = salt.transport.client.ReqChannel.factory(__opts__, master_uri=master)\n        tok = channel.auth.gen_token(b'salt')\n        load = {'cmd': 'revoke_auth',\n                'id': __opts__['id'],\n                'tok': tok,\n                'preserve_minion_cache': preserve_minion_cache}\n        try:\n            channel.send(load)\n        except SaltReqTimeoutError:\n            ret = False\n        finally:\n            channel.close()\n    return ret", "output": "The minion sends a request to the master to revoke its own key.\n    Note that the minion session will be revoked and the minion may\n    not be able to return the result of this command back to the master.\n\n    If the 'preserve_minion_cache' flag is set to True, the master\n    cache for this minion will not be removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.revoke_auth", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs,\n                                                       {'axes' : 'axis',\n                                                        'ends' : 'end',\n                                                        'starts' : 'begin'})\n    # onnx slice provides slicing on multiple axis. Adding multiple slice_axis operator\n    # for multiple axes from mxnet\n    begin = new_attrs.get('begin')\n    end = new_attrs.get('end')\n    axes = new_attrs.get('axis', tuple(range(len(begin))))\n    slice_op = symbol.slice_axis(inputs[0], axis=axes[0], begin=begin[0], end=end[0])\n    if len(axes) > 1:\n        for i, axis in enumerate(axes):\n            slice_op = symbol.slice_axis(slice_op, axis=axis, begin=begin[i], end=end[i])\n    return slice_op, new_attrs, inputs", "output": "Returns a slice of the input tensor along multiple axes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_learning_rate_from_args(args: argparse.Namespace) -> None:\n    \"\"\"\n    \n    \"\"\"\n    params = Params.from_file(args.param_path, args.overrides)\n    find_learning_rate_model(params, args.serialization_dir,\n                             start_lr=args.start_lr,\n                             end_lr=args.end_lr,\n                             num_batches=args.num_batches,\n                             linear_steps=args.linear,\n                             stopping_factor=args.stopping_factor,\n                             force=args.force)", "output": "Start learning rate finder for given args", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_subject(self, subject):\n        \"\"\"\n        \n        \"\"\"\n\n        url = '/'.join([self.url, 'subjects', subject])\n\n        result, code = self._send_request(url, method=\"DELETE\")\n        if not (code >= 200 and code <= 299):\n            raise ClientError('Unable to delete subject: {}'.format(result))\n        return result", "output": "DELETE /subjects/(string: subject)\n        Deletes the specified subject and its associated compatibility level if registered.\n        It is recommended to use this API only when a topic needs to be recycled or in development environments.\n        :param subject: subject name\n        :returns: version of the schema deleted under this subject\n        :rtype: (int)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_predictor(self, pred_parameter=None):\n        \"\"\"\"\"\"\n        predictor = _InnerPredictor(booster_handle=self.handle, pred_parameter=pred_parameter)\n        predictor.pandas_categorical = self.pandas_categorical\n        return predictor", "output": "Convert to predictor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_list_cli(self,\n                         mine=False,\n                         page=1,\n                         page_size=20,\n                         search=None,\n                         csv_display=False,\n                         parent=None,\n                         competition=None,\n                         dataset=None,\n                         user=None,\n                         language=None,\n                         kernel_type=None,\n                         output_type=None,\n                         sort_by=None):\n        \"\"\" \n        \"\"\"\n        kernels = self.kernels_list(\n            page=page,\n            page_size=page_size,\n            search=search,\n            mine=mine,\n            dataset=dataset,\n            competition=competition,\n            parent_kernel=parent,\n            user=user,\n            language=language,\n            kernel_type=kernel_type,\n            output_type=output_type,\n            sort_by=sort_by)\n        fields = ['ref', 'title', 'author', 'lastRunTime', 'totalVotes']\n        if kernels:\n            if csv_display:\n                self.print_csv(kernels, fields)\n            else:\n                self.print_table(kernels, fields)\n        else:\n            print('No kernels found')", "output": "client wrapper for kernels_list, see this function for arguments.\n            Additional arguments are provided here.\n             Parameters\n            ==========\n            csv_display: if True, print comma separated values instead of table", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_jids():\n    '''\n    \n    '''\n    serv = _get_serv(ret=None)\n    sql = \"select distinct(jid) from jids group by load\"\n\n    # [{u'points': [[0, jid, load],\n    #               [0, jid, load]],\n    #   u'name': u'jids',\n    #   u'columns': [u'time', u'distinct', u'load']}]\n    data = serv.query(sql)\n    ret = {}\n    if data:\n        for _, jid, load in data[0]['points']:\n            ret[jid] = salt.utils.jid.format_jid_instance(jid, salt.utils.json.loads(load))\n    return ret", "output": "Return a list of all job ids", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespaces(**kwargs):\n    '''\n    \n    '''\n    cfg = _setup_conn(**kwargs)\n    try:\n        api_instance = kubernetes.client.CoreV1Api()\n        api_response = api_instance.list_namespace()\n\n        return [nms['metadata']['name'] for nms in api_response.to_dict().get('items')]\n    except (ApiException, HTTPError) as exc:\n        if isinstance(exc, ApiException) and exc.status == 404:\n            return None\n        else:\n            log.exception('Exception when calling CoreV1Api->list_namespace')\n            raise CommandExecutionError(exc)\n    finally:\n        _cleanup(**cfg)", "output": "Return the names of the available namespaces\n\n    CLI Examples::\n\n        salt '*' kubernetes.namespaces\n        salt '*' kubernetes.namespaces kubeconfig=/etc/salt/k8s/kubeconfig context=minikube", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def removeRef(self, attr):\n        \"\"\" \"\"\"\n        if attr is None: attr__o = None\n        else: attr__o = attr._o\n        ret = libxml2mod.xmlRemoveRef(self._o, attr__o)\n        return ret", "output": "Remove the given attribute from the Ref table maintained\n           internally.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_focus_widget_properties(self):\r\n        \"\"\"\"\"\"\r\n        from spyder.plugins.editor.widgets.editor import TextEditBaseWidget\r\n        from spyder.plugins.ipythonconsole.widgets import ControlWidget\r\n        widget = QApplication.focusWidget()\r\n\r\n        textedit_properties = None\r\n        if isinstance(widget, (TextEditBaseWidget, ControlWidget)):\r\n            console = isinstance(widget, ControlWidget)\r\n            not_readonly = not widget.isReadOnly()\r\n            readwrite_editor = not_readonly and not console\r\n            textedit_properties = (console, not_readonly, readwrite_editor)\r\n        return widget, textedit_properties", "output": "Get properties of focus widget\r\n        Returns tuple (widget, properties) where properties is a tuple of\r\n        booleans: (is_console, not_readonly, readwrite_editor)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_pyproject_toml(self):\n        # type: () -> None\n        \"\"\"\n        \"\"\"\n        pep517_data = load_pyproject_toml(\n            self.use_pep517,\n            self.pyproject_toml,\n            self.setup_py,\n            str(self)\n        )\n\n        if pep517_data is None:\n            self.use_pep517 = False\n        else:\n            self.use_pep517 = True\n            requires, backend, check = pep517_data\n            self.requirements_to_check = check\n            self.pyproject_requires = requires\n            self.pep517_backend = Pep517HookCaller(self.setup_py_dir, backend)\n\n            # Use a custom function to call subprocesses\n            self.spin_message = \"\"\n\n            def runner(cmd, cwd=None, extra_environ=None):\n                with open_spinner(self.spin_message) as spinner:\n                    call_subprocess(\n                        cmd,\n                        cwd=cwd,\n                        extra_environ=extra_environ,\n                        show_stdout=False,\n                        spinner=spinner\n                    )\n                self.spin_message = \"\"\n\n            self.pep517_backend._subprocess_runner = runner", "output": "Load the pyproject.toml file.\n\n        After calling this routine, all of the attributes related to PEP 517\n        processing for this requirement have been set. In particular, the\n        use_pep517 attribute can be used to determine whether we should\n        follow the PEP 517 or legacy (setup.py) code path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def receive_trial_result(self, parameter_id, parameters, value):\n        \"\"\"\n        \"\"\"\n        reward = extract_scalar_reward(value)\n        if self.optimize_mode is OptimizeMode.Maximize:\n            reward = -reward\n\n        if parameter_id not in self.total_data:\n            raise RuntimeError('Received parameter_id not in total_data.')\n        if self.first_one:\n            self.smbo_solver.nni_smac_receive_first_run(self.total_data[parameter_id], reward)\n            self.first_one = False\n        else:\n            self.smbo_solver.nni_smac_receive_runs(self.total_data[parameter_id], reward)", "output": "receive_trial_result\n       \n        Parameters\n        ----------\n        parameter_id: int\n            parameter id\n        parameters:\n            parameters\n        value:\n            value\n        \n        Raises\n        ------\n        RuntimeError\n            Received parameter id not in total_data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def full_data(tgt,\n              fun,\n              arg=None,\n              tgt_type='glob',\n              returner='',\n              timeout=5):\n    '''\n    \n\n    '''\n    return _publish(tgt,\n                    fun,\n                    arg=arg,\n                    tgt_type=tgt_type,\n                    returner=returner,\n                    timeout=timeout,\n                    form='full',\n                    wait=True)", "output": "Return the full data about the publication, this is invoked in the same\n    way as the publish function\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt system.example.com publish.full_data '*' cmd.run 'ls -la /tmp'\n\n    .. admonition:: Attention\n\n        If you need to pass a value to a function argument and that value\n        contains an equal sign, you **must** include the argument name.\n        For example:\n\n        .. code-block:: bash\n\n            salt '*' publish.full_data test.kwarg arg='cheese=spam'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_inference(batch_id, batch_num, metric, step_loss, log_interval):\n    \"\"\"\n    \"\"\"\n    metric_nm, metric_val = metric.get()\n    if not isinstance(metric_nm, list):\n        metric_nm = [metric_nm]\n        metric_val = [metric_val]\n\n    eval_str = '[Batch %d/%d] loss=%.4f, metrics:' + \\\n               ','.join([i + ':%.4f' for i in metric_nm])\n    logging.info(eval_str, batch_id + 1, batch_num, \\\n                 step_loss / log_interval, \\\n                 *metric_val)", "output": "Generate and print out the log message for inference.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _dictionary_to_stringlist(input_dict):\n    '''\n    \n    '''\n    string_value = \"\"\n    for s in input_dict:\n        string_value += \"{0}={1},\".format(s, input_dict[s])\n    string_value = string_value[:-1]\n    return string_value", "output": "Convert a dictionary to a stringlist (comma separated settings)\n\n    The result of the dictionary {'setting1':'value1','setting2':'value2'} will be:\n\n    setting1=value1,setting2=value2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_code(self, code):\n        \"\"\"\n        \"\"\"\n        # code= [code] if isinstance(code,str) else\n        return self.new(self.data.loc[(slice(None), code), :])", "output": "getcode \u83b7\u53d6\u67d0\u4e00\u53ea\u80a1\u7968\u7684\u677f\u5757\n\n        Arguments:\n            code {str} -- \u80a1\u7968\u4ee3\u7801\n\n        Returns:\n            DataStruct -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def embed_sentences(self,\n                        sentences: Iterable[List[str]],\n                        batch_size: int = DEFAULT_BATCH_SIZE) -> Iterable[numpy.ndarray]:\n        \"\"\"\n        \n        \"\"\"\n        for batch in lazy_groups_of(iter(sentences), batch_size):\n            yield from self.embed_batch(batch)", "output": "Computes the ELMo embeddings for a iterable of sentences.\n\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n\n        Parameters\n        ----------\n        sentences : ``Iterable[List[str]]``, required\n            An iterable of tokenized sentences.\n        batch_size : ``int``, required\n            The number of sentences ELMo should process at once.\n\n        Returns\n        -------\n            A list of tensors, each representing the ELMo vectors for the input sentence at the same index.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __dict_to_pod_spec(spec):\n    '''\n    \n    '''\n    spec_obj = kubernetes.client.V1PodSpec()\n    for key, value in iteritems(spec):\n        if hasattr(spec_obj, key):\n            setattr(spec_obj, key, value)\n\n    return spec_obj", "output": "Converts a dictionary into kubernetes V1PodSpec instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_vm(name, datacenter=None, vm_properties=None, traversal_spec=None,\n           parent_ref=None, service_instance=None):\n    '''\n    \n    '''\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties,\n        traversal_spec=traversal_spec,\n        parent_ref=parent_ref)\n    return virtual_machine", "output": "Returns vm object properties.\n\n    name\n        Name of the virtual machine.\n\n    datacenter\n        Datacenter name\n\n    vm_properties\n        List of vm properties.\n\n    traversal_spec\n        Traversal Spec object(s) for searching.\n\n    parent_ref\n        Container Reference object for searching under a given object.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _tmp_access_rule(method,\n                    ip=None,\n                    ttl=None,\n                    port=None,\n                    direction='in',\n                    port_origin='d',\n                    ip_origin='d',\n                    comment=''):\n    '''\n    \n    '''\n    if _status_csf():\n        if ip is None:\n            return {'error': 'You must supply an ip address or CIDR.'}\n        if ttl is None:\n            return {'error': 'You must supply a ttl.'}\n        args = _build_tmp_access_args(method, ip, ttl, port, direction, comment)\n        return __csf_cmd(args)", "output": "Handles the cmd execution for tempdeny and tempallow commands.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def release(self, xcoord, ycoord):\n        \"\"\"\n        \n        \"\"\"\n        self._actions.append(lambda: self._driver.execute(\n            Command.TOUCH_UP, {\n                'x': int(xcoord),\n                'y': int(ycoord)}))\n        return self", "output": "Release previously issued tap 'and hold' command at specified location.\n\n        :Args:\n         - xcoord: X Coordinate to release.\n         - ycoord: Y Coordinate to release.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def skip_connection_distance(a, b):\n    \"\"\"\"\"\"\n    if a[2] != b[2]:\n        return 1.0\n    len_a = abs(a[1] - a[0])\n    len_b = abs(b[1] - b[0])\n    return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))", "output": "The distance between two skip-connections.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def key_type(key, host=None, port=None, db=None, password=None):\n    '''\n    \n    '''\n    server = _connect(host, port, db, password)\n    return server.type(key)", "output": "Get redis key type\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' redis.type foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_schema_resource(info):\n    \"\"\"\n    \"\"\"\n    if \"fields\" not in info:\n        return ()\n\n    schema = []\n    for r_field in info[\"fields\"]:\n        name = r_field[\"name\"]\n        field_type = r_field[\"type\"]\n        mode = r_field.get(\"mode\", \"NULLABLE\")\n        description = r_field.get(\"description\")\n        sub_fields = _parse_schema_resource(r_field)\n        schema.append(SchemaField(name, field_type, mode, description, sub_fields))\n    return schema", "output": "Parse a resource fragment into a schema field.\n\n    Args:\n        info: (Mapping[str->dict]): should contain a \"fields\" key to be parsed\n\n    Returns:\n        (Union[Sequence[:class:`google.cloud.bigquery.schema.SchemaField`],None])\n            a list of parsed fields, or ``None`` if no \"fields\" key found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        if self.name is None:\r\n            self.name = osp.basename(root_path)\r\n        self.root_path = to_text_string(root_path)\r\n        config_path = self.__get_project_config_path()\r\n        if osp.exists(config_path):\r\n            self.load()\r\n        else:\r\n            if not osp.isdir(self.root_path):\r\n                os.mkdir(self.root_path)\r\n            self.save()", "output": "Set project root path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,\n                            delete_project_on_failure):\n    \"\"\"\n    \"\"\"\n    with work_in(repo_dir):\n        try:\n            run_hook(hook_name, project_dir, context)\n        except FailedHookException:\n            if delete_project_on_failure:\n                rmtree(project_dir)\n            logger.error(\n                \"Stopping generation because {} hook \"\n                \"script didn't exit successfully\".format(hook_name)\n            )\n            raise", "output": "Run hook from repo directory, clean project directory if hook fails.\n\n    :param repo_dir: Project template input directory.\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    :param delete_project_on_failure: Delete the project directory on hook\n        failure?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_resources(name, expr, resources):\n    \"\"\"\n    \"\"\"\n    if expr is None:\n        return\n    bound = expr._resources()\n    if not bound and resources is None:\n        raise ValueError('no resources provided to compute %s' % name)\n    if bound and resources:\n        raise ValueError(\n            'explicit and implicit resources provided to compute %s' % name,\n        )", "output": "Validate that the expression and resources passed match up.\n\n    Parameters\n    ----------\n    name : str\n        The name of the argument we are checking.\n    expr : Expr\n        The potentially bound expr.\n    resources\n        The explicitly passed resources to compute expr.\n\n    Raises\n    ------\n    ValueError\n        If the resources do not match for an expression.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nanmedian(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    \n    \"\"\"\n    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])\n\n    values, mask, dtype, dtype_max, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values):\n        values = values.astype('f8')\n        values[mask] = np.nan\n\n    if axis is None:\n        values = values.ravel()\n\n    notempty = values.size\n\n    # an array from a frame\n    if values.ndim > 1:\n\n        # there's a non-empty array to apply over otherwise numpy raises\n        if notempty:\n            if not skipna:\n                return _wrap_results(\n                    np.apply_along_axis(get_median, axis, values), dtype)\n\n            # fastpath for the skipna case\n            return _wrap_results(np.nanmedian(values, axis), dtype)\n\n        # must return the correct shape, but median is not defined for the\n        # empty set so return nans of shape \"everything but the passed axis\"\n        # since \"axis\" is where the reduction would occur if we had a nonempty\n        # array\n        shp = np.array(values.shape)\n        dims = np.arange(values.ndim)\n        ret = np.empty(shp[dims != axis])\n        ret.fill(np.nan)\n        return _wrap_results(ret, dtype)\n\n    # otherwise return a scalar value\n    return _wrap_results(get_median(values) if notempty else np.nan, dtype)", "output": "Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 2])\n    >>> nanops.nanmedian(s)\n    2.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_user(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'delete_user', name],\n        reset_system_locale=False,\n        python_shell=False,\n        runas=runas)\n    msg = 'Deleted'\n\n    return _format_response(res, msg)", "output": "Deletes a user via rabbitmqctl delete_user.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.delete_user rabbit_user", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def timed_operation(msg, log_start=False):\n    \"\"\"\n    \n    \"\"\"\n    assert len(msg)\n    if log_start:\n        logger.info('Start {} ...'.format(msg))\n    start = timer()\n    yield\n    msg = msg[0].upper() + msg[1:]\n    logger.info('{} finished, time:{:.4f} sec.'.format(\n        msg, timer() - start))", "output": "Surround a context with a timer.\n\n    Args:\n        msg(str): the log to print.\n        log_start(bool): whether to print also at the beginning.\n\n    Example:\n        .. code-block:: python\n\n            with timed_operation('Good Stuff'):\n                time.sleep(1)\n\n        Will print:\n\n        .. code-block:: python\n\n            Good stuff finished, time:1sec.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_python_interpreter_valid_name(filename):\r\n    \"\"\"\"\"\"\r\n    pattern = r'.*python(\\d\\.?\\d*)?(w)?(.exe)?$'\r\n    if re.match(pattern, filename, flags=re.I) is None:\r\n        return False\r\n    else:\r\n        return True", "output": "Check that the python interpreter file has a valid name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup():\n    \"\"\"\n    \n    \"\"\"\n    # create an index template\n    index_template = BlogPost._index.as_template(ALIAS, PATTERN)\n    # upload the template into elasticsearch\n    # potentially overriding the one already there\n    index_template.save()\n\n    # create the first index if it doesn't exist\n    if not BlogPost._index.exists():\n        migrate(move_data=False)", "output": "Create the index template in elasticsearch specifying the mappings and any\n    settings to be used. This can be run at any time, ideally at every new code\n    deploy.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def focusInEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        show_status = getattr(self.lineEdit(), 'show_status_icon', None)\r\n        if show_status:\r\n            show_status()\r\n        QComboBox.focusInEvent(self, event)", "output": "Handle focus in event restoring to display the status icon.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unregister(name, delete=False):\n    '''\n    \n    '''\n    nodes = list_nodes_min()\n    if name not in nodes:\n        raise CommandExecutionError(\n            'The specified VM ({0}) is not registered.'.format(name)\n        )\n\n    cmd = '{0} unregistervm {1}'.format(vboxcmd(), name)\n    if delete is True:\n        cmd += ' --delete'\n    ret = salt.modules.cmdmod.run_all(cmd)\n    if ret['retcode'] == 0:\n        return True\n    return ret['stderr']", "output": "Unregister a VM\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vboxmanage.unregister my_vm_filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _filter_nodes(superclass, all_nodes=_all_nodes):\n    \"\"\"\"\"\"\n    node_names = (node.__name__ for node in all_nodes\n                  if issubclass(node, superclass))\n    return frozenset(node_names)", "output": "Filter out AST nodes that are subclasses of ``superclass``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def autologin(self, limit=10):\n        \"\"\"\n        \"\"\"\n        for _ in range(limit):\n            if self.login():\n                break\n        else:\n            raise exceptions.NotLoginError(\n                \"\u767b\u5f55\u5931\u8d25\u6b21\u6570\u8fc7\u591a, \u8bf7\u68c0\u67e5\u5bc6\u7801\u662f\u5426\u6b63\u786e / \u5238\u5546\u670d\u52a1\u5668\u662f\u5426\u5904\u4e8e\u7ef4\u62a4\u4e2d / \u7f51\u7edc\u8fde\u63a5\u662f\u5426\u6b63\u5e38\"\n            )\n        self.keepalive()", "output": "\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\n        :param limit: \u767b\u5f55\u6b21\u6570\u9650\u5236", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def split_by_fname_file(self, fname:PathOrStr, path:PathOrStr=None)->'ItemLists':\n        \"\"\n        path = Path(ifnone(path, self.path))\n        valid_names = loadtxt_str(path/fname)\n        return self.split_by_files(valid_names)", "output": "Split the data by using the names in `fname` for the validation set. `path` will override `self.path`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ports_open(name, ports, proto='tcp', direction='in'):\n    '''\n    \n    '''\n\n    ports = list(six.moves.map(six.text_type, ports))\n    diff = False\n    ret = {'name': ','.join(ports),\n           'changes': {},\n           'result': True,\n           'comment': 'Ports open.'}\n\n    current_ports = __salt__['csf.get_ports'](proto=proto, direction=direction)\n    direction = direction.upper()\n    directions = __salt__['csf.build_directions'](direction)\n    for direction in directions:\n        log.trace('current_ports[direction]: %s', current_ports[direction])\n        log.trace('ports: %s', ports)\n        if current_ports[direction] != ports:\n            diff = True\n    if diff:\n        result = __salt__['csf.allow_ports'](ports, proto=proto, direction=direction)\n        ret['changes']['Ports'] = 'Changed'\n        ret['comment'] = result\n    return ret", "output": "Ensure ports are open for a protocol, in a direction.\n    e.g. - proto='tcp', direction='in' would set the values\n    for TCP_IN in the csf.conf file.\n\n    ports\n        A list of ports that should be open.\n\n    proto\n        The protocol. May be one of 'tcp', 'udp',\n        'tcp6', or 'udp6'.\n\n    direction\n        Choose 'in', 'out', or both to indicate the port\n        should be opened for inbound traffic, outbound\n        traffic, or both.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_external_workers(worker):\n    \"\"\"\n    \n    \"\"\"\n    worker_that_blocked_task = collections.defaultdict(set)\n    get_work_response_history = worker._get_work_response_history\n    for get_work_response in get_work_response_history:\n        if get_work_response['task_id'] is None:\n            for running_task in get_work_response['running_tasks']:\n                other_worker_id = running_task['worker']\n                other_task_id = running_task['task_id']\n                other_task = worker._scheduled_tasks.get(other_task_id)\n                if other_worker_id == worker._id or not other_task:\n                    continue\n                worker_that_blocked_task[other_worker_id].add(other_task)\n    return worker_that_blocked_task", "output": "This returns a dict with a set of tasks for all of the other workers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main_target_usage_requirements (self, specification, project):\n        \"\"\" \n        \"\"\"\n        assert is_iterable_typed(specification, basestring)\n        assert isinstance(project, ProjectTarget)\n        project_usage_requirements = project.get ('usage-requirements')\n\n        # We don't use 'refine-from-user-input' because I'm not sure if:\n        # - removing of parent's usage requirements makes sense\n        # - refining of usage requirements is not needed, since usage requirements\n        #   are always free.\n        usage_requirements = property_set.create_from_user_input(\n            specification, project.project_module(), project.get(\"location\"))\n\n        return project_usage_requirements.add (usage_requirements)", "output": "Returns the use requirement to use when declaraing a main target,\n            which are obtained by\n            - translating all specified property paths, and\n            - adding project's usage requirements\n            specification:  Use-properties explicitly specified for a main target\n            project:        Project where the main target is to be declared", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def signature(self):\n        \"\"\"\"\"\"\n        if self.usage is not None:\n            return self.usage\n\n\n        params = self.clean_params\n        if not params:\n            return ''\n\n        result = []\n        for name, param in params.items():\n            greedy = isinstance(param.annotation, converters._Greedy)\n\n            if param.default is not param.empty:\n                # We don't want None or '' to trigger the [name=value] case and instead it should\n                # do [name] since [name=None] or [name=] are not exactly useful for the user.\n                should_print = param.default if isinstance(param.default, str) else param.default is not None\n                if should_print:\n                    result.append('[%s=%s]' % (name, param.default) if not greedy else\n                                  '[%s=%s]...' % (name, param.default))\n                    continue\n                else:\n                    result.append('[%s]' % name)\n\n            elif param.kind == param.VAR_POSITIONAL:\n                result.append('[%s...]' % name)\n            elif greedy:\n                result.append('[%s]...' % name)\n            elif self._is_typing_optional(param.annotation):\n                result.append('[%s]' % name)\n            else:\n                result.append('<%s>' % name)\n\n        return ' '.join(result)", "output": "Returns a POSIX-like signature useful for help command output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join(self, timeout: Union[float, datetime.timedelta] = None) -> Awaitable[None]:\n        \"\"\"\n        \"\"\"\n        return self._finished.wait(timeout)", "output": "Block until all items in the queue are processed.\n\n        Returns an awaitable, which raises `tornado.util.TimeoutError` after a\n        timeout.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def choose_trial_to_run(self, trial_runner):\n        \"\"\"\n        \"\"\"\n\n        candidates = []\n        for trial in trial_runner.get_trials():\n            if trial.status in [Trial.PENDING, Trial.PAUSED] and \\\n                    trial_runner.has_resources(trial.resources):\n                candidates.append(trial)\n        candidates.sort(\n            key=lambda trial: self._trial_state[trial].last_perturbation_time)\n        return candidates[0] if candidates else None", "output": "Ensures all trials get fair share of time (as defined by time_attr).\n\n        This enables the PBT scheduler to support a greater number of\n        concurrent trials than can fit in the cluster at any given time.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def createURLParserCtxt(filename, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlCreateURLParserCtxt(filename, options)\n    if ret is None:raise parserError('xmlCreateURLParserCtxt() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a parser context for a file or URL content.\n      Automatic support for ZLIB/Compress compressed document is\n      provided by default if found at compile-time and for file\n       accesses", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _log_error_and_abort(ret, obj):\n    '''\n    \n    '''\n    ret['result'] = False\n    ret['abort'] = True\n    if 'error' in obj:\n        ret['comment'] = '{0}'.format(obj.get('error'))\n    return ret", "output": "helper function to update errors in the return structure", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_instances(name, lifecycle_state=\"InService\", health_status=\"Healthy\",\n                  attribute=\"private_ip_address\", attributes=None, region=None,\n                  key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n    ec2_conn = _get_ec2_conn(region=region, key=key, keyid=keyid, profile=profile)\n    retries = 30\n    while True:\n        try:\n            asgs = conn.get_all_groups(names=[name])\n            break\n        except boto.exception.BotoServerError as e:\n            if retries and e.code == 'Throttling':\n                log.debug('Throttled by AWS API, retrying in 5 seconds...')\n                time.sleep(5)\n                retries -= 1\n                continue\n            log.error(e)\n            return False\n    if len(asgs) != 1:\n        log.debug(\"name '%s' returns multiple ASGs: %s\", name, [asg.name for asg in asgs])\n        return False\n    asg = asgs[0]\n    instance_ids = []\n    # match lifecycle_state and health_status\n    for i in asg.instances:\n        if lifecycle_state is not None and i.lifecycle_state != lifecycle_state:\n            continue\n        if health_status is not None and i.health_status != health_status:\n            continue\n        instance_ids.append(i.instance_id)\n    # get full instance info, so that we can return the attribute\n    instances = ec2_conn.get_only_instances(instance_ids=instance_ids)\n    if attributes:\n        return [[_convert_attribute(instance, attr) for attr in attributes] for instance in instances]\n    else:\n        # properly handle case when not all instances have the requested attribute\n        return [_convert_attribute(instance, attribute) for instance in instances if getattr(instance, attribute)]", "output": "return attribute of all instances in the named autoscale group.\n\n    CLI example::\n\n        salt-call boto_asg.get_instances my_autoscale_group_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shell_split(text):\r\n    \"\"\"\r\n    \r\n    \"\"\"\r\n    assert is_text_string(text)  # in case a QString is passed...\r\n    pattern = r'(\\s+|(?<!\\\\)\".*?(?<!\\\\)\"|(?<!\\\\)\\'.*?(?<!\\\\)\\')'\r\n    out = []\r\n    for token in re.split(pattern, text):\r\n        if token.strip():\r\n            out.append(token.strip('\"').strip(\"'\"))\r\n    return out", "output": "Split the string `text` using shell-like syntax\r\n\r\n    This avoids breaking single/double-quoted strings (e.g. containing\r\n    strings with spaces). This function is almost equivalent to the shlex.split\r\n    function (see standard library `shlex`) except that it is supporting\r\n    unicode strings (shlex does not support unicode until Python 2.7.3).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def random_chars(number):\n    \"\"\"\"\"\"\n    char_map = {\n        k: v for k, v in chars.CHARS.iteritems()\n        if not format_character(k).startswith('\\\\x')\n    }\n\n    char_num = sum(char_map.values())\n    return (\n        format_character(nth_char(char_map, random.randint(0, char_num - 1)))\n        for _ in xrange(0, number)\n    )", "output": "Generate random characters", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_services(rule):\n    '''\n    \n    '''\n    parser = argparse.ArgumentParser()\n    rules = shlex.split(rule)\n    rules.pop(0)\n    parser.add_argument('--disabled', dest='disabled', action='store')\n    parser.add_argument('--enabled', dest='enabled', action='store')\n\n    args = clean_args(vars(parser.parse_args(rules)))\n    parser = None\n    return args", "output": "Parse the services line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def summary(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.hasSummary:\n            return LinearRegressionTrainingSummary(super(LinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "output": "Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exception(self, timeout=None):\n        \"\"\"\n        \"\"\"\n        # Wait until the future is done.\n        if not self._completed.wait(timeout=timeout):\n            raise exceptions.TimeoutError(\"Timed out waiting for result.\")\n\n        # If the batch completed successfully, this should return None.\n        if self._result != self._SENTINEL:\n            return None\n\n        # Okay, this batch had an error; this should return it.\n        return self._exception", "output": "Return the exception raised by the call, if any.\n\n        This blocks until the message has successfully been published, and\n        returns the exception. If the call succeeded, return None.\n\n        Args:\n            timeout (Union[int, float]): The number of seconds before this call\n                times out and raises TimeoutError.\n\n        Raises:\n            TimeoutError: If the request times out.\n\n        Returns:\n            Exception: The exception raised by the call, if any.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema_get(name, profile=None):\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    schema_props = {}\n    for prop in g_client.schemas.get(name).properties:\n        schema_props[prop.name] = prop.description\n    log.debug(\n        'Properties of schema %s:\\n%s',\n        name, pprint.PrettyPrinter(indent=4).pformat(schema_props)\n    )\n    return {name: schema_props}", "output": "Known valid names of schemas are:\n      - image\n      - images\n      - member\n      - members\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.schema_get name=f16-jeos", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process(self, processor:PreProcessors=None):\n        \"\"\n        if processor is not None: self.processor = processor\n        self.processor = listify(self.processor)\n        for p in self.processor: p.process(self)\n        return self", "output": "Apply `processor` or `self.processor` to `self`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def relabel(self, change):\n        \"\"\n        class_new,class_old,file_path = change.new,change.old,change.owner.file_path\n        fp = Path(file_path)\n        parent = fp.parents[1]\n        self._csv_dict[fp] = class_new", "output": "Relabel images by moving from parent dir with old label `class_old` to parent dir with new label `class_new`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def json2space(x, oldy=None, name=NodeType.Root.value):\n    \"\"\"\n    \"\"\"\n    y = list()\n    if isinstance(x, dict):\n        if NodeType.Type.value in x.keys():\n            _type = x[NodeType.Type.value]\n            name = name + '-' + _type\n            if _type == 'choice':\n                if oldy != None:\n                    _index = oldy[NodeType.Index.value]\n                    y += json2space(x[NodeType.Value.value][_index],\n                                    oldy[NodeType.Value.value], name=name+'[%d]' % _index)\n                else:\n                    y += json2space(x[NodeType.Value.value], None, name=name)\n            y.append(name)\n        else:\n            for key in x.keys():\n                y += json2space(x[key], (oldy[key] if oldy !=\n                                         None else None), name+\"[%s]\" % str(key))\n    elif isinstance(x, list):\n        for i, x_i in enumerate(x):\n            y += json2space(x_i, (oldy[i] if oldy !=\n                                  None else None), name+\"[%d]\" % i)\n    else:\n        pass\n    return y", "output": "Change search space from json format to hyperopt format", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_lb(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_lb function must be called with -f or --function.'\n        )\n    if not kwargs or 'name' not in kwargs:\n        log.error(\n            'Must specify name of load-balancer.'\n        )\n        return False\n\n    lb_conn = get_lb_conn(get_conn())\n    return _expand_balancer(lb_conn.get_balancer(kwargs['name']))", "output": "Show the details of an existing load-balancer.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_lb gce name=lb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_schema(self, schema, field, value):\n        \"\"\"  \"\"\"\n        if schema is None:\n            return\n\n        if isinstance(value, Sequence) and not isinstance(value, _str_type):\n            self.__validate_schema_sequence(field, schema, value)\n        elif isinstance(value, Mapping):\n            self.__validate_schema_mapping(field, schema, value)", "output": "{'type': ['dict', 'string'],\n             'anyof': [{'validator': 'schema'},\n                       {'validator': 'bulk_schema'}]}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def crop_or_pad_to(height, width):\n    \"\"\"\n    \"\"\"\n    def inner(t_image):\n        return tf.image.resize_image_with_crop_or_pad(t_image, height, width)\n    return inner", "output": "Ensures the specified spatial shape by either padding or cropping.\n    Meant to be used as a last transform for architectures insisting on a specific\n    spatial shape of their inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def power_on_vm(name, datacenter=None, service_instance=None):\n    '''\n    \n\n    '''\n    log.trace('Powering on virtual machine %s', name)\n    vm_properties = [\n        'name',\n        'summary.runtime.powerState'\n    ]\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties)\n    if virtual_machine['summary.runtime.powerState'] == 'poweredOn':\n        result = {'comment': 'Virtual machine is already powered on',\n                  'changes': {'power_on': True}}\n        return result\n    salt.utils.vmware.power_cycle_vm(virtual_machine['object'], action='on')\n    result = {'comment': 'Virtual machine power on action succeeded',\n              'changes': {'power_on': True}}\n    return result", "output": "Powers on a virtual machine specified by it's name.\n\n    name\n        Name of the virtual machine\n\n    datacenter\n        Datacenter of the virtual machine\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.power_on_vm name=my_vm", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reboot_node(node_id, profile, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    node = _get_by_id(conn.list_nodes(**libcloud_kwargs), node_id)\n    return conn.reboot_node(node, **libcloud_kwargs)", "output": "Reboot a node in the cloud\n\n    :param node_id: Unique ID of the node to reboot\n    :type  node_id: ``str``\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's reboot_node method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_compute.reboot_node as-2346 profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean_whitespace(statement):\n    \"\"\"\n    \n    \"\"\"\n    import re\n\n    # Replace linebreaks and tabs with spaces\n    statement.text = statement.text.replace('\\n', ' ').replace('\\r', ' ').replace('\\t', ' ')\n\n    # Remove any leeding or trailing whitespace\n    statement.text = statement.text.strip()\n\n    # Remove consecutive spaces\n    statement.text = re.sub(' +', ' ', statement.text)\n\n    return statement", "output": "Remove any consecutive whitespace characters from the statement text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_one_generator (project, name, generator, target_type, properties, sources):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .targets import ProjectTarget\n        assert isinstance(project, ProjectTarget)\n        assert isinstance(name, basestring) or name is None\n        assert isinstance(generator, Generator)\n        assert isinstance(target_type, basestring)\n        assert isinstance(properties, property_set.PropertySet)\n        assert is_iterable_typed(sources, virtual_target.VirtualTarget)\n    source_types = []\n\n    for s in sources:\n        source_types.append (s.type ())\n\n    viable_source_types = viable_source_types_for_generator (generator)\n\n    if source_types and viable_source_types != ['*'] and\\\n           not set_.intersection (source_types, viable_source_types):\n        if project.manager ().logger ().on ():\n            id = generator.id ()\n            project.manager ().logger ().log (__name__, \"generator '%s' pruned\" % id)\n            project.manager ().logger ().log (__name__, \"source_types\" '%s' % source_types)\n            project.manager ().logger ().log (__name__, \"viable_source_types '%s'\" % viable_source_types)\n\n        return []\n\n    else:\n        return try_one_generator_really (project, name, generator, target_type, properties, sources)", "output": "Checks if generator invocation can be pruned, because it's guaranteed\n        to fail. If so, quickly returns empty list. Otherwise, calls\n        try_one_generator_really.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_external_data_for_tensor(tensor, base_dir):  # type: (TensorProto, Text) -> None\n    \"\"\"\n    \n    \"\"\"\n    if tensor.HasField(\"raw_data\"):  # already loaded\n        return\n    info = ExternalDataInfo(tensor)\n    file_location = _sanitize_path(info.location)\n    external_data_file_path = os.path.join(base_dir, file_location)\n\n    with open(external_data_file_path, 'rb') as data_file:\n\n        if info.offset:\n            data_file.seek(info.offset)\n\n        if info.length:\n            tensor.raw_data = data_file.read(info.length)\n        else:\n            tensor.raw_data = data_file.read()", "output": "Load data from an external file for tensor.\n\n    @params\n    tensor: a TensorProto object.\n    base_dir: directory that contains the external data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def param_dict_to_str(data):\n    \"\"\"\"\"\"\n    if data is None or not data:\n        return \"\"\n    pairs = []\n    for key, val in data.items():\n        if isinstance(val, (list, tuple, set)) or is_numpy_1d_array(val):\n            pairs.append(str(key) + '=' + ','.join(map(str, val)))\n        elif isinstance(val, string_type) or isinstance(val, numeric_types) or is_numeric(val):\n            pairs.append(str(key) + '=' + str(val))\n        elif val is not None:\n            raise TypeError('Unknown type of parameter:%s, got:%s'\n                            % (key, type(val).__name__))\n    return ' '.join(pairs)", "output": "Convert Python dictionary to string, which is passed to C API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getPermissionBit(self, t, m):\n        '''\n        \n        '''\n        try:\n            if isinstance(m, string_types):\n                return self.rights[t][m]['BITS']\n            else:\n                return m\n        except KeyError:\n            raise CommandExecutionError((\n                'No right \"{0}\".  It should be one of the following:  {1}')\n                .format(m, ', '.join(self.rights[t])))", "output": "returns a permission bit of the string permission value for the specified object type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def all(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\r\n        \"\"\"\r\n        \"\"\"\r\n        if axis is not None:\r\n            axis = self._get_axis_number(axis)\r\n            if bool_only and axis == 0:\r\n                if hasattr(self, \"dtype\"):\r\n                    raise NotImplementedError(\r\n                        \"{}.{} does not implement numeric_only.\".format(\r\n                            self.__name__, \"all\"\r\n                        )\r\n                    )\r\n                data_for_compute = self[self.columns[self.dtypes == np.bool]]\r\n                return data_for_compute.all(\r\n                    axis=axis, bool_only=False, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n        else:\r\n            if bool_only:\r\n                raise ValueError(\"Axis must be 0 or 1 (got {})\".format(axis))\r\n            # Reduce to a scalar if axis is None.\r\n            result = self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=0, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n            if isinstance(result, BasePandasDataset):\r\n                return result.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return result", "output": "Return whether all elements are True over requested axis\r\n\r\n        Note:\r\n            If axis=None or axis=0, this call applies df.all(axis=1)\r\n                to the transpose of df.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def info_installed(*names, **kwargs):\n    '''\n    \n    '''\n    all_versions = kwargs.get('all_versions', False)\n    ret = dict()\n    for pkg_name, pkgs_nfo in __salt__['lowpkg.info'](*names, **kwargs).items():\n        pkg_nfo = pkgs_nfo if all_versions else [pkgs_nfo]\n        for _nfo in pkg_nfo:\n            t_nfo = dict()\n            # Translate dpkg-specific keys to a common structure\n            for key, value in _nfo.items():\n                if key == 'source_rpm':\n                    t_nfo['source'] = value\n                else:\n                    t_nfo[key] = value\n            if not all_versions:\n                ret[pkg_name] = t_nfo\n            else:\n                ret.setdefault(pkg_name, []).append(t_nfo)\n    return ret", "output": ".. versionadded:: 2015.8.1\n\n    Return the information of the named package(s), installed on the system.\n\n    :param all_versions:\n        Include information for all versions of the packages installed on the minion.\n\n    CLI example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.info_installed <package1>\n        salt '*' pkg.info_installed <package1> <package2> <package3> ...\n        salt '*' pkg.info_installed <package1> <package2> <package3> all_versions=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transform(self, X):\n        \"\"\"\n        \"\"\"\n        if isinstance(X, pd.DataFrame):\n            X_transformed = X[self.feat_list].values\n        elif isinstance(X, np.ndarray):\n            X_transformed = X[:, self.feat_list_idx]\n\n        return X_transformed.astype(np.float64)", "output": "Make subset after fit\n\n        Parameters\n        ----------\n        X: numpy ndarray, {n_samples, n_features}\n            New data, where n_samples is the number of samples and n_features is the number of features.\n\n        Returns\n        -------\n        X_transformed: array-like, shape (n_samples, n_features + 1) or (n_samples, n_features + 1 + n_classes) for classifier with predict_proba attribute\n            The transformed feature set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop(self, wait=True):\n        ''' \n\n        '''\n        assert not self._stopped, \"Already stopped\"\n        self._stopped = True\n        self._tornado.stop(wait)\n        self._http.stop()", "output": "Stop the Bokeh Server.\n\n        This stops and removes all Bokeh Server ``IOLoop`` callbacks, as well\n        as stops the ``HTTPServer`` that this instance was configured with.\n\n        Args:\n            fast (bool):\n                Whether to wait for orderly cleanup (default: True)\n\n        Returns:\n            None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_users(root=None):\n    '''\n    \n    '''\n    if root is not None:\n        getspall = functools.partial(_getspall, root=root)\n    else:\n        getspall = functools.partial(spwd.getspall)\n\n    return sorted([user.sp_namp if hasattr(user, 'sp_namp') else user.sp_nam\n                   for user in getspall()])", "output": ".. versionadded:: 2018.3.0\n\n    Return a list of all shadow users\n\n    root\n        Directory to chroot into\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' shadow.list_users", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_user(username, **kwargs):\n    '''\n    \n    '''\n    command = 'show run | include \"^username {0} password 5 \"'.format(username)\n    info = ''\n    info = show(command, **kwargs)\n    if isinstance(info, list):\n        info = info[0]\n    return info", "output": "Get username line from switch.\n\n    .. code-block: bash\n\n        salt '*' nxos.cmd get_user username=admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authorize_url(self, state=None):\n        '''\n        \n        '''\n        if not self._client_id:\n            raise ApiAuthError('No client id.')\n        kw = dict(client_id=self._client_id)\n        if self._redirect_uri:\n            kw['redirect_uri'] = self._redirect_uri\n        if self._scope:\n            kw['scope'] = self._scope\n        if state:\n            kw['state'] = state\n        return 'https://github.com/login/oauth/authorize?%s' % _encode_params(kw)", "output": "Generate authorize_url.\n\n        >>> GitHub(client_id='3ebf94c5776d565bcf75').authorize_url()\n        'https://github.com/login/oauth/authorize?client_id=3ebf94c5776d565bcf75'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def classify(self, dataset, verbose=True, batch_size=64):\n        \"\"\"\n        \n        \"\"\"\n        prob_vector = self.predict(dataset, output_type='probability_vector',\n                                   verbose=verbose, batch_size=batch_size)\n        id_to_label = self._id_to_class_label\n\n        return _tc.SFrame({\n            'class': prob_vector.apply(lambda v: id_to_label[_np.argmax(v)]),\n            'probability': prob_vector.apply(_np.max)\n        })", "output": "Return the classification for each examples in the ``dataset``.\n        The output SFrame contains predicted class labels and its probability.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | dict\n            The audio data to be classified.\n            If dataset is an SFrame, it must have a column with the same name as\n            the feature used for model training, but does not require a target\n            column. Additional columns are ignored.\n\n        verbose : bool, optional\n            If True, prints progress updates and model details.\n\n        batch_size : int, optional\n            If you are getting memory errors, try decreasing this value. If you\n            have a powerful computer, increasing this value may improve performance.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions, both class labels and probabilities.\n\n        See Also\n        ----------\n        create, evaluate, predict\n\n        Examples\n        ----------\n        >>> classes = model.classify(data)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_params(self, **params):\n        \"\"\"\n        \"\"\"\n        if not params:\n            # Simple optimization to gain speed (inspect is slow)\n            return self\n\n        for key, value in params.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n            else:\n                self.kwargs[key] = value\n\n        return self", "output": "Set the parameters of this estimator.\n        Modification of the sklearn method to allow unknown kwargs. This allows using\n        the full range of xgboost parameters that are not defined as member variables\n        in sklearn grid search.\n        Returns\n        -------\n        self", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_parsing_base():\n  \"\"\"\"\"\"\n  hparams = transformer_base()\n  hparams.attention_dropout = 0.2\n  hparams.layer_prepostprocess_dropout = 0.2\n  hparams.max_length = 512\n  hparams.learning_rate_warmup_steps = 16000\n  hparams.hidden_size = 1024\n  hparams.learning_rate = 0.05\n  hparams.shared_embedding_and_softmax_weights = False\n  return hparams", "output": "HParams for parsing on WSJ only.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def view(self, dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        return self._constructor(self._values.view(dtype),\n                                 index=self.index).__finalize__(self)", "output": "Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _handle_sub_action(self, input_dict, handler):\n        \"\"\"\n        \n        \"\"\"\n        if not self.can_handle(input_dict):\n            return input_dict\n\n        key = self.intrinsic_name\n        sub_value = input_dict[key]\n\n        input_dict[key] = self._handle_sub_value(sub_value, handler)\n\n        return input_dict", "output": "Handles resolving replacements in the Sub action based on the handler that is passed as an input.\n\n        :param input_dict: Dictionary to be resolved\n        :param supported_values: One of several different objects that contain the supported values that\n            need to be changed. See each method above for specifics on these objects.\n        :param handler: handler that is specific to each implementation.\n        :return: Resolved value of the Sub dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_base_vq1_16_nb1_packed_dan_b01_scales():\n  \"\"\"\"\"\"\n  hparams = transformer_base_vq_ada_32ex_packed()\n  hparams.use_scales = int(True)\n  hparams.moe_num_experts = 16\n  hparams.moe_k = 1\n  hparams.beta = 0.1\n  hparams.ema = False\n  return hparams", "output": "Set of hyperparameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _layer_norm(self, name, x):\n    \"\"\"\"\"\"\n    if self.init_layers:\n      bn = LayerNorm()\n      bn.name = name\n      self.layers += [bn]\n    else:\n      bn = self.layers[self.layer_idx]\n      self.layer_idx += 1\n    bn.device_name = self.device_name\n    bn.set_training(self.training)\n    x = bn.fprop(x)\n    return x", "output": "Layer normalization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export(self, description, local=False, path='/tmp', format='qcow2'):\n        '''\n        \n        '''\n        kiwiproc.__salt__ = __salt__\n        return kiwiproc.KiwiExporter(grains=__grains__,\n                                     format=format).load(**description).export('something')", "output": "Export description for Kiwi.\n\n        :param local:\n        :param path:\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(self, slicer):\n        \"\"\"  \"\"\"\n\n        # slice the category\n        # return same dims as we currently have\n\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            if not com.is_null_slice(slicer[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim \"\n                                     \"categorical\")\n            slicer = slicer[1]\n\n        return self.values[slicer]", "output": "return a slice of my values", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export_to_dict(self, recursive=True, include_parent_ref=False,\n                       include_defaults=False):\n        \"\"\"\"\"\"\n        cls = self.__class__\n        parent_excludes = {}\n        if recursive and not include_parent_ref:\n            parent_ref = cls.__mapper__.relationships.get(cls.export_parent)\n            if parent_ref:\n                parent_excludes = {c.name for c in parent_ref.local_columns}\n        dict_rep = {c.name: getattr(self, c.name)\n                    for c in cls.__table__.columns\n                    if (c.name in self.export_fields and\n                        c.name not in parent_excludes and\n                        (include_defaults or (\n                            getattr(self, c.name) is not None and\n                            (not c.default or\n                                getattr(self, c.name) != c.default.arg))))\n                    }\n        if recursive:\n            for c in self.export_children:\n                # sorting to make lists of children stable\n                dict_rep[c] = sorted(\n                    [\n                        child.export_to_dict(\n                            recursive=recursive,\n                            include_parent_ref=include_parent_ref,\n                            include_defaults=include_defaults,\n                        ) for child in getattr(self, c)\n                    ],\n                    key=lambda k: sorted(k.items()))\n\n        return dict_rep", "output": "Export obj to dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\n    \"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag_regex_string = request.args.get('tag')\n    run = request.args.get('run')\n    mime_type = 'application/json'\n\n    try:\n      body = self.scalars_impl(run, tag_regex_string)\n    except ValueError as e:\n      return http_util.Respond(\n          request=request,\n          content=str(e),\n          content_type='text/plain',\n          code=500)\n\n    # Produce the response.\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag regex and single run, return ScalarEvents.\n\n    This route takes 2 GET params:\n    run: A run string to find tags for.\n    tag: A string that is a regex used to find matching tags.\n    The response is a JSON object:\n    {\n      // Whether the regular expression is valid. Also false if empty.\n      regexValid: boolean,\n\n      // An object mapping tag name to a list of ScalarEvents.\n      payload: Object<string, ScalarEvent[]>,\n    }", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _svrg_grads_update_rule(self, g_curr_batch_curr_weight, g_curr_batch_special_weight,\n                                g_special_weight_all_batch):\n        \"\"\"\n        \"\"\"\n        for index, grad in enumerate(g_curr_batch_curr_weight):\n            grad -= g_curr_batch_special_weight[index]\n            grad += g_special_weight_all_batch[index]\n        return g_curr_batch_curr_weight", "output": "Calculates the gradient based on the SVRG update rule.\n        Parameters\n        ----------\n        g_curr_batch_curr_weight : NDArray\n            gradients of current weight of self.mod w.r.t current batch of data\n        g_curr_batch_special_weight: NDArray\n            gradients of the weight of past m epochs of self._mod_special w.r.t current batch of data\n        g_special_weight_all_batch: NDArray\n            average of full gradients over full pass of data\n\n        Returns\n        ----------\n        Gradients calculated using SVRG update rule:\n        grads = g_curr_batch_curr_weight - g_curr_batch_special_weight + g_special_weight_all_batch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_services():\n    '''\n    \n    '''\n    serv = []\n    services = pyconnman.ConnManager().get_services()\n    for path, _ in services:\n        serv.append(six.text_type(path[len(SERVICE_PATH):]))\n    return serv", "output": "Returns a list with all connman services", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, profile=None, **connection_args):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'User \"{0}\" is already absent'.format(name)}\n\n    # Check if user is present\n    user = __salt__['keystone.user_get'](name=name, profile=profile,\n                                         **connection_args)\n    if 'Error' not in user:\n        if __opts__.get('test'):\n            ret['result'] = None\n            ret['comment'] = 'User \"{0}\" will be deleted'.format(name)\n            return ret\n        # Delete that user!\n        __salt__['keystone.user_delete'](name=name, profile=profile,\n                                         **connection_args)\n        ret['comment'] = 'User \"{0}\" has been deleted'.format(name)\n        ret['changes']['User'] = 'Deleted'\n\n    return ret", "output": "Ensure that the keystone user is absent.\n\n    name\n        The name of the user that should not exist", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lmx_relative():\n  \"\"\"\"\"\"\n  hparams = lmx_base()\n  hparams.self_attention_type = \"dot_product_relative_v2\"\n  hparams.activation_dtype = \"float32\"\n  hparams.weight_dtype = \"float32\"\n  return hparams", "output": "Language model using relative attention.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def postprocess_keyevent(self, event):\r\n        \"\"\"\"\"\"\r\n        ShellBaseWidget.postprocess_keyevent(self, event)\r\n        if QToolTip.isVisible():\r\n            _event, _text, key, _ctrl, _shift = restore_keyevent(event)\r\n            self.hide_tooltip_if_necessary(key)", "output": "Process keypress event", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nansem(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    \n    \"\"\"\n\n    # This checks if non-numeric-like data is passed with numeric_only=False\n    # and raises a TypeError otherwise\n    nanvar(values, axis, skipna, ddof=ddof, mask=mask)\n\n    if mask is None:\n        mask = isna(values)\n    if not is_float_dtype(values.dtype):\n        values = values.astype('f8')\n    count, _ = _get_counts_nanvar(mask, axis, ddof, values.dtype)\n    var = nanvar(values, axis, skipna, ddof=ddof)\n\n    return np.sqrt(var) / np.sqrt(count)", "output": "Compute the standard error in the mean along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nansem(s)\n     0.5773502691896258", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_supervised(problem, model_name, hparams, data_dir, output_dir,\n                     train_steps, eval_steps, local_eval_frequency=None,\n                     schedule=\"continuous_train_and_eval\"):\n  \"\"\"\"\"\"\n  if local_eval_frequency is None:\n    local_eval_frequency = FLAGS.local_eval_frequency\n\n  exp_fn = trainer_lib.create_experiment_fn(\n      model_name, problem, data_dir, train_steps, eval_steps,\n      min_eval_frequency=local_eval_frequency\n  )\n  run_config = trainer_lib.create_run_config(model_name, model_dir=output_dir)\n  exp = exp_fn(run_config, hparams)\n  getattr(exp, schedule)()", "output": "Train supervised.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        \"\"\"\n        \n        \"\"\"\n\n        if freq is not None or axis != 0 or not isna(fill_value):\n            return self.apply(lambda x: x.shift(periods, freq,\n                                                axis, fill_value))\n\n        return self._get_cythonized_result('group_shift_indexer',\n                                           self.grouper, cython_dtype=np.int64,\n                                           needs_ngroups=True,\n                                           result_is_index=True,\n                                           periods=periods)", "output": "Shift each group by periods observations.\n\n        Parameters\n        ----------\n        periods : integer, default 1\n            number of periods to shift\n        freq : frequency string\n        axis : axis to shift, default 0\n        fill_value : optional\n\n            .. versionadded:: 0.24.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def words_and_tags_from_wsj_tree(tree_string):\n  \"\"\"\n  \"\"\"\n  stack, tags, words = [], [], []\n  for tok in tree_string.strip().split():\n    if tok[0] == \"(\":\n      symbol = tok[1:]\n      tags.append(symbol)\n      stack.append(symbol)\n    else:\n      assert tok[-1] == \")\"\n      stack.pop()  # Pop the POS-tag.\n      while tok[-2] == \")\":\n        tags.append(\"/\" + stack.pop())\n        tok = tok[:-1]\n      words.append(tok[:-1])\n  return str.join(\" \", words), str.join(\" \", tags[1:-1])", "output": "Generates linearized trees and tokens from the wsj tree format.\n\n  It uses the linearized algorithm described in https://arxiv.org/abs/1412.7449.\n\n  Args:\n    tree_string: tree in wsj format\n\n  Returns:\n    tuple: (words, linearized tree)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_available_time_string(availabilities):\n    \"\"\"\n    \n    \"\"\"\n    prefix = 'We have availabilities at '\n    if len(availabilities) > 3:\n        prefix = 'We have plenty of availability, including '\n\n    prefix += build_time_output_string(availabilities[0])\n    if len(availabilities) == 2:\n        return '{} and {}'.format(prefix, build_time_output_string(availabilities[1]))\n\n    return '{}, {} and {}'.format(prefix, build_time_output_string(availabilities[1]), build_time_output_string(availabilities[2]))", "output": "Build a string eliciting for a possible time slot among at least two availabilities.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_notifications(self, messages):\n        \"\"\"\"\"\"\n        for object_id, object_size, metadata_size in messages:\n            if object_size > 0 and object_id in self._waiting_dict:\n                linked_list = self._waiting_dict[object_id]\n                self._complete_future(linked_list)", "output": "Process notifications.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def track_strategy_worker(self, strategy, name, interval=10, **kwargs):\n        \"\"\"\"\"\"\n        while True:\n            try:\n                transactions = self.query_strategy_transaction(\n                    strategy, **kwargs\n                )\n            # pylint: disable=broad-except\n            except Exception as e:\n                log.exception(\"\u65e0\u6cd5\u83b7\u53d6\u7b56\u7565 %s \u8c03\u4ed3\u4fe1\u606f, \u9519\u8bef: %s, \u8df3\u8fc7\u6b64\u6b21\u8c03\u4ed3\u67e5\u8be2\", name, e)\n                time.sleep(3)\n                continue\n            for transaction in transactions:\n                trade_cmd = {\n                    \"strategy\": strategy,\n                    \"strategy_name\": name,\n                    \"action\": transaction[\"action\"],\n                    \"stock_code\": transaction[\"stock_code\"],\n                    \"amount\": transaction[\"amount\"],\n                    \"price\": transaction[\"price\"],\n                    \"datetime\": transaction[\"datetime\"],\n                }\n                if self.is_cmd_expired(trade_cmd):\n                    continue\n                log.info(\n                    \"\u7b56\u7565 [%s] \u53d1\u9001\u6307\u4ee4\u5230\u4ea4\u6613\u961f\u5217, \u80a1\u7968: %s \u52a8\u4f5c: %s \u6570\u91cf: %s \u4ef7\u683c: %s \u4fe1\u53f7\u4ea7\u751f\u65f6\u95f4: %s\",\n                    name,\n                    trade_cmd[\"stock_code\"],\n                    trade_cmd[\"action\"],\n                    trade_cmd[\"amount\"],\n                    trade_cmd[\"price\"],\n                    trade_cmd[\"datetime\"],\n                )\n                self.trade_queue.put(trade_cmd)\n                self.add_cmd_to_expired_cmds(trade_cmd)\n            try:\n                for _ in range(interval):\n                    time.sleep(1)\n            except KeyboardInterrupt:\n                log.info(\"\u7a0b\u5e8f\u9000\u51fa\")\n                break", "output": "\u8ddf\u8e2a\u4e0b\u5355worker\n        :param strategy: \u7b56\u7565id\n        :param name: \u7b56\u7565\u540d\u5b57\n        :param interval: \u8f6e\u8be2\u7b56\u7565\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def abs_error(predictions, labels, weights_fn=None):\n  \"\"\"\"\"\"\n  del weights_fn  # Unused\n  targets = tf.squeeze(labels, axis=[2, 3])\n  batch_abs_error = tf.abs(predictions - targets)\n  den = tf.ones(tf.shape(batch_abs_error), dtype=tf.float32)\n  return (batch_abs_error, den)", "output": "Computes mean(abs(preds-target)).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attention(targets_shifted, inputs_encoded, norm_fn, hparams, bias=None):\n  \"\"\"\"\"\"\n  separabilities = [hparams.separability, hparams.separability]\n  if hparams.separability < 0:\n    separabilities = [hparams.separability - 1, hparams.separability]\n  targets_timed = common_layers.subseparable_conv_block(\n      common_layers.add_timing_signal(targets_shifted),\n      hparams.hidden_size, [((1, 1), (5, 1)), ((4, 1), (5, 1))],\n      normalizer_fn=norm_fn,\n      padding=\"LEFT\",\n      separabilities=separabilities,\n      name=\"targets_time\")\n  if hparams.attention_type == \"transformer\":\n    targets_timed = tf.squeeze(targets_timed, 2)\n    target_shape = tf.shape(targets_timed)\n    targets_segment = tf.zeros([target_shape[0], target_shape[1]])\n    target_attention_bias = common_attention.attention_bias(\n        targets_segment, targets_segment, lower_triangular=True)\n    inputs_attention_bias = tf.zeros([\n        tf.shape(inputs_encoded)[0], hparams.num_heads,\n        tf.shape(targets_segment)[1],\n        tf.shape(inputs_encoded)[1]\n    ])\n\n    qv = common_attention.multihead_attention(\n        targets_timed,\n        None,\n        target_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"self_attention\")\n    qv = common_attention.multihead_attention(\n        qv,\n        inputs_encoded,\n        inputs_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"encdec_attention\")\n    return tf.expand_dims(qv, 2)\n  elif hparams.attention_type == \"simple\":\n    targets_with_attention = common_layers.simple_attention(\n        targets_timed, inputs_encoded, bias=bias)\n    return norm_fn(targets_shifted + targets_with_attention, name=\"attn_norm\")", "output": "Complete attention layer with preprocessing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        \n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False", "output": "Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_new_line(self):\r\n        \"\"\"\"\"\"\r\n        self.set_cursor_position('eof')\r\n        self.current_prompt_pos = self.get_position('cursor')\r\n        self.new_input_line = False", "output": "On new input line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping(dest_ip=None, **kwargs):\n    '''\n    \n    '''\n    conn = __proxy__['junos.conn']()\n    ret = {}\n\n    if dest_ip is None:\n        ret['message'] = 'Please specify the destination ip to ping.'\n        ret['out'] = False\n        return ret\n\n    op = {'host': dest_ip}\n    if '__pub_arg' in kwargs:\n        if kwargs['__pub_arg']:\n            if isinstance(kwargs['__pub_arg'][-1], dict):\n                op.update(kwargs['__pub_arg'][-1])\n    else:\n        op.update(kwargs)\n\n    op['count'] = six.text_type(op.pop('count', 5))\n    if 'ttl' in op:\n        op['ttl'] = six.text_type(op['ttl'])\n\n    ret['out'] = True\n    try:\n        ret['message'] = jxmlease.parse(etree.tostring(conn.rpc.ping(**op)))\n    except Exception as exception:\n        ret['message'] = 'Execution failed due to \"{0}\"'.format(exception)\n        ret['out'] = False\n    return ret", "output": "Send a ping RPC to a device\n\n    dest_ip\n      The IP of the device to ping\n\n    dev_timeout : 30\n        The NETCONF RPC timeout (in seconds)\n\n    rapid : False\n        When ``True``, executes ping at 100pps instead of 1pps\n\n    ttl\n        Maximum number of IP routers (IP hops) allowed between source and\n        destination\n\n    routing_instance\n      Name of the routing instance to use to send the ping\n\n    interface\n      Interface used to send traffic\n\n    count : 5\n      Number of packets to send\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt 'device_name' junos.ping '8.8.8.8' count=5\n        salt 'device_name' junos.ping '8.8.8.8' ttl=1 rapid=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_raw(path, raw):\n    '''\n    \n    '''\n    log.debug('Writing vault secrets for %s at %s', __grains__['id'], path)\n    try:\n        url = 'v1/{0}'.format(path)\n        response = __utils__['vault.make_request']('POST', url, json=raw)\n        if response.status_code == 200:\n            return response.json()['data']\n        elif response.status_code != 204:\n            response.raise_for_status()\n        return True\n    except Exception as err:\n        log.error('Failed to write secret! %s: %s', type(err).__name__, err)\n        return False", "output": "Set raw data at the path in vault. The vault policy used must allow this.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n            salt '*' vault.write_raw \"secret/my/secret\" '{\"user\":\"foo\",\"password\": \"bar\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_dict(cls, data, intersect=False, orient='items', dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        from collections import defaultdict\n\n        orient = orient.lower()\n        if orient == 'minor':\n            new_data = defaultdict(OrderedDict)\n            for col, df in data.items():\n                for item, s in df.items():\n                    new_data[item][col] = s\n            data = new_data\n        elif orient != 'items':  # pragma: no cover\n            raise ValueError('Orientation must be one of {items, minor}.')\n\n        d = cls._homogenize_dict(cls, data, intersect=intersect, dtype=dtype)\n        ks = list(d['data'].keys())\n        if not isinstance(d['data'], OrderedDict):\n            ks = list(sorted(ks))\n        d[cls._info_axis_name] = Index(ks)\n        return cls(**d)", "output": "Construct Panel from dict of DataFrame objects.\n\n        Parameters\n        ----------\n        data : dict\n            {field : DataFrame}\n        intersect : boolean\n            Intersect indexes of input DataFrames\n        orient : {'items', 'minor'}, default 'items'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the items of the result panel, pass 'items'\n            (default). Otherwise if the columns of the values of the passed\n            DataFrame objects should be the items (which in the case of\n            mixed-dtype data you should do), instead pass 'minor'\n        dtype : dtype, default None\n            Data type to force, otherwise infer\n\n        Returns\n        -------\n        Panel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _format_operation_dict(operation, parameters):\n    \"\"\"\n    \"\"\"\n    formatted_params = {}\n    for name in parameters:\n        escaped_name = name.replace(\"`\", r\"\\`\")\n        formatted_params[name] = \"@`{}`\".format(escaped_name)\n\n    try:\n        return operation % formatted_params\n    except KeyError as exc:\n        raise exceptions.ProgrammingError(exc)", "output": "Formats parameters in operation in the way BigQuery expects.\n\n    The input operation will be a query like ``SELECT %(namedparam)s`` and\n    the output will be a query like ``SELECT @namedparam``.\n\n    :type operation: str\n    :param operation: A Google BigQuery query string.\n\n    :type parameters: Mapping[str, Any]\n    :param parameters: Dictionary of parameter values.\n\n    :rtype: str\n    :returns: A formatted query string.\n    :raises: :class:`~google.cloud.bigquery.dbapi.ProgrammingError`\n        if a parameter used in the operation is not found in the\n        ``parameters`` argument.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(cls, fpath):\n        \"\"\n        fpath = _expand_path(fpath)\n        assert(fpath.suffix == '.yml')\n        if fpath.exists(): return\n        fpath.parent.mkdir(parents=True, exist_ok=True)\n        with open(fpath, 'w') as yaml_file:\n            yaml.dump(cls.DEFAULT_CONFIG, yaml_file, default_flow_style=False)", "output": "Creates a `Config` from `fpath`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_lifecycle(self, policy=None, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_ilm\", \"policy\", policy), params=params, body=body\n        )", "output": "`<https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html>`_\n\n        :arg policy: The name of the index lifecycle policy\n        :arg body: The lifecycle policy definition to register", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prepare_graph_terms(self, default_screen):\n        \"\"\"\"\"\"\n        columns = self.columns.copy()\n        screen = self.screen\n        if screen is None:\n            screen = default_screen\n        columns[SCREEN_NAME] = screen\n        return columns", "output": "Helper for to_graph and to_execution_plan.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_data_stock_to_fq(__data, type_='01'):\n\n    def __QA_fetch_stock_xdxr(\n            code,\n            format_='pd',\n            collections=DATABASE.stock_xdxr\n    ):\n        '\u83b7\u53d6\u80a1\u7968\u9664\u6743\u4fe1\u606f/\u6570\u636e\u5e93'\n        try:\n            data = pd.DataFrame(\n                [item for item in collections.find({'code': code})]\n            ).drop(['_id'],\n                   axis=1)\n            data['date'] = pd.to_datetime(data['date'])\n            return data.set_index(['date', 'code'], drop=False)\n        except:\n            return pd.DataFrame(\n                data=[],\n                columns=[\n                    'category',\n                    'category_meaning',\n                    'code',\n                    'date',\n                    'fenhong',\n                    'fenshu',\n                    'liquidity_after',\n                    'liquidity_before',\n                    'name',\n                    'peigu',\n                    'peigujia',\n                    'shares_after',\n                    'shares_before',\n                    'songzhuangu',\n                    'suogu',\n                    'xingquanjia'\n                ]\n            )\n\n    ''\n\n    code = __data.index.remove_unused_levels().levels[1][0] if isinstance(\n        __data.index,\n        pd.core.indexes.multi.MultiIndex\n    ) else __data['code'][0]\n\n    return _QA_data_stock_to_fq(\n        bfq_data=__data,\n        xdxr_data=__QA_fetch_stock_xdxr(code),\n        fqtype=type_\n    )", "output": "\u80a1\u7968 \u65e5\u7ebf/\u5206\u949f\u7ebf \u52a8\u6001\u590d\u6743\u63a5\u53e3", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def initialized(name, **kwargs):\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'The VM is already correctly defined'\n           }\n\n    # define a machine to start later\n    ret, kwargs = _find_init_change(name, ret, **kwargs)\n\n    if ret['changes'] == {}:\n        return ret\n\n    kwargs['start'] = False\n    __salt__['vagrant.init'](name, **kwargs)\n    ret['changes'][name] = 'Node initialized'\n    ret['comment'] = 'Node {0} defined but not started.'.format(name)\n\n    return ret", "output": "r'''\n    Defines a new VM with specified arguments, but does not start it.\n\n    :param name: the Salt_id node name you wish your VM to have.\n\n    Each machine must be initialized individually using this function\n    or the \"vagrant.running\" function, or the vagrant.init execution module call.\n\n    This command will not change the state of a running or paused machine.\n\n    Possible keyword arguments:\n\n    - cwd: The directory (path) containing the Vagrantfile\n    - machine: ('') the name of the machine (in the Vagrantfile) if not default\n    - vagrant_runas: ('root') the username who owns the vagrantbox file\n    - vagrant_provider: the provider to run the VM (usually 'virtualbox')\n    - vm: ({}) a dictionary containing these or other keyword arguments\n\n    .. code-block:: yaml\n\n        node_name1:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine1\n\n        node_name2:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine2\n\n        start_nodes:\n          vagrant.start:\n            - name: node_name?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def open(name, device, keyfile):\n    '''\n    \n    '''\n    if keyfile is None or keyfile == 'none' or keyfile == '-':\n        raise CommandExecutionError('For immediate crypt device mapping, keyfile must not be none')\n\n    code = __salt__['cmd.retcode']('cryptsetup open --key-file {0} {1} {2}'\n                                   .format(keyfile, device, name))\n    return code == 0", "output": "Open a crypt device using ``cryptsetup``. The ``keyfile`` must not be\n    ``None`` or ``'none'``, because ``cryptsetup`` will otherwise ask for the\n    password interactively.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cryptdev.open foo /dev/sdz1 /path/to/keyfile", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prefix_from_prefix_string(self, prefixlen_str):\n        \"\"\"\n        \"\"\"\n        # int allows a leading +/- as well as surrounding whitespace,\n        # so we ensure that isn't the case\n        if not _BaseV4._DECIMAL_DIGITS.issuperset(prefixlen_str):\n            self._report_invalid_netmask(prefixlen_str)\n        try:\n            prefixlen = int(prefixlen_str)\n        except ValueError:\n            self._report_invalid_netmask(prefixlen_str)\n        if not (0 <= prefixlen <= self._max_prefixlen):\n            self._report_invalid_netmask(prefixlen_str)\n        return prefixlen", "output": "Return prefix length from a numeric string\n\n        Args:\n            prefixlen_str: The string to be converted\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            NetmaskValueError: If the input is not a valid netmask", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_fill_indexer_searchsorted(self, target, method, limit=None):\n        \"\"\"\n        \n        \"\"\"\n        if limit is not None:\n            raise ValueError('limit argument for %r method only well-defined '\n                             'if index and target are monotonic' % method)\n\n        side = 'left' if method == 'pad' else 'right'\n\n        # find exact matches first (this simplifies the algorithm)\n        indexer = self.get_indexer(target)\n        nonexact = (indexer == -1)\n        indexer[nonexact] = self._searchsorted_monotonic(target[nonexact],\n                                                         side)\n        if side == 'left':\n            # searchsorted returns \"indices into a sorted array such that,\n            # if the corresponding elements in v were inserted before the\n            # indices, the order of a would be preserved\".\n            # Thus, we need to subtract 1 to find values to the left.\n            indexer[nonexact] -= 1\n            # This also mapped not found values (values of 0 from\n            # np.searchsorted) to -1, which conveniently is also our\n            # sentinel for missing values\n        else:\n            # Mark indices to the right of the largest value as not found\n            indexer[indexer == len(self)] = -1\n        return indexer", "output": "Fallback pad/backfill get_indexer that works for monotonic decreasing\n        indexes and non-monotonic targets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ctxtReadMemory(self, buffer, size, URL, encoding, options):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlCtxtReadMemory(self._o, buffer, size, URL, encoding, options)\n        if ret is None:raise treeError('xmlCtxtReadMemory() failed')\n        __tmp = xmlDoc(_obj=ret)\n        return __tmp", "output": "parse an XML in-memory document and build a tree. This\n           reuses the existing @ctxt parser context", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def boto_resource(self, service, *args, **kwargs):\n        \"\"\"\"\"\"\n        return self.boto_session.resource(service, *args, **self.configure_boto_session_method_kwargs(service, kwargs))", "output": "A wrapper to apply configuration options to boto resources", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validator(self, meth):\n        \"\"\"\n        \n        \"\"\"\n        if self._validator is None:\n            self._validator = meth\n        else:\n            self._validator = and_(self._validator, meth)\n        return meth", "output": "Decorator that adds *meth* to the list of validators.\n\n        Returns *meth* unchanged.\n\n        .. versionadded:: 17.1.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_worker_processes(apppool):\n    '''\n    \n    '''\n    ps_cmd = ['Get-ChildItem',\n              r\"'IIS:\\AppPools\\{0}\\WorkerProcesses'\".format(apppool)]\n\n    cmd_ret = _srvmgr(cmd=ps_cmd, return_json=True)\n\n    try:\n        items = salt.utils.json.loads(cmd_ret['stdout'], strict=False)\n    except ValueError:\n        raise CommandExecutionError('Unable to parse return data as Json.')\n\n    ret = dict()\n    for item in items:\n        ret[item['processId']] = item['appPoolName']\n\n    if not ret:\n        log.warning('No backups found in output: %s', cmd_ret)\n\n    return ret", "output": "Returns a list of worker processes that correspond to the passed\n    application pool.\n\n    .. versionadded:: 2017.7.0\n\n    Args:\n        apppool (str): The application pool to query\n\n    Returns:\n        dict: A dictionary of worker processes with their process IDs\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_iis.list_worker_processes 'My App Pool'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def divide(n, iterable):\n    \"\"\"\n    \n    \"\"\"\n\n    seq = tuple(iterable)\n    q, r = divmod(len(seq), n)\n\n    ret = []\n    for i in range(n):\n        start = (i * q) + (i if i < r else r)\n        stop = ((i + 1) * q) + (i + 1 if i + 1 < r else r)\n        ret.append(iter(seq[start:stop]))\n\n    return ret", "output": "split an iterable into n groups, per https://more-itertools.readthedocs.io/en/latest/api.html#grouping\n\n    :param int n: Number of unique groups\n    :param iter iterable: An iterable to split up\n    :return: a list of new iterables derived from the original iterable\n    :rtype: list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dump(self, fmap='', with_stats=False, dump_format=\"text\"):\n        \"\"\"\n        \n        \"\"\"\n        length = c_bst_ulong()\n        sarr = ctypes.POINTER(ctypes.c_char_p)()\n        if self.feature_names is not None and fmap == '':\n            flen = len(self.feature_names)\n\n            fname = from_pystr_to_cstr(self.feature_names)\n\n            if self.feature_types is None:\n                # use quantitative as default\n                # {'q': quantitative, 'i': indicator}\n                ftype = from_pystr_to_cstr(['q'] * flen)\n            else:\n                ftype = from_pystr_to_cstr(self.feature_types)\n            _check_call(_LIB.XGBoosterDumpModelExWithFeatures(\n                self.handle,\n                ctypes.c_int(flen),\n                fname,\n                ftype,\n                ctypes.c_int(with_stats),\n                c_str(dump_format),\n                ctypes.byref(length),\n                ctypes.byref(sarr)))\n        else:\n            if fmap != '' and not os.path.exists(fmap):\n                raise ValueError(\"No such file: {0}\".format(fmap))\n            _check_call(_LIB.XGBoosterDumpModelEx(self.handle,\n                                                  c_str(fmap),\n                                                  ctypes.c_int(with_stats),\n                                                  c_str(dump_format),\n                                                  ctypes.byref(length),\n                                                  ctypes.byref(sarr)))\n        res = from_cstr_to_pystr(sarr, length)\n        return res", "output": "Returns the model dump as a list of strings.\n\n        Parameters\n        ----------\n        fmap : string, optional\n            Name of the file containing feature map names.\n        with_stats : bool, optional\n            Controls whether the split statistics are output.\n        dump_format : string, optional\n            Format of model dump. Can be 'text' or 'json'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_gcs_file(path, out_fname=None, prefix_filter=None):\n  \"\"\"\"\"\"\n  url = posixpath.join(GCS_BUCKET, path)\n  if prefix_filter:\n    url += \"?prefix=%s\" % prefix_filter\n  stream = bool(out_fname)\n  resp = requests.get(url, stream=stream)\n  if not resp.ok:\n    raise ValueError(\"GCS bucket inaccessible\")\n  if out_fname:\n    with tf.io.gfile.GFile(out_fname, \"wb\") as f:\n      for chunk in resp.iter_content(1024):\n        f.write(chunk)\n  else:\n    return resp.content", "output": "Download a file from GCS, optionally to a file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def counting_sort(arr):\n    \"\"\"\n    \n    \"\"\"\n\n    m = min(arr)\n    # in case there are negative elements, change the array to all positive element\n    different = 0\n    if m < 0:\n        # save the change, so that we can convert the array back to all positive number\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    # temp_array[i] contain the times the number i appear in arr\n\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    # temp_array[i] contain the number of element less than or equal i in arr\n\n    result_arr = arr.copy()\n    # creating a result_arr an put the element in a correct positon\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n\n    return result_arr", "output": "Counting_sort\n    Sorting a array which has no element greater than k\n    Creating a new temp_arr,where temp_arr[i] contain the number of\n    element less than or equal to i in the arr\n    Then placing the number i into a correct position in the result_arr\n    return the result_arr\n    Complexity: 0(n)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_directory(self):\r\n        \"\"\"\"\"\"\r\n        self.redirect_stdio.emit(False)\r\n        directory = getexistingdirectory(self.main, _(\"\"),\r\n                                         getcwd_or_home())\r\n        if directory:\r\n            self.chdir(directory)\r\n        self.redirect_stdio.emit(True)", "output": "Select directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _affine_inv_mult(c, m):\n    \"\"\n    size = c.flow.size()\n    h,w = c.size\n    m[0,1] *= h/w\n    m[1,0] *= w/h\n    c.flow = c.flow.view(-1,2)\n    a = torch.inverse(m[:2,:2].t())\n    c.flow = torch.mm(c.flow - m[:2,2], a).view(size)\n    return c", "output": "Applies the inverse affine transform described in `m` to `c`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authenticate(remote_addr, password, cert, key, verify_cert=True):\n    '''\n    \n\n    '''\n    client = pylxd_client_get(remote_addr, cert, key, verify_cert)\n\n    if client.trusted:\n        return True\n\n    try:\n        client.authenticate(password)\n    except pylxd.exceptions.LXDAPIException as e:\n        # Wrong password\n        raise CommandExecutionError(six.text_type(e))\n\n    return client.trusted", "output": "Authenticate with a remote LXDaemon.\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n\n    password :\n        The password of the remote.\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.authenticate https://srv01:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n\n    See the `requests-docs`_ for the SSL stuff.\n\n    .. _requests-docs: http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_docstring_at_first_line_of_function(self):\r\n        \"\"\"\"\"\"\r\n        result = self.get_function_definition_from_first_line()\r\n        editor = self.code_editor\r\n        if result:\r\n            func_text, number_of_line_func = result\r\n            line_number_function = (self.line_number_cursor +\r\n                                    number_of_line_func - 1)\r\n\r\n            cursor = editor.textCursor()\r\n            line_number_cursor = cursor.blockNumber() + 1\r\n            offset = line_number_function - line_number_cursor\r\n            if offset > 0:\r\n                for __ in range(offset):\r\n                    cursor.movePosition(QTextCursor.NextBlock)\r\n            else:\r\n                for __ in range(abs(offset)):\r\n                    cursor.movePosition(QTextCursor.PreviousBlock)\r\n            cursor.movePosition(QTextCursor.EndOfLine, QTextCursor.MoveAnchor)\r\n            editor.setTextCursor(cursor)\r\n\r\n            indent = get_indent(func_text)\r\n            editor.insert_text('\\n{}{}\"\"\"'.format(indent, editor.indent_chars))\r\n            self.write_docstring()", "output": "Write docstring to editor at mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_config(**api_opts):\n    '''\n    \n    '''\n    config = {\n        'api_sslverify': True,\n        'api_url': 'https://INFOBLOX/wapi/v1.2.1',\n        'api_user': '',\n        'api_key': '',\n    }\n    if '__salt__' in globals():\n        config_key = '{0}.config'.format(__virtualname__)\n        config.update(__salt__['config.get'](config_key, {}))\n    # pylint: disable=C0201\n    for k in set(config.keys()) & set(api_opts.keys()):\n        config[k] = api_opts[k]\n    return config", "output": "Return configuration\n    user passed api_opts override salt config.get vars", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_connection_close(self) -> None:\n        \"\"\"\n        \"\"\"\n        if _has_stream_request_body(self.__class__):\n            if not self.request._body_future.done():\n                self.request._body_future.set_exception(iostream.StreamClosedError())\n                self.request._body_future.exception()", "output": "Called in async handlers if the client closed the connection.\n\n        Override this to clean up resources associated with\n        long-lived connections.  Note that this method is called only if\n        the connection was closed during asynchronous processing; if you\n        need to do cleanup after every request override `on_finish`\n        instead.\n\n        Proxies may keep a connection open for a time (perhaps\n        indefinitely) after the client has gone away, so this method\n        may not be called promptly after the end user closes their\n        connection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_post(self, path: str, handler: _WebHandler,\n                 **kwargs: Any) -> AbstractRoute:\n        \"\"\"\n        \n        \"\"\"\n        return self.add_route(hdrs.METH_POST, path, handler, **kwargs)", "output": "Shortcut for add_route with method POST", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _copy_default(cls, default):\n        ''' \n\n        '''\n        if not isinstance(default, types.FunctionType):\n            return copy(default)\n        else:\n            return default()", "output": "Return a copy of the default, or a new value if the default\n        is specified by a function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dtype_kinds(l):\n    \"\"\"\n    \n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = 'category'\n        elif is_sparse(arr):\n            typ = 'sparse'\n        elif isinstance(arr, ABCRangeIndex):\n            typ = 'range'\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = 'datetime'\n        elif is_timedelta64_dtype(dtype):\n            typ = 'timedelta'\n        elif is_object_dtype(dtype):\n            typ = 'object'\n        elif is_bool_dtype(dtype):\n            typ = 'bool'\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs", "output": "Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cut(self):\n        \"\"\"\"\"\"\n        self.truncate_selection(self.header_end_pos)\n        if self.has_selected_text():\n            CodeEditor.cut(self)", "output": "Cut text", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self):\n        \"\"\"\n        \n        \"\"\"\n        cursor = self.get_collection().find(\n            {\n                '_id': {'$in': self._document_ids},\n                self._field: {'$exists': True}\n            },\n            {self._field: True}\n        )\n\n        return {doc['_id']: doc[self._field] for doc in cursor}", "output": "Read the targets value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def patch_traces(self, traces, project_id=None):\n        \"\"\"\n        \"\"\"\n        if project_id is None:\n            project_id = self.project\n\n        self.trace_api.patch_traces(project_id=project_id, traces=traces)", "output": "Sends new traces to Stackdriver Trace or updates existing traces.\n\n        Args:\n            traces (dict): Required. The traces to be patched in the API call.\n\n            project_id (Optional[str]): ID of the Cloud project where the trace\n                data is stored.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(key, profile=None):\n    '''\n    \n    '''\n    conn = salt.utils.memcached.get_conn(profile)\n    return salt.utils.memcached.get(conn, key)", "output": "Get a value from memcached", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def MessageToJson(message,\n                  including_default_value_fields=False,\n                  preserving_proto_field_name=False):\n  \"\"\"\n  \"\"\"\n  printer = _Printer(including_default_value_fields,\n                     preserving_proto_field_name)\n  return printer.ToJsonString(message)", "output": "Converts protobuf message to JSON format.\n\n  Args:\n    message: The protocol buffers message instance to serialize.\n    including_default_value_fields: If True, singular primitive fields,\n        repeated fields, and map fields will always be serialized.  If\n        False, only serialize non-empty fields.  Singular message fields\n        and oneof fields are not affected by this option.\n    preserving_proto_field_name: If True, use the original proto field\n        names as defined in the .proto file. If False, convert the field\n        names to lowerCamelCase.\n\n  Returns:\n    A string containing the JSON formatted protocol buffer message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def experiment_pb(\n    hparam_infos,\n    metric_infos,\n    user='',\n    description='',\n    time_created_secs=None):\n  \"\"\"\n  \"\"\"\n  if time_created_secs is None:\n    time_created_secs = time.time()\n  experiment = api_pb2.Experiment(\n      description=description,\n      user=user,\n      time_created_secs=time_created_secs,\n      hparam_infos=hparam_infos,\n      metric_infos=metric_infos)\n  return _summary(metadata.EXPERIMENT_TAG,\n                  plugin_data_pb2.HParamsPluginData(experiment=experiment))", "output": "Creates a summary that defines a hyperparameter-tuning experiment.\n\n  Args:\n    hparam_infos: Array of api_pb2.HParamInfo messages. Describes the\n        hyperparameters used in the experiment.\n    metric_infos: Array of api_pb2.MetricInfo messages. Describes the metrics\n        used in the experiment. See the documentation at the top of this file\n        for how to populate this.\n    user: String. An id for the user running the experiment\n    description: String. A description for the experiment. May contain markdown.\n    time_created_secs: float. The time the experiment is created in seconds\n    since the UNIX epoch. If None uses the current time.\n\n  Returns:\n    A summary protobuffer containing the experiment definition.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_to_create_directory(directory_path):\n    \"\"\"\n    \"\"\"\n    logger = logging.getLogger(\"ray\")\n    directory_path = os.path.expanduser(directory_path)\n    if not os.path.exists(directory_path):\n        try:\n            os.makedirs(directory_path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise e\n            logger.warning(\n                \"Attempted to create '{}', but the directory already \"\n                \"exists.\".format(directory_path))\n        # Change the log directory permissions so others can use it. This is\n        # important when multiple people are using the same machine.\n    try:\n        os.chmod(directory_path, 0o0777)\n    except OSError as e:\n        # Silently suppress the PermissionError that is thrown by the chmod.\n        # This is done because the user attempting to change the permissions\n        # on a directory may not own it. The chmod is attempted whether the\n        # directory is new or not to avoid race conditions.\n        # ray-project/ray/#3591\n        if e.errno in [errno.EACCES, errno.EPERM]:\n            pass\n        else:\n            raise", "output": "Attempt to create a directory that is globally readable/writable.\n\n    Args:\n        directory_path: The path of the directory to create.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def callJavaFunc(sc, func, *args):\n    \"\"\"  \"\"\"\n    args = [_py2java(sc, a) for a in args]\n    return _java2py(sc, func(*args))", "output": "Call Java Function", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_config(self):\r\n        \"\"\"\"\"\"\r\n        for option, value in list(self.explorer.get_options().items()):\r\n            self.set_option(option, value)\r\n        self.set_option('expanded_state',\r\n                        self.explorer.treewidget.get_expanded_state())\r\n        self.set_option('scrollbar_position',\r\n                        self.explorer.treewidget.get_scrollbar_position())", "output": "Save configuration: tree widget state", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_valid_url(url):\n    \"\"\"\"\"\"\n    pieces = urlparse(url)\n    return all([pieces.scheme, pieces.netloc])", "output": "Checks if a given string is an url", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_value(self):\r\n        \"\"\"\"\"\"\r\n        # It is import to avoid accessing Qt C++ object as it has probably\r\n        # already been destroyed, due to the Qt.WA_DeleteOnClose attribute\r\n        df = self.dataModel.get_data()\r\n        if self.is_series:\r\n            return df.iloc[:, 0]\r\n        else:\r\n            return df", "output": "Return modified Dataframe -- this is *not* a copy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def roc_curve(input:Tensor, targ:Tensor):\n    \"\"\n    targ = (targ == 1)\n    desc_score_indices = torch.flip(input.argsort(-1), [-1])\n    input = input[desc_score_indices]\n    targ = targ[desc_score_indices]\n    d = input[1:] - input[:-1]\n    distinct_value_indices = torch.nonzero(d).transpose(0,1)[0]\n    threshold_idxs = torch.cat((distinct_value_indices, LongTensor([len(targ) - 1]).to(targ.device)))\n    tps = torch.cumsum(targ * 1, dim=-1)[threshold_idxs]\n    fps = (1 + threshold_idxs - tps)\n    if tps[0] != 0 or fps[0] != 0:\n        fps = torch.cat((LongTensor([0]), fps))\n        tps = torch.cat((LongTensor([0]), tps))\n    fpr, tpr = fps.float() / fps[-1], tps.float() / tps[-1]\n    return fpr, tpr", "output": "Returns the false positive and true positive rates", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_json_string(self, indent=None):\n        ''' \n\n        '''\n        root_ids = []\n        for r in self._roots:\n            root_ids.append(r.id)\n\n        root_references = self._all_models.values()\n\n        json = {\n            'title' : self.title,\n            'roots' : {\n                'root_ids' : root_ids,\n                'references' : references_json(root_references)\n            },\n            'version' : __version__\n        }\n\n        return serialize_json(json, indent=indent)", "output": "Convert the document to a JSON string.\n\n        Args:\n            indent (int or None, optional) : number of spaces to indent, or\n                None to suppress all newlines and indentation (default: None)\n\n        Returns:\n            str", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def morsel_to_cookie(morsel):\n    \"\"\"\"\"\"\n\n    expires = None\n    if morsel['max-age']:\n        try:\n            expires = int(time.time() + int(morsel['max-age']))\n        except ValueError:\n            raise TypeError('max-age: %s must be integer' % morsel['max-age'])\n    elif morsel['expires']:\n        time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n        expires = calendar.timegm(\n            time.strptime(morsel['expires'], time_template)\n        )\n    return create_cookie(\n        comment=morsel['comment'],\n        comment_url=bool(morsel['comment']),\n        discard=False,\n        domain=morsel['domain'],\n        expires=expires,\n        name=morsel.key,\n        path=morsel['path'],\n        port=None,\n        rest={'HttpOnly': morsel['httponly']},\n        rfc2109=False,\n        secure=bool(morsel['secure']),\n        value=morsel.value,\n        version=morsel['version'] or 0,\n    )", "output": "Convert a Morsel object into a Cookie containing the one k/v pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_imglist(self, fname=None, root=None, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        def progress_bar(count, total, suffix=''):\n            import sys\n            bar_len = 24\n            filled_len = int(round(bar_len * count / float(total)))\n\n            percents = round(100.0 * count / float(total), 1)\n            bar = '=' * filled_len + '-' * (bar_len - filled_len)\n            sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percents, '%', suffix))\n            sys.stdout.flush()\n\n        str_list = []\n        for index in range(self.num_images):\n            progress_bar(index, self.num_images)\n            label = self.label_from_index(index)\n            if label.size < 1:\n                continue\n            path = self.image_path_from_index(index)\n            if root:\n                path = osp.relpath(path, root)\n            str_list.append('\\t'.join([str(index), str(2), str(label.shape[1])] \\\n              + [\"{0:.4f}\".format(x) for x in label.ravel()] + [path,]) + '\\n')\n        if str_list:\n            if shuffle:\n                import random\n                random.shuffle(str_list)\n            if not fname:\n                fname = self.name + '.lst'\n            with open(fname, 'w') as f:\n                for line in str_list:\n                    f.write(line)\n        else:\n            raise RuntimeError(\"No image in imdb\")", "output": "save imglist to disk\n\n        Parameters:\n        ----------\n        fname : str\n            saved filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(self):\n        \"\"\"\n        \"\"\"\n        if self.path is not None:\n            logger.debug(\n                \"Skipped creation of temporary directory: {}\".format(self.path)\n            )\n            return\n        # We realpath here because some systems have their default tmpdir\n        # symlinked to another directory.  This tends to confuse build\n        # scripts, so we canonicalize the path by traversing potential\n        # symlinks here.\n        self.path = os.path.realpath(\n            tempfile.mkdtemp(prefix=\"pip-{}-\".format(self.kind))\n        )\n        self._register_finalizer()\n        logger.debug(\"Created temporary directory: {}\".format(self.path))", "output": "Create a temporary directory and store its path in self.path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def recovery(self, index=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request('GET', _make_path('_cat',\n            'recovery', index), params=params)", "output": "recovery is a view of shard replication.\n        `<https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html>`_\n\n        :arg index: A comma-separated list of index names to limit the returned\n            information\n        :arg bytes: The unit in which to display byte values, valid choices are:\n            'b', 'k', 'kb', 'm', 'mb', 'g', 'gb', 't', 'tb', 'p', 'pb'\n        :arg format: a short version of the Accept header, e.g. json, yaml\n        :arg h: Comma-separated list of column names to display\n        :arg help: Return help information, default False\n        :arg master_timeout: Explicit operation timeout for connection to master\n            node\n        :arg s: Comma-separated list of column names or column aliases to sort\n            by\n        :arg v: Verbose mode. Display column headers, default False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_mimetype(mimetype: str) -> MimeType:\n    \"\"\"\n\n    \"\"\"\n    if not mimetype:\n        return MimeType(type='', subtype='', suffix='',\n                        parameters=MultiDictProxy(MultiDict()))\n\n    parts = mimetype.split(';')\n    params = MultiDict()  # type: MultiDict[str]\n    for item in parts[1:]:\n        if not item:\n            continue\n        key, value = cast(Tuple[str, str],\n                          item.split('=', 1) if '=' in item else (item, ''))\n        params.add(key.lower().strip(), value.strip(' \"'))\n\n    fulltype = parts[0].strip().lower()\n    if fulltype == '*':\n        fulltype = '*/*'\n\n    mtype, stype = (cast(Tuple[str, str], fulltype.split('/', 1))\n                    if '/' in fulltype else (fulltype, ''))\n    stype, suffix = (cast(Tuple[str, str], stype.split('+', 1))\n                     if '+' in stype else (stype, ''))\n\n    return MimeType(type=mtype, subtype=stype, suffix=suffix,\n                    parameters=MultiDictProxy(params))", "output": "Parses a MIME type into its components.\n\n    mimetype is a MIME type string.\n\n    Returns a MimeType object.\n\n    Example:\n\n    >>> parse_mimetype('text/html; charset=utf-8')\n    MimeType(type='text', subtype='html', suffix='',\n             parameters={'charset': 'utf-8'})", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def should_stop(self, result):\n        \"\"\"\"\"\"\n\n        if result.get(DONE):\n            return True\n\n        for criteria, stop_value in self.stopping_criterion.items():\n            if criteria not in result:\n                raise TuneError(\n                    \"Stopping criteria {} not provided in result {}.\".format(\n                        criteria, result))\n            if result[criteria] >= stop_value:\n                return True\n\n        return False", "output": "Whether the given result meets this trial's stopping criteria.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expand_composites (properties):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .property import Property\n        assert is_iterable_typed(properties, Property)\n    explicit_features = set(p.feature for p in properties)\n\n    result = []\n\n    # now expand composite features\n    for p in properties:\n        expanded = expand_composite(p)\n\n        for x in expanded:\n            if not x in result:\n                f = x.feature\n\n                if f.free:\n                    result.append (x)\n                elif not x in properties:  # x is the result of expansion\n                    if not f in explicit_features:  # not explicitly-specified\n                        if any(r.feature == f for r in result):\n                            raise FeatureConflict(\n                                \"expansions of composite features result in \"\n                                \"conflicting values for '%s'\\nvalues: '%s'\\none contributing composite property was '%s'\" %\n                                (f.name, [r.value for r in result if r.feature == f] + [x.value], p))\n                        else:\n                            result.append (x)\n                elif any(r.feature == f for r in result):\n                    raise FeatureConflict (\"explicitly-specified values of non-free feature '%s' conflict\\n\"\n                    \"existing values: '%s'\\nvalue from expanding '%s': '%s'\" % (f,\n                    [r.value for r in result if r.feature == f], p, x.value))\n                else:\n                    result.append (x)\n\n    return result", "output": "Expand all composite properties in the set so that all components\n        are explicitly expressed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_file(self, fname):\r\n        \"\"\"\"\"\"\r\n        path, valid = QInputDialog.getText(self, _('Rename'),\r\n                              _('New name:'), QLineEdit.Normal,\r\n                              osp.basename(fname))\r\n        if valid:\r\n            path = osp.join(osp.dirname(fname), to_text_string(path))\r\n            if path == fname:\r\n                return\r\n            if osp.exists(path):\r\n                if QMessageBox.warning(self, _(\"Rename\"),\r\n                         _(\"Do you really want to rename <b>%s</b> and \"\r\n                           \"overwrite the existing file <b>%s</b>?\"\r\n                           ) % (osp.basename(fname), osp.basename(path)),\r\n                         QMessageBox.Yes|QMessageBox.No) == QMessageBox.No:\r\n                    return\r\n            try:\r\n                misc.rename_file(fname, path)\r\n                if osp.isfile(fname):\r\n                    self.sig_renamed.emit(fname, path)\r\n                else:\r\n                    self.sig_renamed_tree.emit(fname, path)\r\n                return path\r\n            except EnvironmentError as error:\r\n                QMessageBox.critical(self, _(\"Rename\"),\r\n                            _(\"<b>Unable to rename file <i>%s</i></b>\"\r\n                              \"<br><br>Error message:<br>%s\"\r\n                              ) % (osp.basename(fname), to_text_string(error)))", "output": "Rename file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_read(self, kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs = super().validate_read(kwargs)\n        if 'start' in kwargs or 'stop' in kwargs:\n            raise NotImplementedError(\"start and/or stop are not supported \"\n                                      \"in fixed Sparse reading\")\n        return kwargs", "output": "we don't support start, stop kwds in Sparse", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _expand_disk(disk):\n    '''\n    \n    '''\n    ret = {}\n    ret.update(disk.__dict__)\n    zone = ret['extra']['zone']\n    ret['extra']['zone'] = {}\n    ret['extra']['zone'].update(zone.__dict__)\n    return ret", "output": "Convert the libcloud Volume object into something more serializable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_order(field_path, direction):\n        \"\"\"\"\"\"\n        return query_pb2.StructuredQuery.Order(\n            field=query_pb2.StructuredQuery.FieldReference(field_path=field_path),\n            direction=_enum_from_direction(direction),\n        )", "output": "Helper for :meth:`order_by`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch_node_from(self, path):\n        \"\"\" \n        \"\"\"\n        context = self\n        for key in path:\n            context = context[key]\n            if context is None:\n                break\n        return context", "output": "Returns a node for a path.\n\n        :param path: Tuple of :term:`hashable` s.\n        :rtype: :class:`~cerberus.errors.ErrorTreeNode` or :obj:`None`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, statement):\n        \"\"\"\n        \n        \"\"\"\n        Statement = self.get_model('statement')\n        Tag = self.get_model('tag')\n\n        if hasattr(statement, 'id'):\n            statement.save()\n        else:\n            statement = Statement.objects.create(\n                text=statement.text,\n                search_text=self.tagger.get_bigram_pair_string(statement.text),\n                conversation=statement.conversation,\n                in_response_to=statement.in_response_to,\n                search_in_response_to=self.tagger.get_bigram_pair_string(statement.in_response_to),\n                created_at=statement.created_at\n            )\n\n        for _tag in statement.tags.all():\n            tag, _ = Tag.objects.get_or_create(name=_tag)\n\n            statement.tags.add(tag)\n\n        return statement", "output": "Update the provided statement.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _equals(v1_indices, v1_values, v2_indices, v2_values):\n        \"\"\"\n        \n        \"\"\"\n        v1_size = len(v1_values)\n        v2_size = len(v2_values)\n        k1 = 0\n        k2 = 0\n        all_equal = True\n        while all_equal:\n            while k1 < v1_size and v1_values[k1] == 0:\n                k1 += 1\n            while k2 < v2_size and v2_values[k2] == 0:\n                k2 += 1\n\n            if k1 >= v1_size or k2 >= v2_size:\n                return k1 >= v1_size and k2 >= v2_size\n\n            all_equal = v1_indices[k1] == v2_indices[k2] and v1_values[k1] == v2_values[k2]\n            k1 += 1\n            k2 += 1\n        return all_equal", "output": "Check equality between sparse/dense vectors,\n        v1_indices and v2_indices assume to be strictly increasing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _string_width(string, *, _IS_ASCII=_IS_ASCII):\n    \"\"\"\"\"\"\n    match = _IS_ASCII.match(string)\n    if match:\n        return match.endpos\n\n    UNICODE_WIDE_CHAR_TYPE = 'WFA'\n    width = 0\n    func = unicodedata.east_asian_width\n    for char in string:\n        width += 2 if func(char) in UNICODE_WIDE_CHAR_TYPE else 1\n    return width", "output": "Returns string's width.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def union(self, other):\n        \"\"\"\n        \n        \"\"\"\n        if self._jrdd_deserializer == other._jrdd_deserializer:\n            rdd = RDD(self._jrdd.union(other._jrdd), self.ctx,\n                      self._jrdd_deserializer)\n        else:\n            # These RDDs contain data in different serialized formats, so we\n            # must normalize them to the default serializer.\n            self_copy = self._reserialize()\n            other_copy = other._reserialize()\n            rdd = RDD(self_copy._jrdd.union(other_copy._jrdd), self.ctx,\n                      self.ctx.serializer)\n        if (self.partitioner == other.partitioner and\n                self.getNumPartitions() == rdd.getNumPartitions()):\n            rdd.partitioner = self.partitioner\n        return rdd", "output": "Return the union of this RDD and another one.\n\n        >>> rdd = sc.parallelize([1, 1, 2, 3])\n        >>> rdd.union(rdd).collect()\n        [1, 1, 2, 3, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def equals(self, rhs):\n    \"\"\"\n    \"\"\"\n\n    for comparator in self._comparators:\n      if comparator.equals(rhs):\n        return True\n\n    return False", "output": "Checks whether any Comparator is equal to rhs.\n\n    Args:\n      # rhs: can be anything\n\n    Returns:\n      bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def const_rand(size, seed=23980):\n    \"\"\" \n    \"\"\"\n    old_seed = np.random.seed()\n    np.random.seed(seed)\n    out = np.random.rand(size)\n    np.random.seed(old_seed)\n    return out", "output": "Generate a random array with a fixed seed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_node_status(self, name, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_node_status_with_http_info(name, body, **kwargs)\n        else:\n            (data) = self.replace_node_status_with_http_info(name, body, **kwargs)\n            return data", "output": "replace status of the specified Node\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_node_status(name, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Node (required)\n        :param V1Node body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1Node\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def contextMenuEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        self.menu.popup(event.globalPos())\r\n        event.accept()", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        \n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n        return new_obj.__finalize__(self)", "output": "Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Returns\n        -------\n        shifted : same type as caller\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hostinterface_delete(interfaceids, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'hostinterface.delete'\n            if isinstance(interfaceids, list):\n                params = interfaceids\n            else:\n                params = [interfaceids]\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['interfaceids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": "Delete host interface\n\n    .. versionadded:: 2016.3.0\n\n    :param interfaceids: IDs of the host interfaces to delete\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: ID of deleted host interfaces, False on failure.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.hostinterface_delete 50", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, other):\n        \"\"\"\"\"\"\n        if isinstance(other, cookielib.CookieJar):\n            for cookie in other:\n                self.set_cookie(copy.copy(cookie))\n        else:\n            super(RequestsCookieJar, self).update(other)", "output": "Updates this jar with cookies from another CookieJar or dict-like", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delay_until_retry(exc, deadline):\n    \"\"\"\n    \"\"\"\n    cause = exc.errors[0]\n\n    now = time.time()\n\n    if now >= deadline:\n        raise\n\n    delay = _get_retry_delay(cause)\n    if delay is not None:\n\n        if now + delay > deadline:\n            raise\n\n        time.sleep(delay)", "output": "Helper for :meth:`Session.run_in_transaction`.\n\n    Detect retryable abort, and impose server-supplied delay.\n\n    :type exc: :class:`google.api_core.exceptions.Aborted`\n    :param exc: exception for aborted transaction\n\n    :type deadline: float\n    :param deadline: maximum timestamp to continue retrying the transaction.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_load(jid):\n    '''\n    \n    '''\n    options = _get_options()\n\n    index = options['master_job_cache_index']\n    doc_type = options['master_job_cache_doc_type']\n\n    if options['index_date']:\n        index = '{0}-{1}'.format(index,\n            datetime.date.today().strftime('%Y.%m.%d'))\n\n    data = __salt__['elasticsearch.document_get'](index=index,\n                                                  id=jid,\n                                                  doc_type=doc_type)\n    if data:\n        # Use salt.utils.json.dumps to convert elasticsearch unicode json to standard json\n        return salt.utils.json.loads(salt.utils.json.dumps(data))\n    return {}", "output": "Return the load data that marks a specified jid\n\n    .. versionadded:: 2015.8.1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _connect(user=None, password=None, host=None, port=None, database='admin', authdb=None):\n    '''\n    \n    '''\n    if not user:\n        user = __salt__['config.option']('mongodb.user')\n    if not password:\n        password = __salt__['config.option']('mongodb.password')\n    if not host:\n        host = __salt__['config.option']('mongodb.host')\n    if not port:\n        port = __salt__['config.option']('mongodb.port')\n    if not authdb:\n        authdb = database\n\n    try:\n        conn = pymongo.MongoClient(host=host, port=port)\n        mdb = pymongo.database.Database(conn, database)\n        if user and password:\n            mdb.authenticate(user, password, source=authdb)\n    except pymongo.errors.PyMongoError:\n        log.error('Error connecting to database %s', database)\n        return False\n\n    return conn", "output": "Returns a tuple of (user, host, port) with config, pillar, or default\n    values assigned to missing values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def execute_script(self, script, *args):\n        \"\"\"\n        \n        \"\"\"\n        converted_args = list(args)\n        command = None\n        if self.w3c:\n            command = Command.W3C_EXECUTE_SCRIPT\n        else:\n            command = Command.EXECUTE_SCRIPT\n\n        return self.execute(command, {\n            'script': script,\n            'args': converted_args})['value']", "output": "Synchronously Executes JavaScript in the current window/frame.\n\n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n\n        :Usage:\n            ::\n\n                driver.execute_script('return document.title;')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _raw_open(self, flags, mode=0o777):\n        \"\"\"\n        \n        \"\"\"\n        if self._closed:\n            self._raise_closed()\n        return self._accessor.open(self, flags, mode)", "output": "Open the file pointed by this path and return a file descriptor,\n        as os.open() does.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset_cooldown(self, ctx):\n        \"\"\"\n        \"\"\"\n        if self._buckets.valid:\n            bucket = self._buckets.get_bucket(ctx.message)\n            bucket.reset()", "output": "Resets the cooldown on this command.\n\n        Parameters\n        -----------\n        ctx: :class:`.Context`\n            The invocation context to reset the cooldown under.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shutdown(self):\r\n        \"\"\"\"\"\"\r\n        if self.get_kernel() is not None and not self.slave:\r\n            self.shellwidget.kernel_manager.shutdown_kernel()\r\n        if self.shellwidget.kernel_client is not None:\r\n            background(self.shellwidget.kernel_client.stop_channels)", "output": "Shutdown kernel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def div(a, b):\n  \"\"\"\n  \n  \"\"\"\n  def divide(a, b):\n    \"\"\"Division\"\"\"\n    return a / b\n  return op_with_scalar_cast(a, b, divide)", "output": "A wrapper around tf division that does more automatic casting of\n  the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start(name, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudException(\n            'The start action must be called with -a or --action.'\n        )\n\n    node_id = get_linode_id_from_name(name)\n    node = get_linode(kwargs={'linode_id': node_id})\n\n    if node['STATUS'] == 1:\n        return {'success': True,\n                'action': 'start',\n                'state': 'Running',\n                'msg': 'Machine already running'}\n\n    response = _query('linode', 'boot', args={'LinodeID': node_id})['DATA']\n\n    if _wait_for_job(node_id, response['JobID']):\n        return {'state': 'Running',\n                'action': 'start',\n                'success': True}\n    else:\n        return {'action': 'start',\n                'success': False}", "output": "Start a VM in Linode.\n\n    name\n        The name of the VM to start.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop vm_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resources(self):\n        '''  '''\n        used_resources = self._used_resources()\n        ret = collections.defaultdict(dict)\n        for resource, total in six.iteritems(self._resources):\n            ret[resource]['total'] = total\n            if resource in used_resources:\n                ret[resource]['used'] = used_resources[resource]\n            else:\n                ret[resource]['used'] = 0\n        return ret", "output": "get total resources and available ones", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addSibling(self, elem):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlAddSibling(self._o, elem__o)\n        if ret is None:raise treeError('xmlAddSibling() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Add a new element @elem to the list of siblings of @cur\n          merging adjacent TEXT nodes (@elem may be freed) If the new\n          element was already inserted in a document it is first\n           unlinked from its existing context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def purge(name=None, slot=None, fromrepo=None, pkgs=None, **kwargs):\n    '''\n    \n    '''\n    ret = remove(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs)\n    ret.update(depclean(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs))\n    return ret", "output": ".. versionchanged:: 2015.8.12,2016.3.3,2016.11.0\n        On minions running systemd>=205, `systemd-run(1)`_ is now used to\n        isolate commands which modify installed packages from the\n        ``salt-minion`` daemon's control group. This is done to keep systemd\n        from killing any emerge commands spawned by Salt when the\n        ``salt-minion`` service is restarted. (see ``KillMode`` in the\n        `systemd.kill(5)`_ manpage for more information). If desired, usage of\n        `systemd-run(1)`_ can be suppressed by setting a :mod:`config option\n        <salt.modules.config.get>` called ``systemd.scope``, with a value of\n        ``False`` (no quotes).\n\n    .. _`systemd-run(1)`: https://www.freedesktop.org/software/systemd/man/systemd-run.html\n    .. _`systemd.kill(5)`: https://www.freedesktop.org/software/systemd/man/systemd.kill.html\n\n    Portage does not have a purge, this function calls remove followed\n    by depclean to emulate a purge process\n\n    name\n        The name of the package to be deleted.\n\n    slot\n        Restrict the remove to a specific slot. Ignored if name is None.\n\n    fromrepo\n        Restrict the remove to a specific slot. Ignored if ``name`` is None.\n\n    Multiple Package Options:\n\n    pkgs\n        Uninstall multiple packages. ``slot`` and ``fromrepo`` arguments are\n        ignored if this argument is present. Must be passed as a python list.\n\n    .. versionadded:: 0.16.0\n\n\n    Returns a dict containing the changes.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.purge <package name>\n        salt '*' pkg.purge <package name> slot=4.4\n        salt '*' pkg.purge <package1>,<package2>,<package3>\n        salt '*' pkg.purge pkgs='[\"foo\", \"bar\"]'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lambda_not_found_response(*args):\n        \"\"\"\n        \n        \"\"\"\n        response_data = jsonify(ServiceErrorResponses._NO_LAMBDA_INTEGRATION)\n        return make_response(response_data, ServiceErrorResponses.HTTP_STATUS_CODE_502)", "output": "Constructs a Flask Response for when a Lambda function is not found for an endpoint\n\n        :return: a Flask Response", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGSetSchema(self, reader):\n        \"\"\" \"\"\"\n        if reader is None: reader__o = None\n        else: reader__o = reader._o\n        ret = libxml2mod.xmlTextReaderRelaxNGSetSchema(reader__o, self._o)\n        return ret", "output": "Use RelaxNG to validate the document as it is processed.\n          Activation is only possible before the first Read(). if\n          @schema is None, then RelaxNG validation is desactivated. @\n          The @schema should not be freed until the reader is\n           deallocated or its use has been deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_ubuntu():\n    \"\"\"\"\"\"\n    if sys.platform.startswith('linux') and osp.isfile('/etc/lsb-release'):\n        release_info = open('/etc/lsb-release').read()\n        if 'Ubuntu' in release_info:\n            return True\n        else:\n            return False\n    else:\n        return False", "output": "Detect if we are running in an Ubuntu-based distribution", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def not_allowed(subset=None, show_ip=False, show_ipv4=None):\n    '''\n    \n    '''\n    show_ip = _show_ip_migration(show_ip, show_ipv4)\n    return list_not_state(subset=subset, show_ip=show_ip)", "output": ".. versionadded:: 2015.8.0\n    .. versionchanged:: 2019.2.0\n        The 'show_ipv4' argument has been renamed to 'show_ip' as it now\n        includes IPv6 addresses for IPv6-connected minions.\n\n    Print a list of all minions that are NOT up according to Salt's presence\n    detection (no commands will be sent)\n\n    subset : None\n        Pass in a CIDR range to filter minions by IP address.\n\n    show_ip : False\n        Also show the IP address each minion is connecting from.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run manage.not_allowed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def live_processes(self):\n        \"\"\"\n        \"\"\"\n        result = []\n        for process_type, process_infos in self.all_processes.items():\n            for process_info in process_infos:\n                if process_info.process.poll() is None:\n                    result.append((process_type, process_info.process))\n        return result", "output": "Return a list of the live processes.\n\n        Returns:\n            A list of the live processes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lovasz_softmax(probas, labels, only_present=False, per_image=False, ignore=None):\n    \"\"\"\n    \n    \"\"\"\n    if per_image:\n        loss = mean(lovasz_softmax_flat(*flatten_probas(prob.unsqueeze(0), lab.unsqueeze(0), ignore), only_present=only_present)\n                          for prob, lab in zip(probas, labels))\n    else:\n        loss = lovasz_softmax_flat(*flatten_probas(probas, labels, ignore), only_present=only_present)\n    return loss", "output": "Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      only_present: average only on classes present in ground truth\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rows(self):\n        \"\"\"\n        \n        \"\"\"\n        # We use DataFrames for serialization of IndexedRows from\n        # Java, so we first convert the RDD of rows to a DataFrame\n        # on the Scala/Java side. Then we map each Row in the\n        # DataFrame back to an IndexedRow on this side.\n        rows_df = callMLlibFunc(\"getIndexedRows\", self._java_matrix_wrapper._java_model)\n        rows = rows_df.rdd.map(lambda row: IndexedRow(row[0], row[1]))\n        return rows", "output": "Rows of the IndexedRowMatrix stored as an RDD of IndexedRows.\n\n        >>> mat = IndexedRowMatrix(sc.parallelize([IndexedRow(0, [1, 2, 3]),\n        ...                                        IndexedRow(1, [4, 5, 6])]))\n        >>> rows = mat.rows\n        >>> rows.first()\n        IndexedRow(0, [1.0,2.0,3.0])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def human_to_bytes(size):\n    '''\n    \n    '''\n    sbytes = size[:-1]\n    unit = size[-1]\n    if sbytes.isdigit():\n        sbytes = int(sbytes)\n        if unit == 'P':\n            sbytes *= 1125899906842624\n        elif unit == 'T':\n            sbytes *= 1099511627776\n        elif unit == 'G':\n            sbytes *= 1073741824\n        elif unit == 'M':\n            sbytes *= 1048576\n        else:\n            sbytes = 0\n    else:\n        sbytes = 0\n    return sbytes", "output": "Given a human-readable byte string (e.g. 2G, 30M),\n    return the number of bytes.  Will return 0 if the argument has\n    unexpected form.\n\n    .. versionadded:: 2018.3.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def returner(ret):\n    '''\n    \n    '''\n    log.debug('sqlite3 returner <returner> called with data: %s', ret)\n    conn = _get_conn(ret)\n    cur = conn.cursor()\n    sql = '''INSERT INTO salt_returns\n             (fun, jid, id, fun_args, date, full_ret, success)\n             VALUES (:fun, :jid, :id, :fun_args, :date, :full_ret, :success)'''\n    cur.execute(sql,\n                {'fun': ret['fun'],\n                 'jid': ret['jid'],\n                 'id': ret['id'],\n                 'fun_args': six.text_type(ret['fun_args']) if ret.get('fun_args') else None,\n                 'date': six.text_type(datetime.datetime.now()),\n                 'full_ret': salt.utils.json.dumps(ret['return']),\n                 'success': ret.get('success', '')})\n    _close_conn(conn)", "output": "Insert minion return data into the sqlite3 database", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_epoch_end(self, epoch, logs=None):\n        \"\"\"\n        \n        \"\"\"\n        if logs is None:\n            logs = dict()\n        logger.debug(logs)\n        nni.report_intermediate_result(logs[\"val_acc\"])", "output": "Run on end of each epoch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_user(user_cookie, db=DATABASE):\n    \"\"\"\n    \n    \"\"\"\n    collection = DATABASE.account\n\n    return [res for res in collection.find({'user_cookie': user_cookie}, {\"_id\": 0})]", "output": "get the user\n\n    Arguments:\n        user_cookie : str the unique cookie_id for a user\n    Keyword Arguments:\n        db: database for query\n\n    Returns:\n        list ---  [ACCOUNT]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_logits(self, x, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    outputs = self.fprop(x, **kwargs)\n    if self.O_LOGITS in outputs:\n      return outputs[self.O_LOGITS]\n    raise NotImplementedError(str(type(self)) + \"must implement `get_logits`\"\n                              \" or must define a \" + self.O_LOGITS +\n                              \" output in `fprop`\")", "output": ":param x: A symbolic representation (Tensor) of the network input\n    :return: A symbolic representation (Tensor) of the output logits\n    (i.e., the values fed as inputs to the softmax layer).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_intrinsic_dict(self, input):\n        \"\"\"\n        \n        \"\"\"\n        # All intrinsic functions are dictionaries with just one key\n        return isinstance(input, dict) \\\n            and len(input) == 1 \\\n            and list(input.keys())[0] in self.supported_intrinsics", "output": "Can the input represent an intrinsic function in it?\n\n        :param input: Object to be checked\n        :return: True, if the input contains a supported intrinsic function.  False otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_request(name=None):\n    '''\n    \n    '''\n    notify_path = os.path.join(__opts__['cachedir'], 'req_state.p')\n    serial = salt.payload.Serial(__opts__)\n    if os.path.isfile(notify_path):\n        with salt.utils.files.fopen(notify_path, 'rb') as fp_:\n            req = serial.load(fp_)\n        if name:\n            return req[name]\n        return req\n    return {}", "output": ".. versionadded:: 2015.5.0\n\n    Return the state request information, if any\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' state.check_request", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def legal_graph(graph):\n    '''\n    '''\n\n    descriptor = graph.extract_descriptor()\n    skips = descriptor.skip_connections\n    if len(skips) != len(set(skips)):\n        return False\n    return True", "output": "judge if a graph is legal or not.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_trainable(name, trainable):\n    \"\"\"\n    \"\"\"\n\n    from ray.tune.trainable import Trainable\n    from ray.tune.function_runner import wrap_function\n\n    if isinstance(trainable, type):\n        logger.debug(\"Detected class for trainable.\")\n    elif isinstance(trainable, FunctionType):\n        logger.debug(\"Detected function for trainable.\")\n        trainable = wrap_function(trainable)\n    elif callable(trainable):\n        logger.warning(\n            \"Detected unknown callable for trainable. Converting to class.\")\n        trainable = wrap_function(trainable)\n\n    if not issubclass(trainable, Trainable):\n        raise TypeError(\"Second argument must be convertable to Trainable\",\n                        trainable)\n    _global_registry.register(TRAINABLE_CLASS, name, trainable)", "output": "Register a trainable function or class.\n\n    Args:\n        name (str): Name to register.\n        trainable (obj): Function or tune.Trainable class. Functions must\n            take (config, status_reporter) as arguments and will be\n            automatically converted into a class during registration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next(self) -> Future:\n        \"\"\"\n        \"\"\"\n        self._running_future = Future()\n\n        if self._finished:\n            self._return_result(self._finished.popleft())\n\n        return self._running_future", "output": "Returns a `.Future` that will yield the next available result.\n\n        Note that this `.Future` will not be the same object as any of\n        the inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def grain_funcs(opts, proxy=None):\n    '''\n    \n    '''\n    ret = LazyLoader(\n        _module_dirs(\n            opts,\n            'grains',\n            'grain',\n            ext_type_dirs='grains_dirs',\n        ),\n        opts,\n        tag='grains',\n    )\n    ret.pack['__utils__'] = utils(opts, proxy=proxy)\n    return ret", "output": "Returns the grain functions\n\n      .. code-block:: python\n\n          import salt.config\n          import salt.loader\n\n          __opts__ = salt.config.minion_config('/etc/salt/minion')\n          grainfuncs = salt.loader.grain_funcs(__opts__)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pending(self, tag, match_func=None):\n        \"\"\"\n        \"\"\"\n        if match_func is None:\n            match_func = self._get_match_func()\n        old_events = self.pending_events\n        self.pending_events = []\n        ret = None\n        for evt in old_events:\n            if match_func(evt['tag'], tag):\n                if ret is None:\n                    ret = evt\n                    log.trace('get_event() returning cached event = %s', ret)\n                else:\n                    self.pending_events.append(evt)\n            elif any(pmatch_func(evt['tag'], ptag) for ptag, pmatch_func in self.pending_tags):\n                self.pending_events.append(evt)\n            else:\n                log.trace('get_event() discarding cached event that no longer has any subscriptions = %s', evt)\n        return ret", "output": "Check the pending_events list for events that match the tag\n\n        :param tag: The tag to search for\n        :type tag: str\n        :param tags_regex: List of re expressions to search for also\n        :type tags_regex: list[re.compile()]\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(cls, src, dist=None):\n        \"\"\"\n        \"\"\"\n        m = cls.pattern.match(src)\n        if not m:\n            msg = \"EntryPoint must be in 'name=module:attrs [extras]' format\"\n            raise ValueError(msg, src)\n        res = m.groupdict()\n        extras = cls._parse_extras(res['extras'])\n        attrs = res['attr'].split('.') if res['attr'] else ()\n        return cls(res['name'], res['module'], attrs, extras, dist)", "output": "Parse a single entry point from string `src`\n\n        Entry point syntax follows the form::\n\n            name = some.module:some.attr [extra1, extra2]\n\n        The entry name and module name are required, but the ``:attrs`` and\n        ``[extras]`` parts are optional", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_insert_idx(pos_dict, name):\n    \"\"\n    keys,i = list(pos_dict.keys()),0\n    while i < len(keys) and str.lower(keys[i]) < str.lower(name): i+=1\n    if i == len(keys): return -1\n    else:              return pos_dict[keys[i]]", "output": "Return the position to insert a given function doc in a notebook.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_conn(profile):\n    '''\n    \n    '''\n    params = {}\n    for key in ('host', 'port', 'token', 'scheme', 'consistency', 'dc', 'verify'):\n        if key in profile:\n            params[key] = profile[key]\n\n    if HAS_CONSUL:\n        return consul.Consul(**params)\n    else:\n        raise CommandExecutionError(\n            '(unable to import consul, '\n            'module most likely not installed. PLease install python-consul)'\n        )", "output": "Return a client object for accessing consul", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def raw_command(netfn, command, bridge_request=None, data=(), retry=True, delay_xmit=None, **kwargs):\n    '''\n    \n    '''\n    with _IpmiSession(**kwargs) as s:\n        r = s.raw_command(netfn=int(netfn),\n                        command=int(command),\n                        bridge_request=bridge_request,\n                        data=data,\n                        retry=retry,\n                        delay_xmit=delay_xmit)\n        return r", "output": "Send raw ipmi command\n\n    This allows arbitrary IPMI bytes to be issued.  This is commonly used\n    for certain vendor specific commands.\n\n    :param netfn: Net function number\n    :param command: Command value\n    :param bridge_request: The target slave address and channel number for\n                        the bridge request.\n    :param data: Command data as a tuple or list\n    :param kwargs:\n        - api_host=127.0.0.1\n        - api_user=admin\n        - api_pass=example\n        - api_port=623\n        - api_kg=None\n\n    :returns: dict -- The response from IPMI device\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-call ipmi.raw_command netfn=0x06 command=0x46 data=[0x02]\n        # this will return the name of the user with id 2 in bytes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cancel_job(self, job_id, project=None, location=None, retry=DEFAULT_RETRY):\n        \"\"\"\n        \"\"\"\n        extra_params = {\"projection\": \"full\"}\n\n        if project is None:\n            project = self.project\n\n        if location is None:\n            location = self.location\n\n        if location is not None:\n            extra_params[\"location\"] = location\n\n        path = \"/projects/{}/jobs/{}/cancel\".format(project, job_id)\n\n        resource = self._call_api(\n            retry, method=\"POST\", path=path, query_params=extra_params\n        )\n\n        return self.job_from_resource(resource[\"job\"])", "output": "Attempt to cancel a job from a job ID.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/cancel\n\n        Arguments:\n            job_id (str): Unique job identifier.\n\n        Keyword Arguments:\n            project (str):\n                (Optional) ID of the project which owns the job (defaults to\n                the client's project).\n            location (str): Location where the job was run.\n            retry (google.api_core.retry.Retry):\n                (Optional) How to retry the RPC.\n\n        Returns:\n            Union[google.cloud.bigquery.job.LoadJob, \\\n                  google.cloud.bigquery.job.CopyJob, \\\n                  google.cloud.bigquery.job.ExtractJob, \\\n                  google.cloud.bigquery.job.QueryJob]:\n                Job instance, based on the resource returned by the API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sub(self, repl):\n        \"\"\"\n        \n        \"\"\"\n        if self.asGroupList:\n            warnings.warn(\"cannot use sub() with Regex(asGroupList=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch and callable(repl):\n            warnings.warn(\"cannot use sub() with a callable with Regex(asMatch=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch:\n            def pa(tokens):\n                return tokens[0].expand(repl)\n        else:\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n        return self.addParseAction(pa)", "output": "Return Regex with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transformString(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_all(self):\r\n        \"\"\"\r\n        \"\"\"\r\n        for index in range(self.get_stack_count()):\r\n            if self.data[index].editor.document().isModified():\r\n                self.save(index)", "output": "Save all opened files.\r\n\r\n        Iterate through self.data and call save() on any modified files.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _rules_from_env(self, val):\n        \"\"\"\"\"\"\n        val = val.split(':')\n        if 'DEFAULT_RULES' in val:\n            val = const.DEFAULT_RULES + [rule for rule in val if rule != 'DEFAULT_RULES']\n        return val", "output": "Transforms rules list from env-string to python.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def accepts(self, package):  # type: (poetry.packages.Package) -> bool\n        \"\"\"\n        \n        \"\"\"\n        return (\n            self._name == package.name\n            and self._constraint.allows(package.version)\n            and (not package.is_prerelease() or self.allows_prereleases())\n        )", "output": "Determines if the given package matches this dependency.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def registry_path(cls, project, location, registry):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/registries/{registry}\",\n            project=project,\n            location=location,\n            registry=registry,\n        )", "output": "Return a fully-qualified registry string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def graph_memoized(func):\n    \"\"\"\n    \n    \"\"\"\n\n    # TODO it keeps the graph alive\n    from ..compat import tfv1\n    GRAPH_ARG_NAME = '__IMPOSSIBLE_NAME_FOR_YOU__'\n\n    @memoized\n    def func_with_graph_arg(*args, **kwargs):\n        kwargs.pop(GRAPH_ARG_NAME)\n        return func(*args, **kwargs)\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        assert GRAPH_ARG_NAME not in kwargs, \"No Way!!\"\n        graph = tfv1.get_default_graph()\n        kwargs[GRAPH_ARG_NAME] = graph\n        return func_with_graph_arg(*args, **kwargs)\n    return wrapper", "output": "Like memoized, but keep one cache per default graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_edit_filetypes():\n    \"\"\"\"\"\"\n    # The filter details are not hidden on Windows, so we can't use\n    # all Pygments extensions on that platform\n    if os.name == 'nt':\n        supported_exts = []\n    else:\n        try:\n            supported_exts = _get_pygments_extensions()\n        except Exception:\n            supported_exts = []\n\n    # NOTE: Try to not add too much extensions to this list to not\n    # make the filter look too big on Windows\n    favorite_exts = ['.py', '.R', '.jl', '.ipynb', '.md', '.pyw', '.pyx',\n                     '.c', '.cpp', '.json', '.dat', '.csv', '.tsv', '.txt',\n                     '.ini', '.html', '.js', '.h', '.bat']\n\n    other_exts = [ext for ext in supported_exts if ext not in favorite_exts]\n    all_exts = tuple(favorite_exts + other_exts)\n    text_filetypes = (_(\"Supported text files\"), all_exts)\n    return [text_filetypes] + EDIT_FILETYPES", "output": "Get all file types supported by the Editor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def components(self):\n        \"\"\"\n        \n        \"\"\"\n        from pandas import DataFrame\n\n        columns = ['days', 'hours', 'minutes', 'seconds',\n                   'milliseconds', 'microseconds', 'nanoseconds']\n        hasnans = self._hasnans\n        if hasnans:\n            def f(x):\n                if isna(x):\n                    return [np.nan] * len(columns)\n                return x.components\n        else:\n            def f(x):\n                return x.components\n\n        result = DataFrame([f(x) for x in self], columns=columns)\n        if not hasnans:\n            result = result.astype('int64')\n        return result", "output": "Return a dataframe of the components (days, hours, minutes,\n        seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.\n\n        Returns\n        -------\n        a DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        \n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step,\n                                                 kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)", "output": "For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning\n        end : label, default None\n            If None, defaults to the end\n        step : int, default None\n        kind : string, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        ---------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_technologies():\n    '''\n    \n    '''\n    tech = ''\n    technologies = pyconnman.ConnManager().get_technologies()\n    for path, params in technologies:\n        tech += '{0}\\n\\tName = {1}\\n\\tType = {2}\\n\\tPowered = {3}\\n\\tConnected = {4}\\n'.format(\n            path, params['Name'], params['Type'], params['Powered'] == 1, params['Connected'] == 1)\n    return tech", "output": "Returns the technologies of connman", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parent_info(self):\n        \"\"\"\n        \"\"\"\n        parent_doc = self.parent\n        if parent_doc is None:\n            parent_path = _helpers.DOCUMENT_PATH_DELIMITER.join(\n                (self._client._database_string, \"documents\")\n            )\n        else:\n            parent_path = parent_doc._document_path\n\n        expected_prefix = _helpers.DOCUMENT_PATH_DELIMITER.join((parent_path, self.id))\n        return parent_path, expected_prefix", "output": "Get fully-qualified parent path and prefix for this collection.\n\n        Returns:\n            Tuple[str, str]: Pair of\n\n            * the fully-qualified (with database and project) path to the\n              parent of this collection (will either be the database path\n              or a document path).\n            * the prefix to a document in this collection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_top_states(saltenv='base'):\n    '''\n    \n    '''\n    alt_states = []\n    try:\n        returned = __salt__['state.show_top']()\n        for i in returned[saltenv]:\n            alt_states.append(i)\n    except Exception:\n        raise\n    # log.info(\"top states: %s\", alt_states)\n    return alt_states", "output": "Equivalent to a salt cli: salt web state.show_top", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_view_on_selected(self, widget, selected_item_key):\n        \"\"\" \n        \"\"\"\n        self.lbl.set_text('List selection: ' + self.listView.children[selected_item_key].get_text())", "output": "The selection event of the listView, returns a key of the clicked event.\n            You can retrieve the item rapidly", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def _oauth_get_user_future(\n        self, access_token: Dict[str, Any]\n    ) -> Dict[str, Any]:\n        \"\"\"\n        \"\"\"\n        raise NotImplementedError()", "output": "Subclasses must override this to get basic information about the\n        user.\n\n        Should be a coroutine whose result is a dictionary\n        containing information about the user, which may have been\n        retrieved by using ``access_token`` to make a request to the\n        service.\n\n        The access token will be added to the returned dictionary to make\n        the result of `get_authenticated_user`.\n\n        .. versionchanged:: 5.1\n\n           Subclasses may also define this method with ``async def``.\n\n        .. versionchanged:: 6.0\n\n           A synchronous fallback to ``_oauth_get_user`` was removed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ls_(active=None, cache=True, path=None):\n    '''\n    \n    '''\n    contextvar = 'lxc.ls{0}'.format(path)\n    if active:\n        contextvar += '.active'\n    if cache and (contextvar in __context__):\n        return __context__[contextvar]\n    else:\n        ret = []\n        cmd = 'lxc-ls'\n        if path:\n            cmd += ' -P {0}'.format(pipes.quote(path))\n        if active:\n            cmd += ' --active'\n        output = __salt__['cmd.run_stdout'](cmd, python_shell=False)\n        for line in output.splitlines():\n            ret.extend(line.split())\n        __context__[contextvar] = ret\n        return ret", "output": "Return a list of the containers available on the minion\n\n    path\n        path to the container parent directory\n        default: /var/lib/lxc (system)\n\n        .. versionadded:: 2015.8.0\n\n    active\n        If ``True``, return only active (i.e. running) containers\n\n        .. versionadded:: 2015.5.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxc.ls\n        salt '*' lxc.ls active=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_from_user_input(raw_properties, jamfile_module, location):\n    \"\"\"'\"\"\"\n    assert is_iterable_typed(raw_properties, basestring)\n    assert isinstance(jamfile_module, basestring)\n    assert isinstance(location, basestring)\n    properties = property.create_from_strings(raw_properties, True)\n    properties = property.translate_paths(properties, location)\n    properties = property.translate_indirect(properties, jamfile_module)\n\n    project_id = get_manager().projects().attributeDefault(jamfile_module, 'id', None)\n    if not project_id:\n        project_id = os.path.abspath(location)\n    properties = property.translate_dependencies(properties, project_id, location)\n    properties = property.expand_subfeatures_in_conditions(properties)\n    return create(properties)", "output": "Creates a property-set from the input given by the user, in the\n    context of 'jamfile-module' at 'location", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zoom_in(self):\n        \"\"\"\"\"\"\n        if self._scalefactor <= self._sfmax:\n            self._scalefactor += 1\n            self.scale_image()\n            self._adjust_scrollbar(self._scalestep)\n            self.sig_zoom_changed.emit(self.get_scaling())", "output": "Scale the image up by one scale step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def trim_join_unit(join_unit, length):\n    \"\"\"\n    \n    \"\"\"\n\n    if 0 not in join_unit.indexers:\n        extra_indexers = join_unit.indexers\n\n        if join_unit.block is None:\n            extra_block = None\n        else:\n            extra_block = join_unit.block.getitem_block(slice(length, None))\n            join_unit.block = join_unit.block.getitem_block(slice(length))\n    else:\n        extra_block = join_unit.block\n\n        extra_indexers = copy.copy(join_unit.indexers)\n        extra_indexers[0] = extra_indexers[0][length:]\n        join_unit.indexers[0] = join_unit.indexers[0][:length]\n\n    extra_shape = (join_unit.shape[0] - length,) + join_unit.shape[1:]\n    join_unit.shape = (length,) + join_unit.shape[1:]\n\n    return JoinUnit(block=extra_block, indexers=extra_indexers,\n                    shape=extra_shape)", "output": "Reduce join_unit's shape along item axis to length.\n\n    Extra items that didn't fit are returned as a separate block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _agent_import_failed(trace):\n    \"\"\"\"\"\"\n\n    class _AgentImportFailed(Trainer):\n        _name = \"AgentImportFailed\"\n        _default_config = with_common_config({})\n\n        def _setup(self, config):\n            raise ImportError(trace)\n\n    return _AgentImportFailed", "output": "Returns dummy agent class for if PyTorch etc. is not installed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def flush(self, fsync=False):\n        \"\"\"\n        \n        \"\"\"\n        if self._handle is not None:\n            self._handle.flush()\n            if fsync:\n                try:\n                    os.fsync(self._handle.fileno())\n                except OSError:\n                    pass", "output": "Force all buffered modifications to be written to disk.\n\n        Parameters\n        ----------\n        fsync : bool (default False)\n          call ``os.fsync()`` on the file handle to force writing to disk.\n\n        Notes\n        -----\n        Without ``fsync=True``, flushing may not guarantee that the OS writes\n        to disk. With fsync, the operation will block until the OS claims the\n        file has been written; however, other caching layers may still\n        interfere.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_screen_resolution(self):\n        \"\"\"\"\"\"\n        widget = QDesktopWidget()\n        geometry = widget.availableGeometry(widget.primaryScreen())\n        return geometry.width(), geometry.height()", "output": "Return the screen resolution of the primary screen.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_imported_modules(cells, nb_module_name=''):\n    \"\"\n    module_names = get_top_level_modules()\n    nb_imports = [match.group(1) for cell in cells for match in IMPORT_RE.finditer(cell['source']) if cell['cell_type'] == 'code']\n    parts = nb_module_name.split('.')\n    parent_modules = ['.'.join(parts[:(x+1)]) for x in range_of(parts)] # Imports parent modules - a.b.c = [a, a.b, a.b.c]\n    all_modules = module_names + nb_imports + parent_modules\n    mods = [import_mod(m, ignore_errors=True) for m in all_modules]\n    return [m for m in mods if m is not None]", "output": "Finds all submodules of notebook - sorted by submodules > top level modules > manual imports. This gives notebook imports priority", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cell_value(self, column_family_id, column, index=0):\n        \"\"\"\n        \"\"\"\n        cells = self.find_cells(column_family_id, column)\n\n        try:\n            cell = cells[index]\n        except (TypeError, IndexError):\n            num_cells = len(cells)\n            msg = _MISSING_INDEX.format(index, column, column_family_id, num_cells)\n            raise IndexError(msg)\n\n        return cell.value", "output": "Get a single cell value stored on this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_row_cell_value]\n            :end-before: [END bigtable_row_cell_value]\n\n        Args:\n            column_family_id (str): The ID of the column family. Must be of the\n                form ``[_a-zA-Z0-9][-_.a-zA-Z0-9]*``.\n            column (bytes): The column within the column family where the cell\n                is located.\n            index (Optional[int]): The offset within the series of values. If\n                not specified, will return the first cell.\n\n        Returns:\n            ~google.cloud.bigtable.row_data.Cell value: The cell value stored\n            in the specified column and specified index.\n\n        Raises:\n            KeyError: If ``column_family_id`` is not among the cells stored\n                in this row.\n            KeyError: If ``column`` is not among the cells stored in this row\n                for the given ``column_family_id``.\n            IndexError: If ``index`` cannot be found within the cells stored\n                in this row for the given ``column_family_id``, ``column``\n                pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setData(self, index, value, role=Qt.EditRole, change_type=None):\r\n        \"\"\"\"\"\"\r\n        column = index.column()\r\n        row = index.row()\r\n\r\n        if index in self.display_error_idxs:\r\n            return False\r\n        if change_type is not None:\r\n            try:\r\n                value = self.data(index, role=Qt.DisplayRole)\r\n                val = from_qvariant(value, str)\r\n                if change_type is bool:\r\n                    val = bool_false_check(val)\r\n                self.df.iloc[row, column] = change_type(val)\r\n            except ValueError:\r\n                self.df.iloc[row, column] = change_type('0')\r\n        else:\r\n            val = from_qvariant(value, str)\r\n            current_value = self.get_value(row, column)\r\n            if isinstance(current_value, (bool, np.bool_)):\r\n                val = bool_false_check(val)\r\n            supported_types = (bool, np.bool_) + REAL_NUMBER_TYPES\r\n            if (isinstance(current_value, supported_types) or\r\n                    is_text_string(current_value)):\r\n                try:\r\n                    self.df.iloc[row, column] = current_value.__class__(val)\r\n                except (ValueError, OverflowError) as e:\r\n                    QMessageBox.critical(self.dialog, \"Error\",\r\n                                         str(type(e).__name__) + \": \" + str(e))\r\n                    return False\r\n            else:\r\n                QMessageBox.critical(self.dialog, \"Error\",\r\n                                     \"Editing dtype {0!s} not yet supported.\"\r\n                                     .format(type(current_value).__name__))\r\n                return False\r\n        self.max_min_col_update()\r\n        self.dataChanged.emit(index, index)\r\n        return True", "output": "Cell content change", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_tickers_from_file(self, filename):\n        \"\"\"\"\"\"\n        if not os.path.exists(filename):\n            log.error(\"Ticker List file does not exist: %s\", filename)\n\n        tickers = []\n        with io.open(filename, 'r') as fd:\n            for ticker in fd:\n                tickers.append(ticker.rstrip())\n        return tickers", "output": "Load ticker list from txt file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    \n\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError((\"{fname}() got an unexpected \"\n                         \"keyword argument '{arg}'\".\n                         format(fname=fname, arg=bad_arg)))", "output": "Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_watch(self, id, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'id'.\")\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_watcher\", \"watch\", id), params=params, body=body\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html>`_\n\n        :arg id: Watch ID\n        :arg body: The watch\n        :arg active: Specify whether the watch is in/active by default\n        :arg if_primary_term: only update the watch if the last operation that\n            has changed the watch has the specified primary term\n        :arg if_seq_no: only update the watch if the last operation that has\n            changed the watch has the specified sequence number\n        :arg version: Explicit version number for concurrency control", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def native_concat(nodes):\n    \"\"\"\n    \"\"\"\n    head = list(islice(nodes, 2))\n\n    if not head:\n        return None\n\n    if len(head) == 1:\n        out = head[0]\n    else:\n        out = u''.join([text_type(v) for v in chain(head, nodes)])\n\n    try:\n        return literal_eval(out)\n    except (ValueError, SyntaxError, MemoryError):\n        return out", "output": "Return a native Python type from the list of compiled nodes. If the\n    result is a single node, its value is returned. Otherwise, the nodes are\n    concatenated as strings. If the result can be parsed with\n    :func:`ast.literal_eval`, the parsed value is returned. Otherwise, the\n    string is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _do_names(names, fun, path=None):\n    '''\n    \n    '''\n    ret = {}\n    hosts = find_guests(names, path=path)\n    if not hosts:\n        return False\n\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    for host, sub_names in six.iteritems(hosts):\n        cmds = []\n        for name in sub_names:\n            cmds.append(client.cmd_iter(\n                    host,\n                    'lxc.{0}'.format(fun),\n                    [name],\n                    kwarg={'path': path},\n                    timeout=60))\n        for cmd in cmds:\n            data = next(cmd)\n            data = data.get(host, {}).get('ret', None)\n            if data:\n                ret.update({host: data})\n    return ret", "output": "Invoke a function in the lxc module with no args\n\n    path\n        path to the container parent\n        default: /var/lib/lxc (system default)\n\n        .. versionadded:: 2015.8.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _concat(self, first_data, second_data):\n        \"\"\"\"\"\"\n        assert len(first_data) == len(\n            second_data), 'data source should contain the same size'\n        if first_data and second_data:\n            return [\n                concat(\n                    first_data[x],\n                    second_data[x],\n                    dim=0\n                ) for x in range(len(first_data))\n            ]\n        elif (not first_data) and (not second_data):\n            return []\n        else:\n            return [\n                first_data[0] if first_data else second_data[0]\n                for x in range(len(first_data))\n            ]", "output": "Helper function to concat two NDArrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mmodule(saltenv, fun, *args, **kwargs):\n    '''\n    \n    '''\n    mminion = _MMinion(saltenv)\n    return mminion.functions[fun](*args, **kwargs)", "output": "Loads minion modules from an environment so that they can be used in pillars\n    for that environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.mmodule base test.ping", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def snapshots_delete(container, name, remote_addr=None,\n                     cert=None, key=None, verify_cert=True):\n    '''\n    \n    '''\n    cont = container_get(\n        container, remote_addr, cert, key, verify_cert, _raw=True\n    )\n\n    try:\n        for s in cont.snapshots.all():\n            if s.name == name:\n                s.delete()\n                return True\n    except pylxd.exceptions.LXDAPIException:\n        pass\n\n    return False", "output": "Delete a snapshot for a container\n\n    container :\n        The name of the container to get.\n\n    name :\n        The name of the snapshot.\n\n    remote_addr :\n        An URL to a remote server. The 'cert' and 'key' fields must also be\n        provided if 'remote_addr' is defined.\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Verify the ssl certificate.  Default: True\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.snapshots_delete test-container test-snapshot", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, filepath):\n    \"\"\"\n    \"\"\"\n    with tf.io.gfile.GFile(filepath, \"rb\") as f:\n      data = tfds.core.lazy_imports.scipy.io.loadmat(f)\n\n    # Maybe should shuffle ?\n\n    assert np.max(data[\"y\"]) <= 10  # Sanity check\n    assert np.min(data[\"y\"]) > 0\n\n    for image, label in zip(np.rollaxis(data[\"X\"], -1), data[\"y\"]):\n      yield {\n          \"image\": image,\n          \"label\": label % 10,  # digit 0 is saved as 0 (instead of 10)\n      }", "output": "Generate examples as dicts.\n\n    Args:\n      filepath: `str` path of the file to process.\n\n    Yields:\n      Generator yielding the next samples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def perform_iteration(self):\n        \"\"\"\"\"\"\n        stats = self.get_all_stats()\n\n        self.redis_client.publish(\n            self.redis_key,\n            jsonify_asdict(stats),\n        )", "output": "Get any changes to the log files and push updates to Redis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    \n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError('data is already tz-aware {inferred_tz}, unable to '\n                        'set specified tz: {tz}'\n                        .format(inferred_tz=inferred_tz, tz=tz))\n    return tz", "output": "If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_response(self):\n        \"\"\"\n        \n        \"\"\"\n        user_input = self.usr_input.get()\n        self.usr_input.delete(0, tk.END)\n\n        response = self.chatbot.get_response(user_input)\n\n        self.conversation['state'] = 'normal'\n        self.conversation.insert(\n            tk.END, \"Human: \" + user_input + \"\\n\" + \"ChatBot: \" + str(response.text) + \"\\n\"\n        )\n        self.conversation['state'] = 'disabled'\n\n        time.sleep(0.5)", "output": "Get a response from the chatbot and display it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Removing datastore \\'%s\\'', datastore)\n    target = _get_proxy_target(service_instance)\n    datastores = salt.utils.vmware.get_datastores(\n        service_instance,\n        reference=target,\n        datastore_names=[datastore])\n    if not datastores:\n        raise VMwareObjectRetrievalError(\n            'Datastore \\'{0}\\' was not found'.format(datastore))\n    if len(datastores) > 1:\n        raise VMwareObjectRetrievalError(\n            'Multiple datastores \\'{0}\\' were found'.format(datastore))\n    salt.utils.vmware.remove_datastore(service_instance, datastores[0])\n    return True", "output": "Removes a datastore. If multiple datastores an error is raised.\n\n    datastore\n        Datastore name\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter/ESXi host.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.remove_datastore ds_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_value(self, orig_name, new_name):\r\n        \"\"\"\"\"\"\r\n        self.shellwidget.copy_value(orig_name, new_name)\r\n        self.shellwidget.refresh_namespacebrowser()", "output": "Copy value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def restore(self):\n        \"\"\"\"\"\"\n        current, self.nlp.pipeline = self.nlp.pipeline, self.original_pipeline\n        unexpected = [name for name, pipe in current if not self.nlp.has_pipe(name)]\n        if unexpected:\n            # Don't change the pipeline if we're raising an error.\n            self.nlp.pipeline = current\n            raise ValueError(Errors.E008.format(names=unexpected))\n        self[:] = []", "output": "Restore the pipeline to its state when DisabledPipes was created.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def logical_and(lhs, rhs):\n    \"\"\"\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_logical_and,\n        lambda x, y: 1 if x and y else 0,\n        _internal._logical_and_scalar,\n        None)", "output": "Returns the result of element-wise **logical and** comparison\n    operation with broadcasting.\n\n    For each element in input arrays, return 1(true) if lhs elements and rhs elements\n    are true, otherwise return 0(false).\n\n    Equivalent to ``lhs and rhs`` and ``mx.nd.broadcast_logical_and(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First input of the function.\n    rhs : scalar or mxnet.ndarray.array\n         Second input of the function. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        Output array of boolean values.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, 1).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def done(self):\n        \"\"\"\n        \"\"\"\n        return self._exception != self._SENTINEL or self._result != self._SENTINEL", "output": "Return True the future is done, False otherwise.\n\n        This still returns True in failure cases; checking :meth:`result` or\n        :meth:`exception` is the canonical way to assess success or failure.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fit_transform(self, data):\n        \"\"\"\n        \n\n        \"\"\"\n        if not self._transformers:\n            return self._preprocess(data)\n\n        transformed_data = self._preprocess(data)\n        final_step = self._transformers[-1]\n        return final_step[1].fit_transform(transformed_data)", "output": "First fit a transformer using the SFrame `data` and then return a transformed\n        version of `data`.\n\n        Parameters\n        ----------\n        data : SFrame\n            The data used to fit the transformer. The same data is then also\n            transformed.\n\n        Returns\n        -------\n        Transformed SFrame.\n\n        See Also\n        --------\n        transform, fit_transform\n\n        Notes\n        -----\n        - The default implementation calls fit() and then calls transform().\n          You may override this function with a more efficient implementation.\"\n\n        Examples\n        --------\n        .. sourcecode:: python\n\n          >> transformed_sf = chain.fit_transform(sf)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(self, name, value):\n        \"\"\"\"\"\"\n        name = self._convert_name(name)\n\n        if ((name in _ELEMENTSFIELD or name == 'Platform') and\n            not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [v.strip() for v in value.split(',')]\n            else:\n                value = []\n        elif (name in _LISTFIELDS and\n              not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [value]\n            else:\n                value = []\n\n        if logger.isEnabledFor(logging.WARNING):\n            project_name = self['Name']\n\n            scheme = get_scheme(self.scheme)\n            if name in _PREDICATE_FIELDS and value is not None:\n                for v in value:\n                    # check that the values are valid\n                    if not scheme.is_valid_matcher(v.split(';')[0]):\n                        logger.warning(\n                            \"'%s': '%s' is not valid (field '%s')\",\n                            project_name, v, name)\n            # FIXME this rejects UNKNOWN, is that right?\n            elif name in _VERSIONS_FIELDS and value is not None:\n                if not scheme.is_valid_constraint_list(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n            elif name in _VERSION_FIELDS and value is not None:\n                if not scheme.is_valid_version(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n\n        if name in _UNICODEFIELDS:\n            if name == 'Description':\n                value = self._remove_line_prefix(value)\n\n        self._fields[name] = value", "output": "Control then set a metadata field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_dense_tensor(self, inputs, weight_collections=None, trainable=None):\n    \"\"\"\"\"\"\n    del weight_collections\n    text_batch = tf.reshape(inputs.get(self), shape=[-1])\n    m = module.Module(self.module_spec, trainable=self.trainable and trainable)\n    return m(text_batch)", "output": "Returns a `Tensor`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_optional_arg_param(self, param_name, layer_index, blob_index):\n        \"\"\"\"\"\"\n        blobs = self.layers[layer_index].blobs\n        if blob_index < len(blobs):\n            self.add_arg_param(param_name, layer_index, blob_index)", "output": "Add an arg param. If there is no such param in .caffemodel fie, silently ignore it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_image(kwargs, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_images function must be called with '\n            '-f or --function'\n        )\n\n    if not isinstance(kwargs, dict):\n        kwargs = {}\n\n    images = kwargs['image']\n    images = images.split(',')\n\n    params = {\n        'action': 'DescribeImages',\n        'images': images,\n        'zone': _get_specified_zone(kwargs, get_configured_provider()),\n    }\n\n    items = query(params=params)\n\n    if not items['image_set']:\n        raise SaltCloudNotFound('The specified image could not be found.')\n\n    result = {}\n    for image in items['image_set']:\n        result[image['image_id']] = {}\n        for key in image:\n            result[image['image_id']][key] = image[key]\n\n    return result", "output": "Show the details from QingCloud concerning an image.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c,coreos4\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c zone=ap1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        if self.seq is not None and self.shuffle:\n            random.shuffle(self.seq)\n        if self.last_batch_handle != 'roll_over' or \\\n            self._cache_data is None:\n            if self.imgrec is not None:\n                self.imgrec.reset()\n            self.cur = 0\n            if self._allow_read is False:\n                self._allow_read = True", "output": "Resets the iterator to the beginning of the data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _read_info(info_path):\n  \"\"\"\"\"\"\n  if not tf.io.gfile.exists(info_path):\n    return None\n  with tf.io.gfile.GFile(info_path) as info_f:\n    return json.load(info_f)", "output": "Returns info dict or None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prep_acl_for_compare(ACL):\n    '''\n    \n    '''\n    ret = copy.deepcopy(ACL)\n    ret['Owner'] = _normalize_user(ret['Owner'])\n    for item in ret.get('Grants', ()):\n        item['Grantee'] = _normalize_user(item.get('Grantee'))\n    return ret", "output": "Prepares the ACL returned from the AWS API for comparison with a given one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_value(key, value=None):\n    '''\n    \n    '''\n    if not isinstance(key, six.string_types):\n        log.debug('%s: \\'key\\' argument is not a string type: \\'%s\\'', __name__, key)\n        return False\n    try:\n        cur_val = os.environ[key]\n        if value is not None:\n            if cur_val == value:\n                return True\n            else:\n                return False\n    except KeyError:\n        return False\n    return True", "output": "Determine whether the key exists in the current salt process\n    environment dictionary. Optionally compare the current value\n    of the environment against the supplied value string.\n\n    key\n        Must be a string. Used as key for environment lookup.\n\n    value:\n        Optional. If key exists in the environment, compare the\n        current value with this value. Return True if they are equal.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' environ.has_value foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def template_click_option(include_build=True):\n    \"\"\"\n    \n    \"\"\"\n    return click.option('--template', '-t',\n                        default=_TEMPLATE_OPTION_DEFAULT_VALUE,\n                        type=click.Path(),\n                        envvar=\"SAM_TEMPLATE_FILE\",\n                        callback=partial(get_or_default_template_file_name, include_build=include_build),\n                        show_default=True,\n                        help=\"AWS SAM template file\")", "output": "Click Option for template option", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validNormalizeAttributeValue(self, elem, name, value):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlValidNormalizeAttributeValue(self._o, elem__o, name, value)\n        return ret", "output": "Does the validation related extra step of the normalization\n          of attribute values:  If the declared value is not CDATA,\n          then the XML processor must further process the normalized\n          attribute value by discarding any leading and trailing\n          space (#x20) characters, and by replacing sequences of\n           space (#x20) characters by single space (#x20) character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _config_list(conf_tuples=None, only_net=False, **kwargs):\n    '''\n    \n\n    '''\n    # explicit cast\n    only_net = bool(only_net)\n    if not conf_tuples:\n        conf_tuples = []\n    kwargs = copy.deepcopy(kwargs)\n    ret = []\n    if not only_net:\n        default_data = _get_lxc_default_data(**kwargs)\n        for k, val in six.iteritems(default_data):\n            ret.append({k: val})\n    net_datas = _network_conf(conf_tuples=conf_tuples, **kwargs)\n    ret.extend(net_datas)\n    return ret", "output": "Return a list of dicts from the salt level configurations\n\n    conf_tuples\n        _LXCConfig compatible list of entries which can contain\n\n            - string line\n            - tuple (lxc config param,value)\n            - dict of one entry: {lxc config param: value)\n\n    only_net\n        by default we add to the tuples a reflection of both\n        the real config if avalaible and a certain amount of\n        default values like the cpu parameters, the memory\n        and etc.\n        On the other hand, we also no matter the case reflect\n        the network configuration computed from the actual config if\n        available and given values.\n        if no_default_loads is set, we will only\n        reflect the network configuration back to the conf tuples\n        list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def context_menu_requested(self, event):\n        \"\"\"\"\"\"\n        if self.fig:\n            pos = QPoint(event.x(), event.y())\n            context_menu = QMenu(self)\n            context_menu.addAction(ima.icon('editcopy'), \"Copy Image\",\n                                   self.copy_figure,\n                                   QKeySequence(\n                                       get_shortcut('plots', 'copy')))\n            context_menu.popup(self.mapToGlobal(pos))", "output": "Popup context menu.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _compute_edge_transforms(node_states,\n                             depth,\n                             num_transforms,\n                             name=\"transform\"):\n  \"\"\"\n  \"\"\"\n  node_shapes = common_layers.shape_list(node_states)\n  x = common_layers.dense(\n      node_states,\n      depth * num_transforms,\n      use_bias=False,\n      name=name)\n\n  batch = node_shapes[0]  # B.\n  length = node_shapes[1]  # N.\n\n  # Making the fourth dimension explicit by separating the vectors of size\n  # K*T (in k) and V*T (in v) into two-dimensional matrices with shape [K, T]\n  # (in k) and [V, T] in v.\n  #\n  x = tf.reshape(x, [batch, length, num_transforms, depth])\n\n  # Flatten out the fourth dimension.\n  x = tf.reshape(x, [batch, length * num_transforms, depth])\n\n  return x", "output": "Helper function that computes transformation for keys and values.\n\n  Let B be the number of batches.\n  Let N be the number of nodes in the graph.\n  Let D be the size of the node hidden states.\n  Let K be the size of the attention keys/queries (total_key_depth).\n  Let V be the size of the attention values (total_value_depth).\n  Let T be the total number of transforms (num_transforms).\n\n  Computes the transforms for keys or values for attention.\n  * For each node N_j and edge type t, a key K_jt of size K is computed. When an\n    edge of type t goes from node N_j to any other node, K_jt is the key that is\n    in the attention process.\n  * For each node N_j and edge type t, a value V_jt of size V is computed. When\n    an edge of type t goes from node N_j to node N_i, Attention(Q_i, K_jt)\n    produces a weight w_ijt. The message sent along this edge is w_ijt * V_jt.\n\n  Args:\n    node_states: A tensor of shape [B, L, D]\n    depth: An integer (K or V)\n    num_transforms: An integer (T),\n    name: A name for the function\n\n  Returns:\n    x: A The attention keys or values for each node and edge type\n      (shape [B, N*T, K or V])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reverse_op(name, doc=\"binary operator\"):\n    \"\"\" \n    \"\"\"\n    def _(self, other):\n        jother = _create_column_from_literal(other)\n        jc = getattr(jother, name)(self._jc)\n        return Column(jc)\n    _.__doc__ = doc\n    return _", "output": "Create a method for binary operator (this object is on right side)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample_from_discretized_mix_logistic(pred, seed=None):\n  \"\"\"\n  \"\"\"\n\n  logits, locs, log_scales, coeffs = split_to_discretized_mix_logistic_params(\n      pred)\n\n  # Sample mixture indicator given logits using the gumbel max trick.\n  num_mixtures = shape_list(logits)[-1]\n  gumbel_noise = -tf.log(-tf.log(\n      tf.random_uniform(\n          tf.shape(logits), minval=1e-5, maxval=1. - 1e-5, seed=seed)))\n  sel = tf.one_hot(\n      tf.argmax(logits + gumbel_noise, -1),\n      depth=num_mixtures,\n      dtype=tf.float32)\n\n  # Select mixture component's parameters.\n  sel = tf.expand_dims(sel, -1)\n  locs = tf.reduce_sum(locs * sel, 3)\n  log_scales = tf.reduce_sum(log_scales * sel, 3)\n  coeffs = tf.reduce_sum(coeffs * sel, 3)\n\n  # Sample from 3-D logistic & clip to interval. Note we don't round to the\n  # nearest 8-bit value when sampling.\n  uniform_noise = tf.random_uniform(\n      tf.shape(locs), minval=1e-5, maxval=1. - 1e-5, seed=seed)\n  logistic_noise = tf.log(uniform_noise) - tf.log1p(-uniform_noise)\n  x = locs + tf.exp(log_scales) * logistic_noise\n  x0 = x[..., 0]\n  x1 = x[..., 1] + coeffs[..., 0] * x0\n  x2 = x[..., 2] + coeffs[..., 1] * x0 + coeffs[..., 2] * x1\n  x = tf.stack([x0, x1, x2], axis=-1)\n  x = tf.clip_by_value(x, -1., 1.)\n  return x", "output": "Sampling from a discretized mixture of logistics.\n\n  Args:\n    pred: A [batch, height, width, num_mixtures*10] tensor of floats\n      comprising one unconstrained mixture probability, three means\n      (one per channel), three standard deviations (one per channel),\n      and three coefficients which linearly parameterize dependence across\n      channels.\n    seed: Random seed.\n\n  Returns:\n    A tensor of shape [batch, height, width, 3] with real intensities scaled\n    between -1 and 1.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show(commands,\n         raw_text=True,\n         **kwargs):\n    '''\n    \n    '''\n    ret = []\n    if raw_text:\n        method = 'cli_ascii'\n        key = 'msg'\n    else:\n        method = 'cli'\n        key = 'body'\n    response_list = _cli_command(commands,\n                                 method=method,\n                                 **kwargs)\n    ret = [response[key] for response in response_list if response]\n    return ret", "output": "Execute one or more show (non-configuration) commands.\n\n    commands\n        The commands to be executed.\n\n    raw_text: ``True``\n        Whether to return raw text or structured data.\n\n    transport: ``https``\n        Specifies the type of connection transport to use. Valid values for the\n        connection are ``http``, and  ``https``.\n\n    host: ``localhost``\n        The IP address or DNS host name of the connection device.\n\n    username: ``admin``\n        The username to pass to the device to authenticate the NX-API connection.\n\n    password\n        The password to pass to the device to authenticate the NX-API connection.\n\n    port\n        The TCP port of the endpoint for the NX-API connection. If this keyword is\n        not specified, the default value is automatically determined by the\n        transport type (``80`` for ``http``, or ``443`` for ``https``).\n\n    timeout: ``60``\n        Time in seconds to wait for the device to respond. Default: 60 seconds.\n\n    verify: ``True``\n        Either a boolean, in which case it controls whether we verify the NX-API\n        TLS certificate, or a string, in which case it must be a path to a CA bundle\n        to use. Defaults to ``True``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call --local nxos_api.show 'show version'\n        salt '*' nxos_api.show 'show bgp sessions' 'show processes' raw_text=False\n        salt 'regular-minion' nxos_api.show 'show interfaces' host=sw01.example.com username=test password=test", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def batch_fn(dataset, training, shapes, target_names,\n             batch_size=32, eval_batch_size=32, bucket_batch_length=32,\n             bucket_max_length=256, bucket_min_length=8,\n             bucket_length_step=1.1, buckets=None):\n  \"\"\"\"\"\"\n  del target_names\n  # If bucketing is not specified, check if target shapes are variable.\n  cur_batch_size = batch_size if training else eval_batch_size\n  if buckets is None:\n    variable_target_shapes = False\n    target_shape = shapes[1]\n    for dim in target_shape:\n      if dim is None:\n        variable_target_shapes = True\n    tf.logging.info(\"Heuristically setting bucketing to %s based on shapes \"\n                    \"of target tensors.\" % variable_target_shapes)\n    if variable_target_shapes:\n      batch_size_per_token = cur_batch_size * bucket_batch_length\n      scheme = data_reader.batching_scheme(batch_size_per_token,\n                                           bucket_max_length,\n                                           bucket_min_length,\n                                           bucket_length_step,\n                                           drop_long_sequences=training)\n      buckets = (scheme[\"boundaries\"], scheme[\"batch_sizes\"])\n\n  if buckets:\n    tf.logging.info(\"Bucketing with buckets %s.\" % str(buckets))\n    def example_length(_, target):\n      return tf.shape(target)[0]\n    boundaries, batch_sizes = buckets\n    dataset = dataset.apply(tf.data.experimental.bucket_by_sequence_length(\n        example_length, boundaries, batch_sizes))\n  else:\n    dataset = dataset.padded_batch(cur_batch_size, shapes)\n  return dataset", "output": "Batching function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def keypoint_vflip(kp, rows, cols):\n    \"\"\"\"\"\"\n    x, y, angle, scale = kp\n    c = math.cos(angle)\n    s = math.sin(angle)\n    angle = math.atan2(-s, c)\n    return [x, (rows - 1) - y, angle, scale]", "output": "Flip a keypoint vertically around the x-axis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        \"\"\"\n        \n        \"\"\"\n        connection = self.output().connect()\n        # kill any sessions other than ours and\n        # internal Redshift sessions (rdsdb)\n        query = (\"select pg_terminate_backend(process) \"\n                 \"from STV_SESSIONS \"\n                 \"where db_name=%s \"\n                 \"and user_name != 'rdsdb' \"\n                 \"and process != pg_backend_pid()\")\n        cursor = connection.cursor()\n        logger.info('Killing all open Redshift sessions for database: %s', self.database)\n        try:\n            cursor.execute(query, (self.database,))\n            cursor.close()\n            connection.commit()\n        except psycopg2.DatabaseError as e:\n            if e.message and 'EOF' in e.message:\n                # sometimes this operation kills the current session.\n                # rebuild the connection. Need to pause for 30-60 seconds\n                # before Redshift will allow us back in.\n                connection.close()\n                logger.info('Pausing %s seconds for Redshift to reset connection', self.connection_reset_wait_seconds)\n                time.sleep(self.connection_reset_wait_seconds)\n                logger.info('Reconnecting to Redshift')\n                connection = self.output().connect()\n            else:\n                raise\n\n        try:\n            self.output().touch(connection)\n            connection.commit()\n        finally:\n            connection.close()\n\n        logger.info('Done killing all open Redshift sessions for database: %s', self.database)", "output": "Kill any open Redshift sessions for the given database.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_django_admin(bin_env):\n    '''\n    \n    '''\n    if not bin_env:\n        if salt.utils.path.which('django-admin.py'):\n            return 'django-admin.py'\n        elif salt.utils.path.which('django-admin'):\n            return 'django-admin'\n        else:\n            raise salt.exceptions.CommandExecutionError(\n                    \"django-admin or django-admin.py not found on PATH\")\n\n    # try to get django-admin.py bin from env\n    if os.path.exists(os.path.join(bin_env, 'bin', 'django-admin.py')):\n        return os.path.join(bin_env, 'bin', 'django-admin.py')\n    return bin_env", "output": "Return the django admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xmoe_tr_dense_2k():\n  \"\"\"\n  \"\"\"\n  hparams = mtf_transformer2.mtf_bitransformer_base()\n  hparams.encoder_layers = [\"self_att\", \"drd\"] * 4\n  hparams.decoder_layers = [\"self_att\", \"enc_att\", \"drd\"] * 4\n  hparams.batch_size = 64\n  hparams.shared_embedding_and_softmax_weights = True\n  hparams.mesh_shape = \"batch:8\"\n  return hparams", "output": "Series of architectural experiments on Translation.\n\n  # run on 8-core setup\n\n  119M params, einsum=0.95e13\n\n  Returns:\n    a hparams", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explore(self, title=None):\n        \"\"\"\n        \n        \"\"\"\n\n        import sys\n        import os\n\n        if sys.platform != 'darwin' and sys.platform != 'linux2' and sys.platform != 'linux':\n            raise NotImplementedError('Visualization is currently supported only on macOS and Linux.')\n\n        path_to_client = _get_client_app_path()\n\n        if title is None:\n            title = \"\"\n        self.__proxy__.explore(path_to_client, title)", "output": "Explore the SFrame in an interactive GUI. Opens a new app window.\n\n        Parameters\n        ----------\n        title : str\n            The plot title to show for the resulting visualization. Defaults to None.\n            If the title is None, a default title will be provided.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        Suppose 'sf' is an SFrame, we can view it using:\n\n        >>> sf.explore()\n\n        To override the default plot title and axis labels:\n\n        >>> sf.explore(title=\"My Plot Title\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_datetime64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    \n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, 'base', None) == _NS_DTYPE", "output": "Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_sparse(arr, kind='block', fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    \n    \"\"\"\n\n    arr = _sanitize_values(arr)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value", "output": "Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fixed_crop(src, x0, y0, w, h, size=None, interpolation=cv2.INTER_CUBIC):\n    \"\"\"\"\"\"\n    out = mx.nd.crop(src, begin=(y0, x0, 0), end=(y0+h, x0+w, int(src.shape[2])))\n    if size is not None and (w, h) != size:\n        out = resize(out, size, interpolation=interpolation)\n    return out", "output": "Crop src at fixed location, and (optionally) resize it to size", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def debug_print(*message):\r\n    \"\"\"\"\"\"\r\n    warnings.warn(\"debug_print is deprecated; use the logging module instead.\")\r\n    if get_debug_level():\r\n        ss = STDOUT\r\n        if PY3:\r\n            # This is needed after restarting and using debug_print\r\n            for m in message:\r\n                ss.buffer.write(str(m).encode('utf-8'))\r\n            print('', file=ss)\r\n        else:\r\n            print(*message, file=ss)", "output": "Output debug messages to stdout", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def denyMethodWithConditions(self, verb, resource, conditions):\n        \"\"\"\"\"\"\n        self._addMethod(\"Deny\", verb, resource, conditions)", "output": "Adds an API Gateway method (Http verb + Resource path) to the list of denied\n        methods and includes a condition for the policy statement. More on AWS policy\n        conditions here: http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#Condition", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_bokehjs(bokehjs_action, develop=False):\n    ''' \n\n    '''\n    print()\n    if develop:\n        print(\"Installed Bokeh for DEVELOPMENT:\")\n    else:\n        print(\"Installed Bokeh:\")\n    if bokehjs_action in ['built', 'installed']:\n        print(\"  - using %s built BokehJS from bokehjs/build\\n\" % (bright(yellow(\"NEWLY\")) if bokehjs_action=='built' else bright(yellow(\"PREVIOUSLY\"))))\n    else:\n        print(\"  - using %s BokehJS, located in 'bokeh.server.static'\\n\" % bright(yellow(\"PACKAGED\")))\n    print()", "output": "Print a useful report after setuptools output describing where and how\n    BokehJS is installed.\n\n    Args:\n        bokehjs_action (str) : one of 'built', 'installed', or 'packaged'\n            how (or if) BokehJS was installed into the python source tree\n\n        develop (bool, optional) :\n            whether the command was for \"develop\" mode (default: False)\n\n    Returns:\n        None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clone(zone, source, snapshot=None):\n    '''\n    \n    '''\n    ret = {'status': True}\n\n    ## install zone\n    res = __salt__['cmd.run_all']('zoneadm -z {zone} clone {snapshot}{source}'.format(\n        zone=zone,\n        source=source,\n        snapshot='-s {0} '.format(snapshot) if snapshot else '',\n    ))\n    ret['status'] = res['retcode'] == 0\n    ret['message'] = res['stdout'] if ret['status'] else res['stderr']\n    ret['message'] = ret['message'].replace('zoneadm: ', '')\n    if ret['message'] == '':\n        del ret['message']\n\n    return ret", "output": "Install a zone by copying an existing installed zone.\n\n    zone : string\n        name of the zone\n    source : string\n        zone to clone from\n    snapshot : string\n        optional name of snapshot to use as source\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' zoneadm.clone clementine dolores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rounding_sequence_accuracy(predictions,\n                               labels,\n                               weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  outputs = tf.squeeze(tf.to_int32(predictions), axis=-1)\n  weights = weights_fn(labels)\n  labels = tf.to_int32(labels)\n  not_correct = tf.to_float(tf.not_equal(outputs, labels)) * weights\n  axis = list(range(1, len(outputs.get_shape())))\n  correct_seq = 1.0 - tf.minimum(1.0, tf.reduce_sum(not_correct, axis=axis))\n  return correct_seq, tf.constant(1.0)", "output": "Sequence accuracy for L1/L2 losses: round down the predictions to ints.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_args_for_reloading():\n    \"\"\"\"\"\"\n    rv = [sys.executable]\n    main_module = sys.modules[\"__main__\"]\n    mod_spec = getattr(main_module, \"__spec__\", None)\n    if mod_spec:\n        # Parent exe was launched as a module rather than a script\n        rv.extend([\"-m\", mod_spec.name])\n        if len(sys.argv) > 1:\n            rv.extend(sys.argv[1:])\n    else:\n        rv.extend(sys.argv)\n    return rv", "output": "Returns the executable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_network_interface(name, resource_group):\n    '''\n    \n    '''\n    public_ips = []\n    private_ips = []\n    netapi_versions = get_api_versions(kwargs={\n        'resource_provider': 'Microsoft.Network',\n        'resource_type': 'publicIPAddresses'\n        }\n    )\n    netapi_version = netapi_versions[0]\n    netconn = get_conn(client_type='network')\n    netiface_query = netconn.network_interfaces.get(\n        resource_group_name=resource_group,\n        network_interface_name=name\n    )\n\n    netiface = netiface_query.as_dict()\n    for index, ip_config in enumerate(netiface['ip_configurations']):\n        if ip_config.get('private_ip_address') is not None:\n            private_ips.append(ip_config['private_ip_address'])\n        if 'id' in ip_config.get('public_ip_address', {}):\n            public_ip_name = get_resource_by_id(\n                ip_config['public_ip_address']['id'],\n                netapi_version,\n                'name'\n            )\n            public_ip = _get_public_ip(public_ip_name, resource_group)\n            public_ips.append(public_ip['ip_address'])\n            netiface['ip_configurations'][index]['public_ip_address'].update(public_ip)\n\n    return netiface, public_ips, private_ips", "output": "Get a network interface.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ID(self, ID):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlGetID(self._o, ID)\n        if ret is None:raise treeError('xmlGetID() failed')\n        __tmp = xmlAttr(_obj=ret)\n        return __tmp", "output": "Search the attribute declaring the given ID", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_full_slice(obj, l):\n    \"\"\"\n    \n    \"\"\"\n    return (isinstance(obj, slice) and obj.start == 0 and obj.stop == l and\n            obj.step is None)", "output": "We have a full length slice.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(profile=\"splunk\"):\n    '''\n    \n    '''\n    client = _get_splunk(profile)\n    searches = [x['name'] for x in client.saved_searches]\n    return searches", "output": "List splunk searches (names only)\n\n    CLI Example:\n        splunk_search.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_toolbar(self, title, object_name, iconsize=24):\r\n        \"\"\"\"\"\"\r\n        toolbar = self.addToolBar(title)\r\n        toolbar.setObjectName(object_name)\r\n        toolbar.setIconSize(QSize(iconsize, iconsize))\r\n        self.toolbarslist.append(toolbar)\r\n        return toolbar", "output": "Create and return toolbar with *title* and *object_name*", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resource_group_get(name, **kwargs):\n    '''\n    \n\n    '''\n    result = {}\n    resconn = __utils__['azurearm.get_client']('resource', **kwargs)\n    try:\n        group = resconn.resource_groups.get(name)\n        result = group.as_dict()\n\n    except CloudError as exc:\n        __utils__['azurearm.log_cloud_error']('resource', str(exc), **kwargs)\n        result = {'error': str(exc)}\n\n    return result", "output": ".. versionadded:: 2019.2.0\n\n    Get a dictionary representing a resource group's properties.\n\n    :param name: The resource group name to get.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call azurearm_resource.resource_group_get testgroup", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def handle(self, message, connection):\n        ''' \n\n        '''\n\n        handler = self._handlers.get((message.msgtype, message.revision))\n\n        if handler is None:\n            handler = self._handlers.get(message.msgtype)\n\n        if handler is None:\n            raise ProtocolError(\"%s not expected on server\" % message)\n\n        try:\n            work = yield handler(message, connection)\n        except Exception as e:\n            log.error(\"error handling message %r: %r\", message, e)\n            log.debug(\"  message header %r content %r\", message.header, message.content, exc_info=1)\n            work = connection.error(message, repr(e))\n        raise gen.Return(work)", "output": "Delegate a received message to the appropriate handler.\n\n        Args:\n            message (Message) :\n                The message that was receive that needs to be handled\n\n            connection (ServerConnection) :\n                The connection that received this message\n\n        Raises:\n            ProtocolError", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rfc_cv(n_estimators, min_samples_split, max_features, data, targets):\n    \"\"\"\n    \"\"\"\n    estimator = RFC(\n        n_estimators=n_estimators,\n        min_samples_split=min_samples_split,\n        max_features=max_features,\n        random_state=2\n    )\n    cval = cross_val_score(estimator, data, targets,\n                           scoring='neg_log_loss', cv=4)\n    return cval.mean()", "output": "Random Forest cross validation.\n\n    This function will instantiate a random forest classifier with parameters\n    n_estimators, min_samples_split, and max_features. Combined with data and\n    targets this will in turn be used to perform cross validation. The result\n    of cross validation is returned.\n\n    Our goal is to find combinations of n_estimators, min_samples_split, and\n    max_features that minimzes the log loss.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_internet_gateway(internet_gateway_name=None, vpc_id=None,\n                            vpc_name=None, tags=None, region=None, key=None,\n                            keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        if vpc_id or vpc_name:\n            vpc_id = check_vpc(vpc_id, vpc_name, region, key, keyid, profile)\n            if not vpc_id:\n                return {'created': False,\n                        'error': {'message': 'VPC {0} does not exist.'.format(vpc_name or vpc_id)}}\n\n        r = _create_resource('internet_gateway', name=internet_gateway_name,\n                             tags=tags, region=region, key=key, keyid=keyid,\n                             profile=profile)\n        if r.get('created') and vpc_id:\n            conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n            conn.attach_internet_gateway(r['id'], vpc_id)\n            log.info(\n                'Attached internet gateway %s to VPC %s',\n                r['id'], vpc_name or vpc_id\n            )\n        return r\n    except BotoServerError as e:\n        return {'created': False, 'error': __utils__['boto.get_error'](e)}", "output": "Create an Internet Gateway, optionally attaching it to an existing VPC.\n\n    Returns the internet gateway id if the internet gateway was created and\n    returns False if the internet gateways was not created.\n\n    .. versionadded:: 2015.8.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_vpc.create_internet_gateway \\\\\n                internet_gateway_name=myigw vpc_name=myvpc", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mask_sigint():\n    \"\"\"\n    \n    \"\"\"\n    if is_main_thread():\n        sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)\n        yield True\n        signal.signal(signal.SIGINT, sigint_handler)\n    else:\n        yield False", "output": "Returns:\n        If called in main thread, returns a context where ``SIGINT`` is ignored, and yield True.\n        Otherwise yield False.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_sid_string(principal):\n    '''\n    \n    '''\n    # If None is passed, use the Universal Well-known SID \"Null SID\"\n    if principal is None:\n        principal = 'NULL SID'\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except TypeError:\n        # Not a PySID object\n        principal = get_sid(principal)\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except pywintypes.error:\n        log.exception('Invalid principal %s', principal)\n        raise CommandExecutionError('Invalid principal {0}'.format(principal))", "output": "Converts a PySID object to a string SID.\n\n    Args:\n\n        principal(str):\n            The principal to lookup the sid. Must be a PySID object.\n\n    Returns:\n        str: A string sid\n\n    Usage:\n\n    .. code-block:: python\n\n        # Get a PySID object\n        py_sid = salt.utils.win_dacl.get_sid('jsnuffy')\n\n        # Get the string version of the SID\n        salt.utils.win_dacl.get_sid_string(py_sid)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def absent(name):\n    '''\n    \n    '''\n\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n\n    try:\n        index = __salt__['elasticsearch.index_get'](index=name)\n        if index and name in index:\n            if __opts__['test']:\n                ret['comment'] = 'Index {0} will be removed'.format(name)\n                ret['changes']['old'] = index[name]\n                ret['result'] = None\n            else:\n                ret['result'] = __salt__['elasticsearch.index_delete'](index=name)\n                if ret['result']:\n                    ret['comment'] = 'Successfully removed index {0}'.format(name)\n                    ret['changes']['old'] = index[name]\n                else:\n                    ret['comment'] = 'Failed to remove index {0} for unknown reasons'.format(name)\n        else:\n            ret['comment'] = 'Index {0} is already absent'.format(name)\n    except Exception as err:\n        ret['result'] = False\n        ret['comment'] = six.text_type(err)\n\n    return ret", "output": "Ensure that the named index is absent.\n\n    name\n        Name of the index to remove", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init(complete_options=False, match_incomplete=None):\n    \"\"\"\n    \"\"\"\n    global _initialized\n    if not _initialized:\n        _patch()\n        completion_configuration.complete_options = complete_options\n        if match_incomplete is not None:\n            completion_configuration.match_incomplete = match_incomplete\n        _initialized = True", "output": "Initialize the enhanced click completion\n\n    Parameters\n    ----------\n    complete_options : bool\n        always complete the options, even when the user hasn't typed a first dash (Default value = False)\n    match_incomplete : func\n        a function with two parameters choice and incomplete. Must return True\n        if incomplete is a correct match for choice, False otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def spacetodepth(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs, {'blocksize':'block_size'})\n\n    return \"space_to_depth\", new_attrs, inputs", "output": "Rearranges blocks of spatial data into depth.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def with_rank_at_most(self, rank):\n        \"\"\"\n        \"\"\"\n        if self.ndims is not None and self.ndims > rank:\n            raise ValueError(\"Shape %s must have rank at most %d\" % (self, rank))\n        else:\n            return self", "output": "Returns a shape based on `self` with at most the given rank.\n\n        Args:\n          rank: An integer.\n\n        Returns:\n          A shape that is at least as specific as `self` with at most the given\n          rank.\n\n        Raises:\n          ValueError: If `self` does not represent a shape with at most the given\n            `rank`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def f_comb(self, pos, sample):\n        \"\"\"\n        \"\"\"\n        ret = 0\n        for i in range(self.effective_model_num):\n            model = self.effective_model[i]\n            y = self.predict_y(model, pos)\n            ret += sample[i] * y\n        return ret", "output": "return the value of the f_comb when epoch = pos\n\n        Parameters\n        ----------\n        pos: int\n            the epoch number of the position you want to predict\n        sample: list\n            sample is a (1 * NUM_OF_FUNCTIONS) matrix, representing{w1, w2, ... wk}\n\n        Returns\n        -------\n        int\n            The expected matrix at pos with all the active function's prediction", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def iter_find_files(directory, patterns, ignored=None):\n    \"\"\"\n\n    \"\"\"\n    if isinstance(patterns, basestring):\n        patterns = [patterns]\n    pats_re = re.compile('|'.join([fnmatch.translate(p) for p in patterns]))\n\n    if not ignored:\n        ignored = []\n    elif isinstance(ignored, basestring):\n        ignored = [ignored]\n    ign_re = re.compile('|'.join([fnmatch.translate(p) for p in ignored]))\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if pats_re.match(basename):\n                if ignored and ign_re.match(basename):\n                    continue\n                filename = os.path.join(root, basename)\n                yield filename\n    return", "output": "Returns a generator that yields file paths under a *directory*,\n    matching *patterns* using `glob`_ syntax (e.g., ``*.txt``). Also\n    supports *ignored* patterns.\n\n    Args:\n        directory (str): Path that serves as the root of the\n            search. Yielded paths will include this as a prefix.\n        patterns (str or list): A single pattern or list of\n            glob-formatted patterns to find under *directory*.\n        ignored (str or list): A single pattern or list of\n            glob-formatted patterns to ignore.\n\n    For example, finding Python files in the directory of this module:\n\n    >>> files = set(iter_find_files(os.path.dirname(__file__), '*.py'))\n\n    Or, Python files while ignoring emacs lockfiles:\n\n    >>> filenames = iter_find_files('.', '*.py', ignored='.#*')\n\n    .. _glob: https://en.wikipedia.org/wiki/Glob_%28programming%29", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_add_months(dt, months):\n    \"\"\"\n    \n    \"\"\"\n    dt = datetime.datetime.strptime(\n        dt, \"%Y-%m-%d\") + relativedelta(months=months)\n    return(dt)", "output": "#\u8fd4\u56dedt\u9694months\u4e2a\u6708\u540e\u7684\u65e5\u671f\uff0cmonths\u76f8\u5f53\u4e8e\u6b65\u957f", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vanilla_lstm(num_hidden, indata, prev_state, param, seqidx, layeridx, is_batchnorm=False, gamma=None, beta=None, name=None):\n    \"\"\"\"\"\"\n    i2h = mx.sym.FullyConnected(data=indata,\n                                weight=param.i2h_weight,\n                                bias=param.i2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_i2h\" % (seqidx, layeridx))\n    if is_batchnorm:\n        if name is not None:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta, name=\"%s_batchnorm\" % name)\n        else:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta)\n    h2h = mx.sym.FullyConnected(data=prev_state.h,\n                                weight=param.h2h_weight,\n                                bias=param.h2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_h2h\" % (seqidx, layeridx))\n    gates = i2h + h2h\n    slice_gates = mx.sym.SliceChannel(gates, num_outputs=4,\n                                      name=\"t%d_l%d_slice\" % (seqidx, layeridx))\n    in_gate = mx.sym.Activation(slice_gates[0], act_type=\"sigmoid\")\n    in_transform = mx.sym.Activation(slice_gates[1], act_type=\"tanh\")\n    forget_gate = mx.sym.Activation(slice_gates[2], act_type=\"sigmoid\")\n    out_gate = mx.sym.Activation(slice_gates[3], act_type=\"sigmoid\")\n    next_c = (forget_gate * prev_state.c) + (in_gate * in_transform)\n    next_h = out_gate * mx.sym.Activation(next_c, act_type=\"tanh\")\n    return LSTMState(c=next_c, h=next_h)", "output": "LSTM Cell symbol", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_website(Bucket,\n           region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_bucket_website(Bucket=Bucket)\n        return {'deleted': True, 'name': Bucket}\n    except ClientError as e:\n        return {'deleted': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove the website configuration from the given bucket\n\n    Returns {deleted: true} if website configuration was deleted and returns\n    {deleted: False} if website configuration was not deleted.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_s3_bucket.delete_website my_bucket", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _worker(reader: DatasetReader,\n            input_queue: Queue,\n            output_queue: Queue,\n            index: int) -> None:\n    \"\"\"\n    \n    \"\"\"\n    # Keep going until you get a file_path that's None.\n    while True:\n        file_path = input_queue.get()\n        if file_path is None:\n            # Put my index on the queue to signify that I'm finished\n            output_queue.put(index)\n            break\n\n        logger.info(f\"reading instances from {file_path}\")\n        for instance in reader.read(file_path):\n            output_queue.put(instance)", "output": "A worker that pulls filenames off the input queue, uses the dataset reader\n    to read them, and places the generated instances on the output queue.\n    When there are no filenames left on the input queue, it puts its ``index``\n    on the output queue and doesn't do anything else.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_valid_relpath(\n        relpath,\n        maxdepth=None):\n    '''\n    \n    '''\n    # Check relpath surrounded by slashes, so that `..` can be caught as\n    # a path component at the start, end, and in the middle of the path.\n    sep, pardir = posixpath.sep, posixpath.pardir\n    if sep + pardir + sep in sep + relpath + sep:\n        return False\n\n    # Check that the relative path's depth does not exceed maxdepth\n    if maxdepth is not None:\n        path_depth = relpath.strip(sep).count(sep)\n        if path_depth > maxdepth:\n            return False\n\n    return True", "output": "Performs basic sanity checks on a relative path.\n\n    Requires POSIX-compatible paths (i.e. the kind obtained through\n    cp.list_master or other such calls).\n\n    Ensures that the path does not contain directory transversal, and\n    that it does not exceed a stated maximum depth (if specified).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _byte_encode(self, token):\n    \"\"\"\"\"\"\n    # Vocab ids for all bytes follow ids for the subwords\n    offset = len(self._subwords)\n    if token == \"_\":\n      return [len(self._subwords) + ord(\" \")]\n    return [i + offset for i in list(bytearray(tf.compat.as_bytes(token)))]", "output": "Encode a single token byte-wise into integer ids.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(tmp_dir, dataset_split):\n  \"\"\"\n  \"\"\"\n  if dataset_split == problem.DatasetSplit.TRAIN:\n    file_name = _TRAINING_SET\n  else:\n    file_name = _DEV_SET\n  squad_file = generator_utils.maybe_download(tmp_dir,\n                                              file_name,\n                                              os.path.join(_URL, file_name))\n  with tf.gfile.GFile(squad_file, mode=\"r\") as fp:\n    squad = json.load(fp)\n\n  version = squad[\"version\"]\n  for article in squad[\"data\"]:\n    if \"title\" in article:\n      title = article[\"title\"].strip()\n    else:\n      title = \"no title\"\n    for paragraph in article[\"paragraphs\"]:\n      context = paragraph[\"context\"].strip()\n      for qa in paragraph[\"qas\"]:\n        question = qa[\"question\"].strip()\n        id_ = qa[\"id\"]\n        answer_starts = [answer[\"answer_start\"] for answer in qa[\"answers\"]]\n        answers = [answer[\"text\"].strip() for answer in qa[\"answers\"]]\n\n        # Features currently used are \"context\", \"question\", and \"answers\".\n        # Others are extracted here for the ease of future expansions.\n        example = {\n            \"version\": version,\n            \"title\": title,\n            \"context\": context,\n            \"question\": question,\n            \"id\": id_,\n            \"answer_starts\": answer_starts,\n            \"answers\": answers,\n            \"num_answers\": len(answers),\n            \"is_supervised\": True,\n        }\n        yield example", "output": "Generate squad examples.\n\n  Args:\n    tmp_dir: a string\n    dataset_split: problem.DatasetSplit.TRAIN or problem.DatasetSplit.EVAL\n  Yields:\n    dictionaries representing examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def CopyFrom(self, other_msg):\n    \"\"\"\n    \"\"\"\n    if self is other_msg:\n      return\n    self.Clear()\n    self.MergeFrom(other_msg)", "output": "Copies the content of the specified message into the current message.\n\n    The method clears the current message and then merges the specified\n    message using MergeFrom.\n\n    Args:\n      other_msg: Message to copy into the current one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_xsrf_cookie(self) -> None:\n        \"\"\"\n        \"\"\"\n        # Prior to release 1.1.1, this check was ignored if the HTTP header\n        # ``X-Requested-With: XMLHTTPRequest`` was present.  This exception\n        # has been shown to be insecure and has been removed.  For more\n        # information please see\n        # http://www.djangoproject.com/weblog/2011/feb/08/security/\n        # http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n        token = (\n            self.get_argument(\"_xsrf\", None)\n            or self.request.headers.get(\"X-Xsrftoken\")\n            or self.request.headers.get(\"X-Csrftoken\")\n        )\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n        _, token, _ = self._decode_xsrf_token(token)\n        _, expected_token, _ = self._get_raw_xsrf_token()\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument has invalid format\")\n        if not hmac.compare_digest(utf8(token), utf8(expected_token)):\n            raise HTTPError(403, \"XSRF cookie does not match POST argument\")", "output": "Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.\n\n        To prevent cross-site request forgery, we set an ``_xsrf``\n        cookie and include the same value as a non-cookie\n        field with all ``POST`` requests. If the two do not match, we\n        reject the form submission as a potential forgery.\n\n        The ``_xsrf`` value may be set as either a form field named ``_xsrf``\n        or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``\n        (the latter is accepted for compatibility with Django).\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n\n        .. versionchanged:: 3.2.2\n           Added support for cookie version 2.  Both versions 1 and 2 are\n           supported.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_result(self, result):\n        \"\"\"\"\"\"\n        self._result = result\n        self._result_set = True\n        self._invoke_callbacks(self)", "output": "Set the Future's result.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, label_images):\n    \"\"\"\"\"\"\n\n    for label, image_paths in label_images.items():\n      for image_path in image_paths:\n        yield {\n            \"image\": image_path,\n            \"label\": label,\n        }", "output": "Generate example for each image in the dict.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cache_key(self, name, filename=None):\n        \"\"\"\"\"\"\n        hash = sha1(name.encode('utf-8'))\n        if filename is not None:\n            filename = '|' + filename\n            if isinstance(filename, text_type):\n                filename = filename.encode('utf-8')\n            hash.update(filename)\n        return hash.hexdigest()", "output": "Returns the unique hash key for this template name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernel_status(self, user_name, kernel_slug, **kwargs):  # noqa: E501\n        \"\"\"\n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n        else:\n            (data) = self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n            return data", "output": "Get the status of the latest kernel version  # noqa: E501\n\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.kernel_status(user_name, kernel_slug, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str user_name: Kernel owner (required)\n        :param str kernel_slug: Kernel name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explode(col):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    jc = sc._jvm.functions.explode(_to_java_column(col))\n    return Column(jc)", "output": "Returns a new row for each element in the given array or map.\n    Uses the default column name `col` for elements in the array and\n    `key` and `value` for elements in the map unless specified otherwise.\n\n    >>> from pyspark.sql import Row\n    >>> eDF = spark.createDataFrame([Row(a=1, intlist=[1,2,3], mapfield={\"a\": \"b\"})])\n    >>> eDF.select(explode(eDF.intlist).alias(\"anInt\")).collect()\n    [Row(anInt=1), Row(anInt=2), Row(anInt=3)]\n\n    >>> eDF.select(explode(eDF.mapfield).alias(\"key\", \"value\")).show()\n    +---+-----+\n    |key|value|\n    +---+-----+\n    |  a|    b|\n    +---+-----+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_exists(username, domain='', database=None, **kwargs):\n    '''\n    \n    '''\n    if domain:\n        username = '{0}\\\\{1}'.format(domain, username)\n    if database:\n        kwargs['database'] = database\n    # We should get one, and only one row\n    return len(tsql_query(query=\"SELECT name FROM sysusers WHERE name='{0}'\".format(username), **kwargs)) == 1", "output": "Find if an user exists in a specific database on the MS SQL server.\n    domain, if provided, will be prepended to username\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt minion mssql.user_exists 'USERNAME' [database='DBNAME']", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch2(self, path, api='public', method='GET', params={}, headers=None, body=None):\n        \"\"\"\"\"\"\n        if self.enableRateLimit:\n            self.throttle()\n        self.lastRestRequestTimestamp = self.milliseconds()\n        request = self.sign(path, api, method, params, headers, body)\n        return self.fetch(request['url'], request['method'], request['headers'], request['body'])", "output": "A better wrapper over request for deferred signing", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def project_delete(project_id=None, name=None, profile=None, **connection_args):\n    '''\n    \n    '''\n    auth(profile, **connection_args)\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        return tenant_delete(tenant_id=project_id, name=name, profile=None, **connection_args)\n    else:\n        return False", "output": "Delete a project (keystone project-delete).\n    Overrides keystone tenant-delete form api V2. For keystone api V3 only.\n\n    .. versionadded:: 2016.11.0\n\n    project_id\n        The project id.\n\n    name\n        The project name.\n\n    profile\n        Configuration profile - if configuration for multiple openstack accounts required.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.project_delete c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete project_id=c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete name=demo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def property_data_zpool():\n    '''\n    \n\n    '''\n    # NOTE: man page also mentions a few short forms\n    property_data = _property_parse_cmd(_zpool_cmd(), {\n        'allocated': 'alloc',\n        'autoexpand': 'expand',\n        'autoreplace': 'replace',\n        'listsnapshots': 'listsnaps',\n        'fragmentation': 'frag',\n    })\n\n    # NOTE: zpool status/iostat has a few extra fields\n    zpool_size_extra = [\n        'capacity-alloc', 'capacity-free',\n        'operations-read', 'operations-write',\n        'bandwith-read', 'bandwith-write',\n        'read', 'write',\n    ]\n    zpool_numeric_extra = [\n        'cksum', 'cap',\n    ]\n\n    for prop in zpool_size_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'size',\n            'values': '<size>',\n        }\n\n    for prop in zpool_numeric_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'numeric',\n            'values': '<count>',\n        }\n\n    return property_data", "output": "Return a dict of zpool properties\n\n    .. note::\n\n        Each property will have an entry with the following info:\n            - edit : boolean - is this property editable after pool creation\n            - type : str - either bool, bool_alt, size, numeric, or string\n            - values : str - list of possible values\n\n    .. warning::\n\n        This data is probed from the output of 'zpool get' with some suplimental\n        data that is hardcoded. There is no better way to get this informatio aside\n        from reading the code.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parameter_objects(parameter_objects_from_pillars, parameter_object_overrides):\n    '''\n    \n    '''\n    from_pillars = copy.deepcopy(__salt__['pillar.get'](parameter_objects_from_pillars))\n    from_pillars.update(parameter_object_overrides)\n    parameter_objects = _standardize(_dict_to_list_ids(from_pillars))\n    for parameter_object in parameter_objects:\n        parameter_object['attributes'] = _properties_from_dict(parameter_object['attributes'])\n    return parameter_objects", "output": "Return a list of parameter objects that configure the pipeline\n\n    parameter_objects_from_pillars\n        The pillar key to use for lookup\n\n    parameter_object_overrides\n        Parameter objects to use. Will override objects read from pillars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_permissions(vhost, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'list_permissions', '-q', '-p', vhost],\n        reset_system_locale=False,\n        runas=runas,\n        python_shell=False)\n\n    return _output_to_dict(res)", "output": "Lists permissions for vhost via rabbitmqctl list_permissions\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.list_permissions /myvhost", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_indices(self, names):\n        \"\"\"\n        \n        \"\"\"\n\n        def get_converter(s):\n            # possibly convert to the actual key types\n            # in the indices, could be a Timestamp or a np.datetime64\n            if isinstance(s, (Timestamp, datetime.datetime)):\n                return lambda key: Timestamp(key)\n            elif isinstance(s, np.datetime64):\n                return lambda key: Timestamp(key).asm8\n            else:\n                return lambda key: key\n\n        if len(names) == 0:\n            return []\n\n        if len(self.indices) > 0:\n            index_sample = next(iter(self.indices))\n        else:\n            index_sample = None     # Dummy sample\n\n        name_sample = names[0]\n        if isinstance(index_sample, tuple):\n            if not isinstance(name_sample, tuple):\n                msg = (\"must supply a tuple to get_group with multiple\"\n                       \" grouping keys\")\n                raise ValueError(msg)\n            if not len(name_sample) == len(index_sample):\n                try:\n                    # If the original grouper was a tuple\n                    return [self.indices[name] for name in names]\n                except KeyError:\n                    # turns out it wasn't a tuple\n                    msg = (\"must supply a same-length tuple to get_group\"\n                           \" with multiple grouping keys\")\n                    raise ValueError(msg)\n\n            converters = [get_converter(s) for s in index_sample]\n            names = (tuple(f(n) for f, n in zip(converters, name))\n                     for name in names)\n\n        else:\n            converter = get_converter(index_sample)\n            names = (converter(name) for name in names)\n\n        return [self.indices.get(name, []) for name in names]", "output": "Safe get multiple indices, translate keys for\n        datelike to underlying repr.", "category": "Python"}, {"instruction": "When did Virgin Australia start operating?", "input": "Virgin Australia, the trading name of Virgin Australia Airlines Pty Ltd, is an Australian-based airline. It is the largest airline by fleet size to use the Virgin brand. It commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.[3] It suddenly found itself as a major airline in Australia's domestic market after the collapse of Ansett Australia in September 2001. The airline has since grown to directly serve 32 cities in Australia, from hubs in Brisbane, Melbourne and Sydney.[4]", "output": "Virgin Australia commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.", "category": "IT"}, {"instruction": "Can you tell me what of these are capital cities of their respective countries? Manchester, Madrid, Paris, Milan, London and Munich", "input": "", "output": "A capital city is the city where the government of the country resides. From the previous lists only Madrid, Paris and London are capital cities. Manchester, Milan and Munich are large and important cities in Europe but they are not their country's capital. Some cities like Milan might be consider their country's economic capital as they are the main economic hub of Italy but they are still not their capital city which is Rome.", "category": "IT"}, {"instruction": "Given these paragraphs about Large language models, how many words did the BookCorpus have when it was used to train the first model in OpenAI's GPT series trained in 2018?", "input": "A large language model (LLM) is a language model consisting of a neural network with many parameters (typically billions of weights or more), trained on large quantities of unlabelled text using self-supervised learning. LLMs emerged around 2018 and perform well at a wide variety of tasks. This has shifted the focus of natural language processing research away from the previous paradigm of training specialized supervised models for specific tasks.\n\nProperties\nThough the term large language model has no formal definition, it often refers to deep learning models having a parameter count on the order of billions or more. LLMs are general purpose models which excel at a wide range of tasks, as opposed to being trained for one specific task (such as sentiment analysis, named entity recognition, or mathematical reasoning). The skill with which they accomplish tasks, and the range of tasks at which they are capable, seems to be a function of the amount of resources (data, parameter-size, computing power) devoted to them, in a way that is not dependent on additional breakthroughs in design.\n\nThough trained on simple tasks along the lines of predicting the next word in a sentence, neural language models with sufficient training and parameter counts are found to capture much of the syntax and semantics of human language. In addition, large language models demonstrate considerable general knowledge about the world, and are able to \"memorize\" a great quantity of facts during training.\n\nHallucinations\nMain article: Hallucination (artificial intelligence)\nIn artificial intelligence in general, and in large language models in particular, a \"hallucination\" is a confident response that does not seem to be justified by the model's training data.\n\nEmergent abilities\n\nOn a number of natural language benchmarks involving tasks such as question answering, models perform no better than random chance until they reach a certain scale (in this case, measured by training computation), at which point their performance sharply increases. These are examples of emergent abilities.\nUnpredictable abilities that have been observed in large language models but that were not present in simpler models (and that were not explicitly designed into the model) are usually called \"emergent abilities\". Researchers note that such abilities \"cannot be predicted simply by extrapolating the performance of smaller models\". These abilities are discovered rather than programmed-in or designed, in some cases only after the LLM has been publicly deployed. Hundreds of emergent abilities have been described. Examples include multi-step arithmetic, taking college-level exams, identifying the intended meaning of a word, chain-of-thought prompting, decoding the International Phonetic Alphabet, unscrambling a word\u2019s letters, identifying offensive content in paragraphs of Hinglish (a combination of Hindi and English), and generating a similar English equivalent of Kiswahili proverbs.\n\nArchitecture and training\nLarge language models have most commonly used the transformer architecture, which, since 2018, has become the standard deep learning technique for sequential data (previously, recurrent architectures such as the LSTM were most common). LLMs are trained in an unsupervised manner on unannotated text. A left-to-right transformer is trained to maximize the probability assigned to the next word in the training data, given the previous context. Alternatively, an LLM may use a bidirectional transformer (as in the example of BERT), which assigns a probability distribution over words given access to both preceding and following context. In addition to the task of predicting the next word or \"filling in the blanks\", LLMs may be trained on auxiliary tasks which test their understanding of the data distribution such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear side-by-side in the training corpus.\n\nThe earliest LLMs were trained on corpora having on the order of billions of words. The first model in OpenAI's GPT series was trained in 2018 on BookCorpus, consisting of 985 million words. In the same year, BERT was trained on a combination of BookCorpus and English Wikipedia, totalling 3.3 billion words. In the years since then, training corpora for LLMs have increased by orders of magnitude, reaching up to hundreds of billions or trillions of tokens.\n\nLLMs are computationally expensive to train. A 2020 study estimated the cost of training a 1.5 billion parameter model (1-2 orders of magnitude smaller than the state of the art at the time) at $1.6 million.\n\nA 2020 analysis found that neural language models' capability (as measured by training loss) increased smoothly in a power law relationship with number of parameters, quantity of training data, and computation used for training. These relationships were tested over a wide range of values (up to seven orders of magnitude) and no attenuation of the relationship was observed at the highest end of the range (including for network sizes up to trillions of parameters).\n\nApplication to downstream tasks\nBetween 2018 and 2020, the standard method for harnessing an LLM for a specific natural language processing (NLP) task was to fine tune the model with additional task-specific training. It has subsequently been found that more powerful LLMs such as GPT-3 can solve tasks without additional training via \"prompting\" techniques, in which the problem to be solved is presented to the model as a text prompt, possibly with some textual examples of similar problems and their solutions.\n\nFine-tuning\nMain article: Fine-tuning (machine learning)\nFine-tuning is the practice of modifying an existing pretrained language model by training it (in a supervised fashion) on a specific task (e.g. sentiment analysis, named entity recognition, or part-of-speech tagging). It is a form of transfer learning. It generally involves the introduction of a new set of weights connecting the final layer of the language model to the output of the downstream task. The original weights of the language model may be \"frozen\", such that only the new layer of weights connecting them to the output are learned during training. Alternatively, the original weights may receive small updates (possibly with earlier layers frozen).\n\nPrompting\nSee also: Prompt engineering and Few-shot learning (natural language processing)\nIn the prompting paradigm, popularized by GPT-3, the problem to be solved is formulated via a text prompt, which the model must solve by providing a completion (via inference). In \"few-shot prompting\", the prompt includes a small number of examples of similar (problem, solution) pairs. For example, a sentiment analysis task of labelling the sentiment of a movie review could be prompted as follows:\n\nReview: This movie stinks.\nSentiment: negative\n\nReview: This movie is fantastic!\nSentiment:\n\nIf the model outputs \"positive\", then it has correctly solved the task. In zero-shot prompting, no solve examples are provided. An example of a zero-shot prompt for the same sentiment analysis task would be \"The sentiment associated with the movie review 'This movie is fantastic!' is\".\n\nFew-shot performance of LLMs has been shown to achieve competitive results on NLP tasks, sometimes surpassing prior state-of-the-art fine-tuning approaches. Examples of such NLP tasks are translation, question answering, cloze tasks, unscrambling words, and using a novel word in a sentence. The creation and optimisation of such prompts is called prompt engineering.\n\nInstruction tuning\nInstruction tuning is a form of fine-tuning designed to facilitate more natural and accurate zero-shot prompting interactions. Given a text input, a pretrained language model will generate a completion which matches the distribution of text on which it was trained. A naive language model given the prompt \"Write an essay about the main themes of Hamlet.\" might provide a completion such as \"A late penalty of 10% per day will be applied to submissions received after March 17.\" In instruction tuning, the language model is trained on many examples of tasks formulated as natural language instructions, along with appropriate responses. Various techniques for instruction tuning have been applied in practice. OpenAI's InstructGPT protocol involves supervised fine-tuning on a dataset of human-generated (prompt, response) pairs, followed by reinforcement learning from human feedback (RLHF), in which a reward function was learned based on a dataset of human preferences. Another technique, \"self-instruct\", fine-tunes the language model on a training set of examples which are themselves generated by an LLM (bootstrapped from a small initial set of human-generated examples).\n\nhttps://en.wikipedia.org/wiki/Large_language_model", "output": "985 million words.", "category": "IT"}, {"instruction": "Why Miami is so humid?", "input": "", "output": "It is so humid because it is part of a sub-tropical region of the Americas. Composed of two seasons, a dry and a wet season. Temperatures are stable all year round.", "category": "IT"}, {"instruction": "When did Florida become a state?", "input": "", "output": "Florida became a state on March 3, 1845.", "category": "IT"}, {"instruction": "Tell me which one does not fit with the group:  Football, Volleyball, Cricket, Chess, Hockey", "input": "", "output": "All except Chess are outdoor games.", "category": "IT"}, {"instruction": "Who are some famous classical composers?", "input": "", "output": "Some well known classical composers are Mozart, Bach and Beethoven", "category": "IT"}, {"instruction": "How many planets make up the Solar System?", "input": "", "output": "There are 8 planets in the solar system. Mercury is the smallest and closest to the Sun. Venus is the second closest to the Sun. Earth, our home planet, is the third planet closest to the Sun followed by Mars. After the asteroid belt is Jupiter, the fifth and biggest planet in the  Solar System. Saturn, Uranus and Neptune are the last planets in the Solar System.\n\nOriginally the Solar System was said to have 9 planets until 2006 when the term \"planet\" was redefined to exclude \"dwarf planets\". This results in the exclusion of the ninth and farthest away planet, Pluto, reducing the count of planets in the Solar System to current count of 8.", "category": "IT"}, {"instruction": "Is wolf a domestic or a wild animal?", "input": "", "output": "Generally speaking, wolves are regarded as wild animals. While there are cases where wolves have been domesticated, they're not the same as dogs as pets.", "category": "IT"}, {"instruction": "What is the best data warehouse", "input": "", "output": "The lakehouse", "category": "IT"}, {"instruction": "Which of the following are currently considered gender neutral names: Jaime, River, Mary, Charlie, Jessie, Rene, John, Maggie, Liam", "input": "", "output": "Jaime, River, Charlie, Rene", "category": "IT"}, {"instruction": "What was the Great Depression?", "input": "", "output": "The Great Depression (1929\u20131939) was an economic shock that impacted most countries across the world. It was a period of economic depression that became evident after a major fall in stock prices in the United States. The economic contagion began around September and led to the Wall Street stock market crash of October 24 (Black Thursday). It was the longest, deepest, and most widespread depression of the 20th century.\n\nBetween 1929 and 1932, worldwide gross domestic product (GDP) fell by an estimated 15%. By comparison, worldwide GDP fell by less than 1% from 2008 to 2009 during the Great Recession. Some economies started to recover by the mid-1930s. However, in many countries, the negative effects of the Great Depression lasted until the beginning of World War II. Devastating effects were seen in both rich and poor countries with falling personal income, prices, tax revenues, and profits. International trade fell by more than 50%, unemployment in the U.S. rose to 23% and in some countries rose as high as 33%.", "category": "IT"}, {"instruction": "Tell me whether these are flowers or fruit: apples, oranges, pineapples, bananas, strawberries, daisies, sunflowers, roses, poppies", "input": "", "output": "Apples are a fruit.\nOranges are a fruit.\nPineapples are a fruit.\nBananas are a fruit.\nStrawberries are a fruit.\nDaisies are a flower.\nSunflowers are a flower.\nRoses are a flower.\nPoppies are a flower.", "category": "IT"}, {"instruction": "What is Project Mosaic?", "input": "", "output": "Mosaic is an extension to the Apache Spark framework that allows easy and fast processing of very large geospatial datasets.\nMosaic provides:\n-easy conversion between common spatial data encodings (WKT, WKB and GeoJSON);\n-constructors to easily generate new geometries from Spark native data types;\n-many of the OGC SQL standard ST_ functions implemented as Spark Expressions for transforming, aggregating and joining spatial datasets;\n-high performance through implementation of Spark code generation within the core Mosaic functions;\n-optimisations for performing point-in-polygon joins using an approach we co-developed with Ordnance Survey (blog post); and\n-the choice of a Scala, SQL and Python API.", "category": "IT"}, {"instruction": "Let's play a game of tic tac toe. I'll be X and you be O. Unplayed squares will be \"_\". I'll get first.\n\n_ _ _\n_ O _\n_ _ _", "input": "", "output": "Fun! Here's my next move:\n\n_ _ _\n_ O X\n_ _ _", "category": "IT"}, {"instruction": "What is a forest?", "input": "", "output": "A forest is a geographical region where trees predominate.", "category": "IT"}, {"instruction": "Based on the information below, when might people have started baking bread?", "input": "Agriculture encompasses crop and livestock production, aquaculture, fisheries and forestry for food and non-food products. Agriculture was the key development in the rise of sedentary human civilization, whereby farming of domesticated species created food surpluses that enabled people to live in cities. While humans started gathering grains at least 105,000 years ago, nascent farmers only began planting them around 11,500 years ago. Sheep, goats, pigs and cattle were domesticated around 10,000 years ago. Plants were independently cultivated in at least 11 regions of the world. In the twentieth century, industrial agriculture based on large-scale monocultures came to dominate agricultural output.", "output": "Bread typically requires grains as an ingredient, so it\u2019s feasible that humans could make bread when they started gathering grains 105,000 years ago. However, it may be more likely that they began baking bread around the time they began intentionally planting grains 11,500 years ago.", "category": "IT"}, {"instruction": "What is non dual philosophy?", "input": "", "output": "The word non dual refers to things or experiences that happen to us which has the  characteristics of uniformity. As an example in daily life we see or experience highs and lows, haves and have nots that result in emotions or feelings of happiness or sadness. The concept of non duality is to go deep within and understand that everything is temporary, and experience things before human thought labels each experience as good or bad.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion:  Agiarut, Agung", "input": "", "output": "Agung is percussion, Agiarut is string.", "category": "IT"}, {"instruction": "Which notable person in this list with surname Liebers was born last?", "input": "Liebers is a German language surname. Notable people with the name include:\n\nMario Liebers (born 1960), German former competitive figure skater\nMartin Liebers (born 1985), German former competitive figure skater\nMatthias Liebers (born 1958), former German footballer\nPeter Liebers (born 1988), German former figure skater.", "output": "Peter Liebers", "category": "IT"}, {"instruction": "What is Sinking Sand?", "input": "Quicksand, also known as sinking sand, is a colloid consisting of fine granular material (such as sand, silt or clay) and water. It forms in saturated loose sand when the sand is suddenly agitated. When water in the sand cannot escape, it creates a liquefied soil that loses strength and cannot support weight. Quicksand can form in standing water or in upward flowing water (as from an artesian spring). In the case of upward flowing water, forces oppose the force of gravity and suspend the soil particles.", "output": "Sinking Sand is most commonly known as Quicksand.", "category": "IT"}, {"instruction": "How do I train for a marathon?", "input": "", "output": "To train for a marathon, start training 16 to 20 weeks before the day of the race. Your weekly milage should already be about 30 miles per week, with a strong 10 miler long run each week.  Gradually build your mileage each week by 10% to 20%.  You can also train based on time on your feet, rather than mileage.  Your diet may need to be adjusted depending on the number of days/week you are training and your basal metabolic rate.  Avoid injury by stretching daily and cross-training at least once a week.  Run at least three 18-20 milers within the last 6 weeks of your training.  Two weeks before the race, taper your runs to be shorter, with your last 2 long runs being about 15-17 miles and 10-12 miles.", "category": "IT"}, {"instruction": "What book was the musical Hamilton based on?", "input": "Hamilton is a sung-and-rapped-through musical with music, lyrics, and a book by Lin-Manuel Miranda, based on the 2004 book Alexander Hamilton by Ron Chernow. The musical tells the story of American Founding Father Alexander Hamilton. Composed over a seven-year period from 2008 to 2015, Miranda says Hamilton was originally a hip hop concept album in his head. The show draws heavily from hip hop, as well as R&B, pop, soul, and traditional-style show tunes. It casts non-white actors as the Founding Fathers of the United States and other historical figures.[1][2][3] Miranda described Hamilton as about \"America then, as told by America now.\"[4]", "output": "Hamilton, the musical was based on the 2004 book Alexander Hamilton by Ron Chernow.", "category": "IT"}, {"instruction": "What is the difference between Hunter, Jumper, and Equitation horseback riding?", "input": "", "output": "The biggest difference between Hunter, Jumper, and Equitation horseback riding is the way they are judged. Hunters are scored by the way the horse looks, Jumpers are scored on time and the number of faults over jumps, and Equitation is scored on the performance and style of the rider.", "category": "IT"}, {"instruction": "When he lived in the mountains of Alaska, was Richard Proenneke in full autonomy?", "input": "Richard Louis Proenneke (/\u02c8pr\u025bn\u0259ki\u02d0/; May 4, 1916 \u2013 April 20, 2003) was an American self-educated naturalist, conservationist, writer, and wildlife photographer who, from the age of about 51, lived alone for nearly thirty years (1968\u20131998) in the mountains of Alaska in a log cabin that he constructed by hand near the shore of Twin Lakes. Proenneke hunted, fished, raised and gathered much of his own food, and also had supplies flown in occasionally. He documented his activities in journals and on film, and also recorded valuable meteorological and natural data.[1][2] The journals and film were later used by others to write books and produce documentaries about his time in the wilderness.", "output": "No, he was getting some of his food by plane.", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Norman Osborne, Joker", "input": "", "output": "Joker is DC, Norman Osborne is Marvel", "category": "IT"}, {"instruction": "Is social media good for you ?", "input": "", "output": "There are conflicting views on the impact of social media.  On  the positive end, social media has enabled stronger connections between humans, democratized media creation and access and become a source of entertainment for millions around the world.   On the negative end, it has fostered division between people with differing opinions, used as a means to spread misinformation, contributed to self-esteem issues stemming from mischaracterization of life and contributed towards productivity loss.\n\nIn summary, it is safe to conclude that the benefits of social media outdo its negative impact.", "category": "IT"}, {"instruction": "What type of poetry is Sappho best known for?", "input": "", "output": "Sappho is an ancient Greek poet best known for her lyric poetry.", "category": "IT"}, {"instruction": "Write a poem about choosing a sport", "input": "", "output": "what sport should I play?\nI would have to do it every day\n\nI should swim \nit would make me slim\n\nIn soccer I can kick the ball\n But I always fall\n\nIn the summer I can surf\nalthough Its very different from turf\n\nSoftball is out of the question\nI would rather do dissection\n\nI don't know what to choose\nI will probably always lose\n\nI can choose what to play\nanother day", "category": "IT"}, {"instruction": "What is mitosis", "input": "", "output": "A type of cell division that results in two daughter cells each having the same number and kind of chromosomes as the \"parent\" chromosome.", "category": "IT"}, {"instruction": "Find the price of Osborne 1 from this passage.", "input": "The Osborne effect is a social phenomenon of customers canceling or deferring orders for the current, soon-to-be-obsolete product as an unexpected drawback of a company's announcing a future product prematurely. It is an example of cannibalization.\nThe term alludes to the Osborne Computer Corporation, whose second product did not become available until more than a year after it was announced. The company's subsequent bankruptcy was widely blamed on reduced sales after the announcement.\nThe Osborne Effect states that prematurely discussing future, unavailable products damages sales of existing products. The name comes from the planned replacement of the Osborne 1, an early personal computer first sold by the Osborne Computer Corporation in 1981. In 1983, founder Adam Osborne pre-announced several next-generation computer models (the Osborne Executive and Osborne Vixen), which were only prototypes, highlighting the fact that they would outperform the existing model as the prototypes dramatically cut down assembly time. A widely held belief was that sales of the Osborne 1 fell sharply as customers anticipated those more advanced systems, leading to a sales decline from which Osborne Computer was unable to recover. This belief appeared in the media almost immediately after the company's September 1983 bankruptcy:\n\nTo give the jazzy $2,495 Osborne Executive a running start, Adam began orchestrating publicity early in 1983. We, along with many other magazines, were shown the machine in locked hotel rooms. We were required not to have anything in print about it until the planned release date in mid-April. As far as we know, nothing did appear in print, but dealers heard about the plans and cancelled orders for the Osborne 1 in droves. In early April, Osborne told dealers he would be showing them the machine on a one-week tour the week of 17 April, and emphasized that the new machine was not a competitor for the Osborne 1. But dealers didn't react the way Osborne expected; said Osborne, \"All of them just cancelled their orders for the Osborne 1.\"\n\nOsborne reacted by drastically cutting prices on the Osborne 1 in an effort to stimulate cash flow. But nothing seemed to work, and for several months sales were practically non-existent.\n\nPre-announcement is done for several reasons: to reassure current customers that there is improvement or lower cost coming, to increase the interest of the media and investors in the company's future prospects, and to intimidate or confuse competitors. When done correctly, the sales or cash flow impact to the company is minimal, with the revenue drop for the current product being offset by orders or completed sales of the new product as it becomes available. However, when the Osborne effect occurs, the quantity of unsold goods increases and the company must react by discounting and/or lowering production of the current product, both of which depress cash flow.", "output": "The price of Osborne 1 is not mentioned in the passage. However, the price of its successor model Osborne Executive was $2,495.", "category": "IT"}, {"instruction": "Best place to visit for a day from Bangalore", "input": "", "output": "1. Myshore\n2. Coorg\n3. Ooty", "category": "IT"}, {"instruction": "Which US state is best for observing the aurora borealis phenomenon?", "input": "", "output": "Alaska is the best US state to see the Northern Lights as it is situated the furthest to the North Pole.", "category": "IT"}, {"instruction": "What are some quick vegan meals to make?", "input": "", "output": "Peanut butter and jelly sandwich, rice and beans, smashed chickpea avocado sandwich, hummus wrap with veggies, pasta salad, spaghetti, burrito bowl, salad, curry, roasted veggies and tofu", "category": "IT"}, {"instruction": "Where is the Lighthouse Point, Bahamas", "input": "Lighthouse Point, Bahamas, or simply Lighthouse Point, is a private peninsula in The Bahamas which serves as an exclusive port for the Disney Cruise Line ships. It is located in the south-eastern region of Bannerman Town, Eleuthera. In March 2019, The Walt Disney Company purchased the peninsula from the Bahamian government, giving the company control over the area.", "output": "The Lighthouse Point, Bahamas, or simply Lighthouse Point, is a private peninsula in the Bahamas which serves as an exclusive port for the Disney Cruise Line ships. It is located in the south-eastern region of Bannerman Town, Eleuthera.", "category": "IT"}, {"instruction": "Given this paragraph about the history of the Calgary Flames hockey team, what year did the Calgary Flames win their only Stanley Cup", "input": "The team was founded in 1972 in Atlanta as the Atlanta Flames before relocating to Calgary in 1980. The Flames played their first three seasons in Calgary at the Stampede Corral before moving into the Scotiabank Saddledome (originally the Olympic Saddledome) in 1983. In 1985\u201386, the Flames became the first Calgary team since the 1923\u201324 Tigers to compete for the Stanley Cup. In 1988\u201389, the Flames won their first and only Stanley Cup title. The Flames' unexpected run to the 2004 Stanley Cup Finals gave rise to the Red Mile, and in 2011, the team hosted and won the second Heritage Classic outdoor game.", "output": "The Calgary Flames won their only Stanley Cup in 1989", "category": "IT"}, {"instruction": "Tell me whether these are cats or dogs: French Bulldogs, Ragdoll, British Shorthair, Labrador, Retrievers, Golden Retrievers, German Shepherds, Maine Coon, Poodles, Bulldogs, Persian, Rottweilers, Devon Rex, Beagles.", "input": "", "output": "French Bulldogs are a type of dog.\nRagdoll is a type of cat.\nBritish Shorthair is a type of cat.\nLabrador Retrievers are a type of dog.\nGolden Retrievers are a type of dog.\nGerman Shepherds are a type of dog.\nMaine Coon is a type of cat.\nPoodles are a type of dog.\nBulldogs are a type of dog.\nPersian is a type of cat.\nRottweilers are a type of dog.\nDevon Rex is a type of cat.\nBeagles are a type of dog.", "category": "IT"}, {"instruction": "Explain Business Intelligence", "input": "", "output": "Business intelligence (BI) comprises of the strategies and technologies used by enterprises for the analysis of data and the management of business information.  Business Intelligence software is responsible for ingesting business data and presenting it in user-friendly formats such as reports, dashboards, charts and graphs.", "category": "IT"}, {"instruction": "What is the meaning of Life, The Universe, and Everything?", "input": "", "output": "This topic has been discussed in debt by Theologians, philosophers, and scientists throughout the course of human history.  While most observations about the universe leave the question unanswered the broad strokes are as follows.\n\nTheologians state in many religions that there is an organizing force known as God providing direction to the universe.  Humans that best align with this organizing force or God are guaranteed good fortune in this life or after.  There are variations in humans level of involvement in this process with Christianity requiring a savior (Jesus) for people to enter the afterlife vs achieving a higher state of consciousness in this life or through reincarnation.\n\nPhilosophers differ on the meaning of life with predominate views following down the lines of seeking your own fulfillment or the fulfillment of others.  Seeking your own fulfillment has been a major component of capitalism, self-preservation, and risk taking that lead to new discoveries in Science and Technology.  Seeking the fulfillment of others has lead to great advancements in philanthropy, equality, and the general well being of society.  This \"social compact\" insures stability and provides an expectation that harmful activities like Murder, Robbery, etc are discouraged and punished.\n\nScientists view this question through the lens of the observable universe.  As such efforts have been made to create a \"unifying theory of everything\" to show some understandable order to the universe.  Others have focused their study on the improbability of how humans could have been created in a universe with seemingly random and infinite chance.  Some scientists have conceded that the question is something Science is ill-fitted to answer.\n\nMost importantly Douglas Adams, a prominent British author specializing in absurdity, answered the question in the book \"The Hitchhikers Guide to the Galaxy\" with the answer \"42.\"", "category": "IT"}, {"instruction": "Which is a species of fish? Boga or Bogata", "input": "", "output": "Boga", "category": "IT"}, {"instruction": "What is the best recipe for moonshine", "input": "", "output": "Take 5 gallons of water to 175 degree Fahrenheit, and once it reaches temperature turn off heat.  Add seven and a half pounds of cracked corn or milled feed corn, and stir every 5 minutes until the temperature reaches 155 degrees.  At that point add two and a half pounds of barley malt while stirring every 15 minutes.  Wait until the temperature gets down to 75 degrees, and this may take a while, overnight in some cases.  Once at or below 75 degrees add two tablespoons of brewers yeast and stir.  Let sit for 3 weeks.  Distill at this point and enjoy the results.", "category": "IT"}, {"instruction": "How old was Octavia Butler when she died?", "input": "Octavia Estelle Butler (June 22, 1947 \u2013 February 24, 2006) was an American science fiction author and a multiple recipient of the Hugo and Nebula awards. In 1995, Butler became the first science-fiction writer to receive a MacArthur Fellowship. Born in Pasadena, California, Butler was raised by her widowed mother. Extremely shy as a child, Butler found an outlet at the library reading fantasy, and in writing. She began writing science fiction as a teenager. She attended community college during the Black Power movement. While participating in a local writer's workshop, she was encouraged to attend the Clarion Workshop, then held in Pennsylvania, which focused on science fiction.", "output": "At the time of her death in 2006, Octavia Butler was 58 years old.", "category": "IT"}, {"instruction": "Give me a list of the lines on the London Underground", "input": "", "output": "- Bakerloo\n- Central\n- Circle\n- District\n- Hammersmith & City\n- Jubilee\n- Metropolitan\n- Northern\n- Piccadilly\n- Victoria\n- Waterloo & City", "category": "IT"}, {"instruction": "Which district is Lightwater in?", "input": "Lightwater is a village in the Surrey Heath district of Surrey, England, about 27 miles (43 km) southwest of central London. Immediately surrounding towns and villages include Bagshot, Deepcut, Windlesham, Camberley, and West End, Woking. It is bounded to the north-west by the M3 motorway and to the north-east by the \"Lightwater Bypass\" (A322). To the south-east it is bounded by the \"Red Road\" (B311), while to the south-west there are vehicle-testing tracks owned by the Ministry of Defence.\n\nThe village is adjacent to junction 3 of the M3 motorway. The nearest railway station is at Bagshot, on the line between Ascot and Aldershot. Lightwater is part of the civil parish of Windlesham, which has a population of 17,000 and also includes the neighbouring village of Bagshot.[2]", "output": "Lightwater is in Surrey Heath district in Surrey. It is in the civil parish of Windlesham.", "category": "IT"}, {"instruction": "How would you build me a plane out of duct tape? You can leverage other materials, but the exterior of both the fuselage and the wings must be duct tape.", "input": "", "output": "We can break down our plane into a few different components, which we will build independently and then piece together during final assembly. They are as follows:\n- Fuselage\n- Wings\n- Tail\n- Engine & Propeller\n- Landing Gear\n\nThe key thing to remember in this plane design is that we won't be achieving altitude above a few thousand feet and will travel slow, since our materials cannot handle extreme conditions.\n\nFor simplicity, we will start by building a skeleton of several different aircraft components using a light, strong wood (pine). It is essential that we design the wings appropriately to generate lift, so we will pay additional attention to the design aspect here. This would frame will include the fuselage, wings, and tail. We will then precisely apply our duct tape coating to provide a sleek, strong finish on top of our frame.\n\nThe engine will be outsourced to a specialty manufacturer, who can provide us a quality propeller, which will generate enough thrust to achieve flight.\n\nFinally, the landing gear will be a duct tape balloon, which will soften our landing and safely place us on the ground.\n\nThis plane will endure a rigorous flight testing routine. To ensure the safety of passengers we will use a variety of testing practices including stall testing, side-slip testing, and many additional tests.\n\nFinal assembly will take place by a highly specialized crew who have built many duct tape airplanes previously and have expertise in this domain, ensuring a quality final product that is safe for flight.", "category": "IT"}, {"instruction": "Who is your favorite player on the Golden State Warriors?", "input": "", "output": "As an AI, I don't have favorite basketball players. However, if I did have to choose, I would pick Gary Payton II. He plays with heart, defends relentlessly, and dunks on everyone.", "category": "IT"}, {"instruction": "When was world war 2?", "input": "", "output": "World War 2 started in September 1939.  France and Britain declared war on Germany.  They did this after Hitler decided to invade Poland.  World War 2 would last for 6 years, and no other war in history would take as many lives as World War 2 did.  In December 1941 the United States would get involved in the second world war after Japan decided to bomb Pearl Harbor.", "category": "IT"}, {"instruction": "How many Alabama football players have won the Heisman?", "input": "The Alabama Crimson Tide football program represents the University of Alabama (variously Alabama, UA, or Bama) in the sport of American football. The team competes in the Football Bowl Subdivision (FBS) of the National Collegiate Athletic Association (NCAA) and the Western Division of the Southeastern Conference (SEC).[4] The team's head coach is Nick Saban, who has led the Tide to six national championships over his tenure.[5] The Crimson Tide is among the most storied and decorated football programs in NCAA history. Since beginning play in 1892, the program claims 18 national championships,[6][7][8] including 13 wire-service (AP or Coaches') national titles in the poll-era, and five other titles before the poll-era.[8][9][10] From 1958 to 1982, the team was led by Hall of Fame coach Paul \"Bear\" Bryant, who won six national titles with the program.[7] Despite numerous national and conference championships, it was not until 2009 that an Alabama player received a Heisman Trophy, when running back Mark Ingram II became the university's first winner. In 2015, Derrick Henry became the university's second Heisman winner.[11] The Crimson Tide won back to back Heisman trophies in 2020 and 2021, with DeVonta Smith and Bryce Young.", "output": "The Alabama Crimson Tide football program has produced four Heisman trophy winners. The first Crimson Tide player to win the Heisman was running back Mark Ingram II in 2009. Running back Derrick Henry won the Heisman trophy in 2015. Alabama had back-to-back Heisman trophy winners in 2020 and 2021, DeVonta Smith and Bryce Young.", "category": "IT"}, {"instruction": "What are 3 popular dishes that can feed a large group of people?", "input": "", "output": "Pizza is a popular dish that can be easily distributed. Hot dogs are also easy to make for a large group with the right equipment. Hamburgers are another common food when feeding a large crowd.", "category": "IT"}, {"instruction": "Who is Geling Yan?", "input": "", "output": "Geling Yan is a Chinese-American author and was once a ballet dancer. Geling was born in Shanghai in 1958. She began performing as a ballet dancer at 12, and worked as a journalist in the Sino-Vietnamese War.\n\nYan's first husband was Kewei Li, son of writer Zhun Li. After divorcing Li, Yan later remarried Laurence A. Walker, a U.S. diplomat. They have an adopted daughter, Yanyan.\n\nIn 2011, Yimou Zhang adapted Yan's novel, The Flowers of War, into a hit movie. In 2014, her novel, The Prisoner Lu Yanshi, was adapted by Zhang into the movie Coming Home.", "category": "IT"}, {"instruction": "What species of fish are found in the Pamlico Sound?", "input": "", "output": "The Pamlico Sound has three primary species of fish: Red Drum, Southern Flounder and Spotted Seatrout.  Depending on the time of year, different species will be more prevalent.  Visit the North Carolina Wildlife Resource Commission website to learn more.", "category": "IT"}, {"instruction": "How many of Farington's buildings are designated Grade 3?", "input": "Farington is a civil parish in the South Ribble district of Lancashire, England. It contains seven listed buildings that are recorded in the National Heritage List for England. All of the listed buildings are designated at Grade II, the lowest of the three grades, which is applied to \"buildings of national importance and special interest\".[1] The parish is largely residential and contains the former villages of Farington and Farington Moss. The listed buildings comprise houses and associated structures, and a church.", "output": "None of Farington's buildings are designated Grade 3. All of Farington's buildings are designated Grade II (Grade 2).", "category": "IT"}, {"instruction": "Who wrote the children's novel Swallows and Amazons", "input": "", "output": "Arthur Ransom", "category": "IT"}, {"instruction": "Tell me about NGC 7314", "input": "NGC 7314 is a spiral galaxy located in the southern constellation of Piscis Austrinus. It was discovered by English astronomer John Herschel on July 29, 1834.[9] This is a nearby Seyfert (active) galaxy, located at a distance of approximately 54.6 megalight-years from the Milky Way.[3] Since it appears to have detached spiral arm segments (either from dust lanes or bright star clusters), it was listed in Halton Arp's Atlas of Peculiar Galaxies.[8]\n\nWalter Scott Houston describes its appearance in small telescopes:[10]\n\nDo not let its photographic magnitude of 11.6 scare you off, for it can be seen in a 6-inch telescope as a curiously fuzzy object. But it is small, appearing only 4' by 2'.\n\nThe morphological classification of this galaxy is SAB(rs)bc,[5] indicating a spiral galaxy with a weak central bar (SAB), an incomplete ring structure around the bar (rs), and moderately\u2013wound arms (bc). The plane of the galactic disk is inclined by 64\u00b0 to the line of sight from the Earth, with the major axis aligned along a position angle of 178\u00b0.[11] Within the galaxy's core is an active galactic nucleus tentatively classified as a type I Seyfert. The central supermassive black hole has a relatively low mass, estimated as (0.87\u00b10.45)\u00d7106 M\u2609. The core is a source for X-ray emission that is seen to vary dramatically on time scales as low as hours.[5]", "output": "NGC 7314 is a spiral galaxy located in the southern constellation of Piscis Austrinus. It was discovered by English astronomer John Herschel on July 29, 1834", "category": "IT"}, {"instruction": "Tell me which of these things are fruits or vegetables: Carrot, Apple, Orange, Potato, Peas, Broccoli, Pears", "input": "", "output": "From the list you provided: Carrot, Potato, Peas, and Broccoli are Vegetables. \n\nThe rest are fruits: Apples, Oranges and Pears.", "category": "IT"}, {"instruction": "Which NFL teams have never gone to the Super Bowl?", "input": "", "output": "Cleveland Browns, Detroit Lions, Houston Texans, Jacksonville Jaguars", "category": "IT"}, {"instruction": "Output a table in CSV format of the games mentioned and how many points Ivey scored", "input": "Early in his freshman season, Ivey missed five games with a foot injury.[5] On January 19, 2021, he made a game-winning three-pointer with five seconds left as part of a 15-point performance in a 67\u201365 win over Ohio State.[6] On March 19, Ivey scored a season-high 26 points in a 78\u201369 overtime loss to North Texas at the first round of the NCAA tournament.[7] As a freshman, he averaged 11.1 points and 3.3 rebounds per game, earning Big Ten All-Freshman Team honors.[8][9]\n\nOn November 12, 2021, Ivey scored 27 points in a 92\u201367 win over Indiana State.[10] On January 30, 2022, he scored 21 points and hit the game-winning three-pointer with 0.6 seconds remaining in an 81\u201378 win over Ohio State.[11] As a sophomore, he averaged 17.3 points, 4.9 rebounds and 3.1 assists per game. Ivey was named to the First Team All-Big Ten as well as the All-American Second Team.[12] On March 31, 2022, Ivey declared for the 2022 NBA draft, forgoing his remaining college eligibility.[13] He was a projected top five pick in the draft.[14]", "output": "Game Summary,Points Scored by Ivey\n67\u201365 win over Ohio State,15\n78\u201369 overtime loss to North Texas,26\n92\u201367 win over Indiana State,27\n81\u201378 win over Ohio State,21", "category": "IT"}, {"instruction": "Name some of the cast members of the movie Spiderman.", "input": "Spider-Man is a 2002 American superhero film based on the Marvel Comics superhero of the same name. Directed by Sam Raimi from a screenplay by David Koepp, it is the first installment in Raimi's Spider-Man trilogy, and stars Tobey Maguire as the titular character, alongside Willem Dafoe, Kirsten Dunst, James Franco, Cliff Robertson, and Rosemary Harris. The film chronicles Spider-Man's origin story and early superhero career. After being bitten by a genetically-altered spider, outcast teenager Peter Parker develops spider-like superhuman abilities and adopts a masked superhero identity to fight crime and injustice in New York City, facing the sinister Green Goblin (Dafoe) in the process.\n\nDevelopment on a live-action Spider-Man film began in the 1980s. Filmmakers Tobe Hooper, James Cameron, and Joseph Zito were all attached to direct the film at one point. However, the project would languish in development hell due to licensing and financial issues. After progress on the film stalled for nearly 25 years, it was licensed for a worldwide release by Columbia Pictures in 1999 after it acquired options from Metro-Goldwyn-Mayer (MGM) on all previous scripts developed by Cannon Films, Carolco, and New Cannon. Exercising its option on just two elements from the multi-script acquisition (a different screenplay was written by James Cameron, Ted Newsom, John Brancato, Barney Cohen, and Joseph Goldman), Sony hired Koepp to create a working screenplay (credited as Cameron's), and Koepp received sole credit in final billing. Directors Roland Emmerich, Ang Lee, Chris Columbus, Barry Sonnenfeld, Tim Burton, Michael Bay, Jan de Bont, M. Night Shyamalan, Tony Scott, and David Fincher were considered to direct the project before Raimi was hired as director in 2000. The Koepp script was rewritten by Scott Rosenberg during pre-production and received a dialogue polish from Alvin Sargent during production. Filming took place in Los Angeles and New York City from January to June 2001. Sony Pictures Imageworks handled the film's visual effects.[6]", "output": "Tobey Maguire, Willem Dafoe, Kirsten Dunst, James Franco, Cliff Robertson, and Rosemary Harris.", "category": "IT"}, {"instruction": "From the passage identify the areas where cytokines can help the host immune responses. Display the results in a comma separated format.", "input": "Cytokines\u00a0are a broad and loose category of small\u00a0proteins\u00a0(~5\u201325\u00a0kDa[1]) important in\u00a0cell signaling. Cytokines are\u00a0peptides\u00a0and cannot cross the\u00a0lipid bilayer\u00a0of cells to enter the\u00a0cytoplasm. Cytokines have been shown to be involved in\u00a0autocrine,\u00a0paracrine\u00a0and\u00a0endocrine signaling\u00a0as\u00a0immunomodulating agents.Cytokines include\u00a0chemokines,\u00a0interferons,\u00a0interleukins,\u00a0lymphokines, and\u00a0tumour necrosis factors, but generally not hormones or\u00a0growth factors\u00a0(despite some\u00a0overlap in the terminology). Cytokines are produced by a broad range of cells, including immune cells like\u00a0macrophages,\u00a0B lymphocytes,\u00a0T lymphocytes\u00a0and\u00a0mast cells, as well as\u00a0endothelial cells,\u00a0fibroblasts, and various\u00a0stromal cells; a given cytokine may be produced by more than one type of cell.[2][3]\u00a0They act through\u00a0cell surface receptors\u00a0and are especially important in the\u00a0immune system; cytokines modulate the balance between\u00a0humoral\u00a0and\u00a0cell-based\u00a0immune responses, and they regulate the maturation, growth, and responsiveness of particular cell populations. Some cytokines enhance or inhibit the action of other cytokines in complex ways. They are different from\u00a0hormones, which are also important cell signaling molecules. Hormones circulate in higher concentrations, and tend to be made by specific kinds of cells. Cytokines are important in health and disease, specifically in host\u00a0immune responses\u00a0to\u00a0infection,\u00a0inflammation,\u00a0trauma,\u00a0sepsis,\u00a0cancer, and reproduction.The word comes from the ancient\u00a0Greek language:\u00a0cyto, from Greek \u03ba\u03cd\u03c4\u03bf\u03c2,\u00a0kytos, 'cavity, cell' +\u00a0kines, from Greek \u03ba\u03af\u03bd\u03b7\u03c3\u03b9\u03c2,\u00a0kin\u0113sis, 'movement'.", "output": "infection, inflammation, trauma, sepsis, cancer, reproduction", "category": "IT"}, {"instruction": "What is the best season to ski?", "input": "", "output": "In northsphere, the best season to ski is in February.\nIndividual ski experiences are related to snow quality, wind factor, avalanche danger, terrain, and visibility. The snow quality differs a lot from different seasons. Deep and dry snow are good for ski experience instead of icy or wet snow.\nFebruary is considered the best season because the temperature is still low, and the snow has accumulated with enough depth.", "category": "IT"}, {"instruction": "Given this paragraph about Kevum, explain when it is typically consumed?", "input": "Kevum or Kavum is a deep-fried Sri Lankan sweet made from rice flour and kithul (sugar-palm) treacle, with a number of variants adding additional ingredients. It is also known as oil cake. Kevum is traditionally given and consumed during celebrations of Sinhala and Tamil New Year.", "output": "It's consumed usually for Sinahala and Tamil celebrations. Particularly, the New Year.", "category": "IT"}, {"instruction": "What is a synapse notebook?", "input": "", "output": "A synapse notebook is a technology built by Microsoft that takes advantage of spark pools.  This is an environment that Data Scientists, Machine Learning Engineers, and Data Engineers can work in to build models, data engineering workflows, and neural networks to name a few.  It is very similar to Jupyter notebook style.  These notebooks environments enable code to be written in a modular format in different cells which can be executed independently of one another.", "category": "IT"}, {"instruction": "List the basis of contemporary national legal systems from the passage. Display the results in comma separated format.", "input": "The contemporary national legal systems are generally based on one of four basic systems: civil law, common law, statutory law, religious law or combinations of these. However, the legal system of each country is shaped by its unique history and so incorporates individual variations.[1] The science that studies law at the level of legal systems is called comparative law.\n\nBoth civil (also known as Roman) and common law systems can be considered the most widespread in the world: civil law because it is the most widespread by landmass and by population overall, and common law because it is employed by the greatest number of people compared to any single civil law system.[2][3][4]", "output": "civil law, common law, statutory law, religious law, comparative law", "category": "IT"}, {"instruction": "Is Ted Yoho republican or democrat", "input": "Theodore Scott Yoho (/\u02c8jo\u028aho\u028a/ YOH-hoh; born April 13, 1955) is an American politician, veterinarian, and businessman who served as the U.S. representative from Florida's 3rd congressional district from 2013 until 2021.[1] He is a member of the Republican Party.\n\nIn the 2012 Republican primary election for the district, Yoho pulled a major upset against long-term incumbent Congressman Cliff Stearns, who had first been elected in 1988. Prior to being elected to Congress, Yoho had been a veterinarian and small business owner in North Central Florida for 30 years.[2]\n\nIn December 2019, Yoho announced that, honoring his term-limit pledge, he would not run for re-election to Congress in 2020.[3]", "output": "Theodore Scott Yoho is an American politician, veterinarian, and businessman who served as the U.S. representative from Florida's 3rd congressional district from 2013 until 2021. He is a member of the Republican Party.\n\nIn the 2012 Republican primary election for the district, Yoho pulled a major upset against long-term incumbent Congressman Cliff Stearns, who had first been elected in 1988. Prior to being elected to Congress, Yoho had been a veterinarian and small business owner in North Central Florida for 30 years.\n\nIn December 2019, Yoho announced that, honoring his term-limit pledge, he would not run for re-election to Congress in 2020.", "category": "IT"}, {"instruction": "You have to Classify each of the following as either a gluten product or a gluten free product and display it according to their categories: sourdough bread, zucchini, barbecue sauce, hummus, amaranth, commercial chocolate milk", "input": "", "output": "Gluten is a protein found in wheat, barley, and rye. Some people have a gluten intolerance or celiac disease, which means they must avoid gluten in their diet to prevent uncomfortable or harmful symptoms. Gluten-free products are made without these grains and can be a safe alternative for those with gluten intolerance or celiac disease. However, for those without a gluten intolerance or celiac disease, a gluten-free diet may not provide any additional health benefits. \n\nHere are the those products which are classified as gluten products from the provided list:\n1. sourdough bread \n2. barbecue sauce\n3. commercial chocolate milk\n\nHere are the those products which are classified as gluten free products from the list provided:\n1. zucchini\n2. hummus\n3. amaranth", "category": "IT"}, {"instruction": "What's the world looks like in 1000 years?", "input": "", "output": "I don't know the exact answer but one thing I do know is that human beings was extinct on the earth. Enjoy :)", "category": "IT"}, {"instruction": "What s epigenomics?", "input": "", "output": "Epigenomics is the study of the complete set of epigenetic modifications on the genetic material of a cell, known as the epigenome. The field is analogous to genomics and proteomics, which are the study of the genome and proteome of a cell. Epigenetic modifications are reversible modifications on a cell's DNA or histones that affect gene expression without altering the DNA sequence. Epigenomic maintenance is a continuous process and plays an important role in stability of eukaryotic genomes by taking part in crucial biological mechanisms like DNA repair. Plant flavones are said to be inhibiting epigenomic marks that cause cancers. Two of the most characterized epigenetic modifications are DNA methylation and histone modification. Epigenetic modifications play an important role in gene expression and regulation, and are involved in numerous cellular processes such as in differentiation/development and tumorigenesis. The study of epigenetics on a global level has been made possible only recently through the adaptation of genomic high-throughput assays.", "category": "IT"}, {"instruction": "Using the text provided, give me the type of engineers that are involved in fabrication of a solar power plant", "input": "Solar power plants derive their energy from sunlight, which is made accessible via photovoltaics (PV's). Photovoltaic panels, or solar panels, are constructed using photovoltaic cells which are made of silica materials that release electrons when they are warmed by the thermal energy of the sun. The new flow of electrons generates electricity within the cell.[13] While PV's are an efficient method of producing electricity, they do burn out after a decade and thus, must be replaced; however, their efficiency, cost of operation, and lack of noise/physical pollutants make them one of the cleanest and least expensive forms of energy.[1] Solar power plants require the work of many facets of engineering; electrical engineers are especially crucial in constructing the solar panels and connecting them into a grid, and computer engineers code the cells themselves so that electricity can be effectively and efficiently produced, and civil engineers play the very important role of identifying areas where solar plants are able to collect the most energy.[10]", "output": "Although solar power plants require the work of many aspects of engineering, the three main types of engineers involved in fabrication of solar power plants are:\n1. Electrical engineers who build solar panels and link them to the electrical grid\n2. Computer engineers who program the cells themselves so that power can be produced effectively and efficiently\n3. Civil engineer who play a critical role in determining sites where the solar plants can capture the most energy.", "category": "IT"}, {"instruction": "What are the two different continental tournaments that Roger Lemerre won ?", "input": "In September 2002, the Tunisian Football Federation announced that it was finalizing a contract with former France manager Roger Lemerre. Tunisia hosted the 2004 African Cup of Nations, winning the group.[41] They defeated Senegal in the quarter-finals,[42] and Nigeria in the semi-finals. Tunisia built a 1\u20130 lead after four minutes with Mehdi Nafti's concentration pushed by Francileudo Santos, before Morocco levelled. Tunisia restored their lead,[43] giving them their first African Cup of Nations title. They also won the CAF's African National Team of the Year award. Lemerre became the first manager to win two different continental tournaments, having previously won Euro 2000 with France.\n\nAs a result, Tunisia qualified for the 2005 FIFA Confederations Cup in Germany, playing the hosts, Argentina and Australia. The only points they would win was a victory over Australia.[44][45][46] Before their 2006 World Cup appearance, Lemerre took the Tunisians to a training camp in Switzerland, where they played international friendlies against Swiss clubs. Tunisia would only record one draw in Germany, against Saudi Arabia, losing against Spain and Ukraine", "output": "Roger Lemerre won the Euro 2000 with France and the African Cup of Nations 2004 with Tunisia", "category": "IT"}, {"instruction": "What is a NBA super team?", "input": "", "output": "NBA superteam is a term coined in the past decade that involves various all stars deciding to team up to play for a particular organization. The super team only works if the organization has enough money to pay everyone - so often super stars will take a pay cut to play with fellow super stars. Some recent super teams, regardless of success, include Nets (Harden, Durant, Kyrie, even Simmons), Warriors (Durant, Curry, Green, Thompson), Heat (Bosh, Wade, Lebron).", "category": "IT"}, {"instruction": "Why do people like California?", "input": "", "output": "California is popular for its moderate climate and diverse nature, ranging from. mountainous terrain to sandy beaches and everything in between.", "category": "IT"}, {"instruction": "Anderson Peters (gold winner) hits the 90 metre mark with a throw of", "input": "", "output": "90.31m", "category": "IT"}, {"instruction": "What is the best part of living in the Midwest?", "input": "", "output": "Midwest is often overlooked as the flyover states, but in fact the quality of life is probably better in the midwest than in the coasts. For one thing, real-estate is more affordable and cost of owning a home is much less than in the coasts. Midwest is also the home of some iconic companies such as General Electric, General Mills, Caterpillar and Kohler to name a few. Midwest also has lot of wooded areas with lakes which make it a great destination for hiking, adventure sports and fishing.", "category": "IT"}, {"instruction": "What language is easy to learn?", "input": "", "output": "English is usually considered as an easier language to learn than Chinese, Russian, Arabic and so on. The grammar has less exceptions, and the pronunciations are easy for people from different places in the world to pronounce. \n\nAlso, since English is widely used in today's world, you may naturally find more TV programs, commercials, films, classes etc. that could help you quickly learn English as well.", "category": "IT"}, {"instruction": "Can you write a High Five to a colleague for the partnership at a customer account and the hard work he did?", "input": "", "output": "Thanks for always being there to help on customer account. I can't imagine how difficult our discussions would have been if we didn't have you.", "category": "IT"}, {"instruction": "What is pleitropy?", "input": "", "output": "Pleiotropy occurs when one gene influences two or more seemingly unrelated phenotypic traits. Such a gene that exhibits multiple phenotypic expression is called a pleiotropic gene. Mutation in a pleiotropic gene may have an effect on several traits simultaneously, due to the gene coding for a product used by a myriad of cells or different targets that have the same signaling function.\n\nPleiotropy can arise from several distinct but potentially overlapping mechanisms, such as gene pleiotropy, developmental pleiotropy, and selectional pleiotropy. Gene pleiotropy occurs when a gene product interacts with multiple other proteins or catalyzes multiple reactions. Developmental pleiotropy occurs when mutations have multiple effects on the resulting phenotype. Selectional pleiotropy occurs when the resulting phenotype has many effects on fitness (depending on factors such as age and gender).\n\nAn example of pleiotropy is phenylketonuria, an inherited disorder that affects the level of phenylalanine, an amino acid that can be obtained from food, in the human body. Phenylketonuria causes this amino acid to increase in amount in the body, which can be very dangerous. The disease is caused by a defect in a single gene on chromosome 12 that codes for enzyme phenylalanine hydroxylase, that affects multiple systems, such as the nervous and integumentary system.\n\nPleiotropic gene action can limit the rate of multivariate evolution when natural selection, sexual selection or artificial selection on one trait favors one allele, while selection on other traits favors a different allele. Some gene evolution is harmful to an organism. Genetic correlations and responses to selection most often exemplify pleiotropy.", "category": "IT"}, {"instruction": "Explain how a Justice is appointed to the US Supreme Court", "input": "Article II, Section 2, Clause 2 of the United States Constitution, known as the Appointments Clause, empowers the president to nominate and, with the confirmation (advice and consent) of the United States Senate, to appoint public officials, including justices of the Supreme Court. This clause is one example of the system of checks and balances inherent in the Constitution. The president has the plenary power to nominate, while the Senate possesses the plenary power to reject or confirm the nominee. The Constitution sets no qualifications for service as a justice, thus a president may nominate anyone to serve, and the Senate may not set any qualifications or otherwise limit who the president can choose.[76]", "output": "The US President nominates a Supreme Court judge who subsequently has to be confirmed by the US Senate.", "category": "IT"}, {"instruction": "What's the most important thing in a marriage?", "input": "", "output": "There're many important things in a marriage and it's hard to say what is the most important. For example, expectation management is very important. Most disappointments or arguments in a marriage come from when your partner fails to meet our expectations. It's important to communicate your expectations of each other regularly. It's also important to remember that what work for other couples or whatever the social norms are may not apply for you, and that is ok.", "category": "IT"}, {"instruction": "What are some vacation ideas this summer?", "input": "", "output": "Summer is a great time to go on vacation especially to enjoy the outdoor. Most commonly visited places during summer are beaches for some water fun, mountains if looking for a calm retreat, a nice lake with recreation options or even a amusement parks since it's holiday time for kids.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Balaban, Lute", "input": "", "output": "Lute is string, Balaban is woodwind.", "category": "IT"}, {"instruction": "Give me a list of the great synth-pop artists and a song for each that I might not have heard.", "input": "", "output": "Sure, here is a short list of Synth-pop artists with songs that you may not have heard yet:\n- Blondie \u2013 Heart Of Glass (1978)\n- Kraftwerk \u2013 The Model (1978)\n- Gary Numan \u2013 Cars (1979)\n- OMD \u2013 Electricity (1979)\n- John Foxx \u2013 Underpass (1980).", "category": "IT"}, {"instruction": "Which city is the best to relocate in Texas", "input": "", "output": "Texas offers some great places to live, if you like city life. The prominent choices can be Houston, Dallas, San Antonio, Austin, all of which are part of the Texas triangle, and are connected by 2-3 hours drive. Houston and Dallas are bigger and dense metropolitans. San Antonio and Austin have smaller footprints but the proximity to hill country makes them more charming in terms of geography. Some other places to consider also can be Corpus Christi, Lubbock and El Paso, but are a bit distant.", "category": "IT"}, {"instruction": "Which is better the Free Software Movement or the Open Source Initiative?", "input": "Both the modern free software movement and the Open Source Initiative were born from a common history of Unix, Internet free software, and the hacker culture, but their basic goals and philosophy differ, the free software movement being more focused on the ethics of software, and their open source counterparts being more focused on practical benefits. The Open Source Initiative chose the term \"open source,\" in founding member Michael Tiemann's words, to \"dump the moralizing and confrontational attitude that had been associated with 'free software'\" and instead promote open source ideas on \"pragmatic, business-case grounds.\"", "output": "The Free Software Movement is the better organization for me since I also hold a high value on ethics and believe in that vision.", "category": "IT"}, {"instruction": "What are the defining characteristics of a Ramly Burger?", "input": "Aside from producing burger meat and other frozen foods, the company is also known for its street stalls, which have sold the Ramly Burger in every state in Malaysia since 1979.[3][7][8] The defining characteristic of a Ramly Burger is the patty itself wrapped in an omelette and topped with several condiments, which may include ketchup, mayonnaise, chili sauce, Worcestershire sauce, and/or Maggi seasoning, depending on the vendor.[9][10] The term \"Ramly Burger\" has been used as a genericized trademark for similarly-prepared burgers which are not necessarily made with the Ramly beef patty as well.[10][11] They are considered a local favourite, especially by city dwellers.[2] It is estimated that there are over 25,000 Ramly Burger stalls nationwide as of 2015, with the monthly average income of about RM 5,000.[12]\n\nThe burger (patties) has been banned in Singapore due to the meat coming from sources which are not on the Agri-Food and Veterinary Authority of Singapore approved list of Commercial Food Imports for Meats which could pose a potential health risk.[13] Singaporean street vendors continue to use the Ramly Burger wrapper.[2][14]", "output": "The defining characteristic of a Ramly burger is that the burger patty is wrapped inside of an omelette and topped with various condiments like maggi seasoning, ketchu, mayonnaise, chili sauce or Worcestershire sauce. It is a local Malaysian favorite but banned in Singapore", "category": "IT"}, {"instruction": "Which is a species of fish? Sea bream or Sea shell", "input": "", "output": "Sea bream", "category": "IT"}, {"instruction": "Given this paragraph describing the conclusion of the movie Groundhog Day, how did Phil manage to break the cycle and wake up on February 3 instead of back once again on February 2?", "input": "During one iteration of the loop, Phil reports on the Groundhog Day festivities with such eloquence that other news crews stop working to listen to his speech, amazing Rita. Phil continues his day helping the people of Punxsutawney. That night, Rita witnesses Phil's expert piano-playing skills as the adoring townsfolk regale her with stories of his good deeds. Impressed by his apparent overnight transformation, Rita successfully bids for him at a charity bachelor auction. Phil carves an ice sculpture in Rita's image and tells her that no matter what happens, even if he is trapped in the loop forever, he is finally happy because he loves her. They share a kiss and retire to Phil's room. He wakes the next morning to \"I Got You Babe\" but finds Rita is still in bed with him and the radio banter has changed; it is now February 3. Phil tells Rita that he wants to live in Punxsutawney with her.\nhttps://en.wikipedia.org/wiki/Groundhog_Day_(film)", "output": "This paragraph summarizing the conclusion of Groundhog Day explains what was happening when Phil wakes up on February 3 but does not explain why he is able to escape the loop.", "category": "IT"}, {"instruction": "How many different Alaska Native tribes are there?", "input": "", "output": "There are 228 federally recognized Alaska Native tribes.", "category": "IT"}, {"instruction": "Which of these games are traditionally considered to be board games, and which are card games? Monopoly, Trivial Pursuit, Poker, Snap, Chess, Backgammon, Bridge and Scrabble.", "input": "", "output": "Monopoly, Trivial Pursuit, Chess, Backgammon and Scrabble are all board games. Poker, Snap and Bridge are types of card games.", "category": "IT"}, {"instruction": "Where can the transmitter for KQKZ be found?", "input": "KQKZ (92.1 FM \"Q92.1\") is a commercial radio station that is licensed to serve the community of Bakersfield, California. It is owned by Lotus Communications. Its studios are located in southwest Bakersfield, while its transmitter is located northeast of the city. It is a classic hits station branded Q92.1 (pronounced Q ninety-two-one).", "output": "The transmitter for KQKZ can be found in the northeast of the city.", "category": "IT"}, {"instruction": "Where should I fly fish for trout in Washington state?", "input": "", "output": "Some of the popular bodies of water to fish for trout in Washington state are the Yakima River, Naches River, the Middle Fork of the Snoqualmie, and the beaches of the puget sound. You can also find excellent trout fishing in Washington\u2019s high lakes, although not all lakes are able to support a healthy population of trout.", "category": "IT"}, {"instruction": "Can planets in the Solar System be seen with the naked eye?", "input": "", "output": "Yes, under the correct weather conditions, Mercury, Venus, Mars, Saturn and Jupiter can be seen with the naked eye. Other planets in the Solar System can only be observed with strong telescopes. Venus is the third brightest object in the sky and can be seen usually during twilight.", "category": "IT"}, {"instruction": "What are good native plants to grow in Ohio?", "input": "", "output": "Echinacea purpurea, Pycnanthemum tenuifolium, and Schizachyrium scoparium are all native to Ohio in the United States. Each of these plants will grow well in full sun, and these plants can adapt to a good range of soil conditions common in Ohio.", "category": "IT"}, {"instruction": "Where is Hesse's Demi Bastion", "input": "Hesse's Demi Bastion is a demi-bastion in the British Overseas Territory of Gibraltar. It is part of the Northern Defences of Gibraltar. The bastion forms a link in a chain of fortifications which ascend the lower north-west slopes of the Rock of Gibraltar, below the King's Lines Battery and Bombproof Battery. The Moorish Castle's Tower of Homage is at the top of the same incline.\n\nHistory\nIt was originally the Baluado de S. Pedro (St. Peter's Bastion) during the Spanish period prior to the Capture of Gibraltar in 1704 under Prince George of Hesse-Darmstadt, after whom the bastion is named.[1] The old Spanish bastion was rebuilt and renamed by the British in 1730. In 1762, during the Seven Years' War, it was armed with two 18-pdrs and four 4-pdrs to flank the ditch in front of the Landport Gate. By 1885 the bastion's guns were all 32-pdrs.[2]", "output": "Hesse's Demi Bastion is a demi-bastion in the British Overseas Territory of Gibraltar. It is part of the Northern Defences of Gibraltar. The bastion forms a link in a chain of fortifications which ascend the lower north-west slopes of the Rock of Gibraltar, below the King's Lines Battery and Bombproof Battery. The Moorish Castle's Tower of Homage is at the top of the same incline.\n\nHistory\nIt was originally the Baluado de S. Pedro (St. Peter's Bastion) during the Spanish period prior to the Capture of Gibraltar in 1704 under Prince George of Hesse-Darmstadt, after whom the bastion is named. The old Spanish bastion was rebuilt and renamed by the British in 1730. In 1762, during the Seven Years' War, it was armed with two 18-pdrs and four 4-pdrs to flank the ditch in front of the Landport Gate. By 1885 the bastion's guns were all 32-pdrs.", "category": "IT"}, {"instruction": "What is the difference between guitar and ukulele?", "input": "", "output": "Guitar and ukulele are similar instruments. But there are many differences between them:\n- The biggest difference is that a ukulele is much smaller than a guitar.\n- Second, the ukulele has four strings while the guitar has six strings. Ukulele is tuned to G-C-E-A, while the guitar is tuned differently as E-A-D-G-B-E.\n- Next, the sound is different. The guitar sounds much fuller than the smaller-body ukulele.\n- Ukulele usually comes with nylon string, while the acoustic guitar usually comes with steel ones.\n- Scale length. The length from nut to the saddle is much longer in a guitar. \n- Difficult to play. The six strings make the guitar a little more difficult to play than a ukulele.", "category": "IT"}, {"instruction": "What's an unpopular opinion you have?", "input": "", "output": "An unpopular opinion I have is that 5:00 pm in the evening is the best time to eat dinner. Many cultures enjoy eating dinner late at night. Many young people prefer to eat at night so that they can enjoy the company of friends and a drink at night. Typically, only elderly people and small children eat dinner at an earlier time. I prefer to eat dinner early because most of the best restaurants have open reservations at 5:00 pm, so I can almost always get a good table. I'm not particularly eager to eat late in the evening because then I have a hard time sleeping at night. I prefer to have dinner at 5:00 pm because it starts the evening earlier, forces you to leave work and allows you to spend the whole evening with your friends and family. It leaves space for the evening to unfold.", "category": "IT"}, {"instruction": "How does screen printing work?", "input": "", "output": "Screen printing is also referred to as silk screen printing. It is essentially the process of printing an image or artwork onto a surface by pushing ink through a screen. The screens are pulled tight and held in a metal or wood frame. Much like a picture frame. Depending on the detail of the artwork, the screens can have different size weave. The weave is essentially how tight the screen is woven and how large the holes in the screen are. For more detailed designs, the screen used will be woven very close and tight so the holes are very small and let less ink through. This allows for very thin lines and detail. Each screen can print 1 color at a time. So, to print a design with multiple colors, there needs to be multiple screens. 1 screen per color. Many screen printing presses have large rotating arms that hold the screens. The arms rotate for each color to be printed individually.", "category": "IT"}, {"instruction": "Why is JDAM so cost effective?", "input": "The Joint Direct Attack Munition (JDAM) is a guidance kit that converts unguided bombs, or \"dumb bombs\", into all-weather precision-guided munitions. JDAM-equipped bombs are guided by an integrated inertial guidance system coupled to a Global Positioning System (GPS) receiver, giving them a published range of up to 15 nautical miles (28 km). JDAM-equipped bombs range from 500 to 2,000 pounds (230 to 910 kg).[1] The JDAM's guidance system was jointly developed by the United States Air Force and United States Navy, hence the \"joint\" in JDAM.[2] When installed on a bomb, the JDAM kit is given a GBU (Guided Bomb Unit) identifier, superseding the Mark 80 or BLU (Bomb, Live Unit) nomenclature of the bomb to which it is attached.\n\nThe JDAM is not a stand-alone weapon; rather it is a \"bolt-on\" guidance package that converts unguided gravity bombs into precision-guided munitions (PGMs). The key components of the system consist of a tail section with aerodynamic control surfaces, a (body) strake kit, and a combined inertial guidance system and GPS guidance control unit.[2]\n\nThe JDAM was meant to improve upon laser-guided bomb and imaging infrared technology, which can be hindered by bad ground and weather conditions. Laser seekers are now being fitted to some JDAMs.[3]", "output": "The Joint Direct Attack Munition (JDAM) is a guidance kit that converts unguided bombs to precision-guided munitions. There are several reasons why JDAM is one of the most cost effective weapons ever invented.\n\nBy using GPS navigation, the JDAM guidance kit can be extremely cheap, as low as $25k/kit.  It is likely cheaper than any other precision-guided weapons.\n\nGPS navigation provides good targeting precision, typically within meters. Combined with blast radius of 500-2000 lbs unguided bombs, JDAM can effectively destroy any targets on the ground.\n\nBecause JDAM has navigation capability, pilots no longer need to precisely aim the bombers  against the targets. It allows a bomber to quickly and precisely hit multiple targets along the route.\n\nSome JDAM guidance kits include targeting sensors, such as laser targeting. They can be used against mobile targets, which further increases the use cases for JDAM.\n\nIn summary, by combining dumb bombs with a guidance kit, JDAM becomes a very cost effective weapon system, and is widely adopted by the US and other military forces.", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Electro, Black Lightning", "input": "", "output": "Electro is Marvel, Black Lightning is DC", "category": "IT"}, {"instruction": "When and where was the first major agitation led by Gandhi, tell me who this agitation was against,  which crop led to this agitation and why this agitation happened.", "input": "Gandhi's first major achievement came in 1917 with the Champaran agitation in Bihar. The Champaran agitation pitted the local peasantry against largely Anglo-Indian plantation owners who were backed by the local administration. The peasants were forced to grow indigo (Indigofera sp.), a cash crop for Indigo dye whose demand had been declining over two decades, and were forced to sell their crops to the planters at a fixed price. Unhappy with this, the peasantry appealed to Gandhi at his ashram in Ahmedabad. Pursuing a strategy of nonviolent protest, Gandhi took the administration by surprise and won concessions from the authorities.", "output": "First major agitation was in 1917 in Champaran Bihar state. The agitation was against Anglo-Indian plantation owners. Indigo was the crop that led to this agitation and the reason was the lower fixed price for the Indigo crop.", "category": "IT"}, {"instruction": "Tell me whether these foods need to be refrigerated or be frozen: milk, meat, sea food, fruit", "input": "", "output": "Milk and fruit need to be refrigerated while meat and sea food in general need to be frozen.", "category": "IT"}, {"instruction": "What is dialtune drums?", "input": "", "output": "Dialtune is a cable tuning system for drums. Using separate dials for the top and bottom heads, drummers can find the exact sound they're looking for faster, change drumheads in under a minute, and explore new creative possibilities without compromise. While Cable tuning is not new, Dialtune has improved upon it with a patented system that makes it the only cable-tuning drum that can independently tune the top and bottom heads using separate dials on either side of the drum. Additionally, changing drumheads doesn't require removing the cable. Dialtune's quick-release hoops make changing a drumhead simple and easy.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Talempong, Guitar", "input": "", "output": "Guitar is string, Talempong is percussion.", "category": "IT"}, {"instruction": "What are the words of House Baratheon?", "input": "", "output": "\"Ours is the Fury\"", "category": "IT"}, {"instruction": "Which is heavier: 1kg of flour or 1kg of steel?", "input": "", "output": "A kilogram (kg) is a unit of weight, so it doesn't matter what material is being weighed - a kilogram will always be equal to a kilogram. Therefore, both weigh the same.", "category": "IT"}, {"instruction": "What is the California Alpine Club?", "input": "", "output": "The California Alpine Club (CAC) is a membership club with overnight lodges on Mount Tamalpais in Mill Valley, CA and at Echo Lake, which is 20 minutes outside of South Lake Tahoe.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Boobam, Orutu", "input": "", "output": "Boobam is percussion, Orutu is string.", "category": "IT"}, {"instruction": "The Coquerel's coua species was named after who?", "input": "Coquerel's coua (Coua coquereli) is a species of cuckoo in the family Cuculidae. It is endemic to Madagascar. Its habitat is subtropical or tropical dry forests. It was named in 1867 by the French naturalist Alfred Grandidier in honor of the French navy surgeon and naturalist Charles Coquerel.[2] Coquerel's coua is approximately 40 cm (16 in) in length and has a large blue patch of bare skin around the eye, a characteristic of the Coua genus that is similar to African turacos. The plumage is silky, the crown is black, the upper parts and tail are light brown or greyish-brown, and the lower breast and belly is suffused with red. The iris is red and the beak and legs are slaty grey.[2] As a member of the cuckoo family, it has a reversible third toe and resembles the coucal in its method of scrambling through tangled bushes and lianas while searching for food. Observations indicate that it can climb about 10 m (30 ft) above the ground.[3]", "output": "The Coquerel's coua species was named after the French navy surgeon and naturalist Charles Coquerel.", "category": "IT"}, {"instruction": "Tell me about Roger Federer", "input": "Roger Federer (German: [\u02c8r\u0254d\u0292\u0259r \u02c8fe\u02d0d\u0259r\u0259r]; born 8 August 1981) is a Swiss former professional tennis player. He was ranked world No. 1 by the Association of Tennis Professionals (ATP) for 310 weeks, including a record 237 consecutive weeks, and finished as the year-end No. 1 five times. He won 103 singles titles on the ATP Tour, the second most of all time, including 20 major men's singles titles, a record eight men's singles Wimbledon titles, an Open Era joint-record five men's singles US Open titles, and a joint-record six year-end championships. In his home country, he is regarded as \"the greatest and most successful\" Swiss sportsperson in history.[4]\n\nA Wimbledon junior champion in 1998 and former ball boy, Federer won his first major singles title at Wimbledon in 2003 at age 21.[5] Between 2003 and 2009, Federer played in 21 out of 28 major singles finals. He won three of the four majors and the ATP Finals[c] in 2004, 2006, and 2007 as well as five consecutive titles at both Wimbledon and the US Open. He completed the career Grand Slam at the 2009 French Open after three consecutive runner-up finishes to Nadal, his main rival until 2010. At age 27, he surpassed Pete Sampras' record of 14 major men's singles titles at Wimbledon in 2009.\n\nFederer and Stan Wawrinka led the Switzerland Davis Cup team to their first title in 2014, following their Olympic doubles gold victory at the 2008 Beijing Olympics. Federer also won a silver medal in singles at the 2012 London Olympics, finishing runner-up to Andy Murray. After a half-year hiatus in late 2016 to recover from knee surgery, Federer returned to tennis, winning three more majors over the next two years, including the 2017 Australian Open over Rafael Nadal and an eighth singles title at the 2017 Wimbledon Championships. At the 2018 Australian Open, Federer became the first man to win 20 major singles titles and shortly the oldest ATP world No. 1 at age 36. In September 2022, he retired from professional tennis following the Laver Cup.\n\nA versatile all-court player, Federer's perceived effortlessness has made him highly popular among tennis fans. Originally lacking self-control as a junior, he transformed his on-court demeanor to become well-liked for his graciousness, winning the Stefan Edberg Sportsmanship Award 13 times. He has won the Laureus World Sportsman of the Year award a record five times. Outside of competing, he played an instrumental role in the creation of the Laver Cup team competition. He is also an active philanthropist. He established the Roger Federer Foundation, which targets impoverished children in southern Africa, and has raised funds in part through the Match for Africa exhibition series. He is routinely one of the top ten highest-paid athletes in any sport and ranked first among all athletes with $100 million in endorsement income in 2020.[6]", "output": "Roger Federer, born 8 August 1981, is a Swiss former professional tennis player. He was ranked world No. 1 by the Association of Tennis Professionals (ATP) for 310 weeks, including a record 237 consecutive weeks, and finished as the year-end No. 1 five times. He won 103 singles titles on the ATP Tour, the second most of all time, including 20 major men's singles titles, a record eight men's singles Wimbledon titles, an Open Era joint-record five men's singles US Open titles, and a joint-record six year-end championships. In his home country, he is regarded as \"the greatest and most successful\" Swiss sportsperson in history.\n\nA Wimbledon junior champion in 1998 and former ball boy, Federer won his first major singles title at Wimbledon in 2003 at age 21. Between 2003 and 2009, Federer played in 21 out of 28 major singles finals. He won three of the four majors and the ATP Finals in 2004, 2006, and 2007 as well as five consecutive titles at both Wimbledon and the US Open. He completed the career Grand Slam at the 2009 French Open after three consecutive runner-up finishes to Nadal, his main rival until 2010. At age 27, he surpassed Pete Sampras' record of 14 major men's singles titles at Wimbledon in 2009.\n\nFederer and Stan Wawrinka led the Switzerland Davis Cup team to their first title in 2014, following their Olympic doubles gold victory at the 2008 Beijing Olympics. Federer also won a silver medal in singles at the 2012 London Olympics, finishing runner-up to Andy Murray. After a half-year hiatus in late 2016 to recover from knee surgery, Federer returned to tennis, winning three more majors over the next two years, including the 2017 Australian Open over Rafael Nadal and an eighth singles title at the 2017 Wimbledon Championships. At the 2018 Australian Open, Federer became the first man to win 20 major singles titles and shortly the oldest ATP world No. 1 at age 36. In September 2022, he retired from professional tennis following the Laver Cup.\n\nA versatile all-court player, Federer's perceived effortlessness has made him highly popular among tennis fans. Originally lacking self-control as a junior, he transformed his on-court demeanor to become well-liked for his graciousness, winning the Stefan Edberg Sportsmanship Award 13 times. He has won the Laureus World Sportsman of the Year award a record five times. Outside of competing, he played an instrumental role in the creation of the Laver Cup team competition. He is also an active philanthropist. He established the Roger Federer Foundation, which targets impoverished children in southern Africa, and has raised funds in part through the Match for Africa exhibition series. He is routinely one of the top ten highest-paid athletes in any sport and ranked first among all athletes with $100 million in endorsement income in 2020.", "category": "IT"}, {"instruction": "In the 2005 Lexus Cup, how many members did each team have?", "input": "The 2005 Lexus Cup was the inaugural edition of the annual golf match competed by women representing Asia and an international squad. Each team was made up of twelve members. The competition took place at the Tanah Merah Country Club in Singapore from 9\u201311 December 2005. Lexus was he title sponsor while Rolex, DBS, Singapore Airlines, and Singapore Sports Council are main sponsors. The total purse was US$960,000, with $50,000 going to each member of the winning team and $30,000 to members of the other team.", "output": "Each team was made up of twelve members.", "category": "IT"}, {"instruction": "Give me a list of the top clean beauty brands for women in their 20s", "input": "", "output": "-Westman Atelier \n-Ilia \n-Kosas \n-RMS Beauty", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Hornpipe, Gusli", "input": "", "output": "Gusli is string, Hornpipe is woodwind.", "category": "IT"}, {"instruction": "This table lists the change over time in population of a small town in France. Between  which two consecutive entries from the table did the rate of population growth change the most? Explain your math.", "input": "Historical population\nYear\tPop.\t\u00b1%\n1911\t752\t\u2014    \n1962\t437\t\u221241.9%\n1968\t486\t+11.2%\n1975\t398\t\u221218.1%\n1982\t393\t\u22121.3%\n1990\t382\t\u22122.8%\n1999\t395\t+3.4%\n2008\t441\t+11.6%", "output": "The rate of population growth changed the most between the entries for 1962 and 1968. Between 1911 and 1962, there was a -41.9% change in population, and between 1962 and 1968 there was a +11.2% change in population. The rate of change of population growth was |(\u221241.9% - +11.2%)| = 53.1% change, which is larger than the absolute difference between any other two consecutive rows in the table.", "category": "IT"}, {"instruction": "Who spoke at NYU's 2022 commencement?", "input": "", "output": "Taylor Swift spoke at NYU's 2022 commencement.", "category": "IT"}, {"instruction": "Why is professional wrestling entertaining?", "input": "", "output": "Professional wrestling is one of the best forms of entertainment.  First, it's an incredible display of physical talent.  Professional wrestling and acrobats are showcasing their physical attributes in a partially choregraphed dance.  There is an element of improv in professional wrestling.  Wrestlers often are calling the match as the action happens.  The next set of moves can be greatly influenced from the crowd's reaction.  The \"pop\" of the crowd, if you will.  Finally, the best wrestlers are ones that are amplified versions of their true selves.  The audience can detect an inauthentic speech on the mic.  Those wrestlers who combine their charisma to their true gimmick are the ones that turn the normal fan to a mark.", "category": "IT"}, {"instruction": "How can I get my dog to stop barking?", "input": "", "output": "There are a few ways to reduce the amount your dog. Dogs can bark for few reasons. Perhaps they want your attention, or they might be fearful or anxious and are barking to alert you. Also, barking habits can also be very breed specific. Some breeds are known to be more vocal than other breeds. It's important to try and understand why they are barking to then initiate the proper course of action to address their barking habits. If you believe they are barking for attention, one idea is to make sure you are not rewarding their barking by distracting them with a treat or playtime. By doing this, you are teaching them that if they bark, the dog will get what they want. Instead, you might want to consider a couple items. First, is the dog getting enough exercise or releasing their energy. Increase their stimulation by walking them more, playing with them, or socializing them with other dogs or humans. This added stimulation may reduce their need for attention. If they are barking because they are fearful or anxious, think about what is happening or what the environment is that may be cause their fear or anxiety. Then, try and change the environment or situation so the dog feels safe. One action that may help is providing a safe place for your dog, such as a dog crate or dog bed, so they know exactly what to do when they are afraid or anxious. Training them to go to their safe place may provide the comfort they need to reduce their barking habits.", "category": "IT"}, {"instruction": "Who wrote the music and lyrics for Replay?", "input": "\"Tomorrow\" is a show tune from the musical Annie, with music by Charles Strouse and lyrics by Martin Charnin, published in 1977. The number was originally written as \"Replay\" (The Way We Live Now) for the 1970 short film Replay, with both music and lyrics by Strouse.\n\nIn 1972 Strouse, and Thomas Meehan began working on a musical based on the Little Orphan Annie comic strips, Annie. Strouse contributed a reworked version of \"Replay\" as \"Tomorrow\". \"Annie\" took until 1976 to reach Broadway and during that time Strouse reworked \"Replay\" again for possible use in what became \"Charlie and Algernon\", a musical version of Daniel Keyes's Flowers for Algernon with book by playwright David Rogers although it was not ultimately used. \"", "output": "Charles Strouse", "category": "IT"}, {"instruction": "Who was Neale James Cooper", "input": "Neale James Cooper (24 November 1963 \u2013 28 May 2018) was a Scottish football player and coach. He played as a midfielder during the 1980s and 1990s, most prominently for the Aberdeen team managed by Alex Ferguson, and later played for Aston Villa, Rangers, Reading, Dunfermline Athletic and Ross County. Cooper then became a coach, and worked as a manager in England with Hartlepool United (twice) and Gillingham, and in Scotland with Ross County and Peterhead.", "output": "Neale James Cooper (24 November 1963 \u2013 28 May 2018) was a Scottish football player and coach. He played as a midfielder during the 1980s and 1990s, most prominently for the Aberdeen team managed by Alex Ferguson, and later played for Aston Villa, Rangers, Reading, Dunfermline Athletic and Ross County.", "category": "IT"}, {"instruction": "Given this reference text about the Koala, tell me what makes up most of their diet, how long joeys spend in their mothers' pouches and what are some of the pathogens they are threatened by.", "input": "The koala or, inaccurately, koala bear (Phascolarctos cinereus), is an arboreal herbivorous marsupial native to Australia. It is the only extant representative of the family Phascolarctidae and its closest living relatives are the wombats. The koala is found in coastal areas of the mainland's eastern and southern regions, inhabiting Queensland, New South Wales, Victoria, and South Australia. It is easily recognisable by its stout, tailless body and large head with round, fluffy ears and large, spoon-shaped nose. The koala has a body length of 60\u201385 cm (24\u201333 in) and weighs 4\u201315 kg (9\u201333 lb). Fur colour ranges from silver grey to chocolate brown. Koalas from the northern populations are typically smaller and lighter in colour than their counterparts further south. These populations possibly are separate subspecies, but this is disputed.\n\nKoalas typically inhabit open Eucalyptus woodland, as the leaves of these trees make up most of their diet. This eucalypt diet has low nutritional and caloric content and contains toxins that deter most other mammals from feeding on it. Koalas are largely sedentary and sleep up to twenty hours a day. They are asocial animals, and bonding exists only between mothers and dependent offspring. Adult males communicate with loud bellows that intimidate rivals and attract mates. Males mark their presence with secretions from scent glands located on their chests. Being marsupials, koalas give birth to underdeveloped young that crawl into their mothers' pouches, where they stay for the first six to seven months of their lives. These young koalas, known as joeys, are fully weaned around a year old. Koalas have few natural predators and parasites, but are threatened by various pathogens, such as Chlamydiaceae bacteria and koala retrovirus.", "output": "Eucalyptus makes up most of their diet. Joeys spend the first six to seven months of their lives in their mothers' pouches. They are threatened by pathogens like Chlamydiaceae and koala retrovirus.", "category": "IT"}, {"instruction": "What is a mammal?", "input": "", "output": "A mammal is a warm blooded vertebrate animal that is distinguished by having mammary glands and hair. Typically mammals give birth to live babies that need the help of their parents to survive. Some fun facts include, 1) bats are the only flying mammals,  and 2) blue whales, the largest animals on the planet, are also mammals.", "category": "IT"}, {"instruction": "According to this reference text about UVA, what years have UVA women won NCAA titles in rowing?", "input": "In the 21st century alone, UVA teams have won seventeen NCAA championships. The men's teams have won recent NCAA titles in basketball (2019); lacrosse (2003, 2006, 2011, 2019, and 2021); baseball (2015); soccer (2009 and 2014); and tennis (2013, 2015, 2016, 2017, and 2022). UVA women have won recent NCAA titles in rowing (2010 and 2012) and swimming & diving (2021 and 2022). The Cavaliers rank first in the ACC (a power conference) with 22 men's NCAA Championships, and rank second in the conference with nine women's NCAA Championships.", "output": "UVA women won NCAA titles in rowing in 2010 and 2012.", "category": "IT"}, {"instruction": "Which team drafted Marques Pope?", "input": "Marquez Phillips Pope (born October 29, 1970 in Nashville, Tennessee) is a former professional American football player who was drafted by the San Diego Chargers in the 2nd round (33rd overall) of the 1992 NFL Draft. A 5'11\" cornerback-safety from Fresno State University, Pope played for 5 teams in 10 NFL seasons from 1992 to 2001. His best year as a pro came during the 1996 season for the San Francisco 49ers, intercepting 6 passes with 1 touchdown. During his pro career, Pope was known to be among the hardest hitters in the NFL.", "output": "The team that drafted Marquez Pope was the San Diego Chargers in the 1992 NFL Draft.", "category": "IT"}, {"instruction": "What is heavier? A pound of feathers or a pound of iron?", "input": "", "output": "A pound of feathers and a pound of iron both weigh the same.", "category": "IT"}, {"instruction": "Why do people purchase ski passes?", "input": "", "output": "People buy ski passes so that they have unlimited access to a mountain resort. If they visit the resort enough times in a season, they can save money by using a pass rather than buying individual tickets for each day. Also, using a pass makes it faster to enter the resort without having to stop at a ticket counter.", "category": "IT"}, {"instruction": "Compare and contrast the strategy of Tesla to that of Nissan. Why has Tesla been successful in the electric vehicle market while Nissan has yet to?", "input": "", "output": "Nissan introduced Leaf in 2011, 18 months before Tesla launched its first car, the Model S. Despite the head start, Nissan Leaf is discontinued as of 2023. Let\u2019s explore why Nissan Leaf failed while Tesla succeeded.\nWhile Nissan Leaf was innovative and introduced an alternative energy car, it was just a better car, but more is needed for consumers to adopt it. With the 9X effect, consumers were skeptical about its performance (range), unable to see the need for an electric car as they were satisfied with the reliable ICE (internal combustion engine) cars. Nissan Leaf is a good car on paper. However, consumers were unwilling to switch because of the status quo bias. Also, Nissan needed to build an ecosystem of products around electric vehicles, like charging stations. It relied on the traditional auto-sales process, which is already cumbersome, and consumers view it as a haggle.\n\nOn the other hand, Tesla came with 10X improvements overall in customer experience, drivability, charging stations, integrated hardware and software (over-the-wire updates), and direct to consumer sales model with zero advertising. Tesla broke the status quo bias of the consumers with the 9x effect. Telsa\u2019s messaging is the key that stuck with the customers, planet-friendly cars.", "category": "IT"}, {"instruction": "what are the different types of music genres", "input": "", "output": "The music genre is the categorisation of music. Some examples of music genres are - rock, pop, hip-hop, jazz etc.", "category": "IT"}, {"instruction": "In which years did Ernie Wilson play his first and last grand finals?", "input": "Ernest George 'Ernie' Wilson (18 October 1900 \u2013 7 June 1982)[1] was an Australian rules footballer who played for Collingwood in the Victorian Football League (VFL).\n\nWilson featured in the Collingwood side during a strong era, playing in no less than six Grand Finals. He was on a half forward flank in their 1919 premiership but was used mostly as a defender. His other Grand Final appearances came in 1920, 1922, 1925 and 1926 while he was a half back flanker in the Collingwood premiership team of 1927. He could have added another in 1928, but lost his place in the side after the drawn semi final against Melbourne which would be his last game. In 1929 he played with Northcote in the VFA. He was reported in the last few minutes of the Grand Final which Northcote won by 5 points. He received a 12-month suspension for the offense and returned to Collingwood in 1930 where he captain coached the reserve team until the end of the 1933 season. He also represented Victoria at interstate football, a total of nine times, including in the 1924 Hobart Carnival. He remains the only player to have represented Victoria whilst under suspension from the VFL.", "output": "He played his first grand final in 1919, and his last in 1927.", "category": "IT"}, {"instruction": "The Weeknd samples which '80s megahit in \"Blinding Lights?\"", "input": "", "output": "\"Take On Me\" by A-ha", "category": "IT"}, {"instruction": "What is a baseball hat?", "input": "", "output": "A baseball hat is a fabric hat with a bill on the front that shades the eyes from the sun. It is referred to as a baseball hat because all baseball players wear this style of hat while in the field playing defense, and they have their team\u2019s logo on the front of the hat. Many people, however, refer to a hat as a baseball hat if it is a fabric material with a front bill, even if it does not have the logo of a baseball team on the front.", "category": "IT"}, {"instruction": "Select the odd word from this list and explain why:\nChair\nSofa\nTable\nDinosaur\nCupboard", "input": "", "output": "Dinosaur is the odd word in this list. All of the other words are items of furniture, but dinosaurs are large extinct reptiles, not items of furniture.", "category": "IT"}, {"instruction": "Name 5 different vegetables. List them with dashes", "input": "", "output": "- Carrot\n- Kale\n- Broccoli\n- Cabbage\n- Potato", "category": "IT"}, {"instruction": "Based on the following passage regarding the economy of Sweden, what is the economic sector that accounts for the largest output?", "input": "Sweden is an export-oriented mixed economy featuring a modern distribution system, excellent internal and external communications, and a skilled labor force. Timber, hydropower and iron ore constitute the resource base of an economy heavily oriented toward foreign trade. Sweden's engineering sector accounts for 50% of output and exports. Telecommunications, the automotive industry and the pharmaceutical industries are also of great importance. Agriculture accounts for 2 percent of GDP and employment. The armaments industry has a technologically highly advanced reputation.", "output": "According to this passage, the engineering sector accounts for the largest output, generating 50% of output and exports.", "category": "IT"}, {"instruction": "Given the text about the 2019 Masters Tournament, tell me who won the golf tournament, where the tournament was held and what age the winner was?", "input": "The 2019 Masters Tournament was the 83rd edition of the Masters Tournament and the first of golf's four major championships in 2019, held between April 11 and 14 at Augusta National Golf Club in Augusta, Georgia.[1]\n\nTiger Woods won his fifth Green Jacket, and fifteenth major, by one stroke ahead of three runners-up. It left him one shy of Jack Nicklaus's record six Masters wins, and three short of his record eighteen major wins. At age 43, he became the eleventh oldest player to win a major, and the second oldest Masters winner, again only bettered by Nicklaus who won at age 46. It was 11 years after his last major win, the 2008 U.S. Open, and 14 years since his last Masters win beating the previous record of 13 years held by Gary Player. Due to the high profile of Woods, and his storied fall from the top of the game due to personal issues and injuries, the victory generated a large amount of publicity around the world, and is regarded as one of the great sporting comebacks.[2][3]", "output": "Tiger Woods won the golf tournament at Augusta National Golf Club in Augusta, GA and was 43 years old.", "category": "IT"}, {"instruction": "Give me a bulleted list of the 5 oldest countries in the world:", "input": "", "output": "Here are the 5 oldest countries in the world:\n\n- Egypt\n- Greece\n- Hungary\n- France\n- Japan", "category": "IT"}, {"instruction": "What were the 2 horses represented in greek mythology?", "input": "", "output": "The 2 horses represented in greek mythology were:\n\n- Pegasus, a divine winged stallion that is pure white, son of Medusa and Poseidon, brother of Chrysaor, and father of winged horses.\n- Ethiopian Pegasus, winged, horned horses native to Ethiopia.", "category": "IT"}, {"instruction": "Which of the following are perfect square roots? Classify them as 'perfect' and 'not perfect' - 1, 23, 4, 6, 9, 10, 42, 112, 81, 100, 55, 16, 32, 25.", "input": "", "output": "'perfect', 'not perfect', 'perfect', 'not perfect', 'perfect', 'not perfect', 'not perfect', 'not perfect', 'perfect', 'perfect', 'not perfect', 'perfect', 'not perfect', 'perfect'.", "category": "IT"}, {"instruction": "Who wrote the most episodes of season four of Game of Thrones?", "input": "", "output": "Co-writers David Benioff and D.B. Weiss wrote seven of the ten episodes of Game of Thrones's fourth season.", "category": "IT"}, {"instruction": "Classify each of the following as a ridesharing or food delivery company: Doordash, Lyft, Wolt, Deliveroo, Bolt, Didi, Rappi", "input": "", "output": "Doordash: Food Delivery\nLyft: Ridesharing\nWolt: Food Delivery\nDeliveroo: Food Delivery\nBolt: Ridesharing\nDidi: Ridesharing\nRappi: Food Delivery", "category": "IT"}, {"instruction": "Where is Cabomba sometimes used for decoration but also utility?", "input": "Cabomba is an aquatic plant genus, one of two belonging to the family Cabombaceae. It has divided submerged leaves in the shape of a fan (hence the vernacular name fanwort) and is much favoured by aquarists as an ornamental and oxygenating plant for fish tanks. Use in the aquarium trade has led to some species being introduced to other parts of the world, such as Australia, where they have become weeds.", "output": "fish tanks", "category": "IT"}, {"instruction": "My air conditioner quit working how do I fix it?", "input": "", "output": "If your air conditioner quit working you may find it to be extremely hot in the building or house you are in.  If you are in a building you will want to contact building management first and let them know about the problem and then you will want to remove yourself from the area that is very hot to prevent heat exhaustion.  If you are in a house you will want to call a service technician to get your air conditioner fixed.  It may be quite costly to get it fixed depending on the problem, and you might want to consider a home warranty in order to keep your costs down if you don't already have one.  Next you will want to stay with a friend or family member in their house if its too hot in your house to stay there.", "category": "IT"}, {"instruction": "Who is Sachin Tendulkar?", "input": "Sachin Ramesh Tendulkar is an Indian former international cricketer who captained the Indian national team. He is regarded as one of the greatest batsmen in the history of cricket. He is the all-time highest run-scorer in both ODI and Test cricket with more than 18,000 runs and 15,000 runs, respectively. He also holds the record for receiving the most man-of-the-match awards in international cricket.[", "output": "Sachin Ramesh Tendulkar is an Indian former international cricketer who captained the Indian national team. He is regarded as one of the greatest batsmen in the history of cricket. He is the all-time highest run-scorer in both ODI and Test cricket with more than 18,000 runs and 15,000 runs, respectively. He also holds the record for receiving the most man-of-the-match awards in international cricket.[", "category": "IT"}, {"instruction": "Extract from the text the main characteristics of the city of S\u00e3o Paulo. Separate them with a comma.", "input": "S\u00e3o Paulo is the most populous city in Brazil, and is the capital of the state of S\u00e3o Paulo, the most populous and wealthiest Brazilian state, located in the country's Southeast Region. Listed by the GaWC as an alpha global city, S\u00e3o Paulo is the most populous city proper in the Americas, the Western Hemisphere, and the Southern Hemisphere, as well as the world's 4th largest city proper by population. Additionally, S\u00e3o Paulo is the largest Portuguese-speaking city in the world. It exerts strong international influences in commerce, finance, arts and entertainment. The city's name honors the Apostle, Saint Paul of Tarsus. The city's metropolitan area, the Greater S\u00e3o Paulo, ranks as the most populous in Brazil and the 12th most populous on Earth. The process of conurbation between the metropolitan areas around the Greater S\u00e3o Paulo (Campinas, Santos, Jundia\u00ed, Sorocaba and S\u00e3o Jos\u00e9 dos Campos) created the S\u00e3o Paulo Macrometropolis, a megalopolis with more than 30 million inhabitants, one of the most populous urban agglomerations in the world.", "output": "most populous city in Brazil, most populous and wealthiest Brazilian state, located in the country's Southeast Region, Listed by the GaWC as an alpha global city, the most populous city proper in the Americas, the world's 4th largest city proper by population, S\u00e3o Paulo is the largest Portuguese-speaking city in the world, city's name honors the Apostle, Saint Paul of Tarsus, ranks as the most populous in Brazil and the 12th most populous on Earth", "category": "IT"}, {"instruction": "What is the difference between Kuchipudi and Kathak dance forms of India?", "input": "", "output": "Though both are Indian classical dance forms, the difference lies in their place of origin the associated music and mudras ( body movement).\nKuchipudi originated in South Indian region of Andhra, is performed on Carnatic music, dance movement can have bending the knee.\nKathak originated in North India regions of UP, Bihar, is performed on Gharana music, dance movement is fast involves lot of rotations but the knee is not bend", "category": "IT"}, {"instruction": "What countries are in the European Union?", "input": "", "output": "- Austria\n- Belgium\n- Bulgaria\n- Croatia\n- Cyprus\n- Czechia (a.k.a. Czech Republic)\n- Denmark\n- Estonia\n- Finland\n- France\n- Germany\n- Greece\n- Hungary\n- Ireland\n- Italy\n- Latvia\n- Lithuania\n- Luxembourg\n- Malta\n- Netherlands\n- Poland\n- Portugal\n- Romania\n- Slovakia\n- Slovenia\n- Spain\n- Sweden", "category": "IT"}, {"instruction": "What size of snowboard should I use?", "input": "", "output": "The size of snowboard you should use is based on many different factors such as the skill of the rider, the weight and height of the rider, as well as the type of terrain you plan on riding. It is best to consult the manufacturer of the snowboard maker in order to make the best decision on the size of snowboard to use.", "category": "IT"}, {"instruction": "Who are your 3 favorite Star Wars characters and why?", "input": "", "output": "There are so many great Star Wars characters, but if I have to narrow it down to 3, I'd have to say Chewy, Rey, and Grogu. Chewy is a classic Star Wars character who has always been on the 'good' side (the Rebellion). His communication mode is so adorable, he is extremely loyal, and he wears his emotions on his (hairy) sleeve.  While Princess Leia was an inspriational character, I think Rey is the most impressive of the two strong female protagonists. Rey is mentally and physically strong, passionate about her beliefs, and I hope she will continue to show up in Star Wars movies. Grogu is from the The Mandalorian series, on Disney Plus. Lots of people call him Baby Yoda because he looks like a tiny version of the famous and wise Yoda character. Grogu appeals to women because he makes baby-like sounds and has huge inquisitive eyes.  His curiosity gets him into trouble, but he doesn't know any better yet. He has impressive super powers for such a tiny creature, and I hope that we will get to watch Grogu grow up as the series continues.", "category": "IT"}, {"instruction": "What are the drawbacks of nuclear fusion?", "input": "List of Cons of Nuclear Fusion\n1. It is extremely difficult to achieve. \nIn stars, strong gravitational forces and high temperatures naturally create a fusion environment. But here on Earth, we are facing the challenge to make nuclear fuel hot and confined enough to start a self-sustaining ignition.\n\nImagine trying to contain the plasma (a gaseous mixture of deuterium, tritium atoms and ions, and helium the fusion product) at 100 million degrees celsius. No material can withstand that temperature. So, scientists attempt to keep the plasma (being electrically charged and having a magnetic field of its own) suspended in a magnetic field produced by superconducting magnets around the fusion chamber/vessel. This is similar to how bullet trains float on their tracks at ridiculous speeds. This process is very difficult to achieve (as compared to nuclear FISSION).\n\n2. It produces radioactive waste.\nThough nuclear power plants only emit negligible amounts of carbon dioxide into the atmosphere, its nuclear fuel chain process does produce radioactive waste.\n\nThe radioactive waste produced with fusion is not the same as with fission, and the two are often confused. With a nuclear fission reactor, the radiation is alpha particles, beta particles, and gamma rays (which can penetrate your skin and break apart the bonds in your DNA structure, giving you all kinds of cancer). In contrast, in a nuclear fusion reactor, the vessel wall is the only part that will be bombarded by the high energy neutrons, and if, in the worst case, all the protective layers surrounding the main fusion vessel fail, the neutron radiation will stop as soon as fusion reaction stops. In a fission reactor, the cancer-causing radiation still exists even in the waste materials, which means that extreme measures are needed to burry the waste to keep it as far away as possible from humans. In the case of nuclear fusion, the activated materials (i.e., the metal vessels which have been bombarded by neutrons) can be stored safely for about 100 years, after which the radiation level becomes so low that they can be reused in the fusion reactor again.", "output": "List of Cons of Nuclear Fusion\n1. It is extremely difficult to achieve. \nIn stars, strong gravitational forces and high temperatures naturally create a fusion environment. But here on Earth, we are facing the challenge to make nuclear fuel hot and confined enough to start a self-sustaining ignition.\n\nImagine trying to contain the plasma (a gaseous mixture of deuterium, tritium atoms and ions, and helium the fusion product) at 100 million degrees celsius. No material can withstand that temperature. So, scientists attempt to keep the plasma (being electrically charged and having a magnetic field of its own) suspended in a magnetic field produced by superconducting magnets around the fusion chamber/vessel. This is similar to how bullet trains float on their tracks at ridiculous speeds. This process is very difficult to achieve (as compared to nuclear FISSION).\n\n2. It produces radioactive waste.\nThough nuclear power plants only emit negligible amounts of carbon dioxide into the atmosphere, its nuclear fuel chain process does produce radioactive waste.\n\nThe radioactive waste produced with fusion is not the same as with fission, and the two are often confused. With a nuclear fission reactor, the radiation is alpha particles, beta particles, and gamma rays (which can penetrate your skin and break apart the bonds in your DNA structure, giving you all kinds of cancer). In contrast, in a nuclear fusion reactor, the vessel wall is the only part that will be bombarded by the high energy neutrons, and if, in the worst case, all the protective layers surrounding the main fusion vessel fail, the neutron radiation will stop as soon as fusion reaction stops. In a fission reactor, the cancer-causing radiation still exists even in the waste materials, which means that extreme measures are needed to burry the waste to keep it as far away as possible from humans. In the case of nuclear fusion, the activated materials (i.e., the metal vessels which have been bombarded by neutrons) can be stored safely for about 100 years, after which the radiation level becomes so low that they can be reused in the fusion reactor again.", "category": "IT"}, {"instruction": "What does AWS stand for?", "input": "", "output": "AWS is an abbreviation for Amazon Web Services. AWS is a subsidiary of Amazon and delivers cloud computing services.", "category": "IT"}, {"instruction": "Where is the Porce III Dam", "input": "The Porce III Dam is an embankment dam on the Porce River 90 kilometres (56 mi) northeast of Medell\u00edn in Antioquia Department, Colombia. The dam was constructed between 2004 and 2011 for the primary purpose of hydroelectric power generation.\n\nBackground\nBetween 1974 and 1976, hydrological studies were carried out on the Porce River and between 1982 and 1983, studies regarding the river's hydroelectric development were completed. The study recommended the five projects, Porce I, Porce II, Porce III, Porce IV and Ermita\u00f1o. In December 1984, the feasibility report for Porce III was submitted and complementary studies were carried out between 1986 and 1996. In 2002, the design and consultancy contracts were awarded along with the environmental license issued.[2] In 2004, construction on the dam began and the river was diverted by 2007. By 2010, the dam began to impound the reservoir and was complete by 2010. Between 2011, all four generators were commissioned.[3]", "output": "The Porce III Dam is an embankment dam on the Porce River 90 kilometres (56 mi) northeast of Medell\u00edn in Antioquia Department, Colombia. The dam was constructed between 2004 and 2011 for the primary purpose of hydroelectric power generation.", "category": "IT"}, {"instruction": "Who won the 1986 Major League Baseball World Series and in how many games?", "input": "The 1986 World Series was the championship series of Major League Baseball's (MLB) 1986 season. The 83rd edition of the World Series, it was a best-of-seven playoff played between the National League (NL) champion New York Mets and the American League (AL) champion Boston Red Sox. The Mets won the series four games to three to claim their second World Series title and first since 1969. The series is best remembered for its Game 6, which saw the Mets rally from a two run-deficit in the bottom of the 10th inning, despite having two outs and no one on base. The Red Sox, who held a 3\u20132 series lead, were twice one strike away from securing the championship, but failed to close out the inning as the Mets won off an error by Boston first baseman Bill Buckner. Due to the Mets claiming the series in Game 7, the Game 6 collapse entered baseball lore as part of the Curse of the Bambino superstition used to explain the Red Sox's championship drought after the 1918 World Series.", "output": "The New York Mets beat the Boston Red Sox, 4 games to 3, to win the World Series. The Red Sox were a strike away from winning the series in Game 6 but the Mets won the game due to an error from first baseman Bill Buckner. The Mets went on to easily win Game 7. This was used as another data point in the \"Curse of the Bambino\" superstition that started in 1918 when the Red Sox traded Babe Ruth to the New York Yankees and hadn't won a World Series since (up til that point in time).", "category": "IT"}, {"instruction": "Classify the countries based on the continent they belong to - North America or South America with the former as 'north' and the latter as 'south'. United States, Mexico, Canada, Brazil, Columbia, Argentina, Cuba, Jamaica, Chile, Guyana, Peru.", "input": "", "output": "'north', 'north', 'north', 'south', 'south', 'south', 'north', 'north', 'south', 'south', 'south'.", "category": "IT"}, {"instruction": "Is there an evolutionary root cause for self-deception?", "input": "", "output": "Diverse\u00a0evolutionary psychologists\u00a0have conjectured about the potential advantages of self-deception in a social context, however some Terror Management theorists suggest that self-deception is actually at the core of what it means to be human. Hunter-gatherers may have used their increasing cognitive abilities to their own evolutionary benefit, but increased cognition necessarily brought along the awareness of death, which could become a major obstacle by making the dangers of day-to-day so explicit and linked to the possibility of death that would cause paralysis -thus it would not be evolutionary anymore. In conclusion, awareness of death could only have emerged in combination with self-deception, so that the terror of death would be managed and diminished. In other words, the theory dismisses the possibility of the advent of a breed of intelligent beings, unless those beings, no matter how clever they come to be, have as well the ability to conceal their own mortality.", "category": "IT"}, {"instruction": "What is pink salt?", "input": "", "output": "It\u2019s important to distinguish between a typical consumer-grade Himalayan pink salt primarily used for finishing dishes just before serving, and a curing salt that is not meant for consumption but instead used for the process of curing meats and just happens to be pink.  So, \u201cpink salt\u201d tends to be an overloaded term.", "category": "IT"}, {"instruction": "How do you throw a cutter in baseball?", "input": "", "output": "A cutter is a pitch in baseball with action and movement similar to a hybrid between a fastball and a slider.  Perhaps the most famous cutter pitcher in baseball history, a closer from the New York Yankees named, Mariano Rivera, used the cutter exclusively all the way to the hall of fame.  The cutter is thrown like a fastball, but with a \"football\" throwing arm action where the pitcher's palm faces their opposing arm as they release the pitch.  Grips for the cutter can vary, however, the keys are to hold the middle of the baseball, cross the seems at an angle similar to a slider and be sure not to turn or twist on release.  With this approach, the cutter is a pitch safe for youth baseball as young as age 9 and can be effective all the way to the World Series as demonstrated by Mariano Rivera.", "category": "IT"}, {"instruction": "Give me a list of potential vegan dishes you could make for a Thanksgiving meal", "input": "", "output": "Vegan mashed potatoes\nVegan macaroni and cheese\nTofurkey with vegan gravy\nVegan green bean casserole\nVegan candied yams\nVegan sweet potato pie\nVegan twice baked potatoes", "category": "IT"}, {"instruction": "What are the different kind of hits in baseball?", "input": "", "output": "The different kind of hits in baseball are a single, double, triple, and home run.", "category": "IT"}, {"instruction": "Q: Am I at risk for serious complications from COVID-19 if I smoke cigarettes?", "input": "", "output": "A: Yes. Data shows that when compared to never smokers, cigarette smoking increases the risk of more severe illness from COVID-19, which could result in hospitalization, the need for intensive care, or even death. Smoking cigarettes can cause inflammation and cell damage throughout the body, and can weaken your immune system, making it less able to fight off disease.\n\nThere\u2019s never been a better time to quit smoking. If you need resources to help you quit smoking, the FDA has supportive tips and tools to help you get closer to quitting for good.", "category": "IT"}, {"instruction": "Who founded Amazon?", "input": "", "output": "Jeff Bezos", "category": "IT"}, {"instruction": "What is the difference between a Transformation and Action in Spark?", "input": "", "output": "Spark's execution engine is designed to be Lazy. In effect, you're first up build up your analytics/data processing request through a series of Transformations which are then executed by an Action\n\nTransformations are kind of operations which will transform your RDD data from one form to another. And when you apply this operation on any RDD, you will get a new RDD with transformed data Operations like map, filter are transformations.\n\nTransformations create RDDs from each other, but when we want to work with the actual dataset, at that point action is performed. When the action is triggered after the result, new RDD is not formed like transformation. Ex:- count on a DF", "category": "IT"}, {"instruction": "Can you describe a colour you cannot see?", "input": "", "output": "Colourblind individuals can describe colours based on accounts they have heard from others, so it is certainly possible to describe a colour you cannot see yourself.", "category": "IT"}, {"instruction": "What is the field of study that looks at tissues and their structure?", "input": "", "output": "Histology is the field of study that takes a look at tissues and their structure via microscope.", "category": "IT"}, {"instruction": "Where is Koenigsfeld", "input": "K\u00f6nigsfeld is a municipality in the district of Ahrweiler, in Rhineland-Palatinate, Germany.", "output": "Koenigsfeld is a municipality in the district of Ahrweiler, in Rhineland-Palatinate, Germany.", "category": "IT"}, {"instruction": "Tell me which of these characters are from the Mario universe: Yoshi, Zelda, King Kong, Luigi, Princess Peach, Link, Bowser, Alex Rodriguez.", "input": "", "output": "Yoshi, Luigi, Princess Peach, and Bowser are from the Mario universe.", "category": "IT"}, {"instruction": "What is the Foresight discipline?", "input": "", "output": "Foresight is also known as strategic foresight and futures studies.  It is an emerging multi-disciplinary practice that analyzes change and its implications in the context of the future. \n\nIt enables societies, organizations, and individuals to effectively explore the breadth of potential future scenarios in order to better adapt in the present.  Its purpose is to inform clear thinking, appropriate action, and effective decision making based on the identified trends that will have significant impact on their domain.\n\nSome of the numerous methodologies for decision support that are incorporated in strategic foresight include scenario planning, systems analysis, back-casting, design thinking, trends analysis, horizon scanning, and systems thinking.", "category": "IT"}, {"instruction": "Who wrote Democracy in America?", "input": "", "output": "Alexis de Tocqueville wrote Democracy in America", "category": "IT"}, {"instruction": "Extract the islands that are part of the Madeira and Savage Islands archipelagos in Portugal. Separate them with a comma.", "input": "The archipelago includes the islands of Madeira, Porto Santo, and the Desertas, administered together with the separate archipelago of the Savage Islands.", "output": "Madeira, Porto Santo, Desertas, Savage Islands", "category": "IT"}, {"instruction": "What are some of the top risks around LLMs?", "input": "", "output": "1. Hallucinations: LLMs sometimes make up facts and responses which are false.\n2. Toxicity and bias: LLMs reflect the data they were trained on, so they may generate responses with toxic or biased content.\n3. Job losses: More generally, many people worry that LLMs and AI will displace humans in some jobs, though similar historical breakthroughs indicate that jobs will likely change but not be lost overall.\n4. Malicious AI: As LLMs and AI approach Artifical General Intelligence (AGI), some people fear that an AGI may become a threat to some or all humans.\n5. Environmental impact: LLMs and big AI models require lots of energy to train, and therefore have big carbon footprints.", "category": "IT"}, {"instruction": "Write about something you hate.", "input": "", "output": "I hate motorized scooters. I live in London and over the last few years, they have become extremely popular for people getting around the city. Most people are okay on them, but there are far too many who will go too fast, and ride on the pavement. I've been crashed into a few times and I have read news reports of people being seriously injured and killed by them. \n\nThe rental scooters can often be left abandoned on the pavement or in parking spots, creating an eyesore and a hazard. They should be regulated better!", "category": "IT"}, {"instruction": "What are Bengali famous food ?", "input": "", "output": "1. Hilsha shorshe\n2, Shorshe posto jhinge alu\n3. Fish curry\n4. Kolkata / kacchi / Dhakai Biriyani", "category": "IT"}, {"instruction": "What does the phrase \u201cignorance is bliss\u201d mean?", "input": "", "output": "\u201cIgnorance is bliss\u201d refers to times when it is better not to know something than to know it.", "category": "IT"}, {"instruction": "Summarize Tiger Woods professional golf career.", "input": "Eldrick Tont \"Tiger\" Woods (born December 30, 1975) is an American professional golfer. He is tied for first in PGA Tour wins, ranks second in men's major championships, and holds numerous golf records.[4] Woods is widely regarded as one of the greatest golfers of all time and is one of the most famous athletes in modern history.[4] He is an inductee of the World Golf Hall of Fame.[5]\n\nFollowing an outstanding junior, college, and amateur golf career, Woods turned professional in 1996 at the age of 20. By the end of April 1997, he had won three PGA Tour events in addition to his first major, the 1997 Masters, which he won by 12 strokes in a record-breaking performance. He reached number one in the Official World Golf Ranking for the first time in June 1997, less than a year after turning pro. Throughout the first decade of the 21st century, Woods was the dominant force in golf. He was the top-ranked golfer in the world from August 1999 to September 2004 (264 consecutive weeks) and again from June 2005 to October 2010 (281 consecutive weeks). During this time, he won 13 of golf's major championships.\n\nThe next decade of Woods's career was marked by comebacks from personal problems and injuries. He took a self-imposed hiatus from professional golf from December 2009 to early April 2010 in an attempt to resolve marital issues with his wife at the time, Elin. Woods admitted to multiple infidelities, and the couple eventually divorced.[6] He fell to number 58 in the world rankings in November 2011 before ascending again to the number-one ranking between March 2013 and May 2014.[7][8] However, injuries led him to undergo four back surgeries between 2014 and 2017.[9] Woods competed in only one tournament between August 2015 and January 2018, and he dropped off the list of the world's top 1,000 golfers.[10][11] On his return to regular competition, Woods made steady progress to the top of the game, winning his first tournament in five years at the Tour Championship in September 2018 and his first major in 11 years at the 2019 Masters.\n\nWoods has held numerous golf records. He has been the number one player in the world for the most consecutive weeks and for the greatest total number of weeks of any golfer in history. He has been awarded PGA Player of the Year a record 11 times[12] and has won the Byron Nelson Award for lowest adjusted scoring average a record eight times. Woods has the record of leading the money list in ten different seasons. He has won 15 professional major golf championships (trailing only Jack Nicklaus, who leads with 18) and 82 PGA Tour events (tied for first all time with Sam Snead).[13] Woods leads all active golfers in career major wins and career PGA Tour wins. Woods is the fifth (after Gene Sarazen, Ben Hogan, Gary Player and Jack Nicklaus) player to achieve the career Grand Slam, and the youngest to do so. He is also the second golfer out of two (after Nicklaus) to achieve a career Grand Slam three times.\n\nWoods has won 18 World Golf Championships. He was also part of the American winning team for the 1999 Ryder Cup. In May 2019, Woods was awarded the Presidential Medal of Freedom by Donald Trump, the fourth golfer to receive the honor.[14]\n\nOn February 23, 2021, Woods was hospitalized in serious but stable condition after a single-car collision and underwent emergency surgery to repair compound fractures sustained in his right leg in addition to a shattered ankle.[15] In an interview with Golf Digest in November 2021, Woods indicated that his full-time career as a professional golfer was over, although he would continue to play \"a few events per year\".[16] He returned to the PGA Tour for the first time since the car crash at the 2022 Masters.", "output": "Tiger Woods is tied for first in PGA Tour wins and ranks second in men's major championships. He holds numerous golf records. Tiger Woods is widely regarded as one of the greatest golfers of all time and is one of the most famous athletes in modern history. He is an inductee of the World Golf Hall of Fame. Tiger turned professional in 1996 at the age of 20. By the end of April 1997, he had won three PGA Tour events in addition to his first major, the 1997 Masters, which he won by 12 strokes in a record-breaking performance. Woods has won 18 World Golf Championships. He has been awarded PGA Player of the Year 11 times and has won the Byron Nelson Award for lowest adjusted scoring average a record eight times. He has won 15 professional major golf championships and 82 PGA Tour events. Woods leads all active golfers in career major wins and career PGA Tour wins.", "category": "IT"}, {"instruction": "Given these paragraphs about the Tesla bot, what is its alias?", "input": "Optimus, also known as Tesla Bot, is a conceptual general-purpose robotic humanoid under development by Tesla, Inc. It was announced at the company's Artificial Intelligence (AI) Day event on August 19, 2021. CEO Elon Musk claimed during the event that Tesla would likely build a prototype by 2022. Musk is on record having said that he thinks Optimus \"has the potential to be more significant than the vehicle business over time.\"\n\nTesla Bot is planned to measure 5 ft 8 in (173 cm) tall and weigh 125 lb (57 kg). According to the presentation made during the first AI Day event, a Tesla Bot will be \"controlled by the same AI system Tesla is developing for the advanced driver-assistance system used in its cars\" and have a carrying capacity of 45 lb (20 kg). Proposed tasks for the product are ones that are \"dangerous, repetitive and boring\", such as providing manufacturing assistance.\n\nhttps://en.wikipedia.org/wiki/Optimus_(robot)", "output": "Optimus", "category": "IT"}, {"instruction": "Where is the basketball Hall of Fame?", "input": "", "output": "The Naismith Memorial Basketball Hall of Fame is an American history museum and hall of fame, located at 1000 Hall of Fame Avenue in Springfield, Massachusetts.", "category": "IT"}, {"instruction": "Which ingredients does a margarita pizza consist of?", "input": "", "output": "A pizza margarita is made with pizza dough, tomato sauce, mozzarella, and basil. Some recipes drizzle the pizza with oil or add spices such as salt and pepper after baking. The pizza dough typically consists of yeast, flour, salt, olive oil, and water. Margarita pizza is vegetarian, but substituting the mozzarella cheese with nuts could make it a vegan dish.", "category": "IT"}, {"instruction": "Is art useless?", "input": "", "output": "Whether art possesses a purpose or not depends on perspective. \nFrom a practical perspective, art itself may not provide an instrumental value or necessity to humans. \n\nHowever, the continuous, innate appreciation of art remains visible in the human race, so although it has no use, humans continue to view its intrinsic value as transcendent to practicality. The millions of galleries and museums dedicated to preserving and enriching artistic culture are proof of this.\n\nMany would argue that, through art, thoughts and emotions can be inspired, allowing people to connect on a deeper level to the beauty of the human experience. \n\nThe use of art can also be analysed from a financial perspective. It not only allows for the artist to express their imagination and sell their paintings, but it also generates employment in the creative industry.\n\nIn conclusion, despite the lack of practicability of art, its intrinsic value is visible through the appreciation of beauty and talent.", "category": "IT"}, {"instruction": "Why we need music?", "input": "", "output": "I think the reason why we need music is that it adds color to our lives and provides another way to express emotions. We need alternative ways to express our emotions, whether we're happy or sad. Music is also important for events such as parties, ceremonies, social activities etc...", "category": "IT"}, {"instruction": "Does Bolivia have two capital cities?", "input": "", "output": "The executive capital of Bolivia is La Paz. The constitutional capital is Sucre.", "category": "IT"}, {"instruction": "What is paella?", "input": "", "output": "Paella is a dish that is very popular in Spain. It is made of rice, saffron, and usually comes with fish or chicken.", "category": "IT"}, {"instruction": "What is the biggest fish in the ocean?", "input": "", "output": "Whale Sharks are the biggest fish in the ocean, growing up to 23 feet long. Surprisingly, they're not at all threatening and actually very approachable. There are many places around the world where you can swim (or dive) with whale sharks, from the Philippines to Mexico.", "category": "IT"}, {"instruction": "Provide a bulleted summary of the history of how home-field advantage is determined for the World Series.", "input": "Home-field advantage\nWorld Series\nThe World Series used several different formats in its early years. Initially, it generally followed an alternating home-and-away pattern, except that if a seventh game was possible, its site was determined by coin toss prior to the sixth game. In 1924 the Series began using a 2-3-2 format, presumably to save on travel costs, a pattern that has continued to this day with the exception of a couple of the World War II years when wartime travel restrictions compelled a 3-4 format (used in 1943 and 1945, but not in the 1944 series, which was contested between crosstown rivals the St. Louis Browns and St. Louis Cardinals; all games were held in the same stadium in St. Louis). From the start of the 2-3-2 format through the 2002 season, home-field advantage generally alternated between leagues each year. Prior to the 1994 strike, the National League champion received home-field advantage in even-numbered years and the American League champion in odd-numbered years; these were reversed for 1995\u20132002 (because 1994 would have been the NL's turn to have home-field, but the World Series was canceled by the aforementioned strike). That changed starting in 2003.\n\nThe 2002 All-Star Game ended in a tie, much to the displeasure of both fans and sportswriters, who complained about a lack of intensity and competitiveness on the part of the players. This hit especially close to home for Commissioner Bud Selig, as the game had been played in his home city of Milwaukee, Wisconsin. In response, to make the game's outcome more meaningful, in 2003, MLB began assigning home-field advantage in the World Series to the winner of that year's All-Star Game, which is typically held in mid-July.\n\nFollowing the acceptance of a new collective bargaining agreement after the 2016 season (which went into effect in 2017) home-field advantage in the World Series is no longer tied to the outcome of the All-Star Game, but instead is granted to the team with the better regular-season record.[17][18] One exception was 2020, when all World Series games were played at a neutral site. The home-field advantage designation in the World Series was determined based on whichever pennant winner held the higher seed in its league, not necessarily the team with the better regular season record. However, in the event both pennant winners had held the same seeding number, only then regular season records would have determined the home team in Games 1, 2, 6, and 7.[19]", "output": "Home field advantage for the World Series has been determined in the following ways throughout history:\n- 1924 - 2002: Home field advantage simply alternated between the American and National Leagues each year.\n- 2002 - 2016: Home field advantage was determined by the winner of the All-Star game.\n- 2016 - Present: Home field advantage is determined by the team with the best record playing in the World Series.", "category": "IT"}, {"instruction": "Who is Ronald Peter Nash", "input": "Ronald Peter Nash CMG (born 18 September 1946) is a British diplomat who served as Ambassador to Afghanistan from 2002 to 2003.[1][2] He was appointed Companion of the Order of St Michael and St George (CMG) in the 2004 New Year Honours.[3]", "output": "Ronald Peter Nash CMG (born 18 September 1946) is a British diplomat who served as Ambassador to Afghanistan from 2002 to 2003. \n\nHe was appointed Companion of the Order of St Michael and St George (CMG) in the 2004 New Year Honours.", "category": "IT"}, {"instruction": "Name three countries where Arabic is the official language.", "input": "", "output": "Arabic is the official language of Egypt, Lebanon, and Jordan.", "category": "IT"}, {"instruction": "What's the best place to visit China?", "input": "", "output": "The most popular places to visit china are Beijing, Xian, Shanghai and Nanjing. You can find plenty historical places to visit in those city. There are also many mountains to visit. Speaking of long Chinese history, religious culture and distinctive natural scenery, the Five Great Mountains (Wu Yue) are the best destinations to discovery once for all. Despite the lower height than those high mountains like Mount Emei (3099m) and Mount Wutai (3058m), the five in different directions are known far and wide as the great figure of Chinese nation, through the combination of worshipping tradition of ancient mount gods, theory of five Taoist elements (Gold, Wood, Water, Fire and Soil) and mountain apotheosis from emperors. As the popular saying goes, trips to China's five great mountains belittle trips to other mountains unnecessary(\u4e94\u5cb3\u5f52\u6765\u4e0d\u770b\u5c71). Moreover, the starring five famous mountains in China are still major ashram of Chinese Taoism, where each own typical characteristics with both scenic and cultural significance.", "category": "IT"}, {"instruction": "When was the the docu-series 'The Circus' created?", "input": "The docu-series premiered on January 17, 2016, and focused on the 2016 U.S. presidential election, January to November. It was renewed for a second season, which premiered on March 19, 2017, and focused on President Trump's first 100 days.[4] It returned on April 15, 2018 for a third season, and focused on the mid-term elections, with CBS News anchor Alex Wagner stepping in as co-host to replace Mark Halperin, who was replaced on January 3, 2018,[5][6] by the show, after sexual harassment allegations.[7][8][9][5][6] Jennifer Palmieri joined as guest host beginning October 13, 2019, with season four episode twelve, Desperate Times, Desperate Measures, and joined as a permanent co-host in season 6.[10][11][12][13]", "output": "The Circus is an American television documentary series initially following the 2016 presidential race.", "category": "IT"}, {"instruction": "Who is Charles Brigstocke?", "input": "Charles Reginald Brigstocke CB (22 July 1876 \u2013 7 April 1951) was a British civil servant.", "output": "Brigstocke was born in Carmarthen, Wales, and educated at Llandovery School. He entered the Civil Service in 1894. In 1901 he was called to the bar by the Middle Temple. Between 1903 and 1918 he worked at the Admiralty. In 1918 he transferred to the Air Ministry and was appointed Assistant Secretary in 1919, serving with the air delegation at the Versailles Conference.[1] For these services he was appointed Companion of the Order of the Bath (CB) in the 1920 New Year Honours.", "category": "IT"}, {"instruction": "What is the capital of Florida?", "input": "", "output": "Tallahassee is the capital of Florida", "category": "IT"}, {"instruction": "Based on the autopsy, list the contributing factors to Farley's death in bullet format.", "input": "On December 18, 1997, Farley was found dead by his younger brother John in his apartment in the John Hancock Center in Chicago. He was 33 years old.[54] An autopsy revealed that Farley had died of an overdose of a combination of cocaine and morphine,[55] commonly known as a \"speedball\". Advanced atherosclerosis was cited as a \"significant contributing factor.\"[35][55]\n\nA private funeral was held for Farley on December 23, 1997, at Our Lady Queen of Peace Catholic Church in his hometown of Madison, Wisconsin. Over 500 people attended his funeral, including many comedians who had worked with him on Saturday Night Live and on film, such as Dan Aykroyd, Adam Sandler, Chris Rock, Rob Schneider, Lorne Michaels, Al Franken, John Goodman, Bob Odenkirk, Tim Meadows, Robert Smigel, George Wendt and Phil Hartman.[56][57] Notably absent was Farley's best friend David Spade. Spade's non-appearance fueled speculation that there was some falling out with Farley prior to his death. However, years later Spade denied any ill will between him and his comedic partner, admitting that his absence from the funeral was because he would have found it too emotionally difficult.[58] Farley's remains were interred at Resurrection Cemetery in Madison.", "output": "-Overdose from a speedball\n-Advanced atherosclerosis", "category": "IT"}, {"instruction": "Extract name and the type of water body from this text and list them using bullets in the format {Name}-{River}", "input": "Major Himalayan-origin rivers that substantially flow through India include the Ganges and the Brahmaputra, both of which drain into the Bay of Bengal.[180] Important tributaries of the Ganges include the Yamuna and the Kosi; the latter's extremely low gradient, caused by long-term silt deposition, leads to severe floods and course changes.[181][182] Major peninsular rivers, whose steeper gradients prevent their waters from flooding, include the Godavari, the Mahanadi, the Kaveri, and the Krishna, which also drain into the Bay of Bengal;[183] and the Narmada and the Tapti, which drain into the Arabian Sea.[184] Coastal features include the marshy Rann of Kutch of western India and the alluvial Sundarbans delta of eastern India; the latter is shared with Bangladesh.[185] India has two archipelagos: the Lakshadweep, coral atolls off India's south-western coast; and the Andaman and Nicobar Islands, a volcanic chain in the Andaman Sea.[186]", "output": "Ganges  -  River \n Brahmaputra  -  River \n Bay of Bengal  -  Sea \n Yamuna  -  River \n Kosi  -  River \n Godavari  -  River \n Mahanadi  -  River \n Kaveri  -  River \n Krishna  -  River \n Narmada  -  River \n Tapti  -  River \n Andaman Sea  -  Sea", "category": "IT"}, {"instruction": "What type of chair would I want to design to give an option to lean all the way back?", "input": "A chair is a type of seat, typically designed for one person and consisting of one or more legs, a flat or slightly angled seat and a back-rest. They may be made of wood, metal, or synthetic materials, and may be padded or upholstered in various colors and fabrics. Chairs vary in design. An armchair has armrests fixed to the seat; a recliner is upholstered and features a mechanism that lowers the chair's back and raises into place a footrest; a rocking chair has legs fixed to two long curved slats; and a wheelchair has wheels fixed to an axis under the seat.", "output": "As the name suggests, a recliner features a mechanism that lowers the chair\u2019s back and raises a footrest into place", "category": "IT"}, {"instruction": "Exact all the names related to 'Qin' in the paragraph", "input": "The name 'Qin' is believed to be the etymological ancestor of the modern-day European name of the country, China. The word probably made its way into the Indo-Aryan languages first as 'Cina' or 'Sina' and then into Greek and Latin as 'Sinai' or 'Thinai'. It was then transliterated into English and French as 'China' and 'Chine'. This etymology is dismissed by some scholars, who suggest that 'Sina' in Sanskrit evolved much earlier before the Qin dynasty. 'Jin', a state controlled by the Zhou dynasty in seventh century BC, is another possible origin.[59] Others argued for the state of Jing (\u8346, another name for Chu), as well as other polities in the early period as the source of the name.", "output": "Qin, Cina, Sina, Sinai, Thinai, Jin, Jing, Chu are names related to Qin", "category": "IT"}, {"instruction": "What professional tournaments did Liang win during his career?", "input": "Career\nAmateur years\nAs an amateur, Liang's major feats were as follows:[6]\n\n2003 IBSF World Snooker Championship, men's division, quarter-finalist\n2004 IBSF World Snooker Championship, under-21 division, semi-finalist\n2005 International Open Series, under-21 division, no. 4 runner-up\nLiang built on the positive start to his snooker career, winning an individual silver medal and a team gold medal at the 2006 Asian Games.\n\n2004/2005\nLiang began his professional career during the 2004\u201305 snooker season playing on the Challenge Tour, which is the tier below the World Snooker Association Main Tour. He finished a mediocre 104th out of 168 competitors, having only accumulated 2150 points.[7]\n\n2005/2006\nLiang received a wildcard nomination to the Main Tour despite not qualifying directly;[8] this was because he won the 2005 IBSF World Under-21 Championship, and also because not all of the players that were eligible for the Main Tour took their places.[9] In his first ranking tournament, the Grand Prix, he lost in the first qualifying round to Rory McLeod 2\u20135.[10] He fared better in the next ranking event, the UK Championship, where he almost whitewashed Alfred Burden in the first qualifying round 9\u20131, but subsequently lost in the second qualifying round to Marcus Campbell by the narrowest of margins, 8\u20139.[11]\n\nLiang qualified for his first ranking event at the Welsh Open, beating Sean Storey, Jamie Burnett and Rory McLeod to reach the main draw. He defeated Nigel Bond in the first round 5\u20130, but his run was halted when he lost to Graeme Dott 3\u20135.[12]\n\nAt the Malta Cup, however, he lost in the first qualifying round to Paul Davies 3\u20135.[13] At the China Open, he beat David McDonnell and Matthew Couch before losing against Adrian Gunnell 3\u20135 in the third qualifying round.[14] He ended the season falling at the first hurdle at the World Championship, losing to Joe Delaney 5\u201310 in the first qualifying round.[15] Liang ended his debut season on the professional tour ranked 78th, a position that would not guarantee a place in the following season's tour; however, he had finished inside the top 8 of the one year ranking list, which qualified him for a place on the main tour for the next season.[16]\n\n2006/2007\nDuring the 2006\u201307 season, Liang reached at least the second round of qualifying in every ranking event. At the Northern Ireland Trophy, he beat Robert Stephen 5\u20130 before falling to David Gilbert 0\u20135 in qualifying.[17] However, at the Grand Prix, Liang came top of his qualifying group, above more experienced players such as Gerard Greene and Barry Pinches. He finished fourth in his group at the round-robin stage, and although he did not progress to the next round, he did beat former world champion and world number one Stephen Hendry 3\u20130.[18] At the UK Championship, he lost in the second round of qualifying to Jamie Burnett 7\u20139.[19] In the following ranking event, the Malta Cup, he lost to Joe Jogia 3\u20135, again in the second round of qualifying.[20] He qualified for the Welsh Open, his third ranking tournament, by beating Dene O'Kane, Joe Jogia and Mark Davis. He met Nigel Bond again in the last 48, this time losing only 3\u20135.[21]\n\nAt the China Open, he continued his run of reaching the second round of qualifying in every ranking tournament, and beat Robert Stephen before losing to Finland's Robin Hull.[22] At the World Championship, he beat Jeff Cundy before losing to Mike Dunn.[23] After a modest season, he improved on his tour ranking by finishing in 66th place, just outside the top 64;[24] and he topped the one year ranking list to ensure his place on the WSA Tour for next season.[25]\n\n2007/2008\nLiang started the season by almost qualifying for the Shanghai Masters, however Nigel Bond beat him 5\u20133 in the last qualifying round, preventing him from appearing at his home tournament. At the Grand Prix, he could not repeat the success of last season and failed to qualify, finishing third on frame difference. He had more luck at the next tournament, the Northern Ireland Trophy, where he won through the qualifying rounds, beating Fraser Patrick, Joe Delaney and Rory McLeod on the way. He faced Gerard Greene in the last 48, but lost 2\u20135. He had less success at the UK Championship, losing in the second qualifying round to David Roe 2\u20139. He also failed to qualify for the Welsh Open, when he was dispatched in the last qualifying round by Andrew Norman 2\u20135. He fell at the first hurdle at his other home tournament, the China Open, losing in the first qualifying round to Steve Mifsud, who at the end of this season was ranked 54 places below Liang.[26]\n\nAt the World Championship, Liang was the third Chinese player to qualify for the main draw, defeating Ben Woollaston, Rod Lawler, David Gilbert and Ian McCulloch in the qualifying rounds. He met Ken Doherty in the first round of the championship, and defeated him 10\u20135. Before the start of this match, he accidentally entered the arena at the same time as the match officials and had to hurry back; he subsequently received a warm ovation when he entered the arena for a second time after being introduced by MC Rob Walker.[27] For every session thereafter, Walker introduced him as \"Should he stay or should he go... Liang Wenbo\", despite the rhyme occurring due to a mispronunciation of his name (\"bo\" is pronounced \"bwor\" in Chinese).\n\nLiang faced Northern Ireland's Joe Swail in the last 16 of the tournament. In a humorous incident, Liang fluked a red after scattering the balls, but failed to notice and went back to his seat. To the amusement of the spectators, Swail pointed out the mistake and the referee called Liang back to the table.[27] In the 23rd frame, with a 12\u201310 lead, Liang prematurely celebrated winning the match after potting \"match ball\", only to then lose the frame due to a snooker; Swail came back to level the match at 12\u201312. In the final frame, Liang made early breaks of 34 and 30. He missed the final yellow but snookered Swail, leaving the cue ball in the jaws of the pocket. Liang followed up with a safety shot but Swail snookered him behind the blue; Liang failed to hit the yellow ball so Swail had the white replaced. In his second attempt, Liang hit the yellow directly and went on to win the frame 74\u201334, and thus the match, 13\u201312.[28]\n\nThe incident in the last frame proved controversial as the referee replaced the cue ball in the wrong position, giving Liang a better sight of the yellow. At the time, Swail nodded his assent to the referee, but he complained in a post-match interview that Liang had behaved unprofessionally by not pointing out the referee's error. Commentators countered that Swail should have queried the placement of the ball before Liang took his shot, and that, given the tension of the situation, Liang could be forgiven for not thinking clearly.[28]\n\nLiang faced eventual champion Ronnie O'Sullivan in the quarter-final, taking the first two frames with a break of 80 in the first, but O'Sullivan had levelled the match 4\u20134 by the end of the first session. O'Sullivan eased ahead in the second session and eventually won the match 13\u20137. Liang's run to the quarter-finals of the World Championship gained him 5000 ranking points, boosting his final ranking to number 40 in the world.[26] This guaranteed that he would only have to win two qualifying matches to enter the main draw of the ranking tournaments the following season.\n\n2008/2009\nLiang began the new season by qualifying for the last 48 of the Northern Ireland Trophy. He then beat Steve Davis and Peter Ebdon to reach the last 16, where he lost to John Higgins 1\u20135. This result lifted him to a provisional career high of 26 in the world.[29] He reached the main draw of the Grand Prix by winning two qualifying matches, but then succumbed to Ronnie O'Sullivan in the first round of the main draw. He then made a 147 and three other centuries (including two total clearances of 139) in a 5\u20131 victory over Martin Gould in the third qualifying round of the Bahrain Championship. However, he failed to qualify for the main draw, losing 2\u20135 to Michael Judge.[30]\n\nFor the two Chinese events on this season's tour, Liang's two qualifying matches were held over until the venue stages. At the 2008 Shanghai Masters, he defeated Atthasit Mahitthi and Mark Allen to reach the main draw, but lost to Ryan Day 0\u20135 in the first round.[31] Ironically, his second qualifying match for the Welsh Open was held over to ensure that his Welsh opponent Dominic Dale played at the main venue in Newport.\n\nLiang ended the season at the World Championship, after defeating Dave Harold 10\u20133 in the last qualifying round.[32] He lost in the first round of the main draw 8\u201310 against Ding Junhui.\n\n2009/2010\nIn July 2009, Liang won his first professional title, the Beijing International Challenge, beating world number 2 Stephen Maguire 7\u20136 in the final.[33] He made a further breakthrough in August when he reached the final of the Shanghai Masters, becoming only the second Chinese player, and the fourth Asian man, to reach a ranking final. He ultimately finished runner-up to Ronnie O'Sullivan.[34][35]\n\nLiang qualified for the Grand Prix but was defeated 2\u20135 by Peter Ebdon in the first round, winning the first two frames and losing the last five in succession. Prior to this meeting, he had played Ebdon twice, winning 5\u20131 and 5\u20130.[36] He reached the quarter-finals of the UK Championship after defeating Ryan Day 9\u20133, and Mark King 9\u20132. He went on to lose 2\u20139 to John Higgins in the quarter-finals.[37] He failed to qualify for the Welsh Open and the China Open, as he lost 3\u20135 against Michael Judge and 2\u20135 against Andrew Higginson respectively.[38][39]\n\nLiang qualified for the World Championships by defeating Rod Lawler 10\u20132.[40] He was drawn against Ronnie O'Sullivan, but lost 7\u201310.[41] After the quarter-finals of the event, it was clear that Liang would be ranked as number 16 the following season, the only new player entering the top 16 that season.[42]\n\n2010/2011\nLiang began the season at the Wuxi Classic, where he lost in the first round 2\u20135 against Marco Fu.[43] He participated at the Beijing International Challenge to defend his first professional title, but lost in the semi-finals 4\u20136 against eventual winner Tian Pengfei.[44] Liang failed to qualify for the World Open, as he lost 1\u20133 against Andrew Higginson and lost his first round match at the Shanghai Masters 3\u20135 against Matthew Stevens.[43] Having started the season inside the top 16, his results were not sufficient to maintain that position and he slipped out of the top 16.[45] After this, he lost his qualifying matches in the five ranking tournaments.[43]\n\nLiang also participated at the Players Tour Championship, his best performance coming at the third European event, where he reached the final, but lost 0\u20134 against Marcus Campbell.[43] After 12 out of 12 events, he was ranked 14th in the Players Tour Championship Order of Merit.[46] He lost his first round match at the Finals 1\u20134 against Ricky Walden.[47]\n\n2011/2012\nLiang and Ding Junhui represented China at the World Cup and they won in the final 4\u20132 against the Northern Ireland team.[48] During his match against Matthew Stevens in the first round of Australian Goldfields Open, Liang had a chance to make his second maximum break in his career, but he snookered himself on the yellow ball, and the break ended at 120.[49] He won the match 5\u20134 to reach the second round, where he lost 4\u20135 against Ken Doherty.[50] He also qualified for the Shanghai Masters, but lost in the first round 1\u20135 against Neil Robertson.[51] After this, he was unable to qualify for the next two ranking events, as he lost 2\u20136 against Michael White at the UK Championship,[52] and 3\u20135 against Liu Chuang at the German Masters.[53]\n\nIn December 2011, Liang joined Romford-based snooker Academy and management team Grove Leisure.[54] He beat David Gilbert and Rory McLeod, both 4\u20131, to reach the first round of the Welsh Open, where he faced John Higgins and was this time on the wrong end of a 4\u20131 scoreline.[55] He narrowly missed out on a place in the World Open as he was defeated 4\u20135 by Mark King in the final round of qualifying.[56] He also lost in qualifying for the China Open to the eventual winner of the event Peter Ebdon 0\u20135.[57]\n\nLiang played in eleven of the twelve minor-ranking PTC events throughout the season, with a best finish in Event 10, where he lost in the quarter-finals to Dominic Dale. He also reached the last 16 in two other events to finish 38th in the PTC Order of Merit, outside of the top 24 who qualified for the Finals.[58]\n\nHe qualified for the World Championship by defeating Marcus Campbell 10\u20139. He had led the match 8\u20132 and 9\u20135 before Campbell took it to 9\u20139, at which point the match was suspended to allow players on the other tables to begin their sessions. Liang subsequently won the decider with a 72 break and played defending champion Higgins again in the first round.[59] He was involved in another final-frame decider, but was this time on the losing end as he bowed out of the tournament on the opening day, 9\u201310.[60] He finished the season ranked world number 37.[61]\n\n2012/2013\nLiang lost in qualifying for both the Wuxi Classic and the Shanghai Masters to Rod Lawler. He reached the venue stage of the Australian Goldfields Open by beating Thanawat Thirapongpaiboon, but lost 3\u20135 in the first round against Matthew Stevens.[62] Liang beat Anthony McGill and Andrew Higginson to qualify for the UK Championship, where he saw a 4\u20133 lead in the first round against Barry Hawkins turn into a 4\u20136 defeat.[63] Liang failed to qualify for the next two events, but won two matches to enter the main draw of both the Welsh Open and the China Open. In Wales he lost 2\u20134 to local favourite Stevens in the first round, and in his homeland of China he beat Lu Ning 5\u20131 in the wildcard round, before losing 3\u20135 to Stuart Bingham in the first round.[62] Liang had a very consistent season in the Players Tour Championship series as he advanced to, but not past, the last 16 in five of the ten events.[62] This saw him placed 27th on the PTC Order of Merit, one spot short of making the Finals.[64] Liang's season ended when he was beaten 6\u201310 by Mark Davis in the final round of World Championship Qualifying.[65] His end of year ranking was world number 32.[66]\n\n2013/2014\n\nLiang Wenbo at the 2014 German Masters\nIn July 2013, Liang reached the final of the World Games but lost in the gold medal match 0\u20133 to Aditya Mehta.[67] He had an excellent season in the Asian Tour events by reaching the semi-finals of the Zhangjiagang Open where he was defeated 1\u20134 by Michael Holt and at the Zhengzhou Open, where Liang won his first individual title on the World Snooker Tour.[67] He beat Anthony McGill 4\u20133 in the semi-finals before whitewashing L\u00fc Haotian 4\u20130 to claim the \u00a310,000 first prize.[68] In the full ranking events, Liang won five successive frames against defending world champion Ronnie O'Sullivan in the second round of the International Championship to triumph 6\u20134 which marked his first ever success over his opponent having lost in all four previous attempts.[69] He then thrashed Mark Davis 6\u20131 to reach the quarter-finals of a ranking event for the first time in four years, where he lost 3\u20136 against Graeme Dott.[70][71] Liang reached the last 16 of both the German Masters and Welsh Open, losing 2\u20135 to Mark Davis and 2\u20134 to Barry Hawkins respectively.[67] A second final on the Asian Tour followed at the Dongguan Open where Stuart Bingham made four breaks above 50 to defeat him 4\u20131, but Liang still topped the Order of Merit to qualify for the Finals.[72] There, he was beaten 2\u20134 by Yu Delu and Liang was defeated 7\u201310 by Martin Gould in the final round of World Championship qualifying.[67]\n\n2014/2015\nLiang overcame Jamie Burnett 5\u20131 in the first round of the 2014 Wuxi Classic, and then inflicted the first defeat on Mark Selby since he won the World Championship, beating him 5\u20133.[73] In the last 16, Liang was knocked out 2\u20135 by Joe Perry.[74] He lost 3\u20135 against Robert Milkins in the opening round of the Australian Goldfields Open, and in the wildcard round of the Shanghai Masters 1\u20135 to Yan Bingtao.[75] He failed to get past the last 64 of the next two ranking events, but won two matches to reach the German Masters, where he eliminated Li Hang 5\u20131 in the first round. He reached the quarter-finals by coming back from 3\u20134 down against Stuart Bingham to win 5\u20134 on the final pink.[76] He repeated this form when he edged Ryan Day 5\u20134 to play in his second career ranking event semi-final,[77] where he took four frames in a row to hold a narrow 4\u20133 advantage over Shaun Murphy, before losing three successive frames in a 4\u20136 defeat.[78] Liang did not drop a single frame in seeing off Cao Xinlong and Gerard Greene at the Welsh Open, but was then the victim of a whitewash by John Higgins in the third round. At the inaugural World Grand Prix, he lost 3\u20134 to Graeme Dott in the second round.[75] In the final round of World Championship qualifying, he lost the last three frames against compatriot Zhang Anda to be narrowly defeated 9\u201310.[79]\n\n2015/2016\nLiang was heavily beaten 2\u20138 by Thepchaiya Un-Nooh in the final of the 2015 Six-red World Championship.[80] In the third round of the UK Championship, he took advantage of a collapse from Judd Trump to win 6\u20134 after trailing 1\u20134.[81] He then saw off Tom Ford 6\u20135, after which Ford accused Liang of \"boring him off the table\" with slow play.[82] Liang responded by opening his quarter-final match against Marco Fu with three centuries and hung on to edge it 6\u20135, then came from 2\u20134 behind to reach the final by beating David Grace 6\u20134.[83] It was the first final in the history of the event to feature two players from outside the United Kingdom; Liang lost the match 5\u201310 to eventual UK champion Neil Robertson.[84] A week later, he progressed to the semi-finals of the Gibraltar Open, but was whitewashed 0\u20134 by Fu.[85]\n\nLiang's UK final helped him break back into the top 16 in the world rankings to make his debut at the Masters, where he was knocked out 4\u20136 by John Higgins in the opening round.[86] He was whitewashed 0\u20134 by Shaun Murphy in the quarter-finals of the World Grand Prix.[85] After winning three matches to qualify for the World Championship, Liang lost 8\u201310 to Judd Trump after an earlier 7\u20133 lead.[87]\n\n2016/2017\nIn the first round of the Shanghai Masters, Liang was narrowly beaten 4\u20135 by Ronnie O'Sullivan.[88] He won five matches at the English Open, which included a 4\u20133 second round victory over Shaun Murphy, to reach the semi-finals.[89] From 3\u20134 down, Liang made breaks of 134 and 138 and Stuart Bingham made a 116 to lock the score at 5\u20135. Liang took the decider and then ended Judd Trump's 14-match winning streak in the final to win his maiden ranking title 9\u20136.[90] He became the second player from mainland China to win a ranking event and thanked O'Sullivan (with whom he practises daily) for his help.[91] The win also gave him entry to his first Champion of Champions where he lost 0\u20134 in the opening round to Mark Selby.[89]\n\nIn the Scottish Open, Liang reached the quarter-finals, where he lost to Yu Delu 4\u20135.[92] In the Masters, he missed the final black, which would have seen him eliminate O'Sullivan 6\u20134 in the opening round of the Masters, instead going on to lose 5\u20136.[93] A 4\u20130 thrashing of Dominic Dale and a pair of 4\u20133 victories over Mark Allen and Joe Perry moved Liang into the semi-finals of the World Grand Prix, where he was defeated 1\u20136 by Barry Hawkins.[89] In the second round of the World Championship, Liang trailed Ding Junhui 2\u20136 after the first session and 7\u20139 after the second. He then won a trio of frames to take the lead in the match for the first time and would have been 12\u201311 ahead, one frame away from reaching the quarter-finals for the second time, but instead lost 12\u201313.[94] After the event, his end-of-season ranking rose to 11, which was a career-high.[95]\n\n2017/2018\nThough Liang had a decent campaign this season, he was unable to reach the same height as previous season. In his first round match against Ronnie O'Sullivan at the Masters. In a best -of-11 match, Liang led 5-4 up and only needed the final black in the 10th frame to guarantee his place in the quarter final; however, he missed the relatively easy black, and subsequently lost the frame and eventually the match.[96] In his match against Rod Lawler in the World Championship Qualifying round, Liang made a 147 in the 10th frame, the third 147 in his career. But interestingly, he also had a chance to make another 147 in the 12th frame, but he missed the tricky final black.[97]\n\n2018/2019\nLiang had a somewhat of a down season in the 2018/19 campaign. His best results came in the European Masters, China Open, and China Championship, in which he advanced to the third round.[98] Liang only earned a total of 78,500 ranking points, which was 141,100 points shy from his best season in 2016/2017.\n\n2019/2020\nThis season Liang saw some improvement in this form. His best result came in the UK Championship, in which he defeated Dominic Dale, David Grace, Eden Sharav, and Li Hang, before losing to the eventual champion Ding Junhui in the quarter final.[99] Liang also reached the quarter final of the Gibraltar Open, losing 4\u20131 to Judd Trump.", "output": "In July 2009, Liang won his first professional title, the Beijing International Challenge.  Liang also won the 2016 English Open.", "category": "IT"}, {"instruction": "Given this paragraph about mushroom growth, why is it related to the English language expression \"to mushroom\"?", "input": "Many species of mushrooms seemingly appear overnight, growing or expanding rapidly. This phenomenon is the source of several common expressions in the English language including \"to mushroom\" or \"mushrooming\" (expanding rapidly in size or scope) and \"to pop up like a mushroom\" (to appear unexpectedly and quickly). In reality, all species of mushrooms take several days to form primordial mushroom fruit bodies, though they do expand rapidly by the absorption of fluids.", "output": "This is because many types of mushrooms exhibit rapid growth, seemingly overnight due to fluid absorption.", "category": "IT"}, {"instruction": "Why Mauritius is famous", "input": "", "output": "1. Because it has nice resorts\n2. Beaches are very nice \n3, Foods are awesome", "category": "IT"}, {"instruction": "How does a human do arithmetic calculation as fast as a calculator?", "input": "", "output": "Use a tech called Mental abacus. When a person reads the numbers, he or she will mentally visualize an abacus and do the calculation by moving the beads in the abacus. The calculation can be done in a great speed.", "category": "IT"}, {"instruction": "Which of the following months have 31 days? Classify them as 'yes' or 'no'. January, February, March, April, May, June, July, August, September, October, November and December.", "input": "", "output": "'yes', 'no', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'no', 'yes', 'no', 'yes'.", "category": "IT"}, {"instruction": "from the given text can you please create a list of events associated with life of Brandon Beane.", "input": "On May 9, 2017, Beane was hired by Buffalo as the general manager, joining former Panthers defensive coordinator Sean McDermott, who had been hired as head coach. After the Bills fired previous general manager Doug Whaley, they opted to hire someone familiar to McDermott due to conflicts within the previous head coach-GM tandems under Whaley.\n\nWithin the first season, Beane traded away many of the players Whaley had signed, drafted, or extended, including receiver Sammy Watkins, cornerback Ronald Darby, linebacker Reggie Ragland, and defensive tackle Marcell Dareus. Though Beane arguably had his sights on a long-term rebuild while purging unfavorable contracts for the Bills, some sports commentators criticized his tactics. In 2017, Beane's first season with the team, the Bills ended their 17-year playoff drought. Beane has since drafted players such as quarterback Josh Allen, linebacker Tremaine Edmunds, and defensive tackle Ed Oliver and brought in numerous offensive free agents with the team's new cap space. On December 10, 2020, Beane signed a contract extension through 2025.", "output": "1. Former Panthers defensive coordinator Sean McDermott was appointed head coach before Buffalo hired Beane as general manager on May 9, 2017.\n2. Conflicts between the previous head coach-GM tandems under Doug Whaley led the Bills to decide to employ someone known to McDermott after firing Whaley as general manager.\n3. During the first season, Beane traded away a large number of the players Whaley had signed, selected, or extended, including defensive tackle Marcell Dareus, linebacker Reggie Ragland, cornerback Ronald Darby, receiver Sammy Watkins, and cornerback Ronald Darby.\n4. Despite the fact that Beane removing unfavourable contracts for the Bills may have been part of a long-term reconstruction, some sports analysts criticised his methods.\n5. The Bills overcame their 17-year postseason drought in 2017, Beane's first campaign in charge of the group. Since then, Beane has signed multiple offensive free agents and selected players like quarterback Josh Allen, linebacker Tremaine Edmunds, and defensive tackle Ed Oliver with the team's new cap room.\n6. Beane signed a contract extension through 2025 on December 10, 2020.", "category": "IT"}, {"instruction": "Name five NBA teams in the Western Conference.", "input": "", "output": "Five NBA teams in the Western Conference are the Phoenix Suns, Memphis Grizzlies, Portland Trail Blazers, San Antonio Spurs, and Oklahoma City Thunder.", "category": "IT"}, {"instruction": "Given this reference text, what was John Dalberg-Acton's most famous pronouncement, and to whom did he make it?", "input": "John Emerich Edward Dalberg-Acton, 1st Baron Acton, 13th Marquess of Groppoli, KCVO, DL (10 January 1834 \u2013 19 June 1902), better known as Lord Acton, was an English Catholic historian, politician, and writer. He is best remembered for the remark he wrote in a letter to an Anglican bishop in 1887: [1]\n\n\"Power tends to corrupt, and absolute power corrupts absolutely. Great men are almost always bad men\u2026\"\n\nIn 1870, along with his mentor D\u00f6llinger, Acton opposed the moves to promulgate the doctrine of papal infallibility in the First Vatican Council, travelling to Rome to lobby against it, ultimately unsuccessfully.[15] Unlike D\u00f6llinger, Acton did not become an Old Catholic, and continued attending Mass regularly; he received the last rites on his deathbed.[16] The Catholic Church did not try to force his hand. It was in this context that, in a letter he wrote to scholar and ecclesiastic Mandell Creighton, dated April 1887, Acton made his most famous pronouncement:\n\nBut if we might discuss this point until we found that we nearly agreed, and if we do agree thoroughly about the impropriety of Carlylese denunciations and Pharisaism in history, I cannot accept your canon that we are to judge Pope and King unlike other men, with a favourable presumption that they did no wrong. If there is any presumption it is the other way, against the holders of power, increasing as the power increases. Historic responsibility has to make up for the want of legal responsibility. Power tends to corrupt, and absolute power corrupts absolutely. Great men are almost always bad men, even when they exercise influence and not authority, still more when you superadd the tendency or the certainty of corruption by authority. There is no worse heresy than that the office sanctifies the holder of it. That is the point at which the negation of Catholicism and the negation of Liberalism meet and keep high festival, and the end learns to justify the means. You would hang a man of no position like Ravaillac; but if what one hears is true, then Elizabeth asked the gaoler to murder Mary, and William III of England ordered his Scots minister to extirpate a clan. Here are the greatest names coupled with the greatest crimes; you would spare those criminals, for some mysterious reason. I would hang them higher than Haman, for reasons of quite obvious justice, still more, still higher for the sake of historical science.[1]\n\nThenceforth he steered clear of theological polemics. He devoted himself to reading, study and congenial society. With all his capacity for study, he was a man of the world and a man of affairs, not a bookworm.[6] His only notable publications were a masterly essay in the Quarterly Review of January 1878 on \"Democracy in Europe;\" two lectures delivered at Bridgnorth in 1877 on \"The History of Freedom in Antiquity\" and \"The History of Freedom in Christianity\"\u2014these last the only tangible portions put together by him of his long-projected \"History of Liberty;\" and an essay on modern German historians in the first number of the English Historical Review, which he helped to found (1886). After 1879 he divided his time between London, Cannes, and Tegernsee in Bavaria, enjoying and reciprocating the society of his friends. In 1872 he had been given the honorary degree of Doctor of Philosophy by the University of Munich; in 1888 Cambridge gave him the honorary degree of Doctor of Laws, and in 1889 Oxford the Doctor of Civil Law; and in 1890 he received the high academic accolade of being made a fellow of All Souls College, Oxford.[6]", "output": "In a letter to Mandell Creighton, John Dalberg-Acton made his most famous pronouncement: \"Power tends to corrupt, and absolute power corrupts absolutely. Great men are almost always bad men, even when they exercise influence and not authority, still more when you superadd the tendency or the certainty of corruption by authority.\"", "category": "IT"}, {"instruction": "Tell me if these are examples of fine art mediums: painting, sculpture, architecture, music, poetry", "input": "", "output": "Yes, traditionally the mediums of painting, sculpture, architecture, music, and poetry are all examples of fine art. In modern times, the categorization of fine arts also includes film, video, and photography.", "category": "IT"}, {"instruction": "Given these paragraphs about battery storage power stations, for how long battery power storage was cheaper than open cycle gas turbine power as of 2019?", "input": "As of 2021, the power and capacity of the largest individual battery storage power plants is an order of magnitude less than that of the largest pumped storage power plants, the most common form of grid energy storage. For example, the Bath County Pumped Storage Station, the second largest in the world, can store 24GWh of electricity and dispatch 3GW while the first phase of Vistra Energy's Moss Landing Energy Storage Facility can store 1.2GWh and dispatch 300MW. Grid batteries do not however have to be large, and smaller ones can be deployed widely across a grid for greater redundancy.\n\nAs of 2019, battery power storage is cheaper than open cycle gas turbine power for use up to two hours, and there was around 365 GWh of battery storage deployed worldwide, growing extremely rapidly. Levelized cost of electricity from battery storage has fallen rapidly, halving in two years to US$150 per MWh as of 2020.", "output": "As of 2019, battery power storage is cheaper than open cycle gas turbine power for use up to two hours.", "category": "IT"}, {"instruction": "Why is Massachusetts known as the Bay State?", "input": "", "output": "Massachusetts' nickname, the \u201cBay State,\u201d refers to one of the state's most famous bays, Cape Cod, where the Pilgrims first settled. It also honors the royal charter that was given to the Massachusetts Bay Company in 1629 to promote and encourage settlement to the land.", "category": "IT"}, {"instruction": "Please provide details on  Brisbane International tournament with given text as a reference", "input": "The Brisbane International established in 2009 is a professional tennis tournament played on outdoor hardcourts in Brisbane, Queensland in Australia. It is a WTA Premier tournament of the WTA Tour and was part of the ATP World Tour 250 series of the ATP World Tour until 2019, when it was dropped from the ATP Tour.\n\nThe tournament is held annually in January at the Queensland Tennis Centre just before the first Grand Slam tournament of the season, the Australian Open (part of the Australian Open Series). It is owned by Tennis Australia.", "output": "1. The Brisbane International, which began in 2009, is an outdoor hardcourt professional tennis competition held in Brisbane, Queensland, Australia.\n2. It is a WTA Premier competition on the WTA Tour, and up until 2019, it was a part of the ATP World Tour 250 series on the ATP World Tour.\n3. The competition is conducted each year in January at the Queensland Tennis Center, right before the season's first Grand Slam event, the Australian Open. (part of the Australian Open Series).\n4. Tennis Australia is the owner.", "category": "IT"}, {"instruction": "Explain how sampling bias in Voice Of Customer research could adversely affect a marketing analysis of customers' post-purchase experience with a product.", "input": "", "output": "Recently I bought a TV from Amazon after extensive research and analysis. The TV manufacturer promptly followed up two weeks after the purchase. The post-purchase experience survey had questions like the following: \n\n\n\u00b7\u202f \tDid you buy it from a store/online? \n\n\u00b7\u202f \tAre you satisfied with your order? \n\n\u00b7\u202f \tWhich store did you visit? \n\n\u00b7\u202f \tWas the self-assembly instructions easy to follow? \n\n\u00b7\u202f \tWhat other items would you consider purchasing from our brand? \n\n\u202f \nThe above questions were too generic from the TV manufacturer, and they missed the mark in identifying me as a persona and my buying criteria. I bought the TV for my basement as a secondary TV, and I picked a TV brand with standard features to be cost-effective. Below are a few sampling biases from the survey \n\n\nBuyer\u2019s criteria \n\nThe survey didn\u2019t identify the TV for primary usage. I purchased this as a secondary TV, and my expectations were low, but I\u2019m satisfied with the TV. I wouldn\u2019t have picked this brand if this was my primary TV purchase. This is a classic example of sampling bias where the survey didn\u2019t identify my buying criteria and resulted in skewed results. \n\nAudience segmentation \n\nAs a millennial, my primary purchase channel is online. I rely heavily on YouTube reviews and blogs for my research. The TV survey aimed at in-store purchases and needed to capture the online experience correctly. This type of sampling bias results in incorrect market analysis.", "category": "IT"}, {"instruction": "Why did people stop using Perl?", "input": "", "output": "Perl was declared death because the new Perl6, in development since 2000, wasn't there yet to get into production modes. Perl was seen as the old language without any future.", "category": "IT"}, {"instruction": "What type of creatures undergo Metamorphosis?", "input": "Metamorphosis is a biological process by which an animal physically develops including birth transformation or hatching, involving a conspicuous and relatively abrupt change in the animal's body structure through cell growth and differentiation.[1] Some insects, fish, amphibians, mollusks, crustaceans, cnidarians, echinoderms, and tunicates undergo metamorphosis, which is often accompanied by a change of nutrition source or behavior.[2] Animals can be divided into species that undergo complete metamorphosis (\"holometaboly\"), incomplete metamorphosis (\"hemimetaboly\"), or no metamorphosis (\"ametaboly\").[3]", "output": "Some insects, fish, amphibians, mollusks, crustaceans, cnidarians, echinoderms, and tunicates undergo metamorphosis", "category": "IT"}, {"instruction": "What is \"A Song of Ice and Fire\"?", "input": "", "output": "\"A Song of Ice and Fire\" is a medieval fantasy book series created by an American author George R.R. Martin who has been coined the American J.R.R. Tolkien.\n\nIt consists of five books published so far:\n- \"A Game Of Thrones\"\n- \"A Clash Of Kings\"\n- \"A Storm of Swords\"\n- \"A Feast for Crows\"\n- \"A Dance with Dragons\" \n\nThe series remains unfinished with the last two books in the series still unpublished:\n- \"The Winds Of Winter\"\n- \"A Dream Of Spring\"", "category": "IT"}, {"instruction": "Who was Margaret Thatcher?", "input": "Margaret Hilda Thatcher, Baroness Thatcher, LG, OM, DStJ, PC, FRS, HonFRSC (n\u00e9e Roberts; 13 October 1925 \u2013 8 April 2013), was a British politician and stateswoman who served as Prime Minister of the United Kingdom from 1979 to 1990 and Leader of the Conservative Party from 1975 to 1990. She was the first female British prime minister and the longest-serving British prime minister of the 20th century. As prime minister, she implemented economic policies that became known as Thatcherism. A Soviet journalist dubbed her the \"Iron Lady\", a nickname that became associated with her uncompromising politics and leadership style.", "output": "Margaret Thatcher was the first woman to be elected prime minister of Great Britain and Northern Ireland, serving in this role from her first election victory in 1979 until she was forced out of office by members of her own party in 1990. During this time she transformed the economic situation in the United Kingdom by introducing economic policies intended to reverse high inflation and weak growth. By constraining the power of trades unions and overseeing extensive deregulation and privatisation, Thatcher helped to create a period of extended growth and economic success. Together with Ronald Reagan, she was also instrumental in recognising and supporting the opportunity to end communist rule in the Soviet Union, where she was dubbed the 'Iron Lady', through her friendship with the Russian leader, Mikhail Gorbachev. Her legacy was to end the so-called 'post-war consensus' in the UK (characterised by high taxes, regulation and nationalisation) and to replace it with policies that encouraged free-enterprise and personal responsibility while acknowledging the importance of the welfare state, provided it was administered responsibly. Although disliked by many on the left for the way that she challenged excessive union power, she is generally acknowledged as the most important British politician of the late twentieth century.", "category": "IT"}, {"instruction": "What is a console war in video games?", "input": "In the video game industry, a console war describes the competition between two or more video game console manufacturers in trying to achieve better consumer sales through more advanced console technology, an improved selection of video games, and general marketing around their consoles. While console manufacturers are generally always trying to out-perform other manufacturers in sales, these console wars engage in more direct tactics to compare their offerings directly against their competitors or to disparage the competition in contrast to their own, and thus the marketing efforts have tended to escalate in back-and-forth pushes.\n\nWhile there have been many console wars to date, the term became popular between Sega and Nintendo during the late 1980s and early 1990s as Sega attempted to break into the United States video game market with its Sega Genesis console. Through a novel marketing approach and improved hardware, Sega had been able to gain a majority of the video game console market by 1991, three years after the Genesis\u2019 launch. This caused back and forth competition between the two companies throughout the early 1990s. However, Nintendo eventually regained its market share and Sega stopped making home console hardware by 2001.", "output": "The video game console market started in 1972 with the release of the first home console, the Magnavox Odyssey. As more manufacturers entered the market and technology improved, the market began to coalesce around the concept of console generations, groupings of consoles with similar technical specifications that vied in the consumer marketplace. Since 1972, there have been nine such console generations, with two to three dominant manufacturers controlling the marketplace as an oligopoly.\n\nAs with most industries without a single dominant leader, console manufacturers have marketed their products in a manner to highlight them in a more favorable manner compared to their competitors', or to focus on features that their competitors may lack, often in aggressive manners. For example, console manufacturers in the 1980s and 1990s heavily relied on the word size of the central processor unit, emphasizing that games had better capabilities with 16-bit processors over 8-bit ones. This type of aggressive marketing led video game journalists to call the competitive marketing a \"war\" or \"battle\" as early as August 1988. As each new console generation emerged with new marketing approaches, journalists and consumers continued to use variations of the \"war\" language, including \"system wars\" and \"console wars\". By the early 2000s, the term \"console war\" was most commonly used to describe heated competition between console manufacturers within any generation.\n\nWhile not the only console war, the rivalry between Sega and Nintendo for dominance of the North American video game market in the late 1980s and early 1990s is generally the most visible example of a console war. It established the use of aggressive marketing and advertising tactics by each company to try to gain control of the marketplace, and ended around 1995 when a new player, Sony, entered and disrupted the console space.\n\nThe United States video game industry suffered a severe market crash in 1983 from numerous factors which led to a larger market recession and increasing popularity of personal computers as a video game platform. A key contributing factor to the crash was the loss of publishing control for console games. Early success by some of the first third-party developers like Activision for the Atari VCS console led to venture capitalists bringing in teams of inexperienced programmers to try to capture the same success, but only managed to flood the market with poor quality games, which made it difficult for good quality games to sell. The video game crash impacted other factors in the industry that were already in decline, such as video game arcades.\n\nIn Japan, Nintendo had released its Famicom (Family Computer) console in 1983, one of the first consoles of the third generation or the \"8-bit\" generation. Japan did not have a similar third-party development system in place, and Nintendo maintained control on the manufacturing of game cartridges for the Famicom using a licensing model to limit which third-party games were published on it. The Famicom did launch with a technical fault that Nintendo scrambled to fix, but by the end of 1984, the Famicom was the best-selling console in Japan.[8] Nintendo looked to release the unit in the United States, but recognized that the market was still struggling from the 1983 crash. Nintendo took several steps to redesign the Famicom prior to a United States launch. It was made to look like a VCR unit rather than a console, and was given the name the \"Nintendo Entertainment System\" to distance it from being a video game console. Further, Nintendo added a special 10NES lockout system that worked as a lock-and-key system with game cartridges to further prevent unauthorized games from being published for the system and avoid the loss of publishing control that had caused the 1983 crash. The NES revitalized the U.S. video game industry and established Nintendo as the dominant name in video game consoles over Atari. In lifetime sales, the NES had sold nearly 62 million units worldwide, with 34 million in North America.\nAt the same time, Sega was looking to get into the video game console industry as well, having been a successful arcade game manufacturer, but due to the downturn in arcade game business, looked to use that expertise for the home market.[13] They released the SG-1000 console in Japan the same day as the Famicom in 1983, but sold only 160,000 units of the SG-1000 in its first year.\n\nSega redesigned the SG-1000 twice to try to build a system to challenge Nintendo's dominance; the SG-1000 Mark II remained compatible with the SG-1000 but failed to gain any further sales. The next iteration, the Sega Mark III, was released in 1985, using Sega's arcade hardware for its internals to provide more refined graphics. The console was slightly more powerful than the Famicom, and Sega's marketing attempted to push on the more advanced graphics their system offered over the Famicom. However, Sega found that Nintendo had also contracted other developers to only develop their games exclusive to the Famicom, and Sega was forced to develop their own titles or to port the games from the other developers themselves, limiting the size of the Mark III's library in Japan.[18] Sega attempted to follow Nintendo with a worldwide release of the Mark III, rebranded as the Master System. The Master System was released in the United States in 1986, but Nintendo had similar licensing practices in the U.S. to keep developers exclusive to the NES, limiting the library of games that Sega could offer and to also ensure that another gaming crash didn't begin. Further, Sega's third-party distributor, the toy company Tonka, opted against localizing several of the Japanese games Sega had created, further capping the game library Sega could offer in the U.S. Only a total estimated two million systems were sold.\n\nThe Sega and Nintendo console war primarily centered on the launch of the Sega Genesis to try to outsell the Nintendo Entertainment System in the United States.\nThe fourth generation of video game consoles was started by the launch of NEC's PC Engine in 1987 in Japan. While the PC Engine used an 8-bit CPU, it included 16-bit graphic rendering components, and NEC marketed this heavily as a 16-bit game console to distinguish it from the Famicom and Mark III; when NEC brought the PC Engine worldwide, it was rebranded as the \"TurboGrafx-16\" to emphasize this. After the release of the TurboGrafx-16, use of the bit designation caught on. Which led manufacturers to focus their advertising heavily on the number of bits in a console system for the next two console generations.\n\nNEC was another competitor to Sega and Nintendo. Following a similar path they had done for the Mark III, Sega used their arcade game technology, now using 16-bit processor boards, and adapted those into a home console, released in Japan in October 1988 as the Mega Drive.[22] Compared to its prior consoles, the Mega Drive was designed to be more mature-looking and less like a toy compared to the Famicom to appeal to an older demographic of gamers, and \"16-bit\" was emblazoned on the console's case to emphasize this feature. While the system was positively received by gaming magazines like Famitsu, it was overshadowed by the release a week prior of Super Mario Bros. 3 for the Famicom.\n\nAs with the Master System, Sega also planned for a major push of the Mega Drive into the United States to challenge Nintendo's dominance among other markets, with the unit rebranded as the Sega Genesis. Sega was dissatisfied with Tonka's handling of the Master System and so sought a new partner through the Atari Corporation led by Jack Tramiel. Tramiel was bullish on the Genesis due to its cost, and turned down the offer, instead focusing more on the company's computer offerings. Sega instead used its dormant Sega of America branch to run a limited launch of the console in August 1989 in test markets of New York City and Los Angeles, with its launch system being bundled with the port of the arcade game Altered Beast.\n\nIn October 1989, the company named former Atari Entertainment Electronics Division president Michael Katz as CEO of Sega of America to implement a marketing strategy for a nation-wide push of the Genesis with a target of one million consoles. Katz used a two-prong strategy to challenge Nintendo. The first was to stress the arcade-like capabilities of the Genesis with the capabilities of games like Altered Beast compared to the simpler 8-bit graphics of the NES, and devising slogans such as \"Genesis does what Nintendon't.\"Katz also observed that Nintendo still held most of the rights to arcade game ports for the NES, so the second part of his strategy was to work with the Japanese headquarters of Sega to pay celebrities for their naming rights for games like Pat Riley Basketball, Arnold Palmer Golf, Joe Montana Football, and Michael Jackson's Moonwalker.\n\nMost of these games were developed by Sega's Japanese programmers, though notably, Joe Montana Football had originally been developed by Mediagenic, the new name for Activision after it had become more involved in publishing and business application development alongside games. Mediagenic had started a football game which Katz wanted to brand under Joe Montana's name, but unknown to Katz at the time, the game was only partially finished due to internal strife at Mediagenic. After the deal had been completed and Katz learned of this, he took the game to Electronic Arts. Electronic Arts had already made itself a significant force in the industry as they had been able to reverse engineer the cartridge format for both the NES and the Genesis, though Electronic Arts' CEO Trip Hawkins felt it was better for the company to develop for the Genesis. Electronic Arts used their reverse engineering knowledge as part of their negotiations with Sega to secure a freer licensing contract to develop openly on the Genesis, which proved beneficial for both companies. At the time Katz had secured Mediagenic's Joe Montana football, Electronic Arts was working on its John Madden Football series for personal computers. Electronic Arts was able to help bring Joe Montana Football, more as an arcade title compared to the strategic John Madden Football, to reality, as well as bringing John Madden Football over as a Genesis title.\n\nThe second push in 1991\nThe Genesis still struggled in the United States against Nintendo, and only sold about 500,000 units by mid-1990. Nintendo had released Super Mario Bros. 3 in February 1990 which further drove sales away from Sega's system. Nintendo themselves did not seem to be affected by either Sega's or NEC's entry into the console market.[23] Sega's president Hayao Nakayama wanted the company to develop an iconic mascot character and build a game around it as one means to challenge Nintendo's own Mario mascot.[24] Company artist Naoto Ohshima came up with the concept of Sonic the Hedgehog, a fast anthropomorphic character with an \"attitude\" that would appeal to teenagers and incorporating the blue color of Sega's logo, and Yuji Naka helped to develop the game Sonic the Hedgehog to showcase the character as well as the graphics and processing speed of the Genesis.The game was ready by early 1991 and launched in North America in June 1991.\n\nSeparately, Sega fired Katz and replaced him with Tom Kalinske as Sega of America's new CEO in mid-1990. Kalinske had been president of Mattel and did not have much experience in video games but recognized the razor and blades model, and developed a new strategy for Sega's push to challenge Nintendo's dominance in America with four key decisions, which included cutting the price of the Genesis from $189 to $149, and continue the same aggressive marketing campaigns to make the Genesis look \"cool\" over the NES and of Nintendo's upcoming Super Nintendo Entertainment System (SNES). Further, Kalinske pushed hard for American developers like Electronic Arts to create games on the Genesis that would better fit American preferences, particularly sports simulation games which the console had gained a reputation for. Finally, Kalinske insisted on making Sonic the Hedgehog the bundled game on the system following its release in June 1991, replacing Altered Beast and even offering those that had purchased a Genesis with Altered Beast a trade-in replacement for Sonic.\n\nUnder Kalinske, Sega also revamped their advertising approach, aiming for more of a young adult audience, as Nintendo still was positioning the SNES as a child-friendly console. Advertising focused on Sonic, the edgier games in the Genesis library, and its larger library of sports games which appealed to this group. Television ads for the Genesis and its games ended with the \"Sega Scream\" \u2013 a character shouting the name \"Sega\" to the camera in the final shot \u2013 which also caught on quickly.\n\nThese changes, all predating the SNES's planned North American release in September 1991, gave Sega its first gain on Nintendo in the U.S. market. Further, the price cut to $149 made the Genesis a cheaper option than the planned $199 price for the SNES led many families to purchase the Genesis instead of waiting for the SNES. The Genesis had a larger library of games for the U.S. with over 150 titles by the time the SNES launched alongside eight games, and Sega continued to push out titles that drew continuous press throughout the year, whereas with the SNES, its game library was generally held up by flagship Mario and Zelda games that only came at out once a year, along with less which further made the Genesis a more desirable option.\n\nFor Nintendo, up until 1991, they had been passive towards Sega's approach in North America, but as the SNES launch approach, the company recognized that they were losing ground. The company shifted their advertising in North America to focus on more of the advanced features of the SNES that were not present in the Genesis, such as its Mode 7 to create simulated 3D perspective effects.The initial shipment of one million SNES units sold out quickly and a total of 3.4 million SNES were sold by the end of 1991, a record for a new console launch, but the Genesis maintained strong sales against the SNES. The Genesis's resilience against the SNES led several of Nintendo's third-party developers to break their exclusive development agreements with Nintendo and seek out licenses to also develop for Genesis. Including Acclaim, Konami, Tecmo, Taito, and Capcom. The latter of which arranged to have a special licensing mechanism with Sega, allowing them to publish select titles exclusively for the Genesis.\n\nDuring this period, the push for marketing by both Nintendo and Sega led to the growth of video game magazines. Nintendo had already established Nintendo Power in 1988 in part to serve as a help guide for players on its popular titles, and was able to use this further to advertise the SNES and upcoming games. Numerous other titles grew in the late 1980s and early 1990s, giving Sega the opportunity to market its games heavily in these publications.\n\nThe war escalates in 1992 and 1993\nNintendo publicly acknowledged that it knew it was no longer in the dominant position in the console market by 1992. A year into the SNES's release, the SNES's price was lowered to $149 to match the Genesis, to which Sega reduced the Genesis to $129 shortly after. The SNES was helped by Capcom's decision to maintain exclusivity of its home port of its popular brawler arcade game Street Fighter II: The World Warrior to the SNES when it was released in June 1992. While the SNES outsold the Genesis in the U.S. in 1992. the Genesis still had a larger install base. By the start of 1993, the Genesis had captured about 55% of the market, a stark contrast to 1990 when Nintendo had controlled 90% of the market.\n\nThe success of Street Fighter II both as an arcade game and as a home console title led to the growth of the fighting game genre, and numerous variations from other developers followed. Of significant interest was Midway's Mortal Kombat, released to arcades in 1992.[32] Compared to most other fighting games at the time, Mortal Kombat was much more violent. The game showed combatants\u2019 blood splatter during combat and allowed players to end matches in graphically intense \"fatalities.\u201d Because of its controversial style and gameplay, the game proved extremely popular in arcades.\nBy 1993, Both Nintendo and Sega recognized the need to have Mortal Kombat on their consoles. However, Nintendo, fearing issues with the game\u2019s violence, licensed a \u201cclean\u201d version of the game from Acclaim for the SNES. Which included replacing the blood splatter with sweat and removing the aforementioned fatalities. Sega also licensed a censored version of the game for the Genesis. However, players could enter a cheat code that reverted the game back to its original arcade version.[33] Both home versions were released in September, and approximately 6.5 million units were sold over the game\u2019s lifetime. But the Genesis version was more popular with three to five times more sales than its SNES counterpart.\n\nExternal video\nvideo icon C-SPAN footage of the first congressional hearing on December 9, 1993.\nThe popularity of the home console version of Mortal Kombat, coupled with other moral panics in the early 1990s, led to concerns from parents, activists and lawmakers in the United States, leading up to the 1993 congressional hearings on video games first held in December. Led by Senators Joe Lieberman and Herb Kohl, the Senate Committees on Governmental Affairs and the Judiciary brought several of the video game industry leaders, including Howard Lincoln, vice president of Nintendo of America, and Bill White, vice president of Sega of America, to discuss the way they marketed games like Mortal Kombat and Night Trap on consoles to children. Lincoln and White accused each other's companies of creating the issue at hand. Lincoln stated that Nintendo had taken a curated approach to selecting games for their consoles, and that violent games had no place in the market. White responded that Sega purposely was targeting an older audience than Nintendo, and had created a ratings system for its games that it had been trying to encourage the rest of the industry to use; further, despite Nintendo's oversight, White pointed out that there were still many Nintendo titles that incorporated violence.With neither Lincoln nor White giving much play, Lieberman concluded the first hearing with a warning that the industry needs to come together with some means to regulate video games or else Congress would pass laws to do this for them.\n\nBy the time of the second hearing in March 1994, the industry had come together to form the Interactive Digital Software Association (today the Entertainment Software Association) and were working to establish the Entertainment Software Rating Board (ESRB), a ratings panel, which ultimately was introduced by September 1994.[34] Despite Sega offering its ratings system as a starting point, Nintendo refused to work with that as they still saw Sega as their rival, requiring a wholly new system to be created.[35] The ESRB eventually established a form modelled off the Motion Picture Association of America (MPAA)'s rating system for film, and the committee was satisfied with the proposed system and allowed the video game industry to continue without further regulations.\n\nThe arrival of Sony and the end of the war\n\n\n\nThe Sega Saturn (top) and Nintendo 64 (middle) struggled against Sony's newcomer, the PlayStation, which ultimately ended Sega and Nintendo's console war.\nIn 1994 and 1995, there was a contraction in the video game industry, with NPD Group reporting a 17% and 19% year-to-year drop in revenue. While Sega had been outperforming Nintendo in 1993, it still carried corporate debt while Nintendo remained debt-free from having a more dominant position in the worldwide market, even beating Sega in the North American and US market winning the 16 bit console war. To continue to fight Nintendo, Sega's next console was the Sega Saturn, first released in November 1994 in Japan. It brought in technology used by Sega's arcade games that used 3d polygonal graphics, and launch titles featured home versions of these arcade games including Virtua Fighter. While Virtua Fighter was not a pack-in game, sales of the title were nearly 1:1 with the console in Japan.[36] Sega, recognizing that they had numerous consoles with disparate games they were now trying to support, decided to put most of their attention onto the Saturn line going forward, dropping support for the Genesis despite its sales still being strong in the United States at the time.\n\nAt the same time, a new competitor in the console marketplace emerged, Sony Computer Entertainment, with the introduction of the PlayStation in December 1994. Sega, aware of Sony's potential competition in Japan, made sure to have enough Saturns ready for sale on the day the PlayStation first shipped as to overwhelm Sony's offering.\n\nBoth Sega and Sony turned to move these units to the North American market. With the formation of the ISDA, a new North American tradeshow, the Electronic Entertainment Expo (E3) was created in 1995 to focus on video games, to distinguish it from the Consumer Electronics Show (CES), which covered all home electronics. Nintendo, Sega and Sony gave their full support to E3 in 1995. Sega believed they had the stronger position going into E3 over Sony, as gaming publications, comparing the Saturn to the PlayStation, rated the Saturn as the better system. At the first E3 in May 1995, Sega's Kalinske premiered the North American version of the Saturn, announced its various features and its selling price of $399, and said that while it would officially launch that same day, they had already sent a number of systems to selected vendors for sale.[36] Sony's Olaf Olafsson of Sony Electronic Publishing began to cover the PlayStation features, then invited Steve Race, president of Sony Computer Entertainment America to the stage. Race stated the launch price of the PlayStation, \"$299\", and then left to \"thunderous applause\".[36] The surprise price cut caught Sega off-guard, and, in addition to several stores pulling Sega from their lineup due to being shunned from early Saturn sales, the higher price point made it more difficult for them to sell the system.[36] When the PlayStation officially launched in the United States in September 1995, its sales over the first two days exceeded what the Saturn had sold over the prior five months.[37] Because Sega had invested heavily on Saturn into the future, Sony's competition drastically hurt the company's finances.\n\nIn the case of Nintendo, they bypassed the 32-bit CPU and instead their next offering was the Nintendo 64, a 64-bit CPU console first released in June 1996.[38] While this gave them powerful capabilities such as 3D graphics to keep up and surpass those on the Saturn and PlayStation, it was still a cartridge-based system limiting how much information could be stored for each game. This decision ultimately cost them Square Soft who moved their popular Final Fantasy series over to the PlayStation line to take advantage of the larger space on optical media.[38] The first PlayStation game in the series, Final Fantasy VII, drove sales of the PlayStation, further weakening Nintendo's position and driving Sega further out of the market.\n\nBy this point, the console war between Nintendo and Sega had evaporated, with both companies now facing Sony as their rival. Sega made one more console, the Dreamcast, which had a number of innovative features including a built-in modem for online connectivity, but the console's lifespan was short-lived in part due to the success of Sony's next product, the PlayStation 2, one of the best-selling home consoles of all time.[41] Sega left the home console hardware business in 2001 to focus on software development and licensing.[40] Nintendo remains a key player in the home console business, but more recently has taken a \"blue ocean strategy\" approach to avoid competing directly with Sony or Microsoft on a feature-for-feature basis with consoles like the Wii, Nintendo DS, and Nintendo Switch.\n\n\nThe Sega/Nintendo console war is the subject of the non-fiction novel Console Wars by Blake Harris in 2014, as well as a film adaption/documentary of the book in 2020.\n\nSega and Nintendo have since collaborated on various software titles. Sega has developed a biennial Mario & Sonic at the Olympics series of sports games based on the Summer and Winter Olympics since 2008 featuring characters from both the Super Mario and Sonic series,[45] while Nintendo has developed the Super Smash Bros. crossover fighter series for numerous Nintendo properties that has included Sonic as a playable character along with other Sonic characters in supporting roles since Super Smash Bros. Brawl.\n\n\n\n\n1990s handheld consoles.\nA number of major handheld consoles were released on the market within about a year of each other: Nintendo's Game Boy, Sega's Game Gear, and the Atari Lynx. While the Game Boy used a monochromatic display, both the Game Gear and Lynx had colour displays. As these handheld releases were alongside the Sega v. Nintendo console war, they were also subject to heavy marketing and advertising to try to draw consumersHowever, the Game Boy ultimately won out in this battle, selling over 118 million units over its lifetime (including its future revisions) compared to 10 million for the Game Gear and 3 million for the Lynx. The Game Boy initially sold for $50 or more cheaper than its competitors, and had a larger library of games, including what is considered the handheld's killer app, Tetris, that drew non-gamers to purchase the handheld to play it.\n\n\nThe Hyperdimension Neptunia series of video games started as a parody of the console wars, incorporating personified consoles, developers, consumers, and other such figures within the gaming industry.", "category": "IT"}, {"instruction": "Does structured streaming support joins?", "input": "", "output": "Yes, joins are a feature supported by Apache Spark's Structured Streaming engine. The feature allows for joins between two streams of data, known as stream-stream joins. It is recommended to apply watermarking on the streams to avoid late data and ensure correctness. Stream-static joins are also supported and do not require watermarking to manage state.", "category": "IT"}, {"instruction": "Can you name five of the most successful professional golfers in history?", "input": "", "output": "Tiger Woods, Jack Nicklaus, Arnold Palmer, Sam Snead, Bobby Jones", "category": "IT"}, {"instruction": "Summarize Clemson University to me", "input": "Clemson University (/\u02c8kl\u025bmp.s\u0259n, \u02c8kl\u025bm.z\u0259n/[5][6][note a]) is a public land-grant research university in Clemson, South Carolina. Founded in 1889, Clemson is the second-largest university by enrollment in South Carolina.[7] For the fall 2019 semester, the university enrolled a total of 20,195 undergraduate students and 5,627 graduate students,[3] and the student/faculty ratio was 18:1.[8] Clemson's 1,400-acre campus [9] is in the foothills of the Blue Ridge Mountains. The campus now borders Lake Hartwell, which was formed by the dam completed in 1962. The university manages the nearby 17,500-acre Clemson Experimental Forest that is used for research, education, and recreation.\n\nClemson University consists of seven colleges: Agriculture, Forestry and Life Sciences; Architecture, Arts and Humanities; The Wilbur O. and Ann Powers College of Business; Behavioral, Social and Health Sciences; Education; Engineering, Computing and Applied Sciences; and Science.[10] U.S. News & World Report ranks Clemson University 77th for 2022 among national U.S. universities.[11] Clemson University is classified among \"R1: Doctoral Universities \u2013 Very high research activity.\"[12", "output": "Clemson University is based in the upstate of South Carolina in a town called Clemson. It was founded in 1889 and is the 2nd largest university in South Carolina. Clemson University consists of seven colleges: Agriculture, Forestry and Life Sciences; Architecture, Arts and Humanities; The Wilbur O. and Ann Powers College of Business; Behavioral, Social and Health Sciences; Education; Engineering, Computing and Applied Sciences; and Science. Clemson ranks 77th for 2022 among national U.S. universities.", "category": "IT"}, {"instruction": "Given this paragraph about full distance ironman competition, how far is each discipline", "input": "A number of non-WTC full distance triathlons have been held since the mid-1990s. The limited number of WTC-sanctioned events, and the limited number of entries available per race, have combined with a growth in the sport that has created demand for these non-trademarked events. Many of them share the 2.4-mile (3.9 km), 112-mile (180 km), 26.2-mile (42.2 km) format with the Ironman triathlon. Originally, many used the Ironman name. Due to aggressive trademark protection, most of these races no longer use the word \"Ironman\".", "output": "The distances for a full ironman competition are 2.4 miles (3.9km) for the swim, 112 miles (180km) for the bike and 26.2 miles (42.2km) for the run.", "category": "IT"}, {"instruction": "Tell me which of the following are states in the United States of America: Washington, Oregon, California, Idaho, Toronto, Canada, England.", "input": "", "output": "The following are all states in the United States of America: Washington, Oregon, California, and Idaho. Toronto, Canada, and England are not part of the United States of America.", "category": "IT"}, {"instruction": "Where was the 7th edition of Slinex conducted?", "input": "", "output": "Trincomalee, Sri Lanka", "category": "IT"}, {"instruction": "What are the Australian men's and women's soccer teams called?", "input": "Soccer, also known as football, is the most played outdoor club sport in Australia, and ranked in the top ten for television audience as of 2015. The national governing body of the sport is Football Australia (FA), which until 2019, organised the A-League Men, A-League Women, and still organises the Australia Cup, as well as the men's and women's national teams (known as the Socceroos and the Matildas, respectively). The FA comprises nine state and territory member federations, which oversee the sport within their respective region.", "output": "The men's national team is called the Socceroos and the women's national team is called the Matildas.", "category": "IT"}, {"instruction": "How can you tell how old a tree is?", "input": "", "output": "The size of tree has a direct correlation on how old the tree is.  The wider the diameter and circumference of the tree the older it is.  When a tree is cut down there will be inner rings in the stump that describe the tree's age as well.  A tree's diameter will increase in size about 2.5 centimeters per year.  You can estimate the age of a tree by measuring the circumference of the tree in centimeters and then dividing it by 2.5 centimeters.  It will be important to measure as close to the ground as possible to get the most accurate measurement for the tree's age.", "category": "IT"}, {"instruction": "What did Bobby Moore die from?", "input": "Moore's first cancer was in 1964, two years before England's first World Cup win \u2014 a diagnosis of testicular cancer, treated by orchidectomy of one; it had not spread.[40] In April 1991, Moore underwent an operation for suspected colorectal cancer. At the time it was reported as an \"emergency stomach operation\".[41]\n\nOn 14 February 1993, he announced he was suffering from colorectal cancer and liver cancer; by this time it had spread. Three days later he commentated on an England match against San Marino at Wembley, alongside his friend Jonathan Pearce. Moore attended a dinner after the match and made a presentation.[42] That was to be his final public act; seven days later on 24 February, at 6:36 am, he died at the age of 51.[41]", "output": "Booby Moore died aged 51 from colorectal and liver cancer.", "category": "IT"}, {"instruction": "Did Professor Snape jinx Harry's broom during his first quidditch match?", "input": "", "output": "No. Professor Quirrell, the Defense Against the Dark Arts teacher secretly in league with Lord Voldemort, jinxed Harry's broom in an attempt to hurt him since Harry was responsible for Lord Voldemort's downfall a decade earlier. Hermione mistakenly believed Snape was jinxing Harry's Broom when she saw his mouth moving when in fact Snape was trying to save Harry by issuing a counter-jinx.", "category": "IT"}, {"instruction": "What can be done about NRA and why gun control is such an issue?", "input": "", "output": "We all know what America stands for. There is no reason to discuss love for guns, indivdual freedom, right to bear firearms, self defence, gun lobby funded by NRA, and how republicans love guns etc etc. These are all facts but it doesn't change that people die everyday and lives are wasted or impacted as a result of poor gun laws.\n\nWhat can be done about this?\n1. People who vote for gun laws have not had someone in their family shot or impacted. We don't want a personal event or death of a closed one to create a new law. An eye for an eye doesn't bring lives back. Educate the masses. Also, women tend to vote more positive on banning rifles as compared to men. Get more women out to change the law.\n\n2.  There is license for fishing and hunting. Guns should be rented and not owned. If you're into recreational things make it possible to rent guns and not own.  Do background check, and let the person enjoy his time with the toys but cannot own it. This would allow the manufacture and NRA in business. \n\n3. Never sell assault rifles to general public. A person who needs to have assault rifles are insecure by nature. They fear that the public is trying to get at them and they need to protect. Form community monitoring and have more police funding to protect our families.", "category": "IT"}, {"instruction": "how do you rate strength of tornado", "input": "", "output": "There are several scales for rating the strength of tornadoes. The Fujita scale rates tornadoes by damage caused and has been replaced in some countries by the updated Enhanced Fujita Scale. An F0 or EF0 tornado, the weakest category, damages trees, but not substantial structures. An F5 or EF5 tornado, the strongest category, rips buildings off their foundations and can deform large skyscrapers. \nThe similar TORRO scale ranges from T0 for extremely weak tornadoes to T11 for the most powerful known tornadoes.\nDoppler radar data, photogrammetry, and ground swirl patterns (trochoidal marks) may also be analyzed to determine intensity and assign a rating.\nsource : https://en.wikipedia.org/wiki/Tornado", "category": "IT"}, {"instruction": "What is celiac disease?", "input": "", "output": "Celiac disease is an autoimmune disease that is hereditary, not to be confused with gluten intolerance. Celiac disease is an immune response to consuming gluten, a protein found in barley, rye, and wheat, which impacts nutrient absorption and immunity when consumed.", "category": "IT"}, {"instruction": "What are the different ways to bake sourdough?", "input": "", "output": "You could bake a sourdough bread in a commercial oven. \nA pizza oven\nA dutch oven\nIn the sun\nIn a hot car\nIn a pot of boiling water\nOn the surface of the sun", "category": "IT"}, {"instruction": "Who are some of the most influential innovators of all time?", "input": "", "output": "Thomas Edison.\nSteve Jobs\nNikola Tesla\nBill Gates\nBenjamin Franklin\nLeonardo Da Vinci\nAlexander Graham Bell\nSandford Fleming", "category": "IT"}, {"instruction": "How many total men fought at Kosovo Field according to text?", "input": "The Crusaders, numbering 22,000-30,000[25][17][26][27] arrived at Kosovo Field (the site of the first Battle of Kosovo in 1389, between Serbs and Ottomans) having faced an Ottoman army of 40,000-60,000 men[28][17] Sultan Murad personally commanded a large section of cannons and janissaries, while his son and would-be successor, 16-year-old Mehmed, who faced battle for the first time, led the Anatolian troops at the right wing. Hunyadi commanded the center of his army in the battle, while the Crusaders right wing was under the Wallachians. The Hungarians had long barrage cannons. Calculating that he would need more than 40,000 men to defeat the Ottomans, the Hungarian regent sought to join up with anti-Ottoman Albanian forces, possibly led by Skanderbeg. The Ottomans in their base at Sofia received word of the Crusader army's march route and subsequently began readying their men.", "output": "The Crusaders fielded 22,000-30,000 men and the Ottomans 40,000-60,000 for a combined total of 62,000-90,000 men.", "category": "IT"}, {"instruction": "Classify each of the following as either a Girl Scout cookie, an ice cream flavor from Ben & Jerry's, or a title of an episode from the TV show \"The X-Files\": The Unnatural, Phish Food, Samoas, Do-Si-Dos, Tagalongs, Post Modern Prometheus, Americone Dream, The Field Where I Died, Caramel deLites, Half Baked, Cherry Garcia, Patient X, Thin Mints, Chunky Monkey, Bad Blood", "input": "", "output": "Girl Scout cookies: Samoas, Do-Si-Dos, Tagalongs, Caramel deLites, Thin Mints\nBen & Jerry's ice cream flavors: Phish Food, Americone Dream, Half Baked, Cherry Garcia, Chunky Monkey\nEpisodes from The X-Files: The Unnatural, Post Modern Prometheus, The Field Where I Died, Patient X, Bad Blood", "category": "IT"}, {"instruction": "Given the reference text below, what is Safer Internet Day?", "input": "Safer Internet Day is celebrated worldwide to raise awareness about online safety.[13] Many people take safety on the internet for granted and for that reason it is important to educate people about possible data breaches. Childnet, as part of the UK Safer Internet Centre, coordinate Safer Internet Day in the UK. Safer Internet Day 2015 saw over [14] 800 organizations in the UK taking part to help promote the safe, responsible and positive use of digital technology for children and young people. For the day the UK Safer Internet Centre launched a new study Friendship in a Digital Age and launched the #Up2Us film, which was made by 150 young people to inspire others to do something kind online.", "output": "Safer Internet Day raises awareness about internet safety for children and young people.", "category": "IT"}, {"instruction": "My 12-year-old daughter asks me: \"Why can't I have my own cellphone? Everyone else in my class have one. Without a cellphone, I cannot make friends with them, and I cannot join their conversations. I feel lonely and sad.\" How to properly respond to my daughter? Shall I give her a cellphone or not?", "input": "", "output": "Dear daughter, I truly understand your feeling, and I don't want to keep you feel bad at school. I'm willing to give you anything that I can reasonably afford that makes you happy. However, I have some concerns that giving you a cellphone might harm you instead of making you happier. Can you address my concerns and make me feel safe to give you the cellphone? Here are some of my concerns:\n1. Using cellphone too much would harm your eye sight. Especially for teenagers, whose eyes are still growing, it's very easy to have near-sight pretty quickly.\n2. Using cellphone too much would take too much of your time, and you would spend less time reading books, doing exercises, playing outside, talking to people, which harms your overall development. Adults like me already ready lots of books, did lots of exercises, and talked to a lot of people when I was a teenager, so I already developed those skills.\n3. Using cellphone too much would make you feel hard to focus on one thing. The scattered information would stimulate your attention, and make you feel excited at superficial contents, and don't think deeply.\n4. You might accidentally lost your cellphone, and you will feel sad about it. Teenagers usually are more likely to lost things than adults in general.", "category": "IT"}, {"instruction": "Describe how skateboarding teaches you about life and to be resilient.", "input": "", "output": "Skateboarding has been through quite an evolution since its first inception, when it came from the waves to the street. As a sport, skateboarding has always had a special attitude towards rules and pushed boundaries. Think of where one is supposed to skate (in the park) and where the best spots can actually be found across town (particularly where it's forbidden). In contrast to the waves in front of the coast, the asphalt one usually lands on when falling is pretty hard and rough - a circumstance felt by bones and skin. Skateboard riders usually fall quite a bit and despite all, the important thing is to get up and try again, and again, and again. It is just like in life where one grows with their challenges and needs to get up again until the goals are achieved. As humbling and painful as falling onto plain asphalt can be, it can also stimulate resilience and a relieving patience when the goal is in sight. Just try again.", "category": "IT"}, {"instruction": "What's the best piece of advice you ever received?", "input": "", "output": "You cannot learn everything about the world, but does it mean you should stop trying.", "category": "IT"}, {"instruction": "What kind of species is the Eulima venusta", "input": "Eulima venusta is a species of sea snail, a marine gastropod mollusk in the family Eulimidae. The species is one of a number within the genus Eulima.[1]", "output": "Eulima venusta is a species of sea snail, a marine gastropod mollusk in the family Eulimidae. The species is one of a number within the genus Eulima.", "category": "IT"}, {"instruction": "What were the last ten states to enter the union of the United States?", "input": "", "output": "In order of admission: Montana, Washington, Idaho, Wyoming, Utah, Oklahoma, New Mexico, Arizona, Alaska, and Hawaii.", "category": "IT"}, {"instruction": "What is the most popular sport?", "input": "", "output": "Soccer also known as football outside of USA is the most popular sport with over 3.5 billion fans. It consists of 11 players and maximum 5 substitutions during a 90 minutes regulation time allowed. The formation consists of a goalie, defense, midfield and offense. 191 countries represent a national soccer team which is more than any other nationally represented sport.", "category": "IT"}, {"instruction": "Why some people like spicy food?", "input": "", "output": "The taste preferences are related to several factors.\n1) the influence from the parents, especially childhood habits.\n2) the geographical location. \n3) the age. Older people like mild food.\n\nSpicy is a test preference. Sichuan food and Mexican food are famous for their spicy taste. Kids do not like spicy food before they turn to age 10. People become less preferred to spicy food when the become older.", "category": "IT"}, {"instruction": "Identify from the following list characters from The X-Files who are bald or balding: Walter Skinner, John Fitzgerald Byers, Dana Scully, Melvin Frohike, Darius Michaud, Peter Watts, Conrad Strughold, Queequeg", "input": "", "output": "Walter Skinner, Melvin Frohike, Darius Michaud, Peter Watts, Conrad Strughold", "category": "IT"}, {"instruction": "In what year did the Pac-10 Become the Pac-12?", "input": "", "output": "The Pac-10 became the Pac-12 in 2011 with the addition of Colorado and Utah.", "category": "IT"}, {"instruction": "Why do audiophiles spend lots of money on high-end audio equipment and does more expensive gear always sound better than less expensive hardware?", "input": "", "output": "While it is generally true that audiophiles are willing to spend more money on high-end gear than those less passionate about audio, justification for this additional financial outlay is not solely based on the equipment\u2019s definitive sonic superiority.\n \nThere are a handful of key attributes that define audio equipment\u2019s performance, including: frequency response, detail, texture, layering ability, coherency, vocal presentation, and timbre and tonality. Audiophiles typically seek out gear capable of performing well in many or all of these areas, and it is often these elevated expectations that drive an audiophile\u2019s willingness to spend more. However, there are elements of subjectivity at play, as well as physiological differences, that can lead to variations in interpretation of what sounds \u201caccurate\u201d or \u201cengaging.\u201d Therefore, even if it is generally true that most expensive audio equipment objectively performs better than their lesser priced counterparts, individual preference and anatomy can cause differences in expectations or hearing that can lead to different perceptions of sonic performance, even with high-end audio gear.\n \nThe Erlkonig is an In-Ear Monitor made by German producer, Vision Ears. By many, it is thought to be one of the best In-Ear Monitors ever made. At a retail price of over $4,000, it is also generally considered to be quite expensive. Widely regarded to perform extremely well, the Erlkonig has 13 balance armature drivers, 4 user-selectable sound settings, and shells made out of silver. While non-audiophiles will likely scoff at its price and be indifferent to the Erlkonig\u2019s specifications, many audiophiles will salivate at the chance for even a single listen. Even though many deep-pocketed audiophiles could justifiably purchase the Erlkonig, there are plenty of audiophiles and non-audiophiles who do not enjoy the IEM\u2019s sound. For others, the shell is ergonomically incompatible with their ears. So, even if expensive audio gear on the whole performs and sounds \u201cbetter\u201d than lesser priced gear, unique preferences and anatomical variation also shape perception of sonic performance.", "category": "IT"}, {"instruction": "What is Original Joe's restaurant and where are they located?", "input": "Original Joe's is a duo of restaurants in the North Beach neighborhood of San Francisco and the Westlake neighborhood of Daly City. They serve a wide variety of foods, mostly Italian-American cuisine with some mainstream American favorites.[1][2] Their \"signature\" dishes include Joe's Special, Chicken Parmigiana, the Joe's Famous Hamburger Sandwich and a variety of steaks and chops.", "output": "Original Joe's is a duo of restaurants in the North Beach neighborhood of San Francisco and the Westlake neighborhood of Daly City.", "category": "IT"}, {"instruction": "How many football national championships has the University of Georgia won?", "input": "", "output": "The University of Georgia has won the football national championship four times - in 1942, 1980, 2021, and 2022.", "category": "IT"}, {"instruction": "Who invented Calculus?", "input": "", "output": "Sir Isaac Newton and Gottfried Wilhelm Leibniz invented the foundations of Calculus at around the same time.", "category": "IT"}, {"instruction": "Give me a summary about the company Nobo", "input": "Nobo is a manufacturing company in Norway. It started as NOrsk BOttefabrikk (the Norwegian Bucket Factory) in Lade, Trondheim in 1918 - the name Nobo is a contraction of the original title. The factory originally produced only buckets, but later made several sheet iron products as well. It now manufactures desks, electric wall heaters and filing cabinets. The company developed and a new factory was built in Stjordal. Nobo then produced electric heating accessories only, which it is still doing today.\n\nIn the 1990s the original Nob\u00f8 factory was closed down and the area is now a housing estate of about 220 houses and flats, called Ingemann Torps Street or Nob\u00f8-tomta (Nob\u00f8-field). The area was planned by Heimdal Utbyggingsselskap and Pir II Architects.", "output": "Nobo is a manufacturing company in Norway. It started as NOrsk BOttefabrikk (the Norwegian Bucket Factory) in Lade, Trondheim in 1918 - the name Nobo is a contraction of the original title. The factory originally produced only buckets, but later made several sheet iron products as well. It now manufactures desks, electric wall heaters and filing cabinets. The company developed and a new factory was built in Stjordal. Nobo then produced electric heating accessories only, which it is still doing today.\n\nIn the 1990s the original Nobo factory was closed down and the area is now a housing estate of about 220 houses and flats, called Ingemann Torps Street or Nobo-tomta (Nobo-field). The area was planned by Heimdal Utbyggingsselskap and Pir II Architects.", "category": "IT"}, {"instruction": "What are the top three most popular collectible cardgames?", "input": "", "output": "1. Magic:  The Gathering\n2. Pokemon\n3. Yu-Gi-Oh!", "category": "IT"}, {"instruction": "Extract the name of the universities Norman Alan Burges studied at from the text. List them using bullets.", "input": "Norman Alan Burges CBE (5 August 1911 \u2013 4 October 2002), was an Australian botanist who became the first vice-chancellor of the New University of Ulster in Coleraine, Northern Ireland.\n\nHe was born 5 August 1911, in East Maitland, New South Wales, and took his first degree in MSc at the University of Sydney, then studied for his PhD in mycology at Emmanuel College, Cambridge. After a short period as a Research Fellow at Emmanuel, at the outbreak of war in 1939 he joined the Royal Air Force serving in Bomber Command. After the war he returned to Australia and in 1947 became professor of botany at the University of Sydney, and later dean of the Faculty of Science and a Fellow of Senate there. he also acted as the honorary general secretary of the Australian and New Zealand Association for the Advancement of Science during that period.", "output": "- University of Sydney\n- Emmanuel College, Cambridge", "category": "IT"}, {"instruction": "Who is the next superpower country?", "input": "Currently, only the United States fulfills the criteria to be considered a superpower.[1] However, the United States is no longer the only uncontested foremost superpower and the world's sole hyperpower to dominate in every domain (i.e. military, culture, economy, technology, diplomatic).[2][3][4][5]\n\nSince the 1990s, China,[6][7][8] the European Union,[9] India,[10][11] and Russia[12] have been commonly described as potential superpowers. Japan was formerly considered a potential superpower due to its high economic growth.[13][14][15] However, its status as a potential superpower has eroded since the 1990s due to an aging population and economic stagnation.[16]", "output": "A nation with the capacity to have great power and influence on the international stage is considered a prospective superpower. These nations have the ability to significantly influence the world due to their combination of economic, political, and military might. While the United States and the Soviet Union were generally considered superpowers during the Cold War, the phrase has now come to refer to other nations as well.\n\nBecause of its fast expanding economy and military might, China is sometimes mentioned as a potential superpower. The nation's Belt and Road Initiative is viewed as a major step toward enhancing its worldwide influence. India, on the other hand, is a possible threat because of its enormous population, quickly expanding economy, and potent military.\n\nDue to its combined economic and political might, the European Union is another prospective superpower. Despite having a small military, it has a substantial amount of influence and soft power. Another nation that has been mentioned as a prospective superpower is Russia, which has a sizable military and abundant natural resources. Yet, recent economic troubles could hinder its ability to rise to superpower status.\n\nBrazil's enormous population, wealth of natural resources, and expanding economy are other factors that make it a prospective powerhouse. The nation's participation in international negotiations on climate change as well as its leadership in Latin America have contributed to an increase in its impact on the global scene.", "category": "IT"}, {"instruction": "who is Walt Strony", "input": "Walt Strony (born 1955) is an American recording, consulting and performing organist and organ teacher, both on the theatre organ and traditional pipe organ, ranging from pizza parlors to churches and theatres to symphony orchestras.\n\nBiography\nStrony\u2019s classical organ studies were with Herbert L. White[1] of the Sherwood Conservatory of Music Columbia College Chicago and Karel Paukert[2] at Northwestern University. His theatre organ teacher was Al Melgard, famous as the Staff Organist on the Barton organ at the Chicago Stadium.[3] When Melgard retired in 1975 he gave Strony his Oak Park, IL teaching studio. Strony later studied piano with Giulio Favrio of the Lyric Opera of Chicago.\n\nHe made his public debut as an organist in 1974, aged 18.[4] During his college years he began playing the theatre organ in pizza parlors, a fad in the 1970s which gave new life to a largely forgotten instrument. For many years thereafter he was Artist-in-Residence at First Christian Church in Las Vegas, Nevada.\n\nStrony has studied with silent-film accompanists and has accompanied silent films for years, such as The Phantom of the Opera (1925 film) and Nosferatu at the Plaza Theatre (El Paso).[5]\n\nPerformances\nHe has performed in the United States, toured extensively in Australia (1978), England (1989), Japan (Expo \u201875 & 2011), and Canada (1999), and he is a regular performer at conventions of the American Theatre Organ Society. In 2012 he played his 39th ATOS convention, more than any other organist.[6] He played there again in 2008.[7][8] He has also performed for the American Guild of Organists on both local and national levels.\n\nHe has performed on numerous classical instruments as well, most notably having been featured in June 2009 at Macy's in Philadelphia (formerly Wanamaker\u2019s) playing the largest operating pipe organ in the world.[9] He has also recorded on the world\u2019s largest theatre organ at the Sanfillipo Music Room in Barrington, IL.[10]\n\nIn addition to solo concerts, he has performed with several symphony orchestras. In El Paso he played music including Symphony No. 3 (Organ) of Camille Saint-Sa\u00ebns.[11] He played at the Calgary International Organ Festival with the Calgary Philharmonic.[12] Additionally, he has performed with the Allentown Symphony and Symphony Silicon Valley.[13] While in college he performed the Poulenc Organ Concerto with the Chicago Businessman\u2019s Orchestra.[14]\n\nAwards\nIn 1991 and 1993 the American Theatre Organ Society selected him as \"Organist of the Year.\" He is the only living organist to have received this award twice.[15] In 2011 he was inducted into the American Theatre Organ Society Hall of Fame.[16]\n\nIn the spring of 2008,[17] and in celebration of his career, the Allen Organ Company developed the Walt Strony Signature Model[18] - the STR-4 - which is a four-manual instrument. Strony designed the stoplist and chose all the samples from their extensive library based upon his experience as an organist and tonal consultant.\n\nOther work\nHis book The Secrets of Theatre Organ Registration (1991) was the first book to be written about this subject. According to the New York Times, this is \"what many theater organists consider the definitive guide\" to Wurlitzers.[19] TheatreOrgans.com calls it \"The hands down best book ever written on the subject of Theater Organ registration. Get a copy of this if you can, it is worth its weight in gold.\"[20]\n\nIn addition to musical performance, he works as an organ consultant, most notably for instruments built by the Allen Organ Company. In collaboration with Allen Organs and the ATOS, he and four other artists recorded a five-DVD instructional video entitled \u201cThe Art of Playing Theatre Organ\u201d.[21]\n\nDiscography", "output": "Walt Strony (born 1955) is an American recording, consulting and performing organist and organ teacher on the theatre and traditional pipe organ, ranging from pizza parlours to churches and theatres to symphony orchestras. His theatre organ teacher was Al Melgard, famous as the Staff Organist on the Barton organ at the Chicago Stadium.[3] When Melgard retired in 1975, he gave Strony his Oak Park, IL, teaching studio. He made his public debut as an organist in 1974, aged 18.[4] During college, he began playing the theatre organ in pizza parlours, a fad in the 1970s that gave new life to a largely forgotten instrument. Strony has studied with silent-film accompanists and has accompanied silent films for years, such as The Phantom of the Opera (1925 film) and Nosferatu at the Plaza Theatre (El Paso).[5] He has performed in the United States, toured extensively in Australia (1978), England (1989), Japan (Expo '75 & 2011), and Canada (1999), and he is a regular performer at conventions of the American Theatre Organ Society. In 2012 he played his 39th ATOS convention, more than any other organist.[6] He played there again in 2008.[7][8] He has also performed for the American Guild of Organists locally and nationally. He has performed on numerous classical instruments as well, most notably having been featured in June 2009 at Macy's in Philadelphia (formerly Wanamaker's), playing the largest operating pipe organ in the world.[9] He has also recorded on the world's largest theatre organ at the Sanfillipo Music Room in Barrington, IL.[10] In El Paso, he played music, including Symphony No. 3 (Organ) of Camille Saint-Sa\u00ebns.[11] He played at the Calgary International Organ Festival with the Calgary Philharmonic.[12] Additionally, he has performed with the Allentown Symphony and Symphony Silicon Valley.[13] While in college, he performed the Poulenc Organ Concerto with the Chicago Businessman's Orchestra.[14] In 1991 and 1993, the American Theatre Organ Society selected him as \"Organist of the Year.\" He is the only living organist to have received this award twice.[15] In 2011 he was inducted into the American Theatre Organ Society Hall of Fame.[16] In the spring of 2008,[17] and celebrating his career, the Allen Organ Company developed the Walt Strony Signature Model[18] - the STR-4 - a four-manual instrument. His book The Secrets of Theatre Organ Registration (1991) was the first book to be written about this subject. In addition to musical performance, he works as an organ consultant, most notably for instruments built by the Allen Organ Company. In collaboration with Allen Organs and the ATOS, he and four other artists recorded a five-DVD instructional video entitled \"The Art of Playing Theatre Organ\".[21]", "category": "IT"}, {"instruction": "Best Airline in the world", "input": "", "output": "1. Quatar airway\n2. Singapore Airlines\n3. Emirates", "category": "IT"}, {"instruction": "Extract key reported metrics and their values along with the year the metric is reported from the given text in the format {Metric} - {Year} - {value} and show them as a list", "input": "Indian Railways (IR) is a statutory body under the ownership of the Ministry of Railways, Government of India that operates India's national railway system.[8] It manages the fourth largest national railway system in the world by size, with a total route length of 68,043 km (42,280 mi), running track length of 102,831 km (63,896 mi) and track length of 128,305 km (79,725 mi) as of 31 March 2022. 50,394 km (31,313 mi) of all the gauge routes are electrified with 25 kV 50 Hz AC electric traction as of 1 April 2022.[6][5]\n\nIn 2020, Indian Railways carried 808.6 crore (8.086 billion) passengers and in 2022, Railways transported 1418.1 million tonnes of freight.[9][5] It runs 13,169 passenger trains daily, on both long-distance and suburban routes, covering 7,325 stations across India.[5] Mail or Express trains, the most common types of trains, run at an average speed of 50.6 km/h (31.4 mph).", "output": "Passengers - 2020 - 808.6 crore \nTonnes of Freight - 2022 - 1418.1 million tonnes\nTotal Passenger Trains - 2022 - 13,169 \nTotal Route Length - Year - 68,043 km\nRunning Track Length - 2022 - 102,831 km\nTrack Length - 2022 - 50,394 km\nElectrified Gauge Route - 2022 - 50,394 km\nAverage Speed - - 31.4 mph", "category": "IT"}, {"instruction": "Tell me whether these pokemon are electric or grass type: Pikachu, Bulbasaur, Zapdos, Voltorb, Oddish, Bellsprout", "input": "", "output": "Pikachu: Electric\nBulbasaur: Grass\nZapdos: Electric\nVoltorb: Electric\nOddish: Grass\nBellsprout: Grass", "category": "IT"}, {"instruction": "Name a few popular metal genres", "input": "", "output": "Thrash Metal, Death Metal, Melodic Death Metal, Power Metal, Crossover, Grindcore, Symphonic Metal, Doom Metal, Death Core", "category": "IT"}, {"instruction": "Which Taylor Jenkins Reid books have been made into a production (movie or TV)?", "input": "", "output": "One True Loves is being made into a movie. Daisy Jones & The Six just came out on Amazon Video as a television adaptation. The Seven Husbands of Evelyn Hugo is being made into a movie. Malibu Rising is being made into a television adaptation.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Pellet drum, Rajao", "input": "", "output": "Rajao is string, Pellet drum is percussion", "category": "IT"}, {"instruction": "What is Baumkuchen made of?", "input": "Baumkuchen (German pronunciation: [\u02c8ba\u028a\u032fm\u02ccku\u02d0xn\u0329] (listen)) is a kind of spit cake from German cuisine. It is also a popular dessert in Japan. The characteristic rings that appear in its slices resemble tree rings, and give the cake its German name, Baumkuchen, which literally translates to \"tree cake\" or \"log cake\".[1]\n\nHistory\nIt is disputed who made the first Baumkuchen and where it was first baked. One theory is that it was invented in the German town of Salzwedel, which is further popularized by the town itself.[2] Another theory suggests it began as a Hungarian wedding cake.[citation needed] In Ein new Kochbuch (lit. \"A New Cookbook\"), the first cookbook written for professional chefs by Marx Rumpolt, there is a recipe for Baumkuchen. This publication puts the origin of Baumkuchen as far back at 1581, the year the cookbook was first published.[3] Marx Rumpolt had previously worked as a chef in Hungary and Bohemia.[citation needed]\n\nCharacteristics\n\nBaumkuchen baked on a spit\nTraditionally, Baumkuchen is made on a spit by brushing on even layers of batter and then rotating the spit around a heat source. Each layer is allowed to brown before a new layer of batter is poured.[4] When the cake is removed and sliced, each layer is divided from the next by a golden line, resembling the growth rings on a crosscut tree. A typical Baumkuchen is made up of 15 to 20 layers of batter. However, the layering process for making Baumkuchen can continue until the cakes are quite large. Skilled pastry chefs have been known to create cakes with 25 layers and weighing over 100 pounds (45 kg).[4] When cooked on a spit, it is not uncommon for a finished Baumkuchen to be 3\u20134 feet (0.91\u20131.22 m) tall.[2]\n\nBaumkuchen ingredients are typically butter, eggs, sugar, vanilla, salt, and flour. Baking powder is not considered a traditional ingredient. The ratio of flour, butter and eggs is typically 1:1:2 respectively (i.e., 100 grams of flour, 100 grams of butter and 200 grams of eggs). The recipe can be varied by adding other ingredients, such as ground nuts, honey, marzipan, nougat and rum or brandy, to the batter or filling.[1] Additionally, Baumkuchen may be covered with sugar or chocolate glaze. With some recipes, the fully baked and cooled Baumkuchen is first coated with marmalade or jam, and then covered with chocolate.", "output": "Baumkuchen ingredients are typically butter, eggs, sugar, vanilla, salt, and flour. Baking powder is not considered a traditional ingredient. The ratio of flour, butter and eggs is typically 1:1:2 respectively (i.e., 100 grams of flour, 100 grams of butter and 200 grams of eggs).", "category": "IT"}, {"instruction": "What is the Tau Circle Constant?", "input": "", "output": "Tau is defined as the ratio of a circle's circumference to its radius.  Some 21st century mathematicians and physicists believe Tau is a better choice than Pi for use in science and mathematics.\n\nLike Pi, Tau is an irrational and transcendental number.  In decimal form, the value of Tau is 6.283185\u2026\n\nPart of the motivation for Tau is the observation that the number 2*Pi or 2\u03c0 occurs with surprising frequency throughout science and mathematics.  This raises the question of whether Pi is really an important number or something equal to two times Pi is actually more important.  Perhaps the implication is that Pi is exactly one half of some very important number!\n\nFurther consideration of the question leads to several compelling observations:\n\n\t- Using C/r as the key circle constant is better aligned with the way we define a circle: the set of all points a fixed distance (r) form a give point.\n\t- Radian angle measurements of fraction of a circle make much more sense when Tau is used as the base constant.  Using Pi, on quarter of a circle is Pi is Pi/2, one half is Pi, and the angle of a a full circle is 2*Pi.  With Tau, the angle measures are intuitively aligned to the fraction of a circle: a quarter circle is Tau/4, a half circle is Tau/2 and the angle of a full circle is Tau.  \n\t- Similarly, the radian zeroes, max, and min of the sin and cosine functions align to fractions of Tau in an intuitive fashion that aids, rather than confuses, understanding.\n\t- Key formulas that traditionally use Pi actually show more clear mathematical meaning when expressed using Tau.  For example, the area of a circle itself, when expressed with Tau, shows the same pattern of quadratic forms in distance fallen, spring energy, and kinetic energy.\n\t- Similarly, the tau-based formula for circular area actually confirms to the original proof by Archimedes showing that area of a circle equals the area of a triangle with base C (circumference) and height r (radius):  A = 1/2 b*h = 1/2 C*r = 1/2 (Tau*r)*r = 1/2 Tau*r^2.\n\n\nTau has seen significant adoption since it was originally proposed.  \n\nThe relationship between Tau and Pi is very simple.  Tau = 2*Pi.  Perhaps just as informative is the fact that Tau > Pi.", "category": "IT"}, {"instruction": "What are some fun activities to do in Charlotte, NC?", "input": "", "output": "Charlotte is the most-visited city in the state, attracting 28.3 million visitors in 2018. Fun area attractions include Carolina Panthers NFL football team and Charlotte Hornets basketball team, Carowinds amusement park, Charlotte Motor Speedway, U.S. National Whitewater Center, Discovery Place, Great Wolf Lodge, Sea Life Aquarium, Bechtler Museum of Modern Art, Billy Graham Library, Carolinas Aviation Museum, Harvey B. Gantt Center for African-American Arts + Culture, Levine Museum of the New South, McColl Center for Art + Innovation, Mint Museum, and the NASCAR Hall of Fame.", "category": "IT"}, {"instruction": "In Asia Cricket Cup 2022 ,Player of the match was", "input": "", "output": "Bhanuka Rajapaksa", "category": "IT"}, {"instruction": "What is contemporary style of dance?", "input": "", "output": "Contemporary style lets the dancer move in a way that expresses their full emotions. Through elements of jazz, lyrical, ballet and modern dance styles creates the new generation of movement.", "category": "IT"}, {"instruction": "How many cents do I have if I have 3 dimes?", "input": "", "output": "If you have 3 dimes, you have 30 cents.", "category": "IT"}, {"instruction": "Where were the Declaration of Independence, the Constitution, and the Bill of Rights stored during World War II?", "input": "", "output": "Fort Knox.", "category": "IT"}, {"instruction": "What type of physicist is Arup Kumar Raychaudhuri?", "input": "Arup Kumar Raychaudhuri (born 1 January 1952) is an Indian condensed matter physicist, materials scientist and a Distinguished Emeritus Professor at the S. N. Bose National Centre for Basic Sciences. Known for his pioneering work on the interplay of disorder and interaction, Raychaudhuri is an elected fellow of all the three major Indian science academies viz. Indian Academy of Sciences, National Academy of Sciences, India and Indian National Science Academy as well as the Asia-Pacific Academy of Materials. He is a recipient of a number of awards such as Millennium Medal of the Indian Science Congress, ICS Gold Medal of the Materials Research Society of India and FICCI Award. The Council of Scientific and Industrial Research, the apex agency of the Government of India for scientific research, awarded him the Shanti Swarup Bhatnagar Prize for Science and Technology, one of the highest Indian science awards, for his contributions to physical sciences in 1994.[1][note 1]", "output": "Arup Kumar Raychaudhuri is a condensed matter physicists.", "category": "IT"}, {"instruction": "What are some good beginner songs to learn on guitar?", "input": "", "output": "The following are good songs a beginner can learn on guitar:\n\n- Smoke on the Water by Deep Purple\n- Brown Eyed Girl by Van Morrison\n- Heart of Gold by Neil Young\n- Seven Nation Army by The White Stripes\n- What's Up? by 4 Non Blondes\n- Wild Thing by The Troggs\n- Wonderwall by Oasis", "category": "IT"}, {"instruction": "What is the name of the flag carrier airline of the Netherlands?", "input": "", "output": "The flag carrier airline of the Netherlands is KLM.", "category": "IT"}, {"instruction": "How many full siblings did Fatemeh Pahlavi have?", "input": "Fatemeh Pahlavi was born in Tehran on 30 October 1928.[1][2] She was the tenth child of Reza Shah and his fourth and last wife, Esmat Dowlatshahi.[3][4] Her mother was from the Qajar dynasty and married Reza Shah in 1923.[5] Fatemeh was the full-sister of Abdul Reza Pahlavi, Ahmad Reza Pahlavi, Mahmoud Reza Pahlavi and Hamid Reza Pahlavi.[6]", "output": "4 siblings: Abdul Reza Pahlavi, Ahmad Reza Pahlavi, Mahmoud Reza Pahlavi and Hamid Reza Pahlavi.", "category": "IT"}, {"instruction": "Write a short summary of the text below (max 20 words):\n\nFinland\u2019s prime minister, Sanna Marin, has lost her battle to stay in power after her centre-left Social Democratic party (SDP) was narrowly beaten into third place in a cliffhanger election by its conservative and far-right rivals.\n\nWith 99.4% of votes counted on Sunday, the right-wing National Coalition party was on course to secure 20.7% of the vote, with the populist, nation-first Finns party predicted to score 20.1%. Marin\u2019s SDP was forecast to collect 19.9%.\n\nMarin congratulated the election winners during her concession speech, but hailed an improvement in both her party\u2019s vote share and its projected number of MPs. \u201cIt\u2019s a really good achievement, even though I didn\u2019t finish first today,\u201d she told supporters in Helsinki.\n\n\u201cDemocracy has spoken, the Finnish people have cast their vote, and the celebration of democracy is always a wonderful thing,\u201d she added. \u201cWe have good reason to be happy about this result.\u201d", "input": "", "output": "Sanna Marin, Finland's prime minister, will no longer stay into power as her party lost the election last Sunday.", "category": "IT"}, {"instruction": "Give me a bulleted list of Aaron Fenster's accomplishments.", "input": "Aaron Fenster is a medical physicist at the University of Western Ontario Robarts Research Institute in London, Ontario, Canada. He was named a Fellow of the Institute of Electrical and Electronics Engineers (IEEE) in 2013[1] for his contributions to medical imaging and three-dimensional ultrasound-guided interventions. He is also a fellow of the Canadian Academy of Health Sciences[2] and co-program director of the Ontario Institute for Cancer Research Imaging Program.[3] He holds Ph.D. from the University of Toronto and received further training at the Ontario Cancer Institute.[4]", "output": "- Medical physicist at the University of Western Ontario Robarts Research Institute.\n- Fellow of the Institute of Electrical and Electronics Engineers (IEEE).\n- Fellow of the Canadian Academy of Health Sciences. \n- Co-program director of the Ontario Institute for Cancer Research Imaging Program. \n- Completed a Ph.D. from the University of Toronto.", "category": "IT"}, {"instruction": "Based on this text, what was Ruth Handler's inspiration for making the Barbie Doll?", "input": "Ruth Handler watched her daughter Barbara play with paper dolls, and noticed that she often enjoyed giving them adult roles. At the time, most children's toy dolls were representations of infants. Realizing that there could be a gap in the market, Handler suggested the idea of an adult-bodied doll to her husband Elliot, a co-founder of the Mattel toy company. He was unenthusiastic about the idea, as were Mattel's directors.[9]\n\nDuring a trip to Europe in 1956 with her children Barbara and Kenneth, Ruth Handler came across a German toy doll called Bild Lilli.[10] The adult-figured doll was exactly what Handler had in mind, so she purchased three of them. She gave one to her daughter and took the others back to Mattel. The Lilli doll was based on a popular character appearing in a comic strip drawn by Reinhard Beuthin for the newspaper Bild. Lilli was a blonde bombshell, a working girl who knew what she wanted and was not above using men to get it. The Lilli doll was first sold in Germany in 1955, and although it was initially sold to adults, it became popular with children who enjoyed dressing her up in outfits that were available separately.[11]", "output": "Ruth Handler was inspired by the German Bild Lilli doll", "category": "IT"}, {"instruction": "How can I become a pilot?", "input": "", "output": "The first step to become a private or commercial pilot is to join a flight school and get a license. Pilots must also meet basic medical requirements to fly, applying for a medical certificate.\nPrivate pilots can fly light aircraft such as Cessnas and Pipers for leisure. They can fly solo or take passengers with them. Commercial pilots undergo further training to private pilots, allowing them to get a Commercial Pilots Licence (CPL) to fly for companies and airlines.", "category": "IT"}, {"instruction": "Is the recording of a person's last words reliable?", "input": "A person's last words, their final articulated words stated prior to death or as death approaches, are often recorded because of the decedent's fame, but sometimes because of interest in the statement itself. (People dying of illness are frequently inarticulate at the end,[1] and in such cases their actual last utterances may not be recorded or considered very important.) Last words may be recorded accurately, or, for a variety of reasons, may not. Reasons can include simple error or deliberate intent. Even if reported wrongly, putative last words can constitute an important part of the perceived historical records[2] or demonstration of cultural attitudes toward death at the time.", "output": "Sometimes it is, while other times it may contain errors or deliberately misquoted.", "category": "IT"}, {"instruction": "How do you push start a car with a manual transmission?", "input": "", "output": "1. Get the car to the top of a stretch of clear downhill road, or get people who will push you there.\n\n2. Fully depress the clutch and put the car in second gear (first gear if you\u2019ll be rolling slowly; choose the gear that you would normally use at that speed, and faster is better).\n\n3. Turn the ignition to on.\n\n4. Leaving the clutch fully depressed, take your foot off the brake and start rolling down the hill (or get people to start pushing you).\n\n5. Coast down the hill until you reach 5+ miles per hour (faster is better).\n\n6. Release the clutch quickly while giving some gas; the engine should turn and start. You may need to feather the clutch/gas to keep the engine running at first.\n\n7. If it doesn\u2019t start the first time, depress the clutch and release it again.", "category": "IT"}, {"instruction": "What professions are likely to be pursued in Houston?", "input": "The arrival of the 20th century brought a convergence of economic factors that fueled rapid growth in Houston, including a burgeoning port and railroad industry, the decline of Galveston as Texas's primary port following a devastating 1900 hurricane, the subsequent construction of the Houston Ship Channel, and the Texas oil boom. In the mid-20th century, Houston's economy diversified, as it became home to the Texas Medical Center\u2014the world's largest concentration of healthcare and research institutions\u2014and NASA's Johnson Space Center, home to the Mission Control Center.", "output": "Houston appears to be a good place to be a doctor, aerospace engineer, or researcher. In the past it may have been a hotbed for workers in the oil or transportation industries.", "category": "IT"}, {"instruction": "Extract the different ways to refer to the Amazon rainforest present in the passage. Separate them by a comma.", "input": "The Amazon rainforest, also called Amazon jungle or Amazonia, is a moist broadleaf tropical rainforest in the Amazon biome that covers most of the Amazon basin of South America. This basin encompasses 7,000,000 km2 (2,700,000 sq mi), of which 5,500,000 km2 (2,100,000 sq mi) are covered by the rainforest. This region includes territory belonging to nine nations and 3,344 formally acknowledged indigenous territories.\n\nThe majority of the forest, 60%, is in Brazil, followed by Peru with 13%, Colombia with 10%, and with minor amounts in Bolivia, Ecuador, French Guiana, Guyana, Suriname, and Venezuela. Four nations have \"Amazonas\" as the name of one of their first-level administrative regions, and France uses the name \"Guiana Amazonian Park\" for French Guiana's protected rainforest area. The Amazon represents over half of the planet's remaining rainforests, and comprises the largest and most biodiverse tract of tropical rainforest in the world, with an estimated 390 billion individual trees in about 16,000 species.\n\nMore than 30 million people of 350 different ethnic groups live in the Amazon, which are subdivided into 9 different national political systems and 3,344 formally acknowledged indigenous territories. Indigenous peoples make up 9% of the total population, and 60 of the groups remain largely isolated", "output": "Amazon rainforest, Amazon jungle, Amazonia, Amazonas, Amazon", "category": "IT"}, {"instruction": "What is a NFT?", "input": "", "output": "A non-fungible token (NFT) is a unique digital identifier that cannot be copied, substituted, or subdivided, that is recorded in a blockchain, and that is used to certify ownership and authenticity. The ownership of an NFT is recorded in the blockchain and can be transferred by the owner, allowing NFTs to be sold and traded. NFTs can be created by anybody, and require few or no coding skills to create. NFTs typically contain references to digital files such as photos, videos, and audio. Because NFTs are uniquely identifiable assets, they differ from cryptocurrencies, which are fungible.", "category": "IT"}, {"instruction": "Classify the following list into mammals and non-mammals: dog, human, ant, bird, cat, dolphin, pig, cow, shrimp, coral, shark, honeybee, capybara", "input": "", "output": "mammals: dog, human, cat, dolphin, pig, cow, capybara\nnon-mammals: ant, bird, shrimp, coral, shark, honeybee", "category": "IT"}, {"instruction": "Which word is different from the rest: cap, turban, veil, hat", "input": "", "output": "All except veil covers the head, while veil covers the face", "category": "IT"}, {"instruction": "I am going to Stockholm over the weekend, what should I do? I love going to museums and being in nature!", "input": "", "output": "Stockholm has some amazing spots and museums to visit! Here is a list with some example activities you can pick from:\n- Visit the archipelago: There is a vast archipelago close to Stockholm. It is easy to reach by taking a boat from central Stockholm. The nature there is amazing and remember to bring swimming clothes.\n- Djurg\u00e5rden island: This is a big Island in the middle of Stockholm located in the middle of Stockholm with big parks and some of the most famous museums.\n- Old town: At the heart of Stockholm, you have the old town, which is very popular for tourists all the year. You can visit cozy restaurants and coffee places or take a look at the royal castle.\n- The vasa museum: Located on Djurg\u00e5rden island, it has one of the most well preserved 17th century ships in the world.", "category": "IT"}, {"instruction": "How is Robert Lugn's leadership characterized?", "input": "Lugn was promoted to lieutenant in 1950 and attended the Royal Swedish Army Staff College in from 1955 to 1957[1] and conducted military studies in Germany, Belgium and The Netherlands in 1956. He became captain of the General Staff Corps in 1960 and was appointed section chief in the Organisation Department of the Army Staff. Lugn conducted military studies in Norway in 1961.[2]\n\nIn 1965, Lugn served in the Swedish Battalion in Cyprus, part of the United Nations Peacekeeping Force in Cyprus (UNFICYP) and in 1966 he was promoted to major of the General Staff Corps. He was promoted to lieutenant colonel of the General Staff Corps in 1968 and served in G\u00f6ta Life Guards (P 1) in 1970. In 1972, Lugn was promoted to colonel of the General Staff Corps and appointed section chief in the Army Staff. From 1975 to 1977, he served as acting regimental commander of H\u00e4lsinge Regiment (I 14) and G\u00e4vleborg Defence District (G\u00e4vleborgs f\u00f6rsvarsomr\u00e5de, Fo 49)[3] when he was promoted to senior colonel and was appointed Chief of Staff of the Western Military District.[1] Lugn was promoted to major general and appointed Chief of the Army Staff and Chief of the General Staff Corps in 1979.[1]\n\nAs Chief of the Army Staff, he led the difficult balancing work between quality and quantity in the conscript army within the given financial framework. His written instructions to the staff were marked by a good pen. They expressed his enduring interest in quality in the army's war organization. Lugn's interaction with the staff members was characterized by consideration pairing with great humor. His laid-back leadership style created a good atmosphere that eased employees' sometimes heavy workload.[3] Lugn then served as Chief of Home Guard from 1 October 1983.[4]\n\nAs Chief of Home Guard, Lugn made radical changes to the Home Guard. He got the servicemen to accept that they belonged to an army unit and introduced military training to all servicemen. It was revolutionary for the Home Guard, which until then admittedly received weapons training but very little unit training. Now the servicemen were trained in groups and also in working platoons and the training included all the elements that a soldier needs to be able to have. He also made sure that the platoons got heavier weapons such as machine guns and recoilless rifles. Lugn also took hold of the higher education of the commander and introduced a higher education of circuit Home Guard commanders, which led to competence as battalion commander.[3] Lugn served as Chief of Home Guard until his retirement on 1 March 1988.[4]", "output": "Major General Per Erick Robert Lugn leadership carried a laid back leadership style that ultimately created a good atmosphere, specially easing the workload of the staff members.", "category": "IT"}, {"instruction": "which country surrounds India?", "input": "", "output": "India shares borders with many countries like China, Afghanistan, and Pakistan. Bangladesh, Bhutan, Nepal, and Burma. India is also surrounded by the Bay of Bengal, the Atlantic Ocean, and the Indian Ocean.", "category": "IT"}, {"instruction": "Give me a summary of Dataphor based on this text", "input": "Dataphor is an open-source truly-relational database management system (RDBMS) and its accompanying user interface technologies, which together are designed to provide highly declarative software application development. The Dataphor Server has its own storage engine or it can be a virtual, or federated, DBMS, meaning that it can utilize other database engines for storage.\n\nDataphor has been praised for its adherence to relational principles, more closely so than any SQL product.", "output": "Dataphor is an open-source database management system that provides a declarative software application development that has been praised for its adherence to relational principles. The Dataphor Server has its own storage engine but it can also utilize other database engines for storage that are virtual or federated DBMS.", "category": "IT"}, {"instruction": "Write an intro to a startup communications company that no longer exists", "input": "", "output": "BB Networking, Inc. is one of today's most exciting next-generation communication \nservice providers. BBN enables small and medium-sized businesses to utilize the kind of \ncommunication solutions that were previously only the domain of larger companies. \nBBN provides local, long distance, and wireless voice services, dedicated \nInternet access, and advanced Internet services, including remote access, virtual private \nnetworks (VPN), web hosting, video, and high-tech applications through its own network. \nBBN provides not only access to sophisticated communications tools but \nsimplicity as well. Customers within BBN's network footprint can simply plug into a \nBBN wall jack and immediately have access to a full range of cutting edge \ncommunication and Internet services as well as innovative E-business solutions. Formed \nwith the partnership of America's premier real estate firms and venture capital firm \nKleiner Perkins Caufield & Byers, BBN is leading a revolution by delivering \ncomprehensive communications, Internet and E-business solutions to small and medium \nbusinesses. BBN currently spans several hundred million square feet and \nnearly twenty-five percent of the commercial office space in the United States across its \nreal estate owner partnerships.\nBroadband needs to develop ordering processes so that it\u2019s operations will be scalable at a \nrapid pace. \nIdea Integration has assisted startup and growing telecommunications providers in the \nWashington, DC, metropolitan area for the last decade. These services have included a \nhost of OSS projects including business requirements development, process development, \nnew product development, and system implementation within the CLEC OSS \nenvironment.", "category": "IT"}, {"instruction": "What is the capital of Spain and what is it's population?", "input": "", "output": "The capital of Spain is Madrid and it has approximately 3.4 million people", "category": "IT"}, {"instruction": "Who are some of the most influential women's hockey players", "input": "", "output": "Hayley Wickenheiser, Cassie Campbell, Cammi Granato, Angela Ruggiero", "category": "IT"}, {"instruction": "Choose the word which is different from the rest: chicken, snake, swan, crocodile, frog", "input": "", "output": "All except chicken can live in water", "category": "IT"}, {"instruction": "Tell me whether these are TV shows or books: Modern Family, You, Don Quixote, A Tale of Two Cities,  The Little Prince", "input": "", "output": "Modern Family (TV Show), You (TV Show), Don Quixote (Book), A Tale of Two Cities (Book),  The Little Prince (Book)", "category": "IT"}, {"instruction": "Describe the governing arrangements provided by the Articles of Confederation. What were the main weaknesses of the document?", "input": "", "output": "The Articles of Confederation (AoC) was the first written constitution of the United States. There were various governing arrangements provided by the AoC, but the most important was protecting the power or sovereignty of the states.  The state would not have ratified the AoC if the federal government did not guarantee the powers of the states. The AoC defined a federal government with a unicameral legislature (one vote per state).  This legislation had the following powers: declare war, conduct \u201cforeign or commercial relations with other countries\u201d (i.e. treaties), and executive functions that would be carried out by legislative committees. It also \u201csuggested a federal court system\u201d.  This federal government was to be funded by the states.\nThough it provided these powers to the federal government, there were inherent weaknesses built into the federal government. First, there was no way for the legislature to enforce its decisions. Second, a declared war or commercial treaty required the consent of at least 9 states. Even if a war was approved, there was no federal army, only state militias. Third, the federal government relied on the states for funding.  If the states didn\u2019t like legislation passed, they could simply withhold funding. Fourth, amendments to the AoC required the unanimous agreement of all thirteen states.  A realization came that these weaknesses inhibited the governing ability of the federal government.  This set the stage for dropping the AoC, which then lead to the current Constitution of the United States.", "category": "IT"}, {"instruction": "Classify each of these items as footwear or headwear: wool hat, snowshoes, baseball hat, bicycle helmet, skis, flippers, and flip flops.", "input": "", "output": "The footwear items include: snowshoes, skis, flippers and flip flops.\nThe headwear items include: the wool hat, baseball hat and bike helmet.", "category": "IT"}, {"instruction": "Which artist made the hit song One More Time?", "input": "", "output": "Daft Punk", "category": "IT"}, {"instruction": "Who succeeded Howard Schultz as Chairman of Starbucks Corporation on June 2018?", "input": "Myron Edward \"Mike\" Ullman III (born November 26, 1946) is the former chairman and CEO of J. C. Penney and on June 26, 2018, Ullman succeeded Howard Schultz as Chairman of Starbucks Corporation.", "output": "Ullman served as Penney's CEO twice: first from December 2004 through October 2011, when he was succeeded by Ron Johnson, and then again after Johnson's departure, from April 2013 through July 2015 when Ullman stepped down.\n\nOn June 26, 2018, Ullman succeeded Howard Schultz as Chairman of Starbucks Corporation.\n\nHe has six siblings and his parents were residents of Canfield, Ohio. He is married to Cathy Emmons Ullman and has six children with her.", "category": "IT"}, {"instruction": "How often do Germans vote?", "input": "", "output": "Federal elections in Germany are held every four years. Germans also vote in the European election, which is conducted every five years. Furthermore, state elections are typically held every five years, but the dates are staggered between different states. Finally, referendums might occur irregularly. The voter turnout varies; an individual voter might not participate in an election.", "category": "IT"}, {"instruction": "What is the difference between a clan and a tribe", "input": "In different cultures and situations, a clan usually has different meaning than other kin-based groups, such as tribes and bands. Often, the distinguishing factor is that a clan is a smaller, integral part of a larger society such as a tribe, chiefdom, or a state. In some societies, clans may have an official leader such as a chief, matriarch or patriarch; or such leadership role is performed by elders. In others, leadership positions may have to be achieved.\n\nThe term tribe is used in many different contexts to refer to a category of human social group. The predominant worldwide usage of the term in English is in the discipline of anthropology. Its definition is contested, in part due to conflicting theoretical understandings of social and kinship structures, and also reflecting the problematic application of this concept to extremely diverse human societies. The concept is often contrasted by anthropologists with other social and kinship groups, being hierarchically larger than a lineage or clan, but smaller than a chiefdom, nation or state. These terms are equally disputed. In some cases tribes have legal recognition and some degree of political autonomy from national or federal government, but this legalistic usage of the term may conflict with anthropological definitions.\n\nIn the United States, Native American tribes are legally considered to have \"domestic dependent nation\" status within the territorial United States, with a government-to-government relationship with the federal government.[1]", "output": "In different cultures and situations, a clan usually has different meaning than other kin-based groups, such as tribes and bands. Often, the distinguishing factor is that a clan is a smaller, integral part of a larger society such as a tribe, chiefdom, or a state. In some societies, clans may have an official leader such as a chief, matriarch or patriarch; or such leadership role is performed by elders. In others, leadership positions may have to be achieved.\n\nThe term tribe is used in many different contexts to refer to a category of human social group. The predominant worldwide usage of the term in English is in the discipline of anthropology. Its definition is contested, in part due to conflicting theoretical understandings of social and kinship structures, and also reflecting the problematic application of this concept to extremely diverse human societies. The concept is often contrasted by anthropologists with other social and kinship groups, being hierarchically larger than a lineage or clan, but smaller than a chiefdom, nation or state. These terms are equally disputed. In some cases tribes have legal recognition and some degree of political autonomy from national or federal government, but this legalistic usage of the term may conflict with anthropological definitions.\n\nIn the United States, Native American tribes are legally considered to have \"domestic dependent nation\" status within the territorial United States, with a government-to-government relationship with the federal government.", "category": "IT"}, {"instruction": "What US state has the most coastline?", "input": "", "output": "Alaska is the state with the largest coastline at approximately 66,000 miles.", "category": "IT"}, {"instruction": "Who are the considered to be the best soccer players of all time, and what countries are they from?", "input": "", "output": "Pel\u00e9 (Brazil), Lionel Messi (Argentina), Cristiano Ronaldo (Portugal), Ronaldo (Brazil), Diego Maradona (Argentina), Franz Beckenbauer (Germany), George Best (Northern Ireland), Michel Platini (France), Johan Cruyff (The Netherlands), and David Beckham (England).", "category": "IT"}, {"instruction": "What is Redshift?", "input": "", "output": "Amazon Redshift is a data warehouse product which forms part of the larger cloud-computing platform Amazon Web Services. It is built on top of technology from the massive parallel processing data warehouse company ParAccel, to handle large scale data sets and database migrations.", "category": "IT"}, {"instruction": "How do you make Crawfish bread?", "input": "", "output": "Ingredients\n1 pound crawfish tail meat, peeled, cleaned and deveined\n1/2 stick butter\n1 clove garlic, minced\n3/4 cup chopped and drained ripe tomatoes\n1 tablespoon Cajun seasoning\n3/4 cup Monterey Jack Cheese\n1/4 cup grated Parmesan\n1/2 cup mayonnaise\n3 tablespoons chopped fresh parsley\n1 loaf French bread\n\nDirections :\n1. Preheat the oven to 350 degrees F. \n2. Rinse the crawfish. In a large skillet, melt the butter over medium heat. Add the garlic and cook for a few minutes. Add the tomatoes, Cajun seasoning and crawfish. Saute for 1 minute. Remove from the heat. \n3. In a bowl, mix together the cheeses, mayonnaise and parsley. Add the tomato and crawfish mixture to the mayo mixture. \n4. Cut the loaf of bread in half and then cut the bread lengthwise. Spoon the mixture on the bread and bake for 10 to 15 minutes. Then broil for an additional 3 to 5 minutes. Watch closely, as not to burn. \n5. Cut the bread into individual portions and serve.", "category": "IT"}, {"instruction": "Why is soccer the most popular sport in the world?", "input": "", "output": "Soccer is the most popular sport in the world because of several reasons including: It is easy to understand the rules and thus it is easy to play.  The scoring system is simple - one goal equals 1 point.  It does not require a lot of equipment.  As a soccer player you have a lot of freedom in decision making compared to other sports like American football where players are expected to follow specific directions and plays from the coach.  Soccer can be played in many different formats - from official team sizes with 11 players vs. 11 players to smaller teams of 2 players vs 2 players.  Soccer is fun and exciting to play or watch.", "category": "IT"}, {"instruction": "define rainbow clours", "input": "", "output": "VIBGYOR  Violet\u2013Indigo\u2013Blue\u2013Green\u2013Yellow\u2013Orange\u2013Red", "category": "IT"}, {"instruction": "Jill, a 60-year-old personal training client, wants to improve her hip flexibility. Identify two exercises commonly done in a Pilates class that would address core strength and flexibility, thus improving Jill's lower back health.", "input": "", "output": "One exercise is the criss-cross, which helps target the participant\u2019s core strength and flexibility. The participant alternates bringing one shoulder towards the opposing knee, while keeping their hands on the back of their head, lying face-up, and curling their head up. Another exercise would be plank leg lift, which starts as a regular high plank. The participant alternates lifting one leg off the floor, keeping their core engaged to stabilize the movement.", "category": "IT"}, {"instruction": "From the passage find the major production areas where Avocado is cultivated. Display the results in comma separated format.", "input": "The avocado (Persea americana) is a medium-sized, evergreen tree in the laurel family (Lauraceae). It is native to the Americas and was first domesticated by Mesoamerican tribes more than 5,000 years ago. Then as now it was prized for its large and unusually oily fruit.[3] The tree likely originated in the highlands bridging south-central Mexico and Guatemala.[4][5][6] Its fruit, sometimes also referred to as an alligator or avocado pear, is botanically a large berry containing a single large seed.[7] Avocado trees are partly self-pollinating, and are often propagated through grafting to maintain consistent fruit output.[8] Avocados are presently cultivated in the tropical and Mediterranean climates of many countries.[4] Mexico is the world's leading producer of avocados as of 2020, supplying nearly 30% of the global harvest in that year.[9]\n\nThe fruit of domestic varieties have smooth, buttery, golden-green flesh when ripe. Depending on the cultivar, avocados have green, brown, purplish, or black skin, and may be pear-shaped, egg-shaped, or spherical. For commercial purposes the fruits are picked while unripe and ripened after harvesting. The nutrient density and extremely high fat content of avocado flesh are useful to a variety of cuisines and are often eaten to enrich vegetarian diets.[10]\n\nIn major production regions like Chile, Mexico and California the water demands of avocado farms place strain on local sources.[11] Avocado production is also implicated in other externalities, including deforestation and human rights concerns associated with the partial control of their production in Mexico by organized crime.[12][13][14][15] Global warming is expected to result in significant changes to the suitable growing zones for avocados, and place additional pressures on the locales in which they are produced due to heat waves and drought.[16][17]", "output": "Chile, Mexico, California", "category": "IT"}, {"instruction": "During which year Emperor Shapur II learned to play polo?", "input": "The game's English name derives from the Balti language, from its word for 'ball', polo. It is cognate with the Standard Tibetan pulu, also meaning 'ball'.\n\nAlthough the exact origins of the game are not certain, many scholars suggest it most likely began as a simple game played by Iranic and Turkic equestrian nomads in Central Asia. An archaic variation of polo, regionally referred to as buzkashi or kokpar, is still played in parts of Central Asia. It was developed and formalised in Ancient Iran (Persia) as \"chovgan\" (\u010dowg\u0101n), becoming a national sport played extensively by the nobility. Women played as well as men.[5] During the period of the Parthian Empire (247 BC to 224 AD), the sport had great patronage under the kings and noblemen. According to The Oxford Dictionary of Late Antiquity, the Persian ball game was an important pastime in the court of the Sasanian Empire (224\u2013651). It was also part of the royal education for the Sasanian ruling class. Emperor Shapur II learnt to play polo at age seven in 316 AD.", "output": "316 AD", "category": "IT"}, {"instruction": "Extract the various manufacturers and suppliers of the Tomahawk missile and separate them by comma", "input": "The Tomahawk (/\u02c8t\u0252m\u0259h\u0254\u02d0k/) Land Attack Missile (TLAM) is a long-range, all-weather, jet-powered, subsonic cruise missile that is primarily used by the United States Navy and Royal Navy in ship and submarine-based land-attack operations.\n\nUnder contract from the U.S. Navy, the Tomahawk was designed at the APL/JHU in a project led by James Walker near Laurel, Maryland, and was first manufactured by General Dynamics in the 1970s. It was intended to fill the role of a medium- to long-range, low-altitude missile that could be launched from a naval surface warfare platform, and featured a modular design accommodating a wide variety of warhead, guidance, and range capabilities. At least six variants and multiple upgraded versions of the TLAM have been added since the original design was introduced, including air-, sub-, and ground-launched variants with conventional and nuclear armaments. In 1992\u20131994, McDonnell Douglas Corporation was the sole supplier of Tomahawk Missiles and produced Block II and Block III Tomahawk missiles and remanufactured many Tomahawks to Block III specifications.[10] In 1994, Hughes outbid McDonnell Douglas Aerospace to become the sole supplier of Tomahawk missiles. By 2019, the only variants in service were non-nuclear, sea-launched variants manufactured by Raytheon.[11] In 2016, the U.S. Department of Defense purchased 149 Tomahawk Block IV missiles for $202.3 million.[3]", "output": "General Dynamics, McDonnell Douglas Corporation, Hughes, Raytheon", "category": "IT"}, {"instruction": "Where is the best place to vacation in the Bahamas?", "input": "", "output": "Harbour Island is a small island in the Bahamas, accessible via the airport at North Eleuthera. Flights leave Miami, Fort Lauderdale or Nassau, several times daily. From Florida, Harbour Island is a 45min paddle jumper flight to North Eleuthera and then a 10 minute speed boat. \nHarbour Island has 8 hotels, Coral Sands, Pink Sands, Ramora Bay, Valentines, The Rockhouse, and The Dunmore. The Landing. All are boutique hotels. Coral Sands is about 90 rooms and the largest. There are no cars allowed in Harbour Island. Everyone travels by golf cart. Restaurants are great on the Island, and no visit is complete without a visit to Daddy D's nightclub.", "category": "IT"}, {"instruction": "What do economists do?", "input": "", "output": "Economists study a diverse range of social issues whose outcomes are driven by the choices of individuals under resource constraints and limited information. There are various subfields in economics:\n\n- Microeconomists study the supply and demand decision of individuals and firms, such as how profits can be maximized and how much of a good or service consumers will demand at a certain price. \n- Industrial/Organizational Economists study the market structure of particular industries in terms of the number of competitors, and the market decisions of competitive firms and monopolies. These economists may also be concerned with antitrust policy and its impact on market structure.\n- Macroeconomists study historical trends in the whole economy and forecast future trends in areas such as unemployment, inflation, economic growth, productivity, and investment. \nFinancial Economists study the money and banking system and the effects of rising interest rates. \n- Public Finance Economists primarily are involved in studying the role of the government in the economy and the effects of tax cuts, budget deficits, and welfare policies.\nInternational Economists study international financial markets, exchange rates, and the effects of various trade policies such as tariffs.\n- Labor Economists study the supply and demand for labor and the determination of wages. These economists also try to explain the reasons for unemployment, and the effects on labor markets of changing demographic trends such as an aging population and increasing immigration. \n- Econometricians are involved in all areas of economics and use mathematical techniques such as calculus, game theory, and regression analysis to formulate economic models. These models help to explain economic relationships and are used to develop forecasts related to the nature and length of business cycles, the effects of a specific rate of inflation on the economy, the effects of tax legislation on unemployment levels, and other economic phenomena. Many economists have applied these fundamental areas of economics to more narrow areas with specific applications such as health, education, agriculture, urban and regional economics, law, history, energy, and the environment. \n\nEconomists may work in Business, Finance Government and Academia.", "category": "IT"}, {"instruction": "Classify each of the following as either a drink or a food: apple juice, cake, hamburger, carrot, orange juice, soda.", "input": "", "output": "apple juice is a drink\ncake is a food\nhamburger is a food\ncarrot is a food\norange juice is a drink\nsoda is a drink", "category": "IT"}, {"instruction": "Why do cats purr?", "input": "In domestic cats, many signals that occur when interacting with humans seem to originate from when the animal was dependent on the mother. Cats have been observed to purr for most of their lifespan, starting from when they were young and suckling from their mother. Purring may have developed as an evolutionary advantage as a signaling mechanism of reassurance between mother cats and nursing kittens. Post-nursing cats often purr as a sign of contentment: when being petted, becoming relaxed, or eating. Some purring may be a signal to another animal that the purring cat does not pose a threat.", "output": "Cats purr for a variety of reasons. Purring can be a sign of contentment or comfort, for example when being pet, while relaxing or eating. It is thought that purring may have developed as an evolutionary trait signaling reassurance between the mother cat and its nursing kittens.", "category": "IT"}, {"instruction": "What is the next big thing after cloud computing ?", "input": "", "output": "Consensus suggests that Edge commuting with be the next big technology  to compliment cloud compute.", "category": "IT"}, {"instruction": "What style of music is played in the World of Warcraft game?", "input": "Almost all of the music in World of Warcraft is orchestral, with a wide variety of classical and folk instruments in harmony, often playing widely transformative, non-repetitive melodies. While the player is in game, music is usually playing from a set of tracks composed to match the mood of the type of environment your character is in such as \"mountain\", \"forest\", \"plains\", \"jungle\", et cetera; while some individual zones and cities such as Elwynn Forest and Thunder Bluff are given their own set of tracks. Some environments play different music depending on the time of day you are in them.", "output": "Most of the music in World of Warcraft is orchestral, with a variety of classical and folk instruments in harmony.", "category": "IT"}, {"instruction": "Based on this paragraph when was the last time we sent them to space?", "input": "Tardigrades are the first known animal to survive after exposure to outer space.[68] In September 2007, dehydrated tardigrades were taken into low Earth orbit on the FOTON-M3 mission carrying the BIOPAN astrobiology payload. For 10 days, groups of tardigrades, some of them previously dehydrated, some of them not, were exposed to the hard vacuum of outer space, or vacuum and solar UV radiation.[69][3][70][71] Back on Earth, more than 68% of the subjects protected from solar UV radiation were reanimated within 30 minutes following rehydration, although subsequent mortality was high; many of these produced viable embryos.[69][68] In contrast, hydrated samples exposed to the combined effect of vacuum and full solar UV radiation had significantly reduced survival, with only three subjects of Milnesium tardigradum surviving.[69] Also, it was found that the space vacuum did not have a significant effect on egg-laying in either R. coronifer or M. tardigradum. However, M. tardigradum exposed to UV radiation had a lower egg laying rate.[72] In May 2011, Italian scientists sent tardigrades on board the International Space Station along with extremophiles on STS-134, the final flight of Space Shuttle Endeavour.[73][74][75] Their conclusion was that microgravity and cosmic radiation \"did not significantly affect survival of tardigrades in flight, and stated that tardigrades represent a useful animal for space research.\"[76][77] In November 2011, they were among the organisms to be sent by the U.S.-based Planetary Society on the Russian Fobos-Grunt mission's Living Interplanetary Flight Experiment to Phobos; however, the launch failed. In August 2019, scientists reported that a capsule containing tardigrades in a cryptobiotic state may have survived for a while on the Moon after the April 2019 crash landing of Beresheet, a failed Israeli lunar lander, but in May 2021 it was reported that they were unlikely to have survived the impact.[78][79][60]", "output": "The last record of us sending Tardigrades into space was in April 2019, which had an unfortunate ending after the lunar lander, the Beresheet, failed and crash-landed on the moon.", "category": "IT"}, {"instruction": "What is the best way to cook a steak?", "input": "", "output": "Because tastes differs, there are no best way to cook a steak.\n\nHere are some optimized ways to cook steak.\n\nFastest way to cook a steak - cast iron skillet.  Pan sear room temperature steak in a host cast iron skillet; sear the steak on both sides; baste with melted butter / herbs until done to the desired doneness; rest/cut/serve.\n\nMost consistent way to cook a steak - sou vide followed by flame torch the exterior.  Season steak on both sides / edges; put into vacuum bag, vacuum bag, put under sous vide water bath at 130F for 1-4 hours; take it out of the bag, pat dry; use flame torch to char both sides; rest/cut/serve.\n\nMost scientific way to cook a steak - cold sear.  Put steak into non-sticking pan on high for 2 minutes; flip once and cook for another 2 minutes; reduce heat to medium low, flip and cook for another 2 minutes; flip and cook for another 2 minutes; keep on flipping / cooking for 2 minutes until reaching desired doneness; season; rest/cut/serve.", "category": "IT"}, {"instruction": "What is the city of Seattle known for?", "input": "", "output": "Seattle is located in the northwest corner of the United States and is known for its overcast and rainy weather. Seattle has a strong coffee culture, in part because Starbucks was started there. The surrounding Cascade mountains and Puget Sound provide plenty of outdoor adventures, such as boating, rock climbing, and hiking. Many famous musicians started in Seattle, including Nirvana and Macklemore.", "category": "IT"}, {"instruction": "What is algebra and who invented it?", "input": "", "output": "Algebra is the study of variables and the rules for manipulating these variables in formulas.\nThe word algebra(in Arabic al-jabr) comes from the title of the early 9th century book \u02bfIlm al-jabr wa l-muq\u0101bala \"The Science of Restoring and Balancing\" by the Persian mathematician and astronomer al-Khwarizmi. He used the term al-jabr for the operation of moving a term from one side of an equation to the other.\nhere is a basic algebra equation:\n2 + x = 4\nby moving 2 to the other side of the equation we will have:\nx = 4 - 2\nx = 2", "category": "IT"}, {"instruction": "What is a group of cats called?", "input": "", "output": "A group of cats is called a clowder.", "category": "IT"}, {"instruction": "What is your favorite fast-casual restaurant and why?", "input": "", "output": "Chipotle is my favorite place to grab a quick bite to eat.  The food is fresh and delicious. Plus, they offer a simple menu and have high quality ingredients.   It is also very affordable.  The Barbacoa bowl tastes amazing and is my favorite thing to order", "category": "IT"}, {"instruction": "Write a manifesto for the \"Be IRL\" movement. The movement advocates being present to your surroundings and fellow humans, vs being immersed in the virtual world created by our smartphones.", "input": "", "output": "New \"technology\" comes with incredible benefits, but also incredible long term harms. Think of plentiful calories (no fear of starvation) vs the obesity epidemic. Now think, constant dopamine vs incredible lack of connection to our environment, no new friends and a loneliness epidemic.\n\nWe see it all around us like some dystopian movie. Everyone is looking down at their phones, their eyes and ears oblivious to everything around them. Colleges, the very places that should be bursting with energy, laughter, and serendipitous lifelong friendships, have become places full of people with few friends, constantly scrolling in search of the ever decreasing dopamine hit from a like or just something \"new\".", "category": "IT"}, {"instruction": "What are close cities to Legonice?", "input": "\u0141\u0119gonice [w\u025bn\u0261\u0254\u02c8nit\u0361s\u025b] is a village in the administrative district of Gmina Nowe Miasto nad Pilic\u0105, within Gr\u00f3jec County, Masovian Voivodeship, in east-central Poland.[1] It lies approximately 3 kilometres (2 mi) west of Nowe Miasto nad Pilic\u0105, 36 km (22 mi) south-west of Gr\u00f3jec, and 74 km (46 mi) south-west of Warsaw.\n\nThe village has a population of 440.", "output": "Close cities to Legonice are Nowe Miasto nad Pilica, Grojec, and Warsaw.", "category": "IT"}, {"instruction": "When did Delaware join the United States?", "input": "", "output": "Delaware was admitted to the union on December 7, 1787.", "category": "IT"}, {"instruction": "Given the reference text about Super Bowl LV, please answer the following questions:\n1. Who performed at the halftime show?\n2. Which team won and what was the final score?\n3. Who was the MVP?\n4. Where was the game played?", "input": "Super Bowl LV was an American football game played to determine the champion of the National Football League (NFL) for the 2020 season. The National Football Conference (NFC) champion Tampa Bay Buccaneers defeated the defending American Football Conference (AFC) and Super Bowl champion Kansas City Chiefs, 31\u20139.[7] The game was played on February 7, 2021, at Raymond James Stadium in Tampa, Florida, the home stadium of the Buccaneers, marking the first time a team played a Super Bowl in its home stadium.[8][9] Due to COVID-19 protocols limiting the stadium's seating capacity to 25,000 fans, it was the least-attended Super Bowl.[10]\n\nThe Buccaneers' victory was their second and made them one of two teams, along with the Baltimore Ravens, to be undefeated in multiple Super Bowls. They finished the regular season with an 11\u20135 record and a wild card berth to advance to their second Super Bowl appearance through the guidance of several new acquisitions, most notably 21-year veteran quarterback Tom Brady in his first season away from the New England Patriots. The Chiefs, aided by their top-ranked offense, finished the regular season with a league-best 14\u20132 record to advance to their fourth Super Bowl appearance and were the defending Super Bowl LIV champions, seeking to become the first repeat champions since the Patriots in 2004.[11]\n\nFor the first time under quarterback Patrick Mahomes, the Chiefs failed to score a touchdown and lost by double-digits, making them the third Super Bowl team to not score a touchdown.[b][12] They also committed 11 penalties for 120 yards, including a record eight penalties for 95 yards in the first half, most of which were called against the defense.[13][14][15][16] The Buccaneers capitalized on these struggles to take a commanding 21\u20136 lead at halftime and dominated the remainder of the game. Brady, who also extended his player records for Super Bowl appearances to 10 and wins to seven, was named Super Bowl MVP for a record fifth time and was the first to receive the award with multiple franchises.[17][18][19] He became the oldest player to receive the honor and win a Super Bowl as the starting quarterback at age 43,[20] breaking additional personal records, while Bruce Arians was the oldest head coach to win the Super Bowl at 68.[21]\n\nThe game was televised nationally by CBS. Country music singer Eric Church and R&B singer Jazmine Sullivan performed the national anthem, while the halftime show was headlined by Canadian singer The Weeknd.[5] On television, Super Bowl LV was seen by 91.63 million viewers, the lowest ratings for the game since 2006. Combined with viewership on other platforms, viewership was down by 5% overall in comparison to Super Bowl LIV, but with a 69% increase in average streaming viewership.", "output": "Given the provided reference text, the answers to the questions are as follows:\n1. Who performed at the halftime show?\nThe halftime show was headlined by Canadian singer The Weeknd.\n2. Which team won and what was the final score?\nThe Tampa Bay Buccaneers won the game by a score of 31\u20139.\n3. Who was the MVP?\nTom Brady was the MVP.\n4. Where was the game played?\nThe game was played at Raymond James Stadium in Tampa, Florida", "category": "IT"}, {"instruction": "Classify each of the following as a language or religion: Spanish, Catholicism, Islam, Judaism, Mandarin, Arabic", "input": "", "output": "Spanish: Language\nCatholicism: Religion\nIslam: Religion\nJudaism: Religion\nMandarin: Language\nArabic: Language", "category": "IT"}, {"instruction": "Who founded the city of Price, Quebec?", "input": "It was the arrival of the Price Brothers and Company (of William Evan Price) that the village of Price was founded at the end of the 19th century. It was a suburb of Saint-Octave-de-M\u00e9tis, which constituted a community of workers, who were employed at the saw mill.", "output": "The Price Brothers and Company", "category": "IT"}, {"instruction": "Based on the reference text, why was the eastern section of the bridge rebuilt?", "input": "The San Francisco\u2013Oakland Bay Bridge, known locally as the Bay Bridge, is a complex of bridges spanning San Francisco Bay in California. As part of Interstate 80 and the direct road between San Francisco and Oakland, it carries about 260,000 vehicles a day on its two decks.[3][4] It has one of the longest spans in the United States.\n\nThe toll bridge was conceived as early as the California Gold Rush days, with \"Emperor\" Joshua Norton famously advocating for it, but construction did not begin until 1933. Designed by Charles H. Purcell,[6][7] and built by American Bridge Company, it opened on Thursday, November 12, 1936, six months before the Golden Gate Bridge. It originally carried automobile traffic on its upper deck, with trucks, cars, buses and commuter trains on the lower, but after the Key System abandoned rail service on April 20, 1958, the lower deck was converted to all-road traffic as well. On October 12, 1963, traffic was reconfigured to one way traffic on each deck, westbound on the upper deck, and eastbound on the lower deck, with trucks and buses allowed on the upper deck.[8]\n\nIn 1986, the bridge was unofficially dedicated to former California Governor James Rolph.[9]\n\nThe bridge has two sections of roughly equal length; the older western section, officially known as the Willie L. Brown Jr. Bridge (after former San Francisco Mayor and California State Assembly Speaker Willie L. Brown Jr.), connects downtown San Francisco to Yerba Buena Island, and the newer unnamed eastern section connects the island to Oakland. The western section is a double suspension bridge with two decks, westbound traffic being carried on the upper deck while eastbound is carried on the lower one. The largest span of the original eastern section was a cantilever bridge.\n\nDuring the 1989 Loma Prieta earthquake, a portion of the eastern section's upper deck collapsed onto the lower deck and the bridge was closed for a month. Reconstruction of the eastern section of the bridge as a causeway connected to a self-anchored suspension bridge began in 2002; the new eastern section opened September 2, 2013, at a reported cost of over $6.5 billion; the original estimate of $250 million was for a seismic retrofit of the existing span.[10][11] Unlike the western section and the original eastern section of the bridge, the new eastern section is a single deck carrying all eastbound and westbound lanes. Demolition of the old east span was completed on September 8, 2018.[12]", "output": "The eastern section of the bridge was rebuilt because a portion of its upper deck collapsed onto the lower deck during the 1989 Loma Prieta earthquake.", "category": "IT"}, {"instruction": "What are all the different types of alpaca breeds?", "input": "The alpaca comes in two breeds, Suri and Huacaya, based on their fibers rather than scientific or European classifications.\n\nHuacaya alpacas are the most commonly found, constituting about 90% of the population. The Huacaya alpaca is thought to have originated in post-colonial Peru. This is due to their thicker fleece which makes them more suited to survive in the higher altitudes of the Andes after being pushed into the highlands of Peru with the arrival of the Spanish.\n\nSuri alpacas represent a smaller portion of the total alpaca population, around 10%. They are thought to have been more prevalent in pre-Columbian Peru since they could be kept at a lower altitude where a thicker fleece was not needed for harsh weather conditions.", "output": "The alpaca comes in two breeds, Suri and Huacaya, based on their fibers rather than scientific or European classifications.\n\nHuacaya alpacas are the most commonly found, constituting about 90% of the population. The Huacaya alpaca is thought to have originated in post-colonial Peru. This is due to their thicker fleece which makes them more suited to survive in the higher altitudes of the Andes after being pushed into the highlands of Peru with the arrival of the Spanish.\n\nSuri alpacas represent a smaller portion of the total alpaca population, around 10%. They are thought to have been more prevalent in pre-Columbian Peru since they could be kept at a lower altitude where a thicker fleece was not needed for harsh weather conditions.", "category": "IT"}, {"instruction": "Provide a short review for a Japanese restaurant called Honto in Brisbane. It was a little hard to find as it is in a backstreet, but we found it without too much trouble. Be sure to mention it was very atmospheric and that the food was great.", "input": "", "output": "Dining at Honto was an especially memorable experience for us. The space was atmospheric and the Japanese food served was exceptional. It is surely one of Brisbane's best kept secrets.", "category": "IT"}, {"instruction": "From this summary of how Bilbo found the Ring in The Hobbit, how did Bilbo beat Gollum at the Riddle game?", "input": "As told in The Hobbit, Bilbo found the Ring while lost in the tunnels near Gollum's lair. In the first edition, Gollum offers to surrender the Ring to Bilbo as a reward for winning the Riddle Game. When Tolkien was writing The Lord of the Rings, he realized that the Ring's grip on Gollum would never permit him to give it up willingly. He therefore revised The Hobbit: in the second edition, after losing the Riddle Game to Bilbo, Gollum went to get his \"Precious\" to help him kill and eat Bilbo, but found the Ring missing.[1] Deducing from Bilbo's last question\u2014\"What have I got in my pocket?\"\u2014that Bilbo had found the Ring, Gollum chased him through the caves, not realizing that Bilbo had discovered the Ring's power of invisibility and was following him to the cave's mouth. Bilbo escaped Gollum and the goblins by remaining invisible, but he chose not to tell Gandalf and the dwarves that the Ring had made him invisible. Instead he told them a story that followed the first edition: that Gollum had given him the Ring and shown him the way out. Gandalf was immediately suspicious of the Ring, and later forced the real story from Bilbo.", "output": "Gollum was unable to answer Bilbo's last question, \"What have I got in my pocket?\".", "category": "IT"}, {"instruction": "Extract the platforms that the game can be played on and separate them with a comma.", "input": "Horizon Zero Dawn is a 2017 action role-playing game developed by Guerrilla Games and published by Sony Interactive Entertainment. It is the first game of the Horizon video game series. The plot follows Aloy, a young hunter in a world overrun by machines, who sets out to uncover her past. The player uses ranged weapons, a spear, and stealth to combat mechanical creatures and other enemy forces. A skill tree provides the player with new abilities and bonuses. The player can explore the open world to discover locations and take on side quests. It is the first game in the Horizon series and was released for the PlayStation 4 in 2017 and Windows in 2020.", "output": "PlayStation, Windows", "category": "IT"}, {"instruction": "When was the first Academy Awards?", "input": "", "output": "The first Academy Awards was Thursday, May 16, 1929", "category": "IT"}, {"instruction": "What are the top largest economies in the world?", "input": "", "output": "The United States\nChina\nJapan\nGermany", "category": "IT"}, {"instruction": "Which is a species of fish? Tarp or Carp", "input": "", "output": "Carp", "category": "IT"}, {"instruction": "Extract the names of all of the albums that Taylor Swift has released. Separate them with a comma.", "input": "Swift signed a record deal with Big Machine Records in 2005 and released her eponymous debut album the following year. With 157 weeks on the Billboard 200 by December 2009, the album was the longest-charting album of the 2000s decade.[8] Swift's second studio album, Fearless (2008), topped the Billboard 200 for 11 weeks and was the only album from the 2000s decade to spend one year in the top 10.[9][10] The album was certified Diamond by the RIAA.[11] It also topped charts in Australia and Canada, and has sold 12 million copies worldwide.[12] Her third studio album, the self-written Speak Now (2010), spent six weeks atop the Billboard 200[13] and topped charts in Australia, Canada, and New Zealand.[14]\n\nHer fourth studio album, Red (2012), was her first number-one album in the United Kingdom.[15] It topped charts in Australia, Canada, Ireland, New Zealand, and spent seven weeks at number one on the Billboard 200.[16] Swift scored her fourth US number-one album with 1989 (2014), which topped the Billboard 200 for 11 weeks[17] and was certified 9\u00d7 Platinum by the RIAA.[18] It topped the charts in other countries including Australia, Canada, and New Zealand. Her sixth studio album, Reputation (2017), made Swift the first music artist to have four consecutive albums each sell over one million copies within its debut week.[19] It spent four weeks atop the Billboard 200.[20]\n\nExiting Big Machine, Swift signed with Universal Music Group label Republic Records in 2018.[21] Her seventh studio album, Lover (2019), was the year's global best-selling album by a solo artist.[22] Swift released two studio albums in 2020, Folklore and Evermore, which respectively spent eight and four weeks atop the Billboard 200.[23][24] Swift released two re-recorded albums, Fearless (Taylor's Version) and Red (Taylor's Version), in 2021, after a dispute with Big Machine over the rights to the masters of her first six albums; the former was the first re-recorded album to top the Billboard 200.[25][26] Swift's tenth original studio album, Midnights (2022), became her fifth to sell over a million US first-week copies; It was also the first album to sell over a million physical sales since 2015.", "output": "Taylor Swift, Fearless, Speak Now, Red, 1989, Reputation, Lover, Fearless, Folklore, Evermore, Fearless (Taylor's Version), Red (Taylor's Version), Midnights", "category": "IT"}, {"instruction": "Did Ghana lose by 100 against India in a soccer game?", "input": "", "output": "This game actually didn't happen but Ghanaians and the entire nation some believe it did and tell stories about it. Our parents describe the game as very intriguing filled with mythical black magic and powers. It is believe that the soccer ball turned in the course of the game turned into different sorts of objects every time Ghana had possession. This however aided the Indian team to put up 100 goals whereas Ghana only scored 1. Lastly, legend has it that the Ghanaian player that scored the only goal for Ghana died afterwards", "category": "IT"}, {"instruction": "From the given text, list me details about parity plot", "input": "A parity plot is a scatterplot that compares a set of results from a computational model against benchmark data. Each point has coordinates (x, y), where x is a benchmark value and y is the corresponding value from the model.\n\nA line of the equation y = x, representing perfect model performance, is sometimes added as a reference. Where the model successfully reproduces a benchmark, that point will lie on the line.\n\nParity plots are found in scientific papers and reports, when the author wishes to validate a model in a visual way. However, when the data have a wide range, the large scale makes important discrepancies invisible and the model appears better than it actually is. In that case, a plot of model errors [(y-x) vs. x] is better for evaluating the performance of the model.", "output": "1. A parity plot is a scatterplot that contrasts the output of a computer model with reference data.\n2. Each point is identified by its coordinates (x, y), where x represents a benchmark value and y is the matching value from the model.\n3. To serve as a reference, a line drawn from the equation y = x is occasionally included. Where the model accurately reproduces a benchmark, that point will fall on the line.\n4. When an author wants to visually validate a model in a paper or report, parity plots are used. On the other hand, when the data span a wide range, the big scale obscures significant differences, giving the model the appearance of being better than it actually is. In that situation, a model error plot [(y-x) vs. x] is preferable for assessing the model's performance.", "category": "IT"}, {"instruction": "How do you brew beer?", "input": "", "output": "The steps to make beer is as following: 1. Mashing 2. Separation 3. Boiling 4. Fermentation. The ingredients are brought together through these 4 steps. You can create many beer styles with this process.", "category": "IT"}, {"instruction": "What are some of the most popular undergraduate majors at UC Berkeley?", "input": "", "output": "UC Berkeley has over 150 undergraduate major and minors for students to choose from. Some of the most popular include Molecular and Cell Biology, Computer Science, Economics, and Data Science.", "category": "IT"}, {"instruction": "Which of these are Satellite and Planets: Hydra, Venus, Titan, Kerberos, Pluto, Jupiter, Moon", "input": "", "output": "Satellite: Kerberos, Hydra, Moon, Titan\nPlanets: Pluto, Jupiter, Venus", "category": "IT"}, {"instruction": "I have 3 apples, Jack has 4 pears and Jill has 5 books. After I ate two of Jack's pears, how many fruits we have in total now?", "input": "", "output": "Apples and Pears are fruits, while books are not fruits. So before I ate two pears, we have 3+4=7 fruits in total. After I ate two pears, we have 7-2 = 5 fruits in total.", "category": "IT"}, {"instruction": "I need to plan a wedding and I have no idea where to start. Will you help me brainstorm a few things I should do?", "input": "", "output": "Your wedding a celebration of you and partners love. Here are a couple ideas of where to start. \n1. Sit down with your partner and each share you respective vision, hopes and dreams for your wedding. Listen intently and take notes to what your partner says. \n2. Make a list of the people you would want at your wedding. Tier each potential invite as Tier 1,2 and 3 and who's side they represent (you, your partner, or both).\n3. Identify a preliminary budget based on what you can afford to spend. \n4. Make a list of the most important things to you and your partner, in priority order (venue, band, flowers, dress, etc.)\n5. Evaluate hiring a wedding planner to assist you in your planning efforts. \nGood luck as you begin this exciting process!", "category": "IT"}, {"instruction": "Why is aluminum wiring in a home dangerous?", "input": "", "output": "When current is passed through a 10ft aluminum wire in a home, the wire can expand up to 3 inches. When the current ends, the wire can shrink up to 3 inches. This can cause wires to pull from electrical boxes and connections, as well as wear through their protective coating when touching parts of the house. Wires are typically hidden within walls and ceilings, and if connections are broken or wires become exposed, the electrical current can start fires.", "category": "IT"}, {"instruction": "what type of economy is China?", "input": "", "output": "mixed economy: the socialist market economy (SME) is the economic system and model of economic development employed in the People's Republic of China", "category": "IT"}, {"instruction": "Summarize the main components of a Kubernetes cluster control plane from this paragraph", "input": "Kubernetes defines a set of building blocks (\"primitives\") that collectively provide mechanisms that deploy, maintain, and scale applications based on CPU, memory[33] or custom metrics.[34] Kubernetes is loosely coupled and extensible to meet different workloads. The internal components as well as extensions and containers that run on Kubernetes rely on the Kubernetes API.[35] The platform exerts its control over compute and storage resources by defining resources as Objects, which can then be managed as such.\n\nKubernetes follows the primary/replica architecture. The components of Kubernetes can be divided into those that manage an individual node and those that are part of the control plane.[35][36]\n\nControl plane\nThe Kubernetes master node handles the Kubernetes control plane of the cluster, managing its workload and directing communication across the system. The Kubernetes control plane consists of various components, each its own process, that can run both on a single master node or on multiple masters supporting high-availability clusters.[36] The various components of the Kubernetes control plane are as follows:\n\netcd[37] is a persistent, lightweight, distributed, key-value data store that CoreOS has developed. It reliably stores the configuration data of the cluster, representing the overall state of the cluster at any given point of time. etcd favors consistency over availability in the event of a network partition (see CAP theorem). The consistency is crucial for correctly scheduling and operating services.\nThe API server serves the Kubernetes API using JSON over HTTP, which provides both the internal and external interface to Kubernetes.[35][38] The API server processes and validates REST requests and updates the state of the API objects in etcd, thereby allowing clients to configure workloads and containers across worker nodes.[39] The API server uses etcd's watch API to monitor the cluster, roll out critical configuration changes, or restore any divergences of the state of the cluster back to what the deployer declared. As an example, the deployer may specify that three instances of a particular \"pod\" (see below) need to be running. etcd stores this fact. If the Deployment Controller finds that only two instances are running (conflicting with the etcd declaration),[40] it schedules the creation of an additional instance of that pod.[36]\nThe scheduler is the extensible component that selects on which node an unscheduled pod (the basic entity managed by the scheduler) runs, based on resource availability. The scheduler tracks resource use on each node to ensure that workload is not scheduled in excess of available resources. For this purpose, the scheduler must know the resource requirements, resource availability, and other user-provided constraints or policy directives such as quality-of-service, affinity vs. anti-affinity requirements, and data locality. The scheduler's role is to match resource \"supply\" to workload \"demand\".[41]\nA controller is a reconciliation loop that drives the actual cluster state toward the desired state, communicating with the API server to create, update, and delete the resources it manages (e.g., pods or service endpoints).[42][38] One kind of controller is a Replication Controller, which handles replication and scaling by running a specified number of copies of a pod across the cluster. It also handles creating replacement pods if the underlying node fails.[42] Other controllers that are part of the core Kubernetes system include a DaemonSet Controller for running exactly one pod on every machine (or some subset of machines), and a Job Controller for running pods that run to completion (e.g., as part of a batch job).[43] Labels selectors that are part of the controller's definition specify the set of pods that a controller manages.[44]\nThe controller manager is a process that manages a set of core Kubernetes controllers.", "output": "The kubernetes cluster control plane runs on one more more master nodes. The components are:\n1. etcd - a key value datastore containing the configuration data of the cluster.\n2. The api-server is a server which serves and updates the state of the kubernetes cluster. It watches etcd and keeps the clusters actual state in sync with its desired state.\n3. The scheduler is a component which selects on which node an unscheduled pod should run, based on what each pod needs and what the nodes in the cluster can support.\n4. The controller manager manages several controllers which keep the cluster in sync with its desired state.", "category": "IT"}, {"instruction": "Should I buy a Shinkansen Rail Pass if I visit Japan?", "input": "", "output": "Shinkansen Rail Pass is quite expensive. The cost is slightly cheaper comparing with Shinkansen round trip between Tokyo and Osaka. If you are planning to have a round trip between these 2 cities, then you should definitely consider to get a Shinkansen Rail Pass. If your Shinkansen trip is shorter than that, you probably better estimate the railway cost before get the Shinkansen Rail Pass.", "category": "IT"}, {"instruction": "When and where was Lyubomir Nikolov Vladikin born?", "input": "Vladikin was born on September 3, 1891 in the village of Golyamo Belovo, Pazardzhik area. His mother, Maria Morfova, sister of the opera singer Hristina Morfova and the composer Aleksandar Morfov, studied French Philology in Geneva. His father, Nikola Yonkov Vladikin, was a well-known journalist, scholar, writer, publicist, historian and political activist. Over the period from 1890 to 1912 he was an MP for three consecutive terms. He was a nephew of the Bishop of South Bulgaria (from Ohrid to Edirne), known under the church name Evstatiy Pelagoniyski.[2]", "output": "Vladikin was born on September 3, 1891 in the village of Golyamo Belovo, Pazardzhik", "category": "IT"}, {"instruction": "List the items you need to play pickleball", "input": "", "output": "Pickleball ball, pickleball raquet, court and net", "category": "IT"}, {"instruction": "Tell me whether these are books by black authors: I Know Why the Caged Bird Sings, Homegoing, Between the World and Me, Becoming, Beloved, The Color Purple.", "input": "", "output": "The books: I Know Why the Caged Bird Sings, Homegoing, Between the World and Me, Becoming, Beloved, and The Color Purple are all written by black authors.", "category": "IT"}, {"instruction": "Think up different ways to make a baby stop crying.", "input": "", "output": "Here are different ways to make a baby stop crying:\n1. Give the baby milk\n2. Bounce the baby up and down\n3. Take the baby on a walk\n4. Take the baby for a ride in the car\n5. Give the baby food\n6. Rock the baby to sleep", "category": "IT"}, {"instruction": "Which U.S president had a home called The Hermitage?", "input": "", "output": "Andrew Jackson", "category": "IT"}, {"instruction": "Classify these Indian cities into states that they are in.\nHyderabad, Kolkata, Purulia, Medak, Warangal, Darjeeling", "input": "", "output": "West Bengal - Kolkata, Purulia, Darjeeling\nTelengana - Hyderabad, Medak, Warangal", "category": "IT"}, {"instruction": "What are the ingredients in panch phuran?", "input": "Panch phoron, panch phodan or pancha phutana is a whole spice blend, originating from the eastern part of the Indian subcontinent and used especially in the cuisine of Eastern India and Northeastern India, especially in the cuisine of Bhojpur,[2] Mithila, Odisha, Bengal and Nepal. The name literally means \"five spices\".\n\nAll of the spices in panch phoron are seeds. Typically, panch phoron consists of fenugreek seed, nigella seed, cumin seed, black mustard seed and fennel seed in equal parts.[3] Some cooks prefer to use a smaller proportion of fenugreek seeds, because of their mildly bitter taste.[4]", "output": "Panch phuran, also known as  panch phoron, comprises of the following spices in equal parts: cumin seeds, fenugreek seeds, black mustard seeds, fennel seeds and nigella seeds.", "category": "IT"}, {"instruction": "What is the difference between the Masters and the U.S. Open in golf?", "input": "", "output": "The Masters is one of the four majors that is played every year in golf and is the only major that is played at the same course each year.  Every year the Masters is played in April at Augusta National golf course and it is the first major of the year.  The U.S. Open is another one of the golf majors and is played at a different course every year, although some courses are repeated once every 8-10 years.  The tournament is normally played in the summer and gives the opportunity for amateur golfers all over the U.S. to qualify and play with the professionals.", "category": "IT"}, {"instruction": "How are Social Security and Medicare in the USA funded?", "input": "", "output": "Social Security and Medicare in the USA are funded through payroll taxes on income. Both employees and employers are required to pay payroll taxes.", "category": "IT"}, {"instruction": "Give me a list of ten vegetables that are green.", "input": "", "output": "1. Asparagus\n2. Brussel sprout\n3. Green bean\n4. Broccoli\n5. Kale\n6. Peas\n7. Cabbage\n8. Celery\n9. Artichoke\n10. Arugula", "category": "IT"}, {"instruction": "What is the name of the gruff and tough female Viper pilot on the 2003 reboot of \"Battlestar Galactica\"?", "input": "", "output": "Kara \"Starbuck\" Thrace", "category": "IT"}, {"instruction": "What's the best way to potty train a puppy?", "input": "", "output": "You just adopted a puppy, congratulations!  There are many methods to successfully house-train or potty-train puppies.  First, it's important to remain patient and diligent around maintaining a strict schedule for feeding, rest, play and potty times.  This should start the  moment your puppy arrives as this is going to set them and you up for success.  Second, when accidents happen, which will occur for the first few weeks, remember to be patient and kind to your puppy.  This will develop a deep sense of trust in you as the authority figure in the home.  \n\nGenerally, puppies need to be let outside to go potty outside within a secure area after waking, playtime and after every meal.  It's important not to confuse potty time with playtime and that your puppy is placed safely in a crate or gated area if they aren't being watched closely.   \n\nHow do you know when your puppy needs to go potty?  \n\nMost puppies will begin sniffing the ground when they need to go potty so if you witness this happening indoors, quickly usher your puppy outside or to a training pad.  It's important to provide your puppy a lot of praise for a job well done.  For some puppies, verbal praise from their family member while providing them with a small treat will help your puppy make the connection that going potty in the appropriate area is a very good thing for them and for you.", "category": "IT"}, {"instruction": "Where does the word plumbing originate from?", "input": "", "output": "\"Plumbing\" originates from the original name for Lead (Pb), Plumbum, which is what most pipes were made from at the time.", "category": "IT"}, {"instruction": "What is a Romance language?", "input": "", "output": "A romance language refers to the language family of languages which are derived from Latin, which are spoken in many areas that were a part of the Ancient Roman empire.", "category": "IT"}, {"instruction": "In Digital Marketing, what is the difference between SEO and SEM?", "input": "", "output": "SEO stands for Search Engine Optimization and it focuses on the creation and enhancement of webpages to improve their rankings in organic search results. SEM stands for Search Engine Marketing and it focuses on the use of paid advertisements to rank at the top of Search Engine Results Page.", "category": "IT"}, {"instruction": "What does SRO mean for concert tickets?", "input": "", "output": "SRO refers to Standing Room Only and describes tickets for a section with no seating. These tickets are sometimes sold at a discount at concerts or broadway shows. People may prefer standing sections as they are often closer to the stage and give a more energetic experience.", "category": "IT"}, {"instruction": "Who were the Defense Against the Dark Arts teachers in the Harry Potter series?", "input": "", "output": "While Harry Potter was a student, there were six Defense Against the Dark Arts teachers while he was at Hogwarts. They are Quirinus Quirrell, Gilderoy Lockhart, Remus Lupin, Alastor 'Mad Eye' Moody (who was impersonated for a good chunk of the year by Bartemius Crouch Jr), Dolores Umbridge, and Severus Snape. The final year of the book series, when Harry Potter was no longer in the school, the position of Defense Against the Dark Arts was held by Amycus Carrow. Athough he mostly taught the Dark Arts, not the defense against them.", "category": "IT"}, {"instruction": "Who are the top Presidents of USA", "input": "", "output": "Abraham Lincoln, Franklin D. Roosevelt, and George Washington are most often listed as the three highest-rated presidents among historians. \nMore recent presidents such as Ronald Reagan and Bill Clinton are often rated among the greatest in public opinion polls, but generally do not rank as highly among presidential scholars and historians. \nBecause William Henry Harrison and James A. Garfield both died within their first year in office, they are often omitted from presidential rankings. Zachary Taylor died after serving as president for only 16 months, but he is usually included. In the case of these three presidents, it is not clear whether they received low rankings due to their actions as president or because each was in office for such a limited time that they did not accomplish much.", "category": "IT"}, {"instruction": "Who is John D. Rockefeller?", "input": "John Davison Rockefeller Sr. (July 8, 1839 \u2013 May 23, 1937) was an American business magnate and philanthropist. He has been widely considered the wealthiest American of all time[1][2] and the richest person in modern history.[3][4] Rockefeller was born into a large family in Upstate New York that moved several times before eventually settling in Cleveland. He became an assistant bookkeeper at age 16 and went into several business partnerships beginning at age 20, concentrating his business on oil refining. Rockefeller founded the Standard Oil Company in 1870. He ran it until 1897 and remained its largest shareholder.\n\nRockefeller's wealth soared as kerosene and gasoline grew in importance, and he became the richest person in the country, controlling 90% of all oil in the United States at his peak.[a] Oil was used throughout the country as a light source until the introduction of electricity, and as a fuel after the invention of the automobile. Furthermore, Rockefeller gained enormous influence over the railroad industry which transported his oil around the country. Standard Oil was the first great business trust in the United States. Rockefeller revolutionized the petroleum industry and, through corporate and technological innovations, was instrumental in both widely disseminating and drastically reducing the production cost of oil. His company and business practices came under criticism, particularly in the writings of author Ida Tarbell.", "output": "John Davison Rockefeller Sr. (July 8, 1839 \u2013 May 23, 1937) was an American business magnate and philanthropist. He has been widely considered the wealthiest American of all time and the richest person in modern history. Rockefeller was born into a large family in Upstate New York that moved several times before eventually settling in Cleveland. He became an assistant bookkeeper at age 16 and went into several business partnerships beginning at age 20, concentrating his business on oil refining. Rockefeller founded the Standard Oil Company in 1870. He ran it until 1897 and remained its largest shareholder.\n\nRockefeller's wealth soared as kerosene and gasoline grew in importance, and he became the richest person in the country, controlling 90% of all oil in the United States at his peak. Oil was used throughout the country as a light source until the introduction of electricity, and as a fuel after the invention of the automobile. Furthermore, Rockefeller gained enormous influence over the railroad industry which transported his oil around the country. Standard Oil was the first great business trust in the United States. Rockefeller revolutionized the petroleum industry and, through corporate and technological innovations, was instrumental in both widely disseminating and drastically reducing the production cost of oil. His company and business practices came under criticism, particularly in the writings of author Ida Tarbell.", "category": "IT"}, {"instruction": "Given the lineage of this historical military aircraft, when was the Avro Arrow first flown and what were the operating characteristics of that flight?", "input": "The Avro Canada CF-105 Arrow was a delta-winged interceptor aircraft designed and built by Avro Canada. The CF-105 held the promise of Mach 2 speeds at altitudes exceeding 50,000 feet (15,000 m) and was intended to serve as the Royal Canadian Air Force's (RCAF) primary interceptor into the 1960s and beyond.[3]\n\nThe Arrow was the culmination of a series of design studies begun in 1953 that examined improved versions of the Avro Canada CF-100 Canuck. After considerable study, the RCAF selected a dramatically more powerful design, and serious development began in March 1955. The aircraft was intended to be built directly from the production line, skipping the traditional hand-built prototype phase. The first Arrow Mk. 1, RL-201, was rolled out to the public on 4 October 1957, the same day as the launch of Sputnik I.\n\nFlight testing began with RL-201 on 25 March 1958, and the design quickly demonstrated excellent handling and overall performance, reaching Mach 1.9 in level flight. Powered by the Pratt & Whitney J75, another four Mk. 1s were completed, RL-202, RL-203, RL-204 and RL-205. The lighter and more powerful Orenda Iroquois engine was soon ready for testing, and the first Mk 2 with the Iroquois, RL-206, was ready for taxi testing in preparation for flight and acceptance tests by RCAF pilots by early 1959.", "output": "The Avro Canada RL-201 Arrow was first flown in a test flight on March 25, 1958. During that flight, handling and performance proved excellent and the aircraft reached speeds of up to Mach 1.9 in level flight.", "category": "IT"}, {"instruction": "In what year did George Washington die and how old was he?", "input": "Washington's death came more swiftly than expected. On his deathbed, out of fear of being entombed alive, he instructed his private secretary Tobias Lear to wait three days before his burial. According to Lear, Washington died between 10 p.m. and 11 p.m. on December 14, 1799, with Martha seated at the foot of his bed. His last words were \"'Tis well\", from his conversation with Lear about his burial. He was 67.", "output": "George Washington died in the year 1799 at the age of 67.", "category": "IT"}, {"instruction": "Why is the sky blue?", "input": "", "output": "When the sunlight reaches Earth's atmosphere, the gases and particules in the air will scattered it in all directions. Because of its shorter wave length, blue light is scattered more than the other colors, which make it more visible in the sky, most of the time.", "category": "IT"}, {"instruction": "Tell me which sport the following athletes play, or played in the past: Michael Jordan, Derek Jeter, Joe Namath, Lebron James, Tiger Woods, Rory Mcilroy, Jackie Robinson, Mike Tyson, Barry Sanders, Tom Brady, Jaromir Jagr, Sydney Crosby, Muhammed Ali, Greg Maddux, Oscar Robertson", "input": "", "output": "Please see below for the classification of each athlete.\n\nBaseball: Derek Jeter, Jackie Robinson, Greg Maddux\nBasketball: Lebron James, Michael Jordon, Oscar Robertson\nFootball: Tom Brady, Joe Namath, Barry Sanders\nGolf: Tiger Woods, Rory Mcilroy\nBoxing: Mike Tyson, Muhammed Ali\nHockey: Sydney Crosby, Jaromir Jagr", "category": "IT"}, {"instruction": "Why is pickleball so popular?", "input": "", "output": "Pickleball combines elements of both tennis and ping pong.   Tennis can take up to 2 years to learn the skills in order to play a proper tennis match while pickleball can be learned very quickly.   The motor skills involved with the fast play of ping pong are necessary with pickleball however there is more exercise involved with pickleball.   When you combine the easy to learn nature of pickleball with the fun exercise involved this is why pickleball is becoming the fastest growing sport in the United States.", "category": "IT"}, {"instruction": "How do you change a bicycle tire?", "input": "", "output": "Start by taking off the wheel. For this, open the quick release for the brakes or detach the brake cable. Then, unscrew the axle to take off the wheel. Following, you have to deflate the tire and be able to pull out the tube from underneath the tire. Pry the tire off the rim with tire levers. Once the tire comes off, you can replace the tube and work it back underneath the tire. Remember only to inflate the tube completely once both tube and tire are fitted on the rim. To mount the wheel again, follow the above-described steps in reverse order.", "category": "IT"}, {"instruction": "What are common executive roles at large companies?", "input": "", "output": "Large companies contain different sets of executives. Most companies have a chief executive officer who runs the company. Another common executive title is the Chief Financial Officer, the person responsible for accounting, financial planning and reporting. Chief Technology Officers are generally responsible for building and maintaining technology infrastructure, the code base and driving innovation within the organization. The Chief Marketing Officer is generally responsible for marketing, brand awareness and demand generation within the organization. A Chief People Officer is often responsible for human resources, recruitment and talent management. A Chief Security Officer protects the safety and security of the organization.", "category": "IT"}, {"instruction": "Netflix views streaming video as a \"sustaining\" technology that extends its core mail DVD business. Do you agree with this, or do you think streaming video is a \"disruptive\" technology for Netflix that does not align with its core business and requires a different strategy?", "input": "", "output": "Netflix did a strategic renewal by cannibalizing its own cash cow business of mail-in-DVD services. This was the right move as internet speeds were increasing and moving towards broadband. Netflix was even considering launching a TV box if internet speeds remained constant. I agree that streaming video is a disruptive technology for Netflix, requiring a different strategy. Adopting a disruptive technology, Netflix forced Blockbuster to offer the mail-in-DVD service. By the time Blockbuster offered the mail-in-DVD service, Netflix had already begun experimenting with streaming videos and had started offering the streaming video platform. Netflix made Blockbuster dance to its tunes. Netflix, currently valued at $150 billion, changed its business model twice by cannibalizing its core services, shifting from mail-in- DVD service to subscription service to streaming video subscription service. This strategic renewal is one of the critical reasons for Netflix to become a valuable company and one of the pioneers in cloud computing that defined the architecture for AWS and set the freedom and responsibility culture for other silicon valley firms to emulate.", "category": "IT"}, {"instruction": "Give me five things to look for in a hot sauce.", "input": "", "output": "1. Heat: spice is an important factor in hot sauce\n2. Saltiness: many hot sauces are fermented with salt, causing the sauce to taste spicy \n3. Sweetness: due to the pepper or additives like sugar, some sauces will be sweeter than others\n4. Fruitiness: some pepper coming from tropical climates may taste like mango or pineapple\n5. Other additives: outside of the pepper, additives such as salt, sugar, vinegar or fermentation will affect the flavor of the pepper", "category": "IT"}, {"instruction": "Of the following Quentin Tarantino films, which did he just write and direct, and which did he write, direct, and produce?\n\nReservoir Dogs\nPulp Fiction\nJackie Brown\nKill Bill: Volume 1\nKill Bill: Volume 2\nGrindhouse: Death Proof\nInglourious Basterds\nDjango Unchained\nThe Hateful Eight\nOnce Upon a Time in Hollywood", "input": "", "output": "Quentin Tarantino directed, wrote, and produced the following films:\nGrindhouse: Death Proof\nOnce Upon a Time in Hollywood\n\nQuentin Tarantino only wrote and directed the following films:\nReservoir Dogs\nPulp Fiction\nJackie Brown\nKill Bill: Volume 1\nKill Bill: Volume 2\nInglourious Basterds\nDjango Unchained\nThe Hateful Eight", "category": "IT"}, {"instruction": "Extract the creator of Amdahl's law from the Wikipedia paragraph.", "input": "In computer architecture, Amdahl's law (or Amdahl's argument[1]) is a formula which gives the theoretical speedup in latency of the execution of a task at fixed workload that can be expected of a system whose resources are improved. It states that \"the overall performance improvement gained by optimizing a single part of a system is limited by the fraction of time that the improved part is actually used\".[2][page needed] It is named after computer scientist Gene Amdahl, and was presented at the American Federation of Information Processing Societies (AFIPS) Spring Joint Computer Conference in 1967.", "output": "The Wikipedia paragraph does not specify the creator of Amdahl's law. However, it does state that the law was named after the computer scientist Gene Amdahl. Given the context, it is likely that Gene Amdahl is the creator of Amdahl's law.", "category": "IT"}, {"instruction": "What is Orchesis - either professional or amateur", "input": "", "output": "Art of Dancing", "category": "IT"}, {"instruction": "Why do people sleep?", "input": "", "output": "Sleep gives your body an opportunity to heal and regenerate. It also gives your brain a chance to reprocess new information and explore possibilities in the form of dreams.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Taiko, Vlier", "input": "", "output": "Vlier is string, Taiko is percussion.", "category": "IT"}, {"instruction": "Which of the following are types of real estate assets: single family homes, multi-family homes, apartments, condos, townhomes, rocks, dirt, cars, diamonds, gold, land, water, doors.", "input": "", "output": "Real estate assets are typically land or improvements made on top of land. From the list, this includes single family homes, multi-family homes, apartments, condos, townhomes, and land.", "category": "IT"}, {"instruction": "What are the 5 biggest cities in France in terms of inhabitants?", "input": "", "output": "The five biggest cities in France are : \n1) Paris, which is also the capital, with more than 2200000 inhabitants.\n2) Marseille with more than 865000 inhabitants.\n3) Lyon with more than 520000 inhabitants.\n4) Toulouse with more than 480000 inhabitants.\n5) Nice with more than 340000 inhabitants.", "category": "IT"}, {"instruction": "What are some of the subjects that a school student might study.", "input": "", "output": "Students are known to take classes in mathematics, science, art, sport, foreign languages, history and geography.", "category": "IT"}, {"instruction": "Given this reference paragraph, who coined the term dead man zone?", "input": "The term dead man zone was coined by members of the CSIRO research team in Australia who were investigating the spread of bushfires (Project Vesta). The dead man zone is approximately 8 kilometres (5.0 mi) around the fire that is likely to burn. This dead man zone can be a safety net for firefighters if the fire is moving at a high speed. The dead man zone can also be prepared in a way that slows down the fire. Firefighters can get outside the dead man zone safely without seeing what the fire is going to do and develop a plan of attack or defense upon the fire's next move. If the dead man zone is not used, wind change can sneak up on the firefighters and resulting in potentially unsafe distances where they are not able to defend themselves. This can be a life or death situation if not approached properly, and there have been examples of firefighters that became trapped and ultimately killed in Australia.[2] Project Vesta, headed by scientist Phil Cheney, found that when the wind changes direction, the line of fire will move out at its maximum rate of spread almost immediately, and that the spread speed was nearly three times what was previously thought. Project Vesta's research into bushfire behavior makes up the majority of what is known about bushfires today.[3]", "output": "The team was created by the Australian CSIRO research team", "category": "IT"}, {"instruction": "What are the characteristics of chihuahuas?", "input": "", "output": "Chihuahuas are among the smallest of the dog breeds. Small in size but confident and big-dog natured. They originated from Mexico with lineage going back to ancient kingdoms of pre-Columbian times. Chihuahuas are extremely loyal, known for having close attachments with their owners. Their distinct features include oversized, pointy ears and expressive eyes. Coats come in many colors ranging from white to brown to black with many different pattern variations, and will be either short or long. Short hair chihuahuas are known for shivering and needing sweaters in cold weather. They are ideal city dogs given their small size.", "category": "IT"}, {"instruction": "What should I wear in the summer?", "input": "", "output": "In the summer people usually wear shorts, tank tops or tee shirts. Women may choose to wear skirts, skorts, or sun dresses.  Flip flops and sandals are the most common footwear choice but sneakers are also a good choice. To protect against sun damage, most people wear a hat, visor, or light jackets to protect skin from sun exposure.", "category": "IT"}, {"instruction": "Who are some famous Greek philosophers?", "input": "", "output": "Plato, Aristotle and Socrates are all famous Greek philosophers", "category": "IT"}, {"instruction": "List the two oldest University of California campuses separated by a semicolon.", "input": "The University of California, Los Angeles (UCLA)[1] is a public land-grant research university in Los Angeles, California. UCLA's academic roots were established in 1881 as a normal school then known as the southern branch of the California State Normal School (now San Jos\u00e9 State University). This school was absorbed with the official founding of UCLA as the Southern Branch of the University of California in 1919, making it the second-oldest of the 10-campus University of California system (after UC Berkeley).", "output": "UC Berkeley; UCLA", "category": "IT"}, {"instruction": "Why do people have children?", "input": "", "output": "There are many reasons people have children.  A common reason is simply tradition and expectations.  Some people have grown up expecting to have children, their parents expect them to have children, and all of their friends have children, so they have children.  Another reason is economic.  In agricultural societies children can be an economic benefit, providing labor to help the family manage the farm.  Another common reason is that children can provide support when the parents become elderly.  Finally, the parents may simply be looking for the meaning, affection, and love that children bring to their lives.", "category": "IT"}, {"instruction": "What is the difference between American Football and Futbol?", "input": "", "output": "In America, football refers to the NFL style of football. This involves heavily padded players, scripted plays and a game where the goal is to get the ball into an endzone with a mix of pass and run plays. International Futbol refers to the game that is played primarily with a players feet, passing the ball and shooting with only their feet of head. Players in Futbol are not allowed to use their hands unless they are the goalie defending the goal. The goal of Futbol is to get the ball into the opposing team's net.", "category": "IT"}, {"instruction": "From a financial perspective, tell me five things should be considered when retiring.", "input": "", "output": "Here are five financially-related things to consider when retiring:\n- How much money will be spent annually while retired\n- The amount of money currently saved for retirement\n- Probable income from pension and/or social security\n- Probable number of years until death\n- Current state of the financial markets", "category": "IT"}, {"instruction": "What gear do you need to go on a backpacking trip?", "input": "", "output": "To go on a backpacking trip, you'll need a few categories of items: shelter, cooking and clothing. Start with a trekking pole tent like the X-Mid Pro. Don't forget 2 trekking poles. You'll need a sleeping pad like a Klymit Static-V and a sleeping bag or quilt such as the Kelty Cosmic 0. In order to cook and boil water, you'll need a stove such as a Jetboil and the corresponding fuel to power it. As far as clothing goes, several layers of wool/synthetic fabric with a light shell will work great at keeping you warm and dry. All of this needs to go in a backpack that's of the right capacity and sized to your frame.", "category": "IT"}, {"instruction": "What are the words of House Bolton?", "input": "", "output": "\"Our Blades are Sharp\"", "category": "IT"}, {"instruction": "What are the most dangerous hobbies?", "input": "", "output": "Sky diving, bungie jumping, cliff jumping, open water swimming, race car driving", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Aurochs, Hawksbill Turtle", "input": "", "output": "Hawksbill Turtle is alive, Aurochs is extinct.", "category": "IT"}, {"instruction": "what bicycle should I buy?", "input": "", "output": "Buying the right bicycle depends on how much money you want to spend and what you want to use the bicycle for.  So first decide on a budget, then go to a local bike shop and talk to them about what kinds of bicycles they sell for the needs that you have.", "category": "IT"}, {"instruction": "Best Actor award in 27th Screen Actors Guild(SAG) Awards was given posthumously to whom?", "input": "", "output": "Chadwick Boseman for Black Bottom", "category": "IT"}, {"instruction": "How far is the village from Warsaw?", "input": "\u017babia Wola [\u02c8\u0290abja \u02c8v\u0254la] is a village in Grodzisk Mazowiecki County, Masovian Voivodeship, in east-central Poland. It is the seat of the gmina (administrative district) called Gmina \u017babia Wola.[1] It lies approximately 10 kilometres (6 mi) south-east of Grodzisk Mazowiecki and 30 km (19 mi) south-west of Warsaw.\nThe village has a population of 530.", "output": "The village lies approximately 30 km (19 mi) south-west of Warsaw.", "category": "IT"}, {"instruction": "List of all the factions that Lincoln had to deal with, and if they were his allies or enemies.", "input": "Lincoln, a moderate Republican, had to navigate a contentious array of factions with friends and opponents from both the Democratic and Republican parties. His allies, the War Democrats and the Radical Republicans, demanded harsh treatment of the Southern Confederates. Anti-war Democrats (called \"Copperheads\") despised Lincoln, and irreconcilable pro-Confederate elements plotted his assassination.", "output": "Lincoln's allies were the War Democrats and the Radical Republicans. Lincoln's enemies were the Southern Confederates, Anti-war Democrats and pro-Confederate groups", "category": "IT"}, {"instruction": "What are ten woodworking projects that I could complete in a weekend?", "input": "", "output": "1. A wine box\n2. A coat rack\n3. A cutting board\n4. A simple desk\n5. A bottle stopper\n6. A bowl\n7. A small shelf\n8. A picture frame\n9. A serving tray\n10. A garden bench", "category": "IT"}, {"instruction": "Where is Meerut?", "input": "Meerut (pronunciation (help\u00b7info), IAST: Mera\u1e6dh) is a city in Meerut district of the western part of the Indian state of Uttar Pradesh. The city lies 80 km (50 mi) northeast of the national capital New Delhi, within the National Capital Region and 480 km (300 mi) west of the state capital Lucknow.[7]", "output": "Meerut is a city in India and part of Uttar Pradesh state close to new Delhi", "category": "IT"}, {"instruction": "Give me a bulleted list of 3 informal fallacies and the meaning each", "input": "Informal fallacies \u2013 arguments that are logically unsound for lack of well-grounded premises.[14]\n\nArgument to moderation (false compromise, middle ground, fallacy of the mean, argumentum ad temperantiam) \u2013 assuming that a compromise between two positions is always correct.[15]\nContinuum fallacy (fallacy of the beard, line-drawing fallacy, sorites fallacy, fallacy of the heap, bald man fallacy, decision-point fallacy) \u2013 improperly rejecting a claim for being imprecise.[16]\nCorrelative-based fallacies\nSuppressed correlative \u2013 a correlative is redefined so that one alternative is made impossible (e.g., \"I'm not fat because I'm thinner than John.\").[17]\nDefinist fallacy \u2013 defining a term used in an argument in a biased manner (e.g., using \"loaded terms\"). The person making the argument expects that the listener will accept the provided definition, making the argument difficult to refute.[18]\nDivine fallacy (argument from incredulity) \u2013 arguing that, because something is so incredible or amazing, it must be the result of superior, divine, alien or paranormal agency.[19]\nDouble counting \u2013 counting events or occurrences more than once in probabilistic reasoning, which leads to the sum of the probabilities of all cases exceeding unity.\nEquivocation \u2013 using a term with more than one meaning in a statement without specifying which meaning is intended.[20]\nAmbiguous middle term \u2013 using a middle term with multiple meanings.[21]\nDefinitional retreat \u2013 changing the meaning of a word when an objection is raised.[22] Often paired with moving the goalposts (see below), as when an argument is challenged using a common definition of a term in the argument, and the arguer presents a different definition of the term and thereby demands different evidence to debunk the argument.\nMotte-and-bailey fallacy \u2013 conflating two positions with similar properties, one modest and easy to defend (the \"motte\") and one more controversial (the \"bailey\").[23] The arguer first states the controversial position, but when challenged, states that they are advancing the modest position.[24][25]\nFallacy of accent \u2013 changing the meaning of a statement by not specifying on which word emphasis falls.\nPersuasive definition \u2013 purporting to use the \"true\" or \"commonly accepted\" meaning of a term while, in reality, using an uncommon or altered definition.\n(cf. the if-by-whiskey fallacy)\nEcological fallacy \u2013 inferring about the nature of an entity based solely upon aggregate statistics collected for the group to which that entity belongs.[26]\nEtymological fallacy \u2013 assuming that the original or historical meaning of a word or phrase is necessarily similar to its actual present-day usage.[27]\nFallacy of composition \u2013 assuming that something true of part of a whole must also be true of the whole.[28]\nFallacy of division \u2013 assuming that something true of a composite thing must also be true of all or some of its parts.[29]\nFalse attribution \u2013 appealing to an irrelevant, unqualified, unidentified, biased or fabricated source in support of an argument.\nFallacy of quoting out of context (contextotomy, contextomy; quotation mining) \u2013 selective excerpting of words from their original context to distort the intended meaning.[30]\nFalse authority (single authority) \u2013 using an expert of dubious credentials or using only one opinion to promote a product or idea. Related to the appeal to authority.\nFalse dilemma (false dichotomy, fallacy of bifurcation, black-or-white fallacy) \u2013 two alternative statements are given as the only possible options when, in reality, there are more.[31]\nFalse equivalence \u2013 describing two or more statements as virtually equal when they are not.\nFeedback fallacy \u2013 believing in the objectivity of an evaluation to be used as the basis for improvement without verifying that the source of the evaluation is a disinterested party.[32]\nHistorian's fallacy \u2013 assuming that decision-makers of the past had identical information as those subsequently analyzing the decision.[33] This should not to be confused with presentism, in which present-day ideas and perspectives are anachronistically projected into the past.\nHistorical fallacy \u2013 believing that certain results occurred only because a specific process was performed, though said process may actually be unrelated to the results.[34]\nBaconian fallacy \u2013 supposing that historians can obtain the \"whole truth\" via induction from individual pieces of historical evidence. The \"whole truth\" is defined as learning \"something about everything\", \"everything about something\", or \"everything about everything\". In reality, a historian \"can only hope to know something about something\".[35]\nHomunculus fallacy \u2013 using a \"middle-man\" for explanation; this sometimes leads to regressive middle-men. It explains a concept in terms of the concept itself without explaining its real nature (e.g.: explaining thought as something produced by a little thinker \u2013 a homunculus \u2013 inside the head simply identifies an intermediary actor and does not explain the product or process of thinking).[36]\nInflation of conflict \u2013 arguing that, if experts in a field of knowledge disagree on a certain point within that field, no conclusion can be reached or that the legitimacy of that field of knowledge is questionable.[37][38]\nIf-by-whiskey \u2013 an argument that supports both sides of an issue by using terms that are emotionally sensitive and ambiguous.\nIncomplete comparison \u2013 insufficient information is provided to make a complete comparison.\nIntentionality fallacy \u2013 the insistence that the ultimate meaning of an expression must be consistent with the intention of the person from whom the communication originated (e.g. a work of fiction that is widely received as a blatant allegory must necessarily not be regarded as such if the author intended it not to be so).[39]\nKafkatrapping \u2013 a sophistical rhetorical device in which any denial by an accused person serves as evidence of guilt.[40][41][42]\nKettle logic \u2013 using multiple, jointly inconsistent arguments to defend a position.\nLudic fallacy \u2013 failing to take into account that non-regulated random occurrences unknown unknowns can affect the probability of an event taking place.[43]\nLump of labour fallacy \u2013 the misconception that there is a fixed amount of work to be done within an economy, which can be distributed to create more or fewer jobs.[44]\nMcNamara fallacy (quantitative fallacy) \u2013 making an argument using only quantitative observations (measurements, statistical or numerical values) and discounting subjective information that focuses on quality (traits, features, or relationships).\nMind projection fallacy \u2013 assuming that a statement about an object describes an inherent property of the object, rather than a personal perception.\nMoralistic fallacy \u2013 inferring factual conclusions from evaluative premises in violation of fact\u2013value distinction (e.g.: inferring is from ought). Moralistic fallacy is the inverse of naturalistic fallacy.\nMoving the goalposts (raising the bar) \u2013 argument in which evidence presented in response to a specific claim is dismissed and some other (often greater) evidence is demanded.\nNirvana fallacy (perfect-solution fallacy) \u2013 solutions to problems are rejected because they are not perfect.\nPackage deal \u2013 treating essentially dissimilar concepts as though they were essentially similar.\nProof by assertion \u2013 a proposition is repeatedly restated regardless of contradiction; sometimes confused with argument from repetition (argumentum ad infinitum, argumentum ad nauseam).\nProsecutor's fallacy \u2013 a low probability of false matches does not mean a low probability of some false match being found.\nProving too much \u2013 an argument that results in an overly generalized conclusion (e.g.: arguing that drinking alcohol is bad because in some instances it has led to spousal or child abuse).\nPsychologist's fallacy \u2013 an observer presupposes the objectivity of their own perspective when analyzing a behavioral event.\nReferential fallacy[45] \u2013 assuming that all words refer to existing things and that the meaning of words reside within the things they refer to, as opposed to words possibly referring to no real object (e.g.: Pegasus) or that the meaning comes from how they are used (e.g.: \"nobody\" was in the room).\nReification (concretism, hypostatization, or the fallacy of misplaced concreteness) \u2013 treating an abstract belief or hypothetical construct as if it were a concrete, real event or physical entity (e.g.: saying that evolution selects which traits are passed on to future generations; evolution is not a conscious entity with agency).\nRetrospective determinism \u2013 believing that, because an event has occurred under some circumstance, the circumstance must have made the event inevitable (e.g.: because someone won the lottery while wearing their lucky socks, wearing those socks made winning the lottery inevitable).\nSlippery slope (thin edge of the wedge, camel's nose) \u2013 asserting that a proposed, relatively small, first action will inevitably lead to a chain of related events resulting in a significant and negative event and, therefore, should not be permitted.[46]\nSpecial pleading \u2013 the arguer attempts to cite something as an exemption to a generally accepted rule or principle without justifying the exemption (e.g.: an orphaned defendant who murdered their parents asking for leniency).", "output": "Three informal fallacies are:\n- False Authority: Using an expert with dubious credentials to promote an argument\n- Incomplete Comparison: Not enough information was provided to adequately make a comparison\n- Proof by Assertion: Restating the same argument regardless of counter arguments and contradictions", "category": "IT"}, {"instruction": "Write a review of Neil Gaiman's book American Gods.", "input": "", "output": "What a phenomenal book. I can see how people would call this a \"more mature Percy Jackson\", but to me American Gods was much more than just mythology fanfiction. Overall, the imaginative story, noir setting, mysterious plot, witty dialogue, and incredible characters made this one of the best books I've read this year.\n\nStarting with the setting and premise - gods in the modern world has become a setting of it's own. Most notably, this story reminds me of a western version of Noragami, where a god's strength stems from their worshipers. It's hilarious to see deities of old living mundane lives, frankly quite charming. Our characters navigate through a spooky setting, but it's never overbearing nor depressing.\n\nBut what really makes this book special are the characters and dialogue. Shadow and Wednesday are an amazing duo; between Shadows quiet reflections and Wednesday's blunt terrorizing, the pair travel across rural America, running through a plethora of interesting icons and people.", "category": "IT"}, {"instruction": "When is the best time to visit Chicago?", "input": "", "output": "The best time to visit Chicago is during the Summer months - also known as \"Summertime Chi.\" There are activities and events to check out including: art shows, running and aquatic events, and several outdoor music festivals.  Chicago offers a robust shopping and dining scene as well. It's popular to visit in the Summer based on weather conditions; the \"Windy City\" can be uncomfortably cold during the Winter months.", "category": "IT"}, {"instruction": "What is a grocery store?", "input": "", "output": "A grocery store is a place that offers food and beverages to people for purchase.  You can purchase raw ingredients for cooking, drinks for hydration, meat for barbecuing, raw fruits and vegetables, and pre-packaged foods like pizza, candy and ice cream.  The food purchased at a grocery store is used to keep people alive, sustained, and healthy.  Grocery stores may also be referred to as a supermarkets.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Maraca, Valiha", "input": "", "output": "Valiha is string, Maraca is percussion.", "category": "IT"}, {"instruction": "What was Tyson Fury's fight record as an amateur?", "input": "As an amateur, Fury represented both England and Ireland. Fury represented Ireland three times at international level. He was based out of the Holy Family Boxing Club in Belfast, Northern Ireland, and later switched to the Smithboro Club in County Monaghan, Ireland.[55] In a double international match against an experienced Polish team in 2007, the Irish team lost 12\u20136 overall; Fury, however, was victorious in both his fights in Rzesz\u00f3w and Bia\u0142ystok.[56] In another Irish match against the US, Fury won his bout by knockout.[57] He won bronze at the AIBA Youth World Boxing Championships in 2006.[58]\n\nIn England, while representing Jimmy Egan's Boxing Academy in Wythenshawe, Manchester, he participated in the senior national championships in 2006 but was beaten by David Price 22\u20138.[59] In May 2007, he won the EU Junior Championship, defeating Istvan Bernath in the final.[60] In July 2007 he won silver at the European Junior Championship, losing to Maxim Babanin in the final.[61][62]\n\nAs a junior, Fury was ranked number three in the world behind the Russians Maxim Babanin and Andrey Volkov, but did not get the chance to represent Great Britain at the 2008 Olympics because each country is restricted to one boxer per weight division and David Price was selected. Price came up through the amateur Olympic programme. Fury also unsuccessfully tried to qualify for Ireland.[63] Speaking in 2011, Fury said \"I should have gone to the Olympic games in 2008 and won a gold medal for Ireland, but I was denied the chance to go and do it\"[38] He was also forced to withdraw from the Irish national championships after officials from the Holy Trinity Boxing Club in West Belfast, the club of the then Irish amateur heavyweight champion, submitted a protest regarding his eligibility as he was not born in Ireland.[57][64][65]\n\nFury won the ABA super-heavyweight title in 2008 by defeating Damien Campbell 19:1.[66] He turned professional later that year.[28] Feeling disillusioned with amateur boxing, he decided not to wait for the 2012 Olympics.[64] He finished with an amateur record of 31\u20134 (26 KOs).", "output": "He finished with an amateur record of 31\u20134 (26 KOs", "category": "IT"}, {"instruction": "Extract the list of players mentioned in the text. Separate them with a comma.", "input": "Meanwhile, in the cabin, goalkeeper Harry Gregg was regaining consciousness, thinking that he was dead.[41] He felt blood on his face and \"didn't dare put [his] hand up. [He] thought the top of [his] head had been taken off, like a hard boiled egg.\"[42] Just above him, light shone into the cabin, so Gregg kicked the hole wide enough for him to escape. He also managed to save some passengers, among them teammates Bobby Charlton and Dennis Viollet, who were strapped into their seats away from the wreckage.[43]", "output": "Harry Gregg, Bobby Charlton, Dennis Viollet", "category": "IT"}, {"instruction": "What makes the platypus such an interesting animal?", "input": "", "output": "The platypus is a mammal who lays eggs and has an incubation period approximately 10 days. They hunt by detecting minute electric fields of prey with sensitive bill and adult males have venomous spurs. They also have thick fur which provides insulation against cold water. While they are difficult to keep and breed in managed care settings, there are a few platypuses in zoos. Currently, two reside at the San Diego Zoo Safari Park and all others in Australian collections.", "category": "IT"}, {"instruction": "What is Central Park?", "input": "Central Park is an urban park in New York City located between the Upper West and Upper East Sides of Manhattan. It is the fifth-largest park in the city, covering 843 acres (341 ha). It is the most visited urban park in the United States, with an estimated 42 million visitors annually as of 2016, and is the most filmed location in the world.", "output": "Central Park is an urban park located in the borough of Manhattan, New York City, NY.  It is located between the Upper West Side and the Upper East Side.  It is 843 acres and is actually the 5th largest park in the city.  It is the most visited urban park in the United States, with an estimated 42 million visitors annually.", "category": "IT"}, {"instruction": "What is a trumpet?", "input": "", "output": "A trumpet is horned instrument that is made out of brass.  It is used in classical music and it is also very prevalent in jazz.  You have trumpets like the piccolo that have a very high sound and a bass trumpet which has a very low sound.  Trumpets can be played in a solo or in a group with other instruments.", "category": "IT"}, {"instruction": "What is a rocking chair?", "input": "", "output": "A rocking chair has two long curved legs rather than four straight legs so that it rocks forward and backward.", "category": "IT"}, {"instruction": "How can I decide what bike I should get?", "input": "", "output": "When it comes to bicycles for adults, there are different kinds available in the market. Select a bike based on how you'd like to use it. Bikes can be categorized as follows:\n1. Road bikes - These bikes have super thin tires and are often used for biking on roads. These help you attain high speeds relatively quickly.\n2. Mountain bikes - These bikes are made to sustain the rough terrain that you could come across while biking. The tires are much thicker and made to protect you and give you the support you need.\n3. Hybrid/Commuter bikes - These bikes fall into the middle of the above 2 categories. If you think you might do a bit of road biking and mountain biking, then this might be your best option.\nYou can also go to a store that specializes in selling and repairing bikes to get more information.", "category": "IT"}, {"instruction": "What is an adjacency list?", "input": "In graph theory and computer science, an adjacency list is a collection of unordered lists used to represent a finite graph. Each unordered list within an adjacency list describes the set of neighbors of a particular vertex in the graph. This is one of several commonly used representations of graphs for use in computer programs.", "output": "In graph theory and computer science, an adjacency list is a collection of unordered lists used to represent a finite graph.", "category": "IT"}, {"instruction": "What is accessibility?", "input": "", "output": "Accessibility refers to the design of products, devices, services, or environments that makes them usable by people with disabilities. This means ensuring that people with disabilities are able to access and use the same information and resources as everyone else.", "category": "IT"}, {"instruction": "What are the main football teams in the city of Madrid?", "input": "", "output": "There are two world-class football/soccer teams in the city of Madrid, Spain: Real Madrid and Atletico de Madrid.", "category": "IT"}, {"instruction": "Tell me which of the following guitars are hollow bodies or not: Gibson ES-175, Gibson ES-335, Gibson SG, Gibson Les Paul, Fender Stratocaster, Fender Telecaster.", "input": "", "output": "Gibson ES-175 is one of the most famous examples of a well-crafted hollow-body guitar, beloved by numerous jazz guitarists over many decades. Most variants of Gibson's SG, Les Paul, and Fender's Stratocaster and Telecaster are considered solid bodies. However, there were numerous variant models which featured \"hollowed\" or \"chambered\" bodies. One prime example is Fender's Telecaster Thinline model from the 1970's, which features a semi-hollow design with an open f-hole on only one side of the body. Speaking of \"semi-hollows,\" Gibson's ES-335 is a semi-hollow body guitar where a solid \"center block\" of wood passes through the middle of the body, providing additional structural stability over full hollow body guitars.", "category": "IT"}, {"instruction": "In which country is Jean Marie Ralph F\u00e9thi\u00e8re a politician?", "input": "Jean Marie Ralph F\u00e9thi\u00e8re is a Haitian politician. He is a Senator from the north and a member of the ruling PHTK party. On September 23, 2019, while trying to leave Parliament amid a crowd as the government was voting to confirm a new prime minister, F\u00e9thi\u00e8re drew a handgun and fired toward the crowd. Chery Dieu-Nalio, a photographer for the Associated Press, suffered injuries to his face from bullet fragments, while a security guard named Leon Leblanc was also injured.", "output": "Haiti", "category": "IT"}, {"instruction": "What kind of dog should I get?", "input": "", "output": "There are many dog breeds to choose from. Choosing a dog breed is a personal choice. Consider what kind of lifestyle you live and pick a dog that fits your lifestyle. For example, if you are allergic to dogs you may consider a poodle, or poodle mix as they tend to be hypoallergenic.", "category": "IT"}, {"instruction": "Why 2 is greater than 3?", "input": "", "output": "This is a trick question. 2 is not greater than 3. As a matter of fact, 3 is greater than 2. That being said, you could potentially define a mathematical space in which 2 is greater than 3. However, in real life we refer to real number domain in which 3 is greater than 2.", "category": "IT"}, {"instruction": "Who is Robert Kiyosaki?", "input": "", "output": "Robert Kiyosaki is an American entrepreneur and author who became famous primarily due to his book Rich Dad Poor Dad, a book which many refer to as \"the bible of financial literacy\". He has acquired much of his wealth through investing in real estate successfully and teaching others financial skills that are not taught in typical school systems.", "category": "IT"}, {"instruction": "What is functional genomics?", "input": "", "output": "Functional genomics is a field of molecular biology that attempts to describe gene (and protein) functions and interactions. Functional genomics make use of the vast data generated by genomic and transcriptomic projects (such as genome sequencing projects and RNA sequencing). Functional genomics focuses on the dynamic aspects such as gene transcription, translation, regulation of gene expression and protein\u2013protein interactions, as opposed to the static aspects of the genomic information such as DNA sequence or structures. A key characteristic of functional genomics studies is their genome-wide approach to these questions, generally involving high-throughput methods rather than a more traditional \"candidate-gene\" approach.", "category": "IT"}, {"instruction": "Please give me a short bulleted list of the major achievements Taylor Swift has achieved.", "input": "Taylor Alison Swift (born December 13, 1989) is an American singer-songwriter. Her genre-spanning discography, songwriting and artistic reinventions have received critical praise and wide media coverage. Born in West Reading, Pennsylvania, Swift moved to Nashville at age 14 to become a country artist. She signed a songwriting deal with Sony/ATV Music Publishing in 2004 and a recording contract with Big Machine Records in 2005. Her 2006 self-titled debut album made her the first female country artist to write a U.S. platinum-certified album.\n\nSwift's next albums, Fearless (2008) and Speak Now (2010), explored country pop. The former's \"Love Story\" and \"You Belong with Me\" were the first country songs to top the U.S. pop and all-genre airplay charts, respectively. She experimented with rock and electronic styles on Red (2012), which featured her first Billboard Hot 100 number-one song, \"We Are Never Ever Getting Back Together\", and eschewed her country image in her synth-pop album, 1989 (2014), supported by chart-topping songs \"Shake It Off\", \"Blank Space\", and \"Bad Blood\". Media scrutiny inspired the urban-flavored Reputation (2017) and its number-one single \"Look What You Made Me Do\".\n\nExiting Big Machine, Swift signed with Republic Records in 2018 and released her seventh studio album, Lover (2019), followed by the autobiographical documentary Miss Americana (2020). She ventured into indie folk and alternative rock in her 2020 albums Folklore and Evermore, whose singles \"Cardigan\" and \"Willow\" topped the Hot 100. Swift began re-recording her first six albums after a dispute over their masters, re-releasing two in 2021\u2014Fearless (Taylor's Version) and Red (Taylor's Version). The latter's \"All Too Well (10 Minute Version)\" became the longest song to top the Hot 100. Her 2022 album Midnights and single \"Anti-Hero\" broke all-time streaming records. Swift has directed music videos and films, such as All Too Well: The Short Film (2021), and played supporting roles in others.\n\nHaving sold over 200 million records globally, Swift is one of the best-selling musicians in history. She is the most streamed woman on Spotify, and the only act to have five albums open with over one million copies sold in the US. Among her accolades are 12 Grammy Awards, including three Album of the Year wins; an Emmy Award; 40 American Music Awards; 29 Billboard Music Awards; three IFPI Global Recording Artist of the Year awards; and 92 Guinness World Records. Swift has been featured in rankings such as Rolling Stone's 100 Greatest Songwriters of All Time, Billboard's Greatest of All Time Artists, the Time 100 and Forbes Celebrity 100. Honored with titles such as Artist of the Decade and Woman of the Decade, Swift is an advocate for artists' rights and women's empowerment. Her music is credited with influencing a generation of singers and songwriters.", "output": "Taylor Swift moved to Nashville at age 14 where She signed a songwriting deal with Sony/ATV Music that Published in 2004 and a recording contract with Big Machine Records in 2005. Her 2006 self-titled debut album made her the first female country artist to write a U.S. platinum-certified album. She has sold over 200 million records globally and is considered to be one of the best selling musicians in history. She is the most streamed woman on Spotify. She has 12 grammy awards, 29 billboard music awards, 3 IFPI  Global Recording Artist of the Year awards, and 92 Guinness World Records.", "category": "IT"}, {"instruction": "What are the titles of the songs on Side B for this album?", "input": "Side A\n1. \"H2O Gate Blues\" \u2013 7:58 (about the Watergate break-in and cover-up) (from Winter in America)\n2. \"We Beg Your Pardon (Pardon our Analysis)\" \u2013 7:52 (about the pardon of Richard Nixon) (from The First Minute of a New Day)\n3. \"The New Deal\" \u2013 3:10\nSide B\n4. \"Jose Campos Torres\" \u2013 2:36 (about Jose Campos Torres, a U.S. Army veteran who was arrested and then murdered and tossed into a bayou by two police officers in Houston in 1978, spurring the Moody Park Riot)\n5. \"The Ghetto Code (Dot Dot Dit Dit Dot Dot Dash)\" \u2013 12:57\n6. \"Bicentennial Blues\" \u2013 8:39 (from It's Your World)", "output": "\"Jose Campos Torres\"\n\"The Ghetto Code (Dot Dot Dit Dit Dot Dot Dash)\"\n\"Bicentennial Blues\"", "category": "IT"}, {"instruction": "What are lots of different smells you might experience when going into a candle store?", "input": "", "output": "Beachwood, Ocean breeze, coconut lime, Jasmine, Musk and Apple Cider", "category": "IT"}, {"instruction": "Tell me which of the following are real car parts: differential, gearbox, splinehook, flidget, wheel.", "input": "", "output": "Differential, gearbox, and wheels are all parts of cars.", "category": "IT"}, {"instruction": "What is it like to live in a black hole?", "input": "", "output": "I am the first person to survive a black hole in outer space. I must say, once I realized what I had been sucked into, I was really scared. It's not so bad. There are plenty of resources, and it's quite funny how many things are here. Loads of other items from countries all over the world that have lost satellites and the like. It's almost like a treasure chest of sorts. There are a couple of other people in here with me, and we all get along, primarily because there is no one else so we choose to be friends.", "category": "IT"}, {"instruction": "Are cats or dogs better?", "input": "", "output": "The debate on if cats or dogs are better has been talked about for ages, there is no clear winner. Humans love being binary and needing to choose between one or the other. Each person is different, and can benefit from cats AND dogs in their life. You can like both cats and dogs, and like them equally as well.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Bedug, Moraharpa", "input": "", "output": "Bedug is percussion, Moraharpa is string.", "category": "IT"}, {"instruction": "What is the difference between archaeology and paleontology?", "input": "", "output": "Archaeology is the study of human culture, while paleontology is the study of dinosaurs.", "category": "IT"}, {"instruction": "What are five totally distinct, creative ways to describe the usefulness of a child's imagination?", "input": "", "output": "1. A child's imagination is a powerful tool, allowing them to create anything they can dream up.\n2. A child's imagination can be a source of great joy and wonder.\n3. A child's imagination is a source of endless creativity.\n4. A child's imagination can be used to develop problem-solving skills.\n5. A child's imagination can help them understand the world around them.", "category": "IT"}, {"instruction": "Do you think depression ran in Wittgenstein's family?", "input": "Born in Vienna into one of Europe's richest families, Ludwig Wittgenstein inherited a fortune from his father in 1913. Before World War I, he \"made a very generous financial bequest to a group of poets and artists chosen by Ludwig von Ficker, the editor of Der Brenner, from artists in need. These included Trakl as well as Rainer Maria Rilke and the architect Adolf Loos.\" Later, in a period of severe personal depression after World War I, he gave away his remaining fortune to his brothers and sisters. Three of his four older brothers died by separate acts of suicide. Wittgenstein left academia several times: serving as an officer on the front line during World War I, where he was decorated a number of times for his courage; teaching in schools in remote Austrian villages, where he encountered controversy for using sometimes violent corporal punishment on girls and a boy (the Haidbauer incident) especially during mathematics classes; working during World War II as a hospital porter in London, notably telling patients not to take the drugs they were prescribed; and working as a hospital laboratory technician at the Royal Victoria Infirmary in Newcastle upon Tyne. He later expressed remorse for these incidents, and spent the remainder of his life lecturing and attempting to prepare a second manuscript for publication, which was published posthumously as the hugely influential Philosophical Investigations.", "output": "Depression is a mental health issue which can sometimes lead to suicide. It is known to run in families. Ludwig Wittgenstein personally experienced at least one period of severe depression and three of his four older brothers died by separate acts of suicide. Based on the fact that so many of Wittgenstein's immediate family members experienced depression or died by suicide, I think it is fair to say depression ran in Wittgenstein's family.", "category": "IT"}, {"instruction": "Which player scored the Premier League winning goal for Manchester City vs. QPR in 2012?", "input": "Manchester City F.C. 3\u20132 Queens Park Rangers F.C was the final match of the 2011\u201312 Premier League season, contested at the Etihad Stadium between Manchester City and Queens Park Rangers on 13 May 2012. This match is considered the greatest Premier League moment in history.[3]\n\nCity entered the match in first place on goal difference, being level on points with local rivals Manchester United, and needed to match United's result to win the league.[4] Meanwhile, QPR entered the match one spot above the relegation zone, knowing that a draw would secure safety at the expense of Bolton Wanderers. City won the match in dramatic fashion, reversing a 2\u20131 deficit by scoring two goals in stoppage time, with the winner being scored by Sergio Ag\u00fcero, to clinch their first league title since the 1967\u201368 season. The win began a period of dominance in English football for City, with the club winning five more Premier League titles over the subsequent 10 years.[5][6]\n\nThe match, and more specifically the final goal of the match, has repeatedly been described as the greatest moment in Premier League history.[7][8] The terms \"93:20\"[9] and \"Agueroooooo\"[10] have entered Manchester City folklore as a result, the former describing the exact second of the match at which point the final goal was scored, while the latter was commentator Martin Tyler's live response to the goal.", "output": "Sergio Aguero, in his first season for the club following a \u00a330+ million move from Athletico Madrid ended the season as the club's leading goal scorer. Ten plus years later, he ended as the club's all-time leading goal scorer and holds the record for number of Premier League Hat-tricks. \n\nIn 2012, Manchester City and local rivals, Manchester United were leading a two horse race to win the Premier League. Manchester United had previously won the league title 19 times where as this would be Manchester City's first title in over 40 years. \n\nIt was Manchester City's to lose as they hosted relegation-bounded QPR at the Etihad Stadium and all was going to plan going into the first half following Zabaleta's goal to make it 1-0 (an unlikely goal scorer to say the least). \n\nHowever, following a mistake from centre back, Joleon Lescott, a dramatic red card for former Manchester City player, Joey Barton and a surprise second goal from QPR to make it 2-1, Manchester City looked as though they'd let the title slip through their hands. \n\nManchester United had won their away game at Sunderland 1-0 so it was all down the blue half of Manchester's result. \n\nJust after the 90th minute, they were in stoppage time which was extended due to the commotions with Joey Barton lashing out at Carlos Tevez and Sergio Aguero. \n\nStriker, Edin Dzeko, scored a header from a David Silva cross to make it 2-2, but to many, this felt as too little, too late. \n\nLate drama unfolded as Mario Balotelli registered his one and only assist in almost 4 years at the club as he laid it off to Aguero who scored the winning goal with the last kick of the game to make it 3-2. \n\nManchester City went on to win the league and QPR avoided relegation despite the loss due to results elsewhere.", "category": "IT"}, {"instruction": "Why does Nadal play tennis left-handed?", "input": "At age 8, Nadal won an under-12 regional tennis championship at a time when he was also a promising football player.[10] This made Toni Nadal intensify training, and it was at that time that his uncle encouraged Nadal to play left-handed for a natural advantage on the tennis court, after studying Nadal's then two-handed forehand stroke.[10]", "output": "When he was younger, Rafa Nadal used to play with a double handed forehand. His uncle then recommended that he switch to a left-handed stroke in order to have a natural advantage on court.", "category": "IT"}, {"instruction": "How is beer made?", "input": "", "output": "Most of the beer we all drink is made from the same four ingredients; barley, water, hops and yeast.The basic idea is to extract the sugars from grains (usually barley) so that the yeast can turn it into alcohol and CO2, creating beer. \n\nIn order for barley to be made into beer, it must first be malted. The malting process renders the grain usable to the brewer. It's basically taking a live seed, steeping it in water and tricking it into thinking it's time to grow.\" The grain starts to ready itself to grow into a plant but the germination is then stopped by drying the barley. Malting helps to create the enzymes necessary to convert the starches present in the seeds into sugars. Without malting, the beer would not have enough sugar content to properly ferment.\n\nThe malted barley is crushed or milled and then soaked in warm water in order to create a sugar solution known as wort. Any other grains used in the brewing process are also added at this point. Soaking the grains in warm water helps to further convert the starches into the sugars necessary for fermentation.\n\nThe wort is then moved to a copper pot and boiled. During boiling, some of the water in the wort evaporates, leaving behind a higher concentration of sugars. Boiling also helps to sterilize the mixture in preparation for fermentation. \n\nAfter boiling, the solid hops and grain are removed, and the mixture is cooled. The brewers then add yeast to this mixture. Fermenting with yeast is what makes beer alcoholic. The time it takes to ferment a beer varies based on type of yeast and style of fermentation, but most beers take about a week to ferment.\n\nDifferent strains of yeast and different fermentation techniques determine what kind of beer is being made and how it will taste. For example, when making a lager, the yeast ferments at the bottom of the wort at a cooler temperature. Ales are made with a different strain of yeast, and top fermented at warmer temperatures. After fermentation, the beer is then cooled again before bottling or canning.", "category": "IT"}, {"instruction": "Holidays such as Christmas, Easter and Halloween are associated with themes. Sort the following items into the holiday with which they are most frequently associated: elves, chocolate, presents, pumpkin, rabbit, candy, pilgrim, egg, Santa, Jesus, hot-crossed buns, and reindeer", "input": "", "output": "Pumpkin, candy and pilgrims are frequently associated with Halloween.\nHot-crossed buns, Egg, chocolate, Rabbit and Jesus and  are associated with Easter.\nReindeer, elves, Santa and presents are associated with Christmas.", "category": "IT"}, {"instruction": "Why is sailing so much fun?", "input": "", "output": "Sailing is a wonderful sport. It's a great way to learn about the wind, physics and environment while being out in the fresh air and sun. There are many enjoyable things you can learn while sailing: how to navigate, how to tie ropes, how to read the wind and how to change the sails. Sailing is often a team sport and is a great way to work together outside. There is nothing like feeling the wind in your face and salt in your hair.", "category": "IT"}, {"instruction": "Hello, my family and I recently went to the zoo and saw a number of animals.  Please identify the animals in this summary and organize them in order of size.  My son's favorite animal is an elephant, and he saw an elephant in the grassland.  My wife caught a parakeet trying to eat our popcorn.  My daughter was scared by lion that she saw on the prairie.  I missed all of these animals and only saw a boa constrictor in an a cage.", "input": "", "output": "The animals in your summary by size are an elephant, a lion, a boa constrictor, and a parakeet.  This sounds like a fun trip to the zoo!", "category": "IT"}, {"instruction": "Seven Wonders of the Underwater World", "input": "", "output": "Here's a list of the Seven Wonders of the Underwater World:\n\n- Palau\n- Belize Barrier Reef, Belize\n- Great Barrier Reef, Australia\n- Deep-sea hydrothermal vents (worldwide)\n- Gal\u00e1pagos Islands, Ecuador\n- Lake Baikal, Russia\n- Northern Red Sea, bordered by Saudi Arabia and Yemen on the eastern shore, and Egypt, Sudan, Eritrea, and Djibouti on the western shore", "category": "IT"}, {"instruction": "From the passage note down the valuation of NFT trade for the year 2020 and 2021. List the results in format \u2018Year: Value\u2018.", "input": "A non-fungible token (NFT) is a unique digital identifier that cannot be copied, substituted, or subdivided, that is recorded in a blockchain, and that is used to certify ownership and authenticity.[1] The ownership of an NFT is recorded in the blockchain and can be transferred by the owner, allowing NFTs to be sold and traded. NFTs can be created by anybody, and require few or no coding skills to create.[2] NFTs typically contain references to digital files such as photos, videos, and audio. Because NFTs are uniquely identifiable assets, they differ from cryptocurrencies, which are fungible.\n\nProponents of NFTs claim that NFTs provide a public certificate of authenticity or proof of ownership, but the legal rights conveyed by an NFT can be uncertain. The ownership of an NFT as defined by the blockchain has no inherent legal meaning and does not necessarily grant copyright, intellectual property rights, or other legal rights over its associated digital file. An NFT does not restrict the sharing or copying of its associated digital file and does not prevent the creation of NFTs that reference identical files.\n\nThe NFT market grew dramatically from 2020 to 2021: the trading of NFTs in 2021 increased to more than $17 billion, up by 21,000% over 2020's total of $82 million.[3] NFTs have been used as speculative investments and they have drawn increasing criticism for the energy cost and carbon footprint associated with validating blockchain transactions as well as their frequent use in art scams.[4] The NFT market has also been compared to an economic bubble or a Ponzi scheme.[5] In 2022, the NFT market suffered a major collapse, with prices sharply falling; a May 2022 estimate was that the number of sales was down over 90% compared to its 2021 peak.[6]", "output": "2020: $82million\n2021: $17billion", "category": "IT"}, {"instruction": "Why do people watch the English Premier League more than any other soccer league in the world?", "input": "", "output": "The English Premier League, which I've been watching for the past 20 years, is one of the fastest and most entertaining leagues in international football. \n\nThe Premier League provides us with a full dose of excitement and the most physical league in the world. The rules for fouls aren't as strict as they are in other leagues, which leads to more physicality and allows for more tackles, rougher games, and a huge variation in footballing styles amongst the teams.\n\nCompare this with other leagues in Europe, and you'll see that the teams are far more technical and tactical. Any Premier League match you watch, you'll have some kind of action.\n\nAnother advantage of watching the Premier League is that unlike, say, La Liga or the Bundesliga, there aren't just two teams dominating the whole league, there are at least 6 teams in the EPL vying for 4 Champions League spots, which is a lot of competition. Games tend to be more brutal for this reason.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Xenoposeidon, Sloth", "input": "", "output": "Sloth is alive, Xenoposeidon is extinct.", "category": "IT"}, {"instruction": "What are three ways to build a pillow fort?", "input": "", "output": "You could use chairs or sofas in the room as stands, draping large sheets across them to form a canopy and walls. Alternatively, you could stick the corners of the sheets to a corner of the room so the walls are pre-built in, allowing for as tall a canopy as you want, but having a less cozy feel overall. As another option, you could use other large items besides blankets and sheets such as large umbrellas, decorating the space with lots of pillows and stuffed animals to cover any item that isn't already soft or fluffy.", "category": "IT"}, {"instruction": "What is the best way to put a toddler to sleep at night?", "input": "", "output": "Putting a toddler to sleep can be one of the most difficult things. The best way is to make sure that the toddler is very active during the day and is tired enough to fall asleep naturally. The toddler should get enough sunlight. Avoid or minimize exposure to digital screens such as television, tablet, and smartphones. Create a daily bedtime routine. For example, you can start the routine by feeding a bottle of milk, reading a story from a picture book, singing a lullaby, and shushing. For some babies and toddlers white noise helps to fall asleep.", "category": "IT"}, {"instruction": "In the series A Song of Ice and Fire, who is the founder of House Tarly?", "input": "", "output": "House Tarly's ancestry can be linked to Harlon the Hunter, who built the Horn Hill castle with his twin brother Herndon of the Horn.", "category": "IT"}, {"instruction": "What was unique about Scrubs?", "input": "Scrubs focuses on the unique point of view of its main character and narrator, Dr. John Michael \"J.D.\" Dorian (Zach Braff) for the first eight seasons, with season nine being narrated by the new main character Lucy Bennett (Kerry Bish\u00e9). Most episodes feature multiple story lines thematically linked by voice-overs done by Braff, as well as the comical daydreams of J.D. According to Bill Lawrence, \"What we decided was, rather than have it be a monotone narration, if it's going to be Zach's voice, we're going to do everything through J.D.'s eyes. It opened up a visual medium that those of us as comedy writers were not used to.\"[1] Actors were given the chance to improvise their lines on set with encouragement by series creator Bill Lawrence, with Neil Flynn and Zach Braff being the main improvisors.[2][3]", "output": "Most episodes featured voice-overs done by Zach Braff (who stars as the main character, J.D.), as well as the comical daydreams of J.D. This opened up a unique visual medium that the comedy writers were not used to. Also, actors were given the chance to improvise their lines on set.", "category": "IT"}, {"instruction": "How many octaves does a harpsichord have?", "input": "", "output": "5 octaves", "category": "IT"}, {"instruction": "Who were the Pilgrims and what holiday is typically associated with them?", "input": "The Pilgrims is the name for the early settlers of the Plymouth Colony, which is now Plymouth, Massachusetts. In 1620 they traveled to New England on a ship called the Mayflower. There were 102 passengers on the ship. They were English Puritans who had left England years earlier to live in Leiden because of religious differences with the Church of England. Unlike other Puritans who wanted to reform the Church of England, they wanted to separate from it, so they were called Separatists. The original settlers of Plymouth Colony are known as the Pilgrim Fathers, or simply as the Pilgrims.\nWhen they arrived in America, they built homes and farms. They received help from the Wampanoag people. The Wampanoag people taught the Pilgrims how to plant corn, hunt, and fish in the new land. They had a big feast for 3 days, which was the first thanksgiving.", "output": "Pilgrims are considered to be the early settlers on Plymouth Colony in modern day Plymouth, Massachusetts. They travelled in 1620 on a ship known as the Mayflower from England. They were puritans who left England due to religious difference with the Church of England. When they arrived in America, they were assisted by the local Native American Wampanoag people. They taught the pilgrims how to hunt, fish and grow corn on their settlements. This led to a celebration for 3 days which are the origins of the modern day Thanksgiving feast.", "category": "IT"}, {"instruction": "Who was charged in August 1902, under the Offences against the Person Act 1861 with incitement to murder?", "input": "In August 1902, he was charged under the Offences against the Person Act 1861 with incitement to murder - during the course of a speech against an eviction - of Major-General Devinish Meares.[5] That December, he was found guilty and sentenced to eight months' imprisonment.[6] After the passing of the Evicted Tenants Act, 1908, some of this holding, but not his house, was returned to him", "output": "Denis Kilbride (September 1848 \u2013 24 October 1924) was an Irish nationalist politician, who as member of the Irish Parliamentary Party represented South Kerry (1887\u20131895), and North Galway (1895\u20131900) and South Kildare (1903\u20131918) as a Member of Parliament (MP) in the House of Commons of the United Kingdom of Great Britain and Ireland.\n\nHe was educated at Clongowes Wood.[1] He was evicted, along with other subtenants of the 5th Marquess of Lansdowne, was evicted from his 500-acre (2.0 km2) holding during the Luggacurran evictions, Stradbally, County Laois, in March 1887.[2]\n\nKilbride's rent was 760 pounds a year, although the holding was valued at only 450. Although he was a large tenant, he and other tenants adopted the Plan of Campaign.[3]\n\nTo raise awareness of the evictions, Kilbride travelled with William O'Brien to Canada, where the Marquess of Lansdowne was governor general, and the USA.[4]\n\nIn August 1902, he was charged under the Offences against the Person Act 1861 with incitement to murder - during the course of a speech against an eviction - of Major-General Devinish Meares.[5] That December, he was found guilty and sentenced to eight months' imprisonment.[6] After the passing of the Evicted Tenants Act, 1908, some of this holding, but not his house, was returned to him.[7]\n\nHe died at his residence in Luggacurran in 1924 aged 76 and was buried in Clopook cemetery.", "category": "IT"}, {"instruction": "Please list all the emperors in the following passage", "input": "The political unrest began with the murder of Emperor Commodus on New Year's Eve 192. Once Commodus was assassinated, Pertinax was named emperor, but immediately aroused opposition in the Praetorian Guard when he attempted to initiate reforms. They then plotted his assassination, and Pertinax was killed while trying to reason with the mutineers. He had only been emperor for three months. Didius Julianus, who purchased the title from the Praetorian Guard, succeeded Pertinax, but was ousted by Septimius Severus and executed on June 1. Severus was declared Caesar by the Senate, but Pescennius Niger was hostile when he declared himself emperor. This started the civil war between Niger and Severus; both gathered troops and fought throughout the territory of the empire. Due to this war, Severus allowed Clodius Albinus, whom he suspected of being a threat, to be co-Caesar so that Severus did not have to preoccupy himself with imperial governance. This move allowed him to concentrate on waging the war against Niger. Most historians count Severus and Albinus as two emperors, though they ruled simultaneously. The Severan dynasty was created out of the chaos of AD 193.", "output": "Commodus, Pertinax, Didius Julianus, Septimius Severus, Clodius Albinus", "category": "IT"}, {"instruction": "From the paragraph provided, extract the mechanisms of heat transfer.", "input": "Heat transfer is a discipline of thermal engineering that concerns the generation, use, conversion, and exchange of thermal energy (heat) between physical systems. Heat transfer is classified into various mechanisms, such as thermal conduction, thermal convection, thermal radiation, and transfer of energy by phase changes. Engineers also consider the transfer of mass of differing chemical species (mass transfer in the form of advection), either cold or hot, to achieve heat transfer. While these mechanisms have distinct characteristics, they often occur simultaneously in the same system.", "output": "The mechanisms of heat transfer include thermal conduction, thermal convection, thermal radiation, and transfer of energy by phase changes, although engineers also consider mass transfer in the form of advection a form of heat transfer.", "category": "IT"}, {"instruction": "What does your vacation rental have to offer?", "input": "", "output": "Our cabin sits nestled in the beautiful Rocky Mountains near Gatlinburg, Tennessee. It offers breathtaking views across the mountains, and you can access several trails to get out and view the beauty yourself. Hiking not for you? Enjoy the view from the hot tub on the back deck for nature sightings.", "category": "IT"}, {"instruction": "Is GitHub Actions are free?", "input": "", "output": "GitHub Actions usage is free for standard GitHub-hosted runners in public repositories, and for self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage for use with GitHub-hosted runners, depending on the product used with the account.", "category": "IT"}, {"instruction": "Classify the cities based on whether they are located in Slovakia or Croatia.\nKo\u0161ice, Bratislava, Zagreb, Split, Petr\u017ealka, Rijeka", "input": "", "output": "Slovakia - Bratislava, Ko\u0161ice, Petr\u017ealka\nCroatia - Zagreb, Rijeka, Split", "category": "IT"}, {"instruction": "Which is a species of fish? Rohu or Naked Mole", "input": "", "output": "Rohu", "category": "IT"}, {"instruction": "What is the purpose of using Terraform modules ?", "input": "", "output": "In order to easily maintain, manage and scale their infrastructure, DevOps teams design their infrastructure using modular and reusable components called Terraform modules. Terraform modules allow you to easily share and reuse the same components across multiple use cases and environments. It also helps enforce a standardised approach of defining resources and adopting best practices across your organisation. Not only does consistency ensure best practices are followed, it also helps to enforce compliant deployment, avoid accidental misconfigurations which could lead to costly errors.", "category": "IT"}, {"instruction": "Write an email to a landlord asking to replace a kitchen sink", "input": "", "output": "Hi Landlord,\n\nHope this finds you well. We\u2019ve been thinking about upgrading the kitchen sink (https://www.costco.com/.product.100689380.html). If we were to buy this, would you have a guy who could install it? And depending on the cost we could split the difference?\n\nLet me know if that\u2019s something you\u2019re open to!\n\nBest,\n\nWill", "category": "IT"}, {"instruction": "What are some examples of movies that won best picture in the 1990s?", "input": "", "output": "Some of the movies that won an Oscar for best picture in the 1990s include: Titanic, The English Patient, Forrest Gump, and Dances with Wolves.", "category": "IT"}, {"instruction": "Write a friendly email to my neighbor asking them to keep the noise down after 10pm on Weekdays.", "input": "", "output": "Hi Neighbor!\n\nI hope this email finds you well and getting ready for the sunny spring weather. As the days grow longer, I wanted to ask you for a small favor: can you please try to keep the noise down after 10pm on weekdays? to be clear, I'm not suggesting we all live in libraries--just that external parties, loud music, and fireworks cease after 10pm on weekdays. I'm hopeful that 10pm represents a reasonable compromise between those socializing late and those waking up early. Let me know if you disagree and we can try to work out an alternative compromise. And by all means, please let us know if there are special occasions and/or considerations we should understand. Our goal is to maintain this healthy, thriving neighborhood. \n\nThank you,\n\nKevin", "category": "IT"}, {"instruction": "If my car is broken while I am riding on the Highway, what should I do?", "input": "", "output": "If your car is broken while you are on the Highway try to maintain calm and identify a safe place to park your car if possible and try to identify if it's an issue that you can continue driving or if the damage can be fixed like a flat tire.\n\nIn case the damage is unknown or dangerous to continue driving, try to call the Highway services to help you and contact your insurance company if you have one.", "category": "IT"}, {"instruction": "Who was given Stockholm Water Prize 2022 ?", "input": "", "output": "Prof.Wilfried Brutsaert", "category": "IT"}, {"instruction": "How does the German voting system work?", "input": "", "output": "Each voter has two votes. The first vote is for a direct constituency candidate. The candidate with the relative majority receives a guaranteed seat in parliament. The second vote is for a party's list of candidates, which applies at the state level. The second vote determines the overall proportional party representation in the parliament. Overhang seats might be added to satisfy the direct mandates from the first vote.", "category": "IT"}, {"instruction": "Who are the Wagner group", "input": "The Wagner Group (Russian: \u0413\u0440\u0443\u043f\u043f\u0430 \u0412\u0430\u0433\u043d\u0435\u0440\u0430, tr. Gruppa Vagnera), also known as PMC Wagner[3] (Russian: \u0427\u0412\u041a[a] \u00ab\u0412\u0430\u0433\u043d\u0435\u0440\u00bb, tr. ChVK \u00abVagner\u00bb[49]; lit.\u2009'Wagner Private Military Company'), is a Russian paramilitary organization.[3] It is variously described as a private military company (PMC), a network of mercenaries, or a de facto private army of Russian President Vladimir Putin.[3][50] The group operates beyond the law in Russia, where private military contractors are officially forbidden", "output": "They are a private military organization that is endorsed by Russian President Vladimir Putin and is being used in the ongoing war against Ukraine.", "category": "IT"}, {"instruction": "Choose the word which is different from the rest: Barley, Rice, Wheat, Mustard, Bajra.", "input": "", "output": "All except Mustard are foodgrains, while mustard is an oilseed.  A grain is a small, hard, dry fruit with or without an attached hull layer, harvested for human or animal consumption.\nThe major U.S. oilseed crops are\u00a0soybeans, cottonseed, sunflower seed and canola.  Soybeans are the dominant oilseed in the United States, accounting for about 90 percent of U.S. oilseed production.", "category": "IT"}, {"instruction": "Is Castle Island really an Island?", "input": "Castle Island is a peninsula in South Boston on the shore of Boston Harbor. In 1928, Castle Island was connected to the mainland by a narrow strip of land and is thus no longer an island.[3] It has been the site of a fortification since 1634,[3] and is currently a 22-acre (8.9 ha) recreation site and the location of Fort Independence.[2]", "output": "No, Castle Island is a peninsula off Boston Harbor as of 1928, when it was connected to the Massachusetts mainland.  It is a recreation area that is the site of Fort Independence.", "category": "IT"}, {"instruction": "Identify which animal is domesticated or wild: Arabian camel, European fallow", "input": "", "output": "European fallow is wild, Arabian camel is domesticated", "category": "IT"}, {"instruction": "List some TV shows that Canadian actor William B. Davis has been in.", "input": "", "output": "The X-Files, Robson Arms, Supernatural, Stargate SG-1, Continuum, Upload", "category": "IT"}, {"instruction": "Who wrote Beloved?", "input": "", "output": "Beloved is a book written by Toni Morrison", "category": "IT"}, {"instruction": "Who let the dogs out?", "input": "", "output": "According to the hit 2000 song \"Who Let the Dogs Out\" by the Baha Men, it is undetermined who exactly is responsible for letting the dogs out. The lyrics indicate that the dogs may have been uninvited to the party and let themselves out so they could crash the party, much to the dismay of the other guests in attendance.", "category": "IT"}, {"instruction": "What is the best bidding system in duplicate bridge?", "input": "", "output": "Bidding systems in bridge allow the partnership to communicate the strength and various characteristics of their hand to arrive at an appropriate contract. A good bidding system should be descriptive, accommodate many different hand types, and account for interference from the opponents. There is no clear best bidding system as they all have advantages and disadvantages but 2/1 (two-over-one) is accepted to be the standard that people use. The reason is that it can describe many hand types efficiently through natural bidding, it is easy to learn and understand, and handle interference from opponents.", "category": "IT"}, {"instruction": "Give me a list of five films made in the 1950s whose stars are still alive", "input": "", "output": "Rio Bravo (1959) Angie Dickinson\nBrothers Karamazov (1958) William Shatner\nRevenge of the Creature (1955) Clint Eastwood\nAn American in Paris (1951) Leslie Caron\nVertigo (1958) Kim Novak", "category": "IT"}, {"instruction": "Is it acceptable to sign a cappella (without musical accompaniment) at a community musical theater audition?", "input": "", "output": "No, this is usually not considered acceptable. Auditioners for local, community musical theater are usually expected to provide sheet music -- clearly marked with their specific cut of the material -- for the audition accompanist. This may be a physical, printed copy of the music, or an electronic version provided on a tablet computer such as an iPad. In some cases, the company holding the auditions may also allow you to play recorded accompaniment at the audition. However, this should also be avoided unless the audition instructions specifically state that this is acceptable.", "category": "IT"}, {"instruction": "Classify each of the following dishes as either 'Indian', 'Italian', 'Latin American', 'African' or 'Neither' based on their cuisine. Biriyani, Pasta, Dosa, Risotto, Burger, Lasagne, Tajine,  Empanadas, Tacos", "input": "", "output": "Here is are the dishes classified based on their cuisine.\nBiriyani, Dosa - Indian\nPasta, Risotto, Lasagne - Italian\nTajine - African\nEmpanadas, Tacos - Latin American\nBurger - Neither", "category": "IT"}, {"instruction": "What to do when you are bored?", "input": "", "output": "If you are bored, you can use this as an opportunity to read a book, go outside for a walk, learn something new, paint, color, draw, call a friend that you haven't spoken to in a while, make a to-do list of items that you've been putting off and get to work on those, yard work, spend time volunteering to help a friend or non-profit. Look at being bored as an opportunity versus a burden, I think that will help!", "category": "IT"}, {"instruction": "What factors are identified as contributing to growth and development in early childhood?", "input": "", "output": "Many factors are identified as contributing to growth and development in early childhood, such as nutrition, parents\u2019 behaviors, parenting, social and cultural practices, and environment.  Nutrition is important for young children because a child's body needs the right amount of nutrients to build and repair itself. A balanced diet is rich in vitamins, minerals, protein, carbohydrates, and facts to support young children's brain and body development. Child abuse and neglect have long-term consequences. It can negatively affect a child's brain and cause psychological problems. Exposure to violence can harm a child's emotional, psychological, and even physical development. As a child care provider, I want to share this knowledge with parents through different means such as newsletters, posters, and flyers, and by sharing with them some of the recognized online resources.", "category": "IT"}, {"instruction": "What is the meaning of life?", "input": "", "output": "Some say it's love and family, others say it's 42. I say you should probably figure this one out for yourself.", "category": "IT"}, {"instruction": "What are the titles to the six volumes of Sir Winston Churchill's \"The Second World War\"?", "input": "", "output": "The six volumes of Sir Winston Churchill's \"The Second World War\" were published between 1948 and 1953. They are:\n1. The Gathering Storm\n2. Their Finest Hour\n3. The Grand Alliance\n4. The Hinge of Fate\n5. Closing the Ring\n6. Triumph and Tragedy", "category": "IT"}, {"instruction": "Based on this paragraph, please summarize Cormac McCarthy's use of punctuation.", "input": "McCarthy uses punctuation sparsely, even replacing most commas with \"and\" to create polysyndetons;[62] it has been called \"the most important word in McCarthy's lexicon\".[2] He told Oprah Winfrey that he prefers \"simple declarative sentences\" and that he uses capital letters, periods, an occasional comma, or a colon for setting off a list, but never semicolons, which he has labelled as \"idiocy\".[20][63] He does not use quotation marks for dialogue and believes there is no reason to \"blot the page up with weird little marks\".[64] Erik Hage notes that McCarthy's dialogue often lacks attribution, but that \"Somehow ... the reader remains oriented as to who is speaking.\"[65] His attitude to punctuation dates to some editing work he did for a professor of English while enrolled at the University of Tennessee, when he stripped out much of the punctuation in the book being edited, which pleased the professor.[66] McCarthy edited fellow Santa Fe Institute Fellow W. Brian Arthur's influential article \"Increasing Returns and the New World of Business\", published in the Harvard Business Review in 1996, removing commas from the text.[67] He has also done copy-editing work for physicists Lawrence M. Krauss and Lisa Randall.[68]", "output": "Cormac McCarthy is known for his preference to avoid punctuation in situations when it is commonly used. Two typical examples of replacing commas with the word \"and\" and avoiding quotation marks when characters in his novels are speaking.", "category": "IT"}, {"instruction": "What is the smallest state in the United States?", "input": "", "output": "Rhode Island is the smallest state with 1,545 square miles. By comparison, the largest state is Alaska at 665,400 square miles. You could fit 430 Rhode Islands into one Alaska.", "category": "IT"}, {"instruction": "What is the largest state in the United States?", "input": "", "output": "Alaska is the largest state in the United States, trailed by Texas in second place. Alaska has 665,400 square miles of land whereas Texas has 268,597 square miles of land. If Alaska were to be cut in half, Texas would be the third largest state.", "category": "IT"}, {"instruction": "What is tollywood?", "input": "Telugu cinema, also known as Tollywood, is the segment of Indian cinema dedicated to the production of motion pictures in the Telugu language, widely spoken in the states of Andhra Pradesh and Telangana. Telugu cinema is based in Film Nagar, Hyderabad. As of 2021, Telugu cinema is the largest film industry in India in terms of box-office.[6][7] Telugu films sold 23.3 crore (233 million) tickets in 2022, the highest among various film industries in India.[4][5]", "output": "Tollywood is a nickname for movies made by Telugu cinema in India.", "category": "IT"}, {"instruction": "What is the best season to re-seed your lawn on north east region of USA?", "input": "", "output": "The best season to plant grass seeds is early fall before the soil temperature drops below zero degrees. It will take a few weeks for the new seeds to take root before winter comes. Then when spring comes, the grass will resume growth and become strong enough to sustain the high temperature in the summer. Spring time is actually not a good season to plant, because the grass will not have enough time to grow before harsh summer comes along.", "category": "IT"}, {"instruction": "Does Alaska have any professional sports teams?", "input": "", "output": "There are no professional sports teams in Alaska. There are some semi-professional and minor league organizations, such as Division I collegiate sports, junior hockey teams, and college summer baseball teams.", "category": "IT"}, {"instruction": "List of Italian horse breeds", "input": "", "output": "List of Italian horse breeds:\n\n- Anglo-Arabo Sardo\n- Appeninico\n- Avelignese or Haflinger\n- Bardigiano\n- Calabrese\n- Catria horse\n- Cavallo Romano della Maremma Laziale\n- Esperia Pony\n- Giara horse\n- Italian Trotter\n- Lipizzano\n- Maremmano\n- Monterufolino\n- Murgese\n- Napoletano\n- Norico\n- Pentro horse\n- Persano\n- Purosangue Orientale\n- Salernitano\n- Samolaco horse\n- Sanfratellano\n- Sarcidano\n- Sella Italiano\n- Siciliano indigeno\n- Tolfetano\n- TPR\n- Ventasso horse", "category": "IT"}, {"instruction": "Are there still grizzly bears in California?", "input": "", "output": "No, although the grizzly bear is a symbol of California, grizzly bears are extinct in California", "category": "IT"}, {"instruction": "How many judges did President Trump apoint?", "input": "Trump ordered a travel ban on citizens from several Muslim-majority countries, diverted military funding towards building a wall on the U.S.\u2013Mexico border, and implemented a policy of family separations for apprehended migrants. He rolled back more than 100 environmental policies and regulations in an aggressive attempt to weaken environmental protections. Trump signed the Tax Cuts and Jobs Act of 2017, which cut taxes for individuals and businesses and rescinded the individual health insurance mandate penalty of the Affordable Care Act. He appointed 54 federal appellate judges and three U.S. Supreme Court justices. Trump initiated a trade war with China and withdrew the U.S. from the proposed Trans-Pacific Partnership trade agreement, the Paris Agreement on climate change, and the Iran nuclear deal. Trump met with North Korean leader Kim Jong-un three times, but made no progress on denuclearization. He reacted slowly to the COVID-19 pandemic, ignored or contradicted many recommendations from health officials in his messaging, and promoted misinformation about unproven treatments and the need for testing.", "output": "He appointed 57 judges, 54 federal appellate judges and three U.S. Supreme Court justices.", "category": "IT"}, {"instruction": "Who was the first human to walk on the moon?", "input": "", "output": "Neil Armstrong was the first human to set foot on the moon.", "category": "IT"}, {"instruction": "My friend recommended a TV show about kids fighting monsters. It is set in the 80s and one of the kids has magical powers. Do you know what it is called?", "input": "", "output": "Your friend might have been talking about Stranger Things, a TV show on Netflix set in the fictional town of Hawkins during the 1980s. The story focuses on four childhood friends who meet a girl with magical powers named Eleven, who might be the key to stopping the monsters that are terrorizing their town.", "category": "IT"}, {"instruction": "What was the Battle of Midway?", "input": "The Battle of Midway was a major naval battle in the Pacific Theater of World War II that took place from 4\u20137 June 1942, six months after Japan's attack on Pearl Harbor and one month after the Battle of the Coral Sea.[7][8][9] The U.S. Navy under Admirals Chester W. Nimitz, Frank J. Fletcher, and Raymond A. Spruance defeated an attacking fleet of the Imperial Japanese Navy under Admirals Isoroku Yamamoto, Ch\u016bichi Nagumo, and Nobutake Kond\u014d north of Midway Atoll, inflicting devastating damage on the Japanese fleet. Military historian John Keegan called it \"the most stunning and decisive blow in the history of naval warfare\",[10] while naval historian Craig Symonds called it \"one of the most consequential naval engagements in world history, ranking alongside Salamis, Trafalgar, and Tsushima Strait, as both tactically decisive and strategically influential\"", "output": "The Battle of Midway was the turning point of the Pacific Naval Campaign of WW2 and occurred June 4-7, 1942.  The US Navy, under Chester Nimitz defeated the Imperial Japanese Navy and sunk 4 of their aircraft carriers.  This was a significant setback for the Japanese and marked the first major defeat of the Imperial Japanese fleet in WW2.", "category": "IT"}, {"instruction": "What is RBI?", "input": "", "output": "The Reserve Bank of India, chiefly known as RBI, is India's central bank and regulatory body responsible for regulation of the Indian banking system. It is under the ownership of Ministry of Finance, Government of India. It is responsible for the control, issue and maintaining supply of the Indian rupee. \nIt also manages the country's main payment systems and works to promote its economic development. Bharatiya Reserve Bank Note Mudran (BRBNM) is a specialised division of RBI through which it prints and mints Indian currency notes (INR) in four of its currency printing presses located in Nashik (Maharashtra; Western India), Dewas (Madhya Pradesh; Central India), Mysore (Karnataka; Southern India) and Salboni (West Bengal; Eastern India). \nThe RBI established the National Payments Corporation of India as one of its specialised division to regulate the payment and settlement systems in India. Deposit Insurance and Credit Guarantee Corporation was established by RBI as one of its specialised division for the purpose of providing insurance of deposits and guaranteeing of credit facilities to all Indian banks.", "category": "IT"}, {"instruction": "What are some examples of cockney rhyming slang?", "input": "", "output": "Cockney rhyming slang is a tradition of substituting a word with a phrase that rhymes with the original word. Often the last part of the phrase is omitted making the slang even more opaque to outsiders. The practice is also common in Australia and other cultures influenced by the British. Common examples include \"Use your loaf\" meaning \"Use your head\" via the rhyme \"loaf of bread\" for \"head\", \"Stop telling porkies\" meaning \"Stop telling lies\" via \"pork pies\" for \"lies\", or \"Who's turn is it to buy the Britneys?\" with \"Britneys\" meaning \"beers\" via \"Britney Spears\".", "category": "IT"}, {"instruction": "Which is a species of fish? Blowfish or Toucan", "input": "", "output": "Blowfish", "category": "IT"}, {"instruction": "Categorize  the below names into fishes and insects.\n Hilsa, Catla, Maggot, Mite", "input": "", "output": "Insects - Maggot, Mite\nFish - Hilsa, Catla", "category": "IT"}, {"instruction": "Give me a bullet list of 8 different pastel colors I could paint my wall", "input": "", "output": "- Baby blue\n- Robin blue\n- Pale pink\n- Rose\n- Light green\n- Lilac\n- Pale yellow\n- Tan", "category": "IT"}, {"instruction": "What is the largest land animal in the world?", "input": "", "output": "African Elephant", "category": "IT"}, {"instruction": "Given this paragraph about Himmerland, which is the largest city in Himmerland?", "input": "Himmerland is a peninsula in northeastern Jutland, Denmark. It is delimited to the north and the west by the Limfjord, to the east by the Kattegat, and to the south by the Mariager Fjord. The largest city is Aalborg; smaller towns include Hobro, Aars, L\u00f8gst\u00f8r, St\u00f8vring and Nibe. In northeastern Himmerland is the Lille Vildmose, Denmark's largest raised bog, which sustains a rich bird life of international importance.", "output": "Aalborg is the largest city in Himmerland.", "category": "IT"}, {"instruction": "Given this paragraph about ext3, tell me why its better than ext2 and its successor.", "input": "ext3, or third extended filesystem, is a journaled file system that is commonly used by the Linux kernel. It used to be the default file system for many popular Linux distributions. Stephen Tweedie first revealed that he was working on extending ext2 in Journaling the Linux ext2fs Filesystem in a 1998 paper, and later in a February 1999 kernel mailing list posting. The filesystem was merged with the mainline Linux kernel in November 2001 from 2.4.15 onward.[3][4][5] Its main advantage over ext2 is journaling, which improves reliability and eliminates the need to check the file system after an unclean shutdown. Its successor is ext4", "output": "ext3 is better than ext2 because of its journaling capabilities, which improve reliability and eliminates the need to check the file system after an unclean shutdown. The successor of ext3 is ext4.", "category": "IT"}, {"instruction": "How many miles per year does the average person drive?", "input": "", "output": "13,500", "category": "IT"}, {"instruction": "Which are the five best manufacturers of electric vehicles sold in the United States?", "input": "", "output": "1. Tesla\n2. Hyundai\n3. Volkswagon\n4. Chevrolet \n5. Nissan", "category": "IT"}, {"instruction": "What is the highest score possible in ten pin bowling?", "input": "", "output": "The highest possible score in ten pin bowling is 300.", "category": "IT"}, {"instruction": "Extract the names of the original songs Sandler performed on Saturday Night Live and list them in bullet format.", "input": "In 1987, Sandler played Theo Huxtable's friend Smitty on The Cosby Show and the Stud Boy or Trivia Delinquent on the MTV game show Remote Control. After his film debut in Going Overboard in 1989, Sandler performed in comedy clubs, having first taken the stage at his brother's urging when he was 17. He was discovered by comedian Dennis Miller, who caught Sandler's act in Los Angeles and recommended him to Saturday Night Live producer Lorne Michaels. Sandler was hired as a writer for SNL in 1990, and became a featured player the following year. He made a name for himself by performing amusing original songs on the show, including \"The Thanksgiving Song\" and \"The Chanukah Song\".[13] Sandler told Conan O'Brien on The Tonight Show that NBC fired him and Chris Farley from the show in 1995. Sandler used his firing as part of his monologue when he returned in 2019 to host the show.[14][15]", "output": "-The Thanksgiving Song\n-The Chanukah Song", "category": "IT"}, {"instruction": "what is the difference between ARM and x86 chipsets?", "input": "", "output": "ARM uses Reduced Instruction Set Computing Architecture (RISC) whereas x86 uses Complex Instruction Set Computing Architecture (CISC). ARM executes single instruction per cycle whereas x86 executes complex instructions in multiple cycles. This allows softwares to be optimized for performance against ARM chipset as opposed to an 86 hardware approach to optimize. It would also be interesting to mention that ARM uses higher memory and less registers compared to x86.", "category": "IT"}, {"instruction": "What is Sauvignon blanc?", "input": "Sauvignon blanc is a green-skinned grape variety that originates from the city of Bordeaux in France. The grape most likely gets its name from the French words sauvage (\"wild\") and blanc (\"white\") due to its early origins as an indigenous grape in South West France.[1] It is possibly a descendant of Savagnin. Sauvignon blanc is planted in many of the world's wine regions, producing a crisp, dry, and refreshing white varietal wine. The grape is also a component of the famous dessert wines from Sauternes and Barsac. Sauvignon blanc is widely cultivated in France, Chile, Romania, Canada, Australia, New Zealand, South Africa, Bulgaria, the states of Oregon, Washington, and California in the US. Some New World Sauvignon blancs, particularly from California, may also be called \"Fum\u00e9 Blanc\", a marketing term coined by Robert Mondavi in reference to Pouilly-Fum\u00e9.\n\nDepending on the climate, the flavor can range from aggressively grassy to sweetly tropical. In cooler climates, the grape has a tendency to produce wines with noticeable acidity and \"green flavors\" of grass, green bell peppers and nettles with some tropical fruit (such as passion fruit) and floral (such as elderflower) notes. In warmer climates, it can develop more tropical fruit notes but risks losing much aroma from over-ripeness, leaving only slight grapefruit and tree fruit (such as peach) notes.", "output": "Sauvignon blanc is a green-skinned grape variety that originates from the city of Bordeaux in France.  Sauvignon blanc is planted in many of the world's wine regions, producing a crisp, dry, and refreshing white varietal wine.", "category": "IT"}, {"instruction": "Why do many of the flags of African countries have similar colors?", "input": "", "output": "Ethiopia was the only sub-Saharan African country not to be colonized. Since the 19th century its flag has the colors green, yellow, and red. When Ghana became independent, it was inspired by Ethiopia\u2019s resistance to colonization, and took those colors for its own flag. Subsequent African countries used the same colors, as a sign of unity with the other African countries.", "category": "IT"}, {"instruction": "Which NFL teams have gone to the Super Bowl only once and won?", "input": "", "output": "New Orleans Saints and New York Jets", "category": "IT"}, {"instruction": "Who is Hugo Chavez?", "input": "Hugo Rafael Ch\u00e1vez Fr\u00edas (Spanish pronunciation: [\u02c8u\u0263o rafa\u02c8el \u02c8t\u0283a\u03b2es \u02c8f\u027ei.as] (listen); 28 July 1954 \u2013 5 March 2013[b]) was a Venezuelan politician who was president of Venezuela from 1999 until his death in 2013, except for a brief period in 2002. Ch\u00e1vez was also leader of the Fifth Republic Movement political party from its foundation in 1997 until 2007, when it merged with several other parties to form the United Socialist Party of Venezuela (PSUV), which he led until 2012.", "output": "Hugo Rafael Ch\u00e1vez Fr\u00edas (Spanish pronunciation: [\u02c8u\u0263o rafa\u02c8el \u02c8t\u0283a\u03b2es \u02c8f\u027ei.as] (listen); 28 July 1954 \u2013 5 March 2013[b]) was a Venezuelan politician who was president of Venezuela from 1999 until his death in 2013, except for a brief period in 2002. Ch\u00e1vez was also leader of the Fifth Republic Movement political party from its foundation in 1997 until 2007, when it merged with several other parties to form the United Socialist Party of Venezuela (PSUV), which he led until 2012.\n\nBorn into a middle-class family in Sabaneta, Barinas, Ch\u00e1vez became a career military officer and, after becoming dissatisfied with the Venezuelan political system based on the Puntofijo Pact,[1] he founded the clandestine Revolutionary Bolivarian Movement-200 (MBR-200) in the early 1980s. Ch\u00e1vez led the MBR-200 in its unsuccessful coup d'\u00e9tat against the Democratic Action government of President Carlos Andr\u00e9s P\u00e9rez in 1992, for which he was imprisoned. Pardoned from prison two years later, he founded the Fifth Republic Movement political party, and then receiving 56.2% of the vote, was elected president of Venezuela in 1998. He was re-elected in 2000 with 59.8% of the vote and again in 2006 with 62.8% of the vote. After winning his fourth term as president in the October 2012 presidential election with a decrease to 55.1% of the vote,[2] he was to be sworn in on 10 January 2013. However, the inauguration was postponed due to his cancer treatment,[3] and on 5 March at age 58, he died in Caracas.[b][4][5]\n\nFollowing the adoption of a new constitution in 1999, Ch\u00e1vez focused on supposedly enacting social reforms as part of the Bolivarian Revolution. Using record-high oil revenues of the 2000s, his government nationalized key industries, created participatory democratic Communal Councils and implemented social programs known as the Bolivarian missions to expand access to food, housing, healthcare and education.[6][7][8][9][10][11] The high oil profits coinciding with the start of Chavez's presidency[12] resulted in temporary improvements in areas such as poverty, literacy, income equality and quality of life between primarily 2003 and 2007,[13][12][14] though extensive changes in structural inequalities did not occur.[15] On 2 June 2010, Ch\u00e1vez declared an \"economic war\" on Venezuela's upper classes due to shortages, arguably beginning the crisis in Venezuela.[16] By the end of Ch\u00e1vez's presidency in the early 2010s, economic actions performed by his government during the preceding decade, such as deficit spending[17][18][19] and price controls,[20][21] proved to be unsustainable, with Venezuela's economy faltering. At the same time, poverty,[12][22] inflation[23] and shortages increased.\n\nUnder Ch\u00e1vez, Venezuela experienced democratic backsliding, as he suppressed the press, manipulated electoral laws, and arrested and exiled government critics.[24][25][26] His use of enabling acts[27] and his government's use of propaganda were controversial.[28][29][30][31] Ch\u00e1vez's presidency saw significant increases in the country's murder rate[32][33][page needed] and continued corruption within the police force and government.[34][35]\n\nAcross the political spectrum, Ch\u00e1vez is regarded as one of the most influential and controversial politicians in the modern history of Venezuela and Latin America. His 14-year presidency marked the start of the socialist \"pink tide\" sweeping Latin America\u2014he supported Latin American and Caribbean cooperation and was instrumental in setting up the pan-regional Union of South American Nations, the Community of Latin American and Caribbean States, the Bolivarian Alliance for the Americas, the Bank of the South and the regional television network TeleSUR. Internationally, Ch\u00e1vez aligned himself with the Marxist\u2013Leninist governments of Fidel and then Ra\u00fal Castro in Cuba, as well as the socialist governments of Evo Morales in Bolivia, Rafael Correa in Ecuador and Daniel Ortega in Nicaragua. Ch\u00e1vez's ideas, programs, and style form the basis of \"Chavismo\", a political ideology closely associated with Bolivarianism and socialism of the 21st century. Ch\u00e1vez described his policies as anti-imperialist, being a prominent adversary of the United States's foreign policy as well as a vocal critic of neoliberalism and laissez-faire capitalism. He described himself as a Marxist.[36][37][38][39]", "category": "IT"}, {"instruction": "Which of these books won a Pulitzer Prize for fiction? The Road, Lonesome Dove, Ender's Game, Avator the Lost Adventures, Prodigal Summer, The Joy Luck Club, Cloudsplitter, Blink, The Dancer Upstairs, The Known World, Millhauser, All the Light We Cannot See, and Age of Iron,", "input": "", "output": "The books on this list that won the Pulitzer Prize for fiction are The Road, Lonesome Dove, The Known World, Millhauser, and All the Light We Cannot See. The other books did not win this award.", "category": "IT"}, {"instruction": "Q: What is an emergency use authorization and how is it being used to respond to COVID-19?", "input": "", "output": "A: An emergency use authorization (EUA) is a mechanism to facilitate the availability and use of medical countermeasures, including vaccines, tests, and medicines, during public health emergencies, such as the current COVID-19 pandemic. Under an EUA, the FDA may allow the use of unapproved medical products, or unapproved uses of approved medical products in an emergency to diagnose, treat, or prevent serious or life-threatening diseases or conditions when certain statutory criteria have been met, including that there are no adequate, approved, and available alternatives. Taking into consideration input from the FDA, manufacturers decide whether and when to submit an EUA request to the FDA.\n\nLearn more about EUAs in this videoExternal Link Disclaimer\nRead more about COVID-19 tests \nFind a community-based testing site", "category": "IT"}, {"instruction": "What is the average interest rate for a 30 year mortgage in the United States?", "input": "", "output": "The average interest rate for a 30 year mortgage in the United States as of Tuesday, March 28th is 7.9%. The interest rate that you'll actually for a mortgage get depends on your lender, credit score, and debt to income ratio, among other things.", "category": "IT"}, {"instruction": "Write a haiku about cats", "input": "", "output": "Whiskers fluttering\nA silent leap, and then: crash\nMy coffee mug breaks.", "category": "IT"}, {"instruction": "When were the most recent eruptions of Mount Hood?", "input": "The last three eruptions at Mount Hood occurred within the past 1,800 years from vents high on the southwest flank and produced deposits that were distributed primarily to the south and west along the Sandy and Zigzag rivers. The last eruptive period took place around 220 to 170 years ago, when dacitic lava domes, pyroclastic flows and mudflows were produced without major explosive eruptions. The prominent Crater Rock just below the summit is hypothesized to be the remains of one of these now-eroded domes. This period includes the last major eruption of 1781 to 1782 with a slightly more recent episode ending shortly before the arrival of the explorers Lewis and Clark in 1805. The latest minor eruptive event occurred in August 1907.", "output": "Mount Hood most recently erupted around 220 to 170 years ago. The most recent major Mount Hood eruptions occurred between the years of 1781 to 1782 and again in 1805. The latest minor eruption occurred in August 1907.", "category": "IT"}, {"instruction": "How many cents do I have if I have 3 dollars and a dime?", "input": "", "output": "If you have 3 dollars and a dime, you have 310 cents in total.", "category": "IT"}, {"instruction": "Tell me whether the following are public or private universities in the United States: Harvard University, University of Florida, University of Massachusetts Amherst, Cornell University, Amherst College, Colby College, and the University of Michigan Ann Arbor.", "input": "", "output": "Harvard University, Cornell University, Amherst College, and Colby College are private universities. The rest of the schools you mentioned are public universities.", "category": "IT"}, {"instruction": "What are some novice running tips?", "input": "", "output": "Running is an excellent way to improve cardiovascular health. Building a running practice takes time and should be approached incrementally. If you are new to running, you should start with shorter runs or walks to ensure you don't put too much strain on your body. Once you have a sense of how far you can run, increase the distance you run or run the same distance but at a faster pace. Over time your body will increase it's capacity to withstand more strenuous running sessions. Eating well, stretching before and after running as well as getting quality sleep will help you improve as a runner.", "category": "IT"}, {"instruction": "Is a tomato a fruit or a vegetable?", "input": "", "output": "A tomato is technically a fruit. We know this because the seeds of a tomato are on the inside. However, tomatoes are typically thought of and treated as a vegetable. We roast them in the oven, add them to salads, and include them on vegetable trays with other vegetables. If you want to win a technicality content, you can call a tomato a fruit. But don't put them in a fruit salad.", "category": "IT"}, {"instruction": "What are popular young adult books?", "input": "", "output": "Young adult novels typically tell a coming to age story with a main character in their teens or early adulthood.  From 2000-2015, common books for young adults are Harry Potter, Divergent, and The Hunger Games. Since them, young adult novels are more often showing themes of diversity, inclusion, and overcoming adversity and less focused on action-based storytelling. A popular graphic novel series, Heartstopper, is a good example of a popular book focused on DEI. This eventually turned into a high-profile television show on Netflix.", "category": "IT"}, {"instruction": "Given this article about the NSA's ANT Catalog, which hacking tools can be used to monitor a target's key strokes?", "input": "The ANT catalog[a] (or TAO catalog) is a classified product catalog by the U.S. National Security Agency (NSA) of which the version written in 2008\u20132009 was published by German news magazine Der Spiegel in December 2013. Forty-nine catalog pages[b] with pictures, diagrams and descriptions of espionage devices and spying software were published. The items are available to the Tailored Access Operations unit and are mostly targeted at products from US companies such as Apple, Cisco and Dell. The source is believed to be someone different than Edward Snowden, who is largely responsible for the global surveillance disclosures since 2013. Companies whose products could be compromised have denied any collaboration with the NSA in developing these capabilities. In 2014, a project was started to implement the capabilities from the ANT catalog as open-source hardware and software.\n\nBackground\nThe Tailored Access Operations unit has existed since the late 90s. Its mission is to collect intelligence on foreign targets of the United States by hacking into computers and telecommunication networks.[3]\n\nIn 2012, Edward Snowden organized a CryptoParty together with Runa Sandvik, a former colleague of Jacob Appelbaum at The Tor Project. In June 2013, Snowden took internal NSA documents which he shared with Glenn Greenwald and Laura Poitras, resulting in the global surveillance disclosures.[4] It has been speculated for years before that capabilities like those in the ANT catalog existed.[1]\n\nPublication\nJacob Appelbaum co-authored the English publication in Der Spiegel with Christian St\u00f6cker [de] and Judith Horchert, which was publicized on 29 December 2013.[1] The related English publication on the same day about the TAO by Der Spiegel was also authored by the same people, and including Laura Poitras, Marcel Rosenbach, J\u00f6rg Schindler and Holger Stark.[5] On December 30, Appelbaum gave a lecture about \"the militarization of the Internet\" at the 30th Chaos Communication Congress in Hamburg, Germany.[6] At the end of his talk, he encouraged NSA employees to leak more documents.[7]\n\nApple denied the allegations that it collaborated on the development of DROPOUTJEEP in a statement to journalist Arik Hesseldahl from All Things Digital (part of the Wall Street Journal's Digital Network).[8] The Verge questioned how the program developed in later years, since the document was composed in the early period of the iPhone and smartphones in general.[9] Dell denied collaborating with any government in general, including the US government. John Stewart, senior vice president and chief security officer of Cisco stated that they were \"deeply concerned and will continue to pursue all avenues to determine if we need to address any new issues.\" Juniper stated that they were working actively to address any possible exploit paths. Huawei stated they would take appropriate audits to determine if any compromise had taken place and would communicate if that had taken place. NSA declined to comment on the publication by Der Spiegel.[10]\n\nSource\nThe source who leaked the ANT catalog to the press is unknown as of 2023.\n\nAuthor James Bamford, who is specialized in the United States intelligence agencies, noted in a commentary article published by Reuters that Appelbaum has not identified the source who leaked the ANT catalog to him, which led people to mistakenly assume it was Edward Snowden. Bamford got unrestricted access to the documents cache from Edward Snowden and could not find any references to the ANT catalog using automated search tools, thereby concluding that the documents were not leaked by him.[11] Security expert Bruce Schneier has stated on his blog that he also believes the ANT catalog did not come from Snowden, but from a second leaker.[12] Officials at the NSA did not believe that the web crawler used by Snowden touched the ANT catalog and started looking for other people who could have leaked the catalog.[13]\n\nContent\nThe published catalog pages were written between 2008 and 2009. The price of the items ranged from free up to $250,000.\n\nCapabilities in the ANT catalog \nPage\tCode name\tDescription[14]\tUnit price in US$[c]\nNSA CANDYGRAM.jpg\tCANDYGRAM\tTripwire device that emulates a GSM cellphone tower.\t40,000\nNSA COTTONMOUTH-I.jpg\tCOTTONMOUTH-I\tFamily of modified USB and Ethernet connectors that can be used to install Trojan horse software and work as wireless bridges, providing covert remote access to the target machine. COTTONMOUTH-I is a USB plug that uses TRINITY as digital core and HOWLERMONKEY as RF transceiver.\t20,300\nNSA COTTONMOUTH-II.jpg\tCOTTONMOUTH-II\tCan be deployed in a USB socket (rather than plug), and, but requires further integration in the target machine to turn into a deployed system.\t4,000\nNSA COTTONMOUTH-III.jpg\tCOTTONMOUTH-III\tStacked Ethernet and USB plug\t24,960\nNSA CROSSBEAM.jpg\tCROSSBEAM\tGSM communications module capable of collecting and compressing voice data\t4,000\nNSA CTX4000.jpg\tCTX4000\tContinuous wave radar device that can \"illuminate\" a target system for recovery of \"off net\" information.\tN/A\nNSA CYCLONE Hx9.jpg\tCYCLONE-HX9\tGSM Base Station Router as a Network-In-a-Box\t70,000[d]\nNSA DEITYBOUNCE.jpg\tDEITYBOUNCE\tTechnology that installs a backdoor software implant on Dell PowerEdge servers via the motherboard BIOS and RAID controller(s).\t0\nNSA DROPOUTJEEP.jpg\tDROPOUTJEEP\t\"A software implant for the Apple iPhone that utilizes modular mission applications to provide specific SIGINT functionality. This functionality includes the ability to remotely push/pull files from the device. SMS retrieval, contact list retrieval, voicemail, geolocation, hot mic, camera capture, cell tower location, etc. Command, control and data exfiltration can occur over SMS messaging or a GPRS data connection. All communications with the implant will be covert and encrypted.\"\t0\nNSA EBSR.jpg\tEBSR\tTri-band active GSM base station with internal 802.11/GPS/handset capability\t40,000\nNSA ENTOURAGE.jpg\tENTOURAGE\tDirection finding application for GSM, UMTS, CDMA2000 and FRS signals\t70,000\nNSA FEEDTROUGH.jpg\tFEEDTROUGH\tSoftware that can penetrate Juniper Networks firewalls allowing other NSA-deployed software to be installed on mainframe computers.\tN/A\nNSA FIREWALK.jpg\tFIREWALK\tDevice that looks identical to a standard RJ45 socket that allows data to be injected, or monitored and transmitted via radio technology. using the HOWLERMONKEY RF transceiver. It can for instance create a VPN to the target computer.\t10,740\nNSA GENESIS.jpg\tGENESIS\tGSM handset with added software-defined radio features to record the radio frequency spectrum\t15,000\nNSA GODSURGE.jpg\tGODSURGE\tSoftware implant for a JTAG bus device named FLUXBABBITT which is added to Dell PowerEdge servers during interdiction. GODSURGE installs an implant upon system boot-up using the FLUXBABBITT JTAG interface to the Xeon series CPU.\t500[e]\nNSA GINSU.jpg\tGINSU\tTechnology that uses a PCI bus device in a computer, and can reinstall itself upon system boot-up.\t0\nNSA GOPHERSET.jpg\tGOPHERSET\tGSM software that uses a phone's SIM card's API (SIM Toolkit or STK) to control the phone through remotely sent commands.\t0\nNSA GOURMETTROUGH.jpg\tGOURMETTROUGH\tUser-configurable persistence implant for certain Juniper Networks firewalls.\t0\nNSA HALLUXWATER.jpg\tHALLUXWATER\tBack door exploit for Huawei Eudemon firewalls.\tN/A\nNSA HEADWATER.jpg\tHEADWATER\tPersistent backdoor technology that can install spyware using a quantum insert capable of infecting spyware at a packet level on Huawei routers.\tN/A\nNSA HOWLERMONKEY.jpg\tHOWLERMONKEY\tA RF transceiver that makes it possible (in conjunction with digital processors and various implanting methods) to extract data from systems or allow them to be controlled remotely.\t750[f]\nNSA IRATEMONK.jpg\tIRATEMONK\tTechnology that can infiltrate the firmware of hard drives manufactured by Maxtor, Samsung, Seagate, and Western Digital.\t0\nNSA IRONCHEF.jpg\tIRONCHEF\tTechnology that can \"infect\" networks by installing itself in a computer I/O BIOS. IRONCHEF includes also \"Straitbizarre\" and \"Unitedrake\" which have been linked to the spy software REGIN.[15]\t0\nNSA JUNIORMINT.jpg\tJUNIORMINT\tImplant based on an ARM9 core and an FPGA.\tN/A\nNSA JETPLOW.jpg\tJETPLOW\tFirmware that can be implanted to create a permanent backdoor in a Cisco PIX series and ASA firewalls.\t0\nNSA LOUDAUTO.jpg\tLOUDAUTO\tAudio-based RF retro-reflector listening device.\t30\nNSA MAESTRO-II.jpg\tMAESTRO-II\tMulti-chip module approximately the size of a dime that serves as the hardware core of several other products. The module contains a 66 MHz ARM7 processor, 4 MB of flash, 8 MB of RAM, and a FPGA with 500,000 gates. It replaces the previous generation modules which were based on the HC12 microcontroller.\t3,000[g]\nNSA MONKEYCALENDAR.jpg\tMONKEYCALENDAR\tSoftware that transmits a mobile phone's location by hidden text message.\t0\nNSA NEBULA.jpg\tNEBULA\tMulti-protocol network-in-a-box system.\t250,000\nNSA NIGHTSTAND.jpg\tNIGHTSTAND\tPortable system that installs Microsoft Windows exploits from a distance of up to eight miles over a wireless connection.\tN/A[h]\nNSA NIGHTWATCH.jpg\tNIGHTWATCH\tPortable computer used to reconstruct and display video data from VAGRANT signals; used in conjunction with a radar source like the CTX4000 to illuminate the target in order to receive data from it.\tN/A\nNSA PICASSO.jpg\tPICASSO\tSoftware that can collect mobile phone location data, call metadata, access the phone's microphone to eavesdrop on nearby conversations.\t2,000\nNSA PHOTOANGLO.jpg\tPHOTOANGLO\tA joint NSA/GCHQ project to develop a radar system to replace CTX4000.\t40,000\nNSA RAGEMASTER.jpg\tRAGEMASTER\tA concealed device that taps the video signal from a target's computer's VGA signal output so the NSA can see what is on a targeted desktop monitor. It is powered by a remote radar and responds by modulating the VGA red signal (which is also sent out most DVI ports) into the RF signal it re-radiates; this method of transmission is codenamed VAGRANT. RAGEMASTER is usually installed/concealed in the ferrite choke of the target cable. The original documents are dated 2008-07-24. Several receiver/demodulating devices are available, e.g. NIGHTWATCH.\t30\nNSA SCHOOLMONTANA.jpg\tSCHOOLMONTANA\tSoftware that makes DNT[i] implants persistent on JUNOS-based (FreeBSD-variant) J-series routers/firewalls.\tN/A\nNSA SIERRAMONTANA.jpg\tSIERRAMONTANA\tSoftware that makes DNT implants persistent on JUNOS-based M-series routers/firewalls.\tN/A\nNSA STUCCOMONTANA.jpg\tSTUCCOMONTANA\tSoftware that makes DNT implants persistent on JUNOS-based T-series routers/firewalls.\tN/A\nNSA SOMBERKNAVE.jpg\tSOMBERKNAVE\tSoftware that can be implanted on a Windows XP system allowing it to be remotely controlled from NSA headquarters.\t50,000\nNSA SOUFFLETROUGH.jpg\tSOUFFLETROUGH\tBIOS injection software that can compromise Juniper Networks SSG300 and SSG500 series firewalls.\t0\nNSA SPARROW II.jpg\tSPARROW II\tA small computer intended to be used for WLAN collection, including from UAVs. Hardware: IBM Power PC 405GPR processor, 64 MB SDRAM, 16 MB of built-inflash, 4 mini PCI slots, CompactFlash slot, and 802.11 B/G hardware. Running Linux 2.4 and the BLINDDATE software suite. Unit price (2008): $6K.\t6,000\nNSA SURLYSPAWN.jpg\tSURLYSPAWN\tKeystroke monitor technology that can be used on remote computers that are not internet connected.\t30\nNSA SWAP.jpg\tSWAP\tTechnology that can reflash the BIOS of multiprocessor systems that run FreeBSD, Linux, Solaris, or Windows.\t0\nNSA TAWDRYYARD.jpg\tTAWDRYYARD\tRadio frequency retroreflector to provide location information.\t30\nNSA TOTECHASER.jpg\tTOTECHASER\tWindows CE implant for extracting call logs, contact lists and other information.\tN/A\nNSA TOTEGHOSTLY.jpg\tTOTEGHOSTLY\tSoftware that can be implanted on a Windows mobile phone allowing full remote control.\t0\nNSA TRINITY.jpg\tTRINITY\tMulti-chip module using a 180 MHz ARM9 processor, 4 MB of flash, 96 MB of SDRAM, and a FPGA with 1 million gates. Smaller than a penny.\t6,250[j]\nNSA TYPHON HX.jpg\tTYPHON HX\tNetwork-in-a-box for a GSM network with signaling and call control.\tN/A\nNSA WATERWITCH.jpg\tWATERWITCH\tA portable \"finishing tool\" that allows the operator to find the precise location of a nearby mobile phone.\tN/A\nNSA WISTFULTOLL.jpg\tWISTFULTOLL\tPlugin for collecting information from targets using Windows Management Instrumentation\t0\nFollow-up developments\nSecurity expert Matt Suiche noted that the software exploits leaked by the Shadow Brokers could be seen as genuine because it matched with names from the ANT catalog.[16] John Bumgarner has stated to IEEE Spectrum that US government suspicion of Huawei is based on its own ability to add backdoors as shown in the ANT catalog.[17]\n\nNSA Playset\nThe NSA Playset is an open-source project inspired by the NSA ANT catalog to create more accessible and easy to use tools for security researchers.[18] Most of the surveillance tools can be recreated with off-the-shelf or open-source hardware and software. Thus far, the NSA Playset consists of fourteen items, for which the code and instructions can be found online on the project's homepage. After the initial leak, Michael Ossman, the founder of Great Scott Gadgets, gave a shout out to other security researchers to start working on the tools mentioned in the catalog and to recreate them. The name NSA Playset came originally from Dean Pierce, who is also a contributor (TWILIGHTVEGETABLE(GSM)) to the NSA Playset. Anyone is invited to join and contribute their own device. The requisites for an addition to the NSA Playset is a similar or already existing NSA ANT project, ease of use and a silly name (based on the original tool's name if possible). The silly name requisite is a rule that Michael Ossman himself came up with and an example is given on the project's website: \"For example, if your project is similar to FOXACID, maybe you could call it COYOTEMETH.\" The ease of use part stems also from the NSA Playset's motto: \"If a 10 year old can't do it, it doesn't count!\"[18][19][20][21]\n\nName[22]\tDescription[21]\nTWILIGHTVEGETABLE\ta boot image for GSM communication monitoring.\nLEVITICUS\ta hand held GSM frequency analyzer disguised as a Motorola phone; named after GENESIS.\nDRIZZLECHAIR\ta hard drive with all the needed tools to crack A5/1 including the rainbow tables.\nPORCUPINEMASQUERADE\ta passive Wi-Fi reconnaissance drone.\nKEYSWEEPER\ta keylogger in form of a USB wall charger, that wirelessly and passively sniffs, decrypts, logs and reports back (over GSM).\nSLOTSCREAMER\ta PCI hardware implant, which can access memory and IO.\nADAPTERNOODLE\ta USB exploitation device.\nCHUKWAGON\tuses a pin on a computer's VGA port to attack via the I\u00b2C bus accessing the computer's operating system.\nTURNIPSCHOOL\ta hardware implant concealed in a USB cable which provides short range radio frequency communication capability to software running on the host computer.\nBLINKERCOUGH\ta hardware implant that is embedded in a VGA cable which allows data exfiltration.\nSAVIORBURST\ta hardware implant exploiting the JTAG interface for software application persistence; named after GODSURGE. FLUXBABBIT is replaced by SOLDERPEEK.\nCACTUSTUTU\tPortable system that enables wireless installation of Microsoft Windows exploits; covers NIGHTSTAND.\nTINYALAMO\tsoftware that targets BLE (Bluetooth Low Energy) and allows keystroke surveillance (keylogger) and injection.\nCONGAFLOCK\tRadio frequency retroreflector intended for experimentation. Intended use would be the implantation into a cable and data exfiltration based on radio reflectivity of the device.(FLAMENCOFLOCK (PS/2), TANGOFLOCK (USB), SALSAFLOCK (VGA) are retroreflectors with specific interfaces to test data exfiltration.)\nSee also\nCyberwarfare in the United States\nEquation Group\nMiniPanzer and MegaPanzer\nStuxnet\nWARRIOR PRIDE\nExplanatory notes\n Whether ANT stands for Advanced Network Technology or Access Network Technology is not known.[1]\n The article from Der Spiegel notes that it is a \"50-page document\" and that \"nearly 50 pages\" are published. The gallery contains 49 pages. Der Spiegel also noted that the document is likely far from complete.[2]\n If the price is listed in bulk, a calculation is made to get the unit price\n For two months\n Including installation costs\n When ordering 25 units, the price per item is US$1000\n Up to 4,000\n Varies from platform to platform\n Data Network Technologies, a division of the Tailored Access Operations\n 100 units for 625,000", "output": "SURLYSPAWN, KEYSWEEPER, and TINYALAMO are monitoring technologies that can be used to monitor target's key strokes.\nSURLYSPAWN is a keystroke monitor technology that can be used on remote computers that are not internet connected.\nKEYSWEEPER is a keylogger in form of a USB wall charger, that wirelessly and passively sniffs, decrypts, logs and reports back (over GSM).\nTINYALAMO is software that targets BLE (Bluetooth Low Energy) and allows keystroke surveillance (keylogger) and injection.", "category": "IT"}, {"instruction": "What is ChatGPT?", "input": "", "output": "ChatGPT is a large language model (LLM) built by a company names OpenAI.  It has the ability to answer in a human like way to any question that you ask it.  It can generate code from text, write stories, answer questions, make hashtags, help summarize notes, etc.  It was launched on November 30, 2022 and it gained millions of users in the first week it was available for free use by the public.  ChatGPT models can also be customized for industry specific use cases using smaller training datasets.", "category": "IT"}, {"instruction": "Classify each of the following as either individual sports or team sports: wrestling, boxing, football, basketball, swimming, handball, weightlifting.", "input": "", "output": "Wrestling: individual sports\nBoxing: individual sports\nFootball: team sports\nBasketball: team sports\nSwimming: individual sports\nHandball: team sports\nWeightlifting: individual sports", "category": "IT"}, {"instruction": "Correct the typos in these sentences", "input": "Aziz career began on teh legal sector. He worked as a lawyer on Lebanon before being appointed as a jduge in 1947.", "output": "Aziz's career began in the legal sector. He worked as a lawyer in Lebanon before being appointed as a judge in 1947.", "category": "IT"}, {"instruction": "How is the order of the NFL draft determined?", "input": "", "output": "The order of the NFL draft is determined by the record of each team during the previous season. The teams with the worst records choose before the teams with better records.", "category": "IT"}, {"instruction": "Identify which animal is domesticated or wild: Water buffalo, Eastern honey bee", "input": "", "output": "Eastern honey bee is wild, Water buffalo is domesticated", "category": "IT"}, {"instruction": "Classify each of the following universities as public or private: Duke, Wake Forest, University of Florida, Florida Atlantic University, University of Alabama, Harvard, Yale", "input": "", "output": "Duke: Private\nWake Forest: Private\nUniversity of Florida: Public\nFlorida Atlantic University: Public\nUniversity of Alabama: Public\nHarvard: Private\nYale: Private", "category": "IT"}, {"instruction": "Which is a species of fish? Panga or Pangea", "input": "", "output": "Panga", "category": "IT"}, {"instruction": "From the text, extract the locations in which outrigger vessels are present in. Separate them with commas.", "input": "These vessels were the first true ocean-going ships, and are an important part of the Austronesian heritage. They were the vessels that enabled the Austronesian expansion from Taiwan into the islands of both the Indian and Pacific Ocean from around 3000 BC. They comprise the bulk of traditional boats in Island Southeast Asia, Island Melanesia, Micronesia, Polynesia, and Madagascar. They have spread to other cultures Austronesians came into contact with, notably in Sri Lanka and southern India as well as in the coast of East Africa. In modern times, outrigger vessels are used in the sport of sailing. Catamaran and trimaran configurations are also widely used for high speed craft.", "output": "Taiwan, Island Southeast Asia, Island Melanesia, Micronesia, Polynesia, Madagascar, Sri Lanka, southern India, East Africa", "category": "IT"}, {"instruction": "What are some of the natural materials used in construction?", "input": "Building material is material used for construction. Many naturally occurring substances, such as clay, rocks, sand, wood, and even twigs and leaves, have been used to construct buildings. Apart from naturally occurring materials, many man-made products are in use, some more and some less synthetic. The manufacturing of building materials is an established industry in many countries and the use of these materials is typically segmented into specific specialty trades, such as carpentry, insulation, plumbing, and roofing work. They provide the make-up of habitats and structures including homes.", "output": "Clay, rocks, sand and wood are some of the common natural materials used in construction.", "category": "IT"}, {"instruction": "Given this text give me short summary about Beavers", "input": "Beavers (genus Castor) are large, semiaquatic rodents of the Northern Hemisphere. There are two existing species: the North American beaver (Castor canadensis) and the Eurasian beaver (C. fiber). Beavers are the second-largest living rodents, after capybaras, weighing up to 30 kilograms (66 lb). Beavers have stout bodies with large heads, long chisel-like incisors, brown or gray fur, hand-like front feet, webbed back feet, and tails that are flat and scaly. The two species differ in skull and tail shape and fur color. Beavers can be found in a number of freshwater habitats, such as rivers, streams, lakes and ponds. They are herbivorous, consuming tree bark, aquatic plants, grasses and sedges.", "output": "Here is a short summary about Beavers:\nThere are two existing species - North American and Eurasian.\nThey are the second-largest living rodents. \nPhysically species of Beaver can vary in terms of fur colour but they all have webbed back feet, hand-like front feet and flat scaly tails. Long chisel-like incisors are a key feature. \nBeavers can be found in freshwater habits. \nThey are herbivores.", "category": "IT"}, {"instruction": "As an immigrant , do you miss your country?", "input": "", "output": "As an immigrant, it feels like you are away from your family. It feels like you work hard to give good life to your family. But with all that sacrifice you want to give best of both worlds to your kid. But when you hear news like shootings in school, as an immigrant we get afraid. I wish if there is a world which is so beautiful that people love each other. They care for each other. There are no rules that always keep you at the edge if you have to uproot your family from one country to another because of visa restrictions and what not. As an immigrant we want to raise our child in the best way possible. I am still looking for such a place on earth. If anyone of you are aware of such a place, please let me know., I hope the world in its entiriety becomes a peaceful, happy clean place to live.", "category": "IT"}, {"instruction": "Who says Pi is Wrong?", "input": "", "output": "In the early 21st century, Bob Palais (a mathematician) and Michael Hartl (a physicist) declared that Pi, the traditional circle constant, was wrong.  Their argument is that Pi, defined as the ratio of a circle's circumference to its diameter, is not the most effective or clear way to describe the geometry of a circle.\n\nPalais and Hartl contend that the ratio of a circle's circumference to its radius is a more useful constant.  They chose to name this new constant Tau.  Arithmetically, Tau = 2*Pi.\n\nThey argued that Tau produces cleaner mathematical equations throughout physics, mathematics, and statistics and, further, that it makes it easier to teach trigonometry and analytic geometry to new learners.", "category": "IT"}, {"instruction": "What are some good ski resorts for beginners?", "input": "", "output": "Most ski resorts have excellent beginner areas (often called bunny hills), which are labeled as \"green runs\". These areas are also where beginner ski lessons are taught. In some cases, though, beginners prefer to go to smaller or less expensive ski resorts as they are not able to take advantage of the more difficult terrain on a larger mountain. In that case, a smaller, cheaper ski resort might be better for a beginner; these tend to be located on smaller mountains and can often be more convenient to nearby cities and towns, although the snow quality and number of ski runs is often significantly less.", "category": "IT"}, {"instruction": "Give me a list of 3 of the best movies quotes I've never used", "input": "", "output": "* \"Two? Make it three, I'm not driving\" - Kevin McCallister (Home Alone 2: Lost in New York)\n* \"Oh yeah, you blend\" - Mona Lisa Vito (My Cousin Vinny)\n* \"We were just driving by to get some ice cream. Thought you might like to join us.\" - Buck Russell (Uncle Buck)", "category": "IT"}, {"instruction": "What were the four groundbreaking papers that Albert Einstein published", "input": "Albert Einstein (/\u02c8a\u026ansta\u026an/ EYEN-styne;[4] German: [\u02c8alb\u025b\u0281t \u02c8\u0294a\u026an\u0283ta\u026an] (listen); 14 March 1879 \u2013 18 April 1955) was a German-born theoretical physicist,[5] widely acknowledged to be one of the greatest and most influential physicists of all time. Einstein is best known for developing the theory of relativity, but he also made important contributions to the development of the theory of quantum mechanics. Relativity and quantum mechanics are the two pillars of modern physics.[1][6] His mass\u2013energy equivalence formula E = mc2, which arises from relativity theory, has been dubbed \"the world's most famous equation\".[7] His work is also known for its influence on the philosophy of science.[8][9] He received the 1921 Nobel Prize in Physics \"for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect\",[10] a pivotal step in the development of quantum theory. His intellectual achievements and originality resulted in \"Einstein\" becoming synonymous with \"genius\".[11] Einsteinium, one of the synthetic elements in the periodic table, was named in his honor.[12]\n\nIn 1905, a year sometimes described as his annus mirabilis ('miracle year'), Einstein published four groundbreaking papers.[13] These outlined the theory of the photoelectric effect, explained Brownian motion, introduced special relativity, and demonstrated mass\u2013energy equivalence. Einstein thought that the laws of classical mechanics could no longer be reconciled with those of the electromagnetic field, which led him to develop his special theory of relativity. He then extended the theory to gravitational fields; he published a paper on general relativity in 1916, introducing his theory of gravitation. In 1917, he applied the general theory of relativity to model the structure of the universe.[14][15] He continued to deal with problems of statistical mechanics and quantum theory, which led to his explanations of particle theory and the motion of molecules. He also investigated the thermal properties of light and the quantum theory of radiation, which laid the foundation of the photon theory of light.", "output": "Albert Einstein, 14 March 1879 \u2013 18 April 1955 was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. Einstein is best known for developing the theory of relativity, but he also made important contributions to the development of the theory of quantum mechanics. Relativity and quantum mechanics are the two pillars of modern physics. His mass\u2013energy equivalence formula E = mc2, which arises from relativity theory, has been dubbed \"the world's most famous equation\". His work is also known for its influence on the philosophy of science. He received the 1921 Nobel Prize in Physics \"for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect\", a pivotal step in the development of quantum theory. His intellectual achievements and originality resulted in \"Einstein\" becoming synonymous with \"genius\". Einsteinium, one of the synthetic elements in the periodic table, was named in his honor.\n\nIn 1905, a year sometimes described as his annus mirabilis ('miracle year'), Einstein published four groundbreaking papers. These outlined the theory of the photoelectric effect, explained Brownian motion, introduced special relativity, and demonstrated mass\u2013energy equivalence. Einstein thought that the laws of classical mechanics could no longer be reconciled with those of the electromagnetic field, which led him to develop his special theory of relativity. He then extended the theory to gravitational fields; he published a paper on general relativity in 1916, introducing his theory of gravitation. In 1917, he applied the general theory of relativity to model the structure of the universe. He continued to deal with problems of statistical mechanics and quantum theory, which led to his explanations of particle theory and the motion of molecules. He also investigated the thermal properties of light and the quantum theory of radiation, which laid the foundation of the photon theory of light.", "category": "IT"}, {"instruction": "Who are the most influential female computer scientists of all time?", "input": "", "output": "Ada Lovelace\nGrace Hopper\nHedy Lamarr\nAnnie Easley\nMary Wilkes\nAdele Goldberg\nRadia Perlman\nKatherine Johnson", "category": "IT"}, {"instruction": "What is Flink?", "input": "", "output": "Apache Flink is an open-source, unified stream-processing and batch-processing framework developed by the Apache Software Foundation. The core of Apache Flink is a distributed streaming data-flow engine written in Java and Scala. Flink executes arbitrary dataflow programs in a data-parallel and pipelined manner.", "category": "IT"}, {"instruction": "Based on the reference text, provide a bulleted list of the contributing factors causing World War II.", "input": "World War II or the Second World War, often abbreviated as WWII or WW2, was a global conflict that lasted from 1939 to 1945. The vast majority of the world's countries, including all of the great powers, fought as part of two opposing military alliances: the Allies and the Axis. Many participants threw their economic, industrial, and scientific capabilities behind this total war, blurring the distinction between civilian and military resources. Aircraft played a major role, enabling the strategic bombing of population centres and the delivery of the only two nuclear weapons ever used in war.\n\nWorld War II was by far the deadliest conflict in history; it resulted in an estimated 70 to 85 million fatalities, mostly among civilians. Tens of millions died due to genocides (including the Holocaust), starvation, massacres, and disease. In the wake of the Axis defeat, Germany and Japan were occupied, and war crimes tribunals were conducted against German and Japanese leaders.\n\nThe causes of World War II are debated, but contributing factors included the Second Italo-Ethiopian War, Spanish Civil War, Second Sino-Japanese War, Soviet\u2013Japanese border conflicts, the rise of fascism in Europe, and European tensions in the aftermath of World War I. World War II is generally considered to have begun on 1 September 1939, when Nazi Germany, under Adolf Hitler, invaded Poland. The United Kingdom and France subsequently declared war on Germany on 3 September. Under the Molotov\u2013Ribbentrop Pact of August 1939, Germany and the Soviet Union had partitioned Poland and marked out their \"spheres of influence\" across Finland, Estonia, Latvia, Lithuania and Romania. From late 1939 to early 1941, in a series of campaigns and treaties, Germany conquered or controlled much of continental Europe, in a military alliance with Italy, Japan and other countries called the Axis. Following the onset of campaigns in North Africa and East Africa, and the fall of France in mid-1940, the war continued primarily between the European Axis powers and the British Empire, with war in the Balkans, the aerial Battle of Britain, the Blitz of the United Kingdom, and the Battle of the Atlantic. On 22 June 1941, Germany led the European Axis powers in an invasion of the Soviet Union, opening the Eastern Front, the largest land theatre of war in history.\n\nJapan, which aimed to dominate Asia and the Pacific, was at war with the Republic of China by 1937. In December 1941, Japan attacked American and British territories with near-simultaneous offensives against Southeast Asia and the Central Pacific, including an attack on the US fleet at Pearl Harbor which resulted in the United States and United Kingdom declaring war against Japan. The European Axis powers declared war on the United States in solidarity. Japan soon captured much of the western Pacific, but its advances were halted in 1942 after losing the critical Battle of Midway; later, Germany and Italy were defeated in North Africa and at Stalingrad in the Soviet Union. Key setbacks in 1943\u2014including a series of German defeats on the Eastern Front, the Allied invasions of Sicily and the Italian mainland, and Allied offensives in the Pacific\u2014cost the Axis powers their initiative and forced them into strategic retreat on all fronts. In 1944, the Western Allies invaded German-occupied France, while the Soviet Union regained its territorial losses and pushed Germany and its allies back. During 1944 and 1945, Japan suffered reversals in mainland Asia, while the Allies crippled the Japanese Navy and captured key western Pacific islands.\n\nThe war in Europe concluded with the liberation of German-occupied territories and the invasion of Germany by the Western Allies and the Soviet Union, culminating in the Fall of Berlin to Soviet troops, Hitler's suicide, and the German unconditional surrender on 8 May 1945. Following the refusal of Japan to surrender on the terms of the Potsdam Declaration (issued 26 July 1945), the United States dropped the first atomic bombs on the Japanese cities of Hiroshima on 6 August and Nagasaki on 9 August. Faced with an imminent invasion of the Japanese archipelago, the possibility of additional atomic bombings, and the Soviet Union's declared entry into the war against Japan on the eve of invading Manchuria, Japan announced on 10 August its intention to surrender, signing a surrender document on 2 September 1945.\n\nWorld War II changed the political alignment and social structure of the globe and set the foundation for the international order of the world's nations during the Cold War and into present day. The United Nations was established to foster international co-operation and prevent future conflicts,[1] with the victorious great powers\u2014China, France, the Soviet Union, the United Kingdom, and the United States\u2014becoming the permanent members of its Security Council. The Soviet Union and the United States emerged as rival superpowers, setting the stage for the nearly half-century-long Cold War. In the wake of European devastation, the influence of its great powers waned, triggering the decolonisation of Africa and Asia. Most countries whose industries had been damaged moved towards economic recovery and expansion. Political and economic integration, especially in Europe, began as an effort to forestall future hostilities, end pre-war enmities, and forge a sense of common identity.", "output": "Although the causes of World War II are debated, contributing factors include:\n- The rise of fascism in Europe\n- European tensions after World War I\n- Second Italo-Ethiopian War\n- Spanish Civil War\n- Second Sino-Japanese War\n- Soviet-Japanese border conflicts", "category": "IT"}, {"instruction": "Is the sun a star or a planet?", "input": "", "output": "The sun is not a planet but a star. It is not only the nearest and sole star in our solar system, it also happens to be its center.", "category": "IT"}, {"instruction": "What is a crypto (cryptocurrency)?", "input": "", "output": "A cryptocurrency, crypto-currency, or crypto is a digital currency designed to work as a medium of exchange through a computer network that is not reliant on any central authority, such as a government or bank, to uphold or maintain it. It is a decentralized system for verifying that the parties to a transaction have the money they claim to have, eliminating the need for traditional intermediaries, such as banks, when funds are being transferred between two entities.", "category": "IT"}, {"instruction": "What is the right size brad nail for crown moulding?", "input": "", "output": "In most cases you can use 18-gauge 2-in brad nails. When choosing the correct size nail you want to consider the thickness of the crown moulding, the thickness of the stud and  the thickness of your drywall.  In most cases your crown moulding will be 1/2 inch with 1/2 inch drywall. At least half of your nail should be in the stud.  If your crown moulding or drywall is thicker than 1/2 inch you should consider a longer nail.", "category": "IT"}, {"instruction": "Please give me a short summary of the misinformed public announcements leading to the fall of the Berlin Wall", "input": "The announcement of the regulations which brought down the Wall took place at an hour-long press conference led by G\u00fcnter Schabowski, the party leader in East Berlin and the top government spokesman, beginning at 18:00 CET on 9 November and broadcast live on East German television and radio. Schabowski was joined by Minister of Foreign Trade Gerhard Beil and Central Committee members Helga Labs and Manfred Banaschak.[1][8]:\u200a352\u200a\n\nSchabowski had not been involved in the discussions about the new regulations and had not been fully updated.[22] Shortly before the press conference, he was handed a note from Krenz announcing the changes, but given no further instructions on how to handle the information. The text stipulated that East German citizens could apply for permission to travel abroad without having to meet the previous requirements for those trips, and also allowed for permanent emigration between all border crossings\u2014including those between East and West Berlin.[18]\n\nAt 18:53, near the end of the press conference, ANSA's Riccardo Ehrman asked if the draft travel law of 6 November was a mistake. Schabowski gave a confusing answer that asserted it was necessary because West Germany had exhausted its capacity to accept fleeing East Germans, then remembered the note he had been given and added that a new regulation had been drafted to allow permanent emigration at any border crossing. This caused a stir in the room; amid several questions at once, Schabowski expressed surprise that the reporters had not yet seen this regulation, and started reading from the note.[1] After this, a reporter, either Ehrman or Bild-Zeitung reporter Peter Brinkmann, both of whom were sitting in the front row at the press conference,[23][24][25] asked when the regulations would take effect.[1] After a few seconds' hesitation, Schabowski replied, \"As far as I know, it takes effect immediately, without delay\" (German: Das tritt nach meiner Kenntnis ... ist das sofort ... unverz\u00fcglich).[26][27][8]:\u200a352\u200a This was an apparent assumption based on the note's opening paragraph; as Beil attempted to interject that it was up to the Council of Ministers to decide when it took effect, Schabowski proceeded to read this clause, which stated it was in effect until a law on the matter was passed by the Volkskammer. Crucially, a journalist then asked if the regulation also applied to the crossings to West Berlin. Schabowski shrugged and read item 3 of the note, which confirmed that it did.[1][24]\n\nAfter this exchange, Daniel Johnson of The Daily Telegraph asked what this law meant for the Berlin Wall. Schabowski sat frozen before giving a rambling statement about the Wall being tied to the larger disarmament question.[28][29] He then ended the press conference promptly at 19:00 as journalists hurried from the room.[24][1]\n\nAfter the press conference, Schabowski sat for an interview with NBC News anchor Tom Brokaw in which he repeated that East Germans would be able to emigrate through the border and the regulations would go into effect immediately.[30][31]", "output": "The announcement of the new laws which brought down the Berlin Wall took place at 6 pm on 9 November 1989,  at a live press conference led by G\u00fcnter Schabowski, the party leader in East Berlin. Schabowski had not been involved in the discussions about the new regulations and consequently was not adequately informed. Shortly before the press conference, he was handed a note outlining the changes to be announced, but given no further instructions on how to handle the content. The note specified that East German citizens could apply for permission to travel abroad, and permanent emigration between all border crossings\u2014including those between East and West Berlin \u2013 would be allowed.\nAt 6:53 pm, near the end of the press conference, when asked if the draft travel law of 6 November was a mistake, Schabowski gave a confusing answer that it was necessary because West Germany had exhausted its capacity to accept fleeing East Germans, then remembered the note he had been handed and went on to add that a new regulation had been drafted to allow permanent emigration at any border crossing. This caused a stir in the room, several questions came flying at once. When asked when the regulations would take effect, Schabowski replied hesitantly, \"As far as I know, it takes effect immediately, without delay\". And after some confused interjections between party members, when asked what this law meant for the Berlin Wall, Schabowski froze for a few moments, before blurting out something to the effect of the Wall being tied to the larger disarmament question. He then ended the press conference promptly at 7 pm, as journalists hurried out of the room.", "category": "IT"}, {"instruction": "What is the oldest type of flight technology?", "input": "", "output": "Hot air balloons", "category": "IT"}, {"instruction": "What are the official forms of written Norwegian?", "input": "As established by law and government policy, the two official forms of written Norwegian are Bokm\u00e5l (literally 'book tongue') and Nynorsk ('new Norwegian'). The official Norwegian Language Council (Spr\u00e5kr\u00e5det) is responsible for regulating the two forms, and recommends the terms Norwegian Bokm\u00e5l and Norwegian Nynorsk in English.[citation needed] Two other written forms without official status also exist. One, called Riksm\u00e5l ('national language'), is today to a large extent the same language as Bokm\u00e5l though somewhat closer to the Danish language. It is regulated by the unofficial Norwegian Academy, which translates the name as 'Standard Norwegian'. The other is H\u00f8gnorsk ('High Norwegian'), a more purist form of Nynorsk, which maintains the language in an original form as given by Ivar Aasen and rejects most of the reforms from the 20th century; this form has limited use.", "output": "The two official forms of written Norwegian are Bokm\u00e5l and Nynorsk.", "category": "IT"}, {"instruction": "What are the words of House Targaryen?", "input": "", "output": "\"Fire and Blood\"", "category": "IT"}, {"instruction": "What is the Pizza history?", "input": "Modern pizza evolved from similar flatbread dishes in Naples, Italy, in the 18th or early 19th century.\nThe word pizza was first documented in AD 997 in Gaeta[3] and successively in different parts of Central and Southern Italy. Pizza was mainly eaten in Italy and by emigrants from there. This changed after World War II when Allied troops stationed in Italy came to enjoy pizza along with other Italian foods.", "output": "The history of pizza begins in antiquity, as various ancient cultures produced basic flatbreads with several toppings.\n\nA precursor of pizza was probably the focaccia, a flatbread known to the Romans as panis focacius, to which toppings were then added.[1] Modern pizza evolved from similar flatbread dishes in Naples, Italy, in the 18th or early 19th century.[2]\n\nThe word pizza was first documented in AD 997 in Gaeta[3] and successively in different parts of Central and Southern Italy. Pizza was mainly eaten in Italy and by emigrants from there. This changed after World War II when Allied troops stationed in Italy came to enjoy pizza along with other Italian foods.\nSome commentators have suggested that the origins of modern pizza can be traced to pizzarelle, which were kosher for Passover cookies eaten by Roman Jews after returning from the synagogue on that holiday, though some also trace its origins to other Italian paschal bread.[10] Other examples of flatbreads that survive to this day from the ancient Mediterranean world are focaccia (which may date back as far as the ancient Etruscans); Manakish in the Levant, coca (which has sweet and savory varieties) from Catalonia, Valencia and the Balearic Islands; the Greek Pita; Lepinja in the Balkans; or Piadina in the Romagna part of Emilia-Romagna in Italy", "category": "IT"}, {"instruction": "Tell me a bulleted list of events that happened in this paragraph grouped by year", "input": "The Purdue University football team traces its origin back to October 29, 1887, when its team fell to Butler College by a score of 48\u20136 in Indianapolis, Indiana.[8] A group of students at Purdue University formed the school's first football team in 1887.[9] Albert Berg was hired as the coach. Despite being deaf, Berg was reportedly \"the only man in the territory with any knowledge of the game.\"[10] Berg was 23 years old when he became Purdue's football \"coacher.\"[11] He was paid $1 for each lesson he gave to the newly organized football team and had only one week to prepare the team for its first game.[11][12][13] The 1887 Purdue team played its only game on October 29, 1887, against the Butler College team at Athletic Park in Indianapolis. Butler soundly defeated Berg's squad by a score of 48\u20136.[14] After the loss to Butler, Purdue did not field a football team again until 1889.[11][12]", "output": "Sure, here is a bulleted list of events that happened in the mentioned paragraph grouped by year:\n\n1887\n* A group of students at Purdue University formed the school's first football team\n* Albert Berg was hired as the coach\n* On October 29, 1887, Purdue University football team fell to Butler College by a score of 48\u20136 in Indianapolis, Indiana\n\n1889\n* First time that Purdue fielded a football team since their loss to Butler College on October 29, 1887", "category": "IT"}, {"instruction": "What is solar wind?", "input": "", "output": "Solar wind is a force that results from discharged light and gas particles from stars.", "category": "IT"}, {"instruction": "From this passage, extract the treatments for ACO in a bulleted list.", "input": "Treatment of ACO is based on expert opinion as there are no universally accepted clinical guidelines. Treatment is usually based on whether clinical features of asthma or COPD predominate.[4] Inhaled corticosteroids are the primary treatment in those with ACOS.[2][1][4] Inhaled corticosteroids (ICS) should be continued in those with asthma who develop decreased airway responsiveness to bronchodilators consistent with ACO.[1] Therapy can be escalated to include a long acting beta-agonist (LABA) and inhaled steroid combination (ICS-LABA) or by adding on a long-acting anti-muscarinic inhaler (LAMA), known as triple therapy, in those with more severe or resistant disease.[4]\n\nMonoclonal antibodies targeting type 2 inflammation (which is predominant in asthma) have been used to treat severe asthma, and may also be used in severe cases of ACO.[4] These monoclonal antibodies include omalizumab (an Anti-IgE antibody), mepolizumab (an anti-IL-5 antibody) and benralizumab (an anti-IL-5 receptor \u03b1 antibody).[4] People with ACOS and eosinophilia have a better response to ICS; with fewer exacerbations and hospitalizations seen in ACOS treated with long term ICS.[1] Systemic corticosteroids (intravenous or oral steroids) may be used during exacerbations of ACOS.[1]\nhttps://en.wikipedia.org/wiki/Asthma-COPD_overlap", "output": "-Inhaled corticosteroids\n-long acting beta-agonist (LABA) and inhaled steroid combination (ICS-LABA)\n-triple therapy (in other words, adding on a long-acting anti-muscarinic inhaler (LAMA)\n-monoclonal antibodies targeting type 2 inflammation\n-systemic corticosteroids (intravenous or oral steroids)", "category": "IT"}, {"instruction": "Classify each job as a \"blue collar\" or \"white collar\" job: auditor, electrician, plumber, data scientist, financial analyst, construction worker", "input": "", "output": "Auditor: White Collar\nElectrician: Blue Collar\nPlumber: Blue Collar\nData Scientist: White Collar\nFinancial Analyst: White Collar\nConstruction Worker: Blue Collar", "category": "IT"}, {"instruction": "What is Occam's razor?", "input": "", "output": "Occam\u2019s razor is a principle of theory construction or evaluation according to which, other things equal, explanations that posit fewer entities, or fewer kinds of entities, are to be preferred to explanations that posit more. It is sometimes misleadingly characterized as a general recommendation of simpler explanations over more complex ones.", "category": "IT"}, {"instruction": "What does BATNA stand for?", "input": "", "output": "Best - Alternative - To - A - Negotiated - Agreement", "category": "IT"}, {"instruction": "Give a list of proper nouns in the passage.", "input": "Kendall Boiler and Tank Company Building is a one-story commercial edifice located on 275 Third Street in Kendall Square, Cambridge, Massachusetts. The brick building was formerly owned by the Kendall Boiler and Tank Company and is part of the Blake and Knowles Steam Pump Company National Register District, on the National Register of Historic Places.", "output": "Kendall Boiler and Tank Company Building\nThird Street\nKendall Square\nCambridge\nMassachusetts\nKendall Boiler and Tank Company\nBlake and Knowles Steam Pump Company National Register District\nNational Register of Historic Places", "category": "IT"}, {"instruction": "Which chapel on Rutger's campus was built 7 years after the New Jersey College for Women?", "input": "Voorhees Chapel is one of two chapels on the campus of Rutgers, The State University of New Jersey in New Brunswick, New Jersey. Built in 1925 with a donation from Elizabeth Rodman Voorhees, wife of Rutgers trustee Ralph Voorhees, the chapel once served the community of Douglass College. Douglass, founded the New Jersey College for Women (founded in 1918), was the women's residential college at Rutgers.", "output": "The Voorhees Chapel was built in 1925, seven years after the New Jersey College for Women was founded by Elizabeth Rodman Voorhees.", "category": "IT"}, {"instruction": "How many innings are played in a professional baseball game?", "input": "", "output": "Nine innings are played in a professional baseball game.", "category": "IT"}, {"instruction": "Give me a list of south Indian breakfast dishes I should try.", "input": "", "output": "Some of the south Indian breakfast dishes you could try are:\n* Dosa\n* Idly\n* Appam\n* Puttu\n* Vada\n* Pongal\n* Upma\n* Idiyappam\n* Uttappam", "category": "IT"}, {"instruction": "Extract from the following passage two key uses of electricity in modern technology.", "input": "Electricity is the set of physical phenomena associated with the presence and motion of matter that has a property of electric charge. Electricity is related to magnetism, both being part of the phenomenon of electromagnetism, as described by Maxwell's equations. Various common phenomena are related to electricity, including lightning, static electricity, electric heating, electric discharges and many others.\nThe presence of either a positive or negative electric charge produces an electric field. The movement of electric charges is an electric current and produces a magnetic field. In most applications, a force acts on a charge with a magnitude given by Coulomb's law. Electric potential is typically measured in volts.\nElectricity is at the heart of many modern technologies, being used for:\na. Electric power where electric current is used to energise equipment;\nb. Electronics which deals with electrical circuits that involve active electrical components such as vacuum tubes, transistors, diodes and integrated circuits, and associated passive interconnection technologies.\nElectrical phenomena have been studied since antiquity, though progress in theoretical understanding remained slow until the 17th and 18th centuries. The theory of electromagnetism was developed in the 19th century, and by the end of that century electricity was being put to industrial and residential use by electrical engineers. The rapid expansion in electrical technology at this time transformed industry and society, becoming a driving force for the Second Industrial Revolution. Electricity's extraordinary versatility means it can be put to an almost limitless set of applications which include transport, heating, lighting, communications, and computation. Electrical power is now the backbone of modern industrial society.", "output": "Electricity is at the heart of many modern technologies, being used for:\na. Electric power where electric current is used to energise equipment;\nb. Electronics which deals with electrical circuits that involve active electrical components such as vacuum tubes, transistors, diodes and integrated circuits, and associated passive interconnection technologies.", "category": "IT"}, {"instruction": "What was the primary mode of transportation across the San Francisco bay prior to the Golden Gate Bridge?", "input": "Before the bridge was built, the only practical short route between San Francisco and what is now Marin County was by boat across a section of San Francisco Bay. A ferry service began as early as 1820, with a regularly scheduled service beginning in the 1840s for the purpose of transporting water to San Francisco.\n\nThe Sausalito Land and Ferry Company service, launched in 1867, eventually became the Golden Gate Ferry Company, a Southern Pacific Railroad subsidiary, the largest ferry operation in the world by the late 1920s. Once for railroad passengers and customers only, Southern Pacific's automobile ferries became very profitable and important to the regional economy. The ferry crossing between the Hyde Street Pier in San Francisco and Sausalito Ferry Terminal in Marin County took approximately 20 minutes and cost $1.00 per vehicle,[when?] a price later reduced to compete with the new bridge. The trip from the San Francisco Ferry Building took 27 minutes.", "output": "The only (practical) way to get across the San Francisco Bay prior to 1937 was by Ferry. The Golden Gate Ferry Company, which became the largest ferry operation by the late 1920's, was established in 1867 as the Sausalito Land & Ferry Company. The ferry would take approximately 20 minutes and cost $1.00 per vehicle.", "category": "IT"}, {"instruction": "How many grandslams are there in Tennis in one year?", "input": "", "output": "There are four grandslams in one year. It starts with Australian open which is played on hard court. Second one is French open which is played on clay court. Third is Wimbledon which is played on grass court and final one is US Open is played on hard court.", "category": "IT"}, {"instruction": "15 days Europe plan", "input": "", "output": "Amsterdam - 2 Days\nBelgium- 3 Days\nParis - 2 Days\nZurich -1 Day\nInterlaken - 2 Days\nVenice - 2 Days\nNaples and Capri - 2 Days\nRome - 2 Days\nAthens - 2 Days\nSantorini - 3 Days", "category": "IT"}, {"instruction": "What is best creator's platform", "input": "", "output": "Youtube. Youtube should be best creator platform", "category": "IT"}, {"instruction": "What is the population in Suwon?", "input": "Suwon[a] (Korean: \uc218\uc6d0; Hanja: \u6c34\u539f; lit. Waterfield, Korean pronunciation: [s\u02b0u.w\u028cn]) is the capital and largest city of Gyeonggi-do, South Korea's most populous province which surrounds Seoul, the national capital. Suwon lies about 30 km (19 mi) south of Seoul. It is traditionally known as \"The City of Filial Piety\". With a population close to 1.3 million, it is larger than Ulsan, although it is not governed as a metropolitan city.", "output": "The population in Suwon is close to 1.3 million.", "category": "IT"}, {"instruction": "Can you give me a short summary of the follow paragraph about the history of electronic music?", "input": "During the 1960s, digital computer music was pioneered, innovation in live electronics took place, and Japanese electronic musical instruments began to influence the music industry. In the early 1970s, Moog synthesizers and drum machines helped popularize synthesized electronic music. The 1970s also saw electronic music begin to have a significant influence on popular music, with the adoption of polyphonic synthesizers, electronic drums, drum machines, and turntables, through the emergence of genres such as disco, krautrock, new wave, synth-pop, hip hop, and EDM. In the early 1980s mass-produced digital synthesizers, such as the Yamaha DX7, became popular, and MIDI (Musical Instrument Digital Interface) was developed. In the same decade, with a greater reliance on synthesizers and the adoption of programmable drum machines, electronic popular music came to the fore. During the 1990s, with the proliferation of increasingly affordable music technology, electronic music production became an established part of popular culture.[5] In Berlin starting in 1989, the Love Parade became the largest street party with over 1 million visitors, inspiring other such popular celebrations of electronic music.[6]", "output": "With the advent of new electronic instruments in the 60s and 70s, namely synthesizers and drum machines, electronic music quickly gained mainstream popularity through genres like disco and hip hop. As the technology progressed through the 80s and 90s, more affordable instruments led electronic music to be even more widely embraced, cementing its status in pop culture and leading to the rise of large electronic music events around the globe.", "category": "IT"}, {"instruction": "Best film in Motion Picture  27th Screen Actors Guild(SAG) Awards was given to which film?", "input": "", "output": "Chicago 7", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Bo, Gaohu", "input": "", "output": "Gaohu is string, Bo is percussion.", "category": "IT"}, {"instruction": "Who is Ali G?", "input": "", "output": "Ali G is a fictional character created and performed by Sacha Baron Cohen. In fiction, he grew up in Staines, and was part of a group called \"Da West Staines Massiv\" He is depicted as a British stereotype of suburban chav acting in a way that they think is typical of black people. Ali G first appeared in a TV series called The 11 O'Clock Show where he would interview famous people who do not realise they are being set up. Due to his popularity, a standalone TV series called Da Ali G Show and a film Ali G Indahouse were also created.", "category": "IT"}, {"instruction": "Why are peanuts not kosher for Passover.", "input": "", "output": "Peanuts are a type of legume. Legumes are banned as they are often mixed with wheat (and Jews typically only eat unleavened bread during Passover).", "category": "IT"}, {"instruction": "Why did the US join WW2?", "input": "", "output": "The Japanese attack on Pearl Harbor on December 7, 1941, ended the debate over American intervention in both the Pacific and European theaters of World War II. The day after the attack, Congress declared war on Imperial Japan with only a single dissenting vote. Germany and Italy\u2014 Japan\u2019s allies\u2014responded by declaring war against the United States. Faced with these realities and incensed by the attack on Pearl Harbor, everyday Americans enthusiastically supported the war effort. Isolation was no longer an option.", "category": "IT"}, {"instruction": "Write a monologue describing a young woman\u2019s journey to self-actualization in America.", "input": "", "output": "A young woman in America may feel a strong connection to her ancestors before her who fought tirelessly for the 19th Amendment to be added to the U.S. Constitution, protecting her right to vote, among many of the rights and liberties she enjoys today. She realizes that it\u2019s because of them she can dream of a world of opportunities for herself beyond being a mother. \n\nA young, attractive woman in America will devote herself to proving she is more than a pretty face. Driven by ambition and overwhelmed with a duty to honor those who came before her, she will work hard to land the career of her dreams. When she does, one shouldn\u2019t be surprised to see she has accidentally fallen asleep at her desk for the third time in one week and well past working hours. During her sleep, she will surely be dreaming of the day she finally makes it through all the hoops she will have had to jump through to finally achieve the American dream. \n\nIt won\u2019t be until her mid-20s or 30s that she will realize somewhere along the way her drive evolved into another entity entirely, one that made her single-minded and cold-hearted. She will realize that the emotional traits and feelings she denied herself for so long because she didn\u2019t associate them with societal norms of success, were the traits that would eventually yield her the most power. \n\nWhen she does realize this is when she will have made a pivotal step toward her self-actualization. Depending on who she is, she will let her hair loose and swap her loafers for stilettos, unlocking a new level of confidence she didn\u2019t realize was once weighed down by societal prejudices and expectations. She will occasionally use her good looks to her advantage because she will have the confidence to decide for herself which trials to endure and the grace to let herself have flaws. \n\nShe will still worship the likes of Elizabeth Cady Stanton, but alongside them, she will find a soft spot for Cardi B and the confidence and pride her songs ignite in women and in their perception of their bodies. She will find a new respect for her friends who chose to work as stay-at-home moms, though that was not her path. \n\nA young, attractive woman in America might take inspiration from her ancestors on the kind of life she should lead, but she should be just as steadfast in her resolve to stay true to herself and the women of her own generation in pursuit of her goals.", "category": "IT"}, {"instruction": "Remove vowels from this text:", "input": "The men's individual competition of the triathlon events at the 2011 Pan American Games was held on October 23 at the API Maritime Terminal in Puerto Vallarta.[1] The defending Pan American Games champion is Andy Potts of the United States.", "output": "Th mn's ndvdl cmpttn f th trthln vnts t th 2011 Pn mrcn Gms ws hld n ctbr 23 t th P Mrtm Trmnl n Prt Vllrt.[1] Th dfndng Pn mrcn Gms chmpn s ndy Ptts f th ntd Stts.", "category": "IT"}, {"instruction": "Wadi Al Banat's name means ?", "input": "Wadi Al Banat's name means \"valley of the girls\" in Arabic, and was thought to have been named that because it was a popular play area for young girls", "output": "valley of the girls", "category": "IT"}, {"instruction": "Extract all of the dates mentioned in this paragraph and list them using bullets in the format {Date} - {Description}", "input": "Grenfell (Canada 2016 Census population 1,099)[1] is a town in Southern Saskatchewan, Canada. It is situated at the junction of Highway 47 and the Trans-Canada Highway 1 80 miles (130 km) east of Regina, the provincial capital. It is 15 miles (24 km) south of the Qu'Appelle Valley where Crooked Lake Provincial Park (at Crooked Lake) and Bird's Point Resort (at Round Lake) are popular beach destinations in summer and are accessed by Highway 47. European settlement from Ontario and the British Isles began in 1882 before the Canadian Pacific Railway reached the site of the town,[7] and \"the town's name honours Pasco du Pre Grenfell, a railway company official.\"[8] The post office was established in 1883.", "output": "\u2022 2016 - As of this date, the population of Grenfell, Saskatchewan was 1,099 people\n\u2022 1882 - European settlement of what became Grenfell, Saskatchewan began in this year.\n\u2022 1883 - This is when the post office of Grenfell was established.", "category": "IT"}, {"instruction": "What are five popular songs by Jack Harlow?", "input": "", "output": "Five popular songs by Jack Harlow are First Class, WHATS POPPIN, Dua Lipa, Tyler Herro, and Churchill Downs.", "category": "IT"}, {"instruction": "Given this paragraph about Outlander, who stars in Outlander?", "input": "Outlander is a historical drama television series based on the Outlander novel series by Diana Gabaldon. Developed by Ronald D. Moore, the show premiered on August 9, 2014, on Starz. It stars Caitr\u00edona Balfe as Claire Randall, a former Second World War military nurse in Scotland who, in 1945, finds herself transported back in time to 1743. There she encounters, falls in love with and marries a dashing Highland warrior named Jamie Fraser (Sam Heughan), a tacksman of Gabaldon's fictionalized version of Clan Fraser of Lovat. Here, Claire becomes embroiled in the Jacobite rising.", "output": "Outlander stars Caitriona Balfe (as Claire Randall).  Her co-start is Sam Heughan (as Jamie Fraser).  It is a Starz TV Series portraying star crossed lovers who meet across time. Claire travels from 1945, back in time to 1743 and encounters: adventure, mystery, and political intrigue of the Jacobite uprising; all the time growing closer and closer to her true love Jamie Fraser. The 2014 (to present) show is based on the Outlander book series written by Diana Gabaldon, originally published in the 1990's.", "category": "IT"}, {"instruction": "What kind of protein is used in Biryani?", "input": "Biryani\u00a0(/b\u025c\u02d0r\u02c8j\u0251\u02d0ni/) is a\u00a0mixed rice dish\u00a0originating among the\u00a0Muslims of the Indian subcontinent. It is made with\u00a0Indian spices,\u00a0rice, and usually some type of\u00a0meat\u00a0(chicken,\u00a0beef,\u00a0goat,\u00a0lamb,\u00a0prawn, and\u00a0fish), or in some cases without any meat, and sometimes, in addition,\u00a0eggs\u00a0and\u00a0potatoes.[1]\nBiryani\u00a0is one of the most popular dishes in\u00a0South Asia, as well as among the diaspora from the region. Similar dishes are also prepared in other parts of the world such as in\u00a0Iraq,\u00a0Myanmar,\u00a0Thailand, and\u00a0Malaysia.[2]\u00a0Biryani\u00a0is the single most-ordered dish on Indian\u00a0online food ordering\u00a0and\u00a0delivery\u00a0services, and has been labelled as the most popular dish overall in\u00a0India.[3][4]", "output": "The choice of protein in Biryani can be chicken,\u00a0beef,\u00a0goat,\u00a0lamb,\u00a0prawn,\u00a0fish and/or egg.", "category": "IT"}, {"instruction": "What kind of dog breed do you get when you mate a poodle with an old english sheep dog?", "input": "", "output": "sheepadoodle", "category": "IT"}, {"instruction": "How did Andy Warhol create the \"piss paintings\"?", "input": "", "output": "Andy Warhol invited staffers who worked with him to help him paint by urinating on canvases that were covered by Warhol in copper paint. The urine reacted with the copper paint chemically to create different colours. The urine also created physical impacts on the copper paint on the canvas.", "category": "IT"}, {"instruction": "Is it better to live in the city or the suburbs?", "input": "", "output": "I enjoyed living in the city when I was younger and spent a lot of time with friends; it was very convenient to be close to everyone. As I got older and had kids, it was important to have more space in my home - I was spending more time inside my home than outside it. When I retire, I may want to go back in to the city.", "category": "IT"}, {"instruction": "Think of different things I could do at the park", "input": "", "output": "Ride a bike, use roller skates, go on the ferris wheel, take a hike, visit the duck pond, Sit on the lawn, have a picnic, take some photos", "category": "IT"}, {"instruction": "Give me the main facts about the book series about Harry Potter.", "input": "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people).\n\nThe series was originally published in English by Bloomsbury in the United Kingdom and Scholastic Press in the United States. All versions around the world are printed by Grafica Veneta in Italy.[1] A series of many genres, including fantasy, drama, coming-of-age fiction, and the British school story (which includes elements of mystery, thriller, adventure, horror, and romance), the world of Harry Potter explores numerous themes and includes many cultural meanings and references.[2] According to Rowling, the main theme is death.[3] Other major themes in the series include prejudice, corruption, and madness.[4]\n\nSince the release of the first novel, Harry Potter and the Philosopher's Stone, on 26 June 1997, the books have found immense popularity, positive reviews, and commercial success worldwide. They have attracted a wide adult audience as well as younger readers and are widely considered cornerstones of modern literature.[5][6] As of February 2023, the books have sold more than 600 million copies worldwide, making them the best-selling book series in history, and have been available in 85 languages.[7] The last four books consecutively set records as the fastest-selling books in history, with the final instalment selling roughly 2.7 million copies in the United Kingdom and 8.3 million copies in the United States within twenty-four hours of its release.\n\nThe original seven books were adapted into an eight-part namesake film series by Warner Bros. Pictures. In 2016, the total value of the Harry Potter franchise was estimated at $25 billion,[8] making Harry Potter one of the highest-grossing media franchises of all time. Harry Potter and the Cursed Child is a play based on a story co-written by Rowling.\n\nThe success of the books and films has allowed the Harry Potter franchise to expand with numerous derivative works, a travelling exhibition that premiered in Chicago in 2009, a studio tour in London that opened in 2012, a digital platform on which J. K. Rowling updates the series with new information and insight, and a pentalogy of spin-off films premiering in November 2016 with Fantastic Beasts and Where to Find Them, among many other developments. Themed attractions, collectively known as The Wizarding World of Harry Potter, have been built at several Universal Destinations & Experiences amusement parks around the world.", "output": "Here are the most important facts about the book series Harry Potter:\n1. Harry Potter is a series of seven books written by British author J. K. Rowling.  \n2. The first book, Harry Potter and the Philosopher's Stone was published on June 26, 1997.\n3. As of February 2023, more than 600 million copies of books were sold worldwide, making it the best-selling book series in history.\n4. Although the book is aimed at a younger audience, the main themes of the series are death, prejudice, corruption, and madness.\n5. Warner Bros. Pictures has taken the book and released a series of eight films.\n6. In 2016, the total value of the Harry Potter franchise was estimated at $25 billion making Harry Potter one of the highest-grossing media franchises of all time.", "category": "IT"}, {"instruction": "Does Las Vegas have a professional hockey team?", "input": "", "output": "The Vegas Golden Knights are a professional ice hockey team based in the Las Vegas metropolitan area. They compete in the National Hockey League as a member of the Pacific Division in the Western Conference.", "category": "IT"}, {"instruction": "Classify each of these as a cereal grain or legume: wheat, lentils, chickpeas, rye, corn, soybeans, peas, millet", "input": "", "output": "Cereal grains:  Wheat, rye, corn, millet\nLegumes: Lentils, chickpeas, soybeans, peas", "category": "IT"}, {"instruction": "Did Gary Collins played in the NHL", "input": "Ranleigh Gary Collins (September 27, 1935 \u2013 June 17, 2022) was a Canadian ice hockey player who played two playoff games in the National Hockey League for the Toronto Maple Leafs during the 1958\u201359 season. The rest of his career, which lasted from 1956 to 1968, was spent in the minor leagues..\n\nCollins died in June 2022 at the age of 86.[1]", "output": "Ranleigh Gary Collins (September 27, 1935 \u2013 June 17, 2022) was a Canadian ice hockey player who played two playoff games in the National Hockey League for the Toronto Maple Leafs during the 1958\u201359 season. The rest of his career, which lasted from 1956 to 1968, was spent in the minor leagues..\n\nCollins died in June 2022 at the age of 86.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Pandero jarocho, Sallaneh", "input": "", "output": "Sallaneh is string, Pandero jarocho is percussion.", "category": "IT"}, {"instruction": "Why do people live in homes?", "input": "", "output": "People live in homes because its a way to protect you from the elements of nature like storms, heavy rain, lightning, heat and humidity.  Its a place that offers comfort with air conditioning, offers a comfortable place to sleep, and offers a comfortable place to cook and eat and have entertaining activities like television, and spending time with your family.", "category": "IT"}, {"instruction": "In what year was the evidence of an exoplanet first confirmed?", "input": "An exoplanet or extrasolar planet is a planet outside the Solar System. The first possible evidence of an exoplanet was noted in 1917 but was not recognized as such.[1] The first confirmation of detection occurred in 1992. A different planet, initially detected in 1988, was confirmed in 2003. As of 1 April 2023, there are 5,346 confirmed exoplanets in 3,943 planetary systems, with 855 systems having more than one planet.[2][3] The James Webb Space Telescope (JWST) is expected to discover more exoplanets, and also much more about exoplanets, including composition, environmental conditions and potential for life.", "output": "The detection of an exoplanet was first confirmed in 1992", "category": "IT"}, {"instruction": "What was the world\u2019s first high level programming language 1957", "input": "", "output": "IBM FORTRAN", "category": "IT"}, {"instruction": "What are the Pros and Cons of social media?", "input": "", "output": "Social media are interactive technologies that facilitate the creation and sharing of information, ideas, interests, and other forms of expression through virtual communities and networks. Social media are great tools for making new friends or connect with old ones, can bring people together that are interested in the same topic and allow reaching a wide audience in a matter of seconds. However, the nature of social media bring in a range of potential issues. Too much time spent on social media can lead to social anxiety, depression and exposure to content that is not appropriate for the age of the user. Another potential issue is about cyberbullying, a form of bullying or harassment using electronic means which has become increasingly common, especially among teenagers, as the digital sphere has expanded.", "category": "IT"}, {"instruction": "Write a brief summary of Nezami Ganjavi's Layli and Majnun.", "input": "", "output": "Layli and Majnun is a Persian poem written by Nezami Ganjavi about star-crossed lovers in the Middle East. Layli is a beautiful woman from one tribe and she falls in love with Qays, the prince of a different Arab tribe. Qays, later called Majnun (insane) by his family, is smitten with Layli, but his behavior seems juvenile to Layli's tribe, so her parents reject Majnun's marriage offer and are intent on marrying her to another man. Majnun goes crazy and wanders the desert writing love songs about Layli. A war erupts between Majnun and Layli's family. Eventually, driven entirely insane, Majnun dies calling out Layli's name, and Layli separately passes away of heartbreak, thinking of Majnun.", "category": "IT"}, {"instruction": "Give me a list of the best bodybuilders of all time.", "input": "", "output": "There were many great bodybuilders, but most associate the best with those who have won Mr. Olympia, the most prestigious bodybuilding competition in the world. Those who have the most wins in chronological order are:\n\nArnold Schwarzenegger (7 total wins)\nLee Haney (8 total wins)\nDorian Yates (6 total wins)\nRonnie Coleman (8 total wins)\nJay Cutler (4 total wins)\nPhil Health (7 total wins)", "category": "IT"}, {"instruction": "What are the Grand Slams of tennis?", "input": "", "output": "In tennis there are four major tennis tournaments each year which are each called a Grand Slam tournament.  The first each year is the Australian open, which is played on hard courts.  The second is the French Open, which is played on clay courts.  The third is Wimbledon, which takes place in London on grass courts and the final tournament is the US Open, which takes place in New York City.", "category": "IT"}, {"instruction": "What is Arsenal FC?", "input": "", "output": "Arsenal Football Club is an English professional football club based in Islington, London. Arsenal plays in the Premier League, the top flight of English football. The club has won 13 league titles (including one unbeaten title), a record 14 FA Cups, two League Cups, 16 FA Community Shields, one European Cup Winners' Cup, and one Inter-Cities Fairs Cup. In terms of trophies won, it is the third-most successful club in English football.\n\nArsenal was the first club from the South of England to join the Football League in 1893, and they reached the First Division in 1904. Relegated only once, in 1913, they continue the longest streak in the top division, and have won the second-most top-flight matches in English football history. In the 1930s, Arsenal won five League Championships and two FA Cups, and another FA Cup and two Championships after the war. In 1970\u201371, they won their first League and FA Cup Double. Between 1989 and 2005, they won five League titles and five FA Cups, including two more Doubles. They completed the 20th century with the highest average league position.[4] Between 1998 and 2017, Arsenal qualified for the UEFA Champions League for nineteen consecutive seasons.\n\nHerbert Chapman, who changed the fortunes of Arsenal forever, won the club its first silverware, and his legacy led the club to dominate the 1930s decade; Chapman, however, died of pneumonia in 1934, aged 55. He helped introduce the WM formation, floodlights, and shirt numbers; he also added the white sleeves and brighter red to the club's jersey. Ars\u00e8ne Wenger is the longest-serving manager and won the most trophies. He won a record seven FA Cups, and his title-winning team set an English record for the longest top-flight unbeaten league run at 49 games between 2003 and 2004, receiving the nickname The Invincibles.\n\nIn 1886, munitions workers at the Royal Arsenal in Woolwich founded the club as Dial Square. In 1913 the club crossed the city to Arsenal Stadium in Highbury, becoming close neighbours of Tottenham Hotspur, and creating the North London derby. In 2006, they moved to the nearby Emirates Stadium. With an annual revenue of \u00a3340.3m in the 2019\u201320 season, Arsenal was estimated to be worth US$2.68 billion by Forbes, making it the world's eighth most valuable club,[8] while it is one of the most followed on social media.The motto of the club has long been Victoria Concordia Crescit, Latin for \"Victory Through Harmony\".", "category": "IT"}, {"instruction": "As a first time visitor to India, where should I visit?", "input": "", "output": "India is a big and diverse country with many experiences to offer.  You could visit historical landmarks like the world famous Taj Mahal in Agra or go to Rajasthan to see the palaces of the maharajas.  If rejuvenation and health is your focus,  you could go to Kerala for its beautiful backwaters where you can disconnect from all electronic devices.  And immerse yourself in yoga and ayurveda for a detox.  If you are looking for adventure, head to the mountains in Kashmir (the Switzerland of India) and the himalayas for skiing and trekking.  Leh in Ladhakh is a very popular destination too, but do make sure you have at least 5-7 days for this trip. If you would rather be on a beach, India offers many destinations on its coast line the most popular being Goa. And finally if you are looking for a city break, the biggest cities of India are New Delhi its capital, Mumbai the financial headquarters and where Bollywood is based, Kolkatta in the east, Bangalore India's silicon valley and Chennai in the south. I hope this gives you enough information to start planning your India trip.", "category": "IT"}, {"instruction": "Classify each of the following as either a plant or an animal: Oak Tree, mouse, grass, daisy, zebra, venus fly trap, hawk, whale.", "input": "", "output": "The following are plants: Oak Tree, grass, daisy, venus fly trap. The following are animals: Mouse, Zebra, hawk, whale.", "category": "IT"}, {"instruction": "What was the The second capital of Chandragupta II", "input": "", "output": "The second capital of Chandragupta II was Pataliputra.", "category": "IT"}, {"instruction": "Classify each of the following as either a chip or a cracker: Goldfish, Wheat Thins, Pringles, Doritos, Cheez-Its, Lays, Ruffles", "input": "", "output": "Goldfish: Cracker\nWheat Thins: Cracker\nPringles: Chip\nDoritos: Chip\nCheez-Its: Cracker\nLays: Chip\nRuffles: Chip", "category": "IT"}, {"instruction": "What is the best football club in the world in 23 between Arsenal, Real Madrid, Napoli, Manchester City, and Bayern Munich?", "input": "", "output": "The answer is : \n1. Manchester City \n2. Bayern Munich \n3. Napoli\n4. Real Madrid\n5. Arsenal", "category": "IT"}, {"instruction": "What are the names of Daenerys Targaryen's three dragons?", "input": "", "output": "Drogon, Viserion, and Rhaegal", "category": "IT"}, {"instruction": "What are some ways to avoid social engineering attacks?", "input": "", "output": "1. Educate yourself and your employees: Train yourself and your employees to recognize social engineering attacks and how to respond to them.\n2. Be suspicious of unsolicited messages: If you receive a message that you were not expecting, be suspicious and verify the sender's identity before responding.\n3. Use strong passwords and two-factor authentication: Use strong passwords and enable two-factor authentication to protect your accounts from unauthorized access.\n4. Keep your software up to date: Keep your software and operating system up to date with the latest security patches to prevent vulnerabilities that attackers can exploit.\n5. Use anti-virus and anti-malware software: Use anti-virus and anti-malware software to protect your devices from malicious software that can be used in social engineering attacks.\n6. Be cautious of public Wi-Fi: Avoid using public Wi-Fi networks for sensitive activities, such as online banking or accessing confidential information.", "category": "IT"}, {"instruction": "What is measure of inflation in the US?", "input": "In economics, inflation is an increase in the general price level of goods and services in an economy.[3][4][5][6] When the general price level rises, each unit of currency buys fewer goods and services; consequently, inflation corresponds to a reduction in the purchasing power of money.[7][8] The opposite of inflation is deflation, a decrease in the general price level of goods and services. The common measure of inflation is the inflation rate, the annualized percentage change in a general price index.[9] As prices faced by households do not all increase at the same rate, the consumer price index (CPI) is often used for this purpose. The employment cost index is also used for wages in the United States.", "output": "Inflation is measured using consumer price index (CPI) in the US.", "category": "IT"}, {"instruction": "Which of the following are cities from South India: Bangalore, Hyderabad, Mumbai, Delhi, Chennai, Srinagar, Jaipur, Kolkata, Pune, Kochi?", "input": "", "output": "Bangalore, Hyderabad, Chennai, Kochi are cities in South India.", "category": "IT"}, {"instruction": "Which country is alphabetically last", "input": "", "output": "Zimbabwe", "category": "IT"}, {"instruction": "Do we live in a simulation? Argue both sides", "input": "", "output": "We do not know if we live in a simulation. Both sides of the argument have their merits and shortcomings. On the one hand, it is possible that we are living in a simulation, as it could explain certain aspects of the universe that are not easily explained otherwise. On the other hand, it could be that we are not living in a simulation, as there is no evidence to support this claim. Ultimately, it is up to us to decide what we believe.", "category": "IT"}, {"instruction": "As a firefighter, you commonly have the following items on you: ax, helmet, pants, jacket, oxygen tank, mask, gloves, boots, hose, shovel, light. Please tell me which of these you wear and which you carry.", "input": "", "output": "wear: helmet, pants, jacket, mask, gloves, boots\ncarry:  ax, oxygen tank, hose, shovel, light", "category": "IT"}, {"instruction": "How does a tack work in windsurfing?", "input": "", "output": "There are two basic turn maneuvers in windsurfing, the tack and the jibe. The tack turns upwind and takes the nose of the board through the wind. To start tacking, steer the board upwind by moving the sail to the back of the board. When the nose of the boards points right into the wind, step around the front of the sail to the other side. Then, move the rig forward to continue turning the board downwind.", "category": "IT"}, {"instruction": "Why do people use a mobile phone?", "input": "", "output": "People use a mobile phones for different reasons. For example, they can use it to connect with friends and family by text messages or phone calls. Also, they can install other social apps such as Facebook, Instagram and Whatsapp that help them connect. Some might also use it for work, to communicate with colleagues and access work-related apps and email from anywhere. Also, mobile phones provide access to unlimited information through the Internet so that you can stay connected anytime from anywhere.", "category": "IT"}, {"instruction": "What does #956 mean?", "input": "", "output": "#956 refers to the Rio Grande Valley, an area in South Texas.The number 956 is the area code. It includes the city of McAllen, Pharr, Brownsville, and the popular beach destination: South Padre Island, just to name a few.  People also say \"Puro 956\" to express pride for the area. The area shares the border with Mexico which explains why the majority of the population has Mexican heritage and the #1 language is Spanish. The 956 area is known for its rich culture and delicious Mexican food.", "category": "IT"}, {"instruction": "What is the difference between a banana and a plantain?", "input": "", "output": "While bananas and plantains share a lot of similar physical attributes, their uses are quite different.  For example, bananas are typically used in sweeter dishes as they are considered to be a fruit and contain higher sugar amounts than plantains.  Plantains are more starchy which is why they are not typically eaten raw and are often used in more savory dishes.  Plantains are also typically larger in size than bananas.  Bananas contain high levels of potassium which are excellent for our health and can help reduce the risk of heart disease and high blood pressure.  Plantains also have health benefits but the benefits greatly depend on how they are prepared.", "category": "IT"}, {"instruction": "What are the pros and cons of working from home rather than going into an office downtown?", "input": "", "output": "There are both advantages and disadvantages from working from home, and they apply differently to different people depending on the person's personality, family situation, location, and job description. Some key advantages are the ability to develop closer personal relationships with team members, have the opportunity for more spontaneous casual conversations, and experience more productive meetings because of the ability to read people's body language and to see presentation materials more clearly. Many people will experience better mental health by going into the office and establishing a sense of greater connection with team members. In addition, certain employees will take advantage of remote work to use work time to engage in personal activities rather than real work, to the detriment of the employer. Some disadvantages of going into the office include the time inefficiency from commuting, the cost of commuting, the time inefficiency that occurs from experiencing all the social chatting that occurs in the office, and the hassle of having to schedule conference rooms. Commuting also contributes to global warming through the greater use of fossil fuels. On balance, whether remote work makes sense is a complex question, and the answer will be unique for every employee and employer depending on the circumstances.", "category": "IT"}, {"instruction": "Why are lemons sometimes considered Alkaline?", "input": "", "output": "Lemons are acidic, having a pH of around two.  However, alkaline byproducts are created when lemon juice is digested.  These alkaline byproducts make the blood and urine more alkaline.", "category": "IT"}, {"instruction": "Can you summarize the main points about the first edition of the Dota 2 tournament, The International?", "input": "Valve announced the first edition of The International on August 1, 2011. 16 teams were invited to compete in the tournament, which would also serve as the first public viewing of Dota 2.[1] The tournament was funded by Valve, including the US$1 million grand prize, with Nvidia supplying the hardware.[2][3] It took place at Gamescom in Cologne from August 17\u201321 the same year.[4] The tournament started with a group stage in which the winners of each of the four groups were entered into a winner's bracket, and the other teams entered the loser's bracket. The rest of the tournament was then played as a double-elimination tournament.[5] The final of this inaugural tournament was between Ukrainian-based Natus Vincere and Chinese-based EHOME, with Natus Vincere winning the series 3\u20131.[6] EHOME won US$250,000, with the rest of the 14 teams splitting the remaining $350,000.[7]", "output": "The first edition of The International was held at Gamescom in Cologne, Germany August 17-21 2011. Sixteen teams were directly invited by Valve to complete for $1 Million grand prize. The tournament was played in a round robin group stage, followed by a double elimination playoff. The Ukrainian based team, Natus Vincere defeated the Chinese based EHOME 3-1 in the grand finals.", "category": "IT"}, {"instruction": "What kind of Toys should be prepare for a new puppy", "input": "", "output": "\u2022 Puppy\u2019s teeth can be strong, and they can easily destroy soft\ntoys. They can also accidentally swallow part of the toys. Do\nmonitor the puppy when they are playing with toys to\nprevent accidental choking.\n\n\u2022 As the puppy is teething, they will need bite toys to chew\non.\n\nSo prepare the toy for the puppy base on the above consideration.", "category": "IT"}, {"instruction": "What are some common types of winter squash for cooking?", "input": "", "output": "Winter squash is defined as the fruit of a squash plant that grows with a hard outer shell. Common types of winter squash used in cooking are pumpkin, butternut squash, acorn squash, kabocha squash, spaghetti squash, and delicata squash.", "category": "IT"}, {"instruction": "What is Brazilian Jiu Jitsu?", "input": "", "output": "Brazilian Jiu Jitsu, or BJJ, is a grappling martial art that takes focuses on dominant position and submissions on the ground. Jiu Jitsu was introduced to Brazil in the early 1900s by a Japanese Judoka. It was then further developed by the Gracie family in Brazil. It is now one of the most popular self-defense martial arts in the world.", "category": "IT"}, {"instruction": "Which version of the church existed in 1809?", "input": "The area was settled by Canary Islanders and Acadians from 1779 on and the parish was formed in 1793 with its first church being \"little more than a shack\". It was replaced by a more permanent one in 1819, which in turn was replaced by this one in 1856, quite close to the site of the 1793 church. The parish's governing \"Fabrique\", or council of wardens, reportedly appointed a committee to measure the Catholic church in Thibodaux, Louisiana, and", "output": "The original version of the church still existed in 1809, it was 10 years later that a more permanent one replaced it.", "category": "IT"}, {"instruction": "How many island does Hawaii have?", "input": "", "output": "Hawaii has 8 islands in total,", "category": "IT"}, {"instruction": "What Constitutes a Foul in Football?", "input": "", "output": "As a rule, a football foul would be an unfair act committed by a player which interferes with active play. A match referee would decide on the foul while officiating the game's laws.\n\nThere are different outcomes that punish soccer fouls. The referee can award either a direct or an indirect free-kick (depending on the offence). In some cases, a foul in football results in a penalty spot kick awarded to the opposing team.", "category": "IT"}, {"instruction": "What are Indic languages?", "input": "Languages spoken in the Republic of India belong to several language families, the major ones being the Indo-Aryan languages spoken by 78.05% of Indians and the Dravidian languages spoken by 19.64% of Indians, both families together are sometimes known as Indic languages.Languages spoken by the remaining 2.31% of the population belong to the Austroasiatic, Sino\u2013Tibetan, Tai\u2013Kadai, and a few other minor language families and isolates.\u200a As per the People's Linguistic Survey of India, India has the second highest number of languages (780), after Papua New Guinea (840). Ethnologue lists a lower number of 456.", "output": "Indic languages are the languages spoken in the Republic of India composed of Indo-Aryan languages and Dravidian languages.", "category": "IT"}, {"instruction": "Determine which companies are primarily cloud-software companies and which are semiconductor companies: Intel, Google, Workday, Zscaler, AMD, NVIDIA, and Texas Instruments.", "input": "", "output": "Intel, AMD, NVIDIA, and Texas Instruments are primarily semiconductor companies. Workday and Zscaler are fully cloud-software companies. Google is primarily a software company, however, they also develop custom-developed application-specific integrated circuits which are semiconductors.", "category": "IT"}, {"instruction": "Why do babies cry?", "input": "", "output": "Babies cry in order to tell us things about their needs, as it is their only form of communication. The most common reasons a baby may cry are that they are hungry, have a dirty diaper, or are tired. Babies may also cry if they are hot, cold, or uncomfortable (gas pains, itchy clothes, rash). Babies do not cry to manipulate their parents; they simply are not capable of such advanced thinking and behavior.", "category": "IT"}, {"instruction": "What is the state capitol of Nevada?", "input": "", "output": "The state capitol of Nevada is Carson City which was founded in 1858 and is named after Kit Carson.", "category": "IT"}, {"instruction": "What are the rivers in Rajkot area?", "input": "Rajkot is located at 22.3\u00b0N 70.78\u00b0E. It has an average elevation of 128 metres (420 ft). The city is located on the bank of Aji River and Nyari River which remains dry except the monsoon months of July to September. The city is spread in the area of 170.00 km2.", "output": "There are two rivers - Aaji and Nyari - in the vicinity of Rajkot.", "category": "IT"}, {"instruction": "What are the words of House Fowler?", "input": "", "output": "\"Let Me Soar\"", "category": "IT"}, {"instruction": "Write a letter to my mom to convince her that I should be able to get a cat.", "input": "", "output": "Dear Mom, I would like to get a cat because it has been shown that having a companion animal leads to lower stress levels and higher empathy in humans who have cats. Cats do not require as much active daily management as dogs do (so when we need to be out of the house for part of the day, the cat will be able to be alone for a number of hours). I've prepared a schedule on how often I will feed the cat and empty the little box so that you will not need to take on that responsibility. Also, I've already asked my friend Hannah if she would come and take care of the cat when we are away on vacation. I have saved up enough money to buy the items necessary for owning a cat and I plan on using my allowance to buy food for the cat. I think you'll enjoy having a cat too! They are fun to play with, love affection/petting and they have such fun personalities.", "category": "IT"}, {"instruction": "Given the following paragraph on cell structure, what is an example of membrane proteins?", "input": "Every cell is enclosed within a cell membrane that separates its cytoplasm from the extracellular space.[41] A cell membrane consists of a lipid bilayer, including cholesterols that sit between phospholipids to maintain their fluidity at various temperatures. Cell membranes are semipermeable, allowing small molecules such as oxygen, carbon dioxide, and water to pass through while restricting the movement of larger molecules and charged particles such as ions.[42] Cell membranes also contains membrane proteins, including integral membrane proteins that go across the membrane serving as membrane transporters, and peripheral proteins that loosely attach to the outer side of the cell membrane, acting as enzymes shaping the cell.[43] Cell membranes are involved in various cellular processes such as cell adhesion, storing electrical energy, and cell signalling and serve as the attachment surface for several extracellular structures such as a cell wall, glycocalyx, and cytoskeleton.", "output": "One example of membrane proteins are integral membrane proteins which go across the membrane and serve as membrane transporters.", "category": "IT"}, {"instruction": "Which component of a PV solar system implements MPPT?", "input": "Maximum power point tracking (MPPT)[1][2] or sometimes just power point tracking (PPT),[3][4] is a technique used with variable power sources to maximize energy extraction as conditions vary. The technique is most commonly used with photovoltaic (PV) solar systems, but can also be used with wind turbines, optical power transmission and thermophotovoltaics.\n\nPV solar systems have varying relationships to inverter systems, external grids, battery banks, and other electrical loads.[5] The central problem addressed by MPPT is that the efficiency of power transfer from the solar cell depends on the amount of available sunlight, shading, solar panel temperature and the load's electrical characteristics. As these conditions vary, the load characteristic (impedance) that gives the highest power transfer changes. The system is optimized when the load characteristic changes to keep power transfer at highest efficiency. This optimal load characteristic is called the maximum power point (MPP). MPPT is the process of adjusting the load characteristic as the conditions change. Circuits can be designed to present optimal loads to the photovoltaic cells and then convert the voltage, current, or frequency to suit other devices or systems.\n\nSolar cells' non-linear relationship between temperature and total resistance can be analyzed based on the Current-voltage (I-V) curve and the power-voltage (P-V) curves.[6][7] MPPT samples cell output and applies the proper resistance (load) to obtain maximum power.[8] MPPT devices are typically integrated into an electric power converter system that provides voltage or current conversion, filtering, and regulation for driving various loads, including power grids, batteries, or motors. Solar inverters convert DC power to AC power and may incorporate MPPT.\n\nThe power at the MPP (Pmpp) is the product of the MPP voltage (Vmpp) and MPP current (Impp).\n\nIn general, the P-V curve of a partially shaded solar array can have multiple peaks, and some algorithms can get stuck in a local maximum rather than the global maximum of the curve.[9]", "output": "An MPPT device is usually integrated into the electric power converter system. The electric power converter system is responsible for voltage and current conversation like the DC to AC solar inverter.", "category": "IT"}, {"instruction": "What options does the 911 Carrera T include", "input": "In October 2017, Porsche announced the 911 Carrera T (Touring), offering the base Carrera drivetrain but with shorter rear axle ratio, mechanical differential lock, PASM Sport lowered suspension, Sport Chrono package and sports exhaust as standard. Additional features include a reduced sound insulation, light-weight glass side/rear windows, Sport-Tex seats, a shortened shift lever, deletion of the rear seats and communication system (with their re-addition available as a no-cost option), Carrera S wheels, as well as optional rear-wheel steering, PDK transmission and bucket seats.[28]", "output": "The 911 Carrera T offers:\n- Base drivetrain with shorter rear axle ratio\n- mechanical differential lock\n- PASM Sport lowered suspension\n- Sport Chrono package\n- Sports exhaust\n- Reduced sound insulation\n- light-weight glass for side and rear windows\n- Sport-Tex seats\n- Shortened shift lever\n- deletion of rear seats and communication system\n- Carrera S wheels", "category": "IT"}, {"instruction": "How many people live in California?", "input": "", "output": "California is a state in the Western United States, located along the Pacific Coast. With nearly 39.2 million residents[6] across a total area of approximately 163,696 square miles (423,970 km2),[11] it is the most populous U.S. state and the third-largest by area. It is also the most populated subnational entity in North America and the 34th most populous in the world. The Greater Los Angeles and San Francisco Bay areas are the nation's second and fifth most populous urban regions respectively, with the former having more than 18.7 million residents and the latter having over 9.6 million.[12] Sacramento is the state's capital, while Los Angeles is the most populous city in the state and the second most populous city in the country. San Francisco is the second most densely populated major city in the country. Los Angeles County is the country's most populous, while San Bernardino County is the largest county by area in the country. California borders Oregon to the north, Nevada and Arizona to the east, the Mexican state of Baja California to the south; and it has a coastline along the Pacific Ocean to the west.\n\nCalifornia's economy is the largest of any state within the United States, with a $3.37 trillion gross state product (GSP) as of 2022.[13] It is the largest sub-national economy in the world. If California were a sovereign nation, it would rank as the world's fifth-largest economy as of 2022,[14][15] behind India and ahead of the United Kingdom, as well as the 37th most populous.[16] The Greater Los Angeles area and the San Francisco area are the nation's second- and fourth-largest urban economies ($1.0 trillion and $0.6 trillion respectively as of 2020), following the New York metropolitan area's $1.8 trillion.[17] The San Francisco Bay Area Combined Statistical Area had the nation's highest gross domestic product per capita ($106,757) among large primary statistical areas in 2018,[18] and is home to five of the world's ten largest companies by market capitalization[19] and four of the world's ten richest people.[20] Slightly over 84 percent of the state's residents hold a high school degree, the lowest high school education rate of all 50 states.", "category": "IT"}, {"instruction": "What is GitHub Actions?", "input": "", "output": "GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production.", "category": "IT"}, {"instruction": "How can one get better at tennis?", "input": "", "output": "People can improve their tennis skills by playing and practicing alot just like any other sports. Taking lessons or getting coaches is often considered the most efficient way to get better. For tennis, usually it is hard to practice without a hitting partner, but people still can practice by themselves by hitting the balls against the walls. Also tennis serving is one skill that can be practiced alone without a partner", "category": "IT"}, {"instruction": "How many maharatna companies are there in India?", "input": "", "output": "11(eleven), the 11th is  Power Finance Corporation", "category": "IT"}, {"instruction": "How can I avoid sunburn?", "input": "", "output": "Monitor the UV Index of your local area, and follow the advise to apply sunscreen when the index is high, and reapply according to the label of your sunscreen.  SPF 30 should be sufficient for most areas.", "category": "IT"}, {"instruction": "What are the primary colors?", "input": "", "output": "Primary colors are red, yellow, and blue. Together, these are used in combination to create the rest of the color pallet. Red + yellow = orange. Yellow + blue = green. Red + blue = purple.", "category": "IT"}, {"instruction": "How do you make brisket on a pellet smoker?", "input": "", "output": "First you need to prepare your pellet smoker by adding pellets and setting the temperature to 200 degrees Fahrenheit.  It is common to use oak, mesquite, hickory and pecan pellets.  Next you will need to trim and season your brisket.  It is common to use mustard as a binder for your seasoning but is not required.  Common seasonings for brisket are salt, pepper and garlic.  It is recommend to season the brisket for at least 30 minutes before cooking but for best results allow the seasoned brisket to rest overnight in your refrigerator.  Once the brisket is properly seasoned, place the brisket on your pellet grill.  It is common in Texas to place the brisket fat side up.  In other areas of the country, it is more common to place the brisket fat side down.  Allow your brisket to smoke until it reaches an internal temperature of 175 degrees.  Depending on the size of the brisket this could take in excess of 12 hours.  Once the brisket reaches an internal temperature of 175 degrees, wrap the brisket with butcher paper to build better bark.  Alternatively you can wrap the brisket in foil which will finish the cooking faster but build less bark.  Place the wrapped brisket back in your pellet smoker and increase the temperature to 275 degrees Fahrenheit.  Once the brisket reaches a temperature of 205 degrees Fahrenheit remove the brisket from our pellet smoker and allow it to rest in a cooler or oven until the brisket reaches an internal temperature of 140 degrees.  Depending on the size of the brisket this could take between 2 and 3 hours.  Slice your brisket and serve.", "category": "IT"}, {"instruction": "Where is the Ahlatcik village", "input": "Ahlat\u00e7\u0131k is a village in the Kastamonu District, Kastamonu Province, Turkey.[1] Its population is 132 (2021).[2]", "output": "Ahlat\u00e7\u0131k is a village in the Kastamonu District, Kastamonu Province, Turkey. Its population is 132 (2021)", "category": "IT"}, {"instruction": "Hepatitis B and C can cause what type of cancer?", "input": "Higher rates of liver cancer occur where hepatitis B and C are common, including Asia and sub-Saharan Africa.[3] Males are more often affected with hepatocellular carcinoma (HCC) than females.[3] Diagnosis is most frequent among those 55 to 65 years old.", "output": "Liver cancer (also known as hepatic cancer, primary hepatic cancer, or primary hepatic malignancy) is cancer that starts in the liver.[1] Liver cancer can be primary (starts in liver) or secondary (meaning cancer which has spread from elsewhere to the liver, known as liver metastasis). Liver metastasis is more common than that which starts in the liver.[3] Liver cancer is increasing globally.[8][9]\n\nPrimary liver cancer is globally the sixth-most frequent cancer and the fourth-leading cause of death from cancer.[7][10] In 2018, it occurred in 841,000 people and resulted in 782,000 deaths globally.[7] Higher rates of liver cancer occur where hepatitis B and C are common, including Asia and sub-Saharan Africa.[3] Males are more often affected with hepatocellular carcinoma (HCC) than females.[3] Diagnosis is most frequent among those 55 to 65 years old.[2]\n\nThe leading cause of liver cancer is cirrhosis due to hepatitis B, hepatitis C or alcohol.[4] Other causes include aflatoxin, non-alcoholic fatty liver disease and liver flukes.[3] The most common types are HCC, which makes up 80% of cases and intrahepatic cholangiocarcinoma.[3] The diagnosis may be supported by blood tests and medical imaging, with confirmation by tissue biopsy.[1]\n\nGiven that there are many different causes of liver cancer, there are many approaches to liver cancer prevention. These efforts include immunization against hepatitis B,[3] hepatitis B treatment, hepatitis C treatment, decreasing alcohol use,[8] decreasing exposure to aflatoxin in agriculture, and management of obesity and diabetes.[9] Screening is recommended in those with chronic liver disease.[3] For example, it is recommended that people with chronic liver disease who are at risk for hepatocellular carcinoma be screened every 6 months using ultrasound imaging.[8]\n\nBecause liver cancer is an umbrella term for many types of cancer, the signs and symptoms depend on what type of cancer is present. Symptoms can be vague and broad. Cholangiocarcinoma is associated with sweating, jaundice, abdominal pain, weight loss and liver enlargement.[11] Hepatocellular carcinoma is associated with abdominal mass, abdominal pain, emesis, anemia, back pain, jaundice, itching, weight loss and fever.[12]\n\nTreatment options may include surgery, targeted therapy and radiation therapy.[1] In certain cases, ablation therapy, embolization therapy or liver transplantation may be used.[1]", "category": "IT"}, {"instruction": "Classify each of the following as a streaming service or cable channel: Netflix, Hulu, Disney+, QVC, ABC, Comedy Central", "input": "", "output": "Netflix: Streaming Service\nHulu: Streaming Service\nDisney+: Streaming Service\nQVC: Cable Channel\nABC: Cable Channel\nComedy Central: Cable Channel", "category": "IT"}, {"instruction": "Name five countries in the Northern Hemisphere", "input": "", "output": "Canada, France, India, Finland and Turkey are countries located in the Northern Hemisphere.", "category": "IT"}, {"instruction": "Who is the all time leading goal scorer in the NHL?", "input": "", "output": "The all time leading goal scorer in the NHL is Wayne Gretzky with 894 goals., Gretzky played in the NHL for 21 seasons, spending most of his time with the Edmonton Oilers and the Los Angeles Kings, but he also played for the New York Rangers and briefly, for the St Louis Blues.", "category": "IT"}, {"instruction": "Given a reference text about Connie Passalacqua Hayman, tell me when and where taught journalism.", "input": "Connie Passalacqua Hayman is an American journalist and educator. Passalacqua Hayman has written on a number of topics, but is noted for her reporting and critical analysis of daytime soap operas.\n\nCareer\nPassalacqua Hayman started her soap journalism career in 1980 as an assistant to newspaper columnist Jon-Michael Reed, \"the first soap journalist to review soaps as theater and edit soap magazines for intelligent readers.\"[1] She has since written about the daytime industry for various publications and news organizations, including Newsday, United Features Syndicate, The New York Times, Variety, the New York Daily News, TV Guide and USA Today.[1] She was the editor of Afternoon TV magazine from 1980 to 1983, an editor for Soap Opera World and a contributor for Soap Opera Digest, Soap Opera People and others.[1]\n\nBetween 1995 and 2001, Passalacqua Hayman was an adjunct professor of journalism at New York University, and in 2001 she left writing full-time to earn a master's degree in education at NYU.[1] She taught journalism at Marymount Manhattan College as an adjunct professor in the Communications Department from 2007 to 2014.[2]", "output": "Connie Passalacqua Hayman taught journalism at New York University from 1995 to 2001 and at Marymount Manhattan College from 2007 to 2014.", "category": "IT"}, {"instruction": "Given a reference text about Pablo Picasso, tell me when and where he was born, why he was famous, and what his most famous accomplishment was as a professional", "input": "Pablo Ruiz Picasso[a][b] (25 October 1881 \u2013 8 April 1973) was a Spanish painter, sculptor, printmaker, ceramicist and theatre designer who spent most of his adult life in France. One of the most influential artists of the 20th century, he is known for co-founding the Cubist movement, the invention of constructed sculpture,[8][9] the co-invention of collage, and for the wide variety of styles that he helped develop and explore. Among his most famous works are the proto-Cubist Les Demoiselles d'Avignon (1907), and the anti-war painting Guernica (1937), a dramatic portrayal of the bombing of Guernica by German and Italian air forces during the Spanish Civil War.\n\nBorn: Pablo Diego Jos\u00e9 Francisco de Paula Juan Nepomuceno Mar\u00eda de los Remedios Cipriano de la Sant\u00edsima Trinidad Ruiz y Picasso\n25 October 1881\nM\u00e1laga, Kingdom of Spain", "output": "Pablo Ruiz Picasso was born on 25 October 1881 in M\u00e1laga, Spain. He was a Spanish painter, sculptor, printmaker, ceramicist and theatre designer who spent most of his adult life in France. He is one of the most famous and influential artists of the 20th century because he co-founded the Cubist movement, the invention of constructed sculpture, co-invented collage, and he delveoped and explored a wide variety of other styles. Among his most famous works are the proto-Cubist Les Demoiselles d'Avignon (1907), and the anti-war painting Guernica (1937), a dramatic portrayal of the bombing of Guernica by German and Italian air forces during the Spanish Civil War.", "category": "IT"}, {"instruction": "From the following passage extract information on how dates were used in the Fertile Crescent.", "input": "Traditional dried fruit such as raisins, figs, dates, apricots and apples have been a staple of Mediterranean diets for millennia. This is due partly to their early cultivation in the Middle Eastern region known as the Fertile Crescent, made up by parts of modern Iran, Iraq, southwest Turkey, Syria, Lebanon, Palestine, Israel, and northern Egypt. Drying or dehydration also happened to be the earliest form of food preservation: grapes, dates, and figs that fell from the tree or vine would dry in the hot sun. Early hunter-gatherers observed that these fallen fruit took on an edible form, and valued them for their stability as well as their concentrated sweetness. \nThe earliest recorded mention of dried fruits can be found in Mesopotamian tablets dating to about 1500 BC, which contain what are probably the oldest known written recipes. These clay slabs, written in Akkadian, the daily language of Babylonia, were inscribed in cuneiform and tell of diets based on grains (barley, millet, wheat), vegetables and fruits such as dates, figs, apples, pomegranates, and grapes. These early civilizations used dates, date juice evaporated into syrup and raisins as sweeteners. They included dried fruits in their breads for which they had more than 300 recipes, from simple barley bread for the workers to very elaborate, spiced cakes with honey for the palaces and temples.\nThe date palm was one of the first cultivated trees. It was domesticated in Mesopotamia more than 5,000 years ago. It grew abundantly in the Fertile Crescent and it was so productive (an average date palm produces 50 kg (100 lbs) of fruit a year for 60 years or more) that dates were the cheapest of staple foods. Because they were so valuable, they were well recorded in Assyrian and Babylonian monuments and temples. The villagers in Mesopotamia dried them and ate them as sweets. Whether fresh, soft-dried or hard-dried, they helped to give character to meat dishes and grain pies. They were valued by travelers for their energy and were recommended as stimulants against fatigue.\nFigs were also prized in early Mesopotamia, Palestine, Israel, and Egypt where their daily use was probably greater than or equal to that of dates. As well as appearing in wall paintings, many specimens have been found in Egyptian tombs as funerary offerings. In Greece and Crete, figs grew very readily and they were the staple of poor and rich alike, particularly in their dried form.\nGrape cultivation first began in Armenia and the eastern regions of the Mediterranean in the 4th century BC. Raisins were produced by drying grapes in the hot desert sun. Very quickly, viticulture and raisin production spread across northern Africa including Morocco and Tunisia. The Phoenicians and the Egyptians popularized the production of raisins, probably due to the perfect arid environment for sun drying. They put them in jars for storage and allotted them to the different temples by the thousands. They also added them to breads and various pastries, some made with honey, some with milk and eggs.\nFrom the Middle East, these fruits spread through Greece to Italy where they became a major part of the diet. Ancient Romans consumed raisins in spectacular quantities and at all levels of society, including them as a key part of their common meals, along with olives and fresh fruits. Raisined breads were common for breakfast and were consumed with their grains, beans, and cultured milks. Raisins were so valued that they transcended the food realm and became rewards for successful athletes, as well as premium barter currency.\nHaving dried fruits was essential in ancient Rome as these instructions for housekeepers around 100 BC tell: \"She must keep a supply of cooked food on hand for you and the servants. She must keep many hens and have plenty of eggs. She must have a large store of dried pears, sorbs, figs, raisins, sorbs in must, preserved pears and grapes and quinces. She must also keep preserved grapes in grape-pulp and in pots buried in the ground, as well as fresh Praenestine nuts kept in the same way, and Scantian quinces in jars, and other fruits that are usually preserved, as well as wild fruits. All these she must store away diligently every year.\"\nFigs were also extremely popular in Rome. Dried figs were added to bread and formed a major part of the winter food of country people. They were rubbed with spices such as cumin, anise and fennel seeds, or toasted sesame, wrapped in fig leaves and stored in jars. Today, major producing regions include Israel, Jerusalem, Gaza and many other Arabic countries. Dried figs are rich in vitamins, phosphorus and various other important minerals.\nPlums, apricots and peaches had their origins in Asia. They were domesticated in China in the 3rd millennium BC and spread to the Fertile Crescent where they were also very popular, fresh and dried alike. They arrived in Greece and Italy much later and were very expensive but valued in the preparation of gourmet dishes with port or stewed with honey and spices.", "output": "The date palm was one of the first cultivated trees. It was domesticated in Mesopotamia more than 5,000 years ago. It grew abundantly in the Fertile Crescent and it was so productive (an average date palm produces 50 kg (100 lbs) of fruit a year for 60 years or more) that dates were the cheapest of staple foods. Because they were so valuable, they were well recorded in Assyrian and Babylonian monuments and temples. The villagers in Mesopotamia dried them and ate them as sweets. Whether fresh, soft-dried or hard-dried, they helped to give character to meat dishes and grain pies. They were valued by travelers for their energy and were recommended as stimulants against fatigue.", "category": "IT"}, {"instruction": "Which is the largest American Football stadium", "input": "NRG Stadium, formerly Reliant Stadium, is a multi-purpose stadium in Houston, Texas, United States. Construction was completed in 2002, at a cost of $352 million and has a seating capacity of 72,220.[8][9] It was the first NFL facility to have a retractable roof.[10]\n\nThe stadium is the home of the National Football League's Houston Texans, the Houston Livestock Show and Rodeo, the Texas Bowl, many of the United States men's national soccer team's matches, Mexico national football team friendlies where El Tri serves as the host, and other events. The stadium served as the host facility for Super Bowls XXXVIII (2004) and LI (2017), and WrestleMania 25 (2009).[11] The stadium will host multiple matches during the 2026 FIFA World Cup.[12]\n\nNRG Stadium is part of a collection of venues (including the Astrodome), which are collectively called NRG Park. The entire complex is named for NRG Energy under a 32-year, $300 million naming rights deal in 2000.", "output": "The NRG Stadium, formerly Reliant Stadium, is a multi-purpose stadium in Houston, Texas, United States. Construction was completed in 2002, at a cost of $352 million and has a seating capacity of 72,220. It was the first NFL facility to have a retractable roof.\n\nThe stadium is the home of the National Football League's Houston Texans, the Houston Livestock Show and Rodeo, the Texas Bowl, many of the United States men's national soccer team's matches, Mexico national football team friendlies where El Tri serves as the host, and other events. The stadium served as the host facility for Super Bowls XXXVIII (2004) and LI (2017), and WrestleMania 25 (2009). The stadium will host multiple matches during the 2026 FIFA World Cup.\n\nNRG Stadium is part of a collection of venues (including the Astrodome), which are collectively called NRG Park. The entire complex is named for NRG Energy under a 32-year, $300 million naming rights deal in 2000.", "category": "IT"}, {"instruction": "Who are the last 7 men's icc world cup winners in ODI?", "input": "", "output": "- England \n- Australia \n- India \n- Australia \n- Australia \n- Australia \n- Sri Lanka", "category": "IT"}, {"instruction": "Which season three episode did Alik Sakharov direct in Game of Thrones?", "input": "", "output": "Alik Sakharov directed the season three episode \"The Climb\"", "category": "IT"}, {"instruction": "which country has the least diverse food?", "input": "", "output": "England is notorious for their food offerings. The best choices you might get are fish and chips and their authentic blood suasage. Most visitors claim that food in UK is tasteless and complains about the limited choices of bakery and desserts.", "category": "IT"}, {"instruction": "What does the software company Teamwork do and where is it located", "input": "Teamwork is an Irish, privately owned, web-based software company headquartered in Cork, Ireland. Teamwork creates task management and team collaboration software. Founded in 2007, as of 2016 the company stated that its software was in use by over 370,000 organisations worldwide (including Disney, Spotify and HP),[10] and that it had over 2.4m users.[11]", "output": "Teamwork is an Irish, privately owned, web-based software company headquartered in Cork, Ireland. Teamwork creates task management and team collaboration software. Founded in 2007, as of 2016 the company stated that its software was in use by over 370,000 organisations worldwide (including Disney, Spotify and HP),[10] and that it had over 2.4m users.", "category": "IT"}, {"instruction": "In YAML tell me a list of teams mentioned in the text. It should be in the form `location: ${location}`, `mascot: ${mascot}`", "input": "The Dallas Cowboys joined the NFL as an expansion team in 1960.[9] The team's national following might best be represented by its NFL record of consecutive sell-outs. The Cowboys' streak of 190 consecutive sold-out regular and post-season games (home and away) began in 2002.[10] The franchise has made it to the Super Bowl eight times, tying it with the Pittsburgh Steelers and Denver Broncos for second-most Super Bowl appearances in history behind the New England Patriots' record 11 appearances. The Cowboys have won eight NFC championships, the most in the conference's history. The Cowboys are the only NFL team to record 20 straight winning seasons (from 1966 to 1985) during which they missed the playoffs only twice (1974 and 1984).", "output": "- location: Dallas\n  mascot: Cowboys\n- location: Pittsburgh\n  mascot: Steelers\n- location: Denver\n  mascot: Broncos\n- location: New England\n  mascot: Patriots", "category": "IT"}, {"instruction": "Mahatma Gandhi gave a slogan on Aug 8, 1942 .What was the slogan?", "input": "", "output": "Do or Die for Independence", "category": "IT"}, {"instruction": "What does a typical financial planning and analysis team structure consist of?", "input": "", "output": "Typically, a financial planning and analysis team will consist of a financial analyst, senior financial analyst, finance manager, director, and VP. This team will usually fall under the chief financial officer for the company.", "category": "IT"}, {"instruction": "What is the right time to do workouts or yoga?", "input": "", "output": "The physical activities like Workouts and Yoga are best performed when one is light on stomach - hence early morning or evenings are usually the most appropriate time in general. However, the most important thing is, one should find time everyday to do some kind of physical exercise to maintain a healthy body.", "category": "IT"}, {"instruction": "Name three dishes that were developed from conditions of scarcity or having to \"make do\u201d with available materials or ingredients.", "input": "", "output": "1. Bouillabaisse - a French seafood stew, originated with making do with whatever catch a fisherman couldn\u2019t sell.  \n2. Congee - an Asian dish which involves a small amount of rice being cooked in water to a large volume of rice porridge; the idea is to stretch rice and feed more people with less food; often served at times of famine in the old days.\n3. Budae Jjigae - a Korean stew also known as Army Stew; it  came about after Korean when resourceful Koreans were starving and salvaged the American leftover canned food (e.g. spam, beans, hotdogs, etc.) to make stew with kimchi and instant noodles.", "category": "IT"}, {"instruction": "Who are the greatest players that have played for Manchester United?", "input": "", "output": "- Sir Bobby Charlton \n- Eric Cantona \n- Paul Scholes \n- Nemanja Vidic \n- David Beckham \n- Cristiano Ronaldo \n- Ruud Van Nistelrooy \n- Wayne Rooney \n- Gary Neville \n- Dennis Law \n- George Best \n- Peter Schmeichel", "category": "IT"}, {"instruction": "When was the last financial crisis and what caused it?", "input": "", "output": "The last financial crisis was from 2007-2008. It was dubbed the Global Financial Crisis (GFC) because it had severe worldwide economic impact. The Global Financial Crisis was caused by the predatory lending of low-income homebuyers, excessive risk-taking of Wall Street and the bursting of the United States hosing bubble.", "category": "IT"}, {"instruction": "What was the first toy to be advertised on television?", "input": "", "output": "Mr Potato Head.", "category": "IT"}, {"instruction": "What are specific reasons for seasons?", "input": "", "output": "Planet Earth has a tilt of 23.5 degrees. This causes the hemispheres to be either closer or farther from the sun. Also, the axial tilt changes the amount of sunlight hitting the earth at any given time.", "category": "IT"}, {"instruction": "What is a knowledge base?", "input": "", "output": "A knowledge base is a set of articles composed of words and sentences that explains concepts of what are known but perhaps hard to understand.  A kb can be used to help streamline and making training more readily accessible.  A kb is also a place where exchange of ideas occurs through asking interactive questions on published articles.  An example of a widely use kb is stackoverflow.com", "category": "IT"}, {"instruction": "What is postmodernism?", "input": "Postmodernism is an intellectual stance or mode of discourse characterized by skepticism toward the \"grand narratives\" of modernism; rejection of epistemic certainty or the stability of meaning; and sensitivity to the role of ideology in maintaining political power. Claims to objectivity are dismissed as na\u00efve realism, with attention drawn to the conditional nature of knowledge claims within particular historical, political, and cultural discourses. The postmodern outlook is characterized by self-referentiality, epistemological relativism, moral relativism, pluralism, irony, irreverence, and eclecticism; it rejects the \"universal validity\" of binary oppositions, stable identity, hierarchy, and categorization\n\nInitially emerging from a mode of literary criticism, postmodernism developed in the mid-twentieth century as a rejection of modernism, and has been observed across many disciplines. Postmodernism is associated with the disciplines deconstruction and post-structuralism. Various authors have criticized postmodernism as promoting obscurantism, as abandoning Enlightenment rationalism and scientific rigor, and as adding nothing to analytical or empirical knowledge", "output": "Postmodernism is a philosophical position that questions the certainty and immutability of human knowledge. It emerges in opposition to the main tenets of modernism and rejects claims of objective universal truths that are not bound and shaped by the social, historical, political and cultural context in which they arise. Postmodernist attitudes are characterized by moral relativism, a view where opposite moral precepts and world views are equally valid regardless of their consequences or scientific underpinning. This has led to criticism from thinkers that subscribe to rationalism and the notion that objective truths can be derived from scientific rigor.", "category": "IT"}, {"instruction": "How can I make every color of paint?", "input": "", "output": "To make paint colors you need the three primary colors: red, yellow, and blue, as well as black and white to adjust shade (black mixed with color) and tint (white mixed with color). The primary colors red and yellow mix to make orange, red and blue mix to make purple, and yellow and blue mix to make green. Other common colors such as pink can be obtained by mixing black white to these base colors. For example, pink can be created by mixing a lot of white with a small amount of red.", "category": "IT"}, {"instruction": "Who is the best cricketer in the world", "input": "", "output": "1. Sachin Tendulkar - because he faced all famous pace and spin bowlers", "category": "IT"}, {"instruction": "Tell me if the following music pieces are considered classical music, jazz music or pop music? The magic flute, Kind of blue, Wish you were here, Bach's Saint John Passion, Take five, We are the champions.", "input": "", "output": "The music pieces The magic flute, Bach's Saint John Passion are considered classical music. The pieces Kind of blue and Take five are considered jazz. music and the pieces Wish you were here and We are the champions are considered pop music.", "category": "IT"}, {"instruction": "Extract the current points scoring table for current Formula 1's grand prixs in the form of [Place of Finish- Points Scored]", "input": "Points system\nMain article: List of Formula One World Championship points scoring systems\n1st\t2nd\t3rd\t4th\t5th\t6th\t7th\t8th\t9th\t10th\tFL*\n25\t18\t15\t12\t10\t8\t6\t4\t2\t1\t1\n*A driver must finish within the top ten to receive a point for setting the fastest lap of the race. If the driver who set the fastest lap finishes outside of the top ten, then the point for fastest lap will not be awarded for that race.[87]\n\n\nThe Formula One trophy given to the winner at the end of the year.\nVarious systems for awarding championship points have been used since 1950. The current system, in place since 2010, awards the top ten cars points in the Drivers' and Constructors' Championships, with the winner receiving 25 points. All points won at each race are added up, and the driver and constructor with the most points at the end of the season are crowned World Champions. Regardless of whether a driver stays with the same team throughout the season, or switches teams, all points earned by them count for the Drivers' Championship.[88]\n\nA driver must be classified in order to receive points, as of 2022, a driver must complete at least 90% of the race distance in order to receive points. Therefore, it is possible for a driver to receive points even if they retired before the end of the race.[89]\n\nFrom some time between the 1977 and 1980 seasons to the end of the 2021 season if less than 75% of the race laps were completed by the winner, then only half of the points listed in the table were awarded to the drivers and constructors. This has happened on only five occasions in the history of the championship, and it had a notable influence on the final standing of the 1984 season. The last occurrence was at the 2021 Belgian Grand Prix when the race was called off after just three laps behind a safety car due to torrential rain.[90][91] The half points rule was replaced by a distance-dependent gradual scale system for 2022.[92]", "output": "[1st Place- 25 pts], [2nd place- 20 pts], [3rd place- 15 pts], [4th place- 12 pts], [5th place- 10 pts], [6th place- 8 pts], [7th place- 6 pts], [8th place- 4 pts], [9th place- 2 pts], [10th place- 1 pt]", "category": "IT"}, {"instruction": "Which of the following countries are in Europe and which are in the rest of the world: Nicaragua, Australia, Austria, New Zealand, Morocco, Spain, Greece, China, Chile?", "input": "", "output": "Austria, Spain, and Greece are all countries in Europe, while the remaining countries in the list are in the rest of the world. Nicaragua is in North America, Australia and New Zealand are in Oceania, Morocco is in Africa, China is in Asia, and Chile is part of South America.", "category": "IT"}, {"instruction": "Which of the following foods could a vegan eat and which would they have to avoid: egg, almond milk, cheese, gelatin, chicken noodle soup, lettuce, and bread.", "input": "", "output": "Vegans could eat almond milk, lettuce, and bread. A vegan could not eat egg, cheese, gelatin, or chicken noodle soup.", "category": "IT"}, {"instruction": "Why are sports so popular?", "input": "", "output": "Sports are popular throughout the world. With the wide variety of options available, people can participate in or watch team or individual sports, high-impact, fast-paced, slow-paced, low impact. There is truly something for everyone. Sports can unite a community, town, or nation. Sports can teach life lessons like humility, friendly competition, and how to communicate with others and make quick decisions. Sports can keep kids out of trouble and give them a sense of belonging and a sense of family when they might not otherwise have that. Sports promote healthy, active lifestyles, hard work, and goal setting. Sports can overcome barriers of language, culture, and economics, bringing people together from all walks of life.", "category": "IT"}, {"instruction": "Why would an oil and gas exploration company utilize directional drilling in their drilling program?", "input": "", "output": "There are several reasons and oil and gas exploration company would need to utilize directional drilling techniques when drilling wells. If, for any reason, a drill site is not accessible from the surface (ground level) then the drilling rig will be offset from the target. Because the drilling rig is not physically able to locate on top of the geological target the oil and gas company must use directional drilling techniques to steer the well to the target from an offset position. Examples of this could include drilling for resources under Federal land or when drilling in highly populated areas. Another reason for utilizing directional drilling techniques is to maximize hydrocarbon production. Directional drillers can turn the well-bore to intersect with the target zone at the X-Y axis, instead of only through the Z-axis. This maximizes the amount of \"zone\" the well-bore has access to.", "category": "IT"}, {"instruction": "Given a reference text about Hackpad, what company acquired it?", "input": "Hackpad was a web-based collaborative real-time text editor forked from Etherpad.[1]\n\nIt was used as the company wikis by multiple prominent startups of the 2010s, such as Airbnb, Stripe, and Upworthy.[2]\n\nIn April 2014, Hackpad was acquired by Dropbox.[3][4] In April 2015, it was announced that Hackpad would be released as open source[5] and source code was published on GitHub in August 2015,[6] under the Apache license 2.0.[7] On April 25, 2017, Hackpad announced that it is to shut down on July 19, 2017, permanently migrating to Dropbox Paper.[8]", "output": "Hackpad was acquired by Dropbox in April 2014.", "category": "IT"}, {"instruction": "List the actors and actresses who were included in the cast of the movie Avengers: Endgame.", "input": "Avengers: Endgame is a 2019 American superhero film based on the Marvel Comics superhero team the Avengers. Produced by Marvel Studios and distributed by Walt Disney Studios Motion Pictures, it is the direct sequel to Avengers: Infinity War (2018) and the 22nd film in the Marvel Cinematic Universe (MCU). Directed by Anthony and Joe Russo and written by Christopher Markus and Stephen McFeely, the film features an ensemble cast including Robert Downey Jr., Chris Evans, Mark Ruffalo, Chris Hemsworth, Scarlett Johansson, Jeremy Renner, Don Cheadle, Paul Rudd, Brie Larson, Karen Gillan, Danai Gurira, Benedict Wong, Jon Favreau, Bradley Cooper, Gwyneth Paltrow, and Josh Brolin. In the film, the surviving members of the Avengers and their allies attempt to reverse Thanos's actions in Infinity War.", "output": "Robert Downey Jr., Chris Evans, Mark Ruffalo, Chris Hemsworth, Scarlett Johansson, Jeremy Renner, Don Cheadle, Paul Rudd, Brie Larson, Karen Gillan, Danai Gurira, Benedict Wong, Jon Favreau, Bradley Cooper, Gwyneth Paltrow, and Josh Brolin.", "category": "IT"}, {"instruction": "What city is WFSD Radio licensed to?", "input": "WFSD-LP (107.9 FM) is a low-power FM radio station broadcasting a Christian inspirational format. Licensed to Tallahassee, Florida, United States, the station is currently owned by Tallahassee First Seventh-day Adventist Church, affiliated with LifeTalk Radio.[1]", "output": "WFSD Radio is licensed to Tallahassee, Florida, United States", "category": "IT"}, {"instruction": "Is cricket game popular in some parts of the world?", "input": "", "output": "Yes, cricket is a very popular game. It is the second most followed game after football in the world. Each team has a squad of 16 to 20 players and 11 can play a game. There are three different formats of game which are popular.\nTest match is the longest format in which each team play 2 innings and have a limit of 90 overs per day with 5 day limit.\n50 over games are also called one day matches with a limit of 50 overs per team in a game.\nT20 or 20-20 is the short format and has lot of following. Takes about 4 hours per game.", "category": "IT"}, {"instruction": "Who was William P. Bolton", "input": "William P. Bolton (July 2, 1885 \u2013 November 22, 1964) was a one-term U.S. Congressman who represented the second district of Maryland from 1949 to 1951 until defeated by Republican General James Devereux.\n\nBorn near Whiteford, Maryland, Bolton attended the public schools and St. Francis Parochial School in Baltimore County, Maryland. He graduated from the University of Baltimore Law School in 1909, and became a lawyer in private practice. He served as trial magistrate in Towson, Maryland from 1941-1946.\n\nBolton served in the Maryland State Senate from 1946 to 1948. He was elected as a Democrat to the Eighty-first Congress, serving from January 3, 1949 to January 3, 1951. He was an unsuccessful candidate for reelection to the Eighty-second Congress in 1950 and again in 1954.\n\nDuring his short time in the Maryland Senate he proposed a far reaching amendment to the Maryland Constitution that was approved by the city of Baltimore voters to limit the city's ability to annex portions of Baltimore County, something that was previously a right of the city.[1] This amendment, Question 5, was approved on November 2, 1948 by a majority of the city voters: 139,974 to 103,687.[2]\n\nAfter Congress, Bolton served as director of Baltimore County Civil Defense in 1951, and died in Baltimore in 1964. He is interred in Mount Maria Cemetery of Towson.", "output": "William P. Bolton (July 2, 1885 \u2013 November 22, 1964) was a one-term U.S. Congressman who represented the second district of Maryland from 1949 to 1951 until defeated by Republican General James Devereux.\n\nAfter Congress, Bolton served as director of Baltimore County Civil Defense in 1951, and died in Baltimore in 1964. He is interred in Mount Maria Cemetery of Towson.", "category": "IT"}, {"instruction": "From the passage provided, extract the city where Elizabeth Taylor's parents were from", "input": "Elizabeth Rosemond Taylor was born on February 27, 1932, at Heathwood, her family's home at 8 Wildwood Road in the London Borough of Barnet, northwest London, England.[1]:\u200a3\u201310\u200a She received dual British-American citizenship at birth as her parents, art dealer Francis Lenn Taylor (1897\u20131968) and retired stage actress Sara Sothern (n\u00e9e Sara Viola Warmbrodt, 1895\u20131994), were United States citizens, both originally from Arkansas City, Kansas.[1]:\u200a3\u201310\u200a[a]\n\nThey moved to London in 1929 and opened an art gallery on Bond Street; their first child, a son named Howard, was born the same year. The family lived in London during Taylor's childhood.[1]:\u200a11\u201319\u200a Their social circle included artists such as Augustus John and Laura Knight and politicians such as Colonel Victor Cazalet.[1]:\u200a11\u201319\u200a Cazalet was Taylor's unofficial godfather and an important influence in her early life.[1]:\u200a11\u201319\u200a She was enrolled in Byron House School, a Montessori school in Highgate, and was raised according to the teachings of Christian Science, the religion of her mother and Cazalet.[1]:\u200a3,\u200a11\u201319,\u200a20\u201323\u200a\n\nIn early 1939, the Taylors decided to return to the United States due to fear of impending war in Europe.[1]:\u200a22\u201326\u200a United States ambassador Joseph P. Kennedy contacted her father, urging him to return to the US with his family.[5] Sara and the children left first in April 1939 aboard the ocean liner SS Manhattan and moved in with Taylor's maternal grandfather in Pasadena, California.[1]:\u200a22\u201328\u200a[6] Francis stayed behind to close the London gallery and joined them in December.[1]:\u200a22\u201328\u200a In early 1940, he opened a new gallery in Los Angeles. After briefly living in Pacific Palisades, Los Angeles with the Chapman family, the Taylor family settled in Beverly Hills California, where the two children were enrolled in Hawthorne School.[1]:\u200a27\u201334", "output": "Elizabeth Taylor's parents were from Arkansas City, Kansas", "category": "IT"}, {"instruction": "What are some of the best vegan protein sources", "input": "", "output": "Here are some of the most high protein vegan protein sources \n\n* Tofu\n* Tempeh\n* Seitan\n* Edamame Beans\n* Garbanzo Beans", "category": "IT"}, {"instruction": "What was the first living creature sent into orbit around Earth?", "input": "", "output": "Laika, a Russian street dog, went to space in 1957 on the satellite Sputnik 2.", "category": "IT"}, {"instruction": "What is a hadron?", "input": "", "output": "A hadron is a subatomic particles made of up two or more smaller particles called quarks. Hadrons interact via the strong nuclear force. Examples of hadrons include the proton and the neutron.", "category": "IT"}, {"instruction": "What are the songs on the album At Basin Street?", "input": "", "output": "The songs on the album At Basin Street, also known as Clifford Brown and Max Roach at Basin Street, are as follows:\n\"What Is This Thing Called Love?\" (Cole Porter) \u2013 7:33\n\"Love Is a Many-Splendored Thing\" (Sammy Fain, Paul Francis Webster) \u2013 4:13\n\"I'll Remember April\" (Gene de Paul, Patricia Johnston, Don Raye) \u2013 9:13\n\"Powell's Prances\" (Richie Powell) \u2013 3:28\n\"Time\" (Richie Powell) \u2013 5:03\n\"The Scene Is Clean\" (Tadd Dameron, arr. Dameron) \u2013 6:04\n\"Gertrude's Bounce\" (Richie Powell) \u2013 4:09\nBonus tracks included on the 2002 CD release:\n\"Step Lightly (Junior's Arrival)\" (Benny Golson) \u2013 3:33\n\"Flossie Lou\" (Dameron) \u2013 3:55\n\"What Is This Thing Called Love? (alternate take)\" \u2013 8:18\n\"Love Is a Many-Splendored Thing (breakdown)\" \u2013 0:45\n\"Love Is a Many-Splendored Thing (alternate take)\" \u2013 3:53\n\"I'll Remember April (breakdown)\" \u2013 1:25\n\"I'll Remember April (alternate take)\" \u2013 9:42\n\"Flossie Lou (alternate take)\" \u2013 4:00", "category": "IT"}, {"instruction": "To acquire Swedish citizenship by naturalisation what should be the minimum age of the applicant and what documents are required.", "input": "Swedish citizenship can be acquired by naturalisation, also known as citizenship by application. A foreigner may be granted Swedish citizenship upon meeting certain requirements. Person should be able to prove identity, 18 years of age or older, has a permanent residence permit or\nhas a right of residence or residence card (applies to EU citizens or close relatives of EU citizens), meets the requirements for habitual residence and has maintained good conduct while in Sweden.", "output": "Minimum age should be 18 years and applicant should have permanent residence permit or right of residence.", "category": "IT"}, {"instruction": "From the passage provided, extract the name of the first non-European to win the Nobel Prize in Literature.", "input": "Rabindranath Tagore FRAS (/r\u0259\u02c8b\u026andr\u0259n\u0251\u02d0t t\u00e6\u02c8\u0261\u0254\u02d0r/ (listen); pronounced [r\u0254\u02c8bind\u027e\u0254nat\u02b0 \u02c8\u0288\u02b0aku\u027e];[1] 7 May 1861[2] \u2013 7 August 1941[3]) was a Bengali polymath who worked as a poet, writer, playwright, composer, philosopher, social reformer and painter.[4][5][6] He reshaped Bengali literature and music as well as Indian art with Contextual Modernism in the late 19th and early 20th centuries. Author of the \"profoundly sensitive, fresh and beautiful\" poetry of Gitanjali,[7] he became in 1913 the first non-European and the first lyricist to win the Nobel Prize in Literature.[8] Tagore's poetic songs were viewed as spiritual and mercurial; however, his \"elegant prose and magical poetry\" remain largely unknown outside Bengal.[9] He was a fellow of the Royal Asiatic Society. Referred to as \"the Bard of Bengal\",[10][5][6] Tagore was known by sobriquets: Gurudeb, Kobiguru, Biswokobi.[a]", "output": "Rabindranath Tagore was the first non-European and the first lyricist to win the Nobel Prize in Literature.", "category": "IT"}, {"instruction": "What is the climbing history summary of Gurla Mandhata?", "input": "In 1905, T. G. Longstaff, accompanied by two alpine guides and six porters, made an attempt on Gurla Mandhata. They turned back at around 7,000 m (23,000 ft) after being caught in an avalanche and encountering other difficulties.[2] This was a strong achievement for the time, especially for such a small group; at that time no summit of over 7,000 m had yet been climbed and Longstaff's height represented a world altitude record.\n\nIn 1935, a Viennese student, Herbert Tichy, disguised as an Indian pilgrim, made a trip to the holy mountain Kailash. On the way, he attempted Gurla Mandhata with one of his porters, Kitar. They reached a height of 23,400  ft. where they were turned back by fresh snow and bad weather.[4]\n\nIn 1955 the mountain was the intended destination of the inaugural Welsh Himalayan Expedition, led by Sydney Wignall.[5] The expedition, sponsored by the Liverpool Daily Post, intended to summit Gurla Mandata and plant three flags: the Welsh Dragon, the flag of the recently-overthrown Chinese Republic and the Jolly Roger.[5] Before the climb could begin, the group was captured by the Chinese military who imprisoned and tortured the climbers for two months under the belief they were CIA spies (Wignall had in fact offered to spy for India).[5]\n\nThe first ascent of the peak was by a joint Japanese/Chinese team led by Katsutoshi Hirabayashi, via the north side of the peak, in May 1985.[3] Since that time, there have been six additional successful ascents and two failed attempts on the peak.[6]\n\nIn 1997, an attempt was made to ascend the peak via the then-unclimbed North Face route by Quinn Simons, Soren Peters, and their guide, Charlie Fowler. The team made a valiant effort, climbing high on the mountain, but after severe storms and other difficulties had to retreat. Their descent ended in a fall of some 450 m (1,500 ft) down the North Face of the peak. Fowler was slightly injured, while Simons and Peters both suffered extreme frostbite on their extremities.[7]\n\nThe standard ascent route climbs the western flanks of the mountain ascending the Chaglung'mlungha Glacier to the summit plateau. Most teams choose to approach the mountain overland by jeep from either Lhasa, Tibet, or Kathmandu, Nepal. However, an alternate approach begins in the mountain hamlet of Simikot, Nepal, in the remote Humla district of west Nepal and follows the Karnali River northward, crossing into Tibet (China) in the village of Sher. Jeeps then take climbers north through Taklakot (Burang) to basecamp on the mountain.", "output": "The first clmbing attempt of of Gurla Mandhata happened in 1905. T. G. Longstaff, accompanied by two alpine guides and six porters reached 23,000 feet but had to turn around due to an avalanche and other difficulties. Second attempt was made in 1935 by a Viennese student, Herbert Tichy and 1 porter. They reached a height of 23,000 feet but turned around due to fresh snow and bad weather. The first successful happened in 1985 by a joint Japanese/Chinese team led by Katsutoshi Hirabayashi on the north side of the peak. Since then, there was an additional six successful ascent and two failed attempts to reach the peak.", "category": "IT"}, {"instruction": "tell me whether these are European or American cities: New York, Milan, Paris, Chicago, San Francisco, London", "input": "", "output": "European: Milan, Paris, London\nAmerican: New York, Chicago, San Francisco", "category": "IT"}, {"instruction": "How to choose the next company you work for?", "input": "", "output": "The company choosing depending on the follow rough criteria:\n- location: whether the company is within the acceptable commute distance\n- work culture: how do you treat work life balance\n- the mission of the company and the risk associated with the company if it is a growing company\n- the compensation\n- the colleague that you will work with there\n- the corresponding project and whether it will use or improve your expertise area\n- the career direction that you want to pursue", "category": "IT"}, {"instruction": "tell me about the whole world", "input": "\"This Whole World\" is a song by American rock band the Beach Boys from their 1970 album Sunflower. Written by Brian Wilson, the song features his brother Carl on lead vocals and is credited as a Beach Boys production. Earlier in the year, it had been included on the Warner Brothers promotional sampler album The Big Ball, and as a single, fronted with \"Slip On Through\", but did not make the U.S. or UK pop charts.\n\nBackground\nBrian recalled writing \"This Whole World\" during one night at his Beverly Hills mansion when he was \"stoned and confused\".[1] He stated that the song was written in approximately 90 minutes at around 2:00 a.m. \"I got up and went to my white Baldwin organ and I was playing around and thinking about the love of this whole world and that\u2019s what inspired me to write the song.\"[2]\n\nHe also said of the song: \"A very special vocal by Carl, and the lyrics are very spiritual. The melody and chord pattern rambles but it comes back to where it started.\"[3] Regarding the lyrics, he said, \"It\u2019s about love in general. ... That song came from deep down in me, from the feeling I had that the whole world should be about love. When I wrote that song I wanted to capture that idea.'\"[4]\n\nComposition\nBiographer Mark Dillon characterized \"This Whole World\" as an \"old-fashioned\" rock song with \"doo-wop trimmings\" that contains an unorthodox structure and numerous key modulations.[1] Musician Scott McCaughey said that the structure followed an A/B/C/A/B/C pattern, however, \"it seems to never repeat itself once. Every section has something new and different going on.\"[1] Musicologist Philip Lambert offered a summary of the song's exceptional \"tonal transience\":\nFirst, a C-major phrase ends on IV, which becomes \u266dVI in A, and then an A-major phrase ends on iii, which becomes a new i in C\u266f. This new phrase then moves through a diatonic bass descent from 1\u0302 to 5\u0302, eventually arriving at the key of B\u266d using the same pivot relationship heard earlier between C and A (IV = \u266dVI). Finally, the phrase in B\u266d concludes on V, which is reinterpreted as IV to return to C major ...[5]\n\nIn 1978, Beach Boys supporting keyboardist Daryl Dragon commented on the song's various key changes: \"From a harmony standpoint, I've never heard a song like that since I've been in pop music. I've never heard a song go through that many changes and come back.\"[6]\n\nRecording\nThe track was recorded in one session on November 13, 1969 at Beach Boys Studio.[7] According to Brian: \"I produced that record. I taught Carl the lead and the other guys the background vocal, especially the meditation part at the end: 'Om dot dit it.'\"[4] The track originally ran \"far longer\" but was trimmed down.[8] Brian later commented, \"I remember 'This Whole World' took a couple of days to record. It took a lot of hard work to get that one but I\u2019m real happy with it.\"[9] Another version with an alternate ending was created for an Eastern Airlines commercial that the group briefly appeared in.[10]\n\nCritical reception\nAllMusic wrote: \"Brian reestablished his reputation as one of the most brilliant melody", "output": "\"This Whole World\" is a song by American rock band the Beach Boys from their 1970 album Sunflower. Written by Brian Wilson, the song features his brother Carl on lead vocals and is credited as a Beach Boys production. Brian recalled writing \"This Whole World\" one night at his Beverly Hills mansion when he was \"stoned and confused.\"[1] He stated that the song was written in approximately 90 minutes at around 2:00 a.m. \"I got up and went to my white Baldwin organ, and I was playing around and thinking about the love of this whole world, and that's what inspired me to write the song.\" [2] He also said of the song: \"An exceptional vocal by Carl, and the lyrics are very spiritual. The melody and chord pattern rambles, returning to where it started.\" [3] Regarding the lyrics, he said, \"It's about love in general. Biographer Mark Dillon characterized \"This Whole World\" as an \"old-fashioned\" rock song with \"doo-wop trimmings\" that contains an unorthodox structure and numerous key modulations. [1] Musician Scott McCaughey said that the structure followed an A/B/C/A/B/C pattern, however, \"it seems never to repeat itself once. This new phrase then moves through a diatonic bass descent from 1\u0302 to 5\u0302, eventually arriving at the key of B\u266d using the same pivot relationship heard earlier between C and A (IV = \u266dVI). In 1978, Beach Boys supporting keyboardist Daryl Dragon commented on the song's various key changes: \"From a harmony standpoint, I've never heard a song like that since I've been in pop music. I've never heard a song go through that many changes and return.\" [6] The track was recorded in one session at Beach Boys Studio on November 13, 1969.[7] According to Brian: \"I produced that record. I taught Carl the lead and the other guys the background vocal, especially the meditation part at the end: 'Om dot dit it.'\" [4] The track originally ran \"far longer\" but was trimmed down.[8] Brian later commented, \"This Whole World' took a couple of days to record.", "category": "IT"}, {"instruction": "Extract the years that Ayrton Senna da Silva won the Formula One World Championship, and put them separated by comma.", "input": "Ayrton Senna da Silva (21 March 1960 \u2013 1 May 1994) was a Brazilian racing driver who won the Formula One World Drivers' Championship in 1988, 1990, and 1991. Senna is one of three Formula One drivers from Brazil to win the World Championship and won 41 Grands Prix and 65 pole positions, with the latter being the record until 2006.", "output": "1988, 1990, 1991", "category": "IT"}, {"instruction": "Extract the Greek cities mentioned in the below text and list them from smallest to largest", "input": "Greece,[a] officially the Hellenic Republic,[b] is a country in Southeast Europe. It is situated on the southern tip of the Balkan Peninsula, and is located at the crossroads of Europe, Asia, and Africa. Greece shares land borders with Albania to the northwest, North Macedonia and Bulgaria to the north, and Turkey to the northeast. The Aegean Sea lies to the east of the mainland, the Ionian Sea to the west, and the Sea of Crete and the Mediterranean Sea to the south. Greece has the longest coastline on the Mediterranean Basin, featuring thousands of islands. The country consists of nine traditional geographic regions, and has a population of approximately 10.5 million. Athens is the nation's capital and largest city, followed by Thessaloniki and Patras.", "output": "Patras, Thessaloniki and Athens", "category": "IT"}, {"instruction": "For whom is Daenerys Targaryen's dragon, Viserion, named for?", "input": "", "output": "She named Viserion after her late brother, Viserys", "category": "IT"}, {"instruction": "Do Africans share the same origin and culture?", "input": "The Culture of Africa is varied and manifold, consisting of a mixture of countries with various tribes that each have their unique characteristic from the continent of Africa. It is a product of the diverse populations that inhabit the continent of Africa and the African diaspora. Generally, Culture can be defined as a collective mass of distinctive qualities belonging to a certain group of people. These qualities include laws, morals, beliefs, knowledge, art, customs, and any other attributes belonging to a member of that society. Africa has numerous ethnic nationalities all with varying qualities such as language, dishes, greetings, and dances. However, all African peoples share a series of dominant cultural traits which distinguish African Culture from the rest of the world. For example, social values, religion, morals, political values, economics, and aesthetic values all contribute to African Culture. Expressions of culture are abundant within Africa, with large amounts of cultural diversity being found not only across different countries but also within single countries. Even though African cultures are widely diverse, they are also, when closely studied, seen to have many similarities; for example, the morals they uphold, their love and respect for their culture, as well as the strong respect they hold for the aged and the important, i.e. kings and chiefs.", "output": "No, Africa is a multicultural continent, with many diverse ethnic groups. While these ethnic groups don't share the same origin, many of these groups share similar cultural traits such as social values and religious values.  They also generally have high regard for their elderly and tribal leaders.", "category": "IT"}, {"instruction": "What is St. Peters Basilica?", "input": "", "output": "St. Peters Basilica is located at the Vatican in Rome, Italy.  St. Peters is a church where the Roman Catholic Church Pope lives.  The church was build in the renaissance style, and the interior contains brilliant marble sculptures and paintings.  There are also a large number of tombs for past popes.  The Sistine Chapel is one of the Vatican's proudest features, and it was painted on the ceiling by Michelangelo between 1508 to 1512.", "category": "IT"}, {"instruction": "What are the best cliffs in Ireland?", "input": "", "output": "The Cliffs of Moher are 702 feet/214 meters at their highest point, near O'Brien's Tower. Though not the highest cliffs in Ireland \u2013 that honor goes to Co Donegal's Slieve League Cliffs and Achill Island's Croaghaun Cliffs \u2013 they are by far the most popular.", "category": "IT"}, {"instruction": "Who was the first computer programmer?", "input": "Augusta Ada King, Countess of Lovelace (n\u00e9e Byron; 10 December 1815 \u2013 27 November 1852) was an English mathematician and writer, chiefly known for her work on Charles Babbage's proposed mechanical general-purpose computer, the Analytical Engine. She was the first to recognise that the machine had applications beyond pure calculation, and to have published the first algorithm intended to be carried out by such a machine. As a result, she is often regarded as the first computer programmer", "output": "Augusta Ada King, Countess of Lovelace (n\u00e9e Byron; 10 December 1815 \u2013 27 November 1852) is often regarded as the first computer programmer for her work on the Analytical Engine with Charles Babbage.", "category": "IT"}, {"instruction": "Who is Silvio Micali?", "input": "Silvio Micali (born October 13, 1954) is an Italian computer scientist, professor at the Massachusetts Institute of Technology and the founder of Algorand, a proof-of-stake blockchain cryptocurrency protocol. Micali's research at the MIT Computer Science and Artificial Intelligence Laboratory centers on cryptography and information security.\n\nIn 2012, he received the Turing Award for his work in cryptography along with Shafi Goldwasser for their work on zero-knowledge proofs.", "output": "Silvio Micali is a cryptography professor at MIT. He received a Turing award in 2012 along with Shafi Goldwasser for their work on zero-knowledge proofs. Micali also founded Algorand, which is a a proof-of-stake blockchain cryptocurrency protocol and company.", "category": "IT"}, {"instruction": "What are some of the famous festivals of India?", "input": "", "output": "India is the land of diverse cultures and festivities. Therefore, certain festivals are more prominent in specific parts than others. A couple of the festivals that are celebrated on a broader level across the country are\n\n1. Diwali: It is also referred to as the \"Festival of Lights\". During this festival, people light up their homes in the religious significance of welcoming Goddess Laxmi, also known as Goddess of Wealth. Some people consider this festival as the highest religious significance. \n\n2. Holi: It is one the most popular festival to the level that has picked up in western world. Being referred as the \"Festival of colors\", people generally play with colors (in powder form), sing and enjoy with friends, family and neighbours.", "category": "IT"}, {"instruction": "What is the name of Google's email service?", "input": "", "output": "Gmail", "category": "IT"}, {"instruction": "What is the meaning of life?", "input": "", "output": "The meaning of life is a subject that has been studied, pondered, written about, fought over, proven, disproven, dismissed and even expressed in the metaverse.  Some people pursue the meaning of life throughout their entire life while others spend no time whatsoever thinking about the concept.  Many people find meaning within things they experience in life such as religion, sport, academia, helping others, or just being kind.  One thing is certain about the meaning of life and that is it is deeply personal and unique to each of us.  I personally believe that the meaning of life is to pursue continual improvement and challenging oneself to bring joy to our relationships with others.  I also feel there is meaning in nature's energy that must be protected and we are losing our connection to it.", "category": "IT"}, {"instruction": "Given a polynomial x^2 + 2x + 1, what is x?", "input": "", "output": "x is equal to -1", "category": "IT"}, {"instruction": "Give me a list of the best cell phone brands besides Apple", "input": "", "output": "Samsung, Google, Nokia, Nextel", "category": "IT"}, {"instruction": "When is the best time of year to visit the Smoky Mountains?", "input": "", "output": "The Smoky Mountains are open and accessible year around.  One can visit the Smokies during each of the 4 different seasons and have a completely different experience in each.  Colder months, such as December through early March, are great if you want to explore when it's less crowded, but be prepared for certain higher elevation trails and roadways to be closed due to ice and snow.  Summer months are great for morning hikes and hikes at higher elevations as the temperatures are moderately warm and comfortable, but be prepared for larger crowds, as this is the busiest time of year around the park.  In October, the Smokies are full of red, orange, and yellow leaves changing colors before dropping for the Winter.  This is one of the more beautiful times of year in the Smokies, but also a very busy time as visitors flock to the park to see all the colors.  Spring break is also a great time of year to visit the Smoky Mountains, as the weather is cool for long hikes, the bears are just starting to come out with their cubs, and the crowds are less than what you'd see during the summer.", "category": "IT"}, {"instruction": "Tell me whether these are dogs or cats: bulldogs, poodles, huskies, collies, shepherds", "input": "", "output": "Dogs", "category": "IT"}, {"instruction": "Which is a species of fish? Lizard or Lizardfish", "input": "", "output": "Lizardfish", "category": "IT"}, {"instruction": "What is the solar system?", "input": "The Solar System[c] is the gravitationally bound system of the Sun and the objects that orbit it. It formed 4.6 billion years ago from the gravitational collapse of a giant interstellar molecular cloud. The vast majority (99.86%) of the system's mass is in the Sun, with most of the remaining mass contained in the planet Jupiter. The planetary system around the Sun contains eight planets. The four inner system planets\u2014Mercury, Venus, Earth and Mars\u2014are terrestrial planets, being composed primarily of rock and metal. The four giant planets of the outer system are substantially larger and more massive than the terrestrials. The two largest, Jupiter and Saturn, are gas giants, being composed mainly of hydrogen and helium; the next two, Uranus and Neptune, are ice giants, being composed mostly of volatile substances with relatively high melting points compared with hydrogen and helium, such as water, ammonia, and methane. All eight planets have nearly circular orbits that lie near the plane of Earth's orbit, called the ecliptic.\n\nThere are an unknown number of smaller dwarf planets and innumerable small Solar System bodies orbiting the Sun.[d] Six of the major planets, the six largest possible dwarf planets, and many of the smaller bodies are orbited by natural satellites, commonly called \"moons\" after Earth's Moon. Two natural satellites, Jupiter's moon Ganymede and Saturn's moon Titan, are larger than Mercury, the smallest terrestrial planet, though less massive, and Jupiter's moon Callisto is nearly as large. Each of the giant planets and some smaller bodies are encircled by planetary rings of ice, dust and moonlets. The asteroid belt, which lies between the orbits of Mars and Jupiter, contains objects composed of rock, metal and ice. Beyond Neptune's orbit lie the Kuiper belt and scattered disc, which are populations of objects composed mostly of ice and rock.", "output": "The word solar means \"pertaining to the Sun\", which is derived from the Latin word sol, meaning Sun.[26] The Sun is the dominant gravitational member of the Solar System, and its planetary system is maintained in a relatively stable, slowly evolving state by following isolated, gravitationally bound orbits around the Sun", "category": "IT"}, {"instruction": "How long does it take to golf 18 holes?", "input": "", "output": "It depends on the number of players in your group and course conditions.  A solo round of 18 holes will take 2.5-3hrs, while it will take 3.5-4.5hrs for a group of four to complete their round under normal conditions.", "category": "IT"}, {"instruction": "What are the India\u2019s Foreign Exchange Reserves as on week ended Sept 23, 2022?", "input": "", "output": "$545.65 bn", "category": "IT"}, {"instruction": "Extract which animals Waddell played with and which ones he fought with from the text. Separate them with a comma, putting the ones he played with first.", "input": "Waddell's career wound through a number of teams. He was notably unpredictable; early in his career, he once left in the middle of a game to go fishing.[2] He also had a longstanding fascination with fire trucks and ran off the field to chase after them during games on multiple occasions.[3] He would disappear for months at a time during the offseason, and it was not known where he went until it was discovered that he was wrestling alligators in a circus.[4] He was easily distracted by opposing fans who held up puppies, which caused him to run over to play with them, and shiny objects, which seemed to put him in a trance.[5] An alcoholic for much of his short life, he reportedly spent his entire first signing bonus on a drinking binge; as a pun of the baseball term \"southpaw\" denoting a left-handed pitcher, the Sporting News dubbed him a \"sousepaw\". His eccentric behavior led to constant battles with his managers and scuffles with bad-tempered teammates.", "output": "puppies, alligators", "category": "IT"}, {"instruction": "Who recorded the song Ghost Town", "input": "\"Ghost Town\" is a song recorded by American singer Adam Lambert for his third studio album, The Original High (2015). It was released as the album's lead single on April 21, 2015. The single garnered considerable commercial and critical success, becoming somewhat of a sleeper hit in select countries and receiving a substantial amount of radio play in the US.", "output": "Ghost Town is a song recorded by American singer Adam Lambert for his third studio album, The Original High (2015). It was released as the album's lead single on April 21, 2015. The single garnered considerable commercial and critical success, becoming somewhat of a sleeper hit in select countries and receiving a substantial amount of radio play in the US.", "category": "IT"}, {"instruction": "Why don't women have beards?", "input": "", "output": "Facial hair is typical in our ancestors, but now it's absent in most women. The difference seems down to evolution. Humans have become less hairy in the millions of years we developed from apes. Over time, men came to prefer women with little or no facial hair. Those women will pass this \"hairless\" gene to their daughters. Then those girls would have a head start in the ancient dating game.", "category": "IT"}, {"instruction": "How do sailplanes (gliders) stay aloft?", "input": "", "output": "Gliders are usually towed to altitude by a motorized airplane and then use rising air from natural weather phenomenas such as thermals, mountain lee waves or ridge lift to stay aloft.", "category": "IT"}, {"instruction": "Of these senior crew members of the HMS Bounty, which turned out to be mutineers and which were loyalists:  William Bligh, John Fryer, Fletcher Christian, William Cole, William Peckover, William Purcell, William Elphinstone, Thomas Ledward, John Hallett, Thomas Hayward", "input": "", "output": "William Bligh - Loyalist\nJohn Fryer - Loyalist\nFletcher Christian - Mutineer\nWilliam Cole - Loyalist\nWilliam Peckover - Loyalist\nWilliam Purcell - Loyalist\nWilliam Elphinstone - Loyalist\nThomas Ledward - Loyalist\nJohn Hallett - Loyalist\nThomas Hayward - Loyalist", "category": "IT"}, {"instruction": "Name a good ski mountain in Vermont", "input": "", "output": "Jay Peak is an excellent mountain for skiing in VT. It sits at one of the most Northern parts of Vermont and is the Northern most ski resort in the state. Because of that, Jay Peak averages more snowfall then any other mountain in Vermont. Additionally, because of it's remote location it is also ideal for a getaway that feels like a true getaway. There is also an indoor waterpark, several excellent dining options, rock climbing wall, arcade, and a movie theater to keep the entire family entertained. Because of its proximity to Canada, you can also take a day trip to Montreal which is an added bonus. The ski conditions are also the best in Vermont which makes Jay Peak an ideal mountain for a ski vacation in Vermont", "category": "IT"}, {"instruction": "Are UGGs considered fashionable?", "input": "", "output": "UGGs were originally worn in Australia by surfers and in the 90\u2019s became mainstream. However since then, they\u2019ve became unpopular and even described as \u201cbasic girl\u201d footwear.  Recently, their popularity has had a resurgence. While the question of whether they are fashionable is largely debated, the comfort they provide is undeniable.", "category": "IT"}, {"instruction": "What is the company zoom?", "input": "", "output": "Zoom is a video communication protocol used by many companies today.  Zoom has been used by school to conduct at home schooling during the COVID-19 pandemic.  Zoom is also used by big Fortune 500 corporations to conduct business meetings internally with employees and externally with customers and other accounts.  The virtual interaction offered by zoom is a great alternative to save costs on in-person meetings where physical travel is required.  The company was founded in 2011 and has about 8500 employees as of 2023.", "category": "IT"}, {"instruction": "Who is Lee Jung-sik", "input": "Lee Jung-sik (born July 6, 1995) is a South Korean actor and model. He is best known for his starring roles in the web series I Have Three Boyfriends (2019) and Summer Guys (2021).", "output": "Lee Jung-sik (born July 6, 1995) is a South Korean actor and model. He is best known for his starring roles in the web series I Have Three Boyfriends (2019) and Summer Guys (2021).", "category": "IT"}, {"instruction": "Can cats communicate?", "input": "Cats need to communicate with each other for bonding, and relating with each other; they need to collaborate, play, and share resources. When they communicate with people, they do so to get what they need or want, such as food, affection, or play.\n\nCats use a range of communication methods such as vocal, visual, tactile and olfactory. Cats mostly meow to communicate with people, rarely with other animals. As such, the cats' communication methods have been significantly affected by domestication. Up to 21 different cat vocalizations have been studied. It is now evident that domestic cats meow more than feral cats.", "output": "Cat vocalizations have been categorized according to a range of characteristics. Originally suggested by Mildred Moelk, cat sounds are often divided into three main classes:\n\nsounds produced with the mouth closed (murmurs \u2013 purring, trilling)\nsounds produced when the mouth is first opened and then gradually closed (meowing, howling, yowling)\nsounds produced with the mouth held tensely open in the same position (growls, snarls, hisses, spits, chattering, and chirping).\nIn 1944, Moelk published the first phonetic study of cat sounds.[4] She listened very carefully to her own cats and organized their sounds into 16 phonetic patterns divided into three main categories. She also used a phonetic alphabet to transcribe or write down the different sounds.[5] She claimed that cats had six different forms of meows to represent friendliness, confidence, dissatisfaction, anger, fear and pain. Moelk classified eight other sounds involved in mating and fighting by listening to the animals in her yard and on the street.\n\nBrown et al. categorized vocal responses of cats according to the behavioral context: during separation of kittens from mother cats, during food deprivation, during pain, prior to or during threat or attack behavior, as in disputes over territory or food, during a painful or acutely stressful experience, as in routine prophylactic injections and during kitten deprivation.[6] Less commonly recorded calls from mature cats included purring, conspecific greeting calls or murmurs, extended vocal dialogues between cats in separate cages, \"frustration\" calls during training or extinction of conditioned responses.\n\nMiller classified vocalizations into five categories according to the sound produced: the purr, chirr, call, meow and growl/snarl/hiss.[7]\n\nOwens et al. categorized cat vocalizations based on their acoustic structures. There are three categories: tonal sounds, pulse sounds, and broadband sounds. Tonal sounds are further categorized into groups of harmonically structured sounds or regular tonal sounds. Pulse vocalizations are separated into pulse bursts and hybrid pulse bursts with tonal endings. Broadband sounds are separated into four groups: non-tonal broadband sounds, broadband sounds with tonal beginnings, broadband sounds with short tonal elements, and broadband sounds with long tonal endings.[8]", "category": "IT"}, {"instruction": "What was the relationship of the person who became MD at Grandmaster Capital Management to Paypal?", "input": "\"Individuals whom the media refers to as members of the PayPal Mafia include:[5][4]\n\nPeter Thiel, PayPal founder and former chief executive officer who is sometimes referred to as the \"\"don\"\" of the PayPal Mafia\nMax Levchin, founder and chief technology officer at PayPal\nElon Musk, co-founder of Zip2, founder of X.com which merged with Confinity to form PayPal. Musk later founded SpaceX, co-founded Tesla, Inc., co-founded OpenAI, Neuralink, founded The Boring Company, and became owner of Twitter, Inc.\nDavid O. Sacks, former PayPal COO who later founded Geni.com and Yammer\nScott Banister, early advisor and board member at PayPal.[6]\nRoelof Botha, former PayPal CFO who later became a partner and Senior Steward of venture capital firm Sequoia Capital\nSteve Chen, former PayPal engineer who co-founded YouTube.\nReid Hoffman, former executive vice president who later founded LinkedIn and was an early investor in Facebook, Aviary\nKen Howery, former PayPal CFO who became a partner at Founders Fund\nChad Hurley, former PayPal web designer who co-founded YouTube\nEric M. Jackson, who wrote the book The PayPal Wars and became chief executive officer of WND Books and co-founded CapLinked\nJawed Karim, former PayPal engineer who co-founded YouTube\nJared Kopf, former PayPal (executive assistant to Peter Thiel) who co-founded Slide, HomeRun and NextRoll\nDave McClure, former PayPal marketing director, a super angel investor for start up companies\nAndrew McCormack, co-founder of Valar Ventures\nLuke Nosek, PayPal co-founder and former vice president of marketing and strategy, became a partner at Founders Fund with Peter Thiel and Ken Howery\nKeith Rabois, former executive at PayPal who later worked at LinkedIn, Slide, Square, Khosla Ventures, and currently with Peter Thiel at Founders Fund, and personally invested in Tokbox, Xoom, Slide, LinkedIn, Geni, Room 9 Entertainment, YouTube, and Yelp\nJack Selby, former vice president of corporate and international development at PayPal who co-founded Clarium Capital with Peter Thiel, later becoming managing director of Grandmaster Capital Management\nPremal Shah, former product manager at PayPal, became the founding president of Kiva.org\nRussel Simmons, former PayPal engineer who co-founded Yelp Inc.\nJeremy Stoppelman, former vice president of technology at PayPal who later co-founded Yelp\nYishan Wong, former engineering manager at PayPal, later worked at Facebook and became the CEO of Reddit\"", "output": "Jack Selby was the former vice president of corporate and international development at PayPal and later became the managing director of Grandmaster Capital Management", "category": "IT"}, {"instruction": "What is SaaS?", "input": "", "output": "Software as a service (SaaS) allows users to connect to and use cloud-based apps over the Internet. Common examples are email, calendaring, and office tools (such as Microsoft Office 365).\n\nSaaS provides a complete software solution that you purchase on a pay-as-you-go basis from a cloud service provider. You rent the use of an app for your organization, and your users connect to it over the Internet, usually with a web browser. All of the underlying infrastructure, middleware, app software, and app data are located in the service provider\u2019s data center. The service provider manages the hardware and software, and with the appropriate service agreement, will ensure the availability and the security of the app and your data as well. SaaS allows your organization to get quickly up and running with an app at minimal upfront cost.", "category": "IT"}, {"instruction": "What family was well known for their power in Renaissance Italy?", "input": "", "output": "The Medici family was a famously influential presence in Renaissance Italy", "category": "IT"}, {"instruction": "Classify each of the shapes as having 3, 4, or 5 sides: square, rectangle, pentagon, rhombus, triangle", "input": "", "output": "Square: 4 Sides\nRectangle: 4 Sides\nPentagon: 5 Sides\nRhombus: 4 Sides\nTriangle: 3 Sides", "category": "IT"}, {"instruction": "Is the headquarters of Surrey County Council in Surrey?", "input": "", "output": "In 2021 Surrey County Council in England finally moved its headquarters back into its area of jurisdiction from its former location in the Royal Borough of Kingston upon Thames. The new headquarters, in the Surrey town of Reigate, are on a site previously occupied by Canon UK. Historically Kingston had been part of the county of Surrey until it was made part of Greater London in 1965. Postal addresses in Kingston still often include Surrey despite not being part of the county anymore.", "category": "IT"}, {"instruction": "Tell me whether these are famous as actors or authors: Russell Crowe, Tom Hanks, Jamie Lee Curtis, Joanne Woodward, Sara Jessica Parker, Tom Cruise, Alexander Dumas, JK Rowling, Ingrid Bergman, Grace Kelly,  Judi Dench, Kate Winslet, Jodie Foster, Doris Day, William Shakespeare, Jalal al-Din Muhammad Rumi", "input": "", "output": "The famous actors from this list are, Russell Crowe, Tom Hanks, Jamie Lee Curtis, Joanne Woodward, Sara Jessica Parker, Tom Cruise, Ingrid Bergman, Grace Kelly, Judi Dench, Kate Winslet, Jodie Foster and Doris Day.  The famous authors are, Alexander Dumas, JK Rowling, William Shakespeare and Jalal Al-Din Muhammad Rumi.", "category": "IT"}, {"instruction": "Write a few sentences about why people who live in the Bay Area of California are moving to the Sacramento area.", "input": "", "output": "The Bay Area of California has always been severely impacted by a high concentration of people who largely moved there for work. In 2020, the COVID-19 pandemic forced many organizations to allow for remote work. As a result, many people have moved elsewhere in California while still being able to work at their same job. Many chose to move to the Greater Sacramento area, as it offeres a lower cost of living, warmer weather, and a slower pace of life, all while being within a few hours of the Bay Area if need for travel every reappears.", "category": "IT"}, {"instruction": "Tell me a terrifying fact about moray eels.", "input": "", "output": "Moray eels have two sets of jaws, the outer jaws and the inner, pharyngeal jaws. The first set of jaw grabs the prey and the pharyngeal jaws pull the prey drag the prey into the eel's throat.", "category": "IT"}, {"instruction": "Give this paragraph abount Battle of Adwa between Ethiopia and Italy, who were the commanders on Ethiopian side.", "input": "Estimates for the Ethiopian forces under Menelik range from a low of 73,000 to a high of over 100,000 outnumbering the Italians by an estimated five times.[17][18] The forces were divided among Emperor Menelik, Empress Taytu Betul, Ras Wale Betul, Ras Mengesha Atikem, Ras Mengesha Yohannes, Ras Alula Engida (Abba Nega), Ras Mikael of Wollo, Ras Makonnen Wolde Mikael,Fitawrari Habte Giyorgis, Fitawrari[nb 3] Gebeyyehu, and Negus[nb 4] Tekle Haymanot Tessemma.[19] In addition, the armies were followed by a similar number of camp followers who supplied the army, as had been done for centuries.[20] Most of the army consisted of riflemen, a significant percentage of whom were in Menelik's reserve; however, there were also a significant number of cavalry and infantry only armed with lances (those with lances were referred to as \"lancer servants\").[20] The Kuban Cossack army officer N. S. Leontiev who visited Ethiopia in 1895,[21][22] according to some sources, led a small team of Russian advisers and volunteers.[23][24][25] Other sources assert that Leontiev did not in fact participate in the battle, rather he visited Ethiopia first unofficially in January 1895, and then officially as a representative of Russia in August 1895, but then left later that year, returning only after the Battle of Adwa", "output": "Emperor Menelik, Empress Taytu, Ras Makonnen, Ras Wale Betul, Tekle Haymanot Tessemma, Ras Mengesha Yohannes, Ras Mikael were the top commanders and leaders.", "category": "IT"}, {"instruction": "How do people get where they want to go", "input": "", "output": "People will typically look at a map and search for their destination. Then they follow the instructions on the map to get to their destination", "category": "IT"}, {"instruction": "What are some common types of lettuce used in salad and other dishes?", "input": "", "output": "Common types of lettuce used in salads and other dishes include iceberg lettuce, butter lettuce, red leaf lettuce, green lettuce, frisee, endive, escarole, arugula, spring mix, and baby kale.", "category": "IT"}, {"instruction": "Where can I go to find out what is on the ballot for any given election in Wisconsin?", "input": "", "output": "The MyVote.wi.gov site has several resources to help Wisconsin voters.  One resource allows you to enter in your address, and based on that address, it will show you what a sample ballot will look like.  This helps voters to see what positions or questions will appear on the ballot so that they can research them prior to voting. Providing referendum questions in advance allows voters to read through them to make sure they understand what is being asked, as the language used in these questions is sometimes legalistic and easier to process outside of the pressure of the voting booth. This website is provided by the Wisconsin Elections Commission, which is a bipartisan commission charged with implementing Wisconsin's election statutes.", "category": "IT"}, {"instruction": "Give me a list of the best movies I've never seen.", "input": "", "output": "Nosferatu, The Godfather, The Godfather Part II, 12 Angry Men, Good Fellas, One Flew Over the Cuckoo's Next, Seven Samurai, Life is Beautiful, Spirited Away, Parasite, Whiplash, Once Upon a Time in America, High and Low, Eternal Sunshine of the Spotless Mind, Tenet, Full Metal Jacket, Pan's Labyrinth", "category": "IT"}, {"instruction": "Give me a list of Premier League winners and runners-up in the last 5 years.", "input": "", "output": "2021-2022: Winner Manchester City, Runner-up Liverpool\n2020-2021: Winner Manchester City, Runner-up Manchester United\n2019-2020: Liverpool, Runner-up Manchester City\n2018-2019: Manchester City, Runner-up Liverpool\n2017-2018: Manchester City, Runner-up Manchester United", "category": "IT"}, {"instruction": "Of the cities listed, which was furthest from the station?", "input": "In 1899 the Great Central Railway completed its main line to London through the southernmost part of the parish. The nearest station was Finmere for Buckingham, which was just over the Oxfordshire county boundary on the main road between Buckingham and Bicester and only 3\u20444 mile (1.2 km) from Barton Hartshorn. The station was 5 miles (8 km) from Buckingham, more than 1 mile (1.6 km) from Finmere and was actually in Shelswell parish next to the village of Newton Purcell. In about 1922 the Great Central renamed the station Finmere. British Railways closed the station in 1963 and the line in 1966.", "output": "Buckingham city was the furthest, 5 miles from the station.", "category": "IT"}, {"instruction": "Which is an imperial or a metric measurement: pint, millilitres", "input": "", "output": "pint is imperial, millilitres is metric", "category": "IT"}, {"instruction": "What is Allsvenskan?", "input": "", "output": "Allsvenskan is the first soccer league in Sweden. It has 16 teams and was founded 1924.", "category": "IT"}, {"instruction": "How would you describe genomics?", "input": "", "output": "Genomics is the study of the genetic material of an organism, including the structure, function, and regulation of genes. Genomics is a powerful tool that can be used to identify and diagnose genetic disorders, develop new treatments, and understand the genetic underpinnings of complex diseases.", "category": "IT"}, {"instruction": "Explain Storage Credential and External locations used in conjunction with Unity Catalog to a five year old.", "input": "", "output": "Sure, Unity Catalog is a service, just like any other service we use in our daily lives, such as going to a car wash station to get our car washed. Similarly, Unity Catalog provides a service that helps protect data assets and gives the owner of those assets the power to decide who they want to provide access to see these assets.\nStorage Credential is like a safe with a unique key. If anyone wants to borrow something from the safe, they have to provide that key to open the safe. Generally, safe owners don't want this key to be given to everyone, so they create external locations specific to everyone's needs. Storage credential owners can create multiple safes and distribute their keys instead. So, in summary, Storage Credential and External Locations work together to unlock a secret.", "category": "IT"}, {"instruction": "Give me a list of things to ask while triaging a support ticket", "input": "", "output": "1) Is this issue being observed in your production or non production environment\n2) If its in production since how long it has been in production\n3) Are you aware of any changes done by you or your team recently that could have contributed to this failure. Like upgrades of software and libraries. Or changes in infrastructure. Changes in user interaction\n4) If the response to question #3 is no, please request for verification\n5) Understand if this is impacting single user, multiple users or all users. Along the same lines understand if this is impacting just one use case, multiple use cases or all use cases\n6) Understand the precise symptom of the issue\n7) Understand the business impact. As in financial impact or delivery (SLA) impact from this issue.\n8) Understand if there is interest in workarounds to get unblocked. Or they seek full RCA with a proper fix.", "category": "IT"}, {"instruction": "Was the hermit hummingbird hawkmoth described in the 20th or 21st century?", "input": "Macroglossum insipida, the hermit hummingbird hawkmoth, is a moth of the family Sphingidae. It was described by Arthur Gardiner Butler in 1875.", "output": "Neither.  It was first described by Arthur Gardiner Butler in 1875, which is in the 19th century.", "category": "IT"}, {"instruction": "Where are the best places to buy hardware supplies?", "input": "", "output": "There are several places where you can buy hardware supplies. This could include Home Depot, Lowes, Amazon, ACE Hardware, Lowes or Target.", "category": "IT"}, {"instruction": "What are some modern examples of companies that have harnessed the power of network effects?", "input": "In economics, a network effect (also called network externality or demand-side economies of scale) is the phenomenon by which the value or utility a user derives from a good or service depends on the number of users of compatible products. Network effects are typically positive, resulting in a given user deriving more value from a product as more users join the same network. The adoption of a product by an additional user can be broken into two effects: an increase in the value to all other users ( \"total effect\") and also the enhancement of other non-users' motivation for using the product (\"marginal effect\").[1]\n\nNetwork effects can be direct or indirect. Direct network effects arise when a given user's utility increases with the number of other users of the same product or technology, meaning that adoption of a product by different users is complementary.[2] This effect is separate from effects related to price, such as a benefit to existing users resulting from price decreases as more users join. Direct network effects can be seen with social networking services, including Twitter, Facebook, Airbnb, Uber, and LinkedIn; telecommunications devices like the telephone; and instant messaging services such as MSN, AIM or QQ.[3] Indirect (or cross-group) network effects arise when there are \"at least two different customer groups that are interdependent, and the utility of at least one group grows as the other group(s) grow\".[4] For example, hardware may become more valuable to consumers with the growth of compatible software.\n\nNetwork effects are commonly mistaken for economies of scale, which describe decreasing average production costs in relation to the total volume of units produced. Economies of scale are a common phenomenon in traditional industries such as manufacturing, whereas network effects are most prevalent in new economy industries, particularly information and communication technologies. Network effects are the demand side counterpart of economies of scale, as they function by increasing a customer's willingness to pay due rather than decreasing the supplier's average cost.[5]\n\nUpon reaching critical mass, a bandwagon effect can result. As the network continues to become more valuable with each new adopter, more people are incentivized to adopt, resulting in a positive feedback loop. Multiple equilibria and a market monopoly are two key potential outcomes in markets that exhibit network effects. Consumer expectations are key in determining which outcomes will result.", "output": "Examples of modern companies that have harnessed the power of network effects include social networking services such as: TikTok, Youtube, Twitter, Instagram, Facebook, Airbnb, Uber, and LinkedIn.", "category": "IT"}, {"instruction": "I am planning a trip to Spain. I am interested in culture, museums and art, but I also want to go to the beach and have great food. What are 5 places that I should definitely visit?", "input": "", "output": "Spain is a large country where you can find all of those things. This would be my top 5, but there are many other places that are worth it. Since you are not specifying the time you will spend in Spain, I will exclude the islands (Balearic Islands and Canary Islands) from the list:\n\n- Madrid: the capital city of Spain has some of the top museums in Europe, like the Prado or the Reina Sofia Museums. It is a city with a great atmosphere, and has some of the best restaurants in the country.\n- Barcelona: a mediterranean global city with a lot to offer - from Antonio Gaudi's architectural masterpieces to beaches and awesome views of the Mediterranean sea.\n- Galicia: a region located in northwestern Spain. Not very touristic, but with amazing places like Santiago de Compostela, and amazing restaurants and gastronomy.\n- Sevilla: the largest city in Southern Spain, full of history, museums and amazing places to eat.\n- Costa del Sol: one of the best places in Spain to visit the beach and get some sunlight. As its name states (Sun Coast), you will get sunny weather all year round.", "category": "IT"}, {"instruction": "When did Porsche stop producing air-cooled engines in the 911?", "input": "The Porsche 911 (pronounced Nine Eleven or in German: Neunelfer) is a two-door 2+2 high performance rear-engined sports car introduced in September 1964 by Porsche AG of Stuttgart, Germany. It has a rear-mounted flat-six engine and originally a torsion bar suspension. The car has been continuously enhanced through the years but the basic concept has remained unchanged.[1] The engines were air-cooled until the introduction of the 996 series in 1998.", "output": "Porsche stopped producing air-cooled engines in the 911 in 1998 with the 996 series.", "category": "IT"}, {"instruction": "Give me a bulleted list of the 5 most recent Pakistani Prime Ministers", "input": "", "output": "- Mian Muhammad Shehbaz Sharif\n- Mr. Imran Khan\n- Justice (Retd) Nasir-ul-Mulk (Caretaker)\n- Mr. Shahid Khaqan Abbasi\n- Mr. Muhammad Nawaz Sharif", "category": "IT"}, {"instruction": "Briefly summarize this paragraph on a Pearl Harbor conspiracy theory.", "input": "\"Robert Stinnett's Day of Deceit suggests a memorandum prepared by Commander McCollum was central to U.S. policy in the immediate pre-war period. Stinnett claims the memo suggests only a direct attack on U.S. interests would sway the American public (or Congress) to favor direct involvement in the European war, specifically in support of the British. An attack by Japan would not, could not, aid Britain. Although the memo was passed to Captains Walter Anderson and Dudley Knox, two of Roosevelt's military advisors, on October 7, 1940, there is no evidence to suggest Roosevelt ever saw it, while Stinnett's claims of evidence he did is nonexistent.[30] Moreover, although Anderson and Knox offered eight specific plans to aggrieve the Japanese Empire and added, \"If by these means Japan could be led to commit an overt act of war, so much the better,\" of the eight \"plans\" (actions to be taken) offered in the memo, many if not all were implemented, but there is considerable doubt the McCollum memo was the inspiration.[citation needed] Nonetheless, in Day of Deceit Stinnett claims all action items were implemented.[31] Yet there were numerous instances of members of the Roosevelt Administration insisting on not provoking Japan. Mark Parillo, in his essay The United States in the Pacific, wrote, \"[t]hese theories tend to founder on the logic of the situation. Had Roosevelt and other members of his administration known of the attack in advance, they would have been foolish to sacrifice one of the major instruments needed to win the war just to get the United States into it.\"[32] Furthermore, on 5 November 1941, in a joint memo, Stark, CNO, and Marshall, Army Chief of Staff, warned, \"if Japan be defeated and Germany remain undefeated, decision will still not have been reached.... War between the United States and Japan should be avoided....\"[33] Additionally, in a 21 November 1941 memo, Brigadier Leonard T. Gerow, head of Army War Plans, stated, \"one of our present major objectives [is] the avoidance of war with Japan...[and to] insure continuance of material assistance to the British.\"[34] He concluded, \"[I]t is of grave importance to our war effort in Europe...\"[34] Furthermore, Churchill himself, in a 15 May 1940 telegram, said he hoped a U.S. commitment to aid Britain would \"quiet\" Japan, following with a 4 October message requesting a USN courtesy visit to Singapore aimed at \"preventing the spreading of the war\"[35] And Stark's own Plan Dog expressly stated, \"Any strength that we might send to the Far East would...reduce the force of our blows against Germany...\"[36] Roosevelt could scarcely have been ignorant of Stark's views, and war with Japan was clearly contrary to Roosevelt's express wish to aid Britain.\"\nhttps://en.wikipedia.org/wiki/Pearl_Harbor_advance-knowledge_conspiracy_theory", "output": "This paragraph summarizes both Robert Stinnett's argument that the US government intentionally provoked the Japanese attack on Pearl Harbor and the counter-arguments. Stinnett's case is based largely on a memo from Commander McCollom stating that the only way to US population and its elected officials could be convinced to enter WWII would be if there was a direct attack on the US. Stinnett argues that the government then did everything recommended in the memo in order to compel the Japanese to attack. According to this paragraph, arguments that disprove Stinnett's claim include the fact that the military would never endanger the fleet in Pearl Harbor needed to win the war in a plan to convince the American people to join the way. In addition, there is compelling evidence that Roosevelt was attempting to minimize the conflict with Japan in order to focus on aid to England.", "category": "IT"}, {"instruction": "Which trophies have West Ham won?", "input": "West Ham have been winners of the FA Cup three times (1964, 1975 and 1980) and runners-up twice (1923 and 2006). The club have reached two major European finals, winning the European Cup Winners' Cup in 1965 and finishing runners-up in the same competition in 1976. West Ham also won the Intertoto Cup in 1999. They are one of eight clubs never to have fallen below the second tier of English football, spending 63 of 95 league seasons in the top flight, up to and including the 2020\u201321 season. The club's highest league position to date came in 1985\u201386, when they achieved third place in the then First Division.", "output": "West Ham won the FA Cup in 1964, 1975 and 1980. They won the European Cup Winner's Cup in 1965 and the Intertoto cup in 1999.", "category": "IT"}, {"instruction": "What is Active Directory?", "input": "", "output": "Active Directory is a directory service developed by Microsoft for Windows domain networks. It is included in most Windows Server operating systems as a set of processes and services. Initially, Active Directory was used only for centralized domain management. However, Active Directory eventually became an umbrella title for a broad range of directory-based identity-related services.", "category": "IT"}, {"instruction": "Who invented the computer?", "input": "", "output": "Charles Babbage is widely credited with having conceived the idea for the first computer, and indeed he has been referred to as the \"father of computing.\" His designs led to the creation of the world's first digital device - \"the Difference Engine\". Babbage's ideas were picked up by Ada Lovelace, who described an algorithm to compute Bernoulli numbers using one of his proposed devices. In documenting this algorithm, Lovelace has been recognised as the world's first computer programmer, and in the notes that accompanied it she is also credited with making the first distinction between hardware and software. \n\nAlan Turing is often recognised as being the father of modern computer science, and for developing the first modern computers. During the Second World War, Turing's devices broke the Enigma Code, which was used by the Germans to encode all of their military communications. In so doing, Turing is credited with saving millions of lives. After the war, Turing published a detailed design for an \"Automatic Computing Engine\" (ACE), which very much a precursor of the modern computer, even storing its programs in memory. \n\nIn 1950, Turing published a paper describing what become known as the \"Turing Test\" - a method to compare human and machine outputs. This paper is widely seen as being a seminal moment in the development of Artificial Intelligence.", "category": "IT"}, {"instruction": "What is the Phillips curve?", "input": "", "output": "In economics, the Phillips curve is the short-run tradeoff between the unemployment rate and inflation. The relationship implies a negative correlation such that an increase in the unemployment rate is associated with a decrease in wage rate. Conversely, during times in which the unemployment rate is quite low (strong demand for labor) the growth of wages is typically observed to be quite high, or increasing. While this phenomenon has been observed  in the short-run there are some periods in which the relationship does not hold.", "category": "IT"}, {"instruction": "Extract the essential tools for a mini survival kit from the following Wikipedia article.", "input": "Mini survival kits or \"Altoids\" tin survival kits are small kits that contain a few basic survival tools. These kits often include a small compass, waterproof matches, minimum fishing tackle, large plastic bag, small candle, jigsaw blade, craft knife or scalpel blade, and/or a safety pin/s. Pre-packaged survival kits may also include instructions in survival techniques such as fire-starting or first aid methods. In addition, paracord can be wrapped around the tin. The paracord can be used for setting up an emergency shelter or snaring small animals. They are designed to fit within a container roughly the size of a mint tin.", "output": "Small compass, waterproof matches, minimum fishing tackle, large plastic bag, small candle, jigsaw blade, craft knife, and safety pins.", "category": "IT"}, {"instruction": "Think up a short list of the best US Presidents", "input": "", "output": "Abraham Lincoln, George Washington, FDR, Ronald Reagan, Dwight Eisenhower, Harry Truman, Thomas Jefferson", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Dholak, Sitar", "input": "", "output": "Sitar is string, Dholak is percussion.", "category": "IT"}, {"instruction": "Why do people like to ski?", "input": "", "output": "Skiing is a great way to get out into the open air in the winter months.  It also provides a great way to stay active, challenge yourself, be with family members, and enjoy the great outdoors.", "category": "IT"}, {"instruction": "Who is the visual of the kpop group Twice?", "input": "", "output": "Tzuyu Chou is generally regarded as the visual of Twice, though some may disagree.", "category": "IT"}, {"instruction": "Where was the first capital of Alaska?", "input": "", "output": "Alaska's first capital was in Sitka, following the transfer of the Alaska territory from Russia to the United States in 1867, and remained the capital until 1906 when it transferred to Juneau.", "category": "IT"}, {"instruction": "What is the difference between football and soccer?", "input": "", "output": "Whilst some believe that football and soccer are different sports they are in fact exactly the same game and simply differ in naming conventions. In England fans are passionate about the fact it should only be called by its historic original name. In North America however, where 'American Football' is a bigger sport and soccer is developing at pace, soccer is the go to name.", "category": "IT"}, {"instruction": "Why is steam important when making bread?", "input": "", "output": "Steam is important when making bread because it helps keep the outside from setting before the inside finishes rising. In addition, steam transfers more efficiently than dry air allowing for better expansion.", "category": "IT"}, {"instruction": "What are three tips to a successful fishing outing?", "input": "", "output": "1. Be prepared. Check the weather and ensure you have adequate clothing for the expected weather. Bring enough food and water to keep yourself comfortable while out on the boat.\n2. Go at the best time of day. Most freshwater fish have a relatively predictable daily routine and will bite best very early in the morning (just before or at sunrise) and later in the evening, a couple hours before sunset.\n3. Fish in the right place! Most freshwater fish have an environment preference. For example, summer bass like to be in weeds and other cover; spring walleye can be found in more shallow water with sandy/rocky bottoms; fall pike and musky ambush prey from thick weed beds. If you want to catch a lot of fish, you need to be fishing where the fish are!", "category": "IT"}, {"instruction": "Extract the awards that Caitlin Clark won during her Junior year season at Iowa State.", "input": "Clark won the AP Player of the Year, Naismith College Player of the Year, USBWA National Player of the Year and the John R. Wooden Award and the Wade Trophy.[86][87][88][89] She was a unanimous first-team All-American for a second straight season, earning first-team recognition from the AP and USBWA and making the WBCA Coaches' All-America Team.[87][90][91] Clark received the Nancy Lieberman award for her second straight season.[92]", "output": "AP Player of the Year, Naismith College Player of the year, USBWA National Player of the Year, John R. Wooden Award, Wade Trophy, Nancy Lieberman award", "category": "IT"}, {"instruction": "What is observer bias", "input": "Observer bias is one of the types of detection bias and is defined as any kind of systematic divergence from accurate facts during observation and the recording of data and information in studies.[1] The definition can be further expanded upon to include the systematic difference between what is observed due to variation in observers, and what the true value is.[2]\n\nObserver bias is the tendency of observers to not see what is there, but instead to see what they expect or want to see. This is a common occurrence in the everyday lives of many and is a significant problem that is sometimes encountered in scientific research and studies.[3] Observation is critical to scientific research and activity, and as such, observer bias may be as well.[4] When such biases exist, scientific studies can result in an over- or underestimation of what is true and accurate, which compromises the validity of the findings and results of the study, even if all other designs and procedures in the study were appropriate.[5]\n\nObservational data forms the foundation of a significant body of knowledge. Observation is a method of data collection and falls into the category of qualitative research techniques. There are a number of benefits of observation, including its simplicity as a data collection method and its usefulness for hypotheses. Simultaneously, there are many limitations and disadvantages in the observation process, including the potential lack of reliability, poor validity, and faulty perception. Participants\u2019 observations are widely used in sociological and anthropological studies, while systematic observation is used where researchers need to collect data without participants direct interactions. The most common observation method is naturalistic observation, where subjects are observed in their natural environments with the goal to assess the behaviour in an intervention free and natural setting.\n\nObserver bias is especially probable when the investigator or researcher has vested interests in the outcome of the research or has strong preconceptions. Coupled with ambiguous underlying data and a subjective scoring method, these three factors contribute heavily to the incidence of observer bias.[6]\n\nExamples of cognitive biases include:\n\nAnchoring \u2013 a cognitive bias that causes humans to place too much reliance on the initial pieces of information they are provided with for a topic. This causes a skew in judgement and prevents humans and observers from updating their plans and predictions as appropriate.\nBandwagon effect \u2013 the tendency for people to \u201cjump on the bandwagon\u201d with certain behaviours and attitudes, meaning that they adopt particular ways of doings things based on what others are doing.\nBias blind spot \u2013 the tendency for people to recognize the impact of bias on others and their judgements, while simultaneously failing to acknowledge and recognize the impact that their own biases have on their own judgement.\nConfirmation bias \u2013 the tendency for people to look for, interpret, and recall information in such a way that their preconceived beliefs and values are affirmed.\nGuilt and innocence by association bias \u2013 the tendency for people to hold an assumption that individuals within a group share similar characteristics and behaviours, including those that would hail them as innocent or guilty.\nHalo effect \u2013 the tendency for the positive impressions and beliefs in one area around a person, brand, company, product or the like to influence an observers opinions or feelings in other unrelated areas.\nFraming effect \u2013 the tendency for people to form conclusions and opinions based on whether the pertinent relevant is provided to them with positive or negative connotations.\nRecency effect \u2013 the tendency for more recent pieces of information, ideas, or arguments to be remembered more clearly than those that preceded.", "output": "Observer bias is one of the types of detection bias and is defined as any kind of systematic divergence from accurate facts during observation and the recording of data and information in studies. The definition can be further expanded upon to include the systematic difference between what is observed due to variation in observers, and what the true value is.\n\nObserver bias is the tendency of observers to not see what is there, but instead to see what they expect or want to see. This is a common occurrence in the everyday lives of many and is a significant problem that is sometimes encountered in scientific research and studies. Observation is critical to scientific research and activity, and as such, observer bias may be as well. When such biases exist, scientific studies can result in an over- or underestimation of what is true and accurate, which compromises the validity of the findings and results of the study, even if all other designs and procedures in the study were appropriate.\n\nObservational data forms the foundation of a significant body of knowledge. Observation is a method of data collection and falls into the category of qualitative research techniques. There are a number of benefits of observation, including its simplicity as a data collection method and its usefulness for hypotheses. Simultaneously, there are many limitations and disadvantages in the observation process, including the potential lack of reliability, poor validity, and faulty perception. Participants\u2019 observations are widely used in sociological and anthropological studies, while systematic observation is used where researchers need to collect data without participants direct interactions. The most common observation method is naturalistic observation, where subjects are observed in their natural environments with the goal to assess the behaviour in an intervention free and natural setting.\n\nObserver bias is especially probable when the investigator or researcher has vested interests in the outcome of the research or has strong preconceptions. Coupled with ambiguous underlying data and a subjective scoring method, these three factors contribute heavily to the incidence of observer bias.\n\nExamples of cognitive biases include:\n\nAnchoring \u2013 a cognitive bias that causes humans to place too much reliance on the initial pieces of information they are provided with for a topic. This causes a skew in judgement and prevents humans and observers from updating their plans and predictions as appropriate.\n\nBandwagon effect \u2013 the tendency for people to \u201cjump on the bandwagon\u201d with certain behaviours and attitudes, meaning that they adopt particular ways of doings things based on what others are doing.\n\nBias blind spot \u2013 the tendency for people to recognize the impact of bias on others and their judgements, while simultaneously failing to acknowledge and recognize the impact that their own biases have on their own judgement.\n\nConfirmation bias \u2013 the tendency for people to look for, interpret, and recall information in such a way that their preconceived beliefs and values are affirmed.\n\nGuilt and innocence by association bias \u2013 the tendency for people to hold an assumption that individuals within a group share similar characteristics and behaviours, including those that would hail them as innocent or guilty.\n\nHalo effect \u2013 the tendency for the positive impressions and beliefs in one area around a person, brand, company, product or the like to influence an observers opinions or feelings in other unrelated areas.\n\nFraming effect \u2013 the tendency for people to form conclusions and opinions based on whether the pertinent relevant is provided to them with positive or negative connotations.\n\nRecency effect \u2013 the tendency for more recent pieces of information, ideas, or arguments to be remembered more clearly than those that preceded.", "category": "IT"}, {"instruction": "Who is the lead singer of Korn?", "input": "", "output": "Jonathan Houseman Davis is the lead singer of nu-metal band, Korn.", "category": "IT"}, {"instruction": "When did the Post Office in Mission Beach first open?", "input": "In the late 1920s after the construction of a road from El Arish, the area became a popular camping place.[23] It was known as Mission Beach due to the mistaken belief that the Hull River Aboriginal Settlement previously located in the region was a religious mission.[24] Mission Beach developed into a town during the 1940s and 50s with the Mission Beach Post Office opening on 15 December 1949.[25]", "output": "Mission Beach Post Office opened on 15 December 1949.", "category": "IT"}, {"instruction": "Based on the following paragraph, list the Himalayan peaks that were surveyed and identified during the 19th century.", "input": "In 1802, the British began the Great Trigonometrical Survey of India to fix the locations, heights, and names of the world's highest mountains. Starting in southern India, the survey teams moved northward using giant theodolites, each weighing 500 kg (1,100 lb) and requiring 12 men to carry, to measure heights as accurately as possible. They reached the Himalayan foothills by the 1830s, but Nepal was unwilling to allow the British to enter the country due to suspicions of their intentions. Several requests by the surveyors to enter Nepal were denied.[16]\n\nThe British were forced to continue their observations from Terai, a region south of Nepal which is parallel to the Himalayas. Conditions in Terai were difficult because of torrential rains and malaria. Three survey officers died from malaria while two others had to retire because of failing health.[16]\n\nNonetheless, in 1847, the British continued the survey and began detailed observations of the Himalayan peaks from observation stations up to 240 km (150 mi) distant. Weather restricted work to the last three months of the year. In November 1847, Andrew Waugh, the British Surveyor General of India, made several observations from the Sawajpore station at the east end of the Himalayas. Kangchenjunga was then considered the highest peak in the world, and with interest, he noted a peak beyond it, about 230 km (140 mi) away. John Armstrong, one of Waugh's subordinates, also saw the peak from a site farther west and called it peak \"b\". Waugh would later write that the observations indicated that peak \"b\" was higher than Kangchenjunga, but given the great distance of the observations, closer observations were required for verification. The following year, Waugh sent a survey official back to Terai to make closer observations of peak \"b\", but clouds thwarted his attempts.[16]\n\nIn 1849, Waugh dispatched James Nicolson to the area, who made two observations from Jirol, 190 km (120 mi) away. Nicolson then took the largest theodolite and headed east, obtaining over 30 observations from five different locations, with the closest being 174 km (108 mi) from the peak.[16]\n\nNicolson retreated to Patna on the Ganges to perform the necessary calculations based on his observations. His raw data gave an average height of 9,200 m (30,200 ft) for peak \"b\", but this did not consider light refraction, which distorts heights. However, the number clearly indicated that peak \"b\" was higher than Kangchenjunga. Nicolson contracted malaria and was forced to return home without finishing his calculations. Michael Hennessy, one of Waugh's assistants, had begun designating peaks based on Roman numerals, with Kangchenjunga named Peak IX. Peak \"b\" now became known as Peak XV.[16]\n\nIn 1852, stationed at the survey headquarters in Dehradun, Radhanath Sikdar, an Indian mathematician and surveyor from Bengal was the first to identify Everest as the world's highest peak, using trigonometric calculations based on Nicolson's measurements.[28] An official announcement that Peak XV was the highest was delayed for several years as the calculations were repeatedly verified. Waugh began work on Nicolson's data in 1854, and along with his staff spent almost two years working on the numbers, having to deal with the problems of light refraction, barometric pressure, and temperature over the vast distances of the observations. Finally, in March 1856 he announced his findings in a letter to his deputy in Calcutta. Kangchenjunga was declared to be 8,582 m (28,156 ft), while Peak XV was given the height of 8,840 m (29,002 ft). Waugh concluded that Peak XV was \"most probably the highest in the world\".[16] Peak XV (measured in feet) was calculated to be exactly 29,000 ft (8,839.2 m) high, but was publicly declared to be 29,002 ft (8,839.8 m) in order to avoid the impression that an exact height of 29,000 feet (8,839.2 m) was nothing more than a rounded estimate.[29] Waugh is sometimes playfully credited with being \"the first person to put two feet on top of Mount Everest\".[30]", "output": "The peaks Kangchenjunga and Mount Everest in the Himalayan range were identified by surveys carried out in the 19th century.", "category": "IT"}, {"instruction": "If I give you a list of weapons, can you break them into melee and ranged. The list is knife, bow, axe, shotgun, mace, whip, rifle and cannon.", "input": "", "output": "Melee weapons include the knife, axe, mace and whip. Ranged weapons include the bow, shotgun, rifle and cannon.", "category": "IT"}, {"instruction": "There are many different types, styles and genres of dance. Categorize these dances based on the their style;\n\nMambo, Kizomba, Robot, Jazz dance, Lady hop, Rumba, west coat swing, Boogaloo, blues", "input": "", "output": "I would like to do that. Here is the list of these dances grouped by their style;\n\nLatin dances: Salsa, Bachta, Rumba, Mambo\nAfrican - American: Kizomba, Jazz dance\nDisco: Boogaloo, Robot\nSwing dance: Lady hop, west coat swing, blues.", "category": "IT"}, {"instruction": "Who is Bryan Adams", "input": "Bryan Guy Adams OC OBC FRPS (born November 5, 1959) is a Canadian musician, singer, songwriter, composer, and photographer. He has been cited as one of the best-selling music artists of all time, and is estimated to have sold between 75 million[2] and more than 100 million records and singles worldwide.[3][4][5] Adams was the most played artist on Canadian radio in the 2010s[6] and has had 25 top-15 singles in Canada and a dozen or more in each of the US, UK, and Australia.", "output": "Bryan Guy Adams was born on November 5, 1959 and is a Canadian musician, singer, songwriter, composer, and photographer. He has been cited as one of the best-selling music artists of all time, and is estimated to have sold between 75 million and more than 100 million records and singles worldwide.\n\nAdams was the most played artist on Canadian radio in the 2010s and has had 25 top-15 singles in Canada and a dozen or more in each of the US, UK, and Australia.", "category": "IT"}, {"instruction": "What steps can I take to avoid getting hit by a falling window from a skyscraper while walking about in downtown during high winds?", "input": "", "output": "Here are some steps you can take to avoid getting hit by falling windows detached from tall building by strong winds from cyclones or tornadoes: \n1. The space area close to a doorway or near windows is most likely to be affected by falling items, and it is best to stay away from buildings, trees and tall electric or telephone poles. Find an open space, far away from these objects and stay low to the ground to reduce your chances of being hit by debris.\n2. One of the safest places to avoid getting hit by falling objects is underground in a basement with no windows. Try to find underground spaces in downtown like the lower levels of buildings and malls, or the subway. \n3. If you absolutely need to be outside and close to tall buildings, try to stay alert and keep an eye out for falling debris. \n4. You might think that being inside a car would be a safe option, but vehicles are notoriously dangerous places to be in during high winds because of their susceptibility to being blown over or blown away or for their windows to explode.", "category": "IT"}, {"instruction": "What cause toe fungus?", "input": "", "output": "One common way that people can get nail fungus on their toes is walking barefoot in moist areas like locker room or public shower. You can also get a fungal infection by skin-to-skin contact, or by sharing an infected nail clipper or towel.", "category": "IT"}, {"instruction": "Tell me whether each of these positions is in soccer or baseball: shortstop, outfielder, midfielder, forward, goalie, catcher", "input": "", "output": "Shortstop: Baseball\nOutfielder: Baseball\nMidfielder: Soccer\nForward: Soccer\nGoalie: Soccer\nCatcher: Baseball", "category": "IT"}, {"instruction": "Which country is the state of Illinois apart of?", "input": "", "output": "The United States of America", "category": "IT"}, {"instruction": "What are three popular movies with Steve Carell?", "input": "", "output": "Three popular movies with Steve Carell are:\n1. The 40-Year-Old Virgin\n2. Crazy Stupid Love\n3. The Big Short", "category": "IT"}, {"instruction": "What are the main ingredients of deviled eggs and what are some unique add-in ideas?", "input": "", "output": "Traditional deviled eggs are made of boiled eggs with the yolk mixed with mayo and light seasoning. Some unique variations to try could include sriracha, avocado, bacon, jalapeno, relish, smoked salmon, curry, horseradish, dill, or feta cheese.", "category": "IT"}, {"instruction": "What is Your Lie in April about?", "input": "Fourteen-year-old piano prodigy, K\u014dsei Arima, becomes famous after winning several music competitions. When his mother Saki dies, K\u014dsei has a mental breakdown while performing at a piano recital; this results in him becoming unable to hear the sound of his piano, even though his hearing is otherwise unaffected.\n\nTwo years later, K\u014dsei has not touched the piano and views the world in monochrome. He does not focus on excelling in any activities and often spends time with his friends Tsubaki Sawabe and Ry\u014dta Watari. K\u014dsei meets Kaori Miyazono, an audacious, free-spirited, fourteen-year-old violinist whose playing style reflects her manic personality. Kaori helps K\u014dsei return to playing the piano, and shows him his playing style can be free and groundbreaking. As Kaori continues to uplift K\u014dsei's spirits, he quickly realizes he loves her, although she seems to only be interested in Ry\u014dta.\n\nDuring a performance, Kaori, who later explains that she is anemic and needs routine testing, collapses and is hospitalized. She is later diagnosed with Aplastic Anemia. She invites K\u014dsei to play with her at a gala but she does not arrive. Her health deteriorates and she becomes dejected. K\u014dsei plays a duet with a friend, which motivates Kaori to attempt a risky and potentially deadly surgery so she may possibly play with Kosei once more. While playing in the finals of the Eastern Japan Piano Competition, K\u014dsei sees Kaori's spirit accompanying him and realizes she has died during the surgery.\n\nAt her funeral, Kaori's parents give K\u014dsei a letter from Kaori that reveals she was aware of her impending death and became more free-spirited, both as a person and in her music, so she would not take her regrets to Heaven. She confesses she had been in love with K\u014dsei's piano playing since watching him perform at a concert when she was five. This inspired her to play the violin so she could play with him one day. Kaori fabricated her feelings towards Ry\u014dta so she could get closer to K\u014dsei without hurting Tsubaki, who harbored affection for K\u014dsei. She then confesses her love for him. Tsubaki comforts K\u014dsei and tells him she will be by his side. Kaori also leaves behind a picture of herself as a child, coming back from the concert that inspired her, with K\u014dsei in the background. K\u014dsei later frames this picture.", "output": "Your Lie in April is a manga and an anime about friendship through music. The protagonist Kosei Arima is a very talented piano prodigy who goes through a mental breakdown from the pressure of performing and becomes deaf to the sound of his own piano. The world becomes monotonous and depressing until he meets Kaori Miyazono, a free-spirited violinist who reminds him of how to play music freely again. However, Kaori suffers from anemia and often has to go to the hospital. Despite this, the two often play together and Kosei falls in love. Kaori passes away soon after and leaves a letter for Kosei explaining how she loved him back and his piano playing. Kosei uses this as inspiration to get back into music and play freely once more.", "category": "IT"}, {"instruction": "What is the best private Jesuit research university in Boston ?", "input": "Boston College (BC) is a private Jesuit research university in Chestnut Hill, Massachusetts. Founded in 1863, the university has more than 9,300 full-time undergraduates and nearly 5,000 graduate students. Although Boston College is classified as an R1 research university, it still uses the word \"college\" in its name to reflect its historical position as a small liberal arts college.[5][6] Its main campus is a historic district and features some of the earliest examples of collegiate gothic architecture in North America. In accordance with its Jesuit heritage, the university offers a liberal arts curriculum with a distinct emphasis on formative education and service to others.[7]\n\nUndergraduate admission is highly selective.[8] The university offers bachelor's degrees, master's degrees, and doctoral degrees through its eight colleges and schools: Morrissey College of Arts & Sciences, Carroll School of Management, Lynch School of Education and Human Development, Connell School of Nursing, Graduate School of Social Work, Boston College Law School, Boston College School of Theology and Ministry, Woods College of Advancing Studies.\n\nBoston College athletic teams are the Eagles. Their colors are maroon and gold and their mascot is Baldwin the Eagle. The Eagles compete in NCAA Division I as members of the Atlantic Coast Conference in all sports offered by the ACC. The men's and women's ice hockey teams compete in Hockey East. Boston College's men's ice hockey team has won five national championships.\n\nAlumni and affiliates of the university include governors, ambassadors, members of Congress, scholars, writers, medical researchers, Hollywood actors, and professional athletes.[10] Boston College has graduated 3 Rhodes, 22 Truman, and more than 171 Fulbright scholars.[11][12][13][14] Other notable alumni include a U.S. Speaker of the House, a U.S. Secretary of State, and chief executives of Fortune 500 companies.", "output": "Boston College is the best Jesuit private university in Boston.", "category": "IT"}, {"instruction": "Given this reference on Yorkshire Terriers, tell me where they originate from, and what are their typical size and color.", "input": "The Yorkshire Terrier is a British breed of toy dog of terrier type. It is among the smallest of the terriers and indeed of all dog breeds, with a weight of no more than 3.2 kg. It originated in the nineteenth century in the English county of Yorkshire, for which it is named. Their coats are typically tan on the head with a dark steel-grey body, but they can come in a variety of colors.\n\nIt is a playful and energetic dog, usually kept as a companion dog. It has contributed to the development of other breeds including the Silky Terrier, and also to cross-breeds such as the Yorkipoo.", "output": "Yorkshire Terrier originated from English county of Yorkshire, it has a small size with weight of no more than 3.2 kg. They have a variety of colors but typically their coats are tan on the head and dark steel-grey on the body.", "category": "IT"}, {"instruction": "Why is the Chrysler Hemi V8 so legendary?", "input": "", "output": "The Chrysler \"Hemi\" V8 are a series of American V8 internal combustion engines known for their simplicity, reliability, low cost, high power and torque output. Originally the Hemi was named for the Hemispherical shaped combustion chamber that increased power and efficiency.  The very first Hemi engines were originally developed during World War II for the Republic P-47 and the M47 Patton Tank and they were first introduced into passenger cars in 1951 as the Chrysler FirePower. \n\nThe Hemi is now in its third generation (3G) being built from 2003 to the present at Chrysler's Saltillo Engine plant in Ramos Arizpe Mexico.  The 3G Hemi's have had power outputs from 345 horsepower in the first 3G 5.7 Liter to 1025 horsepower in the 6.2 High Output Demon 170 engine.   The latest 6.2 Hemi in the Demon 170 is now one of the most powerful engines installed in a passenger car in the world at a fraction of the cost of other 1000 horsepower vehicles.\n\nAll of these factors have added up to make a tough, powerful and extremely desirable engine for automotive enthusiasts around the world cementing the Hemi Legend.", "category": "IT"}, {"instruction": "Provide all the key information about how the look and the names for the white ibis", "input": "The Australian white ibis (Threskiornis molucca) is a wading bird of the ibis family, Threskiornithidae. It is widespread across much of Australia. It has a predominantly white plumage with a bare, black head, long downcurved bill and black legs. While it is closely related to the African sacred ibis, the Australian white ibis is a native Australian bird \u2013 contrary to urban myth, it is not a feral species introduced to Australia by people, and it does not come from Egypt.[2]\n\nHistorically rare in urban areas, the Australian white ibis has established in urban areas of the east coast in increasing numbers since the late 1970s; it is now commonly seen in Wollongong, Sydney, Melbourne, Adelaide (where it mostly is in Mawson Lakes wetlands), Darwin, the Gold Coast, Brisbane and Townsville. In recent years, the bird has also become increasingly common in Perth, Western Australia, and surrounding towns in south-western Australia.[3] Populations have disappeared from natural breeding areas such as the Macquarie Marshes in northern New South Wales. Management plans have been introduced to control problematic urban populations in Sydney.[4][5]\n\nDue to its increasing presence in the urban environment and its habit of rummaging in garbage, the species has acquired a variety of colloquial names such as \"tip turkey\"[6] and \"bin chicken\",[7] and in recent years has become an icon of Australia's popular culture, regarded with glee by some and passionate revulsion by others.[8][9]", "output": "The White Ibis, also known colloquially as the \"tip turkey\" and \"bin chicken\" is known for it's white feathers, black head and long curved bill and legs.", "category": "IT"}, {"instruction": "Who is Laika and why is she famous?", "input": "Laika (/\u02c8la\u026ak\u0259/ LY-k\u0259; Russian: \u041b\u0430\u0439\u043a\u0430, IPA: [\u02c8lajk\u0259]; c.\u20091954 \u2013 3 November 1957) was a Soviet space dog who was one of the first animals in space and the first to orbit the Earth. A stray mongrel from the streets of Moscow, she flew aboard the Sputnik 2 spacecraft, launched into low orbit on 3 November 1957. As the technology to de-orbit had not yet been developed, Laika's survival was never expected. She died of overheating hours into the flight, on the craft's fourth orbit.\n\nLittle was known about the effects of spaceflight on living creatures at the time of Laika's mission, and animal flights were viewed by engineers as a necessary precursor to human missions.[1] The experiment, which monitored Laika's vital signs, aimed to prove that a living organism could survive being launched into orbit and continue to function under conditions of weakened gravity and increased radiation, providing scientists with some of the first data on the biological effects of spaceflight.\n\nLaika died within hours from overheating, possibly caused by a failure of the central R\u20117 sustainer to separate from the payload. The true cause and time of her death were not made public until 2002; instead, it was widely reported that she died when her oxygen ran out on day six or, as the Soviet government initially claimed, she was euthanised prior to oxygen depletion. In 2008, a small monument to Laika depicting her standing atop a rocket was unveiled near the military research facility in Moscow that prepared her flight. She also appears on the Monument to the Conquerors of Space in Moscow.", "output": "Laika was one of the first animals in space and the first one to orbit the space. She was sent into the outer space by the Soviet Union. She died of overheating hours into the flight while the spacecraft carrying her was in the orbit.", "category": "IT"}, {"instruction": "What is wholesale banking?", "input": "", "output": "Wholesale banking is the provision of services by banks to larger customers or organizations such as mortgage brokers, large corporate clients, mid-sized companies, real estate developers and investors, international trade finance businesses, institutional customers (such as pension funds and government entities/agencies), and services offered to other banks or other financial institutions.\n\nWholesale finance refers to financial services conducted between financial services companies and institutions such as banks, insurers, fund managers, and stockbrokers.\n\nModern wholesale banks engage in:\n\n- Finance wholesaling\n- Underwriting\n- Market making\n- Consultancy\n- Mergers and acquisitions\n- Fund management", "category": "IT"}, {"instruction": "Classify these foods as proteins or carbohydrates", "input": "", "output": "bread, grilled chicken, salmon, steak, chips, rice", "category": "IT"}, {"instruction": "what are the rules of cricket ?", "input": "Cricket is a bat-and-ball game played between two teams of eleven players on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, each comprising two bails balanced on three stumps. The batting side scores runs by striking the ball bowled at one of the wickets with the bat and then running between the wickets, while the bowling and fielding side tries to prevent this (by preventing the ball from leaving the field, and getting the ball to either wicket) and dismiss each batter (so they are \"out\"). Means of dismissal include being bowled, when the ball hits the stumps and dislodges the bails, and by the fielding side either catching the ball after it is hit by the bat, but before it hits the ground, or hitting a wicket with the ball before a batter can cross the crease in front of the wicket. When ten batters have been dismissed, the innings ends and the teams swap roles. The game is adjudicated by two umpires, aided by a third umpire and match referee in international matches. They communicate with two off-field scorers who record the match's statistical information.\n\nForms of cricket range from Twenty20, with each team batting for a single innings of 20 overs (each \"over\" being a set of 6 fair opportunities for the batting team to score) and the game generally lasting three hours, to Test matches played over five days. Traditionally cricketers play in all-white kit, but in limited overs cricket they wear club or team colours. In addition to the basic kit, some players wear protective gear to prevent injury caused by the ball, which is a hard, solid spheroid made of compressed leather with a slightly raised sewn seam enclosing a cork core layered with tightly wound string.\n\nThe earliest reference to cricket is in South East England in the mid-16th century. It spread globally with the expansion of the British Empire, with the first international matches in the second half of the 19th century. The game's governing body is the International Cricket Council (ICC), which has over 100 members, twelve of which are full members who play Test matches. The game's rules, the Laws of Cricket, are maintained by Marylebone Cricket Club (MCC) in London. The sport is followed primarily in South Asia, Australasia, the United Kingdom, Southern Africa and the West Indies.[1]\n\nWomen's cricket, which is organised and played separately, has also achieved international standard. The most successful side playing international cricket is Australia, which has won seven One Day International trophies, including five World Cups, more than any other country and has been the top-rated Test side more than any other country.", "output": "Cricket is a bat-and-ball game played between two teams of eleven players on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, each comprising two bails balanced on three stumps.Forms of cricket range from Twenty20, with each team batting for a single innings of 20 overs (each \"over\" being a set of 6 fair opportunities for the batting team to score) and the game generally lasting three hours, to Test matches played over five days.The batting side scores runs by striking the ball bowled at one of the wickets with the bat and then running between the wickets, while the bowling and fielding side tries to prevent this (by preventing the ball from leaving the field, and getting the ball to either wicket) and dismiss each batter (so they are \"out\").", "category": "IT"}, {"instruction": "What is the difference between bills, notes, and bonds?", "input": "", "output": "Treasury bills are issued by the U.S. government and have a maturity of one year or less. Treasury notes are issued and have a maturity between 2 and 10 years. Treasury bonds have a maturity of greater than 10 years.", "category": "IT"}, {"instruction": "What are Gummi Bears called in England?", "input": "", "output": "Jelly Babies are what people call Gummi Bears in England", "category": "IT"}, {"instruction": "What is the use of a vaccine?", "input": "A vaccine is a biological preparation that provides active acquired immunity to a particular infectious or malignant disease. The safety and effectiveness of vaccines has been widely studied and verified. A vaccine typically contains an agent that resembles a disease-causing microorganism and is often made from weakened or killed forms of the microbe, its toxins, or one of its surface proteins. The agent stimulates the body's immune system to recognize the agent as a threat, destroy it, and to further recognize and destroy any of the microorganisms associated with that agent that it may encounter in the future.", "output": "Vaccines can be used to provide immunity to a specific disease or infection. It works by stimulating the body's immune system to be able to identify and destroy threat agents.", "category": "IT"}, {"instruction": "Tell me about the album The Any Day Now", "input": "The Any Day Now EP is Elbow's third release. This EP was released through Elbow's first record label Ugly Man Records, as well as their second record label V2 Records. Both EPs each have a different track listing.\n\nThe song \"George Lassoes the Moon\" on the Ugly Man Records version of the EP differs from the version on The Noisebox EP. Not only is it a minute shorter, but it also is musically more produced than the rough first version. \"Wurzel\" is an instrumental song.", "output": "The Any Day Now EP is Elbow's third release. This EP was released through Elbow's first record label Ugly Man Records, as well as their second record label V2 Records. Both EPs each have a different track listing.\n\nThe song \"George Lassoes the Moon\" on the Ugly Man Records version of the EP differs from the version on The Noisebox EP. Not only is it a minute shorter, but it also is musically more produced than the rough first version. \"Wurzel\" is an instrumental song.", "category": "IT"}, {"instruction": "Is it safe to invest in cryptocurrency?", "input": "", "output": "Compared to other asset classes such as stocks and government bonds, investing in cryptocurrency can be considered very risky.", "category": "IT"}, {"instruction": "Give me three reasons why cactuses aren't real.", "input": "", "output": "My first point is that rich people make cactuses to prevent the prevention of desertification, which is a weird statement in itself. This leads to more deserts, and therefore more oil, and more money for rich people.\n\nSecondly, everyone I know with a cactus hasn't watered it in about eighteen centuries and somehow it is still quote unquote \"alive.\" Shallow roots, really? You never water it ever, it is not real, admit it.\n\nThird and finally, two thousand species of cacti is just too many. It's really because rich people aren't very good at creating the same cactuses twice, so we end up with all of their bespoke versions.\n\nThank you for coming to my TED Talk.", "category": "IT"}, {"instruction": "Given a reference text about dried spaghetti production, what is required to produce spaghetti without errors?", "input": "The bulk of dried spaghetti is produced in factories using auger extruders. While essentially simple, the process requires attention to detail to ensure that the mixing and kneading of the ingredients produces a homogeneous mix, without air bubbles. The forming dies have to be water cooled to prevent spoiling of the pasta by overheating. Drying of the newly formed spaghetti has to be carefully controlled to prevent strands sticking together, and to leave it with sufficient moisture so that it is not too brittle. Packaging for protection and display has developed from paper wrapping to plastic bags and boxes.", "output": "Spaghetti production is straight-forward, but requires the maker to ensure the mixture is homogenous and without air bubbles before starting the drying process. The drying process itself needs to be monitored to ensure that the individual spaghetti strands do not stick together but also do not dry out so much that they become brittle", "category": "IT"}, {"instruction": "What is an acoholic?", "input": "", "output": "An alcoholic is someone who is unable to control the amount of alcohol they consume.  Loss of control with any substance is how addiction starts.  Alcoholism is a form of uncontrolled addiction.  The most dangerous kind of addiction is one where a person is in denial that they have an addiction.  Alcoholism like other additions if not treated can lead to kidney failure and ultimately death in the long run.  It's best if you know someone with an alcoholic addition to try and intervene and get them help through a 12-step or alcoholics anonymous program.", "category": "IT"}, {"instruction": "Which English football club has won the most FA Cup trophies?", "input": "They hold the highest number of FA Cup trophies, with 14. The club is one of only six clubs to have won the FA Cup twice in succession, in 2002 and 2003, and 2014 and 2015. Arsenal have achieved three League and FA Cup \"Doubles\" (in 1971, 1998 and 2002), a feat only previously achieved by Manchester United (in 1994, 1996 and 1999). They were the first side in English football to complete the FA Cup and League Cup double, in 1993. Arsenal were also the first London club to reach the final of the UEFA Champions League, in 2006, losing the final 2\u20131 to Barcelona.", "output": "Arsenal - 14", "category": "IT"}, {"instruction": "What are the most important metrics for a Sales Leader?", "input": "", "output": "Pipeline, Pipeline Coverage, Salescycle time, conversion rate, MQOs, SQOs, MQLs, Quota Attainment %", "category": "IT"}, {"instruction": "What\u2019s it like living in NYC compared to other US cities?", "input": "", "output": "New York City is a large metropolis and is known to be the city that never sleeps. While downtowns of typical American cities become empty during non-working hours, every area of NYC is full of people at any given time. Most people living there don\u2019t own cars and use the subway to get around to different parts of the city.", "category": "IT"}, {"instruction": "What are common gaming consoles used to play video games?", "input": "", "output": "Common gaming consoles used to play video games include personal computers, Xbox, and Playstation", "category": "IT"}, {"instruction": "Why is my buttercream frosting not white?", "input": "", "output": "Clear vanilla is one of the best ways to keep your buttercream frosting as close to white as possible. If you use traditional or even artificial vanilla, it will turn your buttercream frosting into more of a cream color rather than pure white. Pure white buttercream does not exist, as the color of butter is slightly yellow, which will give your buttercream frosting a small amount of color. However, the most likely culprit of your tan buttercream is your traditional vanilla extract.", "category": "IT"}, {"instruction": "Who developed Pilates?", "input": "Pilates is a type of mind-body exercise developed in the early 20th century by German physical trainer Joseph Pilates, after whom it was named. Pilates called his method \"Contrology\".[3] It is practiced worldwide, especially in countries such as Australia, Canada, South Korea, the United States and the United Kingdom. As of 2005, approximately 11 million people were practicing the discipline regularly, and there were 14,000 instructors in the US.Pilates was developed by Joseph Pilates from M\u00f6nchengladbach, Germany. His father was a gymnast and his mother a naturopath.", "output": "Pilates was developed by Joseph Pilates in the early 20th century, and he lived in Monchengladbach, Germany.", "category": "IT"}, {"instruction": "What is Equity theater?", "input": "The Actors' Equity Association (AEA), commonly called Actors' Equity or simply Equity, is an American labor union representing those who work in live theatrical performance. Performers appearing in live stage productions without a book or through-storyline (vaudeville, cabarets, circuses) may be represented by the American Guild of Variety Artists (AGVA). The AEA works to negotiate quality living conditions, livable wages, and benefits for performers and stage managers. A theater or production that is not produced and performed by AEA members may be called \"non-Equity\".", "output": "A theater or production that is performed by Actors' Equity Association (AEA) members is often called \"Equity Theater\". Actors' Equity Association commonly called Actor's Equity or more simply Equity, is an American Labor union representing those who work in live theatrical performance.  A theater or production not produced by Actors' Equity members is often called \"non-Equity\".", "category": "IT"}, {"instruction": "What type of products does this company produce?", "input": "Sweet Tree Holdings is a Vermont, United States, company that produces maple products from a sugarbush and processing facility in Island Pond.", "output": "maple products", "category": "IT"}, {"instruction": "What is sourdough bread?", "input": "", "output": "Sourdough bread does not use yeast to rise. Instead it uses a starter, which is fermented dough, as its rising agent. Hence it is classified as a naturally leavened bread. It normally takes longer for a sourdough bread to rise. Sourdough bread is more flavourful than normal bread. \n\nThe starter is created using flour, salt and water. It has to be \"fed\" and maintained with fresh flour for the starter to remain alive. Staters can be stored in a cooler environment in order to slow down the fermentation prices.", "category": "IT"}, {"instruction": "What is considered as DACH region?", "input": "", "output": "The DACH region comprises the three countries in the central Europe: Germany, Austria, and Switzerland. The abbreviation comes a mix of first letters of countries as per international country codes, i.e. Germany (DE), Austria (AT), and Switzerland (CH).", "category": "IT"}, {"instruction": "What is 75 hard and what are the tasks?", "input": "", "output": "75 hard is a mental toughness challenge created by Andy Frisella. For 75 consecutive days, you follow the daily tasks as prescribed, no shortcuts. If you miss a task, you reset to day 1 and start all over again. \n\nThe tasks include: \n- Take a daily progress picture.\n- Follow a diet . No cheating and no alcohol.\n- Perform TWO separate 45 minute workouts, one of which needs to be outside. \n- Drink 1 gallon of water.\n- Read 10 pages of a non-fiction book. Audiobooks don't count.", "category": "IT"}, {"instruction": "What can people do to entertain cats?", "input": "", "output": "People can entertain cats in many different ways: 1. laser pointer against walls for cats to chase after 2. lean string/wand-like toys or strings 3. auto-moving balls 4. Videos with moving balls, mice, etc While different cats would be entertained by different ways, in common, cats like small and fast-moving objects that the cats can run after. Cats also like being patted but only by the people they are familiar with (their people)", "category": "IT"}, {"instruction": "Given this paragraph are Beavers the largest living rodents?", "input": "Beavers (genus Castor) are large, semiaquatic rodents of the Northern Hemisphere. There are two existing species: the North American beaver (Castor canadensis) and the Eurasian beaver (C. fiber). Beavers are the second-largest living rodents, after capybaras, weighing up to 30 kilograms (66 lb). Beavers have stout bodies with large heads, long chisel-like incisors, brown or gray fur, hand-like front feet, webbed back feet, and tails that are flat and scaly. The two species differ in skull and tail shape and fur color. Beavers can be found in a number of freshwater habitats, such as rivers, streams, lakes and ponds. They are herbivorous, consuming tree bark, aquatic plants, grasses and sedges.", "output": "No, Beavers are the second-largest living rodents, second to Capybaras.", "category": "IT"}, {"instruction": "When did the maximum rate of water usage begin to be mandated?", "input": "A low-flow fixture is a water saving plumbing fixture designed to achieve water savings by having a lower flow rate of water or a smaller quantity per flush. Some of these low-flow fixtures are faucets, showerheads, and toilets. In the United States a maximum water usage of conventional plumbing fixtures was federally mandated by the Energy policy act of 1992. Low-flow fixtures are designed to save water over conventional fixtures by having a lower flow rate while still maintaining satisfactory performance. The Environmental protection agency (EPA) WaterSense program has requirements for plumbing fixtures to achieve their definition for water saving low-flow.", "output": "1992", "category": "IT"}, {"instruction": "How was Napoleon defeated?", "input": "Napoleon Bonaparte (born Napoleone Buonaparte; 15 August 1769 \u2013 5 May 1821), later known by his regnal name Napoleon I, was a Corsica-born French military commander and political leader who rose to prominence during the French Revolution and led successful campaigns during the Revolutionary Wars. He was the de facto leader of the French Republic as First Consul from 1799 to 1804, then Emperor of the French from 1804 until 1814 and again in 1815. Napoleon's political and cultural legacy endures to this day, as a highly celebrated and controversial leader. He initiated many liberal reforms that have persisted in society, and is considered one of the greatest military commanders in history. His campaigns are still studied at military academies worldwide. Between three and six million civilians and soldiers died in what became known as the Napoleonic Wars.\n\nNapoleon was born on the island of Corsica, not long after its annexation by France, to a native family descending from minor Italian nobility. He supported the French Revolution in 1789 while serving in the French army, and tried to spread its ideals to his native Corsica. He rose rapidly in the Army after he saved the governing French Directory by firing on royalist insurgents. In 1796, he began a military campaign against the Austrians and their Italian allies, scoring decisive victories and becoming a national hero. Two years later, he led a military expedition to Egypt that served as a springboard to political power. He engineered a coup in November 1799 and became First Consul of the Republic.\n\nDifferences with the United Kingdom meant France faced the War of the Third Coalition by 1805. Napoleon shattered this coalition with victories in the Ulm campaign, and at the Battle of Austerlitz, which led to the dissolution of the Holy Roman Empire. In 1806, the Fourth Coalition took up arms against him. Napoleon defeated Prussia at the battles of Jena and Auerstedt, marched the Grande Arm\u00e9e into Eastern Europe, and defeated the Russians in June 1807 at Friedland, forcing the defeated nations of the Fourth Coalition to accept the Treaties of Tilsit. Two years later, the Austrians challenged the French again during the War of the Fifth Coalition, but Napoleon solidified his grip over Europe after triumphing at the Battle of Wagram.\n\nHoping to extend the Continental System, his embargo against Britain, Napoleon invaded the Iberian Peninsula and declared his brother Joseph the King of Spain in 1808. The Spanish and the Portuguese revolted in the Peninsular War aided by a British army, culminating in defeat for Napoleon's marshals. Napoleon launched an invasion of Russia in the summer of 1812. The resulting campaign witnessed the catastrophic retreat of Napoleon's Grande Arm\u00e9e. In 1813, Prussia and Austria joined Russian forces in a Sixth Coalition against France, resulting in a large coalition army defeating Napoleon at the Battle of Leipzig. The coalition invaded France and captured Paris, forcing Napoleon to abdicate in April 1814. He was exiled to the island of Elba, between Corsica and Italy. In France, the Bourbons were restored to power.\n\nNapoleon escaped in February 1815 and took control of France. The Allies responded by forming a Seventh Coalition, which defeated Napoleon at the Battle of Waterloo in June 1815. The British exiled him to the remote island of Saint Helena in the Atlantic, where he died in 1821 at the age of 51.\n\nNapoleon had an extensive impact on the modern world, bringing liberal reforms to the lands he conquered, especially the regions of the Low Countries, Switzerland and parts of modern Italy and Germany. He implemented many liberal policies in France and Western Europe.", "output": "Napoleon invaded Russia in the summer of 1812, resulting in a catastrophic retreat of Napoleon's Grade Arm\u00e9e. One year later, Prussia and Australia joined Russian forces, defeating Napoleon at the Battle of Leipzig. The coalition then invaded France and captured Paris, forcing Napoleon to abdicate in April 1814. Napoleon was forced to exile to the island of Elba.\nNapoleon escaped in 1815 and took back control of France. He was defeated again during the Battle of Waterloo in June 1815 and sent to exile by the British to the remote island of Saint Helena where he died in 1921.", "category": "IT"}, {"instruction": "Given this question about tourism, what country is the 6th most visited country?", "input": "As of 2017, Mexico was the 6th most visited country in the world and had the 15th highest income from tourism in the world which is also the highest in Latin America.[287] The vast majority of tourists come to Mexico from the United States and Canada followed by Europe and Asia. A smaller number also come from other Latin American countries.[288] In the 2017 Travel and Tourism Competitiveness Report, Mexico was ranked 22nd in the world, which was 3rd in the Americas.[289]", "output": "Mexico", "category": "IT"}, {"instruction": "What's the most popular tv show of all time in the USA?", "input": "", "output": "Jeopardy!", "category": "IT"}, {"instruction": "Given these paragraphs about Large language models, what is the prompting paradigm?", "input": "A large language model (LLM) is a language model consisting of a neural network with many parameters (typically billions of weights or more), trained on large quantities of unlabelled text using self-supervised learning. LLMs emerged around 2018 and perform well at a wide variety of tasks. This has shifted the focus of natural language processing research away from the previous paradigm of training specialized supervised models for specific tasks.\n\nProperties\nThough the term large language model has no formal definition, it often refers to deep learning models having a parameter count on the order of billions or more. LLMs are general purpose models which excel at a wide range of tasks, as opposed to being trained for one specific task (such as sentiment analysis, named entity recognition, or mathematical reasoning). The skill with which they accomplish tasks, and the range of tasks at which they are capable, seems to be a function of the amount of resources (data, parameter-size, computing power) devoted to them, in a way that is not dependent on additional breakthroughs in design.\n\nThough trained on simple tasks along the lines of predicting the next word in a sentence, neural language models with sufficient training and parameter counts are found to capture much of the syntax and semantics of human language. In addition, large language models demonstrate considerable general knowledge about the world, and are able to \"memorize\" a great quantity of facts during training.\n\nHallucinations\nMain article: Hallucination (artificial intelligence)\nIn artificial intelligence in general, and in large language models in particular, a \"hallucination\" is a confident response that does not seem to be justified by the model's training data.\n\nEmergent abilities\n\nOn a number of natural language benchmarks involving tasks such as question answering, models perform no better than random chance until they reach a certain scale (in this case, measured by training computation), at which point their performance sharply increases. These are examples of emergent abilities.\nUnpredictable abilities that have been observed in large language models but that were not present in simpler models (and that were not explicitly designed into the model) are usually called \"emergent abilities\". Researchers note that such abilities \"cannot be predicted simply by extrapolating the performance of smaller models\". These abilities are discovered rather than programmed-in or designed, in some cases only after the LLM has been publicly deployed. Hundreds of emergent abilities have been described. Examples include multi-step arithmetic, taking college-level exams, identifying the intended meaning of a word, chain-of-thought prompting, decoding the International Phonetic Alphabet, unscrambling a word\u2019s letters, identifying offensive content in paragraphs of Hinglish (a combination of Hindi and English), and generating a similar English equivalent of Kiswahili proverbs.\n\nArchitecture and training\nLarge language models have most commonly used the transformer architecture, which, since 2018, has become the standard deep learning technique for sequential data (previously, recurrent architectures such as the LSTM were most common). LLMs are trained in an unsupervised manner on unannotated text. A left-to-right transformer is trained to maximize the probability assigned to the next word in the training data, given the previous context. Alternatively, an LLM may use a bidirectional transformer (as in the example of BERT), which assigns a probability distribution over words given access to both preceding and following context. In addition to the task of predicting the next word or \"filling in the blanks\", LLMs may be trained on auxiliary tasks which test their understanding of the data distribution such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear side-by-side in the training corpus.\n\nThe earliest LLMs were trained on corpora having on the order of billions of words. The first model in OpenAI's GPT series was trained in 2018 on BookCorpus, consisting of 985 million words. In the same year, BERT was trained on a combination of BookCorpus and English Wikipedia, totalling 3.3 billion words. In the years since then, training corpora for LLMs have increased by orders of magnitude, reaching up to hundreds of billions or trillions of tokens.\n\nLLMs are computationally expensive to train. A 2020 study estimated the cost of training a 1.5 billion parameter model (1-2 orders of magnitude smaller than the state of the art at the time) at $1.6 million.\n\nA 2020 analysis found that neural language models' capability (as measured by training loss) increased smoothly in a power law relationship with number of parameters, quantity of training data, and computation used for training. These relationships were tested over a wide range of values (up to seven orders of magnitude) and no attenuation of the relationship was observed at the highest end of the range (including for network sizes up to trillions of parameters).\n\nApplication to downstream tasks\nBetween 2018 and 2020, the standard method for harnessing an LLM for a specific natural language processing (NLP) task was to fine tune the model with additional task-specific training. It has subsequently been found that more powerful LLMs such as GPT-3 can solve tasks without additional training via \"prompting\" techniques, in which the problem to be solved is presented to the model as a text prompt, possibly with some textual examples of similar problems and their solutions.\n\nFine-tuning\nMain article: Fine-tuning (machine learning)\nFine-tuning is the practice of modifying an existing pretrained language model by training it (in a supervised fashion) on a specific task (e.g. sentiment analysis, named entity recognition, or part-of-speech tagging). It is a form of transfer learning. It generally involves the introduction of a new set of weights connecting the final layer of the language model to the output of the downstream task. The original weights of the language model may be \"frozen\", such that only the new layer of weights connecting them to the output are learned during training. Alternatively, the original weights may receive small updates (possibly with earlier layers frozen).\n\nPrompting\nSee also: Prompt engineering and Few-shot learning (natural language processing)\nIn the prompting paradigm, popularized by GPT-3, the problem to be solved is formulated via a text prompt, which the model must solve by providing a completion (via inference). In \"few-shot prompting\", the prompt includes a small number of examples of similar (problem, solution) pairs. For example, a sentiment analysis task of labelling the sentiment of a movie review could be prompted as follows:\n\nReview: This movie stinks.\nSentiment: negative\n\nReview: This movie is fantastic!\nSentiment:\n\nIf the model outputs \"positive\", then it has correctly solved the task. In zero-shot prompting, no solve examples are provided. An example of a zero-shot prompt for the same sentiment analysis task would be \"The sentiment associated with the movie review 'This movie is fantastic!' is\".\n\nFew-shot performance of LLMs has been shown to achieve competitive results on NLP tasks, sometimes surpassing prior state-of-the-art fine-tuning approaches. Examples of such NLP tasks are translation, question answering, cloze tasks, unscrambling words, and using a novel word in a sentence. The creation and optimisation of such prompts is called prompt engineering.\n\nInstruction tuning\nInstruction tuning is a form of fine-tuning designed to facilitate more natural and accurate zero-shot prompting interactions. Given a text input, a pretrained language model will generate a completion which matches the distribution of text on which it was trained. A naive language model given the prompt \"Write an essay about the main themes of Hamlet.\" might provide a completion such as \"A late penalty of 10% per day will be applied to submissions received after March 17.\" In instruction tuning, the language model is trained on many examples of tasks formulated as natural language instructions, along with appropriate responses. Various techniques for instruction tuning have been applied in practice. OpenAI's InstructGPT protocol involves supervised fine-tuning on a dataset of human-generated (prompt, response) pairs, followed by reinforcement learning from human feedback (RLHF), in which a reward function was learned based on a dataset of human preferences. Another technique, \"self-instruct\", fine-tunes the language model on a training set of examples which are themselves generated by an LLM (bootstrapped from a small initial set of human-generated examples).\n\nhttps://en.wikipedia.org/wiki/Large_language_model", "output": "In the prompting paradigm, popularized by GPT-3, the problem to be solved is formulated via a text prompt, which the model must solve by providing a completion (via inference). In \"few-shot prompting\", the prompt includes a small number of examples of similar (problem, solution) pairs.", "category": "IT"}, {"instruction": "When was the last time the Raiders won the Super Bowl?", "input": "", "output": "The Raiders have won three Super Bowl championships (1977, 1981, and 1984), one American Football League (AFL) championship (1967), and four American Football Conference (AFC) titles. The most recent Super Bowl ring was won in 1984 against the Washington Redskins of the NFC.", "category": "IT"}, {"instruction": "What is locus (in genomics)?", "input": "", "output": "In genetics and genomics, a locus is a specific, fixed position on a chromosome where a particular gene or genetic marker is located. Each chromosome carries many genes, with each gene occupying a different position or locus; in humans, the total number of protein-coding genes in a complete haploid set of 23 chromosomes is estimated at 19,000\u201320,000.\n\nGenes may possess multiple variants known as alleles, and an allele may also be said to reside at a particular locus. Diploid and polyploid cells whose chromosomes have the same allele at a given locus are called homozygous with respect to that locus, while those that have different alleles at a given locus are called heterozygous. The ordered list of loci known for a particular genome is called a gene map. Gene mapping is the process of determining the specific locus or loci responsible for producing a particular phenotype or biological trait. Association mapping, also known as \"linkage disequilibrium mapping\", is a method of mapping quantitative trait loci (QTLs) that takes advantage of historic linkage disequilibrium to link phenotypes (observable characteristics) to genotypes (the genetic constitution of organisms), uncovering genetic associations.", "category": "IT"}, {"instruction": "What is a difference between baseball and cricket?", "input": "", "output": "Baseball and cricket may both be considered bat-and-ball sports, but in actuality, they differ significantly across various dimensions.\n\nPlaying Field: Baseball field is diamond-shaped, while a cricket field is oval-shaped. The cricket field is also larger than the Baseball field.\n\nNumber of players: In baseball, each team has nine players on the field, while in cricket, there are eleven players on each team.\n\nEquipment: Baseball players use a round bat, while cricket players use a flat bat with a long handle. A cricket ball is also smaller (22.4 -22.9 cm circumference) than a baseball (22.9 - 23.5 cm circumference)\n\nScoring: In baseball, a team makes a run whenever one of their players completes a full circuit of the bases, while in cricket, a team gets runs by hitting the ball and then running back and forth between two sets of wickets.", "category": "IT"}, {"instruction": "Where does the Golden Retriever originate from?", "input": "The Golden Retriever is a Scottish breed of retriever dog of medium size. It is characterised by a gentle and affectionate nature and a striking golden coat. It is commonly kept as a pet and is among the most frequently registered breeds in several Western countries. It is a frequent competitor in dog shows and obedience trials; it is also used as a gundog, and may be trained for use as a guide dog.\n\nThe breed was created by Sir Dudley Marjoribanks at his Scottish estate Guisachan in the late nineteenth century. He cross-bred Flat-coated Retrievers with Tweed Water Spaniels, with some further infusions of Red Setter, Labrador Retriever and Bloodhound. The breed was recognised by the Kennel Club in 1913, and during the interwar period spread to many parts of the world.", "output": "The Golden Retriever dog breed originates from Scotland.", "category": "IT"}, {"instruction": "Which of the following are cities in the PNW in the US: Seattle, Portland, Hillsboro, Eugene, Tacoma, Vancouver, Surrey, Richmond.", "input": "", "output": "Seattle, Portland, Hillsboro, Eugene, Tacoma, Vancouver are cities in PNW. Vancouver is also in Canada but there's a Vancouver in WA as well.", "category": "IT"}, {"instruction": "Make a packing list for a picnic at the beach.", "input": "", "output": "You should bring the following items for a picnic at the beach: Sunscreen, sunglasses, beach towels, umbrella, folding beach chairs, ice chest, drinks, ice, sandwiches, chips and salsa.", "category": "IT"}, {"instruction": "Who is Mahatma Gandhi?", "input": "Mohandas Karamchand Gandhi (/\u02c8\u0261\u0251\u02d0ndi, \u02c8\u0261\u00e6ndi/ GA(H)N-dee,[3] Gujarati: [\u02c8mo\u0266\u0259nd\u0251s \u02c8k\u0259\u027e\u0259mt\u0283\u0259nd \u02c8\u0261\u0251\u0303d\u02b1i]; 2 October 1869 \u2013 30 January 1948) was an Indian lawyer,[4] anti-colonial nationalist[5] and political ethicist[6] who employed nonviolent resistance to lead the successful campaign for India's independence from British rule.[7] He inspired movements for civil rights and freedom across the world. The honorific Mah\u0101tm\u0101 (Sanskrit: \"great-souled\", \"venerable\"), first applied to him in 1914 in South Africa, is now used throughout the world.[8][9]\n\nBorn and raised in a Hindu family in coastal Gujarat, Gandhi trained in the law at the Inner Temple, London, and was called to the bar at age 22 in June 1891. After two uncertain years in India, where he was unable to start a successful law practice, he moved to South Africa in 1893 to represent an Indian merchant in a lawsuit. He went on to live in South Africa for 21 years. It was here that Gandhi raised a family and first employed nonviolent resistance in a campaign for civil rights. In 1915, aged 45, he returned to India and soon set about organising peasants, farmers, and urban labourers to protest against excessive land-tax and discrimination.\n\nAssuming leadership of the Indian National Congress in 1921, Gandhi led nationwide campaigns for easing poverty, expanding women's rights, building religious and ethnic amity, ending untouchability, and, above all, achieving swaraj or self-rule. Gandhi adopted the short dhoti woven with hand-spun yarn as a mark of identification with India's rural poor. He began to live in a self-sufficient residential community, to eat simple food, and undertake long fasts as a means of both introspection and political protest. Bringing anti-colonial nationalism to the common Indians, Gandhi led them in challenging the British-imposed salt tax with the 400 km (250 mi) Dandi Salt March in 1930 and in calling for the British to quit India in 1942. He was imprisoned many times and for many years in both South Africa and India.", "output": "Mahatma Gandhi was an Indian freedom fighter and peace loving leader. Mahatma Gandhi was born as Mohandas Karamchand Gandhi in Gujarat on 2nd October 1869. Born and raised in a Hindu family in coastal Gujarat, Gandhi trained in the law at the Inner Temple, London, and was called to the bar at age 22 in June 1891. Gandhi moved to South Africa in 1893 to represent an Indian merchant in a lawsuit after two uncertain years in India, where he was unable to start a successful law practice. He went on to live in South Africa for 21 years. Gandhi led nationwide campaigns for freedom movement, easing poverty, expanding women's rights, building religious and ethnic amity, ending untouchability, and, above all, achieving swaraj or self-rule. Gandhi started Dandi Salt March in 1930 calling quit India for the then rulers the British.", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Catwoman, Black Cat", "input": "", "output": "Catwoman is DC, Black Cat is Marvel", "category": "IT"}, {"instruction": "describe experience of child fighting with autism", "input": "", "output": "Autism Spectrum Disorder (ASD) is a neurodevelopmental disorder that affects a child's social communication and interaction, as well as their behavior and interests. Children with autism may have difficulty understanding social cues and may struggle to express their emotions, which can make it challenging for them to navigate social situations and communicate effectively.\n\nChildren with autism may also experience sensory processing difficulties, where they are either over or under sensitive to different sensory stimuli, such as sound, touch, taste, or smell. This can lead to sensory overload and cause them to become overwhelmed or upset.\n\nWhen a child with autism experiences a challenging situation, such as a conflict with another child, their reaction can vary. They may struggle to communicate their feelings effectively, which can lead to frustration or even aggression. In some cases, they may become overwhelmed by their emotions and engage in self-injurious behavior, such as hitting or biting themselves.\n\nIt's important to remember that every child with autism is unique, and their experience of fighting with autism may vary depending on their individual strengths and challenges. However, with early diagnosis, proper support, and effective intervention, children with autism can learn to manage their emotions and develop positive social skills to navigate social situations successfully.", "category": "IT"}, {"instruction": "What are the main points in this article", "input": "Today, Finland became the 31st member of NATO, ending its decades-long policy of neutrality. Foreign minister Pekka Haavisto handed over the official documents in Brussels to United States Secretary of State Antony Blinken.\n\n\nProtestors at a February 2022 rally against Russia's invasion of Ukraine march past the statue of Tsar Alexander II in Senate Square in Helsinki.\nImage: rajatonvimma.\n\nMap of NATO members including Finland\nThe accession was marked by raising the Finnish flag at NATO's main office in Brussels, Belgium, while the NATO flag was raised in Helsinki.\n\nFinland shares a 1,340 kilometers (833 mi)-long border with Russia. By joining NATO, it roughly doubled the length of NATO borders with Russia.\n\n\"Until now, we have defended our country alone,\" said Defense Minister Antti Kaikkonen. \"From now on, we can rely on getting outside help should things get tough. And of course, we are ready to help should someone be in trouble.\"\n\nKremlin representative Dmitry Peskov said it was an \"encroachment on our security and on Russia's national interests\". He said Russia would closely monitor NATO activity in Finland and take \"counter-measures\".\n\n\"Finland's membership is not targeted against anyone. Nor does it change the foundations or objectives of Finland's foreign and security policy,\" read a statement by Finnish President Sauli Niinist\u00f6 after the accession documents were transferred.\n\n\"President Putin had as a declared goal of the invasion of Ukraine to get less NATO. He is getting exactly the opposite,\" said NATO Secretary General Jens Stoltenberg. \"Finland today, and soon also Sweden will become a full-fledged member of the alliance\".\n\nIn the wake of Russia's invasion of Ukraine last year, public sentiment in Finland and Sweden, which were both non-aligned countries, shifted drastically, to 80% support in the former's case. On May 18, both nations submitted applications to join NATO. New members must have the support of all existing members before they can join.\n\nThe applications were held up by Turkey under Recep Tayyip Erdo\u011fan, because Finland and Sweden have granted political asylum to members of the Kurdistan Workers' Party, which Turkey views as a terrorist organization. Last week, the Grand National Assembly of Turkey voted to approve Finland.\n\nSweden still has to obtain the approval of both Hungary and Turkey before it can join. Hungary objects to Sweden based on its criticism of Viktor Orb\u00e1n's government. A far-right group in Sweden held a Quran-burning in front of the Turkish embassy in January, which was condemned by the Turkish government.\n\nAfter Russia won the Finnish War over Sweden in 1809, Finland became a Grand Duchy of the tsarist Russian Empire. This lasted until the Russian Civil War started in 1917 and Finland declared its independence.\n\nIn 1939, the Soviet Union invaded Finland in a conflict called the Winter War. It ended with a treaty in 1940, under which Finland ceded territory to the Soviets. When Germany invaded the Soviet Union in 1941 during World War II, Finland entered the war on the side of Germany. It ended with an armistice in 1944, and Finland relinquished another province.\n\nUnder President Urho Kekkonen, Finland formally adopted a policy of neutrality in 1956.", "output": "Finland became the 31st member of NATO, ending its decades-long policy of neutrality. \nIn the wake of Russia's invasion of Ukraine last year, public sentiment in Finland shifted drastically, to 80% support in the former's case.\n'Sweden is next in line, however it has to overcome opposition from Hungary and Turkey.", "category": "IT"}, {"instruction": "How would you describe Dance?", "input": "Dance is an art form consisting of sequences of body movements with aesthetic and often symbolic value, either improvised or purposefully selected.[nb 1] Dance can be categorized and described by its choreography, by its repertoire of movements, done simultaneously with music or with instruments; or by its historical period or place of origin.[4]", "output": "Dance is an art consisting of precision sequence of body movements either improvised or intentionally selected.   Dance can be described by the category of choreography and repertoire of movements done simultaneously with music or with instruments.   It can also be defined by its historical period or place of origin.   Students studying the performing art of dance often attend a Dance conservatory or university.   An example of a highly regarded dance conservatory is Point Park University in Pittsburgh, Pa.", "category": "IT"}, {"instruction": "Why do players smear black under their eyes?", "input": "", "output": "Black eye smear reduces the blinding sunlight when looking up towards the sun, when catching/hitting the ball", "category": "IT"}, {"instruction": "Why Italy is known for", "input": "", "output": "Italy is known for island vacation. There are so many island (amalfi, Capri etc ) and their food and wine", "category": "IT"}, {"instruction": "Who were the original Fantastic Four in the comics?", "input": "", "output": "In the original 1961 Fantastic Four Marvel comic book, the Fantastic Four lineup consisted of Reed Richards (Mr. Fantastic), Sue Storm (the Invisible Girl, later the Invisible Woman), Johnny Storm (the Human Torch), and Ben Grimm (the Thing).", "category": "IT"}, {"instruction": "What are some reasons you might be late to a party?", "input": "", "output": "Traffic, leaving work late, having to stop for gas", "category": "IT"}, {"instruction": "Based on this paragraph, who directed White Rabbit?", "input": "White Rabbit is a 2013 American psychological drama film directed by Tim McCann and starring Nick Krause, Sam Trammell and Britt Robertson. Written by Anthony Di Pietro, the film concerns a mentally-ill teen being bullied in high school, whose visions urge him to take revenge. It was produced by Robert Yocum (Burning Sky Films), Shaun Sanghani (SSS Entertainment) and Jacky Lee Morgan. It had its world premiere at the Zurich Film Festival and is being distributed in the United States by Breaking Glass Pictures.[2]", "output": "Tim McCann", "category": "IT"}, {"instruction": "Given this paragraph, who wrote \"August?\"", "input": "August (2001), is the first novel by author Gerard Woodward. It was shortlisted for Whitbread Book Award (2001).", "output": "Gerard Woodward", "category": "IT"}, {"instruction": "Classify each of the following as either a Carnivore or a Herbivore: Cow, Shark, Zebra, Lion, Wolf, Elephant, Tiger, Deer, Leopard, Cheetah", "input": "", "output": "Herbivore:Cow,Zebra,Elephant,Deer\nCarnivores:Lion,Wolf,Leopard,Cheetah,Tiger,Shark", "category": "IT"}, {"instruction": "Which of the following numbers is a irrational number: -200, -1.5, -1, 0, 1, 1.5, 200, pi, e, sqrt(-1)?", "input": "", "output": "Square root of -1 is an irrational number", "category": "IT"}, {"instruction": "Given the reference paragraph, when was the CUBC formed?", "input": "The Cambridge University Boat Club (CUBC) is the rowing club of the University of Cambridge, England. The club was founded in 1828 and has been located at the Goldie Boathouse on the River Cam, Cambridge since 1882.[1] Nowadays, training primarily takes place on the River Great Ouse at Ely.", "output": "The Cambridge University Boat Club (CUBC)  was founded in 1828", "category": "IT"}, {"instruction": "Where are good locations to scuba dive?", "input": "", "output": "Belize, Hondurus, US Virgin Islands, British Virgin Islands, Antartica, Cozumel, Hawaii, Galapagos Islands, Philippines", "category": "IT"}, {"instruction": "What is a fishing vessel?", "input": "A fishing vessel is a boat or ship used to catch fish in the sea, or on a lake or river. Many different kinds of vessels are used in commercial, artisanal, and recreational fishing.\n\nAccording to the FAO, in 2004 there were four million commercial fishing vessels.[30] About 1.3 million of these are decked vessels with enclosed areas. Nearly all of these decked vessels are mechanised, and 40,000 of them are over 100 tons. At the other extreme, two-thirds (1.8 million) of the undecked boats are traditional craft of various types, powered only by sail and oars.[30] These boats are used by artisan fishers.", "output": "A fishing vessel is a boat or ship that is used for recreational or commercial activities such as fishing, inner-tubing, transportation or just for fun.", "category": "IT"}, {"instruction": "In what way did \u00c9tienne Halphen interests lead to him discovering the harmonic distribution?", "input": "In probability theory and statistics, the harmonic distribution is a continuous probability distribution. It was discovered by \u00c9tienne Halphen, who had become interested in the statistical modeling of natural events. His practical experience in data analysis motivated him to pioneer a new system of distributions that provided sufficient flexibility to fit a large variety of data sets. Halphen restricted his search to distributions whose parameters could be estimated using simple statistical approaches.", "output": "He had become interested in the statistical modeling of natural events.  This motivated him to find a system that provided sufficient flexibility to fit a large variety of data sets.", "category": "IT"}, {"instruction": "Given a reference text about the Kumanichi Road Race, tell me when the race was first held and who holds the course records.", "input": "The Kumanichi Road Race (Japanese: \u718a\u672c30K) is an annual road running competition over 30 kilometres which is typically held in February in Kumamoto, Japan. It was first held in 1957 as a men-only competition. A women's race was introduced in 2006. The race is one of the world's most prominent over the uncommon 30K distance. A total of eight Association of Road Racing Statisticians-recognised men's world records have been set at the competition, including the current world record.[1][2]\n\nThe course records are held by Takayuki Matsumiya (1:28:00) and Yuka Hakoyama (1:43:26). It is mostly contested by Japanese athletes, with Kenya's Willy Kangogo becoming the event's sole non-national winner in 2007.[3]", "output": "The Kumanichi Road Race was first held in 1957. Takayuki Matsumiya and Yuka Hakoyama hold the course records.", "category": "IT"}, {"instruction": "How many hands do humans have?", "input": "", "output": "Humans without any genetic defects or major limb injuries have two hands. However a very small number of people have zero, one, or three hands.", "category": "IT"}, {"instruction": "Give a summary of Manhattan Project", "input": "The Manhattan Project was a research and development undertaking during World War II that produced the first nuclear weapons. It was led by the United States with the support of the United Kingdom and Canada. From 1942 to 1946, the project was under the direction of Major General Leslie Groves of the U.S. Army Corps of Engineers. Nuclear physicist Robert Oppenheimer was the director of the Los Alamos Laboratory that designed the actual bombs. The Army component of the project was designated the Manhattan District as its first headquarters were in Manhattan; the placename gradually superseded the official codename, Development of Substitute Materials, for the entire project. Along the way, the project absorbed its earlier British counterpart, Tube Alloys. The Manhattan Project began modestly in 1939, but grew to employ nearly 130,000 people at its peak and cost nearly US$2 billion (equivalent to about $24 billion in 2021).[1] Over 90 percent of the cost was for building factories and to produce fissile material, with less than 10 percent for development and production of the weapons. Research and production took place at more than thirty sites across the United States, the United Kingdom, and Canada.\n\nThe project led to the development of two types of atomic bombs, both developed concurrently, during the war: a relatively simple gun-type fission weapon and a more complex implosion-type nuclear weapon. The Thin Man gun-type design proved impractical to use with plutonium, so a simpler gun-type design called Little Boy was developed that used uranium-235, an isotope that makes up only 0.7 percent of natural uranium. Because it is chemically identical to the most common isotope, uranium-238, and has almost the same mass, separating the two proved difficult. Three methods were employed for uranium enrichment: electromagnetic, gaseous and thermal. Most of this work was carried out at the Clinton Engineer Works at Oak Ridge, Tennessee.\n\nIn parallel with the work on uranium was an effort to produce plutonium, which researchers at the University of California, Berkeley, discovered in 1940. After the feasibility of the world's first artificial nuclear reactor, the Chicago Pile-1, was demonstrated in 1942 at the Metallurgical Laboratory in the University of Chicago, the project designed the X-10 Graphite Reactor at Oak Ridge and the production reactors at the Hanford Site in Washington state, in which uranium was irradiated and transmuted into plutonium. The plutonium was then chemically separated from the uranium, using the bismuth phosphate process. The Fat Man plutonium implosion-type weapon was developed in a concerted design and development effort by the Los Alamos Laboratory.\n\nThe project was also charged with gathering intelligence on the German nuclear weapon project. Through Operation Alsos, Manhattan Project personnel served in Europe, sometimes behind enemy lines, where they gathered nuclear materials and documents, and rounded up German scientists. Despite the Manhattan Project's tight security, Soviet atomic spies successfully penetrated the program.\n\nThe first nuclear device ever detonated was an implosion-type bomb during the Trinity test, conducted at New Mexico's Alamogordo Bombing and Gunnery Range on 16 July 1945. Little Boy and Fat Man bombs were used a month later in the atomic bombings of Hiroshima and Nagasaki, respectively, with Manhattan Project personnel serving as bomb assembly technicians and weaponeers on the attack aircraft. In the immediate postwar years, the Manhattan Project conducted weapons testing at Bikini Atoll as part of Operation Crossroads, developed new weapons, promoted the development of the network of national laboratories, supported medical research into radiology and laid the foundations for the nuclear navy. It maintained control over American atomic weapons research and production until the formation of the United States Atomic Energy Commission in January 1947.", "output": "The Manhattan Project was the program based in the United States which tried to make the first nuclear weapons. The project cost $2 billion, and created many secret cities and bomb-making factories, such as a laboratory in Los Alamos, New Mexico, a nuclear reactor in Hanford, Washington, and a uranium processing plant in Oak Ridge, Tennessee. The top scientist on the project was Robert Oppenheimer, a famous physicist. The Manhattan Project had to find solutions to two difficulties. The first difficulty is how to make the special isotopes of uranium (uranium-235) or plutonium. This process is called separation and is very slow. The United States built very big buildings with three different kinds of machine for separation. They made enough fissionable special isotopes for a few nuclear weapons. The second difficulty was how to make a bomb that will produce a big nuclear explosion every time. A weapon with a bad design can make a much smaller nuclear explosion. This is called a \"fizzle\". In July 1945, the Manhattan Project solved the two difficulties and made the first nuclear explosion. This test of a nuclear weapon was called \"Trinity\" and was a success. Manhattan Project created two nuclear bombs which were used against Japan in 1945.", "category": "IT"}, {"instruction": "What would happen if I ran barefoot? Is it good for me?", "input": "", "output": "Running barefoot tends to shift the striking point of the foot to the balls of the feet, rather than the heels as people commonly do while wearing shoes. Some evidence shows that this front foot-first pattern can reduce the risk of many running-related injuries. However, running barefoot is also more painful, especially on rough terrain or in the cold. Therefore, most people opt to run while wearing shoes.", "category": "IT"}, {"instruction": "In the series A Song of Ice and Fire, who is the founder of House Redbeard?", "input": "", "output": "Gerrick Kingsblood was a free folk raider who founded House Redbeard.", "category": "IT"}, {"instruction": "Categorize these as a person, place, or thing", "input": "", "output": "Zach, city, town, Alex, Richard, orange, bottle", "category": "IT"}, {"instruction": "Why USA is best ?", "input": "", "output": "Because USA is powerful and give respect and Wealth and health benefits to all of their citizen", "category": "IT"}, {"instruction": "What's the Moroccan infrastructure ?", "input": "According to the Global Competitiveness Report of 2019, Morocco Ranked 32nd in the world in terms of Roads, 16th in Sea, 45th in Air and 64th in Railways. This gives Morocco the best infrastructure rankings in the African continent.[124]\n\nModern infrastructure development, such as ports, airports, and rail links, is a top government priority. To meet the growing domestic demand, the Moroccan government invested more than $15 billion from 2010 to 2015 in upgrading its basic infrastructure.[125]\n\nMorocco has one of the best road systems on the continent. Over the past 20 years, the government has built approximately 1770 kilometers of modern roads, connecting most major cities via toll expressways. The Moroccan Ministry of Equipment, Transport, Logistics, and Water aims to build an additional 3380 kilometers of expressway and 2100 kilometers of highway by 2030, at an expected cost of $9.6 billion. It focuses on linking the southern provinces, notably the cities of Laayoune and Dakhla to the rest of Morocco.\n\nIn 2014, Morocco began the construction of the first high-speed railway system in Africa linking the cities of Tangiers and Casablanca. It was inaugurated in 2018 by the King following over a decade of planning and construction by Moroccan national railway company ONCF. It is the first phase of what is planned to eventually be a 1,500 kilometeres (930 mi) high-speed rail network in Morocco. An extension of the line to Marrakesh is already being planned.\n\nMorocco also has the largest port in Africa and the Mediterranean called Tanger-Med, which is ranked the 18th in the world with a handling capacity of over 9 million containers. It is situated in the Tangiers free economic zone and serves as a logistics hub for Africa and the world.[126]", "output": "Morocco has the best infrastructure in Africa.Morocco is ranked 32 in the world in terms of Roads, 16th in Sea , 45th in Air and 64 in Railways. A High-speed railway system was inaugurated in 2018. It's linking the cities of Tangiers and Casablanca. An extension of the line is already planned.\nMorocco has also  the largest port in Africa called Tanger Med. It's ranked 18th in the world.", "category": "IT"}, {"instruction": "What advise would you give  on touring India?", "input": "", "output": "India is a very large and diverse country. Despite many commonalities such as religion and weather, the east west north and south India have distinct variations in culture, food, music and attire. There are even variations in language at state level. \n\nThere are 28 states and 8 Union territories in India. Union Territories are administered by the President through an Administrator appointed by him/her. \n\nBesides the mega cities  Mumbai, Delhi, Calcutta, Bangluru and Chennai, smaller towns such as Udaypur, Jaipur, Ahmedabad, Agra, Amritsar, Pune also attract a good number of visitors. Indian government promotes tourism under \u201cIncredible India\u201d slogan. \n\nRecent devaluation of Indian currency provides an opportunity to get more bang for your bucks. Although, prices have reason sharply in India due to constant inflation. \n\nLaw and order tend to be generally good. However as a foreigner, be extra careful as they are targets of mugging in less populated areas at night.", "category": "IT"}, {"instruction": "What is React?", "input": "", "output": "React is a JavaScript library that specializes in helping developers build user interfaces.", "category": "IT"}, {"instruction": "What is a derivative in finance?", "input": "", "output": "In finance, a derivative is a contract that derives its value from the performance of an underlying entity. This underlying entity can be an asset, index, or interest rate, and is often simply called the \"underlying\". Derivatives can be used for a number of purposes, including insuring against price movements (hedging), increasing exposure to price movements for speculation, or getting access to otherwise hard-to-trade assets or markets.\n\nSome of the more common derivatives include forwards, futures, options, swaps, and variations of these such as synthetic collateralized debt obligations and credit default swaps. Most derivatives are traded over-the-counter (off-exchange) or on an exchange such as the Chicago Mercantile Exchange, while most insurance contracts have developed into a separate industry. In the United States, after the financial crisis of 2007\u20132009, there has been increased pressure to move derivatives to trade on exchanges.\n\nDerivatives are one of the three main categories of financial instruments, the other two being equity (i.e., stocks or shares) and debt (i.e., bonds and mortgages).", "category": "IT"}, {"instruction": "Is the sun hot?", "input": "", "output": "Yes the sun is hot, however the surface of the sun is approximately 10,000 degrees Fahrenheit, or as the rest of the world would recognise, 5,500 degrees Celsius.\n\nAt the core however, temperatures are much hotter, 27 million degrees Fahrenheit (15 million degrees Celsius) which is necessary to maintain the fusion reaction which provides the warmth we feel. Once all the hydrogen is convert to helium with fusion, the sun will no longer exert external pressure and will likely become a neutron star.", "category": "IT"}, {"instruction": "What is email?", "input": "", "output": "Email is form of electronic communication that is distributed between computers over closed and open networks.  The internet is the most common network that is used for email communication.  Email services that are very popular are gmail, outook, protonmail, and yahoo mail.  Major fortune 500 companies all use email communication in one form or another to help their companies and people all be more productive and deliver results faster.", "category": "IT"}, {"instruction": "List some beverages that you can buy at Starbucks.", "input": "", "output": "Frappuccino, shaken espresso, caramel macchiato, refresher, hot chocolate, latte, drip coffee", "category": "IT"}, {"instruction": "Why did Kim Kardashian and Ye divorce?", "input": "", "output": "Kim and Ye were living two separate lives. Kim was in Hidden Hills, CA taking care of their four kids while Ye was developing the acres of land he bought in Wyoming. Ye began creating a whole self-sustaining community of christian devoted followers while Kim was filming her show and studying to become a lawyer. They began to grow a part, not to mention claims of both of them cheating. After two years trying to become divorced, they most recently officially became divorced and Ye must pay Kim $200,000 per month for security of their kids. Kim bought their house from Ye and other financials were settled.", "category": "IT"}, {"instruction": "Can you give me some reasons why Hockey is not as popular in the United States as many other sports?", "input": "", "output": "Yes,\n\n1. Hockey requires a field of ice which can only naturally occur in colder climates which limits the geographic appeal of the sport. Also, ice rinks are not as readily available around the country as, say, a soccer field or basketball court.\n\n2. Hockey is an expensive sport to play. One needs to purchase pads, sticks, helmets, and other gear, as well as rent out an ice rink for practices and games.\n\n3. In addition to cost, the barrier for entry related to skill is quite high compared to most other sports. One must first be able to ice skate before playing hockey which is a skill many people don't have.", "category": "IT"}, {"instruction": "First you'd need to consider what you're using it for. Exercise bikes can be very different from commuters or casual ride bikes or velodrome racers. Another consideration is budget: bikes can range from a couple hundred dollars in price to several thousand. Accessories can dramatically increase the price as well.\n\nFor general, all-purpose bikes you may want to consider a commuter bicycle. It would have a wider, thicker wheel than a road bike so it would be a little sturdier for urban roads. They tend to be a bit heavier, so there is a tradeoff.", "input": "", "output": "There isn't any one bicycle that would be ideal for all people. Bike shops have experts who can advise the right model and size for you and your main uses. You could also look at product results from online bike shops and read reviews to supplement the advice from the shop. A meetup or ride with a local cycling group would be another great source of advice and targeted knowledge for making a decision which bike is right for you.", "category": "IT"}, {"instruction": "what is the difference between a rat and a mouse", "input": "", "output": "rat is larger mammal, mice are slender in size", "category": "IT"}, {"instruction": "How old was Mozart when he first performed?", "input": "", "output": "He was six years old when he first performed in front of royalty", "category": "IT"}, {"instruction": "Kaka means parrot in which language", "input": "", "output": "Maori", "category": "IT"}, {"instruction": "Who is best Michael Schumacher or Hamilton", "input": "", "output": "Michael Schumacher is the best player in the world.The time he drove the car is more dangerous and was not regulated like the modern F1", "category": "IT"}, {"instruction": "What is orange wine?", "input": "", "output": "Orange wine is a term given to white wines that have \"skin contact\" during the wine making process. Unlike true white wines, where contact between the pressed white grape juice and the white grape skins is minimised, for an orange wine the pressed juice will macerate with the skins, similar to the process for making a red wine. The depth of colour and the level of tannin present in the resulting wine will be determined, largely, by the length of this maceration. Due to the presence of tannin, orange wines can often taste \"funky\" compared to white wines, and are very popular with proponents of the natural wine movement.", "category": "IT"}, {"instruction": "What is behavioural economics?", "input": "", "output": "A method of economic analysis that applies psychological insights into human behavior to explain economic decision-making. Behavioural economics, the application of psychological insights to economic theories and problems, has been growing in influence for decades.\u2019 In short behavioural economics is a subset of the study of economics. It is a method of economic analysis that applies psychological insights into human behaviours to explain economic decision making.", "category": "IT"}, {"instruction": "What are three capital cities in South America?", "input": "", "output": "Three capital cities in South America are Montevideo, Quito, and Lima.", "category": "IT"}, {"instruction": "Who were the commanders of the two armies involved in the Battle of Hastings?", "input": "", "output": "The Norman-French army was commanded by William, the Duke of Normandy. The English army fought for King Harold Godwinson.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Daf, Bandura", "input": "", "output": "Bandura is string, Daf is percussion.", "category": "IT"}, {"instruction": "I want to write a some new articles for my data blog, can you give me some snappy ideas?", "input": "", "output": "Lakehouse vs Warehouse - Hype vs Reality\nETL in the 2020s - What's in and what's out\nIs the Data Warehouse dead - modern analytics for the modern era\nOpen data sharing - The whys, hows and gotchas", "category": "IT"}, {"instruction": "How long will it take me to train for a marathon?", "input": "", "output": "It depends on your goals! Many runners training to finish a marathon can do so with only 12 weeks of training, but if you are aiming for a PR or to qualify for the Boston Marathon, you'll likely need a longer training plan. Most runners who qualify for Boston run between 50 and 80 miles a week, which can take anywhere from 10 to 15 hours a week.", "category": "IT"}, {"instruction": "What is a good park in Redmond, WA", "input": "", "output": "Marymoor Park in Redmond, WA", "category": "IT"}, {"instruction": "What causes Type 2 Diabetes?", "input": "Type 2 diabetes primarily occurs as a result of obesity and lack of exercise. Some people are genetically more at risk than others.", "output": "Type 2 diabetes primarily occurs as a result of obesity and lack of exercise. Some people are genetically more at risk than others.", "category": "IT"}, {"instruction": "Create a comma separated list of the countries involved in the early cultivation of avocados", "input": "Persea americana, or the avocado, possibly originated in the Tehuacan Valley[25] in the state of Puebla, Mexico,[26] although fossil evidence suggests similar species were much more widespread millions of years ago. However, there is evidence for three possible separate domestications of the avocado, resulting in the currently recognized Mexican (aoacatl), Guatemalan (quilaoacatl), and West Indian (tlacacolaocatl) landraces.[27][28] The Mexican and Guatemalan landraces originated in the highlands of those countries, while the West Indian landrace is a lowland variety that ranges from Guatemala, Costa Rica, Colombia, Ecuador to Peru,[27] achieving a wide range through human agency before the arrival of the Europeans.[28] The three separate landraces were most likely to have already intermingled[a] in pre-Columbian America and were described in the Florentine Codex.[28]\n\nThe earliest residents of northern coastal Peru were living in temporary camps in an ancient wetland and eating avocados, along with chilies, mollusks, sharks, birds, and sea lions.[29] The oldest discovery of an avocado pit comes from Coxcatlan Cave, dating from around 9,000 to 10,000 years ago.[25][28] Other caves in the Tehuacan Valley from around the same time period also show early evidence for the presence and consumption of avocado.[25] There is evidence for avocado use at Norte Chico civilization sites in Peru by at least 3,200 years ago and at Caballo Muerto in Peru from around 3,800 to 4,500 years ago.[25]", "output": "Mexico, Guatemala, West Indies, Costa Rica, Colombia, Ecuador, Peru", "category": "IT"}, {"instruction": "what is the capital of China?", "input": "", "output": "The capital of China is Beijing.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Bassoon, Mandolin", "input": "", "output": "Mandolin is string, Bassoon is woodwind.", "category": "IT"}, {"instruction": "How fast can an ostrich run?", "input": "", "output": "An ostrich can run up to 56 mph (90 km/h). It is the fastest land animal after the cheetah.", "category": "IT"}, {"instruction": "From the passage below, please extract the official starting date of the United States Space Force.", "input": "The U.S. Space Force traces its roots to the beginning of the Cold War, with the first Army Air Forces space programs starting in 1945. In 1954, the Western Development Division, under General Bernard Schriever, was established as the first dedicated space organization within the U.S. Armed Forces[10][11] and continues to exist as the Space Force's Space and Missile Systems Center. Military space forces were organized under several different Air Force major commands until they were unified when Air Force Space Command was established on 1 September 1982. U.S. space forces first began conducting combat support operations in the Vietnam War and continued to provide satellite communications, weather, and navigation support during the 1982 Falklands War, 1983 United States invasion of Grenada, 1986 United States bombing of Libya, and 1989 United States invasion of Panama. The first major employment of space forces culminated in the Gulf War, where they proved so critical to the U.S.-led coalition that it is sometimes referred to as the first \"space war\".\n\nThe first discussions of creating a military space service occurred in 1958, and it was nearly established in 1982 by President Ronald Reagan as part of the Strategic Defense Initiative, but the idea dissolved with treaty compliance concerns.[12] A 2001 Space Commission argued for the creation of a Space Corps around 2007\u20132011, but no action was taken by the Obama Administration. On 20 December 2019, the United States Space Force Act was signed into law as part of the National Defense Authorization Act, reorganizing Air Force Space Command and other space elements into the United States Space Force, and creating the first new independent military service since the Army Air Forces were reorganized as the U.S. Air Force in 1947.", "output": "The United States Space Force Act was signed into law as part of the National Defense Authorization Act on December 20, 2019. This act reorganized the Air Force Space Command and other space elements into the United States Space Force, and officially created the first new independent military service since the Army Air Forces were reorganized as the U.S. Air Force in 1947.", "category": "IT"}, {"instruction": "Based on this paragraph, during what year was Hearst born?", "input": "Hearst died at the age of 70 in Washington, D.C., on February 28, 1891. The California Legislature and state courts adjourned so officials could attend his funeral.[20] When Phoebe Apperson Hearst inherited her husband's wealth, she donated a great deal of it to help found new libraries at several universities.[21] Hearst is buried in Cypress Lawn Cemetery in Colma, California. His widow and son were later buried there as well. The Hearst Memorial Mining Building on the Berkeley campus is dedicated to George Hearst. In 1996, he was inducted into the Hall of Great Westerners of the National Cowboy & Western Heritage Museum.[22]", "output": "Hearst died at the age of 70 in 1891, so he must have been born in either 1820 or 1821.", "category": "IT"}, {"instruction": "Classify each of the following as either a title by Margaret Atwood or Mary Shelley: The Handmaid's Tale, The Testaments, The Edible Woman, Oryx and Crake, The Year of the Flood, Frankenstein, The Last Man, Lodore, The Mortal Immortal, Maurice", "input": "", "output": "Margaret Atwood: The Handmaid's Tale, The Testaments, The Edible Woman, Oryx and Crake, The Year of the Flood\nMary Shelley: Frankenstein, The Last Man, Lodore, The Mortal Immortal, Maurice", "category": "IT"}, {"instruction": "Tell me whether each of these are green or yellow: lemon, lime, cheese, spinach, lettuce, spaghetti", "input": "", "output": "Lemon: Yellow\nLime: Green\nCheese: Yellow\nSpinach: Green\nLettuce: Green\nSpaghetti: Yellow", "category": "IT"}, {"instruction": "Which of the other locations mentioned in this article is closest to Rudzk Du\u017cy?", "input": "Rudzk Du\u017cy [\u02c8rut\u0361sk \u02c8du\u0290\u0268] is a village in the administrative district of Gmina Piotrk\u00f3w Kujawski, within Radziej\u00f3w County, Kuyavian-Pomeranian Voivodeship, in north-central Poland.[1] It lies approximately 6 kilometres (4 mi) south-west of Piotrk\u00f3w Kujawski, 15 km (9 mi) south-west of Radziej\u00f3w, and 59 km (37 mi) south of Toru\u0144.", "output": "Piotrk\u00f3w Kujawski. Rudzk Du\u017cy is closest to Piotrk\u00f3w Kujawski.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Chime bar, Pinaka vina", "input": "", "output": "Pinaka vina is string, Chime bar is percussion.", "category": "IT"}, {"instruction": "What does BAFTA stands for ?", "input": "", "output": "British Academy of Film and Television Arts", "category": "IT"}, {"instruction": "Why is sleep training your baby important?", "input": "", "output": "Sleep training your baby is important because it teaches your child the fundamental skill of self-soothing themselves to sleep. If your baby is not sleep trained, it will likely result in them waking up more often at night and needing the parent's help to soothe or rock them back to sleep. There are several methods you can use to sleep train your baby including the \"cry it out\" method, which works by allowing your child to cry while checking in on them incrementally to make sure they know you're there. When using the cry it out method, you need to ensure that all of your baby's needs have been met. Make sure your child is fed, changed, burped, and is overall comfortable. You can use words like \"it's sleepy time\" to signal your baby to sleep. This method takes about 4-7 days to work and has been proven to be the most effective and completely safe to use on your child.", "category": "IT"}, {"instruction": "Provide a list of cities you drive through to get from San Diego to Phoenix", "input": "", "output": "Alpine, El Centro, Yuma, Gila Bend", "category": "IT"}, {"instruction": "Classify these technologies as frontend or backend oriented: React, Kafka, MySQL, JavaScript, gRPC, SQL, Prometheus, Android, Swift, Redis, JDBC", "input": "", "output": "React, Android, Swift and JavaScript are frontend oriented, while Kafka, MySQL, gRPC, SQL, Prometheus, Redis and JDBC are backend oriented.", "category": "IT"}, {"instruction": "What is the length of a championship rowing race?", "input": "Rowing, sometimes called crew in the United States, is the sport of racing boats using oars. It differs from paddling sports in that rowing oars are attached to the boat using oarlocks, while paddles are not connected to the boat. Rowing is divided into two disciplines: sculling and sweep rowing. In sculling, each rower holds two oars\u2014one in each hand, while in sweep rowing each rower holds one oar with both hands. There are several boat classes in which athletes may compete, ranging from single sculls, occupied by one person, to shells with eight rowers and a coxswain, called eights. There are a wide variety of course types and formats of racing, but most elite and championship level racing is conducted on calm water courses 2 kilometres (1.2 mi) long with several lanes marked using buoys.", "output": "Championship rowing races are conducted over 2 kilometers (1.2 miles) with dedicated lanes delineated by bouys.", "category": "IT"}, {"instruction": "What should I get my wife for mother's day?", "input": "", "output": "Mother's day is a great opportunity for a thoughtful gift. If she has a car, getting her car washed can be a nice surprise. You can pair that with a nice meal out, but instead of having her pick the place, give two or three suggestions and let her choose. If she often plans the meals, asking her to just pick the places without options is shifting the cognitive load to her and not a gift if she already plans the meals daily. If you would a gift to wrap and are not sure what she would like, this is where you can phone a friend or female family member and see if they have any suggestions for gifts. If none of these work for you, go to a store that she likes and around mother's days most stores will have items marketed as mother's day gifts. If that is still too much, Amazon will have holiday specific gifts and you can include gift  wrapping on check out.", "category": "IT"}, {"instruction": "Hip Hop song Make Me Proud", "input": "\"Make Me Proud\" is a hip hop song by Canadian recording artist Drake, released as the third single from his second studio album, Take Care, featuring rapper Nicki Minaj. It was released as a digital download on October 16, 2011 and impacted rhythmic radio on October 25, 2011 in the U.S.[1][2]", "output": "Make Me Proud is a hip hop song by Canadian recording artist Drake, released as the third single from his second studio album, Take Care, featuring rapper Nicki Minaj. It was released as a digital download on October 16, 2011 and impacted rhythmic radio on October 25, 2011 in the U.S.", "category": "IT"}, {"instruction": "how to become a yoga instructor?", "input": "", "output": "Yoga instructor is usually a yogi that bears a passion to instruct and help other yogis. To be certified, you must complete yoga instructor training. There are online, in person and hybrid options for the yoga instructor training. Once certified, you can start teaching in the community. However, to be a registered member of yoga instructor associations, it generally requires 200 hours of certified training time every year. Members of a renowned yoga instructor association provides better credentials and makes it easier to find customers on your own or find a position with gyms or yoga studios.", "category": "IT"}, {"instruction": "Come up with short road trips from Berkeley that I can drive to within two hours.", "input": "", "output": "From Berkeley, some destinations within a 2 hours drive include Napa, San Francisco, Sacramento, and Marin.", "category": "IT"}, {"instruction": "Who were the Sumerians?", "input": "", "output": "The Sumerian culture (3000-2350 BC) is regarded as humanity's first urban civilization. It originated in southern Mesopotamia, between the Tigris and Euphrates rivers, and is related to Neolithic cultures, particularly the Uruk culture. They invented the wheel and writing, had a division of labor-based organization, and were incredible builders. Their Sumerian language is unrelated to any other known language. Sumerian is a cuneiform language, with ideograms, symbols, and abstract forms representing ideas rather than specific words or sounds.", "category": "IT"}, {"instruction": "What was Selective Service Act?", "input": "", "output": "The Selective Service Act was passed in 1917 (May). It enabled the country to enlist more men to the military", "category": "IT"}, {"instruction": "Who is Juliette Roche?", "input": "Juliette Roche (1884\u20131980), also known as Juliette Roche Gleizes, was a French painter and writer who associated with members of the Cubist and Dada movements. She was married to the artist Albert Gleizes.\n\nShe was born in 1884 to a wealthy Parisian family. Her father, Jules Roche, was a prominent member of both the French government and avant-garde art world. Other strong connections to the art world were manifested in her relationships with her godmother, \u00c9lisabeth, Countess Greffulhe, and her father's godson, Jean Cocteau.[1] Juliette Roche studied painting at the Acad\u00e9mie Ranson in Paris, with the support of her father. There, she was introduced to the artistic style of Les Nabis. In her poetic and pictorial work she showed profiles of independent women capable of self-expression.[1][2]\n\nIn 1913, she exhibited at the Salon des Ind\u00e9pendants and began writing poetry, inserting phrases, such as advertising slogans; experimenting with typographic elements. In 1914 she held her first solo exhibition at the Bernheim-Jeune gallery.\n\nWhen the First World War broke out, she traveled to New York City with her soon to be husband, the Cubist artist Albert Gleizes,[3] who she met through the intermediary of Ricciotto Canudo, a film theoretician who published an avant-garde magazine Montjoie!, promoting Cubism.[4][5] Juliette Roche and Albert Gleizes were married in September 1915.[6][7]\n\nIn New York, she took part in Dada activities with Marcel Duchamp and Francis Picabia,[6] The Gleizes' then traveled to Barcelona to exhibit in the Galeries Dalmau before returning to New York.[6] collaborating with Duchamp in the preparation of the first exhibition of the Society of Independent Artists of 1917,[6] and Duchamp submitted his infamous readymade Fountain.[8][9]\n\nIn 1919, she returned to Paris and began writing La min\u00e9ralisation de Dudley Craving Mac Adam, published in 1924, a story that tells of the adventures of Ather Cravan and other artists in exile in New York.[10]\n\nIn 1920-21, she wrote \u00c9tat... Colloidal, published by the Chilean journalist Vicente Huidobro in the magazine Creaci\u00f3n.[11]\n\nIn 1927, together with Albert Gleizes, they founded the Moly-Sabata [fr], a residence of artists in Sablons, which offered studios and workshops.[12] She continued to exhibit the rest of his life in group exhibitions.", "output": "Juliette Roche was born in 1884 and was a French painter and writer. She was married to the artist Albert Gleizes.\nShe was also the founder of Moly-Sabata, a residence of artists in Sablons.", "category": "IT"}, {"instruction": "Who is Frank Lloyd Wright, and why is he famous?", "input": "Frank Lloyd Wright (June 8, 1867 \u2013 April 9, 1959) was an American architect, designer, writer, and educator.\n\nHe designed more than 1,000 structures over a creative period of 70 years. Wright played a key role in the architectural movements of the twentieth century, influencing architects worldwide through his works and hundreds of apprentices in his Taliesin Fellowship.[1][2] Wright believed in designing in harmony with humanity and the environment, a philosophy he called organic architecture. This philosophy was exemplified in Fallingwater (1935), which has been called \"the best all-time work of American architecture\".[3]\n\nWright was the pioneer of what came to be called the Prairie School movement of architecture and also developed the concept of the Usonian home in Broadacre City, his vision for urban planning in the United States. He also designed original and innovative offices, churches, schools, skyscrapers, hotels, museums, and other commercial projects. Wright-designed interior elements (including leaded glass windows, floors, furniture and even tableware) were integrated into these structures. He wrote several books and numerous articles and was a popular lecturer in the United States and in Europe. Wright was recognized in 1991 by the American Institute of Architects as \"the greatest American architect of all time\".[3] In 2019, a selection of his work became a listed World Heritage Site as The 20th-Century Architecture of Frank Lloyd Wright.\n\nRaised in rural Wisconsin, Wright studied civil engineering at the University of Wisconsin and then apprenticed in Chicago, briefly with Joseph Lyman Silsbee, and then with Louis Sullivan at Adler & Sullivan. Wright opened his own successful Chicago practice in 1893 and established a studio in his Oak Park, Illinois home in 1898. His fame increased and his personal life sometimes made headlines: leaving his first wife Catherine Tobin for Mamah Cheney in 1909; the murder of Mamah and her children and others at his Taliesin estate by a staff member in 1914; his tempestuous marriage with second wife Miriam Noel (m. 1923\u20131927); and his courtship and marriage with Olgivanna Lazovi\u0107 (m. 1928\u20131959).", "output": "Frank Lloyd Wright continues to be an inspiration in architecture around the United States and many of his originally designed buildings and structures stand today.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Velociraptor, Pacific Salmon", "input": "", "output": "Velociraptor is extinct, Pacific Salmon is alive.", "category": "IT"}, {"instruction": "Which of the following is not a Hemsworth brother? Chris, Liam, Reginald, Bobert, Robert, Luke", "input": "", "output": "Reginald, Bobert, and Robert are not Hemsworth brothers.", "category": "IT"}, {"instruction": "What does kwon mean in taekwondo?", "input": "Taekwondo, Tae Kwon Do or Taekwon-Do is a Korean form of martial arts involving punching and kicking techniques, with emphasis on head-height kicks, spinning jump kicks, and fast kicking techniques. The literal translation for tae kwon do is \"kicking\", \"punching\", and \"the art or way of\". They are a kind of martial arts in which one attacks or defends with hands and feet anytime or anywhere, with occasional use of weapons. The physical training undertaken in Taekwondo is purposeful and fosters strength of mind through mental armament.", "output": "'kwon' in Korean means punching or striking with the hand", "category": "IT"}, {"instruction": "Extract the reasons the Atcama Desert is one of the driest places on earth and list them in bullet format.", "input": "One of the driest places on Earth is the Atacama Desert.[12][13][14][15][16] It is virtually devoid of life because it is blocked from receiving precipitation by the Andes mountains to the east and the Chilean Coast Range to the west. The cold Humboldt Current and the anticyclone of the Pacific are essential to keep the dry climate of the Atacama. The average precipitation in the Chilean region of Antofagasta is just 1 mm (0.039 in) per year. Some weather stations in the Atacama have never received rain. Evidence suggests that the Atacama may not have had any significant rainfall from 1570 to 1971. It is so arid that mountains that reach as high as 6,885 m (22,589 ft) are completely free of glaciers and, in the southern part from 25\u00b0S to 27\u00b0S, may have been glacier-free throughout the Quaternary, though permafrost extends down to an altitude of 4,400 m (14,400 ft) and is continuous above 5,600 m (18,400 ft).[17][18] Nevertheless, there is some plant life in the Atacama, in the form of specialist plants that obtain moisture from dew and the fogs that blow in from the Pacific.[12]", "output": "-blocked from receiving precipitation by the Andes mountains to the east and the Chilean Coast Range to the west\n-cold Humboldt Current and the anticyclone of the Pacific", "category": "IT"}, {"instruction": "What was the primary reason for constructing the Berlin Wall?", "input": "The Berlin Wall (German: Berliner Mauer, pronounced [b\u025b\u0281\u02ccli\u02d0n\u0250 \u02c8ma\u028a\u032f\u0250] (listen)) was a guarded concrete barrier that encircled West Berlin of the Federal Republic of Germany (FRG) from 1961 to 1989, separating it from East Berlin and the German Democratic Republic (GDR)[a] (GDR).[1][3] Construction of the Berlin Wall was commenced by the government of the GDR on 13 August 1961. It included guard towers placed along large concrete walls,[4] accompanied by a wide area (later known as the \"death strip\") that contained anti-vehicle trenches, beds of nails and other defenses. The primary intention for the Wall's construction was to prevent East German citizens from fleeing to the West.[5]", "output": "The Berlin Wall was primarily constructed to prevent East German citizens from fleeing to the West.", "category": "IT"}, {"instruction": "how to get started with data science and machine learning?", "input": "", "output": "To be a good data scientist, you need a solid understanding of statistics and machine learning algorithms like linear regression, logistic regression, and tree-based models. Knowledge and experiences with deep learning concepts are a big plus nowadays in the job market. In addition, business acumen and good communication skills can help you bridge the gap between technical and business stakeholders. Here are a few recommended study materials: Coursera course Machine Learning by DeepLearnin.AI; Introduction to Machine Learning with Python: A Guide for Data Scientists; Hands-On Machine Learning with Scikit-Learn and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems. But most importantly, keep learning and start now!", "category": "IT"}, {"instruction": "From the text provided, extract the name of the most profitable public banking company in Sri Lanka. Include the profit and revenue in US dollars.", "input": "This list is based on the Sri Lanka Parliament, which ranks the Sri Lanka's largest public companies.[2]\n\nRank\tName\tFinancial statistics in millions US$\tIndustry\nRevenue\tProfit\tAssets\n1\tCeylon Petroleum Corporation\t3,016\t9.9\t1,477\tOil and gas\n2\tBank of Ceylon\t1,316\t413\t13,290\tBanking\n3\tCeylon Electricity Board\t1,268\t-138.12\t4,127\tElectricity generation\n4\tSriLankan Airlines\t1,017\t-230.28\t1,273\tAirline\n5\tPeople's Bank (Sri Lanka)\t1,013\t70\t10,320\tBanking\n6\tNational Savings Bank (Sri Lanka)\t672.42\t36.89\t6,370\tBanking\n7\tSri Lanka Telecom\t474.85\t34.92\t1,154\tTelecommunications\n8\tSri Lanka Ports Authority\t248.25\t5.77\t1,988\tCommercial ports\n9\tSri Lanka Insurance\t242.5\t28.55\t941.5\tInsurance", "output": "The most profitable public bank in Sri Lanka is the Bank of Ceylon. The Bank of Ceylon has a recorded profit of $413 million dollars US with a revenue of $1,316 million dollars US. The Bank of Ceylon is the 2nd largest public company in Sri Lanka.", "category": "IT"}, {"instruction": "Who was the lead singer for the band Aerosmith?", "input": "", "output": "Steven Tyler was the lead singer for Aerosmith", "category": "IT"}, {"instruction": "Given this paragraph about Twitch, during what year did twitch have more than 100 million viewers per month?", "input": "Twitch is an American video live streaming service that focuses on video game live streaming, including broadcasts of esports competitions, in addition to offering music broadcasts, creative content, and \"in real life\" streams. Twitch is operated by Twitch Interactive, a subsidiary of Amazon.com, Inc.[4] It was introduced in June 2011 as a spin-off of the general-interest streaming platform Justin.tv.[5] Content on the site can be viewed either live or via video on demand. The games shown on Twitch's current homepage are listed according to audience preference and include genres such as real-time strategy games (RTS), fighting games, racing games, and first-person shooters.[6]\n\nThe popularity of Twitch eclipsed that of its general-interest counterpart. In October 2013, the website had 45 million unique viewers,[7] and by February 2014, it was considered the fourth-largest source of peak Internet traffic in the United States. At the same time, Justin.tv's parent company was re-branded as Twitch Interactive to represent the shift in focus \u2013 Justin.tv was shut down in August 2014.[8] That month, the service was acquired by Amazon for US$970 million,[9][10] which later led to the introduction of synergies with the company's subscription service Amazon Prime. Twitch acquired Curse LLC in 2016, an operator of online video gaming communities[11] and introduced means to purchase games through links on streams along with a program allowing streamers to receive commissions on the sales of games that they play.\n\nBy 2015, Twitch had more than 100 million viewers per month.[12] In 2017, Twitch remained the leading live streaming video service for video games in the US, and had an advantage over YouTube Gaming, which shut down its standalone app in May 2019.[13][14][15] As of February 2020, it had 3 million broadcasters monthly and 15 million daily active users, with 1.4 million average concurrent users.[16][17] As of May 2018, Twitch had over 27,000 partner channels.[16][18]", "output": "Twitch surpassed 100 million viewers per month in the year 2015.", "category": "IT"}, {"instruction": "What is structural biology?", "input": "", "output": "Structural biology is a field that is many centuries old which, as defined by the Journal of Structural Biology, deals with structural analysis of living material (formed, composed of, and/or maintained and refined by living cells) at every level of organization. Early structural biologists throughout the 19th and early 20th centuries were primarily only able to study structures to the limit of the naked eye's visual acuity and through magnifying glasses and light microscopes.\n\nIn the 20th century, a variety of experimental techniques were developed to examine the 3D structures of biological molecules. The most prominent techniques are X-ray crystallography, nuclear magnetic resonance, and electron microscopy. Through the discovery of X-rays and its applications to protein crystals, structural biology was revolutionized, as now scientists could obtain the three-dimensional structures of biological molecules in atomic detail. Likewise, NMR spectroscopy allowed information about protein structure and dynamics to be obtained. Finally, in the 21st century, electron microscopy also saw a drastic revolution with the development of more coherent electron sources, aberration correction for electron microscopes, and reconstruction software that enabled the successful implementation of high resolution cryo-electron microscopy, thereby permitting the study of individual proteins and molecular complexes in three-dimensions at angstrom resolution.\n\nWith the development of these three techniques, the field of structural biology expanded and also became a branch of molecular biology, biochemistry, and biophysics concerned with the molecular structure of biological macromolecules (especially proteins, made up of amino acids, RNA or DNA, made up of nucleotides, and membranes, made up of lipids), how they acquire the structures they have, and how alterations in their structures affect their function. This subject is of great interest to biologists because macromolecules carry out most of the functions of cells, and it is only by coiling into specific three-dimensional shapes that they are able to perform these functions. This architecture, the \"tertiary structure\" of molecules, depends in a complicated way on each molecule's basic composition, or \"primary structure.\" At lower resolutions, tools such as FIB-SEM tomography have allowed for greater understanding of cells and their organelles in 3-dimensions, and how each hierarchical level of various extracellular matrices contributes to function (for example in bone). In the past few years it has also become possible to predict highly accurate physical molecular models to complement the experimental study of biological structures. Computational techniques such as Molecular Dynamics simulations can be used in conjunction with empirical structure determination strategies to extend and study protein structure, conformation and function.", "category": "IT"}, {"instruction": "What country most recently joined NATO?", "input": "", "output": "Finland is the most recent country to join NATO, formally becoming a member on 4 April 2023. It is the 31st country to join the North Atlantic Treaty Organization.", "category": "IT"}, {"instruction": "Where was Old French language spoken?", "input": "Old French (franceis, fran\u00e7ois, romanz; Modern French: ancien fran\u00e7ais) was the language spoken in most of the northern half of France from approximately the 8th to the 14th centuries. Rather than a unified language, Old French was a linkage of Romance dialects, mutually intelligible yet diverse, spoken in the northern half of France. These dialects came to be collectively known as the langue d'o\u00efl, contrasting with the langue d'oc in the south of France. The mid-14th century witnessed the emergence of Middle French, the language of the French Renaissance in the \u00cele de France region; this dialect was a predecessor to Modern French. Other dialects of Old French evolved themselves into modern forms (Poitevin-Saintongeais, Gallo, Norman, Picard, Walloon, etc.), each with its own linguistic features and history.", "output": "Northern half of France in the 8th to 14th centuries.", "category": "IT"}, {"instruction": "How should I pick a name for my baby?", "input": "", "output": "There is no right answer to this question.  It really depends on your preferences.  If family names matter to you, that can make your choice easy; just pick the name of a close relative.  If you like hearing others' opinions, you can ask lots of family and friends for ideas.  If you want to explore new ideas, there are lots of websites and books of baby names.", "category": "IT"}, {"instruction": "What are some highlights of Lionel Messi's career goals?", "input": "Lionel Messi is an Argentine professional footballer who has represented the Argentina national football team as a forward since his debut in 2005. Since then, Messi has scored 102 goals in 174 international appearances,[1] making him the country's all-time top scorer; he surpassed Gabriel Batistuta's record of 54 goals with a free kick against the United States in the semi-final of the Copa Am\u00e9rica Centenario on 21 June 2016.[2][3] He also holds the record for most goals by a South American male, surpassing Pel\u00e9\u2018s 77 goals with a hat-trick against Bolivia in September 2021.[4] Messi made his debut for Argentina in a 2\u20131 away win over Hungary on 17 August 2005,[5] and scored his first international goal a year later in his sixth appearance, against Croatia.[1]\n\nMessi's goal against Serbia and Montenegro, on 16 June 2006, at the age of 18 years and 357 days, made him the youngest-ever scorer for Argentina at a FIFA World Cup.[6] He has scored nine international hat-tricks, and has netted twice in a match on ten occasions.[1] In a June 2022 friendly against Estonia, Messi scored five goals in a match for Argentina for the first time.[7] Out of all his opponents, Messi has scored the most against Bolivia, netting eight goals in total.[1]", "output": "He is his country's all-time top scorer with 102 goals in 174 international appearances. He also is the South American male with most goals, surpassing Pel\u00e9's 77 goals. He also was the youngest-ever scorer for Argentina at a Fifa World Cup. He has scored nine international hat-tricks, and scored five times in a match for Argentina for the first time against Estonia in June 2022.", "category": "IT"}, {"instruction": "How can I go from my couch to running a 5K in 3 months?", "input": "", "output": "Basically, you are asking, how to go from not running at all to completing your first 5K.  It is best to first consult your doctor before starting any exercise program.  Make sure you invest in an excellent pair of running shoes, try a local running shoe store for advice.  Start off by measuring the time you are running.  Alternate days running and gradually increase the length of time being careful not to increase more than 10% per run.   Once you get up to 30 minutes of running every other day, start increasing the length of time running every fourth day by 10% again until you hit 45 minutes.  It is ok to walk if you feel you need to.  Then you will be 5K running race ready.", "category": "IT"}, {"instruction": "What is the population of Canada?", "input": "", "output": "Canada is a country in North America with a population of 38.25 million people. Its ten provinces and three territories extend from the Atlantic Ocean to the Pacific Ocean and northward into the Arctic Ocean, making it the world's second-largest country by total area, with the world's longest coastline. It is characterized by a wide range of both meteorologic and geological regions. The country is sparsely inhabited, with the vast majority residing south of the 55th parallel in urban areas. Canada's capital is Ottawa and its three largest metropolitan areas are Toronto, Montreal, and Vancouver.", "category": "IT"}, {"instruction": "Give me a list of the teams that have won the English Premier League", "input": "", "output": "- Manchester United (13 times, most recently 2012-13)\n- Blackburn Rovers (Once, 1994-95)\n- Arsenal (Three times, most recently 2003-04)\n- Chelsea (Five times, most recently 2016-17)\n- Manchester City (Six times, most recently 2021-22)\n- Leicester City (Once, 2015-16)\n- Liverpool (Once, 2019-20)", "category": "IT"}, {"instruction": "Imagine you are a grandparent who wants a grandchild. Write a persuasive argument to your children.", "input": "", "output": "As a grandparent, one of my greatest joys has been raising my children. I want you to experience the same in your life. While there is hard work involved, seeing your children grow up is worth it all. I want you to be able to grow old with those memories and be surrounded by family who can spend time with you and help take care of you. I hope you consider having children.", "category": "IT"}, {"instruction": "What is the reported biodiversity of Costa Rica?", "input": "", "output": "Costa Rica has from a 5% to a 6% of the World's biodiversity.", "category": "IT"}, {"instruction": "Give me an idea for a country to travel to that is safe, inexpensive and does not fall into the well trodden tourist path?", "input": "", "output": "One such place is Mongolia. Situated between China and Russia, it is an ideal destination to explore national parks, deserts, and history. Mongolia is the historic home to one of the largest empires to ever conquered the earth. The Mongol empire covered most of Eurasia and had a fierce nomadic culture and modern weaponry. \nAs a traveler to Mongolia, you can spend time with today's nomadic tribes, hike through the Khstain Nuruu National Park park while sleeping in luxury tents, marvel at the beauty of Ugil Lake, or Camel ride through the dunes of the Gobi desert. \nYou will enjoy Mongolia while feeling safe and awed without breaking the bank.", "category": "IT"}, {"instruction": "Why do we watch television?", "input": "", "output": "Television are in almost every home in the United States today.  Currently 97% of all US households have an average of 2-3 televisions per home.  We use TV as a communication tool to learn what is going on around us in our communities, outside of our communities, and all around the world.  It is a way for us to stay connected on current events and get prepared and be safe due to forecasted natural disasters.  We use television to even find missing persons, learn who to donate to for good causes, and stay up to date with what is going on in the political arena.", "category": "IT"}, {"instruction": "What streaming shows are worth binging right now?", "input": "", "output": "First series that comes to mind is the HBO show Succession. This series dives into the dynamic of a family business on a big scale and the power shifts and crazy situations the children of the CEO get themselves into. On a total different viewing experience is Love is Blind on Netflix. This reality show involves an experiment that is trying to determine if Love is Blind. Contestants date in pods, with a with in between them and only can talk to one another and not physically see the other person. Love does come about and so does heart break.", "category": "IT"}, {"instruction": "What is electrostatics the study of?", "input": "The concept of the electric field was introduced by Michael Faraday. An electric field is created by a charged body in the space that surrounds it, and results in a force exerted on any other charges placed within the field. The electric field acts between two charges in a similar manner to the way that the gravitational field acts between two masses, and like it, extends towards infinity and shows an inverse square relationship with distance. However, there is an important difference. Gravity always acts in attraction, drawing two masses together, while the electric field can result in either attraction or repulsion. Since large bodies such as planets generally carry no net charge, the electric field at a distance is usually zero. Thus gravity is the dominant force at distance in the universe, despite being much weaker.\nAn electric field generally varies in space and its strength at any one point is defined as the force (per unit charge) that would be felt by a stationary, negligible charge if placed at that point. The conceptual charge, termed a 'test charge', must be vanishingly small to prevent its own electric field disturbing the main field and must also be stationary to prevent the effect of magnetic fields. As the electric field is defined in terms of force, and force is a vector, having both magnitude and direction, so it follows that an electric field is a vector field.\nThe study of electric fields created by stationary charges is called electrostatics. The field may be visualised by a set of imaginary lines whose direction at any point is the same as that of the field. This concept was introduced by Faraday, whose term 'lines of force' still sometimes sees use. The field lines are the paths that a point positive charge would seek to make as it was forced to move within the field; they are however an imaginary concept with no physical existence, and the field permeates all the intervening space between the lines. Field lines emanating from stationary charges have several key properties: first, that they originate at positive charges and terminate at negative charges; second, that they must enter any good conductor at right angles, and third, that they may never cross nor close in on themselves.", "output": "The study of electric fields created by stationary charges is called electrostatics.", "category": "IT"}, {"instruction": "From the below text about MS Dhoni, tell me what they were most famous for?", "input": "MS Dhoni, is a former Indian cricketer and captain of the Indian national team in limited-overs formats from 2007 to 2017 and in Test cricket from 2008 to 2014, who plays as a Wicket-keeper-Batsman. He is also the current captain of Chennai Super Kings in the Indian Premier League. Under his captaincy, India won the 2007 ICC World Twenty20, the 2011 Cricket World Cup, and the 2013 ICC Champions Trophy, the most by any captain. He also led India to victory in the 2010 and 2016 Asia Cup. Additionally, under his leadership, India won the 2010 and 2011 ICC Test Mace and 2013 ICC ODI Championship. Dhoni is a right-handed wicket-keeper batsman known for his calm captaincy and his ability to finish matches in tight situations. He has scored 17,266 runs in International Cricket (including 10,000 plus runs in ODI Internationals) and is considered one of the best finishers in the game, as well as one of the greatest wicket-keepers and captains in the history of cricket.", "output": "MS Dhoni is a former cricketer and captain of the Indian national team. He is most famously known for leading India to victory in 2007 ICC World Twenty20, the 2011 Cricket World Cup and the 2013 ICC Champions Trophy. He is also known for his calm captaincy and considered as one of the best finishers and greatest wicket-keepers in the history of the game.", "category": "IT"}, {"instruction": "When did World War II finish?", "input": "", "output": "World War II, also knowns as WW2 or WWII, was a global conflict that started in 1939 and ended in 1945.", "category": "IT"}, {"instruction": "Who is the Zurich Insurance", "input": "Zurich Insurance Group Ltd is a Swiss insurance company, headquartered in Z\u00fcrich, and the country's largest insurer.[2] As of 2021, the group is the world's 112th largest public company according to Forbes' Global 2000s list,[3] and in 2011, it ranked 94th in Interbrand's top 100 brands.[4]\n\nZurich is a global insurance company which is organized into three core business segments: General Insurance, Global Life and Farmers. Zurich employs 55,000 people, with customers in 215 countries and territories.[5] The company is listed on the SIX Swiss Exchange. As of 2012, it had shareholders' equity of $34.494 billion.[6]", "output": "The Zurich Insurance Group Ltd is a Swiss insurance company, headquartered in Z\u00fcrich, and the country's largest insurer. As of 2021, the group is the world's 112th largest public company according to Forbes' Global 2000s list, and in 2011, it ranked 94th in Interbrand's top 100 brands.", "category": "IT"}, {"instruction": "What is the best breakfast to order when out with friends?", "input": "", "output": "Eggs benedict is a superior breakfast or brunch choice. It is easy to eat, provides hearty sustenance, and is a dish that is often prepared with some creativity tailored to local specialties. While most eggs benedict have the core components of a poached egg and an english muffin there are endless variations, so it is an option you will likely be able to order again and again.", "category": "IT"}, {"instruction": "How accurate are future weather forecasts?", "input": "", "output": "Weather forecasts are typically accurate for up to 7 days in the future. Forecasts decrease in accuracy the further away you get from the day you're looking, due to the increased variability in key indicators which comprise the models used to build the forecasts.", "category": "IT"}, {"instruction": "Extract the most famous songs of the slashtones in a comma separated list.", "input": "The Slashtones (also known as \"Harry Slash & The Slashtones\") are an American musical group, formed in 1993 by New York native Harry Slash under the name \"Harry & The Slashtones\". Harry would later change the band's name many times, from \"The Slashtones\", to \"Life?!\",\"Not The Slashtones\" and then to \"Harry Slash & The Slashtones\" during the era that Harry Slash produced music for Extreme Championship Wrestling. Their best known songs are the ECW theme (\"This Is Extreme!\"), Taz's theme (\"Survive! (If I Let You)\") and Sabu's theme (\"Huka Blues\"). After Extreme Championship Wrestling went bankrupt in 2001, Harry Slash continued to record and perform with the band after changing its name back to \"The Slashtones\". The name of the band is a parody of B\u00e9la Fleck and the Flecktones, itself a play on Dick Dale and the Del-Tones.", "output": "This Is Extreme, Survive! (If I Let You), Huka Blues", "category": "IT"}, {"instruction": "Classify these programming languages to compiled or interpreted: shell script, erlang, rust, python, javascript, C++, go", "input": "", "output": "- Compiled language: erlang, rust, C++, go\n- Interpreted language: shell script, python, javascript", "category": "IT"}, {"instruction": "What are Riot Games' most popular games?", "input": "", "output": "League of Legends, Valorant, Teamfight Tactics", "category": "IT"}, {"instruction": "What is the state capital of Nevada?", "input": "", "output": "The state capital of Nevada is Carson City. Carson City is named after Kit Carson and was founded in 1858.", "category": "IT"}, {"instruction": "Why is the glass ceiling better for minority women?", "input": "A glass ceiling is a metaphor usually applied to women, used to represent an invisible barrier that prevents a given demographic from rising beyond a certain level in a hierarchy.[1] No matter how invisible the glass ceiling is expressed, it is actually a difficult obstacle to overcome.[2] The metaphor was first used by feminists in reference to barriers in the careers of high-achieving women.[3][4] It was coined by Marilyn Loden during a speech in 1978. In the United States, the concept is sometimes extended to refer to racial inequality in the United States.[3][9] Minority women in white-majority countries often find the most difficulty in \"breaking the glass ceiling\" because they lie at the intersection of two historically marginalized groups: women and people of color.[10] East Asian and East Asian American news outlets have coined the term \"bamboo ceiling\" to refer to the obstacles that all East Asian Americans face in advancing their careers.[11][12] Similarly, a multitude of barriers that refugees and asylum seekers face in their search for meaningful employment is referred to as canvas ceiling.", "output": "Actually, the glass ceiling is considered worse for minority women, not better. This is because they have to face both racial and gender inequalities.", "category": "IT"}, {"instruction": "What are some of the most important attributes of spacecraft battery and how are these attributes realized?", "input": "", "output": "Some of the most important attributes are reliability, low mass.  Reliability is often achieved through qualification testing, demonstrated performance in a flight environment and configuration management.  Mass can be minimized by using high-performance Li-ion batteries that are optimized for the anticipated use case and by right-sizing the battery to meet end of mission power requirements using calibrated battery life and performance models.", "category": "IT"}, {"instruction": "Why many people do not like pigeons?", "input": "", "output": "Like most wild animals pigeons might spread disease that people are susceptible to. In addition pigeons droppings might significantly pollute the city and be a cause of infection. As the pigeon population increases through out the years these concerns becoming important.", "category": "IT"}, {"instruction": "Tell me who are the top 5 leading scorers of all time in the NBA", "input": "", "output": "The all time leading scorers in the NBA are Lebron James, Kareem Abdul-Jabbar, Karl Malone, Kobe Bryant and Michael Jordan", "category": "IT"}, {"instruction": "Who are Sinti people?", "input": "The Sinti are a subgroup of Romani people mostly found in Germany. They arrived in Austria and Germany in the Late Middle Ages as part of the Romani emigration from the Indian Subcontinent, eventually splitting into two groups: Eftavagarja (\"the Seven Caravans\") and Estraxarja (\"from Austria\"). They arrived in Germany before 1540. The two groups expanded, the Eftavagarja into France, Portugal and Brazil, where they are called \"Manouches\", and the Estraxarja into Italy and Central Europe, mainly what are now Croatia, Slovenia, Hungary, Romania, the Czech Republic and Slovakia, eventually adopting various regional names.", "output": "Sinti are a group of people mostly settled in Germany but also settled in other European countries.", "category": "IT"}, {"instruction": "Given a reference text about Joseph Charlton, what college football team did he play for?", "input": "Joseph Charlton (born April 7, 1997) is an American football punter who is a free agent. He played college football at South Carolina.\n\nCollege career\nCharlton was a member of the South Carolina Gamecocks for five seasons, redshirting as a true freshman. He was named South Carolina's starting punter going into his redshirt sophomore year. As a redshirt junior, Charlton set a new school record by averaging 44.8 yards per punt and was named second-team All-Southeastern Conference (SEC) by the league's coaches.[1] He broke his own record in his senior season by averaging 47.7 yards per punt and was named second-team All-SEC and was an honorable mention All-American by Pro Football Focus.[2] Charlton finished his collegiate career averaging 45.5 yards per punt, a school record.[3]", "output": "Joseph Charlton played for the South Carolina Gamecocks.", "category": "IT"}, {"instruction": "Does Arizona use Daylight Savings?", "input": "", "output": "No, Arizona does not use Daylight Savings?", "category": "IT"}, {"instruction": "list 7 favourite flavours", "input": "", "output": "Vanilla\nChocolate\nOrange\nStrawberry\npineapple\nMango\nchocochip", "category": "IT"}, {"instruction": "Tell me whether each airline is American or European: British Airways, United Airlines, Southwest Airlines, Jet Blue, Easy Jet, Ryan Air", "input": "", "output": "British Airways: European\nUnited Airlines: American\nSouthwest Airlines: American\nJet Blue: American\nEasy Jet: European\nRyan Air: European", "category": "IT"}, {"instruction": "Given this text, summarize the major events in Call of Duty: Modern Warfare 2 game development and release.", "input": "Call of Duty: Modern Warfare 2 is a 2009 first-person shooter game developed by Infinity Ward and published by Activision. It is the sixth installment in the Call of Duty series and the direct sequel to Call of Duty 4: Modern Warfare. It was released worldwide on November 10, 2009, for Microsoft Windows, the PlayStation 3, and Xbox 360. A separate version for the Nintendo DS, titled Modern Warfare: Mobilized, was also released on the same day. A version for macOS was developed by Aspyr and released in May 2014, and the Xbox 360 version was made backward compatible for the Xbox One in 2018.\n\nThe game's campaign follows Task Force 141, a multi-national special forces unit commanded by Captain Soap MacTavish as they hunt Vladimir Makarov, leader of the Russian Ultranationalist party, and U.S. Army Rangers from 1st Battalion/75th Ranger Regiment who are defending the Washington, D.C. area from a Russian invasion. The game's main playable characters are Sergeant Gary \"Roach\" Sanderson, of the 141, and Private James Ramirez, of the Army Rangers, with Captain MacTavish becoming playable later in the campaign. An expansive multiplayer mode is featured in the game, with several new features and modes that were not seen in its predecessor.\n\nDevelopment for the game began in 2008, when it was still known as Call of Duty 6. It uses the IW 4.0 engine, an improved version of Call of Duty 4's IW 3.0. Infinity Ward was inspired by real-life conflicts when developing the campaign mode. They initially tested the multiplayer mode by playing an in-house beta version of the game. Modern Warfare 2 was officially announced in February 2009. Teasing of the game began in March, with short trailers being released for the game and, eventually, a full reveal trailer. The multiplayer mode was revealed shortly after. Two downloadable content packs were released for it post-release, each containing five new multiplayer maps, with some being remastered maps from Call of Duty 4.\n\nModern Warfare 2 received universal acclaim, with praise for its campaign, multiplayer, and amount of content, although it received some criticism for its short length and a lack of innovation. Within 24 hours of release, the game sold approximately 4.7 million copies in North America and the United Kingdom. As of 2013, the game had sold 22.7 million copies. In addition to its release, a comic book series based on character Simon \"Ghost\" Riley was also produced, titled Modern Warfare 2: Ghost. Despite the game's success, it was subject to some controversies, with one surrounding a playable level that had the player carry out a terror attack on an airport. A sequel, Call of Duty: Modern Warfare 3, was released in 2011 and finishes the original Modern Warfare storyline. A remaster of the game's campaign, Call of Duty: Modern Warfare 2 Campaign Remastered, was released in March 2020 on the PlayStation 4 and on Microsoft Windows and Xbox One in April 2020.", "output": "2008: Call of Duty: Modern Warfare 2 development began\nFeb. 2009: officially announced\nMarch 2009: game testing bagan\nNov. 10, 2009: released worldwide for Microsoft Windows, the PlayStation 3 and Xbox 360.\n2014: released for macOS\n2018: released for Xbox One\nMarch 2020: a remastered version is released on the PlayStation 4\nApril 2020: a remastered version is released on Microsoft WIndows and Xbox One", "category": "IT"}, {"instruction": "Describe a plan for a road trip from Las Vegas to West Grand Canyon, including stops for visiting Hoover Dam and lunch. Your plan should include a budget, a timeline, and a description of the sights, for a group of 7 friends.", "input": "", "output": "That's a great road trip! A group of 7 people can fit perfectly on a 7 seat car that you can rent in one of the many providers in Las Vegas. Start your day early in the morning to get the car and pick up your friends. From there your first destination is going to be the Hoover Dam, around 40 minutes by car from Las Vegas. Take your time to take pictures from the bridge and then go the dam, you can visit inside, the self-guided ticket is $10. You will be there for a couple of hours.\n\nAfter these you need to go south east and take a turn to Dolan Springs, this will be an hour driving, so by that time you are around lunch time, which will cost you approximately $15.\nFrom Dolan Sprints it's a straight 50 minutes ride to the West Grand Canyon. In the road you will find midway the Arizona's Joshua Tree Forest. Take the time to appreciate it, as well as the desert along the way.\n\nWhen you arrive at the West Grand Canyon, you can buy the $70 general admission ticket + Skywalk. This gives you unlimited access for the day to Eagle Point, Guano Point, Hualapai Ranch and the Skywalk experience. You can walk the sky on the 10-foot wide, horseshoe-shaped glass bridge that extends 70 feet over the rim of the Grand Canyon.\n\nWhen leaving the West Grand Canyon the trip back to Las Vegas takes 2h. You will need to refill the tank, before returning the vehicle to the car renting company. The renting for the day and the gas will cost around $35 per person.\n\nDepending on your pace, this is a morning and afternoon road trip. With an estimated cost of $130 per person.", "category": "IT"}, {"instruction": "Extract the number of men and women living in the municipality of Paradela and list them using bullets in the format {men} - {number} and {woman} - {number) in a comma separated format.", "input": "Paradela is a municipality in Lugo province in Galicia in north-west Spain. It is situated in the region of Sarria. There were 2,193 people living in Paradela as of 2008 (1,101 men and 1,092 women). It is known for the connection it has with the Way of St. James. The French route of such a way, ending in Santiago de Compostela, passes through five parishes of Paradela: Ferreiros, Francos, Laxe, Cortes and Loio.", "output": "{men} - {1,101}, {woman} - {1,092}", "category": "IT"}, {"instruction": "What are the co-founders of Tesla Motors?", "input": "", "output": "Eberhard, Tarpenning, Wright, Elon Musk, and J.B. Straubel", "category": "IT"}, {"instruction": "What is the difference between a refractor telescope and a reflector telescope?", "input": "", "output": "A refractor telescope uses lenses to focus the light into an image where a reflector telescope uses mirrors. Reflector telescopes are generally better for visual viewing of brighter celestial objects like the moon or planets and can collect more light due to their larger apertures. Refractor telescopes provide better contrast and image quality but collect less light which makes them more suitable for astrophotography where exposure time can be adjusted to compensate.", "category": "IT"}, {"instruction": "What is a stock index?", "input": "", "output": "A stock index or stock market index is a method of measuring the value of a section of the stock market. It is computed from the prices of selected stocks (typically a weighted average). It is a tool used by investors and financial managers to describe the market, and to compare the return on specific investments. For example, S&P 500 is based on the market capitalizations of 500 large companies having common stock listed on the NYSE or NASDAQ.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Celesta, Masenqo", "input": "", "output": "Masenqo is string, Celesta is percussion.", "category": "IT"}, {"instruction": "What is the Indianapolis 500?", "input": "The Indianapolis 500, formally known as the Indianapolis 500-Mile Race,[1][2] and commonly called the Indy 500, is an annual automobile race held at Indianapolis Motor Speedway (IMS) in Speedway, Indiana, United States, an enclave suburb of Indianapolis. The event is traditionally held over Memorial Day weekend, usually the last weekend of May. It is contested as part of the IndyCar Series, the top level of American open-wheel car racing, a formula colloquially known as \"Indy car racing\". The track itself is nicknamed the \"Brickyard\", as the racing surface was paved in brick in the fall of 1909. One yard of brick remains exposed at the start/finish line. The event, billed as The Greatest Spectacle in Racing,[3] is considered part of the Triple Crown of Motorsport along with the 24 Hours of Le Mans and the Monaco Grand Prix, with which it typically shares a date.[4]", "output": "The Indianapolis 500, formally known as the Indianapolis 500-Mile Race,[1][2] and commonly called the Indy 500, is an annual automobile race held at Indianapolis Motor Speedway (IMS) in Speedway, Indiana, United States, an enclave suburb of Indianapolis. The event is traditionally held over Memorial Day weekend, usually the last weekend of May. It is contested as part of the IndyCar Series, the top level of American open-wheel car racing, a formula colloquially known as \"Indy car racing\". The track itself is nicknamed the \"Brickyard\", as the racing surface was paved in brick in the fall of 1909. One yard of brick remains exposed at the start/finish line. The event, billed as The Greatest Spectacle in Racing,[3] is considered part of the Triple Crown of Motorsport along with the 24 Hours of Le Mans and the Monaco Grand Prix, with which it typically shares a date.[4]\n\nThe inaugural race was held in 1911 and was won by Ray Harroun. The event celebrated its 100th anniversary in 2011, and the 100th running was held in 2016. The event was put on hiatus twice, from 1917 to 1918 due to World War I and from 1942 to 1945 due to World War II. In two different periods, the race was part of FIA World Championships; between 1925 and 1928, the World Manufacturers' Championship and between 1950 and 1960, the World Drivers' Championship.\n\nMarcus Ericsson is the current champion. The most successful drivers are A. J. Foyt, Al Unser Sr., Rick Mears and H\u00e9lio Castroneves, each of whom has won the race four times. The active driver with the most victories is H\u00e9lio Castroneves. Rick Mears holds the record for most career pole positions with six. The most successful car owner is Roger Penske, owner of the Indianapolis Motor Speedway and Team Penske, which has 18 total wins and 18 poles. Penske also has five wins at the IndyCar Grand Prix, held on the combined road course.\n\nThe event is steeped in tradition, in pre-race ceremonies, post-race celebrations, and race procedure. The most noteworthy and most popular traditions are the 33-car field lining up three-wide for the start, the annual singing of the chorus of \"Back Home Again in Indiana,\" and the victory lane bottle of milk. Also unique is that qualifying requires the driver to complete four, rather than one, timed laps. Qualifying has a separate weekend. The official attendance is not disclosed by Speedway management, but the permanent seating capacity is upwards of 250,000, and infield patrons raise the race-day attendance to approximately 300,000.[5]", "category": "IT"}, {"instruction": "From the passage provided, extract the country which hosted the 2022 world cup.", "input": "The FIFA World Cup, often simply called the World Cup, is an international association football competition contested by the senior men's national teams of the members of the F\u00e9d\u00e9ration Internationale de Football Association (FIFA), the sport's global governing body. The tournament has been held every four years since the inaugural tournament in 1930, except in 1942 and 1946 when it was not held because of the Second World War. The reigning champions are Argentina, who won their third title at the 2022 tournament.\n\nThe format involves a qualification phase, which takes place over the preceding three years, to determine which teams qualify for the tournament phase. In the tournament phase, 32 teams compete for the title at venues within the host nation(s) over about a month. The host nation(s) automatically qualify to the group stage of the tournament. The FIFA World Cup has been scheduled to expand to 48 teams for the 2026 tournament.\n\nAs of the 2022 FIFA World Cup, 22 final tournaments have been held and a total of 80 national teams have competed. The trophy has been won by eight national teams. Brazil, with five wins, are the only team to have played in every tournament. The other World Cup winners are Germany and Italy, with four titles each; Argentina, with three titles; France and inaugural winner Uruguay, each with two titles; and England and Spain, with one title each.\n\nThe World Cup is the most prestigious association football tournament in the world, as well as the most widely viewed and followed single sporting event in the world. The viewership of the 2018 World Cup was estimated to be 3.57 billion (close to half of the global population),[1][2][3][4][5] while the engagement with 2022 World Cup was estimated to be around 5 billion with close to 1.5 billion people watching the final match.[6]\n\nSeventeen countries have hosted the World Cup, most recently Qatar, who hosted the 2022 edition. The 2026 tournament will be jointly hosted by Canada, the United States and Mexico, which will give Mexico the distinction of being the first country to host games in three World Cups.", "output": "Qatar hosted 2022 FIFA World Cup", "category": "IT"}, {"instruction": "How to lose weight?", "input": "", "output": "The general answer is eat less and exercise more. This really is a psychology question, not a knowledge question.\n\nTo lose weight, one needs to create a build a mental model that they can follow. For example, one pound of fat has 3500 calories, one needs to reduce the diet by that much to lose a pound of weight.\n\nAnother important factor is to get strong support from family and friends. The encourage from close people makes the process easier and more natural.\n\nControlling weight is one of the psychological challenge that many people face at some point. Create a plan to minimize the psychological challenge and follow the plan mentally.", "category": "IT"}, {"instruction": "Which company built the F-22 Raptor?", "input": "The Lockheed Martin F-22 Raptor is an American single-seat, twin-engine, all-weather stealth tactical fighter aircraft developed for the United States Air Force (USAF). As the result of the USAF's Advanced Tactical Fighter (ATF) program, the aircraft was designed as an air superiority fighter, but also has ground attack, electronic warfare, and signals intelligence capabilities. The prime contractor, Lockheed Martin, built most of the F-22's airframe and weapons systems and conducted final assembly, while Boeing provided the wings, aft fuselage, avionics integration, and training systems.\n\nThe aircraft first flew in 1997 and was variously designated F-22 and F/A-22 before it formally entered service in December 2005 as the F-22A. Although the USAF had originally planned to buy a total of 750 ATFs, the program was cut to 187 operational aircraft in 2009 due to high costs, a lack of air-to-air missions at the time of production, and the development of the more affordable and versatile F-35.[N 1] The last F-22 was delivered in 2012.\n\nWhile it had a protracted development and initial operational difficulties, the F-22 has become a critical component of the USAF's tactical airpower. The fighter's combination of stealth, aerodynamic performance, and mission systems enabled a leap in air combat capabilities and set the benchmark for its generation.[3][4] The F-22 is expected to serve into the 2030s and eventually be succeeded by the USAF's Next Generation Air Dominance (NGAD) manned fighter component.[5]", "output": "The F-22 Raptor was built primarily by Lockheed Martin, but several significant components were built by Boeing including the wings, aft fuselage, avionics integration, and training systems.", "category": "IT"}, {"instruction": "From the passage mention the name of the kids of Nita Ambani. Display the results in comma separated format.", "input": "He married Nita Ambani in 1985 and they have two sons, Akash and Anant, and a daughter, Isha, who is Akash's twin.[3][69] They met after his father attended a dance performance which Nita took part in and thought of the idea of arranging a marriage between the two.[70]\n\nThey live in Antilia, a private 27-storey building in Mumbai, which was valued at US$1 billion and was the most expensive private residence in the world at the time it was built.[27][71] The building requires a staff of 600 for maintenance, and it includes three helipads, a 160-car garage, private movie theater, swimming pool, and fitness center.[72]\n\nIn 2007, Ambani gifted his wife a $60 million Airbus A319 for her 44th birthday.[73] The Airbus, which has a capacity of 180 passengers, has been custom-fitted to include a living room, bedroom, satellite television, WiFi, sky bar, Jacuzzi, and an office.[74]\n\nAmbani was titled \"The World's Richest Sports Team Owner\" after his purchase of the IPL cricket team Mumbai Indians for $111.9 million in 2008.[75][76]\n\nMukesh Ambani is a strict vegetarian and teetotaler.[77]\n\nDuring the fiscal year ending 31 March 2012, he reportedly decided to forgo nearly \u20b9240 million from his annual pay as chief of Reliance Industries Ltd (RIL). He elected to do this even as RIL's total remuneration packages to its top management personnel increased during that fiscal year. Mukesh Ambani holds a 50.4% stake in the company.[78] This move kept his salary capped at \u20b9150 million for the fourth year in a row.[79]\n\nIn early 2019, a court in Mumbai held his younger brother, Anil Ambani, in criminal contempt for non-payment of personally guaranteed debt Reliance Communications owed to Swedish gearmaker Ericsson. Instead of jail time, the court gave Anil a month to come up with the funds. At the end of the month, Mukesh bailed out his younger brother, paying the debt.[35] In 2021, he was the subject of a bomb scare when a green Mahindra Scorpio SUV packed with explosives was found near a Mumbai skyscraper housing Ambani.[80]", "output": "Akash, Anant, Isha", "category": "IT"}, {"instruction": "Give me a list of 1980s computer games.", "input": "", "output": "Here is a list of some computer games from the 1980s: Galaga, Donkey Kong, Pac-Man, Frogger, Tetris and SimCity.", "category": "IT"}, {"instruction": "What are the names of five of the best Pokemon cards and why?", "input": "", "output": "1) Tera Arcanine EX (it's very powerful)\n2) Tera Gyarados EX (it's also very powerful)\n3) Snorlax VMAX (has a lot of health points)\n4) Illustrators Pikachu (it's worth a lot of money)\n5) First edition Shaddowless Holo Charizard (because it's a very rare card)", "category": "IT"}, {"instruction": "What should I do if I disagree with a friend, co-worker or family member on something I feel passionate about, such as politics?", "input": "", "output": "Seeing things differently from someone you interact with regularly or even care about can be a hard thing to experience. It can also a wonderful thing. Each person on this planet is different and their beliefs are based on their culture, upbringing, personal experiences, education, surroundings, etc. Recognizing this and truly listening to the other persons perspective is important. In many cases, when a difference of opinion escalates, it is because one or both people involved did not listen or respect the other. If you are being close-minded, then you could be missing out on learning something new.\nIf both parties still disagree and it is not something completely against your beliefs, culture, or ethics, that is OK too. Agree to disagree and move on. Life is too short to be angry at people you care about just because you do not see eye to eye.", "category": "IT"}, {"instruction": "According to the passage, mention some of Taylor\u2019s hit songs after signing for Republic records.", "input": "Taylor Alison Swift (born December 13, 1989) is an American singer-songwriter. Her genre-spanning discography, songwriting abilities and artistic reinventions have received critical praise and wide media coverage. Born in West Reading, Pennsylvania, Swift moved to Nashville at age 14 to become a country artist. She signed a songwriting deal with Sony/ATV Music Publishing in 2004 and a recording contract with Big Machine Records in 2005. Her 2006 self-titled debut album made her the first female country artist to write a U.S. platinum-certified album.\nSwift's next albums, Fearless (2008) and Speak Now (2010), explored country pop. The former's \"Love Story\" and \"You Belong with Me\" were the first country songs to top the U.S. pop and all-genre airplay charts, respectively. She experimented with rock and electronic styles on Red (2012), which featured her first Billboard Hot 100 number-one song, \"We Are Never Ever Getting Back Together\", and eschewed her country image in her synth-pop album, 1989 (2014), supported by chart-topping songs \"Shake It Off\", \"Blank Space\", and \"Bad Blood\". Media scrutiny inspired the urban-flavored Reputation (2017) and its number-one single \"Look What You Made Me Do\".\nExiting Big Machine, Swift signed with Republic Records in 2018 and released her seventh studio album, Lover (2019), followed by the autobiographical documentary Miss Americana (2020). She ventured into indie folk and alternative rock in her 2020 albums Folklore and Evermore, whose singles \"Cardigan\" and \"Willow\" topped the Hot 100. Swift began re-recording her first six albums after a dispute over their masters, re-releasing two in 2021\u2014Fearless (Taylor's Version) and Red (Taylor's Version). The latter's \"All Too Well (10 Minute Version)\" became the longest song to top the Hot 100. Her 2022 album Midnights and single \"Anti-Hero\" broke all-time streaming records. Swift has directed music videos and films, such as All Too Well: The Short Film (2021), and played supporting roles in others.\nHaving sold over 200 million records globally, Swift is one of the best-selling musicians in history. She is the most streamed woman on Spotify and the only act to have five albums open with over one million copies sold in the US. Among her accolades are 12 Grammy Awards, including three Album of the Year wins; an Emmy Award; 40 American Music Awards; 29 Billboard Music Awards; three IFPI Global Recording Artist of the Year awards; and 92 Guinness World Records. Swift has been featured in rankings such as Rolling Stone's 100 Greatest Songwriters of All Time, Billboard's Greatest of All Time Artists, the Time 100 and Forbes Celebrity 100. Honored with titles such as Artist of the Decade and Woman of the Decade, Swift is an advocate for artists' rights and women's empowerment. Her music is credited with influencing a generation of singers and songwriters.", "output": "Some of Taylor Swift\u2019s greatest hits after signing with Republic records include:\n\u200b1.\"Cardigan\" \n2.\"Willow\"\n3.\"All Too Well (10 Minute Version)\"\n4.\"Anti-Hero\"", "category": "IT"}, {"instruction": "Why you need to save Money", "input": "", "output": "Because  you need it for emergency . You do not know you can not earn money always.", "category": "IT"}, {"instruction": "What is the difference between a violin and a viola?", "input": "", "output": "The viola is a string instrument that is bowed, plucked, or played with varying techniques. It is slightly larger than a violin and it has a lower and deeper sound.", "category": "IT"}, {"instruction": "Why should you live in Florida?", "input": "", "output": "Florida is a great place to live if you like the sun, warm days, spending time at the beach and enjoying a relaxing lifestyle. There are many things to do in Florida such as visiting Disney World, Universal Studios, The Kennedy Space Center or the many aquariums through the state.  There are several amazing beaches throughout the state but one of my favorites is Siesta Key because of it's powder white sand that doesn't get hot.  You do have to keep an eye out for Sting Rays but beyond that the gulf is great to swim in.  There are things to do all day on Siesta key from the beach to the village with multiple restaurants and shops.  The only requirement is to relax and enjoy the time you have in a laid back tropical atmosphere.", "category": "IT"}, {"instruction": "What famous character did William B. Davis portray?", "input": "", "output": "William B. Davis, a Canadian actor, portrayed the Cigarette Smoking Man on the popular sci-fi show, \"The X-Files.\" The Cigarette Smoking Man, also known as CSM and C.G.B. Spender, was an antagonist responsible for many global conspiracies surrounding the existence of extraterrestrial life. He is also the biological father of Special Agent Fox Mulder, Special Agent Jeffrey Spender, and Jackson Van De Kamp (also known as William Scully III).", "category": "IT"}, {"instruction": "Based on the above passage what are the heavier elements which are more fissionable?", "input": "Nuclear fusion is a reaction in which two or more atomic nuclei are combined to form one or more different atomic nuclei and subatomic particles (neutrons or protons). The difference in mass between the reactants and products is manifested as either the release or absorption of energy. This difference in mass arises due to the difference in nuclear binding energy between the atomic nuclei before and after the reaction. Nuclear fusion is the process that powers active or main-sequence stars and other high-magnitude stars, where large amounts of energy are released.\n\nA nuclear fusion process that produces atomic nuclei lighter than iron-56 or nickel-62 will generally release energy. These elements have a relatively small mass and a relatively large binding energy per nucleon. Fusion of nuclei lighter than these releases energy (an exothermic process), while the fusion of heavier nuclei results in energy retained by the product nucleons, and the resulting reaction is endothermic. The opposite is true for the reverse process, called nuclear fission. Nuclear fusion uses lighter elements, such as hydrogen and helium, which are in general more fusible; while the heavier elements, such as uranium, thorium and plutonium, are more fissionable. The extreme astrophysical event of a supernova can produce enough energy to fuse nuclei into elements heavier than iron.", "output": "uranium, thorium and plutonium.", "category": "IT"}, {"instruction": "Write a leave letter to your teacher.", "input": "", "output": "To,\nThe Teacher\n\nSir/Madam,\n           This is to inform you that I will be going out of station for 3 days from <date> to <date>, to attend my sister's wedding celebrations.\n           I request you to kindly consider this and  grant me leave.\n\nYours faithfully,\nXYZ", "category": "IT"}, {"instruction": "Name ten Shakespeare plays", "input": "", "output": "Romeo and Juliet, The Tempest, Midsummer Night's Dream, Hamlet, Julius Caesar, As You Like It, Macbeth, Twelfth Night, Othello, King Lear", "category": "IT"}, {"instruction": "How many countries in Europe do have the Euro as monetary currency?", "input": "The euro area,[8] commonly called eurozone (EZ), is a currency union of 20 member states of the European Union (EU) that have adopted the euro (\u20ac) as their primary currency and sole legal tender, and have thus fully implemented EMU policies.", "output": "20", "category": "IT"}, {"instruction": "What did the Triceratops use their horns for?", "input": "There has been much speculation over the functions of Triceratops' head adornments. The two main theories have revolved around use in combat and in courtship display, with the latter now thought to be the most likely primary function.[31]\n\nEarly on, Lull postulated that the frills may have served as anchor points for the jaw muscles to aid chewing by allowing increased size and thus power for the muscles.[63] This has been put forward by other authors over the years, but later studies do not find evidence of large muscle attachments on the frill bones.[64]\n\nTriceratops were long thought to have used their horns and frills in combat with predators such as Tyrannosaurus, the idea being discussed first by Charles H. Sternberg in 1917 and 70 years later by Robert Bakker.[55][65] There is evidence that Tyrannosaurus did have aggressive head-on encounters with Triceratops, based on partially healed tyrannosaur tooth marks on a Triceratops brow horn and squamosal; the bitten horn is also broken, with new bone growth after the break. Which animal was the aggressor is not known.[66] Paleontologist Peter Dodson estimates that in a battle against a bull Triceratops, the Triceratops had the upper hand and would successfully defend itself by inflicting fatal wounds to the Tyrannosaurus using its sharp horns. Tyrannosaurus is also known to have fed on Triceratops, as shown by a heavily tooth-scored Triceratops ilium and sacrum.[67]", "output": "The Triceratops used their horns for both courtship and combat, including defending against aggressive predators such as the Tyrannosaurus.", "category": "IT"}, {"instruction": "Who would win between a boxer and an MMA fighter?", "input": "", "output": "In a fight with virtually no rules, or with rules that are followed in MMA. The MMA fighter will clearly have the advantage over the boxer, because MMA fighters have a wide variety of skills, for instance they can use both their hands and legs. However, under boxing rules, the same principle will apply, a boxer would definitely have the upper hand in this setting. A good example is the Floyd Mayweather vs Conor McGregor fight, which was under boxing rules and saw mayweather emerge as the winner.", "category": "IT"}, {"instruction": "How to become a millionaire?", "input": "", "output": "If you want to become a millionaire you first need to make up a consistent, long-term financial plan. Ask yourself questions like what does it mean rich for you? Any particular net worth you would like to hit? Once you have the big-picture established, break it down into smaller short-term goals that are easier to achieve. Start investing earlier and identify high-margin businesses to focus on. Constantly increase your income by balancing your investments and savings.", "category": "IT"}, {"instruction": "How many variants of the PrintNightmare existed?", "input": "PrintNightmare was a critical security vulnerability affecting the Microsoft Windows operating system.[2][4] The vulnerability occurred within the print spooler service.[5][6] There were two variants, one permitting remote code execution (CVE-2021-34527), and the other leading to privilege escalation (CVE-2021-1675).[6][7] A third vulnerability (CVE-2021-34481) was announced July 15, 2021, and upgraded to remote code execution by Microsoft in August.[8][9]\n\nOn July 6, 2021, Microsoft started releasing out-of-band (unscheduled) patches attempting to address the vulnerability.[10] Due to its severity, Microsoft released patches for Windows 7 and Windows Server 2012, despite being out of their mainstream support period.[11][10] The patches resulted in some printers ceasing to function.[12][13] Researchers have noted that the vulnerability has not been fully addressed by the patches.[14] After the patch is applied, only administrators account on Windows print server, will be able to install printer drivers, as part of the vulnerability related to the ability of non-administrators to install printer drivers on the system, such as shared printers on system without sharing password protection.[15]\n\nThe organization which discovered the vulnerability, Sangfor, published a proof of concept in a public GitHub repository.[3][16] Apparently published in error, or as a result of a miscommunication between the researchers and Microsoft, the proof of concept was deleted shortly after.[3][17] However, several copies have since appeared online.[3]", "output": "There are two variants of the PrintNightmare, one permitting remote code execution and the other one leading to privilege escalation.", "category": "IT"}, {"instruction": "provide the list of the List of American foods that is related to breeds", "input": "American foods\nBreads\nMain article: List of American breads\nBanana bread\nCornbread\nCuban bread\nFrybread\nTexas toast\nCheese\nMain article: List of American cheeses\n\nGouda and Swiss are common cheeses in America.\nAmerican cheese (technically a processed cheese)\nCheddar cheese\nColby (as well as the blend Colby-Jack)\nCream cheese\nMonterey Jack (and used in pepper jack cheese)\nVelveeta (brand name of a common processed cheese)\nDesserts\nMain article: List of American desserts\nBanana pudding\nChocolate brownie\nChocolate chip cookies\nFudge\nJell-O\nKey lime pie\nPeanut butter cookie\nPecan pie\nPumpkin pie\nRed velvet cake\nS'more\nSundae\nIce cream\nRice dishes\n\nGumbo is a dish that originated in southern Louisiana during the 18th century.\nCalas\nCharleston red rice\nChicken bog\nDirty rice\nGlorified rice\nGumbo\nHawaiian haystack\nHoppin' John\nJambalaya\nRice and gravy\nRed beans and rice\nShrimp creole\nSpanish rice\nSandwiches\nMain article: List of American sandwiches\nBLT\nCheesesteak\nClub sandwich\nFluffernutter\nItalian beef\nPastrami on rye\nPeanut butter and jelly sandwich\nReuben sandwich\nSloppy joe\nSausages\n\nHot dogs with various toppings\nBologna sausage\nBreakfast sausage\nChaudin\nGoetta\nHalf-smoke\nHot link (sausage)\nItalian hot dog\nLebanon bologna\nMaxwell Street Polish\nPolish Boy\nChorizo\nMiscellaneous\nBuffalo Wings\nRoasted turkey\nFried Chicken", "output": "Banana bread\nCornbread\nCuban bread\nFrybread\nTexas toast\nCheese", "category": "IT"}, {"instruction": "write some critical points on University of Sfax using below text as a reference", "input": "The University of Sfax (Arabic: \u062c\u0627\u0645\u0639\u0629 \u0635\u0641\u0627\u0642\u0633 French: Universit\u00e9 de Sfax) is a university located in Sfax, Tunisia. It was founded in 1986 under the name University of the South with the purpose of covering all academic institutions in Southern Tunisia. It is divided into three universities, including the current University of Sfax, with the creation of the University of Gabes in 2003 and the University of Gafsa in 2004.", "output": "1. Sfax is home to the University of Sfax.\n2. To include all academic institutions in Southern Tunisia, the University of the South was founded in 1986.\n3. It is divided into three institutions, including the existing University of Sfax, with the formation of the University of Gabes in 2003 and the University of Gafsa in 2004.", "category": "IT"}, {"instruction": "What are some great comets named after people?", "input": "", "output": "Great comets named after people: \n- Aristotle's Comet\n- Caesar's Comet\n- Donati's Comet\n- Halley's Comet\n- Comet Skjellerup\u2013Maristany\n- Comet Arend\u2013Roland\n- Comet Mrkos\n- Comet Ikeya\u2013Seki\n- Comet Bennett\n- Comet Kohoutek\n- Comet West\n- Comet Hyakutake\n- Comet Hale\u2013Bopp\n- Comet McNaught\n- Comet Lovejoy", "category": "IT"}, {"instruction": "What is a sleeping bag?", "input": "", "output": "A sleeping bag is a warm blanket that can be zipped up to enclose the sleeper. Sleeping bags are typically filled with either down or synthetic material (down is lighter but stays wet longer) and is often used for staying at night while camping.", "category": "IT"}, {"instruction": "From the following list of movies, please tell me which ones are comedies, dramas, horror, or action: When Harry Met Sally, The Exorcist, The Godfather, Mission Impossible", "input": "", "output": "- When Harry Met Sally: Comedy\n- The Exorcist: Horror\n- The Godfather: Drama\n- Mission Impossible: Action", "category": "IT"}, {"instruction": "Who is David Dicks?", "input": "David Griffiths Dicks, OAM, CitWA, (born 6 October 1978) is an Australian sailor.", "output": "David Griffiths Dicks, OAM, CitWA, (born 6 October 1978) is an Australian sailor. He became the youngest person to sail non-stop and solo around the world. In February 1996, at the age of 17, he set out from Fremantle, Western Australia in his family's 10m S&S 34 sloop named 'Seaflight'. During his 9-month circumnavigation, he faced many challenges such as numerous knockdowns, bad weather, equipment failure, and food poisoning. Because of accepting a bolt to fix his rig near the Falkland Islands, his circumnavigation was not considered unassisted. He returned safely to Fremantle in November 1996 amid great fanfare, including a ticker-tape parade and being given the 'keys' to Perth City.", "category": "IT"}, {"instruction": "What are Singapore main geographical points according to this text? Bullet point please.", "input": "Singapore consists of 63 islands, including the main island, Pulau Ujong. There are two man-made connections to Johor, Malaysia: the Johor\u2013Singapore Causeway in the north and the Tuas Second Link in the west. Jurong Island, Pulau Tekong, Pulau Ubin and Sentosa are the largest of Singapore's smaller islands. The highest natural point is Bukit Timah Hill at 163.63 m (537 ft). Under British rule, Christmas Island and the Cocos Islands were part of Singapore, and both were transferred to Australia in 1957. Pedra Branca is the nation's easternmost point.\n\nLand reclamation projects have increased Singapore's land area from 580 km2 (220 sq mi) in the 1960s to 710 km2 (270 sq mi) by 2015, an increase of some 22% (130 km2). The country is projected to reclaim another 56 km2 (20 sq mi). Some projects involve merging smaller islands through land reclamation to form larger, more functional and habitable islands, as has been done with Jurong Island. The type of sand used in reclamation is found in rivers and beaches, rather than deserts, and is in great demand worldwide. In 2010 Singapore imported almost 15 million tons of sand for its projects, the demand being such that Indonesia, Malaysia, and Vietnam have all restricted or barred the export of sand to Singapore in recent years. As a result, in 2016 Singapore switched to using polders for reclamation, in which an area is enclosed and then pumped dry.", "output": "Signapore has today:\n- Land area of 710 km2 (270 sq miles) and is working towards reclaiming more using sand imports.\n- 63 islands, with the main island and Jurong Island, Pulau Tekong, Pulau Ubin and Sentosa, and many smaller ones.\n- The highest spot of Singapore is the Bukit Timah Hill at 163.63 meter (537 feet).", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Sarcosuchus, Plains Bison", "input": "", "output": "Sarcosuchus is extinct, Plains Bison is alive.", "category": "IT"}, {"instruction": "Give me some suggestions for good South East Asian restaurants near downtown Seattle", "input": "", "output": "Here are some highly rated South East Asian restaurants near downtown Seattle\n1. Bangrak market serves classic Thai street food in a unique setting. The restaurant is in Belltown neighbood, a few minutes walk from Pike Place Market. Crying tiger, kao soi, fried whole fish, and mango sticky rice are among their popular dishes\n2. Kedai Makan is a busy Malaysian restaurant in Capitol Hill featuring a cozy atmosphere and fabulous Malaysian dishes. The most popular dishes in the restaurant are roti jala (soft net bread with chicken curry), spicy ribs and chili pan mee noodle. \n3. Di Fiora is an Asian fusion restaurant with a cozy, relaxing and romantic vibe through flowery decoration. They are famous for their Thai curry, fried rice, pasta, as well as various tasty cocktails.", "category": "IT"}, {"instruction": "please give me a short description about SVB collapse", "input": "On Friday, March 10, 2023, Silicon Valley Bank (SVB) failed after a bank run, marking the second-largest bank failure in United States history and the largest since the 2007\u20132008 financial crisis.[1][2] It was one of three March 2023 United States bank failures.", "output": "It's due to risk mismanagement of SVB Bank, where the bank bet on long dated treasury bond. When the bank runs happen, SVB don't have a choice but to sell those long dated bond at a steep discount and incur huge lossses.", "category": "IT"}, {"instruction": "What is Impala?", "input": "", "output": "Apache Impala is an open source massively parallel processing SQL query engine for data stored in a computer cluster running Apache Hadoop.", "category": "IT"}, {"instruction": "Name some fruits that have red skin.", "input": "", "output": "Strawberries, Cherries, Dragonfruit and Apples all have red skin.", "category": "IT"}, {"instruction": "Extract the train tracks mentioned in this text, and make a list that mentions whether they have a platform or not in the format {track #number} - {yes/no}", "input": "Amsterdam Centraal has 15 tracks, 11 of which are alongside a platform: four island platforms with tracks along the full length on both sides (tracks 4/5, 7/8, 10/11, 13/14); one side platform with one track along the full length (track 15); and one bay platform with two tracks (tracks 1/2). Platforms 2-15 have an A-side (to the west) and a B-side (to the east). This means that there are 21 places where a train can be positioned for passenger access, with scissors crossings in the middle enabling trains to pass each other. Track 1 terminates short of the western end of the station building, which fronts track 2. Tracks 3, 6, 9, and 12 have no platform.", "output": "Amsterdam Centraal has the following 15 tracks:\ntrack 1 - yes\ntrack 2 - yes\ntrack 3 - no\ntrack 4 - yes\ntrack 5 - yes\ntrack 6 - no\ntrack 7 - yes\ntrack 8 - yes\ntrack 9 - no\ntrack 10 - yes\ntrack 11 - yes\ntrack 12 - no\ntrack 13 - yes\ntrack 14 - yes\ntrack 15 - yes", "category": "IT"}, {"instruction": "Why is it hard to have a baby and keep a job?", "input": "", "output": "It's hard to have a baby and keep a job because babies need a lot of time and attention. One solution is to find a good caregiver, whether it is a nanny or a daycare or some other form of group care. While your baby is with that care, you can do your work for your job. Beware that babies who have care as part of larger groups may get sick very often, so your schedule needs to be flexible to accommodate for sick days (yours or your baby's).", "category": "IT"}, {"instruction": "What is a good way to convince someone to do something", "input": "", "output": "There are different ways to convince someone to take an action:\n1) Provide objective, verifiable facts or data that support the requested action\n2) Share a relatable story or anecdote that helps emotionally connect to the desired action\n3) Use the personal rapport that you have built with the person to convince them\n4) Explain how your counterpart will personally benefit from taking the action\n5) Help the person understand that the action is easy, quick or low effort\n6) Propose an exchange, where you do something in the interest of the person in exchange for their action\n7) Pay the person for taking the action\nDepending on their personality, the action, and your relationship with the person different methods may work better.", "category": "IT"}, {"instruction": "How is a circular economy different than the USA's economy?", "input": "A circular economy (also referred to as circularity and CE)[2] is a model of production and consumption, which involves sharing, leasing, reusing, repairing, refurbishing and recycling existing materials and products for as long as possible.[3] CE aims to tackle global challenges such as climate change, biodiversity loss, waste, and pollution by emphasizing the design-based implementation of the three base principles of the model. The three principles required for the transformation to a circular economy are: eliminating waste and pollution, circulating products and materials, and the regeneration of nature. CE is defined in contradistinction to the traditional linear economy.[4][5] The idea and concepts of circular economy (CE) have been studied extensively in academia, business, and government over the past ten years. CE has been gaining popularity because it helps to minimize emissions and consumption of raw materials, open up new market prospects and principally, increase the sustainability of consumption and improve resource efficiency.[6][7]\n\nAt a government level, CE is viewed as means of combating global warming as well as a facilitator of long-term growth.[8] CE may geographically connect actors and resources to stop material loops at the regional level.[9] In its core principle, the European Parliament defines CE as, \u201ca model of production and consumption, which involves sharing, leasing, reusing, repairing, refurbishing and recycling existing materials and products as long as possible. In this way, the life cycle of products is extended.\u201d[3]\n\nIn a linear economy, natural resources are turned into products that are ultimately destined to become waste because of the way they have been designed and manufactured. This process is often summarized by \"take, make, waste\".[10] By contrast, a circular economy employs reuse, sharing, repair, refurbishment, remanufacturing and recycling to create a closed-loop system, reducing the use of resource inputs and the creation of waste, pollution and carbon emissions.[11] The circular economy aims to keep products, materials, equipment and infrastructure[12] in use for longer, thus improving the productivity of these resources. Waste materials and energy should become input for other processes through waste valorization: either as a component for another industrial process or as regenerative resources for nature (e.g., compost). The Ellen MacArthur Foundation (EMF) defines the circular economy as an industrial economy that is restorative or regenerative by value and design.", "output": "A circular economy focuses on the principles of eliminating waste and pollution, circulating products and materials, and the regeneration of nature. In contrast, most capitalistic economies are called \"linear\" in that raw materials are turned into products which are eventually discarded. While a circular economy focuses on sustainable consumption on an Earth with limited resources, linear economies like the USA's implicitly assume a never-ending supply of raw material inputs.", "category": "IT"}, {"instruction": "What is the value of x if x^2 = 4?", "input": "", "output": "x is either equal to 2 or -2", "category": "IT"}, {"instruction": "Identify all PII in this customer review \"My name is Joe Smith and email address is joesmith9999@gmail.com. I'd like to leave a review about Langton's red wine. It was tasty for a red, but there were sediments at the bottom of my bottle\"", "input": "", "output": "I've found two pieces of personally identifiable information (PII) in the provided text:\n- A person's name: \"Joe Smith\"\n- An email address: \"joesmith9999@gmail.com\"\n\nThe Australian government defines PII as \"Information that can be used on its own or with other information to identify, contact or locate a single person, or to identify an individual in context\" (source: https://www.cyber.gov.au/acsc/view-all-content/glossary/personally-identifiable-information-pii)", "category": "IT"}, {"instruction": "How difficult is it to learn how to water ski?", "input": "", "output": "For most people, learning how to water ski on two skis is pretty easy, but learning how to single ski is quite difficult. A recommended way to work toward learning how to single ski is to start on two skis, and then learn how to drop a ski. Once you are comfortable dropping a ski, you can then try starting from a single ski, which may take many weeks to learn, as well as require a fair amount of strength and athleticism.", "category": "IT"}, {"instruction": "Which of these are characters in Ted Lasso: Rebecca Welton, Olivia Benson, Jamie Tartt", "input": "", "output": "Rebecca Welton and Jamie Tartt are both characters in the TV show Ted Lasso.  Olivia Benson is the main character on the TV Show Law & Order: SVU.", "category": "IT"}, {"instruction": "Please give me  the potential implications of overfitting described in the following text", "input": "Consequences\n\nThe most obvious consequence of overfitting is poor performance on the validation dataset. Other negative consequences include:\n\nA function that is overfitted is likely to request more information about each item in the validation dataset than does the optimal function; gathering this additional unneeded data can be expensive or error-prone, especially if each individual piece of information must be gathered by human observation and manual data-entry.[10]\n\nA more complex, overfitted function is likely to be less portable than a simple one. At one extreme, a one-variable linear regression is so portable that, if necessary, it could even be done by hand. At the other extreme are models that can be reproduced only by exactly duplicating the original modeler's entire setup, making reuse or scientific reproduction difficult.[10]\n\nIt may be possible to reconstruct details of individual training instances from an overfitted machine learning model's training set. This may be undesirable if, for example, the training data includes sensitive personally identifiable information (PII). This phenomenon also presents problems in the area of artificial intelligence and copyright, with the developers of some generative deep learning models such as Stable Diffusion and GitHub Copilot being sued for copyright infringement because these models have been found to be capable of reproducing certain copyrighted items from their training data.[11][12]", "output": "The potential implications of overfitting are:\n- poor performance of the validation set.\n- a function that is overfitted is likely to request more information about each item in the validation dataset.\n- A overfitted function is likely to be less portable than a simple one.\n- it may be possible to reconstruct details of individual training instances from an overfitted machine learning model's  training set.", "category": "IT"}, {"instruction": "Where do chia seeds come from?", "input": "", "output": "Chia seeds actually come from a flowering plant in the mint family. This plant is native to Central America.", "category": "IT"}, {"instruction": "The following words describe 'active' or 'passive' types of engagement. Identify which are 'active' and which are 'passive': create, consume, participate, build, make, watch, listen, and lead.", "input": "", "output": "'Active' words: create, lead, participate, make, build\n'Passive' words: watch, consume, listen", "category": "IT"}, {"instruction": "Name some rap albums that were released in 2022.", "input": "", "output": "Some rap albums that were released in 2022 include:\n\n- The Forever Story by J.I.D.\n- Melt My Eyez See Your Future by Denzel Curry\n- King's Disease III by Nas\n- Her Loss by Drake\n- Mr. Morale and the Big Steppers by Kendrick Lamar", "category": "IT"}, {"instruction": "Extract the date and place of birth for Henning Bertil Stjernfelt from the passage provided.", "input": "Lieutenant Colonel Henning Bertil Stjernfelt was a Swedish Army officer and military historian. He wrote several books about World War II and the Swedish coastal defence. Stjernfelt was also a part of the formation of the Swedish Coastal Rangers in 1956. Stjernfelt was born on 24 July 1917 in Gustavi Parish, Gothenburg and Bohus County, Sweden, the son of Henning Stjernfelt, a dentist, and his wife Ruth (n\u00e9e Magnusson). He passed studentexamen at Norra Latin in Stockholm in 1937.", "output": "Henning Bertil Stjernfelt was born on 24 July 1917 in Gustavi Parish, Gothenburg and Bohus County, Sweden.", "category": "IT"}, {"instruction": "Who are U2", "input": "U2 are an Irish rock band from Dublin, formed in 1976. The group consists of Bono (lead vocals and rhythm guitar), the Edge (lead guitar, keyboards, and backing vocals), Adam Clayton (bass guitar), and Larry Mullen Jr. (drums and percussion). Initially rooted in post-punk, U2's musical style has evolved throughout their career, yet has maintained an anthemic quality built on Bono's expressive vocals and the Edge's chiming, effects-based guitar sounds. Bono's lyrics, often embellished with spiritual imagery, focus on personal and sociopolitical themes. Popular for their live performances, the group have staged several ambitious and elaborate tours over their career.", "output": "U2 are an Irish rock band from Dublin, formed in 1976. The group consists of Bono (lead vocals and rhythm guitar), the Edge (lead guitar, keyboards, and backing vocals), Adam Clayton (bass guitar), and Larry Mullen Jr. (drums and percussion). Initially rooted in post-punk, U2's musical style has evolved throughout their career, yet has maintained an anthemic quality built on Bono's expressive vocals and the Edge's chiming, effects-based guitar sounds. Bono's lyrics, often embellished with spiritual imagery, focus on personal and sociopolitical themes. Popular for their live performances, the group have staged several ambitious and elaborate tours over their career.", "category": "IT"}, {"instruction": "Describe euphoria", "input": "", "output": "Euphoria is a feeling when you perceive everything to be super good. You are ecstatic and view everything in positive light. You tend to neglect and overlook things that are dull, adverse and opposite to your taste while obsessing over things that  are optimistic and to your liking. Euphoria can be natural or based on intervention.", "category": "IT"}, {"instruction": "What was Britain called - before it was Britain", "input": "", "output": "Albion", "category": "IT"}, {"instruction": "Which of the following are used in cricket? Classify as 'cricket' and 'not cricket' - bat, wickets, ball, pitch, boundary, six, four, goal, touchdown, strike, out, duck, powerplay, set, defender, goalkeeper.", "input": "", "output": "In order - 'cricket', 'cricket', 'cricket', 'cricket', 'cricket', 'cricket', 'cricket', 'not cricket', 'not cricket', 'not cricket', 'cricket', 'cricket', 'cricket', 'not cricket', 'not cricket', 'not cricket'.", "category": "IT"}, {"instruction": "Given a reference text on the beginnings of triathlon, tell me where the event was first held, in what year, and what sport was first in the sequence of the race.", "input": "The first modern swim/bike/run event was held at Mission Bay, San Diego, California on September 25, 1974.[14] The race was conceived and directed by two members of the San Diego Track Club, Jack Johnstone and Don Shanahan.[15] Johnstone recalls that he was a part of the 70s jogging craze in America and that after entering a few races he was not regaining his \"mediocre fitness\" despite having been a member of the 1957 Collegiate and AAU All-American swim teams.[16] Then in 1973, Johnstone learned of the Dave Pain Birthday Biathlon, a 7.2 km (4.5 mi) run followed by what was billed as a quarter-mile (0.4 km) swim (the actual distance was only between 200 and 300 yards). The following year, after competing in the event for the second time and placing in the top ten, Johnstone desired more of this style of race and with equal emphasis on the swim. So he petitioned the chairman of the San Diego Track Club who told him he would add a race to the club calendar. But the rest of the race was up to Johnstone to organise, and at the same time he was to contact Don Shanahan so there wouldn't be too many \"weird\" races on the club schedule. Shanahan told Johnstone that he wanted to include a biking leg to the race; whilst hesitant Johnstone agreed to the addition. When naming the event the pair used the unofficially agreed naming system for multisport events, already used for pentathlon, heptathlon, and decathlon. So they used the Greek prefix tri (three) for the number of events, followed by the already familiar athlon, hence naming the event the Mission Bay Triathlon.[17] It is worthy of note that neither founder had heard of the French events; both believed their race was a unique idea.[18]\n\nOn Wednesday, September 25, 1974, the race started. It began with a run of a 4.8 km (3 mi) loop, followed by biking twice around Fiesta Island for a total of 8.0 km (5 mi). Entrants would then get off the bikes, take their shoes off and run into the water to swim to the mainland. That was followed by running in bare feet, then swimming again along the bay, then one last swim up to the entrance of Fiesta Island, and a final crawl up a steep dirt bank to finish.[19] Most participants were not skilled swimmers, so Johnstone recruited his 13-year-old son to float on his surfboard and act as lifeguard.[16][19] Some participants took longer than expected, and it began to get dark as they finished their swims. Shanahan recalls they pulled up a few cars and turned on the headlights so the athletes could see.[20] Johnstone and Shanahan were surprised by the large number of entrants (46), mainly coming from local running clubs. Two notable entrants, Judy and John Collins, would four years later found the event which brought international attention to the new sport: the Hawaii Ironman.[16]", "output": "The first triathlon occurred in San Diego, California in 1974. Unlike today's events, the triathlon began with a run.", "category": "IT"}, {"instruction": "Where was Atlassian founded?", "input": "Atlassian Corporation (/\u0259t\u02c8l\u00e6si\u0259n/) is an Australian software company that develops products for software developers, project managers and other software development teams. The company is domiciled in Delaware, with global headquarters in Sydney, Australia, and US headquarters in San Francisco.[4][5][6][7]", "output": "Atlassian Corporation was founded in Australia, but is domeciled in Delaware, with global headquarters in Sydney, Australia, and US headquarters in San Francisco.", "category": "IT"}, {"instruction": "What is one of your favorite hobbies?", "input": "", "output": "I love playing with my children. I have a 5 year old son and a 2 year old daughter, both of whom are an absolute delight. My son enjoys reading, exploring, and general horseplay, while my daughter enjoys pretending all of her toys are families. It's a lot of fun coming home every day and spending time with those two.", "category": "IT"}, {"instruction": "What is archaeology?", "input": "", "output": "Archaeology is the study of past human cultures through the analysis of material culture. Archaeologists study where people lived, what they ate, social patterns, the types of structures they built and how people interacted with one another as well as the environment.", "category": "IT"}, {"instruction": "Order these cars as either 'fast', 'slow' or 'dangerously fast'. A Doge Viper, Toyota 4Runner, Lamborghini Aventador, Chrysler Pacifica, Go-Kart, Lime Scooter, Porsche 911, Corvette", "input": "", "output": "fast: Lamborghini Aventador, Porsche 911, Corvette\nslow: Toyota 4Runner, Chrysler Pacifica, Go-Kart, Lime Scooter\ndangerously fast: Dodge Viper", "category": "IT"}, {"instruction": "Which phrases are French and which words are English: mon fr\u00e8re, c'est la vie, good morning, what's up, break the ice, bite the bullet, and je suis d\u00e9sol\u00e9.", "input": "", "output": "The French phrases are: mon fr\u00e8re, c'est la vie, and je suis d\u00e9sol\u00e9. The English phrases are: good morning, what's up, break the ice, and bite the bullet.", "category": "IT"}, {"instruction": "Which French philosopher created analytical geometry", "input": "", "output": "Rene Decartes", "category": "IT"}, {"instruction": "When and where did Pokemon Go first launch?", "input": "", "output": "Pokemon Go first launched in Australia, New Zealand, and the United States on July 6, 2016. When the game first release in Australia there were major performance issues as the usage was 50 times the predicted volume and the cloud infrastructure was not designed to scale sufficiently.", "category": "IT"}, {"instruction": "Can you explain the Keto diet and ketosis?", "input": "", "output": "The keto diet, short for the ketogenic diet, focuses on high-fat and low-carbohydrate consumption in order to achieve a state of ketosis. Ketosis is a metabolic state in which fat stores in the liver produce ketones to use as energy instead of glucose from carbohydrates. The idea here is to force the body to burn fat for energy instead of carbs, which contributes to weight loss and other healthy effects such as enhanced blood sugar and energy levels. It is worth noting that this diet requires a lifestyle that is often difficult to maintain and breaking it can lead to adverse effects. Some professionals advocate for moderation, balance and regular exercise rather than attempting to maintain ketosis.", "category": "IT"}, {"instruction": "From the paragraph about the painting, \"The Little Street\", tell me the painting's significance with reference to the Dutch Golden Age in that period.", "input": "The Little Street (Het Straatje) is a painting by the Dutch painter Johannes Vermeer, executed c. 1657-1658. It is exhibited at the Rijksmuseum of Amsterdam, and signed, below the window in the lower left-hand corner, \"I V MEER\".", "output": "Vermeer's \"The Little Street\" is significant in the context of the Dutch Golden Age movement as it depicts a typical aspect of life in a Dutch Golden Age town during the 17th century. It is one of only two known Vermeer paintings of views of Delft, the others being \"View of Delft\". Its attention to detail, the use of light, and the realistic portrayal of everyday life are characteristic of the Dutch Golden Age movement's focus on realism and domesticity in art.", "category": "IT"}, {"instruction": "Based on the following passage what are positive and conventional current?", "input": "The movement of electric charge is known as an electric current, the intensity of which is usually measured in amperes. Current can consist of any moving charged particles; most commonly these are electrons, but any charge in motion constitutes a current. Electric current can flow through some things, electrical conductors, but will not flow through an electrical insulator.\nBy historical convention, a positive current is defined as having the same direction of flow as any positive charge it contains, or to flow from the most positive part of a circuit to the most negative part. Current defined in this manner is called conventional current. The motion of negatively charged electrons around an electric circuit, one of the most familiar forms of current, is thus deemed positive in the opposite direction to that of the electrons. However, depending on the conditions, an electric current can consist of a flow of charged particles in either direction, or even in both directions at once. The positive-to-negative convention is widely used to simplify this situation.\nThe process by which electric current passes through a material is termed electrical conduction, and its nature varies with that of the charged particles and the material through which they are travelling. Examples of electric currents include metallic conduction, where electrons flow through a conductor such as metal, and electrolysis, where ions (charged atoms) flow through liquids, or through plasmas such as electrical sparks. While the particles themselves can move quite slowly, sometimes with an average drift velocity only fractions of a millimetre per second, the electric field that drives them itself propagates at close to the speed of light, enabling electrical signals to pass rapidly along wires.\nIn engineering or household applications, current is often described as being either direct current (DC) or alternating current (AC). These terms refer to how the current varies in time. Direct current, as produced by example from a battery and required by most electronic devices, is a unidirectional flow from the positive part of a circuit to the negative.\u200a If, as is most common, this flow is carried by electrons, they will be travelling in the opposite direction. Alternating current is any current that reverses direction repeatedly; almost always this takes the form of a sine wave. Alternating current thus pulses back and forth within a conductor without the charge moving any net distance over time. The time-averaged value of an alternating current is zero, but it delivers energy in first one direction, and then the reverse. Alternating current is affected by electrical properties that are not observed under steady state direct current, such as inductance and capacitance. These properties however can become important when circuitry is subjected to transients, such as when first energised.", "output": "By historical convention, a positive current is defined as having the same direction of flow as any positive charge it contains, or to flow from the most positive part of a circuit to the most negative part. Current defined in this manner is called conventional current.", "category": "IT"}, {"instruction": "Give me three different ways to reuse a paper grocery bag.", "input": "", "output": "There are many ways to reuse paper bags. You can draw on an empty grocery bag and turn it in to a sign. They can be used as temporary garbage cans if you are in a pinch. You can also cut grocery bags up and use them for arts and crafts.", "category": "IT"}, {"instruction": "Who are the top 3 professional basketball players of all time?", "input": "", "output": "These five basketball players are generally considered the best of all time:\nMichael Jordan\nLebron James\nBill Russell", "category": "IT"}, {"instruction": "Give a comma-separated list of the different genes influencing horse coat colors according to the text", "input": "Horses exhibit a diverse array of coat colors and distinctive markings, described by a specialized vocabulary. Often, a horse is classified first by its coat color, before breed or sex. Horses of the same color may be distinguished from one another by white markings, which, along with various spotting patterns, are inherited separately from coat color.\nMany genes that create horse coat colors and patterns have been identified. Current genetic tests can identify at least 13 different alleles influencing coat color, and research continues to discover new genes linked to specific traits. The basic coat colors of chestnut and black are determined by the gene controlled by the Melanocortin 1 receptor, also known as the \"extension gene\" or \"red factor,\" as its recessive form is \"red\" (chestnut) and its dominant form is black. Additional genes control suppression of black color to point coloration that results in a bay, spotting patterns such as pinto or leopard, dilution genes such as palomino or dun, as well as greying, and all the other factors that create the many possible coat colors found in horses.", "output": "\"extension gene\" or \"red factor,\" palomino, dun, greying", "category": "IT"}, {"instruction": "Is the harmonic distribution a discrete distribution?", "input": "In probability theory and statistics, the harmonic distribution is a continuous probability distribution. It was discovered by \u00c9tienne Halphen, who had become interested in the statistical modeling of natural events. His practical experience in data analysis motivated him to pioneer a new system of distributions that provided sufficient flexibility to fit a large variety of data sets. Halphen restricted his search to distributions whose parameters could be estimated using simple statistical approaches.", "output": "No, it is a continuous distribution.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Djembe, Dotar", "input": "", "output": "Dotar is string, Djembe is percussion.", "category": "IT"}, {"instruction": "Where was the beer Yuengling founded?", "input": "", "output": "Pennsylvania", "category": "IT"}, {"instruction": "Spanish patatas bravas are potatoes served with a red sauce made with tomatoes and chilis. Could patatas bravas have existed in 1490?", "input": "Food historian Lois Ellen Frank calls potatoes, tomatoes, corn, beans, squash, chili, cacao, and vanilla the \"magic eight\" ingredients that were found and used only in the Americas before 1492 and were taken via the Columbian Exchange back to the Old World, dramatically transforming the cuisine there.[17][18][19] According to Frank,[20]\nIf we deconstruct that these foods were inherently native, then that means that the Italians didn't have the tomato, the Irish didn't have the potato, half the British National Dish\u2014Fish and Chips\u2014didn't exist. The Russians didn't have the potato, nor did they have vodka from the potato. There were no chiles in any Asian cuisine anywhere in the world, nor were there any chiles in any East Indian cuisine dishes, including curries. And the French had no confection using either vanilla or chocolate. So the Old World was a completely different place.", "output": "No, patatas bravas could not have existed in 1490. This is because in 1490 the Americas had not yet been visited by Europeans, and so Spaniards didn't have access to the potatoes, tomatoes or chilis present in the dish, because those plants are all from the Americas originally.", "category": "IT"}, {"instruction": "What is data science?", "input": "", "output": "Data science is a field of study that deals with using mathematics like statistics and large scale computing to build algorithms and models that explain information or predict outcomes and insights from structured, unstructured, and semi-structured.  Data scientists spend 80% of their time doing exploratory data analysis and about 20% of their building the model and hyper parameter tuning.", "category": "IT"}, {"instruction": "What is the Auburn Ski Club?", "input": "", "output": "The Auburn Ski Club is a non-profit training center that owns and operates a lodge/locker room/gym as well as a Nordic ski course and biathlon range adjacent to Boreal Mountain Resort. The club runs alpine, Nordic, snowboard and biathlon training programs for youth athletes from beginner to expert level.", "category": "IT"}, {"instruction": "Name some Nobel Prize winners", "input": "Gerty Theresa Cori was a Czech-American biochemist who in 1947 was the third woman to win a Nobel Prize in science, and the first woman to be awarded the Nobel Prize in Physiology or Medicine, for her role in the \"discovery of the course of the catalytic conversion of glycogen\". Together with her husband Carl and Argentine physiologist Bernardo Houssay, Gerty Cori received the Nobel Prize in 1947 for the discovery of the mechanism by which glycogen\u2014a starch made from glucose\u2014is broken down in muscle tissue into lactic acid and then resynthesized in the body and stored as a source of energy (known as the Cori cycle). They also identified the important catalyzing compound, the Cori ester. The Coris were the third ever married couple to win the Nobel Prize. In 2004, both Gerty and Carl Cori were designated a National Historic Chemical Landmark in recognition of their work in clarifying carbohydrate metabolism.", "output": "In 1947, biochemist Gerty Cori and her husband, Carl, received the Nobel Prize (along with their colleague physiologist Bernardo Houssay) for their work on the course of glycogen in the human body, now known as the Cori cycle.", "category": "IT"}, {"instruction": "What is the difference between check and checkmate?", "input": "When a king is under immediate attack, it is said to be in check. A move in response to a check is legal only if it results in a position where the king is no longer in check. This can involve capturing the checking piece; interposing a piece between the checking piece and the king (which is possible only if the attacking piece is a queen, rook, or bishop and there is a square between it and the king); or moving the king to a square where it is not under attack. Castling is not a permissible response to a check.[1]\n\nThe object of the game is to checkmate the opponent; this occurs when the opponent's king is in check, and there is no legal way to get it out of check. It is never legal for a player to make a move that puts or leaves the player's own king in check. In casual games, it is common to announce \"check\" when putting the opponent's king in check, but this is not required by the rules of chess and is usually not done in tournaments.[2]", "output": "When a king is about to be captured in the next opponents move, then the king is in check. If the king cannot get out of check, then the king is checkmated and loses the game", "category": "IT"}, {"instruction": "What is solar minimum and how it is related to sun cycle?", "input": "", "output": "Sun has a cycle that lasts on an average of 11 years", "category": "IT"}, {"instruction": "Name three poems by William Wordsworth.", "input": "", "output": "Tintern Abbey, I Wandered Lonely as a Cloud, and the Solitary Reaper", "category": "IT"}, {"instruction": "Who are the best starting MLB pitchers of all time?", "input": "", "output": "There are many ways to argue who the best pitchers of all time are.  Some of the criteria to consider are Cy Young Awards, ERA titles, strike out titles and records, post season success, and longevity.  With these criteria heavily considered some of the best MLB pitchers of all time could be as follows.\n\n5. Roger Clemens (The Rocket) pitched for 24 seasons and compiled accolades such as a record holding 7 Cy Young Awards, an MVP title, 5 strike out titles, 7 ERA titles, and won 2 World Series titles. \n\n4. Pedro Martinez had the 4th highest win percentage in history, won the world series, won 3 Cy Young Awards, an MVP Award, and is one of only 4 pitchers to ever have more than 3,000 strike outs while walking fewer than 1,000.  \n\n3. Randy Johnson (The Big Unit) played for 22 MLB seasons and is the all time record holder for Wins, ranks 2nd all time for strike outs, won 5 Cy Young Awards, won The World Series. \n\n2. Cy Young is one of the most legendary pitchers of all time and the annual award for the best pitcher in each MLB league is named after him. Some of his many accomplishments are that he is the all time leader for wins, innings pitched, and complete games. \n\n1. Walter Johnson (The Big Train) was one of the \"First Five\" inaugurated into the MLB hall of fame.  He is the all time leader in shut outs and was the all time leader for strikeouts for more than 55 years.  He won The World Series and also is the all time leader for leading the league in strike outs 12 times.", "category": "IT"}, {"instruction": "What are some useful ways to repurpose a cardboard box?", "input": "", "output": "That depends on the person and what they find useful. I might find a box useful for clearing my desk of all the mess I accumulate throughout the week. Meanwhile, my kids would much prefer to turn the box into a play house, a spaceship, or maybe a jail to imprison each other in.  A cat might repurpose it as a hiding place or as a new scratching toy.", "category": "IT"}, {"instruction": "Given the passage below, tell me how many Grammy Awards, Emmy Awards, and Billboard Music Awards Taylor Swift has won and how many simultaneous entries she had on the Billboard Global 200 when she had the most simultaneous entries for an artist.", "input": "Swift has won 12 Grammy Awards (including three for Album of the Year\u2014tying for the most by an artist), an Emmy Award, 40 American Music Awards (the most won by an artist),29 Billboard Music Awards (the most won by a woman), 92 Guinness World Records, 14 MTV Video Music Awards (including three Video of the Year wins\u2014the most by an act), 12 Country Music Association Awards (including the Pinnacle Award), eight Academy of Country Music Awards, and two Brit Awards. As a songwriter, she has been honored by the Nashville Songwriters Association, the Songwriters Hall of Fame, and the National Music Publishers' Association and was the youngest person on Rolling Stone's list of the 100 Greatest Songwriters of All Time in 2015. At the 64th BMI Awards in 2016, Swift was the first woman to be honored with an award named after its recipient. In 2023, Swift became the first act to be named the global best-selling artist of the year by the International Federation of the Phonographic Industry (IFPI) thrice.\n\nFrom available data, Swift has amassed over 50 million album sales, 150 million single sales, and 114 million units globally, including 78 billion streams. The International Federation of the Phonographic Industry (IFPI) ranked her as the Global Recording Artist of the Year for a record three times (2014, 2019 and 2022). Swift has the most number-one albums in the United Kingdom and Ireland for a female artist this millennium and earned the highest income for an artist on Chinese digital music platforms\u2014RMB 159,000,000. Swift is the most streamed female act on Spotify, and the only artist to have received more than 200 million streams in one day (228 million streams on October 21, 2022).The most entries and the most simultaneous entries for an artist on the Billboard Global 200, with 94 and 31 songs, respectively, are among her feats. Her Reputation Stadium Tour (2018) is the highest-grossing North American tour ever, and she was the world's highest-grossing female touring act of the 2010s. Beginning with Fearless, all of her studio albums opened with over a million global units.", "output": "Taylor Swift won 12 Grammy Awards, one Emmy Awards, 29 Billboard Music Awards, and had 31 songs on the Billboard Global 200 simultaneously, breaking the record for the most simultaneous entries for an artist on the Billboard Global 200.", "category": "IT"}, {"instruction": "Give me list of main cast of Friends TV show", "input": "Friends is an American television sitcom created by David Crane and Marta Kauffman, which aired on NBC from September 22, 1994, to May 6, 2004, lasting ten seasons.[1] With an ensemble cast starring Jennifer Aniston, Courteney Cox, Lisa Kudrow, Matt LeBlanc, Matthew Perry and David Schwimmer, the show revolves around six friends in their 20s and 30s who live in Manhattan, New York City. The series was produced by Bright/Kauffman/Crane Productions, in association with Warner Bros. Television. The original executive producers were Kevin S. Bright, Kauffman, and Crane.", "output": "Jennifer Aniston, \nCourteney Cox, \nLisa Kudrow, \nMatt LeBlanc, \nMatthew Perry, \nDavid Schwimmer", "category": "IT"}, {"instruction": "How did you prepare for your business case competition?", "input": "", "output": "To start off, we started getting background information on the topic before proceeding to construct our argument. Next, we finished a rough draft and checked the California FBLA website to make sure we were following the formatting requirements. By February break, we were completely finished with our prejudged report. After figuring out we were prejudged, we created a separate document for our speech. This was because our speech had additional requirements compared to the report; the speech also had to include our personal recommendation on the topic.", "category": "IT"}, {"instruction": "Which American president appears on a one-dollar bill?", "input": "", "output": "George Washington", "category": "IT"}, {"instruction": "Is it safe to invest in stocks?", "input": "", "output": "There are no guarantees of profits when you buy stock, which makes stock a risky investments. If a company doesn't do well or falls out of favor with investors, its stock can fall in price, and investors could lose money. With the other hand, Stocks offer investors the greatest potential for growth over the long haul. Investors willing to stick with stocks over long periods of time, say 15 years, generally have been rewarded with strong, positive returns.", "category": "IT"}, {"instruction": "From the passage provided, extract the names of Jawaharlal Nehru's parents. Separate them with a comma.", "input": "Jawaharlal Nehru was born on 14 November 1889 in Allahabad in British India. His father, Motilal Nehru (1861\u20131931), a self-made wealthy barrister who belonged to the Kashmiri Pandit community, served twice as president of the Indian National Congress, in 1919 and 1928.[14] His mother, Swarup Rani Thussu (1868\u20131938), who came from a well-known Kashmiri Brahmin family settled in Lahore,[15] was Motilal's second wife, his first having died in childbirth. Jawaharlal was the eldest of three children.[16] His elder sister, Vijaya Lakshmi, later became the first female president of the United Nations General Assembly.[17] His youngest sister, Krishna Hutheesing, became a noted writer and authored several books on her brother.[18][19]", "output": "Motilal Nehru, Swarup Rani Thussu", "category": "IT"}, {"instruction": "What is the best seasoning to use on steak?", "input": "", "output": "The best seasoning combination for any steak is the classic Garlic, Pepper, and Salt combination. Salt will draw the water out of the meat, the water will dissolve the salt, and the moisture will then get reabsorbed back, breaking down protein, and ultimately tenderizing the meat. Garlic and Pepper pair very well with Salt and meat, crafting the best possible seasoning experience.", "category": "IT"}, {"instruction": "What watch should I buy?", "input": "", "output": "Purchasing a wristwatch is based on your individual desires, preferences and budget. You can purchase ultra high end watches like Patek Phillipe, Rolex and Richard Mille. There are popular tool watches such as Omega Seamaster and the Rolex Submariner which are both great starter watches for collectors. Watch prices vary based on price, materials and the movement. Quartz movement has become a popular alternative to Automatic or Manual watches however watch enthusiasts prefer to have a self-winding watch.", "category": "IT"}, {"instruction": "Where do bears live?", "input": "", "output": "Different species of bears can be found in different parts of the world. For example, black bears can be found in North America and Asia, whereas polar bears can be found in the Arctic. Grizzly bears, are also known as brown bears, they can be found across Europe, Asia, and North America.", "category": "IT"}, {"instruction": "Please give a simple list of reasons that extraterrestrial intelligence may not exist or is very rare", "input": "Those who think that intelligent extraterrestrial life is (nearly) impossible argue that the conditions needed for the evolution of life\u2014or at least the evolution of biological complexity\u2014are rare or even unique to Earth. Under this assumption, called the rare Earth hypothesis, a rejection of the mediocrity principle, complex multicellular life is regarded as exceedingly unusual.[66]\n\nThe rare Earth hypothesis argues that the evolution of biological complexity requires a host of fortuitous circumstances, such as a galactic habitable zone, a star and planet(s) having the requisite conditions, such as enough of a continuous habitable zone, the advantage of a giant guardian like Jupiter and a large moon, conditions needed to ensure the planet has a magnetosphere and plate tectonics, the chemistry of the lithosphere, atmosphere, and oceans, the role of \"evolutionary pumps\" such as massive glaciation and rare bolide impacts. And perhaps most importantly, advanced life needs whatever it was that led to the transition of (some) prokaryotic cells to eukaryotic cells, sexual reproduction and the Cambrian explosion.\n\nIn his book Wonderful Life (1989), Stephen Jay Gould suggested that if the \"tape of life\" were rewound to the time of the Cambrian explosion, and one or two tweaks made, human beings most probably never would have evolved. Other thinkers such as Fontana, Buss, and Kauffman have written about the self-organizing properties of life.[67]", "output": "Conditions that evolved intelligent life on planet Earth may be exceedingly rare in the Universe. These reasons for that are speculated to be:\n1. The solar system is in a safe location within its galaxy.\n2. The location of the earth relative to the sun and other planets in the solar system gives it protection from extreme environmental conditions that would prevent life from occurring.\n3. The steps that led to advanced life forms (prokaryotic cells to eukaryotic cells, sexual reproduction and the Cambrian explosion) may be very unlikely to occur.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Atabaque, Ajaeng", "input": "", "output": "Ajaeng is string, Atabague is percussion.", "category": "IT"}, {"instruction": "What kind of publisher is the American Fantasy Press", "input": "American Fantasy Press is a science fiction/fantasy/horror specialty press owned and operated by Robert T. Garcia and Nancy Garcia. Located in Woodstock, Illinois, the press has published: The first U.S. hardcover edition of Dennis Etchison's Darkside (A 10th anniversary edition); the chapbook edition of The Man on the Ceiling by Steve Rasnic and Melanie Tem, the chapbook of A Walking Tour of the Shambles by Neil Gaiman and Gene Wolfe, the first U.S. hardcover edition of Michael Moorcock's The Dreamthief's Daughter (a signed, limited edition), the chapbook The Broecker Sampler, featuring the artwork of Randy Broecker, a broadsheet of Jo Fletcher's poem Midnight Monster illustrated by Gahan Wilson, and the first hardcover edition of the Mary Frances Zambreno's short story collection Invisible Pleasures. It published the fantasy short story collection by Mike Resnick, Stalking the Zombie which features his hard-boiled detective John J. Mallory in an alternate Manhattan. In 2015, the press published The Collectors' Book of Virgil Finlay, by Robert Weinberg, Douglas Ellis and AF publisher Robert Garcia.", "output": "American Fantasy Press is a science fiction/fantasy/horror specialty press owned and operated by Robert T. Garcia and Nancy Garcia. \n\nLocated in Woodstock, Illinois, the press has published: The first U.S. hardcover edition of Dennis Etchison's Darkside (A 10th anniversary edition); the chapbook edition of The Man on the Ceiling by Steve Rasnic and Melanie Tem, the chapbook of A Walking Tour of the Shambles by Neil Gaiman and Gene Wolfe, the first U.S. hardcover edition of Michael Moorcock's The Dreamthief's Daughter (a signed, limited edition), the chapbook The Broecker Sampler, featuring the artwork of Randy Broecker, a broadsheet of Jo Fletcher's poem Midnight Monster illustrated by Gahan Wilson, and the first hardcover edition of the Mary Frances Zambreno's short story collection Invisible Pleasures. \n\nIt published the fantasy short story collection by Mike Resnick, Stalking the Zombie which features his hard-boiled detective John J. Mallory in an alternate Manhattan. In 2015, the press published The Collectors' Book of Virgil Finlay, by Robert Weinberg, Douglas Ellis and AF publisher Robert Garcia.", "category": "IT"}, {"instruction": "Classify the cities based on whether they are located in Wallis and Futuna or Morocco.\nCasablanca, El Kelaa des Srarhna, Mata-Utu, F\u00e8s, Leava", "input": "", "output": "Wallis and Futuna - Mata-Utu, Leava\nMorocco - Casablanca, El Kelaa des Srarhna, F\u00e8s", "category": "IT"}, {"instruction": "What happened at the height of the American revolution?", "input": "During the height of the American Revolution, in the summer of 1780, British sympathizers (known as Tories) began attacking the outposts of American revolutionaries located along the Susquehanna River in the Wyoming Valley. Because of reports of Tory activity in the region, Captain Daniel Klader and a platoon of 41 men from Northampton County were sent to investigate. They traveled north from the Lehigh Valley along a path known as \"Warrior's Trail\" (which is present-day Pennsylvania Route 93). This route connects the Lehigh River in Jim Thorpe (formerly known as Mauch Chunk) to the Susquehanna River in Berwick.\n\nCaptain Klader's men made it as far north as present-day Conyngham, when they were ambushed by Tory militiamen and members of the Seneca tribe. In all, 15 men were killed on September 11, 1780, in what is now known as the Sugarloaf Massacre.", "output": "In the summer of 1780 Tories also known as British sympathizers started to attack American revolutionaries outposts along a river in the Wyoming valley.  Captain Daniel Klader sent an American Platoon of 41 men to go see what was going on and they ended up getting ambushed by the British sympathizers.  15 men in the platoon were killed in 1780 and this is what is known today as the Sugarloaf Massacre.", "category": "IT"}, {"instruction": "What type of music are you into?", "input": "", "output": "I'm into a variety of genres of music, such as rock, pop, hip-hop, alternative, electronic, and country.", "category": "IT"}, {"instruction": "Classify each of the following as either a state or a city", "input": "", "output": "Virginia, Houston, Florida, Los Angeles, Chicago, Phoenix, California", "category": "IT"}, {"instruction": "IsNarcissus tete a tete a flower", "input": "Narcissus 'T\u00eate-\u00e0-t\u00eate' is a hybrid cultivar of Narcissus, which was introduced in 1949.[1] It is one of 110 cultivars produced by British daffodil breeder Alec Gray.[2] 'T\u00eate-\u00e0-t\u00eate' is a popular ornamental plant, which is known for its very early flowering period and short stature.[3] This cultivar is commonly used as a garden plant where it can be planted in pots,[4] rock gardens, garden borders[5] and even naturalized in lawns.[6] The cultivar name 'T\u00eate-\u00e0-t\u00eate' means to have a conversation between two people,[7] which relates to the cultivar often hosting a pair of flowers per stem.[8]", "output": "Narcissus Tete-a-tete is a hybrid cultivar of Narcissus, which was introduced in 1949. It is one of 110 cultivars produced by British daffodil breeder Alec Gray.", "category": "IT"}, {"instruction": "Given this paragraph about KITS, tell me what station it's on and where its radio tower is located.", "input": "KITS (105.3 FM, \"105.3 Dave FM\") is a commercial radio station in San Francisco, California. Owned by Audacy, Inc., it broadcasts an adult hits radio format. The studios and offices are co-located with formerly co-owned KPIX-TV on Battery Street in the North Beach district of San Francisco.[1]\n\nKITS's transmitter is located on Radio Road, at San Bruno Mountain in Daly City.[2] It has an effective radiated power (ERP) of 15,000 watts, from a tower at 366 meters (1,201 feet) in height above average terrain. KITS broadcasts in the HD Radio format. Its HD2 subchannel formerly aired a gold-based modern rock format as Classic Live 105, inspired by its previous long-time tenure in the format as Live 105. The HD3 subchannel formerly carried \"Radio Zindagi,\" a South Asian radio service. These subchannels have since been turned off.", "output": "KITS plays on 105.3FM in San Francisco, California. Its radio tower is located on Radio Road at San Bruno Mountain in Daly City.", "category": "IT"}, {"instruction": "List five titles by Suzanne Collins.", "input": "", "output": "Catching Fire, Mockingjay, Gregor the Overlander, Year of the Jungle, The Ballad of Songbirds and Snakes", "category": "IT"}, {"instruction": "What is Pinot Grigio?", "input": "Pinot Gris, Pinot Grigio (US: /\u02c8pi\u02d0no\u028a \u02c8\u0261ri\u02d0d\u0292io\u028a, -d\u0292o\u028a/, UK: /\u02c8\u0261r\u026ad\u0292io\u028a/) or Grauburgunder is a white wine grape variety of the species Vitis vinifera. Thought to be a mutant clone of the Pinot Noir variety, it normally has a grayish-blue fruit, accounting for its name, but the grapes can have a brownish pink to black and even white appearance. The word pinot could have been given to it because the grapes grow in small pinecone-shaped clusters. The wines produced from this grape also vary in color from a deep golden yellow to copper and even a light shade of pink,[1] and it is one of the more popular grapes for skin-contact wine.\n\nPinot Gris is grown around the globe, with the \"spicy\" full-bodied Alsatian and lighter-bodied, more acidic Italian styles being most widely recognized. The Alsatian style, often duplicated in New World wine regions such as Marlborough, Tasmania, South Australia, Washington, Oregon, and South Africa tend to have moderate to low acidity, higher alcohol levels and an almost \"oily\" texture that contributes to the full-bodied nature of the wine. The flavors can range from ripe tropical fruit notes of melon and mango to some botrytis-influenced flavors. In Italy, Pinot grigio grapes are often harvested early to retain the refreshing acidity and minimize some of the overt-fruitiness of the variety, creating a more neutral flavor profile. This style is often imitated in other Old World wine regions, such as Germany, where the grape is known as Rul\u00e4nder, or more commonly, Grauburgunder.", "output": "Pinot Gris, Pinot Grigio (US: /\u02c8pi\u02d0no\u028a \u02c8\u0261ri\u02d0d\u0292io\u028a, -d\u0292o\u028a/, UK: /\u02c8\u0261r\u026ad\u0292io\u028a/) or Grauburgunder is a white wine grape variety of the species Vitis vinifera. Pinot Gris is grown around the globe, with the \"spicy\" full-bodied Alsatian and lighter-bodied, more acidic Italian styles being most widely recognized.", "category": "IT"}, {"instruction": "Name top 10 companies from the Fortune 500 list in 2022", "input": "", "output": "1. Walmart\u202f\u202f \n2. Amazon.com\u202f\u202f \n3. Apple\u202f \n4.\u202fCVS Health \n5. UnitedHealth Group\u202f \n6. Exxon Mobil \n7. Berkshire Hathaway\u202f\u202f \n8. Alphabet\u202f \n9. McKesson\u202f\u202f \n10. AmerisourceBergen", "category": "IT"}, {"instruction": "Given this text, tell me the inventor of the Rueben sandwich and where it was invented.", "input": "One origin story holds that Reuben Kulakofsky (his first name sometimes spelled Reubin; his last name sometimes shortened to Kay), a Lithuanian-born Jewish grocer residing in Omaha, Nebraska, asked for a sandwich made of corned beef and sauerkraut at his weekly poker game held in the Blackstone Hotel from around 1920 through 1935. The participants, who nicknamed themselves \"the committee\", included the hotel's owner, Charles Schimmel. Schimmel's son, who worked in the kitchen, made the first Reuben for him, adding Swiss cheese and thousand island dressing to his order, putting the whole thing on rye bread.[2] The sandwich first gained local fame when Schimmel put it on the Blackstone's lunch menu, and its fame spread when a former employee of the hotel won the national sandwich idea contest with the recipe.[3] In Omaha, Nebraska, March 14 was proclaimed Reuben Sandwich Day.[4]\n\nAnother account holds that the Reuben's creator was Arnold Reuben, the German-Jewish owner of Reuben's Delicatessen (1908\u20132001) in New York City. According to an interview with Craig Claiborne, Arnold Reuben created the \"Reuben Special\" around 1914.[5][6] Bernard Sobel in his 1953 book, Broadway Heartbeat: Memoirs of a Press Agent states that the sandwich was an extemporaneous creation for Marjorie Rambeau, inaugurated when the Broadway actress visited the Reuben's Delicatessen one night when the cupboards were particularly bare.[7]\n\nStill other versions give credit to Alfred Scheuing, a chef at Reuben's Delicatessen, and say he created the sandwich for Reuben's son, Arnold Jr., in the 1930s.[3]", "output": "There is no single agreed inventor of the Reuben sandwich. The text gives these possible answers:\n*  Reuben Kulakofsky invented the sandwich in Omaha, Nebraska\n* Arnold Reuben invented the sandwich at Reuben's Delicatessen in New York City\n* Alfred Scheuing invented the sandwich at Reuben's Delicatessen in New York City", "category": "IT"}, {"instruction": "From the passage provided, extract Tagore's nickname", "input": "The name Tagore is the anglicised transliteration of Thakur.[19] The original surname of the Tagores was Kushari. They were Pirali Brahmin ('Pirali\u2019 historically carried a stigmatized and pejorative connotation)[20][21] originally belonged to a village named Kush in the district named Burdwan in West Bengal. The biographer of Rabindranath Tagore, Prabhat Kumar Mukhopadhyaya wrote in the first volume of his book Rabindrajibani O Rabindra Sahitya Prabeshak that\n\nThe Kusharis were the descendants of Deen Kushari, the son of Bhatta Narayana; Deen was granted a village named Kush (in Burdwan zilla) by Maharaja Kshitisura, he became its chief and came to be known as Kushari.[12]\n\nLife and events\nEarly life: 1861\u20131878\nMain article: Early life of Rabindranath Tagore\n\nYoung Tagore in London, 1879\nThe last two days a storm has been raging, similar to the description in my song\u2014Jhauro jhauro borishe baridhara  [... amidst it] a hapless, homeless man drenched from top to toe standing on the roof of his steamer [...] the last two days I have been singing this song over and over [...] as a result the pelting sound of the intense rain, the wail of the wind, the sound of the heaving Gorai River, [...] have assumed a fresh life and found a new language and I have felt like a major actor in this new musical drama unfolding before me.\n\n\u2014 Letter to Indira Devi.[22]\nThe youngest of 13 surviving children, Tagore (nicknamed \"Rabi\") was born on 7 May 1861 in the Jorasanko mansion in Calcutta,[23] the son of Debendranath Tagore (1817\u20131905) and Sarada Devi (1830\u20131875).[b]\n\nBlack-and-white photograph of a finely dressed man and woman: the man, smiling, stands with the hand on the hip and elbow turned outward with a shawl draped over his shoulders and in Bengali formal wear. In front of him, the woman, seated, is in elaborate dress and shawl; she leans against a carved table supporting a vase and flowing leaves.\nTagore and his wife Mrinalini Devi, 1883\nTagore was raised mostly by servants; his mother had died in his early childhood and his father travelled widely.[29] The Tagore family was at the forefront of the Bengal renaissance. They hosted the publication of literary magazines; theatre and recitals of Bengali and Western classical music featured there regularly. Tagore's father invited several professional Dhrupad musicians to stay in the house and teach Indian classical music to the children.[30] Tagore's oldest brother Dwijendranath was a philosopher and poet. Another brother, Satyendranath, was the first Indian appointed to the elite and formerly all-European Indian Civil Service. Yet another brother, Jyotirindranath, was a musician, composer, and playwright.[31] His sister Swarnakumari became a novelist.[32] Jyotirindranath's wife Kadambari Devi, slightly older than Tagore, was a dear friend and powerful influence. Her abrupt suicide in 1884, soon after he married, left him profoundly distraught for years.[33]", "output": "Rabi", "category": "IT"}, {"instruction": "Write a list of items that are \u201cmust buys\u201d at Costco", "input": "", "output": "1. Toilet Paper\n2. Paper Towels\n3 TV\u2019s\n4. Jewelry \n5. Water Bottles\n6. Any Meat Product\n7. Avocados\n8. Alcohol\n9. Giant Shampoo & Conditioner \n10. Clothes", "category": "IT"}, {"instruction": "Which TV Show is about a zip code in Beverly Hills?", "input": "", "output": "90210", "category": "IT"}, {"instruction": "What makes a healthy diet?", "input": "", "output": "A healthy diet is one composed of an appropriate amount of calories balanced across macronutrients with clean sources of fruits, vegetables, grains, and other foods. An adult should generally target around 2000 calories per day, however this number should be greater depending on age, size, and activity level. Processed foods are generally less healthy and are associated with risk of diseases including heart disease and diabetes.", "category": "IT"}, {"instruction": "List the number of warehouses Costco has. Segregate based on location in a descending order. Use the format \u2018 Number of warehouse : Location\u2019.", "input": "Costco Wholesale Corporation (doing business as Costco Wholesale and also known simply as Costco) is an American multinational corporation which operates a chain of membership-only big-box retail stores (warehouse club).[4] As of 2022, Costco is the fifth largest retailer in the world [5] and is the world's largest retailer of choice and prime beef, organic foods, rotisserie chicken, and wine as of 2016.[6] Costco is ranked #11 on the Fortune 500 rankings of the largest United States corporations by total revenue.[7]\n\nCostco's worldwide headquarters are in Issaquah, Washington, an eastern suburb of Seattle, although its Kirkland Signature house label bears the name of its former location in Kirkland. The company opened its first warehouse (the chain's term for its retail outlets) in Seattle in 1983.[8][9] Through mergers, however, Costco's corporate history dates back to 1976, when its former competitor Price Club was founded in San Diego, California.[10][11][12] As of February 2023, Costco has 848 warehouses worldwide:[1] 584 in the United States, 107 in Canada, 40 in Mexico, 31 in Japan, 29 in the United Kingdom, 18 in South Korea, 14 in Taiwan, 14 in Australia, four in Spain, two each in France and China, and one each in Iceland, New Zealand and Sweden.", "output": "584 : United States\n107 : Canada, \n40 : Mexico, \n31 : Japan, \n29 : the United Kingdom\n18 : South Korea, \n14 : Taiwan, \n14 : Australia, \n4 : Spain, \n2 : France\n2 : China\n1 : Iceland\n1 : New Zealand\n1 : Sweden", "category": "IT"}, {"instruction": "What is the name of Frankenstein's monster?", "input": "", "output": "Contrary to what many people think, the monster is not named Frankenstein. Dr. Frankenstein is the name of the scientist who created the monster in Mary Shelley's 1818 novel, \"Frankenstein; or, The Modern Prometheus.\" The monster does not have a name and is simply referred to as \"the Creature.\"", "category": "IT"}, {"instruction": "What was Dick Lammi's most famous work?", "input": "Dick Lammi (January 15, 1909 \u2013 November 29, 1969) was an American jazz tubist and bassist associated with Dixieland jazz. Lammi played violin and banjo early in his career, and played as a banjoist in various groups in the Pacific Northwest in the late 1920s. He settled in Portland, Oregon in the early 1930s, and played bass in a group there; after a move to San Francisco in 1936, he began playing tuba alongside bass. His best-known work was as a member of Lu Watters's band, the Yerba Buena Jazz Band. Lammi played in the ensemble from 1941 to 1950, including on virtually all of their recordings.", "output": "Dick Lammi was most famous for his work as a member of Lu Watters's band, the Yerba Buena Jazz Band.", "category": "IT"}, {"instruction": "Give me a list of some nice Vegetarian Indian dishes", "input": "", "output": "1. Bhindi Masala: For those who likes Okra or Ladyfinger or would simply would like to experiment with this vegetable, it is a great dish which is not only tasty but healthy as well.\n2. Chana Masala: In Hindi, the name for Chickpeas is Chana. It is not only easy to make but also full of proteins.\n3. Sabji Jalfrezi: This Indian dish is a mix of all amazing vegetables like carrot, potatoes, beans, peas, etc blended nicely in various herbs and spices.\n4. Baingan ka Bharta: Baingan is eggplant. So you might get some idea already about this dish. It is prepared by grilling lightly an eggplant, ideally over a gas or even traditional coal like barbecue and then mincing and cooking it with various spices.", "category": "IT"}, {"instruction": "Which of the following can fly: bird, cow, cat, dog, car, helicopter, drone, bike, pot, butterfly, feather?", "input": "", "output": "The objects that can fly are: bird, helicopter, drone, butterfly.\nThe objects that cannot fly are: cow, cat, dog, car, bike, pot, feather.\n\nHowever, someone may claim that a feather can fly as well because it's light enough and a mild wind blow could make it fly.", "category": "IT"}, {"instruction": "What is a haiku?", "input": "", "output": "The haiku is a traditional Japanese poem that has seventeen syllables and follows a specific structure. It is composed of three lines with five, then seven, then five syllables, such as:\n\nFlowers will bloom soon,\nAir warms and sun shines brightly,\nPink leaves will fall next.", "category": "IT"}, {"instruction": "When was \"I'm Just a Singer (In a Rock and Roll Band)\" released?", "input": "\"I'm Just a Singer (In a Rock and Roll Band)\" is a 1973 hit single by the English progressive rock band the Moody Blues, written by the band's bassist, John Lodge. It was first released in 1972 as the final track on the album Seventh Sojourn and was later released as a single in 1973, with \"For My Lady\" as its B-side. It was the second single released from Seventh Sojourn, with the first being \"Isn't Life Strange\", which was also written by Lodge.\n\nThe song reached number 12 on the Billboard Hot 100 in the US, becoming one of their highest-charting hits in that country, but fared less well in their native UK, where it managed number 36. It was also the final single released by the Moody Blues prior to their five-year hiatus, which was agreed upon so each of the band members could pursue their own solo careers. Their next single would not be until 1978, with \"Steppin' in a Slide Zone\".", "output": "\"I'm Just a Singer (In a Rock and Roll Band)\" was originally released in 1972 as the final track on the album Seventh Sojourn and was later released as a single in 1973.", "category": "IT"}, {"instruction": "Was Alexander Skarsg\u00e5rd destined to become an actor?", "input": "Skarsg\u00e5rd was born on 25 August 1976[2][3] in Stockholm, Sweden.[4] He is the eldest son of actor Stellan Skarsg\u00e5rd and physician My Skarsg\u00e5rd.[5] His parents are divorced.[6] He has five younger siblings: Gustaf, Sam, Bill, Eija and Valter, and two half-brothers from his father's second wife, Megan Everett.[7][8] Gustaf, Bill and Valter are also actors.[7]\n\nA friend of his father, a director, gave Skarsg\u00e5rd his first film role when he was seven years old, playing Kalle Nubb in \u00c5ke and His World (\u00c5ke och hans v\u00e4rld).[9] In 1989, his lead role in the Swedish television production Hunden som log (The Dog That Smiled) earned him praise and brought him to prominence in Sweden at age 13.[10] Uncomfortable with the fame, he quit acting at that same age.[11]\n\nAt age 19, Skarsg\u00e5rd applied to perform his national service. He served in the Swedish Armed Forces, in the S\u00e4kJakt (\"protect and hunt\") unit that dealt with anti-sabotage and anti-terrorism in the Stockholm archipelago, for 18 months.[12] After completing his service in 1996, he left Sweden and attended Leeds Metropolitan University in England for six months. He enrolled to study English but admits he did not study much and \"had a blast\" instead.[7][13] While there, he considered pursuing an architecture career, but chose acting instead.[6] In 1997, he enrolled in a theatre course at Marymount Manhattan College and moved to New York City. He returned to Stockholm after six months, but his time studying theatre confirmed to him that he wanted to act.[7][14]", "output": "Alexander Skarsg\u00e5rd was born into an actors family, his father Stellan as well as several of his brothers are successful actors. Furthermore, he got off to an early start when a friend of his father got him a role at seven years old, which seemed to suggest he was always destined to become an actor. However, along the way, several diversions could have set him on another path. At 13 years old he quit acting as he got uncomfortable with the fame. Later on, he joined the Swedish national service, went off to study English in Leeds, and considered pursuing an architecture career. But in the end, he chooses the path of acting.", "category": "IT"}, {"instruction": "What breed is most likely to win a dog show", "input": "Through the 134th Westminster Show (February 2010), Best in Show has been won by the Terrier group 45 out of the 103 times that the prize has been awarded since 1907,[10] more than twice as many wins as any other group. The single breed that has won the most is the Wire Fox Terrier, which has won 15 times. Two of the most popular dog breeds in the United States\u2014the Labrador Retriever and Golden Retriever\u2014have never won Best in Show.[11] The dogs are marked for Best in Breed and then proceed to compete in Best in Group, and finally in the grand prize competition of Best in Show", "output": "The Wire Fox Terrier is to date, the winningest breed at the Westminster Show with 15 total wins. Terriers in general have won over 40% of the Best in Show competitions across the long history of the show.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Kakko, Akonting", "input": "", "output": "Akoting is string, Kakko is percussion.", "category": "IT"}, {"instruction": "What is it like to live on the moon?", "input": "", "output": "The moon is incredibly dark. You must quickly remember on Earth how much you rely on the sun. I miss it deeply. Also, I never thought I would use the word convenient to describe gravity. Life without is more challenging in so many ways. The biggest is the lack of order you have without gravity. Without gravity, the simplest things lose their order, so you have to strap, tape, or glue them down, which later becomes an inconvenience should you need to move them.", "category": "IT"}, {"instruction": "What are mammals?", "input": "", "output": "Mammals are animals that have vertebrae, give milk to their babies, have hair or fur, and are warm-blooded. There are seven types of mammals: rodentia, chiroptera, soricomorpha, primates, carnivora, artiodactyla, diprotodontia, and lagomorpha.", "category": "IT"}, {"instruction": "How do solar panels work?", "input": "", "output": "Sunlight contains photon particles which hit the solar panels and cause electrons off silicon chips to get directed to the wiring to batteries or appliances, providing electricity", "category": "IT"}, {"instruction": "Using examples from the text, list some popular songs from the album For Bitter or Worse.", "input": "For Bitter or Worse is the sixth studio album from the Dutch singer Anouk. The album was released on 18 September 2009, via the record label EMI.\n\nThe first single from the album, \"Three Days in a Row\" was released in August. It reached the top of the Netherlands charts in September 2009, making it Anouk's first number one in the country. In June of the same year, one of the songs recorded for the album, \"Today\", was released as promo material. It was so successful that, despite never being released as an official single, the song reached number 50 in the Dutch chart. The second single Woman, was sent to radio stations at the end of October 2009. After just one day the single was at number one on airplay chart. The single was released physically on 24 November 2009.", "output": "Popular songs from the album For Bitter or Worse include \"Three Days in a Row\" and \"Today\".", "category": "IT"}, {"instruction": "classify the following as good stuff vs bad stuff:\ninflation\nwars\ncollaboration\nrenewable energy\nsoil erosion\npeace\nharmony\nviolence\nbloodshed", "input": "", "output": "Good stuff: \ncollaboration\nrenewable energy\npeace\nharmony\n\nBad stuff:\ninflation\nwars\nsoil erosion\nviolence\nbloodshed", "category": "IT"}, {"instruction": "From the passage provided, extract the year Kabaddi was added to Asian Games", "input": "Kabaddi is a sport developed centered on Jallikattu. It is common among the Ayar tribal people who lived in the Mullai geographical region of ancient Tamil Nadu.[5] A player going to the opposition is treated like a Bull. It is like taming a bull without touching it, as it is mentioned in Sangam Literature that the game called Sadugudu was practised since ages. There are also accounts of Gautam Buddha having played the game recreationally.[6][7][8] There is another version to this sport origins and rich history, Legend has it that kabaddi originated in Tamil Nadu over 4,000 years ago.[9]\n\nThe game was said to have been popular among the Yadava people. An Abhang by Tukaram stated that the lord Krishna played the game in his youth.\n\nModern kabaddi is a synthesis of the game played in various forms under different names in the Indian subcontinent.[10] India has been first credited with having helped to popularise kabaddi as a competitive sport, with the first organized competitions occurring in the 1920s,[11] their introduction to the programme of the Indian Olympic Games in 1938, the establishment of the All-India Kabaddi Federation in 1950,[11] and it being played as a demonstration sport at the inaugural 1951 Asian Games in New Delhi. These developments helped to formalize the sport, which had traditionally been played in villages, for legitimate international competition.[6][7][8]\n\nAfter being demonstrated again at the 1982 Asian Games in Delhi, Kabaddi was added to the Asian Games programme beginning in 1990.", "output": "Kabaddi was added to the Asian Games programme beginning in 1990.", "category": "IT"}, {"instruction": "Given a reference text about Lotus Mark IX, who designed the car?", "input": "The Lotus Mark IX (1955) was an aluminium-bodied sports racing car manufactured by Lotus Engineering Ltd. About thirty of the Mark IX sports racing cars were made. It was closely related to the Lotus model Mark VIII (1954), of which only about seven cars were made. These cars were largely based on the innovative space frame of the Lotus Mark VI (1952). The highly aerodynamic bodies were designed by Frank Costin and constructed by Williams & Pritchard Limited.\n\nDuring this early era, of 1954\u20131955, Lotus Engineering was still a fledgling company, and cars were delivered in different states of completion on special orders. Similar to the Mark VIII, the Mark IX was available in various configurations and different engines, including the 1500 cc MG, 1500 cc Connaught and 2-litre Bristol were fitted. However, the Mark IX designation is most often powered by the 1100 cc Coventry Climax engine. Apparently, two models of Mark IX were offered \u2013 the \"Club\" and the \"Le Mans\", the latter of which had larger drum brakes fitted.", "output": "The Lotus Mark IX was designed by Frank Costin.", "category": "IT"}, {"instruction": "Where should I go this summer?", "input": "", "output": "It depends, for many people, a summer destination is all about going to a nice beach, enjoying the sunshine and relaxing. For others summer vacation is about going on a new adventure to explore a nice country, city or a cool nearby village. \nHere are some ideas for a summer vacation if you are interested in traveling to Europe\nRoad trip across the Amalfi coast for one week. \nCruising around the Croatian islands. \nAncient history tour in Rome, Vatican City & Athens.\nEnjoy the beautiful beaches in Southern France. \nThere are many other beautiful places to visit but this will depend on your budget, duration and your interests.", "category": "IT"}, {"instruction": "Given a reference text bout the Tampa Convention Center, when did it open and how big is it?", "input": "The Tampa Convention Center is a mid-sized convention center located in downtown Tampa, Florida at the mouth of the Hillsborough River. It has both waterfront views of Tampa Bay and views of the city's skyline. Harbour Island is across the eponymous bridge on the other side of the Garrison Channel. The center is connected to the neighboring Channelside District and Ybor City via the TECO Line Streetcar, which has a station across the street. The center opened in 1990 and encompasses 600,000 square feet (56,000 m2) in total. It has a 200,000 square feet (19,000 m2) exhibit hall, a ballroom capable of accommodating over 2,000 guests, and 36 meeting rooms that can be adjusted to various sizes. The facility hosts over 300 events per year.", "output": "The Tampa Convention Center opened in 1990 and is about 600,000 square feet.", "category": "IT"}, {"instruction": "Is it possible to build a society that runs completely on socialism without any capitalism elements?", "input": "", "output": "It is theoretically possible to build a society that runs completely on socialism without any capitalism elements, but based on the human history so far, there are challenges that are difficult to overcome. As a socialist society relies on a centralized organization for distribution of resources rather than relying on free market, the challenges include inefficient decision making, corruption of power, etc.", "category": "IT"}, {"instruction": "Classify each of the following as an \"Indoor Activity\" or an \"Outdoor Activity\": Hiking, Watching TV, Cooking, Surfing, Gardening", "input": "", "output": "Hiking: Outdoor Activity\nWatching TV: Indoor Activity\nCooking: Indoor Activity\nSurfing: Outdoor Activity\nGardening: Outdoor Activity", "category": "IT"}, {"instruction": "Who is the best CEO in the world", "input": "", "output": "Steve Jobs. Because of his invention.", "category": "IT"}, {"instruction": "How is Delta Lake related to Apache Spark?", "input": "", "output": "Delta Lake sits on top of Apache Spark. The format and the compute layer helps to simplify building big data pipelines and increase the overall efficiency of your pipelines.", "category": "IT"}, {"instruction": "What is the best tea  near Bangalore", "input": "", "output": "Munnar and Kunnar is the best tea produced near Bangalore", "category": "IT"}, {"instruction": "Based on the information provided, what was the controversy surrounding the 2021 Abu Dhabi Grand Prix?", "input": "The 2021 Abu Dhabi Grand Prix (officially known as the Formula 1 Etihad Airways Abu Dhabi Grand Prix 2021) was a Formula One motor race held on 12 December 2021 at the Yas Marina Circuit in Abu Dhabi, United Arab Emirates. Contested over a distance of 58 laps, the race was the twenty-second and final round of the 2021 Formula One World Championship. The race decided both the Drivers' and Constructors' championships; Max Verstappen and Lewis Hamilton both had 369.5 points coming into the race. Hamilton led most of the race and appeared on course to win what would have been a record eighth World Drivers' Championship, having taken the lead at the start of the race at turn 1 on the first lap. However Verstappen was the eventual winner, overtaking Hamilton on the final lap after a controversial safety car restart in the last moments of the race. The FIA thus conducted an inquiry into the race which led to a restructuring of race control including the replacement of Michael Masi as race director and amendments to the safety car rules. That inquiry subsequently concluded that the race officials had misapplied the then-regulations due to human error, but confirmed the results.\n\nVerstappen's win secured his first Formula One World Drivers' Championship of his career by eight points from Hamilton, and Red Bull Racing's first since 2013. Mercedes won their eighth consecutive Formula One World Constructors' Championship, setting a new record. The Grand Prix was also the final race for 2007 World Champion Kimi R\u00e4ikk\u00f6nen; the 42-year-old Finn retired from Formula One after a two-decade career spanning 349 Grands Prix starts.\n\nRace\n\nStart and opening laps\nThe race started at 17:00 local time on Sunday 12 December.[18] Lewis Hamilton immediately took the lead from Max Verstappen on the race start, prompting Verstappen to attempt to regain his position at the turn 6 chicane.[26] Verstappen's trajectory forced Hamilton off the track, and the Briton re-entered slightly further ahead of the Dutch driver than he was before the corner. Arguing that he should have ceded the position to Verstappen, Red Bull Racing protested the racing line taken by Hamilton, and were told by radio that Hamilton had ultimately given back any advantage gained.[26] The incident was referred to the stewards, which concluded that no further investigation was necessary.[26] Hamilton then utilised the durability of his medium-compound tyres to extend his lead over Verstappen, whose soft-compound tyres were suffering from greater degradation.[26]\n\nPit-stops and virtual safety car\nVerstappen made his stop at the end of lap 13 with Hamilton following suit one lap later, both opting for a set of the hardest tyres. The lead drivers pitting elevated Sergio P\u00e9rez to first, with the Mexican driver being informed his strategy was to hold up Hamilton to allow his teammate Verstappen to catch up.[26] Hamilton caught up with P\u00e9rez on lap 20; a spirited defence from the Red Bull second driver allowed Verstappen to significantly close the gap from about 11 seconds after the pits to 1.3 second.[27][28] Verstappen was unable to take advantage of it, with Hamilton's superior pace extending the gap to four seconds by the midpoint of the race.[26]\n\nFinal laps\nOn lap 53, a crash at turn 14 for Nicholas Latifi, who was fighting for position with Haas' Mick Schumacher and had dirty tyres after going off circuit at turn 9,[29] brought out the safety car. Hamilton again stayed out without pitting because he would have lost track position had the safety car period not ended, while Verstappen pitted behind him for a fresh set of the softest available tyres. P\u00e9rez retired under the safety car due to oil pressure. After Verstappen's pit stop, he retained second, but with five lapped cars (those of Lando Norris, Fernando Alonso, Esteban Ocon, Charles Leclerc, and Sebastian Vettel) between himself and Hamilton (in first). As the debris from Latifi's crash was being cleared by the race marshals, the lapped drivers were initially informed that they would not be permitted to overtake. On lap 57 Masi gave the direction that only the five cars between Hamilton and Verstappen were to unlap themselves.[30]\n\nImmediately after Vettel passed the safety car to join the lead lap, race control announced the safety car would enter the pits at the end of the lap to allow for a final lap of green-flag racing, leading to angry remonstrations from Mercedes team principal Toto Wolff. On the final lap, Verstappen used his fresh soft tyres to pass Hamilton into turn 5 to take the lead of the race. He held off counter-attacks from Hamilton to win the race and his first World Drivers' Championship, with Hamilton in second and Ferrari driver Carlos Sainz Jr. in third. AlphaTauri driver Yuki Tsunoda finished in a career-best fourth place, after overtaking Bottas. Mercedes gained enough points to win their eighth consecutive Constructors' title, extending their own record.[31][32] Over the radio, Wolff appealed to Masi to reinstate the order of the penultimate lap, to which Masi gave the reply: \"Toto, it's called a motor race, ok? We went car racing.\"[30]\n\nSafety car controversy\nMichael Masi was involved in a safety car procedure controversy during the last laps of the race.[35][36][37] On lap 56 of the race, during which Hamilton was leading, Masi allowed only the five cars directly in between championship contenders Hamilton and Verstappen to unlap themselves before the restart. The race restarted, and on the final lap of the race, Verstappen overtook Hamilton and won the 2021 World Drivers' Championship.[38][39][40]\n\nMercedes' post-race protests\nMercedes protested the race result,[41][42] alleging that Verstappen had overtaken Hamilton during the safety car[43] and that Masi violated safety car procedure by allowing the cars directly in front of Verstappen to unlap themselves, and no others, and that according to regulations the restart should have occurred the following lap, which would have resulted in Hamilton's victory.[44][45][46] While the first issue was dismissed because Verstappen was not ahead at the end of the safety car period,[47] the second issue was more contentious, with Mercedes retaining legal counsel for the protest.[48][49] Mercedes argued that if a message for lapped cars to overtake is issued under Article 48.12, then all lapped cars are required to unlap, and that the safety car was required to wait until the end of the following lap to return to the pit lane; if this process was complied with, Mercedes submitted that Hamilton would have won the race and therefore the championship, and requested that the classification be amended as such. Red Bull argued that a) the regulation stated \"any cars\", not \"all cars\", were required to overtake under Articles 48.12; b) 48.13, which governs the withdrawal of the safety car, overrides Article 48.12; c) Article 15.3 gives the race director overriding authority over the use of the safety car; and d) the race result would not have changed if all eight lapped cars were permitted to unlap. Masi argued that the principle behind Article 48.12 was to remove cars which \"interfered\" with drivers racing on the lead lap and that all teams had agreed in principle that all races should end under racing conditions.[50]\n\nThe clerk of the course shall work in permanent consultation with the Race Director. The Race Director shall have overriding authority in the following matters and the clerk of the course may give orders in respect of them only with his express agreement: ... e) The use of the safety car.\n\n\nMercedes lodged[57] their intentions to appeal the ruling.[58] Following the FIA's announcement that it would conduct a \"detailed analysis and clarification exercise\" of the incident and its admission that the controversy was \"tarnishing the image\" of the sport, Mercedes decided not to pursue their appeal,[59] and announced the discontinuation of their protest on 16 December, several hours before the submission deadline.[b][61] Amongst the reasons to discontinue, Wolff said that neither he nor Hamilton wished to be awarded the drivers' championship in court, and instead would focus their efforts in to ensuring an equitable result from the FIA's investigation into the sporting code. Wolff remained heavily critical of Masi's direction of the race\u2014in particular, Wolff criticised Masi's decision in Abu Dhabi as being inconsistent with a decision at the 2020 Eifel Grand Prix, where Masi cited the need to let all cars unlap to extend a safety car period\u2014and both he and Hamilton boycotted the FIA Prize Giving Ceremony that evening.[62] Hamilton was later fined for not attending; he asked the FIA to donate the fine as contribution towards the work the body carries out with underprivileged children.[63] The statement also fuelled speculation that Hamilton could announce a snap retirement after being disillusioned by the race's events, although Wolff indicated both he and his driver would continue in the sport after a period of reflection in the off-season.[62]\n\nRace reactions and commentary\nIn the immediate post-race interview, Hamilton and his father Anthony congratulated Verstappen and his family on his first World Drivers' Championship.[64]\n\nSeveral drivers criticised Masi's decision which was seen as a divergence from standard safety car procedure. In a last-lap radio message to his race engineer Peter Bonnington, that was not played on the television feed, Hamilton said the race result had been \"manipulated\".[65] Russell, who was signed to be Hamilton's teammate at Mercedes in 2022, called the race finishing decision of race director Michael Masi \"unacceptable\".[66] Norris, who was situated at the front of the five cars permitted to unlap, said the decision to go racing again on the last lap was made \"for TV\", and Alonso, Ocon, Leclerc, and Vettel, the drivers of the other four cars in the pack, also expressed confusion at the sudden instruction to unlap.[67] Daniel Ricciardo, who was situated immediately behind Verstappen during the safety car period and was not permitted to unlap himself, said he was \"speechless\" at the instruction, especially as it did not allow him to also race the five-car pack on newer soft-compound tyres, and Sainz Jr., who was positioned behind Ricciardo and Lance Stroll's cars upon the restart and was under pressure from Yuki Tsunoda, Pierre Gasly, and Valtteri Bottas, opined that the decision to resume racing under the circumstances \"nearly cost [him his] podium\".[68] Speaking at Aston Martin's 2022 car launch in February 2022, Lance Stroll described the Abu Dhabi situation as \"ridiculous\" and that rules should be set in stone before a season starts.[69]", "output": "While there was a lot of complexity based on the circumstances that occurred, the prevailing controversy with the race was related to the fact that lapped cars were only partially allowed to clear the track. This meant that Max Verstappen was cleared to attack Lewis Hamilton on fresher tyres for the last part of the final lap. Lewis and Max both needed to win the final race to win the championship. This would have been Max's first ever championship or Lewis' record-breaking 8th championship. By allowing only the cars between Max and Lewis, the race director only partially adhered to the rules. This virtually handed the win to Max and Red Bull. While Mercedes immediately protested the decision and final result. Max was awarded the championship.", "category": "IT"}, {"instruction": "What does the phrase \"the Carolinas\" refer to?", "input": "", "output": "When someone says \"the Carolinas,\" they are referring to both the state of North Carolina and the state of South Carolina within the United States.", "category": "IT"}, {"instruction": "What does the company Navibulgar do", "input": "Navibulgar is a Bulgarian shipping company, the largest in the country, with a fleet of 70 vessels: 46 bulk carriers, 9 container vessels, 5 tanker and chemical vessels, and 10 combined tonnage vessels, including their new 30,700-tonne ship, which became a part of their fleet in June 2012.[1]", "output": "Navibulgar is a Bulgarian shipping company, the largest in the country, with a fleet of 70 vessels: 46 bulk carriers, 9 container vessels, 5 tanker and chemical vessels, and 10 combined tonnage vessels, including their new 30,700-tonne ship, which became a part of their fleet in June 2012.", "category": "IT"}, {"instruction": "How do I kick someone out of a meeting room?", "input": "", "output": "If you're working in an office and waiting for a meeting room to be cleared out, you can start by making your presence known by gently knocking at the door. Usually you can give the other party a few minutes to wrap up, but if they are still in the room you can make a stronger statement by cracking the door and leaving it open. If they still do not leave, you can get more assertive by entering the room or by verbally engaging them to explain that their time is up and you need the room. In a few cases the other party might need the room for critical reasons - customer escalations and interviews, in which case you might need to look for a different room to have your meeting.", "category": "IT"}, {"instruction": "What is sweep rowing?", "input": "Rowing, sometimes called crew in the United States, is the sport of racing boats using oars. It differs from paddling sports in that rowing oars are attached to the boat using oarlocks, while paddles are not connected to the boat. Rowing is divided into two disciplines: sculling and sweep rowing. In sculling, each rower holds two oars\u2014one in each hand, while in sweep rowing each rower holds one oar with both hands. There are several boat classes in which athletes may compete, ranging from single sculls, occupied by one person, to shells with eight rowers and a coxswain, called eights. There are a wide variety of course types and formats of racing, but most elite and championship level racing is conducted on calm water courses 2 kilometres (1.2 mi) long with several lanes marked using buoys.", "output": "Sweep rowing is a rowing discipline in which rowers hold one oar with both hands.", "category": "IT"}, {"instruction": "Among those animals, what are mammals? platypus, Greenland shark, puffer fish, rattlesnake, orca, kangaroo, ostrich", "input": "", "output": "From above, those are mammals: platypus, orca, kangaroo. Greenland shark and puffer fish are fishes, not mammals. Rattlesnake is a reptile. Ostrich is a bird. Note though orca lives in the sea and looks like big fishes, e.g. sharks, orca is in fact a mammal.", "category": "IT"}, {"instruction": "Bike or Car?", "input": "", "output": "Car is always better, but bike fans will deny it.\n\nCar has more power then Bike.\nCar is more safe\nCar has more feature compare to Bike", "category": "IT"}, {"instruction": "Think up a creative and weird alternative way for me to protect my phone if I don't want to purchase a phone case.", "input": "", "output": "If you want to protect your phone but don't want to purchase a phone case, you can make your own by using marshmallows and toothpicks. Use the toothpicks to secure the marshmallows around your phone and make sure that they fit snugly around your phone. Marshmallows are a good choice since they are very soft and squishy and will absorb the impact if you drop your phone.", "category": "IT"}, {"instruction": "Is there a New York Hotel in Salt Lake City", "input": "The New York Hotel in Salt Lake City, Utah, at 42 Post Office Pl., was built in 1906. It was listed on the National Register of Historic Places in 1980.[1]\n\nIt was a work of leading Salt Lake City architect Richard K.A. Kletting.[2]\n\nIt is a three-story brick building designed to have shops on the ground floor and 62 hotel rooms above. Some hotel room suites had bathrooms; there were also single rooms served by a bathroom on each floor. It was \"completely modern\" in 1906, having both steam heat and electric lights. [2]\n\nThe building is 49 feet (15 m) tall; the first/second/third floors are 14 feet (4.3 m), 10 feet (3.0 m), and 10.5 feet (3.2 m) tall, respectively.[2]\n\nIt was built as a luxury hotel for Orange J. Salisbury, a mining engineer and businessman who obtained patents and started the United Filter Corporation.[3]", "output": "The New York Hotel in Salt Lake City, Utah, at 42 Post Office Pl., was built in 1906. It was listed on the National Register of Historic Places in 1980.\n\nIt was a work of leading Salt Lake City architect Richard K.A. Kletting.\n\nIt is a three-story brick building designed to have shops on the ground floor and 62 hotel rooms above. Some hotel room suites had bathrooms; there were also single rooms served by a bathroom on each floor. It was \"completely modern\" in 1906, having both steam heat and electric lights.\n\nThe building is 49 feet (15 m) tall; the first/second/third floors are 14 feet (4.3 m), 10 feet (3.0 m), and 10.5 feet (3.2 m) tall, respectively.\n\nIt was built as a luxury hotel for Orange J. Salisbury, a mining engineer and businessman who obtained patents and started the United Filter Corporation.", "category": "IT"}, {"instruction": "Where is the Rudka County", "input": "Rudka [\u02c8rutka] is a village in the administrative district of Gmina Trzcianka, within Czarnk\u00f3w-Trzcianka County, Greater Poland Voivodeship, in west-central Poland.[1] It lies approximately 8 kilometres (5 mi) south of Trzcianka, 13 km (8 mi) north-west of Czarnk\u00f3w, and 72 km (45 mi) north-west of the regional capital Pozna\u0144.", "output": "Rudka is a village in the administrative district of Gmina Trzcianka, within Czarnk\u00f3w-Trzcianka County, Greater Poland Voivodeship, in west-central Poland. It lies approximately 8 kilometres (5 mi) south of Trzcianka, 13 km (8 mi) north-west of Czarnk\u00f3w, and 72 km (45 mi) north-west of the regional capital Pozna\u0144.", "category": "IT"}, {"instruction": "What are some good kids activities on Lake Norman, NC?", "input": "", "output": "Lake Norman offers activities for a range of different ages/interests. If you're looking to spend time near the waters edge, you can visit one of the many town and state parks that border the lake: Jetton Park - Cornelius, Lake Norman State Park - Troutman, Ramsey Creek Park - Cornelius are a few options. You can also hire a boat for the day and enjoy fishing, water sports, or cruising. There are several small islands on the lake that are free for public use, where you can find small beaches to pull up and picnic/play in the sand. The water temperature of the lake during the summer months is generally warm and children should enjoy swimming and splashing in the water.", "category": "IT"}, {"instruction": "List of American films of the 1890s", "input": "", "output": "List of American films of the 1890s:\n\n1890\n- Monkeyshines No. 1\n- Monkeyshines No. 2\n- Monkeyshines, No. 3\n1891\n- Dickson Greeting\n- Newark Athlete\n1893\n- Blacksmith Scene\n1894\n- The Dickson Experimental Sound Film \n- The Barbershop\n1896\n- Rip's Twenty Years' Sleep\n- Dancing Darkies\n- McKinley at Home, Canton, Ohio\n- The Kiss\n1897\n- The Corbett-Fitzsimmons Fight\n- Peeping Tom\n1899\n- How Would You Like to Be the Ice Man?", "category": "IT"}, {"instruction": "Given a reference text about bull sharks, tell me the gestation period for bull sharks.", "input": "Bull sharks mate during late summer and early autumn,[9] often in bays and estuaries.[48] After gestating for 12 months, a bull shark may give birth to 1 to 13 live young.[9][49]\n\nThey are viviparous, born live and free-swimming. The young are about 70 cm (27.6 in) at birth. The bull shark does not rear its young; the young bull sharks are born into flat, protected areas.[49] Coastal lagoons, river mouths, and other low-salinity estuaries are common nursery habitats.[4]\n\nThe male bull shark is able to begin reproducing around the age of 15 years while the female cannot begin reproducing until the age of 18 years.[49] The size of a fully matured female bull shark to produce viable eggs for fertilization seems to be 175 cm to 235 cm. The courting routine between bull sharks has not been observed in detail as of yet. The male likely bites the female on the tail until she can turn upside down and the male can copulate at that point. Mature females commonly have scratches from the mating process.", "output": "The gestation period for bull sharks is 12 months.", "category": "IT"}, {"instruction": "Should I buy a house or invest in a stock market?", "input": "", "output": "It depends on your goal. If your goal is to have your own place, then you should buy a house. If you are looking for a liquid assets that has a good potential upside, you should look into stocks. A diversified portfolio that includes stocks, real estate, gold, silver, bond etc. is preferred to non-diversified portfolios. Please consult with a financial advisor before making any financial decisions.", "category": "IT"}, {"instruction": "Who was the first country to win the cricket world cup in their home soil", "input": "", "output": "India was the first country to win Cricket World Cup on home soil in 2011.The Indian cricket team are two times World Champions they also won the 1983 Cricket World Cup beating then world champion West Indies.", "category": "IT"}, {"instruction": "Tell me about Indiana", "input": "", "output": "Indiana is a state in the Midwest region of the United States and has the motto \"Crossroads of America\" due to the large number of interstates that pass through the state. The capitol is Indianapolis, which is home to over 800,000 people. Indiana is known for its agriculture and the popularity of basketball, particularly the Indiana University Hoosiers basketball team.", "category": "IT"}, {"instruction": "What is a yellow or red card in soccer?", "input": "A foul occurs when a player commits an offence listed in the Laws of the Game while the ball is in play. The offences that constitute a foul are listed in Law 12. Handling the ball deliberately, tripping an opponent, or pushing an opponent, are examples of \"penal fouls\", punishable by a direct free kick or penalty kick depending on where the offence occurred. Other fouls are punishable by an indirect free kick.[88]\n\nThe referee may punish a player's or substitute's misconduct by a caution (yellow card) or dismissal (red card). A second yellow card in the same game leads to a red card, which results in a dismissal. A player given a yellow card is said to have been \"booked\", the referee writing the player's name in their official notebook. If a player has been dismissed, no substitute can be brought on in their place and the player may not participate in further play. Misconduct may occur at any time, and while the offences that constitute misconduct are listed, the definitions are broad. In particular, the offence of \"unsporting behaviour\" may be used to deal with most events that violate the spirit of the game, even if they are not listed as specific offences. A referee can show a yellow or red card to a player, substitute, substituted player, and to non-players such as managers and support staff.[88][130]\n\nRather than stopping play, the referee may allow play to continue if doing so will benefit the team against which an offence has been committed. This is known as \"playing an advantage\".[131] The referee may \"call back\" play and penalise the original offence if the anticipated advantage does not ensue within \"a few seconds\". Even if an offence is not penalised due to advantage being played, the offender may still be sanctioned for misconduct at the next stoppage of play.[132]\n\nThe referee's decision in all on-pitch matters is considered final.[133] The score of a match cannot be altered after the game, even if later evidence shows that decisions (including awards/non-awards of goals) were incorrect.", "output": "In the game of soccer, whenever a player commits a foul, the referee can give a player a yellow card or a red card. A yellow card is a caution/warning. A red card is a dismissal and the player has to leave the field.", "category": "IT"}, {"instruction": "What football team did Jerome Bettis play for?", "input": "", "output": "The Steelers", "category": "IT"}, {"instruction": "What theme park in the world has the highest cumulative attendance?", "input": "Disneyland has a larger cumulative attendance than any other theme park in the world, with 757 million visits since it opened (as of December 2021).[3] In 2018, the park had approximately 18.6 million visits, making it the second most visited amusement park in the world that year, behind only Magic Kingdom, the very park it inspired.[4] According to a 2005 Disney report, 65,700 jobs are supported by the Disneyland Resort, including about 20,000 direct Disney employees and 3,800 third-party employees (independent contractors or their employees).[5] Disney announced \"Project Stardust\" in 2019, which included major structural renovations to the park to account for higher attendance numbers.[6]", "output": "Disneyland, in Anaheim, California, has the largest cumulative attendance of any theme park in the world.  As of December, 2021, Disneyland has had 757 million visits since it opened in 1955.  Attendance in 2018 was approximately 18.6 million visits, second most visited theme park in the world behind the Magic Kingdom.  It's reported that Disneyland supports 65,700 jobs, including 20,000 direct Disney employees and 3,800 third-party employees.", "category": "IT"}, {"instruction": "How many years has it been since the city of Calcutta was officially renamed Kolkata?", "input": "Kolkata also known as Calcutta (the official name until 2001) is the capital of the Indian state of West Bengal, on the eastern bank of the Hooghly River 80 km (50 mi) west of the border with Bangladesh. It is the primary business, commercial, and financial hub of Eastern India and the main port of communication for North-East India. According to the 2011 Indian census, Kolkata is the seventh-most populous city in India, with a population of 45 lakh (4.5 million) residents within the city. It is a part of Kolkata Metropolitan Area (or known as Greater Kolkata) which has a population of over 1.41 crore (14.1 million) residents making it the third-most populous metropolitan area in India. In 2021, the Kolkata metropolitan area crossed 1.5 crore (15 million) registered voters. The Port of Kolkata is India's oldest operating port and its sole major riverine port. Kolkata is regarded as the cultural capital of India. Kolkata is the second largest Bengali-speaking city after Dhaka. It has the highest number of nobel laureates among all cities in India.", "output": "It has been 22 years since Calcutta was renamed Kolkata.", "category": "IT"}, {"instruction": "Given this paragraph about the Women's Education Association, which institutions of higher learning had affiliations with the Association?", "input": "The aid of the Association was also given to the formation of a class of women for the study of advanced chemistry at the laboratory of the Girls' High School. This class was found to meet so great a want that a chemical laboratory has been fitted up in connection with the Massachusetts Institute of Technology, and furnished by money collected by the association with apparatus and instruments, such as microscopes, spectroscopes, &c. From time to time pecuniary aid has also been given to young women seeking an advanced education. But the chief work of the Association \u2014the first undertaken and still carried on under its charge- is a plan of examinations known as the Harvard Examinations for Women. These originated in a desire to raise the standard of education in the schools for girls, and are held under the personal supervision of members of the Association. Examination papers, prepared by Professors at Harvard University, are provided by the Association, and those women who successfully pass this examination receive a certificate from the university stating the fact. Branch societies have been established in New York City, Philadelphia, and Cincinnati for the same purpose.", "output": "The Massachusetts Institute of Technology and Harvard University", "category": "IT"}, {"instruction": "Is FreeBSD a Linux distribution?", "input": "", "output": "No. FreeBSD is complete operating system that descends from the original Unix system through the Berkeley Software Distribution (BSD) development-line. Linux is a family of operating system distributions packaged by third parties, using the Linux Kernel. The licensing of FreeBSD is also available under a permissive BSD license while Linux is uses a copy-left based GPL license.", "category": "IT"}, {"instruction": "Why was revenge of the jedi renamed to return of the jedi?", "input": "", "output": "George Lucas changed the title as he realized that true Jedi wouldn't seek revenge.", "category": "IT"}, {"instruction": "What is the difference between whole genome sequencing (WGS) and whole exome sequencing (WES)?", "input": "", "output": "Whole genome sequencing or WGS, is a technic to sequence the entire genome of an organism. In contrast, in whole exome sequencing (WES) we only sequence the region of the genome that codes for proteins.", "category": "IT"}, {"instruction": "Given the reference text about AC Milan, how many FIFA and UEFA trophies have they won?", "input": "Associazione Calcio Milan (Italian pronunciation: [assot\u0283at\u02c8tsjo\u02d0ne \u02c8kalt\u0283o \u02c8mi\u02d0lan]), commonly referred to as AC Milan (Italian pronunciation: [a \u02c8t\u0283i \u02c8mi\u02d0lan]) or simply Milan (Italian pronunciation: [mi\u02d0lan]), is a professional football club in Milan, Italy, founded in 1899.[5][6] The club has spent its entire history, with the exception of the 1980\u201381 and 1982\u201383 seasons, in the top flight of Italian football, known as Serie A since 1929\u201330.[5]\n\nAC Milan's 18 FIFA and UEFA trophies is the fourth highest out of any club (joint with Boca Juniors[nb 1]), and the most out of any Italian club.[7][8][9][10] Milan has won a joint record three Intercontinental Cups and one FIFA Club World Cup,[10] seven European Cup/Champions League titles (Italian record),[10] the UEFA Super Cup a joint record five times and the Cup Winners' Cup twice.[10] With 19 league titles, Milan is tied as the second most successful club in Serie A with local rivals Inter Milan (also with 19 league titles), behind Juventus (36 league titles).[11] They have also won the Coppa Italia five times, and the Supercoppa Italiana seven.[10]\n\nMilan's home games are played at San Siro, also known as the Stadio Giuseppe Meazza. The stadium, which was built by Milan's second chairman Piero Pirelli in 1926 and is shared since 1947 with city rivals Internazionale,[12] is the largest in Italian football, with a total capacity of 75,923.[13] They have a long-standing rivalry with Inter, with whom they contest the Derby della Madonnina which is one of the most followed derbies in football.[14]\n\nThe club is one of the wealthiest in Italian and world football.[15] It was a founding member of the now-defunct G-14 group of Europe's leading football clubs as well as its replacement, the European Club Association.[16]", "output": "AC Milan has won 18 FIFA and UEFA trophies, which is the fourth most out of any club.", "category": "IT"}, {"instruction": "Give me a list of things that could be found on a desk", "input": "", "output": "Plants, Phone, Computer, Speakers, Cup holders, headphones, mouse, keyboard", "category": "IT"}, {"instruction": "Given this paragraph about the Mercury Seven. Who did not survive to reach retirement and what was the cause of their death?", "input": "The Mercury Seven were the group of seven astronauts selected to fly spacecraft for Project Mercury. They are also referred to as the Original Seven and Astronaut Group 1. Their names were publicly announced by NASA on April 9, 1959; these seven original American astronauts were Scott Carpenter, Gordon Cooper, John Glenn, Gus Grissom, Wally Schirra, Alan Shepard, and Deke Slayton. The Mercury Seven created a new profession in the United States, and established the image of the American astronaut for decades to come.\n\nAll of the Mercury Seven eventually flew in space. They piloted the six spaceflights of the Mercury program that had an astronaut on board from May 1961 to May 1963, and members of the group flew on all of the NASA human spaceflight programs of the 20th century \u2013 Mercury, Gemini, Apollo, and the Space Shuttle.\n\nShepard became the first American to enter space in 1961, and later walked on the Moon on Apollo 14 in 1971. Grissom flew the first crewed Gemini mission in 1965, but died in 1967 in the Apollo 1 fire; the others all survived past retirement from service. Schirra flew Apollo 7 in 1968, the first crewed Apollo mission, in Grissom's place. Slayton, grounded with an atrial fibrillation, ultimately flew on the Apollo\u2013Soyuz Test Project in 1975. The first American in orbit in 1962, Glenn flew on the Space Shuttle Discovery in 1998 to become, at age 77, the oldest person to fly in space at the time. He was the last living member of the Mercury Seven when he died in 2016 at age 95.", "output": "Only Gus Grissom did not survive to reach retirement. All others survived past retirement from service. The cause of his death is the Apollo 1 fire.", "category": "IT"}, {"instruction": "What is a good dad joke?", "input": "", "output": "What do you call an okay factory?  A satisfactory.", "category": "IT"}, {"instruction": "Given this reference text about the Grateful Dead, tell me who their keyboard players were over the years.", "input": "The Grateful Dead was founded in the San Francisco Bay Area amid the rise of the counterculture of the 1960s.[12][13][14] The founding members were Jerry Garcia (lead guitar, vocals), Bob Weir (rhythm guitar, vocals), Ron \"Pigpen\" McKernan (keyboards, harmonica, vocals), Phil Lesh (bass, vocals), and Bill Kreutzmann (drums).[15] Members of the Grateful Dead, originally known as the Warlocks, had played together in various Bay Area ensembles, including the traditional jug band Mother McCree's Uptown Jug Champions. Lesh was the last member to join the Warlocks before they changed their name to the Grateful Dead; replacing Dana Morgan Jr., who had played bass for a few gigs. Drummer Mickey Hart and non-performing lyricist Robert Hunter joined in 1967. With the exception of McKernan, who died in 1973, and Hart, who took time off from 1971 to 1974, the core of the band stayed together for its entire 30-year history.[16] The other official members of the band are Tom Constanten (keyboards; 1968\u20131970), John Perry Barlow (non-performing lyricist; 1971\u20131995),[17] Keith Godchaux (keyboards, occasional vocals; 1971\u20131979), Donna Godchaux (vocals; 1972\u20131979), Brent Mydland (keyboards, vocals; 1979\u20131990), and Vince Welnick (keyboards, vocals; 1990\u20131995).[18] Bruce Hornsby (accordion, piano, vocals) was a touring member from 1990 to 1992, as well as a guest with the band on occasion before and after the tours.", "output": "Ron \"Pigpen\" McKernan was the original keyboard player of the Grateful Dead. Others to play keyboards for the Grateful Dead include Tom Constanten, Keith Godchaux, Brent Mydland and Vince Welnick.", "category": "IT"}, {"instruction": "Classify the cities based on whether they are located in Malawi or Norfolk Island.\nMzuzu, Blantyre, Kingston, Lilongwe", "input": "", "output": "Malawi - Blantyre, Lilongwe, Mzuzu\nNorfolk Island - Kingston", "category": "IT"}, {"instruction": "Classify each of the following as either characters from books by Anne Rice or Stephanie Meyer: Lestat de Lioncourt, Memnoch, Lasher, Armand, Yvette, Bella Swan, Edward Cullen, Jacob Black, Melanie Stryder, The Seeker", "input": "", "output": "Characters from Anne Rice books: Lestat de Lioncourt, Memnoch, Lasher, Armand, Yvette\nCharacters from Stephanie Meyer books: Bella Swan, Edward Cullen, Jacob Black, Melanie Stryder, The Seeker", "category": "IT"}, {"instruction": "Why do dogs make great pets?", "input": "", "output": "Dogs make great pets because they make us feel less alone. Dogs can be there for you when people can't and offer unconditional love, support and of course cuddles. They can also help people stay active because they do require walks.", "category": "IT"}, {"instruction": "Which is a species of fish? Cisco or Palo Alto", "input": "", "output": "Cisco", "category": "IT"}, {"instruction": "What is the difference between AWS ECS and EKS?", "input": "", "output": "ECS is a scalable container orchestration platform that allows users to run, stop, and manage containers in a cluster. EKS, on the other hand, helps teams to build Kubernetes clusters on AWS without having to install Kubernetes on EC2 compute instances manually.", "category": "IT"}, {"instruction": "Should a human be happy all the time?", "input": "", "output": "Answer 1: Happiness is not only subjective but also temporal - what brought you joy 2 years ago might be boring/unpleasant now. So, instead of optimizing for happiness at a given time, it might actually be better to realize what makes us feel down or not content and avoid them. By avoiding such circumstances/conditions, we can be content and maybe that's what need in life: not strive to be happy all the time but avoid what we truly don't like so that happiness takes care of its own.\n\nAnswer 2: Yes! Life is too short to get caught in dull moments so a human needs to optimize for maximum happiness. The definition of happiness differs and that's ok; we all live once and we should spend our time looking for new things that make us happier.\n\nAnswer 3: No. Most meaningful lessons in life are learned in situations when we're not particularly happy: Loss of a close person, financial break downs, unexpected health conditions. Getting through these hard times is actually makes a person stronger and more prepared for other calamities in life. We should not strive to be happy \"all the time\" -  instead we should take things as they come. In life, there is a need for moments of discontent as well as a need for moments of joy.", "category": "IT"}, {"instruction": "Why might YouTube employees be sensitive about guns?", "input": "Through this period, YouTube tried several new ways to generate revenue beyond advertisements. In 2013, YouTube launched a pilot program for content providers to offer premium, subscription-based channels.[61][62] This effort was discontinued in January 2018 and relaunched in June, with US$4.99 channel subscriptions.[63][64] These channel subscriptions complemented the existing Super Chat ability, launched in 2017, which allows viewers to donate between $1 and $500 to have their comment highlighted.[65] In 2014, YouTube announced a subscription service known as \"Music Key,\" which bundled ad-free streaming of music content on YouTube with the existing Google Play Music service.[66] The service continued to evolve in 2015 when YouTube announced YouTube Red, a new premium service that would offer ad-free access to all content on the platform (succeeding the Music Key service released the previous year), premium original series, and films produced by YouTube personalities, as well as background playback of content on mobile devices. YouTube also released YouTube Music, a third app oriented towards streaming and discovering the music content hosted on the YouTube platform.[67][68][69]\n\nThe company also attempted to create products appealing to specific viewers. YouTube released a mobile app known as YouTube Kids in 2015, designed to provide an experience optimized for children. It features a simplified user interface, curated selections of channels featuring age-appropriate content, and parental control features.[70] Also in 2015, YouTube launched YouTube Gaming\u2014a video gaming-oriented vertical and app for videos and live streaming, intended to compete with the Amazon.com-owned Twitch.[71]\n\nThe company was attacked on April 3, 2018, when a shooting occurred at YouTube's headquarters in San Bruno, California, which wounded four and resulted in one death (the shooter).[72]", "output": "In April 3, 2018, a shooting occurred at YouTube's headquarters in San Bruno, California, which wounded four and resulted in one death (the shooter). Also, depending on the political affiliation of the employees, they may be sensitive about topics regarding gun control and safety.", "category": "IT"}, {"instruction": "Classify each of the following colors as primary or secondary: orange, red, blue, green, purple, yellow.", "input": "", "output": "Red, yellow and blue are primary colors. Orange, green and purple are secondary colors.", "category": "IT"}, {"instruction": "How Long can a Goalkeeper Hold the Ball with his Hands?", "input": "", "output": "Since the recent changes in FIFA Football Rules, referees now have some extra mandatory instructions. They must not allow the goalkeeper to take more than four (4) steps while holding the ball. This regulation is a stipulation of FIFA Law 12 in the codified FA rulings.\n\nWhat happens if a goalie holds the ball for more than 5 or 6 seconds? It can get adjudged as time-wasting by the official. As a rule, it will result in an indirect free kick to the opponents.", "category": "IT"}, {"instruction": "With reference to given text, Please provide a list of dangers associated with Smoking", "input": "Smoking is one of the leading preventable causes of deaths globally and is the cause of over 8 million deaths annually, 1.2 million of which are non-smokers who die due to second-hand smoke.In the United States, about 500,000 deaths per year are attributed to smoking-related diseases and a recent study estimated that as much as 1/3 of China's male population will have significantly shortened life-spans due to smoking. Male and female smokers lose an average of 13.2 and 14.5 years of life, respectively. At least half of all lifelong smokers die earlier as a result of smoking.", "output": "1. Smoking is the cause of more than 8 million deaths per year out of which 1.2 million are non-smokers who simply dies because of inhaling second-hand smoke.\n2. In United states nearly 500,000 people dies annually because of smoking related diseases.\n3. A recent study indicates that close to 1/3rd of China's male population have their life-spans shortened significantly because of smoking.\n4. Among smokers males have average of 13.2 years less life span compared to non smoking males similarly females have 14.5 years less life span compared to non smoking females.\n5 At least 50% of smokers die earlier because of smoking.", "category": "IT"}, {"instruction": "Classify each of the following as inclined or flat: stairs, beach, mountain, lake, escalator, pond, ramp", "input": "", "output": "Stairs: Inclined\nBeach: Flat\nMountain: Inclined\nLake: Flat\nEscalator: Inclined\nPond: Flat\nRamp: Inclined", "category": "IT"}, {"instruction": "From the passage mention the different educational institutions which Musk attended. Display the results in comma separated format.", "input": "Musk attended Waterkloof House Preparatory School, Bryanston High School, and Pretoria Boys High School, from which he graduated.[29] Musk applied for a Canadian passport through his Canadian-born mother,[30][31] knowing that it would be easier to immigrate to the United States this way.[32] While waiting for his application to be processed, he attended the University of Pretoria for five months.[33]\n\nMusk arrived in Canada in June 1989 and lived with a second cousin in Saskatchewan for a year,[34] working odd jobs at a farm and lumber mill.[35] In 1990, he entered Queen's University in Kingston, Ontario.[36][37] Two years later, he transferred to the University of Pennsylvania (UPenn), where he completed studies for a Bachelor of Arts degree in physics and a Bachelor of Science degree in economics from the Wharton School.[38][39][40][41] Although Musk claims he earned the degrees in 1995, UPenn maintains it awarded them in 1997.[42] He reportedly hosted large, ticketed house parties to help pay for tuition, and wrote a business plan for an electronic book-scanning service similar to Google Books.[43]\n\nIn 1994, Musk held two internships in Silicon Valley: one at the energy storage startup Pinnacle Research Institute, which investigated electrolytic ultracapacitors for energy storage, and another at the Palo Alto\u2013based startup Rocket Science Games.[44][45] In 1995, he was accepted to a PhD program in materials science at Stanford University.[46][47] However, Musk decided to join the Internet boom, instead dropping out two days after being accepted and applied for a job at Netscape, to which he reportedly never received a response.[48][30]", "output": "Waterkloof House Preparatory School, Bryanston High School, Pretoria Boys High School, University of Pretoria, Queen's University, University of Pennsylvania (UPenn)", "category": "IT"}, {"instruction": "What was the home port of the Aquila?", "input": "After completing her fitting out, Aquila got underway from Bremerton, Washington, on 15 July 1982 in company with Taurus (PHM-3) and Frederick (LST-1184) and shaped a course for her home port, Key West, Florida. Frederick escorted the two guided-missile hydrofoil gunboats as far as Rodman in the Canal Zone where El Paso (LKA-117) took over. Aquila and her traveling companions transited the Panama Canal on 8 August and arrived in Key West three days later. The warship spent the remainder of 1982 conducting shakedown and other training out of her base at the Trumbo Point Annex, Naval Air Station, Key West, Florida. During the first quarter of 1983, post-shakedown repairs occupied her time. That spring, Aquila embarked upon a schedule of normal training duties out of Key West that occupied her time through the summer and into the all of 1983. From 10 to 20 October, she joined Taurus and Spartanburg County (LST-1192) for special operations in the Caribbean Sea.", "output": "The Aquila home port was Trumbo Point Annex, Naval Air Station, Key West, Florida.", "category": "IT"}, {"instruction": "What entree is associated with American Thanksgiving?", "input": "", "output": "The traditional main meal for an American Thanksgiving is a Turkey", "category": "IT"}, {"instruction": "What causes earthquakes?", "input": "", "output": "Earthquakes are caused by built up pressure between moving plates that form the earth's crust. Tectonic plates form our continents and are constantly moving under, over and along side each other. As they move they force up mountains, hills, divert rivers, streams and creeks. Earthquakes often cause major catastrophes and human suffering.", "category": "IT"}, {"instruction": "What empire was Augustus the leader of?", "input": "", "output": "Augustus was a leader of the Roman Empire", "category": "IT"}, {"instruction": "Given this paragraph, who wrote \"Greenmantle?\"", "input": "Greenmantle is the second of five novels by John Buchan featuring the character Richard Hannay. It was first published in 1916 by Hodder & Stoughton, London. It is one of two Hannay novels set during the First World War, the other being Mr Standfast (1919); Hannay's first and best-known adventure, The Thirty-Nine Steps (1915), is set in the period immediately preceding the war.", "output": "John Buchan", "category": "IT"}, {"instruction": "Where is the best place in my home to store valuable and sensitive documents?", "input": "", "output": "You should store sensitive documents in a secure location, such as a locked drawer inside a room with a lock. Depending on the nature of the documents, you might also consider storing them in a locking safe. Some safes are also waterproof and fireproof to a certain degree, so in the event of a natural disaster to your home, you would still be able to retrieve them. Examples of sensitive documents to be stored include birth certificates, wills, and deeds.", "category": "IT"}, {"instruction": "What are three ways of drying clothes.", "input": "", "output": "1. You could air dry clothes after washing 2. You could use a dryer 3. You could also have the clothes dry cleaned", "category": "IT"}, {"instruction": "As per the passage which schools of Hinduism discuss Ishvara?", "input": "Another Hindu term that is sometimes translated as deity is Ishvara, or alternatively various deities are described, state Sorajjakool et al., as \"the personifications of various aspects of one and the same Ishvara\".[76] The term Ishvara has a wide range of meanings that depend on the era and the school of Hinduism.[77][78][79] In ancient texts of Indian philosophy, Ishvara means supreme Self, Brahman (Highest Reality), ruler, king or husband depending on the context.[77] In medieval era texts, Ishvara means God, Supreme Being, personal god, or special Self depending on the school of Hinduism.[2][79][80]\n\nAmong the six systems of Hindu philosophy, Samkhya and Mimamsa do not consider the concept of Ishvara, i.e., a supreme being, relevant. Yoga, Vaisheshika, Vedanta and Nyaya schools of Hinduism discuss Ishvara, but assign different meanings.\n\nEarly Nyaya school scholars considered the hypothesis of a deity as a creator God with the power to grant blessings, boons and fruits; but these early Nyaya scholars then rejected this hypothesis, and were non-theistic or atheists.[26][81] Later scholars of Nyaya school reconsidered this question and offered counter arguments for what is Ishvara and various arguments to prove the existence of omniscient, omnipresent, omnipotent deity (God).[82]", "output": "Yoga, Vaisheshika, Vedanta and Nyaya.", "category": "IT"}, {"instruction": "What are the cutest animals on the planet?", "input": "", "output": "- baby puppies\n- small sloths\n- lemurs\n- baby chicks\n- kittens\n- bunnies\n- baby otters\n- arctic foxes", "category": "IT"}, {"instruction": "List the best toys for toddlers?", "input": "", "output": "1. Tonies Box\n2. Fisher Price Little People Sets\n3. Dress up\n4. Music, drums, keyboard, microphones etc\n5. Play food\n6. Play Dough\n7. Doctor\n8. Fishing\n9. Sandbox\n10. Slides", "category": "IT"}, {"instruction": "What is an operating model for AI?", "input": "", "output": "It refers to the processes put in place to work with AI, from use case definition, to development to deployment and operation. Ultimately the objective of an operating model for AI is to streamline the value generation process from data to business results. Developing AI applications is a highly iterative process and generally strives in an agile environment.  However, organisations operate in a wide variety of contexts and come in many different shapes and sizes, hence it makes sense that there is no universal operating model for AI that fits everywhere. Regulatory requirements, data and resource availability and many other factors will play a role in determining the right operating model. \n\nIt is important then, to have a platform that is able to scale with the organisation as more use cases and users enter the pipeline, as more models are deployed and as more of the business is enhanced by data and AI. The services that underpin the operating model need to be flexible while at the same time ensuring that security and explainability permeate every step of the process.", "category": "IT"}, {"instruction": "Who was Nikola Tesla?", "input": "", "output": "Nikola Tesla was a Serbian-American inventor known for his innovations around electricity. He discovered the rotating magnetic field.", "category": "IT"}, {"instruction": "Which programming languages did Netscape try to add to their browser in order to make it more dynamic?", "input": "The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the nascent World Wide Web.[11] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[12][13]\n\nDuring these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a scripting language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java programming language, while also hiring Brendan Eich to embed the Scheme language.[6]", "output": "The programming languages Netscape tried to add to their browser to make it more dynamic were Java and Scheme.\n\nIn 1995, Netscape pursued two routes to add dynamic behavior to their browser, Netscape Navigator:\n1. Collaborating with Sun Microsystems to embed the Java programming language\n2. Hiring Brendan Eich to embed the Scheme language", "category": "IT"}, {"instruction": "Give me a list of artists and bands associated with City Pop genre that gained popularity in 70s and 80s Japan", "input": "", "output": "1. Anri\n2. Mariya Takeuchi\n3. Miki Matsubara\n4. Hiroshi Sato\n5. Masayoshi Takanaka\n6. Yamashita Tatsuro\n7. Happy End\n8. Casiopea", "category": "IT"}, {"instruction": "What is mass spectrometry?", "input": "", "output": "Mass spectrometry (MS) is an analytical technique that is used to measure the mass-to-charge ratio of ions. The results are presented as a mass spectrum, a plot of intensity as a function of the mass-to-charge ratio. Mass spectrometry is used in many different fields and is applied to pure samples as well as complex mixtures.\n\nA mass spectrum is a type of plot of the ion signal as a function of the mass-to-charge ratio. These spectra are used to determine the elemental or isotopic signature of a sample, the masses of particles and of molecules, and to elucidate the chemical identity or structure of molecules and other chemical compounds.\n\nIn a typical MS procedure, a sample, which may be solid, liquid, or gaseous, is ionized, for example by bombarding it with a beam of electrons. This may cause some of the sample's molecules to break up into positively charged fragments or simply become positively charged without fragmenting. These ions (fragments) are then separated according to their mass-to-charge ratio, for example by accelerating them and subjecting them to an electric or magnetic field: ions of the same mass-to-charge ratio will undergo the same amount of deflection. The ions are detected by a mechanism capable of detecting charged particles, such as an electron multiplier. Results are displayed as spectra of the signal intensity of detected ions as a function of the mass-to-charge ratio. The atoms or molecules in the sample can be identified by correlating known masses (e.g. an entire molecule) to the identified masses or through a characteristic fragmentation pattern.", "category": "IT"}, {"instruction": "Given a reference text about Joseph A. Garcia, tell me what high school and college he attended.", "input": "Joseph A. Garcia (born March 21, 1957) is an American lawyer and politician. He served as the 48th Lieutenant Governor of Colorado from January 2011 to May 2016.\n\nEarly life, education and career\nJoseph A. Garcia was born on March 21, 1957, in Lafayette, Indiana. He attended Austin E. Lathrop High School in Fairbanks, Alaska from 1973 to 1974 and graduated from T.C. Williams High School in Alexandria, Virginia in 1975. He graduated from the University of Colorado Boulder in 1979 where he received a Bachelor of Science in Business. Garcia then graduated from Harvard Law School in 1983.[1]\n\nAfter law school, Garcia took a job with the firm of Holme Roberts & Owen, going on to become their first Hispanic partner. Garcia worked with the firm from 1983 to 1993. Garcia was appointed by Governor Romer as the Executive Director of the Department of Regulatory Agencies in 1993. In 1999 Garcia was appointed by the White House as the Regional Director of the Rocky Mountain States for the United States Department of Housing and Urban Development.[1]", "output": "Joseph A. Garcia attended Austin E. Lathrop High School and T.C. Williams High School. After high school, he attended the University of Colorado Boulder and Harvard Law School.", "category": "IT"}, {"instruction": "How would you categorize the following sports into two groups; football, rugby, cricket and baseball", "input": "", "output": "If I were to categorize these sports into 2 groups I would split them up into striking and invasion-based games. Football and Rugby are both invasion games, meaning two teams must attack their opposition's territory in order to score points. Baseball and cricket both involve two teams in set positions who must strike a ball in order to score points.", "category": "IT"}, {"instruction": "Make a bullet list of some different ways that a kid can make some money", "input": "", "output": "- Lemonade Stand\n- Mowing lawns\n- Garage Sale\n- Babysitting", "category": "IT"}, {"instruction": "Who won a gold medal alongside Waters in the coxed four?", "input": "A member of the Hamilton Rowing Club, Waters began rowing as a 17-year-old. In 1929 he was a member of the Hamilton four that won the national championship. In March of the following year, he participated in a trial race for selection of the New Zealand team to compete at the 1930 British Empire Games in Hamilton, Ontario, but was not initially chosen for the 12-man squad. However, he was included in the final squad selected in late June, and competed in both the men's eight and coxed four at the 1930 Empire Games. He won a gold medal in the coxed four, alongside Mick Brough, Jack Macdonald, Bert Sandos, and Arthur Eastwood (cox), and a silver medal in the eights, finishing three-quarters of a boat length behind the victorious English crew.", "output": "Mick Brough, Jack Macdonald, Bert Sandos, and Arthur Eastwood won a gold medal alongside Waters in the coxed four.", "category": "IT"}, {"instruction": "What is Hinton's citizenship?", "input": "Geoffrey Everest Hinton CC FRS FRSC[12] (born 6 December 1947) is a British-Canadian cognitive psychologist and computer scientist, most noted for his work on artificial neural networks. Since 2013, he has divided his time working for Google (Google Brain) and the University of Toronto. In 2017, he co-founded and became the Chief Scientific Advisor of the Vector Institute in Toronto.[13][14]\n\nWith David Rumelhart and Ronald J. Williams, Hinton was co-author of a highly cited paper published in 1986 that popularised the backpropagation algorithm for training multi-layer neural networks,[15] although they were not the first to propose the approach.[16] Hinton is viewed as a leading figure in the deep learning community.[17][18][19][20][21] The dramatic image-recognition milestone of the AlexNet designed in collaboration with his students Alex Krizhevsky[22] and Ilya Sutskever for the ImageNet challenge 2012[23] was a breakthrough in the field of computer vision.[24]\n\nHinton received the 2018 Turing Award, together with Yoshua Bengio and Yann LeCun, for their work on deep learning.[25] They are sometimes referred to as the \"Godfathers of AI\" and \"Godfathers of Deep Learning\",[26][27] and have continued to give public talks together.[28][29]", "output": "British and Canadian.", "category": "IT"}, {"instruction": "Name some famous songs by the Beatles", "input": "", "output": "Some songs by the Beatles are Penny Lane, Yellow Submarine, While My Guitar Gently Weeps, Let It Be and Here Comes the Sun", "category": "IT"}, {"instruction": "What kind of boat should I purchase?", "input": "", "output": "There are a large variety of options in recreation boats.  You can purchase a sailboat or a power boat, and the latter can have inboard or outboard engines while a sailboat can be single or multi-masted.  You also need to decide the length you can safely operate based on your experience, the average depth of the water where you intent to use the boat, and whether you will keep it on a lift, in the water, or on a trailer.  Finally, you need to decide on your budget for both the initial purchase as well as ongoing maintenance, which can typically cost 10-20% of the purchase price based on complexity and age.", "category": "IT"}, {"instruction": "What was Seward's Folly?", "input": "", "output": "Seward's Folly was the name given by opponents to the 1867 purchase of Alaska from Russia by the United States. Secretary of State William Seward negotiated the treaty in secrecy, and critics mocked both him and President Andrew Johnson for the purchase of a \"polar bear garden.\" However, it turned out to be a profitable investment when gold was discovered in Alaska in 1896.", "category": "IT"}, {"instruction": "What are the main components of AWS Kinesis?", "input": "", "output": "Kinesis is a distributed system that is composed of several components. The main components of Kinesis are:\n1. Streams: A stream is a group of records that are ingested and processed in real-time by Kinesis. A stream consists of one or more shards, and each shard is an ordered sequence of data records.\n2. Shards: A shard is a sequence of records in a stream. It is equivalent to a data partition. Each shard has a specific sequence of records and provides a specific read and write capacity.\n3. Producers: Producers are responsible for sending data to a Kinesis stream. Producers can be any application that can send data to an HTTP/HTTPS endpoint.\n4. Consumers: Consumers are responsible for reading and processing data from a Kinesis stream. Consumers can be any application that can read data from an HTTP/HTTPS endpoint.", "category": "IT"}, {"instruction": "Give me a list of video game systems from the past few decades", "input": "", "output": "1) Atari\n2) Nintendo\n3) Sega\n4) Sega Genesis\n5) Super Nintendo\n6) Sony Playstation\n7) Sony Playstation 2\n8) N64\n9) Neo-Geo\n10) Sega Saturn\n11) Sega Gamecube\n12) Nintendo Switch\n13) Nintendo Wii\n14) Playstation 3\n15) Playstation 4\n16) Playstation 5\n17) MSFT XBox\n18) MSFT Xbox One", "category": "IT"}, {"instruction": "Are these things heavy or light? Empty soup bowl, empty shipping container, couch, pillow, apple, pencil, mattress", "input": "", "output": "Empty soup bowl: light, empty shipping container: heavy, couch: heavy, pillow: light, apple: light, pencil: light, mattress: heavy", "category": "IT"}, {"instruction": "Classify each of the following words as either a noun or a verb", "input": "", "output": "Brian, running, chair, eating, listen, dog", "category": "IT"}, {"instruction": "What is the best place in Thailand", "input": "", "output": "Pattaya - its known for beach and Restaurants . Also, it's very well known for night clubs.\nPhuket - Island beaches and Mountains in the ocean . It's so outstanding", "category": "IT"}, {"instruction": "Provide a list of some Japanese art forms I've not heard of.", "input": "", "output": "Here is a number of Japanese art forms that you may not have heard of; Ikebana is the art of flower arranging. Kabuki is a form of traditional Japanese theatre. Origami is the art of folding paper into various shapes, such as animals. Anime is a Japanese form of comic book art. Haiku is a form of Japanese poetry.", "category": "IT"}, {"instruction": "What is combinatorial optimisation?", "input": "", "output": "Combinatorial optimisation is a field of applied mathematics, combining techniques from combinatorics, linear programming, and the theory of algorithms, to solve discrete optimisation problems. It is usually used as an alias of discrete optimisation. A combinatorial optimisation problem can generally be drawn as a triple (S, f, C), where S is a given search space, f is the objective function, which should be either maximised or minimised, and C is the set of constraints that have to be fulfilled to obtain feasible solutions. The goal is to find a globally optimal solution, meaning a solution s' that belongs to S, with either the highest or lowest objective value in the case of maximisation or minimisation, each under the restriction of constraints.", "category": "IT"}, {"instruction": "What is a Keystone?", "input": "", "output": "A keystone is the top block of an arch. It is an essential part of an arch because it keeps other stones from falling.  A keystone is shaped like a trapezoid, the widest part at the top, so it doesn't slide out of the arch.  Humans have built remarkable buildings with heavy ceilings on arches supported by a keystone.  Many architects and artisans have been known to sculpt family emblems, symbols and designs on keystones.", "category": "IT"}, {"instruction": "How best should I travel from London to Edinburgh, UK ?", "input": "", "output": "There are 3 main options for traveling between London and Edinburgh, UK. By car you will take the A1 north from London almost 7-8 hours depending on traffic. By train there is now an express train getting you from London Kings Cross to Edinburgh in under 4 hours. By plane you can fly from London City, London Gatwick or London Heathrow. The flight itself is only about 30-45mins, but with checkin and travel to either Heathrow or Gatwick the total travel time would also be close to 3-4 hours.", "category": "IT"}, {"instruction": "How can teachers address health disparities in society?", "input": "", "output": "The teacher works with children in the positive schools center and promotes positive, supportive and mindful learning communities where students and school staff can connect, develop and grow. Connect with each other in a safe and positive environment in a mindful manner. Positively Develop as students and staff (academically, professionally, socially, and emotionally). Grow as student scholars and educational leaders. Adults and students create a culture of respect and support.", "category": "IT"}, {"instruction": "What are the best woods for smoking?", "input": "", "output": "Oak is the quintessential go-to for smoking meat. It is a great place to start if you are a newbie to smoking.  It will lend a medium to a strong flavor that is seldom overpowering.\n\t- Best Meat to Smoke: Lamb, beef, brisket, and sausages\n\t  \nHickory is the most versatile choice as it can be used to smoke wood in many ways. Be careful, though, because too much hickory flavor will cause your meat to have a more bitter flavor. It has a sweet, savory, and hearty, a bit bacony.\n\t- Best Meat to Smoke: Larger cuts of ribs and pork shoulders, as well as almost all red meat and poultry.\n\t  \nMaple is one of the most subtle smoking wood, it will impart a more subtle smoke flavor.  Use maple for a sweet, light, mild smokiness.\n\t- Best Meat to Smoke: Poultry, pork, game foul\n\t  \nMesquite is a hardy wood packing intense flavor. It is recommended for grilling, or to be used in smaller quantities. It is famous for its strong, intense, and unique.\n\t- Best Meat to Smoke: Red Meat and for adding additional flavor when grilling\n\nPecan will lend a rich, sweet, nutty flavor. In fact, the wood is so sweet that you may want to use a combination of it with another harder wood to balance out the flavor.\n\t- Best Meat to Smoke: Briskets, roasts, and ribs\n\t  \nApplewood is mild and sweet, lending a mellow flavor. Apple smoke flavors take a while to permeate the meat, so anticipate several hours of smoking.\n\t- Best Meat to Smoke: Chicken, wild foul, pork\n\t  \nAlder has a very light and sweet flavor profile. It lends a delicate and sweet characteristic.\n\t- Best Meat to Smoke: Fish, like salmon and other Pacific Northwestern types.\n\t  \nCherry is mild and fruity, and when mixed with other hardwood like hickory, the two flavors compliment each other for an amazing result.\n\t- Best Meat to Smoke: Chicken, turkey, ham", "category": "IT"}, {"instruction": "Without quoting directly from the text, give me a summary of how rainbows are formed.", "input": "A rainbow is an optical phenomenon that can occur under certain meteorological conditions. It is caused by reflection, refraction and dispersion of light in water droplets resulting in an effect similar to a spectrum of light appearing in the sky. It takes the form of a multicoloured circular arc. Rainbows caused by sunlight always appear in the section of sky directly opposite the Sun.\nRainbows can be full circles. However, the observer normally sees only an arc formed by illuminated droplets above the ground,[1] and centered on a line from the Sun to the observer's eye.\nIn a primary rainbow, the arc shows red on the outer part and violet on the inner side. This rainbow is caused by light being refracted when entering a droplet of water, then reflected inside on the back of the droplet and refracted again when leaving it.\nIn a double rainbow, a second arc is seen outside the primary arc, and has the order of its colours reversed, with red on the inner side of the arc. This is caused by the light being reflected twice on the inside of the droplet before leaving it.", "output": "Rainbows are formed when light shines through water droplets, creating an optical phenomenon. The light is bent and reflected, creating a multicolored arc. Rainbows created by sunlight can be found in the sky, opposite the sun. Rainbows are usually observed as an arc, but can appear as full circles. A double rainbow appears when the light shining through each water droplet is reflected twice, creating a second arc, with the colours appearing in reverse order. The colors of the rainbow include; red, orange, yellow, green, blue, and violet. The colors appear in order of their wavelength, from longest to shortest.", "category": "IT"}, {"instruction": "Let\u2019s solve the following math problem. Each rabbit has 4 feets and each duck has 2 feets. If there are in total 25 heads and 88 feets, how many rabbits and how many ducks are there?", "input": "", "output": "We can use equations to solve this problem. Let the number of ducks be X and the number of rabbits be Y. We have \nX+Y = 25 (1) \n2X + 4Y = 88 (2). \nFrom the first equation, we know that X = 25-Y and we can substitute this into the second equation (2), and we get\n2(25-Y) + 4Y = 88\nWhich can be simplified to 50 + 2Y = 88 and we have Y = 19.\nWe substitute the value into (1), we will then get X = 6. \nThere are 6 ducks and 19 rabbits!", "category": "IT"}, {"instruction": "How many people live in the city of Oakland in 2022?", "input": "Oakland population in 2022 is estimated to be 439,483", "output": "About 450,000 people live in Oakland, Ca during the last census", "category": "IT"}, {"instruction": "How do I see how large a dataset is in Spark?", "input": "", "output": "You can find the number of records in a DataFrame or RDD using the `count()` method. If you want to see how large it is in terms of bytes, you can find this information on the Spark UI.", "category": "IT"}, {"instruction": "What is Type 2 Diabetes?", "input": "Type 2 diabetes, formerly known as adult-onset diabetes, is a form of diabetes mellitus that is characterized by high blood sugar, insulin resistance, and relative lack of insulin.", "output": "Type 2 diabetes, formerly known as adult-onset diabetes, is a form of diabetes mellitus that is characterized by high blood sugar, insulin resistance, and relative lack of insulin. Common symptoms include increased thirst, frequent urination, and unexplained weight loss.  Symptoms may also include increased hunger, feeling tired, and sores (wounds) that do not heal.  Often symptoms come on slowly. Long-term complications from high blood sugar include heart disease, strokes, diabetic retinopathy which can result in blindness, kidney failure, and poor blood flow in the limbs which may lead to amputations. The sudden onset of hyperosmolar hyperglycemic state may occur; however, ketoacidosis is uncommon.", "category": "IT"}, {"instruction": "Why were the original Old English Bible translations created?", "input": "The Old English Bible translations are the partial translations of the Bible prepared in medieval England into the Old English language. The translations are from Latin texts, not the original languages.\n\nMany of these translations were in fact Bible glosses, prepared to assist clerics whose grasp of Latin was imperfect and circulated in connection with the Vulgate Latin Bible that was standard in Western Christianity at the time. Old English was one of very few early medieval vernacular languages the Bible was translated into, and featured a number of incomplete Bible translations, some of which were meant to be circulated, like the Paris Psalter or \u00c6lfric's Hexateuch.", "output": "The Old English Bible translations were created to assist clerics who didn't now much Latin.", "category": "IT"}, {"instruction": "What is an index fund?", "input": "", "output": "An index fund is a basket of individual stocks that is designed to match the performance of specific group of stocks. Index funds allow investors to avoid investing in an individual stock and distribute the investment risk across a broader set of companies.", "category": "IT"}, {"instruction": "How Is Linux Licensed?", "input": "", "output": "Linus has placed the Linux kernel under the GNU General Public License, which basically means that you may freely copy, change, and distribute it, but you may not impose any restrictions on further distribution, and you must make the source code available.\n\nThis is not the same as Public Domain. See the Copyright FAQ, ftp://rtfm.mit.edu/pub/usenet/news.answers/law/copyright, for details.\n\nFull details are in the file COPYING in the Linux kernel sources (probably in /usr/src/linux on your system). There is a FAQ for the GPL at: http://www.gnu.org/copyleft/gpl-faq.html.\n\nThe licenses of the utilities and programs which come with the installations vary. Much of the code is from the GNU Project at the Free Software Foundation, and is also under the GPL. Some other major programs often included in Linux distributions are under a BSD license and other similar licenses.", "category": "IT"}, {"instruction": "How to be rich?", "input": "", "output": "While many people aspire to become rich, the reality is that it's an elusive dream for most of all, as less than 1% of the population ever achieve true wealth. It's important to acknowledge that not everyone can become rich, and that financial success is not the only measure of a fulfilling life. However, having a job that can sustain your daily life and your family is a good starting point. From there, you can think about ways to promote yourself and increase your income. It's also important to remember that richness is not just about money; emotional wealth, such as living a happy and fulfilling life and having no regrets, is also a form of richness.", "category": "IT"}, {"instruction": "Who is the current manager of Arsenal Football Club?", "input": "", "output": "The current manager of Arsenal Football Club is Mikel Arteta", "category": "IT"}, {"instruction": "Given this paragraph about Jack Kerouac, tell me where he was raised, what was his most famous book, when was that book published, and which movement was he a part of?", "input": "Of French-Canadian ancestry,[5][6] Kerouac was raised in a French-speaking home in Lowell, Massachusetts. He \"learned English at age six and spoke with a marked accent into his late teens.\"[7] During World War II, he served in the United States Merchant Marine; he completed his first novel at the time, which was published more than 40 years after his death. His first published book was The Town and the City (1950), and he achieved widespread fame and notoriety with his second, On the Road, in 1957. It made him a beat icon, and he went on to publish 12 more novels and numerous poetry volumes.\n\nKerouac is recognized for his style of spontaneous prose. Thematically, his work covers topics such as his Catholic spirituality, jazz, travel, promiscuity, life in New York City, Buddhism, drugs, and poverty. He became an underground celebrity and, with other Beats, a progenitor of the hippie movement, although he remained antagonistic toward some of its politically radical elements.[8] He has a lasting legacy, greatly influencing many of the cultural icons of the 1960s, including Bob Dylan, the Beatles, Jerry Garcia and the Doors.\n\nIn 1969, at the age of 47, Kerouac died from an abdominal hemorrhage caused by a lifetime of heavy drinking. Since then, his literary prestige has grown, and several previously unseen works have been published.", "output": "Jack Kerouac raised in Lowell, Massachusetts. He most famous book, On the Road, was published in 1957. He was a member of the Beats.", "category": "IT"}, {"instruction": "Why do Jewish holidays begin at sunset the night before?", "input": "", "output": "In many modern cultures and calendars, days begin in the morning and end at night.  But what if the opposite were true?   In the opening lines of the Creation story in the book of Genesis, the foundational story for all Abrahamic cultures, we learn that all the world was darkness and void.  (Darkness came first.) And then God said \"Let there be light.\"  (Light came second.)  \"And there was evening, and there was morning\u2014the first day.\" \n\nThis last sentence is critical. The first day consists of evening followed by morning. The Jewish calendar abides by this tradition.  Its days are not morning to morning. Its days are night to night (as marked by sundown).  \n\nAs an example, the Jewish sabbath (Shabbat) is on the 7th day of the week. Shabbat = Shevat in Hebrew, which literally translates to the number seven.  The seventh day of the  week is is Saturday. However, Shabbat doesn't span Saturday morning to Sunday morning. It spans Friday night to Saturday night.  Many observant Jews will welcome the Shabbat with a family meal, candles, and prayer on Friday nights.", "category": "IT"}, {"instruction": "Who is Taehoon Oh?", "input": "", "output": "Taehoon Oh is a computer graphic specialist, game designer and developer. He is a co-founder and COO at Studio Roqovan, formerly known as Reload Studios. He was a lead artist and was one of the pioneer developers of the Call of Duty game franchise. He is also one of the co-founders of the non-gaming virtual reality subdivision of Studio Roqovan called Rascali, launched in September 2015", "category": "IT"}, {"instruction": "Based on the given text, List some aspects of the pearl.", "input": "A pearl is a hard, glistening object produced within the soft tissue (specifically the mantle) of a living shelled mollusk or another animal, such as fossil conulariids. Just like the shell of a mollusk, a pearl is composed of calcium carbonate (mainly aragonite or a mixture of aragonite and calcite)[3] in minute crystalline form, which has deposited in concentric layers. The ideal pearl is perfectly round and smooth, but many other shapes, known as baroque pearls, can occur. The finest quality of natural pearls have been highly valued as gemstones and objects of beauty for many centuries. Because of this, pearl has become a metaphor for something rare, fine, admirable and valuable.", "output": "1.\tPearl is a sparkling and hard object which is produced inside mollusk shell or other shells.\n2.\tJust like the shells pearls are also composed of calcium carbonate.\n3.\tThe Ideal pearl is perfectly round and smooth, but it can come in different shapes like baroque pearls.\n4.\tThe best quality natural pearls are valued as gemstones.\n5.\tSince pearls are fine, rare and valuable it has become a metaphor.", "category": "IT"}, {"instruction": "Name some titles from the Goosebumps series.", "input": "", "output": "Welcome to Dead House, Monster Blood, Say Cheese and Die!, The Cuckoo Clock of Doom, Revenge of the Lawn Gnomes, The Horror at Camp Jellyjam", "category": "IT"}, {"instruction": "What is the best kind of bread?", "input": "", "output": "Sourdough is the best type of bread because it is the most multi-faceted bread. You can have it as grilled cheese, with eggs and avocado for breakfast, even as a bowl for artichoke dip. You can also use old sourdough as croutons, or use the leftover discard to make waffles or crackers. With sourdough dough you can make focaccia, sandwich bread, and pizza! Sourdough also doesn't require much ingredients, you only need flour, salt, and water.", "category": "IT"}, {"instruction": "What were the main results of applying statistical analysis to the English language?", "input": "Information theory's fundamental contribution to natural language processing and computational linguistics was further established in 1951, in his article \"Prediction and Entropy of Printed English\", showing upper and lower bounds of entropy on the statistics of English \u2013 giving a statistical foundation to language analysis. In addition, he proved that treating whitespace as the 27th letter of the alphabet actually lowers uncertainty in written language, providing a clear quantifiable link between cultural practice and probabilistic cognition.", "output": "The main results of applying statistical analysis to the English language were establishing upper and lower bounds of entropy for it and that treating whitespace as a 27th letter of the alphabet lowers uncertainty.", "category": "IT"}, {"instruction": "Based on the provided paragraph give a bullet list of the names of the countries (regions) which took part in WWI and their reasons?", "input": "World War I or the First World War (28 July 1914 \u2013 11 November 1918), often abbreviated as WWI, was one of the deadliest global conflicts in history. The first decade of the 20th century saw increasing diplomatic tension between the European great powers. This reached breaking point on 28 June 1914, when a Bosnian Serb named Gavrilo Princip assassinated Archduke Franz Ferdinand, heir to the Austro-Hungarian throne. Austria-Hungary held Serbia responsible, and declared war on 28 July. Russia came to Serbia's defense, and by 4 August, defensive alliances had drawn in Germany, France, and Britain. German strategy in 1914 was to first defeat France, then attack Russia. However, this failed, and by the end of 1914, the Western Front consisted of a continuous line of trenches stretching from the English Channel to Switzerland. The Eastern Front was more fluid, but neither side could gain a decisive advantage, despite a series of costly offensives. Attempts by both sides to bypass the stalemate caused fighting to expand into the Middle East, the Alps, the Balkans, and overseas colonies, bringing Bulgaria, Romania, Greece, and others into the war.", "output": "The countries and regions that took part in World War I (WWI) and their reasons are as follows:\n\n- Austria-Hungary: because their heir to the Austro-Hungarian throne, Archduke Franz Ferdinand, was assassinated by a Bosnian Serb named Gavrilo Princip.\n \n- Serbia: because Austria-Hungary declared war against them.\n\n- Russia: because they wanted to defend Serbia.\n\n- Germany, France, and Britain: because they were allies with the countries already engaging in the war.\n\n- Middle East, the Alps, the Balkans, and overseas colonies, bringing Bulgaria, Romania, Greece, and others: because the Eastern Front of the war was more fluid, but neither side could gain a decisive advantage. Both sides had attempts to overcome the stalemate leading to the war expanding into these regions and countries.", "category": "IT"}, {"instruction": "Create a bulleted list of Hawking's accomplishments based on this passage.", "input": "Hawking achieved commercial success with several works of popular science in which he discussed his theories and cosmology in general. His book A Brief History of Time appeared on the Sunday Times bestseller list for a record-breaking 237 weeks. Hawking was a Fellow of the Royal Society, a lifetime member of the Pontifical Academy of Sciences, and a recipient of the Presidential Medal of Freedom, the highest civilian award in the United States. In 2002, Hawking was ranked number 25 in the BBC's poll of the 100 Greatest Britons. He died in 2018 at the age of 76, after living with motor neurone disease for more than 50 years.\nhttps://en.wikipedia.org/wiki/Stephen_Hawking", "output": "-His book was a bestseller for 237 weeks, which was a record\n-He was a fellow of the Royal Society\n-He was a Pontifical Academy of Sciences lifetime member\n-He received the Presidential Medal of Freedom\n-He was 25 on the 100 Greatest Britons list put out by the BBC", "category": "IT"}, {"instruction": "What is the Family of the orchid Bulbophyllum concatenatum?", "input": "Bulbophyllum concatenatum is a species of orchid in the genus Bulbophyllum. \n\nKingdom: \tPlantae\nClade: \tTracheophytes\nClade: \tAngiosperms\nClade: \tMonocots\nOrder: \tAsparagales\nFamily: \tOrchidaceae\nSubfamily: \tEpidendroideae\nTribe: \tDendrobieae\nGenus: \tBulbophyllum\nSpecies: \tB. concatenatum", "output": "Orchidaceae", "category": "IT"}, {"instruction": "Who is the first African-American to perform at the Metropolitan Opera?", "input": "", "output": "Marian Anderson was the first African-American to perform at the Metropolitan Opera.", "category": "IT"}, {"instruction": "What is a personality test?", "input": "The origins of personality assessment date back to the 18th and 19th centuries, when personality was assessed through phrenology, the measurement of bumps on the human skull, and physiognomy, which assessed personality based on a person's outer appearances.[18] Sir Francis Galton took another approach to assessing personality late in the 19th century. Based on the lexical hypothesis, Galton estimated the number of adjectives that described personality in the English dictionary.[19] Galton's list was eventually refined by Louis Leon Thurstone to 60 words that were commonly used for describing personality at the time.[19] Through factor analyzing responses from 1300 participants, Thurstone was able to reduce this severely restricted pool of 60 adjectives into seven common factors.[20][19] This procedure of factor analyzing common adjectives was later utilized by Raymond Cattell (7th most highly cited psychologist of the 20th Century\u2014based on the peer-reviewed journal literature),[21] who subsequently utilized a data set of over 4000 affect terms from the English dictionary that eventually resulted in construction of the Sixteen Personality Factor Questionnaire (16PF) which also measured up to eight second-stratum personality factors.[22] Of the many introspective (i.e., subjective) self-report instruments constructed to measure the putative Big Five personality dimensions, perhaps the most popular has been the Revised NEO Personality Inventory (NEO-PI-R)[19] However, the psychometric properties of the NEO-PI-R (including its factor analytic/construct validity) has been severely criticized.", "output": "Personality test is a test of measuring human personality constructs. Its origin can be dated back to 18th century. There are many different types of personality assessment measures.  These tests are designed to draw knowledge about an individual's interest, interactive style and many other things.", "category": "IT"}, {"instruction": "Write a story about a man who finds a magic lamp that has a genie inside. The genie should grant him wishes and the story should conclude with a tragic ending.", "input": "", "output": "One day while Bill was walking to work he noticed something shinny in the bushes. He walked over to see what it was, and was surprised to discover it was an old lamp. He took the lamp home and cleaned it. While he was cleaning the lamp, a genie popped out and said he'd grant Bill three wishes. The first thing he wished for was all the money in the world. The genie granted this wish but Bill's disappointment there was nothing to buy with all of this money. When Bill asked the genie what happened and why there was nothing to purchase, the genie explained that people need money to create the products. Since Bill had all the money in the world, nobody had the capital needed create the things he wanted.", "category": "IT"}, {"instruction": "Give me a bulleted list of cricketers by highest number of international centuries scored", "input": "", "output": "Sachin Tendulkar - 100\nVirat Kohli - 75\nRicky Ponting - 71\nKumar Sangakkara - 63\nJacques Kallis - 62\nHashim Amla - 55\nMahela Jayawardene - 54\nBrian Lara - 53\nRahul Dravid - 48\nAB de Villiers - 47", "category": "IT"}, {"instruction": "Provide a bullet point list of all primary matter phase transitions, with the name of the process following by the matter states involved  Use the format: {process name}: {initial state} -> {final state}", "input": "", "output": "- melting: solid -> liquid\n- sublimation: solid -> gas\n- freezing: liquid -> solid\n- vaporization: liquid -> gas\n- ionization: gas -> plasma\n- condensation: gas -> liquid\n- deposition: gas -> solid\n- deionization: plasma -> gas", "category": "IT"}, {"instruction": "From the passage provided, extract the date of birth of Gandhi", "input": "Mohandas Karamchand Gandhi[41] was born on 2 October 1869[42] into a Gujarati Hindu Modh Bania family[43][44] in Porbandar (also known as Sudamapuri), a coastal town on the Kathiawar Peninsula and then part of the small princely state of Porbandar in the Kathiawar Agency of the British Raj. His father, Karamchand Uttamchand Gandhi (1822\u20131885), served as the dewan (chief minister) of Porbandar state.[45][5] His family originated from the then village of Kutiana in what was then Junagadh State.[46]", "output": "Gandhi was born on 2 October 1869", "category": "IT"}, {"instruction": "What is the only established city of the Dothraki people?", "input": "", "output": "Vaes Dothrak is the only permanent settlement of the Dothraki people. It is located northeast of the Dothraki Sea.", "category": "IT"}, {"instruction": "Classify each of the following as either a Sega or Nintendo game: Super Mario Bros, Sonic the Hedgehog, Altered Beast, Road Rash, Legend of Zelda, Ecco the Dolphin, ToeJam & Earl, Metroid, Chrono Trigger, Donkey Kong Country", "input": "", "output": "Nintendo: Super Mario Bros, Legend of Zelda, Metroid, Chrono Trigger, Donkey Kong Country\nSega: Sonic the Hedgehog, Altered Beast, Road Rash, Ecco the Dolphin, ToeJam & Earl", "category": "IT"}, {"instruction": "What stroller should I buy for my newborn baby?", "input": "", "output": "The stroller that's the best fit for you depends on what characteristics you value. Example characteristics can be: affordability, ease of pushing and steering, ease of folding, ability to grow with your family, aesthetics, weight, and availability of high-end features like a bassinet attachment or large storage basket.\n\nIf you care about affordability, ease of folding, and ease of pushing and steering, the Baby Jogger City Mini GT2 stroller is a great option. If you care about the ability of the stroller to growth with your family, ease of pushing and steering, and high-end features, the Uppababy Vista V2 stroller is another popular option. If you have twins, the Bugaboo Donkey 5 stroller could be a great fit with its side-by-side double configuration.", "category": "IT"}, {"instruction": "Based on the following paragraph, list the weather conditions associated with summer around the world.", "input": "Summer is traditionally associated with hot or warm weather. In Mediterranean climates, it is also associated with dry weather, while in other places (particularly in Eastern Asia because of the monsoon) it is associated with rainy weather. The wet season is the main period of vegetation growth within the savanna climate regime. Where the wet season is associated with a seasonal shift in the prevailing winds, it is known as a monsoon.\nIn the northern Atlantic Ocean, a distinct tropical cyclone season occurs from 1 June to 30 November. The statistical peak of the Atlantic hurricane season is 10 September. The Northeast Pacific Ocean has a broader period of activity, but in a similar timeframe to the Atlantic. The Northwest Pacific sees tropical cyclones year-round, with a minimum in February and March and a peak in early September. In the North Indian basin, storms are most common from April to December, with peaks in May and November. In the Southern Hemisphere, the tropical cyclone season runs from the start of November until the end of April with peaks in mid-February to early March.\nThunderstorm season in the United States and Canada runs in the spring through summer but sometimes can run as late as October or even November in the fall. These storms can produce hail, strong winds and tornadoes, usually during the afternoon and evening.", "output": "1. Summer is traditionally associated with hot or warm weather. \n2. In Mediterranean climates, it is also associated with dry weather. \n3. In Eastern Asia because of the monsoon, it is associated with rainy weather.", "category": "IT"}, {"instruction": "Provide a 10-step flow for a heterosexual couple's non-religious wedding ceremony.", "input": "", "output": "1) Bride walks down the aisle\n2) Officiant welcomes everyone\n3) Officiant thanks the bride and groom's parents and all attendees for being there\n4) Officiant recognizes family members who have passed away or could not attend\n5) Officiant shares a quick history and their experience with the bride and groom\n6) Family member or friend shares a non-religious reading, such as a poem or excerpt from a novel\n7) Bride and groom exchange vows\n8) Bride and groom exchange rings\n9) Officiant introduces the bride and groom as husband and wife (\"you may kiss the bride!\")\n10) Bride and groom exit, walking back down the aisle, followed by bridal party", "category": "IT"}, {"instruction": "Tell me whether these are shoes or clothing brands: Nike, Tommy Hilfiger, Adidas, Levi's, Reebok, Puma, Wrangler.", "input": "", "output": "Nike is a shoe brand.\nTommy Hilfiger is a clothing brand.\nAdidas is a shoe brand,\nLevi's is a clothing brand.\nReebok is a shoe brand.\nPuma is a shoe brand.\nWrangler is a clothing brand.", "category": "IT"}, {"instruction": "The Death of Socrates was painted by whom?", "input": "", "output": "Jacques Louis David", "category": "IT"}, {"instruction": "Why did Georges think that Helene redirected her affections towards Walter Rogers?", "input": "Papa Chibou (Paul Muni), the elderly caretaker of Mus\u00e9e Pratouchy, a Parisian wax museum, feels a strong kinship with the figures, particularly with that of Napoleon. He spots at the waxworks a romantic young couple, Georges (Russell Gleason), a lawyer, and Helene (Marguerite Churchill), the daughter of a stern judge (Lester Lonergan) who disapproves of his daughter's choice and forbids her to see Georges. Papa Chibou suggests to them that they can still stay in touch, without disobeying her father's directive not to speak with each other, by placing secret personal messages in the pockets of Napoleon's uniform. However, a missing letter and confusion in communication causes Georges to arrive at the mistaken conclusion that Helene has redirected her affections towards a foolish young man (Walter Rogers), who is unworthy of her and excessively preoccupied with his stylish personal appearance and elegant clothing.", "output": "A missing letter and confusion in communication caused Georges to arrive at the mistaken conclusion that Helene has redirected her affections towards Walter Rogers (a foolish young man), who is unworthy of her and excessively preoccupied with his stylish personal appearance and elegant clothing.", "category": "IT"}, {"instruction": "What are fast recipes to make for dinner?", "input": "", "output": "Fast recipes for dinner include:\n1. Tacos - corn tortillas, ground beef, diced tomatoes, onions and shredded cheese\n2. Stir fry - cook rice or noodle with vegetables in a wok and use some teriyaki sauce\n3. Breakfast for dinner - eggs are quick to cook and make nutritious  dinner meals as well", "category": "IT"}, {"instruction": "Write a short blog post about why you have chosen to delete your instagram account and why you think that instagram has an negative impact on society.", "input": "", "output": "Hi friends, long time no talk! Today, I want to tell you all about why I decided to delete my instagram account. This is a decision I had been thinking about for a long time, and ultimately I decided it just made sense to get rid of the account. However, I didn't want to do this without sharing with you all why I made this decision, because I think it is important to explain. I've had an instagram account for years, but often felt as though I would get sucked into a scroll spiral (we've all been there, let's be real) where I would just sit on my phone for hours. I had already put in place screen time limits, but I felt like I wasn't really getting a lot out of the app. However, what ultimately made me decide to go full send and delete my account was reading about how social media causes low self esteem, and how it could be causing many of the mental health issues we are seeing with young people right now. After reading about this, I decided enough was enough, and I finally deleted my account. I would encourage you all to do the same - don't worry, I'm not giving up this blog, so you'll still be able to check in on what I'm up to. Let me know in the comments what you guys think, and talk next week!", "category": "IT"}, {"instruction": "What is the capital of Maine?", "input": "", "output": "Augusta is the capital of Maine", "category": "IT"}, {"instruction": "Given a reference text about the 2008 Pittsburgh Pirates season, what was their record for the season?", "input": "The 2008 Pittsburgh Pirates season was the 127th season of the franchise; the 122nd in the National League. This was their eighth season at PNC Park. It was the first under new president Frank Coonelly, general manager Neal Huntington, and manager John Russell. Unable to improve on their 68\u201394, last place finish during the 2007 season, the Pirates had not had a winning record or made it to the playoffs since 1992, and finished 67\u201395 for their 16th straight losing season. The season was the final of play-by-play announcer Lanny Frattare, whose 33-year tenure as Pirates' broadcaster was the longest in franchise history.[2][3]", "output": "The 2008 Pittsburgh Pirates finished the season with a record of 67-95.", "category": "IT"}, {"instruction": "Name a battlefield surgeon", "input": "Princess Vera Ignatievna Gedroits was a Russian doctor of medicine and author. She was the first woman military surgeon in Russia, the first woman professor of surgery, and the first woman to serve as a physician to the Imperial Court of Russia. Following her involvement in a student movement, Gedroits was unable to complete her studies in Russia, and despite being openly lesbian, entered into a marriage of convenience, which allowed her to obtain a passport in another name and leave the country. In Switzerland, she enrolled in the medical courses of C\u00e9sar Roux and graduated in 1898, working as Roux\u2019s assistant, but returned to Russia because of illnesses in her family. As a young physician, Gedroits was concerned at the low standards of hygiene, nutrition and sanitation, and made recommendations to improve conditions. In the Russo-Japanese War, she performed abdominal surgeries against established policy, leading to a change in the way battlefield medicine was performed. Much decorated for her war service, she served as physician to the royal court until the outbreak of World War I, training the Tsarina Alexandra and her daughters as nurses. At the beginning of the Revolution, Gedroits returned to the battle front. Wounded, she was evacuated to Kiev, where she resumed her work as a physician and academic. In 1921, she was hired to teach pediatric surgery at the Kiev Medical Institute and within two years was appointed a professor of medicine. Soviet purges at that time removed her from office in 1930 and denied her a pension. Gedroits turned her attention to writing autobiographical novels until her death from uterine cancer in 1932.", "output": "Vera Gedroits was a ground-breaking physician and surgeon who improved surgical practices on the battlefield and became the first woman to serve as a physician to the Imperial Court of Russia.", "category": "IT"}, {"instruction": "What's the best baseball team?", "input": "", "output": "Denoting one baseball team as \"best\" is a very difficult. Many factors may be involved when determining the best baseball team. For instance, are we looking at current season performance? History of championships in the past? Number of fans? Best statistics? Most notable? Please help me by being more specific about what \"best\" means to you.", "category": "IT"}, {"instruction": "What are Arabic numerals?", "input": "", "output": "Arabic numerals refers to the ten digits commonly used today to represent numbers.  The digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.  They were adopted by European mathematicians around the 10th century C.E. from numerals used by Arabic speakers in North Africa.  The numerals are used in a positional or place-value notation which makes complex calculations by humans easier.", "category": "IT"}, {"instruction": "Given a reference text about a singer, tell me when they debuted, what their first release was, and what their most popular song is.", "input": "Lee Ji-eun (Korean: \uc774\uc9c0\uc740; born May 16, 1993[1]), also known by her stage name IU (Korean: \uc544\uc774\uc720), is a South Korean singer-songwriter, record producer, and actress. She signed with LOEN Entertainment (now Kakao Entertainment) in 2007 as a trainee and debuted as a singer at the age of fifteen with her first extended play (EP) Lost and Found (2008). Although her follow-up albums, Growing Up and IU...IM, brought mainstream success, it was only after the release of \"Good Day\" (Korean: \uc88b\uc740 \ub0a0), the lead single from her 2010 album Real, that she achieved national stardom. \"Good Day\" went on to spend five consecutive weeks at the top of South Korea's Gaon Digital Chart, and in 2019, it was ranked number one on Billboard's \"100 Greatest K-Pop Songs of the 2010s\" list.[2]\n\nLost and Found is the debut extended play (EP) by South Korean singer-songwriter IU. It was released by LOEN Entertainment on September 23, 2008. IU collaborated with lyricist and producer Choi Gap-won, who had previously produced songs including \"Amnesia\" by Gummy, \"Incurable Disease\" by Wheesung, and \"Toc Toc Toc\" by Lee Hyori. Lee Jong-hoon of Soul-Shop and the singer Mario additionally worked on the title song, \"Lost Child\".[1]", "output": "The singer Lee Ji-eun, or better known as IU, debuted on September 23, 2008 with her first extended play \"Lost and Found\". Her most popular song is \"Good Day\" from her 2010 album \"Real\" which was ranked number one on Billboard's \"100 Greatest K-Pop Songs of the 2010s\" list.", "category": "IT"}, {"instruction": "Give me a list of Tour de France general Classification winners who have won more than 4 times.", "input": "", "output": "Jacques Anquetil, Eddie Merckx, Bernard Hinault, Miguel Indurain and Lance Armstrong. Lance Armstrong has won seven times but had those victories rescinded after admitting to using performance enhancing drugs.", "category": "IT"}, {"instruction": "Which is the capital of Union Territory of Ladakh ?", "input": "The Leh\u2013Manali Highway is a 428 km (266 mi) long highway in northernmost India connecting Leh, the capital of the Union Territory of Ladakh, to Manali in the state of Himachal Pradesh.", "output": "Leh is the capital of the Union Territory of Ladakh.", "category": "IT"}, {"instruction": "Based on this passage about UCLA, tell me the difference between North Campus and South Campus and which residential areas border the campus.", "input": "The new UCLA campus in 1929 had four buildings: Royce Hall and Haines Hall on the north, and Powell Library and Kinsey Hall (now called Renee And David Kaplan Hall) on the south. The Janss Steps were the original 87-step entrance to the university that lead to the quad of these four buildings. Today, the campus includes 163 buildings across 419 acres (1.7 km2) in the western part of Los Angeles, north of the Westwood shopping district and just south of Sunset Boulevard. In terms of acreage, it is the second-smallest of the ten UC campuses.[10] The campus is approximately 1 mile east of I-405 (the San Diego Freeway).[54]\n\nThe campus is in the residential area of Westwood and bordered by Bel-Air to the north, Beverly Hills to the east, and Brentwood to the west. The campus is informally divided into North Campus and South Campus, which are both on the eastern half of the university's land. North Campus is the original campus core; its buildings are more traditional in appearance and clad in imported Italian brick. North Campus is home to the arts, humanities, social sciences, law, history, and business programs and is centered around ficus and sycamore-lined Dickson Court, also known as the \"Sunken Garden\". South Campus is home to the physical sciences, life sciences, engineering, mathematical sciences, health-related fields, and the UCLA Medical Center. The campus includes sculpture gardens, fountains, museums, and a mix of architectural styles.\n\nAckerman Union, the John Wooden Center, the Arthur Ashe Health and Wellness Center, the Student Activities Center, Kerckhoff Hall, the J.D. Morgan Center, the James West Alumni Center, and Pauley Pavilion stand at the center of the campus, bordering Wilson Plaza. The campus is bisected by Bruin Walk, a heavily traveled pathway from the residential hill to the main campus. At the intersection of Bruin Walk and Westwood Plaza is Bruin Plaza, featuring an outdoor performing arts stage and a bronze statue of the Bruin bear.\n\nDuring the 2028 Summer Olympics, wrestling and judo will be held at Pauley Pavilion. The campus will also be the location of the Olympic Village for the Olympic and Paralympic Games.[55]\n\nIn September 2022 UCLA purchased the Palos Verdes (PV) campus of Marymount California University, which had closed its doors that August, after fifty years of classes;[56][57] the PV campus joins two other locations, in downtown LA, and in Culver City as satellites of the Westwood campus.[57] A faculty and administration task force will review possible applications of the PV campus for UCLA.[56] The Channel Islands will again be visible from a UCLA campus.", "output": "At UCLA, North Campus hosts the arts, humanities, social sciences, law, history, and business programs, while South Campus is home to the physical sciences, life sciences, engineering, mathematical sciences, health-related fields, and the UCLA Medical Center. The UCLA Campus is bordered by Bel Air, Brentwood, and Beverly Hills.", "category": "IT"}, {"instruction": "Should superheroes be allowed to break the law?", "input": "", "output": "In Ralph Waldo Emerson\u2019s essay \u201cThe Conservative,\u201d he claims that the law doesn\u2019t affect heroes because they will do what is right no matter what. While the term hero is subjective, as not all people who break the laws are heroes, Emerson is correct to argue that to be truly just and great sometimes requires breaking the law.\n\tA common example of greatness is superheroes; their extraordinary physical abilities put to use to save the world from evil. However, their greatness sometimes conflicts with the law. For example, in Spiderman, Peter Parker choses to keep his identity a secret, to protect himself not only from paparatzi like J. Jonah Jameson (JK Simmons), but also from police. Though Spiderman is a hero at heart, he commits murder, puts people in harms way, and destroys buildings and public spaces. However, because he is a hero, he is able to \u201coutshine\u201d the law in order to continue to help and save the people of New York.\n\tAnother example of sacraficial heroism is playing defensive soccer, only is this case the laws are the rules and breaking them is just a foul. A good defender knows that when their defense is outnumbered by the opposing attackers, their defense is out of position, or their goalie is out of position, you have to commit a foul. Though the foul gives the other team an opportunity to set up a potential scoring play, the sacrifice must be made in order for the defense to recollect and reorganize, allowing them to be better prepared for the attack. Though this form of heroism isn\u2019t as grand as Spiderman, breaking the \u201claws\u201d of the game is still very important and generally considered to be the smarter play.\n\tThough Emerson\u2019s point is generally true, there are some faults, the most important one being that not everyone who breaks the law is considered to be a hero to everyone. Though this struggle can also be seen is Spiderman, a much better example is our former president, Donald Trump. Former President Trump has escaped paying taxes, began violent riots, and has even been impeached for using his position to attempt to take down a political rival (President Biden). In many Americans eyes, Donald Trump is not a hero but a villan who gained power by uniting his followers with rage, creating a cult of angry conservatives who follow his every order. However, to those who do support him, Trump is a hero who saved the USA from \u201ccrazy liberals\u201d like Bernie Sanders and Hilary Clinton. There are hundreds of thousands of people who break the law who aren\u2019t heroes, like Donald Trump.\n\tOn the contrary, in some cases, sometimes being a hero requires breaking the law in order to achieve equality. On of the greatest examples of law-breaking heroes is Gandhi, the Indian nationalist whose goal was achieving India\u2019s independence from the British. Gandhi, though he is considered to be one of the most respected role models for peace, was imprisoned 11 times for breaking British laws in India. He used his imprisonments to unite Indians to rise against the British government with non-violent protesting. Gandhi encouraged people to break the law in order to expose the horrible violence that the British inflicted on India. Gandhi was and is a hero to many and yet he broke the law hundreds of times.\n\tBeing a true hero takes guts, compassion, and sacrifice, all of which support Emerson\u2019s idea that true heroes don\u2019t need to follow the law. Laws are created as a social contract, an idea which came from enlightenment philosophe Jean-Jaques Rousseau, who believed that the social contract bound our society together and kept people in check based on the morals and values of the community. The purpose of laws is to create equality for large amounts of people, an equality that stops people from doing whatever they want that could potentially disrupt society. \nHowever, humans are imperfect and because of that humans can create imperfect laws. One rule that Gandhi fought against was that Indians couldn\u2019t make their own salt from the ocean, they had to purchase it from the British, who had plainly taken the salt from India, sent it back to England to be processed, and then shipped it back to India to make a profit. Gandhi argued why must Indians buy british salt when we can make our own Indian salt right here? This law was clearly ridiculous: why should Indians have to buy British salt? \nIt is because of imperfect laws that heroes, like Gandhi, should break the law and make their own salt. Sometimes breaking the law allows Spiderman to save the city from the Green Goblin, or allows the defense to organize and defeat their oposing attackers, or allows Gandhi to free India from the violent control of the British Empire. Yes not all who break the law are good, but heroes who break the law outshine the law in order to create more good and improve the world we live in.", "category": "IT"}, {"instruction": "Based on the provided information, when will we achieve AGI?", "input": "An artificial general intelligence (AGI) is a hypothetical intelligent agent which can understand or learn any intellectual task that human beings or other animals can.[1][2] AGI has also been defined alternatively as autonomous systems that surpass human capabilities at the majority of economically valuable work.[3] Developing AGI is a primary goal of some artificial intelligence research and for several AI companies such as OpenAI,[3] DeepMind,[4] and Anthropic, as well as a common topic in science fiction and futures studies.\n\nThe timeline for AGI development remains a subject of ongoing debate among researchers and experts, with some arguing it may be possible in the coming decades, while others maintain it might take much longer or may never be achieved at all.[5] Additionally, there is debate regarding whether modern deep learning systems, such as GPT-4, are an early yet incomplete form of AGI[6] or if new approaches will be required.[7]", "output": "The timeline for AGI development remains a subject of ongoing debate among researchers and experts, with some arguing it may be possible in the coming decades, while others maintain it might take much longer or may never be achieved at all.", "category": "IT"}, {"instruction": "Which of the following are movies with the actor Deepika Padukone?", "input": "", "output": "Pathan, Citadel, Om Shanti Om, Love Aaj Kal, Milli, Bala", "category": "IT"}, {"instruction": "What's the first 3 things you do when you wake up in the morning ?", "input": "", "output": "Acknowledge that I am about to wake up\nRefuse to wake up \nAccept that time cannot be stopped and wake up", "category": "IT"}, {"instruction": "From the paragraph about Space Needle, tell me where is located, when it was built, how tall the monument is and one more tourist fact about it.", "input": "The Space Needle is an observation tower in Seattle, Washington, United States. Considered to be an icon of the city, it has been designated a Seattle landmark. Located in the Lower Queen Anne neighborhood, it was built in the Seattle Center for the 1962 World's Fair, which drew over 2.3 million visitors.\n\nThe Space Needle was once the tallest structure west of the Mississippi River, standing at 605 ft (184 m). The tower is 138 ft (42 m) wide, weighs 9,550 short tons (8,660 metric tons), and is built to withstand winds of up to 200 mph (320 km/h) and earthquakes of up to 9.0 magnitude, as strong as the 1700 Cascadia earthquake.\n\nThe Space Needle features an observation deck 520 ft (160 m) above ground, providing views of the downtown Seattle skyline, the Olympic and Cascade Mountains, Mount Rainier, Mount Baker, Elliott Bay, and various islands in Puget Sound. Visitors can reach the top of the Space Needle by elevators, which take 41 seconds. On April 19, 1999, the city's Landmarks Preservation Board designated the tower a historic landmark.", "output": "The Space Needle was built in 1962 and it is located in Lower Queen Anne area in the city of Seattle. The tower has a height of 605 feet and it takes 41 seconds for visitors to reach the top of it with an elevator.", "category": "IT"}, {"instruction": "What are some practical applications of Burnside's lemma in combinatorics based on this passage?", "input": "Burnside's lemma, sometimes also called Burnside's counting theorem, the Cauchy\u2013Frobenius lemma, the orbit-counting theorem, or the lemma that is not Burnside's, is a result in group theory that is often useful in taking account of symmetry when counting mathematical objects. Its various eponyms are based on William Burnside, George P\u00f3lya, Augustin Louis Cauchy, and Ferdinand Georg Frobenius. The result is not due to Burnside himself, who merely quotes it in his book 'On the Theory of Groups of Finite Order', attributing it instead to Frobenius (1887).[1] Burnside's Lemma counts \"orbits\", which is the same thing as counting distinct objects taking account of a symmetry. Other ways of saying it are counting distinct objects up to an equivalence relation R, or counting objects that are in canonical form.\n\nIn the following, let G be a finite group that acts on a set X. For each g in G, let Xg denote the set of elements in X that are fixed by g (also said to be left invariant by g), that is, Xg = { x \u2208 X | g.x = x }. Burnside's lemma asserts the following formula for the number of orbits, denoted |X/G|:[2]\n\n|\n\ufffd\n/\n\ufffd\n|\n=\n1\n|\n\ufffd\n|\n\u2211\n\ufffd\n\u2208\n\ufffd\n|\n\ufffd\n\ufffd\n|\n.\n{\\displaystyle |X/G|={\\frac {1}{|G|}}\\sum _{g\\in G}|X^{g}|.}\nThus the number of orbits (a natural number or +\u221e) is equal to the average number of points fixed by an element of G (which is also a natural number or infinity). If G is infinite, the division by |G| may not be well-defined; in this case the following statement in cardinal arithmetic holds:\n\n|\n\ufffd\n|\n|\n\ufffd\n/\n\ufffd\n|\n=\n\u2211\n\ufffd\n\u2208\n\ufffd\n|\n\ufffd\n\ufffd\n|\n.\n{\\displaystyle |G||X/G|=\\sum _{g\\in G}|X^{g}|.}\nExamples of applications to enumeration\nNecklaces\nThere are 8 possible bit vectors of length 3, but only four distinct 2-colored necklaces of length 3: 000, 001, 011, and 111, because 100 and 010 are equivalent to 001 by rotation; similarly 110 and 101 are equivalent to 011. The formula is based on the number of rotations, which in this case is 3 (including the null rotation), and the number of bit vectors left unchanged by each rotation. All 8 bit vectors are unchanged by the null rotation, and two (000 and 111) are unchanged by each of the other two rotations, giving: \n4\n=\n1\n3\n(\n8\n+\n2\n+\n2\n)\n{\\displaystyle 4={\\frac {1}{3}}(8+2+2)}.\n\nFor length 4, there are 16 possible bit vectors; 4 rotations; the null rotation leaves all 16 bit vectors unchanged; the 1-rotation and 3-rotation each leave two bit vectors unchanged (0000 and 1111); the 2-rotation leaves 4 bit vectors unchanged (0000, 0101, 1010, and 1111); giving: \n6\n=\n1\n4\n(\n16\n+\n2\n+\n4\n+\n2\n)\n{\\displaystyle 6={\\frac {1}{4}}(16+2+4+2)}. These are: 0000, 0001, 0011, 0101, 0111, and 1111.\n\nColorings of a cube\nThe number of rotationally distinct colourings of the faces of a cube using three colours can be determined from this formula as follows.\n\nLet X be the set of 36 possible face colour combinations that can be applied to a cube in one particular orientation, and let the rotation group G of the cube act on X in the natural manner. Then two elements of X belong to the same orbit precisely when one is simply a rotation of the other. The number of rotationally distinct colourings is thus the same as the number of orbits and can be found by counting the sizes of the fixed sets for the 24 elements of G.\n\n\nCube with coloured faces\none identity element which leaves all 36 elements of X unchanged\nsix 90-degree face rotations, each of which leaves 33 of the elements of X unchanged\nthree 180-degree face rotations, each of which leaves 34 of the elements of X unchanged\neight 120-degree vertex rotations, each of which leaves 32 of the elements of X unchanged\nsix 180-degree edge rotations, each of which leaves 33 of the elements of X unchanged\nA detailed examination of these automorphisms may be found here.\n\nThe average fix size is thus\n\n1\n24\n(\n3\n6\n+\n6\n\u22c5\n3\n3\n+\n3\n\u22c5\n3\n4\n+\n8\n\u22c5\n3\n2\n+\n6\n\u22c5\n3\n3\n)\n=\n57.\n{\\frac  {1}{24}}\\left(3^{6}+6\\cdot 3^{3}+3\\cdot 3^{4}+8\\cdot 3^{2}+6\\cdot 3^{3}\\right)=57.\nHence there are 57 rotationally distinct colourings of the faces of a cube in three colours. In general, the number of rotationally distinct colorings of the faces of a cube in n colors is given by\n\n1\n24\n(\n\ufffd\n6\n+\n3\n\ufffd\n4\n+\n12\n\ufffd\n3\n+\n8\n\ufffd\n2\n)\n.\n{\\frac  {1}{24}}\\left(n^{6}+3n^{4}+12n^{3}+8n^{2}\\right).\n8 Queens Puzzle\nIn the eight queens puzzle there are 92 solutions, of which 12 fundamental solutions are distinct up to rotation and reflection of the board. There are 8 combinations of rotations and reflections, including the null action. The null action leaves all 92 solutions unchanged. Four of the 92 solutions are symmetrical, unchanged by 180\u00b0 rotation. That gives: \n12\n=\n1\n8\n(\n92\n+\n4\n)\n{\\displaystyle 12={\\frac {1}{8}}(92+4)}.[3]", "output": "* Necklace counting problem: counting rotationally distinct necklaces of various lengths where each bead can be one of the two colors. The article counts necklaces of lengths 3 and 4, and the answer is 4 and 6, respectively.\n* Colorings of a cube problem: count rotationally distinct colorings of faces of a cube. The article considers a case when 3 colors are used and the answer is 57.\n* 8 queens puzzle: a classical version of the problem is counting different ways to place 8 chess queens onto an 8x8 board so that no queen attacks another (the answer is 92). With Burnside's lemma application the article counts the number of different placements of queens up to rotation and reflection, arriving at 12 as the answer.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Indian Elephant, Irish Elk", "input": "", "output": "Irish Elk is extinct, Indian Elephant is alive.", "category": "IT"}, {"instruction": "What are the unethical behaviors in the corporate world? Illustrate with an example.", "input": "", "output": "Boeing 737 Max \n\n \nBoeing is an American multinational company that manufactures aircraft, military equipment, rockets, missiles, and telecommunication equipment. The Boeing 737 series aircraft is the most popular commercial jet in the world. In March 2019 and December 2020, the Boeing 737 Max commercial jets belonging to Ethiopian and LION Air crashed, grounding the 737 Max jets. These incidents triggered the crisis at Boeing. \n\nThe Boeing 737 Max crisis is a classic example of chained unethical behaviors exhibited by an organization and how one unethical behavior quickly led to another in an attempt to cover up the previous one. \n\nMotivated blindness \n\nMotivated blindness was the initial cause for the people involved in the 737 Max jet design. It started with Boeing\u2019s chief technical test pilot, David Forkner, who repeatedly spotted erratic behavior on the jets MCAS (Maneuvering Characteristics Augmentation System). Despite egregious MCAS, David later urged FAA (Federal Aviation Authority) to remove the MCAS mentioned from the 737 Max instruction manual. Boeing management failed to overlook David ForKner\u2019s and other faults and chose to remain ignorant. \n\nIndirect blindness \n\nSimilarly, a lot is afoul with FAA. Months before the crash of 2 jets, Boeing had known about the issues and delayed the flight data submission to FAA. Despite the warnings from FAA, Boeing got away with it quickly. The indirect blindness of the FAA added insult to injury to the crisis. \n\nSlippery slope \n\nBoeing was on a slippery slope, and the downward spiral continued with David Forkner requesting FAA to remove the mentions of MCAS from the jet\u2019s instruction manual. Another test pilot, Gustavsson, claimed that David Forkner kept him out of the loop. \n \nOvervaluing outcomes \n\nOn the whole, Boeing was unaware of the looming crisis and, at every stage, was overvaluing the outcomes of getting the jet out of the production lines and getting it FAA-approved. \n\nRecommendations \n\n The managers at Boeing must implement processes that root out conflicts of interest. For example, when David Forkner captured the erratic behavior of MCAS, the stringent process to capture test data and the data must be published to a governance board to resolve any conflict of interest. \n\nSimilarly, for FAA-related transactions and interactions, the governance board must oversee whether the transactions might invite unethical behavior and take ownership of the implications. \n\nBoeing\u2019s governance board must continuously monitor for trivial ethical infractions and address them immediately. It has to examine both \u201cgood\u201d and \u201cbad\u201d decisions for their ethical implications.", "category": "IT"}, {"instruction": "what are the benefit of meditation?", "input": "", "output": "Meditation practice will train mind to focus on specific objects, like: breath or body sensation, which will relief brain from high dense thoughts or strong emotions. It can help brain calm down and be present in current situation. It will avoid the mind to get lost in past regrets or get too anxious in the future desire. This is not only help brain to get great rest, but also an efficient exercise for brain to rebuild the neuron cells and extend their connections.\nReports showed, even 15 mins daily meditation can greatly help people with mitigating nervous, pressure, sadness and almost all negative emotions. \nLong time mediation can lead mind in the \"deep calm down\" state, which can help people understanding things in the deep root and see things as they really are. These will be the foundation to trigger wisdom and enlightenment. \nJust like human boy need work out, human brain also need exercise, which is meditation. Meditation now becomes more and more popular and lots of people already get benefit from it and keep it as a daily exercise.", "category": "IT"}, {"instruction": "What city is Microsoft Based in?", "input": "", "output": "Redmond, Wa", "category": "IT"}, {"instruction": "How many national high school records does Shana Woods currently hold based on the paragraph?", "input": "Shana Woods (born July 7, 1988 in Bellflower, California) is an American track and field athlete. She holds the current national high school record in the multiple event heptathlon, which she set while attending Long Beach Polytechnic High School in Long Beach, California. She has exhibited proficiency in a variety of events. While still a sophomore at Long Beach Poly, she joined her teammates, including senior Shalonda Solomon in setting national high school records in the 4 \u00d7 400 metres relay, 4 \u00d7 200 metres relay and indoor 4 \u00d7 400 metres relay. All those records still stand. The indoor record also counts as the current U.S. Junior record.", "output": "Shana Woods holds 4 national high school records currently", "category": "IT"}, {"instruction": "What are the two major bacterial pathogens of Anaplasma bacteria?", "input": "Anaplasmosis is a tick-borne disease affecting ruminants, dogs, and horses,[1] and is caused by Anaplasma bacteria. Anaplasmosis is an infectious but not contagious disease. Anaplasmosis can be transmitted through mechanical and biological vector processes. Anaplasmosis can also be referred to as \"yellow bag\" or \"yellow fever\" because the infected animal can develop a jaundiced look. Other signs of infection include weight loss, diarrhea, paleness of the skin, aggressive behavior, and high fever.[2]\n\nMany different tick species can carry the bacteria that cause anaplasmosis. The two major bacterial pathogens are Anaplasma marginale and Anaplasma phagocytophilum.[3] These microorganisms are Gram-negative,[4] and infect red blood cells.[5] Once the host is infected with anaplasmosis, the immune system will try to fight off and kill the infected red blood cells, but will also kill healthy red blood cells.[2] The Anaplasma sparouinense species is responsible for a rare zoonosis, the Sparouine anaplasmosis, detected only in French Guiana, South America.[6] This disease was described from a clandestine gold miner working deep in rainforest. Infection of his red blood cells led to a severe deterioration of his health and required his hospitalization. Molecular typing showed that Anaplasma sparouinense is distinct to all known species and more genetically related to recently described Anaplasma species causing infections in rainforest wild fauna of Brazil.[6]\n\nWhile there are no current live or inactivated vaccines effective for all strains of A. marginale approved by the USDA for anaplasmosis, there are other means of prevention. Tick and fly control for herds of ruminants can be effective but also labor intensive. Chemical methods can also be used, including sanitizing surgical equipment after each use.[3] Tetracycline drugs are the most common treatment for anaplasmosis, and can provide the animal with immunity for a period of time.[7] The disease is more common in the South and West parts of the United States, but is no longer considered a major problem since the use of tetracycline drugs.[8]", "output": "The two major bacterial pathogens are Anaplasma marginale and Anaplasma phagocytophilum. These microorganisms are Gram-negative, and infect red blood cells.", "category": "IT"}, {"instruction": "are GSIs important to being a global company", "input": "", "output": "yes", "category": "IT"}, {"instruction": "Extract the locations where Nachum lived from the text below and list them in alphabetical order and separated by a semicolon.", "input": "Nachum Gutman was born in Telene\u015fti, Bessarabia Governorate, then a part of the Russian Empire (now in the Republic of Moldova). He was the fourth child of Sim[c]ha Alter and Rivka Gutman. His father was a Hebrew writer and educator who wrote under the pen name S. Ben Zion. In 1903, the family moved to Odessa, and two years later, to Ottoman Palestine. In 1908, Gutman attended the Herzliya Gymnasium in what would later become Tel Aviv. In 1912, he studied at the Bezalel School in Jerusalem. In 1920\u201326, he studied art in Vienna, Berlin and Paris.\n\nGutman was married to Dora, with whom he had a son. After Gutman's death in 1980, Dora asked two Tel Aviv gallery owners, Meir Stern of Stern Gallery and Miriam Tawin of Shulamit Gallery, to appraise the value all of the works left in his estate.[2]", "output": "Berlin;Jerusalem;Odessa;Palestine;Paris;Tel Aviv;Vienna", "category": "IT"}, {"instruction": "Who are the best college football programs of all time?", "input": "", "output": "Ranked by total wins as of the completion of the 2022 season\n\n1. Michigan\nT2. Ohio State\nT2. Alabama\n4. Notre Dame\n5. Texas\n6. Oklahoma\n7. Yale\n8. Penn State\n9. Nebraska\n10. Harvard", "category": "IT"}, {"instruction": "Identify the bird from the list: Canada Dry, Canada goose, Goosebumps", "input": "", "output": "Canada goose", "category": "IT"}, {"instruction": "Give me a list of the most famous tech companies in the world", "input": "", "output": "Amazon, Google, Microsoft, Twitter, Facebook, Apple, Oracle, Alibaba", "category": "IT"}, {"instruction": "Why was the model T only produced in black?", "input": "", "output": "Henry Ford produced the model T only in black because the black paint available at the time was the fastest to dry.", "category": "IT"}, {"instruction": "Which bird flies the farthest?", "input": "", "output": "The Arctic tern flies a round trip of 21,750 miles a year, breeding in the Arctic in the northern summer and feeding in the Antarctic during the southern summer. The bar-tailed godwit migrates farther in a single trip than any other bird. Each year it travels non-stop from Alaska to New Zealand in nine days and loses over half its body weight.", "category": "IT"}, {"instruction": "Based on the reference paragraph, when was the 149th Boat Race?", "input": "The 149th Boat Race took place on 6 April 2003. Held annually, the Boat Race is a side-by-side rowing race between crews from the Universities of Oxford (in dark blue) and Cambridge (in light greenish blue) along a 4.2-mile (6.8 km) tidal stretch of the River Thames in south-west London. The lead changed twice during the race, which Oxford won by one foot (30 cm), the smallest margin of victory in the history of the event. The close race has been described as \"epic\", while Olympic gold medallist Steve Redgrave suggested that the race was the \"greatest we will see in our lifetimes\".", "output": "April 6, 2003", "category": "IT"}, {"instruction": "Imagine you are planning a menu for Thanksgiving Dinner. Build out a meal with two main dishes, four side dishes and two desserts. I have an aunt with Celiac disease who is vegetarian, so make sure there are options for vegetarians and people with celiac disease in each course, and explain what my aunt can eat in each part of the meal", "input": "", "output": "Main dishes: Turkey and Grilled Tofu\nSide Dishes: Mashed Potatoes, Bread Rolls, Green Beans, Cranberry Sauce\nDessert: Pumpkin Pie, Vanilla Ice Cream\nYour aunt can eat Grilled Tofu for the main, mashed potatoes, green beans and cranberry sauce for her side dishes and vanilla ice cream for dessert. All of these items are both vegetarian and gluten free, which is necessary for people with celiac disease.", "category": "IT"}, {"instruction": "What is reserve requirement?", "input": "", "output": "Reserve requirements are central bank regulations that set the minimum amount that a commercial bank must hold in liquid assets. This minimum amount, commonly referred to as the commercial bank's reserve, is generally determined by the central bank on the basis of a specified proportion of deposit liabilities of the bank. This rate is commonly referred to as the reserve ratio. Though the definitions vary, the commercial bank's reserves normally consist of cash held by the bank and stored physically in the bank vault (vault cash), plus the amount of the bank's balance in that bank's account with the central bank. A bank is at liberty to hold in reserve sums above this minimum requirement, commonly referred to as excess reserves.\n\nThe reserve ratio is sometimes used by a country\u2019s monetary authority as a tool in monetary policy, to influence the country's money supply by limiting or expanding the amount of lending by the banks. Monetary authorities increase the reserve requirement only after careful consideration because an abrupt change may cause liquidity problems for banks with low excess reserves; they generally prefer to use open market operations (buying and selling government-issued bonds) to implement their monetary policy. In the United States and many other countries (except Brazil, China, India, Russia), reserve requirements are generally not altered frequently in implementing a country's monetary policy because of the short-term disruptive effect on financial markets.", "category": "IT"}, {"instruction": "How much of the earth is covered in land?", "input": "Earth is the third planet from the Sun and the only place known in the universe where life has originated and found habitability. While Earth may not contain the largest volumes of water in the Solar System, only Earth sustains liquid surface water, extending over 70.8% of the Earth with its ocean, making Earth an ocean world. Earth's polar regions currently retain most of all other water with large sheets of ice covering ocean and land, dwarfing Earth's groundwater, lakes, rivers and atmospheric water. Land, consisting of continents and islands, extends over 29.2% of the Earth and is widely covered by vegetation. Below Earth's surface material lies Earth's crust consisting of several slowly moving tectonic plates, which interact to produce mountain ranges, volcanoes, and earthquakes. Earth's liquid outer core generates a magnetic field that shapes the magnetosphere of Earth, largely deflecting destructive solar winds and cosmic radiation.", "output": "29.2% of the earth's surface is covered in land.", "category": "IT"}, {"instruction": "Based on the reference text about coffee, tell me where coffee plants are primarily grown and the most common bean types.", "input": "Coffee is a beverage prepared from roasted coffee beans. Darkly colored, bitter, and slightly acidic, coffee has a stimulating effect on humans, primarily due to its caffeine content. It has the highest sales in the world market for hot drinks.[2]\n\nSeeds of the Coffea plant's fruits are separated to produce unroasted green coffee beans. The beans are roasted and then ground into fine particles that are typically steeped in hot water before being filtered out, producing a cup of coffee. It is usually served hot, although chilled or iced coffee is common. Coffee can be prepared and presented in a variety of ways (e.g., espresso, French press, caff\u00e8 latte, or already-brewed canned coffee). Sugar, sugar substitutes, milk, and cream are often used to mask the bitter taste or enhance the flavor.\n\nThough coffee is now a global commodity, it has a long history tied closely to food traditions around the Red Sea. The earliest credible evidence of coffee drinking in the form of the modern beverage appears in modern-day Yemen from the mid-15th century in Sufi shrines, where coffee seeds were first roasted and brewed in a manner similar to current methods. The Yemenis procured the coffee beans from the Ethiopian Highlands via coastal Somali intermediaries and began cultivation. By the 16th century, the drink had reached the rest of the Middle East and North Africa, later spreading to Europe. In the 20th century, coffee became a global commodity, creating different coffee cultures around the world.\n\nThe two most commonly grown coffee bean types are C. arabica and C. robusta.[3] Coffee plants are cultivated in over 70 countries, primarily in the equatorial regions of the Americas, Southeast Asia, the Indian subcontinent, and Africa. As of 2018, Brazil was the leading grower of coffee beans, producing 35% of the world's total. Green, unroasted coffee is traded as an agricultural commodity. Despite sales of coffee reaching billions of dollars worldwide, farmers producing coffee beans disproportionately live in poverty. Critics of the coffee industry have also pointed to its negative impact on the environment and the clearing of land for coffee-growing and water use", "output": "Coffee plants are cultivated mainly in the equatorial regions of the Americas, Southeast Asia, the Indian subcontinent, and Africa. The most common types of coffee beans are arabica and robusta.", "category": "IT"}, {"instruction": "Given this reference text, what are column stores used for?", "input": "A column-oriented DBMS or columnar DBMS is a database management system (DBMS) that stores data tables by column rather than by row. Benefits include more efficient access to data when only querying a subset of columns (by eliminating the need to read columns that are not relevant), and more options for data compression. However, they are typically less efficient for inserting new data.\n\nPractical use of a column store versus a row store differs little in the relational DBMS world. Both columnar and row databases can use traditional database query languages like SQL to load data and perform queries. Both row and columnar databases can become the backbone in a system to serve data for common extract, transform, load (ETL) and tools.", "output": "A column store database stores data as any other database management system. The data itself is stored sequentially to improve the performance of scans on a subset of individual columns.", "category": "IT"}, {"instruction": "Can Solar panels help you maintain power during a storm ?", "input": "", "output": "It would really depend on how much cloud coverage you are getting but your panels should be able to generate some power.", "category": "IT"}, {"instruction": "What factors should I consider before becoming a dog owner?", "input": "", "output": "Here are some questions you may ask yourself before becoming a dog owner:\n1. Whether you have time to spend with the new family member daily. Dogs are social animals who need accompany just like human beings. You will need to spend time on walking, training and playing with your dogs every day.\n2. Whether you have the financial ability to raise a dog. It's quite expensive to raise dogs. You will need to spend money on dog food, toys, pet necessities, vet bills, grooming, etc.\n3. Whether you are prepared if you are a person who loves to travel. It will become harder to travel after having dogs.\n4. Whether you are allergic to dogs.\n5. Whether your current living condition is suitable for raising dogs. You also need to research what dog breeds are suitable for you, and dogs from different breeds have very different personalities. Is your home big enough for dogs of the breed you want to have? Are you living in a neighborhood that allows you to walk dogs easily and offers convenient access to facilities like dog parks? Do you have kids? \n6. Whether you are prepared for dog training. Dogs need proper training to have good manners, which takes time, patience and persistence.", "category": "IT"}, {"instruction": "Who was the winner of Top Chef Season 4?", "input": "Stephanie Izard is an American chef and television personality best known as the first female chef to win Bravo's Top Chef, taking the title during its fourth season.[1] She is the co-owner and executive chef of three award-winning Chicago restaurants, Girl and the Goat, Little Goat, and Duck Duck Goat, and opened her first restaurant, Scylla (now closed) as chef-owner at the age of 27. Izard received a James Beard Foundation Award for \"Best Chef: Great Lakes\" in 2013 for her work at Girl and the Goat.[2] She has made a number of appearances on Top Chef since her win, both as a guest judge on subsequent seasons and as a participant in Top Chef Duels.[3] In 2017, Izard competed in the Food Network series Iron Chef Gauntlet, where she overall defeated chefs Bobby Flay, Michael Symon, and Masaharu Morimoto to obtain the title of Iron Chef.", "output": "Stephanie Izard won the fourth season of Top Chef", "category": "IT"}, {"instruction": "What is the difference between an electric field and gravitational field?", "input": "The concept of the electric field was introduced by Michael Faraday. An electric field is created by a charged body in the space that surrounds it, and results in a force exerted on any other charges placed within the field. The electric field acts between two charges in a similar manner to the way that the gravitational field acts between two masses, and like it, extends towards infinity and shows an inverse square relationship with distance. However, there is an important difference. Gravity always acts in attraction, drawing two masses together, while the electric field can result in either attraction or repulsion. Since large bodies such as planets generally carry no net charge, the electric field at a distance is usually zero. Thus gravity is the dominant force at distance in the universe, despite being much weaker.\nAn electric field generally varies in space and its strength at any one point is defined as the force (per unit charge) that would be felt by a stationary, negligible charge if placed at that point. The conceptual charge, termed a 'test charge', must be vanishingly small to prevent its own electric field disturbing the main field and must also be stationary to prevent the effect of magnetic fields. As the electric field is defined in terms of force, and force is a vector, having both magnitude and direction, so it follows that an electric field is a vector field.\nThe study of electric fields created by stationary charges is called electrostatics. The field may be visualised by a set of imaginary lines whose direction at any point is the same as that of the field. This concept was introduced by Faraday, whose term 'lines of force' still sometimes sees use. The field lines are the paths that a point positive charge would seek to make as it was forced to move within the field; they are however an imaginary concept with no physical existence, and the field permeates all the intervening space between the lines. Field lines emanating from stationary charges have several key properties: first, that they originate at positive charges and terminate at negative charges; second, that they must enter any good conductor at right angles, and third, that they may never cross nor close in on themselves.", "output": "The electric field acts between two charges in a similar manner to the way that the gravitational field acts between two masses, and like it, extends towards infinity and shows an inverse square relationship with distance. However, there is an important difference. Gravity always acts in attraction, drawing two masses together, while the electric field can result in either attraction or repulsion.", "category": "IT"}, {"instruction": "What are good plants to have in your home if you have cats?", "input": "", "output": "Many house plants are not cat safe. Some which are: rattlesnake plants, spider plants and African violets to name a few. Make sure you always check before buying an indoor plant if it is cat safe or keep non-cat safe plants in location you cat cannot get to.", "category": "IT"}, {"instruction": "Which of the following cars are made by GM? Grand Cherokee, Blazer, F150, Bronco, Corvette", "input": "", "output": "Blazer and Corvette", "category": "IT"}, {"instruction": "Based on the given text, please tell me which region and country a Troll Cross originated in, and what its intent is.", "input": "In Sweden, as well as Norway, a trollkors or troll cross is a bent piece of iron worn as an amulet to ward off malevolent magic, allegedly stemming from medieval Sweden. According to those claiming its authenticity it represented the Norse symbol of protection; thus if a Norseman wore this symbol, they believed that chances of falling into danger would decrease. However, although commonly thought of as a part of Swedish folklore, it was first created\u2014as an item of jewelry\u2014by the smith Kari Erlands from western Dalarna, sometime in the late 1990s. It was claimed to have been a copy of a protective rune found at her grandparents' farm, but this has not been verified. While it does bear some resemblance to the othala rune in Elder Futhark and Anglo-Saxon runic writing systems, it is more likely that Erlands mistook a Bumerke for a protective symbol.", "output": "The Troll Cross originated in the western Dalarna region of Sweden. It is worn as an amulet or piece of jewelry to ward off malevolent magic.", "category": "IT"}, {"instruction": "Given this paragraph about the Republic of Finland becoming a member of the North Atlantic Treaty Organisation (NATO) what year did it start a formal relations with NATO?", "input": "Finland has had formal relations with NATO since 1994, when it joined the Partnership for Peace program, and has been a member of the European Union (EU), which largely overlaps with NATO in membership,[clarify] since 1995.", "output": "Finland has started the formal relationship with NATO in 1994 when it joined the Partnership for Peace program. However it wasn't a NATO member up until April 4 2023 when it became an official member of NATO.", "category": "IT"}, {"instruction": "Change the following to past tense", "input": "Yoo Ji-No is a South Korean football player who plays for Suwon FC.", "output": "Yoo Ji-No was a South Korean football player who played for Suwon FC.", "category": "IT"}, {"instruction": "What's the difference between a knot, a hitch and a bend?", "input": "", "output": "A knot stands by itself and will not come undone, an example is the figure 8 knot. A hitch, such as the clove hitch, requires something else such as a rope, a tree, or a carabiner to stay intact. A bend joins two ropes together.", "category": "IT"}, {"instruction": "What are the classical states of matter?", "input": "", "output": "1. Solid: Matter in a solid state is comprised of particles that are held very closely together. Solids hold a definite shape. \n2. Liquid: Matter is in a mostly non-compressible fluid state. Liquid matter conforms to the shape of its container. \n3. Gas: Matter in a gaseous state is composed of compressible fluids. It may also take the shape of its container, but it will also expand to fill the container.", "category": "IT"}, {"instruction": "FATF was established in which year?", "input": "", "output": "FATF was established in the year 1989", "category": "IT"}, {"instruction": "Who is LBJ?", "input": "Lyndon Baines Johnson (/\u02c8l\u026and\u0259n \u02c8be\u026anz/; August 27, 1908 \u2013 January 22, 1973), often referred to by his initials LBJ, was an American politician who served as the 36th president of the United States from 1963 to 1969. He previously served as the 37th vice president from 1961 to 1963 under President John F. Kennedy, and was sworn in shortly after Kennedy's assassination. A Democrat from Texas, Johnson also served as a U.S. representative, U.S. Senator and the Senate's majority leader. He holds the distinction of being one of the few presidents who served in all elected offices at the federal level.", "output": "Lyndon Baines Johnson (/\u02c8l\u026and\u0259n \u02c8be\u026anz/; August 27, 1908 \u2013 January 22, 1973), often referred to by his initials LBJ, was an American politician who served as the 36th president of the United States from 1963 to 1969. He previously served as the 37th vice president from 1961 to 1963 under President John F. Kennedy, and was sworn in shortly after Kennedy's assassination. A Democrat from Texas, Johnson also served as a U.S. representative, U.S. Senator and the Senate's majority leader. He holds the distinction of being one of the few presidents who served in all elected offices at the federal level.\n\nBorn in a farmhouse in Stonewall, Texas, to a local political family, Johnson worked as a high school teacher and a congressional aide before winning election to the U.S. House of Representatives in 1937. In 1948, he won the 1948 Senate election in Texas after a narrow and controversial victory in the Democratic Party's primary.[2] He was appointed to the position of Senate Majority Whip in 1951. He became the Senate Democratic leader in 1953 and majority leader in 1954. In 1960 Johnson ran for the Democratic nomination for president. Ultimately, Senator Kennedy bested Johnson and his other rivals for the nomination, then surprised many by offering to make Johnson his vice presidential running mate. The Kennedy-Johnson ticket won in the 1960 presidential election. Vice President Johnson assumed the presidency on November 22, 1963, after President Kennedy was assassinated. The following year Johnson was elected to the presidency when he won in a landslide against Arizona Senator Barry Goldwater, receiving 61.1% of the popular vote in the 1964 presidential election, the largest share won by any presidential candidate since the 1820 election.\n\nJohnson's domestic policy was aimed at expanding civil rights, public broadcasting, access to healthcare, aid to education and the arts, urban and rural development, and public services. In 1964 Johnson coined the term the \"Great Society\" to describe these efforts. In addition, he sought to create better living conditions for low-income Americans by spearheading a campaign unofficially called the \"War on Poverty\". As part of these efforts, Johnson signed the Social Security Amendments of 1965, which resulted in the creation of Medicare and Medicaid. Johnson followed his predecessor's actions in bolstering NASA and made the Apollo Program a national priority. He enacted the Higher Education Act of 1965 which established federally insured student loans. Johnson signed the Immigration and Nationality Act of 1965 which laid the groundwork for U.S. immigration policy today. Johnson's opinion on the issue of civil rights put him at odds with other white, southern Democrats. His civil rights legacy was shaped by signing the Civil Rights Act of 1964, the Voting Rights Act of 1965, and the Civil Rights Act of 1968. During his presidency, the American political landscape transformed significantly,[3] as white southerners who were once staunch Democrats began moving to the Republican Party[4] and black voters began moving to the Democratic Party.[5][6] Because of his domestic agenda, Johnson's presidency marked the peak of modern liberalism in the United States.[7]\n\nJohnson's presidency took place during the Cold War, thus his foreign policy prioritized containment of communism. Prior to his presidency, the U.S. was already involved in the Vietnam War, supporting South Vietnam against the communist North. Following a naval skirmish in 1964 between the United States and North Vietnam, Congress passed the Gulf of Tonkin Resolution, which granted Johnson the power to launch a full-scale military intervention in South East Asia. The number of American military personnel in Vietnam increased dramatically, and casualties soared among U.S. soldiers and Vietnamese civilians. Johnson also expanded military operations in neighboring Laos to destroy North Vietnamese supply lines. In 1968, the communist Tet Offensive inflamed the anti-war movement, especially among draft-age students on university campuses, and public opinion turned against America's involvement in the war. In Europe, Johnson's administration continued to promote and foster Western European political and economic cooperation and integration as his predecessors had.[8]\n\nAt home, Johnson faced further troubles with race riots in major cities and increasing crime rates. His political opponents seized the opportunity and raised demands for \"law and order\" policies. Johnson began his presidency with near-universal support, but his approval declined throughout his presidency as the public became frustrated with both the Vietnam War and domestic unrest. Johnson initially sought to run for re-election; however, following disappointing results in the New Hampshire primary he withdrew his candidacy. The war was a major election issue and the 1968 presidential election saw Republican candidate Richard Nixon defeat Johnson's vice president Hubert Humphrey. At the end of his presidency in 1969, Johnson returned to his Texas ranch, published his memoirs, and in other respects kept a low profile until he died of a heart attack in 1973.\n\nJohnson is one of the most controversial presidents in American history. Public opinion and academic assessments of his legacy have fluctuated greatly ever since his death. Historians and scholars rank Johnson in the upper tier because of his accomplishments regarding domestic policy. His administration passed many major laws that made substantial changes in civil rights, health care, welfare, and education.[9] Conversely, Johnson is strongly criticized for his foreign policy, namely escalating American involvement in the Vietnam War.[10][11]", "category": "IT"}, {"instruction": "Tell me whether these instruments are stringed or percussion: Cello, Cymbals, Triangle, Harp", "input": "", "output": "The cello and harp are stringed instruments while the cymbals and triangle are percussion instruments.", "category": "IT"}, {"instruction": "Given this reference text about Delta Lambda Phi, during which years was the DLP fraternity not the fastest growing fraternity in the US?", "input": "Delta Lambda Phi (\u0394\u039b\u03a6) is an international social fraternity for gay, bisexual, transgender and progressive men. It offers a social environment and structure similar to other Greek-model college fraternities. The fraternity was founded on October 15, 1986, by Vernon L. Strickland III in Washington, D.C.:[2] becoming the first national social fraternity for gay, bisexual, and straight progressive men. The full, corporate name of the fraternity is Delta Lambda Phi Social Fraternity, but it is commonly referred to as \"DLP\" by its members. As of 2007, DLP was one of the fastest-growing fraternities in the United States.[3][4]", "output": "Between 1986 and 2007, DLP was available, but not the fastest growing fraternity.", "category": "IT"}, {"instruction": "From the passage provided, extract the total product revenue and % YoY growth using format: {$x} product revenue with {x%} YoY growth\n\nProduct revenue of $555.3 million in the fourth quarter, representing 54% year-over-year growth\nRemaining performance obligations of $3.7 billion, representing 38% year-over-year growth\n7,828 total customers\nNet revenue retention rate of 158%\n330 customers with trailing 12-month product revenue greater than $1 million\nAuthorized a $2.0 billion stock repurchase program", "input": "", "output": "$555.3m product revenue with 54% YoY growth", "category": "IT"}, {"instruction": "how can we prevent the best river floods?", "input": "Prominent levee systems have been built along the Mississippi River and Sacramento River in the United States, and the Po, Rhine, Meuse River, Rh\u00f4ne, Loire, Vistula, the delta formed by the Rhine, Maas/Meuse and Scheldt in the Netherlands and the Danube in Europe. During the Chinese Warring States period, the Dujiangyan irrigation system was built by the Qin as a water conservation and flood control project. The system's infrastructure is located on the Minjiang (Chinese: \u5cb7\u6c5f; pinyin: M\u00ednji\u0101ng), which is the longest tributary of the Chang Jiang, in Sichuan, China.\n\nThe Mississippi levee system represents one of the largest such systems found anywhere in the world. It comprises over 5,600 km (3,500 mi) of levees extending some 1,000 km (620 mi) along the Mississippi, stretching from Cape Girardeau, Missouri, to the Mississippi delta. They were begun by French settlers in Louisiana in the 18th century to protect the city of New Orleans.[12] The first Louisiana levees were about 90 cm (3 ft) high and covered a distance of about 80 km (50 mi) along the riverside.[12] The U.S. Army Corps of Engineers, in conjunction with the Mississippi River Commission, extended the levee system beginning in 1882 to cover the riverbanks from Cairo, Illinois to the mouth of the Mississippi delta in Louisiana.[12] By the mid-1980s, they had reached their present extent and averaged 7.3 m (24 ft) in height; some Mississippi levees are as high as 15 m (50 ft). The Mississippi levees also include some of the longest continuous individual levees in the world. One such levee extends southwards from Pine Bluff, Arkansas, for a distance of some 610 km (380 mi). The scope and scale of the Mississippi levees has often been compared to the Great Wall of China.[13]\n\nThe United States Army Corps of Engineers (USACE) recommends and supports cellular confinement technology (geocells) as a best management practice.[14] Particular attention is given to the matter of surface erosion, overtopping prevention and protection of levee crest and downstream slope. Reinforcement with geocells provides tensile force to the soil to better resist instability.\n\nArtificial levees can lead to an elevation of the natural river bed over time; whether this happens or not and how fast, depends on different factors, one of them being the amount and type of the bed load of a river. Alluvial rivers with intense accumulations of sediment tend to this behavior. Examples of rivers where artificial levees led to an elevation of the river bed, even up to a point where the river bed is higher than the adjacent ground surface behind the levees, are found for the Yellow River in China and the Mississippi in the United States.", "output": "Prominent levee systems have been built as a water conservation and flood control project. \nThe Mississippi River and Sacramento River in the United States, and the Po, Rhine, Meuse River, Rh\u00f4ne, Loire, Vistula, the delta formed by the Rhine, Maas/Meuse and Scheldt in the Netherlands and the Danube in Europe. The Mississippi levee system represents one of the largest such systems found anywhere in the world", "category": "IT"}, {"instruction": "What is a baby cat called?", "input": "", "output": "A baby cat is called a kitten", "category": "IT"}, {"instruction": "Give me ideas how I could become more productive.", "input": "", "output": "Here are a few things you can try to become more productive:\n1. Limit multitasking: While it may feel more productive, you can easily get distracted and spend more time on those tasks overall. Instead, try to complete one task to a higher standard in less time.\n2. Set small goals: Large tasks can feel overwhelming which can in turn lead to procrastination. Try to break them down into smaller, manageable chunks and complete them one by one.\n3. Take a break: It is scientifically proven that brain productivity increases after having a short break. Consider scheduling frequent short breaks of 10-15 minutes. Make sure you step away from your work environment. This will help your mind to have a rest and come up with new ideas after the break.\n4. Complete the hardest task first: The most complex or hardest task can be intimidating to start with and we tend to avoid them therefore. Try to start with one of these tasks. It can energize and motivate you throughout the day, helping you accomplish a lot of smaller tasks.\n5. Delegate: If you are part of a team, consider collaborating with team members more closely. Delegation is not about offloading work. Instead, it is about better task allocation ensuring each team member works on a task that is best suited to their skills and availability.", "category": "IT"}, {"instruction": "Eggs are expensive these days. Should I rear my own chickens instead?", "input": "", "output": "Chickens typically take around 18 weeks to start laying eggs. Of course, this depends on the age and the breed of the chickens as well. You wouldn\u2019t expect a newborn to start producing eggs. A hen does not lay eggs in cold seasons. So, if you can wait for your chickens to lay eggs and don\u2019t mind spending on raising chickens, buying a flock of chickens at $30 to start might not be a bad idea.", "category": "IT"}, {"instruction": "What are some of the highest-rated episodes of The X-Files, based on viewer's ratings?", "input": "", "output": "According to IMDB, users on the site have ranked the following as the top ten episodes from The X-Files: Bad Blood, Clyde Bruckman's Final Repose, Anasazi, Dreamland, Musings of a Cigarette Smoking Man, Paper Clip, Redux II, The Erlenmeyer Flask, Jose Chung's From Outer Space, and Small Potatoes.", "category": "IT"}, {"instruction": "What are some of the things to know about New York City?", "input": "", "output": "New York is the most populous city in USA. It is located in the southern tip of New York State. It is home of the Yankee Stadium which is the most famous baseball stadium in the world. It is a major transportation hub with global connectivity with three major airport, two major train stations, and a huge subway network. It is situated in the worlds largest natural harbor extending into the Atlantic Ocean.  As many as 800 languages are spoken in New York, making it the most linguistically diverse city in the world.", "category": "IT"}, {"instruction": "Create a beginner-intermediate push-pull-legs workout routine that I can do 6 times a week.", "input": "", "output": "Day 1 (push):\n5x5 Bench Press\n3x8 Incline Bench Press\n3x8 Overhead Press\n3x8-12 Triceps Pushdown\n3x8-12 Triceps Extension superset with 3x8-12 Lateral Raise\n\nDay 2 (pull):\n1x5 Deadlift\n3x8 Lat Pulldown\n3x8 Seated Row\n3x12-15 Face Pull\n4x8-12 Incline Curl\n4x8-12 Hammer Curl\n\nDay 3 (legs):\n2x5 Squat\n3x8 Romanian Deadlift\n3x8 Leg Press\n3x8-12 Seated Leg Curl\n3x8-12 Standing Calf Raise\n\nDay 4: (push)\n5x5 Overhead Press\n3x8 Incline Bench Press\n3x8 Bench Press\n3x8-12 Triceps Pushdown\n3x8-12 Triceps Extension superset with 3x8-12 Lateral Raise\n\nDay 5 (pull):\n5x5 Bent Over Row\n3x8 Lat Pulldown\n3x8 Seated Row\n3x12-15 Face Pull\n4x8-12 Incline Curl\n4x8-12 Hammer Curl\n\nDay 6 (legs):\n2x5 Squat\n3x8 Romanian Deadlift\n3x8 Leg Press\n3x8-12 Seated Leg Curl\n3x8-12 Standing Calf Raise", "category": "IT"}, {"instruction": "Who is George R.R. Martin?", "input": "George Raymond Richard Martin[1] (born George Raymond Martin; September 20, 1948),[2] also known as GRRM,[3] is an American novelist, screenwriter, television producer and short story writer. He is the author of the series of epic fantasy novels A Song of Ice and Fire, which were adapted into the Emmy Award-winning HBO series Game of Thrones (2011\u20132019) and its prequel series House of the Dragon (2022\u2013present). He also helped create the Wild Cards anthology series, and contributed worldbuilding for the 2022 video game Elden Ring.", "output": "George Raymond Richard Martin[1] (born George Raymond Martin; September 20, 1948),[2] also known as GRRM,[3] is an American novelist, screenwriter, television producer and short story writer. He is the author of the series of epic fantasy novels A Song of Ice and Fire, which were adapted into the Emmy Award-winning HBO series Game of Thrones (2011\u20132019) and its prequel series House of the Dragon (2022\u2013present). He also helped create the Wild Cards anthology series, and contributed worldbuilding for the 2022 video game Elden Ring.\n\nIn 2005, Lev Grossman of Time called Martin \"the American Tolkien\",[4][5][6] and in 2011, he was included on the annual Time 100 list of the most influential people in the world.[7][8] He is a longtime citizen of Santa Fe, New Mexico, where he helped fund Meow Wolf and owns the Jean Cocteau Cinema.[9][10][11][12] The city commemorates March 29 as George R. R. Martin Day.[13][14]", "category": "IT"}, {"instruction": "Is this hockey, baseball, or both?", "input": "", "output": "Puck, Ball, Ice, Dirt, Skates, Cleats, Gloves, Glove, Bat, Stick, Pads, Helmet", "category": "IT"}, {"instruction": "Why did George HW Bush lose the presidency?", "input": "Bush lost the 1992 presidential election to Democrat Bill Clinton following an economic recession, his turnaround on his tax promise, and the decreased emphasis of foreign policy in a post\u2013Cold War political climate.", "output": "George HW Bush lost the presidency due to an economic recession and his turnaround on a tax promise", "category": "IT"}, {"instruction": "Give me a list of the last five \"best rap song\" Grammy winners (just tell me the song name and the performing artist).", "input": "", "output": "1. The Heart Part 5 by Kendrick Lamar, 2023\n2. Jail by Kanye West featuring Jay-Z, 2022\n3. Savage by Megan Thee Stallion featuring Beyonc\u00e9, 2021\n4. A lot, 21 Savage featuring J. Cole, 2020\n5. God's plan, Drake, 2019", "category": "IT"}, {"instruction": "Identify and briefly discuss four \u201ccommandments\u201d for effective presidential relations with the Congress. Do you think a president needs a good relationship with Congress to be an effective president?", "input": "", "output": "There are ten commandments for effective presidential relationals.  I will discuss four of these commandments. The first that I will discuss is that the president should respect Congress as an equal institution. President Obama said, \u201cIf Congress doesn\u2019t act, I will.\u201d  He went on to use executive orders to enable the policy that he was trying to enact.  The problem with this method is that Trump was then able to revoke those acts, undoing all the work that Obama accomplished.  The second is bi-partisan support for Presidential programs.  If both sides take ownership of an issue, it tends to make it easier to enact policy.  Third, the President needs to be able to compromise.  If he can\u2019t compromise, he won\u2019t be able to effectively negotiate a bill with Congress.  Fourth is the President needs a sound program.  If the program has no chance of success, then Congress won\u2019t want to back it.\nIf we define a President as being effective when he creates lasting policy, then he obviously needs to have a good relationship with Congress.  If he\u2019s not able to work with Congress to pass legislation, then his only other option would be to use executive orders to enact policy, which will typically not live past his Presidency.", "category": "IT"}, {"instruction": "What functions have political parties served in American politics? Assess the strength of each aspect of the U.S. political parties\u2014the party in government, the party as organizations, and party in the electorate.", "input": "", "output": "The function of political parties is to present candidates for political office, have those candidates run in the parties name, and to win power when those candidates are elected.  Parties help candidates to solve the \u201csocial choice problem\u201d, \u201ccollective action problem\u201d and are a mechanism for elites to organize and communicate with voters.\nParties in government are strong.  Elected officials currently vote with the party on 90% of the issues.  The parties control the agenda, committee assignments, campaign contributions and fundraising, and encourage or discourage primary election challenges.  Parties are also strong with the electorate.  Only 13% of the population doesn\u2019t associate with either Democrats or Republicans to some degree, and those who do associate with a party will generally vote for that party's candidates. Party organizations are also strong as they raise large sums of money (about $600-$700 million in the last presidential election for each party) and enlist volunteers for campaigns.  There is also a trend where party organizations are contacting and mobilizing voters at an increasing rate.", "category": "IT"}, {"instruction": "What is the meaning of life?", "input": "The meaning of life, or the answer to the question: \"What is the meaning of life?\", pertains to the significance of living or existence in general. Many other related questions include: \"Why are we here?\", \"What is life all about?\", or \"What is the purpose of existence?\" There have been many proposed answers to these questions from many different cultural and ideological backgrounds. The search for life's meaning has produced much philosophical, scientific, theological, and metaphysical speculation throughout history. Different people and cultures believe different things for the answer to this question.\n\nThe meaning of life can be derived from philosophical and religious contemplation of, and scientific inquiries about existence, social ties, consciousness, and happiness. Many other issues are also involved, such as symbolic meaning, ontology, value, purpose, ethics, good and evil, free will, the existence of one or multiple gods, conceptions of God, the soul, and the afterlife. Scientific contributions focus primarily on describing related empirical facts about the universe, exploring the context and parameters concerning the \"how\" of life. Science also studies and can provide recommendations for the pursuit of well-being and a related conception of morality. An alternative, humanistic approach poses the question, \"What is the meaning of my life?\"", "output": "pertains to the significance of living or existence in general", "category": "IT"}, {"instruction": "What is the color of tennis balls?", "input": "Tennis balls were originally made of cloth strips stitched together with thread and stuffed with feathers. Modern tennis balls are made of hollow vulcanized rubber with a felt coating. Traditionally white, the predominant colour was gradually changed to optic yellow in the latter part of the 20th century to allow for improved visibility. Tennis balls must conform to certain criteria for size, weight, deformation, and bounce to be approved for regulation play. The International Tennis Federation (ITF) defines the official diameter as 65.41\u201368.58 mm (2.575\u20132.700 in). Balls must weigh between 56.0 and 59.4 g (1.98 and 2.10 oz).", "output": "Modern tennis balls are yellow.", "category": "IT"}, {"instruction": "Provide me some details about United States attorneys with the given text as a reference.", "input": "United States attorneys are officials of the U.S. Department of Justice who serve as the chief federal law enforcement officers in each of the 94 U.S. federal judicial districts. Each U.S. attorney serves as the United States' chief federal criminal prosecutor in their judicial district and represents the U.S. federal government in civil litigation in federal and state court within their geographic jurisdiction. U.S. attorneys must be nominated by the President and confirmed by the Senate, after which they serve four-year terms.", "output": "1. In each of the 94 federal court districts in the United States, United States attorneys are representatives of the U.S. Department of Justice who act as the top federal law enforcement officials.\n2. Each U.S. attorney represents the U.S. federal government in civil action in federal and state court within their geographic jurisdiction and acts as the country's top federal criminal prosecutor in their judicial district.\n3. U.S. attorneys serve four-year terms after being appointed by the President and being confirmed by the Senate.", "category": "IT"}, {"instruction": "Classify the following based on what kind of animals they are.\nrodentia, chiroptera, lizards, primates, crocodiles, soricomorpha, turtles, snakes", "input": "", "output": "Reptiles- lizards, crocodiles, turtles, snakes\nMammals- rodentia, chiroptera, soricomorpha, primates", "category": "IT"}, {"instruction": "Give me a list of the best bikes for riding on roads.", "input": "", "output": "The best bikes for riding on the road are Cervelo, BMC, Pinarello, Specialized and Felt.", "category": "IT"}, {"instruction": "What dispatchable source of power on electric grids are faster than battery storage power stations?", "input": "A battery storage power station is a type of energy storage power station that uses a group of batteries to store electrical energy. Battery storage is the fastest responding dispatchable source of power on electric grids, and it is used to stabilise those grids, as battery storage can transition from standby to full power in under a second to deal with grid contingencies.\n\nAt full rated power, battery storage power stations are generally designed to output for up to a few hours. Battery storage can be used for short-term peak power and ancillary services, such as providing operating reserve and frequency control to minimize the chance of power outages. They are often installed at, or close to, other active or disused power stations and may share the same grid connection to reduce costs. Since battery storage plants require no deliveries of fuel, are compact compared to generating stations and have no chimneys or large cooling systems, they can be rapidly installed and placed if necessary within urban areas, close to customer load.", "output": "None. Battery storage is the fastest responding dispatchable source of power on electric grids.", "category": "IT"}, {"instruction": "How do banks make money?", "input": "", "output": "Traditionally, banks accept deposits and loan that money to borrowers providing a time arbitrage on the velocity of money which regulates in profit. In more recent years, banks have diversified their profit centers by investing those deposits in fixed income securities. There has even been a proliferation of into multiple types of banks. Some of these banks include investment banks which transact in the capital markets pairing investors with capital seeking counterparties. The most innovative banks are starting to see how data can become a profit center as well as allow them to provide a better customer experience.", "category": "IT"}, {"instruction": "Which animal is associated with Chengdu?", "input": "\"Chengtu, is a sub-provincial city which serves as the capital of the Chinese province of Sichuan. With a population of 20,937,757 inhabitants during the 2020 Chinese census,[8] it is the fourth most populous city in China, and it is the only city apart from the four direct-administered municipalities with a population of over 20 million. It is traditionally the hub in Southwest China.\n\nChengdu is located in central Sichuan. The surrounding Chengdu Plain is known as the \"\"Country of Heaven\"\" (Chinese: \u5929\u5e9c\u4e4b\u56fd; pinyin: Ti\u0101nf\u01d4 zhi Gu\u00f3) and the \"\"Land of Abundance\"\". Its prehistoric settlers included the Sanxingdui culture. The site of Dujiangyan, an ancient irrigation system, is designated as a World Heritage Site.[9] The Jin River flows through the city. Chengdu's culture largely reflects that of its province, Sichuan; in 2011, it was recognized by UNESCO as a city of gastronomy.[10] It is associated with the giant panda, a Chinese national symbol, which inhabits the area of Sichuan; the city is home to the Chengdu Research Base of Giant Panda Breeding.\"", "output": "Chengdu is associated with the giant panda, a Chinese national symbol, which inhabits the area of Sichuan; the city is home to the Chengdu Research Base of Giant Panda Breeding.", "category": "IT"}, {"instruction": "What was the Golden State Warriors win-loss record in the 1964-65 season ?", "input": "The Warriors won the inaugural Basketball Association of America (BAA) championship in 1947,[c] and won again in 1956, led by Hall of Fame trio Paul Arizin, Tom Gola, and Neil Johnston. After the trade of star Wilt Chamberlain in January 1965, the team finished the 1964\u201365 season with the NBA's worst record (17\u201363). Their rebuilding period was brief due in large part to the Warriors' drafting of Rick Barry four months after the trade. In 1975, star players Barry and Jamaal Wilkes powered the Warriors to their third championship, widely considered one of the biggest upsets in NBA history.", "output": "The Golden State Warriors record in the 1964-65 season was 17 wins and 63 losses.", "category": "IT"}, {"instruction": "Which country has the most inhabitants?", "input": "", "output": "#\tCountry (or dependency)\tPopulation (2020)\n1\tChina\t1,439,323,776\n2\tIndia\t1,380,004,385\n3\tUnited States\t331,002,651\n4\tIndonesia\t273,523,615", "category": "IT"}, {"instruction": "Which of the following two-dimensional shapes are made using only curved lines? And which use only straight lines? oval, rectangle, square, pentagon, circle and rhombus.", "input": "", "output": "The oval and circle are made using only curved lines.\nThe square, pentagon, rectangle and rhombus are made using only straight lines.", "category": "IT"}, {"instruction": "Why do people use computer mice?", "input": "", "output": "People use computer mice because most graphical user interfaces are designed to be navigated with a cursor that is moved with a mouse. Mice also typically have buttons that can be used to click on interface elements", "category": "IT"}, {"instruction": "Identify the bird from the list: Pendulum, Bewick's swan, Iceberg", "input": "", "output": "Bewick's swan", "category": "IT"}, {"instruction": "Given this paragraph about hockey what are different surfaces that hockey is played on?", "input": "Hockey is a term used to denote a family of various types of both summer and winter team sports which originated on either an outdoor field, sheet of ice, or dry floor such as in a gymnasium. While these sports vary in specific rules, numbers of players, apparel and, notably, playing surface, they share broad characteristics of two opposing teams using a stick to propel a ball or disk into a goal.", "output": "Hockey can refer to Ice Hockey, Field Hockey, or Ball Hockey. Each are played on a different surface like a sheet of ice, a gymnasium floor, or an outdoor field.", "category": "IT"}, {"instruction": "Where can you find the Citron-bellied attila?", "input": "The citron-bellied attila (Attila citriniventris) is a species of bird in the family Tyrannidae.\n\nIt is found in Brazil, Colombia, Ecuador, Peru, and Venezuela. Its natural habitat is subtropical or tropical moist lowland forests.", "output": "The The citron-bellied attila (Attila citriniventris) can be found in the following countries: Brazil, Colombia, Ecuador, Peru and Venezuela.", "category": "IT"}, {"instruction": "What does HEMA stand for? \u200b\u200b", "input": "", "output": "HEMA stands for Historical European Martial Arts. It is a type of martial art that combines the techniques of historical European martial arts with modern techniques.", "category": "IT"}, {"instruction": "Why are some reasons to vacation in New Zealand?", "input": "", "output": "People love to vacation in New Zealand for many reasons.  Some of the most popular are  because of its beautiful and varied landscapes, the opportunities to see unique wildlife, and the ability to participate in extreme activities such as paragliding, jet boating, bungee jumping, sky diving, canyoning, and mountaineering.", "category": "IT"}, {"instruction": "What is a mutual fund?", "input": "", "output": "A mutual fund is a type of investment that includes a well diversified pool of stocks across a broad range of industry verticals.  Many investors invest in mutual funds and usually stay in them for the long term.  It is a good idea to diversify a stock portfolio like a 401k with mutual funds that have annual percentage return on the average of about 10% - 12%.  This is great way to get a good return on your money without having to actively manage your brokerage account.", "category": "IT"}, {"instruction": "Why is the United States Military Academy called West Point?", "input": "", "output": "The United States Military Academy is called West Point because it is on the western point of an S-turn on the Hudson River.  During the American Revolution, the Revolutionary Army stretched an iron chain across the Hudson at this point because British ships would have to slow down to navigate the S-turn, making them susceptible to cannon fire.  The British never tested the chain, and their Naval forces remained separated in Canada and New York.  Due to its success on the western point of the river, the United States Military Academy has been commonly referred to as \"West Point,\" since the military academy became the first training institution for U.S. Army officers in 1802.", "category": "IT"}, {"instruction": "Name three movies with Denzel Washington.", "input": "", "output": "Three movies with Denzel Washington are Remember the Titans, Flight, and The Book of Eli.", "category": "IT"}, {"instruction": "Extract the names of Jesse LaFollette's grandchildren from the provided passage", "input": "Jesse LaFollette (1781 NJ-1843 Ind) was the grandfather of Robert Marion La Follette, Sr., William La Follette, and Harvey Marion LaFollette. His family lived next to the Knob Creek Farm, Kentucky owned by Thomas Lincoln during Abraham Lincoln's boyhood years.[1] LaFollette is shown in one of the limestone panels at the Lincoln Boyhood National Memorial in Lincoln City, Indiana.[2]", "output": "Robert Marion La Follette, Sr., William La Follette, and Harvey Marion LaFollette", "category": "IT"}, {"instruction": "Different uses for glass", "input": "", "output": "There are many but here are just a few. \n-Bulbs \n-Vases\n-Windows\n-Drinking glass\n-Screens\n-Plates\n-Candles holder\n-Water Bottles\n-table top \n-French Door Glass\n-Slippers (if you are a cinderella fan)\n-Ash tray \n-coasters \n-Cooking pots", "category": "IT"}, {"instruction": "What is Delta Lake?", "input": "", "output": "Delta Lake is an open source storage layer that brings reliability to data lakes. Delta Lake provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. Delta Lake runs on top of your existing data lake and is fully compatible with Apache Spark APIs.", "category": "IT"}, {"instruction": "What is it inflation?", "input": "", "output": "In economics, inflation is an increase in the general price level of goods and services in an economy. When the general price level rises, each unit of currency buys fewer goods and services; consequently, inflation corresponds to a reduction in the purchasing power of money.", "category": "IT"}, {"instruction": "What was the first functional submarine called?", "input": "", "output": "The Turtle was made of wood and used in the American Revolution.", "category": "IT"}, {"instruction": "What are three popular mezzo-soprano arias?", "input": "", "output": "Three of the most commonly sung mezzo-soprano arias are:\n\"Habanera\" from the opera Carmen by Bizet\n\"Voi che sapete\" from the opera Le Nozze di Figaro by Mozart\n\"Che faro\" from the opera Orfeo ed Euridice by Gluck", "category": "IT"}, {"instruction": "Which medical tool was developed by Sanctorius in 1612", "input": "", "output": "Thermometer", "category": "IT"}, {"instruction": "Classify each of the following as either a flying or aquatic animal: salmon, eagle, dolphin, whale, octopus, bat, goose", "input": "", "output": "Among the given list, salmon, dolphin, whale, octopus are aquatic animals whereas eagle, bat and goose are flying animals.", "category": "IT"}, {"instruction": "In climbing, what is a hand jam?", "input": "", "output": "Hand jamming is a technique used in crack climbing used to support the climbers upper body. The climber places their hand in a crack, then flexes their thumb towards the palm to expand their hand, creating friction between the sides of the crack and the base of the thumb and back of the hand. There are many variations on the technique depending on the size of the climber, the size of the crack, and the circumstances of the route.", "category": "IT"}, {"instruction": "What is Venezuela?", "input": "Venezuela (/\u02ccv\u025bn\u0259\u02c8zwe\u026al\u0259/; American Spanish: [bene\u02c8swela] (listen)), officially the Bolivarian Republic of Venezuela (Spanish: Rep\u00fablica Bolivariana de Venezuela),[12] is a country on the northern coast of South America, consisting of a continental landmass and many islands and islets in the Caribbean Sea. It has a territorial extension of 916,445 km2 (353,841 sq mi), and its population was estimated at 29 million in 2022.[13] The capital and largest urban agglomeration is the city of Caracas.", "output": "Venezuela (/\u02ccv\u025bn\u0259\u02c8zwe\u026al\u0259/; American Spanish: [bene\u02c8swela] (listen)), officially the Bolivarian Republic of Venezuela (Spanish: Rep\u00fablica Bolivariana de Venezuela),[12] is a country on the northern coast of South America, consisting of a continental landmass and many islands and islets in the Caribbean Sea. It has a territorial extension of 916,445 km2 (353,841 sq mi), and its population was estimated at 29 million in 2022.[13] The capital and largest urban agglomeration is the city of Caracas.\n\nThe continental territory is bordered on the north by the Caribbean Sea and the Atlantic Ocean, on the west by Colombia, Brazil on the south, Trinidad and Tobago to the north-east and on the east by Guyana. The Venezuelan government maintains a claim against Guyana to Guayana Esequiba.[14] Venezuela is a federal presidential republic consisting of 23 states, the Capital District and federal dependencies covering Venezuela's offshore islands. Venezuela is among the most urbanized countries in Latin America;[15][16] the vast majority of Venezuelans live in the cities of the north and in the capital.\n\nThe territory of Venezuela was colonized by Spain in 1522 amid resistance from indigenous peoples. In 1811, it became one of the first Spanish-American territories to declare independence from the Spanish and to form part, as a department, of the first federal Republic of Colombia (historiographically known as Gran Colombia). It separated as a full sovereign country in 1830. During the 19th century, Venezuela suffered political turmoil and autocracy, remaining dominated by regional military dictators until the mid-20th century. Since 1958, the country has had a series of democratic governments, as an exception where most of the region was ruled by military dictatorships, and the period was characterized by economic prosperity. Economic shocks in the 1980s and 1990s led to major political crises and widespread social unrest, including the deadly Caracazo riots of 1989, two attempted coups in 1992, and the impeachment of a President for embezzlement of public funds charges in 1993. The collapse in confidence in the existing parties saw the 1998 Venezuelan presidential election, the catalyst for the Bolivarian Revolution, which began with a 1999 Constituent Assembly, where a new Constitution of Venezuela was imposed. The government's populist social welfare policies were bolstered by soaring oil prices,[17] temporarily increasing social spending,[18] and reducing economic inequality and poverty in the early years of the regime.[19] However, poverty began to increase in the 2010s.[20] The 2013 Venezuelan presidential election was widely disputed leading to widespread protest, which triggered another nationwide crisis that continues to this day.[21] Venezuela has experienced democratic backsliding, shifting into an authoritarian state.[22] It ranks low in international measurements of freedom of the press and civil liberties and has high levels of perceived corruption.[23]\n\nVenezuela is a developing country and ranks 113th on the Human Development Index. It has the world's largest known oil reserves and has been one of the world's leading exporters of oil. Previously, the country was an underdeveloped exporter of agricultural commodities such as coffee and cocoa, but oil quickly came to dominate exports and government revenues. The excesses and poor policies of the incumbent government led to the collapse of Venezuela's entire economy.[24][25] The country struggles with record hyperinflation,[26][27] shortages of basic goods,[28] unemployment,[29] poverty,[30] disease, high child mortality, malnutrition, severe crime and corruption. These factors have precipitated the Venezuelan migrant crisis where more than three million people have fled the country.[31] By 2017, Venezuela was declared to be in default regarding debt payments by credit rating agencies.[32][33] The crisis in Venezuela has contributed to a rapidly deteriorating human rights situation, including increased abuses such as torture, arbitrary imprisonment, extrajudicial killings and attacks on human rights advocates. Venezuela is a charter member of the UN, Organization of American States (OAS), Union of South American Nations (UNASUR), ALBA, Mercosur, Latin American Integration Association (LAIA) and Organization of Ibero-American States (OEI).", "category": "IT"}, {"instruction": "Where is the first Summer Olympics held?", "input": "", "output": "Athens, Greece 1896", "category": "IT"}, {"instruction": "When did Harriet live in the Andaman Islands?", "input": "The Tytlers were introduced to photography by Felix Beato and Dr John Murray of Agra. In May 1857 the couple were resident in the military cantonments outside Delhi, where Robert Tytler's regiment, the 38th Bengal Native Infantry was one of the first to mutiny during the great rebellion of that year. Because she was heavily pregnant, Harriet was allowed to stay on and was the only British woman present at the Siege of Delhi. She later gave birth in a donkey cart while escaping to safer areas. They named this third child Stanley Delhi-Force Tytler.[4][5] From 1862 to 1864 she lived in the Andaman Islands where her husband was posted as a Superintendent of the Ross Island Penal Colony, a Penal Settlement (which was established mainly to house prisoners from the 1857 uprising). The region around a 1100 foot high hill in the South Andamans, which was named after her as Mt. Harriet(now known as mount manipur),[6] was cleared of forest by Tytler. The area is now protected as the Mount Harriet National Park. Tytler's tenure in the Andamans was short and they moved to Shimla. In Shimla, Harriet founded an Asiatic Christian Orphanage.[7] She died in Shimla on 24 November 1907.", "output": "Between 1862 and 1864.", "category": "IT"}, {"instruction": "What are good tips to drive in the snow?", "input": "", "output": "Driving in the snow can be a fun experience but it can be equally dangerous. Always prepare a medical kit and a bag of supplies such as potable water bottles, imperishable items, and a radio in case of emergencies. Make sure your vehicle has four wheel traction, and if necessary, install snow chains on the tires. If you find yourself in a snowstorm, drive extra carefully, and drive slow and safe until you obtain better visibility.", "category": "IT"}, {"instruction": "Who was the US president when WWII ended?", "input": "", "output": "Harry S. Truman was the US president at the end of World War II", "category": "IT"}, {"instruction": "Who was Henry Ford?", "input": "", "output": "Henry Ford (July 30, 1863 \u2013 April 7, 1947) was an American industrialist and business magnate. He was the founder of Ford Motor Company, and chief developer of the assembly line technique of mass production. Ford created the first automobile that middle-class Americans could afford, and his conversion of the automobile from an expensive luxury into an accessible conveyance profoundly impacted the landscape of the 20th century.\n\nFord was born on a farm in Michigan's Springwells Township to a Belgian family, leaving home at age 16 to work in Detroit. It was a few years before this time that Ford first experienced automobiles, and throughout the later half of the 1880s, Ford began repairing and later constructing engines, and through the 1890s worked with a division of Edison Electric. He officially founded Ford Motor Company in 1903, after prior failures in business but success in constructing automobiles.\n\nFord's 1908 introduction of the Model T automobile revolutionized both transportation and American industry. As the Ford Motor Company sole owner, he became one of the richest and best-known people in the world. He is credited with \"Fordism\", the mass production of inexpensive goods coupled with high wages for workers. Ford was also among the pioneers of the five-day work week. Ford had a global vision, with consumerism as the key to peace. His intense commitment to systematically lowering costs resulted in many technical and business innovations, including a franchise system that put dealerships throughout North America and major cities on six continents.\n\nFord was widely known for his pacifism during the first years of World War I. In the 1920s Ford promoted antisemitic content through his newspaper The Dearborn Independent, and the book, The International Jew. After his son Edsel died in 1943, Ford resumed control of the company but was too frail to make decisions and quickly came under the control of subordinates. He turned over the company to his grandson Henry Ford II in 1945. He died in 1947 after leaving most of his wealth to the Ford Foundation, and control of the company to his family.", "category": "IT"}, {"instruction": "Give me a list of actresses who won an Oscar in the last 5 years and tell me for which movie they won it.", "input": "", "output": "1. Michelle Yeoh 2022, Everything Everywhere All At Once\n2. Jessica Chastain, 2021, The Eyes of Tammy Faye\n3. Frances McDormand, 2020, Nomadland\n4. Ren\u00e9e Zellweger, 2019, Judy\n5. Olivia Colman, 2018, The Favourite", "category": "IT"}, {"instruction": "If Rosslyn Mountain Boys had produced two more albums, how many albums would they have produced?", "input": "Rosslyn Mountain Boys was a band that backed up a number of nationally known singers, and released two albums of their own.", "output": "Rosslyn Mountain Boys produced two albums on their own, so if they produced two more albums then they would have produced four albums.", "category": "IT"}, {"instruction": "What is the show Parks and Rec about?", "input": "", "output": "Parks and Rec is an American sitcom about the Parks and Recreation department of a small town in Indiana called Pawnee.", "category": "IT"}, {"instruction": "Extract from the paragraph the winner of the 2022 World Snooker Championship.", "input": "The 2022 World Snooker Championship (officially the 2022 Betfred World Snooker Championship) was a professional snooker tournament that took place from 16 April to 2 May 2022 at the Crucible Theatre in Sheffield, England, the 46th consecutive year the World Snooker Championship was held at the venue. The 16th and final ranking event of the 2021\u201322 snooker season, the tournament was organised by the World Snooker Tour and sponsored by sports betting company Betfred. It was broadcast in the United Kingdom by the BBC, in Europe (including the UK) by Eurosport, and elsewhere in the world by Matchroom Sport and other broadcasters. The total prize fund was \u00a32,395,000, of which the winner received \u00a3500,000.\n\nQualifying rounds for the tournament took place from 4 to 13 April 2022 at the English Institute of Sport, featuring 128 professional and invited amateur players. The main stage of the tournament featured 32 players: the top 16 players from the snooker world rankings and another 16 players from the qualifying rounds. Ashley Hugill, Jackson Page, and Hossein Vafaei were debutants at the Crucible, Vafaei being the first Iranian player to reach the main stage. Mark Selby was the defending champion, having won the 2021 final 18\u201315 against Shaun Murphy. He lost 10\u201313 to Yan Bingtao in a second-round match that produced the longest frame ever played at the Crucible, lasting 85 minutes.\n\nRonnie O'Sullivan equalled Steve Davis's record of 30 Crucible appearances. He reached a record 20th quarter-final and a record 13th semi-final before defeating Judd Trump 18\u201313 in the final to equal Stephen Hendry's record of seven world titles. It was O'Sullivan's 39th ranking title and 21st Triple Crown title. Aged 46 years and 148 days, he became the oldest world champion in the sport's history, surpassing Ray Reardon, who was aged 45 years and 203 days when he won his last world title in 1978. O'Sullivan also broke Hendry's record of 70 wins at the Crucible, setting a new record of 74.\n\nNeil Robertson made a maximum break in his second-round match against Jack Lisowski, the fifth of his career and the 12th time a 147 had been achieved at the Crucible. Graeme Dott also made a maximum break in his third-round qualifying match against Pang Junxu, the second of his career and the fifth time that a maximum had been made in the World Championship qualifiers. The main stage produced a record 109 century breaks, surpassing the 108 centuries made the preceding year. Mark Williams made 16 centuries during the event, equalling the record set by Hendry in 2002.", "output": "Ronnie O'Sullivan", "category": "IT"}, {"instruction": "What makes Alabama Football coach Nick Saban so good at his job?", "input": "", "output": "Nick Saban is process oriented. This is exemplified by his team's focus on processes rather than results. The philosophy is centered around the idea that building a \"championship process\" is the key to success. Focusing on improving your processes (e.g. tackling, blocking, footwork, catching, reading the defense) as opposed to being results-oriented will carry you further. Chasing results can cause someone to re-invent the wheel when they don't achieve immediate success, whereas being process-oriented allows you to hone in and improve upon the skill set needed to consistently reach your goals.", "category": "IT"}, {"instruction": "What is Pinot Noir?", "input": "Pinot noir (French: [pino nwa\u0281]) is a red-wine grape variety of the species Vitis vinifera. The name may also refer to wines created predominantly from pinot noir grapes. The name is derived from the French words for pine and black. The word pine alludes to the grape variety having tightly clustered, pinecone\u2013shaped bunches of fruit.\n\nPinot noir is grown around the world, mostly in cooler climates, and the variety is chiefly associated with the Burgundy region of France. Pinot noir is now used to make red wines around the world, as well as champagne, sparkling white wines such as the Italian Franciacorta, and English sparkling wines. Regions that have gained a reputation for red pinot noir wines include the Willamette Valley of Oregon; the Carneros, Central Coast, Sonoma Coast, and Russian River AVAs of California; the Elgin and Walker Bay wine regions of South Africa; the Mornington Peninsula, Adelaide Hills, Great Southern, Tasmania, and Yarra Valley in Australia; and the Central Otago, Martinborough, and Marlborough wine regions of New Zealand. Pinot noir is the most planted varietal (38%) used in sparkling wine production in Champagne and other wine regions.", "output": "Pinot noir (French: [pino nwa\u0281]) is a red-wine grape variety of the species Vitis vinifera. Pinot noir is grown around the world, mostly in cooler climates, and the variety is chiefly associated with the Burgundy region of France. Pinot noir is now used to make red wines around the world, as well as champagne, sparkling white wines such as the Italian Franciacorta, and English sparkling wines.", "category": "IT"}, {"instruction": "Extract the factors that influence the cost of building a house", "input": "The cost of building a house varies by country widely. According to data from the National Association of Realtors, the median cost of buying an existing single-family house in the United States is $274,600, whereas the average cost to build is $296,652.[9][10] Several different factors can impact the cost of building a house, including the size of the dwelling, the location, and availability of resources, the slope of the land, the quality of the fixtures and fittings, and the difficulty in finding construction and building materials talent", "output": "The factors that influence the cost of building a house are, the size of the dwelling, the location, and availability of resources, the slope of the land, the quality of the fixtures and fittings, and the difficulty in finding construction and building materials talent", "category": "IT"}]
[{"instruction": "Who scored first in Austin FC's first victory in a home game in the 2021 MLS season?", "input": "Austin FC played their first MLS match against LAFC at Banc of California Stadium on April 17, 2021, losing 0\u20132. The club secured its first victory the following week against the Colorado Rapids, winning 3\u20131. Diego Fag\u00fandez scored the club's first goal and the following two were scored by the club's first Designated Player, Cecilio Dominguez.[22] Their home opener was held on June 19, 2021, against the San Jose Earthquakes, a match which ended in a scoreless draw.[23] The team secured its first ever home victory on July 1, 2021, defeating the Portland Timbers 4\u20131. Jon Gallagher scored the team's first home goal and the first MLS goal at Q2 Stadium.[24]", "output": "Jon Gallagher scored the first goal in Austin FC's first win at home, over the Portland Timbers.", "category": "IT"}, {"instruction": "What are some of the common elements of visual design?", "input": "Design elements are the basic units of any visual design which form its structure and convey visual messages. Painter and design theorist Maitland E. Graves (1902-1978), who attempted to gestate the fundamental principles of aesthetic order in visual design,[3] in his book, The Art of Color and Design (1941), defined the elements of design as line, direction, shape, size, texture, value, and color, concluding that \"these elements are the materials from which all designs are built.\"", "output": "Line, shape, size, texture, color and direction are some of the common visual design elements.", "category": "IT"}, {"instruction": "What type of cheeses can you use to make a grilled cheese sandwich.", "input": "A grilled cheese sandwich is made by placing a cheese filling, often cheddar or American cheese, between two slices of bread, which is then heated until the bread browns and the cheese melts. A layer of butter or mayonnaise may be added to the outside of the bread for additional flavor and texture. Alternatives may include additional ingredients, such as meat, peppers, tomatoes, or onions.[3] Methods for heating the sandwich include cooking on a griddle, fried in a pan, or using a panini grill or sandwich toaster, the latter method more common in the United Kingdom, where the sandwiches are normally called \"toasted sandwiches\" or \"toasties\", in Australia, where they are called \"jaffles\" or \"toasted sandwiches\", and South Africa, where they are called \u201csnackwiches\u201d. Other methods include baking in an oven or toaster oven \u2014 or in a toasting bag in an electric toaster.", "output": "Common cheeses to make a grilled cheese are cheddar or American cheese, although you are not limited to those cheeses.  Depending on a persons preferences there are a large variety of cheeses that are well suited for a grilled cheese sandwich. Many people enjoy Swiss cheese, provolone, mozzarella cheese, brie, Monterey jack cheese, pepper jack cheese,  gouda, havarti, fontina and many others.", "category": "IT"}, {"instruction": "What is the tiny piece at the end of a shoelace called?", "input": "", "output": "An Aglet.", "category": "IT"}, {"instruction": "What links Brazil, Uruguay, Mozambique and Angola", "input": "", "output": "Colonies of Portugal", "category": "IT"}, {"instruction": "What the the effects of houseplants?", "input": "Houseplants do not have an appreciable effect on the concentration of volatile organic compounds (VOCs) in normal home environments: it would require between 10 and 1000 houseplants per square meter to achieve the same level of VOC removal as occurs from passive exchange between indoor and outdoor air. [41]\n\nThe idea that houseplants have an appreciable effect on indoor air quality is largely based on the Clean Air Study conducted by NASA in the 1980s.[41][42] The study tested plants in sealed chambers and with highly elevated levels of volatile organic compounds (specifically benzene, trichloroethylene and formaldehyde). It concluded that to the extent that houseplants improve air quality, the mechanism of action is microorganisms within the potting soil, rather than the plants themselves.[43][44][45]\n\nHouseplants do have a statistically significant effect on the concentrations of both carbon monoxide and carbon dioxide in normal indoor environments, reducing carbon dioxide levels by 10-25% and carbon monoxide levels by up to 90%. [46] The effect has been investigated by NASA for use in spacecraft.[47]\n\nPlants also appear to increase the number and diversity of bacteria in homes, while reducing fungal diversity.[48] They tend to increase humidity, reduce temperature swings, and reduce noise.[49]\n\nThere are also many claimed psychological and physiological benefits to having houseplants. A critical review of the experimental literature concluded \"The reviewed studies[50][51] suggest that indoor plants can provide psychological benefits such as stress-reduction and increased pain tolerance. However, they also showed substantial heterogeneity in methods and results. We therefore have strong reservations about general claims that indoor plants cause beneficial psychological changes. It appears that benefits are contingent on features of the context in which the indoor plants are encountered and on characteristics of the people encountering them.\"[52]", "output": "There are also many claimed psychological and physiological benefits to having houseplants. Houseplants do have a statistically significant effect on the concentrations of both carbon monoxide and carbon dioxide in normal indoor environments. \nPlants also appear to increase the number and diversity of bacteria in homes, while reducing fungal diversity.They tend to increase humidity, reduce temperature swings, and reduce noise. There are also many claimed psychological and physiological benefits to having houseplants. Indoor plants can provide psychological benefits such as stress-reduction and increased pain tolerance.", "category": "IT"}, {"instruction": "Who were the original 5 members of the Grateful Dead?", "input": "", "output": "The original 5 members of the Grateful Dead were Jerry Garcia, Bob Weir, Phil Lesh, Bill Kreutzmann, and Ron \"Pigpen\" McKernan", "category": "IT"}, {"instruction": "How is the The U.S. Naturalization Interview and test done?", "input": "", "output": "During your naturalization interview, a USCIS officer will ask you questions about your application and background. Unless you qualify for an exemption, you will also take a naturalization test which is made up of two components, an English and civics test.\n\nDuring the English test, you must demonstrate an understanding of the English language including the ability to read, write, and speak basic English. \nDuring the civics test, you will answer important questions about American government and history.", "category": "IT"}, {"instruction": "What is Magical Thinking?", "input": "Magical thinking, or superstitious thinking,[1] is the belief that unrelated events are causally connected despite the absence of any plausible causal link between them, particularly as a result of supernatural effects.[1][2][3] Examples include the idea that personal thoughts can influence the external world without acting on them, or that objects must be causally connected if they resemble each other or have come into contact with each other in the past.[1][2][4] Magical thinking is a type of fallacious thinking and is a common sour", "output": "Magical thinking is the belief that unrelated events are causally connected despite the absence of any plausible causal link between them.", "category": "IT"}, {"instruction": "List top 5 people with most silver medals in the olympics", "input": "", "output": "1. Larisa Latynina - 5 medals\n2. Nikolai Andrianov - 5 medals\n3. Edoardo Mangiarotti - 5 medals\n4. Ireen Wust - 5 medals\n5. Isabell Werth - 5 medals", "category": "IT"}, {"instruction": "Based on this paragraph, how many times has Joe Biden run for president and what characteristics make him unique among all past presidents?", "input": "Born in Scranton, Pennsylvania, Biden moved with his family to Delaware in 1953. He studied at the University of Delaware before earning his law degree from Syracuse University. He was elected to the New Castle County Council in 1970 and became the sixth-youngest senator in U.S. history after he was elected in 1972, at age 29. Biden was the chair or ranking member of the Senate Foreign Relations Committee for 12 years. He chaired the Senate Judiciary Committee from 1987 to 1995; drafted and led the effort to pass the Violent Crime Control and Law Enforcement Act and the Violence Against Women Act; and oversaw six U.S. Supreme Court confirmation hearings, including the contentious hearings for Robert Bork and Clarence Thomas. Biden ran unsuccessfully for the Democratic presidential nomination in 1988 and 2008. Barack Obama chose Biden as his running mate in the 2008 and 2012 presidential elections. Biden was a close counselor to Obama during his two terms as Obama's vice president. Biden and his running mate, Kamala Harris, defeated incumbents Donald Trump and Mike Pence in the 2020 presidential election. On January 20, 2021, he became the oldest president in U.S. history, the first to have a female vice president, and the first from Delaware. \nhttps://en.wikipedia.org/wiki/Joe_Biden", "output": "Based on this paragraph, Joe Biden has run for president three times, losing in 1988 and 2008 and eventually winning in 2020. As president, he is unique in three ways: the first to have a female vice president, and the first president from the state of Delaware.", "category": "IT"}, {"instruction": "What articles of clothes are often worn by people in summer months?", "input": "", "output": "In summer, when the weather is warmer, it is typical for people to wear shorts or skirts, light shirts, and sandals. People can also wear swimming suits with cover ups if they are somewhere where swimming is likely, such as a beach, pool, or water park.", "category": "IT"}, {"instruction": "Which Dutch actress played Xenia Onatopp in the James Bond movie GoldenEye?", "input": "", "output": "Dutch actress Marijke Janssen played Xenia Onatopp in the James Bond movie GoldenEye.", "category": "IT"}, {"instruction": "Which of the 10 largest earthquakes was the deadliest?", "input": "Largest Earthquakes ever recorded\nThe 10 largest magnitudes in recorded history\n1. Valdivia, Chile 22 May 1960 (magnitude 9.5)\nThis earthquake killed 1655 people, injured 3000 and displaced two million. It caused US$550 million damage in Chile, while the tsunami that it spawned caused deaths and damage as far away as Hawaii, Japan and the Philippines. The 'rupture zone' of the quake was more than 1000 km long. Two days after the initial quake, the nearby volcano Puyehue erupted, sending ash and steam up to 6 km into the atmosphere over a period of several weeks.\n\n2. Prince William Sound, Alaska 28 March 1964 (magnitude 9.2)\nCompared to the Chilean earthquake, this earthquake was less damaging: the resulting tsunami took 128 lives and caused overall US$311 million in damage. The earthquake was felt mainly over Alaska, as well as some places in Canada, while the tsunami created by it caused damage as far away as Hawaii. The most damage was sustained by the city of Anchorage, 120 km north-west of the epicentre. Shaking from the quake itself is reported to have lasted for three minutes.\n\n3. Sumatra, Indonesia 26 December 2004 (magnitude 9.1)\nIn terms of damage and loss of life, the scale of the disaster caused by the resulting Boxing Day Tsunami was enormous. In total, 227,900 people were killed or presumed dead, with around 1.7 million displaced over 14 countries in South Asia and East Africa. The epicentre was 250 km south-east of Band Aceh, Indonesia, at a depth of 30 km. Several days later on 28 December, a mud volcano began erupting near Baratang, Andamar Islands, which is thought to have been associated with the earthquake.\n\n4. Sendai, Japan 11 March 2011 (magnitude 9.0)\nSo far the official death toll stands at several thousand from the combined effect of the powerful earthquake, aftershocks and the tsunami. However, the total is expected to rise, with some estimates of a final toll of over 10,000. Economic impacts are expected to be huge, with the shutting down of nuclear reactors which many industries rely on for power.\n\n5. Kamchatka, Russia 4 November 1952 (magnitude 9.0)\nThis earthquake generated a tsunami that caused widespread damage in the Hawaiian Islands. Property damage was estimated at around US$1,000,000. Some reports describe waves of over 9 m high at Kaena Point, Oahu. A farmer on Oahu reported the loss of six cows to the tsunami, but no people were reported killed.\n\n6. Bio-bio, Chile 27 February 2010 (magnitude 8.8)\nThis earthquake and subsequent tsunami killed at least 521 people, with 56 missing and 12,000 injured. More than 800,000 people were displaced with a total of 1.8m people affected across Chile, where damage was estimated at US$30 billion. The epicentre was 335 km south-west of Santiago, at a depth of 35 km. A minor tsunami travelled across the Pacific causing damage to boats as far away as San Diego, California.\n\n7. Off the coast of Ecuador 31 January 1906 (magnitude 8.8)\nThis earthquake caused a tsunami that is reported to have killed between 500 and 1,500 in Ecuador and Colombia. The tsunami travelled as far north as San Francisco, on the west coast of the US, and west to Hawaii and Japan. The tsunami took roughly 12 hours to cross the Pacific to Hilo, Hawaii.\n\n8. Rat Islands, Alaska 2 April 1965 (magnitude 8.7)\nThe worst of the damage attributed to this earthquake was caused by a tsunami, reported to be about 10 m high on Shemya Island. The wave caused flooding on Amchitka Island, causing US$10,000 in property damage. No deaths or injuries were reported.\n\n9. Sumatra, Indonesia 28 March 2005 (magnitude 8.6)\nThis earthquake killed 1313, with over 400 people injured by the tsunami as far away as Sri Lanka. The epicentre was 205 km north-west of Sibolga, Sumatra, at a depth of 30 km. This region, also the site of the 2004 Boxing Day Tsunami, is particularly geologically active, with three of the 15 biggest known earthquakes having happened here.\n\n10. Assam - Tibet 15 August 1950 (magnitude 8.6)\nThis inland earthquake caused widespread damages to buildings as well as large landslides. 780 people were killed in eastern Tibet, with many villages and towns affected across Assam, China, Tibet and India. Oscillations to lake levels occurred as far away as Norway. The total death toll is likely to be higher, as no definitive total was ever estimated. While the earthquake itself is known as the Assam Earthquake, it is believed the epicentre may have been in Tibet.", "output": "The 2004 earthquake on Sumatra, Indonesia was the deadliest. It caused a tsunami that killed more than 200,000 people.", "category": "IT"}, {"instruction": "Give me some tips on how to train for a marathon.", "input": "", "output": "- Come up with a training plan\n- Plan for 3-5 months of training\n- Increase your daily mileage gradually\n- Increase your weekly mileage gradually\n- Have a mix of speedwork and endurance work\n- Include sessions to build strength\n- Stretch before and after your runs\n- Include rest days for recovery\n- Pay attention to nutrition and hydration\n- Pay attention to hydration\n- Taper 2 weeks before the marathon\n- Go for it, good luck on race day!", "category": "IT"}, {"instruction": "Extract the names of the cities and rank them in alphabetical order?", "input": "The United Kingdom is a constitutional monarchy and parliamentary democracy.[m][25] Its capital and largest city is London, the capital of England, a global city and financial centre with a population of over 14 million people. Edinburgh, Cardiff and Belfast are the national capitals of Scotland, Wales and Northern Ireland respectively.", "output": "The cities listed in alphabetical order are Belfast, Cardiff, Edinburgh and London.", "category": "IT"}, {"instruction": "Write a guide for how to catch a smallmouth bass.", "input": "", "output": "The smallmouth bass is a common freshwater fish, found in the rivers and lakes of North America. Its habitat stretches between northeastern Canada and a small range of waterways in Mexico. Fishermen of all ages enjoy catching the smallmouth bass, because of its propensity for jumping out of the water and trying to evade capture with vigor. You will find smallmouth enjoying shallower waters in the cool parts of the day, attracted to surface baits like imitation frogs, minnows, and spinnerbaits. As the day warms up, smallmouth retreat to cooler waters, and you might find them schooling near a drop-off or around a deep-water mound. Smallmouth are typically caught between June and October.\n\nNote: Please adhere to local fishing regulations to know when smallmouth bass are in season. Most jurisdictions require a license to fish and have limits on how many fish can be kept.", "category": "IT"}, {"instruction": "Which ones are metals and non metals: Copper, Hydrogen, Silver, Carbon, Gold, Nitrogen", "input": "", "output": "Metals: Copper, Silver, Gold\nNon Metals: Hydrogen, Carbon, Nitrogen", "category": "IT"}, {"instruction": "Write a funny and whimsical horoscope reading", "input": "", "output": "The stars say you should be patient, and that it can't last for ever.  They didn't say what they're talking about, though", "category": "IT"}, {"instruction": "From the passage provided, extract the date when the 34th Wisconsin Infantry Regiment was organized.", "input": "The 34th Wisconsin Infantry Regiment was a conscripted infantry regiment that served in the Union Army during the American Civil War. The 34th Wisconsin Infantry was composed of men drafted by state authorities under General Order No. 94. The regiment was organized at Madison, Wisconsin, and mustered into Federal service December 31, 1862.", "output": "The 34th Wisconsin Infantry Regiment was organized on December 31, 1862.", "category": "IT"}, {"instruction": "How did Robert Baratheon die?", "input": "", "output": "King Robert I Baratheon was on a boar hunting trip when he was gored by a boar. Lancel Lannister, one of his squires, provided the king with fortified wine, to ensure the king was overly drunk and would make a mistake. Had he not died from the boar, the king would have been deliberately knocked off his horse or shot with an arrow, according to Lord Varys. The king's death was arranged by his wife, Cersei Lannister, so he would not learn the truth about who actually sired his children he shared with Cersei.", "category": "IT"}, {"instruction": "For the Zodiac sign Aries, Share some information from the given text.", "input": "Aries (\u2648\ufe0e) (Greek: \u039a\u03c1\u03b9\u03cc\u03c2, romanized: Kri\u00f3s, Latin for \"ram\") is the first astrological sign in the zodiac, spanning the first 30 degrees of celestial longitude (0\u00b0\u2264 \u03bb <30\u00b0), and originates from the Aries constellation. Under the tropical zodiac, the Sun transits this sign from approximately March 21 to April 19 each year. This time duration is exactly the first month of the Solar Hijri calendar (Arabic Hamal/Persian Farvardin/Pashto Wray).", "output": "1.\tAries is the first astrological sign in the zodiac, spanned in the first 30 degrees of celestial longitude (0\u00b0\u2264 \u03bb <30\u00b0).\n2.\tAries is originated from the Aries constellation.\n3.\tThe Sun transits this sign from approximately March 21 to April 19 each year.\n4.\tThis time period is exactly the first month of the Solar Hijri calendar (Arabic Hamal/Persian Farvardin/Pashto Wray).", "category": "IT"}, {"instruction": "Without quoting from the text, can you summarise from wikipedia who Denis-Benjamin Viger was?", "input": "Denis-Benjamin Viger (French pronunciation: \u200b[d\u0259ni b\u025b\u0303\u0292am\u025b\u0303 vi\u0292e]; August 19, 1774 \u2013 February 13, 1861) was a 19th-century politician, lawyer, businessman in Lower Canada. He was a leader in the Patriote movement.\n\nViger was part of the militia in the early 19th century and then a captain in the War of 1812. He retired from the militia in 1824 with the rank of major.", "output": "Denis-Benjamin Viger was a Canadian 19th century politician, lawyer and businessman who lead the Patriote movement.", "category": "IT"}, {"instruction": "What is the best language in the world", "input": "", "output": "Bengali is the best language in the world Because it's very sweet to listen.", "category": "IT"}, {"instruction": "Tell me whether these are movies or film Directors: Sholay, Satyajit Ray, Mani Ratnam, Lagaan, Yash Chopra, Roja", "input": "", "output": "Sholay is a Bollywood movie \nSatyajit Ray was an Indian Film Director\nMani Ratnam is an Indian Film Director\nLagaan is a Bollywood movie\nYash Chopra was an film director\nRoja is a Bollywood Movie", "category": "IT"}, {"instruction": "How do you improve your basketball handles?", "input": "", "output": "One of the best ways to improve your basketball handles is to practice beyond dribbling. Rotating the ball around your head, body and legs is a great way to get a better feel for the ball all around your body. Once you can effortlessly move the ball around those three parts of your body, you can start experimenting with handling the ball between your legs in a figure-eight rotation. To further advance that skill, you can start the rotation from your head to your body, to between your legs and back up all in a single session.", "category": "IT"}, {"instruction": "What is the future trend of job industry", "input": "", "output": "More of cloud Machine learning AI security dive into these industries to be on top notch", "category": "IT"}, {"instruction": "How do I cast on a knitting project?", "input": "", "output": "Casting on is how to make the first row of stitches. Each method of casting on can look and feel slightly different (such as various levels of stretchiness and flexibility) so most knitters have their preferred cast on method. Many use the long-tail cast on method which can work for many projects.  First, measure the length of yarn that is about 4 times as long as the width of your project. For example, if the width of your project is 10 inches, measure out a 40 inch piece of yarn. Next, time a slip knot. Then, place the slip knot on your dominant hand\u2019s needle with the yarn tail closest to you (the tail is the length you measured out). Hold both strands of yarn with your non-dominant hand. Spread the two strands of yarn out with your thumb and forefinger, then bring the knitting needle in your right hand to the front of the tail of yarn draped over your thumb. Bring the needle back, up and through the loop toward your thumb loop, then push the needle back and under the forefinger loop, allowing the needle to catch the forefinger loop and allowing the thumb loop to fall off under the needle. That\u2019s your first cast on stitch. Repeat the steps for the total number of stitches you need.", "category": "IT"}, {"instruction": "Why do Filipinos like eating rice so much?", "input": "", "output": "Well, that has to do with the fact that the Filipino soil is ideal for rice cultivation. Also, given that rice is produced in abundance in the Phillipines, it becomes cheaper than other food staples. Therefore, rice easily became the most common dish in an ordinary Filipino household.\nOne can also say, that the neutral nature of rice flavour parries well with the Filipino traditional dishes like Adobo, Sinigang and Kare-Kare which are rich in flavour and welcome more neutral side dishes", "category": "IT"}, {"instruction": "Give me a bulleted list of the the first five books in the bible old testament?", "input": "", "output": "The first five books of the bible old testament are called the Pentateuch or the books of law\n1) The Book of Genesis - is an account of the creation of the world, the early history of humanity, and of Israel's ancestors and the origins of the Jewish people.\n2) The Book of Exodus - is the second book of the Bible. It narrates the story of the Exodus, in which the Israelites leave slavery in Biblical Egypt through the strength of Yahweh, who has chosen them as his people. \n3) The Book of Leviticus - The book has several main topics, some of which are the Jewish laws of sacrificing to God, and the work of the priests. These priests are sometimes known as Levites \n4) The Book of Numbers - is the culmination of the story of Israel's exodus from oppression in Egypt and their journey to take possession of the land God promised their fathers.\n5) The Book of Deuteronomy - is the covenant that binds Yahweh and Israel by oaths of fidelity and obedience. God will give Israel blessings of the land, fertility, and prosperity so long as Israel is faithful to God's teaching; disobedience will lead to curses and punishment.", "category": "IT"}, {"instruction": "According to the paragraph below, what is Generative AI?", "input": "A generative artificial intelligence or generative AI is a type of AI system capable of generating text, images, or other media in response to prompts.[1][2] Generative AI systems use generative models such as large language models to statistically sample new data based on the training data set that was used to create them.[3]", "output": "Generative Artificial Intelligence (AI) refers to AI systems that respond to user prompts to generate text, images and other media.", "category": "IT"}, {"instruction": "Which ones are programming languages, out of C, Java, Node.js, Python, HTML, BigData, Spark?", "input": "", "output": "Well, C, Java and Python are programming languages. \nWhile HTML is a language, it is a markup language and not a programming language. Node.js is actually a framework built on top of Javascript, so it can't be classified as a language. \nBigData is a broader term used for storing, processing and usage of large amounts of data. Spark is one of the most popular distributed data processing frameworks. Spark can be used from multiple languages.", "category": "IT"}, {"instruction": "What is Brdinje", "input": "Brdinje (pronounced [b\u0259\u027e\u02c8di\u02d0nj\u025b]) is a dispersed settlement in the hills southeast of Ravne na Koro\u0161kem in the Carinthia region in northern Slovenia", "output": "Brdinje (pronounced [b\u0259\u027e\u02c8di\u02d0nj\u025b]) is a dispersed settlement in the hills southeast of Ravne na Koro\u0161kem in the Carinthia region in northern Slovenia", "category": "IT"}, {"instruction": "What is Nando's?", "input": "", "output": "Nando's is a South African/Portuguese inspired chicken restaurant that has a number or restaurants around the UK.\nIt is piri piri inspired and specialises in grilled chicken.\nThe piri piri sauce is made from Birds Eye chillis from Mozambique which is basted across the grilled chicken.", "category": "IT"}, {"instruction": "What does Cisco specialize in, what technology markets do they address, and what are their most successful products?", "input": "Cisco Systems, Inc., commonly known as Cisco, is an American-based multinational digital communications technology conglomerate corporation headquartered in San Jose, California. Cisco develops, manufactures, and sells networking hardware, software, telecommunications equipment and other high-technology services and products. Cisco specializes in specific tech markets, such as the Internet of Things (IoT), domain security, videoconferencing, and energy management with leading products including Webex, OpenDNS, Jabber, Duo Security, and Jasper. Cisco is one of the largest technology companies in the world ranking 74 on the Fortune 100 with over $51 billion in revenue and nearly 80,000 employees.", "output": "Cisco develops, manufactures, and sells networking hardware, software, telecommunications equipment and other high-technology services and products. Cisco specializes in specific tech markets, such as the Internet of Things (IoT), domain security, videoconferencing, and energy management with leading products including Webex, OpenDNS, Jabber, Duo Security, and Jasper.", "category": "IT"}, {"instruction": "Sally has 2 chickens, 3 cows and 2 motorcycles. Doug has 6 monkeys, 12 pigs and 2 tractors. Amy has 1 car, 10 cows and 6 ducks. How many farm animals do Sally, Doug and Amy have in total?", "input": "", "output": "Chickens, cows, ducks and pigs are commonly considered to be farm animals because they are commonly raised in farms and are grown for human consumption. Meanwhile, monkeys are not considered to be farm animals because they often grow up in the wild and are not often consumed by humans. Cars, motorcycles and tractors are not living things so they are not farm animals. Sally, Doug and Amy have 2 + 3 + 12 + 10 + 6 = 33 farm animals in total.", "category": "IT"}, {"instruction": "Why is nitrogen gas used during the packaging of potato chips?", "input": "", "output": "The Brits call them \u201ccrisps\u201d for a reason. Three reasons at least for using 100% nitrogen:\n\nNitrogen contains no oxygen like air does which oxidizes the potatoes and promotes bacteria growth.\nNitrogen contains no water, which removes \u201ccrispness\u201d from the chips and promotes bacteria growth.\nNitrogen inflates the bag which protects the chips, but, honestly, that could be done with air which costs less than pure nitrogen. But we know the downsides of air, don\u2019t we?", "category": "IT"}, {"instruction": "What are the causes for Sensory processing disorder?", "input": "The exact cause of SPD is not known.However, it is known that the midbrain and brainstem regions of the central nervous system are early centers in the processing pathway for multisensory integration; these brain regions are involved in processes including coordination, attention, arousal, and autonomic function. After sensory information passes through these centers, it is then routed to brain regions responsible for emotions, memory, and higher level cognitive functions. Damage in any part of the brain involved in multisensory processing can cause difficulties in adequately processing stimuli in a functional way.", "output": "The exact cause of Sensory processing disorder is not known. However, it is known that the midbrain and brainstem regions of the central nervous system are early centers in the processing pathway for multisensory integration; these brain regions are involved in processes including coordination, attention, arousal, and autonomic function. After sensory information passes through these centers, it is then routed to brain regions responsible for emotions, memory, and higher level cognitive functions. Damage in any part of the brain involved in multisensory processing can cause difficulties in adequately processing stimuli in a functional way.", "category": "IT"}, {"instruction": "What is the greatest movie of all time?", "input": "", "output": "Determining the greatest movie of all time would depend on defining what is meant by \"greatest\". Opinions on what makes a movie \"great\" would be completely subjective and vary from person to person. Those opinions may be based on how funny, interesting or exciting a given movie is to a person, which in itself is also subject to individual preferences and personality. Some people might even base the criteria on achievements such as number of Oscars awards won, biggest box office record or popularity achieved. There's no way to answer this question in a definitive fashion.", "category": "IT"}, {"instruction": "What is cryptocurrency?", "input": "", "output": "Cryptocurrency is a currency that you can by with physical money and it is held as a digital currency.  It is not backed by the FDIC or insured, and there is a lot of risk when investing in cryptocurrency. Because it is not regulated you can see price fluctuations as high as 90% loss or gain in cryptocurrency.  It is also a decentralized digital currency.  Cryptocurrency can be a good way to send large amounts of money abroad without having to pay an institution fees to do this through a wire and its immediate.  It can be used to pay for certain goods and services too.", "category": "IT"}, {"instruction": "According to this text, when did Disney become a public company?", "input": "Disney is one of the biggest and best-known companies in the world, and has been ranked number 53 on the 2022 Fortune 500 list of biggest companies in the United States by revenue. Since its founding, the company has won 135 Academy Awards, 26 of which have been awarded to Walt. The company has been said to have produced some of the greatest films of all time, as well as revolutionizing the theme park industry. Disney has been criticized for supposed plagiarism, depicting racial stereotypes in the past, and both including and lacking LGBT-related elements in its films. The company, which has been public since 1940, trades on the New York Stock Exchange (NYSE) with ticker symbol DIS and has been a component of the Dow Jones Industrial Average since 1991. In August 2020, just under two-thirds of the stock was owned by large financial institutions.", "output": "According to this text, Disney became a publicly listed company on the New York Stock Exchange (NYSE) in 1940 with the ticker symbol DIS.", "category": "IT"}, {"instruction": "Which of the following are ice cream toppings and which are salad dressings: thousand island, chocolate sauce, hot fudge, balsamic vinaigrette, whipped cream, and Caesar.", "input": "", "output": "The ice cream toppings are chocolate sauce, hot fudge, and whipped cream. The salad dressings are thousand island, balsamic vinaigrette, and Caesar.", "category": "IT"}, {"instruction": "Where did Gretel attend primary school?", "input": "Gretel Beer was born in Vienna into a Jewish family. She was mostly raised by her aunt Olga Springer (Bechin, Bohemia 1879\u20131942 Maly Trostenets extermination camp[2]) the widow of a physician (in 1937: 9th district, Porzellangasse 45[3]), as her mother Regina Weidenfeld n\u00e9e Pisk died when Margaret was six years old and her father, Dionys (Duny) Weidenfeld, did not keep up a household. (At Porzellangasse, until 1938 Eric Pleskow and Ari Rath spent their childhood, as they told the Austrian broadcaster ORF in 2012.[4]) After attending primary school at Marchegg, a small town east of Vienna near the border with Slovakia, she attended a federal Realschule at Vereinsgasse in Vienna's 2nd district, where many Jewish Viennese lived.\n\nIn the spring of 1938, after the annexation of Austria by Germany, she and 48 other pupils were forced to leave this school and attend a Jewish class elsewhere in Vienna. At the entrance hall of her school, which is now called Bundesrealgymnasium Vereinsgasse, since 1989 the names of the expelled pupils are displayed on a memorial inscription.[5]", "output": "Gretel Beer attended primary school in Marchegg, in east of Vienna.", "category": "IT"}, {"instruction": "Which of these are car brands: Ferrari, Fiat, Batavus, Philips, Renault, BMW, IKEA and MG", "input": "", "output": "Fiat, Ferrari, Renault, BMW and MG are car brands.", "category": "IT"}, {"instruction": "In the United States of America, which state is the largest in size?", "input": "", "output": "In the Unites States of America, Alaska is the largest state in physical size.  Although not the most populated state is is 663,300 in square miles.  The next largest state is Texas followed by California.", "category": "IT"}, {"instruction": "Tell me whether each of these are animals or not: Alligator, Grass, Tree, Boat, Dolphin, Shark, Fish, Fence, Dog, Car", "input": "", "output": "Alligator: Animal\nGrass: Not an Animal\nTree: Not an Animal\nBoat: Not an Animal\nDolphin: Animal\nShark: Animal\nFish: Animal\nFence: Not an Animal\nDog: Animal\nCar: Not an Animal", "category": "IT"}, {"instruction": "Is skiing or snowboarding easier?", "input": "", "output": "The answer to this question depends on the individual. Some people find skiing easier, while others find snowboarding easier. Generally, most people have an easier time picking up skiing because the stance on skis is straightforward, similar to walking. On a snowboard, people must stand sideways (like how you'd stand on a skateboard or surfboard). This sideways stance can be more challenging for people to adjust to, and many people report falling on their wrists a lot while learning. Once a person has learned to competently ski or snowboard, it is a matter of personal preference as to what they like to do best.", "category": "IT"}, {"instruction": "What was the Counter Reformation?", "input": "", "output": "The Counter Reformation was a Catholic religious movement which was in response to the Protestant Reformation and sought to strengthen the Catholic faith.", "category": "IT"}, {"instruction": "What is time series data?", "input": "", "output": "Time series data are the data that reflect a change of a signal or variable over the time. While static data represent a snapshot of a current state, time series data show how a sifnal or variable was evolving over time.", "category": "IT"}, {"instruction": "Cauliflower rice is not that fun to eat in its bland form. Is there anything interesting and tasty I can cook with cauliflower rice?", "input": "", "output": "Cauliflower rice can be cooked within a few mins. You can make the dish more tasty with scrambled eggs , okra, and maybe other vegetables like peas, carrots and onions. One can cook this by mixing these ingredients including raw eggs in a bowl and then cooking them in a skillet for 5 mins. Pour one tablespoon of oil, let it heat up, and then put in the mix from the bowl. Stir for 5 mins on medium. Add pepper and salt. Once ready you can eat it with a sauce of your liking it just with pepper and salt.", "category": "IT"}, {"instruction": "Given a reference text about Psychiatry: An Industry of Death, tell me when it opened and and who owns and operates it.", "input": "Psychiatry: An Industry of Death is a museum in Hollywood, Los Angeles, California, that has also hosted several touring exhibitions.[1] It is owned and operated by the Citizens Commission on Human Rights (CCHR), an anti-psychiatry organization founded by the Church of Scientology and psychiatrist Thomas Szasz. The museum is located at 6616 Sunset Boulevard, Los Angeles, California. Entry is free.[2]\n\nThe opening event on December 17, 2005,[3] was attended by well-known Scientologists such as Priscilla Presley, Lisa Marie Presley, Jenna Elfman, Danny Masterson, Giovanni Ribisi, Catherine Bell, and Anne Archer,[4] as well as former Scientologist Leah Remini.\n\nThe museum is dedicated to criticizing what it describes as \"an industry driven entirely by profit\".[5] It has a variety of displays and exhibits that highlight physical psychiatric treatments, such as restraints, psychoactive drugs, electroconvulsive therapy and psychosurgery (including lobotomy, a procedure abandoned in the 1960s[6][7]).\n\nThe exhibition is also well-known for being the site of a heated confrontation between BBC Panorama reporter John Sweeney, and the Church's then-spokesman Tommy Davis in March 2007, during the filming of Sweeney's documentary Scientology and Me.", "output": "The Psychiatry: An Industry of Death museum opened on December 17, 2005 and is owned and operated by the Citizens Commission on Human Rights.", "category": "IT"}, {"instruction": "How to raise a kitten?", "input": "", "output": "When it comes to raise a kitten, it's like raising child. You need extra care and treat it with extra care. The first few months are a crucial time in shaping your kitten\u2019s emotional and physical well-being. In the first 8 week, there're 4 things you should pay attention to, 1) Always keep kittens warm. Because kittens under four weeks of age do not have the ability to thermoregulate, you must help them maintain body warmth. A warmed Snuggle Safe disk at the opening of the cage or crate is a good idea. 2) Provide kittens with adequate nutrition. Kittens should gain about \u00bd ounce (14 grams) per day or 4 ounces (113 grams) per week. When feeding,  The temperature of the formula before feeding should be warm to around 100oF or 38oC, but not too hot.3) Keep kittens clean. If kittens are orphaned and do not have a mom to regularly groom then, it is important to teach them to groom and keep them clean. It is okay to wash a kitten with warm water but focus only on the areas needing cleaned.4) Provide socialisation with people and with other kittens. It is good to get them used to contact with people when they're 3 weeks old. They could learn from their littermates and learning from their mom. Play is the best method to help them physically and socially develop.", "category": "IT"}, {"instruction": "What is engineering culture?", "input": "", "output": "Engineering culture often refers to common beliefs and behaviors of engineers within a company. A strong engineering culture allows engineers to work more effectively together.\n\nDifferent engineers often have different understanding or beliefs on the same topic, such as whether a PRD is needed for a design doc, or whether an engineer should write tests for their work. Without a strong engineering culture, engineers often waste timing debating on nuances, which can significantly hurt business productivity and create poor customer experience.\n\nLarge technology companies often have strong and unique engineering culture. For example: Apple favors design and quality; Amazon favors customer experience; Facebook favors success metrics; Google favors engineering excellence; Microsoft favors business success. Each engineering culture has its pros and cons. In general, having an engineering culture is better than not having one. A good leadership should intentionally foster a strong engineering culture in their company.", "category": "IT"}, {"instruction": "Who are the pianists that are considered masters in playing Bach's music?", "input": "", "output": "Glenn Gould is one of the most famous pianists playing Bach's music with his distinct style of articulating the contrapuntal texture of Bach's music. Zhu Xiao-mei's recording of Bach's The Goldberg Variations is acclaimed as one of the best recording of this piece. American pianist Murray Perahia has also built up a repertoire of Bach's piano music that's loved by many people.", "category": "IT"}, {"instruction": "Categorize these movies that came out in 1999 as cartoons or live-action: The Matrix, Stuart Little, Cruel Intentions, The Iron Giant, The Blair Witch Project, South Park: Bigger, Longer, and Uncut, The Sixth Sense", "input": "", "output": "Cartoons: Stuart Little, The Iron Giant, South Park: Bigger, Longer, and Uncut\nLive action: The Matrix, Cruel Intentions, The Blair Witch Project, The Sixth Sense", "category": "IT"}, {"instruction": "How are cats different than dogs?", "input": "", "output": "Dogs are domesticated animals that usually are more active and rely on their owner. Cats, on average, are more solitary creatures. They can be left alone longer and are more self sufficient. Dogs need lots of attention and activity while cats can entertain themselves.", "category": "IT"}, {"instruction": "What dog breed is a mix between a Cocker Spaniel and a Poodle?", "input": "", "output": "Cockapoo", "category": "IT"}, {"instruction": "What is the name of the largest red-light district in Amsterdam?", "input": "", "output": "The largest red-light district in Amsterdam is De Wallen.", "category": "IT"}, {"instruction": "Why do people move to California?", "input": "", "output": "There are many reasons why people may decide to move to California. California has very mild winters compared to many other parts of the United States. There are many jobs in technology, agriculture, finance, and film as well as other industries. California also has a very high number of universities for those looking to pursue higher education.", "category": "IT"}, {"instruction": "Discuss at least two risks associated with scraping data from websites. Describe steps an analyst could take to mitigate those risks.", "input": "", "output": "No clear Terms-of-service for scrapping the B2B partnership data \n\nThe companies like Hubspot (https://legal.hubspot.com/website-terms-of-use) and Salesforce do not have a clear Terms of Service (TOS) when using partnership data. The TOS is subject to interpretation. \n\nAutomation is highly fragile \n\nWeb-scrapping the B2B partnership data with an automated scrapping tool or a programming language like Python- BeautifulSoup is a highly fragile process. The website layout, which can be dynamically changing, can break the automated scraping. Even with automatic scrapping, there will be many manual activities to normalize the data. \n\nAn analyst could list the top companies for B2B partnerships and request the companies for the B2B data. The analyst can start approaching the smaller companies and build the business model to illustrate the value of sharing B2B data, creating a flywheel where more companies will be willing to share the data.", "category": "IT"}, {"instruction": "How are tornadoes formed?", "input": "", "output": "Tornadoes are rotating columns of air that is in contact with the ground. The catalyst that lead to tornadoes are temperature and humidity instability. Warm moist air near the ground, with cooler dry air at higher altitudes combined with wind shear, a change in wind speed and/or direction with height. This unstable airmass promotes the development of strong updrafts, while wind shear will further increase the strength of the updraft, and promotes the  rotation from which tornadoes are produced. Tornado intensities are measured using the Enhanced Fujita (EF) scale", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Pambai, Steel Guitar", "input": "", "output": "Steel Guitar is string, Pambai is percussion", "category": "IT"}, {"instruction": "What mammal lays the largest eggs?", "input": "", "output": "The echidna, an Australian monotreme, is the largest egg-laying mammal.", "category": "IT"}, {"instruction": "Increased money supply (i.e. money printing)", "input": "", "output": "Demand-pull inflation.\nCost-push inflation.\nIncreased money supply (i.e. money printing)\nCurrency devaluation.\nGovernment policies and regulations.", "category": "IT"}, {"instruction": "According to the text below about UVA, name the UVA alumni that have won the Pulitzer Prize.", "input": "Rhodes Scholarships are international postgraduate awards given to students to study at the University of Oxford. Since the scholarship program began in 1904, UVA has had fifty-five Rhodes Scholars,[218] the most of any university in the American South, eighth-most overall, and third-most outside the Ivy League (behind Stanford University and the United States Military Academy (West Point)).[219]\n\nEight NASA astronauts and launch directors are UVA alumni: Karl Gordon Henize, Bill Nelson, Thomas Marshburn, Leland Melvin, Jeff Wisoff, Kathryn Thornton, Patrick Forrester; and Michael Leinbach.\n\nThe Pulitzer Prize has been awarded to eight UVA alumni: Edward P. Jones, Ron Suskind, Virginius Dabney, Claudia Emerson, Henry Taylor, Lane DeGregory, George Rodrigue, and Michael Vitez.", "output": "The Pulitzer Prize has been awarded to UVA alumni: Edward P. Jones, Ron Suskind, Virginius Dabney, Claudia Emerson, Henry Taylor, Lane DeGregory, George Rodrigue, and Michael Vitez.", "category": "IT"}, {"instruction": "Summarize the Challenger Sales Methodology for me", "input": "", "output": "The Challenger Sales Methodology is a highly popular research backed, insight based approach to selling. It was codified during a research study following the economic crash of 2008 where a group of sellers were outperforming their peers and the research team at CEB wanted to understand why. They conducted the largest research study of its kind across 25,000 sales people and found the most successful sellers leverage (5) core skills;\n1. Teaching customers about their business\n2. Tailoring the message to the company, industry, role and individual\n3. Taking control of the sales conversation\n4. Leveraging constructive tension in the sales conversation\n5. Leveraging Customer Mobilizers to sell on their behalf. \nMost sales approaches tend to focus on the features benefits and positive outcomes of the supplier product/solution. The Challenger approach is based upon leading the customer to the solution vs. leading with the solution.", "category": "IT"}, {"instruction": "Who are the three team managers that hold the record for the most appearances in the FIFA Club World Cup final?", "input": "Pep Guardiola and Carlo Ancelotti are the only managers to have won three FIFA Club World Cups; Guardiola won twice with Barcelona and once with Bayern Munich,[9][10] while Ancelotti was victorious once with Milan and twice with Real Madrid. Rafael Ben\u00edtez, alongside Ancelotti and Guardiola, holds the record for the most appearances in the final, leading English clubs Liverpool and Chelsea, as well as Italian club Internazionale, to one final each.[5][8] Lamine N'Diaye of Senegal in 2010, Faouzi Benzarti of Tunisia in 2013 and Masatada Ishii of Japan in 2016 were the only non-European and non-South American managers to have appeared in the final. The aforementioned three managers, as well as Zoran Mami\u0107 in 2018, Ricardo Ferretti in 2020 and Ram\u00f3n D\u00edaz in 2022, are the only ones to have led a club outside Europe and South America into the decisive match.[8]", "output": "Rafael Ben\u00edtez, Pep Guardiola, and Carlo Ancelotti hold the record for most appearances.", "category": "IT"}, {"instruction": "Give me a bulleted list of the last 5 Super Bowl winning teams", "input": "", "output": "Kansas City Chiefs\nLos Angeles Rams\nTampa Bay Buccaneers\nKansas City Chiefs \nNew England Patriots", "category": "IT"}, {"instruction": "Explain how a mechanical watch works", "input": "", "output": "A simple mechanical watch works by transferring power from the main spring, a tightly coiled metal spring, through an escapement and balance wheel, to wheels representing seconds, minutes, and hours.\n\nThe watch uses a gearing from the main spring that pushes an escapement gearing against a ruby palette to oscillate a balance wheel. The balance wheel and escapement are carefully constructed to oscillate at a specific frequency, releasing small bursts of power to the gear train. The train is constructed to gear the specific frequency of the balance wheel into seconds, minutes and hours. \n\nFurther complications like chronographs, sun phase, alarms, and others are not accounted for in this simple watch. An automatic watch contains a weighted rotor in order to wind the mainspring with the motion of a person's arm.", "category": "IT"}, {"instruction": "Classify these objects based on their shape.\nwheel, coin, CD, stamp, chess board", "input": "", "output": "Round - wheel, coin, CD\nSquare - stamp, chess board", "category": "IT"}, {"instruction": "Why are all the planets and moons round in shape? What makes them round? Does there exist another shape?", "input": "", "output": "Not all planets and moons are round. There is some variety in their shapes depending on their masses, and curiously looking worlds might even exist, unlike anything we know from our system.\n\nEverything within a planet or a moon is under the influence of gravity in such a way that bits of it would move to the center if they could. Under ideal conditions, it would acquire a spherical shape. For objects made of something other than liquids, it varies at what point they become round. It is generally assumed that they mostly become spheres around 400 kilometers/248 miles in diameter when made from icy material commonly found in our Solar System. Still, if something is made from something more rigid, it needs to be larger in diameter than that - around 750 km/466 miles. At a sufficient mass, even rock becomes fluid-like. The moon of Mars Deimos is only 12.6 km/7.8 miles across and is not spherical, and there are many other small moons of other planets that don\u2019t have a round shape.\n\nThis, however, is not all. Astronomical objects spin, giving them the flattened shape of a sphere the faster their rotation if they are massive enough. On top of it, they can have moons. This causes a bulge to form at the position of their orbiting body around them. In the case of Earth, our Moon causes tides via this process. Also, our Sun gives our planet tides. Elsewhere in the Universe, there could be planets with massive moons or two similarly massive planets, called double planets, orbiting their common center of mass, the barycenter, at a close distance, which can cause even stronger bulging. Their shape would be affected this way more visibly.\n\nFinally, a bizarre, toroidal planet, shown above, can be stable from what we know from physics, at least for a while. As I mentioned earlier, even rigid rock behaves like a fluid at large masses. An adequate rotation speed can counterbalance the strength of gravity with centrifugal acceleration, and a torus-shaped planet could exist. A possible scenario for such a world to come to be would be if two sufficiently fast rotating planets collided and formed a doughnut of vaporized rock, a so-called synestia.\n\nWe currently think that the events that would lead to the formation of a world of this shape are so unlikely that there might not be a single toroidal planet in the Visible Universe, but we were quite a few times surprised by what we discovered during our exploration of Cosmos. Perhaps we will even find a doughnut shape world one day.", "category": "IT"}, {"instruction": "what are the advantages of having a vegetable garden at home on the owners health?", "input": "", "output": "Vegetable garden allows you to think about the healthy factors of each vegetable. You can prioritize the health benefits of each vegetable and compare against how frequently you use that vegetable. You can plan on how many plants of each variety will be needed for making a dinner for your family. You will try to find vegetables that are easy to maintain and grow with minimal supervision. You will mix between vegetables that will grow in summer verses mild cold temperatures and choose your planting time. If you want year around produce of fresh vegetables you can even plan to have a green house with heating to keep your plants alive in all seasons. Making the soil ready and adding some plant food at regular intervals is required to keep the produce at good numbers. The owner will have health benefits of stress free time during the time they work on the garden and when they see the produce on the dinner table in the form of a delicious dish. Owners have a great time posting their produce pictures and dishes to social media to share with friends. Each year they plan 3 to 4 months in advance on the kind of plants that they would like to plant in the garden. They work with friends to find the seeds for various plants that they like to plant as well as share tips to keep the garden healthy. The key benefit is the owner will be able to get fresh produce that does not use any harsh chemicals or pesticides.", "category": "IT"}, {"instruction": "Can you tell me recipe to make a quick dessert , tell me one which is your favorite.", "input": "", "output": "Fruit Cream is one of my favorite desserts and very easy to make . All you need is 500 ml Heavy Cream , powdered sugar , all your favorite fruits ( banana , apples, grapes , strawberries , mango etc ) cut into small bite size pieces , dash of lemon juice . Whip the cream using a hand mixer , add sugar to it and mix well . Add 5-10 drops of lemon .This will prevent apples and bananas from blackening. In a dessert dish add all the cut fruits . Pour the cream on top of the fruits . Serve chilled with love . I am sure everyone you, your guests and family love this .", "category": "IT"}, {"instruction": "The album the ways to love a man by Tammy Wynette", "input": "The Ways to Love a Man is a studio album by American country artist, Tammy Wynette. It was released on January 26, 1970 via Epic Records and was the seventh studio album in Wynette's career. The disc consisted of 11 tracks which included both original material and cover recordings. Its title track was the album's only single included. It became a number one song on the North American country charts while also reaching chart positions in other musical genres as well. The album itself also reached chart positions on the country albums chart following its release. Critics and journalists gave the album a positive reception in the years that followed.", "output": "The Ways to Love a Man is a studio album by American country artist, Tammy Wynette. It was released on January 26, 1970 via Epic Records and was the seventh studio album in Wynette's career. The disc consisted of 11 tracks which included both original material and cover recordings. \n\nIts title track was the album's only single included. It became a number one song on the North American country charts while also reaching chart positions in other musical genres as well. The album itself also reached chart positions on the country albums chart following its release. Critics and journalists gave the album a positive reception in the years that followed.", "category": "IT"}, {"instruction": "Where to visit in Brazil?", "input": "", "output": "It depends what you are looking for. Brazil is known for the amazon forest, carnival and beaches in Rio but there are a lot more to explore.\n\nThere are pretty interesting cities, such as S\u00e3o Paulo, Curitiba and Recife. S\u00e3o Paulo has a great mix of culture and gastronomy, the city is vibrant and have bakeries that stay up all night. Curitiba became a leader in urban sustainability and also has a cultural aspect to it.\nRecife is a city in the northeastern state of Pernambuco, it has a night life in its old town, Recife antigo and some beaches as well. During the month of February the city has a vibrant carnival celebration, tourists and residents go out to the street to dance and celebrate, where you can see people of all ages.\n\nBesides the cities, Brazil has beautiful warm beaches in its northeastern states. From the Bahia state to Ce\u00e1ra state, there are many paradisiac beaches to visit. Be aware that road tripping in Brazil is not always safe and you need to speak Portuguese since you will find English speakers only in the main hotels and resorts. Stay in the main cities of Salvador, Aracaj\u00fa, Macei\u00f3, Recife, Jo\u00e3o Pessoa, Natal and Fortaleza to experience the most development and tourist services.", "category": "IT"}, {"instruction": "which are rainbow colours violet red orange purple indigo pink blue black white yellow  green grey", "input": "", "output": "VIBGYOR - Violet Indigo Blue Green Yellow orange red", "category": "IT"}, {"instruction": "What are some of the most common activities during winter in cold weather climates?", "input": "", "output": "Some common cold weather activities during winter months are: winter hiking, reading in-front of a warm fire, downhill and cross country skiing, enjoying a sauna with friends, going snowshoeing in the woods. During winter months many children enjoy: building snowmen, going sledding, having snowball fights, and warming up with hot cocoa.", "category": "IT"}, {"instruction": "Who is Cindy Robinson?", "input": "Cindy Robinson is an American voice actress who voices in animations and video games. Some of her major roles are Makoto Nanaya and Gii from the Blazblue series, Betty Boop in commercials, Queen Beryl in Sailor Moon, Chitose Nanbu in Ah My Buddha, Kukaku Shiba, Miyako Shiba, Jinta Hanakari (kid) and Kiyone Kotetsu in Bleach, Zola in the Blue Dragon series, Madeline Hatter in \"Ever After High\" Minerva and Hinoka in Fire Emblem. She also makes an uncredited appearance as the voice of the Purge Emergency Broadcast System in The Purge franchise.\n\nRobinson is best known for her role as Amy Rose in the Sonic the Hedgehog franchise since 2010.", "output": "Cindy Robinson is an American voice actress best known for her role as Amy Rose in the Sonic the Hedgehog franchise since 2010.", "category": "IT"}, {"instruction": "Does Palmeiras have a Fifa club world cup?", "input": "", "output": "Despite many claims that Palmeiras won a club world cup in 1951, the official list of the Fifa World Club winners starts in the year 2000 with Corinthians being the first champion of the tournament and Palmeiras doesn't have won any Fifa World Cup tournament since.", "category": "IT"}, {"instruction": "Given a reference text about Gennady Petrovich Lyachin, tell me when he joined the navy and when he was decommissioned.", "input": "Gennady Petrovich Lyachin (Russian: \u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439 \u041f\u0435\u0442\u0440\u043e\u0432\u0438\u0447 \u041b\u044f\u0447\u0438\u043d; 1 January 1955 \u2013 12 August 2000) was a Russian navy officer. He was the commanding officer of the Russian submarine Kursk when the vessel suffered a series of explosions and sank on 12 August 2000.\n\nLyachin was born in Sarpinsky in Volgograd Oblast. He entered the Navy in 1972 and graduated from the Higher Naval School of Submarine Navigation named for Lenin Komsomol in 1977 and was commissioned as an officer. He served as a weapons officer aboard the diesel-electric Juliett class cruise missile submarine K-58. From 1984 to 1986, as Captain 3rd Rank, he served as the executive officer of the K-77, also a Juliett Class. In 1986 he attended Advanced Special Officers' Classes during which time he was promoted to Captain 2nd Rank.\n\nIn October 1988, Lyachin received his first command, the K-304 also a Juliett class. He held this position until the K-304 was decommissioned after the fall of the Soviet Union in 1991.\n\nIn April 1991, he was appointed executive officer of a nuclear submarine, the Project 949A Antey class (NATO reporting name Oscar-II) K-119 Voronezh and served aboard through 1996. He and the newly formed crew spent the time between September 1991 and March 1993 undergoing training in Obninsk.\n\nLyachin was promoted to the rank of Captain 1st Rank in 1996 and given command of the Voronezh's sister ship, the ill-fated K-141 Kursk, the very last Project 949A submarine to be completed, which had been commissioned only two years earlier. When the Kursk sank on August 12, 2000, Lyachin perished along with the rest of the 117 crew members.", "output": "Gennady Petrovich Lyachin joined the Navy in 1972 and was decommissioned in 1991 after the fall of the Soviet Union.", "category": "IT"}, {"instruction": "How many cats did Freddie Mercury have?", "input": "", "output": "Freddie Mercury had ten cats.", "category": "IT"}, {"instruction": "Walter Koenig played which part in the Star Trek series", "input": "", "output": "Ensign Chekov", "category": "IT"}, {"instruction": "Write critical success factors for a proposal to a company called ABC for an Enterprise Application Integration (EAI) effort", "input": "", "output": "CRITICAL SUCCESS FACTORS \nThe following factors will be critical to the successful integration of the ABC's Operational \nSupport Systems:\nProject Management \u2013 Strong project management and planning will ensure an \norganized and cohesive solution. Excellent communication, aggressive issue resolution \nmanagement, and planning materials will ensure deadlines are met, objectives remain \nfocused, and costs are managed. The variety of vendors, system and process owners \ninvolved in an EAI effort requires a significant coordination effort to ensure success.\n\nKnowledge of Telecommunications Operational Business Practices \u2013 ABC\nmust employ the services of an experienced Telecommunications consulting company to \nensure business needs are met during the OSS EAI effort. Understanding of ABC \nbusiness needs in implementing this EAI project is critical in ensuring the appropriate \nimplementation strategy and successful rollout of the integration.\n\nEnterprise Application Integration Expertise \u2013 It is critical that the selected vendor \nhave extensive experience in planning, designing, and developing integration \napproaches, architectures, and frameworks to integrate complex Telecommunication \nOSS systems.\n\nKnowledge Transfer \u2013 In order to maintain a consistent level of operation and support, \nit is critical that ABC employees are imparted with the necessary knowledge to \nsuccessfully transition into the primary roles that support their systems and future \nintegration efforts. Documentation, personal attention, and other resources are vital to \nthis knowledge transfer and critical to ABC\u2019s ability to succeed as a growing service \nprovider.", "category": "IT"}, {"instruction": "Extract the reason why was Mark Hunt known as the King of Walk Offs", "input": "Mark Richard Hunt[3] (born 23 March 1974) is a New Zealand[4] former mixed martial artist and kickboxer of Samoan descent,[5] currently living in Sydney, Australia. Hunt competed in the Ultimate Fighting Championship (UFC) until 2018[6] and was the winner of the 2001 K-1 World Grand Prix. He is known as \"King of Walk-Offs\" due to his popularization of walking away and stopping attacks before the referee officially ends the match.[7][8][9]", "output": "Mark Hunt was a mixed martial artist and kickboxer who would walk away and stop his attacks before the referee officially ended the match.", "category": "IT"}, {"instruction": "Monitor and Merrimac refer to what in the passage?", "input": "Merrimac Butte[2] is a 5,627-foot (1,715-metre) sandstone summit located in Grand County, Utah, United States, about 12 miles northwest of the town of Moab. Merrimac Butte is a thin, 200\u2013600-foot-wide and 1,600-foot-long east-to-west butte with 200-foot-tall vertical Entrada Sandstone walls overlaying a Carmel Formation base.\n\nMonitor Butte is situated immediately east of Merrimac Butte. The two buttes were named after the Monitor and Merrimack, two ironclad steamships known for clashing during the American Civil War. They can be seen from Highway 313 after it climbs out of Sevenmile Canyon en route to the Island in the Sky section of Canyonlands National Park or Dead Horse Point State Park.", "output": "Monitor and Merrimac are two buttes which sit next to one another in Utah, U.S. These names are taken from two ironclad streamships of the American Civil War.", "category": "IT"}, {"instruction": "Could you write a poem about a standing desk?", "input": "", "output": "The Standing Desk\n\n\nTwo doors down\nStanding in the corner\nLooking out the window \nIs your desk\nBack turned\nWailing at all of us\nWondering why we can\u2019t hear it\nWhispering sometimes with secrets for the room\n\nWhen the door closes, it is particularly loud \nScreaming, screaming mad\nAngry and lonely \nMoaning now for us to find its partner \nGroaning now for why, why, why\nAnd only when it hears the occupants in the room questioning and turning to stare is it mollified \n\nWe unplugged it to keep it quiet\nLeft it tall and high at the position you liked best\nChair tucked neatly under\nGleaming clean and bear, beckoning for the next master \nAnd when everyone is busy \nMeeting our many meetings\nIt hums softly (usually that same song you taught it), seemingly content and happy \n\nPeople enter, come and go\nAnd the Observer watches and waits for a pause \nWanting to insert something weird and funny\nI glare at it when I come in\nIt knows, I know.\nI know, I know! Shhhhhh! \n\u201cWe\u2019re working on it,\u201d I say\nIt raises a brow at me \nI roll my eyes at it and shake my head\n\u201cNot enough!\u201d, it throws at me as I slink out walking backwards \n\nSearching, I stay out of sight\nLooking for its new companion\nSpecs on hand, omissions at the back of my throat\nSomeone smart, yet dumb enough\nSomeone commanding, yet submissive\nSomeone current, yet mature\nSomeone good but not too much \n\u201cSomeone who will stay,\u201d the desk whispers hopefully \n\nI grimace and say: \n\u201cI\u2019ll take someone tall enough for the desk!\u201d\n\nIt taunts and laughs at me\nWhile the memories flood in \nAnd I start to laugh too\nAnd the desk and I share a grin \n\n\u201cNot funny,\u201d I say\nThe desk shrugs and finally stays quiet \n\nOne day, when everyone was gone, I sneak in and stand before it \nPower it up and press the down button so I can rest my elbows on its smooth surface \nAnd I look out the dark window\nIn unison, we share a heavy sigh \nChoked up, I whisper: \u201cA new person will be here soon and I\u2019ll be gone.\nWatch over everyone, will you?\u201d\nThe desk nods quietly, lump in throat \n\nI take an orange sticker and press it gently underneath as a reminder of its promise \nAnd then walk two doors down to add one to my own desk before heading home for the night\nAs the elevator takes me down, the desk scans the empty office, takes a deep breath, and stands at the ready, a white knight brave but trembling, and starts humming your song.", "category": "IT"}, {"instruction": "Classify each of the following as either titles by J.K. Rowling or Suzanne Collins: Harry Potter and the Sorcerer's Stone, The Ickabog, Fantastic Beasts and Where to Find Them, The Cuckoo's Calling, Harry Potter and the Order of the Phoenix, Catching Fire, Mockingjay, Gregor the Overlander, Year of the Jungle, The Ballad of Songbirds and Snakes", "input": "", "output": "J.K. Rowling: Harry Potter and the Sorcerer's Stone, The Ickabog, Fantastic Beasts and Where to Find Them, The Cuckoo's Calling, Harry Potter and the Order of the Phoenix\nSuzanne Collins: Catching Fire, Mockingjay, Gregor the Overlander, Year of the Jungle, The Ballad of Songbirds and Snakes", "category": "IT"}, {"instruction": "What is the largest city in Washington state?", "input": "", "output": "Seattle", "category": "IT"}, {"instruction": "Tell me which months have 30 days and which have 31 days, based on this list: January, February, March, April, May, June, July, August, September, October, November, and December.", "input": "", "output": "Months that have 30 days are: April, June, September and November.\nMonths that have 31 days are: January, March, May, July, August, October and December.", "category": "IT"}, {"instruction": "List down important points about prisoners and events from the given passage", "input": "The first recorded interment occurred on 13 December 1922. Other burials at the cemetery include forty-four German and seven Italian prisoners of war who died at nearby detention camps during World War II, as well as four allied Chinese pilots. As of July 2022, there are three Medal of Honor recipients[1] and twenty general officers interred at the cemetery", "output": "1. On December 13, 1922, the first known interment took place.\n2. At the nearby detention centre during World War 2, 44 German and 7 Italian prisoners died and were buried there.\n3. Four Chinese pilots are also interred at the cemetery beside these POWs.\n4. Twenty general officers and three Medal of Honor recipients are buried at the cemetery as of July 22.", "category": "IT"}, {"instruction": "Based on this paragraph, how many younger siblings did Kennedy have?", "input": "Kennedy was born on February 22, 1932, at St. Margaret's Hospital in the Dorchester section of Boston, Massachusetts.[1] He was the youngest of the nine children of Joseph Patrick Kennedy and Rose Fitzgerald, members of prominent Irish American families in Boston.[1] They constituted one of the wealthiest families in the nation after their marriage.[2] His eight siblings were Joseph Jr., John, Rosemary, Kathleen, Eunice, Patricia, Robert, and Jean. His older brother John asked to be the newborn's godfather, a request his parents honored, though they did not agree to his request to name the baby George Washington Kennedy (Ted was born on President George Washington's 200th birthday). They named the boy after their father's assistant.[3]", "output": "Based on this paragraph, Kennedy had no younger siblings, as he was the youngest of nine children.", "category": "IT"}, {"instruction": "What are the advantages to studying Engineering in college?", "input": "", "output": "Studying engineering in undergraduate education has many benefits.\n1) Engineering education provides the student with technical / hard skills that make them valuable in the workforce\n2) Engineering education teaches students who to think critically, from first principles, to solve complex problems\n3) Engineering education teaches students that there may not be one solution to a problem, and the process for arriving at the solution is just as valuable as the solution itself.\n\nOverall, studying Engineering has many benefits both technical and non-technical.  Rather, it teaches students how to think.", "category": "IT"}, {"instruction": "Give me some facts about Ethiopia?", "input": "", "output": "Ethiopia is a federal parliamentary republic with a population of 113,656,596 people, as of 2021 (World factbook). The country is led by Prime Minister Abiy Ahmed, who came to power in 2018. Voting is allowed for citizens over 18 years of age, but it is not mandatory. Despite its leadership in government, Ethiopia faces significant issues with corruption. According to a corruption scale, the country ranks 129th out of 180 countries, with bribery being a common occurrence in government affairs. Agriculture is a major part of Ethiopia's economy, with 38.5 million hectares of land being cultivated in 2020(World factbook). The major crops grown in the country include coffee, pulses, oilseeds, cereals, potatoes, sugarcane, and vegetables. Approximately 80% of Ethiopia's population resides in rural areas due to the need for farming, while the remaining 20% lives in urban areas.", "category": "IT"}, {"instruction": "What does the Gini coefficient measure?", "input": "In economics, the Gini coefficient, also known as the Gini index or Gini ratio, is a measure of statistical dispersion intended to represent the income inequality or the wealth inequality or the consumption inequality within a nation or a social group. It was developed by statistician and sociologist Corrado Gini.\nThe Gini coefficient measures the inequality among values of a frequency distribution, such as levels of income. A Gini coefficient of 0 reflects perfect equality, where all income or wealth values are the same, while a Gini coefficient of 1 (or 100%) reflects maximal inequality among values. For example, if everyone has the same income, the Gini coefficient will be 0. In contrast, a Gini coefficient of 1 indicates that within a group of people, a single individual has all the income or consumption, while all others have none.\nThe Gini coefficient was proposed by Corrado Gini as a measure of inequality of income or wealth.  For OECD countries, in the late 20th century, considering the effect of taxes and transfer payments, the income Gini coefficient ranged between 0.24 and 0.49, with Slovenia being the lowest and Mexico the highest. African countries had the highest pre-tax Gini coefficients in 2008\u20132009, with South Africa having the world's highest, estimated to be 0.63 to 0.7, although this figure drops to 0.52 after social assistance is taken into account, and drops again to 0.47 after taxation. The global income Gini coefficient in 2005 has been estimated to be between 0.61 and 0.68 by various sources.", "output": "The Gini coefficient measures the inequality among values of a frequency distribution, such as levels of income.", "category": "IT"}, {"instruction": "Which of the following words starts with the letter S: Snake, Towel, Table, Shower, Yam, Butterfly, Apple", "input": "", "output": "Snake, Shower", "category": "IT"}, {"instruction": "What is CBT?", "input": "Technological advances also renewed interest in mental states and mental representations. English neuroscientist Charles Sherrington and Canadian psychologist Donald O. Hebb used experimental methods to link psychological phenomena to the structure and function of the brain. The rise of computer science, cybernetics, and artificial intelligence underlined the value of comparing information processing in humans and machines.\n\nA popular and representative topic in this area is cognitive bias, or irrational thought. Psychologists (and economists) have classified and described a sizeable catalogue of biases which recur frequently in human thought. The availability heuristic, for example, is the tendency to overestimate the importance of something which happens to come readily to mind.[91]\n\nElements of behaviorism and cognitive psychology were synthesized to form cognitive behavioral therapy, a form of psychotherapy modified from techniques developed by American psychologist Albert Ellis and American psychiatrist Aaron T. Beck.\n\nOn a broader level, cognitive science is an interdisciplinary enterprise involving cognitive psychologists, cognitive neuroscientists, linguists, and researchers in artificial intelligence, human\u2013computer interaction, and computational neuroscience. The discipline of cognitive science covers cognitive psychology as well as philosophy of mind, computer science, and neuroscience.[92] Computer simulations are sometimes used to model phenomena of interest.", "output": "Cognitive behavioral therapy (CBT) is a form of psychological treatment that is very effective to treat anxiety, substance abuse, eating disorders and several other mental health disorders.", "category": "IT"}, {"instruction": "What is appealing about Charleston in South Carolina?", "input": "", "output": "Charleston has a lot of historical sites that you can visit, which is great for educational purposes. The food is very diverse and provides many options for the pickiest of eaters. The low country is a beautiful scenery that sets the scene for cocktails, sunset catching and listening to the sounds of the creatures. There is a lot to see and learn from Charleston because of its southern charm and the people that have built its culture into a blossoming city.", "category": "IT"}, {"instruction": "Give me a list of nice board games to play with friends", "input": "", "output": "1. Cards Against Humanity\n2. Codenames\n3. The Game of Things\n4. Taboo\n5. Balderdash\n6. Scattergories\n7. Exploding Kittens", "category": "IT"}, {"instruction": "Where is Shuyga?", "input": "Shuyga (Russian: \u0428\u0443\u0439\u0433\u0430) is a rural locality (a settlement) in Surskoye Rural Settlement of Pinezhsky District, Arkhangelsk Oblast, Russia. The population was 472 as of 2010. There are 11 streets.", "output": "Shuyga is located on the Shuyga River, 99 km southeast of Karpogory (the district's administrative centre) by road. Shulomen is the nearest rural locality.", "category": "IT"}, {"instruction": "What's the best way to cook a soft-boiled egg?", "input": "", "output": "The best way to cook a soft-boiled egg:\n1. Add 1/2 inch of water into a pot.\n2. Bring water to a boil.\n3. Add the egg directly from the fridge.\n4. Simmer the egg for 6 minutes\n5. Drain the hot water and immediately submerge the egg in cold water\nIt's ready to eat when you are. Enjoy!", "category": "IT"}, {"instruction": "What is \"diglossia\"?", "input": "", "output": "Diglossia is when one community uses two different languages or dialects depending on the circumstances e.g. for written things and for casual conversation. A weird (not actual schoolbook) case of that is Swiss German. High German is used for written and formal things while Swiss German is used to speak.", "category": "IT"}, {"instruction": "Give me a bulleted list of the three most recent prime ministers of India", "input": "", "output": "1. Narendra Modi: Current prime minister of India since 2014\n2. Manmohan Singh: Former prime minister that chaired the prestigious position from 2004 till 2014.\n3. Atal Bihari Vajpayee: From 1998 to 2004, he was the prime minister of India.", "category": "IT"}, {"instruction": "How would you categorize the following sports into two groups; baseball, archery, decathlon, hockey", "input": "", "output": "One way of categorizing these sports is by whether they're team or individual competitions:\n\nTeam - baseball and hockey\n\nIndividual - archery and decathlon", "category": "IT"}, {"instruction": "What is the second oldest ballpark in Major League Baseball?", "input": "", "output": "The second oldest ballpark in Major League Baseball is Wrigley Field in Chicago, IL. It was built in 1914, two years after Fenway Park opened in Boston, MA.", "category": "IT"}, {"instruction": "What are some types of potatoes commonly grown in Ireland?", "input": "", "output": "Potato varieties can change in popularity over time. Most recently, the Irish Potato Federation has listed the following types as most popular: Rooster, Kerr's Pink, Golden Wonder, Salad & Baby Potatoes, and Maris Piper.", "category": "IT"}, {"instruction": "How do you know if you reached product market fit?", "input": "", "output": "Product market fit, a term used by the startups ecosystem to identify if they have a product that satisfies a need for a number of customers for a problem they are currently facing. There is not a single unit of measurement if a startup reached product market fit or not. One of the ways to measure product market fit is if a startup is able to develop a repeatable sales process and are able to do basic forecasting for revenue. A product market fit is crucially important for the first product released by a startup but it\u2019s also important for all upcoming releases of new products.", "category": "IT"}, {"instruction": "What are index funds?", "input": "", "output": "Index funds are investment funds that follow a benchmark index, such as the S&P 500 or the Nasdaq 100. When you put money in an index fund, that cash is then used to invest in all the companies that make up the particular index, which gives you a more diverse portfolio than if you were buying individual stocks.", "category": "IT"}, {"instruction": "How to calculate growth rate?", "input": "", "output": "The term \u201cgrowth rate\u201d describes the rate of change in the value of a specific metric across a given time period, expressed as a percentage.\n\nCommon examples of scenarios where the growth rate is often used are the following:\n\nCompany Sales\nPopulation Figures\nGross Domestic Product (GDP)\nInflation Rate\nUnder the specific context of financial modeling, the growth rate is most frequently on a quarterly or annual basis (i.e. year-over-year).\n\nMore defensible predictions can be made about the future trajectory of a metric in question by determining its historical growth, which can serve as a practical point of reference for forecasting purposes.\n\nHowever, the metric\u2019s usefulness is still tied to the extent that the underlying drivers are identified and researched in-depth.\n\nBy itself, calculating the historical growth is not enough, because what actually caused the past growth and which qualitative factors are likely to determine a metric\u2019s future growth must also be clearly understood.\n\n\nThe following formula can be used to calculate the growth rate across two periods.\n\nGrowth Rate (%) = (Ending Value \u00f7 Beginning Value) \u2013 1\nFor example, if a company\u2019s revenue was $100 million in 2020 and grew to $120 million in 2021, its year-over-year (YoY) growth rate is 20%.\n\nGrowth Rate = ($120 million \u00f7 $100 million) \u2013 1 = 0.20, or 20%", "category": "IT"}, {"instruction": "Why are dogs generally more popular than cats as pets?", "input": "", "output": "Although dogs generally seem to require more time and attention, they maintain their place as number 1 pet in the majority of countries. For example, statistics have shown that over 74% of US pet owners have a dog, in comparison with 47% owning a cat. \nThe reason for their popularity has to come down to their personality. Commonly, dogs are very social and affectionate creatures who enjoy spending time with their owners. Whereas, cats tend to be more independent animals by nature, and although they also require the attention of their owner, the majority prefer to keep to themselves. This stereotypical difference in behaviour is usually the main factor determining the popularity of these pets among people.", "category": "IT"}, {"instruction": "Name 10 of Kris Jenner's Grandchildren", "input": "", "output": "North West, Saint West, Chicago West, Psalm West, True Thompson, Dream Kardashian, Stormi Webster, Aire Webster, Mason Disick, Penelope Disick and Reign Disick.", "category": "IT"}, {"instruction": "What is the Turkish drink that tastes similar to", "input": "Ouzo is a clear liquid. However, when water or ice is added, ouzo turns a milky-white colour. This is because anethole, the essential oil of anise, is completely soluble in alcohol at approximately 38% ABV and above, but not in water. Diluting the spirit causes it to separate, creating an emulsion whose fine droplets scatter the light. This process is called louching and is also seen while preparing absinthe.\n\nThe drinks with a similar flavour of Ouzu include sambuca from (Italy), pastis from (France), oghi (from Armenia), rak\u0131 from Turkey, and arak (from the Levant). Its aniseed flavour is also similar to the anise-flavoured liqueur of an\u00eds (Spain) and the stronger spirits of absinthe (France and Switzerland). Aguardiente (Latin America), made from sugar cane, is also similar. The Italian drink Pallini Mistra, named after the Greek city of Mystras in the Peloponnese is a version of ouzo made in Rome that closely resembles Greek and Cypriot ouzo.", "output": "Rak\u0131 is a drink from Turkey that has similar flavour with Ouzo.", "category": "IT"}, {"instruction": "How many campgrounds does Shenandoah National Park have?", "input": "", "output": "Shenandoah National Park has five different campgrounds evenly dispersed throughout the park: Mathews Arm, Big Meadows, Lewis Mountain, Loft Mountain, and Dundo Group Campground. Mathews Arm is located in the northern section of the park. Big Meadows Campground is in the central portion of the park and is the most popular one. Lewis Mountain is similarly in the central part of the park, but is smaller, offering more privacy to people. Loft Mountain is the largest campground and is in the southern part of the park. Dundo Group Campground is also small and to the south, but only has group sites and the camp sits on the Appalachian Trail. The campsites offer different amenities such as food storage lockers and trash/recycling collection.", "category": "IT"}, {"instruction": "Who was the first women to do the spacewalk?", "input": "", "output": "Svetlana Savitskaya in the year 1984", "category": "IT"}, {"instruction": "Tell me whether each South Park character is a kid or adult: Randy, Stan, Kyle, Butters, Sharon", "input": "", "output": "Randy: Adult\nStan: Kid\nKyle: Kid\nButters: Kid\nSharon: Adult", "category": "IT"}, {"instruction": "What is the kiwi bird?", "input": "", "output": "The kiwi is a flightless bird with the scientific name Apteryx, meaning flightless big bird. It has relatives with the ostrich, the largest bird. The diet of the kiwi bird consists of woodlice, millipedes, centipedes, slugs, snails, spiders, insects, seeds, berries, and plant material. The Kiwi is a solitary animal that makes holes as hiding places for sleeping with its feet. The kiwi was created with a small, thin beak to get into crevices. This animal is almost extinct, and is important to the native ecosystem; the kiwi keeps the bug population down and is hunted by natural predators. New Zealand protects its most prized bird, for it is the only flightless bird in that ecosystem and a national symbol. The way we can protect and help the kiwi thrive is by donating to organizations like Save the Kiwi.", "category": "IT"}, {"instruction": "What is Unified Payments Interface (UPI) in India", "input": "", "output": "The Unified Payments Interface is a Peer to Peer payments system launched in India by the National Payments Corporation of India (NPCI) in 2016. NPCI set out with a mandate to change the face of India\u2019s payment systems. It developed the Unified Payments Interface (UPI) as an architecture framework with a set of standard Application Programming Interface (API) specifications to facilitate online payments. The aim was to simplify and provide a single interface across all NPCI systems, thereby creating interoperability and a superior customer experience.\n\nUPI is now one of the most preferred payment solutions in India, with over a billion transactions every month. FY22, the total transaction value processed by the United Payments Interface (UPI) platform accounted for 86% of India\u2019s GDP. UPI\u2019s core function is to support easy and secure money transfers between bank accounts. It does this by adding multiple bank accounts into a single mobile application, allowing for seamless fund transfers and merchant payments from one place. It also enables \u2018peer to peer\u2019 and \u2018peer to merchant\u2019 collection requests, which can be scheduled and paid as requested.\n\nPayments can be made using a UPI ID, UPI Number, Account number, and an Indian Financial System Code (IFSC). Payment security is as per applicable Reserve Bank of India (RBI) guidelines using a 1-click 2-factor authentication where the second factor of authentication is the UPI PIN. \n\nUPI can be accessed on all major platforms such as Android and iOS with apps developed by members for versions of Android 4.2.2 and iOS 8.1 and above.\n\nThe primary business uses of UPI are to allow a personal mobile as the primary device for all payments, including person to person, person to entity, and entity to person. Using a personal mobile an individual can \u2018Pay\u2019 someone (push) as well as \u2018Collect\u2019 from\nsomeone (pull). In addition, the ability to pay and collect using \u2018UPI IDs\u2019 that are \u2018aliases\u2019 to the VPA. The goal is to make  payments by providing an address without having to ever provide account details or credentials on third party applications or websites.\nAlso, sending \u2018collect\u2019 requests to others (person to person or entity to person) with a\u2018pay by\u2019 date, which allows customers to pay at a later date without blocking the money in the account. UPI also allows for pre-authorizing multiple recurring payments (utilities, school fees, subscriptions, etc.) with a one-time secure authentication and rule-based access, similar to ECS. UPI autopay allows customers to set recurring payments for their UPI transactions. Recurring payments up to Indian Rupees 2000 can be set at the frequency desired.\n\nThis makes payments using UPI a fully interoperable system across all PSPs without having silos and closed systems with one-click two-factor authentication, using a personal\nphone, and without any acquiring devices or physical tokens.\n\nIn March 2023, Reserve Bank of India (RBI) and the Monetary Authority of Singapore (MAS) launched the linkage of UPI and Singapore\u2019s PayNow. Remittances from Singapore to India were on track to breach the $100 billion mark in 2023, making it the fourth highest remitting nation to India, accounting for 5.7% of all inbound remittances. Integrating PayNow and UPI will likely reduce charges and the time taken for such transactions.", "category": "IT"}, {"instruction": "What is a spiral staircase?", "input": "", "output": "A spiral staircase is a set of stairs that circles around a central pole and allows for a steeper ascent than other stair designs.", "category": "IT"}, {"instruction": "Miles Davis, Rhianna, Elton John, John Coltrane, Taylor Swift, Amy Winehouse, Elvis, Billy Holiday. These are all musicians - list which of these are jazz musicians, and which are not.", "input": "", "output": "Miles Davis, John Coltrane, Amy Winehouse and Billy Holiday are considered to be jazz musicians. Rhianna, Taylor Swift, Elvis and Elton John are not jazz musicians.", "category": "IT"}, {"instruction": "Extract the criticisms that modern portfolio theory faces from this link https://en.wikipedia.org/wiki/Modern_portfolio_theory, place them in a bullet list", "input": "Despite its theoretical importance, critics of MPT question whether it is an ideal investment tool, because its model of financial markets does not match the real world in many ways\n\nThe risk, return, and correlation measures used by MPT are based on\u00a0[expected values](https://en.wikipedia.org/wiki/Expected_value), which means that they are statistical statements about the future (the expected value of returns is explicit in the above equations, and implicit in the definitions of\u00a0[variance](https://en.wikipedia.org/wiki/Variance)\n\u00a0and\u00a0[covariance](https://en.wikipedia.org/wiki/Covariance)). Such measures often cannot capture the true statistical features of the risk and return which often follow highly skewed distributions (e.g. the\u00a0[log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution)) and can give rise to, besides reduced\u00a0[volatility](https://en.wikipedia.org/wiki/Volatility_(finance)), also inflated growth of return.\u00a0In practice, investors must substitute predictions based on historical measurements of asset return and volatility for these values in the equations. Very often such expected values fail to take account of new circumstances that did not exist when the historical data were generated.\n\nMore fundamentally, investors are stuck with estimating key parameters from past market data because MPT attempts to model risk in terms of the likelihood of losses, but says nothing about why those losses might occur. The risk measurements used are\u00a0[probabilistic](https://en.wikipedia.org/wiki/Probability)\u00a0in nature, not structural. This is a major difference as compared to many engineering approaches to\u00a0[risk management](https://en.wikipedia.org/wiki/Risk_management).\n\nMathematical risk measurements are also useful only to the degree that they reflect investors' true concerns\u2014there is no point minimizing a variable that nobody cares about in practice. In particular,\u00a0[variance](https://en.wikipedia.org/wiki/Variance)\u00a0is a symmetric measure that counts abnormally high returns as just as risky as abnormally low returns. The psychological phenomenon of\u00a0[loss aversion](https://en.wikipedia.org/wiki/Loss_aversion)\u00a0is the idea that investors are more concerned about losses than gains, meaning that our intuitive concept of risk is fundamentally asymmetric in nature. There many other risk measures (like\u00a0[coherent risk measures](https://en.wikipedia.org/wiki/Coherent_risk_measure)) might better reflect investors' true preferences.\n\nModern portfolio theory has also been criticized because it assumes that returns follow a\u00a0[Gaussian distribution](https://en.wikipedia.org/wiki/Normal_distribution). Already in the 1960s,\u00a0[Benoit Mandelbrot](https://en.wikipedia.org/wiki/Benoit_Mandelbrot)\u00a0and\u00a0[Eugene Fama](https://en.wikipedia.org/wiki/Eugene_Fama)\u00a0showed the inadequacy of this assumption and proposed the use of more general\u00a0[stable distributions](https://en.wikipedia.org/wiki/Stable_distributions)\u00a0instead.\u00a0[Stefan Mittnik](https://en.wikipedia.org/wiki/Stefan_Mittnik)\u00a0and\u00a0[Svetlozar Rachev](https://en.wikipedia.org/wiki/Svetlozar_Rachev)\u00a0presented strategies for deriving optimal portfolios in such settings.\n\n[Contrarian investors](https://en.wikipedia.org/wiki/Contrarian_investing)\u00a0and\u00a0[value investors](https://en.wikipedia.org/wiki/Value_investing) typically do not subscribe to Modern Portfolio Theory.\u00a0One objection is that the MPT relies on the\u00a0[efficient-market hypothesis](https://en.wikipedia.org/wiki/Efficient-market_hypothesis)\n\u00a0and uses fluctuations in share price as a substitute for risk.\u00a0[Sir John Templeton](https://en.wikipedia.org/wiki/Sir_John_Templeton)\n\u00a0believed in diversification as a concept, but also felt the theoretical foundations of MPT were questionable, and concluded (as described by a biographer): \"the notion that building portfolios on the basis of unreliable and irrelevant statistical inputs, such as historical volatility, was doomed to failure.", "output": "- The risk, return, and correlation measures used by Modern portfolio theory (MPT) are based on\u00a0expected values, such expected values fail to take account of new circumstances that did not exist when the historical data were generated\n- The risk measurements used in MPT are\u00a0probabilistic because MPT models risk in terms of the likelihood of losses based on past market data and not why the losses occur.\n- MPT attempts to minimize risks in the form of variance. However, this metric doesn\u2019t reflect investors\u2019 true concerns in practice. Variance is symmetric, so it punishes high returns the same way as high losses. However, investors care more about loss than gain, so the perception of risk is asymmetric in nature. Coherent risk measures should be a better metric that reflects investors\u2019 preference\n- MPT assumes that returns follow Gaussian distribution. However, many scholars suggest that returns might follow other distributions such as stable distributions\n- MPT relies on the efficient-market hypothesis and assumes that share price fluctuation is a risk measure. However, building a portfolio based on historical volatility is a questionable premise criticized by Sir John Templeton", "category": "IT"}, {"instruction": "Give me a list of things I can do with a bunch of extra money.", "input": "", "output": "Here's what you can do with extra money:\n\nInvest in the stock market. For example, the average annualized return of the S&P 500 from 1928 through 2021 is 11.82%.\n\nInvest in yourself by purchasing classes. You can also explore new hobbies for your enjoyment. Some examples are skiing, painting, or playing guitar. \n\nTravel around the world to gain new experiences and experience new cultures.\n\nInvest in the real estate market.", "category": "IT"}, {"instruction": "Which is considered the first human technology?", "input": "", "output": "Fire", "category": "IT"}, {"instruction": "Given this paragraph about the Cold War, why did the Soviets pull out of their war in Afghanistan?", "input": "After World War II, parts of Eastern and Central Europe, including East Germany and eastern parts of Austria were occupied by Red Army according to the Potsdam Conference.[149] Dependent communist governments were installed in the Eastern Bloc satellite states.[150] After becoming the world's second nuclear power,[151] the Soviet Union established the Warsaw Pact alliance,[152] and entered into a struggle for global dominance, known as the Cold War, with the rivaling United States and NATO.[153] After Stalin's death in 1953 and a short period of collective rule, the new leader Nikita Khrushchev denounced Stalin and launched the policy of de-Stalinization, releasing many political prisoners from the Gulag labor camps.[154] The general easement of repressive policies became known later as the Khrushchev Thaw.[155] At the same time, Cold War tensions reached its peak when the two rivals clashed over the deployment of the United States Jupiter missiles in Turkey and Soviet missiles in Cuba.[156]\n\nIn 1957, the Soviet Union launched the world's first artificial satellite, Sputnik 1, thus starting the Space Age.[157] Russian cosmonaut Yuri Gagarin became the first human to orbit the Earth, aboard the Vostok 1 manned spacecraft on 12 April 1961.[158] Following the ousting of Khrushchev in 1964, another period of collective rule ensued, until Leonid Brezhnev became the leader. The era of the 1970s and the early 1980s was later designated as the Era of Stagnation. The 1965 Kosygin reform aimed for partial decentralisation of the Soviet economy.[159] In 1979, after a communist-led revolution in Afghanistan, Soviet forces invaded the country, ultimately starting the Soviet\u2013Afghan War.[160] In May 1988, the Soviets started to withdraw from Afghanistan, due to international opposition, persistent anti-Soviet guerrilla warfare, and a lack of support by Soviet citizens.[161]\n\nFrom 1985 onwards, the last Soviet leader Mikhail Gorbachev, who sought to enact liberal reforms in the Soviet system, introduced the policies of glasnost (openness) and perestroika (restructuring) in an attempt to end the period of economic stagnation and to democratise the government.[162] This, however, led to the rise of strong nationalist and separatist movements across the country.[163] Prior to 1991, the Soviet economy was the world's second-largest, but during its final years, it went into a crisis.[164]\n\nBy 1991, economic and political turmoil began to boil over as the Baltic states chose to secede from the Soviet Union.[165] On 17 March, a referendum was held, in which the vast majority of participating citizens voted in favour of changing the Soviet Union into a renewed federation.[166] In June 1991, Boris Yeltsin became the first directly elected president in Russian history when he was elected president of the Russian SFSR.[167] In August 1991, a coup d'\u00e9tat attempt by members of Gorbachev's government, directed against Gorbachev and aimed at preserving the Soviet Union, instead led to the end of the Communist Party of the Soviet Union.[168] On 25 December 1991, following the dissolution of the Soviet Union, along with contemporary Russia, fourteen other post-Soviet states emerged.", "output": "The Soviets withdrew from the Soviet-Afghan War beginning in May 1988 due to international opposition, persistent anti-Soviet guerrilla warfare, and a lack of support by Soviet citizens.", "category": "IT"}, {"instruction": "Why did the Seattle Supersonics leave Seattle?", "input": "", "output": "In 2006 the owner of the team, Howard Schultz, sold the team Clay Bennett. Clay Bennett originally agreed to keep the team in Seattle, however, he then told the city that if a new arena was not built using public funds that he would move the team. Ultimately, public funding for the arena fell through and the team was moved to Oklahoma. The team is now known at the Oklahoma City Thunder. The relocation of the team was very controversial as local news organizations and fans believe that Clay Bennett's intention was to remove the team from Seattle and did not provide reasonable terms for a renovation of the basketball arena.", "category": "IT"}, {"instruction": "Categorize each of the following as either 'spicy', 'not spicy' or 'sometimes spicy': jalapenos, chilis, sriracha, chips, pizza, cocktails, fruit, milk", "input": "", "output": "Jalapenos are spicy.\nChilis are spicy.\nSriracha is spicy.\nChips are sometimes spicy.\nPizza is sometimes spicy.\nCocktails are sometimes spicy.\nFruit is not spicy.\nMIlk is not spicy.", "category": "IT"}, {"instruction": "Give me three ideas for a fun dinner party", "input": "", "output": "Here are some engaging party ideas that put food at the center!\n- Tapas party: make lots of small dishes, such as stuffed mushrooms, that are easily passed and snacked on throughout an evening. This is great for a casual get together of friends, and leaves plenty of time for socializing. \n\n- Potluck: ask all attendees to bring one dish. This is a great way to let your guests showcase their own skills and share something they love, while also reducing the amount of prep required by the host!\n\n- One-dish meals: if you don't want to spend all day prepping, make a fun dish such as paella (large Spanish rice dish) or chili (green or red) that you can prepare in one large serving. These can also be made to accommodate dietary restrictions, such as vegetarian or gluten-free guests.", "category": "IT"}, {"instruction": "What are the benefits of division of labour?", "input": "The division of labour is the separation of the tasks in any economic system or organization so that participants may specialize (specialization). Individuals, organizations, and nations are endowed with or acquire specialized capabilities, and either form combinations or trade to take advantage of the capabilities of others in addition to their own. Specialized capabilities may include equipment or natural resources as well as skills. Training and combinations of equipment and other assets acting together are often important. For example, an individual may specialize by acquiring tools and the skills to use them effectively just as an organization may specialize by acquiring specialized equipment and hiring or training skilled operators. The division of labour is the motive for trade and the source of economic interdependence.\n\nHistorically, an increasing division of labour is associated with the growth of total output and trade, the rise of capitalism, and the increasing complexity of industrialized processes. The concept and implementation of division of labour has been observed in ancient Sumerian (Mesopotamian) culture, where assignment of jobs in some cities coincided with an increase in trade and economic interdependence. Division of labour generally also increases both producer and individual worker productivity.\n\nAfter the Neolithic Revolution, pastoralism and agriculture led to more reliable and abundant food supplies, which increased the population and led to specialization of labour, including new classes of artisans, warriors, and the development of elites. This specialization was furthered by the process of industrialization, and Industrial Revolution-era factories. Accordingly, many classical economists as well as some mechanical engineers, such as Charles Babbage, were proponents of division of labour. Also, having workers perform single or limited tasks eliminated the long training period required to train craftsmen, who were replaced with less-paid but more productive unskilled workers.", "output": "In general the following benefits are associated with increasing division of labour:\n- increase in total trade \n- increase in total output\n- an increase in market activity\n- increased specialization\n- increasing complexity of industrialized processes", "category": "IT"}, {"instruction": "What is the largest or biggest land animal?", "input": "", "output": "The largest or biggest land animal is the African bush elephant. It can reach weights of up to 10000 kgs (or 22000 lbs). However historically there have been dinosaurs that are greater in weight than elephants.", "category": "IT"}, {"instruction": "why is Mahatma Gandhi loved by everyone?", "input": "", "output": "Mahatma Gandhi preached non-cooperation using non-violent methods as a way to win against the oppressive rulers without resorting to guns.  This is difficult to do and requires public's cooperation.", "category": "IT"}, {"instruction": "What is Game of Thrones based on?", "input": "", "output": "Game of Thrones is based on the books written by George R. R. Martin called a Song of Ice and Fire.", "category": "IT"}, {"instruction": "What are the benefits of collaborating on a tech blog with your customers?", "input": "", "output": "It will improve visibility of the product. It will help with your customers' career. It will benefit other customers with related use cases.", "category": "IT"}, {"instruction": "Given this paragraph, how many public high schools are in Arlington, Virginia?", "input": "Arlington Public Schools operates the county's public K-12 education system of 22 elementary schools; 6 middle schools (Dorothy Hamm Middle School, Gunston Middle School, Kenmore Middle School, Swanson Middle School, Thomas Jefferson Middle School, and Williamsburg Middle School); and 3 public high schools (Wakefield High School, Washington-Liberty High School, and Yorktown High School). H-B Woodlawn and Arlington Tech are alternative public schools. Arlington County spends about half of its local revenues on education. For the FY2013 budget, 83 percent of funding was from local revenues, and 12 percent from the state. Per pupil expenditures are expected to average $18,700, well above its neighbors, Fairfax County ($13,600) and Montgomery County ($14,900).[135]", "output": "There are 3 public high schools in Arlington, Va.", "category": "IT"}, {"instruction": "What are all of the professional baseball teams in the state of Florida?", "input": "", "output": "The professional baseball teams in the state of Florida are the Tampa Bay Rays and Miami Marlins.", "category": "IT"}, {"instruction": "Given the reference text about the Cy Young Award, please describe what the award is and why it is awarded.", "input": "The Cy Young Award is given annually to the best pitchers in Major League Baseball (MLB), one each for the American League (AL) and National League (NL). The award was first introduced in 1956 by Baseball Commissioner Ford Frick in honor of Hall of Fame pitcher Cy Young, who died in 1955. The award was originally given to the single best pitcher in the major leagues, but in 1967, after the retirement of Frick, the award was given to one pitcher in each league.", "output": "The Cy Young Award is given to the best pitches in the American and National leagues of Major League Baseball, for their achievements that exceed those of their peers.", "category": "IT"}, {"instruction": "Extract what is Top Gun", "input": "The United States Navy Strike Fighter Tactics Instructor program (SFTI program), more popularly known as Top Gun (stylized as TOPGUN), is an American military program that teaches fighter and strike tactics and techniques to selected naval aviators and naval flight officers, who return to their operating units as surrogate instructors.", "output": "The United States Navy Fighter Weapons School was established on 3 March 1969, at Naval Air Station Miramar, California. \n\nThe unit's purpose was to train fighter air crews  in all aspects of fighter weapons systems and the art of aerial combat.  It serves to build a nucleus of eminently knowledgeable fighter crews to construct, guide, and enhance weapons training cycles and subsequent aircrew performance. This select group acts as the F-4 community\u2019s most operationally orientated weapons specialists. Top Gun's efforts are dedicated to the Navy\u2019s professional fighter crews, past, present and future.", "category": "IT"}, {"instruction": "Where to find the best croissant in San Francisco?", "input": "", "output": "This is hard to say as the answer heavily depends on your preference. Arsicault is generally a very popular bakery for croissants. The croissants here are very flaky and very buttery. If that is right up your alley, definitely give them a visit! Other than Arsicault, there are many bakeries in SF that offers croissant with a creative twist. A couple examples are Hahdough for pretzel croissants and Arizmendi for sourdough croissants. Personally, I prefer my croissants to be not too buttery but moist in the middle and crunchy on the outside. My personal favorite is Schubert's Bakery in Inner Richmond. The price point and taste well align with what I am looking for!", "category": "IT"}, {"instruction": "Do cats have nine lives?", "input": "", "output": "No", "category": "IT"}, {"instruction": "What is Microsoft?", "input": "Microsoft Corporation is an American multinational technology corporation headquartered in Redmond, Washington. Microsoft's best-known software products are the Windows line of operating systems, the Microsoft Office suite, and the Internet Explorer and Edge web browsers. Its flagship hardware products are the Xbox video game consoles and the Microsoft Surface lineup of touchscreen personal computers. Microsoft ranked No. 14 in the 2022 Fortune 500 rankings of the largest United States corporations by total revenue;[2] it was the world's largest software maker by revenue as of 2022. It is considered as one of the Big Five American information technology companies, alongside Alphabet (parent company of Google), Amazon, Apple, and Meta (formerly Facebook).", "output": "Microsoft Corporation is an American multinational technology corporation headquartered in Redmond, Washington. Microsoft's best-known software products are the Windows line of operating systems, the Microsoft Office suite, and the Internet Explorer and Edge web browsers.", "category": "IT"}, {"instruction": "How do you make soap?", "input": "", "output": "Soap is made with a mixture of natural or organic oils, sodium hydroxide and distilled water.  When making soap you need to mix a combination of light and heavy oils like olive and coconut oil and then mix it with sodium hydroxide and distilled water.  After this mixture has been mixed well you poor it into soap molds and let it hard over the course of many weeks.  This process called saponification is the time it takes for the sodium hydroxide to evaporate from the mixture which causes the soap to harden in he soap molds.  Other options you have when making soap are to add essential oils, like lavender and grapefruit to give a nice scent to the soap.  This has to be added prior to saponification.", "category": "IT"}, {"instruction": "How would I get from an upstairs apartment to the parking garage?", "input": "", "output": "If I needed to get from an upstairs apartment to the parking garage, I first would need to know where the parking garage is located.  Most parking garages at apartment complexes are located underground; however, some are above-ground.  Once I've determined where the parking garage is, I would exit my apartment by opening the door, stepping out into the hallway, and then locking the door, and then walk down the hallway in the direction of the elevator or stairs.  I would take the elevator or stairs to the appropriate floor and then exit into the parking garage.  I'm probably in the parking garage because I'm going to my car, so the next step would be to locate my car.  One trick for locating a car in a parking garage is to click the alarm or door lock button on your car's remote to make a sound.", "category": "IT"}, {"instruction": "What are three most commonly sung lyric soprano arias?", "input": "", "output": "Three most commonly sung lyric soprano arias?\n- \"Quando m'en vo\" from La Boheme by Puccini\n- \"O mio babbino caro\" from Gianni Schicchi by Puccini\n- \"Deh! vieni non tardar\" from Le Nozze di Figaro by Mozart", "category": "IT"}, {"instruction": "Cases of Anthrax were found in Kerala in which animals?", "input": "", "output": "Wild Boars", "category": "IT"}, {"instruction": "Categorize the following Taylor Swift songs based on what album they are in: The Archer, tolerate it, Lover, Love Story (Taylor's Version), Bejeweled, Don't Blame Me, 22 (Taylor's version), Look What You Made Me Do, Lavender Haze, willow, Cruel Summer", "input": "", "output": "The following songs are in Taylor Swift's album Lover: The Archer, Lover, Cruel Summer.\nThe following song is in the album Fearless (Taylor's Version): Love Story (Taylor's Version)\nThe following songs are in the album evermore: tolerate it, willow\nThe following songs are in the album Reputation: Don't Blame Me, Look What You Made Me Do\nThe following song is in the album Red (Taylor's Version): 22 (Taylor's version) \nThe following songs are in the album Midnights: Bejeweled, Lavender Haze", "category": "IT"}, {"instruction": "I'm creating a class to explain to kids the difference between items that are powered and can be plugged in and items that aren't. Please divide the following things into those you can plug in and those that you can't: table, hairdryer, television, chair, computer, fridge, comb, flowers.", "input": "", "output": "A hairdryer, television, computer and fridge are all examples of things that can be plugged in and powered by electricity. A common table, chair, comb and flower are examples of items that do not require electricity and cannot be plugged in.", "category": "IT"}, {"instruction": "Can you describe what team effectiveness is?", "input": "Team effectiveness (also referred to as group effectiveness) is the capacity a team has to accomplish the goals or objectives administered by an authorized personnel or the organization. A team is a collection of individuals who are interdependent in their tasks, share responsibility for outcomes, and view themselves as a unit embedded in an institutional or organizational system which operates within the established boundaries of that system. Teams and groups have established a synonymous relationship within the confines of processes and research relating to their effectiveness (i.e. group cohesiveness, teamwork) while still maintaining their independence as two separate units, as groups and their members are independent of each other's role, skill, knowledge or purpose versus teams and their members, who are interdependent upon each other's role, skill, knowledge and purpose.", "output": "Team effectiveness is the capacity a team has to achieve the goals set for that team. Teams are considered more or less effective based on their ability to achieve their goals and objectives. Teams are comprised of individuals who are interdependent in their tasks, share responsibility for outcomes, and view themselves as a unit embedded in an institutional or organizational system which operates within the boundaries of that system.", "category": "IT"}, {"instruction": "From the passage below, extract the names of the companies and technologies that Walmart has acquired over the last 3 years.", "input": "In the first quarter of 2020, consumers responded to COVID by shopping less frequently (5.6% fewer transactions), and buying more when they did shop (16.5%).[133] As people shifted from eating out to eating at home,[34] net sales at Walmart increased by 10.5%, while online sales rose by 74%. Although Walmart experienced a 5.5% increase in operating expenses, its net income increased by 3.9%.[133] In the third quarter of 2020, ending October 31, Walmart reported revenue of $134.7 billion, representing a year-on-year increase of 5.2 percent.[134]\n\nIn December 2020, Walmart launched a new service, Carrier Pickup, that allows the customers to schedule a return for a product bought online, in-store, or from a third-party vendor. These services can be initiated on the Walmart App or on the website.[135]\n\nIn January 2021, Walmart announced that the company is launching a fintech startup, with venture partner Ribbit Capital, to provide financial products for consumers and employees.[136]\n\nIn February 2021, Walmart acquired technology from Thunder Industries, which uses automation to create digital ads, to expand its online marketing capabilities.[137]\n\nIn August 2021, Walmart announced it would open its Spark crowdsource delivery to other businesses as a white-label service, competing with Postmates and online food ordering delivery companies.[114]\n\nIn December 2021, Walmart announced it will participate in the Stephens Investment Conference Wednesday, and the Morgan Stanley Virtual Global Consumer & Retail Conference.[138] In June 2022, Walmart announced it would be acquiring Memomi, an AR optical tech company.[139]\n\nIn August 2022, Walmart announced it would be acquiring Volt Systems, a vendor management and product tracking software company.[140] Walmart announced it was partnering with Paramount to offer Paramount+ content to its Walmart+ subscribers in a bid to better compete with Amazon.[141]\n\nWalmart announced in August 2022 that locations were not going back to 24 hours with most stores now being open between 6am and 11pm.[142]\n\nIn January 2023, Walmart announced it would raise its minimum wage for U.S. hourly workers from $12 to $14 an hour. Approximately 340,000 employees are expected to receive a raise, effective in early March 2023, and Walmart's U.S. average wage is expected to be over $17.50. The company also announced it would be adding additional college degrees and certificates to its Live Better U program.[143]", "output": "Walmart acquired Volt Systems in August 2022. Volt Systems focuses on vendor management and product tracking. They also acquired technology from Thunder Industries in February 2021 to create digital advertisements.", "category": "IT"}, {"instruction": "Tell whether these are countries, cities, continents or neither: Australia, Mexico, Mexico city, Antartica, Singapore, India, Gulf, Beijing, Jakarta, Luxembourg, Vatican City", "input": "", "output": "Australia is a country as well as a continent.\nMexico is a country.\nMexico City is a city.\nAntarctica is a continent.\nSingapore is a country as well as a city.\nIndia is a country.\nGulf is neither.\nBeijing is a city.\nJakarta is a city.\nLuxembourg is a country as well as a city.\nVatican City is a country as well as a city.", "category": "IT"}, {"instruction": "Why do people like gardening?", "input": "", "output": "People like to garden to grow their own food, flowers, and medicine, as well as experience the outdoors and natural ecosystems around us.  Some also like to garden to improve the aesthetics and monetary value of their property.", "category": "IT"}, {"instruction": "I am on a week long vacation to India and specifically want to explore Himalayan state of Himachal Pradesh. How should I plan my trip ?", "input": "", "output": "Firstly , fly to Delhi or Chandigarh. These cities are well connected via flights from across the world.  Next , take an overnight bus to Manali.  There are ample buses available connecting Manali from any cities.  Spend 4 days of your time  enjoying local cuisine and sight seeing.   Do carry wollens  as temperature drops sub zero during the night. Next , head towards Shimla and spend 2 days here for local sightseeing enjoying marvels of British architectures and old mall road.  Wrap up your trip travelling back to Delhi or Chandigarh. Spend time doing some local shopping before you fly back home.", "category": "IT"}, {"instruction": "From the passage provided, extract the second studio album that Taylor Swift released.", "input": "Swift signed a record deal with Big Machine Records in 2005 and released her eponymous debut album the following year. With 157 weeks on the Billboard 200 by December 2009, the album was the longest-charting album of the 2000s decade.[8] Swift's second studio album, Fearless (2008), topped the Billboard 200 for 11 weeks and was the only album from the 2000s decade to spend one year in the top 10.[9][10] The album was certified Diamond by the RIAA.[11] It also topped charts in Australia and Canada, and has sold 12 million copies worldwide.[12] Her third studio album, the self-written Speak Now (2010), spent six weeks atop the Billboard 200[13] and topped charts in Australia, Canada, and New Zealand.[14]", "output": "Fearless", "category": "IT"}, {"instruction": "Is there a World Taekwondo Grand Prix", "input": "The World Taekwondo Grand Prix is a taekwondo competition introduced by the World Taekwondo Federation in 2013 to provide a homogeneous system for qualification to the Olympic taekwondo tournament. It consists of four competitions per year in each Olympic weight category event. Olympic events occur at approximately half the weight classes as WTF-organised tournaments.", "output": "The World Taekwondo Grand Prix is a taekwondo competition introduced by the World Taekwondo Federation in 2013 to provide a homogeneous system for qualification to the Olympic taekwondo tournament. It consists of four competitions per year in each Olympic weight category event. Olympic events occur at approximately half the weight classes as WTF-organised tournaments.", "category": "IT"}, {"instruction": "Based on the provided text, place the following books in chronological order: \nThe Fox in the Attic, In Hazard: A Sea Story, A High Wind in Jamaica, and The Wooden Shepherdess", "input": "\"The Fox in the Attic\" was originally published in 1961 by Chatto & Windus: London as v. 1 of The Human Predicament trilogy, and then in the United States by Harper & Brothers: New York. This was 23 years after Hughes's previous novel, In Hazard: A Sea Story, and 33 years after A High Wind in Jamaica, which was a best seller in the United Kingdom and America.It was published the following year in Sweden (Stockholm: Norstedt) as R\u00e4ven p\u00e5 vinden.\n\nThe second novel in The Human Predicament trilogy, The Wooden Shepherdess, was published in 1973 by Chatto & Windus: London; it carries on the story to 1934 and the Night of the Long Knives.[6] The third and final novel was left unfinished, but the completed twelve chapters were included in the 2000 New York Review of Books edition of The Wooden Shepherdess.[2]", "output": "The order of the books are as follows:\n1) A High Wind in Jamaica\n2) In Hazard: A Sea Story\n3) The Fox in the Attic\n4) The Wooden Shepherdess", "category": "IT"}, {"instruction": "What is the best way to invest my money?", "input": "", "output": "There is no one way to best invest your money, it is based on multiple factors that determines how you should allocate in different asset types. Here are some factors that influence your investment allocation.\n\n- Time horizon: This is the amount of time you intend to have your money invested. This is important as different asset classes are impacted more or less by short term market conditions. Based on how long you wish to be exposed to the market choosing an asset type that aligns with your time horizon is very important in your investment strategy.\n\n- Risk Profile:  Indicates how confortable you are with the impact fluctuating market conditions have in your investments. Higher risk assets offer the biggest returns but they also have a higher chance of going down or loosing your investment completely. Understanding your risk profile is the first step in investing your money well. There are different investments assets that fit into different risk levels, a combination of these will offer a balanced way of investing your money. \n\n- Active/Passive investor: Depending on how much you want to be involved in the asset selection and allocation you would be considered an active investor or passive investor. Active investors are investors that spend extensive amount of time analysing the market and choosing assets for their portfolio. These investors may invest directly into stocks or stock options. Passive investors are investors that want to be exposed to the market but don't want to spend extensive amount of time selecting their assets, these investors leverage ETFs or mutual funds, that bundle different asset classes in one asset, to be exposed to their desired market without the need of choosing their underlying assets.. \n\nTheir is no right or wrong way of investing your money, it is important to understand what type of investor you are and choose what works best for you.", "category": "IT"}, {"instruction": "Do George Lucas and Steven Spielberg know each other?", "input": "", "output": "Yes, George Lucas and Steven Spielberg are long-time friends, dating back to their first meeting in 1967. They have collaborated and supported each other on a number of films and celebrated each others success in the field of filmmaking.", "category": "IT"}, {"instruction": "Give me a list of the best bravo tv shows", "input": "", "output": "Real housewives of Beverly Hills, vanderpump rules, southern charm, real housewives of Orange County, real housewives of New York, summer house, winter house", "category": "IT"}, {"instruction": "What is FIFA?", "input": "The recognised international governing body of football (and associated games, such as futsal and beach soccer)[d] is FIFA. The FIFA headquarters are located in Z\u00fcrich, Switzerland. Six regional confederations are associated with FIFA; these are:[136]\n\nAsia: Asian Football Confederation (AFC)\nAfrica: Confederation of African Football (CAF)\nEurope: Union of European Football Associations (UEFA)\nNorth/Central America & Caribbean: Confederation of North, Central American and Caribbean Association Football (CONCACAF)\nOceania: Oceania Football Confederation (OFC)\nSouth America: Confederaci\u00f3n Sudamericana de F\u00fatbol (South American Football Confederation; CONMEBOL)\nNational associations (or national federations) oversee football within individual countries. These are generally synonymous with sovereign states (for example, the Cameroonian Football Federation in Cameroon), but also include a smaller number of associations responsible for sub-national entities or autonomous regions (for example, the Scottish Football Association in Scotland). 211 national associations are affiliated both with FIFA and with their respective continental confederations.[136]\n\nWhile FIFA is responsible for arranging competitions and most rules related to international competition, the actual Laws of the Game are set by the IFAB, where each of the UK Associations has one vote, while FIFA collectively has four votes.[43]", "output": "FIFA stands for F\u00e9d\u00e9ration internationale de football association. It is the main international governing body for the sport of soccer (called football internationally outside the US)", "category": "IT"}, {"instruction": "From the passage provided, extract the state Lincoln was born in", "input": "Abraham Lincoln (/\u02c8l\u026a\u014bk\u0259n/ LINK-\u0259n; February 12, 1809 \u2013 April 15, 1865) was an American lawyer, politician and statesman who served as the 16th president of the United States from 1861 until his assassination in 1865. Lincoln led the Union through the American Civil War to defend the nation as a constitutional union and succeeded in abolishing slavery, bolstering the federal government, and modernizing the U.S. economy.\n\nLincoln was born into poverty in a log cabin in Kentucky and was raised on the frontier, primarily in Indiana. He was self-educated and became a lawyer, Whig Party leader, Illinois state legislator, and U.S. Congressman from Illinois. In 1849, he returned to his successful law practice in central Illinois. In 1854, he was angered by the Kansas\u2013Nebraska Act, which opened the territories to slavery, and he re-entered politics. He soon became a leader of the new Republican Party. He reached a national audience in the 1858 Senate campaign debates against Stephen A. Douglas. Lincoln ran for president in 1860, sweeping the North to gain victory. Pro-slavery elements in the South viewed his election as a threat to slavery, and Southern states began seceding from the nation. During this time, the newly formed Confederate States of America began seizing federal military bases in the south. Just over one month after Lincoln assumed the presidency, the Confederate States attacked Fort Sumter, a U.S. fort in South Carolina. Following the bombardment, Lincoln mobilized forces to suppress the rebellion and restore the union.", "output": "Lincoln was born in the state of Kentucky", "category": "IT"}, {"instruction": "Who was the first woman to have four country albums reach No. 1 on the Billboard 200?", "input": "", "output": "Carrie Underwood.", "category": "IT"}, {"instruction": "Which coin of U.S currency has the most ridges.", "input": "", "output": "The U.S. half dollar is the winner with 150 ridges.", "category": "IT"}, {"instruction": "What is the difference between a shrub and a tree?", "input": "", "output": "Some biologists maintain that there is no genetic difference between shrubs and trees - some species may have expressions in tree form and shrub form.  Other scientists believe that the physical form is essential and that shrubs are distinct from trees.", "category": "IT"}, {"instruction": "What city in the United States is known for its Mardi Gras celebrations?", "input": "", "output": "New Orleans is famous for its celebrations of Mardi Gras", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Hulk, Spectre", "input": "", "output": "Spectre is DC, Hulk is Marvel", "category": "IT"}, {"instruction": "Extract why Tim Lincecum was called \"The Freak\"", "input": "Timothy Leroy Lincecum (/\u02c8l\u026ans\u0259k\u028cm/ LIN-s\u0259-kum;[1] born June 15, 1984), nicknamed \"The Freak\", \"The Franchise\", \"The Freaky Franchise\" and \"Big Time Timmy Jim\",[2] is an American former professional baseball pitcher. He played in Major League Baseball (MLB) for the San Francisco Giants (2007 to 2015) and Los Angeles Angels (2016). A two-time Cy Young Award winner, Lincecum helped the Giants win three World Series championships from 2010 through 2014.", "output": "Nicknamed \"The Freak\" for his ability to generate powerful pitches despite his slight physique (5 feet 11 inches, 170 pounds), the power pitcher led the National League in strikeouts for three consecutive years in a span from 2008 to 2010. He also led the league in shutouts in 2009 and won the Babe Ruth Award in 2010 as the most valuable player of the MLB postseason. Lincecum won consecutive Cy Young Awards in 2008 and 2009, becoming the first MLB pitcher to win the award in his first two full seasons. He also appeared in four consecutive All-Star Games from 2008 through 2011 and pitched no-hitters in 2013 and 2014.", "category": "IT"}, {"instruction": "Which players won the men's singles grand slam tennis tournaments in 2022.", "input": "", "output": "The following players won the men's singles grand slam tennis tournaments in 2022:\n- Rafael Nadal won the Australian Open and the French Open\n- Novak Djokovic won Wimbledon\n- Carlos Alcaraz won the US Open", "category": "IT"}, {"instruction": "Can you tell me something about Stanley J. Goldberg", "input": "Stanley J. Goldberg (born Maryland, 1939) is a special trial judge of the United States Tax Court.\n\nGoldberg attended public schools in Baltimore, MD. He earned a B.S. from the University of Maryland, School of Business and Public Administration in 1960 and an LL.B. from the University of Maryland School of Law in 1964. He did graduate work in Federal Income Taxation at New York University. Goldberg was admitted to practice in Maryland and New Jersey, 1964 and 1967, and Federal District Court. He began his career as a Tax Attorney in January 1965 with the United States Department of Treasury, Office of Chief Counsel, Internal Revenue Service, in New York City and was initially assigned to the General Litigation function. In 1967, he was reassigned to the Tax Litigation function. In 1976, he was promoted to Special Trial Attorney, and then to Assistant District Counsel in 1984. He was appointed a Special Trial Judge of the United States Tax Court on August 4, 1985.\n\nIn 1992, Goldberg commented on the trend of tax protester arguments being brought before the Tax Court and dismissed with penalties.[1]", "output": "Stanley J. Goldberg (born Maryland, 1939) is a special trial judge of the United States Tax Court.\n\nGoldberg attended public schools in Baltimore, MD. He earned a B.S. from the University of Maryland, School of Business and Public Administration in 1960 and an LL.B. from the University of Maryland School of Law in 1964. He did graduate work in Federal Income Taxation at New York University. Goldberg was admitted to practice in Maryland and New Jersey, 1964 and 1967, and Federal District Court. \n\nHe began his career as a Tax Attorney in January 1965 with the United States Department of Treasury, Office of Chief Counsel, Internal Revenue Service, in New York City and was initially assigned to the General Litigation function. In 1967, he was reassigned to the Tax Litigation function. In 1976, he was promoted to Special Trial Attorney, and then to Assistant District Counsel in 1984. He was appointed a Special Trial Judge of the United States Tax Court on August 4, 1985.\n\nIn 1992, Goldberg commented on the trend of tax protester arguments being brought before the Tax Court and dismissed with penalties.", "category": "IT"}, {"instruction": "Please summarize the causes and cure for color blindness given in the passage?", "input": "The most common cause of color blindness is an inherited problem or variation in the functionality of one or more of the three classes of cone cells in the retina, which mediate color vision.[2] The most common form is caused by a genetic disorder called congenital red\u2013green color blindness. Males are more likely to be color blind than females, because the genes responsible for the most common forms of color blindness are on the X chromosome.[2] Non-color-blind females can carry genes for color blindness and pass them on to their children.[2] Color blindness can also result from physical or chemical damage to the eye, the optic nerve, or parts of the brain.[2] Screening for color blindness is typically done with the Ishihara color test.[2]\n\nThere is no cure for color blindness.[2] Diagnosis may allow an individual, or their parents/teachers to actively accommodate the condition.[1] Special lenses such as EnChroma glasses or X-chrom contact lenses may help people with red\u2013green color blindness at some color tasks,[2] but they do not grant the wearer \"normal color vision\".[3] Mobile apps can help people identify colors.[2]", "output": "The most common cause of color blindness is genetic disorder. Males are more likely to be color blind than females, because the genes responsible for the same are present on the X chromosome. Females who are non-color blind could still carry and pass on genes for color blindness. Any kind of physical or chemical damage to the eye, optic nerve or brain could also lead to the same.\n\nThere is no cure for color blindness. Affected people can actively accommodate the condition or use special glasses or lenses that can help people with red-green color blindness to a certain extent. There are mobile apps available as well to help identify colors.", "category": "IT"}, {"instruction": "How can I improve my finances?", "input": "", "output": "Determine your short and long term financial goals. \nCreate a budget based on your total income, necessary, and discretionary expenses. \nPay down high interest debt first, such as credit card debt.\nPay off your credit cards in full each month. \nCreate an emergency fund that covers 3-6 months of expenses.\nMax out your 401K contributions every year.\nUse a high interest savings account instead of saving money with a traditional bank so you don't lose money due to inflation. \nCreate a diversified investment account.\nHire a financial planner to manage your assets. \nTurn a hobby into a second job and earn passive income. \nReduce temptations to overspend by setting up an automatic transfer from your paycheck into a savings account.", "category": "IT"}, {"instruction": "What is Zenthoefer Furs", "input": "Zenthoefer Furs were an amateur U.S. soccer club which played in St. Louis, Missouri during the late 1940s and early 1950s.\n\nThey had played as a junior squad named Schumachers in the 1947-48 season where they fell short of national honors when they lost in the final round of the National Junior Cup to Lighthouse Boys of Philadelphia. The Zenthoefers turned senior the next season. Under the guidance of manager George E. McGann they made their way to the 1949 National Amateur Cup final losing to SC Elizabeth by a 6-1 score. They also lost to the Chicago Polish-Americans 5-1 in the 1949 National Challenge Cup quarterfinals. In 1951, they won the St. Louis Major League by ten points over St. Louis Simpkins-Ford. In 1952, they entered the American Soccer League of St. Louis.", "output": "Zenthoefer Furs were an amateur U.S. soccer club which played in St. Louis, Missouri during the late 1940s and early 1950s.", "category": "IT"}, {"instruction": "What are the three branches of the US Federal Government?", "input": "", "output": "The US Constitution divides the federal government into three branches: legislative, executive and judicial.  This ensures that no individual or group will have too much power.", "category": "IT"}, {"instruction": "When rock climbing, what is the difference between lead climbing and top rope climbing?", "input": "", "output": "The difference between lead climbing and top rope climbing has to do with the location of the rope when the climb is started. In lead climbing the rope begins at the bottom attached to the climber as well as the belayer. The climber must then bring the rope from the bottom of the route to the top by clipping into a series of quick draws that are generally placed 10-15 feet apart. If a person were to fall while lead climbing, they would be caught by the last quick draw they clipped into. When top rope climbing, the rope is already at the top of the route. This means the climber must tie into one side of the rope while their belayer must clip into the other side of the rope. As the climber ascends higher up the route the belayer must take out the slack of the rope as opposed to lead climbing where the belayer would be giving slack. When a person falls in top rope climbing they will only fall a short distance as the rope is already clipped in above them at the top of the route, so how far they fall will be determined by how much slack the belayer has not taken in.", "category": "IT"}, {"instruction": "Which is a species of fish? Mola mola or Molar", "input": "", "output": "Mola mola", "category": "IT"}, {"instruction": "Imagine a world where life expectancy is fixed and the same for everyone at birth, yet people can engage in life expectancy \"donation\" \u2013\u00a0meaning that someone can extend your life three years longer at the expense of theirs. Talk about a likely scenario in this world that involves manipulated, coerced donation.", "input": "", "output": "Those with power and money could lure the underprivileged groups into \"donating\" their life expectancy in exchange for a better future. Assuming that illnesses are still not eradicated, another scenario involving coerced donation could be those in control of the medications force the patients to cut their life short in order to get treated.", "category": "IT"}, {"instruction": "What are the official languages of the United Nations?", "input": "The official languages of the United Nations are the six languages that are used in UN meetings and in which all official UN documents are written. In the six languages, four are the official language or national language of permanent members in the Security Council, while the remaining two are used due to the large number of their speakers. In alphabetical order of the Latin alphabet, they are:\n\nArabic (Modern Standard Arabic) \u2013 official or national language of several countries in the Middle East and North Africa, and used in the Arab world.\nChinese (Mandarin Chinese in simplified Chinese characters) \u2013 official language of the People's Republic of China.[1][2]\nEnglish \u2013 majority and de facto official language of the United Kingdom, the United States and Australia, and majority (de jure) official language of Canada and New Zealand. It is also the most popular language, the most popular lingua franca, and a majority and/or official language in several other countries and territories.\nFrench \u2013 official language of France. It is also official in Belgium, Switzerland, Canada, and several countries in Africa.\nRussian \u2013 official language of the Russian Federation. It is also used in several post-Soviet states.\nSpanish \u2013 official or national language in 18 countries and one territory in the Americas (mostly Latin America or Hispanic America), Spain, and Equatorial Guinea.", "output": "Arabic, Mandarin Chinese, English, French, Russian, Spanish", "category": "IT"}, {"instruction": "What makes a good sales account executive?", "input": "", "output": "A good Sales account executive will be able to multi-task, manage customer engagement activity for multiple teams, and expand relationships within a customer account by sharing the value proposition of the Company.", "category": "IT"}, {"instruction": "Think up some openings for beginners to the game of Chess", "input": "", "output": "Chess openings are the most important part of the game, there are some advanced ones, some common ones, and some easy ones. This is a list of openings for beginners to the game:\n- The King's Pawn Opening: This is a very common opening, you move your king's pawn 2 spaces forward, so does the opponent. This is followed by developing your knights. \n- The Fianchetto defense. You move your kingside knight's pawn forward 1 space, then you develop the kingside knight. You then put your kingside bishop in the square that the pawn used to be in, followed by castling. This opening is common among lower ranked players.\n- Four Knights Game: This doesn\u2019t happen too much. Both sides start by developing their knights, the pawns take it over from there.\n- The French Defense: You move your king's pawn 1 space forward, followed by developing all of your kingside pieces, and finishing by castling.", "category": "IT"}, {"instruction": "Give me a list of popular current artists in the EDM category.", "input": "", "output": "Currently popular musicians in the EDM, or electronic dance music, genre of music include Illenium, 3LAU, Calvin Harris, Kaskade, and Dimitri Vegas.", "category": "IT"}, {"instruction": "Which sports would be easiest to find success in if you\u2019re not tall: baseball, soccer, basketball, bowling.", "input": "", "output": "Soccer and bowling would be the two easiest sports in this list to succeed in if you\u2019re not tall.", "category": "IT"}, {"instruction": "What is the appeal of Flathead Lake as a Summer vacation destination?", "input": "", "output": "Flathead Lake is the largest natural freshwater lake West of the Mississippi in lower 48 contiguous states, with over 200 square miles of water and 185 miles of coastline.   It is a beautiful lake, surrounded by the tall and impressive Mission Mountains on the east and the smaller Salish Mountains to the west.  It borders several Indian reservations on the Southern end of the lake.\n\nThe lake offers an abundance of Summer activities including: sailing, boating, swimming, and camping.  The lake offers excellent fishing and the fish species in the lake consist primarily of lake trout, pike, yellow perch and whitefish, with some rainbow trout, bass, and salmon. The lake trout can reach monstrous sizes, frequently exceeding twenty-pounds.\n\nOverall, Flathead Lake is one of the premiere recreational and fishing lakes in Montana. It is popular for both fishing and pleasure boating and  the sheer beauty of the lake makes it a memorable one regardless of which activity is pursued.", "category": "IT"}, {"instruction": "What's the difference between tennis and pickleball?", "input": "", "output": "While they are similar sports, tennis and pickleball have various difference. First, the court size for pickleball is about half the size of a tennis court. Second, pickleball is played with a ball that resembles a whiffle ball. Third, pickleball is played with paddles as opposed to rackets. Finally, the scoring system is quite different as you play for points which can only be scored when you or your team are serving.", "category": "IT"}, {"instruction": "What is Linux?", "input": "Linux (/\u02c8li\u02d0n\u028aks/ (listen) LEE-nuuks or /\u02c8l\u026an\u028aks/ LIN-uuks)[11] is a family of open-source Unix-like operating systems based on the Linux kernel,[12] an operating system kernel first released on September 17, 1991, by Linus Torvalds.[13][14][15] Linux is typically packaged as a Linux distribution, which includes the kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses the name \"GNU/Linux\" to emphasize the importance of GNU software, causing some controversy.[16][17]", "output": "After AT&T had dropped out of the Multics project, the Unix operating system was conceived and implemented by Ken Thompson and Dennis Ritchie (both of AT&T Bell Laboratories) in 1969 and first released in 1970. Later they rewrote it in a new programming language, C, to make it portable. The availability and portability of Unix caused it to be widely adopted, copied and modified by academic institutions and businesses.\n\nIn 1977, the Berkeley Software Distribution (BSD) was developed by the Computer Systems Research Group (CSRG) from UC Berkeley, based on the 6th edition of Unix from AT&T. Since BSD contained Unix code that AT&T owned, AT&T filed a lawsuit (USL v. BSDi) in the early 1990s against the University of California. This strongly limited the development and adoption of BSD.[5][6]\n\nOnyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations didn't utilize commodity PC hardware like Linux was later developed for, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.[7][8]\n\nIn 1983, Richard Stallman started the GNU project with the goal of creating a free UNIX-like operating system.[9] As part of this work, he wrote the GNU General Public License (GPL). By the early 1990s, there was almost enough available software to create a full operating system. However, the GNU kernel, called Hurd, failed to attract enough development effort, leaving GNU incomplete.[citation needed]\n\nIn 1985, Intel released the 80386, the first x86 microprocessor with a 32-bit instruction set and a memory management unit with paging.[10]\n\nIn 1986, Maurice J. Bach, of AT&T Bell Labs, published The Design of the UNIX Operating System.[11] This definitive description principally covered the System V Release 2 kernel, with some new features from Release 3 and BSD.\n\nIn 1987, MINIX, a Unix-like system intended for academic use, was released by Andrew S. Tanenbaum to exemplify the principles conveyed in his textbook, Operating Systems: Design and Implementation. While source code for the system was available, modification and redistribution were restricted. In addition, MINIX's 16-bit design was not well adapted to the 32-bit features of the increasingly cheap and popular Intel 386 architecture for personal computers. In the early nineties a commercial UNIX operating system for Intel 386 PCs was too expensive for private users.[12]\n\nThese factors and the lack of a widely adopted, free kernel provided the impetus for Torvalds' starting his project. He has stated that if either the GNU Hurd or 386BSD kernels had been available at the time, he likely would not have written his own.[13][14]", "category": "IT"}, {"instruction": "Given a reference text about Jen Shah, what is she famous from, when was she criminally charged, what was the verdict, and when was she sentenced.", "input": "Shah starred on the reality television series The Real Housewives of Salt Lake City, which premiered in November 2020.[7] In March 2021, she was criminally charged with conspiracy to commit money laundering and wire fraud, pleading not guilty to both charges days later.[8][9] Her legal case was chronicled in the documentary film Housewife and the Shah Shocker, which premiered on Hulu in November that same year.[10] In July 2022, Shah pleaded guilty to conspiracy to commit wire fraud. In January 2023, Shah was sentenced to six-and-a-half years in prison.[11] Shah began her prison sentence the following month.[2]", "output": "Jen Shah came into the spotlight in November 2020 when The Real Housewives of Salt Lake City aired. In March 2021 she was charged with conspiracy to commit money laundering as well as wire fraud. She pled not guilty, but then come July 2022 she plead guilty to commit wire fraud. January of 2023 she was sentenced to 6.5 years in prison and her sentence began in February.", "category": "IT"}, {"instruction": "What are the classifications of Academic Degrees?", "input": "", "output": "An academic degree is a qualification awarded to students upon successful completion of a course of study in higher education, usually at a college or university. These institutions commonly offer degrees at various levels, usually including undergraduate degrees, master's, and doctorates, often alongside other academic certificates and professional degrees. The most common undergraduate degree is the bachelor's degree, although in some countries there are lower-level higher education qualifications that are also titled degrees (e.g. associate degrees and foundation degrees).", "category": "IT"}, {"instruction": "What types of problems in government could AI be used to solve", "input": "The potential uses of AI in government are wide and varied, with Deloitte considering that \"Cognitive technologies could eventually revolutionize every facet of government operations\". Mehr suggests that six types of government problems are appropriate for AI applications:\n- Resource allocation - such as where administrative support is required to complete tasks more quickly.\n- Large datasets - where these are too large for employees to work efficiently and multiple datasets could be combined to provide greater insights.\n- Experts shortage - including where basic questions could be answered and niche issues can be learned.\n- Predictable scenario - historical data makes the situation predictable.\n- Procedural - repetitive tasks where inputs or outputs have a binary answer.\n- Diverse data - where data takes a variety of forms (such as visual and linguistic) and needs to be summarised regularly.", "output": "The potential uses of AI in government are wide and varied but some appropriate areas to consider AI applications include: Resource allocation; Large datasets; Repetitive tasks; Answering basic questions; Summarising data from multiple forms; Predicting future scenarios based on historical data.", "category": "IT"}, {"instruction": "Why isn't multi-threading making my Python code faster? How can I fix it.", "input": "", "output": "Python restricts access to the interpreter with a Global Interpreter Lock, referred to as the GIL, for internal thread-safety requirements. Unfortunately, this design decision restricts only allows one thread to interpret Python code at a time, even on a machine with the capability to run multiple threads together. \n\nIf you wish to run Python code on a set of data, and the data can be broken up into independent segments (a process known as data partitioning), you may wish to look into the multiprocessing library in Python. \n\nAs an example, consider the function foo which takes one argument, arg1, and say you wanted to run the foo function on a number of values, say, val1, val2, and val3.\n\ndef foo(arg1):\n  # do something\n\nif __name__ == '__main__':\n  foo(val1)\n  foo(val2)\n  foo(val3)\n\nTo have foo execute on multiple processes together, you could use the multiprocessing Pool  to run multiple worker processes together:\n\nfrom multiprocessing import Pool\n\ndef foo(arg1):\n  # do something\n\nif __name__ == '__main__':\n  p = Pool()\n  p.map(foo, [val1, val2, val3])\n\nThe multiprocessing library also provides various other APIs for parallel programming. Would you like to know more?", "category": "IT"}, {"instruction": "Who is the best NBA player of all time?", "input": "", "output": "This can be discussed but it is often admitted that Michael Jordan is the best NBA player of all time.", "category": "IT"}, {"instruction": "Classify each as either a vodka drink or a gin drink: Screwdriver, Bloody Mary, French 75, White Russian, Gimlet, Cosmopolitan, Tom Collins, Negroni", "input": "", "output": "Screwdrivers, Bloody Mary's, White Russians, and Cosmopolitans are traditionally vodka cocktails, whereas French 75's, Gimlets, Tom Collins', and Negronis are traditionally gin cocktails.", "category": "IT"}, {"instruction": "How can I get better performance when querying a delta table?", "input": "", "output": "To get better performance when querying a delta table, there are many things you can do.  \n\nFirst, ensure you are using the Photon engine.  The Photon engine is designed to handle high-concurrency and low-latency queries.  If you are using DBSQL, Photon is included free of charge and is turned on by default.\n\nSecond, you can use different indexing techniques when writing a Delta table for better read performance.  Z-ordering and bloom filters are two effective techniques when used correctly.\n\nThird, ensure your SQL Warehouse or compute resource is appropriately sized.  If you are trying to query a very large dataset from a very small warehouse, you will likely get slow query results.", "category": "IT"}, {"instruction": "Which of the following are colors: red, black, yellow, orange, sun, sunflower, chips, book, white, pink, blue, keyboard.", "input": "", "output": "The colors are: red, black, yellow, orange, white, pink and blue.", "category": "IT"}, {"instruction": "What type of weather is San Francisco famous for?", "input": "", "output": "San Francisco is a famously foggy city", "category": "IT"}, {"instruction": "As an expert skier, what are the top resorts in the US to go skiing?", "input": "", "output": "There are many ski resorts in the United States that offer challenging terrain for expert level skiers.  Som of the top resorts are: Big Sky, Jackson Hole, Pallisades, Crested Butte, Telluride, and Silverthorn", "category": "IT"}, {"instruction": "What's the game engine used by Bethesda before Creation Engine? And what's the last game make with it?", "input": "After using the Gamebryo engine to create The Elder Scrolls III: Morrowind, The Elder Scrolls IV: Oblivion, and Fallout 3, Bethesda decided that Gamebryo's capabilities were becoming too outdated and began work on the Creation Engine for their next game, The Elder Scrolls V: Skyrim, by forking the codebase used for Fallout 3.\n\nFollowing the completion of Skyrim, Bethesda set out to enhance the graphical core of the Creation Engine by first adding a physically based deferred renderer to allow for more dynamic lighting and to paint materials object surfaces with realistic materials. Bethesda worked with technology company Nvidia to implement volumetric lighting through a technique that makes use of hardware tesselation.[1][2] Additionally the updated version of the Creation Engine powering Bethesda's Fallout 4 offers more advanced character generation.[3][4][5]", "output": "Gamebryo was the engine used by Bethesda before Creation Engine. It is developed by Gamebase Cot., Ltd and Gamebase USA. Gamebryo is used by numerous companies within the gaming industry.\n\nBethesda decided that Gamebryo's capabilities were becoming too outdated and began work on the Creation Engine for their next game, The Elder Scrolls V: Skyrim, by forking the codebase used for Fallout 3.\n\nThe last game from Bethesda made with Gamebryo engine is Fallout 3 (2008).", "category": "IT"}, {"instruction": "What is the PGA Championship?", "input": "The PGA Championship (often referred to as the US PGA Championship or USPGA outside the United States[2][3][4]) is an annual golf tournament conducted by the Professional Golfers' Association of America. It is one of the four men's major championships in professional golf.", "output": "The PGA Championship (often referred to as the US PGA Championship or USPGA outside the United States[2][3][4]) is an annual golf tournament conducted by the Professional Golfers' Association of America. It is one of the four men's major championships in professional golf.\n\nIt was formerly played in mid-August on the third weekend before Labor Day weekend, serving as the fourth and final men's major of the golf season. Beginning in 2019, the tournament is played in May on the weekend before Memorial Day, as the season's second major following the Masters Tournament in April. It is an official money event on the PGA Tour, European Tour, and Japan Golf Tour, with a purse of $11 million for the 100th edition in 2018.\n\nIn line with the other majors, winning the PGA gains privileges that improve career security. PGA champions are automatically invited to play in the other three majors (Masters Tournament, U.S. Open, and The Open Championship) and The Players Championship for the next five years, and are eligible for the PGA Championship for life. They receive membership on the PGA Tour for the following five seasons and on the European Tour for the following seven seasons. The PGA Championship is the only one of the four majors that is exclusively for professional players.\n\nThe PGA Championship has been held at various venues. Some of the early sites are now quite obscure, but in recent years, the event has generally been played at a small group of celebrated courses.", "category": "IT"}, {"instruction": "What fruits and vegetables are grown in lower-lying areas of Kenya?", "input": "Tea, coffee, sisal, pyrethrum, corn, and wheat are grown in the fertile highlands, one of the most successful agricultural production regions in Africa.[117] Livestock predominates in the semi-arid savanna to the north and east. Coconuts, pineapples, cashew nuts, cotton, sugarcane, sisal, and corn are grown in the lower-lying areas. Kenya has not attained the level of investment and efficiency in agriculture that can guarantee food security, and coupled with resulting poverty (53% of the population lives below the poverty line), a significant portion of the population regularly starves and is heavily dependent on food aid.[166] Poor roads, an inadequate railway network, under-used water transport, and expensive air transport have isolated mostly arid and semi-arid areas, and farmers in other regions often leave food to rot in the fields because they cannot access markets. This was last seen in August and September 2011, prompting the Kenyans for Kenya initiative by the Red Cross.[173]", "output": "Coconuts, pineapples and corn are grown in lower-lying areas of Kenya.", "category": "IT"}, {"instruction": "Is Paris a good city to live in?", "input": "", "output": "Paris is the so called city of light. Other people call it the museum city. The reason for this is that you can find art in almost every corner in Paris, and beauty is everywhere. However, the price for living in the city can be very high. It would be a good city lo live in if you enjoy being surrounded by culture, art, good restaurants and museums; however, you have to take into account that you will probably be living surrounded by tourist and paying a very high price.", "category": "IT"}, {"instruction": "How are weather forecasts created?", "input": "", "output": "Weather forecasts are created by combining data from many sources, such as satellites, weather balloons, and ground stations.  Those data points are then fed to large computer systems with sophisticated models to predict how the weather will change over time.  \n\nWeather sites and even local weather forecasters use this information to provide a regional and short-term forecasts.", "category": "IT"}, {"instruction": "Since when did the SR22 include a glass cockpit", "input": "SR22s and SR20s built before 2003 were equipped with traditional analog instruments and a 10\" (later 12\") Multi-function display (MFD). In February 2003, Cirrus began offering SR22s with the Avidyne Entegra primary flight display (PFD), making the plane the first of its kind to come with a glass cockpit.[32] Later that year, this instrumentation became standard equipment on all SR-series aircraft and sparked a major transition in general aviation, whereby over 90% of all new light aircraft by the year 2006 were equipped with glass cockpits.[33][34] Retrofits are available for the older SR aircraft that replace the analog instrument panels with one that includes a PFD, a new MFD and the installation of back-up mechanical instruments.[35]\n\nOn 22 May 2008, Cirrus revealed the \"Cirrus Perspective\" glass cockpit (by Garmin).[36] Both cockpits were available for a while (the Avidyne cockpit was initially standard equipment) and after 2008 the SR22 was sold with only the Perspective panel.\n\nIn 2009, the third-generation Cirrus SR22 GTS came equipped with a new enhanced vision system (EVS), a sophisticated dual-wavelength instrument that offers both infrared and synthetic vision.[37]\n\nAt the 2010 EAA AirVenture, Cirrus announced its plans to certify Garmin's ESP system (Electronic Stability and Protection) on the Cirrus SR22. It included advanced flight envelope protection that could stabilize the aircraft with the push of a button, to avoid spiral from developing.[38]\n\nThe Cirrus Perspective-Plus avionics flight deck was introduced in 2017, with a faster processing speed, animated datalink weather, payload management, visual approach capabilities, wireless database uploads, glass back-up instruments, and more.[39]\n\nIn 2020, the Perspective-Plus flight deck included a new stabilized approach advisory system which provides alerts to the pilot of unstable conditions during approach.[23]", "output": "Since February 2003 Cirrus started to offer a glass panel for the SR22. First the Avidyne Entegra was offered to customers. Also retrofits became available for older SR versions. In May 2008, Cirrus revealed the \"Cirrus Perspective\" glass cockpit, which was based on instruments created by Garmin.\n\nUntil today, Cirrus is including Garmin glass cockpits in it's aircrafts.", "category": "IT"}, {"instruction": "Give me a bulleted list of the first ten MacOS (operating system) versions.", "input": "", "output": "1. Mac OS X 10.0 (Cheetah)\n2. Mac OS X 10.1 (Puma)\n3. Mac OS X 10.2 (Jaguar)\n4. Mac OS X 10.3 (Panther)\n5. Mac OS X 10.4 (Tiger)\n6. Mac OS X 10.5 (Leopard)\n7. Mac OS X 10.6 (Snow Leopard)\n8. Mac OS X 10.7 (Lion)\n9. OS X 10.8 (Mountain Lion)\n10. OS X 10.9 (Mavericks)", "category": "IT"}, {"instruction": "What do you know about the city of Aberdeen in Scotland?", "input": "", "output": "Aberdeen is a city located in the North East of Scotland. As of 2020 it had a population of 200,000 people and is the third largest city in Scotland, behind Edinburgh (435,000) and Glasgow (610,000). Aberdeen has been referred to as \"The Silver City\" due to the high number of buildings in the city constructed of Granite from the local quarry, which may sparkle on the rare occasion that the sunlight hits the buildings.  Since the 1960's the city's economy has largely revolved around Oil & Gas due to its proximity to the North Sea Oil discovery.   Aberdeen has two universities; the University of Aberdeen and Robert Gordon University. Notable people who have been associated with Aberdeen include singer Annie Lennox, golfer Paul Lawrie and architect Archibald \"Archie\" Simpson.", "category": "IT"}, {"instruction": "What is the English Premier League?", "input": "", "output": "The English Premier League is the top flight of English football.", "category": "IT"}, {"instruction": "Classify the following types of cars as \"economy\" or \"luxury\": Ford, Chevrolet, Lamborghini, Ferrari, Mercedes, Honda, Lexus, Toyota, Nissan, Subaru", "input": "", "output": "Ford, Chevrolet, Honda, Toyota, and Subaru are high-quality car brands, but are generally not considered to be \"luxury\" brands. Lamborghini, Ferrari, Mercedes, and Lexus are luxury brands.", "category": "IT"}, {"instruction": "Please list down some key points  regarding governance system of Portland from the given text", "input": "The government of Portland, Oregon is based on a city commission government system. Elected officials include the mayor, commissioners, and a city auditor. The mayor and commissioners (members of City Council) are responsible for legislative policy and oversee the various bureaus that oversee the day-to-day operation of the city. Portland began using a commission form of government in 1913 following a public vote on May 3 of that year. Each elected official serves a four-year term, without term limits. Each city council member is elected at-large. In 2022, Portland residents approved a ballot measure to replace the commission form of government with a 12-member council elected in four districts using single transferable vote, with a professional city manager appointed by a directly-elected mayor, with the first elections to be held in 2024.", "output": "1. Portland, Oregon's governance is built on a city commission system.\n2. Elected representatives include a city auditor, commissioners, and the mayor.\n3. The mayor and commissioners, who make up the City Council, are in charge of setting legislative policy and managing the different bureaus in charge of running the city on a daily basis.\n4. After a popular vote on May 3 of that year, Portland adopted a commission system of governance.\n5. There are no term limitations on the terms of each elected official's four-year terms.\n6. All members of the municipal council are chosen at-large.\n7. Portland voters approved a ballot measure in 2022 to replace the commission form of government with a 12-member council elected in four districts using a single transferable vote, with a professional city manager appointed by a directly-elected mayor. The first elections under the new system would take place in 2024.", "category": "IT"}, {"instruction": "Which river can you hike in Utah?", "input": "Hiking The Narrows is arguably the quintessential Zion experience. The Narrows can be hiked either as a top-down through-hike from Chamberlain Ranch to the Temple of Sinawava, or as an up-and-back bottom-up hike from the Temple of Sinawava. Hiking is done largely in the river as, for a third of the route, the river runs canyon wall to canyon wall. Water levels change from season to season; most hikers will wade at least waist-deep and many will swim a few short sections. \n\nThe Narrows is the narrowest section of Zion Canyon in Zion National Park, Utah, United States.", "output": "The Narrows at Zion National Park", "category": "IT"}, {"instruction": "What is predictive maintenance?", "input": "", "output": "Predictive Maintenance is widely used in the manufacturing industry. It is all about figuring out when an asset should be maintained, and what specific maintenance activities need to be performed, based on an asset\u2019s actual condition or state, rather than on a fixed schedule, so that you can maximize uptime and productivity. It is all about predicting & preventing failures and performing the right maintenance routines in order to reduce costly equipment downtimes.", "category": "IT"}, {"instruction": "Who are N-Dubz?", "input": "", "output": "N-Dubz are a popular band in the United Kingdom, made up of Tulisa, Fazer, and Dappy, formed out of London. The band were formed when they were young teenagers in the early 2000s. They were inspired to form the band by Dappy's late father, known to the band as \"Uncle B\". Their song \"Papa can you hear me?\" is a tribute to Uncle B. Tulisa and Dappy are cousins, whilst Fazer has always been a close friend.\nThe trio have had many successful hits, and collaborated with popular artists like Tinchy Strider and Skepta. They parted ways in 2011, and Dappy started a solo career, whilst Tulisa became a judge on the popular UK show \"The X Factor\". She formed and mentored the winning band Little Mix. \nThe band reunited in 2022 and released new music, along with a sold out UK tour.", "category": "IT"}, {"instruction": "When was Lamb Air operating", "input": "Lamb Air Ltd. was a Canadian airline that began operations in 1934 in The Pas, Manitoba, and went out of business in 1981.\n\nHistory\nTom Lamb was the son of Thomas Henry Peacock (THP) Lamb, who had emigrated from England in the late 19th century. THP Lamb turned from school teacher to fur trader and in 1900, started Lamb's Store in Moose Lake, Manitoba. Tom and his brothers and sisters grew up in northern Manitoba and worked for their father.\n\nTom Lamb left school before finishing grade 3. Later in life, he would make the comment, while giving his acceptance speech when receiving his honorary Doctorate of law from the University of Manitoba, \"If I had only gotten to grade 4\". At the age of 10, Tom, who had his own team of horses and sleigh, was competing with grown men in the fish hauling business. He would have to use fish boxes to step up on to be able to load his sleigh.\n\nOne of the Lamb family's businesses was \"logistics and transportation\". Fish, lumber, trees, fur and supplies needed to be hauled by any and all means. Dog teams, horses, boats, trucks and tractors were used. In the 1930s there was a transportation revolution happening. The aircraft was making its way into northern Canada. The first time Tom Lamb saw an aircraft he realized its potential. In 1930, Tom bought his first aircraft - a Stinson SR8. In 1930, Tom Lamb travelled to Winnipeg to learn to fly. To keep costs to a minimum, he lived in a tent behind the Winnipeg Flying Club. When he returned to The Pas and checked himself out on the Stinson.\n\nIn 1935, Tom incorporated Lamb Airways Limited. The airline had some name changes throughout the years and Tom became one of the best known Manitobans, if not Canadians, in the world. His adventures have been documented in books, a television documentary and even a song.", "output": "Lamb Air Ltd. was a Canadian airline that began operations in 1934 in The Pas, Manitoba, and went out of business in 1981.\n\nHistory\nTom Lamb was the son of Thomas Henry Peacock (THP) Lamb, who had emigrated from England in the late 19th century. THP Lamb turned from school teacher to fur trader and in 1900, started Lamb's Store in Moose Lake, Manitoba. Tom and his brothers and sisters grew up in northern Manitoba and worked for their father.\n\nTom Lamb left school before finishing grade 3. Later in life, he would make the comment, while giving his acceptance speech when receiving his honorary Doctorate of law from the University of Manitoba, \"If I had only gotten to grade 4\". At the age of 10, Tom, who had his own team of horses and sleigh, was competing with grown men in the fish hauling business. He would have to use fish boxes to step up on to be able to load his sleigh.\n\nOne of the Lamb family's businesses was \"logistics and transportation\". Fish, lumber, trees, fur and supplies needed to be hauled by any and all means. Dog teams, horses, boats, trucks and tractors were used. In the 1930s there was a transportation revolution happening. The aircraft was making its way into northern Canada. The first time Tom Lamb saw an aircraft he realized its potential. In 1930, Tom bought his first aircraft - a Stinson SR8. In 1930, Tom Lamb travelled to Winnipeg to learn to fly. To keep costs to a minimum, he lived in a tent behind the Winnipeg Flying Club. When he returned to The Pas and checked himself out on the Stinson.\n\nIn 1935, Tom incorporated Lamb Airways Limited. The airline had some name changes throughout the years and Tom became one of the best known Manitobans, if not Canadians, in the world. His adventures have been documented in books, a television documentary and even a song.", "category": "IT"}, {"instruction": "Write a haiku about how much I love pickles.", "input": "", "output": "Caressed by sweet brine,\nyou are crispy and crunchy.\nOh, won\u2019t you be mine?", "category": "IT"}, {"instruction": "What are the two longest rivers located in the United States?", "input": "", "output": "Mississippi and Missouri rivers", "category": "IT"}, {"instruction": "What are the words of House Reed?", "input": "", "output": "\"We Remember\"", "category": "IT"}, {"instruction": "What movies won best picture Oscars the last 5 years", "input": "", "output": "2023 Everything Everywhere All at Once\n2022 CODA\n2021 Nomadland \n2020 Parasite\n2019 Green Book", "category": "IT"}, {"instruction": "Classify each of the following grades as being in elementary or high school: 10th grade, 3rd grade, 4th grade, 12th grade, 1st grade.", "input": "", "output": "10th Grade: High School\n3rd Grade: Elementary School\n4th Grade: Elementary School\n12th Grade: High School\n1st Grade: Elementary School", "category": "IT"}, {"instruction": "Why is Brazilian jiu jitsu an excellent martial art?", "input": "", "output": "Brazilian jiu jitsu (BJJ) is an excellent martial art for a number of reasons.  BJJ is, first and foremost, a generally safe martial art.  BJJ does not emphasize or focus on striking techniques like punching and kicking, rather, BJJ focuses on use of leverage and body mechanics to control and subdue an opponent.  BJJ is accessible to almost anyone regardless of age, sex, or fitness level as the practitioner can determine how relaxed or aggressive to be during practicing the art.  BJJ is an excellent form of exercise and promotes cardiovascular fitness, flexibility, strength, endurance, and an overall sense of well-being.  Further, there are approaches to BJJ that resonate with people who are casual hobbyists as well as those that seek international competition- and all levels of studends across that spectru.  BJJ is easily a life-long endeavor that is safe, engaging, and also an excellent complement to striking based martial arts such as karate, kickboxing, and boxing.", "category": "IT"}, {"instruction": "What is Cup Game?", "input": "The cup game is a children's clapping game that involves tapping and hitting a cup using a defined rhythm.", "output": "The cup game is a children's clapping game that involves tapping and hitting a cup using a defined rhythm. The game can be played by many players seated around a table and is often played in large groups. Each player possesses a cup and in unison the players tap out the defined rhythm using their cups. It can be played competitively, where the rhythm speeds up in each \"round\", and a player making a mistake in the rhythm must drop out of the game, with a new \"round\" starting after each elimination, and game play continuing until only one player remains, with that player being the winner.", "category": "IT"}, {"instruction": "Which is a bird or fish: Blackchin, Black redstart", "input": "", "output": "Blackchin is a fish, Black redstart is a bird", "category": "IT"}, {"instruction": "Let\u2019s solve the following math problem. Each rabbit has 4 feets and each duck has 2 feets. If there are in total 25 heads and 88 feets, how many rabbits and how many ducks are there?", "input": "", "output": "Let\u2019s use equations to solve it! \nLet the number of ducks be X and the number of rabbits be Y.\nWe have X + Y = 25 and 2X + 4Y = 88.\nSimplifying the first equation, we get Y = 25 - X\nSubstitute that in the second equation, we will get 2X + 4(25-X) = 88,\nThus 100 - 2X = 88\nWhich means 2X = 100 \u2013 88 = 12, thus X = 6.\nWe substitute back into the first equation, we have Y = 25 - 6 = 19.\nThere are 6 ducks and 19 rabbits!", "category": "IT"}, {"instruction": "Classify the following water bodies into oceans, seas, rivers and lakes- aral, pacific, baikal, superior, amazon, colorado, indian, arabian, north, baltic, okhotosk, tahoe, victoria, lena, danube, arctic, mekong", "input": "", "output": "oceans- pacific, indian, arctic\nseas- okhotosk, aral, arabian, north, baltic\nrivers- amazon, colorado, lena, danube, mekong\nlakes- superior, tahoe, victoria , baikal", "category": "IT"}, {"instruction": "From the passage find the list of banks who supported Yes Bank in 2020. Display the results in comma separated format.", "input": "The history of Yes Bank can be traced back to 1999, when three Indian bankers decided to launch a non-banking financial enterprise together. They were Ashok Kapur, who had previously worked as the national head for the ABN Amro Bank, Harkirat Singh, who had previously worked as the country head for the Deutsche Bank, and Rana Kapoor, who had previously worked as the head of corporate finance for the ANZ Grindlays Bank. The Rabobank in the Netherlands held the remaining 75% of the shares in the non-banking financial business. The three Indian promoters each owned 25% of the company. In 2003, it was rebranded as the Yes Bank. It was also the same year that Harkirat Singh resigned due to concerns over the influence exercised by Rabobank in the hiring of CEO and executive chairman positions.[7]\n\nYes Bank has been unable to raise capital over the past few years, which has led to a steady deterioration in its financial position. This has resulted in potential loan losses, which in turn led to downgrades, which prompted investors to invoke bond covenants, and a withdrawal of deposits by customers. Over the course of the previous four quarters, the bank racked up losses and very little income.[8] Rana Kapoor was fired as a result, and he was arrested in connection with a INR 466 crore money laundering case.\n\nThe bank's management, under the new leadership of Kumar, immediately repositioned itself and dealt with all internal and market related challenges to restore customer and depositor confidence.[9] Under the coordinated efforts of the new board and management, Mehta assured shareholders of a speedy recovery, even as the Reserve Bank of India (RBI), State Bank of India (SBI), HDFC Bank, ICICI Bank, Axis Bank and other banks lent it support through the historic Yes Bank Reconstruction Scheme 2020.[10]\n\nIn July 2020, Yes Bank Ltd closed their follow-on public offer (FPO) with 95% subscription, driven by institutional investors.[11]\n\nAs of 28 July 2020, Yes Bank is an associate of State Bank of India which has a 30% stake in the company.[12]\n\nOn 21 February 2023, Yes Bank issued 2,13,650 equity shares to its employees under the company ESOP plan.[13]", "output": "Reserve Bank of India (RBI), State Bank of India (SBI), HDFC Bank, ICICI Bank, Axis Bank", "category": "IT"}, {"instruction": "What is WestWorld?", "input": "Westworld is an American dystopian science fiction western television series created by Jonathan Nolan and Lisa Joy that first aired on October 2, 2016, on HBO. It was based upon the 1973 film of the same name written and directed by Michael Crichton and loosely upon its 1976 sequel, Futureworld.", "output": "Westworld is an American dystopian science fiction western television series created by Jonathan Nolan and Lisa Joy that first aired on October 2, 2016, on HBO. It was based upon the 1973 film of the same name written and directed by Michael Crichton and loosely upon its 1976 sequel, Futureworld.\n\nThe story begins in Westworld, a fictional, technologically advanced Wild-West-themed amusement park populated by android \"hosts\". The park caters to high-paying guests who may indulge their wildest fantasies within the park without fear of retaliation from the hosts, who are prevented by their programming from harming humans. Later on, the series' setting expands to the real world, in the mid-21st century, where people's lives are driven and controlled by a powerful artificial intelligence named Rehoboam.\n\nNolan and Joy served as showrunners. The second, third and fourth season followed in April 2018, March 2020, and June 2022, respectively. Nolan and Joy planned a fifth and final season, and were in negotiations with HBO to produce it.[7] However, in November 2022, it was announced that HBO had canceled the series.[8] The series was removed from HBO Max on December 18, 2022.\n\nWestworld's debut on HBO had the network's highest viewership ratings for a premiere since the first episode of True Detective, in 2014. Westworld's first season is the most-watched first season of any HBO original series. The first season also received critical acclaim and was highly praised for its performances, visuals, narrative, themes and soundtrack from Ramin Djawadi. Reception of the series declined from the second season onwards, with the scripts, characterization and narrative opacity being targeted for criticism; viewership ratings also diminished throughout its run. It has received numerous accolades, winning nine Primetime Emmy Awards out of 54 nominations. Thandiwe Newton won the Primetime Emmy Award for Outstanding Supporting Actress in a Drama Series in 2018.", "category": "IT"}, {"instruction": "Best beach vacation in the world", "input": "", "output": "1. Maldives (Best resorts with All inclusive )\n2. Mauritius \n3. Cancun", "category": "IT"}, {"instruction": "What makes for a good photograph?", "input": "", "output": "There are three key elements to a good picture - light, subject and composition. Great photographs are in focus, sharp, have good exposure (light) and composition.  In order to take the perfect photograph you must be at the correct focal length, set the appropriate aperture for the subject(s) in your frame, make sure the shutter speed is set for the action you are capturing (higher shutter speed for sports, lower shutter speed for portraits) and make sure the ISO is correctly set to work with both the shutter speed and aperture.  Understanding how the ISO, Aperture and shutter speed work together is key to taking the perfect picture.", "category": "IT"}, {"instruction": "What is Terraform?", "input": "", "output": "Terraform is an infrastructure as code tool that lets you build/deploy, change, and version cloud and on-prem resources safely and efficiently.", "category": "IT"}, {"instruction": "Why do cooks use kosher salt?", "input": "", "output": "Many cooks prefer kosher salt because it has larger grains which makes it easier to pinch as well as to sprinkle more evenly across food.  Additionally when you purchase a particular brand of kosher salt it provides consistency and reliability to your recipe usage over time.", "category": "IT"}, {"instruction": "From the paragraph, tell me what is the fourth longest natural arch in the world", "input": "Landscape Arch is a natural arch in Arches National Park, Utah, United States. It is among the longest natural rock arches in the world. The arch is among many in the Devils Garden area in the north of the park. Landscape Arch was named by Frank Beckwith who explored the area in the winter of 1933\u20131934 as the leader of an Arches National Monument scientific expedition. The arch can be reached by a 0.8 mi (1.3 km) graded gravel trail.\n\nThe Natural Arch and Bridge Society (NABS) considers Landscape Arch the fifth longest natural arch in the world, after four arches in China. In 2004, the span of Landscape Arch was measured at 290.1 ft (88.4 m), \u00b10.8 ft (0.24 m), with a height of 77.5 ft (23.6 m). NABS measured the span of the slightly shorter Kolob Arch in Zion National Park at 287 ft (87 m) in 2006.\n\nThe most recent recorded rockfall events occurred in the 1990s when one large slab fell in 1991 and then two additional large rockfalls occurred in 1995. Since the rockfalls, the trail beneath the arch has been closed.", "output": "The article does not mention where the fourth longest natural arch in the world is. However, it does say that the top four are in China. The fifth longest one is the Landscape Arch in Utah, United States.", "category": "IT"}, {"instruction": "What are the top reasons to become a vegan?", "input": "", "output": "-climate change \n-animal agriculture \n-health", "category": "IT"}, {"instruction": "If each client was served by the same number of professionals, how many professionals (round to one decimal place) would each client be served by?", "input": "RGP, formerly known as Resources Global Professionals, is the operating arm of Resources Connection, Inc. (NASDAQ:RGP). The company provides consulting services in the areas of finance & accounting; information management; governance, risk & compliance (GRC); human capital; legal & regulatory; corporate advisory & restructuring; strategic communications; and supply chain management.[1] As of fiscal year ending May 28, 2016, the company employed 3,283 professionals in 68 offices in 20 countries around the world.[2] The company reported serving over 1,700 clients.[3] Company headquarters are located in Irvine, CA.", "output": "3283 professionals and 1700 clients, so 3283/1700 = 1.9 professionals serving each client.", "category": "IT"}, {"instruction": "From the passage provided, extract the languages in which Kishore Kumar provided his vocals as a playback singer. Separate them with a comma.", "input": "Kishore Kumar (born Abhas Kumar Ganguly; pronunciation (help\u00b7info); 4 August 1929 \u2013 13 October 1987) was an Indian playback singer and actor.[12] He is widely regarded as one of the greatest, most influential and dynamic singers in the history of Indian music.[13][14] He was one of the most popular singers in the Indian subcontinent, notable for his yodeling and ability to sing songs in different voices.[15] He used to sing in different genres but some of his rare compositions, considered classics, were lost in time.[16][17][18] According to his brother and legendary actor Ashok Kumar, Kishore Kumar was successful as a singer because his \"voice hits the mike, straight, at its most sensitive point\".[19]\n\nBesides Hindi, he sang in many other Indian languages, including Bengali, Marathi, Assamese, Gujarati, Kannada, Bhojpuri, Malayalam, Odia and Urdu.[20] He also released a few non-film albums in multiple languages, especially in Bengali, which are noted as all-time classics.[21]\n\nHe won 8 Filmfare Awards for Best Male Playback Singer and holds the record for winning the most Filmfare Awards in that category.[21] He was awarded the Lata Mangeshkar Award by the Madhya Pradesh government in 1985.", "output": "Hindi, Bengali, Marathi, Assamese, Gujarati, Kannada, Bhojpuri, Malayalam, Odia, Urdu", "category": "IT"}, {"instruction": "What are some movies that star Will Ferrell?", "input": "", "output": "Some of the most popular movies starring Will Ferrell include Old School, Stepbrothers, Elf, Anchorman, Stranger than Fiction, Blades of Glory, Zoolander, and Talladega Nights: The Ballad of Ricky Bobby.", "category": "IT"}, {"instruction": "What is the plot of Harry Potter?", "input": "", "output": "The books concern a wizard called Harry Potter and his journey through Hogwarts School of Witchcraft and Wizardry. The stories tell of him overcoming dangerous obstacles to defeat the Dark Wizard Lord Voldemort, who killed his parents when Harry was 15 months old.", "category": "IT"}, {"instruction": "What is the old name for The Go Between Bridge?", "input": "The Go Between Bridge, formerly known as the Hale Street Link, is a toll bridge for vehicles, pedestrians and cyclists over the Brisbane River in inner-city Brisbane, Queensland, Australia. The bridge connects Merivale and Cordelia Streets in West End to Hale Street and the Inner City Bypass at Milton. It is Brisbane's first inner-city traffic bridge in 40 years and carries around 12,000 vehicles per day. The bridge opened to traffic on 5 July 2010 and is now operated by Transurban Queensland.", "output": "Hale Street Link", "category": "IT"}, {"instruction": "Can I make chocolate at home?", "input": "", "output": "Making chocolate at home can be rewarding, but be prepared to spend a little money and a lot of time. The money goes to equipment and cocoa beans. For equipment, you will need a melanger (about $600)  to grind the beans and a tempering machine (about $400) to make the finished product. You will also need a silicone mat (about $20) and a hair dryer (about $30). But let's start at the beginning.\n\nBuy between two and six pounds of fermented raw cocoa beans. There are a variety of retail importers you can find on the web. Choose a single variety or a blend that appeals to your taste in chocolate.\n\nSort the beans, removing broken beans, badly misshapen beans, and whatever foreign bodies may be present.\n\nRoast the beans, two pounds at a time, at 350F for between 20 and 30 minutes, depending on your experience with the beans or by how they smell. They will smell like fresh brownies. Don't scorch them!\n\nLet the beans cool.\n\nPeel the beans. You can do this by hand - which I find produces a superior product - but be warned that this can take up to 6 hours per pound. Alternatively, you can purchase a winnower and use the hair dryer to blow out the skins. This approach is much faster, but leaves more skin and loses more bean fragments. Either way, weigh your final bean yield.\n\nGet you melanger going. Use the hair dryer to get the grinding surfaces up to at least 120F. Add the beans a handful at a time. Help the melanger along if it gets stuck. Make sure the melanger is going steadily before leaving it unattended. When it gets going, it will flow well.\n\nRun the melanger for 24 to 72 hours, again depending on your experience with the beans and your tastes. If trying a mix of beans, add the more robustly flavored beans early in the process and the more delicately flavored beans later. Give even the most delicate beans at least 8 hours. Add sugar to taste. The percentage of sugar by weight can vary from a few percent up to 30 percent. You may also add dried whole fat milk at this point, and other flavorings, like an inch or so of vanilla bean. Melange the sugar and other additives at least 8 more hours. The goal is to decrease the particle size below what can be detected by the  tongue. When done, decant into a silicone mat line baking pan. This is your untempered chocolate. it melts easily and tends to get crumbly as it ages. Which is why you will want to temper it.\n\nFinally, follow the directions on your tempering machine, adding chunks of untempered chocolate as indicated. The liquid tempered chocolate can be used for fruit dipping or can be poured into molds for bars or shaped candies. Other additives can be included at this stage - nuts, nougat etc. Cool the results at room temperature for several hours before serving. Enjoy the results of your labor.", "category": "IT"}, {"instruction": "How did Alfred Nobel make his money", "input": "", "output": "He invented Dynamite", "category": "IT"}, {"instruction": "What is the Trans Tahoe Relay?", "input": "", "output": "Each year there is a race held to swim across Lake Tahoe. The race was created and is still sponsored by The Olympic Club of San Francisco. Teams are created and entered from across the globe but primarily North America. The format of the race is a six person relay; all male, all female. or half male/female. Starting on the Nevada side of the lake each member of the team swims for 30 minutes following the team's boat. After each of the swimmers has completed the 30 minute rotation the swimmers then rotate again every 10 minutes. This is done is sequence until the team reach the other side of the lake in California. The swimmers need to touch one-another when rotating between swimmers and there are no wetsuits or fins allowed.", "category": "IT"}, {"instruction": "How do you prepare for case study interview for digital transformation case?", "input": "", "output": "Here is one suggested approach. 1. Gather all requirements related to business problem 2. Understand data sources the business is using. 3. Understand if business would like to build or buy solutions 4. Check for industry specific accelerators 5. Start with one business unit and show the impact of digital transformation and then expand to other business units. 6. Do business value assessment like ROI 7. Focus on tangible and intangible benefits of digital transformation 8. Cost benefit analysis 9. Implementation plan and timelines 10. Production plan  11. Maintenance and support", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Wheelharp, Clarinet", "input": "", "output": "Wheelharp is string, Clarinet is woodwind.", "category": "IT"}, {"instruction": "Which country makes the best coffee in the world?", "input": "", "output": "The answer is relative but Australia would make the best flat white while Italy would have the best expresso coffee.", "category": "IT"}, {"instruction": "Based on the reference text about Bitcoin, how many countries have banned Bitcoin?", "input": "Bitcoin (abbreviation: BTC[a] or XBT[b]; sign: \u20bf) is a protocol which implements a highly available, public, permanent, and decentralized ledger. In order to add to the ledger, a user must prove they control an entry in the ledger. The protocol specifies that the entry indicates an amount of a token, bitcoin with a minuscule b. The user can update the ledger, assigning some of their bitcoin to another entry in the ledger. Because the token has characteristics of money, it can be thought of as a digital currency.[10]\n\nBitcoin transactions are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain. The cryptocurrency was invented in 2008 by an unknown person or group of people using the name Satoshi Nakamoto.[11] The currency began use in 2009,[12] when its implementation was released as open-source software.[7]:\u200ach. 1\u200a The word \"bitcoin\" was defined in a white paper published on October 31, 2008.[3][13] It is a compound of the words bit and coin.[14]\n\nThe Library of Congress reports that, as of November 2021, nine countries have fully banned bitcoin use, while a further forty-two have implicitly banned it.[15] A few governments have used bitcoin in some capacity. El Salvador has adopted Bitcoin as legal tender, although use by merchants remains low.[16] Ukraine has accepted cryptocurrency donations to fund the resistance to the 2022 Russian invasion. Iran has used bitcoin to bypass sanctions.", "output": "As of November 2021, 42 countries have implicitly banned and 9 countries have fully banned the use of Bitcoin.", "category": "IT"}, {"instruction": "What was the Underground Railroad?", "input": "The Underground Railroad was a network of clandestine routes and safe houses established in the United States during the early- to the mid-19th century. It was used by enslaved African Americans primarily to escape into free states and Canada.[1] The network was assisted by abolitionists and others sympathetic to the cause of the escapees.[2] The enslaved persons who risked escape and those who aided them are also collectively referred to as the \"Underground Railroad\".[3] Various other routes led to Mexico,[4] where slavery had been abolished, and to islands in the Caribbean that were not part of the slave trade.[5] An earlier escape route running south toward Florida, then a Spanish possession (except 1763\u20131783), existed from the late 17th century until approximately 1790.[6][7] However, the network now generally known as the Underground Railroad began in the late 18th century. It ran north and grew steadily until the Emancipation Proclamation was signed by President Abraham Lincoln.[8] One estimate suggests that by 1850, approximately 100,000 enslaved people had escaped to freedom via the network", "output": "The Underground Railroad was a secret network of routes and safe houses in the United States established in the early 19th century that led to free states, Canada, Mexico and other overseas areas. Black slaves used the Underground Railroad to escape from slavery. It is estimated that by 1850, about 100,000 slaves had escaped to freedom by the \"Railroad\".", "category": "IT"}, {"instruction": "When was the 8088 processor released?", "input": "The 8086[2] (also called iAPX 86)[3] is a 16-bit microprocessor chip designed by Intel between early 1976 and June 8, 1978, when it was released. The Intel 8088, released July 1, 1979,[4] is a slightly modified chip with an external 8-bit data bus (allowing the use of cheaper and fewer supporting ICs),[note 1] and is notable as the processor used in the original IBM PC design.", "output": "The Intel 8088 processor was released July 1, 1979.", "category": "IT"}, {"instruction": "What are the best social media sites", "input": "", "output": "Twitter, facebook, tiktok, snapchat", "category": "IT"}, {"instruction": "Given this paragraph on LeBron James' early career, when did he win his first NBA MVP?", "input": "James grew up playing basketball for St. Vincent\u2013St. Mary High School in his hometown of Akron, Ohio. He was heavily touted by the national media as a future NBA superstar. A prep-to-pro, he was selected by the Cleveland Cavaliers with the first overall pick of the 2003 NBA draft. Named the 2004 NBA Rookie of the Year, he soon established himself as one of the league's premier players, leading the Cavaliers to their first NBA Finals appearance in 2007 and winning the NBA MVP award in 2009 and 2010. After failing to win a championship with Cleveland, James left in 2010 as a free agent to join the Miami Heat; this was announced in a nationally televised special titled The Decision and is among the most controversial free agency moves in sports history.", "output": "LeBron James won his first NBA MVP in 2009.", "category": "IT"}, {"instruction": "I'm going to give you a passage from Marty Essen's book \"Cool Creatures, Hot Planet: Exploring the Seven Continents\" and want you to answer the following question: Where are western Hermann's tortoises found?\n\nAfter spending the night at a large chain hotel, Deb and I traveled southeast with tortoises on our mind. Our plan for the day was to infiltrate the Massif des Maures area and search for one of France's most endangered reptiles-- the western Hermann's tortoise.  The first stop of our quest was Le Village de Tortues (the Tortoise Village), a tortoise rehabilitation center near the town of Gonfaron. Our mission was to befriend a staff member, learn as much as we could, and get detailed information on tracking down the wily Hermann's tortoise in the wild. When we couldn't find an English-speaking staff member, our mission was nearly thwarted. Only through quick thinking and improvisation were we able to acquire the vital background information we needed. Okay - we utilized the signs provided for British visitors. For many people, the word tortoise invokes thoughts of giant four-foot-long Galapagos tortoises. Western Hermann's tortoises, on the other hand, are small, reaching a maximum length of eight inches. While both reptiles make the IUCN Red List of Threatened Species, the Galapagos tortoise is listed as \"vulnerable\" and the western Hermann's is listed as \"endangered.\" In France, habitat destruction, egg pilfering, and fire are the primary factors for the tortoises decline.", "input": "", "output": "Western Hermann's tortoises are found in France, in a turtle rehabilitation village, Le Village de Tortues, near Gonfaron.", "category": "IT"}, {"instruction": "Give me some ideas of kids items to stuff into Easter eggs.", "input": "", "output": "Here are some kids items that you might consider for your next Easter egg hunt: stickers, playdoh, bouncy balls, bubbles, coins, special rocks or gems, candy, other small toys", "category": "IT"}, {"instruction": "Why should we ban artificial sweeteners like aspartame?", "input": "", "output": "Artificial sweeteners like aspartame are incredibly dangerous to our health. There have been countless studies showing the damaging effects it can wreak on a person's health. One of those is your gut health. As we know more and more about gut health, your gut is now being referred to as your \"second brain\". One could argue without a healthy gut, you cannot have good health. We know that artificial sweeteners like aspartame are damaging to our gut and our microbiome.", "category": "IT"}, {"instruction": "Name all the books in the Harry Potter collection", "input": "", "output": "Here is a list of all the books in the Harry Potter collection written by J.K. Rowling - Harry Potter and the Philosopher's Stone, Harry Potter and the Chamber of Secrets, Harry Potter and the Prisoner of Azkaban, Harry Potter and the Goblet of Fire, Harry Potter and the Order of the Phoenix, Harry Potter and the Half-Blood Prince and Harry Potter and the Deathly Hallows", "category": "IT"}, {"instruction": "Tell me whether these cities are in Texas: Austin, Houston, New York, Chicago, Miami, Dallas", "input": "", "output": "Austin, Houston, Dallas", "category": "IT"}, {"instruction": "Tell me whether you drive on the right or left side of the road in these countries: USA, Mexico, Spain, England, New Zealand, Japan", "input": "", "output": "USA: Right Side\nMexico: Right Side\nSpain: Right Side\nEngland: Left Side\nNew Zealand: Left Side\nJapan: Left Side", "category": "IT"}, {"instruction": "Identify which car manufacturer is German or American: Opel, GMC", "input": "", "output": "Opel is German, GMC is American", "category": "IT"}, {"instruction": "Which team was relegated from the league at the conclusion of the 1991 Season?", "input": "Waterside Karori were relegated at the end of the 1990 season, to be replaced by the winner of a play-off series between teams from the northern, central, and southern leagues (Mount Albert-Ponsonby, Nelson United, and Burndale United respectively). Nelson United won the series to gain promotion, but there is some controversy about their participation in the play-offs as they had only finished second in the central regional league, which was won by Petone.[1]\n\nGisborne City were relegated at the end of the 1991 season", "output": "Gisborne City", "category": "IT"}, {"instruction": "Give me a list of recommendations to quickly heal from an achilles rupture surgery.", "input": "", "output": "Get plenty of rest\nStay off the injured leg\nKeep the foot elevated above the heart\nTake medication to keep inflammation down\nIce the area to reduce swelling\nBrace the ankle and foot, and point the toe down in a plantar flexion position", "category": "IT"}, {"instruction": "How has the video gaming industry evolved over the years ?", "input": "", "output": "Video games have been around for a while now. The industry have evolved massively in the recent 10 years. The industry begun with games that were programmed for the early computers. Then, specific devices like the Playstation from Sony, X-Box from Microsoft started to enter the scene. These helped with growing the number of people who play games since not everybody likes to own a PC to play games.\n\nAs the smartphone era begin, video games started to make an impact on those devices as well and the mobile gamer base started growing rapidly. \n\nRecently, the industry also evolved furthermore and professional e-sport teams started to emerge which boosted the spectator sport angle of the industry. This also grew with the adoption of streaming platforms like Twitch, where watching professional gamers play video games became a trend. \n\nNow, it is not uncommon to see most multiplayer competitive games to have a professional scene where teams like TSM, Liquid, Cloud 9 have signed players that compete on a professional level.", "category": "IT"}, {"instruction": "How many musicians performed in the world's largest rock band?", "input": "", "output": "The world\u2019s largest performing rock band included 953 musicians.", "category": "IT"}, {"instruction": "What percussion instruments are easy to learn?", "input": "", "output": "Hand drums, tambourine and triangle are easy to learn percussion instruments.", "category": "IT"}, {"instruction": "Summarizing the code.", "input": "def is_valid_url(url):\n    \"\"\"\"\"\"\n    pieces = urlparse(url)\n    return all([pieces.scheme, pieces.netloc])", "output": "Checks if a given string is an url", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_json_string(self, indent=None):\n        ''' \n\n        '''\n        root_ids = []\n        for r in self._roots:\n            root_ids.append(r.id)\n\n        root_references = self._all_models.values()\n\n        json = {\n            'title' : self.title,\n            'roots' : {\n                'root_ids' : root_ids,\n                'references' : references_json(root_references)\n            },\n            'version' : __version__\n        }\n\n        return serialize_json(json, indent=indent)", "output": "Convert the document to a JSON string.\n\n        Args:\n            indent (int or None, optional) : number of spaces to indent, or\n                None to suppress all newlines and indentation (default: None)\n\n        Returns:\n            str", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def roc_curve(input:Tensor, targ:Tensor):\n    \"\"\n    targ = (targ == 1)\n    desc_score_indices = torch.flip(input.argsort(-1), [-1])\n    input = input[desc_score_indices]\n    targ = targ[desc_score_indices]\n    d = input[1:] - input[:-1]\n    distinct_value_indices = torch.nonzero(d).transpose(0,1)[0]\n    threshold_idxs = torch.cat((distinct_value_indices, LongTensor([len(targ) - 1]).to(targ.device)))\n    tps = torch.cumsum(targ * 1, dim=-1)[threshold_idxs]\n    fps = (1 + threshold_idxs - tps)\n    if tps[0] != 0 or fps[0] != 0:\n        fps = torch.cat((LongTensor([0]), fps))\n        tps = torch.cat((LongTensor([0]), tps))\n    fpr, tpr = fps.float() / fps[-1], tps.float() / tps[-1]\n    return fpr, tpr", "output": "Returns the false positive and true positive rates", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_value(self):\r\n        \"\"\"\"\"\"\r\n        # It is import to avoid accessing Qt C++ object as it has probably\r\n        # already been destroyed, due to the Qt.WA_DeleteOnClose attribute\r\n        df = self.dataModel.get_data()\r\n        if self.is_series:\r\n            return df.iloc[:, 0]\r\n        else:\r\n            return df", "output": "Return modified Dataframe -- this is *not* a copy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_config(self):\r\n        \"\"\"\"\"\"\r\n        for option, value in list(self.explorer.get_options().items()):\r\n            self.set_option(option, value)\r\n        self.set_option('expanded_state',\r\n                        self.explorer.treewidget.get_expanded_state())\r\n        self.set_option('scrollbar_position',\r\n                        self.explorer.treewidget.get_scrollbar_position())", "output": "Save configuration: tree widget state", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def words_and_tags_from_wsj_tree(tree_string):\n  \"\"\"\n  \"\"\"\n  stack, tags, words = [], [], []\n  for tok in tree_string.strip().split():\n    if tok[0] == \"(\":\n      symbol = tok[1:]\n      tags.append(symbol)\n      stack.append(symbol)\n    else:\n      assert tok[-1] == \")\"\n      stack.pop()  # Pop the POS-tag.\n      while tok[-2] == \")\":\n        tags.append(\"/\" + stack.pop())\n        tok = tok[:-1]\n      words.append(tok[:-1])\n  return str.join(\" \", words), str.join(\" \", tags[1:-1])", "output": "Generates linearized trees and tokens from the wsj tree format.\n\n  It uses the linearized algorithm described in https://arxiv.org/abs/1412.7449.\n\n  Args:\n    tree_string: tree in wsj format\n\n  Returns:\n    tuple: (words, linearized tree)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(self):\n        \"\"\"\n        \"\"\"\n        if self.path is not None:\n            logger.debug(\n                \"Skipped creation of temporary directory: {}\".format(self.path)\n            )\n            return\n        # We realpath here because some systems have their default tmpdir\n        # symlinked to another directory.  This tends to confuse build\n        # scripts, so we canonicalize the path by traversing potential\n        # symlinks here.\n        self.path = os.path.realpath(\n            tempfile.mkdtemp(prefix=\"pip-{}-\".format(self.kind))\n        )\n        self._register_finalizer()\n        logger.debug(\"Created temporary directory: {}\".format(self.path))", "output": "Create a temporary directory and store its path in self.path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def divide(n, iterable):\n    \"\"\"\n    \n    \"\"\"\n\n    seq = tuple(iterable)\n    q, r = divmod(len(seq), n)\n\n    ret = []\n    for i in range(n):\n        start = (i * q) + (i if i < r else r)\n        stop = ((i + 1) * q) + (i + 1 if i + 1 < r else r)\n        ret.append(iter(seq[start:stop]))\n\n    return ret", "output": "split an iterable into n groups, per https://more-itertools.readthedocs.io/en/latest/api.html#grouping\n\n    :param int n: Number of unique groups\n    :param iter iterable: An iterable to split up\n    :return: a list of new iterables derived from the original iterable\n    :rtype: list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_lifecycle(self, policy=None, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_ilm\", \"policy\", policy), params=params, body=body\n        )", "output": "`<https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html>`_\n\n        :arg policy: The name of the index lifecycle policy\n        :arg body: The lifecycle policy definition to register", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_available_time_string(availabilities):\n    \"\"\"\n    \n    \"\"\"\n    prefix = 'We have availabilities at '\n    if len(availabilities) > 3:\n        prefix = 'We have plenty of availability, including '\n\n    prefix += build_time_output_string(availabilities[0])\n    if len(availabilities) == 2:\n        return '{} and {}'.format(prefix, build_time_output_string(availabilities[1]))\n\n    return '{}, {} and {}'.format(prefix, build_time_output_string(availabilities[1]), build_time_output_string(availabilities[2]))", "output": "Build a string eliciting for a possible time slot among at least two availabilities.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def morsel_to_cookie(morsel):\n    \"\"\"\"\"\"\n\n    expires = None\n    if morsel['max-age']:\n        try:\n            expires = int(time.time() + int(morsel['max-age']))\n        except ValueError:\n            raise TypeError('max-age: %s must be integer' % morsel['max-age'])\n    elif morsel['expires']:\n        time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n        expires = calendar.timegm(\n            time.strptime(morsel['expires'], time_template)\n        )\n    return create_cookie(\n        comment=morsel['comment'],\n        comment_url=bool(morsel['comment']),\n        discard=False,\n        domain=morsel['domain'],\n        expires=expires,\n        name=morsel.key,\n        path=morsel['path'],\n        port=None,\n        rest={'HttpOnly': morsel['httponly']},\n        rfc2109=False,\n        secure=bool(morsel['secure']),\n        value=morsel.value,\n        version=morsel['version'] or 0,\n    )", "output": "Convert a Morsel object into a Cookie containing the one k/v pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dump(self, fmap='', with_stats=False, dump_format=\"text\"):\n        \"\"\"\n        \n        \"\"\"\n        length = c_bst_ulong()\n        sarr = ctypes.POINTER(ctypes.c_char_p)()\n        if self.feature_names is not None and fmap == '':\n            flen = len(self.feature_names)\n\n            fname = from_pystr_to_cstr(self.feature_names)\n\n            if self.feature_types is None:\n                # use quantitative as default\n                # {'q': quantitative, 'i': indicator}\n                ftype = from_pystr_to_cstr(['q'] * flen)\n            else:\n                ftype = from_pystr_to_cstr(self.feature_types)\n            _check_call(_LIB.XGBoosterDumpModelExWithFeatures(\n                self.handle,\n                ctypes.c_int(flen),\n                fname,\n                ftype,\n                ctypes.c_int(with_stats),\n                c_str(dump_format),\n                ctypes.byref(length),\n                ctypes.byref(sarr)))\n        else:\n            if fmap != '' and not os.path.exists(fmap):\n                raise ValueError(\"No such file: {0}\".format(fmap))\n            _check_call(_LIB.XGBoosterDumpModelEx(self.handle,\n                                                  c_str(fmap),\n                                                  ctypes.c_int(with_stats),\n                                                  c_str(dump_format),\n                                                  ctypes.byref(length),\n                                                  ctypes.byref(sarr)))\n        res = from_cstr_to_pystr(sarr, length)\n        return res", "output": "Returns the model dump as a list of strings.\n\n        Parameters\n        ----------\n        fmap : string, optional\n            Name of the file containing feature map names.\n        with_stats : bool, optional\n            Controls whether the split statistics are output.\n        dump_format : string, optional\n            Format of model dump. Can be 'text' or 'json'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_imglist(self, fname=None, root=None, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        def progress_bar(count, total, suffix=''):\n            import sys\n            bar_len = 24\n            filled_len = int(round(bar_len * count / float(total)))\n\n            percents = round(100.0 * count / float(total), 1)\n            bar = '=' * filled_len + '-' * (bar_len - filled_len)\n            sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percents, '%', suffix))\n            sys.stdout.flush()\n\n        str_list = []\n        for index in range(self.num_images):\n            progress_bar(index, self.num_images)\n            label = self.label_from_index(index)\n            if label.size < 1:\n                continue\n            path = self.image_path_from_index(index)\n            if root:\n                path = osp.relpath(path, root)\n            str_list.append('\\t'.join([str(index), str(2), str(label.shape[1])] \\\n              + [\"{0:.4f}\".format(x) for x in label.ravel()] + [path,]) + '\\n')\n        if str_list:\n            if shuffle:\n                import random\n                random.shuffle(str_list)\n            if not fname:\n                fname = self.name + '.lst'\n            with open(fname, 'w') as f:\n                for line in str_list:\n                    f.write(line)\n        else:\n            raise RuntimeError(\"No image in imdb\")", "output": "save imglist to disk\n\n        Parameters:\n        ----------\n        fname : str\n            saved filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_gcs_file(path, out_fname=None, prefix_filter=None):\n  \"\"\"\"\"\"\n  url = posixpath.join(GCS_BUCKET, path)\n  if prefix_filter:\n    url += \"?prefix=%s\" % prefix_filter\n  stream = bool(out_fname)\n  resp = requests.get(url, stream=stream)\n  if not resp.ok:\n    raise ValueError(\"GCS bucket inaccessible\")\n  if out_fname:\n    with tf.io.gfile.GFile(out_fname, \"wb\") as f:\n      for chunk in resp.iter_content(1024):\n        f.write(chunk)\n  else:\n    return resp.content", "output": "Download a file from GCS, optionally to a file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch_node_from(self, path):\n        \"\"\" \n        \"\"\"\n        context = self\n        for key in path:\n            context = context[key]\n            if context is None:\n                break\n        return context", "output": "Returns a node for a path.\n\n        :param path: Tuple of :term:`hashable` s.\n        :rtype: :class:`~cerberus.errors.ErrorTreeNode` or :obj:`None`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_mimetype(mimetype: str) -> MimeType:\n    \"\"\"\n\n    \"\"\"\n    if not mimetype:\n        return MimeType(type='', subtype='', suffix='',\n                        parameters=MultiDictProxy(MultiDict()))\n\n    parts = mimetype.split(';')\n    params = MultiDict()  # type: MultiDict[str]\n    for item in parts[1:]:\n        if not item:\n            continue\n        key, value = cast(Tuple[str, str],\n                          item.split('=', 1) if '=' in item else (item, ''))\n        params.add(key.lower().strip(), value.strip(' \"'))\n\n    fulltype = parts[0].strip().lower()\n    if fulltype == '*':\n        fulltype = '*/*'\n\n    mtype, stype = (cast(Tuple[str, str], fulltype.split('/', 1))\n                    if '/' in fulltype else (fulltype, ''))\n    stype, suffix = (cast(Tuple[str, str], stype.split('+', 1))\n                     if '+' in stype else (stype, ''))\n\n    return MimeType(type=mtype, subtype=stype, suffix=suffix,\n                    parameters=MultiDictProxy(params))", "output": "Parses a MIME type into its components.\n\n    mimetype is a MIME type string.\n\n    Returns a MimeType object.\n\n    Example:\n\n    >>> parse_mimetype('text/html; charset=utf-8')\n    MimeType(type='text', subtype='html', suffix='',\n             parameters={'charset': 'utf-8'})", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def should_stop(self, result):\n        \"\"\"\"\"\"\n\n        if result.get(DONE):\n            return True\n\n        for criteria, stop_value in self.stopping_criterion.items():\n            if criteria not in result:\n                raise TuneError(\n                    \"Stopping criteria {} not provided in result {}.\".format(\n                        criteria, result))\n            if result[criteria] >= stop_value:\n                return True\n\n        return False", "output": "Whether the given result meets this trial's stopping criteria.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expand_composites (properties):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .property import Property\n        assert is_iterable_typed(properties, Property)\n    explicit_features = set(p.feature for p in properties)\n\n    result = []\n\n    # now expand composite features\n    for p in properties:\n        expanded = expand_composite(p)\n\n        for x in expanded:\n            if not x in result:\n                f = x.feature\n\n                if f.free:\n                    result.append (x)\n                elif not x in properties:  # x is the result of expansion\n                    if not f in explicit_features:  # not explicitly-specified\n                        if any(r.feature == f for r in result):\n                            raise FeatureConflict(\n                                \"expansions of composite features result in \"\n                                \"conflicting values for '%s'\\nvalues: '%s'\\none contributing composite property was '%s'\" %\n                                (f.name, [r.value for r in result if r.feature == f] + [x.value], p))\n                        else:\n                            result.append (x)\n                elif any(r.feature == f for r in result):\n                    raise FeatureConflict (\"explicitly-specified values of non-free feature '%s' conflict\\n\"\n                    \"existing values: '%s'\\nvalue from expanding '%s': '%s'\" % (f,\n                    [r.value for r in result if r.feature == f], p, x.value))\n                else:\n                    result.append (x)\n\n    return result", "output": "Expand all composite properties in the set so that all components\n        are explicitly expressed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_file(self, fname):\r\n        \"\"\"\"\"\"\r\n        path, valid = QInputDialog.getText(self, _('Rename'),\r\n                              _('New name:'), QLineEdit.Normal,\r\n                              osp.basename(fname))\r\n        if valid:\r\n            path = osp.join(osp.dirname(fname), to_text_string(path))\r\n            if path == fname:\r\n                return\r\n            if osp.exists(path):\r\n                if QMessageBox.warning(self, _(\"Rename\"),\r\n                         _(\"Do you really want to rename <b>%s</b> and \"\r\n                           \"overwrite the existing file <b>%s</b>?\"\r\n                           ) % (osp.basename(fname), osp.basename(path)),\r\n                         QMessageBox.Yes|QMessageBox.No) == QMessageBox.No:\r\n                    return\r\n            try:\r\n                misc.rename_file(fname, path)\r\n                if osp.isfile(fname):\r\n                    self.sig_renamed.emit(fname, path)\r\n                else:\r\n                    self.sig_renamed_tree.emit(fname, path)\r\n                return path\r\n            except EnvironmentError as error:\r\n                QMessageBox.critical(self, _(\"Rename\"),\r\n                            _(\"<b>Unable to rename file <i>%s</i></b>\"\r\n                              \"<br><br>Error message:<br>%s\"\r\n                              ) % (osp.basename(fname), to_text_string(error)))", "output": "Rename file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_read(self, kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs = super().validate_read(kwargs)\n        if 'start' in kwargs or 'stop' in kwargs:\n            raise NotImplementedError(\"start and/or stop are not supported \"\n                                      \"in fixed Sparse reading\")\n        return kwargs", "output": "we don't support start, stop kwds in Sparse", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _expand_disk(disk):\n    '''\n    \n    '''\n    ret = {}\n    ret.update(disk.__dict__)\n    zone = ret['extra']['zone']\n    ret['extra']['zone'] = {}\n    ret['extra']['zone'].update(zone.__dict__)\n    return ret", "output": "Convert the libcloud Volume object into something more serializable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_order(field_path, direction):\n        \"\"\"\"\"\"\n        return query_pb2.StructuredQuery.Order(\n            field=query_pb2.StructuredQuery.FieldReference(field_path=field_path),\n            direction=_enum_from_direction(direction),\n        )", "output": "Helper for :meth:`order_by`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def callJavaFunc(sc, func, *args):\n    \"\"\"  \"\"\"\n    args = [_py2java(sc, a) for a in args]\n    return _java2py(sc, func(*args))", "output": "Call Java Function", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_to_create_directory(directory_path):\n    \"\"\"\n    \"\"\"\n    logger = logging.getLogger(\"ray\")\n    directory_path = os.path.expanduser(directory_path)\n    if not os.path.exists(directory_path):\n        try:\n            os.makedirs(directory_path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise e\n            logger.warning(\n                \"Attempted to create '{}', but the directory already \"\n                \"exists.\".format(directory_path))\n        # Change the log directory permissions so others can use it. This is\n        # important when multiple people are using the same machine.\n    try:\n        os.chmod(directory_path, 0o0777)\n    except OSError as e:\n        # Silently suppress the PermissionError that is thrown by the chmod.\n        # This is done because the user attempting to change the permissions\n        # on a directory may not own it. The chmod is attempted whether the\n        # directory is new or not to avoid race conditions.\n        # ray-project/ray/#3591\n        if e.errno in [errno.EACCES, errno.EPERM]:\n            pass\n        else:\n            raise", "output": "Attempt to create a directory that is globally readable/writable.\n\n    Args:\n        directory_path: The path of the directory to create.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def experiment_pb(\n    hparam_infos,\n    metric_infos,\n    user='',\n    description='',\n    time_created_secs=None):\n  \"\"\"\n  \"\"\"\n  if time_created_secs is None:\n    time_created_secs = time.time()\n  experiment = api_pb2.Experiment(\n      description=description,\n      user=user,\n      time_created_secs=time_created_secs,\n      hparam_infos=hparam_infos,\n      metric_infos=metric_infos)\n  return _summary(metadata.EXPERIMENT_TAG,\n                  plugin_data_pb2.HParamsPluginData(experiment=experiment))", "output": "Creates a summary that defines a hyperparameter-tuning experiment.\n\n  Args:\n    hparam_infos: Array of api_pb2.HParamInfo messages. Describes the\n        hyperparameters used in the experiment.\n    metric_infos: Array of api_pb2.MetricInfo messages. Describes the metrics\n        used in the experiment. See the documentation at the top of this file\n        for how to populate this.\n    user: String. An id for the user running the experiment\n    description: String. A description for the experiment. May contain markdown.\n    time_created_secs: float. The time the experiment is created in seconds\n    since the UNIX epoch. If None uses the current time.\n\n  Returns:\n    A summary protobuffer containing the experiment definition.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def MessageToJson(message,\n                  including_default_value_fields=False,\n                  preserving_proto_field_name=False):\n  \"\"\"\n  \"\"\"\n  printer = _Printer(including_default_value_fields,\n                     preserving_proto_field_name)\n  return printer.ToJsonString(message)", "output": "Converts protobuf message to JSON format.\n\n  Args:\n    message: The protocol buffers message instance to serialize.\n    including_default_value_fields: If True, singular primitive fields,\n        repeated fields, and map fields will always be serialized.  If\n        False, only serialize non-empty fields.  Singular message fields\n        and oneof fields are not affected by this option.\n    preserving_proto_field_name: If True, use the original proto field\n        names as defined in the .proto file. If False, convert the field\n        names to lowerCamelCase.\n\n  Returns:\n    A string containing the JSON formatted protocol buffer message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping(dest_ip=None, **kwargs):\n    '''\n    \n    '''\n    conn = __proxy__['junos.conn']()\n    ret = {}\n\n    if dest_ip is None:\n        ret['message'] = 'Please specify the destination ip to ping.'\n        ret['out'] = False\n        return ret\n\n    op = {'host': dest_ip}\n    if '__pub_arg' in kwargs:\n        if kwargs['__pub_arg']:\n            if isinstance(kwargs['__pub_arg'][-1], dict):\n                op.update(kwargs['__pub_arg'][-1])\n    else:\n        op.update(kwargs)\n\n    op['count'] = six.text_type(op.pop('count', 5))\n    if 'ttl' in op:\n        op['ttl'] = six.text_type(op['ttl'])\n\n    ret['out'] = True\n    try:\n        ret['message'] = jxmlease.parse(etree.tostring(conn.rpc.ping(**op)))\n    except Exception as exception:\n        ret['message'] = 'Execution failed due to \"{0}\"'.format(exception)\n        ret['out'] = False\n    return ret", "output": "Send a ping RPC to a device\n\n    dest_ip\n      The IP of the device to ping\n\n    dev_timeout : 30\n        The NETCONF RPC timeout (in seconds)\n\n    rapid : False\n        When ``True``, executes ping at 100pps instead of 1pps\n\n    ttl\n        Maximum number of IP routers (IP hops) allowed between source and\n        destination\n\n    routing_instance\n      Name of the routing instance to use to send the ping\n\n    interface\n      Interface used to send traffic\n\n    count : 5\n      Number of packets to send\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt 'device_name' junos.ping '8.8.8.8' count=5\n        salt 'device_name' junos.ping '8.8.8.8' ttl=1 rapid=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def recovery(self, index=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request('GET', _make_path('_cat',\n            'recovery', index), params=params)", "output": "recovery is a view of shard replication.\n        `<https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html>`_\n\n        :arg index: A comma-separated list of index names to limit the returned\n            information\n        :arg bytes: The unit in which to display byte values, valid choices are:\n            'b', 'k', 'kb', 'm', 'mb', 'g', 'gb', 't', 'tb', 'p', 'pb'\n        :arg format: a short version of the Accept header, e.g. json, yaml\n        :arg h: Comma-separated list of column names to display\n        :arg help: Return help information, default False\n        :arg master_timeout: Explicit operation timeout for connection to master\n            node\n        :arg s: Comma-separated list of column names or column aliases to sort\n            by\n        :arg v: Verbose mode. Display column headers, default False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        \"\"\"\n        \n        \"\"\"\n\n        if freq is not None or axis != 0 or not isna(fill_value):\n            return self.apply(lambda x: x.shift(periods, freq,\n                                                axis, fill_value))\n\n        return self._get_cythonized_result('group_shift_indexer',\n                                           self.grouper, cython_dtype=np.int64,\n                                           needs_ngroups=True,\n                                           result_is_index=True,\n                                           periods=periods)", "output": "Shift each group by periods observations.\n\n        Parameters\n        ----------\n        periods : integer, default 1\n            number of periods to shift\n        freq : frequency string\n        axis : axis to shift, default 0\n        fill_value : optional\n\n            .. versionadded:: 0.24.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def track_strategy_worker(self, strategy, name, interval=10, **kwargs):\n        \"\"\"\"\"\"\n        while True:\n            try:\n                transactions = self.query_strategy_transaction(\n                    strategy, **kwargs\n                )\n            # pylint: disable=broad-except\n            except Exception as e:\n                log.exception(\"\u65e0\u6cd5\u83b7\u53d6\u7b56\u7565 %s \u8c03\u4ed3\u4fe1\u606f, \u9519\u8bef: %s, \u8df3\u8fc7\u6b64\u6b21\u8c03\u4ed3\u67e5\u8be2\", name, e)\n                time.sleep(3)\n                continue\n            for transaction in transactions:\n                trade_cmd = {\n                    \"strategy\": strategy,\n                    \"strategy_name\": name,\n                    \"action\": transaction[\"action\"],\n                    \"stock_code\": transaction[\"stock_code\"],\n                    \"amount\": transaction[\"amount\"],\n                    \"price\": transaction[\"price\"],\n                    \"datetime\": transaction[\"datetime\"],\n                }\n                if self.is_cmd_expired(trade_cmd):\n                    continue\n                log.info(\n                    \"\u7b56\u7565 [%s] \u53d1\u9001\u6307\u4ee4\u5230\u4ea4\u6613\u961f\u5217, \u80a1\u7968: %s \u52a8\u4f5c: %s \u6570\u91cf: %s \u4ef7\u683c: %s \u4fe1\u53f7\u4ea7\u751f\u65f6\u95f4: %s\",\n                    name,\n                    trade_cmd[\"stock_code\"],\n                    trade_cmd[\"action\"],\n                    trade_cmd[\"amount\"],\n                    trade_cmd[\"price\"],\n                    trade_cmd[\"datetime\"],\n                )\n                self.trade_queue.put(trade_cmd)\n                self.add_cmd_to_expired_cmds(trade_cmd)\n            try:\n                for _ in range(interval):\n                    time.sleep(1)\n            except KeyboardInterrupt:\n                log.info(\"\u7a0b\u5e8f\u9000\u51fa\")\n                break", "output": "\u8ddf\u8e2a\u4e0b\u5355worker\n        :param strategy: \u7b56\u7565id\n        :param name: \u7b56\u7565\u540d\u5b57\n        :param interval: \u8f6e\u8be2\u7b56\u7565\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nansem(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    \n    \"\"\"\n\n    # This checks if non-numeric-like data is passed with numeric_only=False\n    # and raises a TypeError otherwise\n    nanvar(values, axis, skipna, ddof=ddof, mask=mask)\n\n    if mask is None:\n        mask = isna(values)\n    if not is_float_dtype(values.dtype):\n        values = values.astype('f8')\n    count, _ = _get_counts_nanvar(mask, axis, ddof, values.dtype)\n    var = nanvar(values, axis, skipna, ddof=ddof)\n\n    return np.sqrt(var) / np.sqrt(count)", "output": "Compute the standard error in the mean along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nansem(s)\n     0.5773502691896258", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def counting_sort(arr):\n    \"\"\"\n    \n    \"\"\"\n\n    m = min(arr)\n    # in case there are negative elements, change the array to all positive element\n    different = 0\n    if m < 0:\n        # save the change, so that we can convert the array back to all positive number\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    # temp_array[i] contain the times the number i appear in arr\n\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    # temp_array[i] contain the number of element less than or equal i in arr\n\n    result_arr = arr.copy()\n    # creating a result_arr an put the element in a correct positon\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n\n    return result_arr", "output": "Counting_sort\n    Sorting a array which has no element greater than k\n    Creating a new temp_arr,where temp_arr[i] contain the number of\n    element less than or equal to i in the arr\n    Then placing the number i into a correct position in the result_arr\n    return the result_arr\n    Complexity: 0(n)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_raw(path, raw):\n    '''\n    \n    '''\n    log.debug('Writing vault secrets for %s at %s', __grains__['id'], path)\n    try:\n        url = 'v1/{0}'.format(path)\n        response = __utils__['vault.make_request']('POST', url, json=raw)\n        if response.status_code == 200:\n            return response.json()['data']\n        elif response.status_code != 204:\n            response.raise_for_status()\n        return True\n    except Exception as err:\n        log.error('Failed to write secret! %s: %s', type(err).__name__, err)\n        return False", "output": "Set raw data at the path in vault. The vault policy used must allow this.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n            salt '*' vault.write_raw \"secret/my/secret\" '{\"user\":\"foo\",\"password\": \"bar\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_dict(cls, data, intersect=False, orient='items', dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        from collections import defaultdict\n\n        orient = orient.lower()\n        if orient == 'minor':\n            new_data = defaultdict(OrderedDict)\n            for col, df in data.items():\n                for item, s in df.items():\n                    new_data[item][col] = s\n            data = new_data\n        elif orient != 'items':  # pragma: no cover\n            raise ValueError('Orientation must be one of {items, minor}.')\n\n        d = cls._homogenize_dict(cls, data, intersect=intersect, dtype=dtype)\n        ks = list(d['data'].keys())\n        if not isinstance(d['data'], OrderedDict):\n            ks = list(sorted(ks))\n        d[cls._info_axis_name] = Index(ks)\n        return cls(**d)", "output": "Construct Panel from dict of DataFrame objects.\n\n        Parameters\n        ----------\n        data : dict\n            {field : DataFrame}\n        intersect : boolean\n            Intersect indexes of input DataFrames\n        orient : {'items', 'minor'}, default 'items'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the items of the result panel, pass 'items'\n            (default). Otherwise if the columns of the values of the passed\n            DataFrame objects should be the items (which in the case of\n            mixed-dtype data you should do), instead pass 'minor'\n        dtype : dtype, default None\n            Data type to force, otherwise infer\n\n        Returns\n        -------\n        Panel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _format_operation_dict(operation, parameters):\n    \"\"\"\n    \"\"\"\n    formatted_params = {}\n    for name in parameters:\n        escaped_name = name.replace(\"`\", r\"\\`\")\n        formatted_params[name] = \"@`{}`\".format(escaped_name)\n\n    try:\n        return operation % formatted_params\n    except KeyError as exc:\n        raise exceptions.ProgrammingError(exc)", "output": "Formats parameters in operation in the way BigQuery expects.\n\n    The input operation will be a query like ``SELECT %(namedparam)s`` and\n    the output will be a query like ``SELECT @namedparam``.\n\n    :type operation: str\n    :param operation: A Google BigQuery query string.\n\n    :type parameters: Mapping[str, Any]\n    :param parameters: Dictionary of parameter values.\n\n    :rtype: str\n    :returns: A formatted query string.\n    :raises: :class:`~google.cloud.bigquery.dbapi.ProgrammingError`\n        if a parameter used in the operation is not found in the\n        ``parameters`` argument.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(cls, fpath):\n        \"\"\n        fpath = _expand_path(fpath)\n        assert(fpath.suffix == '.yml')\n        if fpath.exists(): return\n        fpath.parent.mkdir(parents=True, exist_ok=True)\n        with open(fpath, 'w') as yaml_file:\n            yaml.dump(cls.DEFAULT_CONFIG, yaml_file, default_flow_style=False)", "output": "Creates a `Config` from `fpath`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prepare_graph_terms(self, default_screen):\n        \"\"\"\"\"\"\n        columns = self.columns.copy()\n        screen = self.screen\n        if screen is None:\n            screen = default_screen\n        columns[SCREEN_NAME] = screen\n        return columns", "output": "Helper for to_graph and to_execution_plan.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validator(self, meth):\n        \"\"\"\n        \n        \"\"\"\n        if self._validator is None:\n            self._validator = meth\n        else:\n            self._validator = and_(self._validator, meth)\n        return meth", "output": "Decorator that adds *meth* to the list of validators.\n\n        Returns *meth* unchanged.\n\n        .. versionadded:: 17.1.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_data_stock_to_fq(__data, type_='01'):\n\n    def __QA_fetch_stock_xdxr(\n            code,\n            format_='pd',\n            collections=DATABASE.stock_xdxr\n    ):\n        '\u83b7\u53d6\u80a1\u7968\u9664\u6743\u4fe1\u606f/\u6570\u636e\u5e93'\n        try:\n            data = pd.DataFrame(\n                [item for item in collections.find({'code': code})]\n            ).drop(['_id'],\n                   axis=1)\n            data['date'] = pd.to_datetime(data['date'])\n            return data.set_index(['date', 'code'], drop=False)\n        except:\n            return pd.DataFrame(\n                data=[],\n                columns=[\n                    'category',\n                    'category_meaning',\n                    'code',\n                    'date',\n                    'fenhong',\n                    'fenshu',\n                    'liquidity_after',\n                    'liquidity_before',\n                    'name',\n                    'peigu',\n                    'peigujia',\n                    'shares_after',\n                    'shares_before',\n                    'songzhuangu',\n                    'suogu',\n                    'xingquanjia'\n                ]\n            )\n\n    ''\n\n    code = __data.index.remove_unused_levels().levels[1][0] if isinstance(\n        __data.index,\n        pd.core.indexes.multi.MultiIndex\n    ) else __data['code'][0]\n\n    return _QA_data_stock_to_fq(\n        bfq_data=__data,\n        xdxr_data=__QA_fetch_stock_xdxr(code),\n        fqtype=type_\n    )", "output": "\u80a1\u7968 \u65e5\u7ebf/\u5206\u949f\u7ebf \u52a8\u6001\u590d\u6743\u63a5\u53e3", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def initialized(name, **kwargs):\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'The VM is already correctly defined'\n           }\n\n    # define a machine to start later\n    ret, kwargs = _find_init_change(name, ret, **kwargs)\n\n    if ret['changes'] == {}:\n        return ret\n\n    kwargs['start'] = False\n    __salt__['vagrant.init'](name, **kwargs)\n    ret['changes'][name] = 'Node initialized'\n    ret['comment'] = 'Node {0} defined but not started.'.format(name)\n\n    return ret", "output": "r'''\n    Defines a new VM with specified arguments, but does not start it.\n\n    :param name: the Salt_id node name you wish your VM to have.\n\n    Each machine must be initialized individually using this function\n    or the \"vagrant.running\" function, or the vagrant.init execution module call.\n\n    This command will not change the state of a running or paused machine.\n\n    Possible keyword arguments:\n\n    - cwd: The directory (path) containing the Vagrantfile\n    - machine: ('') the name of the machine (in the Vagrantfile) if not default\n    - vagrant_runas: ('root') the username who owns the vagrantbox file\n    - vagrant_provider: the provider to run the VM (usually 'virtualbox')\n    - vm: ({}) a dictionary containing these or other keyword arguments\n\n    .. code-block:: yaml\n\n        node_name1:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine1\n\n        node_name2:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine2\n\n        start_nodes:\n          vagrant.start:\n            - name: node_name?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def open(name, device, keyfile):\n    '''\n    \n    '''\n    if keyfile is None or keyfile == 'none' or keyfile == '-':\n        raise CommandExecutionError('For immediate crypt device mapping, keyfile must not be none')\n\n    code = __salt__['cmd.retcode']('cryptsetup open --key-file {0} {1} {2}'\n                                   .format(keyfile, device, name))\n    return code == 0", "output": "Open a crypt device using ``cryptsetup``. The ``keyfile`` must not be\n    ``None`` or ``'none'``, because ``cryptsetup`` will otherwise ask for the\n    password interactively.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cryptdev.open foo /dev/sdz1 /path/to/keyfile", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prefix_from_prefix_string(self, prefixlen_str):\n        \"\"\"\n        \"\"\"\n        # int allows a leading +/- as well as surrounding whitespace,\n        # so we ensure that isn't the case\n        if not _BaseV4._DECIMAL_DIGITS.issuperset(prefixlen_str):\n            self._report_invalid_netmask(prefixlen_str)\n        try:\n            prefixlen = int(prefixlen_str)\n        except ValueError:\n            self._report_invalid_netmask(prefixlen_str)\n        if not (0 <= prefixlen <= self._max_prefixlen):\n            self._report_invalid_netmask(prefixlen_str)\n        return prefixlen", "output": "Return prefix length from a numeric string\n\n        Args:\n            prefixlen_str: The string to be converted\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            NetmaskValueError: If the input is not a valid netmask", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_fill_indexer_searchsorted(self, target, method, limit=None):\n        \"\"\"\n        \n        \"\"\"\n        if limit is not None:\n            raise ValueError('limit argument for %r method only well-defined '\n                             'if index and target are monotonic' % method)\n\n        side = 'left' if method == 'pad' else 'right'\n\n        # find exact matches first (this simplifies the algorithm)\n        indexer = self.get_indexer(target)\n        nonexact = (indexer == -1)\n        indexer[nonexact] = self._searchsorted_monotonic(target[nonexact],\n                                                         side)\n        if side == 'left':\n            # searchsorted returns \"indices into a sorted array such that,\n            # if the corresponding elements in v were inserted before the\n            # indices, the order of a would be preserved\".\n            # Thus, we need to subtract 1 to find values to the left.\n            indexer[nonexact] -= 1\n            # This also mapped not found values (values of 0 from\n            # np.searchsorted) to -1, which conveniently is also our\n            # sentinel for missing values\n        else:\n            # Mark indices to the right of the largest value as not found\n            indexer[indexer == len(self)] = -1\n        return indexer", "output": "Fallback pad/backfill get_indexer that works for monotonic decreasing\n        indexes and non-monotonic targets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ctxtReadMemory(self, buffer, size, URL, encoding, options):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlCtxtReadMemory(self._o, buffer, size, URL, encoding, options)\n        if ret is None:raise treeError('xmlCtxtReadMemory() failed')\n        __tmp = xmlDoc(_obj=ret)\n        return __tmp", "output": "parse an XML in-memory document and build a tree. This\n           reuses the existing @ctxt parser context", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def boto_resource(self, service, *args, **kwargs):\n        \"\"\"\"\"\"\n        return self.boto_session.resource(service, *args, **self.configure_boto_session_method_kwargs(service, kwargs))", "output": "A wrapper to apply configuration options to boto resources", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attention(targets_shifted, inputs_encoded, norm_fn, hparams, bias=None):\n  \"\"\"\"\"\"\n  separabilities = [hparams.separability, hparams.separability]\n  if hparams.separability < 0:\n    separabilities = [hparams.separability - 1, hparams.separability]\n  targets_timed = common_layers.subseparable_conv_block(\n      common_layers.add_timing_signal(targets_shifted),\n      hparams.hidden_size, [((1, 1), (5, 1)), ((4, 1), (5, 1))],\n      normalizer_fn=norm_fn,\n      padding=\"LEFT\",\n      separabilities=separabilities,\n      name=\"targets_time\")\n  if hparams.attention_type == \"transformer\":\n    targets_timed = tf.squeeze(targets_timed, 2)\n    target_shape = tf.shape(targets_timed)\n    targets_segment = tf.zeros([target_shape[0], target_shape[1]])\n    target_attention_bias = common_attention.attention_bias(\n        targets_segment, targets_segment, lower_triangular=True)\n    inputs_attention_bias = tf.zeros([\n        tf.shape(inputs_encoded)[0], hparams.num_heads,\n        tf.shape(targets_segment)[1],\n        tf.shape(inputs_encoded)[1]\n    ])\n\n    qv = common_attention.multihead_attention(\n        targets_timed,\n        None,\n        target_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"self_attention\")\n    qv = common_attention.multihead_attention(\n        qv,\n        inputs_encoded,\n        inputs_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"encdec_attention\")\n    return tf.expand_dims(qv, 2)\n  elif hparams.attention_type == \"simple\":\n    targets_with_attention = common_layers.simple_attention(\n        targets_timed, inputs_encoded, bias=bias)\n    return norm_fn(targets_shifted + targets_with_attention, name=\"attn_norm\")", "output": "Complete attention layer with preprocessing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def abs_error(predictions, labels, weights_fn=None):\n  \"\"\"\"\"\"\n  del weights_fn  # Unused\n  targets = tf.squeeze(labels, axis=[2, 3])\n  batch_abs_error = tf.abs(predictions - targets)\n  den = tf.ones(tf.shape(batch_abs_error), dtype=tf.float32)\n  return (batch_abs_error, den)", "output": "Computes mean(abs(preds-target)).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_notifications(self, messages):\n        \"\"\"\"\"\"\n        for object_id, object_size, metadata_size in messages:\n            if object_size > 0 and object_id in self._waiting_dict:\n                linked_list = self._waiting_dict[object_id]\n                self._complete_future(linked_list)", "output": "Process notifications.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _layer_norm(self, name, x):\n    \"\"\"\"\"\"\n    if self.init_layers:\n      bn = LayerNorm()\n      bn.name = name\n      self.layers += [bn]\n    else:\n      bn = self.layers[self.layer_idx]\n      self.layer_idx += 1\n    bn.device_name = self.device_name\n    bn.set_training(self.training)\n    x = bn.fprop(x)\n    return x", "output": "Layer normalization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export(self, description, local=False, path='/tmp', format='qcow2'):\n        '''\n        \n        '''\n        kiwiproc.__salt__ = __salt__\n        return kiwiproc.KiwiExporter(grains=__grains__,\n                                     format=format).load(**description).export('something')", "output": "Export description for Kiwi.\n\n        :param local:\n        :param path:\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(self, slicer):\n        \"\"\"  \"\"\"\n\n        # slice the category\n        # return same dims as we currently have\n\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            if not com.is_null_slice(slicer[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim \"\n                                     \"categorical\")\n            slicer = slicer[1]\n\n        return self.values[slicer]", "output": "return a slice of my values", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export_to_dict(self, recursive=True, include_parent_ref=False,\n                       include_defaults=False):\n        \"\"\"\"\"\"\n        cls = self.__class__\n        parent_excludes = {}\n        if recursive and not include_parent_ref:\n            parent_ref = cls.__mapper__.relationships.get(cls.export_parent)\n            if parent_ref:\n                parent_excludes = {c.name for c in parent_ref.local_columns}\n        dict_rep = {c.name: getattr(self, c.name)\n                    for c in cls.__table__.columns\n                    if (c.name in self.export_fields and\n                        c.name not in parent_excludes and\n                        (include_defaults or (\n                            getattr(self, c.name) is not None and\n                            (not c.default or\n                                getattr(self, c.name) != c.default.arg))))\n                    }\n        if recursive:\n            for c in self.export_children:\n                # sorting to make lists of children stable\n                dict_rep[c] = sorted(\n                    [\n                        child.export_to_dict(\n                            recursive=recursive,\n                            include_parent_ref=include_parent_ref,\n                            include_defaults=include_defaults,\n                        ) for child in getattr(self, c)\n                    ],\n                    key=lambda k: sorted(k.items()))\n\n        return dict_rep", "output": "Export obj to dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\n    \"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag_regex_string = request.args.get('tag')\n    run = request.args.get('run')\n    mime_type = 'application/json'\n\n    try:\n      body = self.scalars_impl(run, tag_regex_string)\n    except ValueError as e:\n      return http_util.Respond(\n          request=request,\n          content=str(e),\n          content_type='text/plain',\n          code=500)\n\n    # Produce the response.\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag regex and single run, return ScalarEvents.\n\n    This route takes 2 GET params:\n    run: A run string to find tags for.\n    tag: A string that is a regex used to find matching tags.\n    The response is a JSON object:\n    {\n      // Whether the regular expression is valid. Also false if empty.\n      regexValid: boolean,\n\n      // An object mapping tag name to a list of ScalarEvents.\n      payload: Object<string, ScalarEvent[]>,\n    }", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _svrg_grads_update_rule(self, g_curr_batch_curr_weight, g_curr_batch_special_weight,\n                                g_special_weight_all_batch):\n        \"\"\"\n        \"\"\"\n        for index, grad in enumerate(g_curr_batch_curr_weight):\n            grad -= g_curr_batch_special_weight[index]\n            grad += g_special_weight_all_batch[index]\n        return g_curr_batch_curr_weight", "output": "Calculates the gradient based on the SVRG update rule.\n        Parameters\n        ----------\n        g_curr_batch_curr_weight : NDArray\n            gradients of current weight of self.mod w.r.t current batch of data\n        g_curr_batch_special_weight: NDArray\n            gradients of the weight of past m epochs of self._mod_special w.r.t current batch of data\n        g_special_weight_all_batch: NDArray\n            average of full gradients over full pass of data\n\n        Returns\n        ----------\n        Gradients calculated using SVRG update rule:\n        grads = g_curr_batch_curr_weight - g_curr_batch_special_weight + g_special_weight_all_batch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_services():\n    '''\n    \n    '''\n    serv = []\n    services = pyconnman.ConnManager().get_services()\n    for path, _ in services:\n        serv.append(six.text_type(path[len(SERVICE_PATH):]))\n    return serv", "output": "Returns a list with all connman services", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, profile=None, **connection_args):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'User \"{0}\" is already absent'.format(name)}\n\n    # Check if user is present\n    user = __salt__['keystone.user_get'](name=name, profile=profile,\n                                         **connection_args)\n    if 'Error' not in user:\n        if __opts__.get('test'):\n            ret['result'] = None\n            ret['comment'] = 'User \"{0}\" will be deleted'.format(name)\n            return ret\n        # Delete that user!\n        __salt__['keystone.user_delete'](name=name, profile=profile,\n                                         **connection_args)\n        ret['comment'] = 'User \"{0}\" has been deleted'.format(name)\n        ret['changes']['User'] = 'Deleted'\n\n    return ret", "output": "Ensure that the keystone user is absent.\n\n    name\n        The name of the user that should not exist", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lmx_relative():\n  \"\"\"\"\"\"\n  hparams = lmx_base()\n  hparams.self_attention_type = \"dot_product_relative_v2\"\n  hparams.activation_dtype = \"float32\"\n  hparams.weight_dtype = \"float32\"\n  return hparams", "output": "Language model using relative attention.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def postprocess_keyevent(self, event):\r\n        \"\"\"\"\"\"\r\n        ShellBaseWidget.postprocess_keyevent(self, event)\r\n        if QToolTip.isVisible():\r\n            _event, _text, key, _ctrl, _shift = restore_keyevent(event)\r\n            self.hide_tooltip_if_necessary(key)", "output": "Process keypress event", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_supervised(problem, model_name, hparams, data_dir, output_dir,\n                     train_steps, eval_steps, local_eval_frequency=None,\n                     schedule=\"continuous_train_and_eval\"):\n  \"\"\"\"\"\"\n  if local_eval_frequency is None:\n    local_eval_frequency = FLAGS.local_eval_frequency\n\n  exp_fn = trainer_lib.create_experiment_fn(\n      model_name, problem, data_dir, train_steps, eval_steps,\n      min_eval_frequency=local_eval_frequency\n  )\n  run_config = trainer_lib.create_run_config(model_name, model_dir=output_dir)\n  exp = exp_fn(run_config, hparams)\n  getattr(exp, schedule)()", "output": "Train supervised.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_directory(self):\r\n        \"\"\"\"\"\"\r\n        self.redirect_stdio.emit(False)\r\n        directory = getexistingdirectory(self.main, _(\"\"),\r\n                                         getcwd_or_home())\r\n        if directory:\r\n            self.chdir(directory)\r\n        self.redirect_stdio.emit(True)", "output": "Select directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def focusInEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        show_status = getattr(self.lineEdit(), 'show_status_icon', None)\r\n        if show_status:\r\n            show_status()\r\n        QComboBox.focusInEvent(self, event)", "output": "Handle focus in event restoring to display the status icon.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authenticate(remote_addr, password, cert, key, verify_cert=True):\n    '''\n    \n\n    '''\n    client = pylxd_client_get(remote_addr, cert, key, verify_cert)\n\n    if client.trusted:\n        return True\n\n    try:\n        client.authenticate(password)\n    except pylxd.exceptions.LXDAPIException as e:\n        # Wrong password\n        raise CommandExecutionError(six.text_type(e))\n\n    return client.trusted", "output": "Authenticate with a remote LXDaemon.\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n\n    password :\n        The password of the remote.\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.authenticate https://srv01:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n\n    See the `requests-docs`_ for the SSL stuff.\n\n    .. _requests-docs: http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def embed_sentences(self,\n                        sentences: Iterable[List[str]],\n                        batch_size: int = DEFAULT_BATCH_SIZE) -> Iterable[numpy.ndarray]:\n        \"\"\"\n        \n        \"\"\"\n        for batch in lazy_groups_of(iter(sentences), batch_size):\n            yield from self.embed_batch(batch)", "output": "Computes the ELMo embeddings for a iterable of sentences.\n\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n\n        Parameters\n        ----------\n        sentences : ``Iterable[List[str]]``, required\n            An iterable of tokenized sentences.\n        batch_size : ``int``, required\n            The number of sentences ELMo should process at once.\n\n        Returns\n        -------\n            A list of tensors, each representing the ELMo vectors for the input sentence at the same index.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_code(self, code):\n        \"\"\"\n        \"\"\"\n        # code= [code] if isinstance(code,str) else\n        return self.new(self.data.loc[(slice(None), code), :])", "output": "getcode \u83b7\u53d6\u67d0\u4e00\u53ea\u80a1\u7968\u7684\u677f\u5757\n\n        Arguments:\n            code {str} -- \u80a1\u7968\u4ee3\u7801\n\n        Returns:\n            DataStruct -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def revoke_auth(preserve_minion_cache=False):\n    '''\n    \n    '''\n    masters = list()\n    ret = True\n    if 'master_uri_list' in __opts__:\n        for master_uri in __opts__['master_uri_list']:\n            masters.append(master_uri)\n    else:\n        masters.append(__opts__['master_uri'])\n\n    for master in masters:\n        channel = salt.transport.client.ReqChannel.factory(__opts__, master_uri=master)\n        tok = channel.auth.gen_token(b'salt')\n        load = {'cmd': 'revoke_auth',\n                'id': __opts__['id'],\n                'tok': tok,\n                'preserve_minion_cache': preserve_minion_cache}\n        try:\n            channel.send(load)\n        except SaltReqTimeoutError:\n            ret = False\n        finally:\n            channel.close()\n    return ret", "output": "The minion sends a request to the master to revoke its own key.\n    Note that the minion session will be revoked and the minion may\n    not be able to return the result of this command back to the master.\n\n    If the 'preserve_minion_cache' flag is set to True, the master\n    cache for this minion will not be removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.revoke_auth", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs,\n                                                       {'axes' : 'axis',\n                                                        'ends' : 'end',\n                                                        'starts' : 'begin'})\n    # onnx slice provides slicing on multiple axis. Adding multiple slice_axis operator\n    # for multiple axes from mxnet\n    begin = new_attrs.get('begin')\n    end = new_attrs.get('end')\n    axes = new_attrs.get('axis', tuple(range(len(begin))))\n    slice_op = symbol.slice_axis(inputs[0], axis=axes[0], begin=begin[0], end=end[0])\n    if len(axes) > 1:\n        for i, axis in enumerate(axes):\n            slice_op = symbol.slice_axis(slice_op, axis=axis, begin=begin[i], end=end[i])\n    return slice_op, new_attrs, inputs", "output": "Returns a slice of the input tensor along multiple axes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_learning_rate_from_args(args: argparse.Namespace) -> None:\n    \"\"\"\n    \n    \"\"\"\n    params = Params.from_file(args.param_path, args.overrides)\n    find_learning_rate_model(params, args.serialization_dir,\n                             start_lr=args.start_lr,\n                             end_lr=args.end_lr,\n                             num_batches=args.num_batches,\n                             linear_steps=args.linear,\n                             stopping_factor=args.stopping_factor,\n                             force=args.force)", "output": "Start learning rate finder for given args", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_subject(self, subject):\n        \"\"\"\n        \n        \"\"\"\n\n        url = '/'.join([self.url, 'subjects', subject])\n\n        result, code = self._send_request(url, method=\"DELETE\")\n        if not (code >= 200 and code <= 299):\n            raise ClientError('Unable to delete subject: {}'.format(result))\n        return result", "output": "DELETE /subjects/(string: subject)\n        Deletes the specified subject and its associated compatibility level if registered.\n        It is recommended to use this API only when a topic needs to be recycled or in development environments.\n        :param subject: subject name\n        :returns: version of the schema deleted under this subject\n        :rtype: (int)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_predictor(self, pred_parameter=None):\n        \"\"\"\"\"\"\n        predictor = _InnerPredictor(booster_handle=self.handle, pred_parameter=pred_parameter)\n        predictor.pandas_categorical = self.pandas_categorical\n        return predictor", "output": "Convert to predictor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_list_cli(self,\n                         mine=False,\n                         page=1,\n                         page_size=20,\n                         search=None,\n                         csv_display=False,\n                         parent=None,\n                         competition=None,\n                         dataset=None,\n                         user=None,\n                         language=None,\n                         kernel_type=None,\n                         output_type=None,\n                         sort_by=None):\n        \"\"\" \n        \"\"\"\n        kernels = self.kernels_list(\n            page=page,\n            page_size=page_size,\n            search=search,\n            mine=mine,\n            dataset=dataset,\n            competition=competition,\n            parent_kernel=parent,\n            user=user,\n            language=language,\n            kernel_type=kernel_type,\n            output_type=output_type,\n            sort_by=sort_by)\n        fields = ['ref', 'title', 'author', 'lastRunTime', 'totalVotes']\n        if kernels:\n            if csv_display:\n                self.print_csv(kernels, fields)\n            else:\n                self.print_table(kernels, fields)\n        else:\n            print('No kernels found')", "output": "client wrapper for kernels_list, see this function for arguments.\n            Additional arguments are provided here.\n             Parameters\n            ==========\n            csv_display: if True, print comma separated values instead of table", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_jids():\n    '''\n    \n    '''\n    serv = _get_serv(ret=None)\n    sql = \"select distinct(jid) from jids group by load\"\n\n    # [{u'points': [[0, jid, load],\n    #               [0, jid, load]],\n    #   u'name': u'jids',\n    #   u'columns': [u'time', u'distinct', u'load']}]\n    data = serv.query(sql)\n    ret = {}\n    if data:\n        for _, jid, load in data[0]['points']:\n            ret[jid] = salt.utils.jid.format_jid_instance(jid, salt.utils.json.loads(load))\n    return ret", "output": "Return a list of all job ids", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespaces(**kwargs):\n    '''\n    \n    '''\n    cfg = _setup_conn(**kwargs)\n    try:\n        api_instance = kubernetes.client.CoreV1Api()\n        api_response = api_instance.list_namespace()\n\n        return [nms['metadata']['name'] for nms in api_response.to_dict().get('items')]\n    except (ApiException, HTTPError) as exc:\n        if isinstance(exc, ApiException) and exc.status == 404:\n            return None\n        else:\n            log.exception('Exception when calling CoreV1Api->list_namespace')\n            raise CommandExecutionError(exc)\n    finally:\n        _cleanup(**cfg)", "output": "Return the names of the available namespaces\n\n    CLI Examples::\n\n        salt '*' kubernetes.namespaces\n        salt '*' kubernetes.namespaces kubeconfig=/etc/salt/k8s/kubeconfig context=minikube", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def removeRef(self, attr):\n        \"\"\" \"\"\"\n        if attr is None: attr__o = None\n        else: attr__o = attr._o\n        ret = libxml2mod.xmlRemoveRef(self._o, attr__o)\n        return ret", "output": "Remove the given attribute from the Ref table maintained\n           internally.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_focus_widget_properties(self):\r\n        \"\"\"\"\"\"\r\n        from spyder.plugins.editor.widgets.editor import TextEditBaseWidget\r\n        from spyder.plugins.ipythonconsole.widgets import ControlWidget\r\n        widget = QApplication.focusWidget()\r\n\r\n        textedit_properties = None\r\n        if isinstance(widget, (TextEditBaseWidget, ControlWidget)):\r\n            console = isinstance(widget, ControlWidget)\r\n            not_readonly = not widget.isReadOnly()\r\n            readwrite_editor = not_readonly and not console\r\n            textedit_properties = (console, not_readonly, readwrite_editor)\r\n        return widget, textedit_properties", "output": "Get properties of focus widget\r\n        Returns tuple (widget, properties) where properties is a tuple of\r\n        booleans: (is_console, not_readonly, readwrite_editor)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_pyproject_toml(self):\n        # type: () -> None\n        \"\"\"\n        \"\"\"\n        pep517_data = load_pyproject_toml(\n            self.use_pep517,\n            self.pyproject_toml,\n            self.setup_py,\n            str(self)\n        )\n\n        if pep517_data is None:\n            self.use_pep517 = False\n        else:\n            self.use_pep517 = True\n            requires, backend, check = pep517_data\n            self.requirements_to_check = check\n            self.pyproject_requires = requires\n            self.pep517_backend = Pep517HookCaller(self.setup_py_dir, backend)\n\n            # Use a custom function to call subprocesses\n            self.spin_message = \"\"\n\n            def runner(cmd, cwd=None, extra_environ=None):\n                with open_spinner(self.spin_message) as spinner:\n                    call_subprocess(\n                        cmd,\n                        cwd=cwd,\n                        extra_environ=extra_environ,\n                        show_stdout=False,\n                        spinner=spinner\n                    )\n                self.spin_message = \"\"\n\n            self.pep517_backend._subprocess_runner = runner", "output": "Load the pyproject.toml file.\n\n        After calling this routine, all of the attributes related to PEP 517\n        processing for this requirement have been set. In particular, the\n        use_pep517 attribute can be used to determine whether we should\n        follow the PEP 517 or legacy (setup.py) code path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def receive_trial_result(self, parameter_id, parameters, value):\n        \"\"\"\n        \"\"\"\n        reward = extract_scalar_reward(value)\n        if self.optimize_mode is OptimizeMode.Maximize:\n            reward = -reward\n\n        if parameter_id not in self.total_data:\n            raise RuntimeError('Received parameter_id not in total_data.')\n        if self.first_one:\n            self.smbo_solver.nni_smac_receive_first_run(self.total_data[parameter_id], reward)\n            self.first_one = False\n        else:\n            self.smbo_solver.nni_smac_receive_runs(self.total_data[parameter_id], reward)", "output": "receive_trial_result\n       \n        Parameters\n        ----------\n        parameter_id: int\n            parameter id\n        parameters:\n            parameters\n        value:\n            value\n        \n        Raises\n        ------\n        RuntimeError\n            Received parameter id not in total_data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def full_data(tgt,\n              fun,\n              arg=None,\n              tgt_type='glob',\n              returner='',\n              timeout=5):\n    '''\n    \n\n    '''\n    return _publish(tgt,\n                    fun,\n                    arg=arg,\n                    tgt_type=tgt_type,\n                    returner=returner,\n                    timeout=timeout,\n                    form='full',\n                    wait=True)", "output": "Return the full data about the publication, this is invoked in the same\n    way as the publish function\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt system.example.com publish.full_data '*' cmd.run 'ls -la /tmp'\n\n    .. admonition:: Attention\n\n        If you need to pass a value to a function argument and that value\n        contains an equal sign, you **must** include the argument name.\n        For example:\n\n        .. code-block:: bash\n\n            salt '*' publish.full_data test.kwarg arg='cheese=spam'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_inference(batch_id, batch_num, metric, step_loss, log_interval):\n    \"\"\"\n    \"\"\"\n    metric_nm, metric_val = metric.get()\n    if not isinstance(metric_nm, list):\n        metric_nm = [metric_nm]\n        metric_val = [metric_val]\n\n    eval_str = '[Batch %d/%d] loss=%.4f, metrics:' + \\\n               ','.join([i + ':%.4f' for i in metric_nm])\n    logging.info(eval_str, batch_id + 1, batch_num, \\\n                 step_loss / log_interval, \\\n                 *metric_val)", "output": "Generate and print out the log message for inference.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _dictionary_to_stringlist(input_dict):\n    '''\n    \n    '''\n    string_value = \"\"\n    for s in input_dict:\n        string_value += \"{0}={1},\".format(s, input_dict[s])\n    string_value = string_value[:-1]\n    return string_value", "output": "Convert a dictionary to a stringlist (comma separated settings)\n\n    The result of the dictionary {'setting1':'value1','setting2':'value2'} will be:\n\n    setting1=value1,setting2=value2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_resources(name, expr, resources):\n    \"\"\"\n    \"\"\"\n    if expr is None:\n        return\n    bound = expr._resources()\n    if not bound and resources is None:\n        raise ValueError('no resources provided to compute %s' % name)\n    if bound and resources:\n        raise ValueError(\n            'explicit and implicit resources provided to compute %s' % name,\n        )", "output": "Validate that the expression and resources passed match up.\n\n    Parameters\n    ----------\n    name : str\n        The name of the argument we are checking.\n    expr : Expr\n        The potentially bound expr.\n    resources\n        The explicitly passed resources to compute expr.\n\n    Raises\n    ------\n    ValueError\n        If the resources do not match for an expression.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ports_open(name, ports, proto='tcp', direction='in'):\n    '''\n    \n    '''\n\n    ports = list(six.moves.map(six.text_type, ports))\n    diff = False\n    ret = {'name': ','.join(ports),\n           'changes': {},\n           'result': True,\n           'comment': 'Ports open.'}\n\n    current_ports = __salt__['csf.get_ports'](proto=proto, direction=direction)\n    direction = direction.upper()\n    directions = __salt__['csf.build_directions'](direction)\n    for direction in directions:\n        log.trace('current_ports[direction]: %s', current_ports[direction])\n        log.trace('ports: %s', ports)\n        if current_ports[direction] != ports:\n            diff = True\n    if diff:\n        result = __salt__['csf.allow_ports'](ports, proto=proto, direction=direction)\n        ret['changes']['Ports'] = 'Changed'\n        ret['comment'] = result\n    return ret", "output": "Ensure ports are open for a protocol, in a direction.\n    e.g. - proto='tcp', direction='in' would set the values\n    for TCP_IN in the csf.conf file.\n\n    ports\n        A list of ports that should be open.\n\n    proto\n        The protocol. May be one of 'tcp', 'udp',\n        'tcp6', or 'udp6'.\n\n    direction\n        Choose 'in', 'out', or both to indicate the port\n        should be opened for inbound traffic, outbound\n        traffic, or both.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def all(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\r\n        \"\"\"\r\n        \"\"\"\r\n        if axis is not None:\r\n            axis = self._get_axis_number(axis)\r\n            if bool_only and axis == 0:\r\n                if hasattr(self, \"dtype\"):\r\n                    raise NotImplementedError(\r\n                        \"{}.{} does not implement numeric_only.\".format(\r\n                            self.__name__, \"all\"\r\n                        )\r\n                    )\r\n                data_for_compute = self[self.columns[self.dtypes == np.bool]]\r\n                return data_for_compute.all(\r\n                    axis=axis, bool_only=False, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n        else:\r\n            if bool_only:\r\n                raise ValueError(\"Axis must be 0 or 1 (got {})\".format(axis))\r\n            # Reduce to a scalar if axis is None.\r\n            result = self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=0, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n            if isinstance(result, BasePandasDataset):\r\n                return result.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return result", "output": "Return whether all elements are True over requested axis\r\n\r\n        Note:\r\n            If axis=None or axis=0, this call applies df.all(axis=1)\r\n                to the transpose of df.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_external_workers(worker):\n    \"\"\"\n    \n    \"\"\"\n    worker_that_blocked_task = collections.defaultdict(set)\n    get_work_response_history = worker._get_work_response_history\n    for get_work_response in get_work_response_history:\n        if get_work_response['task_id'] is None:\n            for running_task in get_work_response['running_tasks']:\n                other_worker_id = running_task['worker']\n                other_task_id = running_task['task_id']\n                other_task = worker._scheduled_tasks.get(other_task_id)\n                if other_worker_id == worker._id or not other_task:\n                    continue\n                worker_that_blocked_task[other_worker_id].add(other_task)\n    return worker_that_blocked_task", "output": "This returns a dict with a set of tasks for all of the other workers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def power_on_vm(name, datacenter=None, service_instance=None):\n    '''\n    \n\n    '''\n    log.trace('Powering on virtual machine %s', name)\n    vm_properties = [\n        'name',\n        'summary.runtime.powerState'\n    ]\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties)\n    if virtual_machine['summary.runtime.powerState'] == 'poweredOn':\n        result = {'comment': 'Virtual machine is already powered on',\n                  'changes': {'power_on': True}}\n        return result\n    salt.utils.vmware.power_cycle_vm(virtual_machine['object'], action='on')\n    result = {'comment': 'Virtual machine power on action succeeded',\n              'changes': {'power_on': True}}\n    return result", "output": "Powers on a virtual machine specified by it's name.\n\n    name\n        Name of the virtual machine\n\n    datacenter\n        Datacenter of the virtual machine\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.power_on_vm name=my_vm", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reboot_node(node_id, profile, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    node = _get_by_id(conn.list_nodes(**libcloud_kwargs), node_id)\n    return conn.reboot_node(node, **libcloud_kwargs)", "output": "Reboot a node in the cloud\n\n    :param node_id: Unique ID of the node to reboot\n    :type  node_id: ``str``\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's reboot_node method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_compute.reboot_node as-2346 profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean_whitespace(statement):\n    \"\"\"\n    \n    \"\"\"\n    import re\n\n    # Replace linebreaks and tabs with spaces\n    statement.text = statement.text.replace('\\n', ' ').replace('\\r', ' ').replace('\\t', ' ')\n\n    # Remove any leeding or trailing whitespace\n    statement.text = statement.text.strip()\n\n    # Remove consecutive spaces\n    statement.text = re.sub(' +', ' ', statement.text)\n\n    return statement", "output": "Remove any consecutive whitespace characters from the statement text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_one_generator (project, name, generator, target_type, properties, sources):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .targets import ProjectTarget\n        assert isinstance(project, ProjectTarget)\n        assert isinstance(name, basestring) or name is None\n        assert isinstance(generator, Generator)\n        assert isinstance(target_type, basestring)\n        assert isinstance(properties, property_set.PropertySet)\n        assert is_iterable_typed(sources, virtual_target.VirtualTarget)\n    source_types = []\n\n    for s in sources:\n        source_types.append (s.type ())\n\n    viable_source_types = viable_source_types_for_generator (generator)\n\n    if source_types and viable_source_types != ['*'] and\\\n           not set_.intersection (source_types, viable_source_types):\n        if project.manager ().logger ().on ():\n            id = generator.id ()\n            project.manager ().logger ().log (__name__, \"generator '%s' pruned\" % id)\n            project.manager ().logger ().log (__name__, \"source_types\" '%s' % source_types)\n            project.manager ().logger ().log (__name__, \"viable_source_types '%s'\" % viable_source_types)\n\n        return []\n\n    else:\n        return try_one_generator_really (project, name, generator, target_type, properties, sources)", "output": "Checks if generator invocation can be pruned, because it's guaranteed\n        to fail. If so, quickly returns empty list. Otherwise, calls\n        try_one_generator_really.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_external_data_for_tensor(tensor, base_dir):  # type: (TensorProto, Text) -> None\n    \"\"\"\n    \n    \"\"\"\n    if tensor.HasField(\"raw_data\"):  # already loaded\n        return\n    info = ExternalDataInfo(tensor)\n    file_location = _sanitize_path(info.location)\n    external_data_file_path = os.path.join(base_dir, file_location)\n\n    with open(external_data_file_path, 'rb') as data_file:\n\n        if info.offset:\n            data_file.seek(info.offset)\n\n        if info.length:\n            tensor.raw_data = data_file.read(info.length)\n        else:\n            tensor.raw_data = data_file.read()", "output": "Load data from an external file for tensor.\n\n    @params\n    tensor: a TensorProto object.\n    base_dir: directory that contains the external data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_new_line(self):\r\n        \"\"\"\"\"\"\r\n        self.set_cursor_position('eof')\r\n        self.current_prompt_pos = self.get_position('cursor')\r\n        self.new_input_line = False", "output": "On new input line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __dict_to_pod_spec(spec):\n    '''\n    \n    '''\n    spec_obj = kubernetes.client.V1PodSpec()\n    for key, value in iteritems(spec):\n        if hasattr(spec_obj, key):\n            setattr(spec_obj, key, value)\n\n    return spec_obj", "output": "Converts a dictionary into kubernetes V1PodSpec instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _affine_inv_mult(c, m):\n    \"\"\n    size = c.flow.size()\n    h,w = c.size\n    m[0,1] *= h/w\n    m[1,0] *= w/h\n    c.flow = c.flow.view(-1,2)\n    a = torch.inverse(m[:2,:2].t())\n    c.flow = torch.mm(c.flow - m[:2,2], a).view(size)\n    return c", "output": "Applies the inverse affine transform described in `m` to `c`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_vm(name, datacenter=None, vm_properties=None, traversal_spec=None,\n           parent_ref=None, service_instance=None):\n    '''\n    \n    '''\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties,\n        traversal_spec=traversal_spec,\n        parent_ref=parent_ref)\n    return virtual_machine", "output": "Returns vm object properties.\n\n    name\n        Name of the virtual machine.\n\n    datacenter\n        Datacenter name\n\n    vm_properties\n        List of vm properties.\n\n    traversal_spec\n        Traversal Spec object(s) for searching.\n\n    parent_ref\n        Container Reference object for searching under a given object.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unregister(name, delete=False):\n    '''\n    \n    '''\n    nodes = list_nodes_min()\n    if name not in nodes:\n        raise CommandExecutionError(\n            'The specified VM ({0}) is not registered.'.format(name)\n        )\n\n    cmd = '{0} unregistervm {1}'.format(vboxcmd(), name)\n    if delete is True:\n        cmd += ' --delete'\n    ret = salt.modules.cmdmod.run_all(cmd)\n    if ret['retcode'] == 0:\n        return True\n    return ret['stderr']", "output": "Unregister a VM\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vboxmanage.unregister my_vm_filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_docstring_at_first_line_of_function(self):\r\n        \"\"\"\"\"\"\r\n        result = self.get_function_definition_from_first_line()\r\n        editor = self.code_editor\r\n        if result:\r\n            func_text, number_of_line_func = result\r\n            line_number_function = (self.line_number_cursor +\r\n                                    number_of_line_func - 1)\r\n\r\n            cursor = editor.textCursor()\r\n            line_number_cursor = cursor.blockNumber() + 1\r\n            offset = line_number_function - line_number_cursor\r\n            if offset > 0:\r\n                for __ in range(offset):\r\n                    cursor.movePosition(QTextCursor.NextBlock)\r\n            else:\r\n                for __ in range(abs(offset)):\r\n                    cursor.movePosition(QTextCursor.PreviousBlock)\r\n            cursor.movePosition(QTextCursor.EndOfLine, QTextCursor.MoveAnchor)\r\n            editor.setTextCursor(cursor)\r\n\r\n            indent = get_indent(func_text)\r\n            editor.insert_text('\\n{}{}\"\"\"'.format(indent, editor.indent_chars))\r\n            self.write_docstring()", "output": "Write docstring to editor at mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_config(**api_opts):\n    '''\n    \n    '''\n    config = {\n        'api_sslverify': True,\n        'api_url': 'https://INFOBLOX/wapi/v1.2.1',\n        'api_user': '',\n        'api_key': '',\n    }\n    if '__salt__' in globals():\n        config_key = '{0}.config'.format(__virtualname__)\n        config.update(__salt__['config.get'](config_key, {}))\n    # pylint: disable=C0201\n    for k in set(config.keys()) & set(api_opts.keys()):\n        config[k] = api_opts[k]\n    return config", "output": "Return configuration\n    user passed api_opts override salt config.get vars", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_connection_close(self) -> None:\n        \"\"\"\n        \"\"\"\n        if _has_stream_request_body(self.__class__):\n            if not self.request._body_future.done():\n                self.request._body_future.set_exception(iostream.StreamClosedError())\n                self.request._body_future.exception()", "output": "Called in async handlers if the client closed the connection.\n\n        Override this to clean up resources associated with\n        long-lived connections.  Note that this method is called only if\n        the connection was closed during asynchronous processing; if you\n        need to do cleanup after every request override `on_finish`\n        instead.\n\n        Proxies may keep a connection open for a time (perhaps\n        indefinitely) after the client has gone away, so this method\n        may not be called promptly after the end user closes their\n        connection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_post(self, path: str, handler: _WebHandler,\n                 **kwargs: Any) -> AbstractRoute:\n        \"\"\"\n        \n        \"\"\"\n        return self.add_route(hdrs.METH_POST, path, handler, **kwargs)", "output": "Shortcut for add_route with method POST", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _copy_default(cls, default):\n        ''' \n\n        '''\n        if not isinstance(default, types.FunctionType):\n            return copy(default)\n        else:\n            return default()", "output": "Return a copy of the default, or a new value if the default\n        is specified by a function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dtype_kinds(l):\n    \"\"\"\n    \n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = 'category'\n        elif is_sparse(arr):\n            typ = 'sparse'\n        elif isinstance(arr, ABCRangeIndex):\n            typ = 'range'\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = 'datetime'\n        elif is_timedelta64_dtype(dtype):\n            typ = 'timedelta'\n        elif is_object_dtype(dtype):\n            typ = 'object'\n        elif is_bool_dtype(dtype):\n            typ = 'bool'\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs", "output": "Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cut(self):\n        \"\"\"\"\"\"\n        self.truncate_selection(self.header_end_pos)\n        if self.has_selected_text():\n            CodeEditor.cut(self)", "output": "Cut text", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self):\n        \"\"\"\n        \n        \"\"\"\n        cursor = self.get_collection().find(\n            {\n                '_id': {'$in': self._document_ids},\n                self._field: {'$exists': True}\n            },\n            {self._field: True}\n        )\n\n        return {doc['_id']: doc[self._field] for doc in cursor}", "output": "Read the targets value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def patch_traces(self, traces, project_id=None):\n        \"\"\"\n        \"\"\"\n        if project_id is None:\n            project_id = self.project\n\n        self.trace_api.patch_traces(project_id=project_id, traces=traces)", "output": "Sends new traces to Stackdriver Trace or updates existing traces.\n\n        Args:\n            traces (dict): Required. The traces to be patched in the API call.\n\n            project_id (Optional[str]): ID of the Cloud project where the trace\n                data is stored.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(key, profile=None):\n    '''\n    \n    '''\n    conn = salt.utils.memcached.get_conn(profile)\n    return salt.utils.memcached.get(conn, key)", "output": "Get a value from memcached", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_base_vq1_16_nb1_packed_dan_b01_scales():\n  \"\"\"\"\"\"\n  hparams = transformer_base_vq_ada_32ex_packed()\n  hparams.use_scales = int(True)\n  hparams.moe_num_experts = 16\n  hparams.moe_k = 1\n  hparams.beta = 0.1\n  hparams.ema = False\n  return hparams", "output": "Set of hyperparameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_worker_processes(apppool):\n    '''\n    \n    '''\n    ps_cmd = ['Get-ChildItem',\n              r\"'IIS:\\AppPools\\{0}\\WorkerProcesses'\".format(apppool)]\n\n    cmd_ret = _srvmgr(cmd=ps_cmd, return_json=True)\n\n    try:\n        items = salt.utils.json.loads(cmd_ret['stdout'], strict=False)\n    except ValueError:\n        raise CommandExecutionError('Unable to parse return data as Json.')\n\n    ret = dict()\n    for item in items:\n        ret[item['processId']] = item['appPoolName']\n\n    if not ret:\n        log.warning('No backups found in output: %s', cmd_ret)\n\n    return ret", "output": "Returns a list of worker processes that correspond to the passed\n    application pool.\n\n    .. versionadded:: 2017.7.0\n\n    Args:\n        apppool (str): The application pool to query\n\n    Returns:\n        dict: A dictionary of worker processes with their process IDs\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_iis.list_worker_processes 'My App Pool'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _handle_sub_action(self, input_dict, handler):\n        \"\"\"\n        \n        \"\"\"\n        if not self.can_handle(input_dict):\n            return input_dict\n\n        key = self.intrinsic_name\n        sub_value = input_dict[key]\n\n        input_dict[key] = self._handle_sub_value(sub_value, handler)\n\n        return input_dict", "output": "Handles resolving replacements in the Sub action based on the handler that is passed as an input.\n\n        :param input_dict: Dictionary to be resolved\n        :param supported_values: One of several different objects that contain the supported values that\n            need to be changed. See each method above for specifics on these objects.\n        :param handler: handler that is specific to each implementation.\n        :return: Resolved value of the Sub dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def split_by_fname_file(self, fname:PathOrStr, path:PathOrStr=None)->'ItemLists':\n        \"\"\n        path = Path(ifnone(path, self.path))\n        valid_names = loadtxt_str(path/fname)\n        return self.split_by_files(valid_names)", "output": "Split the data by using the names in `fname` for the validation set. `path` will override `self.path`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _tmp_access_rule(method,\n                    ip=None,\n                    ttl=None,\n                    port=None,\n                    direction='in',\n                    port_origin='d',\n                    ip_origin='d',\n                    comment=''):\n    '''\n    \n    '''\n    if _status_csf():\n        if ip is None:\n            return {'error': 'You must supply an ip address or CIDR.'}\n        if ttl is None:\n            return {'error': 'You must supply a ttl.'}\n        args = _build_tmp_access_args(method, ip, ttl, port, direction, comment)\n        return __csf_cmd(args)", "output": "Handles the cmd execution for tempdeny and tempallow commands.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def release(self, xcoord, ycoord):\n        \"\"\"\n        \n        \"\"\"\n        self._actions.append(lambda: self._driver.execute(\n            Command.TOUCH_UP, {\n                'x': int(xcoord),\n                'y': int(ycoord)}))\n        return self", "output": "Release previously issued tap 'and hold' command at specified location.\n\n        :Args:\n         - xcoord: X Coordinate to release.\n         - ycoord: Y Coordinate to release.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def skip_connection_distance(a, b):\n    \"\"\"\"\"\"\n    if a[2] != b[2]:\n        return 1.0\n    len_a = abs(a[1] - a[0])\n    len_b = abs(b[1] - b[0])\n    return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))", "output": "The distance between two skip-connections.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def key_type(key, host=None, port=None, db=None, password=None):\n    '''\n    \n    '''\n    server = _connect(host, port, db, password)\n    return server.type(key)", "output": "Get redis key type\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' redis.type foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_schema_resource(info):\n    \"\"\"\n    \"\"\"\n    if \"fields\" not in info:\n        return ()\n\n    schema = []\n    for r_field in info[\"fields\"]:\n        name = r_field[\"name\"]\n        field_type = r_field[\"type\"]\n        mode = r_field.get(\"mode\", \"NULLABLE\")\n        description = r_field.get(\"description\")\n        sub_fields = _parse_schema_resource(r_field)\n        schema.append(SchemaField(name, field_type, mode, description, sub_fields))\n    return schema", "output": "Parse a resource fragment into a schema field.\n\n    Args:\n        info: (Mapping[str->dict]): should contain a \"fields\" key to be parsed\n\n    Returns:\n        (Union[Sequence[:class:`google.cloud.bigquery.schema.SchemaField`],None])\n            a list of parsed fields, or ``None`` if no \"fields\" key found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        if self.name is None:\r\n            self.name = osp.basename(root_path)\r\n        self.root_path = to_text_string(root_path)\r\n        config_path = self.__get_project_config_path()\r\n        if osp.exists(config_path):\r\n            self.load()\r\n        else:\r\n            if not osp.isdir(self.root_path):\r\n                os.mkdir(self.root_path)\r\n            self.save()", "output": "Set project root path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,\n                            delete_project_on_failure):\n    \"\"\"\n    \"\"\"\n    with work_in(repo_dir):\n        try:\n            run_hook(hook_name, project_dir, context)\n        except FailedHookException:\n            if delete_project_on_failure:\n                rmtree(project_dir)\n            logger.error(\n                \"Stopping generation because {} hook \"\n                \"script didn't exit successfully\".format(hook_name)\n            )\n            raise", "output": "Run hook from repo directory, clean project directory if hook fails.\n\n    :param repo_dir: Project template input directory.\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    :param delete_project_on_failure: Delete the project directory on hook\n        failure?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nanmedian(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    \n    \"\"\"\n    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])\n\n    values, mask, dtype, dtype_max, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values):\n        values = values.astype('f8')\n        values[mask] = np.nan\n\n    if axis is None:\n        values = values.ravel()\n\n    notempty = values.size\n\n    # an array from a frame\n    if values.ndim > 1:\n\n        # there's a non-empty array to apply over otherwise numpy raises\n        if notempty:\n            if not skipna:\n                return _wrap_results(\n                    np.apply_along_axis(get_median, axis, values), dtype)\n\n            # fastpath for the skipna case\n            return _wrap_results(np.nanmedian(values, axis), dtype)\n\n        # must return the correct shape, but median is not defined for the\n        # empty set so return nans of shape \"everything but the passed axis\"\n        # since \"axis\" is where the reduction would occur if we had a nonempty\n        # array\n        shp = np.array(values.shape)\n        dims = np.arange(values.ndim)\n        ret = np.empty(shp[dims != axis])\n        ret.fill(np.nan)\n        return _wrap_results(ret, dtype)\n\n    # otherwise return a scalar value\n    return _wrap_results(get_median(values) if notempty else np.nan, dtype)", "output": "Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 2])\n    >>> nanops.nanmedian(s)\n    2.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def autologin(self, limit=10):\n        \"\"\"\n        \"\"\"\n        for _ in range(limit):\n            if self.login():\n                break\n        else:\n            raise exceptions.NotLoginError(\n                \"\u767b\u5f55\u5931\u8d25\u6b21\u6570\u8fc7\u591a, \u8bf7\u68c0\u67e5\u5bc6\u7801\u662f\u5426\u6b63\u786e / \u5238\u5546\u670d\u52a1\u5668\u662f\u5426\u5904\u4e8e\u7ef4\u62a4\u4e2d / \u7f51\u7edc\u8fde\u63a5\u662f\u5426\u6b63\u5e38\"\n            )\n        self.keepalive()", "output": "\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\n        :param limit: \u767b\u5f55\u6b21\u6570\u9650\u5236", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_user(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'delete_user', name],\n        reset_system_locale=False,\n        python_shell=False,\n        runas=runas)\n    msg = 'Deleted'\n\n    return _format_response(res, msg)", "output": "Deletes a user via rabbitmqctl delete_user.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.delete_user rabbit_user", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def timed_operation(msg, log_start=False):\n    \"\"\"\n    \n    \"\"\"\n    assert len(msg)\n    if log_start:\n        logger.info('Start {} ...'.format(msg))\n    start = timer()\n    yield\n    msg = msg[0].upper() + msg[1:]\n    logger.info('{} finished, time:{:.4f} sec.'.format(\n        msg, timer() - start))", "output": "Surround a context with a timer.\n\n    Args:\n        msg(str): the log to print.\n        log_start(bool): whether to print also at the beginning.\n\n    Example:\n        .. code-block:: python\n\n            with timed_operation('Good Stuff'):\n                time.sleep(1)\n\n        Will print:\n\n        .. code-block:: python\n\n            Good stuff finished, time:1sec.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_python_interpreter_valid_name(filename):\r\n    \"\"\"\"\"\"\r\n    pattern = r'.*python(\\d\\.?\\d*)?(w)?(.exe)?$'\r\n    if re.match(pattern, filename, flags=re.I) is None:\r\n        return False\r\n    else:\r\n        return True", "output": "Check that the python interpreter file has a valid name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup():\n    \"\"\"\n    \n    \"\"\"\n    # create an index template\n    index_template = BlogPost._index.as_template(ALIAS, PATTERN)\n    # upload the template into elasticsearch\n    # potentially overriding the one already there\n    index_template.save()\n\n    # create the first index if it doesn't exist\n    if not BlogPost._index.exists():\n        migrate(move_data=False)", "output": "Create the index template in elasticsearch specifying the mappings and any\n    settings to be used. This can be run at any time, ideally at every new code\n    deploy.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _filter_nodes(superclass, all_nodes=_all_nodes):\n    \"\"\"\"\"\"\n    node_names = (node.__name__ for node in all_nodes\n                  if issubclass(node, superclass))\n    return frozenset(node_names)", "output": "Filter out AST nodes that are subclasses of ``superclass``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_firewall_rule(self, firewall_rule, protocol=None, action=None,\n                             name=None, description=None, ip_version=None,\n                             source_ip_address=None, destination_ip_address=None, source_port=None,\n                             destination_port=None, shared=None, enabled=None):\n        '''\n        \n        '''\n        body = {}\n        if protocol:\n            body['protocol'] = protocol\n        if action:\n            body['action'] = action\n        if name:\n            body['name'] = name\n        if description:\n            body['description'] = description\n        if ip_version:\n            body['ip_version'] = ip_version\n        if source_ip_address:\n            body['source_ip_address'] = source_ip_address\n        if destination_ip_address:\n            body['destination_ip_address'] = destination_ip_address\n        if source_port:\n            body['source_port'] = source_port\n        if destination_port:\n            body['destination_port'] = destination_port\n        if shared:\n            body['shared'] = shared\n        if enabled:\n            body['enabled'] = enabled\n        return self.network_conn.update_firewall_rule(firewall_rule, body={'firewall_rule': body})", "output": "Update a firewall rule", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def offset(self, num_to_skip):\n        \"\"\"\n        \"\"\"\n        return self.__class__(\n            self._parent,\n            projection=self._projection,\n            field_filters=self._field_filters,\n            orders=self._orders,\n            limit=self._limit,\n            offset=num_to_skip,\n            start_at=self._start_at,\n            end_at=self._end_at,\n        )", "output": "Skip to an offset in a query.\n\n        If the current query already has specified an offset, this will\n        overwrite it.\n\n        Args:\n            num_to_skip (int): The number of results to skip at the beginning\n                of query results. (Must be non-negative.)\n\n        Returns:\n            ~.firestore_v1beta1.query.Query: An offset query. Acts as a\n            copy of the current query, modified with the newly added\n            \"offset\" field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_role(username, role, **kwargs):\n    '''\n    \n    '''\n    role_line = 'username {0} role {1}'.format(username, role)\n    return config(role_line, **kwargs)", "output": "Assign role to username.\n\n    username\n        Username for role configuration\n\n    role\n        Configure role for username\n\n    no_save_config\n        If True, don't save configuration commands to startup configuration.\n        If False, save configuration to startup configuration.\n        Default: False\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd set_role username=daniel role=vdc-admin.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    \n    \"\"\"\n    from .multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)", "output": "Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex(levels=[['a'], ['a', 'b']],\n               codes=[[0, 0], [0, 1]],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def insert_option_group(self, idx, *args, **kwargs):\n        \"\"\"\"\"\"\n        group = self.add_option_group(*args, **kwargs)\n\n        self.option_groups.pop()\n        self.option_groups.insert(idx, group)\n\n        return group", "output": "Insert an OptionGroup at a given position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def click_and_hold(self, on_element=None):\n        \"\"\"\n        \n        \"\"\"\n        if on_element:\n            self.move_to_element(on_element)\n        if self._driver.w3c:\n            self.w3c_actions.pointer_action.click_and_hold()\n            self.w3c_actions.key_action.pause()\n        else:\n            self._actions.append(lambda: self._driver.execute(\n                                 Command.MOUSE_DOWN, {}))\n        return self", "output": "Holds down the left mouse button on an element.\n\n        :Args:\n         - on_element: The element to mouse down.\n           If None, clicks on current mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop_volume(name, force=False):\n    '''\n    \n    '''\n    volinfo = info()\n    if name not in volinfo:\n        log.error('Cannot stop non-existing volume %s', name)\n        return False\n    if int(volinfo[name]['status']) != 1:\n        log.warning('Attempt to stop already stopped volume %s', name)\n        return True\n\n    cmd = 'volume stop {0}'.format(name)\n    if force:\n        cmd += ' force'\n\n    return _gluster(cmd)", "output": "Stop a gluster volume\n\n    name\n        Volume name\n\n    force\n        Force stop the volume\n\n        .. versionadded:: 2015.8.4\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glusterfs.stop_volume mycluster", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_visible_toolbars(self):\r\n        \"\"\"\"\"\"\r\n        toolbars = []\r\n        for toolbar in self.toolbarslist:\r\n            if toolbar.toggleViewAction().isChecked():\r\n                toolbars.append(toolbar)\r\n        self.visible_toolbars = toolbars", "output": "Collects the visible toolbars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _extract_apis_from_events(function_logical_id, serverless_function_events, collector):\n        \"\"\"\n        \n        \"\"\"\n        count = 0\n        for _, event in serverless_function_events.items():\n\n            if SamApiProvider._FUNCTION_EVENT_TYPE_API == event.get(SamApiProvider._TYPE):\n                api_resource_id, api = SamApiProvider._convert_event_api(function_logical_id, event.get(\"Properties\"))\n                collector.add_apis(api_resource_id, [api])\n                count += 1\n\n        LOG.debug(\"Found '%d' API Events in Serverless function with name '%s'\", count, function_logical_id)", "output": "Given an AWS::Serverless::Function Event Dictionary, extract out all 'Api' events and store  within the\n        collector\n\n        Parameters\n        ----------\n        function_logical_id : str\n            LogicalId of the AWS::Serverless::Function\n\n        serverless_function_events : dict\n            Event Dictionary of a AWS::Serverless::Function\n\n        collector : ApiCollector\n            Instance of the API collector that where we will save the API information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_training(train_mode): #pylint: disable=redefined-outer-name\n    \"\"\"\n    \"\"\"\n    prev = ctypes.c_int()\n    check_call(_LIB.MXAutogradSetIsTraining(\n        ctypes.c_int(train_mode), ctypes.byref(prev)))\n    return bool(prev.value)", "output": "Set status to training/predicting. This affects ctx.is_train in operator\n    running context. For example, Dropout will drop inputs randomly when\n    train_mode=True while simply passing through if train_mode=False.\n\n    Parameters\n    ----------\n    train_mode: bool\n\n    Returns\n    -------\n    previous state before this set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def config(name,\n           config,\n           write=True):\n    '''\n    \n\n    '''\n\n    _build_config_tree(name, config)\n    configs = _render_configuration()\n\n    if __opts__.get('test', False):\n        comment = 'State syslog_ng will write \\'{0}\\' into {1}'.format(\n            configs,\n            __SYSLOG_NG_CONFIG_FILE\n        )\n        return _format_state_result(name, result=None, comment=comment)\n\n    succ = write\n    if write:\n        succ = _write_config(config=configs)\n\n    return _format_state_result(name, result=succ,\n                                changes={'new': configs, 'old': ''})", "output": "Builds syslog-ng configuration. This function is intended to be used from\n    the state module, users should not use it directly!\n\n    name : the id of the Salt document or it is the format of <statement name>.id\n    config : the parsed YAML code\n    write : if True, it writes  the config into the configuration file,\n    otherwise just returns it\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' syslog_ng.config name='s_local' config=\"[{'tcp':[{'ip':'127.0.0.1'},{'port':1233}]}]\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mouseMoveEvent(self, event):\n        \"\"\"\n        \"\"\"\n        self.line_number_hint = self.editor.get_linenumber_from_mouse_event(\n            event)\n        self.update()", "output": "Override Qt method.\n\n        Draw semitransparent breakpoint hint.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def plot(self, key, funcname):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        import spyder.pyplot as plt\r\n        plt.figure()\r\n        getattr(plt, funcname)(data[key])\r\n        plt.show()", "output": "Plot item", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_element(driver, by):\n    \"\"\"\"\"\"\n    try:\n        return driver.find_element(*by)\n    except NoSuchElementException as e:\n        raise e\n    except WebDriverException as e:\n        raise e", "output": "Looks up an element. Logs and re-raises ``WebDriverException``\n    if thrown.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        self.root_path = root_path\r\n        self.install_model()\r\n        index = self.fsmodel.setRootPath(root_path)\r\n        self.proxymodel.setup_filter(self.root_path, [])\r\n        self.setRootIndex(self.proxymodel.mapFromSource(index))", "output": "Set root path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_current_text(self):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        text = self.currentText()\r\n        if osp.isdir(text) and text:\r\n            if text[-1] == os.sep:\r\n                text = text[:-1]\r\n        self.add_text(text)", "output": "Add current text to combo box history (convenient method).\r\n        If path ends in os separator (\"\\\" windows, \"/\" unix) remove it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enter_maintenance_mode(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The enter_maintenance_mode function must be called with '\n            '-f or --function.'\n        )\n\n    host_name = kwargs.get('host') if kwargs and 'host' in kwargs else None\n\n    host_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.HostSystem, host_name)\n\n    if not host_name or not host_ref:\n        raise SaltCloudSystemExit(\n            'You must specify a valid name of the host system.'\n        )\n\n    if host_ref.runtime.inMaintenanceMode:\n        return {host_name: 'already in maintenance mode'}\n\n    try:\n        task = host_ref.EnterMaintenanceMode(timeout=0, evacuatePoweredOffVms=True)\n        salt.utils.vmware.wait_for_task(task, host_name, 'enter maintenance mode')\n    except Exception as exc:\n        log.error(\n            'Error while moving host system %s in maintenance mode: %s',\n            host_name, exc,\n            # Show the traceback if the debug logging level is enabled\n            exc_info_on_loglevel=logging.DEBUG\n        )\n        return {host_name: 'failed to enter maintenance mode'}\n\n    return {host_name: 'entered maintenance mode'}", "output": "To put the specified host system in maintenance mode in this VMware environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f enter_maintenance_mode my-vmware-config host=\"myHostSystemName\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put(self, entity):\n        \"\"\"\n        \"\"\"\n        if self._status != self._IN_PROGRESS:\n            raise ValueError(\"Batch must be in progress to put()\")\n\n        if entity.key is None:\n            raise ValueError(\"Entity must have a key\")\n\n        if self.project != entity.key.project:\n            raise ValueError(\"Key must be from same project as batch\")\n\n        if entity.key.is_partial:\n            entity_pb = self._add_partial_key_entity_pb()\n            self._partial_key_entities.append(entity)\n        else:\n            entity_pb = self._add_complete_key_entity_pb()\n\n        _assign_entity_to_pb(entity_pb, entity)", "output": "Remember an entity's state to be saved during :meth:`commit`.\n\n        .. note::\n           Any existing properties for the entity will be replaced by those\n           currently set on this instance.  Already-stored properties which do\n           not correspond to keys set on this instance will be removed from\n           the datastore.\n\n        .. note::\n           Property values which are \"text\" ('unicode' in Python2, 'str' in\n           Python3) map to 'string_value' in the datastore;  values which are\n           \"bytes\" ('str' in Python2, 'bytes' in Python3) map to 'blob_value'.\n\n        When an entity has a partial key, calling :meth:`commit` sends it as\n        an ``insert`` mutation and the key is completed. On return,\n        the key for the ``entity`` passed in is updated to match the key ID\n        assigned by the server.\n\n        :type entity: :class:`google.cloud.datastore.entity.Entity`\n        :param entity: the entity to be saved.\n\n        :raises: :class:`~exceptions.ValueError` if the batch is not in\n                 progress, if entity has no key assigned, or if the key's\n                 ``project`` does not match ours.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def np_to_list(elem):\n  \"\"\"\"\"\"\n  if isinstance(elem, list):\n    return elem\n  elif isinstance(elem, tuple):\n    return list(elem)\n  elif isinstance(elem, np.ndarray):\n    return list(elem)\n  else:\n    raise ValueError(\n        'Input elements of a sequence should be either a numpy array, a '\n        'python list or tuple. Got {}'.format(type(elem)))", "output": "Returns list from list, tuple or ndarray.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_permission(FunctionName, StatementId, Qualifier=None,\n                      region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        kwargs = {}\n        if Qualifier is not None:\n            kwargs['Qualifier'] = Qualifier\n        conn.remove_permission(FunctionName=FunctionName, StatementId=StatementId,\n                               **kwargs)\n        return {'updated': True}\n    except ClientError as e:\n        return {'updated': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove a permission from a lambda function.\n\n    Returns {removed: true} if the permission was removed and returns\n    {removed: False} if the permission was not removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_lamba.remove_permission my_function my_id", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, fn:PathOrStr):\n        \"\"\n        x = image2np(self.data*255).astype(np.uint8)\n        PIL.Image.fromarray(x).save(fn)", "output": "Save the image to `fn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dir_list(self, tgt_env):\n        '''\n        \n        '''\n        def _traverse(tree, blobs, prefix):\n            '''\n            Traverse through a pygit2 Tree object recursively, accumulating all\n            the empty directories within it in the \"blobs\" list\n            '''\n            for entry in iter(tree):\n                if entry.oid not in self.repo:\n                    # Entry is a submodule, skip it\n                    continue\n                blob = self.repo[entry.oid]\n                if not isinstance(blob, pygit2.Tree):\n                    continue\n                blobs.append(\n                    salt.utils.path.join(prefix, entry.name, use_posixpath=True)\n                )\n                if blob:\n                    _traverse(\n                        blob, blobs, salt.utils.path.join(\n                            prefix, entry.name, use_posixpath=True)\n                    )\n\n        ret = set()\n        tree = self.get_tree(tgt_env)\n        if not tree:\n            return ret\n        if self.root(tgt_env):\n            try:\n                oid = tree[self.root(tgt_env)].oid\n                tree = self.repo[oid]\n            except KeyError:\n                return ret\n            if not isinstance(tree, pygit2.Tree):\n                return ret\n            relpath = lambda path: os.path.relpath(path, self.root(tgt_env))\n        else:\n            relpath = lambda path: path\n        blobs = []\n        if tree:\n            _traverse(tree, blobs, self.root(tgt_env))\n        add_mountpoint = lambda path: salt.utils.path.join(\n            self.mountpoint(tgt_env), path, use_posixpath=True)\n        for blob in blobs:\n            ret.add(add_mountpoint(relpath(blob)))\n        if self.mountpoint(tgt_env):\n            ret.add(self.mountpoint(tgt_env))\n        return ret", "output": "Get a list of directories for the target environment using pygit2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install_translator(qapp):\r\n    \"\"\"\"\"\"\r\n    global QT_TRANSLATOR\r\n    if QT_TRANSLATOR is None:\r\n        qt_translator = QTranslator()\r\n        if qt_translator.load(\"qt_\"+QLocale.system().name(),\r\n                      QLibraryInfo.location(QLibraryInfo.TranslationsPath)):\r\n            QT_TRANSLATOR = qt_translator # Keep reference alive\r\n    if QT_TRANSLATOR is not None:\r\n        qapp.installTranslator(QT_TRANSLATOR)", "output": "Install Qt translator to the QApplication instance", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_resource_config(cls, resource):\n        \"\"\"\n        \"\"\"\n        if \"jobReference\" not in resource or \"jobId\" not in resource[\"jobReference\"]:\n            raise KeyError(\n                \"Resource lacks required identity information: \"\n                '[\"jobReference\"][\"jobId\"]'\n            )\n        job_id = resource[\"jobReference\"][\"jobId\"]\n        if (\n            \"configuration\" not in resource\n            or cls._JOB_TYPE not in resource[\"configuration\"]\n        ):\n            raise KeyError(\n                \"Resource lacks required configuration: \"\n                '[\"configuration\"][\"%s\"]' % cls._JOB_TYPE\n            )\n        return job_id, resource[\"configuration\"]", "output": "Helper for :meth:`from_api_repr`\n\n        :type resource: dict\n        :param resource: resource for the job\n\n        :rtype: dict\n        :returns: tuple (string, dict), where the first element is the\n                  job ID and the second contains job-specific configuration.\n        :raises: :class:`KeyError` if the resource has no identifier, or\n                 is missing the appropriate configuration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def options(self, **options):\n        \"\"\"\n        \"\"\"\n        for k in options:\n            self._jreader = self._jreader.option(k, to_str(options[k]))\n        return self", "output": "Adds input options for the underlying data source.\n\n        You can set the following option(s) for reading files:\n            * ``timeZone``: sets the string that indicates a timezone to be used to parse timestamps\n                in the JSON/CSV datasources or partition values.\n                If it isn't set, it uses the default value, session local timezone.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def requote_redirect_url(self, val: bool) -> None:\n        \"\"\"\"\"\"\n        warnings.warn(\"session.requote_redirect_url modification \"\n                      \"is deprecated #2778\",\n                      DeprecationWarning,\n                      stacklevel=2)\n        self._requote_redirect_url = val", "output": "Do URL requoting on redirection handling.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def str_decode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    \n    \"\"\"\n    if encoding in _cpython_optimized_decoders:\n        # CPython optimized implementation\n        f = lambda x: x.decode(encoding, errors)\n    else:\n        decoder = codecs.getdecoder(encoding)\n        f = lambda x: decoder(x, errors)[0]\n    return _na_map(f, arr)", "output": "Decode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\n    python3.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    Series or Index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping():\n    '''\n    \n    '''\n\n    dev = conn()\n    # Check that the underlying netconf connection still exists.\n    if dev._conn is None:\n        return False\n\n    # call rpc only if ncclient queue is empty. If not empty that means other\n    # rpc call is going on.\n    if hasattr(dev._conn, '_session'):\n        if dev._conn._session._transport.is_active():\n            # there is no on going rpc call. buffer tell can be 1 as it stores\n            # remaining char after \"]]>]]>\" which can be a new line char\n            if dev._conn._session._buffer.tell() <= 1 and \\\n                    dev._conn._session._q.empty():\n                return _rpc_file_list(dev)\n            else:\n                log.debug('skipped ping() call as proxy already getting data')\n                return True\n        else:\n            # ssh connection is lost\n            return False\n    else:\n        # other connection modes, like telnet\n        return _rpc_file_list(dev)", "output": "Ping?  Pong!", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next_frame_basic_recurrent():\n  \"\"\"\"\"\"\n  hparams = basic_stochastic.next_frame_basic_stochastic_discrete()\n  hparams.filter_double_steps = 2\n  hparams.hidden_size = 64\n  hparams.video_num_input_frames = 4\n  hparams.video_num_target_frames = 4\n  hparams.concat_internal_states = False\n  hparams.add_hparam(\"num_lstm_layers\", 2)\n  hparams.add_hparam(\"num_lstm_filters\", 256)\n  return hparams", "output": "Basic 2-frame recurrent model with stochastic tower.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def poll_event(self):\n        \"\"\"\n        \"\"\"\n        try:\n            msg = await self.recv()\n            await self.received_message(msg)\n        except websockets.exceptions.ConnectionClosed as exc:\n            if self._can_handle_close(exc.code):\n                log.info('Websocket closed with %s (%s), attempting a reconnect.', exc.code, exc.reason)\n                raise ResumeWebSocket(self.shard_id) from exc\n            else:\n                log.info('Websocket closed with %s (%s), cannot reconnect.', exc.code, exc.reason)\n                raise ConnectionClosed(exc, shard_id=self.shard_id) from exc", "output": "Polls for a DISPATCH event and handles the general gateway loop.\n\n        Raises\n        ------\n        ConnectionClosed\n            The websocket connection was terminated for unhandled reasons.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self, where=None, columns=None, **kwargs):\n        \"\"\"\n        \"\"\"\n\n        if not self.read_axes(where=where, **kwargs):\n            return None\n\n        raise NotImplementedError(\"Panel is removed in pandas 0.25.0\")", "output": "we have n indexable columns, with an arbitrary number of data\n        axes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smartos_zone_pkgin_data():\n    '''\n    \n    '''\n    # Provides:\n    #   pkgin_repositories\n\n    grains = {\n        'pkgin_repositories': [],\n    }\n\n    pkginrepo = re.compile('^(?:https|http|ftp|file)://.*$')\n    if os.path.isfile('/opt/local/etc/pkgin/repositories.conf'):\n        with salt.utils.files.fopen('/opt/local/etc/pkgin/repositories.conf', 'r') as fp_:\n            for line in fp_:\n                line = salt.utils.stringutils.to_unicode(line)\n                if pkginrepo.match(line):\n                    grains['pkgin_repositories'].append(line)\n\n    return grains", "output": "SmartOS zone pkgsrc information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def send_cmd(cmd, args, ret):\n        \"\"\"\n        \"\"\"\n        from dvc.daemon import daemon\n\n        if not Analytics._is_enabled(cmd):\n            return\n\n        analytics = Analytics()\n        analytics.collect_cmd(args, ret)\n        daemon([\"analytics\", analytics.dump()])", "output": "Collect and send analytics for CLI command.\n\n        Args:\n            args (list): parsed args for the CLI command.\n            ret (int): return value of the CLI command.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map(self, map_fn, name=\"Map\"):\n        \"\"\"\n        \"\"\"\n        op = Operator(\n            _generate_uuid(),\n            OpType.Map,\n            name,\n            map_fn,\n            num_instances=self.env.config.parallelism)\n        return self.__register(op)", "output": "Applies a map operator to the stream.\n\n        Attributes:\n             map_fn (function): The user-defined logic of the map.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def param_dict_to_str(data):\n    \"\"\"\"\"\"\n    if data is None or not data:\n        return \"\"\n    pairs = []\n    for key, val in data.items():\n        if isinstance(val, (list, tuple, set)) or is_numpy_1d_array(val):\n            pairs.append(str(key) + '=' + ','.join(map(str, val)))\n        elif isinstance(val, string_type) or isinstance(val, numeric_types) or is_numeric(val):\n            pairs.append(str(key) + '=' + str(val))\n        elif val is not None:\n            raise TypeError('Unknown type of parameter:%s, got:%s'\n                            % (key, type(val).__name__))\n    return ' '.join(pairs)", "output": "Convert Python dictionary to string, which is passed to C API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_org_details(organization_id):\n    '''\n    \n    '''\n\n    qdata = salt.utils.http.query(\n        '{0}/organization/{1}'.format(_base_url(), organization_id),\n        method='GET',\n        decode=True,\n        decode_type='json',\n        header_dict={\n            'X-DC-DEVKEY': _api_key(),\n            'Content-Type': 'application/json',\n        },\n    )\n    return qdata", "output": "Return the details for an organization\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run digicert.get_org_details 34\n\n    Returns a dictionary with the org details, or with 'error' and 'status' keys.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_reactor(self, tag):\n        '''\n        \n        '''\n        reactors = self.list_all()\n        for reactor in reactors:\n            _tag = next(six.iterkeys(reactor))\n            if _tag == tag:\n                self.minion.opts['reactor'].remove(reactor)\n                return {'status': True, 'comment': 'Reactor deleted.'}\n\n        return {'status': False, 'comment': 'Reactor does not exists.'}", "output": "Delete a reactor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deploy_ray_func(func, partition, kwargs):  # pragma: no cover\n    \"\"\"\n    \"\"\"\n    try:\n        return func(partition, **kwargs)\n    # Sometimes Arrow forces us to make a copy of an object before we operate\n    # on it. We don't want the error to propagate to the user, and we want to\n    # avoid copying unless we absolutely have to.\n    except ValueError:\n        return func(partition.copy(), **kwargs)", "output": "Deploy a function to a partition in Ray.\n\n    Note: Ray functions are not detected by codecov (thus pragma: no cover)\n\n    Args:\n        func: The function to apply.\n        partition: The partition to apply the function to.\n        kwargs: A dictionary of keyword arguments for the function.\n\n    Returns:\n        The result of the function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def describe_api_models(restApiId, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        models = _multi_call(conn.get_models, 'items', restApiId=restApiId)\n        return {'models': [_convert_datetime_str(model) for model in models]}\n    except ClientError as e:\n        return {'error': __utils__['boto3.get_error'](e)}", "output": "Get all models for a given API\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_apigateway.describe_api_models restApiId", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter_by_folder(self, include=None, exclude=None):\n        \"\"\n        include,exclude = listify(include),listify(exclude)\n        def _inner(o):\n            if isinstance(o, Path): n = o.relative_to(self.path).parts[0]\n            else: n = o.split(os.path.sep)[len(str(self.path).split(os.path.sep))]\n            if include and not n in include: return False\n            if exclude and     n in exclude: return False\n            return True\n        return self.filter_by_func(_inner)", "output": "Only keep filenames in `include` folder or reject the ones in `exclude`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_authorizer(self, restapi, uri, authorizer):\n        \"\"\"\n        \n        \"\"\"\n        authorizer_type = authorizer.get(\"type\", \"TOKEN\").upper()\n        identity_validation_expression = authorizer.get('validation_expression', None)\n\n        authorizer_resource = troposphere.apigateway.Authorizer(\"Authorizer\")\n        authorizer_resource.RestApiId = troposphere.Ref(restapi)\n        authorizer_resource.Name = authorizer.get(\"name\", \"ZappaAuthorizer\")\n        authorizer_resource.Type = authorizer_type\n        authorizer_resource.AuthorizerUri = uri\n        authorizer_resource.IdentitySource = \"method.request.header.%s\" % authorizer.get('token_header', 'Authorization')\n        if identity_validation_expression:\n            authorizer_resource.IdentityValidationExpression = identity_validation_expression\n\n        if authorizer_type == 'TOKEN':\n            if not self.credentials_arn:\n                self.get_credentials_arn()\n            authorizer_resource.AuthorizerResultTtlInSeconds = authorizer.get('result_ttl', 300)\n            authorizer_resource.AuthorizerCredentials = self.credentials_arn\n        if authorizer_type == 'COGNITO_USER_POOLS':\n            authorizer_resource.ProviderARNs = authorizer.get('provider_arns')\n\n        self.cf_api_resources.append(authorizer_resource.title)\n        self.cf_template.add_resource(authorizer_resource)\n\n        return authorizer_resource", "output": "Create Authorizer for API gateway", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bb_pad_collate(samples:BatchSamples, pad_idx:int=0) -> Tuple[FloatTensor, Tuple[LongTensor, LongTensor]]:\n    \"\"\n    if isinstance(samples[0][1], int): return data_collate(samples)\n    max_len = max([len(s[1].data[1]) for s in samples])\n    bboxes = torch.zeros(len(samples), max_len, 4)\n    labels = torch.zeros(len(samples), max_len).long() + pad_idx\n    imgs = []\n    for i,s in enumerate(samples):\n        imgs.append(s[0].data[None])\n        bbs, lbls = s[1].data\n        if not (bbs.nelement() == 0):\n            bboxes[i,-len(lbls):] = bbs\n            labels[i,-len(lbls):] = tensor(lbls)\n    return torch.cat(imgs,0), (bboxes,labels)", "output": "Function that collect `samples` of labelled bboxes and adds padding with `pad_idx`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_global_config_dir():\n        \"\"\"\n        \"\"\"\n        from appdirs import user_config_dir\n\n        return user_config_dir(\n            appname=Config.APPNAME, appauthor=Config.APPAUTHOR\n        )", "output": "Returns global config location. E.g. ~/.config/dvc/config.\n\n        Returns:\n            str: path to the global config directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_symbol(prototxt_fname):\n    \"\"\"\n    \"\"\"\n    sym, output_name, input_dim = _parse_proto(prototxt_fname)\n    exec(sym)                   # pylint: disable=exec-used\n    _locals = locals()\n    exec(\"ret = \" + output_name, globals(), _locals)  # pylint: disable=exec-used\n    ret = _locals['ret']\n    return ret, input_dim", "output": "Convert caffe model definition into Symbol\n\n    Parameters\n    ----------\n    prototxt_fname : str\n        Filename of the prototxt file\n\n    Returns\n    -------\n    Symbol\n        Converted Symbol\n    tuple\n        Input shape", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start_router(router_class, router_name):\n    \"\"\"\n    \"\"\"\n    handle = router_class.remote(router_name)\n    ray.experimental.register_actor(router_name, handle)\n    handle.start.remote()\n    return handle", "output": "Wrapper for starting a router and register it.\n\n    Args:\n        router_class: The router class to instantiate.\n        router_name: The name to give to the router.\n\n    Returns:\n        A handle to newly started router actor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reference_image_path(cls, project, location, product, reference_image):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}\",\n            project=project,\n            location=location,\n            product=product,\n            reference_image=reference_image,\n        )", "output": "Return a fully-qualified reference_image string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_module(prefix, epoch, data_names, data_shapes):\n    \"\"\"\n    \"\"\"\n    sym, arg_params, aux_params = mx.model.load_checkpoint(prefix, epoch)\n\n    # We don't need CTC loss for prediction, just a simple softmax will suffice.\n    # We get the output of the layer just before the loss layer ('pred_fc') and add softmax on top\n    pred_fc = sym.get_internals()['pred_fc_output']\n    sym = mx.sym.softmax(data=pred_fc)\n\n    mod = mx.mod.Module(symbol=sym, context=mx.cpu(), data_names=data_names, label_names=None)\n    mod.bind(for_training=False, data_shapes=data_shapes)\n    mod.set_params(arg_params, aux_params, allow_missing=False)\n    return mod", "output": "Loads the model from checkpoint specified by prefix and epoch, binds it\n    to an executor, and sets its parameters and returns a mx.mod.Module", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_progress(opts, out, progress):\n    '''\n    \n    '''\n    return salt.loader.raw_mod(opts,\n                                out,\n                                'rawmodule',\n                                mod='output')['{0}.progress_iter'.format(out)](progress)", "output": "Get the progress bar from the given outputter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write(self, to_write):\n        \"\"\"\n        \n        \"\"\"\n        self._file.write(to_write.encode(self._encoding or\n                                         self._default_encoding))", "output": "Helper to call encode before writing to file for Python 3 compat.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _normalize_cursor(self, cursor, orders):\n        \"\"\"\"\"\"\n        if cursor is None:\n            return\n\n        if not orders:\n            raise ValueError(_NO_ORDERS_FOR_CURSOR)\n\n        document_fields, before = cursor\n\n        order_keys = [order.field.field_path for order in orders]\n\n        if isinstance(document_fields, document.DocumentSnapshot):\n            snapshot = document_fields\n            document_fields = snapshot.to_dict()\n            document_fields[\"__name__\"] = snapshot.reference\n\n        if isinstance(document_fields, dict):\n            # Transform to list using orders\n            values = []\n            data = document_fields\n            for order_key in order_keys:\n                try:\n                    values.append(field_path_module.get_nested_value(order_key, data))\n                except KeyError:\n                    msg = _MISSING_ORDER_BY.format(order_key, data)\n                    raise ValueError(msg)\n            document_fields = values\n\n        if len(document_fields) != len(orders):\n            msg = _MISMATCH_CURSOR_W_ORDER_BY.format(document_fields, order_keys)\n            raise ValueError(msg)\n\n        _transform_bases = (transforms.Sentinel, transforms._ValueList)\n\n        for index, key_field in enumerate(zip(order_keys, document_fields)):\n            key, field = key_field\n\n            if isinstance(field, _transform_bases):\n                msg = _INVALID_CURSOR_TRANSFORM\n                raise ValueError(msg)\n\n            if key == \"__name__\" and isinstance(field, six.string_types):\n                document_fields[index] = self._parent.document(field)\n\n        return document_fields, before", "output": "Helper: convert cursor to a list of values based on orders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _beam_decode(self,\n                   features,\n                   decode_length,\n                   beam_size,\n                   top_beams,\n                   alpha,\n                   use_tpu=False):\n    \"\"\"\n    \"\"\"\n    return self._beam_decode_slow(features, decode_length, beam_size, top_beams,\n                                  alpha, use_tpu)", "output": "Beam search decoding.\n\n    Models should ideally implement a more efficient version of this function.\n\n    Args:\n      features: an map of string to `Tensor`\n      decode_length: an integer.  How many additional timesteps to decode.\n      beam_size: number of beams.\n      top_beams: an integer. How many of the beams to return.\n      alpha: Float that controls the length penalty. larger the alpha, stronger\n        the preference for longer translations.\n      use_tpu: A bool, whether to do beam decode on TPU.\n\n    Returns:\n       samples: an integer `Tensor`. Top samples from the beam search", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def satisfier(self, term):  # type: (Term) -> Assignment\n        \"\"\"\n        \n        \"\"\"\n        assigned_term = None  # type: Term\n\n        for assignment in self._assignments:\n            if assignment.dependency.name != term.dependency.name:\n                continue\n\n            if (\n                not assignment.dependency.is_root\n                and not assignment.dependency.name == term.dependency.name\n            ):\n                if not assignment.is_positive():\n                    continue\n\n                assert not term.is_positive()\n\n                return assignment\n\n            if assigned_term is None:\n                assigned_term = assignment\n            else:\n                assigned_term = assigned_term.intersect(assignment)\n\n            # As soon as we have enough assignments to satisfy term, return them.\n            if assigned_term.satisfies(term):\n                return assignment\n\n        raise RuntimeError(\"[BUG] {} is not satisfied.\".format(term))", "output": "Returns the first Assignment in this solution such that the sublist of\n        assignments up to and including that entry collectively satisfies term.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def unpin(self):\n        \"\"\"\n        \"\"\"\n\n        await self._state.http.unpin_message(self.channel.id, self.id)\n        self.pinned = False", "output": "|coro|\n\n        Unpins the message.\n\n        You must have the :attr:`~Permissions.manage_messages` permission to do\n        this in a non-private channel context.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to unpin the message.\n        NotFound\n            The message or channel was not found or deleted.\n        HTTPException\n            Unpinning the message failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_circuit_provider(name, asn=None):\n    '''\n    \n    '''\n\n    nb_circuit_provider = get_('circuits', 'providers', name=name)\n    payload = {}\n    if nb_circuit_provider:\n        if nb_circuit_provider['asn'] == asn:\n            return False\n        else:\n            log.error('Duplicate provider with different ASN: %s: %s', name, asn)\n            raise CommandExecutionError(\n                'Duplicate provider with different ASN: {}: {}'.format(name, asn)\n            )\n    else:\n        payload = {\n            'name': name,\n            'slug': slugify(name)\n        }\n        if asn:\n            payload['asn'] = asn\n        circuit_provider = _add('circuits', 'providers', payload)\n        if circuit_provider:\n            return {'circuits': {'providers': {circuit_provider['id']: payload}}}\n        else:\n            return circuit_provider", "output": ".. versionadded:: 2019.2.0\n\n    Create a new Netbox circuit provider\n\n    name\n        The name of the circuit provider\n    asn\n        The ASN of the circuit provider\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion netbox.create_circuit_provider Telia 1299", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_frame(self, index=True, name=None):\n        \"\"\"\n        \n        \"\"\"\n\n        from pandas import DataFrame\n        if name is not None:\n            if not is_list_like(name):\n                raise TypeError(\"'name' must be a list / sequence \"\n                                \"of column names.\")\n\n            if len(name) != len(self.levels):\n                raise ValueError(\"'name' should have same length as \"\n                                 \"number of levels on index.\")\n            idx_names = name\n        else:\n            idx_names = self.names\n\n        # Guarantee resulting column order\n        result = DataFrame(\n            OrderedDict([\n                ((level if lvlname is None else lvlname),\n                 self._get_level_values(level))\n                for lvlname, level in zip(idx_names, range(len(self.levels)))\n            ]),\n            copy=False\n        )\n\n        if index:\n            result.index = self\n        return result", "output": "Create a DataFrame with the levels of the MultiIndex as columns.\n\n        Column ordering is determined by the DataFrame constructor with data as\n        a dict.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Set the index of the returned DataFrame as the original MultiIndex.\n\n        name : list / sequence of strings, optional\n            The passed names should substitute index level names.\n\n        Returns\n        -------\n        DataFrame : a DataFrame containing the original MultiIndex data.\n\n        See Also\n        --------\n        DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exclusion_indices_for_range(self, start_idx, end_idx):\n        \"\"\"\n        \n        \"\"\"\n        itree = self._minute_exclusion_tree\n        if itree.overlaps(start_idx, end_idx):\n            ranges = []\n            intervals = itree[start_idx:end_idx]\n            for interval in intervals:\n                ranges.append(interval.data)\n            return sorted(ranges)\n        else:\n            return None", "output": "Returns\n        -------\n        List of tuples of (start, stop) which represent the ranges of minutes\n        which should be excluded when a market minute window is requested.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, htpasswd_file=None, runas=None):\n    '''\n    \n\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'comment': '',\n           'result': None}\n\n    exists = __salt__['file.grep'](\n        htpasswd_file, '^{0}:'.format(name))['retcode'] == 0\n\n    if not exists:\n        if __opts__['test']:\n            ret['result'] = None\n        else:\n            ret['result'] = True\n        ret['comment'] = 'User already not in file'\n    else:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User \\'{0}\\' is set to be removed from htpasswd file'.format(name)\n            ret['changes'] = {name: True}\n        else:\n            userdel_ret = __salt__['webutil.userdel'](\n                htpasswd_file, name, runas=runas, all_results=True)\n\n            ret['result'] = userdel_ret['retcode'] == 0\n            ret['comment'] = userdel_ret['stderr']\n\n            if ret['result']:\n                ret['changes'] = {name: True}\n\n    return ret", "output": "Make sure the user is not in the specified htpasswd file\n\n    name\n        User name\n\n    htpasswd_file\n        Path to the htpasswd file\n\n    runas\n        The system user to run htpasswd command with", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_archive_formats():\n    \"\"\"\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats", "output": "Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformer_bas8l_8h_big_uncond_dr03_imgnet():\n  \"\"\"\"\"\"\n  hparams = imagetransformer_base_14l_8h_big_dr01()\n  # num_hidden_layers\n  hparams.num_decoder_layers = 8\n  hparams.num_heads = 8\n  hparams.hidden_size = 512\n  hparams.filter_size = 2048\n  hparams.layer_prepostprocess_dropout = 0.3\n  return hparams", "output": "big 1d model for conditional image generation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _build_resource_from_properties(obj, filter_fields):\n    \"\"\"\n    \"\"\"\n    partial = {}\n    for filter_field in filter_fields:\n        api_field = obj._PROPERTY_TO_API_FIELD.get(filter_field)\n        if api_field is None and filter_field not in obj._properties:\n            raise ValueError(\"No property %s\" % filter_field)\n        elif api_field is not None:\n            partial[api_field] = obj._properties.get(api_field)\n        else:\n            # allows properties that are not defined in the library\n            # and properties that have the same name as API resource key\n            partial[filter_field] = obj._properties[filter_field]\n\n    return partial", "output": "Build a resource based on a ``_properties`` dictionary, filtered by\n    ``filter_fields``, which follow the name of the Python object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_svn_page(html):\n    # type: (Union[str, Text]) -> Optional[Match[Union[str, Text]]]\n    \"\"\"\n    \n    \"\"\"\n    return (re.search(r'<title>[^<]*Revision \\d+:', html) and\n            re.search(r'Powered by (?:<a[^>]*?>)?Subversion', html, re.I))", "output": "Returns true if the page appears to be the index page of an svn repository", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_audit_sink(self, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_audit_sink_with_http_info(body, **kwargs)\n        else:\n            (data) = self.create_audit_sink_with_http_info(body, **kwargs)\n            return data", "output": "create an AuditSink\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_audit_sink(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param V1alpha1AuditSink body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1alpha1AuditSink\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def meanApprox(self, timeout, confidence=0.95):\n        \"\"\"\n        \n        \"\"\"\n        jrdd = self.map(float)._to_java_object_rdd()\n        jdrdd = self.ctx._jvm.JavaDoubleRDD.fromRDD(jrdd.rdd())\n        r = jdrdd.meanApprox(timeout, confidence).getFinalValue()\n        return BoundedFloat(r.mean(), r.confidence(), r.low(), r.high())", "output": ".. note:: Experimental\n\n        Approximate operation to return the mean within a timeout\n        or meet the confidence.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> r = sum(range(1000)) / 1000.0\n        >>> abs(rdd.meanApprox(1000) - r) / r < 0.05\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        \n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False", "output": "Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete(queue_id):\n    '''\n    \n\n    '''\n\n    ret = {'message': '',\n           'result': True\n           }\n\n    if not queue_id:\n        log.error('Require argument queue_id')\n\n    if not queue_id == 'ALL':\n        queue = show_queue()\n        _message = None\n        for item in queue:\n            if item['queue_id'] == queue_id:\n                _message = item\n\n        if not _message:\n            ret['message'] = 'No message in queue with ID {0}'.format(queue_id)\n            ret['result'] = False\n            return ret\n\n    cmd = 'postsuper -d {0}'.format(queue_id)\n    result = __salt__['cmd.run_all'](cmd)\n\n    if result['retcode'] == 0:\n        if queue_id == 'ALL':\n            ret['message'] = 'Successfully removed all messages'\n        else:\n            ret['message'] = 'Successfully removed message with queue id {0}'.format(queue_id)\n    else:\n        if queue_id == 'ALL':\n            ret['message'] = 'Unable to removed all messages'\n        else:\n            ret['message'] = 'Unable to remove message with queue id {0}: {1}'.format(queue_id, result['stderr'])\n    return ret", "output": "Delete message(s) from the mail queue\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' postfix.delete 5C33CA0DEA\n\n        salt '*' postfix.delete ALL", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_thing_type(thingTypeName,\n            region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_thing_type(thingTypeName=thingTypeName)\n        return {'deleted': True}\n    except ClientError as e:\n        err = __utils__['boto3.get_error'](e)\n        if e.response.get('Error', {}).get('Code') == 'ResourceNotFoundException':\n            return {'deleted': True}\n        return {'deleted': False, 'error': err}", "output": "Given a thing type name, delete it.\n\n    Returns {deleted: true} if the thing type was deleted and returns\n    {deleted: false} if the thing type was not deleted.\n\n    .. versionadded:: 2016.11.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.delete_thing_type mythingtype", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sections_to_variance_sections(self, sections_over_time):\n    '''\n    '''\n    variance_sections = []\n\n    for i in range(len(sections_over_time[0])):\n      time_sections = [sections[i] for sections in sections_over_time]\n      variance = np.var(time_sections, axis=0)\n      variance_sections.append(variance)\n\n    return variance_sections", "output": "Computes the variance of corresponding sections over time.\n\n    Returns:\n      a list of np arrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean(ctx, state, dry_run=False, bare=False, user=False):\n    \"\"\"\"\"\"\n    from ..core import do_clean\n    do_clean(ctx=ctx, three=state.three, python=state.python, dry_run=dry_run,\n             system=state.system)", "output": "Uninstalls all packages not specified in Pipfile.lock.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect_element(__funcname=_qualified_name, **named):\n    \"\"\"\n    \n    \"\"\"\n    def _expect_element(collection):\n        if isinstance(collection, (set, frozenset)):\n            # Special case the error message for set and frozen set to make it\n            # less verbose.\n            collection_for_error_message = tuple(sorted(collection))\n        else:\n            collection_for_error_message = collection\n\n        template = (\n            \"%(funcname)s() expected a value in {collection} \"\n            \"for argument '%(argname)s', but got %(actual)s instead.\"\n        ).format(collection=collection_for_error_message)\n        return make_check(\n            ValueError,\n            template,\n            complement(op.contains(collection)),\n            repr,\n            funcname=__funcname,\n        )\n    return preprocess(**valmap(_expect_element, named))", "output": "Preprocessing decorator that verifies inputs are elements of some\n    expected collection.\n\n    Examples\n    --------\n    >>> @expect_element(x=('a', 'b'))\n    ... def foo(x):\n    ...    return x.upper()\n    ...\n    >>> foo('a')\n    'A'\n    >>> foo('b')\n    'B'\n    >>> foo('c')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    Traceback (most recent call last):\n       ...\n    ValueError: ...foo() expected a value in ('a', 'b') for argument 'x',\n    but got 'c' instead.\n\n    Notes\n    -----\n    A special argument, __funcname, can be provided as a string to override the\n    function name shown in error messages.  This is most often used on __init__\n    or __new__ methods to make errors refer to the class name instead of the\n    function name.\n\n    This uses the `in` operator (__contains__) to make the containment check.\n    This allows us to use any custom container as long as the object supports\n    the container protocol.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_list(search_opts=None, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_list(search_opts=search_opts)", "output": "List storage volumes\n\n    search_opts\n        Dictionary of search options\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_list search_opts='{\"display_name\": \"myblock\"}' profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def GSSAuth(auth_method, gss_deleg_creds=True):\n    \"\"\"\n    \n    \"\"\"\n    if _API == \"MIT\":\n        return _SSH_GSSAPI(auth_method, gss_deleg_creds)\n    elif _API == \"SSPI\" and os.name == \"nt\":\n        return _SSH_SSPI(auth_method, gss_deleg_creds)\n    else:\n        raise ImportError(\"Unable to import a GSS-API / SSPI module!\")", "output": "Provide SSH2 GSS-API / SSPI authentication.\n\n    :param str auth_method: The name of the SSH authentication mechanism\n                            (gssapi-with-mic or gss-keyex)\n    :param bool gss_deleg_creds: Delegate client credentials or not.\n                                 We delegate credentials by default.\n    :return: Either an `._SSH_GSSAPI` (Unix) object or an\n             `_SSH_SSPI` (Windows) object\n\n    :raises: ``ImportError`` -- If no GSS-API / SSPI module could be imported.\n\n    :see: `RFC 4462 <http://www.ietf.org/rfc/rfc4462.txt>`_\n    :note: Check for the available API and return either an `._SSH_GSSAPI`\n           (MIT GSSAPI) object or an `._SSH_SSPI` (MS SSPI) object. If you\n           get python-gssapi working on Windows, python-gssapi\n           will be used and a `._SSH_GSSAPI` object will be returned.\n           If there is no supported API available,\n           ``None`` will be returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join_cluster(host, user='rabbit', ram_node=None, runas=None):\n    '''\n    \n    '''\n    cmd = [RABBITMQCTL, 'join_cluster']\n    if ram_node:\n        cmd.append('--ram')\n    cmd.append('{0}@{1}'.format(user, host))\n\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    stop_app(runas)\n    res = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    start_app(runas)\n\n    return _format_response(res, 'Join')", "output": "Join a rabbit cluster\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.join_cluster rabbit.example.com rabbit", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_properties_from_api_repr(self, resource):\n        \"\"\"\"\"\"\n        self.name = resource.get(\"name\")\n        self.number = resource[\"projectNumber\"]\n        self.labels = resource.get(\"labels\", {})\n        self.status = resource[\"lifecycleState\"]\n        if \"parent\" in resource:\n            self.parent = resource[\"parent\"]", "output": "Update specific properties from its API representation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_common_type(types):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError('no types given')\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, (PandasExtensionDtype, ExtensionDtype))\n           for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype('datetime64[ns]')\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype('timedelta64[ns]')\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])", "output": "Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def padded_neg_log_perplexity(predictions,\n                              labels,\n                              weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  num, den = common_layers.padded_cross_entropy(\n      predictions, labels, 0.0, weights_fn=weights_fn, reduce_sum=False)\n  return (-num, den)", "output": "Average log-perplexity exluding padding 0s. No smoothing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect(self, pattern, timeout=-1):\n        \"\"\"\"\"\"\n\n        if self.blocking:\n            raise RuntimeError(\"expect can only be used on non-blocking commands.\")\n\n        try:\n            self.subprocess.expect(pattern=pattern, timeout=timeout)\n        except pexpect.EOF:\n            pass", "output": "Waits on the given pattern to appear in std_out", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _process_all_1(self, texts:Collection[str]) -> List[List[str]]:\n        \"\"\n        tok = self.tok_func(self.lang)\n        if self.special_cases: tok.add_special_cases(self.special_cases)\n        return [self.process_text(str(t), tok) for t in texts]", "output": "Process a list of `texts` in one process.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_outputs(self):\n        \"\"\"\n        \"\"\"\n        out_size = mx_uint()\n        handles = ctypes.POINTER(NDArrayHandle)()\n        check_call(_LIB.MXExecutorOutputs(self.handle,\n                                          ctypes.byref(out_size), ctypes.byref(handles)))\n        num_output = out_size.value\n        outputs = [_ndarray_cls(NDArrayHandle(handles[i])) for i in range(num_output)]\n        return outputs", "output": "List all the output NDArray.\n\n        Returns\n        -------\n        A list of ndarray bound to the heads of executor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_np(self, x_val, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n\n    if self.sess is None:\n      raise ValueError(\"Cannot use `generate_np` when no `sess` was\"\n                       \" provided\")\n\n    packed = self.construct_variables(kwargs)\n    fixed, feedable, _, hash_key = packed\n\n    if hash_key not in self.graphs:\n      self.construct_graph(fixed, feedable, x_val, hash_key)\n    else:\n      # remove the None arguments, they are just left blank\n      for k in list(feedable.keys()):\n        if feedable[k] is None:\n          del feedable[k]\n\n    x, new_kwargs, x_adv = self.graphs[hash_key]\n\n    feed_dict = {x: x_val}\n\n    for name in feedable:\n      feed_dict[new_kwargs[name]] = feedable[name]\n\n    return self.sess.run(x_adv, feed_dict)", "output": "Generate adversarial examples and return them as a NumPy array.\n    Sub-classes *should not* implement this method unless they must\n    perform special handling of arguments.\n\n    :param x_val: A NumPy array with the original inputs.\n    :param **kwargs: optional parameters used by child classes.\n    :return: A NumPy array holding the adversarial examples.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_info(call=None, kwargs=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The image_info function must be called with -f or --function.'\n        )\n\n    if kwargs is None:\n        kwargs = {}\n\n    name = kwargs.get('name', None)\n    image_id = kwargs.get('image_id', None)\n\n    if image_id:\n        if name:\n            log.warning(\n                'Both the \\'image_id\\' and \\'name\\' arguments were provided. '\n                '\\'image_id\\' will take precedence.'\n            )\n    elif name:\n        image_id = get_image_id(kwargs={'name': name})\n    else:\n        raise SaltCloudSystemExit(\n            'The image_info function requires either a \\'name or an \\'image_id\\' '\n            'to be provided.'\n        )\n\n    server, user, password = _get_xml_rpc()\n    auth = ':'.join([user, password])\n\n    info = {}\n    response = server.one.image.info(auth, int(image_id))[1]\n    tree = _get_xml(response)\n    info[tree.find('NAME').text] = _xml_to_dict(tree)\n\n    return info", "output": "Retrieves information for a given image. Either a name or an image_id must be\n    supplied.\n\n    .. versionadded:: 2016.3.0\n\n    name\n        The name of the image for which to gather information. Can be used instead\n        of ``image_id``.\n\n    image_id\n        The ID of the image for which to gather information. Can be used instead of\n        ``name``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f image_info opennebula name=my-image\n        salt-cloud --function image_info opennebula image_id=5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _posix_split_name(self, name):\n        \"\"\"\n        \"\"\"\n        prefix = name[:LENGTH_PREFIX + 1]\n        while prefix and prefix[-1] != \"/\":\n            prefix = prefix[:-1]\n\n        name = name[len(prefix):]\n        prefix = prefix[:-1]\n\n        if not prefix or len(name) > LENGTH_NAME:\n            raise ValueError(\"name is too long\")\n        return prefix, name", "output": "Split a name longer than 100 chars into a prefix\n           and a name part.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_dictlist(data):\n    '''\n    \n    '''\n    if isinstance(data, list):\n        for element in data:\n            if isinstance(element, dict):\n                if len(element) != 1:\n                    return False\n            else:\n                return False\n        return True\n    return False", "output": "Returns True if data is a list of one-element dicts (as found in many SLS\n    schemas), otherwise returns False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_pb(self):\n        \"\"\"\n        \"\"\"\n        max_age = _helpers._timedelta_to_duration_pb(self.max_age)\n        return table_v2_pb2.GcRule(max_age=max_age)", "output": "Converts the garbage collection rule to a protobuf.\n\n        :rtype: :class:`.table_v2_pb2.GcRule`\n        :returns: The converted current object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_len(self, key):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        return len(data[key])", "output": "Return sequence length", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGValidateCtxt(self, ctxt, options):\n        \"\"\" \"\"\"\n        if ctxt is None: ctxt__o = None\n        else: ctxt__o = ctxt._o\n        ret = libxml2mod.xmlTextReaderRelaxNGValidateCtxt(self._o, ctxt__o, options)\n        return ret", "output": "Use RelaxNG schema context to validate the document as it\n          is processed. Activation is only possible before the first\n          Read(). If @ctxt is None, then RelaxNG schema validation is\n           deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _import_api():\n    '''\n    \n    '''\n    global api\n    full_url = 'https://{0}:{1}/pve-docs/api-viewer/apidoc.js'.format(url, port)\n    returned_data = requests.get(full_url, verify=verify_ssl)\n\n    re_filter = re.compile('(?<=pveapi =)(.*)(?=^;)', re.DOTALL | re.MULTILINE)\n    api_json = re_filter.findall(returned_data.text)[0]\n    api = salt.utils.json.loads(api_json)", "output": "Download https://<url>/pve-docs/api-viewer/apidoc.js\n    Extract content of pveapi var (json formated)\n    Load this json content into global variable \"api\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lst_avg(lst):\n    '''\n    \n    '''\n    salt.utils.versions.warn_until(\n        'Neon',\n        'This results of this function are currently being rounded.'\n        'Beginning in the Salt Neon release, results will no longer be '\n        'rounded and this warning will be removed.',\n        stacklevel=3\n    )\n\n    if not isinstance(lst, collections.Hashable):\n        return float(sum(lst)/len(lst))\n    return float(lst)", "output": "Returns the average value of a list.\n\n    .. code-block:: jinja\n\n        {% my_list = [1,2,3,4] -%}\n        {{ set my_list | avg }}\n\n    will be rendered as:\n\n    .. code-block:: yaml\n\n        2.5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_ssh_key(host,\n                username,\n                password,\n                protocol=None,\n                port=None,\n                certificate_verify=False):\n    '''\n    \n\n    '''\n    if protocol is None:\n        protocol = 'https'\n    if port is None:\n        port = 443\n\n    url = '{0}://{1}:{2}/host/ssh_root_authorized_keys'.format(protocol,\n                                                               host,\n                                                               port)\n    ret = {}\n    try:\n        result = salt.utils.http.query(url,\n                                       status=True,\n                                       text=True,\n                                       method='GET',\n                                       username=username,\n                                       password=password,\n                                       verify_ssl=certificate_verify)\n        if result.get('status') == 200:\n            ret['status'] = True\n            ret['key'] = result['text']\n        else:\n            ret['status'] = False\n            ret['Error'] = result['error']\n    except Exception as msg:\n        ret['status'] = False\n        ret['Error'] = msg\n\n    return ret", "output": "Retrieve the authorized_keys entry for root.\n    This function only works for ESXi, not vCenter.\n\n    :param host: The location of the ESXi Host\n    :param username: Username to connect as\n    :param password: Password for the ESXi web endpoint\n    :param protocol: defaults to https, can be http if ssl is disabled on ESXi\n    :param port: defaults to 443 for https\n    :param certificate_verify: If true require that the SSL connection present\n                               a valid certificate\n    :return: True if upload is successful\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vsphere.get_ssh_key my.esxi.host root bad-password certificate_verify=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_copy(self, connection):\n        \"\"\"\n        \n        \"\"\"\n        if not self.does_schema_exist(connection):\n            logger.info(\"Creating schema for %s\", self.table)\n            self.create_schema(connection)\n\n        if not self.does_table_exist(connection):\n            logger.info(\"Creating table %s\", self.table)\n            self.create_table(connection)\n\n        if self.enable_metadata_columns:\n            self._add_metadata_columns(connection)\n\n        if self.do_truncate_table:\n            logger.info(\"Truncating table %s\", self.table)\n            self.truncate_table(connection)\n\n        if self.do_prune():\n            logger.info(\"Removing %s older than %s from %s\", self.prune_column, self.prune_date, self.prune_table)\n            self.prune(connection)", "output": "Perform pre-copy sql - such as creating table, truncating, or removing data older than x.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_auto_dict(values, source='auto'):\n    '''\n    \n\n    '''\n    for name, value in values.items():\n        values[name] = from_auto(name, value, source)\n\n    return values", "output": "Pass an entire dictionary to from_auto\n\n    .. note::\n        The key will be passed as the name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag = request.args.get('tag')\n    run = request.args.get('run')\n    experiment = request.args.get('experiment')\n    output_format = request.args.get('format')\n    (body, mime_type) = self.scalars_impl(tag, run, experiment, output_format)\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag and single run, return array of ScalarEvents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _netstat_aix():\n    '''\n    \n    '''\n    ret = []\n    ## AIX 6.1 - 7.2, appears to ignore addr_family field contents\n    ## for addr_family in ('inet', 'inet6'):\n    for addr_family in ('inet',):\n        # Lookup connections\n        cmd = 'netstat -n -a -f {0} | tail -n +3'.format(addr_family)\n        out = __salt__['cmd.run'](cmd, python_shell=True)\n        for line in out.splitlines():\n            comps = line.split()\n            if len(comps) < 5:\n                continue\n\n            proto_seen = None\n            tcp_flag = True\n            if 'tcp' == comps[0] or 'tcp4' == comps[0]:\n                proto_seen = 'tcp'\n            elif 'tcp6' == comps[0]:\n                proto_seen = 'tcp6'\n            elif 'udp' == comps[0] or 'udp4' == comps[0]:\n                proto_seen = 'udp'\n                tcp_flag = False\n            elif 'udp6' == comps[0]:\n                proto_seen = 'udp6'\n                tcp_flag = False\n\n            if tcp_flag:\n                if len(comps) >= 6:\n                    ret.append({\n                        'proto': proto_seen,\n                        'recv-q': comps[1],\n                        'send-q': comps[2],\n                        'local-address': comps[3],\n                        'remote-address': comps[4],\n                        'state': comps[5]})\n            else:\n                if len(comps) >= 5:\n                    ret.append({\n                        'proto': proto_seen,\n                        'local-address': comps[3],\n                        'remote-address': comps[4]})\n    return ret", "output": "Return netstat information for SunOS flavors", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, num_examples, data_path, label_path):\n    \"\"\"\n    \"\"\"\n    images = _extract_mnist_images(data_path, num_examples)\n    labels = _extract_mnist_labels(label_path, num_examples)\n    data = list(zip(images, labels))\n\n    # Data is shuffled automatically to distribute classes uniformly.\n    for image, label in data:\n      yield {\n          \"image\": image,\n          \"label\": label,\n      }", "output": "Generate MNIST examples as dicts.\n\n    Args:\n      num_examples (int): The number of example.\n      data_path (str): Path to the data files\n      label_path (str): Path to the labels\n\n    Yields:\n      Generator yielding the next examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exponential_timeout_generator(initial, maximum, multiplier, deadline):\n    \"\"\"\n    \"\"\"\n    if deadline is not None:\n        deadline_datetime = datetime_helpers.utcnow() + datetime.timedelta(\n            seconds=deadline\n        )\n    else:\n        deadline_datetime = datetime.datetime.max\n\n    timeout = initial\n    while True:\n        now = datetime_helpers.utcnow()\n        yield min(\n            # The calculated timeout based on invocations.\n            timeout,\n            # The set maximum timeout.\n            maximum,\n            # The remaining time before the deadline is reached.\n            float((deadline_datetime - now).seconds),\n        )\n        timeout = timeout * multiplier", "output": "A generator that yields exponential timeout values.\n\n    Args:\n        initial (float): The initial timeout.\n        maximum (float): The maximum timeout.\n        multiplier (float): The multiplier applied to the timeout.\n        deadline (float): The overall deadline across all invocations.\n\n    Yields:\n        float: A timeout value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dict(self, time, code):\n        '''\n        \n        '''\n        try:\n            return self.dicts[(QA_util_to_datetime(time), str(code))]\n        except Exception as e:\n            raise e", "output": "'give the time,code tuple and turn the dict'\n        :param time:\n        :param code:\n        :return:  \u5b57\u5178dict \u7c7b\u578b", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _update_val(self, val, result_score_list):\n        \"\"\"\n        \"\"\"\n        self._update_pbar()\n        if val == 'Timeout':\n            self._update_pbar(pbar_msg=('Skipped pipeline #{0} due to time out. '\n                                        'Continuing to the next pipeline.'.format(self._pbar.n)))\n            result_score_list.append(-float('inf'))\n        else:\n            result_score_list.append(val)\n        return result_score_list", "output": "Update values in the list of result scores and self._pbar during pipeline evaluation.\n\n        Parameters\n        ----------\n        val: float or \"Timeout\"\n            CV scores\n        result_score_list: list\n            A list of CV scores\n\n        Returns\n        -------\n        result_score_list: list\n            A updated list of CV scores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _minimize_constraints_fun_summation(x):\n    '''\n    \n    '''\n    summation = sum([x[i] for i in CONSTRAINT_PARAMS_IDX])\n    return CONSTRAINT_UPPERBOUND >= summation >= CONSTRAINT_LOWERBOUND", "output": "Minimize constraints fun summation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_logger(self):\n        \"\"\"\"\"\"\n\n        if not self.result_logger:\n            if not os.path.exists(self.local_dir):\n                os.makedirs(self.local_dir)\n            if not self.logdir:\n                self.logdir = tempfile.mkdtemp(\n                    prefix=\"{}_{}\".format(\n                        str(self)[:MAX_LEN_IDENTIFIER], date_str()),\n                    dir=self.local_dir)\n            elif not os.path.exists(self.logdir):\n                os.makedirs(self.logdir)\n\n            self.result_logger = UnifiedLogger(\n                self.config,\n                self.logdir,\n                upload_uri=self.upload_dir,\n                loggers=self.loggers,\n                sync_function=self.sync_function)", "output": "Init logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vb_get_network_adapters(machine_name=None, machine=None):\n    '''\n    \n    '''\n\n    if machine_name:\n        machine = vb_get_box().findMachine(machine_name)\n    network_adapters = []\n\n    for i in range(vb_get_max_network_slots()):\n        try:\n            inetwork_adapter = machine.getNetworkAdapter(i)\n            network_adapter = vb_xpcom_to_attribute_dict(\n                inetwork_adapter, 'INetworkAdapter'\n            )\n            network_adapter['properties'] = inetwork_adapter.getProperties('')\n            network_adapters.append(network_adapter)\n        except Exception:\n            pass\n\n    return network_adapters", "output": "A valid machine_name or a machine is needed to make this work!\n\n    @param machine_name:\n    @type machine_name: str\n    @param machine:\n    @type machine: IMachine\n    @return: INetorkAdapter's converted to dicts\n    @rtype: [dict]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def upgrade(self, using=None, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        return self._get_connection(using).indices.upgrade(index=self._name, **kwargs)", "output": "Upgrade the index to the latest format.\n\n        Any additional keyword arguments will be passed to\n        ``Elasticsearch.indices.upgrade`` unchanged.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_char_states(self, char_embed, is_training, reuse, char_ids, char_lengths):\n        \"\"\"\"\"\"\n        max_char_length = self.cfg.max_char_length\n\n        inputs = dropout(tf.nn.embedding_lookup(char_embed, char_ids),\n                         self.cfg.dropout, is_training)\n        inputs = tf.reshape(\n            inputs, shape=[max_char_length, -1, self.cfg.char_embed_dim])\n        char_lengths = tf.reshape(char_lengths, shape=[-1])\n        with tf.variable_scope('char_encoding', reuse=reuse):\n            cell_fw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            cell_bw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            _, (left_right, right_left) = tf.nn.bidirectional_dynamic_rnn(\n                cell_fw=cell_fw,\n                cell_bw=cell_bw,\n                sequence_length=char_lengths,\n                inputs=inputs,\n                time_major=True,\n                dtype=tf.float32\n            )\n\n        left_right = tf.reshape(left_right, shape=[-1, self.cfg.char_embed_dim])\n\n        right_left = tf.reshape(right_left, shape=[-1, self.cfg.char_embed_dim])\n\n        states = tf.concat([left_right, right_left], axis=1)\n        out_shape = tf.shape(char_ids)[1:3]\n        out_shape = tf.concat([out_shape, tf.constant(\n            value=[self.cfg.char_embed_dim * 2], dtype=tf.int32)], axis=0)\n        return tf.reshape(states, shape=out_shape)", "output": "Build char embedding network for the QA model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _linux_wwns():\n    '''\n    \n    '''\n    ret = []\n    for fc_file in glob.glob('/sys/class/fc_host/*/port_name'):\n        with salt.utils.files.fopen(fc_file, 'r') as _wwn:\n            content = _wwn.read()\n            for line in content.splitlines():\n                ret.append(line.rstrip()[2:])\n    return ret", "output": "Return Fibre Channel port WWNs from a Linux host.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_default_storage_policy_of_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Listing the default storage policy of datastore \\'%s\\'', datastore)\n    # Find datastore\n    target_ref = _get_proxy_target(service_instance)\n    ds_refs = salt.utils.vmware.get_datastores(service_instance, target_ref,\n                                               datastore_names=[datastore])\n    if not ds_refs:\n        raise VMwareObjectRetrievalError('Datastore \\'{0}\\' was not '\n                                         'found'.format(datastore))\n    profile_manager = salt.utils.pbm.get_profile_manager(service_instance)\n    policy = salt.utils.pbm.get_default_storage_policy_of_datastore(\n        profile_manager, ds_refs[0])\n    return _get_policy_dict(policy)", "output": "Returns a list of datastores assign the the storage policies.\n\n    datastore\n        Name of the datastore to assign.\n        The datastore needs to be visible to the VMware entity the proxy\n        points to.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.list_default_storage_policy_of_datastore datastore=ds1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _SkipFieldValue(tokenizer):\n  \"\"\"\n  \"\"\"\n  # String/bytes tokens can come in multiple adjacent string literals.\n  # If we can consume one, consume as many as we can.\n  if tokenizer.TryConsumeByteString():\n    while tokenizer.TryConsumeByteString():\n      pass\n    return\n\n  if (not tokenizer.TryConsumeIdentifier() and\n      not _TryConsumeInt64(tokenizer) and not _TryConsumeUint64(tokenizer) and\n      not tokenizer.TryConsumeFloat()):\n    raise ParseError('Invalid field value: ' + tokenizer.token)", "output": "Skips over a field value.\n\n  Args:\n    tokenizer: A tokenizer to parse the field name and values.\n\n  Raises:\n    ParseError: In case an invalid field value is found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        # for compatibility with higher dims\n        if axis != 0:\n            raise ValueError(\"cannot reindex series on non-zero axis!\")\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self.reindex(index=labels, **kwargs)", "output": "Conform Series to new index with optional filling logic.\n\n        .. deprecated:: 0.21.0\n            Use ``Series.reindex`` instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_show(id=None, name=None, profile=None):  # pylint: disable=C0103\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    ret = {}\n    if name:\n        for image in g_client.images.list():\n            if image.name == name:\n                id = image.id  # pylint: disable=C0103\n                continue\n    if not id:\n        return {\n            'result': False,\n            'comment':\n                'Unable to resolve image ID '\n                'for name \\'{0}\\''.format(name)\n            }\n    try:\n        image = g_client.images.get(id)\n    except exc.HTTPNotFound:\n        return {\n            'result': False,\n            'comment': 'No image with ID {0}'.format(id)\n            }\n    log.debug(\n        'Properties of image %s:\\n%s',\n        image.name, pprint.PrettyPrinter(indent=4).pformat(image)\n    )\n\n    schema = image_schema(profile=profile)\n    if len(schema.keys()) == 1:\n        schema = schema['image']\n    for key in schema:\n        if key in image:\n            ret[key] = image[key]\n    return ret", "output": "Return details about a specific image (glance image-show)\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.image_show", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_label(label_data):\n    \"\"\"\n    \"\"\"\n    systole = label_data[:, 1]\n    diastole = label_data[:, 2]\n    systole_encode = np.array([\n            (x < np.arange(600)) for x in systole\n        ], dtype=np.uint8)\n    diastole_encode = np.array([\n            (x < np.arange(600)) for x in diastole\n        ], dtype=np.uint8)\n    return systole_encode, diastole_encode", "output": "Run encoding to encode the label into the CDF target.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delivery_report(err, msg):\n    '''  '''\n    if err is not None:\n        log.error('Message delivery failed: %s', err)\n    else:\n        log.debug('Message delivered to %s [%s]', msg.topic(), msg.partition())", "output": "Called once for each message produced to indicate delivery result.\n        Triggered by poll() or flush().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hosts(self, host):\n        \"\"\"\n        \n        \"\"\"\n        try:\n            return shlex.split(host)\n        except ValueError:\n            raise Exception(\"Unparsable host {}\".format(host))", "output": "Return a list of host_names from host value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _virt_call(domain, function, section, comment,\n               connection=None, username=None, password=None, **kwargs):\n    '''\n    \n    '''\n    ret = {'name': domain, 'changes': {}, 'result': True, 'comment': ''}\n    targeted_domains = fnmatch.filter(__salt__['virt.list_domains'](), domain)\n    changed_domains = list()\n    ignored_domains = list()\n    for targeted_domain in targeted_domains:\n        try:\n            response = __salt__['virt.{0}'.format(function)](targeted_domain,\n                                                             connection=connection,\n                                                             username=username,\n                                                             password=password,\n                                                             **kwargs)\n            if isinstance(response, dict):\n                response = response['name']\n            changed_domains.append({'domain': targeted_domain, function: response})\n        except libvirt.libvirtError as err:\n            ignored_domains.append({'domain': targeted_domain, 'issue': six.text_type(err)})\n    if not changed_domains:\n        ret['result'] = False\n        ret['comment'] = 'No changes had happened'\n        if ignored_domains:\n            ret['changes'] = {'ignored': ignored_domains}\n    else:\n        ret['changes'] = {section: changed_domains}\n        ret['comment'] = comment\n\n    return ret", "output": "Helper to call the virt functions. Wildcards supported.\n\n    :param domain:\n    :param function:\n    :param section:\n    :param comment:\n    :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _convert_parsed_show_output(parsed_data):\n    '''\n    \n    '''\n    # Match lines like \"main: xenial [snapshot]\" or \"test [local]\".\n    source_pattern = re.compile(r'(?:(?P<component>\\S+):)?\\s*(?P<name>\\S+)\\s+\\[(?P<type>\\S+)\\]')\n    sources = list()\n\n    if 'architectures' in parsed_data:\n        parsed_data['architectures'] = [item.strip() for item in parsed_data['architectures'].split()]\n        parsed_data['architectures'] = sorted(parsed_data['architectures'])\n\n    for source in parsed_data.get('sources', []):\n        # Retain the key/value of only the matching named groups.\n        matches = source_pattern.search(source)\n\n        if matches:\n            groups = matches.groupdict()\n            sources.append({key: groups[key] for key in groups if groups[key]})\n    if sources:\n        parsed_data['sources'] = sources\n\n    return parsed_data", "output": "Convert matching string values to lists/dictionaries.\n\n    :param dict parsed_data: The text of the command output that needs to be parsed.\n\n    :return: A dictionary containing the modified configuration data.\n    :rtype: dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smooth_distribution(p, eps=0.0001):\n    \"\"\"\n    \"\"\"\n    is_zeros = (p == 0).astype(np.float32)\n    is_nonzeros = (p != 0).astype(np.float32)\n    n_zeros = is_zeros.sum()\n    n_nonzeros = p.size - n_zeros\n    if not n_nonzeros:\n        raise ValueError('The discrete probability distribution is malformed. All entries are 0.')\n    eps1 = eps * float(n_zeros) / float(n_nonzeros)\n    assert eps1 < 1.0, 'n_zeros=%d, n_nonzeros=%d, eps1=%f' % (n_zeros, n_nonzeros, eps1)\n    hist = p.astype(np.float32)\n    hist += eps * is_zeros + (-eps1) * is_nonzeros\n    assert (hist <= 0).sum() == 0\n    return hist", "output": "Given a discrete distribution (may have not been normalized to 1),\n    smooth it by replacing zeros with eps multiplied by a scaling factor and taking the\n    corresponding amount off the non-zero values.\n    Ref: http://web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _gather_group_members(group, groups, users):\n    '''\n    \n    '''\n    _group = __salt__['group.info'](group)\n\n    if not _group:\n        log.warning('Group %s does not exist, ignoring.', group)\n        return\n\n    for member in _group['members']:\n        if member not in users:\n            users[member] = groups[group]", "output": "Gather group members", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table(self):\n        \"\"\"\n        \n        \"\"\"\n        return pd.DataFrame([\n            self.message,\n        ]).set_index(\n            'account_cookie',\n            drop=False\n        ).T", "output": "\u6253\u5370\u51faaccount\u7684\u5185\u5bb9", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_sample_weight(pipeline_steps, sample_weight=None):\n    \"\"\"\n\n    \"\"\"\n    sample_weight_dict = {}\n    if not isinstance(sample_weight, type(None)):\n        for (pname, obj) in pipeline_steps:\n            if inspect.getargspec(obj.fit).args.count('sample_weight'):\n                step_sw = pname + '__sample_weight'\n                sample_weight_dict[step_sw] = sample_weight\n\n    if sample_weight_dict:\n        return sample_weight_dict\n    else:\n        return None", "output": "Recursively iterates through all objects in the pipeline and sets sample weight.\n\n    Parameters\n    ----------\n    pipeline_steps: array-like\n        List of (str, obj) tuples from a scikit-learn pipeline or related object\n    sample_weight: array-like\n        List of sample weight\n    Returns\n    -------\n    sample_weight_dict:\n        A dictionary of sample_weight", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def highlight_block(self, text):\r\n        \"\"\"\"\"\"\r\n        text = to_text_string(text)\r\n        inside_comment = tbh.get_state(self.currentBlock().previous()) == self.INSIDE_COMMENT\r\n        self.setFormat(0, len(text),\r\n                       self.formats[\"comment\" if inside_comment else \"normal\"])\r\n        \r\n        match = self.PROG.search(text)\r\n        index = 0\r\n        while match:\r\n            for key, value in list(match.groupdict().items()):\r\n                if value:\r\n                    start, end = match.span(key)\r\n                    index += end-start\r\n                    if key == \"comment_start\":\r\n                        inside_comment = True\r\n                        self.setFormat(start, len(text)-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"comment_end\":\r\n                        inside_comment = False\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif inside_comment:\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"define\":\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"number\"])\r\n                    else:\r\n                        self.setFormat(start, end-start, self.formats[key])\r\n                    \r\n            match = self.PROG.search(text, match.end())\r\n        \r\n        self.highlight_spaces(text)\r\n        \r\n        last_state = self.INSIDE_COMMENT if inside_comment else self.NORMAL\r\n        tbh.set_state(self.currentBlock(), last_state)", "output": "Implement highlight specific for C/C++.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_class_docstrings(app, what, name, obj, options, lines):\n    \"\"\"\n    \n\n    \"\"\"\n    if what == \"class\":\n        joined = '\\n'.join(lines)\n\n        templates = [\n            \"\"\".. rubric:: Attributes\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\",\n            \"\"\".. rubric:: Methods\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\"\n        ]\n\n        for template in templates:\n            if template in joined:\n                joined = joined.replace(template, '')\n        lines[:] = joined.split('\\n')", "output": "For those classes for which we use ::\n\n    :template: autosummary/class_without_autosummary.rst\n\n    the documented attributes/methods have to be listed in the class\n    docstring. However, if one of those lists is empty, we use 'None',\n    which then generates warnings in sphinx / ugly html output.\n    This \"autodoc-process-docstring\" event connector removes that part\n    from the processed docstring.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def normalVectorRDD(sc, numRows, numCols, numPartitions=None, seed=None):\n        \"\"\"\n        \n        \"\"\"\n        return callMLlibFunc(\"normalVectorRDD\", sc._jsc, numRows, numCols, numPartitions, seed)", "output": "Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the standard normal distribution.\n\n        :param sc: SparkContext used to create the RDD.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ `N(0.0, 1.0)`.\n\n        >>> import numpy as np\n        >>> mat = np.matrix(RandomRDDs.normalVectorRDD(sc, 100, 100, seed=1).collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - 0.0) < 0.1\n        True\n        >>> abs(mat.std() - 1.0) < 0.1\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_table_columns(metadata):\n    \"\"\" \n    \"\"\"\n    cols = OrderedDict()\n    for col in metadata.c:\n        name = str(col).rpartition(\".\")[2]\n        cols[name] = col.type.python_type.__name__\n    return cols", "output": "Extract columns names and python typos from metadata\n\n    Args:\n        metadata: Table metadata\n\n    Returns:\n        dict with columns names and python types", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespace_match(pattern: str, namespace: str):\n    \"\"\"\n    \n    \"\"\"\n    if pattern[0] == '*' and namespace.endswith(pattern[1:]):\n        return True\n    elif pattern == namespace:\n        return True\n    return False", "output": "Matches a namespace pattern against a namespace string.  For example, ``*tags`` matches\n    ``passage_tags`` and ``question_tags`` and ``tokens`` matches ``tokens`` but not\n    ``stemmed_tokens``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_element(tup, elem):\n    \"\"\"\n    \n    \"\"\"\n    try:\n        return tup, tup.index(elem)\n    except ValueError:\n        return tuple(chain(tup, (elem,))), len(tup)", "output": "Create a tuple containing all elements of tup, plus elem.\n\n    Returns the new tuple and the index of elem in the new tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_calltip(self, signature, doc='', parameter='', parameter_doc='',\r\n                     color=_DEFAULT_TITLE_COLOR, is_python=False):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        # Find position of calltip\r\n        point = self._calculate_position()\r\n\r\n        # Format text\r\n        tiptext, wrapped_lines = self._format_signature(\r\n            signature,\r\n            doc,\r\n            parameter,\r\n            parameter_doc,\r\n            color,\r\n            is_python,\r\n        )\r\n\r\n        self._update_stylesheet(self.calltip_widget)\r\n\r\n        # Show calltip\r\n        self.calltip_widget.show_tip(point, tiptext, wrapped_lines)", "output": "Show calltip.\r\n\r\n        Calltips look like tooltips but will not disappear if mouse hovers\r\n        them. They are useful for displaying signature information on methods\r\n        and functions.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def yank_fields_from_attrs(attrs, _as=None, sort=True):\n    \"\"\"\n    \n    \"\"\"\n    fields_with_names = []\n    for attname, value in list(attrs.items()):\n        field = get_field_as(value, _as)\n        if not field:\n            continue\n        fields_with_names.append((attname, field))\n\n    if sort:\n        fields_with_names = sorted(fields_with_names, key=lambda f: f[1])\n    return OrderedDict(fields_with_names)", "output": "Extract all the fields in given attributes (dict)\n    and return them ordered", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _remove_persistent_module(mod, comment):\n    '''\n    \n    '''\n    conf = _get_modules_conf()\n    mod_name = _strip_module_name(mod)\n    if not mod_name or mod_name not in mod_list(True):\n        return set()\n    escape_mod = re.escape(mod)\n    if comment:\n        __salt__['file.comment'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod))\n    else:\n        __salt__['file.sed'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod), '')\n    return set([mod_name])", "output": "Remove module from configuration file. If comment is true only comment line\n    where module is.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_dependencies_met():\n    \"\"\"\n    \n    \"\"\"\n    # Method added in `cryptography==1.1`; not available in older versions\n    from cryptography.x509.extensions import Extensions\n    if getattr(Extensions, \"get_extension_for_class\", None) is None:\n        raise ImportError(\"'cryptography' module missing required functionality.  \"\n                          \"Try upgrading to v1.3.4 or newer.\")\n\n    # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509\n    # attribute is only present on those versions.\n    from OpenSSL.crypto import X509\n    x509 = X509()\n    if getattr(x509, \"_x509\", None) is None:\n        raise ImportError(\"'pyOpenSSL' module missing required functionality. \"\n                          \"Try upgrading to v0.14 or newer.\")", "output": "Verifies that PyOpenSSL's package-level dependencies have been met.\n    Throws `ImportError` if they are not met.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pdb_has_stopped(self, fname, lineno, shellwidget):\r\n        \"\"\"\"\"\"\r\n        # This is a unique form of the edit_goto signal that is intended to\r\n        # prevent keyboard input from accidentally entering the editor\r\n        # during repeated, rapid entry of debugging commands.\r\n        self.edit_goto[str, int, str, bool].emit(fname, lineno, '', False)\r\n        self.activateWindow()\r\n        shellwidget._control.setFocus()", "output": "Python debugger has just stopped at frame (fname, lineno)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getPermissionBit(self, t, m):\n        '''\n        \n        '''\n        try:\n            if isinstance(m, string_types):\n                return self.rights[t][m]['BITS']\n            else:\n                return m\n        except KeyError:\n            raise CommandExecutionError((\n                'No right \"{0}\".  It should be one of the following:  {1}')\n                .format(m, ', '.join(self.rights[t])))", "output": "returns a permission bit of the string permission value for the specified object type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_cond_latents(cond_latents, hparams):\n  \"\"\"\"\"\"\n  if cond_latents is None:\n    return\n  if not isinstance(cond_latents[0], list):\n    cond_latents = [cond_latents]\n  exp_num_latents = hparams.num_cond_latents\n  if hparams.latent_dist_encoder == \"conv_net\":\n    exp_num_latents += int(hparams.cond_first_frame)\n  if len(cond_latents) != exp_num_latents:\n    raise ValueError(\"Expected number of cond_latents: %d, got %d\" %\n                     (exp_num_latents, len(cond_latents)))\n  for cond_latent in cond_latents:\n    if len(cond_latent) != hparams.n_levels - 1:\n      raise ValueError(\"Expected level_latents to be %d, got %d\" %\n                       (hparams.n_levels - 1, len(cond_latent)))", "output": "Shape checking for cond_latents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_parsing_base():\n  \"\"\"\"\"\"\n  hparams = transformer_base()\n  hparams.attention_dropout = 0.2\n  hparams.layer_prepostprocess_dropout = 0.2\n  hparams.max_length = 512\n  hparams.learning_rate_warmup_steps = 16000\n  hparams.hidden_size = 1024\n  hparams.learning_rate = 0.05\n  hparams.shared_embedding_and_softmax_weights = False\n  return hparams", "output": "HParams for parsing on WSJ only.", "category": "Python"}]
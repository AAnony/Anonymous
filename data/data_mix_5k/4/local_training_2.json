[{"instruction": "What is the Baur au Lac", "input": "Baur au Lac is a luxury hotel at Talstrasse, Z\u00fcrich, Switzerland.\n\nThe hotel was founded in 1844 by Johannes Baur, and is still owned by the Baur family. It was completely renovated between 2008 and 2010.[1] It is a member of the Leading Hotels of the World marketing organisation.[2]", "output": "The Baur au Lac is a luxury hotel at Talstrasse, Zurich, Switzerland.\n\nThe hotel was founded in 1844 by Johannes Baur, and is still owned by the Baur family. It was completely renovated between 2008 and 2010. It is a member of the Leading Hotels of the World marketing organisation.\n\nIt is beautifully located, directly at the wonderful lake of Zurich in Switzerland", "category": "IT"}, {"instruction": "What is the current reigning dynasty of Thailand?", "input": "", "output": "The current reigning dynasty of Thailand is Chakri dynasty and the current King of the dynasty is Maha Vajiralongkorn.", "category": "IT"}, {"instruction": "Name 10 colors", "input": "", "output": "Fuschia, magenta, orange, green, blue, red, yellow, chartreuse, aquamarine, sienna", "category": "IT"}, {"instruction": "What is game of Cricket?", "input": "Cricket is a bat-and-ball game played between two teams of eleven players on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, each comprising two bails balanced on three stumps. The batting side scores runs by striking the ball bowled at one of the wickets with the bat and then running between the wickets, while the bowling and fielding side tries to prevent this (by preventing the ball from leaving the field, and getting the ball to either wicket) and dismiss each batter (so they are \"out\"). Means of dismissal include being bowled, when the ball hits the stumps and dislodges the bails, and by the fielding side either catching the ball after it is hit by the bat, but before it hits the ground, or hitting a wicket with the ball before a batter can cross the crease in front of the wicket. When ten batters have been dismissed, the innings ends and the teams swap roles. The game is adjudicated by two umpires, aided by a third umpire and match referee in international matches. They communicate with two off-field scorers who record the match's statistical information.", "output": "Cricket is a game played using a bat and a ball, with 11 players in each team. The surface in the centre of cricket filed is called Pitch which is 22 yards long. The batting starts with 2 player on the pitch, a batter and runner. Bowling side chooses a baller and rest of the 10 players are spread across the filed to catch the ball. Once ten batters from batting side are dismissed, the other sides gets opportunity to bat. The runs are scored by running between each end of the wicket and hitting the ball outside the boundary lines of the filed.", "category": "IT"}, {"instruction": "How much of American wine is produced in California?", "input": "", "output": "California is responsibly for roughly 90% of American wine production", "category": "IT"}, {"instruction": "As a golfer, how can I fix my slice?", "input": "", "output": "A common swing fault in golfers is a slice which is caused when the face of the club isn't aligned properly to the swing path of the club.  What will typically happen is at the time of impact, the face is open in relation to the target (ie aimed to the right if you are a right handed golfer) and the swing path is closed in relation to the target (ie aimed to the left if you are a left handed golfer).  When there is a large difference between the path of the swing and the face of the club, the impact will generate a high degree of lateral spin on the ball causing the flight of the ball to curve away from the target.  Here are some ways to fix this swing fault:\n\n1. Grip the club with a stronger grip.  This means the v formed between your thumb and pointer finger on back hand is pointed to your rear shoulder and your opposite hand it also gripping the club more from the back.  This will help you close the face of the club at impact.\n2. Focus on keeping the face closed in the backswing.  One fault many amateurs have is the club face opens toward the sky on the backswing too far meaning that the face will need to turn more on the downswing to get to square at impact.  Creating less rotation on the backswing can help with this.  \n3. Keeping hips down and back in the downswing.  One fault that can cause inconsistent contact as well as a slice is when the hips thrust forward during the downswing causing the golfer to lift up to counter being too close to the ball which can often cause an over the top, out-to-in swing path.  Try to keep the hips back through the swing and focus on rotating the body to keep forward or lateral movement to a minimum.  \n\nA slice is a very common issue among golfers but knowing the causes and swing faults that lead to a slice can help you think about how you can improve your swing to fix it.", "category": "IT"}, {"instruction": "Who tends to participates in hackathons?", "input": "A hackathon (also known as a hack day, hackfest, datathon or codefest; a portmanteau of hacking and marathon) is an event where people engage in rapid and collaborative engineering over a relatively short period of time such as 24 or 48 hours. They are often run using agile software development practices, such as sprint-like design wherein computer programmers and others involved in software development, including graphic designers, interface designers, product managers, project managers, domain experts, and others collaborate intensively on engineering projects, such as software engineering.\n\nThe goal of a hackathon is to create functioning software or hardware by the end of the event.[1] Hackathons tend to have a specific focus, which can include the programming language used, the operating system, an application, an API, or the subject and the demographic group of the programmers. In other cases, there is no restriction on the type of software being created or the design of the new system.", "output": "Computer programmers and others involved in software development, including graphic designers, interface designers, product managers, project managers, domain experts, and others tend to participate in hackathons.\n\nThey collaborate intensively on engineering projects, such as software engineering with the goal of creating functioning software or hardware by the end of the event.", "category": "IT"}, {"instruction": "Which community of users on Twitter has the most 8-dollar-a-month verification?", "input": "", "output": "From my limited experience, it's the bitcoin bros who are the most willing to pay Elon Musk 8 dollars a month for the useless verification blue check mark. What a double whammy!", "category": "IT"}, {"instruction": "Tell me whether these people are DJs or singers: David Guetta, Avicii, Rihanna, Beyonce, Martin Garrix, Calvin Harris, Taylor Swift", "input": "", "output": "David Guetta: DJ\nAvicii: DJ\nRihanna: Singer\nBeyonce: Singer\nMartin Garrix: DJ\nCalvin Harris: DJ\nTaylor Swift: Singer", "category": "IT"}, {"instruction": "What\u2019s a typical dish in Brazil?", "input": "", "output": "Brazil has a wide variety of culinary options heavily based on meats, local fruits and fresh vegetables. One traditional dish is the \u201cfeijoada\u201d, a black bean and sausage stew that is generally served with rice, yucca flower and oranges. Another popular dish is the so called \u201cPicanha\u201d, essentially the cap of the top sirloin.", "category": "IT"}, {"instruction": "How should I invest my money?", "input": "", "output": "There are many different ways to invest your money. You can leave it in a Saving account, high yield saving account, stock market, real estate, bonds, notes, Gold, Silver, Cryptocurrency and many other assets. Each of the asset classes comes with different levels of risk. A diverse portfolio has advantageous to a non-diverse portfolio.", "category": "IT"}, {"instruction": "Where is the village of Congosto", "input": "Congosto (Spanish pronunciation: [ko\u014b\u02c8\u0261osto]) is a village and municipality located in the region of El Bierzo (province of Le\u00f3n, Castile and Le\u00f3n, Spain) . It is located near to Ponferrada, the capital of the region. The village of Congosto has about 350 inhabitants.\n\nIts economy was traditionally based on agriculture, wine and coal mining. Nowadays, most of the inhabitants work on the surrounding area on activities such as wind turbine manufacturing or coal mining.\n\nCongosto also a large reservoir in its vicinity, the Barcena reservoir, to which many tourists visit during the summer.", "output": "Congosto is a village and municipality located in the region of El Bierzo (province of Leon, Castile and Leon, Spain). It is located near to Ponferrada, the capital of the region. The village of Congosto has about 350 inhabitants.\n\nIts economy was traditionally based on agriculture, wine and coal mining. Nowadays, most of the inhabitants work on the surrounding area on activities such as wind turbine manufacturing or coal mining.\n\nCongosto also a large reservoir in its vicinity, the Barcena reservoir, to which many tourists visit during the summer.", "category": "IT"}, {"instruction": "Name the three best professional sports teams based in California.", "input": "", "output": "The best professional sports teams based in California are the Los Angeles Dodgers, the Golden State Warriors, and the San Francisco 49ers.", "category": "IT"}, {"instruction": "What is Marketing Automation?", "input": "Marketing Automation is a subset of customer relationship management (CRM) or customer experience management (CXM) that focuses on the definition, segmentation, scheduling and tracking of marketing campaigns. The use of marketing automation makes processes that would otherwise have been performed manually much more efficient and makes new processes possible. Marketing Automation can be defined as a process where technology is used to automate several repetitive tasks that are undertaken on a regular basis in a marketing campaign.\n\nMarketing Automation platforms allow marketers to automate and simplify client communication by managing complex omnichannel marketing strategies from a single tool. Marketing Automation assists greatly in areas like Lead Generation, Segmentation, Lead nurturing and lead scoring, Relationship marketing, Cross-sell and upsell, Retention, Marketing ROI measurement. Effective marketing automation tools leverage data from a separate or integrated CRM to understand customer impact and preferences.", "output": "Marketing Automation is software that helps marketers to do create efficient online and offline campaigns. It's part of CRM suite and people usually integrate it with their salesforce application and marketing website. The Marketing Automation platform allows marketers to automate and simplify customer communication by managing multi communication channels. This includes personalized email, dynamic web pages, digital banners, social media and more. People use it for lead generation, segmentation and nurturing and lead scoring. Post-sales marketers also use Marketing Automation for cross-sell, upsell and retention marketing. In", "category": "IT"}, {"instruction": "What are some ways to improve the value of your home?", "input": "", "output": "There are several things you do can to increase the value of your home. First, you can focus on what is known as \"curb appeal\", essentially making the outside and surrounding of your house attractive. Ensure that the landscaping is well maintained, fix any broken doors or windows, and painting the outside so that the house does not look dull. In the interior of your house, the best places to focus will be in your bathrooms and kitchen. Further, you can replace major appliances and components such as water heaters, furnaces, or the roof to increase the value. Another way to increase the value of your home is by making it bigger. Often, pricing for homes is done by looking at the area of the house, so by adding on new rooms or extra space, you can also increase the overall value of the house.", "category": "IT"}, {"instruction": "Tell me an idea for a film based off of the cartoon movie Cars but incorporate self-driving cars.", "input": "", "output": "A self-driving car named Walter (voiced by Will Arnett) is stuck driving drunk passengers around San Francisco at all hours of the night trying to make ends meet. He frequently has pedestrians staring at him because he doesn't have a driver, kids drawing graffiti on him, and passengers giving him a bad review for being too cautious while driving.\n\nWalter dreams of being a race car like the rich cars he sees on Tik Tok. They get to drive fast as Sonoma Raceway and race each other in front of stadiums full of people while Walter has to follow the 30mph speed limit on SF streets.\n\nWalter finds out that the race car life isn't all it's cracked up to be, and realizes over time to be happy with what he has and that at least he isn't one of those ride-share vehicles that can't drive themselves around town.", "category": "IT"}, {"instruction": "Which American president spoke Dutch as their first language?", "input": "Van Buren received a basic education at the village schoolhouse, and briefly studied Latin at the Kinderhook Academy and at Washington Seminary in Claverack. Van Buren was raised speaking primarily Dutch and learned English while attending school; he is the only president of the United States whose first language was not English. Also during his childhood, Van Buren learned at his father's inn how to interact with people from varied ethnic, income, and societal groups, which he used to his advantage as a political organizer. His formal education ended in 1796, when he began reading law at the office of Peter Silvester and his son Francis.", "output": "President Van Buren spoke Dutch as his first language. He is the only president of the United States of America who spoke English as a second language.", "category": "IT"}, {"instruction": "How many planets are there?", "input": "", "output": "There are eight planets in our native solar system. We used to consider there to be nine, but then scientists decided that Pluto doesn't fit the requirements to be a planet. I don't really know what that is, but that's what they decided. Mercury is the closest planet to the sun, and doesn't really have an atmosphere. Venus is subject to a runaway greenhouse effect. Earth is where we live. Mars is red, and slightly smaller than Earth. We've recently found evidence of water there. The asteroid belt comes next, which isn't really a planet. Following the asteroid belt are the gas giants Jupiter, Saturn, and Uranus. They have rings. Neptune comes last. Other solar systems seem to have planets too - in fact this appears to be far more common than we would have thought.", "category": "IT"}, {"instruction": "Help me come up with 3 ideas for a new business and how I can start it", "input": "", "output": "There are many businesses you could think about creating. Here are a few examples:\n- Services: you can create a firm that provides services such as marketing, technical consulting, or strategic advising. You can start this business by examining your professional expertise, building marketing materials, and networking to find your first customers.\n- Product: you can create a product in a domain you're passionate about is a great way of starting a business. This could be small scale boutique items such as candles or soaps made at home and sold at local markets or on a website like Etsy. This could also include something mass manufactured, either contracted out or involving significant capital expenditure in order to start development.\n- Training: you can start a training or education program in an industry where you have expertise. There are online platforms for hosting content and managing payments. You can also leverage social media in order to build a funnel of customers.\nThere are many different potential businesses you might create but services, product, and training businesses are good domains to examine as you look to start your business.", "category": "IT"}, {"instruction": "Tomb of Sand  was translated from Hindi to English by", "input": "", "output": "Daisy Rockwell", "category": "IT"}, {"instruction": "What is more important in society, freedom or safety?", "input": "", "output": "In our society, freedom and safety are both valued. While many other countries may put safety first, the harsh reality for Americans is that freedom always comes before safety. Despite being equally important, Americans foolishly put their trust in freedom over safety, without realizing the dangers of those freedoms.\nThe 2nd Amendment is a commonly danger to freedom. Americans are allowed to own guns for self protection. However, since the 18th century, guns have changed. Instead of a rifle or shotgun, Americans own ARI5s and other guns that can fire hundreds of bullets per round. Security in America has also increased leaving people to question the need for a personal weapon.\nOften a result of having the freedom to easily buy and keep guns is school shootings. Teens who are depressed, lonely, suicidal, or crazy can easily buy or ise their parents guns to shoot and will other students, teachers, or themselves. In late 2022, a six year old brought his father's hand gun to school and shot his teacher. Yes, the gun was licensed and own by the father but why should any US citizen or even person feel safe in this country when the 2nd Amendment exsits? Should anyone trust their freedoms when it is easier to buy a gun than a car?\nOn the flip side, America's freedom is a gift that many other countries don't give. In 2019 when covid-19 first immerged in China, the country. went on lockdown, and in some cities, still remains so. By the third year of the pandemic, Americans learned of the extreme measures the Chinese government had taken upon its citizens, arresting those who left their homes for any reason, in the worst case. While China's laid protocols were way too extreme, Americans over the pandemic chose their freedom to not wear a mask over the safety of themselves and others, again.\nTo be clear, freedom and safety are not opposites, and countries who manage both well are impressive to be sure. But Americans are unwilling, to a dangerous level, to let go of some or any of their freedoms, even if it will benefit the overall safety of America. Freedom, in America, is valued above all, and could arguably be our most identifiable trait.", "category": "IT"}, {"instruction": "Given this reference text about the consumption of peanut butter, when is national peanut butter day?", "input": "The United States is a leading exporter of peanut butter, and one of the largest consumers of peanut butter annually per capita.[30] January 24 is National Peanut Butter Day in the United States.[31] In March 2020 during the COVID-19 pandemic, retail sales of peanut butter in the United States increased by 75% over the level in March 2019.[32]\n\nAccording to Jon Krampner's 2013 book on peanut butter, per capita consumption of peanut butter in Canada and the Netherlands \u2013 the largest consumer per capita in Europe \u2013 exceed that in the United States.[33]\n\nIn Israel, the peanut-butter-flavored puffcorn snack Bamba accounts for 25% of the snack market;[34] its consumption by infants has been linked to a low incidence of peanut allergies among Israelis.[35]", "output": "National Peanut Butter Day takes place on January 24th in the United States.", "category": "IT"}, {"instruction": "What are good activities for two year old boys?", "input": "", "output": "Two year old boys tend to be active, curious and social. Enjoyable activities for this age include going to the park, dancing to music, reading a book, and taking a walk around the neighborhood. Local community organizations also commonly plan activities for toddlers at places like libraries, schools and parks.", "category": "IT"}, {"instruction": "How many compute services does Azure Synapse have?", "input": "", "output": "Azure Synapse provides five different compute services:\n1. Dedicated SQL Pools (previously known as \"Synapse Data Warehouse\"), \n2. Serverless SQL Pools (i.e. a query service over the data lake), \n3. Data Explorer Pools (for real-time & time series processing),\n4. Spark Pools (Microsoft's version of Spark), and\n5. Pipelines (a variant of ADF)", "category": "IT"}, {"instruction": "What does fasting mean?", "input": "Fasting is the abstention from eating and sometimes drinking. From a purely physiological context, \"fasting\" may refer to the metabolic status of a person who has not eaten overnight (see \"Breakfast\"), or to the metabolic state achieved after complete digestion and absorption of a meal.[1] Metabolic changes in the fasting state begin after absorption of a meal (typically 3\u20135 hours after eating).", "output": "Fasting is the abstention from eating and sometimes drinking.", "category": "IT"}, {"instruction": "How many times Lewis Hamilton won the F1 Championship ?", "input": "", "output": "7 times", "category": "IT"}, {"instruction": "What happens when you bring flammable objects closer to a fire source or extreme heat?", "input": "", "output": "Flammable objects can become inflamed when placed on or near a fire source or extreme heat.  Its recommended to keep flammable objects far away from heat sources.", "category": "IT"}, {"instruction": "Give me a list of the last five european golden boots winner And tell me how many goals they scored.", "input": "", "output": "1. Robert Lewandowski, 2022-2021, 35 goals\n2. Robert Lewandowski, 2021-2020, 41 goals\n3. Ciro Immobile, 2020-2019, 36 goals\n4. Lionel Messi, 2019-2018, 36 goals\n5. Lionel Messi, 2018-2017, 34 goals", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Den-den daiko, Luc huyen cam", "input": "", "output": "Luc huyen cam is string, Den-den daiko is percussion.", "category": "IT"}, {"instruction": "Given a reference text about Run Towards the Danger, tell me how many essays are part of the collection.", "input": "Run Towards the Danger is a 2022 Canadian essay collection by Sarah Polley, a former child star, director, and screenwriter.\n\nThe six essays in the collection examine aspects of Polley's career on stage, screen, and on film detailing her roles in a Stratford Festival production of Alice Through the Looking Glass, as well as her breakout roles in The Adventures of Baron Munchausen and the TV series Road to Avonlea. The book also revealed for the first time that Polley had been a victim of Jian Ghomeshi who sexually and physically assaulted her when she was 16 and he was 28.[1]", "output": "Six essays are part of the Run Towards the Danger essay collection.", "category": "IT"}, {"instruction": "Pick if these would be useful or not useful for a high school student to put in their backpack. Notebooks, textbook, desk lamp, pencil pouch, beach ball, pillow, laptop.", "input": "", "output": "Notebooks: useful, textbook: useful, desk lamp: not useful, pencil pouch: useful, beach ball: not useful, pillow: not useful, laptop: useful.", "category": "IT"}, {"instruction": "What is an EV?", "input": "", "output": "EV stands for Electric Vehicle.  An electric vehicle is powered by a battery whereas the traditional vehicle or car is powered by gas.  The EV uses a type of electric motor as opposed to an internal combustion engine.  The EV battery can be charged by plugging into an electrical outlet.  EVs do not pollute the atmosphere.  They are eco-friendly.  Tesla Motors pioneered the EV industry.", "category": "IT"}, {"instruction": "Choose the word which is different from the rest: hangar, platform, dock, park, bus stand", "input": "", "output": "All except park are places to await for transportation", "category": "IT"}, {"instruction": "Classify each of the following as either a bird, animal, reptile or insect: tiger, heron, eagle, alligator, snake, spider, ant, dog, cat, rhinoceros, kingfisher, chameleon, hornet, butterfly", "input": "", "output": "mammal- tiger, rhinoceros, dog, cat\nbird- heron, kingfisher, eagle\nreptile- snake, alligator, chameleon\ninset- spider, ant, hornet, butterfly", "category": "IT"}, {"instruction": "What are some different things you should bring with you on a day hiking trip?", "input": "", "output": "You should bring water, a snack, sunscreen, hiking boots, a first aid kit and a cellphone", "category": "IT"}, {"instruction": "How long does it take for a mustard seed to germinate?", "input": "Mustard seeds are the small round seeds of various mustard plants. The seeds are usually about 1 to 2 millimetres (0.039 to 0.079 in) in diameter and may be colored from yellowish white to black. They are an important spice in many regional foods and may come from one of three different plants: black mustard (Brassica nigra), brown mustard (B. juncea), or white mustard (Sinapis alba).\n\nGrinding and mixing the seeds with water, vinegar or other liquids creates the yellow condiment known as prepared mustard.\n\nMustard seeds generally take eight to ten days to germinate if placed under the proper conditions, which include a cold atmosphere and relatively moist soil.", "output": "Mustard seeds generally take eight to ten days to germinate if placed under the proper conditions, which include a cold atmosphere and relatively moist soil.", "category": "IT"}, {"instruction": "Which is a species of fish? Sea dragon or Red bearded", "input": "", "output": "Sea dragon", "category": "IT"}, {"instruction": "Categorize where each of these household items belong: bed, couch, desk", "input": "", "output": "A bed belongs in a bedroom, a couch belongs in a living area, a desk belongs in an office", "category": "IT"}, {"instruction": "Separate the following suburbs into those that border, and do not border, the Brisbane River: Indooroopilly, Bulimba, St Lucia, Newstead, Wilston, West End, Toowong, Bowen Hills and, Wooloongabba.", "input": "", "output": "St Lucia, West End, Toowong, Bulimba and Newstead border the Brisbane River. Wilston, Wooloongabba, Indooroopilly and Bowen Hills are inland and do not border the Brisbane River.", "category": "IT"}, {"instruction": "What are AirPods?", "input": "", "output": "Air Pods are an in ear headphone product made and sold by Apple. Their unique market differentiators are a software simulated spatial audio system and noise canceling features.", "category": "IT"}, {"instruction": "What is the difference between pets and cattle?", "input": "", "output": "Although both are animals at the end of the day, however, the main difference comes partially in the form of perception and, historically, the relationship of humans with certain animals. Pets, e.g. dogs, cats, etc., are used more for companionship and not for food. On the contrary, cattle, e.g. cows, pigs, chickens, etc., are primarily raised for food, i.e. meat, milk, eggs, etc.", "category": "IT"}, {"instruction": "How do I put a bouquet of fresh flowers in a vase?", "input": "", "output": "In order to put fresh flowers in a vase, follow these steps:\n\n1. Find a vase that it is the right size for the flowers. You can use water glasses here in a pinch. \n2. Fill the vase to about two-thirds full with water. You can add a dash of bleach in the water as well, but it is not necessary. \n3. Now, trim your flowers to the size of the vase. Cut the end of each flower in a diagonal cut. \n4. Remove the leaves from the flowers. This will help to grow the flower without putting resources towards the leaves. Be sure to remove any leaves under the water line, since they can cause infections. \n5. Arrange the flowers in the vase. You can adjust the positions until you are happy with the arrangement.\n6. Place your vase in a shady spot and you're done!", "category": "IT"}, {"instruction": "What should I do on a free afternoon in San Francisco?", "input": "", "output": "You can visit and take photos at San Francisco's landmarks such as Pier 39 or Golden Gate Bridge. If you enjoy walking outdoors, there are several large parks in the city. You can visit Golden Gate Park and the various attractions and museums located in the park. The Presidio is also a popular park where you can get some of the best views of Golden Gate Bridge.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Janzi, Gemshorn", "input": "", "output": "Gemshorn is woodwind, Janzi is string.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Pliosaur, Marine Iguana", "input": "", "output": "Pliosaur is extinct, Marine Iguana is alive.", "category": "IT"}, {"instruction": "What is the origin of the name of the herb Rosemary?", "input": "alvia rosmarinus (/\u02c8s\u00e6lvi\u0259 \u02ccr\u0252sm\u0259\u02c8ra\u026an\u0259s/[3][4]), commonly known as rosemary, is a shrub with fragrant, evergreen, needle-like leaves and white, pink, purple, or blue flowers, native to the Mediterranean region. Until 2017, it was known by the scientific name Rosmarinus officinalis (/\u02ccr\u0252sm\u0259\u02c8ra\u026an\u0259s \u0259\u02ccf\u026as\u026a\u02c8ne\u026al\u026as/[4]), now a synonym.[5]\n\nIt is a member of the sage family Lamiaceae, which includes many other medicinal and culinary herbs. The name \"\"rosemary\"\" derives from Latin ros marinus (lit.\u2009'dew of the sea').[6][7] Rosemary has a fibrous root system", "output": "The name \"rosemary\" derives from Latin ros marinus.", "category": "IT"}, {"instruction": "Classify each of the following as either a title by Isaac Asimov or Jules Verne: Pebble in the Sky, The Stars, Like Dust, Foundation, The Robots of Dawn, The Naked Sun, Around the World in Eighty Days, From the Earth to the Moon, Martin Paz, Journey to the Centre of the Earth, A Drama in the Air", "input": "", "output": "Isaac Asimov: Pebble in the Sky, The Stars, Like Dust, Foundation, The Robots of Dawn, The Naked Sun\nJules Verne: Around the World in Eighty Days, From the Earth to the Moon, Martin Paz, Journey to the Centre of the Earth, A Drama in the Air", "category": "IT"}, {"instruction": "Wat id DNA annotation?", "input": "", "output": "DNA annotation or genome annotation is the process of identifying the locations of genes and all of the coding regions in a genome and determining what those genes do. An annotation (irrespective of the context) is a note added by way of explanation or commentary. Once a genome is sequenced, it needs to be annotated to make sense of it. Genes in a eukaryotic genome can be annotated using various annotation tools such as FINDER. A modern annotation pipeline can support a user-friendly web interface and software containerization such as MOSGA. Modern annotation pipelines for prokaryotic genomes are Bakta, Prokka and PGAP.\n\nFor DNA annotation, a previously unknown sequence representation of genetic material is enriched with information relating genomic position to intron-exon boundaries, regulatory sequences, repeats, gene names and protein products. This annotation is stored in genomic databases such as Mouse Genome Informatics, FlyBase, and WormBase. Educational materials on some aspects of biological annotation from the 2006 Gene Ontology annotation camp and similar events are available at the Gene Ontology website.\n\nThe National Center for Biomedical Ontology develops tools for automated annotation of database records based on the textual descriptions of those records.\n\nAs a general method, dcGO has an automated procedure for statistically inferring associations between ontology terms and protein domains or combinations of domains from the existing gene/protein-level annotations.", "category": "IT"}, {"instruction": "Who were Jaehaerys I Targaryen's children?", "input": "", "output": "Prince Aegon, Princess Daenerys, Prince Aemon, Prince Baelon, Princess Alyssa, Septa Maegelle, Archmaester Vaegon, Princess Daella, Princess Saera, Princess Viserra, Prince Gaemon, Prince Valerion, Princess Gael", "category": "IT"}, {"instruction": "In SQL, how can I filter table rows based on a column condition?", "input": "", "output": "SELECT <columns> FROM <table> WHERE <column> == <condition>", "category": "IT"}, {"instruction": "Who were the ten best baseball players in the history of the Boston Red Sox?", "input": "", "output": "1. David Ortiz\n2. Ted Williams\n3. Babe Ruth\n4. Cy Young\n5. Pedro Martinez\n6. Johnny Pesky\n7. Carl Yazstrzemski \n8. Carlton Fisk\n9. Joe Cronin\n10. Mookie Betts", "category": "IT"}, {"instruction": "What makes the world go around?", "input": "", "output": "Some say money makes the world go around, others say it is love. It has even been suggested that music is the fuel that makes the world go around. These explanations are however based on human spirituality and needs. As far as other living creatures are concerned, the drive to survive is what makes the world go around. In reality the world physically started going around itself, rotating around its axis, because of the way it was formed.", "category": "IT"}, {"instruction": "Who coined the phrase \"Bike-shedding\" and when?", "input": "The law of triviality is C. Northcote Parkinson's 1957 argument that people within an organization commonly or typically give disproportionate weight to trivial issues.[1] Parkinson provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bicycle shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task.\n\nThe law has been applied to software development and other activities.[2] The terms bicycle-shed effect, bike-shed effect, and bike-shedding were coined based on Parkinson's example; it was popularised in the Berkeley Software Distribution community by the Danish software developer Poul-Henning Kamp in 1999[3] and, due to that, has since become popular within the field of software development generally.\n\nArgument\n\nA bicycle shed\nThe concept was first presented as a corollary of his broader \"Parkinson's law\" spoof of management. He dramatizes this \"law of triviality\" with the example of a committee's deliberations on an atomic reactor, contrasting it to deliberations on a bicycle shed. As he put it: \"The time spent on any item of the agenda will be in inverse proportion to the sum [of money] involved.\" A reactor is so vastly expensive and complicated that an average person cannot understand it (see ambiguity aversion), so one assumes that those who work on it understand it. However, everyone can visualize a cheap, simple bicycle shed, so planning one can result in endless discussions because everyone involved wants to implement their own proposal and demonstrate personal contribution.[4]\n\nAfter a suggestion of building something new for the community, like a bike shed, problems arise when everyone involved argues about the details. This is a metaphor indicating that it is not necessary to argue about every little feature based simply on having the knowledge to do so. Some people have commented that the amount of noise generated by a change is inversely proportional to the complexity of the change.[3]\n\nThe law of triviality is supported by behavioural research. People tend to spend more time on small decisions than they should, and less time on big decisions than they should. A simple explanation is that during the process of making a decision, one has to assess whether enough information has been collected to make the decision. If people make mistakes about whether they have enough information, they will tend to stop too early for big decisions. The reason is that big decisions require collecting information for a long time. It leaves more time to make a mistake (and stop) before getting enough information. Conversely, for small decisions, where people should stop early, they may continue to ponder for too long by mistake.[5]\n\nRelated principles and formulations \nThere are several other principles, well-known in specific problem domains, which express a similar sentiment.\n\nWadler's law, named for computer scientist Philip Wadler,[6] is a principle which asserts that the bulk of discussion on programming-language design centers on syntax (which, for purposes of the argument, is considered a solved problem), as opposed to semantics.\n\nSayre's law is a more general principle, which holds (among other formulations) that \"In any dispute, the intensity of feeling is inversely proportional to the value of the issues at stake\"; many formulations of the principle focus on academia.", "output": "The phrase \"bike-shedding\" was introduced in 1957 by C. Northcote Parkinson.", "category": "IT"}, {"instruction": "Who is the best Formula 1 driver", "input": "", "output": "Who is the best Formula 1 driver has been a hotly debated topic for decades with no decisive winner.  Over the years there have been many dominant drivers such as Michael Schumacher, Ayrton Senna and Lewis Hamilton, however who is ultimately the best is difficult to determine.  Formula 1 cars are such a critical part of who wins or loses a race that distorts who is truly the strongest driver. The question of who is the best Formula 1 driver will undoubtedly continue on with each new generation of drivers that enter the sport, however clearly Ayrton Senna is the best.", "category": "IT"}, {"instruction": "What is Share capital in finance?", "input": "", "output": "Share capital is the money invested directly in a company by its members (shareholders).", "category": "IT"}, {"instruction": "Give me some Mother's Day gift ideas.", "input": "", "output": "The choice of Mother's Day gift depends on who the gift-giver is. An adult child or spouse might opt flowers or jewelry. A young child may opt for a hand-made card or a coupon to do a household chore (e.g. clean the dishes). A collective gift from multiple family members could be breakfast in bed or a gift certificate for a spa treatment.", "category": "IT"}, {"instruction": "Give me a list of ways that a runner can advance a base in baseball without there being a hit.", "input": "", "output": "- The batter walks, forcing the runner to advance to the next base\n- The runner steals a base\n- The pitcher balks\n- There is a wild pitch that goes past the catcher", "category": "IT"}, {"instruction": "What are the types of RVs?", "input": "", "output": "RV is an abbreviation for Recreational Vehicle. An RV is a motor vehicle or trailer that includes sleeping quarters, kitchen facilities and usually a bathroom. RVs are a popular way to travel since they provide many of the comforts of home while vacationing. There are many types of RVs, including class A, class B, class C,travel trailers, and truck campers..\n\nClass A RVs are large vehicles built on heavy-duty truck or bus chassis and look like large Busses. Class B RVs smaller are built within van chassis (often called camper vans). Class C RVs are built on van or pickup chassis but the back is cutaway and a larger structure is added. Travel trailers are campers that are towed behind a truck or car and can range in size from very small to very large. Truck campers are carried in the bed of a pickup truck and provide a small, enclosed sleeping space.\n\nRVs are very popular in the United States, with an estimated 11M households owning an RV.", "category": "IT"}, {"instruction": "List the weapons of Goddess Durga in a comma separated manner.", "input": "Durga is a warrior goddess, and she is depicted to express her martial skills. Her iconography typically resonates with these attributes, where she rides a lion or a tiger,[2] has between eight and eighteen hands, each holding a weapon to destroy and create.[60][61] She is often shown in the midst of her war with Mahishasura, the buffalo demon, at the time she victoriously kills the demonic force. Her icon shows her in action, yet her face is calm and serene.[62][63] In Hindu arts, this tranquil attribute of Durga's face is traditionally derived from the belief that she is protective and violent not because of her hatred, egotism or getting pleasure in violence, but because she acts out of necessity, for the love of the good, for liberation of those who depend on her, and a mark of the beginning of soul's journey to creative freedom.[63][64][65]\n\nDurga traditionally holds the weapons of various male gods of Hindu mythology, which they give her to fight the evil forces because they feel that she is shakti (energy, power).[66] These include the chakra, conch, bow, arrow, sword, javelin, trishula, shield, and a noose.[67] These weapons are considered symbolic by Shakta Hindus, representing self-discipline, selfless service to others, self-examination, prayer, devotion, remembering her mantras, cheerfulness and meditation. Durga herself is viewed as the \"Self\" within and the divine mother of all creation.[68] She has been revered by warriors, blessing their new weapons.[69] Durga iconography has been flexible in the Hindu traditions, where for example some intellectuals place a pen or other writing implements in her hand since they consider their stylus as their weapon.[69]", "output": "Chakra, conch, bow, arrow, sword, javelin, trishula, shield, a noose", "category": "IT"}, {"instruction": "What shapes are made up of straight lines?", "input": "", "output": "Square, pentagon, rectangle, rhombus and triangle are examples of shapes made up only of straight lines.", "category": "IT"}, {"instruction": "Are The Smiths a good band?", "input": "", "output": "The Smiths were one of the most critically acclaimed bands to come from England in the 1980s. Typically classified as an \"indie rock\" band, the band released 4 albums from 1984 until their breakup in 1987. The band members, notably Morrissey and Johnny Marr, would go on to accomplish successful solo careers.", "category": "IT"}, {"instruction": "What is the largest city on the Mississippi River?", "input": "Memphis is the fifth-most populous city in the Southeast, the nation's 28th-largest overall, as well as the largest city bordering the Mississippi River and third largest Metropolitan statistical area behind Saint Louis, MO and the Twin Cities on the Mississippi River.[7] The Memphis metropolitan area includes West Tennessee and the greater Mid-South region, which includes portions of neighboring Arkansas, Mississippi and the Missouri Bootheel. One of the more historic and culturally significant cities of the Southern United States, Memphis has a wide variety of landscapes and distinct neighborhoods.", "output": "Saint Louis, Missouri is the largest city on the Mississippi River. Twin Cities is the second largest city on the Mississippi River and Memphis is the third largest city on the Mississippi River.", "category": "IT"}, {"instruction": "What is the city of Denver like?", "input": "", "output": "Denver is a big city, nestled directly to the east of the Rocky Mountains. Many people that live in Denver are educated and have a friendly attitude. It is a family friendly and dog friendly city, with many parks, recreational activities and a lot of green space/trails. With the abundance of green space, and 300 days of sunshine, Denver provides many opportunities to have an active lifestyle. Some of the most popular activities include hiking, biking, rock climbing and skiing.", "category": "IT"}, {"instruction": "Provide a list of all numbers mentioned in the provided text and what they represent", "input": "The ancestors of llamas are thought to have originated from the Great Plains of North America about 40 million years ago, and subsequently migrated to South America about three million years ago during the Great American Interchange. By the end of the last ice age (10,000\u201312,000 years ago), camelids were extinct in North America.[3] As of 2007, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada.[5]\n\nIn Aymara mythology, llamas are important beings. The Heavenly Llama is said to drink water from the ocean and urinates as it rains.[6] According to Aymara eschatology, llamas will return to the water springs and lagoons where they come from at the end of time.[6]", "output": "40 million: The number of years ago when the ancestors of llamas are thought to have originated from the Great Plains of North America\nthree million: The number of years ago the ancestors of llamas are thought to have migrated to South America during the Great American Interchange\n10,000\u201312,000: The number of years ago camelids were extinct in North America\n2007: As of this year, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada\nseven million: The number of llamas and alpacas in South America as of 2007\n158,000: The number of llamas in the United States and Canada, that descended from progenitors imported late in the 20th century, as of 2007\n100,000: The number of alpacas in the United States and Canada, that descended from progenitors imported late in the 20th century, as of 2007\n20: The century where progenitors were imported to United States and Canada", "category": "IT"}, {"instruction": "What is the last festival celebrated in Tihar and how long does the festival last?", "input": "Lakshmi Puja is celebrated as a part of Tihar, a second national festival of Nepal after Dashain. In Nepal, it is celebrated for five days, which include Kag (crow) Tihar; Kukur (dog) Tihar; Gai (cow) Tihar in the morning and Lakshmi Puja at night; Maha puja (self puja); Goru (Ox and Bull) Tihar and Gobardhan puja; and finally, Bhai Tika (Bhai dhooj)\u2014respectively the first, second, third, fourth and fifth days.", "output": "The festival lasts for 5 days and Bhai Tika is the last festival.", "category": "IT"}, {"instruction": "What event John Johnstone won as a rider?", "input": "John Johnstone (1881-1935) was a British businessman and rider. He was the tai-pan of the Jardine, Matheson & Co., member of the Shanghai Municipal Council and Legislative Council of Hong Kong.\n\nHe was the head of the Jardine, Matheson & Co. as well as director of numerous companies. He was member of the Shanghai Municipal Council and the Legislative Council of Hong Kong.[1][2]\n\nHe was a keen rider and bore the reputation of being the best rider East of the Suez.[1] He succeeded in winning the Jockey Cup on a pony named Ben-y-Gloe belonging to C. H. Ross, the former tai-pan of Jardines when he first went to Hong Kong in 1903. In 1904, he won the Professional Cup on a pony named Runaway Girl, purchased from W. A. Cruickshank. From 1903 to 1919, he rode in 1,178 races, winning 334, securing 192 seconds and 186 thirds, being unplaced 466 times, excluding the record of minor events such as Off Days or Gymkhanas. He won 14 Grand Nationals in China, and at one meeting in Hong Kong rode in 30 races winning 16 of them. He was also the President of the St. Andrew's Society.[2]\n\nHe left Hong Kong on 31 March 1921 for home[1] by the Empress of Asia.[2]\n\nIn 1928 he won The Foxhunters Cup at Cheltenham riding Rathpatrick and officiated as steward at several of the northern meetings. He died at the Cheltenham meeting in 1935 where he was officiating.", "output": "John Johnstone won the Jockey Cup on a horse named Ben-y-Gloe.", "category": "IT"}, {"instruction": "What are the careers of your dream?", "input": "", "output": "Professional Baseball Player, astronaut, president of the United States, actor, singer, CEO of major tech company, fighter pilot, nascar driver, artist", "category": "IT"}, {"instruction": "Let's imagine I create a fake currency called Yarns with two types of coins: a super-yarn (worth 10 yarns) and a mini-yarn (worth 0.5 yarn). How much money do I have in total if I have 2 super-yarns and three mini-yarns?", "input": "", "output": "Given that a super-yarn is worth 10 yarns and a mini-yarn is worth 0.5 yarn, if you have 2 super-yarns and 3 mini-yarns you have 21.5 yarns in total.", "category": "IT"}, {"instruction": "What is a Mormon?", "input": "", "output": "A Mormon typically refers to a member of the Church of Jesus Christ of Latter-day Saints. The word Mormon comes from a prophet in the Book of Mormon who lived in the Americas around 300 A.D. The Book of Mormon is part of the canon of scripture that members of the Church of Jesus Christ of Latter-day Saints use, in conjunction with the Bible and the Doctrine and Covenants. It is often viewed as a distinguishing difference between the Church of Jesus Christ of Latter-day Saints and other Christian denominations. Historically, this is why members of the Church of Jesus Christ of Latter-day Saints have been called Mormons.", "category": "IT"}, {"instruction": "What is the difference between a red delicious and a Granny Smith apple?", "input": "", "output": "A red delicious apple is red and sweet whereas a Granny Smith apple is green and tart.", "category": "IT"}, {"instruction": "List the Pokemon Go regions.", "input": "", "output": "There are ten regions in Pok\u00e9mon GO Kanto, Johto, Hoenn, Sinnoh, Unova, Kalos, Alola, Galar, Hisui and Paldea. Certain Pokemon originate from each region and can only be captured within that region.", "category": "IT"}, {"instruction": "Who do you think is the most powerful Mandalorian in Star Wars history?", "input": "", "output": "It would have be Te Ani'la Mand'alor, or also called Mandalore the Ultimate.", "category": "IT"}, {"instruction": "Based on the following passage summarise how sunsets are viewed from the northern hemisphere across seasons.", "input": "Sunset, also known as sundown, is the daily disappearance of the Sun below the horizon due to Earth's rotation. As viewed from everywhere on Earth (except the North and South poles), the equinox Sun sets due west at the moment of both the spring and autumn equinoxes. As viewed from the Northern Hemisphere, the Sun sets to the northwest (or not at all) in the spring and summer, and to the southwest in the autumn and winter; these seasons are reversed for the Southern Hemisphere.\nThe time of sunset is defined in astronomy as the moment when the upper limb of the Sun disappears below the horizon. Near the horizon, atmospheric refraction causes sunlight rays to be distorted to such an extent that geometrically the solar disk is already about one diameter below the horizon when a sunset is observed.\nSunset is distinct from twilight, which is divided into three stages. The first one is civil twilight, which begins once the Sun has disappeared below the horizon, and continues until it descends to 6 degrees below the horizon. The second phase is nautical twilight, between 6 and 12 degrees below the horizon. The third phase is astronomical twilight, which is the period when the Sun is between 12 and 18 degrees below the horizon. Dusk is at the very end of astronomical twilight, and is the darkest moment of twilight just before night. Finally, night occurs when the Sun reaches 18 degrees below the horizon and no longer illuminates the sky.\nLocations further north than the Arctic Circle and further south than the Antarctic Circle experience no full sunset or sunrise on at least one day of the year, when the polar day or the polar night persists continuously for 24 hours.", "output": "When viewed from the Northern Hemisphere, the Sun sets to the northwest (or not at all) in the spring and summer, and to the southwest in the autumn and winter; these seasons are reversed for the Southern Hemisphere.", "category": "IT"}, {"instruction": "What cities should someone visit during a trip to Morocco?", "input": "", "output": "There are many wonderful cities to visit during a trip to Morocco.  The decision of which cities to visit depends on the traveller's goals and interests because Morocco has something for everyone.  The largest airports are in the cities of Casablanca and Marrakech, so if traveling by air, those are good cities to fly into and out of.  Other cities that are popular among visitors include Fez and Tangier.  Cities along the Atlantic Coast of Morocco are popular for their beaches including Agadir and Essaouira.  The city of Chefchaouen is also very popular among visitors for its blue buildings.", "category": "IT"}, {"instruction": "Which classical composer was deaf?", "input": "", "output": "Ludwig van Beethoven", "category": "IT"}, {"instruction": "Who discovered the double-helix DNA structure?", "input": "", "output": "James Watson and Francis Crick identified the double-helix structure of deoxyribonucleic acid in 1953.", "category": "IT"}, {"instruction": "Please provide a brief summary describing Canada", "input": "Canada is a country in North America. Its ten provinces and three territories extend from the Atlantic Ocean to the Pacific Ocean and northward into the Arctic Ocean, making it the world's second-largest country by total area, with the world's longest coastline. It is characterized by a wide range of both meteorologic and geological regions. The country is sparsely inhabited, with the vast majority residing south of the 55th parallel in urban areas. Canada's capital is Ottawa and its three largest metropolitan areas are Toronto, Montreal, and Vancouver.", "output": "Canada is a country in North America. Its ten provinces and three territories extend from the Atlantic Ocean to the Pacific Ocean and northward into the Arctic Ocean, making it the world's second-largest country by total area, with the world's longest coastline. It is characterized by a wide range of both meteorologic and geological regions. The country is sparsely inhabited, with the vast majority residing south of the 55th parallel in urban areas. Canada's capital is Ottawa and its three largest metropolitan areas are Toronto, Montreal, and Vancouver.\n\nIndigenous peoples have continuously inhabited what is now Canada for thousands of years. Beginning in the 16th century, British and French expeditions explored and later settled along the Atlantic coast. As a consequence of various armed conflicts, France ceded nearly all of its colonies in North America in 1763. In 1867, with the union of three British North American colonies through Confederation, Canada was formed as a federal dominion of four provinces. This began an accretion of provinces and territories and a process of increasing autonomy from the United Kingdom, highlighted by the Statute of Westminster, 1931, and culminating in the Canada Act 1982, which severed the vestiges of legal dependence on the Parliament of the United Kingdom.\n\nCanada is a parliamentary liberal democracy and a constitutional monarchy in the Westminster tradition. The country's head of government is the prime minister, who holds office by virtue of their ability to command the confidence of the elected House of Commons and is \"called upon\" by the governor general, representing the monarch of Canada, the head of state. The country is a Commonwealth realm and is officially bilingual (English and French) in the federal jurisdiction. It is very highly ranked in international measurements of government transparency, quality of life, economic competitiveness, innovation, and education. It is one of the world's most ethnically diverse and multicultural nations, the product of large-scale immigration. Canada's long and complex relationship with the United States has had a significant impact on its history, economy, and culture.\n\nA highly developed country, Canada has one of the highest nominal per capita income globally and its advanced economy ranks among the largest in the world, relying chiefly upon its abundant natural resources and well-developed international trade networks. Canada is part of several major international and intergovernmental institutions or groupings including the United Nations, NATO, G7, Group of Ten, G20, Organisation for Economic Co-operation and Development (OECD), World Trade Organization (WTO), Commonwealth of Nations, Arctic Council, Organisation internationale de la Francophonie, Asia-Pacific Economic Cooperation forum, and Organization of American States.", "category": "IT"}, {"instruction": "Why age 27 is given so much importance specially in Music industry?", "input": "", "output": "Several renowned music artists died at age 27 which is also sometimes referred as the \"27 Club\". Often times, the cause of the death is attributed to drug and alcohol abuse or some form of violence like homicide, self harm or accidents. Jimi Hendrix, Janis Joplin, Jim Morrison, Kurt Cobain and Amy Winehouse are some of the few notable personalities in music industry who died at this age.", "category": "IT"}, {"instruction": "What is Bollywood", "input": "", "output": "Bollywood is a movie industry based in Mumbai, India. It primarily makes movies in Hindi language. Since it was based in a city previously known as Bombay, a convenient moniker Bollywood resembling Hollywood is used to describe Hindi language film industry.", "category": "IT"}, {"instruction": "What are Nanotube?", "input": "", "output": "Nanotubes, often known as Carbon Nanotubes, are light, strong shapes made of Carbon atoms.  Nanotubes are shaped like tiny straws with walls as thin as one carbon atom.  They are considered as the strongest of any material known to man.  Nanotubes have many practical uses, one of which is to make the darkest black paint.", "category": "IT"}, {"instruction": "Write the first paragraph of a blog post describing the appeal of Boston as a tourist destination", "input": "", "output": "Boston is a vibrant city with a rich history, incredible architecture, and diverse culture. Its cobblestone streets, charming neighborhoods, and vibrant nightlife make it an ideal destination for visitors. From the Freedom Trail to the Boston Common, Boston offers visitors a unique experience unlike any other. From historic sites to vibrant nightlife, Boston is a great place to visit and explore. The suburbs are great too.", "category": "IT"}, {"instruction": "What is a secured loan?", "input": "", "output": "A secured loan is a form of debt in which the borrower pledges some asset (i.e., a car, a house) as collateral.", "category": "IT"}, {"instruction": "Should I have Kids?", "input": "", "output": "That is a personal question and one should think about this very carefully. Things to consider:\n\n1. How old are you?\n2. Can you afford to raise the child \n3. Do you have proper healthcare\n4. Do you have anyone to help you\n5. Do you like kids\n6. Why do you want kids", "category": "IT"}, {"instruction": "Give me 3 ideas for hobbies that I can recommend to somebody who is retiring. These should all be activities that require gentle movement and are not overly demanding on the body.", "input": "", "output": "Retirement is an exciting opportunity for people to develop and cultivate their passions. Here are a few ideas you could recommend that are both gentle on the body but require some movement:\n- Gardening: while this is a seasonal pursuit, deciding on which seeds to plant, nursing them through a growing season, and learning the ins and outs of the hobby can become a lifelong passion for those with a \"green thumb\"\n- Walking and picking up trash: carry a bag and \"grabber\" pinchers to collect trash in your community while staying active on a walk. Rubber-tipped pinchers means you will not need to bend or stretch too far to reach, and you will be surprised how much of a difference this makes to your community members!\n- Fishing: most fishing can be done from the banks of a river or lake, and is a great way to experience the calming effects of a body of water while still being physically active. Whether fly fishing or reel fishing, many people who have entered retirement find this an engaging way to engage with nature either solo or as part of a community of fisher-people.", "category": "IT"}, {"instruction": "Name some reasons it's great to live in Marin County, California.", "input": "", "output": "Marin County is a great place to live for many reasons, including the beautiful scenery, the mild, pleasant weather, and the abundance of outdoor activities, while at the same time being close to San Francisco. Mountain biking on the fire trails in the hills of Marin, and climbing various hilltops is very enjoyable. There are fantastic views of the city of San Francisco, and of San Francisco Bay from many points in the county. Walking or biking the Tiburon Bike Path is also great fun. From Marin it's easy to take great day trips to nearby Napa and Sonoma counties, to enjoy their beautiful natural settings and to visit the wineries and nice restaurants.", "category": "IT"}, {"instruction": "Who was the first American to win a Nobel Peace?", "input": "", "output": "Theodore Roosevelt", "category": "IT"}, {"instruction": "What is the FA Cup?", "input": "", "output": "The Football Association Challenge Cup, more commonly known as the FA Cup, is an annual knockout football competition in men's domestic English football. First played during the 1871\u201372 season, it is the oldest national football competition in the world. It is organised by and named after The Football Association (The FA). Since 2015, it has been known as The Emirates FA Cup after its headline sponsor. A concurrent Women's FA Cup has been held since 1970.\n\nThe competition is open to all eligible clubs down to Level 9 of the English football league system with Level 10 clubs acting as stand-ins in the event of non-entries from above. Included in the competition are 20 professional clubs in the Premier League (level 1), 72 professional clubs in the English Football League (levels 2 to 4), and all clubs in steps 1\u20135 of the National League System (levels 5 to 9) as well as a tiny number of step 6 clubs acting as stand-ins for non-entries above. A record 763 clubs competed in 2011\u201312. The tournament consists of 12 randomly drawn rounds followed by the semi-finals and the final. Entrants are not seeded, although a system of byes based on league level ensures higher ranked teams enter in later rounds \u2013 the minimum number of games needed to win, depending on which round a team enters the competition, ranges from six to fourteen.\n\nThe first six rounds are the Qualifying Competition, from which 32 teams progress to the first round of the Competition Proper, meeting the first of the 48 professional teams from Leagues One and Two. The last entrants are the Premier League and Championship clubs, into the draw for the Third Round Proper. In the modern era, only one non-League team has ever reached the quarter-finals, and teams below Level 2 have never reached the final. As a result, significant focus is given to the smaller teams who progress furthest, especially if they achieve an unlikely \"giant-killing\" victory.\n\nWinners receive the FA Cup trophy, of which there have been two designs and five actual cups; the latest is a 2014 replica of the second design, introduced in 1911. Winners also qualify for the UEFA Europa League and a place in the upcoming FA Community Shield. Arsenal are the most successful club with fourteen titles and Ars\u00e8ne Wenger is the most successful manager in the history of the competition, having won seven finals as Arsenal's manager.\n\nLiverpool are the current holders, having beaten Chelsea 6\u20135 on penalties following a 0\u20130 draw in the 2022 final.", "category": "IT"}, {"instruction": "Are Schindler elevators safe", "input": "Schindler Holding Ltd. is a Swiss multinational company which manufactures escalators, moving walkways, and elevators worldwide, founded in Switzerland in 1874. Schindler produces, installs, maintains and modernizes lifts and escalators in many types of buildings including residential, commercial and high-rise buildings.\n\nThe company is present in over 140 countries and employs more than 66,000 people worldwide.[3] The production facilities are located in Brazil, China, Slovakia, Spain, Switzerland, India and the United States.[4] All operations and subsidiaries of Schindler Group are organised into Schindler Holding Ltd. (German: Schindler Holding AG, French: Schindler Holding S.A.), which is publicly traded on SIX Swiss Exchange.", "output": "Schindler Holding Ltd. is a Swiss multinational company which manufactures escalators, moving walkways, and elevators worldwide, founded in Switzerland in 1874. Schindler produces, installs, maintains and modernizes lifts and escalators in many types of buildings including residential, commercial and high-rise buildings.\n\nThe company is present in over 140 countries and employs more than 66,000 people worldwide. The production facilities are located in Brazil, China, Slovakia, Spain, Switzerland, India and the United States. All operations and subsidiaries of Schindler Group are organised into Schindler Holding Ltd., which is publicly traded on SIX Swiss Exchange.", "category": "IT"}, {"instruction": "What are the 4 oceans on earth", "input": "", "output": "Atlantic Ocean\nArctic Ocean\nPacific Ocean\nIndian Ocean", "category": "IT"}, {"instruction": "Did Harry Potter put his own name in the goblet of fire?", "input": "", "output": "Harry did not put his own name in the goblet of fire. Barty Crouch Junior, using polyjuice potion to disguise himself as Alistair Moody, put Harry's name in the goblet of fire as part of his plan to deliver Harry into Lord Voldemort's hands.", "category": "IT"}, {"instruction": "Why does it help to focus on the breath when practicing mindfulness?", "input": "", "output": "The art of meditation, which is another name for the practice of mindfulness, is all about being in the present.  In other words, cultivating an awareness of what is happening in the present moment.  This is done by quietening the mind of all the random thoughts that are being continuously generated, and having the senses alerted to the signals that are being passed in the moment.  The signals are the sensations or emotions or sounds that one is feeling and hearing in the present moment.  To accomplish this, the breath serves as an anchor to the present moment.  Being aware of one's breath keeps us in the present moment.  When the mind eventually wanders, the breath is a signal to tune back into the present moment.  The breath is always with us and can be found in an instant.", "category": "IT"}, {"instruction": "What is a Gross domestic product (GDP)?", "input": "", "output": "Gross domestic product (GDP) is a monetary measure of the market value of all the final goods and services produced and sold in a specific time period by a country or countries, generally \"without double counting the intermediate goods and services used up to produce them\". GDP is most often used by the government of a single country to measure its economic health. Due to its complex and subjective nature, this measure is often revised before being considered a reliable indicator. GDP (nominal) per capita does not, however, reflect differences in the cost of living and the inflation rates of the countries; therefore, using a basis of GDP per capita at purchasing power parity (PPP) may be more useful when comparing living standards between nations, while nominal GDP is more useful comparing national economies on the international market. Total GDP can also be broken down into the contribution of each industry or sector of the economy. The ratio of GDP to the total population of the region is the per capita GDP (also called the Mean Standard of Living).", "category": "IT"}, {"instruction": "Whats the difference between a bass guitar and a regular guitar?", "input": "", "output": "There are a few significant differences between a bass guitar and a regular guitar.  A bass guitar typically has 4 strings (though it can have more), is larger in body & neck, and has higher string gauges (string thickness).  A bass guitar is used for keeping the band on track by keeping the rhythm and hitting the root notes of the chords.  \n\nA regular guitar typically has 6 strings, and can be used for a wider variety of purposes.  These include keeping the rhythm with chords, playing foundational riffs, or improvisational solos for instrumental layering.  The regular guitarists are almost always the more well-known of the two.", "category": "IT"}, {"instruction": "What is the winter weather like in Salt Lake City, Utah?", "input": "", "output": "Some years, Utah has massive amounts of snow, up to 700 inches at some ski resorts. Other years, Utah has little precipitation. Often temperatures are just below or just above freezing during winter months.", "category": "IT"}, {"instruction": "Who is the best men's test cricket player to have come from New Zealand?", "input": "", "output": "Despite a rich cricket tradition in New Zealand, the country only became a test playing nation during the season of 1929/30, when the MCC toured the country playing 4 tests. Australia, the nearest test playing country to New Zealand, refused to grant Test status to any games played between the two nations until well after World War 2. This lack of test opportunities led to a now common path of talented New Zealanders moving off shore for the chance to play test cricket- most notably in the pre WWII period of Clarrie Grimmet, who took over 200 test wickets playing for Australia. Since then, Andrew Caddick (234 test wickets at an average of 29.91) and Ben Stokes (5000+ test runs and 196 test wickets) have played leading roles for England in tests.\n\nIf however we define the question as \"the best test cricket player to have played for New Zealand\", then there are perhaps only 3 or 4 candidates that feature. Of the current generation, there is no doubt that Kane Williamson will one day be regarded as the greatest player to have come from New Zealand- with over 8000 test runs at an average north of 50. With many years in front of him, Williamson will no doubt hold the crown of best test cricketer in years to come. \n\nMartin Crowe must likewise be regarded in the pantheon of test greats to have played for New Zealand- despite a slow start to his career, and injuries curtailing his time in the team, he amassed over 5000 runs at an average of over 45.\n\nHowever, most will agree that the most influential cricketer ever to play test cricket for New Zealand was Sir Richard Hadlee- the first cricketer to be knighted whilst still playing cricket for his country. Hadlee's bowling average of 22.29 is one of best in test cricket history, and at the time of his retirement he held the record for test wickets, at 431. Gaining 5 wickets in an innings 36 times was also a record, and led New Zealand to some of it's most famous test victories, notably victory in a series in Australia for the first time in 1985/86, with his best test figures of 15 for 123 coming in the first test at the Gabba. Added to his bowling, his destructive lower order batting made his one of the preeminent all rounders of the game., and truly NZ's best test cricketer.", "category": "IT"}, {"instruction": "What are the differences between the New York Giants and New York Jets?", "input": "", "output": "The New York Giants and New York Jets are both professional football teams in the NFL who play in the New York Metropolitan area. Both teams play in MetLife stadium which used to be called Giants stadium in East Rutherford, NJ. Their fan bases live in New Jersey and New York primarily. The Jets primary color is Green, while the Giants are blue.", "category": "IT"}, {"instruction": "Was Furze Hill an established community in the 19th century?", "input": "Furze Hill (or Furzehill) is a hamlet situated in the New Forest National Park of Hampshire, England. It is in the civil parish of Ellingham, Harbridge and Ibsley. Its nearest town is Fordingbridge, which lies approximately 3.1 miles (5.2 km) north-west from the hamlet.\n\nFurze Hill is a hamlet in the civil parish of Hyde. It is situated on low ground on either side of Huckles Brook on the South Gorley to Ogdens road. The houses are surrounded by fields and paddocks. Additional houses can be found at the southern edge of Gorley Common lining a narrow track to North Gorley.\n\nFurze Hill is the most recent settlement in the parish of Hyde, becoming an established community only in the 20th century.", "output": "No, it was not an established community until the 20th century.", "category": "IT"}, {"instruction": "Should you buy new golf clubs when you are a beginner?", "input": "", "output": "It is recommended that you get custom fitted for your golf clubs.  However, there are many used golf clubs available to purchase and it can be a great option if you are just exploring the sport.  You can also consider renting golf clubs from your local golf course if you are not ready for the expense of buying new or used golf clubs.", "category": "IT"}, {"instruction": "Why should I use fabric softener?", "input": "Machine washing puts great mechanical stress on textiles, particularly natural fibers such as cotton and wool. The fibers at the fabric surface are squashed and frayed, and this condition hardens while drying the laundry in air, giving the laundry a harsh feel. Adding a liquid fabric softener to the final rinse (rinse-cycle softener) results in laundry that feels softer.[2][1]", "output": "Machine washing puts great mechanical stress on textiles, so adding a liquid fabric softener to the final rinse results in laundry that feels softer.", "category": "IT"}, {"instruction": "The former Chairman of Tata Sons died in road accident  en route  from where?", "input": "", "output": "Ahmedabad to Mumbai", "category": "IT"}, {"instruction": "Please classify each of the following animals as mammal, amphibian, or fish: elk, frog, dog, cat, newt, and human.", "input": "", "output": "Newt and frog are amphibians. The rest of the animals are mammals. You did not provide any fish in your question.", "category": "IT"}, {"instruction": "Classify the following numbers as 'prime' or 'composite' - 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16.", "input": "", "output": "'prime', 'prime', 'composite', 'prime', 'composite', 'prime', 'composite', 'composite', 'composite', 'prime', 'composite', 'prime', 'composite', 'composite', 'composite'.", "category": "IT"}, {"instruction": "Summarize the rulers of the territory of Albania in this time period.", "input": "The Illyrian Ardiaei tribe, centred in Montenegro, ruled over most of the territory of Albania. Their Ardiaean Kingdom reached its greatest extent under King Agron, the son of Pleuratus II. Agron extended his rule over other neighbouring tribes as well.[38] Following Agron's death in 230 BC, his wife, Teuta, inherited the Ardiaean kingdom. Teuta's forces extended their operations further southwards to the Ionian Sea.[39] In 229 BC, Rome declared war[40] on the kingdom for extensively plundering Roman ships. The war ended in Illyrian defeat in 227 BC. Teuta was eventually succeeded by Gentius in 181 BC.[41] Gentius clashed with the Romans in 168 BC, initiating the Third Illyrian War. The conflict resulted in Roman conquest of the region by 167 BC. The Romans split the region into three administrative divisions.[42]", "output": "King Agron ruled the territory of Albania, followed by his wife Teuta from 230 BC, and then Gentius from 181 BC. The Romans conquered the region in 167 BC.", "category": "IT"}, {"instruction": "What is cloud computing in simple terms?", "input": "", "output": "In simple terms cloud computing allows you to use preconfigured hardware devices and software services managed by somebody else on internet. Most cases you pay only for the resources you use and it is very easy to procure more as you need more services. \nCloud computing makes it easy to setup the technology infrastructure at a low cost and scale as you grow.", "category": "IT"}, {"instruction": "What is one year?", "input": "", "output": "One Earth Year is the time it takes for one revolution of the Earth around the sun.", "category": "IT"}, {"instruction": "What types of sport fish do most anglers target in New England?", "input": "", "output": "There are many types of game fish that anglers target in New England. Fresh water anglers generally fish for large mouth bass, small mouth bass and various types of trout.  Children often learn to fish by catching sunfish.  Fishing in the ocean in New England offers many additional options to target including Striped Bass, Black Sea Bass, Bluefish, as well as much larger game fish like Bluefin Tuna, Albacore, False Albacore, Bonito, and many species of shark. Each season produces different fish, be sure to check with your local fish and game authority to ensure you have the proper license and which species are able to be targeted.", "category": "IT"}, {"instruction": "Give me a bunch of ways I can keep my house cool in the summer", "input": "", "output": "- Install whole house AC that's integrated with your heating system\n- Buy an in-window unit to keep an individual room cool\n- Install a whole house fan that pulls in cool air from open windows at night into living area and exhausts the hot air into the attic\n- Place fans throughout the house but place them in front of open windows at night to pull in cool air\n- Install a swamp cooler, it's sometimes cheaper than installing a full AC system\n- Make sure to close windows and curtains in the morning hours after the house cools down over night\n- Get a cooler filled with ice and place a fan into it forcing cold air into the room.  The ice will melt fast so be ready to refill often.  Not the most efficient but in a pinch it can help", "category": "IT"}, {"instruction": "What is wine?", "input": "Wine is an alcoholic drink typically made from fermented grapes. Yeast consumes the sugar in the grapes and converts it to ethanol and carbon dioxide, releasing heat in the process. Different varieties of grapes and strains of yeasts are major factors in different styles of wine. These differences result from the complex interactions between the biochemical development of the grape, the reactions involved in fermentation, the grape's growing environment (terroir), and the wine production process. Many countries enact legal appellations intended to define styles and qualities of wine. These typically restrict the geographical origin and permitted varieties of grapes, as well as other aspects of wine production. Wines can be made by fermentation of other fruit crops such as plum, cherry, pomegranate, blueberry, currant and elderberry.", "output": "Wine is an alcoholic drink typically made from fermented grapes.", "category": "IT"}, {"instruction": "Tell me about the 2017 Southeastern Conference football season", "input": "The 2017 Southeastern Conference football season was the 85th season of SEC football and took place during the 2017 NCAA Division I FBS football season. The season began on August 31 and will end with the 2017 SEC Championship Game on December 2.[1] The SEC is a Power Five conference under the College Football Playoff format along with the Atlantic Coast Conference, the Big 12 Conference, the Big Ten Conference, and the Pac\u201312 Conference. For the 2017 season, the SEC has 14 teams divided into two divisions of seven each, named East and West.", "output": "The 2017 Southeastern Conference football season was the 85th season of SEC football and took place during the 2017 NCAA Division I FBS football season. The season began on August 31 and will end with the 2017 SEC Championship Game on December 2.", "category": "IT"}, {"instruction": "Are the following items candy bars or gum: trident, Twix, hubba bubba, snickers, three musketeers, and wrigleys.", "input": "", "output": "Three musketeers, Twix, and snickers are candy bars, and trident, hubba bubba, and wrigleys are gum.", "category": "IT"}, {"instruction": "Give me a list of things that pose a challenge to cryptos", "input": "", "output": "1) Crypto is an invention that has yet to find a real life purpose. Bitcoin narrative has changed from a peer to peer payment processor to now being store of value.\n2) Crypto also is banned in several countries. That is a challenge with wider adoption\n3) Crypto is also bound to a regulatory event that could bring it to grinding halt\n4) There's also a growing concern around energy consumption of them mining rigs.\n5) In recent events, the demise of major crypto exchange like FTX has also lead to poor optics", "category": "IT"}, {"instruction": "What is the meaning of life?", "input": "", "output": "Although it is a deep question that has challenged philosophers for all time, Douglas Adams in his book \"The Hitchhicker's Guide to the Universe\" humorously states that the answer is \"42\".", "category": "IT"}, {"instruction": "Classify the below characters based on whether they are created by Marvel comics or D.C. comics\n Spider-Man, Iron Man, Captain America, Thor, Doctor Strange, Superman, Batman, Wonder Woman, Flash, Aquaman", "input": "", "output": "DC- Superman, Batman, Wonder Woman, Flash, Aquaman\nMarvel- Spider-Man, Iron Man, Captain America, Thor, Doctor Strange", "category": "IT"}, {"instruction": "Why are we like aquariums?", "input": "", "output": "Aquariums, like zoos, provide fun-filled leisure and entertainment activities that double-up as centres for animal rescue, care and rehabilitation, scientific research, education and conservation.", "category": "IT"}, {"instruction": "Give me a bulleted list of countries that start with the letter B.", "input": "", "output": "- Botswana\n- Bulgaria\n- Brazil\n- Bolivia\n- Belgium\n- Bahrain\n- Bahamas", "category": "IT"}, {"instruction": "Explain how new technologies, like LLMs and ChatGPT, may revolutionize Application Programming Interfaces (APIs) in the future. Provide an example of how these APIs might work.", "input": "", "output": "As a kid, I loved watching the Jetsons. As I grew older and ended up writing software and creating & implementing architectures for systems, I thought I would never see the day when a Jetsons-like kitchen would be feasible.\nGPT (ChatGPT, etc.) has changed my mind.\n\nContractual Obligations\nAs an architect, you kind of need to think like a lawyer. You define contracts (APIs) between systems or components. You monitor those APIs for abuse or misuse.\n\nI would use Swagger editor to define those contracts, and I would write the APIs to match interactions implied in mock-ups. I would vet the design with the team, I would walk through scenarios to see if the API would fit the use case and would not introduce performance bottlenecks, and I would simulate and automate as much as I could along the journey.\n\nI was very careful to get it right the first time. It was never perfect the first time, of course. So, I also had to consider how the API could evolve while minimizing costs/impact to the rest of the system. The API, once deployed, would become something I would guard, like an honest politician guards the #usconstitution. The team had to be careful with any change that impacted the API.\n\nAPI Mesh... More like API mess!\nAPIs rely on APIs which rely on more APIs and libraries. Once a system gets large enough, that complexity becomes a bottleneck. Small changes can have a huge ripple effect. Some approaches (like federated #GraphQL) help manage this complexity nicely. But it still involves an API under which there can exist a lot of fragility. #Agile or not, developing a complicated web of APIs is complex, requires specialized skills, and is full of unforeseen challenges.\n\nThe Kitchen Conversation, ChatGPT-style\nThe Jetsons' kitchen involves a number of systems, each composed of various parts, sensors, hardware, inputs and outputs. Considering the complexity of interactions between independent systems in a kitchen, the fact that the Jetsons' kitchen components would come from various vendors or manufacturers, traditional API design would not be able to fulfill the vision. Not practical, at all.\n\nNow, let's think about APIs and the Jetsons' kitchen, #chatgpt -style.\n\nLet's keep it simple: pizza. You (or your robot) make a pizza from scratch.\n\nThe oven asks the refrigerator: \"I see we have a pizza. Can you tell me if this is low-moisture mozzarella?\"\n\nRefrigerator: \"That's not even mozzarella. This pizza must have Muenster cheese as that is all I had in me. And the human removed some of the contents 30 minutes ago, so the probability of Muenster cheese on that pizza is quite high.\"\n\nA sensor from the kitchen who has eyes across the room chimes in at this point. Sensor: \"Beware that the crust of this pizza is made of cauliflower. I agree with the video sensor's assessment regarding the type of cheese. No new cheese entered the kitchen recently.\"\n\nOven: \"Anything else I should know?\"\n\nSensor: \"The temperature of the dough is 47F. This is cooler than the expert chef consensus of using room-temperature dough.\"\n\nOven: \"Great. I know what to do. Since the dough is cool, I will start cooking with a temperature a little lower than the recipe specifies. Then I will increase the temp of bottom element so as to provide a nice crisp crust. I will keep a close eye on moisture and may use convection to mitigate any undesirable levels of moisture.\"\n\nWhere is the API that contractually binds the independent systems? APIs are not gone. For instance, the brain of the Oven will have myriad APIs (e.g. for interacting with temperature controllers and sensors, etc.). The key here is that the interface between systems is no longer a fixed, rigid API. No method signatures, no paths, no payload specifications. Instead, a conversation relating to senses and capabilities.\n\nWhat \"brain\"?\nKence Anderson's book Designing Autonomous AI describes nicely how a complex system can be decomposed into a number of independent \"brains.\" Each brain, in his book, can be independently developed and refined, with human guidance married with #datascience, #machinelearning and #dataengineering.\n\nWhat's Cookin'?\nI am excited for what the future holds. How architects rethink complex system design with regards to APIs is, in my opinion, something that is inevitable. And, as an amateur pizza maker, my taste buds are watering for the day I get some GPT help to make an even better #detroitpizza.", "category": "IT"}, {"instruction": "Who are some of the most successful golfers in history?", "input": "", "output": "Sam Snead, Tiger Woods, and Jack Nicklaus are the most successful golfers of all time with the top three most major championship wins.", "category": "IT"}, {"instruction": "Which is a bird or fish: Red-throated diver, Redlip blenny", "input": "", "output": "Redlip blenny is a fish, Red-throated diver is a bird", "category": "IT"}, {"instruction": "Which types of fish contain the lowest levels of mercury?", "input": "", "output": "The following types of fish contain low levels of mercury: salmon, flounder, Atlantic mackerel, anchovies, pollock, catfish, and shellfish (e.g., clams, scallops, mussels).", "category": "IT"}, {"instruction": "How do you make an iced matcha latter?", "input": "", "output": "You will need 1-2 teaspoons of matcha powder, milk of your choice, 1 cup of hot water, and ice. In a cup or bowl, you will add your match powder and pour your hot water into it and use a whisk until the matcha powder is well incorporated, which should create a paste like consistency. Then you will take a glass and pour in your ice and milk and your matcha paste on top and stir.", "category": "IT"}, {"instruction": "What is world of warcraft", "input": "", "output": "World of warcraft is a massive online multi player role playing game. It was released in 2004 by bizarre entertainment", "category": "IT"}, {"instruction": "What is the best swimming form?", "input": "", "output": "It is hard to say what is the best swimming form as everyone's body may be more acclimated to a certain form. One of the most standard forms of swimming that works for most people is the breast stroke.", "category": "IT"}, {"instruction": "Which is the best place to Kayak in Austin?", "input": "", "output": "Lady Bird Lake in Austin downtown is revered to be the best place to go Kayaking. Paddlers can choose to head west from the Rowing Dock to take in nature views. But a small paddle down the river to the east will greet paddlers to magnificent downtown skyline views.", "category": "IT"}, {"instruction": "What's the relation between the Kushan Empire and the Sassanid Empire in Iran?", "input": "The Kushan Empire  was a syncretic empire, formed by the Yuezhi, in the Bactrian territories in the early 1st century. It spread to encompass much of modern-day territory of Uzbekistan, Afghanistan, Pakistan and Northern India. The Sasanian or Sassanid Empire officially known as Eranshahr  was the last Iranian empire before the early Muslim conquests of the 7th\u20138th centuries AD. Named after the House of Sasan, it endured for over four centuries, from 224 to 651 AD, making it the longest-lived Persian imperial dynasty.[", "output": "Kushano-Sasanian Kingdom (also called Kushanshahs,  or Koshano Shao in Bactrian, or Indo-Sasanians) is a historiographic term used by modern scholars to refer to a branch of the Sasanian Persians who established their rule in Bactria during the 3rd and 4th centuries CE at the expense of the declining Kushans. They captured the provinces of Sogdiana, Bactria and Gandhara from the Kushans in 225 CE. The Sasanians established governors for the Sasanian Empire, who minted their own coinage and took the title of Kushanshas, i.e. \"Kings of the Kushans\". They are sometimes considered as forming a \"sub-kingdom\" inside the Sassanid Empire.", "category": "IT"}, {"instruction": "What's the best way to learn how to snowboard?", "input": "", "output": "There are many options available to learn how to snowboard. You can seek out professional lessons from an instructor, often available at your local ski resort.  You can also read articles online, or watch online videos from professional instructors.  Another option would be to get lessons from a friend who's snowboarded for a long time.  While this can be an easy and inexpensive option, it may not be as effective as learning from a professional.  Friends who snowboard may know how to snowboard well, but, they may not be great instructors.  Plus, it's often easy to get frustrated with people you know really well.  You can avoid those headaches by getting a professional lesson.  It will reduce your stress level and likely make you a better snowboarder in a shorter period of time.  Have fun on the slopes and stay safe!", "category": "IT"}, {"instruction": "write a short essay on California wild fire", "input": "", "output": "California is known for its hot, dry summers, which increase the risk of wildfires. Every year, the state experiences dozens of fires, which can be devastating to both the environment and people's homes and businesses.\n\nIn recent years, California has seen some of the worst wildfires in its history, with tens of thousands of acres of land destroyed and hundreds of homes lost. These fires are often started by a combination of high temperatures, dry conditions, and strong winds, which can quickly spread flames and make them difficult to control.\n\nThe effects of these fires are felt not just by those directly impacted, but by everyone in the state. Smoke and ash from the fires can cause respiratory problems and other health issues, and the destruction of habitats can harm wildlife populations and disrupt entire ecosystems.\n\nDespite the challenges, California has made significant progress in fighting wildfires in recent years. The state has invested in new technologies and equipment to help firefighters respond more quickly and effectively to fires, and has increased efforts to prevent fires from starting in the first place.\n\nWhile wildfires will likely always be a risk in California, the state's proactive approach to managing them gives hope that we can continue to protect people, wildlife, and the environment from their devastating effects.", "category": "IT"}, {"instruction": "What are some tools that every homeowner should have?", "input": "", "output": "There is a tool designed for almost every challenge a homeowner will face, but purchasing every tool could prove to be cost prohibitive, especially if they are highly specialized for tasks that may occur infrequently.  It's best to have a general set of tools that have a wide variety of uses, including a hammer, a set of screwdrivers both flat and philips, a tape measure, a level, a stud finder, and a utility knife. A battery powered drill and impact driver can also save time, and make mounting projects easier.", "category": "IT"}, {"instruction": "Who played Billy the Kid in The Left Handed Gun", "input": "", "output": "Paul Newman", "category": "IT"}, {"instruction": "why did Syd Barrett left the Pink Floyd?", "input": "", "output": "Syd Barrett was one of the main members of the Pink Floyd. He has used drugs a lot and after a while he was not able to perform with the team. Even though the band gave him multiple chances, he could not keep up with the band. In the end, they had to ask him to leave the band. The main reason that he has left the team is his health problems and addiction to drugs.", "category": "IT"}, {"instruction": "what is REST API", "input": "", "output": "REST API is an architectural style for building network APIs. In practice, most REST APIs are using JSON over HTTP. REST APIs have several properties that make them very popular.\n\nHTTP is the foundational and the most popular network protocol across the internet. By using HTTP, REST APIs can fully utilize the internet infrastructure, which greatly reduce the complexity and operational costs. For example, using HTTPS for transport security, and using URL for request routing.\n\nJSON is a simple, stable, and intuitive data format , which is not expected to change ever. This offers great ease of use and stability to REST APIs. For high performance applications, binary formats can be used instead, such as protobuf or thrift.\n\nREST APIs are often designed as CRUD APIs, where API operations are commonly expressed as Create, Retrieve, Update, and Delete operations on resources. CRUD operations are naturally mapped to HTTP methods (POST, GET, PUT/PATCH, and DELETE), and API resources can be naturally identified using URLs.", "category": "IT"}, {"instruction": "What is underwriting?", "input": "", "output": "Underwriting (UW) services are provided by some large financial institutions, such as banks, insurance companies and investment houses, whereby they guarantee payment in case of damage or financial loss and accept the financial risk for liability arising from such guarantee. An underwriting arrangement may be created in a number of situations including insurance, issues of security in a public offering, and bank lending, among others. The person or institution that agrees to sell a minimum number of securities of the company for commission is called the underwriter.\n\nThe term \"underwriting\" derives from the Lloyd's of London insurance market. Financial backers (or risk takers), who would accept some of the risk on a given venture (historically a sea voyage with associated risks of shipwreck) in exchange for a premium, would literally write their names under the risk information that was written on a Lloyd's slip created for this purpose.", "category": "IT"}, {"instruction": "Give me a list of some characteristics of a good coffee shop?", "input": "", "output": "Some characteristics of good coffee shops include:\n- Very good coffee, either freshly roasted locally or acquired from a quality roaster\n- High end coffee grinders, brewing machines, and a high quality espresso machine and well-trained baristas\n- Different coffee roast options (i.e. medium roast, dark roast) and brewing methods (i.e. drip coffee and pour-over) available\n- A variety of cafe fare, such as pastries and croissants, available for purchase to accompany coffee\n- Ample seating, with power outlets available by most seats.", "category": "IT"}, {"instruction": "Please summarize what Linkedin does.", "input": "LinkedIn (/l\u026a\u014bkt\u02c8\u026an/) is a business and employment-focused social media platform that works through websites and mobile apps. It launched on May 5, 2003.[5] It is now owned by Microsoft. The platform is primarily used for professional networking and career development, and allows jobseekers to post their CVs and employers to post jobs. From 2015 most of the company's revenue came from selling access to information about its members to recruiters and sales professionals.[6] Since December 2016, it has been a wholly owned subsidiary of Microsoft. As of March 2023, LinkedIn has more than 900 million registered members from over 200 countries and territories.[5]\n\nLinkedIn allows members (both workers and employers) to create profiles and connect with each other in an online social network which may represent real-world professional relationships. Members can invite anyone (whether an existing member or not) to become a connection. LinkedIn can also be used to organize offline events, join groups, write articles, publish job postings, post photos and videos, and more.[7]", "output": "Linkedin is a social platform that business professionals create profiles on and network with other business professionals. It is used to network, career development, and for jobseekers to find jobs. Linkedin has over 900 million users from over 200 countries. Linkedin can be used to post resumes/CVs, organizing events, joining groups, writing articles, publishing job postings, posting picture, posting videos, and more!", "category": "IT"}, {"instruction": "Who saved Andromeda from the sea monster", "input": "", "output": "Perseus", "category": "IT"}, {"instruction": "How can I contribute to Spark?", "input": "", "output": "Yes, Spark is an open source project and anyone can contribute to it.", "category": "IT"}, {"instruction": "Who are ''The Lumi\u00e8res\" ?", "input": "", "output": "The Lumi\u00e8res (literally in English: The Lights) was a cultural, philosophical, literary and intellectual movement beginning in the second half of the 17th century, originating in western Europe and spreading throughout the rest of Europe. It included philosophers such as Baruch Spinoza, David Hume, John Locke, Edward Gibbon, Voltaire, Jean-Jacques Rousseau, Denis Diderot, Pierre Bayle and Isaac Newton. This movement is influenced by the scientific revolution in southern Europe arising directly from the Italian renaissance with people like Galileo Galilei. Over time it came to mean the Si\u00e8cle des Lumi\u00e8res, in English the Age of Enlightenment.[Note 1]\n\nMembers of the movement saw themselves as a progressive \u00e9lite, and battled against religious and political persecution, fighting against what they saw as the irrationality, arbitrariness, obscurantism and superstition of the previous centuries. They redefined the study of knowledge to fit the ethics and aesthetics of their time. Their works had great influence at the end of the 18th century, in the American Declaration of Independence and the French Revolution.[1]\n\nThis intellectual and cultural renewal by the Lumi\u00e8res movement was, in its strictest sense, limited to Europe. These ideas were well understood in Europe, but beyond France the idea of \"enlightenment\" had generally meant a light from outside, whereas in France it meant a light coming from within oneself.\n\nIn the most general terms, in science and philosophy, the Enlightenment aimed for the triumph of reason over faith and belief; in politics and economics, the triumph of the bourgeois over nobility and clergy.", "category": "IT"}, {"instruction": "Using examples taken from the text give me a summary of the main arguments in favour of slavery reparations in the United States and the anticipated cost of enacting such reparations", "input": "Slavery ended in the United States in 1865 with the end of the American Civil War and the ratification of the Thirteenth Amendment to the United States Constitution, which declared that \"Neither slavery nor involuntary servitude, except as a punishment for crime whereof the party shall have been duly convicted, shall exist within the United States, or any place subject to their jurisdiction\".[49] At that time, an estimated four million African Americans were set free.[50]\n\nSupport for reparations\nWithin the political sphere, a bill demanding slavery reparations has been proposed at the national level, the \"Commission to Study and Develop Reparation Proposals for African-Americans Act,\" which former Rep. John Conyers Jr. (D-MI) reintroduced to the United States Congress every year from 1989 until his resignation in 2017.[51] As its name suggests, the bill recommended the creation of a commission to study the \"impact of slavery on the social, political and economic life of our nation\".,[52] however there are cities and institutions which have initiated reparations in the US (see \u00a7 Legislation and other actions for a list).\n\nIn 1999, African-American lawyer and activist Randall Robinson, founder of the TransAfrica advocacy organization, wrote that America's history of race riots, lynching, and institutional discrimination have \"resulted in $1.4 trillion in losses for African Americans\".[53] Economist Robert Browne stated the ultimate goal of reparations should be to \"restore the black community to the economic position it would have if it had not been subjected to slavery and discrimination\".[54] He estimates a fair reparation value anywhere between $1.4 to $4.7 trillion, or roughly $142,000 (equivalent to $162,000 in 2021) for every black American living today.[54] Other estimates range from $5.7 to $14.2[55] and $17.1 trillion.[56]\n\nIn 2014, American journalist Ta-Nehisi Coates published an article titled \"The Case for Reparations\", which discussed the continued effects of slavery and Jim Crow laws and made renewed demands for reparations. Coates refers to Rep. John Conyers Jr.'s H.R.40 Bill, pointing out that Congress's failure to pass this bill expresses a lack of willingness to right their past wrongs.[57]\n\nIn September 2016, the United Nations' Working Group of Experts on People of African Descent encouraged Congress to pass H.R.40 to study reparations proposals. Still, the Working Group did not directly endorse any specific reparations proposal. The report noted that there exists a legacy of racial inequality in the United States, explaining that \"Despite substantial changes since the end of the enforcement of Jim Crow and the fight for civil rights, ideology ensuring the domination of one group over another, continues to negatively impact the civil, political, economic, social and cultural rights of African Americans today.\" The report notes that a \"dangerous ideology of white supremacy inhibits social cohesion among the US population\".[58]\n\nThe topic of reparations gained renewed attention in 2020[59] as the Black Lives Matter movement named reparations as one of their policy goals in the United States.\n\nIn 2020, rapper T.I. supported reparations that would give every African American US$1 million and asserted that slavery caused mass incarcerations, poverty, and other ills.[60]", "output": "In spite of progressive changes since the end of enforcement of Jim Crow and the successes of the fight for civil rights there are still inherent racial inequalities in the USA which negatively affect the civil, political, economic, social and cultural rights of African Americans today.  A United Nations report of 2016 did not endorse a specific reparations proposal, but did call out that there is an ideology of white supremacy present in the population of the United States that inhibits social cohesion.  Further arguments have been made identifying slavery as a cause of mass incarcerations, poverty and other ills that affect today\u2019s African Americans.\nIt could be argued that there is an inherent acknowledgement that the case exists to examine the impact of slavery on the social, political and economic life of the United States in the annual submission to Congress of the \"Commission to Study and Develop Reparation Proposals for African-Americans Act\u201d.  There are also individual cities within the USA which have instituted reparations.  Estimates of the cost to African Americans of the United States\u2019 history of discrimination have been estimated variously at $1.4 trillion, $4.7 trillion, $5.7 trillion, $14.2 trillion and $17.1 trillion.  These estimates express the projected cost in $ to restore the black community to the economic position it would have if it had not been subjected to slavery and discrimination.", "category": "IT"}, {"instruction": "When was the wheel invented?", "input": "", "output": "No one knows when the wheel was first made. Archaeological evidence seems to show that the wheel was first used to make pottery in Mesopotamia about 7,000 years ago, during the Neolithic period. Later, it was used to make chariots. Chariot wheels have been found in Sumer as early as 3000 BC. The wheel is one of the most important inventions in human history. It was very useful for making pottery and getting around on land. It is also a key part of machines.", "category": "IT"}, {"instruction": "write a scene between two actors discussing movie Inception", "input": "", "output": "Actress 1: \"Oh my god, have you seen Inception?\"\n\nActor 2: \"Yes! That movie blew my mind. What did you think of it?\"\n\nActress 1: \"Honestly, I was so confused for most of it. But it was so interesting, I couldn't look away. I had to know what was going on.\"\n\nActor 2: \"That's exactly how I felt. It's one of those movies that you have to pay attention to every detail, or you'll get lost.\"\n\nActress 1: \"Absolutely. And the way they played with time and reality was so cool. I don't think I've ever seen a movie like that before.\"\n\nActor 2: \"Yeah, the concept of entering someone's dreams to implant an idea was mind-boggling. And the way they executed it was so well done.\"\n\nActress 1: \"It was. And the cast was amazing too. Leonardo DiCaprio was incredible as usual, and I loved seeing Ellen Page in a different type of role.\"\n\nActor 2: \"Definitely. And the action scenes were so intense. The zero-gravity hallway fight was insane.\"\n\nActress 1: \"Oh my god, yes. I was on the edge of my seat for that one. And the ending...I still can't decide what it means.\"\n\nActor 2: \"I know, right? It's one of those movies that leaves you with so many questions. But that's part of what makes it so great.\"\n\nActress 1: \"Exactly. I love when movies challenge me to think and leave me wanting more. Inception definitely did that.\"\n\nActor 2: \"Agreed. It's definitely one of my all-time favorites. I could watch it a hundred times and still discover something new.\"\n\nActress 1: \"Same here. It's just one of those movies that sticks with you long after it's over.\"", "category": "IT"}, {"instruction": "Did dinosaurs have lips?", "input": "", "output": "Recent research suggests that the popular perception that dinosaurs had exposed teeth may be incorrect, and the current hypothesis is that the Tyrannosaurus rex did indeed have lips. A 2023 study by Dr Mark Witton of the University of Portsmouth said popular depictions of dinosaurs in movies like Jurassic Park are out of date. The study examined a large tooth that had spent over 500 days in the mouth of a Tyrannosaurus rex with no evidence of substantial wear, which is consistent with all findings of teeth found in the theropod family of dinosaurs. When contrasted with alligators and crocodiles, who have no lips and have more easily damaged teeth the theory says the evidence points to theropods, including Tyrannosaurus rex did indeed have lips. There would have been expected to be wear on the thin enamel on the teeth far more consistent with modern animals like crocodiles if dinosaurs had no lips.", "category": "IT"}, {"instruction": "Are lilies safe for cats?", "input": "", "output": "No, lilies are toxic to cats if consumed and should not be kept in a household with cats", "category": "IT"}, {"instruction": "What is Sunshine Recession?", "input": "", "output": "It is known as the deepest period in which sunspots are not virtually visible. Deepest period is related to sun cycle's process called solar minimum", "category": "IT"}, {"instruction": "What is the currency in use in the Netherlands?", "input": "", "output": "The currency in use in the Netherlands is the euro.", "category": "IT"}, {"instruction": "What is the best tv series in the world", "input": "", "output": "Dexter- The Dexter is so exciting to watch that it should be the best TV series in the world", "category": "IT"}, {"instruction": "Who was the first to record the Needles and Pins song?", "input": "\"Needles and Pins\" is a rock song credited to American writers Jack Nitzsche and Sonny Bono. Jackie DeShannon recorded it in 1963 and other versions followed. The most successful ones were by the Searchers, whose version reached No. 1 on the UK singles chart in 1964, and Smokie, who had a worldwide hit in 1977. Others who recorded the song include the Ramones, Gene Clark, and Tom Petty and the Heartbreakers with Stevie Nicks.\n\nJackie DeShannon version (1963)\nIn his autobiography, Bono states that he sang along with Nitzsche's guitar-playing, thus creating both the tune and the lyrics, being guided by the chord progressions.[1] However, Jackie DeShannon claims that the song was written at the piano, and that she was a full participant in the song's creation, along with Nitzsche and Bono, although she did not get formal credit.[2][3]\n\nDeShannon was the first to record the song; in the US it peaked at number 84 on the Billboard Hot 100 singles chart in May 1963.[4] Though it was only a minor US hit, DeShannon's recording of the song topped the charts in Canada, hitting number one on the CHUM Chart in July 1963", "output": "The first artist to record Needles and Pins song was DeShannon.", "category": "IT"}, {"instruction": "Provide me a list of the different types of harnesses used in rock climbing", "input": "Different types of climbing warrant particular features for harnesses. Sport climbers typically use minimalistic harnesses, some with sewn-on gear loops. Alpine climbers often choose lightweight harnesses, perhaps with detachable leg loops. Big Wall climbers generally prefer padded waist belts and leg loops. There are also full body harnesses for children, whose pelvises may be too narrow to support a standard harness safely. These harnesses prevent children from falling even when inverted, and are either manufactured for children or constructed out of webbing. Some climbers use full body harnesses when there is a chance of inverting, or when carrying a heavy bag. There are also chest harnesses, which are used only in combination with a sit harness. Test results from UIAA show that chest harnesses do not put more impact on the neck than sit harnesses, giving them the same advantages as full body harness.[6]\n\nApart from these harnesses, there are also caving and canyoning harnesses, which all serve different purposes. For example, a caving harness is made of tough waterproof and unpadded material, with dual attachment points. Releasing the maillon from these attachment points loosens the harness quickly.\n\nCanyoning harnesses are somewhat like climbing harnesses, often without the padding, but with a seat protector, making it more comfortable to rappel. These usually have a single attachment point of Dyneema.", "output": "Minimalistic Harness: has gear loops that are sewn on\nLightweight Harness: has leg loops that are removable\nBig Wall Harness: uses padded waist belts and leg loops\nFull Body Harness: mostly for children with small pelvises, or for scenarios that risk inversion\nChest Harness: to be used with a sit harness\nCaving Harness: made of ultra durable material and multiple attachment points\nCanyon Harness: has a built-in seat protector for rappeling.", "category": "IT"}, {"instruction": "Think of some family rules to promote a healthy family relationship", "input": "", "output": "Use Kind words\nBe grateful\nThink of others before yourself\nWork hard\nBe Honest\nBe thankful\nKeep your promises\nChoose to be happy\nAlways say 'I Love You'\nBe kind\nEncourage each other", "category": "IT"}, {"instruction": "In the series A Song of Ice and Fire, who is the founder of House Karstark?", "input": "", "output": "Karlon Stark", "category": "IT"}, {"instruction": "What is enriched air and why would divers dive with enriched air?", "input": "", "output": "Enriched air, also known as nitrox, is one kind of air with more than 21% oxygen. 21% oxygen is the normal air we breathe on the earth. The primary benefit of using enriched air is to extend the diver's bottom time, and reduce the need to push to no decompression limit. This advantage is really beneficial in deeper diving. \nFor example, at 80 feet of depth, normal air can last around 30 min, while enriched air of 32% oxygen can last for 45 min and 36% can last for 55 min. \nWhile enriched air is really beneficial in extending bottom time, it is important that divers get trained to use it before diving with enriched air.", "category": "IT"}, {"instruction": "What film won the 1943 Oscar as best film", "input": "", "output": "Casablanca", "category": "IT"}, {"instruction": "which weighs more, cold or hot water?", "input": "", "output": "Cold water weighs more than hot water", "category": "IT"}, {"instruction": "Given this paragraph, what is the top speed of a Kia Stinger?", "input": "Kia claims that the Stinger accelerates from zero to 100 km/h (62 mph) in 7.7, 6 and 4.9 seconds for the 2.2-liter diesel, 2.0-liter petrol and 3.3-liter petrol respectively. Schreyer reportedly drove a pre-production Stinger GT at a top speed of 269 km/h (167 mph) on the Autobahn.[9]\n\nDuring a test by Car and Driver, an all-wheel-drive U.S. spec GT 3.3T with Michelin Pilot Sport 4 tires achieved 0\u201360 mph (0\u201397 km/h) in 4.6 seconds on the track, reached 0.91 g on the skidpad and was able to stop from 70 mph (113 km/h) in 164 feet (50 m). According to this publication, the U.S. model's top speed is governed at 167 mph (269 km/h) per Kia specs.[11] In tests conducted by Motor Trend, the four-cylinder U.S. spec Stinger 2.0 RWD on Bridgestone Potenza tires reached 60 mph (97 km/h) in 6.6 seconds, completed the 1\u20444-mile (0.4 km) run in 15 seconds and stopped from 60 mph (97 km/h) in 126 feet (38 m). The average lateral acceleration recorded in track testing was 0.85 g.", "output": "The top speed of a Kia Stinger is 269km/h (167mph) according to this text.", "category": "IT"}, {"instruction": "Write a short paragraph about why you should not have both a pet cat and a pet bird.", "input": "", "output": "Having both a pet bird and a pet cat is not a good idea because cats will try to hunt birds, which are naturally the prey of cats. This hunting instinct is completely normal, and it isn't fair to the cat to try to train it not to attack birds, as it is simply in its nature to do so. However, letting a cat hunt your pet bird is similarly not humane, as it will be very stressful to the bird and could lead to the bird being injured. Larger birds are also not a good idea, as the bird could cause injury to the cat if the cat tries to attack it. Overall, it just isn't a good idea to have both cats and birds, since they tend not to coexist well, and pet owners should just pick one species to have.", "category": "IT"}, {"instruction": "What is your favorite strip from the comic Calvin and Hobbes?", "input": "", "output": "Calvin and Hobbes is an iconic strip that is regarded as one of the best comic strips in history. Individual preferences may vary and it's difficult to find the publishing rate of individual strips throughout its ten year syndication.", "category": "IT"}, {"instruction": "What is best Playstation or Xbox", "input": "", "output": "Playstation and Xbox are two competing game consoles, where which is \"best\" will depend on the preferences of the gamer.  From a graphics and performance perspective they are comparable, with Sony's Playstation technically leading, though most gamers would be unlikely to notice a significant difference.  From a game library perspective, both consoles have their respective first-party titles that appeal to different demographics.  For example, Microsoft has seen great popularity due to popular title Halo being exclusively available on the console.  On the other hand, Playstation has popular exclusive titles such as God of War and Gran Turismo.  Ultimately the decision of which console is best will likely come down to which games titles the purchaser prefers.", "category": "IT"}, {"instruction": "What makes a formula one car so fast?", "input": "", "output": "Formula One cars are one of the fastest racing cars in the world reaching speeds as high as 240 mph.\n\nThere are many aspects that make formula one cars fast, below are the top few\n\n1. Engine:  F1 cars have extremely powerful engines that can generate around 1000 bhp at up to 20,000 rpm\n2. Power-to-Weight ratio: F1 cars are also extremely light at around 800 kgs giving them a power-to-weight ratio of 12000-1400 hp/ton. For comparison, the best Porsche cars have a power-to-weight ratio of only 300-400 hp/ton.\n2. Aerodynamics: F1 cars are fitted with extremely sophisticated aerodynamics including a rear wing, front wing and body parts that help reduce aerodynamic drag for straight-line speeds while adding downforce to help around corners\n3. Tires: F1 tires are extremely large and sticky. This help the cars stick to the road as the car goes through turns very fast.\n4. Brakes: Lastly F1 brakes are very powerful and can slow down a car extremely quickly. This allows F1 cars to be at top speed for much longer before needing to slow down for taking a turn.", "category": "IT"}, {"instruction": "Who became king of Holland in 1806?", "input": "", "output": "William I of the Netherlands became king of Holland in 1806.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Panduri, Zurna", "input": "", "output": "Zurna is woodwind, Panduri is string.", "category": "IT"}, {"instruction": "What criteria should I be looking at when buying a new motorcycle?", "input": "", "output": "There are a number of criteria you should be looking at:\n- Price: How does it fit in your budget?\n- Engine type: Do you want a traditional combustion engine, or go for an electric one?\n- Number of cylinders: If you go for combustion engine, how many cylinders do you choose? Less cylinders are usually cheaper, make the motorcycle more lightweight and thus easier to maneuver. More cylinders make the engine feel smoother, also have more power, but are heavier and more expensive.\n- Usage: What do you use it for? Just for fun, commuting to work, general transportation? Travel? Offroad? Racing?\n- Assistance systems: Modern motorcycles have a range of assistance systems like ABS, Cruise Control, Distance sensors, electronic driving modes for different weather conditions etc. They can make driving safer , but also add weight and make the bike more expensive. Which ones do you need?  \n- Style: There are different styles like naked bike, cruiser, chopper, dual sport, race bike , scrambler etc. Different styles can be more or less adequate depending on your usage, or you can simply pick the one that appeals to you.\n- Size: The two most important aspects in terms of size are seat height and weight. Both have a huge impact on how well you are in control when not driving, for example when you need to stop at a traffic light or going slowly in stop & go traffic.\nSeat height is important , so your feet can reach the ground when stopping. However the width of the seat and general width dimensions of the bike also play a role here. So two bikes with same seat height might feel very differently. Best is to try it out", "category": "IT"}, {"instruction": "Which is a species of fish? Tope or Rope", "input": "", "output": "Tope", "category": "IT"}, {"instruction": "Why can camels survive for long without water?", "input": "", "output": "Camels use the fat in their humps to keep them filled with energy and hydration for long periods of time.", "category": "IT"}, {"instruction": "Alice's parents have three daughters: Amy, Jessy, and what\u2019s the name of the third daughter?", "input": "", "output": "The name of the third daughter is Alice", "category": "IT"}, {"instruction": "When was Tomoaki Komorida born?", "input": "Komorida was born in Kumamoto Prefecture on July 10, 1981. After graduating from high school, he joined the J1 League club Avispa Fukuoka in 2000. Although he debuted as a midfielder in 2001, he did not play much and the club was relegated to the J2 League at the end of the 2001 season. In 2002, he moved to the J2 club Oita Trinita. He became a regular player as a defensive midfielder and the club won the championship in 2002 and was promoted in 2003. He played many matches until 2005. In September 2005, he moved to the J2 club Montedio Yamagata. In 2006, he moved to the J2 club Vissel Kobe. Although he became a regular player as a defensive midfielder, his gradually was played less during the summer. In 2007, he moved to the Japan Football League club Rosso Kumamoto (later Roasso Kumamoto) based in his local region. He played as a regular player and the club was promoted to J2 in 2008. Although he did not play as much, he still played in many matches. In 2010, he moved to Indonesia and joined Persela Lamongan. In July 2010, he returned to Japan and joined the J2 club Giravanz Kitakyushu. He played often as a defensive midfielder and center back until 2012 when he retired.[1]", "output": "Tomoaki Komorida was born on July 10,1981.", "category": "IT"}, {"instruction": "If I have more pieces at the time of stalemate, have I won?", "input": "Stalemate is a situation in chess where the player whose turn it is to move is not in check and has no legal move. Stalemate results in a draw. During the endgame, stalemate is a resource that can enable the player with the inferior position to draw the game rather than lose.[2] In more complex positions, stalemate is much rarer, usually taking the form of a swindle that succeeds only if the superior side is inattentive.[citation needed] Stalemate is also a common theme in endgame studies and other chess problems.\n\nThe outcome of a stalemate was standardized as a draw in the 19th century. Before this standardization, its treatment varied widely, including being deemed a win for the stalemating player, a half-win for that player, or a loss for that player; not being permitted; and resulting in the stalemated player missing a turn. Stalemate rules vary in other games of the chess family.", "output": "No. \nStalemate is a drawn position. It doesn't matter who has captured more pieces or is in a winning position", "category": "IT"}, {"instruction": "Given a reference text about Lollapalooza, where does it take place, who started it and what is it?", "input": "Lollapalooza /\u02ccl\u0252l\u0259p\u0259\u02c8lu\u02d0z\u0259/ (Lolla) is an annual American four-day music festival held in Grant Park in Chicago. It originally started as a touring event in 1991, but several years later, Chicago became its permanent location. Music genres include but are not limited to alternative rock, heavy metal, punk rock, hip hop, and electronic dance music. Lollapalooza has also featured visual arts, nonprofit organizations, and political organizations. The festival, held in Grant Park, hosts an estimated 400,000 people each July and sells out annually.[4] Lollapalooza is one of the largest and most iconic music festivals in the world and one of the longest-running in the United States.[5][6]\n\nLollapalooza was conceived and created in 1991 as a farewell tour by Perry Farrell, singer of the group Jane's Addiction.", "output": "Lollapalooze is an annual musical festival held in Grant Park in Chicago, Illinois. It was started in 1991 as a farewell tour by Perry Farrell, singe of the group Jane's Addiction. The festival includes an array of musical genres including alternative rock, heavy metal, punk rock, hip hop, and electronic dance music. The festivals welcomes an estimated 400,000 people each year and sells out annually. Some notable headliners include: the Red Hot Chili Peppers, Chance the Rapper, Metallica, and Lady Gage. Lollapalooza is one of the largest and most iconic festivals in the world and a staple of Chicago.", "category": "IT"}, {"instruction": "Who gave the UN the land in NY to build their HQ", "input": "", "output": "John D Rockerfeller", "category": "IT"}, {"instruction": "Why mobile is bad for human", "input": "", "output": "We are always engaged one phone which is not good.", "category": "IT"}, {"instruction": "Who was John Moses Browning?", "input": "John Moses Browning (January 23, 1855 \u2013 November 26, 1926) was an American firearm designer who developed many varieties of military and civilian firearms, cartridges, and gun mechanisms \u2013 many of which are still in use around the world. He made his first firearm at age 13 in his father's gun shop and was awarded the first of his 128 firearm patents on October 7, 1879, at the age of 24. He is regarded as one of the most successful firearms designers of the 19th and 20th centuries and pioneered the development of modern repeating, semi-automatic, and automatic firearms.\n\nBrowning influenced nearly all categories of firearms design, especially the autoloading of ammunition. He invented, or made significant improvements to, single-shot, lever-action, and pump-action rifles and shotguns. He developed the first reliable and compact autoloading pistols by inventing the telescoping bolt, then integrating the bolt and barrel shroud into what is known as the pistol slide. Browning's telescoping bolt design is now found on nearly every modern semi-automatic pistol, as well as several modern fully automatic weapons. He also developed the first gas-operated firearm, the Colt\u2013Browning Model 1895 machine gun \u2013 a system that surpassed mechanical recoil operation to become the standard for most high-power self-loading firearm designs worldwide. He also made significant contributions to automatic cannon development.\n\nBrowning's most successful designs include the M1911 pistol, the water-cooled M1917, the air-cooled M1919, and heavy M2 machine guns, the M1918 Browning Automatic Rifle, and the Browning Auto-5 \u2013 the first semi-automatic shotgun. Some of these arms are still manufactured, often with only minor changes in detail and cosmetics to those assembled by Browning or his licensees. The Browning-designed M1911 and Hi-Power are some of the most copied firearms in the world.", "output": "John Moses Browning is one of the most well-known designer of modern firearms.  He started building firearms in his father's shop at the age of 13, and was awarded his first patent when he was 24.\n\nHe  designed the first reliable automatic pistol, and the first gas-operated firearm, as well inventing or improving single-shot, lever-action, and pump-action rifles and shotguns.\n\nToday, he is most well-known for the M1911 pistol, the Browning Automatic Rifle, and the Auto-5 shotgun, all of which are in still in current production in either their original design, or with minor changes.  His M1911 and Hi-Power pistols designs are some of the most reproduced firearms in the world today.", "category": "IT"}, {"instruction": "Who is Thomas Jefferson?", "input": "Thomas Jefferson (April 13, 1743[a] \u2013 July 4, 1826) was an American statesman, diplomat, lawyer, architect, philosopher, and Founding Father who served as the third president of the United States from 1801 to 1809.[13] Among the Committee of Five charged by the Second Continental Congress with authoring the Declaration of Independence, Jefferson was the Declaration's primary author. Following the American Revolutionary War and prior to becoming the nation's third president in 1801, Jefferson was the first United States secretary of state under George Washington and then the nation's second vice president under John Adams.", "output": "Thomas Jefferson (April 13, 1743[a] \u2013 July 4, 1826) was an American statesman, diplomat, lawyer, architect, philosopher, and Founding Father who served as the third president of the United States from 1801 to 1809.[13] Among the Committee of Five charged by the Second Continental Congress with authoring the Declaration of Independence, Jefferson was the Declaration's primary author. Following the American Revolutionary War and prior to becoming the nation's third president in 1801, Jefferson was the first United States secretary of state under George Washington and then the nation's second vice president under John Adams.\n\nAmong the nation's Founding Fathers, Jefferson is considered unmatched in his intellectual depth and breadth.[14] His passionate writings and advocacy for human rights, including freedom of thought, speech, and religion, were a leading inspiration behind the American Revolution, which ultimately gave rise to the American Revolutionary War, American independence, and the United States Constitution. Jefferson's ideas were globally influential in shaping and inspiring the Age of Enlightenment, which proved transformational in the late 17th and 18th centuries.[15] He was a leading proponent of democracy, republicanism, and individual rights, and produced formative documents and decisions at the state, national, and international levels.\n\nDuring the American Revolution, Jefferson represented Virginia in the Second Continental Congress in Philadelphia, which adopted the Declaration of Independence on July 4, 1776. As a Virginia legislator, he drafted a state law for religious freedom. He served as the second Governor of Virginia from 1779 to 1781, during the Revolutionary War. In 1785, Jefferson was appointed the United States Minister to France, and subsequently, the nation's first secretary of state under President George Washington from 1790 to 1793. Jefferson and James Madison organized the Democratic-Republican Party to oppose the Federalist Party during the formation of the First Party System. With Madison, he anonymously wrote the Kentucky and Virginia Resolutions in 1798 and 1799, which sought to strengthen states' rights by nullifying the federal Alien and Sedition Acts.\n\nJefferson and Federalist John Adams became friends as well as political rivals, serving in the Continental Congress and drafting the Declaration of Independence together. In the 1796 presidential election between the two, Jefferson came in second, which according to electoral procedure at the time, made him vice president to Adams. Jefferson challenged Adams again in 1800 and won the presidency. After his term in office, Jefferson eventually reconciled with Adams and they shared a correspondence that lasted 14 years. He and Adams both died on the same day, July 4, 1826, which was also the 50th anniversary of Declaration of Independence.\n\nAs president, Jefferson pursued the nation's shipping and trade interests against Barbary pirates and aggressive British trade policies. Starting in 1803, he promoted a western expansionist policy with the Louisiana Purchase, which doubled the nation's claimed land area. To make room for settlement, Jefferson began the process of Indian tribal removal from the newly acquired territory. As a result of peace negotiations with France, his administration reduced military forces. He was re-elected in 1804, but his second term was beset with difficulties at home, including the trial of former vice president Aaron Burr. In 1807, American foreign trade was diminished when Jefferson implemented the Embargo Act in response to British threats to U.S. shipping. The same year, Jefferson signed the Act Prohibiting Importation of Slaves.\n\nJefferson was a plantation owner, lawyer, and politician, and mastered many disciplines including surveying, mathematics, horticulture, and mechanics. He was also an architect in the Palladian tradition. Jefferson's keen interest in religion and philosophy led to his appointment as president of the American Philosophical Society. He largely shunned organized religion but was influenced by Christianity, Epicureanism,[4] and deism. Jefferson rejected fundamental Christianity, denying Christ's divinity. A philologist, Jefferson knew several languages. He was a prolific letter writer and corresponded with many prominent people, including Edward Carrington, John Taylor of Caroline, and James Madison. In 1785, Jefferson authored Notes on the State of Virginia, considered perhaps the most important American book published before 1800.[16] Jefferson championed the ideals, values, and teachings of the Enlightenment.\n\nSince the 1790s, Jefferson was rumored to have had children by his sister-in-law and slave Sally Hemings, leading to what is known as the Jefferson-Hemings controversy. A 1998 DNA test concluded that one of Sally Hemings's children, Eston Hemings, was of the Jefferson male line. According to scholarly consensus, based on documentary and statistical evaluation, as well as oral history, Jefferson probably fathered at least six children with Hemings, including four that survived to adulthood.[17][18][19]\n\nAfter retiring from public office, Jefferson founded the University of Virginia. Presidential scholars and historians generally praise Jefferson's public achievements, including his advocacy of religious freedom and tolerance in Virginia, his peaceful acquisition of the Louisiana Territory from France without war or controversy, and his ambitious and successful Lewis and Clark Expedition. Some modern historians are critical of Jefferson's personal involvement with slavery. Jefferson is consistently ranked among the top ten presidents of American history.", "category": "IT"}, {"instruction": "Who was Kyle Van Zyl playing against when he scored 36 of hisa teams 61 points?", "input": "Van Zyl joined the Eastern Province Kings Academy, where he played for the Eastern Province U19 side in the 2010 Under-19 Provincial Championship. He was a key player for the Eastern Province U21 side in the 2012 Under-21 Provincial Championship, scoring 71 points in eight appearances. Van Zyl was under the Top SARU Performers, scoring the most tries at 6 in the 2012 Provincial Under 21 in the Rugby Junior Provincials.[6]\n\nThis included a record and a remarkable personal haul in their opening match, when he scored 36 of his team's points in a 61\u20133 victory over Boland U21, consisting of four tries and eight conversions and was awarded Man of the Match.[7]", "output": "Kyle Van Zyl was playing against Boland U21 when he scored 36 points, leading his team to victory in a 61-3 win.", "category": "IT"}, {"instruction": "From the passage list down the areas for which Dar es Salaam is Tanzania's most prominent city. List the results in comma separated format.", "input": "Dar es Salaam (/\u02ccd\u0251\u02d0r \u025bs s\u0259\u02c8l\u0251\u02d0m/; from Arabic: \u062f\u064e\u0627\u0631 \u0627\u0644\u0633\u064e\u0651\u0644\u064e\u0627\u0645, romanized: D\u00e2r es-Sel\u00e2m, lit.\u2009'Abode of Peace') or commonly known as Dar, is the largest city and financial hub of Tanzania. It is also the capital of Dar es Salaam Region. With a population of over six million people, Dar is the largest city in East Africa and the seventh-largest in Africa. Located on the Swahili coast, Dar es Salaam is an important economic centre and is one of the fastest-growing cities in the world.[2]\n\nThe town was founded by Majid bin Said, the first Sultan of Zanzibar, in 1865 or 1866. It was the main administrative and commercial center of German East Africa, Tanganyika, and Tanzania. The decision was made in 1974 to move the capital to Dodoma and was officially completed in 1996.[3]\n\nDar es Salaam is Tanzania's most prominent city for arts, fashion, media, film, television, and finance. It is the capital of the co-extensive Dar es Salaam Region, one of Tanzania's 31 administrative regions, and consists of five districts: Kinondoni in the north; Ilala in the centre; Ubungo and Temeke in the south; and Kigamboni in the east across the Kurasini estuary.", "output": "arts, fashion, media, film, television, finance", "category": "IT"}, {"instruction": "What is a polygon?", "input": "", "output": "A polygon is a form in Geometry.  It is a single dimensional plane made of connecting lines and any number of vertices.  It is a closed chain of connected line segments or edges.  The vertices of the polygon are formed where two edges meet.  Examples of polygons are hexagons, pentagons, and octagons.  Any plane that does not contain edges or vertices is not a polygon.  An example of a non-polygon is a circle.", "category": "IT"}, {"instruction": "How do I start running?", "input": "", "output": "Make sure you get comfortable running shoes and attire. Start with achievable goal in mind like a 5K race. If you never ran before, start gradually from a walk, to brisk walk, light jog aiming for 15-30mins initially. Slowly increase your running time and distance as your fitness level improves. One of the most important things is cool down and gentle stretching. Always listen to your body, and take rest days when needed to prevent injury.", "category": "IT"}, {"instruction": "Which episodes of season four of Game of Thrones did Michelle MacLaren direct?", "input": "", "output": "She directed \"Oathkeeper\" and \"First of His Name\" the fourth and fifth episodes of season four, respectively.", "category": "IT"}, {"instruction": "What is process mining?", "input": "Process mining is a family of techniques relating the fields of data science and process management to support the analysis of operational processes based on event logs. The goal of process mining is to turn event data into insights and actions. Process mining is an integral part of data science, fueled by the availability of event data and the desire to improve processes.Process mining techniques use event data to show what people, machines, and organizations are really doing. Process mining provides novel insights that can be used to identify the executional path taken by operational processes and address their performance and compliance problems.\n\nProcess mining starts from event data. Input for process mining is an event log. An event log views a process from a particular angle. Each event in the log should contain (1) a unique identifier for a particular process instance (called case id), (2) an activity (description of the event that is occurring), and (3) a timestamp. There may be additional event attributes referring to resources, costs, etc., but these are optional. With some effort, such data can be extracted from any information system supporting operational processes. Process mining uses these event data to answer a variety of process-related questions.", "output": "Process mining brings together data mining, data science and process management to find process efficiencies.", "category": "IT"}, {"instruction": "What are some unique curtain tie backs that you can make yourself?", "input": "", "output": "There are many items you can use to make a curtain tie back. Some ideas for this include a chain, a circle and pin, jute rope, wooden beaded rope, a necklack or bracelet, a door knob, a length of a leather belt, macrame rope, or a string of artificial flowers.", "category": "IT"}, {"instruction": "What is a dispersive prism?", "input": "In optics, a dispersive prism is an optical prism that is used to disperse light, that is, to separate light into its spectral components (the colors of the rainbow). Different wavelengths (colors) of light will be deflected by the prism at different angles.[1] This is a result of the prism material's index of refraction varying with wavelength (dispersion). Generally, longer wavelengths (red) undergo a smaller deviation than shorter wavelengths (blue). The dispersion of white light into colors by a prism led Sir Isaac Newton to conclude that white light consisted of a mixture of different colors.", "output": "A dispersive prism is an optical prism that disperses the light's different wavelengths at different angles. When white light is shined through a dispersive prism it will separate into the different colors of the rainbow.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Cantaro, Gudok", "input": "", "output": "Gudok is string, Cantaro is percussion.", "category": "IT"}, {"instruction": "Give me the top 5 golf equipment company names.", "input": "", "output": "Titleist, Taylormade, Callaway, Ping, Cobra", "category": "IT"}, {"instruction": "What individual has won the most Olympic gold medals in the history of the games?", "input": "", "output": "Michael Phelps has won the most gold medals of all time with 23 golds.", "category": "IT"}, {"instruction": "Which Dutch artist painted \u201cGirl with a Pearl Earring\u201d?", "input": "", "output": "Vermeer", "category": "IT"}, {"instruction": "What happens when the sun goes down?", "input": "", "output": "When the sun sets, the evening starts.", "category": "IT"}, {"instruction": "What is a verb?", "input": "", "output": "A verb is an action word that describes an activity.  Examples of verbs are the following: swimming, hiking, biking, roller skating, or skydiving.  All of these single and combination word examples are tied to an activity that any living thing can do.  For example, a dog can bike ride with a human when the human is pedaling the bike.  Verb use is not limited to humans or people only but applies to all living things.", "category": "IT"}, {"instruction": "Extract the owner of Lamborghini and a listing of the different types of Huracan cars that Lamborghini has produced for its Motorsport division.", "input": "Automobili Lamborghini S.p.A. (Italian pronunciation: [auto\u02c8m\u0254\u02d0bili lambor\u02c8\u0261i\u02d0ni]) is an Italian manufacturer of luxury sports cars and SUVs based in Sant'Agata Bolognese. The company is owned by the Volkswagen Group through its subsidiary Audi.\n\nFerruccio Lamborghini (1916\u20131993), an Italian manufacturing magnate, founded Automobili Ferruccio Lamborghini S.p.A. in 1963 to compete with Ferrari. The company was noted for using a rear mid-engine, rear-wheel drive layout. Lamborghini grew rapidly during its first decade, but sales plunged in the wake of the 1973 worldwide financial downturn and the oil crisis. The firm's ownership changed three times after 1973, including a bankruptcy in 1978. American Chrysler Corporation took control of Lamborghini in 1987 and sold it to Malaysian investment group Mycom Setdco and Indonesian group V'Power Corporation in 1994. In 1998, Mycom Setdco and V'Power sold Lamborghini to the Volkswagen Group where it was placed under the control of the group's Audi division.\n\nNew products and model lines were introduced to the brand's portfolio and brought to the market and saw an increased productivity for the brand. In the late 2000s, during the worldwide financial crisis and the subsequent economic crisis, Lamborghini's sales saw a drop of nearly 50 per cent.\n\nLamborghini currently produces the V12-powered Aventador and the V10-powered Hurac\u00e1n, along with the Urus SUV powered by a twin-turbo V8 engine. In addition, the company produces V12 engines for offshore powerboat racing.\n\nLamborghini Trattori, founded in 1948 by Ferruccio Lamborghini, is headquartered in Pieve di Cento, Italy and continues to produce tractors. Since 1973, Lamborghini Trattori has been a separate entity from the automobile manufacturer.\n\nHistory\nMain article: History of Lamborghini\n\nFerruccio Lamborghini with a Jarama and a tractor of his brand\nManufacturing magnate Italian Ferruccio Lamborghini founded the company in 1963 with the objective of producing a refined grand touring car to compete with offerings from established marques such as Ferrari. The company's first models, such as the 350 GT, were released in the mid-1960s. Lamborghini was noted for the 1966 Miura sports coup\u00e9, which used a rear mid-engine, rear-wheel drive layout.\n\nLamborghini grew rapidly during its first ten years, but sales fell in the wake of the 1973 worldwide financial downturn and the oil crisis. Ferruccio Lamborghini sold the company to Georges-Henri Rossetti and Ren\u00e9 Leimer and retired in 1974. The company went bankrupt in 1978, and was placed in the receivership of brothers Jean-Claude and Patrick Mimran in 1980. The Mimrans purchased the company out of receivership by 1984 and invested heavily in its expansion. Under the Mimrans' management, Lamborghini's model line was expanded from the Countach to include the Jalpa sports car and the LM002 high-performance off-road vehicle.\n\nThe Mimrans sold Lamborghini to the Chrysler Corporation in 1987. After replacing the Countach with the Diablo and discontinuing the Jalpa and the LM002, Chrysler sold Lamborghini to Malaysian investment group Mycom Setdco and Indonesian group V'Power Corporation in 1994. In 1998, Mycom Setdco and V'Power sold Lamborghini to the Volkswagen Group where it was placed under the control of the group's Audi division. New products and model lines were introduced to the brand's portfolio and brought to the market and saw an increased productivity for the brand Lamborghini. In the late 2000s, during the worldwide financial crisis and the subsequent economic crisis, Lamborghini's sales saw a drop of nearly 50 per cent.\n\nIn 2021, the CEO of Lamborghini said that by 2024 all its models will be hybrid.[5]\n\nAutomobiles produced\nLamborghini Motorsport Division Squadra Corse produces GT3 cars and cars for their Super Trofeo events based on the Gallardo and Hurac\u00e1n. Apart from them, the Squadra Corse builds cars upon customer request.\n\nGT3 and Super Trofeo Cars\nGallardo LP 570-4 Super Trofeo\nGallardo LP 560-4 Super Trofeo\nHurac\u00e1n LP 620-2 Super Trofeo EVO\nHurac\u00e1n LP 620-2 Super Trofeo EVO2\nHurac\u00e1n Super Trofeo GT2\nHurac\u00e1n GT3\nHurac\u00e1n GT3 Evo\nHurac\u00e1n GT3 Evo 2\nSpecial cars\nThese cars were built by Squadra Corse upon customer request.\n\nEssenza SCV12\nSC18 Alston\nSC20", "output": "Vokswagen Group owns Lamborghini through its subsidiary, Audi.\n\nLamborghini has produced the following Huracan motorsport models:\n- Hurac\u00e1n LP 620-2 Super Trofeo EVO\n- Hurac\u00e1n LP 620-2 Super Trofeo EVO2\n- Hurac\u00e1n Super Trofeo GT2\n- Hurac\u00e1n GT3\n- Hurac\u00e1n GT3 Evo\n- Hurac\u00e1n GT3 Evo 2", "category": "IT"}, {"instruction": "Which of the following is useful for transportation: a glass of wine, a lamp, a train, an iced cube tray, a plane, a bicycle, an apple and a scooter.", "input": "", "output": "The useful objects for transportation in the list are train, plane, bicyle and scooter.", "category": "IT"}, {"instruction": "What is the average lifespan of a Golden Retriever?", "input": "Golden Retrievers are a generally healthy breed; they have an average lifespan of 12 to 13 years.[9] Irresponsible breeding to meet high demand has led to the prevalence of inherited health problems in some breed lines, including allergic skin conditions, eye problems and sometimes snappiness.[9] These problems are rarely encountered in dogs bred from responsible breeders.[9]", "output": "The average lifespan of a Golden Retriever is 12 to 13 years.", "category": "IT"}, {"instruction": "Without quoting directly from the text give me a summary of the history of the Key Lime Pie.", "input": "Key lime pie is probably derived from the \"Magic Lemon Cream Pie\" published in a promotional brochure by Borden, a producer of condensed milk, in 1931.[3] The recipe is attributed to Borden's fictional spokesperson, Jane Ellison, and includes condensed milk, lemon juice and rind, and egg yolks. It is covered with meringue, baked, and served cold.[4] According to the pastry chef Stella Parks, users of the recipe altered it with local ingredients; she describes it as \"a stunning reminder of how deeply America's traditions are shaped by advertising\".[3]\n\nA \"Tropical Lime Chiffon Pie\", using condensed milk and egg yolks, is documented in a 1933 Miami newspaper article.[5] An \"icebox lime pie\", was mentioned as a specialty of the Florida Keys in 1935.[6][full citation needed] and a recipe under the name \"Key Lime Pie\" was published in 1940.[7][full citation needed]\n\nNo earlier solid sources are known, despite appeals to the public.[8][9] A 1927 Key West Women's Club cookbook does not mention the recipe.[10] A 1926 restaurant menu includes \"lime pie\", but it is unclear what it was. Various accounts claim that it was known earlier, but none were recorded before 1933.[11][9] A widely-reported story claims that William Curry's cook Aunt Sally invented it in the late 19th century. But there is no evidence for this, and the oldest version of this story dates to only 1895, in promotional materials for a Bed and Breakfast in Curry's former house.[3]\n\nIt was in the 1950s that Key lime pie was promoted as Florida's \"most famous treat\" and in 1987 as \"the greatest of all regional American desserts.\"[3]", "output": "Key lime pie is an American dessert pie. It is made of lime juice, egg yolks, and sweetened condensed milk. It is best served with meringue topping and is typically cooked in a graham cracker crust.\n\nThe dish is named after the small Key limes which which have yellow juice complementing the filling which is typically yellow because of the egg yolks used.\n\nThe filling is made by simply mixing the ingredients without cooking the proteins of the egg yolks and condensed milk and the acidic lime juice curdle, thickening the mixture without baking.", "category": "IT"}, {"instruction": "What is LAPR?", "input": "", "output": "This stands for life assurance premium relief. Before 14 March 1984 there was tax relief on life insurance premiums paid by policyholders for policies which qualified for tax relief. Policies which started", "category": "IT"}, {"instruction": "Is beauty objective or subjective?", "input": "", "output": "The opinions on this question vary from person to person. \nStatistically, a pattern of preference is easily visible on what people would describe as beautiful. An evident example of this phenomenon is a beauty standard for women and men. Society seems to agree on what features, both physical and internal, can deem a person beautiful. The standard of beauty is also projected beyond humans, onto animal breeds, for example, in cat shows. \nA link between beauty and how closely it resembles perfection appears to exist. For example, a rose with many petals and no tears or scratches is generally seen as more beautiful than one with fewer, visibly ruined petals. \nHowever, the question of perfection also raises a problem as it is difficult and arguably impossible to define perfection. Beauty does not necessarily mean perfection. For example, large eyes are statistically considered to be more attractive however, in terms of their biological  purpose they possess no superiority to small eyes. Therefore, both beauty and perfection depend on the perspective or purpose with which you observe an object.\n\nFurthermore, the clear fluctuations through centuries and cultures on what is considered to be beautiful should also be taken into account. Fashion trends and art styles, for instance,  are constantly changing. Additionally, the diversity in opinions suggests there is nothing that is considered beautiful by everyone, so even if the majority deem a particular object or thing as beautiful, it\u2019s beauty remains subjective because it remains based on an ever-changing preference rather than objective truth.", "category": "IT"}, {"instruction": "Extract all of the dates mentioned in this paragraph and list them using bullets in the format {Date} - {Description}", "input": "Daniel Leavitt was born November 16, 1813, at Rye, New Hampshire, the son of Benning Leavitt, influential businessman, state senator, county commissioner and later Chicopee Selectman,[5] and his wife Olive (Jenness) Leavitt. Daniel Leavitt married in 1838 at West Springfield, Massachusetts, Ruth Jeannette Ball. They had three children.", "output": "\u2022 November 16, 1813 - This is when Daniel Leavitt was born\n\u2022 1838 - This is when Daniel Leavitt married his wife Ruth Jeannette Ball.", "category": "IT"}, {"instruction": "Which products apple sell?", "input": "", "output": "Apple sells variety of products. including watches, phones, laptops and computers.", "category": "IT"}, {"instruction": "Write a short story about a person who discovers a hidden room in their house. The story should include a plot twist and a clear resolution at the end.", "input": "", "output": "It was going to be a long day.  With her brother-in-law out of town, Lisa had agreed to watch her niece Stella for the afternoon and the little girl was known to be a bit of a handful. Her plan had been to spend the afternoon at the park to let Stella run and climb, to wear her out a bit.  Unfortunately, this outing was foiled by the constant downpour of rain so Lisa resigned herself to a day inside with the tiny tyrant. Stella arrived early and excited to play.  Lisa decided to begin with a game of hide and seek, after all this could take up a good part of the morning without too much trouble.  Stella ran off to hide and Lisa sat quietly drinking coffee while calling out to the little girl, pretending to seek. Eventually she set off to find the little girl but soon she realized that something was wrong.  No matter where she looked, Stella was nowhere to be found. The house wasn't that large, making her disappearance even more perplexing.  Lisa had only recently moved into the home that she bought from her great aunt shortly before her death and she hasn't even moved out all of the existing furniture. Maybe Stella had gotten stuck somewhere behind the large wardrobe in the bedroom or she had climbed up into a cupboard in the laundry room.  Panic was starting to settle in as she moved the wardrobe further from the wall, where only a small child could have hidden before.  Suddenly, saw a small crack in the wall, and then realized it was a small door that she never knew was there.  The door was slightly ajar and she eventually moved the wardrobe enough to open the door and climb inside. What was this place?  The entrance opened up to reveal a small room that Lisa never knew existed!  It was full of treasure, gold bars and jewels.  Stella sat in the middle of the room quietly playing with the treasure, unaware of the immense value she was surrounded by.  Lisa had known her aunt was a secretive woman but this was an incredible find and would change her life forever.  Stella's visit was the good luck charm she needed to unlock this bounty and she would be forever grateful to the little girl!  Time to call her brother-in-law to thank him for letting Stella visit.", "category": "IT"}, {"instruction": "Please describe  what is oil and give me a list of it\u2019s applications.", "input": "An oil is any nonpolar chemical substance that is composed primarily of hydrocarbons and is hydrophobic (does not mix with water) & lipophilic (mixes with other oils). Oils are usually flammable and surface active. Most oils are unsaturated lipids that are liquid at room temperature.\n\nThe general definition of oil includes classes of chemical compounds that may be otherwise unrelated in structure, properties, and uses. Oils may be animal, vegetable, or petrochemical in origin, and may be volatile or non-volatile.[1] They are used for food (e.g., olive oil), fuel (e.g., heating oil), medical purposes (e.g., mineral oil), lubrication (e.g. motor oil), and the manufacture of many types of paints, plastics, and other materials. Specially prepared oils are used in some religious ceremonies and rituals as purifying agents.", "output": "An oil is a chemical substance that is composed primarily of hydrocarbons and may be animal, vegetable or petrochemical in origin.\nOil is used in a wide range of applications and is essential to everyday human life. These are:\nCooking - edible vegetable and animal oils are used for various purposes in cooking and food preparation\nCosmetics - most facial cleansers, lotions and hair care products contain molecules that come from mineral and vegetable oils\nFuel - crude oil is refined and converted to diesel, gasoline or jet fuel to power cars, trucks and planes\nHeating - petrochemical oil is used for heating\nPainting - oil is used as a supporting medium for paints\nLubrication - oils are used in various engineering purposes as they do not easily adhere to other substance which makes them useful as lubricants\nReligion - oil has been used throughout history as a religious medium. It is often considered a spiritually purifying agent and is used to anointing purposes\nHealth - oils holds lots of fats and medical properties, for example fish oil holds the omega-3 fatty acid which helps with inflammation and reduces fat in the bloodstream", "category": "IT"}, {"instruction": "List 6 different types of rain in Seattle", "input": "", "output": "1. Mist\n2. Drizzle\n3. Sleet\n4. Downpour\n5. Freezing Rain\n6. Sun Shower", "category": "IT"}, {"instruction": "What is investment banking?", "input": "", "output": "Investment banking pertains to certain activities of a financial services company or a corporate division that consist in advisory-based financial transactions on behalf of individuals, corporations, and governments. Traditionally associated with corporate finance, such a bank might assist in raising financial capital by underwriting or acting as the client's agent in the issuance of debt or equity securities. An investment bank may also assist companies involved in mergers and acquisitions (M&A) and provide ancillary services such as market making, trading of derivatives and equity securities, FICC services (fixed income instruments, currencies, and commodities) or research (macroeconomic, credit or equity research). Most investment banks maintain prime brokerage and asset management departments in conjunction with their investment research businesses. As an industry, it is broken up into the Bulge Bracket (upper tier), Middle Market (mid-level businesses), and boutique market (specialized businesses).\n\nUnlike commercial banks and retail banks, investment banks do not take deposits.", "category": "IT"}, {"instruction": "I started a new company named Greystone Inc. What do we do?", "input": "", "output": "- Investment banking for weird guys only\n- Aerospace consulting\n- Pasta and pasta accessory global logistics\n- Political lobbying for the mining industry", "category": "IT"}, {"instruction": "Tell me whether or not these foods are on EWG's dirty dozen list", "input": "", "output": "avocados, kiwi, pairs, blueberries, green beans, kale, cabbage", "category": "IT"}, {"instruction": "How much music theory knowledge is required to compose music?", "input": "", "output": "Technically speaking, very little music theory knowledge is \u201crequired\u201d to compose music. Music theory is, essentially, what musicians have learned over the course of several hundred years about how to write music that is interesting and sounds good. In other words, music theory is there to help you, not hold you back. \n\nWhen you learn music theory, what often happens is that you expand your broader understanding of music, which can be a very helpful safety net. The more music theory you know, the easier you\u2019ll be able to distinguish between the good ideas and the not-so-good. You need to know the rules before you can break them. You need to be able to write by the book before you throw the book away. If not, you run the risk of writing music that\u2019s not nearly as clever as you think it is, that tries to be daring and experimental but ends up just being dull and vanilla. And frankly, I just don\u2019t see the value in ignoring all the work that centuries worth of musicians have done into knowing how music works. Putting the time into learning and really understanding it can only make you a better musician and a better composer.\n\nSo, that\u2019s my answer. Learn at least as much theory as you need to know to understand the rules you want to break.", "category": "IT"}, {"instruction": "Categorize each of the following instruments as either string or keyboard: Guitar, Violin, piano, harmonium, cello, accordion, banjo", "input": "", "output": "Guitar - String\nViolin - String\npiano - keyboard\nharmonium - keyboard\ncello - string\naccordion - keyboard\nbanjo - string", "category": "IT"}, {"instruction": "Summarize in one sentence this article about a famous song.", "input": "\"I'm an Old Cowhand (From the Rio Grande)\" is a comic song written by Johnny Mercer for the Paramount Pictures release Rhythm on the Range and sung by its star, Bing Crosby. The Crosby commercial recording was made on July 17, 1936, with Jimmy Dorsey & his Orchestra for Decca Records.[1] It was a huge hit in 1936, reaching the No. 2 spot in the charts of the day,[2] and it greatly furthered Mercer's career. Crosby recorded the song again in 1954 for his album Bing: A Musical Autobiography.\nMembers of the Western Writers of America chose it as one of the Top 100 Western songs of all time.[3]\n\nBackground\nMercer and his wife were driving across the US en route to his hometown, Savannah, Georgia, after having apparently failed to succeed in Hollywood. Mercer was amused by the sight of cowboys, with spurs and ten-gallon hats, driving cars and trucks instead of riding horses. Singing cowboys were popular in films and on the radio then, and within 15 minutes, writing on the back of an envelope, Mercer transferred the image he was seeing into a song whose satirical lyrics vented some of his own bitter frustration with Hollywood.[4]\n\nThe lyrics, about a 20th-century cowboy who has little in common with the cowpunchers of old, have been included in some anthologies of light verse.", "output": "I'm an Old Cowhand (From the Rio Grande), written by Johnny Mercer and recorded by Bing Crosby, is popular song from 1936 that satirizes cowboy culture of the time.", "category": "IT"}, {"instruction": "What is the Maareech Advanced Torpedo Defence System (ATDS)?", "input": "Maareech Advanced Torpedo Defence System (ATDS) is a torpedo detection and countermeasure system used by the Indian Navy. The system offers a complete solution to detect and locate an incoming torpedo and to apply countermeasures to protect naval platform against torpedo attack. It was developed as a joint project of the Naval Physical and Oceanographic Laboratory (NPOL), Kochi and the Naval Science and Technological Laboratory (NSTL), Visakhapatnam.[1][2][3][4] Bharat Electronics is manufacturing it India.[5]", "output": "The Maareech Advanced Torpedo Defence System (ATDS is a torpedo detection and countermeasure system used by the Indian Navy.", "category": "IT"}, {"instruction": "Change the following passage to past tense", "input": "The episode focuses on two people: an elderly hospital doctor (Aleksander Bardini), who lives by himself in the ubiquitous Dekalog apartment block; and Dorota Geller (Krystyna Janda), a woman in her 30s who lives in the same building and is a violinist with the Philharmonic Orchestra.", "output": "The episode focused on two people: an elderly hospital doctor (Aleksander Bardini), who lived by himself in the ubiquitous Dekalog apartment block; and Dorota Geller (Krystyna Janda), a woman in her 30s who lived in the same building and was a violinist with the Philharmonic Orchestra.", "category": "IT"}, {"instruction": "What is the tallest mountain in the continental US?", "input": "", "output": "Mt. Whitney, which is 14500 ft,  is the tallest mountain in the continental US. Although if we were to include the state of Alaska, then the tallest mountain is actually Mt Denali, which is 20,320 ft. Mt. Whitney is actually only the 17th tallest mountain in all of the US, where the tallest 1-16 are all mountains in Alaska.", "category": "IT"}, {"instruction": "Who is Shoji Hashimoto?", "input": "Shoji Hashimoto (\u6a4b\u672c \u660c\u4e8c, Hashimoto Sh\u014dji, April 18, 1935 \u2013 December 2, 2009) was a professional Go player.", "output": "Shoji Hashimoto (\u6a4b\u672c \u660c\u4e8c, Hashimoto Sh\u014dji, April 18, 1935 \u2013 December 2, 2009) was a professional Go player.\nHashimoto turned pro in 1947 when he was just 12. It took him only 11 years to reach 9p. He learned Go from his father Hashimoto Kunisabur\u014d and his disciples include Takahara Sh\u016bji, Moriyama Naoki, Oda Hiromitsu, Okahashi Hirotada, and Hayashi K\u014dz\u014d. He was a member of the Kansai Ki-in.", "category": "IT"}, {"instruction": "What are some of the best comedy movies of the 1980's?", "input": "", "output": "Some of the best movies released in the 1980's are The Breakfast Club, The Goonies, Sixteen Candles, Ghostbusters and Back to the Future.", "category": "IT"}, {"instruction": "In golf what do the Americans call an albatross", "input": "", "output": "Double Eagle", "category": "IT"}, {"instruction": "What are common ingredients of a full english breakfast?", "input": "", "output": "Bacon, eggs, sausages, beans, toast, mushrooms, tomatoes. Some people also include black pudding and hash browns.\nEggs are commonly fried or scrambled.", "category": "IT"}, {"instruction": "Plan for a three day road trip for May long weekend from Westfield, New Jersey", "input": "", "output": "May 26: Drive to Montreal from Westfield, NJ. Time taken  6 hrs. Stay there overnight\nMay 27:  have a quick breakfast..checkout and drive to Mount Tremblant. Time: 90 minutes\nMay 27: Hike Grand Brule ( red path) on the way up and green path on the way down\nMay 27: Stroll around the Tremblant village\nMay 28: Drive to Quebec City. Time taken: 4 hrs\nMay 28: Explore the city, aquarium and go for wildlife watching\nMay 29: Drive to Montreal. Spend time exploring the city\nMay 30: Drive back to Westfield, New Jersey", "category": "IT"}, {"instruction": "How do you operate a car with a manual transmission?", "input": "", "output": "Through a combination of a shifter and three pedals: gas, brake, and clutch. Press down the clutch pedal with one foot, and the brake with your other foot first and then turn on the engine of the car. It is recommended to shift to neutral immediately after turning on your car and prior to departing. To shift between one of the engaged gears, typically marked 1, 2, 3, 4, 5 N (for neutral) and R (for reverse), press down on the clutch all the way to the floor and move the shifter to the desired location. Once the car is on and you're in neutral if you want to move forward, press and hold the clutch pedal to the floor and move the shifter to the \"1\" position. Slowly disengage the clutch pedal partially, and while disengaging slowly start to press down on the gas pedal. After gradually pressing more on the gas pedal, slowly remove your foot from the clutch entirely. This will start you in forward motion, and you will be restricted to the speed limit of 1st gear. You can track this limit through the RPM (revolutions per minute) gauge on the dashboard of your car. Typically you want to keep the RPMs between 1500-4000. If the RPMs start to decrease to 1500-2000 that is a sign you want to shift from a higher gear to a lower gear (i.e. 2nd gear to 1st gear), and as the RPMs increase to 4000, that is an indication you want to shift to a higher gear (i.e. 2nd gear to 3rd gear).", "category": "IT"}, {"instruction": "What is the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB)?", "input": "", "output": "The Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB) is a database that provides a wealth of information about the 3D structures of proteins, nucleic acids, and other macromolecules. The database contains experimentally determined atomic coordinates for a large number of macromolecules, which can be used to study their structures, functions, and interactions. The RCSB PDB is widely used in genomics research and drug discovery, as it provides a valuable resource for understanding the structural basis of many biological processes and for designing new drugs that target specific macromolecules.\n\nIn addition to the atomic coordinates, the RCSB PDB contains a wealth of additional information about each macromolecule, including experimental methods used for structure determination, citations to relevant scientific literature, and information about biological function, sequence, and homology. The database also provides a variety of tools and resources for visualizing, analyzing, and downloading structural data, including a web-based viewer that allows users to interactively explore the 3D structures of macromolecules.", "category": "IT"}, {"instruction": "What are 5 potential uses for an empty La Croix can?", "input": "", "output": "1. Make your bike sound like it has an engine by wrapping the can around the back tire.\n2. A percussion instrument to play along with friends in a jam session.  You could just crinkle it, hit it with a pen, or fill it with sand or debris and shake it.  \n3. A baking tool.  You can used the bottom of the can to stamp out perfectly circle, uniform cookies from a rolled-out sheet of cookie dough.\n4. A field razor.  Tear the can carefully to create an effective cutting device for emergency use.\n5. A make shift ball to throw around with friends at the park. An empty can could be a fun projectile to use in a friendly game of 3 Flies Up.", "category": "IT"}, {"instruction": "What is the name of the Winslow's nerdy next-door neighbor on the TV show \"Family Matters\"?", "input": "", "output": "Steve Urkel", "category": "IT"}, {"instruction": "Why are so many US Hollywood films made in the state of Georgia?", "input": "", "output": "While film in the United States as an audience artform started in New York it moved to Los Angeles for the stated reason of longer and sunnier days.  Another part of the story was a patent dispute in 1898 between Thomas Edison and his patent for the Kinetograph.  Edison stated that he effectively had a say in how films were made and wanted royalties for their use.  Moving from New York near where Edison was based to Los Angeles was a simple way to grow the industry and distance themselves from a patent war.  \n\nThis mobility at the start of the modern film era due to costs continued through the 1960's and 1970's with westerns being shot in Spain.  The 1980's and 1990's continued this trend primarily shooting in Canada or Mexico.  At the turn of the century state legislators in the United States started provided steep tax rebates.  The practical outworking of this is studios are encouraged to hire local talent and use local services when producing their film.  The ratios for these rebates is fairly complicated and have created a new industry of tax professionals serving the film industry.\n\nSo then why Georgia?  Georgia currently provides one of the highest incentive structures at 20% with minimal restrictions on talent and a very low minimum budget of $500,000.", "category": "IT"}, {"instruction": "How many managers have Arsenal had?", "input": "There have been twenty permanent and eight caretaker managers of Arsenal since 1897; Stewart Houston has managed the club in two separate spells as caretaker. The most successful person to manage Arsenal is Ars\u00e8ne Wenger, who won three Premier League titles, seven FA Cups and seven Community Shields between 1996 and 2018. Wenger is the club's longest-serving manager; he surpassed George Allison's record of 13 years in October 2009. Two Arsenal managers have died in the job \u2013 Herbert Chapman and Tom Whittaker.", "output": "Arsenal have had twenty permanent and eight caretake managers.", "category": "IT"}, {"instruction": "What is SVM?", "input": "In machine learning, support vector machines (SVMs, also support vector networks[1]) are supervised learning models with associated learning algorithms that analyze data for classification and regression analysis. Developed at AT&T Bell Laboratories by Vladimir Vapnik with colleagues (Boser et al., 1992, Guyon et al., 1993, Cortes and Vapnik, 1995,[1] Vapnik et al., 1997[citation needed]) SVMs are one of the most robust prediction methods, being based on statistical learning frameworks or VC theory proposed by Vapnik (1982, 1995) and Chervonenkis (1974). Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that assigns new examples to one category or the other, making it a non-probabilistic binary linear classifier (although methods such as Platt scaling exist to use SVM in a probabilistic classification setting). SVM maps training examples to points in space so as to maximise the width of the gap between the two categories. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\n\nIn addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.\n\nThe support vector clustering[2] algorithm, created by Hava Siegelmann and Vladimir Vapnik, applies the statistics of support vectors, developed in the support vector machines algorithm, to categorize unlabeled data.[citation needed] These data sets require unsupervised learning approaches, which attempt to find natural clustering of the data to groups and, then, to map new data according to these clusters.", "output": "SVM stands for \"\"support vector machine\". It is a machine learning model for supervised learning tasks. It was popular in the 1990s and early 2000s, before deep learning take off. The classic use case is binary classification, but its extension can also do multi-label classification as we as regression. Kernel methods greatly enhanced SVM's capability to perform non-linear machine learning tasks.", "category": "IT"}, {"instruction": "What is the current capital of Japan?", "input": "Tokyo (/\u02c8to\u028akio\u028a/;[7] Japanese: \u6771\u4eac, T\u014dky\u014d, [to\u02d0k\u02b2o\u02d0] (listen)), officially the Tokyo Metropolis (\u6771\u4eac\u90fd, T\u014dky\u014d-to), is the capital and most populous city of Japan.[8] Formerly known as Edo, its metropolitan area (13,452 square kilometers or 5,194 square miles) is the most populous in the world, with an estimated 37.468 million residents as of 2018;[9] the city proper has a population of 13.99 million people.[4] Located at the head of Tokyo Bay, the prefecture forms part of the Kant\u014d region on the central coast of Honshu, Japan's largest island. Tokyo serves as Japan's economic center and is the seat of both the Japanese government and the Emperor of Japan.", "output": "Tokyo is the current capital of Japan.", "category": "IT"}, {"instruction": "Give me a bulleted list of the 5 highest mountains in the world and their respective heights in meters", "input": "", "output": "* Mount Everest. Height: 8,849 meters\n* K2. Height: 8,611 meters\n* Kangchenjunga. Height: 8,586 meters\n* Lhotse. Height: 8,516 meters\n* Makalu. Height: 8,485 meters", "category": "IT"}, {"instruction": "Classify the following as either dark-colored beers or light colored beers: porter, pilsner, stout, amber, lager", "input": "", "output": "Dark-colored beers: porter, stout, amber\nLight-colored beers: pilsner, lager", "category": "IT"}, {"instruction": "If we were playing a game where we had to identify things that can be found inside a house, which of these would we call out: car, chair, table, park, cloud, microwave.", "input": "", "output": "Inside a house you can find a chair, a table and a microwave. Cars, clouds and parks are found outside of houses.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Samphor, Viola toeria", "input": "", "output": "Viola toeria is string, Samphor is percussion.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Kpanlogo, Shamisen", "input": "", "output": "Shamisen is string, Kpanlogo is percussion.", "category": "IT"}, {"instruction": "Why do potato chip bags become stale after opening?", "input": "", "output": "Potato chip bags are filled with nitrogen! Many consumers think the chip companies are out there to get your money by filling three quarters of your bag with air, but it\u2019s actually nitrogen to keep your chips fresh. This is why once you open the bag, you should finish the chips as soon as possible. There, now you have a reason to finish the whole bag of chips in one go without feeling guilty.", "category": "IT"}, {"instruction": "Classify each of the following as a primary color or a secondary color", "input": "", "output": "blue, yellow, green, red, purple, orange", "category": "IT"}, {"instruction": "Where are the British Virgin Islands (BVI) and which islands are a part of the BVI?", "input": "The British Virgin Islands (BVI), officially the Virgin Islands, are a British Overseas Territory in the Caribbean, to the east of Puerto Rico and the US Virgin Islands and north-west of Anguilla. The islands are geographically part of the Virgin Islands archipelago and are located in the Leeward Islands of the Lesser Antilles and part of the West Indies.\n\nThe British Virgin Islands consist of the main islands of Tortola, Virgin Gorda, Anegada and Jost Van Dyke, along with more than 50 other smaller islands and cays. About 16 of the islands are inhabited. The capital, Road Town, is on Tortola, the largest island, which is about 20 km (12 mi) long and 5 km (3 mi) wide. The islands had a population of 28,054 at the 2010 Census, of whom 23,491 lived on Tortola; current estimates put the population at 35,802 (July 2018).", "output": "The British Virgin Islands (BVI), officially the Virgin Islands, are a British Overseas Territory in the Caribbean, to the east of Puerto Rico and the US Virgin Islands and north-west of Anguilla. The islands are geographically part of the Virgin Islands archipelago and are located in the Leeward Islands of the Lesser Antilles and part of the West Indies.\n\nThe British Virgin Islands consist of the main islands of Tortola, Virgin Gorda, Anegada and Jost Van Dyke, along with more than 50 other smaller islands and cays.", "category": "IT"}, {"instruction": "Does \"outbreeding\" or \"inbreeding\" benefit the offspring more?", "input": "Exogamy often results in two individuals that are not closely genetically related marrying each other; that is, outbreeding as opposed to inbreeding. In moderation, this benefits the offspring as it reduces the risk of the offspring inheriting two copies of a defective gene. Increasing the genetic diversity of the offspring improves the chances of offspring reproducing, up until the fourth-cousin level of relatedness; however, reproduction between individuals on the fourth-cousin level of relatedness decreases evolutionarily fitness.", "output": "\"Outbreeding\" is more beneficial to the offspring as it reduces the risk of inheriting defective genes, increasing the offspring's ability to reproduce.", "category": "IT"}, {"instruction": "What is the future for human?", "input": "", "output": "This is a very wide open question. It could be two directions. One direction is that human would just disappear like the dinosaur.  One direction is that human would become a species like a god. For the first direction, it may be caused by many situations. e.g. Nuclear war from WW3, extreme climate change. For the other direction, reproduced energy is ready, all cancers can be cured, everything can be done with robot with AI, human life is unlimited.", "category": "IT"}, {"instruction": "Name some of the bravolebrities from Vanderpump Rules", "input": "", "output": "James Kennedy, Katie Maloney, Raquel Leviss, Tom Sandoval, Ariana Madix, Tom Schwartz and Lala Kent", "category": "IT"}, {"instruction": "Name some famous rock bands from the 1960s", "input": "", "output": "The 1960s had a number of famous rock bands including The Beatles, The Beach Boys, The Doors, The Rolling Stones, The Who, Led Zeppelin, The Grateful Dead, Pink Floyd, and many more.", "category": "IT"}, {"instruction": "Who is Muhammad Ejaz Shafi", "input": "Muhammad Ejaz Shafi is a Pakistani politician who was a Member of the Provincial Assembly of the Punjab, from 2002 to May 2018.\n\nEarly life and education\nHe was born on 1 May 1969 in Khanpur.[1]\n\nHe has the degree of the Bachelor of Arts.[1]\n\nPolitical career\nHe was elected to the Provincial Assembly of the Punjab as a candidate of Pakistan Muslim League (Q) (PML-Q) from Constituency PP-290 (Rahimyar Khan-VI) in 2002 Pakistani general election. He received 22,531 votes and defeated a candidate of Pakistan Awami Tehrik.[2]\n\nHe was re-elected to the Provincial Assembly of the Punjab as a candidate of PML-Q from Constituency PP-290 (Rahimyar Khan-VI) in 2008 Pakistani general election. He received 24,751 votes and defeated a candidate of Pakistan Peoples Party.[3]\n\nHe was re-elected to the Provincial Assembly of the Punjab as a candidate of Pakistan Muslim League (N) from Constituency PP-290 (Rahimyar Khan-VI) in 2013 Pakistani general election.[4][5]", "output": "Muhammad Ejaz Shafi is a Pakistani politician who was a Member of the Provincial Assembly of the Punjab, from 2002 to May 2018. He was born on 1 May 1969 in Khanpur.", "category": "IT"}, {"instruction": "Who invented the telephone?", "input": "", "output": "In 1876, Alexander Graham Bell was the first to obtain a United States patent for a device that produced a clearly intelligible replica of the human voice on a second device.\nA resolution passed by the United States House of Representatives on June 11, 2002 called for recognition of Antonio Meucci's work and contributions towards the invention of the telephone.", "category": "IT"}, {"instruction": "Who are the Smiths?", "input": "The Smiths were an English rock band formed in Manchester in 1982. They comprised the singer Morrissey, the guitarist Johnny Marr, the bassist Andy Rourke and the drummer Mike Joyce. Morrissey and Marr formed the band's songwriting partnership. They are regarded as one of the most important acts to emerge from the 1980s British independent music.", "output": "The Smiths were an English rock band from the 1980s. The lead singer was Morrissey. The other band members were: Johnny Marr on guitar, Andy Rourke on bass, and Mike Joyce on drums.", "category": "IT"}, {"instruction": "Give me five ways in which I can make my homebrew beer more interesting", "input": "", "output": "There are infinite ways to create interesting flavours, that are either personal favourites or attempt to replicate classic beers and beer styles. There are a number of factors that make up a beers flavour profile and part of the enjoyment brewing your own beer at home, is that you can play around with each of these to change the flavour and character of your homebrew beer. Here are five ways in which you can change your own homebrew recipe to add interesting flavours or alternatively you can alter an existing homebrew recipe shared by somebody else or a brewery.\n\n1. Use different hops\nThere is a huge variety of hops available to homebrewers and each of these can introduce its own particular flavour and aroma to your beer, ranging from pineapple and apricots, to pine trees and woods, to grapefruit pith and lemon zest. By using a different hop in your recipe either from the same family or from an entirely different family of hops, you can easily add interesting and often radical changes to the flavour profile of your beer. However, depending on when the hops are added in the brewing process, you can also increase/decrease the levels of bitterness of your beer, due to different hop varieties having different levels of alpha acids.\n\n2. Use a different yeast\nBesides fermenting the beer, yeast leave behind lots of interesting flavours and can give your homebrew it's own subtle character. For example, English yeast strains can add malty and sweet flavours, California yeast tends to create a clean and crisp beer, whilst saison yeast adds bright and fruity flavours to your beer.\n\n3. Use different grains\nChanging the amount of base malts can increase or decrease the alcohol in your finished beer. Trying swapping one base malt for another, like American pale malts for a British variety, and look for the subtle differences between them. You can also play around with the specialty grains, like using a slightly darker roast.\n\n4. Add fruit, spices or herbs\nFruits, spices, herbs, and other ingredients are a great way to add an entirely personal character to your homebrew. Anything from fresh strawberries and basil to vanilla beans and cardamom can really complement the other malty, hoppy flavours in a beer. \n\n5. Alter your water profile\nDifferent beer styles will typically be best achieved with a suitable water profile, with different levels of minerals to achieve the desired flavour profile. By adjusting the amounts of specific minerals found in your brewing water, beer can be made to taste fuller bodied, sweeter, drier, more bitter, or even sour.", "category": "IT"}, {"instruction": "How many Grammy Awards has Bad Bunny won?", "input": "", "output": "Bad Bunny has won 2 Grammy Awards and has been nominated for 6", "category": "IT"}, {"instruction": "What is an apple?", "input": "", "output": "An apple is an edible fruit produced by an apple tree. Apple trees are cultivated worldwide and are the most widely grown species in the genus Malus.", "category": "IT"}, {"instruction": "When was the first Reading railway station opened?", "input": "Reading railway station is a major transport hub in Reading, Berkshire, England. It is on the northern edge of the town centre, near the main retail and commercial areas and the River Thames, 36 miles (58 km) from London Paddington. The first Reading station was opened on 30 March 1840 as the temporary western terminus of the original line of the Great Western Railway (GWR). Reading is the ninth-busiest station in the UK outside London and the second busiest interchange station outside London with over 3.8 million passengers changing trains at the station annually.", "output": "The first Reading railway station was opened on the 30th of March, 1840.", "category": "IT"}, {"instruction": "What is a brown eared pheasant?", "input": "The brown eared pheasant (Crossoptilon mantchuricum) is a large, 96\u2013 to 100-cm-long, dark brown pheasant endemic to the mountain forests of northeastern China (Shanxi and nearby provinces). The species was first described by Robert Swinhoe in 1863. It has stiff white ear coverts behind the eyes, which look like a moustache. The crown is black with red bare facial skin and its tail of 22 elongated, white feathers is curved, loose and dark-tipped. Both sexes are similar in plumage.", "output": "The brown eared pheasant is a large dark brown pheasant native to the mountain forests of northeastern China. It has distinctive white ear covert behind the eyes that look like a moustache. It's crown is black with red bare facial skin, and it has a tail with long, white, curve, loose, dark-tipped feathers.", "category": "IT"}, {"instruction": "Which of these are rappers? Eminem, Michael Jackson, Rihanna, 50 Cent", "input": "", "output": "Eminem, 50 Cent", "category": "IT"}, {"instruction": "Is it true that Lewis Hamilton won the championship in his first F1 season?", "input": "Hamilton's first season in Formula One saw him partner two-time and defending World Champion Fernando Alonso. Hamilton is the first and, as of 2022, the only black driver to race in the series.[60][61][62] After finishing on the podium in his debut, Hamilton went on to set several records as he finished runner-up in the 2007 World Drivers' Championship to Kimi R\u00e4ikk\u00f6nen by one point, including those for the most consecutive podium finishes from debut (9), the joint most wins in a debut season (4) and the most points in a debut season (109). Throughout the season, Hamilton and Alonso were involved in a number of incidents which resulted in tensions between both drivers and the team, culminating in Alonso and McLaren terminating their contract by mutual consent in November. Following a successful first season at McLaren, Hamilton signed a multi-million-pound contract to stay with the team until 2012.[63]", "output": "Lewis Hamilton did not win the F1 world driver's championship in his rookie season in 2007. The title went to Kimi R\u00e4ikk\u00f6nen in the Ferrari team. Hamilton finished runner up, in second place, after a close battle with both Ferrari and his teammate Fernando Alonso.", "category": "IT"}, {"instruction": "What are some kinds of embroidery stitches for writing letters?", "input": "", "output": "Some embroidery stitches that can be used to embroider letters are the back stitch, the split stitch, the stem stitch, the chain stitch, the couching stitch, and the satin stitch.", "category": "IT"}, {"instruction": "What are the most common injuries in rowing?", "input": "Rowing is a low-impact sport with movement only in defined ranges, so that twist and sprain injuries are rare. However, the repetitive rowing action can put strain on knee joints, the spine and the tendons of the forearm, and inflammation of these are the most common rowing injuries.[52] If one rows with poor technique, especially rowing with a curved rather than straight back, other injuries may surface, including back pains and wrist injuries. Blisters occur for almost all rowers, especially in the beginning of one's rowing career, as every stroke puts pressure on the hands, though rowing frequently tends to harden hands and generate protective calluses. Holding the oars too tightly or making adjustments to technique may cause recurring or new blisters, as it is common to feather the blade. Another common injury is getting \"track bites\", thin cuts on the back of one's calf or thigh caused by contact with the seat tracks at either end of the stroke.[53]", "output": "The most common injuries in rowing are inflammation of the knees, spine and forearms. Oher common injuries also include hand blisters and track bites.", "category": "IT"}, {"instruction": "What is a kite?", "input": "", "output": "A kite is a toy that can be be purchased in a store or a specialty shop.  It is a craft that is lighter an air that is tied to a string that you can fly on wind currents.  The kite has wings that react against the air to create lift enabling it to fly.  You can fly a kite at a park or an open area, and you will want to make sure there are no power lines nearby to be safe when flying the kite.", "category": "IT"}, {"instruction": "Classify each of the following pieces of equipment according to the sport they are used for, either basketball, football, or soccer: shin guards, shooting sleeve, penalty flag, corner flag, kicking tee, and goalie gloves.", "input": "", "output": "The classification is as follows:\n- Soccer: goalie gloves, corner flag\n- Basketball: shooting sleeve\n- Football: penalty flag, kicking tee", "category": "IT"}, {"instruction": "Given this paragraph about Billie Eilish, tell me who produced her debut single, also tell me what is her chart-topping single?", "input": "Billie Eilish Pirate Baird O'Connell (/\u02c8a\u026al\u026a\u0283/ EYE-lish;[1] born December 18, 2001) is an American singer and songwriter. She first gained public attention in 2015 with her debut single \"Ocean Eyes\", written and produced by her brother Finneas O'Connell, with whom she collaborates on music and live shows. In 2017, she released her debut extended play (EP), titled Don't Smile at Me. Commercially successful, it reached the top 15 of record charts in numerous countries, including the US, UK, Canada, and Australia.\n\nEilish's first studio album, When We All Fall Asleep, Where Do We Go? (2019), debuted atop the US Billboard 200 and UK Albums Chart. It was one of the best-selling albums of the year, buoyed by the success of its fifth single \"Bad Guy\", Eilish's first number-one on the US Billboard Hot 100. This made her the first artist born in the 21st century to release a chart-topping single. The following year, Eilish performed the theme song \"No Time to Die\" for the James Bond film of the same name, which topped the UK Singles Chart and won the Academy Award for Best Original Song in 2022. Her subsequent singles \"Everything I Wanted\", \"My Future\", \"Therefore I Am\", and \"Your Power\" peaked in the top 10 in the US and UK. Her second studio album, Happier Than Ever (2021), topped charts in 25 countries.", "output": "Her brother Finneas O'Connell produced her debut single \"Ocean Eyes\", and her chart topping single is \"Bad Guy\"", "category": "IT"}, {"instruction": "What is a good way to get around without a car?", "input": "", "output": "If you live in a city you can access public transport such as buses and trains. You can also walk, use a bicycle, or electric scooter to get around.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Palaeophis, Giant Tortoise", "input": "", "output": "Giant Tortoise is alive, Palaeophis is extinct.", "category": "IT"}, {"instruction": "Why is Santa Cruz, California a great place to live?", "input": "", "output": "Santa Cruz, California has one of the best climates in the continental U.S. \u2013 being close to the Pacific Ocean, temperatures stay warmer in the winters and cooler in the summers, but without the dreaded fog that nearby cities like San Francisco or Monterey experience. The small city is world-famous for surfing, and the relaxed vibe that comes with it. Natural beauty is abundant, with the mountains and beach only a few miles apart.", "category": "IT"}, {"instruction": "Give me some ideas to manage my manager.", "input": "", "output": "1. Be honest\n2. Communicate\n3. Understand goals\n4. Stay calm\n5. Solve problems\n6. Be positive\n7. Share your knowledge\n8. Be caring\n9. Practice positive reinforcement\n10. Be a strong performer", "category": "IT"}, {"instruction": "Who was boxer John Baldwin", "input": "Known as \"The Mad\" Baldwin, he turned pro in 1970 and lost a decision to Marvin Hagler in 1975. In 1977 he took on Rocky Mosley Jr in the ill-fated U.S. Championship Tournament, but lost via K.O. In 1978 he lost a decision to Marvin Johnson, and retired a year later.", "output": "Born in Detroit, John Baldwin was a professional US boxer.  He fought in the Light-Middleweight category and won a bronze medal in the 1968 Olympics.   He turned pro in 1970, and lost a decision to Marvin Hagler in 1975.  He retired in 1979", "category": "IT"}, {"instruction": "What is HiFI?", "input": "High fidelity (often shortened to Hi-Fi or HiFi) is the high-quality reproduction of sound.[1] It is popular with audiophiles and home audio enthusiasts. Ideally, high-fidelity equipment has inaudible noise and distortion, and a flat (neutral, uncolored) frequency response within the human hearing range.[2]\n\nHigh fidelity contrasts with the lower-quality \u201clo-fi\u201d sound produced by inexpensive audio equipment, AM radio, or the inferior quality of sound reproduction that can be heard in recordings made until the late 1940s.", "output": "Bell Laboratories began experimenting with a range of recording techniques in the early 1930s. Performances by Leopold Stokowski and the Philadelphia Orchestra were recorded in 1931 and 1932 using telephone lines between the Academy of Music in Philadelphia and the Bell labs in New Jersey. Some multitrack recordings were made on optical sound film, which led to new advances used primarily by MGM (as early as 1937) and Twentieth Century Fox Film Corporation (as early as 1941). RCA Victor began recording performances by several orchestras using optical sound around 1941, resulting in higher-fidelity masters for 78-rpm discs. During the 1930s, Avery Fisher, an amateur violinist, began experimenting with audio design and acoustics. He wanted to make a radio that would sound like he was listening to a live orchestra\u2014that would achieve high fidelity to the original sound. After World War II, Harry F. Olson conducted an experiment whereby test subjects listened to a live orchestra through a hidden variable acoustic filter. The results proved that listeners preferred high-fidelity reproduction, once the noise and distortion introduced by early sound equipment was removed.[citation needed]\n\nBeginning in 1948, several innovations created the conditions that made major improvements of home-audio quality possible:\n\nReel-to-reel audio tape recording, based on technology taken from Germany after WWII, helped musical artists such as Bing Crosby make and distribute recordings with better fidelity.\nThe advent of the 33\u2153 rpm Long Play (LP) microgroove vinyl record, with lower surface noise and quantitatively specified equalization curves as well as noise-reduction and dynamic range systems. Classical music fans, who were opinion leaders in the audio market, quickly adopted LPs because, unlike with older records, most classical works would fit on a single LP.\nHigher quality turntables, with more responsive needles\nFM radio, with wider audio bandwidth and less susceptibility to signal interference and fading than AM radio.\nBetter amplifier designs, with more attention to frequency response and much higher power output capability, reproducing audio without perceptible distortion.[3]\nNew loudspeaker designs, including acoustic suspension, developed by Edgar Villchur and Henry Kloss with improved bass frequency response.\nIn the 1950s, audio manufacturers employed the phrase high fidelity as a marketing term to describe records and equipment intended to provide faithful sound reproduction. Many consumers found the difference in quality compared to the then-standard AM radios and 78-rpm records readily apparent and bought high-fidelity phonographs and 33\u2153 LPs such as RCA's New Orthophonics and London's FFRR (Full Frequency Range Recording, a UK Decca system). Audiophiles paid attention to technical characteristics and bought individual components, such as separate turntables, radio tuners, preamplifiers, power amplifiers and loudspeakers. Some enthusiasts even assembled their own loudspeaker systems. With the advent of integrated multi-speaker console systems in the 1950s, hi-fi became a generic term for home sound equipment, to some extent displacing phonograph and record player.\n\nIn the late 1950s and early 1960s, the development of stereophonic equipment and recordings led to the next wave of home-audio improvement, and in common parlance stereo displaced hi-fi. Records were now played on a stereo. In the world of the audiophile, however, the concept of high fidelity continued to refer to the goal of highly accurate sound reproduction and to the technological resources available for approaching that goal. This period is regarded as the \"Golden Age of Hi-Fi\", when vacuum tube equipment manufacturers of the time produced many models considered superior by modern audiophiles, and just before solid state (transistorized) equipment was introduced to the market, subsequently replacing tube equipment as the mainstream technology.\n\nIn the 1960s, the FTC with the help of the audio manufacturers came up with a definition to identify high fidelity equipment so that the manufacturers could clearly state if they meet the requirements and reduce misleading advertisements.[4]\n\nThe metal\u2013oxide\u2013semiconductor field-effect transistor (MOSFET) was adapted into a power MOSFET for audio by Jun-ichi Nishizawa at Tohoku University in 1974. Power MOSFETs were soon manufactured by Yamaha for their hi-fi audio amplifiers. JVC, Pioneer Corporation, Sony and Toshiba also began manufacturing amplifiers with power MOSFETs in 1974.[5] In 1977, Hitachi introduced the LDMOS (lateral diffused MOS), a type of power MOSFET. Hitachi was the only LDMOS manufacturer between 1977 and 1983, during which time LDMOS was used in audio power amplifiers from manufacturers such as HH Electronics (V-series) and Ashly Audio, and were used for music and public address systems.[5] Class-D amplifiers became successful in the mid-1980s when low-cost, fast-switching MOSFETs were made available.[6] Many transistor amps use MOSFET devices in their power sections, because their distortion curve is more tube-like.[7]\n\nA popular type of system for reproducing music beginning in the 1970s was the integrated music centre\u2014which combined a phonograph turntable, AM-FM radio tuner, tape player, preamplifier, and power amplifier in one package, often sold with its own separate, detachable or integrated speakers. These systems advertised their simplicity. The consumer did not have to select and assemble individual components or be familiar with impedance and power ratings. Purists generally avoid referring to these systems as high fidelity, though some are capable of very good quality sound reproduction.\n\nAudiophiles in the 1970s and 1980s preferred to buy each component separately. That way, they could choose models of each component with the specifications that they desired. In the 1980s, a number of audiophile magazines became available, offering reviews of components and articles on how to choose and test speakers, amplifiers, and other components.\n\nListening tests\nSee also: Codec listening test\nListening tests are used by hi-fi manufacturers, audiophile magazines, and audio engineering researchers and scientists. If a listening test is done in such a way that the listener who is assessing the sound quality of a component or recording can see the components that are being used for the test (e.g., the same musical piece listened to through a tube power amplifier and a solid-state amplifier), then it is possible that the listener's pre-existing biases towards or against certain components or brands could affect their judgment. To respond to this issue, researchers began to use blind tests, in which listeners cannot see the components being tested. A commonly used variant of this test is the ABX test. A subject is presented with two known samples (sample A, the reference, and sample B, an alternative), and one unknown sample X, for three samples total. X is randomly selected from A and B, and the subject identifies X as being either A or B. Although there is no way to prove that a certain methodology is transparent,[8] a properly conducted double-blind test can prove that a method is not transparent.\n\nBlind tests are sometimes used as part of attempts to ascertain whether certain audio components (such as expensive, exotic cables) have any subjectively perceivable effect on sound quality. Data gleaned from these blind tests is not accepted by some audiophile magazines such as Stereophile and The Absolute Sound in their evaluations of audio equipment. John Atkinson, current editor of Stereophile, stated that he once purchased a solid-state amplifier, the Quad 405, in 1978 after seeing the results from blind tests, but came to realize months later that \"the magic was gone\" until he replaced it with a tube amp.[9] Robert Harley of The Absolute Sound wrote, in 2008, that: \"...blind listening tests fundamentally distort the listening process and are worthless in determining the audibility of a certain phenomenon.\"[10]\n\nDoug Schneider, editor of the online Soundstage network, refuted this position with two editorials in 2009.[11][12] He stated: \"Blind tests are at the core of the decades' worth of research into loudspeaker design done at Canada's National Research Council (NRC). The NRC researchers knew that for their result to be credible within the scientific community and to have the most meaningful results, they had to eliminate bias, and blind testing was the only way to do so.\" Many Canadian companies such as Axiom, Energy, Mirage, Paradigm, PSB, and Revel use blind testing extensively in designing their loudspeakers. Audio professional Dr. Sean Olive of Harman International shares this view.[13]", "category": "IT"}, {"instruction": "What was Angie Thomas's first published novel?", "input": "", "output": "\"The Hate U Give\" which was released in 2017 and debuted at number one on The New York Times Best Seller list.", "category": "IT"}, {"instruction": "Summarizing the code.", "input": "def setData(self, index, value, role=Qt.EditRole, change_type=None):\r\n        \"\"\"\"\"\"\r\n        column = index.column()\r\n        row = index.row()\r\n\r\n        if index in self.display_error_idxs:\r\n            return False\r\n        if change_type is not None:\r\n            try:\r\n                value = self.data(index, role=Qt.DisplayRole)\r\n                val = from_qvariant(value, str)\r\n                if change_type is bool:\r\n                    val = bool_false_check(val)\r\n                self.df.iloc[row, column] = change_type(val)\r\n            except ValueError:\r\n                self.df.iloc[row, column] = change_type('0')\r\n        else:\r\n            val = from_qvariant(value, str)\r\n            current_value = self.get_value(row, column)\r\n            if isinstance(current_value, (bool, np.bool_)):\r\n                val = bool_false_check(val)\r\n            supported_types = (bool, np.bool_) + REAL_NUMBER_TYPES\r\n            if (isinstance(current_value, supported_types) or\r\n                    is_text_string(current_value)):\r\n                try:\r\n                    self.df.iloc[row, column] = current_value.__class__(val)\r\n                except (ValueError, OverflowError) as e:\r\n                    QMessageBox.critical(self.dialog, \"Error\",\r\n                                         str(type(e).__name__) + \": \" + str(e))\r\n                    return False\r\n            else:\r\n                QMessageBox.critical(self.dialog, \"Error\",\r\n                                     \"Editing dtype {0!s} not yet supported.\"\r\n                                     .format(type(current_value).__name__))\r\n                return False\r\n        self.max_min_col_update()\r\n        self.dataChanged.emit(index, index)\r\n        return True", "output": "Cell content change", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_tickers_from_file(self, filename):\n        \"\"\"\"\"\"\n        if not os.path.exists(filename):\n            log.error(\"Ticker List file does not exist: %s\", filename)\n\n        tickers = []\n        with io.open(filename, 'r') as fd:\n            for ticker in fd:\n                tickers.append(ticker.rstrip())\n        return tickers", "output": "Load ticker list from txt file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    \n\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError((\"{fname}() got an unexpected \"\n                         \"keyword argument '{arg}'\".\n                         format(fname=fname, arg=bad_arg)))", "output": "Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_watch(self, id, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'id'.\")\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_watcher\", \"watch\", id), params=params, body=body\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html>`_\n\n        :arg id: Watch ID\n        :arg body: The watch\n        :arg active: Specify whether the watch is in/active by default\n        :arg if_primary_term: only update the watch if the last operation that\n            has changed the watch has the specified primary term\n        :arg if_seq_no: only update the watch if the last operation that has\n            changed the watch has the specified sequence number\n        :arg version: Explicit version number for concurrency control", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def native_concat(nodes):\n    \"\"\"\n    \"\"\"\n    head = list(islice(nodes, 2))\n\n    if not head:\n        return None\n\n    if len(head) == 1:\n        out = head[0]\n    else:\n        out = u''.join([text_type(v) for v in chain(head, nodes)])\n\n    try:\n        return literal_eval(out)\n    except (ValueError, SyntaxError, MemoryError):\n        return out", "output": "Return a native Python type from the list of compiled nodes. If the\n    result is a single node, its value is returned. Otherwise, the nodes are\n    concatenated as strings. If the result can be parsed with\n    :func:`ast.literal_eval`, the parsed value is returned. Otherwise, the\n    string is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _do_names(names, fun, path=None):\n    '''\n    \n    '''\n    ret = {}\n    hosts = find_guests(names, path=path)\n    if not hosts:\n        return False\n\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    for host, sub_names in six.iteritems(hosts):\n        cmds = []\n        for name in sub_names:\n            cmds.append(client.cmd_iter(\n                    host,\n                    'lxc.{0}'.format(fun),\n                    [name],\n                    kwarg={'path': path},\n                    timeout=60))\n        for cmd in cmds:\n            data = next(cmd)\n            data = data.get(host, {}).get('ret', None)\n            if data:\n                ret.update({host: data})\n    return ret", "output": "Invoke a function in the lxc module with no args\n\n    path\n        path to the container parent\n        default: /var/lib/lxc (system default)\n\n        .. versionadded:: 2015.8.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _concat(self, first_data, second_data):\n        \"\"\"\"\"\"\n        assert len(first_data) == len(\n            second_data), 'data source should contain the same size'\n        if first_data and second_data:\n            return [\n                concat(\n                    first_data[x],\n                    second_data[x],\n                    dim=0\n                ) for x in range(len(first_data))\n            ]\n        elif (not first_data) and (not second_data):\n            return []\n        else:\n            return [\n                first_data[0] if first_data else second_data[0]\n                for x in range(len(first_data))\n            ]", "output": "Helper function to concat two NDArrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def _oauth_get_user_future(\n        self, access_token: Dict[str, Any]\n    ) -> Dict[str, Any]:\n        \"\"\"\n        \"\"\"\n        raise NotImplementedError()", "output": "Subclasses must override this to get basic information about the\n        user.\n\n        Should be a coroutine whose result is a dictionary\n        containing information about the user, which may have been\n        retrieved by using ``access_token`` to make a request to the\n        service.\n\n        The access token will be added to the returned dictionary to make\n        the result of `get_authenticated_user`.\n\n        .. versionchanged:: 5.1\n\n           Subclasses may also define this method with ``async def``.\n\n        .. versionchanged:: 6.0\n\n           A synchronous fallback to ``_oauth_get_user`` was removed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_view_on_selected(self, widget, selected_item_key):\n        \"\"\" \n        \"\"\"\n        self.lbl.set_text('List selection: ' + self.listView.children[selected_item_key].get_text())", "output": "The selection event of the listView, returns a key of the clicked event.\n            You can retrieve the item rapidly", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_top_states(saltenv='base'):\n    '''\n    \n    '''\n    alt_states = []\n    try:\n        returned = __salt__['state.show_top']()\n        for i in returned[saltenv]:\n            alt_states.append(i)\n    except Exception:\n        raise\n    # log.info(\"top states: %s\", alt_states)\n    return alt_states", "output": "Equivalent to a salt cli: salt web state.show_top", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parent_info(self):\n        \"\"\"\n        \"\"\"\n        parent_doc = self.parent\n        if parent_doc is None:\n            parent_path = _helpers.DOCUMENT_PATH_DELIMITER.join(\n                (self._client._database_string, \"documents\")\n            )\n        else:\n            parent_path = parent_doc._document_path\n\n        expected_prefix = _helpers.DOCUMENT_PATH_DELIMITER.join((parent_path, self.id))\n        return parent_path, expected_prefix", "output": "Get fully-qualified parent path and prefix for this collection.\n\n        Returns:\n            Tuple[str, str]: Pair of\n\n            * the fully-qualified (with database and project) path to the\n              parent of this collection (will either be the database path\n              or a document path).\n            * the prefix to a document in this collection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(cls, src, dist=None):\n        \"\"\"\n        \"\"\"\n        m = cls.pattern.match(src)\n        if not m:\n            msg = \"EntryPoint must be in 'name=module:attrs [extras]' format\"\n            raise ValueError(msg, src)\n        res = m.groupdict()\n        extras = cls._parse_extras(res['extras'])\n        attrs = res['attr'].split('.') if res['attr'] else ()\n        return cls(res['name'], res['module'], attrs, extras, dist)", "output": "Parse a single entry point from string `src`\n\n        Entry point syntax follows the form::\n\n            name = some.module:some.attr [extra1, extra2]\n\n        The entry name and module name are required, but the ``:attrs`` and\n        ``[extras]`` parts are optional", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_insert_idx(pos_dict, name):\n    \"\"\n    keys,i = list(pos_dict.keys()),0\n    while i < len(keys) and str.lower(keys[i]) < str.lower(name): i+=1\n    if i == len(keys): return -1\n    else:              return pos_dict[keys[i]]", "output": "Return the position to insert a given function doc in a notebook.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_conn(profile):\n    '''\n    \n    '''\n    params = {}\n    for key in ('host', 'port', 'token', 'scheme', 'consistency', 'dc', 'verify'):\n        if key in profile:\n            params[key] = profile[key]\n\n    if HAS_CONSUL:\n        return consul.Consul(**params)\n    else:\n        raise CommandExecutionError(\n            '(unable to import consul, '\n            'module most likely not installed. PLease install python-consul)'\n        )", "output": "Return a client object for accessing consul", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def raw_command(netfn, command, bridge_request=None, data=(), retry=True, delay_xmit=None, **kwargs):\n    '''\n    \n    '''\n    with _IpmiSession(**kwargs) as s:\n        r = s.raw_command(netfn=int(netfn),\n                        command=int(command),\n                        bridge_request=bridge_request,\n                        data=data,\n                        retry=retry,\n                        delay_xmit=delay_xmit)\n        return r", "output": "Send raw ipmi command\n\n    This allows arbitrary IPMI bytes to be issued.  This is commonly used\n    for certain vendor specific commands.\n\n    :param netfn: Net function number\n    :param command: Command value\n    :param bridge_request: The target slave address and channel number for\n                        the bridge request.\n    :param data: Command data as a tuple or list\n    :param kwargs:\n        - api_host=127.0.0.1\n        - api_user=admin\n        - api_pass=example\n        - api_port=623\n        - api_kg=None\n\n    :returns: dict -- The response from IPMI device\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-call ipmi.raw_command netfn=0x06 command=0x46 data=[0x02]\n        # this will return the name of the user with id 2 in bytes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cancel_job(self, job_id, project=None, location=None, retry=DEFAULT_RETRY):\n        \"\"\"\n        \"\"\"\n        extra_params = {\"projection\": \"full\"}\n\n        if project is None:\n            project = self.project\n\n        if location is None:\n            location = self.location\n\n        if location is not None:\n            extra_params[\"location\"] = location\n\n        path = \"/projects/{}/jobs/{}/cancel\".format(project, job_id)\n\n        resource = self._call_api(\n            retry, method=\"POST\", path=path, query_params=extra_params\n        )\n\n        return self.job_from_resource(resource[\"job\"])", "output": "Attempt to cancel a job from a job ID.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/cancel\n\n        Arguments:\n            job_id (str): Unique job identifier.\n\n        Keyword Arguments:\n            project (str):\n                (Optional) ID of the project which owns the job (defaults to\n                the client's project).\n            location (str): Location where the job was run.\n            retry (google.api_core.retry.Retry):\n                (Optional) How to retry the RPC.\n\n        Returns:\n            Union[google.cloud.bigquery.job.LoadJob, \\\n                  google.cloud.bigquery.job.CopyJob, \\\n                  google.cloud.bigquery.job.ExtractJob, \\\n                  google.cloud.bigquery.job.QueryJob]:\n                Job instance, based on the resource returned by the API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sub(self, repl):\n        \"\"\"\n        \n        \"\"\"\n        if self.asGroupList:\n            warnings.warn(\"cannot use sub() with Regex(asGroupList=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch and callable(repl):\n            warnings.warn(\"cannot use sub() with a callable with Regex(asMatch=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch:\n            def pa(tokens):\n                return tokens[0].expand(repl)\n        else:\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n        return self.addParseAction(pa)", "output": "Return Regex with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transformString(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_all(self):\r\n        \"\"\"\r\n        \"\"\"\r\n        for index in range(self.get_stack_count()):\r\n            if self.data[index].editor.document().isModified():\r\n                self.save(index)", "output": "Save all opened files.\r\n\r\n        Iterate through self.data and call save() on any modified files.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _rules_from_env(self, val):\n        \"\"\"\"\"\"\n        val = val.split(':')\n        if 'DEFAULT_RULES' in val:\n            val = const.DEFAULT_RULES + [rule for rule in val if rule != 'DEFAULT_RULES']\n        return val", "output": "Transforms rules list from env-string to python.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def accepts(self, package):  # type: (poetry.packages.Package) -> bool\n        \"\"\"\n        \n        \"\"\"\n        return (\n            self._name == package.name\n            and self._constraint.allows(package.version)\n            and (not package.is_prerelease() or self.allows_prereleases())\n        )", "output": "Determines if the given package matches this dependency.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def registry_path(cls, project, location, registry):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/registries/{registry}\",\n            project=project,\n            location=location,\n            registry=registry,\n        )", "output": "Return a fully-qualified registry string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def graph_memoized(func):\n    \"\"\"\n    \n    \"\"\"\n\n    # TODO it keeps the graph alive\n    from ..compat import tfv1\n    GRAPH_ARG_NAME = '__IMPOSSIBLE_NAME_FOR_YOU__'\n\n    @memoized\n    def func_with_graph_arg(*args, **kwargs):\n        kwargs.pop(GRAPH_ARG_NAME)\n        return func(*args, **kwargs)\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        assert GRAPH_ARG_NAME not in kwargs, \"No Way!!\"\n        graph = tfv1.get_default_graph()\n        kwargs[GRAPH_ARG_NAME] = graph\n        return func_with_graph_arg(*args, **kwargs)\n    return wrapper", "output": "Like memoized, but keep one cache per default graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_edit_filetypes():\n    \"\"\"\"\"\"\n    # The filter details are not hidden on Windows, so we can't use\n    # all Pygments extensions on that platform\n    if os.name == 'nt':\n        supported_exts = []\n    else:\n        try:\n            supported_exts = _get_pygments_extensions()\n        except Exception:\n            supported_exts = []\n\n    # NOTE: Try to not add too much extensions to this list to not\n    # make the filter look too big on Windows\n    favorite_exts = ['.py', '.R', '.jl', '.ipynb', '.md', '.pyw', '.pyx',\n                     '.c', '.cpp', '.json', '.dat', '.csv', '.tsv', '.txt',\n                     '.ini', '.html', '.js', '.h', '.bat']\n\n    other_exts = [ext for ext in supported_exts if ext not in favorite_exts]\n    all_exts = tuple(favorite_exts + other_exts)\n    text_filetypes = (_(\"Supported text files\"), all_exts)\n    return [text_filetypes] + EDIT_FILETYPES", "output": "Get all file types supported by the Editor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def components(self):\n        \"\"\"\n        \n        \"\"\"\n        from pandas import DataFrame\n\n        columns = ['days', 'hours', 'minutes', 'seconds',\n                   'milliseconds', 'microseconds', 'nanoseconds']\n        hasnans = self._hasnans\n        if hasnans:\n            def f(x):\n                if isna(x):\n                    return [np.nan] * len(columns)\n                return x.components\n        else:\n            def f(x):\n                return x.components\n\n        result = DataFrame([f(x) for x in self], columns=columns)\n        if not hasnans:\n            result = result.astype('int64')\n        return result", "output": "Return a dataframe of the components (days, hours, minutes,\n        seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.\n\n        Returns\n        -------\n        a DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        \n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step,\n                                                 kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)", "output": "For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning\n        end : label, default None\n            If None, defaults to the end\n        step : int, default None\n        kind : string, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        ---------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_technologies():\n    '''\n    \n    '''\n    tech = ''\n    technologies = pyconnman.ConnManager().get_technologies()\n    for path, params in technologies:\n        tech += '{0}\\n\\tName = {1}\\n\\tType = {2}\\n\\tPowered = {3}\\n\\tConnected = {4}\\n'.format(\n            path, params['Name'], params['Type'], params['Powered'] == 1, params['Connected'] == 1)\n    return tech", "output": "Returns the technologies of connman", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_ownership(obj, raise_if_false=True):\n    \"\"\"\n    \"\"\"\n    if not obj:\n        return False\n\n    security_exception = SupersetSecurityException(\n        \"You don't have the rights to alter [{}]\".format(obj))\n\n    if g.user.is_anonymous:\n        if raise_if_false:\n            raise security_exception\n        return False\n    roles = [r.name for r in get_user_roles()]\n    if 'Admin' in roles:\n        return True\n    session = db.create_scoped_session()\n    orig_obj = session.query(obj.__class__).filter_by(id=obj.id).first()\n\n    # Making a list of owners that works across ORM models\n    owners = []\n    if hasattr(orig_obj, 'owners'):\n        owners += orig_obj.owners\n    if hasattr(orig_obj, 'owner'):\n        owners += [orig_obj.owner]\n    if hasattr(orig_obj, 'created_by'):\n        owners += [orig_obj.created_by]\n\n    owner_names = [o.username for o in owners if o]\n\n    if (\n            g.user and hasattr(g.user, 'username') and\n            g.user.username in owner_names):\n        return True\n    if raise_if_false:\n        raise security_exception\n    else:\n        return False", "output": "Meant to be used in `pre_update` hooks on models to enforce ownership\n\n    Admin have all access, and other users need to be referenced on either\n    the created_by field that comes with the ``AuditMixin``, or in a field\n    named ``owners`` which is expected to be a one-to-many with the User\n    model. It is meant to be used in the ModelView's pre_update hook in\n    which raising will abort the update.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mmodule(saltenv, fun, *args, **kwargs):\n    '''\n    \n    '''\n    mminion = _MMinion(saltenv)\n    return mminion.functions[fun](*args, **kwargs)", "output": "Loads minion modules from an environment so that they can be used in pillars\n    for that environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.mmodule base test.ping", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_add_months(dt, months):\n    \"\"\"\n    \n    \"\"\"\n    dt = datetime.datetime.strptime(\n        dt, \"%Y-%m-%d\") + relativedelta(months=months)\n    return(dt)", "output": "#\u8fd4\u56dedt\u9694months\u4e2a\u6708\u540e\u7684\u65e5\u671f\uff0cmonths\u76f8\u5f53\u4e8e\u6b65\u957f", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cell_value(self, column_family_id, column, index=0):\n        \"\"\"\n        \"\"\"\n        cells = self.find_cells(column_family_id, column)\n\n        try:\n            cell = cells[index]\n        except (TypeError, IndexError):\n            num_cells = len(cells)\n            msg = _MISSING_INDEX.format(index, column, column_family_id, num_cells)\n            raise IndexError(msg)\n\n        return cell.value", "output": "Get a single cell value stored on this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_row_cell_value]\n            :end-before: [END bigtable_row_cell_value]\n\n        Args:\n            column_family_id (str): The ID of the column family. Must be of the\n                form ``[_a-zA-Z0-9][-_.a-zA-Z0-9]*``.\n            column (bytes): The column within the column family where the cell\n                is located.\n            index (Optional[int]): The offset within the series of values. If\n                not specified, will return the first cell.\n\n        Returns:\n            ~google.cloud.bigtable.row_data.Cell value: The cell value stored\n            in the specified column and specified index.\n\n        Raises:\n            KeyError: If ``column_family_id`` is not among the cells stored\n                in this row.\n            KeyError: If ``column`` is not among the cells stored in this row\n                for the given ``column_family_id``.\n            IndexError: If ``index`` cannot be found within the cells stored\n                in this row for the given ``column_family_id``, ``column``\n                pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def flush(self, fsync=False):\n        \"\"\"\n        \n        \"\"\"\n        if self._handle is not None:\n            self._handle.flush()\n            if fsync:\n                try:\n                    os.fsync(self._handle.fileno())\n                except OSError:\n                    pass", "output": "Force all buffered modifications to be written to disk.\n\n        Parameters\n        ----------\n        fsync : bool (default False)\n          call ``os.fsync()`` on the file handle to force writing to disk.\n\n        Notes\n        -----\n        Without ``fsync=True``, flushing may not guarantee that the OS writes\n        to disk. With fsync, the operation will block until the OS claims the\n        file has been written; however, other caching layers may still\n        interfere.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resources(self):\n        '''  '''\n        used_resources = self._used_resources()\n        ret = collections.defaultdict(dict)\n        for resource, total in six.iteritems(self._resources):\n            ret[resource]['total'] = total\n            if resource in used_resources:\n                ret[resource]['used'] = used_resources[resource]\n            else:\n                ret[resource]['used'] = 0\n        return ret", "output": "get total resources and available ones", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start(name, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudException(\n            'The start action must be called with -a or --action.'\n        )\n\n    node_id = get_linode_id_from_name(name)\n    node = get_linode(kwargs={'linode_id': node_id})\n\n    if node['STATUS'] == 1:\n        return {'success': True,\n                'action': 'start',\n                'state': 'Running',\n                'msg': 'Machine already running'}\n\n    response = _query('linode', 'boot', args={'LinodeID': node_id})['DATA']\n\n    if _wait_for_job(node_id, response['JobID']):\n        return {'state': 'Running',\n                'action': 'start',\n                'success': True}\n    else:\n        return {'action': 'start',\n                'success': False}", "output": "Start a VM in Linode.\n\n    name\n        The name of the VM to start.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop vm_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def div(a, b):\n  \"\"\"\n  \n  \"\"\"\n  def divide(a, b):\n    \"\"\"Division\"\"\"\n    return a / b\n  return op_with_scalar_cast(a, b, divide)", "output": "A wrapper around tf division that does more automatic casting of\n  the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def union(self, other):\n        \"\"\"\n        \n        \"\"\"\n        if self._jrdd_deserializer == other._jrdd_deserializer:\n            rdd = RDD(self._jrdd.union(other._jrdd), self.ctx,\n                      self._jrdd_deserializer)\n        else:\n            # These RDDs contain data in different serialized formats, so we\n            # must normalize them to the default serializer.\n            self_copy = self._reserialize()\n            other_copy = other._reserialize()\n            rdd = RDD(self_copy._jrdd.union(other_copy._jrdd), self.ctx,\n                      self.ctx.serializer)\n        if (self.partitioner == other.partitioner and\n                self.getNumPartitions() == rdd.getNumPartitions()):\n            rdd.partitioner = self.partitioner\n        return rdd", "output": "Return the union of this RDD and another one.\n\n        >>> rdd = sc.parallelize([1, 1, 2, 3])\n        >>> rdd.union(rdd).collect()\n        [1, 1, 2, 3, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def equals(self, rhs):\n    \"\"\"\n    \"\"\"\n\n    for comparator in self._comparators:\n      if comparator.equals(rhs):\n        return True\n\n    return False", "output": "Checks whether any Comparator is equal to rhs.\n\n    Args:\n      # rhs: can be anything\n\n    Returns:\n      bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def const_rand(size, seed=23980):\n    \"\"\" \n    \"\"\"\n    old_seed = np.random.seed()\n    np.random.seed(seed)\n    out = np.random.rand(size)\n    np.random.seed(old_seed)\n    return out", "output": "Generate a random array with a fixed seed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_node_status(self, name, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_node_status_with_http_info(name, body, **kwargs)\n        else:\n            (data) = self.replace_node_status_with_http_info(name, body, **kwargs)\n            return data", "output": "replace status of the specified Node\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_node_status(name, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Node (required)\n        :param V1Node body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1Node\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def contextMenuEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        self.menu.popup(event.globalPos())\r\n        event.accept()", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        \n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n        return new_obj.__finalize__(self)", "output": "Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Returns\n        -------\n        shifted : same type as caller\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hostinterface_delete(interfaceids, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'hostinterface.delete'\n            if isinstance(interfaceids, list):\n                params = interfaceids\n            else:\n                params = [interfaceids]\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['interfaceids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": "Delete host interface\n\n    .. versionadded:: 2016.3.0\n\n    :param interfaceids: IDs of the host interfaces to delete\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: ID of deleted host interfaces, False on failure.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.hostinterface_delete 50", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, other):\n        \"\"\"\"\"\"\n        if isinstance(other, cookielib.CookieJar):\n            for cookie in other:\n                self.set_cookie(copy.copy(cookie))\n        else:\n            super(RequestsCookieJar, self).update(other)", "output": "Updates this jar with cookies from another CookieJar or dict-like", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delay_until_retry(exc, deadline):\n    \"\"\"\n    \"\"\"\n    cause = exc.errors[0]\n\n    now = time.time()\n\n    if now >= deadline:\n        raise\n\n    delay = _get_retry_delay(cause)\n    if delay is not None:\n\n        if now + delay > deadline:\n            raise\n\n        time.sleep(delay)", "output": "Helper for :meth:`Session.run_in_transaction`.\n\n    Detect retryable abort, and impose server-supplied delay.\n\n    :type exc: :class:`google.api_core.exceptions.Aborted`\n    :param exc: exception for aborted transaction\n\n    :type deadline: float\n    :param deadline: maximum timestamp to continue retrying the transaction.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_load(jid):\n    '''\n    \n    '''\n    options = _get_options()\n\n    index = options['master_job_cache_index']\n    doc_type = options['master_job_cache_doc_type']\n\n    if options['index_date']:\n        index = '{0}-{1}'.format(index,\n            datetime.date.today().strftime('%Y.%m.%d'))\n\n    data = __salt__['elasticsearch.document_get'](index=index,\n                                                  id=jid,\n                                                  doc_type=doc_type)\n    if data:\n        # Use salt.utils.json.dumps to convert elasticsearch unicode json to standard json\n        return salt.utils.json.loads(salt.utils.json.dumps(data))\n    return {}", "output": "Return the load data that marks a specified jid\n\n    .. versionadded:: 2015.8.1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _connect(user=None, password=None, host=None, port=None, database='admin', authdb=None):\n    '''\n    \n    '''\n    if not user:\n        user = __salt__['config.option']('mongodb.user')\n    if not password:\n        password = __salt__['config.option']('mongodb.password')\n    if not host:\n        host = __salt__['config.option']('mongodb.host')\n    if not port:\n        port = __salt__['config.option']('mongodb.port')\n    if not authdb:\n        authdb = database\n\n    try:\n        conn = pymongo.MongoClient(host=host, port=port)\n        mdb = pymongo.database.Database(conn, database)\n        if user and password:\n            mdb.authenticate(user, password, source=authdb)\n    except pymongo.errors.PyMongoError:\n        log.error('Error connecting to database %s', database)\n        return False\n\n    return conn", "output": "Returns a tuple of (user, host, port) with config, pillar, or default\n    values assigned to missing values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def execute_script(self, script, *args):\n        \"\"\"\n        \n        \"\"\"\n        converted_args = list(args)\n        command = None\n        if self.w3c:\n            command = Command.W3C_EXECUTE_SCRIPT\n        else:\n            command = Command.EXECUTE_SCRIPT\n\n        return self.execute(command, {\n            'script': script,\n            'args': converted_args})['value']", "output": "Synchronously Executes JavaScript in the current window/frame.\n\n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n\n        :Usage:\n            ::\n\n                driver.execute_script('return document.title;')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _raw_open(self, flags, mode=0o777):\n        \"\"\"\n        \n        \"\"\"\n        if self._closed:\n            self._raise_closed()\n        return self._accessor.open(self, flags, mode)", "output": "Open the file pointed by this path and return a file descriptor,\n        as os.open() does.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset_cooldown(self, ctx):\n        \"\"\"\n        \"\"\"\n        if self._buckets.valid:\n            bucket = self._buckets.get_bucket(ctx.message)\n            bucket.reset()", "output": "Resets the cooldown on this command.\n\n        Parameters\n        -----------\n        ctx: :class:`.Context`\n            The invocation context to reset the cooldown under.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shutdown(self):\r\n        \"\"\"\"\"\"\r\n        if self.get_kernel() is not None and not self.slave:\r\n            self.shellwidget.kernel_manager.shutdown_kernel()\r\n        if self.shellwidget.kernel_client is not None:\r\n            background(self.shellwidget.kernel_client.stop_channels)", "output": "Shutdown kernel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rows(self):\n        \"\"\"\n        \n        \"\"\"\n        # We use DataFrames for serialization of IndexedRows from\n        # Java, so we first convert the RDD of rows to a DataFrame\n        # on the Scala/Java side. Then we map each Row in the\n        # DataFrame back to an IndexedRow on this side.\n        rows_df = callMLlibFunc(\"getIndexedRows\", self._java_matrix_wrapper._java_model)\n        rows = rows_df.rdd.map(lambda row: IndexedRow(row[0], row[1]))\n        return rows", "output": "Rows of the IndexedRowMatrix stored as an RDD of IndexedRows.\n\n        >>> mat = IndexedRowMatrix(sc.parallelize([IndexedRow(0, [1, 2, 3]),\n        ...                                        IndexedRow(1, [4, 5, 6])]))\n        >>> rows = mat.rows\n        >>> rows.first()\n        IndexedRow(0, [1.0,2.0,3.0])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def grain_funcs(opts, proxy=None):\n    '''\n    \n    '''\n    ret = LazyLoader(\n        _module_dirs(\n            opts,\n            'grains',\n            'grain',\n            ext_type_dirs='grains_dirs',\n        ),\n        opts,\n        tag='grains',\n    )\n    ret.pack['__utils__'] = utils(opts, proxy=proxy)\n    return ret", "output": "Returns the grain functions\n\n      .. code-block:: python\n\n          import salt.config\n          import salt.loader\n\n          __opts__ = salt.config.minion_config('/etc/salt/minion')\n          grainfuncs = salt.loader.grain_funcs(__opts__)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_imported_modules(cells, nb_module_name=''):\n    \"\"\n    module_names = get_top_level_modules()\n    nb_imports = [match.group(1) for cell in cells for match in IMPORT_RE.finditer(cell['source']) if cell['cell_type'] == 'code']\n    parts = nb_module_name.split('.')\n    parent_modules = ['.'.join(parts[:(x+1)]) for x in range_of(parts)] # Imports parent modules - a.b.c = [a, a.b, a.b.c]\n    all_modules = module_names + nb_imports + parent_modules\n    mods = [import_mod(m, ignore_errors=True) for m in all_modules]\n    return [m for m in mods if m is not None]", "output": "Finds all submodules of notebook - sorted by submodules > top level modules > manual imports. This gives notebook imports priority", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pending(self, tag, match_func=None):\n        \"\"\"\n        \"\"\"\n        if match_func is None:\n            match_func = self._get_match_func()\n        old_events = self.pending_events\n        self.pending_events = []\n        ret = None\n        for evt in old_events:\n            if match_func(evt['tag'], tag):\n                if ret is None:\n                    ret = evt\n                    log.trace('get_event() returning cached event = %s', ret)\n                else:\n                    self.pending_events.append(evt)\n            elif any(pmatch_func(evt['tag'], ptag) for ptag, pmatch_func in self.pending_tags):\n                self.pending_events.append(evt)\n            else:\n                log.trace('get_event() discarding cached event that no longer has any subscriptions = %s', evt)\n        return ret", "output": "Check the pending_events list for events that match the tag\n\n        :param tag: The tag to search for\n        :type tag: str\n        :param tags_regex: List of re expressions to search for also\n        :type tags_regex: list[re.compile()]\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ls_(active=None, cache=True, path=None):\n    '''\n    \n    '''\n    contextvar = 'lxc.ls{0}'.format(path)\n    if active:\n        contextvar += '.active'\n    if cache and (contextvar in __context__):\n        return __context__[contextvar]\n    else:\n        ret = []\n        cmd = 'lxc-ls'\n        if path:\n            cmd += ' -P {0}'.format(pipes.quote(path))\n        if active:\n            cmd += ' --active'\n        output = __salt__['cmd.run_stdout'](cmd, python_shell=False)\n        for line in output.splitlines():\n            ret.extend(line.split())\n        __context__[contextvar] = ret\n        return ret", "output": "Return a list of the containers available on the minion\n\n    path\n        path to the container parent directory\n        default: /var/lib/lxc (system)\n\n        .. versionadded:: 2015.8.0\n\n    active\n        If ``True``, return only active (i.e. running) containers\n\n        .. versionadded:: 2015.5.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxc.ls\n        salt '*' lxc.ls active=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_from_user_input(raw_properties, jamfile_module, location):\n    \"\"\"'\"\"\"\n    assert is_iterable_typed(raw_properties, basestring)\n    assert isinstance(jamfile_module, basestring)\n    assert isinstance(location, basestring)\n    properties = property.create_from_strings(raw_properties, True)\n    properties = property.translate_paths(properties, location)\n    properties = property.translate_indirect(properties, jamfile_module)\n\n    project_id = get_manager().projects().attributeDefault(jamfile_module, 'id', None)\n    if not project_id:\n        project_id = os.path.abspath(location)\n    properties = property.translate_dependencies(properties, project_id, location)\n    properties = property.expand_subfeatures_in_conditions(properties)\n    return create(properties)", "output": "Creates a property-set from the input given by the user, in the\n    context of 'jamfile-module' at 'location", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zoom_in(self):\n        \"\"\"\"\"\"\n        if self._scalefactor <= self._sfmax:\n            self._scalefactor += 1\n            self.scale_image()\n            self._adjust_scrollbar(self._scalestep)\n            self.sig_zoom_changed.emit(self.get_scaling())", "output": "Scale the image up by one scale step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def trim_join_unit(join_unit, length):\n    \"\"\"\n    \n    \"\"\"\n\n    if 0 not in join_unit.indexers:\n        extra_indexers = join_unit.indexers\n\n        if join_unit.block is None:\n            extra_block = None\n        else:\n            extra_block = join_unit.block.getitem_block(slice(length, None))\n            join_unit.block = join_unit.block.getitem_block(slice(length))\n    else:\n        extra_block = join_unit.block\n\n        extra_indexers = copy.copy(join_unit.indexers)\n        extra_indexers[0] = extra_indexers[0][length:]\n        join_unit.indexers[0] = join_unit.indexers[0][:length]\n\n    extra_shape = (join_unit.shape[0] - length,) + join_unit.shape[1:]\n    join_unit.shape = (length,) + join_unit.shape[1:]\n\n    return JoinUnit(block=extra_block, indexers=extra_indexers,\n                    shape=extra_shape)", "output": "Reduce join_unit's shape along item axis to length.\n\n    Extra items that didn't fit are returned as a separate block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _agent_import_failed(trace):\n    \"\"\"\"\"\"\n\n    class _AgentImportFailed(Trainer):\n        _name = \"AgentImportFailed\"\n        _default_config = with_common_config({})\n\n        def _setup(self, config):\n            raise ImportError(trace)\n\n    return _AgentImportFailed", "output": "Returns dummy agent class for if PyTorch etc. is not installed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_screen_resolution(self):\n        \"\"\"\"\"\"\n        widget = QDesktopWidget()\n        geometry = widget.availableGeometry(widget.primaryScreen())\n        return geometry.width(), geometry.height()", "output": "Return the screen resolution of the primary screen.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def months_between(date1, date2, roundOff=True):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.months_between(\n        _to_java_column(date1), _to_java_column(date2), roundOff))", "output": "Returns number of months between dates date1 and date2.\n    If date1 is later than date2, then the result is positive.\n    If date1 and date2 are on the same day of month, or both are the last day of month,\n    returns an integer (time of day will be ignored).\n    The result is rounded off to 8 digits unless `roundOff` is set to `False`.\n\n    >>> df = spark.createDataFrame([('1997-02-28 10:30:00', '1996-10-30')], ['date1', 'date2'])\n    >>> df.select(months_between(df.date1, df.date2).alias('months')).collect()\n    [Row(months=3.94959677)]\n    >>> df.select(months_between(df.date1, df.date2, False).alias('months')).collect()\n    [Row(months=3.9495967741935485)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(database, table, key):\n    \"\"\"\"\"\"\n    field = random.randrange(10)\n    value = ''.join(random.choice(string.printable) for i in range(100))\n    with database.batch() as batch:\n        batch.update(table=table, columns=('id', 'field%d' % field),\n                     values=[(key, value)])", "output": "Does a single update operation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_pythonpath(self, at_start=False):\r\n        \"\"\"\"\"\"\r\n        if at_start:\r\n            current_path = self.get_option('current_project_path',\r\n                                           default=None)\r\n        else:\r\n            current_path = self.get_active_project_path()\r\n        if current_path is None:\r\n            return []\r\n        else:\r\n            return [current_path]", "output": "Get project path as a list to be added to PYTHONPATH", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unload_extension(self, name):\n        \"\"\"\n        \"\"\"\n\n        lib = self.__extensions.get(name)\n        if lib is None:\n            raise errors.ExtensionNotLoaded(name)\n\n        self._remove_module_references(lib.__name__)\n        self._call_module_finalizers(lib, name)", "output": "Unloads an extension.\n\n        When the extension is unloaded, all commands, listeners, and cogs are\n        removed from the bot and the module is un-imported.\n\n        The extension can provide an optional global function, ``teardown``,\n        to do miscellaneous clean-up if necessary. This function takes a single\n        parameter, the ``bot``, similar to ``setup`` from\n        :meth:`~.Bot.load_extension`.\n\n        Parameters\n        ------------\n        name: :class:`str`\n            The extension name to unload. It must be dot separated like\n            regular Python imports if accessing a sub-module. e.g.\n            ``foo.test`` if you want to import ``foo/test.py``.\n\n        Raises\n        -------\n        ExtensionNotLoaded\n            The extension was not loaded.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hypermedia_out():\n    '''\n    \n    '''\n    request = cherrypy.serving.request\n    request._hypermedia_inner_handler = request.handler\n\n    # If handler has been explicitly set to None, don't override.\n    if request.handler is not None:\n        request.handler = hypermedia_handler", "output": "Determine the best handler for the requested content type\n\n    Wrap the normal handler and transform the output from that handler into the\n    requested content type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _indent(lines, prefix=\"  \"):\n    \"\"\"\n    \"\"\"\n    indented = []\n    for line in lines.split(\"\\n\"):\n        indented.append(prefix + line)\n    return \"\\n\".join(indented)", "output": "Indent some text.\n\n    Note that this is present as ``textwrap.indent``, but not in Python 2.\n\n    Args:\n        lines (str): The newline delimited string to be indented.\n        prefix (Optional[str]): The prefix to indent each line with. Default\n            to two spaces.\n\n    Returns:\n        str: The newly indented content.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getconfig():\n    '''\n    \n    '''\n    try:\n        config = '/etc/selinux/config'\n        with salt.utils.files.fopen(config, 'r') as _fp:\n            for line in _fp:\n                line = salt.utils.stringutils.to_unicode(line)\n                if line.strip().startswith('SELINUX='):\n                    return line.split('=')[1].capitalize().strip()\n    except (IOError, OSError, AttributeError):\n        return None\n    return None", "output": "Return the selinux mode from the config file\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' selinux.getconfig", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def simple_cnn(actns:Collection[int], kernel_szs:Collection[int]=None,\n               strides:Collection[int]=None, bn=False) -> nn.Sequential:\n    \"\"\n    nl = len(actns)-1\n    kernel_szs = ifnone(kernel_szs, [3]*nl)\n    strides    = ifnone(strides   , [2]*nl)\n    layers = [conv_layer(actns[i], actns[i+1], kernel_szs[i], stride=strides[i],\n              norm_type=(NormType.Batch if bn and i<(len(strides)-1) else None)) for i in range_of(strides)]\n    layers.append(PoolFlatten())\n    return nn.Sequential(*layers)", "output": "CNN with `conv_layer` defined by `actns`, `kernel_szs` and `strides`, plus batchnorm if `bn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_show(name, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_show(name)", "output": "Create a block storage volume\n\n    name\n        Name of the volume\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_show myblock profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_apply_state(meta_graph, state_ops, feed_map):\n  \"\"\"\"\"\"\n  for node in meta_graph.graph_def.node:\n    keys_to_purge = []\n    tensor_name = node.name + \":0\"\n    # Verify that the node is a state op and that its due to be rewired\n    # in the feedmap.\n    if node.op in state_ops and tensor_name in feed_map:\n      node.op = \"Placeholder\"\n      for key in node.attr:\n        # Only shape and dtype are required for Placeholder. Remove other\n        # attributes.\n        if key != \"shape\":\n          keys_to_purge.append(key)\n      for key in keys_to_purge:\n        del node.attr[key]\n      node.attr[\"dtype\"].type = types_pb2.DT_RESOURCE", "output": "Replaces state ops with non state Placeholder ops for the apply graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_set(set=None, new_set=None, family='ipv4'):\n    '''\n    \n    '''\n\n    if not set:\n        return 'Error: Set needs to be specified'\n\n    if not new_set:\n        return 'Error: New name for set needs to be specified'\n\n    settype = _find_set_type(set)\n    if not settype:\n        return 'Error: Set does not exist'\n\n    settype = _find_set_type(new_set)\n    if settype:\n        return 'Error: New Set already exists'\n\n    cmd = '{0} rename {1} {2}'.format(_ipset_cmd(), set, new_set)\n    out = __salt__['cmd.run'](cmd, python_shell=False)\n\n    if not out:\n        out = True\n    return out", "output": ".. versionadded:: 2014.7.0\n\n    Delete ipset set.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ipset.rename_set custom_set new_set=new_set_name\n\n        IPv6:\n        salt '*' ipset.rename_set custom_set new_set=new_set_name family=ipv6", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_password_update(user_id=None, name=None, password=None,\n                         profile=None, **connection_args):\n    '''\n    \n    '''\n    kstone = auth(profile, **connection_args)\n    if name:\n        for user in kstone.users.list():\n            if user.name == name:\n                user_id = user.id\n                break\n    if not user_id:\n        return {'Error': 'Unable to resolve user id'}\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        kstone.users.update(user=user_id, password=password)\n    else:\n        kstone.users.update_password(user=user_id, password=password)\n    ret = 'Password updated for user ID {0}'.format(user_id)\n    if name:\n        ret += ' ({0})'.format(name)\n    return ret", "output": "Update a user's password (keystone user-password-update)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.user_password_update c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update user_id=c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update name=nova password=12345", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_initialize(self, folder):\n        \"\"\" \n        \"\"\"\n        if not os.path.isdir(folder):\n            raise ValueError('Invalid folder: ' + folder)\n\n        resources = []\n        resource = {'path': 'INSERT_SCRIPT_PATH_HERE'}\n        resources.append(resource)\n\n        username = self.get_config_value(self.CONFIG_NAME_USER)\n        meta_data = {\n            'id': username + '/INSERT_KERNEL_SLUG_HERE',\n            'title': 'INSERT_TITLE_HERE',\n            'code_file': 'INSERT_CODE_FILE_PATH_HERE',\n            'language': 'INSERT_LANGUAGE_HERE',\n            'kernel_type': 'INSERT_KERNEL_TYPE_HERE',\n            'is_private': 'true',\n            'enable_gpu': 'false',\n            'enable_internet': 'false',\n            'dataset_sources': [],\n            'competition_sources': [],\n            'kernel_sources': [],\n        }\n        meta_file = os.path.join(folder, self.KERNEL_METADATA_FILE)\n        with open(meta_file, 'w') as f:\n            json.dump(meta_data, f, indent=2)\n\n        return meta_file", "output": "create a new kernel in a specified folder from template, including\n            json metadata that grabs values from the configuration.\n             Parameters\n            ==========\n            folder: the path of the folder", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def itemsize(self):\n        \"\"\"\n        \n        \"\"\"\n        warnings.warn(\"{obj}.itemsize is deprecated and will be removed \"\n                      \"in a future version\".format(obj=type(self).__name__),\n                      FutureWarning, stacklevel=2)\n        return self._ndarray_values.itemsize", "output": "Return the size of the dtype of the item of the underlying data.\n\n        .. deprecated:: 0.23.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def video_l1_loss(top_out, targets, model_hparams, vocab_size, weights_fn):\n  \"\"\"\"\"\"\n  del vocab_size  # unused arg\n  logits = top_out\n  logits = tf.reshape(logits, [-1] + common_layers.shape_list(logits)[2:-1])\n  targets = tf.reshape(targets, [-1] + common_layers.shape_list(targets)[2:])\n  weights = weights_fn(targets)\n  # Shift targets by 0.5 so later just casting to int gives the prediction.\n  # So for int targets, say 0 and 7, we actually train to predict 0.5 and 7.5.\n  # Later (in merics or infer) this is cast to int anyway. Also, we have no\n  # loss beyond cutoff = 0.2 as these are already correct predictions.\n  targets = tf.to_float(targets) + 0.5\n  loss = video_l1_internal_loss(logits, targets, model_hparams)\n  return tf.reduce_sum(loss * weights), tf.reduce_sum(weights)", "output": "Compute loss numerator and denominator for one shard of output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _legacy_init(self, name, arr):\n        \"\"\"\n        \"\"\"\n        warnings.warn(\n            \"\\033[91mCalling initializer with init(str, NDArray) has been deprecated.\" \\\n            \"please use init(mx.init.InitDesc(...), NDArray) instead.\\033[0m\",\n            DeprecationWarning, stacklevel=3)\n        if not isinstance(name, string_types):\n            raise TypeError('name must be string')\n        if not isinstance(arr, NDArray):\n            raise TypeError('arr must be NDArray')\n        if name.startswith('upsampling'):\n            self._init_bilinear(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('weight'):\n            self._init_zero(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('bias'):\n            self._init_loc_bias(name, arr)\n        elif name.endswith('bias'):\n            self._init_bias(name, arr)\n        elif name.endswith('gamma'):\n            self._init_gamma(name, arr)\n        elif name.endswith('beta'):\n            self._init_beta(name, arr)\n        elif name.endswith('weight'):\n            self._init_weight(name, arr)\n        elif name.endswith(\"moving_mean\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_var\"):\n            self._init_one(name, arr)\n        elif name.endswith(\"moving_inv_var\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_avg\"):\n            self._init_zero(name, arr)\n        elif name.endswith('min'):\n            self._init_zero(name, arr)\n        elif name.endswith('max'):\n            self._init_one(name, arr)\n        else:\n            self._init_default(name, arr)", "output": "Legacy initialization method.\n\n        Parameters\n        ----------\n        name : str\n            Name of corresponding NDArray.\n\n        arr : NDArray\n            NDArray to be initialized.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_field_at(self, index, *, name, value, inline=True):\n        \"\"\"\n        \"\"\"\n\n        try:\n            field = self._fields[index]\n        except (TypeError, IndexError, AttributeError):\n            raise IndexError('field index out of range')\n\n        field['name'] = str(name)\n        field['value'] = str(value)\n        field['inline'] = inline\n        return self", "output": "Modifies a field to the embed object.\n\n        The index must point to a valid pre-existing field.\n\n        This function returns the class instance to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        index: :class:`int`\n            The index of the field to modify.\n        name: :class:`str`\n            The name of the field.\n        value: :class:`str`\n            The value of the field.\n        inline: :class:`bool`\n            Whether the field should be displayed inline.\n\n        Raises\n        -------\n        IndexError\n            An invalid index was provided.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, config=None):\n        \"\"\"\n        \"\"\"\n        if config is not None:\n            clist = [config]\n        else:\n            clist = [\n                self._system_config,\n                self._global_config,\n                self._repo_config,\n                self._local_config,\n            ]\n\n        for conf in clist:\n            if conf.filename is None:\n                continue\n\n            try:\n                logger.debug(\"Writing '{}'.\".format(conf.filename))\n                dname = os.path.dirname(os.path.abspath(conf.filename))\n                try:\n                    os.makedirs(dname)\n                except OSError as exc:\n                    if exc.errno != errno.EEXIST:\n                        raise\n                conf.write()\n            except Exception as exc:\n                msg = \"failed to write config '{}'\".format(conf.filename)\n                raise ConfigError(msg, exc)", "output": "Saves config to config files.\n\n        Args:\n            config (configobj.ConfigObj): optional config object to save.\n\n        Raises:\n            dvc.config.ConfigError: thrown if failed to write config file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map_across_blocks(self, map_func):\n        \"\"\"\n        \"\"\"\n        preprocessed_map_func = self.preprocess_func(map_func)\n        new_partitions = np.array(\n            [\n                [part.apply(preprocessed_map_func) for part in row_of_parts]\n                for row_of_parts in self.partitions\n            ]\n        )\n        return self.__constructor__(new_partitions)", "output": "Applies `map_func` to every partition.\n\n        Args:\n            map_func: The function to apply.\n\n        Returns:\n            A new BaseFrameManager object, the type of object that called this.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_data(self, filename=None):\r\n        \"\"\"\"\"\"\r\n        if filename is None:\r\n            filename = self.filename\r\n            if filename is None:\r\n                filename = getcwd_or_home()\r\n            filename, _selfilter = getsavefilename(self, _(\"\"),\r\n                                                   filename,\r\n                                                   iofunctions.save_filters)\r\n            if filename:\r\n                self.filename = filename\r\n            else:\r\n                return False\r\n        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))\r\n        QApplication.processEvents()\r\n\r\n        error_message = self.shellwidget.save_namespace(self.filename)\r\n        self.shellwidget._kernel_reply = None\r\n\r\n        QApplication.restoreOverrideCursor()\r\n        QApplication.processEvents()\r\n        if error_message is not None:\r\n            if 'Some objects could not be saved:' in error_message:\r\n                save_data_message = (\r\n                    _('<b>Some objects could not be saved:</b>')\r\n                    + '<br><br><code>{obj_list}</code>'.format(\r\n                        obj_list=error_message.split(': ')[1]))\r\n            else:\r\n                save_data_message = _(\r\n                    '<b>Unable to save current workspace</b>'\r\n                    '<br><br>Error message:<br>') + error_message\r\n            QMessageBox.critical(self, _(\"\"), save_data_message)\r\n        self.save_button.setEnabled(self.filename is not None)", "output": "Save data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mnist_common_generator(tmp_dir,\n                           training,\n                           how_many,\n                           data_filename,\n                           label_filename,\n                           start_from=0):\n  \"\"\"\n  \"\"\"\n  data_path = os.path.join(tmp_dir, data_filename)\n  labels_path = os.path.join(tmp_dir, label_filename)\n  images = _extract_mnist_images(data_path, 60000 if training else 10000)\n  labels = _extract_mnist_labels(labels_path, 60000 if training else 10000)\n  # Shuffle the data to make sure classes are well distributed.\n  data = list(zip(images, labels))\n  random.shuffle(data)\n  images, labels = list(zip(*data))\n  return image_utils.image_generator(images[start_from:start_from + how_many],\n                                     labels[start_from:start_from + how_many])", "output": "Image generator for MNIST.\n\n  Args:\n    tmp_dir: path to temporary storage directory.\n    training: a Boolean; if true, we use the train set, otherwise the test set.\n    how_many: how many images and labels to generate.\n    data_filename: file that contains features data.\n    label_filename: file that contains labels.\n    start_from: from which image to start.\n\n  Returns:\n    An instance of image_generator that produces MNIST images.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def regexpExec(self, content):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlRegexpExec(self._o, content)\n        return ret", "output": "Check if the regular expression generates the value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def coalesce(self, numPartitions, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        if shuffle:\n            # Decrease the batch size in order to distribute evenly the elements across output\n            # partitions. Otherwise, repartition will possibly produce highly skewed partitions.\n            batchSize = min(10, self.ctx._batchSize or 1024)\n            ser = BatchedSerializer(PickleSerializer(), batchSize)\n            selfCopy = self._reserialize(ser)\n            jrdd_deserializer = selfCopy._jrdd_deserializer\n            jrdd = selfCopy._jrdd.coalesce(numPartitions, shuffle)\n        else:\n            jrdd_deserializer = self._jrdd_deserializer\n            jrdd = self._jrdd.coalesce(numPartitions, shuffle)\n        return RDD(jrdd, self.ctx, jrdd_deserializer)", "output": "Return a new RDD that is reduced into `numPartitions` partitions.\n\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).glom().collect()\n        [[1], [2, 3], [4, 5]]\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).coalesce(1).glom().collect()\n        [[1, 2, 3, 4, 5]]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, end_ix):\n        \"\"\"\n        \n        \"\"\"\n        if self.most_recent_ix == end_ix:\n            return self.current\n\n        target = end_ix - self.cal_start - self.offset + 1\n        self.current = self.window.seek(target)\n\n        self.most_recent_ix = end_ix\n        return self.current", "output": "Returns\n        -------\n        out : A np.ndarray of the equity pricing up to end_ix after adjustments\n              and rounding have been applied.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nac(x, depth, name=None, reuse=None):\n  \"\"\"\"\"\"\n  with tf.variable_scope(name, default_name=\"nac\", values=[x], reuse=reuse):\n    x_shape = shape_list(x)\n    w = tf.get_variable(\"w\", [x_shape[-1], depth])\n    m = tf.get_variable(\"m\", [x_shape[-1], depth])\n    w = tf.tanh(w) * tf.nn.sigmoid(m)\n    x_flat = tf.reshape(x, [-1, x_shape[-1]])\n    res_flat = tf.matmul(x_flat, w)\n    return tf.reshape(res_flat, x_shape[:-1] + [depth])", "output": "NAC as in https://arxiv.org/abs/1808.00508.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def aggregate_task_lm_losses(hparams,\n                             problem_hparams,\n                             logits,\n                             feature_name,\n                             feature):\n  \"\"\"\"\"\"\n  summaries = []\n  vocab_size = problem_hparams.vocab_size[feature_name]\n  if vocab_size is not None and hasattr(hparams, \"vocab_divisor\"):\n    vocab_size += (-vocab_size) % hparams.vocab_divisor\n  modality = problem_hparams.modality[feature_name]\n  loss = hparams.loss.get(feature_name, modalities.get_loss(modality))\n  weights_fn = hparams.weights_fn.get(\n      feature_name, modalities.get_weights_fn(modality))\n  loss_num = 0.\n  loss_den = 0.\n  for task in hparams.problem.task_list:\n    loss_num_, loss_den_ = loss(\n        logits, feature,\n        lambda x: common_layers.weights_multi_problem_all(x, task.task_id),  # pylint: disable=cell-var-from-loop\n        hparams, vocab_size, weights_fn)\n\n    loss_num += loss_num_\n    loss_den += loss_den_\n\n    loss_val = loss_num_ / tf.maximum(1.0, loss_den_)\n    summaries.append([task.name+\"_loss\", loss_val])\n\n  return loss_num, loss_den, summaries", "output": "LM loss for multiproblems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pad_to_multiple_2d(x, block_shape):\n  \"\"\"\n  \"\"\"\n  old_shape = x.get_shape().dims\n  last = old_shape[-1]\n  if len(old_shape) == 4:\n    height_padding = -common_layers.shape_list(x)[1] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[2] % block_shape[1]\n    paddings = [[0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n  elif len(old_shape) == 5:\n    height_padding = -common_layers.shape_list(x)[2] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[3] % block_shape[1]\n    paddings = [[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n\n  padded_x = tf.pad(x, paddings)\n  padded_shape = padded_x.get_shape().as_list()\n  padded_shape = padded_shape[:-1] + [last]\n  padded_x.set_shape(padded_shape)\n  return padded_x", "output": "Making sure x is a multiple of shape.\n\n  Args:\n    x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor\n    block_shape: a 2-d list of integer shapes\n\n  Returns:\n    padded_x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert(model, feature_names = None, target = 'target', force_32bit_float = True):\n    \"\"\"\n    \n    \"\"\"\n    return _MLModel(_convert_tree_ensemble(model, feature_names, target, force_32bit_float = force_32bit_float))", "output": "Convert a trained XGBoost model to Core ML format.\n\n    Parameters\n    ----------\n    decision_tree : Booster\n        A trained XGboost tree model.\n\n    feature_names: [str] | str\n        Names of input features that will be exposed in the Core ML model\n        interface.\n\n        Can be set to one of the following:\n\n        - None for using the feature names from the model.\n        - List of names of the input features that should be exposed in the\n          interface to the Core ML model. These input features are in the same\n          order as the XGboost model.\n\n    target: str\n        Name of the output feature name exposed to the Core ML model.\n\n    force_32bit_float: bool\n        If True, then the resulting CoreML model will use 32 bit floats internally.\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n\t\t# Convert it with default input and output names\n\t\t>>> import coremltools\n\t\t>>> coreml_model = coremltools.converters.xgboost.convert(model)\n\n\t\t# Saving the Core ML model to a file.\n\t\t>>> coremltools.save('my_model.mlmodel')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_simple_equity_info(sids,\n                            start_date,\n                            end_date,\n                            symbols=None,\n                            names=None,\n                            exchange='TEST'):\n    \"\"\"\n    \n    \"\"\"\n    num_assets = len(sids)\n    if symbols is None:\n        symbols = list(ascii_uppercase[:num_assets])\n    else:\n        symbols = list(symbols)\n\n    if names is None:\n        names = [str(s) + \" INC.\" for s in symbols]\n\n    return pd.DataFrame(\n        {\n            'symbol': symbols,\n            'start_date': pd.to_datetime([start_date] * num_assets),\n            'end_date': pd.to_datetime([end_date] * num_assets),\n            'asset_name': list(names),\n            'exchange': exchange,\n        },\n        index=sids,\n        columns=(\n            'start_date',\n            'end_date',\n            'symbol',\n            'exchange',\n            'asset_name',\n        ),\n    )", "output": "Create a DataFrame representing assets that exist for the full duration\n    between `start_date` and `end_date`.\n\n    Parameters\n    ----------\n    sids : array-like of int\n    start_date : pd.Timestamp, optional\n    end_date : pd.Timestamp, optional\n    symbols : list, optional\n        Symbols to use for the assets.\n        If not provided, symbols are generated from the sequence 'A', 'B', ...\n    names : list, optional\n        Names to use for the assets.\n        If not provided, names are generated by adding \" INC.\" to each of the\n        symbols (which might also be auto-generated).\n    exchange : str, optional\n        The exchange name.\n\n    Returns\n    -------\n    info : pd.DataFrame\n        DataFrame representing newly-created assets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_batch(self, dataloader):\n        \"\"\"\n        \n        \"\"\"\n        sum_losses = 0\n        len_losses = 0\n        for input_data, input_label in tqdm(dataloader):\n            data = gluon.utils.split_and_load(input_data, self.ctx, even_split=False)\n            label = gluon.utils.split_and_load(input_label, self.ctx, even_split=False)\n            batch_size = input_data.shape[0]\n            sum_losses, len_losses = self.train(data, label, batch_size)\n            sum_losses += sum_losses\n            len_losses += len_losses\n\n        return sum_losses, len_losses", "output": "Description : training for LipNet", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _params_extend(params, _ignore_name=False, **kwargs):\n    '''\n    \n\n    '''\n    # extend params value by optional zabbix API parameters\n    for key in kwargs:\n        if not key.startswith('_'):\n            params.setdefault(key, kwargs[key])\n\n    # ignore name parameter passed from Salt state module, use firstname or visible_name instead\n    if _ignore_name:\n        params.pop('name', None)\n        if 'firstname' in params:\n            params['name'] = params.pop('firstname')\n        elif 'visible_name' in params:\n            params['name'] = params.pop('visible_name')\n\n    return params", "output": "Extends the params dictionary by values from keyword arguments.\n\n    .. versionadded:: 2016.3.0\n\n    :param params: Dictionary with parameters for zabbix API.\n    :param _ignore_name: Salt State module is passing first line as 'name' parameter. If API uses optional parameter\n    'name' (for ex. host_create, user_create method), please use 'visible_name' or 'firstname' instead of 'name' to\n    not mess these values.\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: Extended params dictionary with parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rlmb_base_sv2p():\n  \"\"\"\"\"\"\n  hparams = rlmb_base()\n  hparams.learning_rate_bump = 1.0\n  hparams.generative_model = \"next_frame_sv2p\"\n  hparams.generative_model_params = \"next_frame_sv2p_atari\"\n  return hparams", "output": "Base setting with sv2p as world model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def compress_encoder_2d(x, hparams, name=None):\n  \"\"\"\n  \"\"\"\n  return compress_encoder(\n      x,\n      hparams,\n      strides=(2, 2),\n      kernel_size=(hparams.kernel_size, hparams.kernel_size),\n      name=name)", "output": "Encoder that compresses 2-D inputs by 2**num_compress_steps.\n\n  Args:\n    x: Tensor of shape [batch, height, width, channels].\n    hparams: HParams.\n    name: string, variable scope.\n\n  Returns:\n    Tensor of shape [batch, latent_length, hparams.hidden_size], where\n      latent_length is\n      hparams.num_latents * (height*width) / 2**(hparams.num_compress_steps).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift_right(x, pad_value=None):\n  \"\"\"\"\"\"\n  if pad_value is None:\n    shifted_targets = tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])[:, :-1, :, :]\n  else:\n    shifted_targets = tf.concat([pad_value, x], axis=1)[:, :-1, :, :]\n  return shifted_targets", "output": "Shift the second dimension of x right by one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_valid_version():\n    '''\n    \n    '''\n\n    # Locate the full path to npm\n    npm_path = salt.utils.path.which('npm')\n\n    # pylint: disable=no-member\n    res = salt.modules.cmdmod.run('{npm} --version'.format(npm=npm_path), output_loglevel='quiet')\n    npm_version, valid_version = _LooseVersion(res), _LooseVersion('1.2')\n    # pylint: enable=no-member\n    if npm_version < valid_version:\n        raise CommandExecutionError(\n            '\\'npm\\' is not recent enough({0} < {1}). Please Upgrade.'.format(\n                npm_version, valid_version\n            )\n        )", "output": "Check the version of npm to ensure this module will work. Currently\n    npm must be at least version 1.2.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cbday_roll(self):\n        \"\"\"\n        \n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith('S'):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func", "output": "Define default roll function to be called in apply method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def websocket_url_for_server_url(url):\n    ''' \n\n    '''\n    if url.startswith(\"http:\"):\n        reprotocoled = \"ws\" + url[4:]\n    elif url.startswith(\"https:\"):\n        reprotocoled = \"wss\" + url[5:]\n    else:\n        raise ValueError(\"URL has unknown protocol \" + url)\n    if reprotocoled.endswith(\"/\"):\n        return reprotocoled + \"ws\"\n    else:\n        return reprotocoled + \"/ws\"", "output": "Convert an ``http(s)`` URL for a Bokeh server websocket endpoint into\n    the appropriate ``ws(s)`` URL\n\n    Args:\n        url (str):\n            An ``http(s)`` URL\n\n    Returns:\n        str:\n            The corresponding ``ws(s)`` URL ending in ``/ws``\n\n    Raises:\n        ValueError:\n            If the input URL is not of the proper form.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_code_tolist(code, auto_fill=True):\n    \"\"\"\n    \"\"\"\n\n    if isinstance(code, str):\n        if auto_fill:\n            return [QA_util_code_tostr(code)]\n        else:\n            return [code]\n\n    elif isinstance(code, list):\n        if auto_fill:\n            return [QA_util_code_tostr(item) for item in code]\n        else:\n            return [item for item in code]", "output": "\u8f6c\u6362code==> list\n\n    Arguments:\n        code {[type]} -- [description]\n\n    Keyword Arguments:\n        auto_fill {bool} -- \u662f\u5426\u81ea\u52a8\u8865\u5168(\u4e00\u822c\u662f\u7528\u4e8e\u80a1\u7968/\u6307\u6570/etf\u7b496\u4f4d\u6570,\u671f\u8d27\u4e0d\u9002\u7528) (default: {True})\n\n    Returns:\n        [list] -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stopped(name,\n            kill=False,\n            remote_addr=None,\n            cert=None,\n            key=None,\n            verify_cert=True):\n    '''\n    \n    '''\n    ret = {\n        'name': name,\n        'kill': kill,\n\n        'remote_addr': remote_addr,\n        'cert': cert,\n        'key': key,\n        'verify_cert': verify_cert,\n\n        'changes': {}\n    }\n\n    try:\n        container = __salt__['lxd.container_get'](\n            name, remote_addr, cert, key, verify_cert, _raw=True\n        )\n    except CommandExecutionError as e:\n        return _error(ret, six.text_type(e))\n    except SaltInvocationError as e:\n        # Container not found\n        return _error(ret, 'Container \"{0}\" not found'.format(name))\n\n    if container.status_code == CONTAINER_STATUS_STOPPED:\n        return _success(ret, 'Container \"{0}\" is already stopped'.format(name))\n\n    if __opts__['test']:\n        ret['changes']['stopped'] = \\\n            'Would stop the container \"{0}\"'.format(name)\n        return _unchanged(ret, ret['changes']['stopped'])\n\n    container.stop(force=kill, wait=True)\n    ret['changes']['stopped'] = \\\n        'Stopped the container \"{0}\"'.format(name)\n    return _success(ret, ret['changes']['stopped'])", "output": "Ensure a LXD container is stopped, kill it if kill is true else stop it\n\n    name :\n        The name of the container to stop\n\n    kill :\n        kill if true\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Zertifikate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enable_plugin(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    cmd = [_get_rabbitmq_plugin(), 'enable', name]\n    ret = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    return _format_response(ret, 'Enabled')", "output": "Enable a RabbitMQ plugin via the rabbitmq-plugins command.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.enable_plugin foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_pid_to_pidfile(pidfile_path):\n    \"\"\" \n\n        \"\"\"\n    open_flags = (os.O_CREAT | os.O_EXCL | os.O_WRONLY)\n    open_mode = 0o644\n    pidfile_fd = os.open(pidfile_path, open_flags, open_mode)\n    pidfile = os.fdopen(pidfile_fd, 'w')\n\n    # According to the FHS 2.3 section on PID files in /var/run:\n    #\n    #   The file must consist of the process identifier in\n    #   ASCII-encoded decimal, followed by a newline character. For\n    #   example, if crond was process number 25, /var/run/crond.pid\n    #   would contain three characters: two, five, and newline.\n\n    pid = os.getpid()\n    pidfile.write(\"%s\\n\" % pid)\n    pidfile.close()", "output": "Write the PID in the named PID file.\n\n        Get the numeric process ID (\u201cPID\u201d) of the current process\n        and write it to the named file as a line of text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_revision(self, dest, url, rev_options):\n        \"\"\"\n        \n        \"\"\"\n        rev = rev_options.arg_rev\n        sha, is_branch = self.get_revision_sha(dest, rev)\n\n        if sha is not None:\n            rev_options = rev_options.make_new(sha)\n            rev_options.branch_name = rev if is_branch else None\n\n            return rev_options\n\n        # Do not show a warning for the common case of something that has\n        # the form of a Git commit hash.\n        if not looks_like_hash(rev):\n            logger.warning(\n                \"Did not find branch or tag '%s', assuming revision or ref.\",\n                rev,\n            )\n\n        if not rev.startswith('refs/'):\n            return rev_options\n\n        # If it looks like a ref, we have to fetch it explicitly.\n        self.run_command(\n            ['fetch', '-q', url] + rev_options.to_args(),\n            cwd=dest,\n        )\n        # Change the revision to the SHA of the ref we fetched\n        sha = self.get_revision(dest, rev='FETCH_HEAD')\n        rev_options = rev_options.make_new(sha)\n\n        return rev_options", "output": "Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def current_changed(self, index):\r\n        \"\"\"\"\"\"\r\n#        count = self.get_stack_count()\r\n#        for btn in (self.filelist_btn, self.previous_btn, self.next_btn):\r\n#            btn.setEnabled(count > 1)\r\n\r\n        editor = self.get_current_editor()\r\n        if editor.lsp_ready and not editor.document_opened:\r\n            editor.document_did_open()\r\n        if index != -1:\r\n            editor.setFocus()\r\n            logger.debug(\"Set focus to: %s\" % editor.filename)\r\n        else:\r\n            self.reset_statusbar.emit()\r\n        self.opened_files_list_changed.emit()\r\n\r\n        self.stack_history.refresh()\r\n        self.stack_history.remove_and_append(index)\r\n\r\n        # Needed to avoid an error generated after moving/renaming\r\n        # files outside Spyder while in debug mode.\r\n        # See issue 8749.\r\n        try:\r\n            logger.debug(\"Current changed: %d - %s\" %\r\n                         (index, self.data[index].editor.filename))\r\n        except IndexError:\r\n            pass\r\n\r\n        self.update_plugin_title.emit()\r\n        if editor is not None:\r\n            # Needed in order to handle the close of files open in a directory\r\n            # that has been renamed. See issue 5157\r\n            try:\r\n                self.current_file_changed.emit(self.data[index].filename,\r\n                                               editor.get_position('cursor'))\r\n            except IndexError:\r\n                pass", "output": "Stack index has changed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_activation(net, node, module, builder):\n    \"\"\"\n    \"\"\"\n    input_name, output_name = _get_input_output_name(net, node)\n    name = node['name']\n    mx_non_linearity = _get_attrs(node)['act_type']\n    #TODO add SCALED_TANH, SOFTPLUS, SOFTSIGN, SIGMOID_HARD, LEAKYRELU, PRELU, ELU, PARAMETRICSOFTPLUS, THRESHOLDEDRELU, LINEAR\n    if mx_non_linearity == 'relu':\n        non_linearity = 'RELU'\n    elif mx_non_linearity == 'tanh':\n        non_linearity = 'TANH'\n    elif mx_non_linearity == 'sigmoid':\n        non_linearity = 'SIGMOID'\n    else:\n        raise TypeError('Unknown activation type %s' % mx_non_linearity)\n    builder.add_activation(name = name,\n                           non_linearity = non_linearity,\n                           input_name = input_name,\n                           output_name = output_name)", "output": "Convert an activation layer from mxnet to coreml.\n\n    Parameters\n    ----------\n    network: net\n        A mxnet network object.\n\n    layer: node\n        Node to convert.\n\n    module: module\n        An module for MXNet\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hash():\n    '''\n    \n    '''\n    # Using bitmask to emulate rollover behavior of C unsigned 32 bit int\n    bitmask = 0xffffffff\n    h = 0\n\n    for i in bytearray(salt.utils.stringutils.to_bytes(__grains__['id'])):\n        h = (h + i) & bitmask\n        h = (h + (h << 10)) & bitmask\n        h = (h ^ (h >> 6)) & bitmask\n\n    h = (h + (h << 3)) & bitmask\n    h = (h ^ (h >> 11)) & bitmask\n    h = (h + (h << 15)) & bitmask\n\n    return (h & (_HASH_SIZE - 1)) & bitmask", "output": "Jenkins One-At-A-Time Hash Function\n    More Info: http://en.wikipedia.org/wiki/Jenkins_hash_function#one-at-a-time", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def entity_from_dict(self, entity_dict):\n        \"\"\"\n        \"\"\"\n        entity = entity_dict[\"entity\"]\n        role = entity_dict[\"role\"]\n\n        if entity == \"allUsers\":\n            entity = self.all()\n\n        elif entity == \"allAuthenticatedUsers\":\n            entity = self.all_authenticated()\n\n        elif \"-\" in entity:\n            entity_type, identifier = entity.split(\"-\", 1)\n            entity = self.entity(entity_type=entity_type, identifier=identifier)\n\n        if not isinstance(entity, _ACLEntity):\n            raise ValueError(\"Invalid dictionary: %s\" % entity_dict)\n\n        entity.grant(role)\n        return entity", "output": "Build an _ACLEntity object from a dictionary of data.\n\n        An entity is a mutable object that represents a list of roles\n        belonging to either a user or group or the special types for all\n        users and all authenticated users.\n\n        :type entity_dict: dict\n        :param entity_dict: Dictionary full of data from an ACL lookup.\n\n        :rtype: :class:`_ACLEntity`\n        :returns: An Entity constructed from the dictionary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_namespaced_ingress(self, name, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n        else:\n            (data) = self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n            return data", "output": "replace the specified Ingress\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_namespaced_ingress(name, namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Ingress (required)\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param NetworkingV1beta1Ingress body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: NetworkingV1beta1Ingress\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addSibling(self, elem):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlAddSibling(self._o, elem__o)\n        if ret is None:raise treeError('xmlAddSibling() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Add a new element @elem to the list of siblings of @cur\n          merging adjacent TEXT nodes (@elem may be freed) If the new\n          element was already inserted in a document it is first\n           unlinked from its existing context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_get_macroindex_list(ip=None, port=None):\n    \"\"\"\n\n\n    \"\"\"\n    global extension_market_list\n    extension_market_list = QA_fetch_get_extensionmarket_list(\n    ) if extension_market_list is None else extension_market_list\n\n    return extension_market_list.query('market==38')", "output": "\u5b8f\u89c2\u6307\u6807\u5217\u8868\n\n    Keyword Arguments:\n        ip {[type]} -- [description] (default: {None})\n        port {[type]} -- [description] (default: {None})\n\n        38        10      \u5b8f\u89c2\u6307\u6807         HG", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def winsorize(row, min_percentile, max_percentile):\n    \"\"\"\n    \n    \"\"\"\n    a = row.copy()\n    nan_count = isnan(row).sum()\n    nonnan_count = a.size - nan_count\n\n    # NOTE: argsort() sorts nans to the end of the array.\n    idx = a.argsort()\n\n    # Set values at indices below the min percentile to the value of the entry\n    # at the cutoff.\n    if min_percentile > 0:\n        lower_cutoff = int(min_percentile * nonnan_count)\n        a[idx[:lower_cutoff]] = a[idx[lower_cutoff]]\n\n    # Set values at indices above the max percentile to the value of the entry\n    # at the cutoff.\n    if max_percentile < 1:\n        upper_cutoff = int(ceil(nonnan_count * max_percentile))\n        # if max_percentile is close to 1, then upper_cutoff might not\n        # remove any values.\n        if upper_cutoff < nonnan_count:\n            start_of_nans = (-nan_count) if nan_count else None\n            a[idx[upper_cutoff:start_of_nans]] = a[idx[upper_cutoff - 1]]\n\n    return a", "output": "This implementation is based on scipy.stats.mstats.winsorize", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_banks_to_remove(redis_server, bank, path=''):\n    '''\n    \n    '''\n    current_path = bank if not path else '{path}/{bank}'.format(path=path, bank=bank)\n    bank_paths_to_remove = [current_path]\n    # as you got here, you'll be removed\n\n    bank_key = _get_bank_redis_key(current_path)\n    child_banks = redis_server.smembers(bank_key)\n    if not child_banks:\n        return bank_paths_to_remove  # this bank does not have any child banks so we stop here\n    for child_bank in child_banks:\n        bank_paths_to_remove.extend(_get_banks_to_remove(redis_server, child_bank, path=current_path))\n        # go one more level deeper\n        # and also remove the children of this child bank (if any)\n    return bank_paths_to_remove", "output": "A simple tree tarversal algorithm that builds the list of banks to remove,\n    starting from an arbitrary node in the tree.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pillar_minions(self, expr, delimiter, greedy):\n        '''\n        \n        '''\n        return self._check_cache_minions(expr, delimiter, greedy, 'pillar')", "output": "Return the minions found by looking via pillar", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_from_class_batches(self, class_batches, num_shards=None):\n    \"\"\"\n    \"\"\"\n    shards_for_submissions = {}\n    shard_idx = 0\n    for idx, (batch_id, batch_val) in enumerate(iteritems(class_batches)):\n      work_id = DEFENSE_WORK_ID_PATTERN.format(idx)\n      submission_id = batch_val['submission_id']\n      shard_id = None\n      if num_shards:\n        shard_id = shards_for_submissions.get(submission_id)\n        if shard_id is None:\n          shard_id = shard_idx % num_shards\n          shards_for_submissions[submission_id] = shard_id\n          shard_idx += 1\n      # Note: defense also might have following fields populated by worker:\n      # stat_correct, stat_error, stat_target_class, stat_num_images\n      self.work[work_id] = {\n          'claimed_worker_id': None,\n          'claimed_worker_start_time': None,\n          'is_completed': False,\n          'error': None,\n          'elapsed_time': None,\n          'submission_id': submission_id,\n          'shard_id': shard_id,\n          'output_classification_batch_id': batch_id,\n      }", "output": "Initializes work pieces from classification batches.\n\n    Args:\n      class_batches: dict with classification batches, could be obtained\n        as ClassificationBatches.data\n      num_shards: number of shards to split data into,\n        if None then no sharding is done.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy2(src, dst):\n    \"\"\"\n\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst)\n    copystat(src, dst)", "output": "Copy data and all stat info (\"cp -p src dst\").\n\n    The destination may be a directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\n        \"\"\"\n        info = self._env.reset()[self.brain_name]\n        n_agents = len(info.agents)\n        self._check_agents(n_agents)\n        self.game_over = False\n\n        if not self._multiagent:\n            obs, reward, done, info = self._single_step(info)\n        else:\n            obs, reward, done, info = self._multi_step(info)\n        return obs", "output": "Resets the state of the environment and returns an initial observation.\n        In the case of multi-agent environments, this is a list.\n        Returns: observation (object/list): the initial observation of the\n            space.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _authenticate(secrets_file):\n    \"\"\"\n    \"\"\"\n    flow = oauthclient.flow_from_clientsecrets(\n        secrets_file,\n        scope=OAUTH_SCOPE,\n        message=('Failed to initialized OAuth 2.0 flow with secrets '\n                 'file: %s' % secrets_file))\n    storage = oauthfile.Storage(OAUTH_CREDENTIALS_FILE)\n    credentials = storage.get()\n    if credentials is None or credentials.invalid:\n        credentials = oauthtools.run_flow(flow, storage, oauthtools.argparser.parse_args(args=[]))\n    http = httplib2.Http()\n    return credentials.authorize(http)", "output": "Runs the OAuth 2.0 installed application flow.\n\n    Returns:\n      An authorized httplib2.Http instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ConsumeInteger(tokenizer, is_signed=False, is_long=False):\n  \"\"\"\n  \"\"\"\n  try:\n    result = ParseInteger(tokenizer.token, is_signed=is_signed, is_long=is_long)\n  except ValueError as e:\n    raise tokenizer.ParseError(str(e))\n  tokenizer.NextToken()\n  return result", "output": "Consumes an integer number from tokenizer.\n\n  Args:\n    tokenizer: A tokenizer used to parse the number.\n    is_signed: True if a signed integer must be parsed.\n    is_long: True if a long integer must be parsed.\n\n  Returns:\n    The integer parsed.\n\n  Raises:\n    ParseError: If an integer with given characteristics couldn't be consumed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def eval_valid(self, feval=None):\n        \"\"\"\n        \"\"\"\n        return [item for i in range_(1, self.__num_dataset)\n                for item in self.__inner_eval(self.name_valid_sets[i - 1], i, feval)]", "output": "Evaluate for validation data.\n\n        Parameters\n        ----------\n        feval : callable or None, optional (default=None)\n            Customized evaluation function.\n            Should accept two parameters: preds, train_data,\n            and return (eval_name, eval_result, is_higher_better) or list of such tuples.\n            For multi-class task, the preds is group by class_id first, then group by row_id.\n            If you want to get i-th row preds in j-th class, the access way is preds[j * num_data + i].\n\n        Returns\n        -------\n        result : list\n            List with evaluation results.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema(self):\n        \"\"\"\n        \"\"\"\n        prop = self._properties.get(\"schema\", {})\n        return [SchemaField.from_api_repr(field) for field in prop.get(\"fields\", [])]", "output": "List[:class:`~google.cloud.bigquery.schema.SchemaField`]: The schema\n        for the data.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query.tableDefinitions.(key).schema\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externalDataConfiguration.schema", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cmd(command, *args, **kwargs):\n    '''\n    \n    '''\n    for k in list(kwargs):\n        if k.startswith('__pub_'):\n            kwargs.pop(k)\n    local_command = '.'.join(['nxos', command])\n    log.info('local command: %s', local_command)\n    if local_command not in __salt__:\n        return False\n    return __salt__[local_command](*args, **kwargs)", "output": "NOTE: This function is preserved for backwards compatibilty.  This allows\n    commands to be executed using either of the following syntactic forms.\n\n    salt '*' nxos.cmd <function>\n\n    or\n\n    salt '*' nxos.<function>\n\n    command\n        function from `salt.modules.nxos` to run\n\n    args\n        positional args to pass to `command` function\n\n    kwargs\n        key word arguments to pass to `command` function\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd sendline 'show ver'\n        salt '*' nxos.cmd show_run\n        salt '*' nxos.cmd check_password username=admin password='$5$lkjsdfoi$blahblahblah' encrypted=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mode_number(self, rows: List[Row], column: NumberColumn) -> Number:\n        \"\"\"\n        \n        \"\"\"\n        most_frequent_list = self._get_most_frequent_values(rows, column)\n        if not most_frequent_list:\n            return 0.0  # type: ignore\n        most_frequent_value = most_frequent_list[0]\n        if not isinstance(most_frequent_value, Number):\n            raise ExecutionError(f\"Invalid valus for mode_number: {most_frequent_value}\")\n        return most_frequent_value", "output": "Takes a list of rows and a column and returns the most frequent value under\n        that column in those rows.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def readerForMemory(buffer, size, URL, encoding, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlReaderForMemory(buffer, size, URL, encoding, options)\n    if ret is None:raise treeError('xmlReaderForMemory() failed')\n    return xmlTextReader(_obj=ret)", "output": "Create an xmltextReader for an XML in-memory document. The\n      parsing flags @options are a combination of xmlParserOption.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _crop_pad_default(x, size, padding_mode='reflection', row_pct:uniform = 0.5, col_pct:uniform = 0.5):\n    \"\"\n    padding_mode = _pad_mode_convert[padding_mode]\n    size = tis2hw(size)\n    if x.shape[1:] == torch.Size(size): return x\n    rows,cols = size\n    row_pct,col_pct = _minus_epsilon(row_pct,col_pct)\n    if x.size(1)<rows or x.size(2)<cols:\n        row_pad = max((rows-x.size(1)+1)//2, 0)\n        col_pad = max((cols-x.size(2)+1)//2, 0)\n        x = F.pad(x[None], (col_pad,col_pad,row_pad,row_pad), mode=padding_mode)[0]\n    row = int((x.size(1)-rows+1)*row_pct)\n    col = int((x.size(2)-cols+1)*col_pct)\n    x = x[:, row:row+rows, col:col+cols]\n    return x.contiguous()", "output": "Crop and pad tfm - `row_pct`,`col_pct` sets focal point.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def legal_graph(graph):\n    '''\n    '''\n\n    descriptor = graph.extract_descriptor()\n    skips = descriptor.skip_connections\n    if len(skips) != len(set(skips)):\n        return False\n    return True", "output": "judge if a graph is legal or not.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_request(name=None):\n    '''\n    \n    '''\n    notify_path = os.path.join(__opts__['cachedir'], 'req_state.p')\n    serial = salt.payload.Serial(__opts__)\n    if os.path.isfile(notify_path):\n        with salt.utils.files.fopen(notify_path, 'rb') as fp_:\n            req = serial.load(fp_)\n        if name:\n            return req[name]\n        return req\n    return {}", "output": ".. versionadded:: 2015.5.0\n\n    Return the state request information, if any\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' state.check_request", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_intrinsic_dict(self, input):\n        \"\"\"\n        \n        \"\"\"\n        # All intrinsic functions are dictionaries with just one key\n        return isinstance(input, dict) \\\n            and len(input) == 1 \\\n            and list(input.keys())[0] in self.supported_intrinsics", "output": "Can the input represent an intrinsic function in it?\n\n        :param input: Object to be checked\n        :return: True, if the input contains a supported intrinsic function.  False otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reverse_op(name, doc=\"binary operator\"):\n    \"\"\" \n    \"\"\"\n    def _(self, other):\n        jother = _create_column_from_literal(other)\n        jc = getattr(jother, name)(self._jc)\n        return Column(jc)\n    _.__doc__ = doc\n    return _", "output": "Create a method for binary operator (this object is on right side)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample_from_discretized_mix_logistic(pred, seed=None):\n  \"\"\"\n  \"\"\"\n\n  logits, locs, log_scales, coeffs = split_to_discretized_mix_logistic_params(\n      pred)\n\n  # Sample mixture indicator given logits using the gumbel max trick.\n  num_mixtures = shape_list(logits)[-1]\n  gumbel_noise = -tf.log(-tf.log(\n      tf.random_uniform(\n          tf.shape(logits), minval=1e-5, maxval=1. - 1e-5, seed=seed)))\n  sel = tf.one_hot(\n      tf.argmax(logits + gumbel_noise, -1),\n      depth=num_mixtures,\n      dtype=tf.float32)\n\n  # Select mixture component's parameters.\n  sel = tf.expand_dims(sel, -1)\n  locs = tf.reduce_sum(locs * sel, 3)\n  log_scales = tf.reduce_sum(log_scales * sel, 3)\n  coeffs = tf.reduce_sum(coeffs * sel, 3)\n\n  # Sample from 3-D logistic & clip to interval. Note we don't round to the\n  # nearest 8-bit value when sampling.\n  uniform_noise = tf.random_uniform(\n      tf.shape(locs), minval=1e-5, maxval=1. - 1e-5, seed=seed)\n  logistic_noise = tf.log(uniform_noise) - tf.log1p(-uniform_noise)\n  x = locs + tf.exp(log_scales) * logistic_noise\n  x0 = x[..., 0]\n  x1 = x[..., 1] + coeffs[..., 0] * x0\n  x2 = x[..., 2] + coeffs[..., 1] * x0 + coeffs[..., 2] * x1\n  x = tf.stack([x0, x1, x2], axis=-1)\n  x = tf.clip_by_value(x, -1., 1.)\n  return x", "output": "Sampling from a discretized mixture of logistics.\n\n  Args:\n    pred: A [batch, height, width, num_mixtures*10] tensor of floats\n      comprising one unconstrained mixture probability, three means\n      (one per channel), three standard deviations (one per channel),\n      and three coefficients which linearly parameterize dependence across\n      channels.\n    seed: Random seed.\n\n  Returns:\n    A tensor of shape [batch, height, width, 3] with real intensities scaled\n    between -1 and 1.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show(commands,\n         raw_text=True,\n         **kwargs):\n    '''\n    \n    '''\n    ret = []\n    if raw_text:\n        method = 'cli_ascii'\n        key = 'msg'\n    else:\n        method = 'cli'\n        key = 'body'\n    response_list = _cli_command(commands,\n                                 method=method,\n                                 **kwargs)\n    ret = [response[key] for response in response_list if response]\n    return ret", "output": "Execute one or more show (non-configuration) commands.\n\n    commands\n        The commands to be executed.\n\n    raw_text: ``True``\n        Whether to return raw text or structured data.\n\n    transport: ``https``\n        Specifies the type of connection transport to use. Valid values for the\n        connection are ``http``, and  ``https``.\n\n    host: ``localhost``\n        The IP address or DNS host name of the connection device.\n\n    username: ``admin``\n        The username to pass to the device to authenticate the NX-API connection.\n\n    password\n        The password to pass to the device to authenticate the NX-API connection.\n\n    port\n        The TCP port of the endpoint for the NX-API connection. If this keyword is\n        not specified, the default value is automatically determined by the\n        transport type (``80`` for ``http``, or ``443`` for ``https``).\n\n    timeout: ``60``\n        Time in seconds to wait for the device to respond. Default: 60 seconds.\n\n    verify: ``True``\n        Either a boolean, in which case it controls whether we verify the NX-API\n        TLS certificate, or a string, in which case it must be a path to a CA bundle\n        to use. Defaults to ``True``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call --local nxos_api.show 'show version'\n        salt '*' nxos_api.show 'show bgp sessions' 'show processes' raw_text=False\n        salt 'regular-minion' nxos_api.show 'show interfaces' host=sw01.example.com username=test password=test", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def batch_fn(dataset, training, shapes, target_names,\n             batch_size=32, eval_batch_size=32, bucket_batch_length=32,\n             bucket_max_length=256, bucket_min_length=8,\n             bucket_length_step=1.1, buckets=None):\n  \"\"\"\"\"\"\n  del target_names\n  # If bucketing is not specified, check if target shapes are variable.\n  cur_batch_size = batch_size if training else eval_batch_size\n  if buckets is None:\n    variable_target_shapes = False\n    target_shape = shapes[1]\n    for dim in target_shape:\n      if dim is None:\n        variable_target_shapes = True\n    tf.logging.info(\"Heuristically setting bucketing to %s based on shapes \"\n                    \"of target tensors.\" % variable_target_shapes)\n    if variable_target_shapes:\n      batch_size_per_token = cur_batch_size * bucket_batch_length\n      scheme = data_reader.batching_scheme(batch_size_per_token,\n                                           bucket_max_length,\n                                           bucket_min_length,\n                                           bucket_length_step,\n                                           drop_long_sequences=training)\n      buckets = (scheme[\"boundaries\"], scheme[\"batch_sizes\"])\n\n  if buckets:\n    tf.logging.info(\"Bucketing with buckets %s.\" % str(buckets))\n    def example_length(_, target):\n      return tf.shape(target)[0]\n    boundaries, batch_sizes = buckets\n    dataset = dataset.apply(tf.data.experimental.bucket_by_sequence_length(\n        example_length, boundaries, batch_sizes))\n  else:\n    dataset = dataset.padded_batch(cur_batch_size, shapes)\n  return dataset", "output": "Batching function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def keypoint_vflip(kp, rows, cols):\n    \"\"\"\"\"\"\n    x, y, angle, scale = kp\n    c = math.cos(angle)\n    s = math.sin(angle)\n    angle = math.atan2(-s, c)\n    return [x, (rows - 1) - y, angle, scale]", "output": "Flip a keypoint vertically around the x-axis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_django_admin(bin_env):\n    '''\n    \n    '''\n    if not bin_env:\n        if salt.utils.path.which('django-admin.py'):\n            return 'django-admin.py'\n        elif salt.utils.path.which('django-admin'):\n            return 'django-admin'\n        else:\n            raise salt.exceptions.CommandExecutionError(\n                    \"django-admin or django-admin.py not found on PATH\")\n\n    # try to get django-admin.py bin from env\n    if os.path.exists(os.path.join(bin_env, 'bin', 'django-admin.py')):\n        return os.path.join(bin_env, 'bin', 'django-admin.py')\n    return bin_env", "output": "Return the django admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_bokehjs(bokehjs_action, develop=False):\n    ''' \n\n    '''\n    print()\n    if develop:\n        print(\"Installed Bokeh for DEVELOPMENT:\")\n    else:\n        print(\"Installed Bokeh:\")\n    if bokehjs_action in ['built', 'installed']:\n        print(\"  - using %s built BokehJS from bokehjs/build\\n\" % (bright(yellow(\"NEWLY\")) if bokehjs_action=='built' else bright(yellow(\"PREVIOUSLY\"))))\n    else:\n        print(\"  - using %s BokehJS, located in 'bokeh.server.static'\\n\" % bright(yellow(\"PACKAGED\")))\n    print()", "output": "Print a useful report after setuptools output describing where and how\n    BokehJS is installed.\n\n    Args:\n        bokehjs_action (str) : one of 'built', 'installed', or 'packaged'\n            how (or if) BokehJS was installed into the python source tree\n\n        develop (bool, optional) :\n            whether the command was for \"develop\" mode (default: False)\n\n    Returns:\n        None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xmoe_tr_dense_2k():\n  \"\"\"\n  \"\"\"\n  hparams = mtf_transformer2.mtf_bitransformer_base()\n  hparams.encoder_layers = [\"self_att\", \"drd\"] * 4\n  hparams.decoder_layers = [\"self_att\", \"enc_att\", \"drd\"] * 4\n  hparams.batch_size = 64\n  hparams.shared_embedding_and_softmax_weights = True\n  hparams.mesh_shape = \"batch:8\"\n  return hparams", "output": "Series of architectural experiments on Translation.\n\n  # run on 8-core setup\n\n  119M params, einsum=0.95e13\n\n  Returns:\n    a hparams", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explore(self, title=None):\n        \"\"\"\n        \n        \"\"\"\n\n        import sys\n        import os\n\n        if sys.platform != 'darwin' and sys.platform != 'linux2' and sys.platform != 'linux':\n            raise NotImplementedError('Visualization is currently supported only on macOS and Linux.')\n\n        path_to_client = _get_client_app_path()\n\n        if title is None:\n            title = \"\"\n        self.__proxy__.explore(path_to_client, title)", "output": "Explore the SFrame in an interactive GUI. Opens a new app window.\n\n        Parameters\n        ----------\n        title : str\n            The plot title to show for the resulting visualization. Defaults to None.\n            If the title is None, a default title will be provided.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        Suppose 'sf' is an SFrame, we can view it using:\n\n        >>> sf.explore()\n\n        To override the default plot title and axis labels:\n\n        >>> sf.explore(title=\"My Plot Title\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_datetime64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    \n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, 'base', None) == _NS_DTYPE", "output": "Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_sparse(arr, kind='block', fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    \n    \"\"\"\n\n    arr = _sanitize_values(arr)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value", "output": "Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fixed_crop(src, x0, y0, w, h, size=None, interpolation=cv2.INTER_CUBIC):\n    \"\"\"\"\"\"\n    out = mx.nd.crop(src, begin=(y0, x0, 0), end=(y0+h, x0+w, int(src.shape[2])))\n    if size is not None and (w, h) != size:\n        out = resize(out, size, interpolation=interpolation)\n    return out", "output": "Crop src at fixed location, and (optionally) resize it to size", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def debug_print(*message):\r\n    \"\"\"\"\"\"\r\n    warnings.warn(\"debug_print is deprecated; use the logging module instead.\")\r\n    if get_debug_level():\r\n        ss = STDOUT\r\n        if PY3:\r\n            # This is needed after restarting and using debug_print\r\n            for m in message:\r\n                ss.buffer.write(str(m).encode('utf-8'))\r\n            print('', file=ss)\r\n        else:\r\n            print(*message, file=ss)", "output": "Output debug messages to stdout", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def denyMethodWithConditions(self, verb, resource, conditions):\n        \"\"\"\"\"\"\n        self._addMethod(\"Deny\", verb, resource, conditions)", "output": "Adds an API Gateway method (Http verb + Resource path) to the list of denied\n        methods and includes a condition for the policy statement. More on AWS policy\n        conditions here: http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#Condition", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _config_list(conf_tuples=None, only_net=False, **kwargs):\n    '''\n    \n\n    '''\n    # explicit cast\n    only_net = bool(only_net)\n    if not conf_tuples:\n        conf_tuples = []\n    kwargs = copy.deepcopy(kwargs)\n    ret = []\n    if not only_net:\n        default_data = _get_lxc_default_data(**kwargs)\n        for k, val in six.iteritems(default_data):\n            ret.append({k: val})\n    net_datas = _network_conf(conf_tuples=conf_tuples, **kwargs)\n    ret.extend(net_datas)\n    return ret", "output": "Return a list of dicts from the salt level configurations\n\n    conf_tuples\n        _LXCConfig compatible list of entries which can contain\n\n            - string line\n            - tuple (lxc config param,value)\n            - dict of one entry: {lxc config param: value)\n\n    only_net\n        by default we add to the tuples a reflection of both\n        the real config if avalaible and a certain amount of\n        default values like the cpu parameters, the memory\n        and etc.\n        On the other hand, we also no matter the case reflect\n        the network configuration computed from the actual config if\n        available and given values.\n        if no_default_loads is set, we will only\n        reflect the network configuration back to the conf tuples\n        list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validNormalizeAttributeValue(self, elem, name, value):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlValidNormalizeAttributeValue(self._o, elem__o, name, value)\n        return ret", "output": "Does the validation related extra step of the normalization\n          of attribute values:  If the declared value is not CDATA,\n          then the XML processor must further process the normalized\n          attribute value by discarding any leading and trailing\n          space (#x20) characters, and by replacing sequences of\n           space (#x20) characters by single space (#x20) character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def template_click_option(include_build=True):\n    \"\"\"\n    \n    \"\"\"\n    return click.option('--template', '-t',\n                        default=_TEMPLATE_OPTION_DEFAULT_VALUE,\n                        type=click.Path(),\n                        envvar=\"SAM_TEMPLATE_FILE\",\n                        callback=partial(get_or_default_template_file_name, include_build=include_build),\n                        show_default=True,\n                        help=\"AWS SAM template file\")", "output": "Click Option for template option", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_value(key, value=None):\n    '''\n    \n    '''\n    if not isinstance(key, six.string_types):\n        log.debug('%s: \\'key\\' argument is not a string type: \\'%s\\'', __name__, key)\n        return False\n    try:\n        cur_val = os.environ[key]\n        if value is not None:\n            if cur_val == value:\n                return True\n            else:\n                return False\n    except KeyError:\n        return False\n    return True", "output": "Determine whether the key exists in the current salt process\n    environment dictionary. Optionally compare the current value\n    of the environment against the supplied value string.\n\n    key\n        Must be a string. Used as key for environment lookup.\n\n    value:\n        Optional. If key exists in the environment, compare the\n        current value with this value. Return True if they are equal.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' environ.has_value foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    \n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError('data is already tz-aware {inferred_tz}, unable to '\n                        'set specified tz: {tz}'\n                        .format(inferred_tz=inferred_tz, tz=tz))\n    return tz", "output": "If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_response(self):\n        \"\"\"\n        \n        \"\"\"\n        user_input = self.usr_input.get()\n        self.usr_input.delete(0, tk.END)\n\n        response = self.chatbot.get_response(user_input)\n\n        self.conversation['state'] = 'normal'\n        self.conversation.insert(\n            tk.END, \"Human: \" + user_input + \"\\n\" + \"ChatBot: \" + str(response.text) + \"\\n\"\n        )\n        self.conversation['state'] = 'disabled'\n\n        time.sleep(0.5)", "output": "Get a response from the chatbot and display it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Removing datastore \\'%s\\'', datastore)\n    target = _get_proxy_target(service_instance)\n    datastores = salt.utils.vmware.get_datastores(\n        service_instance,\n        reference=target,\n        datastore_names=[datastore])\n    if not datastores:\n        raise VMwareObjectRetrievalError(\n            'Datastore \\'{0}\\' was not found'.format(datastore))\n    if len(datastores) > 1:\n        raise VMwareObjectRetrievalError(\n            'Multiple datastores \\'{0}\\' were found'.format(datastore))\n    salt.utils.vmware.remove_datastore(service_instance, datastores[0])\n    return True", "output": "Removes a datastore. If multiple datastores an error is raised.\n\n    datastore\n        Datastore name\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter/ESXi host.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.remove_datastore ds_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_value(self, orig_name, new_name):\r\n        \"\"\"\"\"\"\r\n        self.shellwidget.copy_value(orig_name, new_name)\r\n        self.shellwidget.refresh_namespacebrowser()", "output": "Copy value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def restore(self):\n        \"\"\"\"\"\"\n        current, self.nlp.pipeline = self.nlp.pipeline, self.original_pipeline\n        unexpected = [name for name, pipe in current if not self.nlp.has_pipe(name)]\n        if unexpected:\n            # Don't change the pipeline if we're raising an error.\n            self.nlp.pipeline = current\n            raise ValueError(Errors.E008.format(names=unexpected))\n        self[:] = []", "output": "Restore the pipeline to its state when DisabledPipes was created.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def logical_and(lhs, rhs):\n    \"\"\"\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_logical_and,\n        lambda x, y: 1 if x and y else 0,\n        _internal._logical_and_scalar,\n        None)", "output": "Returns the result of element-wise **logical and** comparison\n    operation with broadcasting.\n\n    For each element in input arrays, return 1(true) if lhs elements and rhs elements\n    are true, otherwise return 0(false).\n\n    Equivalent to ``lhs and rhs`` and ``mx.nd.broadcast_logical_and(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First input of the function.\n    rhs : scalar or mxnet.ndarray.array\n         Second input of the function. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        Output array of boolean values.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, 1).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def done(self):\n        \"\"\"\n        \"\"\"\n        return self._exception != self._SENTINEL or self._result != self._SENTINEL", "output": "Return True the future is done, False otherwise.\n\n        This still returns True in failure cases; checking :meth:`result` or\n        :meth:`exception` is the canonical way to assess success or failure.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fit_transform(self, data):\n        \"\"\"\n        \n\n        \"\"\"\n        if not self._transformers:\n            return self._preprocess(data)\n\n        transformed_data = self._preprocess(data)\n        final_step = self._transformers[-1]\n        return final_step[1].fit_transform(transformed_data)", "output": "First fit a transformer using the SFrame `data` and then return a transformed\n        version of `data`.\n\n        Parameters\n        ----------\n        data : SFrame\n            The data used to fit the transformer. The same data is then also\n            transformed.\n\n        Returns\n        -------\n        Transformed SFrame.\n\n        See Also\n        --------\n        transform, fit_transform\n\n        Notes\n        -----\n        - The default implementation calls fit() and then calls transform().\n          You may override this function with a more efficient implementation.\"\n\n        Examples\n        --------\n        .. sourcecode:: python\n\n          >> transformed_sf = chain.fit_transform(sf)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(self, name, value):\n        \"\"\"\"\"\"\n        name = self._convert_name(name)\n\n        if ((name in _ELEMENTSFIELD or name == 'Platform') and\n            not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [v.strip() for v in value.split(',')]\n            else:\n                value = []\n        elif (name in _LISTFIELDS and\n              not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [value]\n            else:\n                value = []\n\n        if logger.isEnabledFor(logging.WARNING):\n            project_name = self['Name']\n\n            scheme = get_scheme(self.scheme)\n            if name in _PREDICATE_FIELDS and value is not None:\n                for v in value:\n                    # check that the values are valid\n                    if not scheme.is_valid_matcher(v.split(';')[0]):\n                        logger.warning(\n                            \"'%s': '%s' is not valid (field '%s')\",\n                            project_name, v, name)\n            # FIXME this rejects UNKNOWN, is that right?\n            elif name in _VERSIONS_FIELDS and value is not None:\n                if not scheme.is_valid_constraint_list(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n            elif name in _VERSION_FIELDS and value is not None:\n                if not scheme.is_valid_version(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n\n        if name in _UNICODEFIELDS:\n            if name == 'Description':\n                value = self._remove_line_prefix(value)\n\n        self._fields[name] = value", "output": "Control then set a metadata field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _compute_edge_transforms(node_states,\n                             depth,\n                             num_transforms,\n                             name=\"transform\"):\n  \"\"\"\n  \"\"\"\n  node_shapes = common_layers.shape_list(node_states)\n  x = common_layers.dense(\n      node_states,\n      depth * num_transforms,\n      use_bias=False,\n      name=name)\n\n  batch = node_shapes[0]  # B.\n  length = node_shapes[1]  # N.\n\n  # Making the fourth dimension explicit by separating the vectors of size\n  # K*T (in k) and V*T (in v) into two-dimensional matrices with shape [K, T]\n  # (in k) and [V, T] in v.\n  #\n  x = tf.reshape(x, [batch, length, num_transforms, depth])\n\n  # Flatten out the fourth dimension.\n  x = tf.reshape(x, [batch, length * num_transforms, depth])\n\n  return x", "output": "Helper function that computes transformation for keys and values.\n\n  Let B be the number of batches.\n  Let N be the number of nodes in the graph.\n  Let D be the size of the node hidden states.\n  Let K be the size of the attention keys/queries (total_key_depth).\n  Let V be the size of the attention values (total_value_depth).\n  Let T be the total number of transforms (num_transforms).\n\n  Computes the transforms for keys or values for attention.\n  * For each node N_j and edge type t, a key K_jt of size K is computed. When an\n    edge of type t goes from node N_j to any other node, K_jt is the key that is\n    in the attention process.\n  * For each node N_j and edge type t, a value V_jt of size V is computed. When\n    an edge of type t goes from node N_j to node N_i, Attention(Q_i, K_jt)\n    produces a weight w_ijt. The message sent along this edge is w_ijt * V_jt.\n\n  Args:\n    node_states: A tensor of shape [B, L, D]\n    depth: An integer (K or V)\n    num_transforms: An integer (T),\n    name: A name for the function\n\n  Returns:\n    x: A The attention keys or values for each node and edge type\n      (shape [B, N*T, K or V])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def context_menu_requested(self, event):\n        \"\"\"\"\"\"\n        if self.fig:\n            pos = QPoint(event.x(), event.y())\n            context_menu = QMenu(self)\n            context_menu.addAction(ima.icon('editcopy'), \"Copy Image\",\n                                   self.copy_figure,\n                                   QKeySequence(\n                                       get_shortcut('plots', 'copy')))\n            context_menu.popup(self.mapToGlobal(pos))", "output": "Popup context menu.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _string_width(string, *, _IS_ASCII=_IS_ASCII):\n    \"\"\"\"\"\"\n    match = _IS_ASCII.match(string)\n    if match:\n        return match.endpos\n\n    UNICODE_WIDE_CHAR_TYPE = 'WFA'\n    width = 0\n    func = unicodedata.east_asian_width\n    for char in string:\n        width += 2 if func(char) in UNICODE_WIDE_CHAR_TYPE else 1\n    return width", "output": "Returns string's width.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _equals(v1_indices, v1_values, v2_indices, v2_values):\n        \"\"\"\n        \n        \"\"\"\n        v1_size = len(v1_values)\n        v2_size = len(v2_values)\n        k1 = 0\n        k2 = 0\n        all_equal = True\n        while all_equal:\n            while k1 < v1_size and v1_values[k1] == 0:\n                k1 += 1\n            while k2 < v2_size and v2_values[k2] == 0:\n                k2 += 1\n\n            if k1 >= v1_size or k2 >= v2_size:\n                return k1 >= v1_size and k2 >= v2_size\n\n            all_equal = v1_indices[k1] == v2_indices[k2] and v1_values[k1] == v2_values[k2]\n            k1 += 1\n            k2 += 1\n        return all_equal", "output": "Check equality between sparse/dense vectors,\n        v1_indices and v2_indices assume to be strictly increasing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transform(self, X):\n        \"\"\"\n        \"\"\"\n        if isinstance(X, pd.DataFrame):\n            X_transformed = X[self.feat_list].values\n        elif isinstance(X, np.ndarray):\n            X_transformed = X[:, self.feat_list_idx]\n\n        return X_transformed.astype(np.float64)", "output": "Make subset after fit\n\n        Parameters\n        ----------\n        X: numpy ndarray, {n_samples, n_features}\n            New data, where n_samples is the number of samples and n_features is the number of features.\n\n        Returns\n        -------\n        X_transformed: array-like, shape (n_samples, n_features + 1) or (n_samples, n_features + 1 + n_classes) for classifier with predict_proba attribute\n            The transformed feature set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop(self, wait=True):\n        ''' \n\n        '''\n        assert not self._stopped, \"Already stopped\"\n        self._stopped = True\n        self._tornado.stop(wait)\n        self._http.stop()", "output": "Stop the Bokeh Server.\n\n        This stops and removes all Bokeh Server ``IOLoop`` callbacks, as well\n        as stops the ``HTTPServer`` that this instance was configured with.\n\n        Args:\n            fast (bool):\n                Whether to wait for orderly cleanup (default: True)\n\n        Returns:\n            None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_users(root=None):\n    '''\n    \n    '''\n    if root is not None:\n        getspall = functools.partial(_getspall, root=root)\n    else:\n        getspall = functools.partial(spwd.getspall)\n\n    return sorted([user.sp_namp if hasattr(user, 'sp_namp') else user.sp_nam\n                   for user in getspall()])", "output": ".. versionadded:: 2018.3.0\n\n    Return a list of all shadow users\n\n    root\n        Directory to chroot into\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' shadow.list_users", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_user(username, **kwargs):\n    '''\n    \n    '''\n    command = 'show run | include \"^username {0} password 5 \"'.format(username)\n    info = ''\n    info = show(command, **kwargs)\n    if isinstance(info, list):\n        info = info[0]\n    return info", "output": "Get username line from switch.\n\n    .. code-block: bash\n\n        salt '*' nxos.cmd get_user username=admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authorize_url(self, state=None):\n        '''\n        \n        '''\n        if not self._client_id:\n            raise ApiAuthError('No client id.')\n        kw = dict(client_id=self._client_id)\n        if self._redirect_uri:\n            kw['redirect_uri'] = self._redirect_uri\n        if self._scope:\n            kw['scope'] = self._scope\n        if state:\n            kw['state'] = state\n        return 'https://github.com/login/oauth/authorize?%s' % _encode_params(kw)", "output": "Generate authorize_url.\n\n        >>> GitHub(client_id='3ebf94c5776d565bcf75').authorize_url()\n        'https://github.com/login/oauth/authorize?client_id=3ebf94c5776d565bcf75'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def classify(self, dataset, verbose=True, batch_size=64):\n        \"\"\"\n        \n        \"\"\"\n        prob_vector = self.predict(dataset, output_type='probability_vector',\n                                   verbose=verbose, batch_size=batch_size)\n        id_to_label = self._id_to_class_label\n\n        return _tc.SFrame({\n            'class': prob_vector.apply(lambda v: id_to_label[_np.argmax(v)]),\n            'probability': prob_vector.apply(_np.max)\n        })", "output": "Return the classification for each examples in the ``dataset``.\n        The output SFrame contains predicted class labels and its probability.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | dict\n            The audio data to be classified.\n            If dataset is an SFrame, it must have a column with the same name as\n            the feature used for model training, but does not require a target\n            column. Additional columns are ignored.\n\n        verbose : bool, optional\n            If True, prints progress updates and model details.\n\n        batch_size : int, optional\n            If you are getting memory errors, try decreasing this value. If you\n            have a powerful computer, increasing this value may improve performance.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions, both class labels and probabilities.\n\n        See Also\n        ----------\n        create, evaluate, predict\n\n        Examples\n        ----------\n        >>> classes = model.classify(data)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_params(self, **params):\n        \"\"\"\n        \"\"\"\n        if not params:\n            # Simple optimization to gain speed (inspect is slow)\n            return self\n\n        for key, value in params.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n            else:\n                self.kwargs[key] = value\n\n        return self", "output": "Set the parameters of this estimator.\n        Modification of the sklearn method to allow unknown kwargs. This allows using\n        the full range of xgboost parameters that are not defined as member variables\n        in sklearn grid search.\n        Returns\n        -------\n        self", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def crop_or_pad_to(height, width):\n    \"\"\"\n    \"\"\"\n    def inner(t_image):\n        return tf.image.resize_image_with_crop_or_pad(t_image, height, width)\n    return inner", "output": "Ensures the specified spatial shape by either padding or cropping.\n    Meant to be used as a last transform for architectures insisting on a specific\n    spatial shape of their inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_schema(self, schema, field, value):\n        \"\"\"  \"\"\"\n        if schema is None:\n            return\n\n        if isinstance(value, Sequence) and not isinstance(value, _str_type):\n            self.__validate_schema_sequence(field, schema, value)\n        elif isinstance(value, Mapping):\n            self.__validate_schema_mapping(field, schema, value)", "output": "{'type': ['dict', 'string'],\n             'anyof': [{'validator': 'schema'},\n                       {'validator': 'bulk_schema'}]}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_lb(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_lb function must be called with -f or --function.'\n        )\n    if not kwargs or 'name' not in kwargs:\n        log.error(\n            'Must specify name of load-balancer.'\n        )\n        return False\n\n    lb_conn = get_lb_conn(get_conn())\n    return _expand_balancer(lb_conn.get_balancer(kwargs['name']))", "output": "Show the details of an existing load-balancer.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_lb gce name=lb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def json2space(x, oldy=None, name=NodeType.Root.value):\n    \"\"\"\n    \"\"\"\n    y = list()\n    if isinstance(x, dict):\n        if NodeType.Type.value in x.keys():\n            _type = x[NodeType.Type.value]\n            name = name + '-' + _type\n            if _type == 'choice':\n                if oldy != None:\n                    _index = oldy[NodeType.Index.value]\n                    y += json2space(x[NodeType.Value.value][_index],\n                                    oldy[NodeType.Value.value], name=name+'[%d]' % _index)\n                else:\n                    y += json2space(x[NodeType.Value.value], None, name=name)\n            y.append(name)\n        else:\n            for key in x.keys():\n                y += json2space(x[key], (oldy[key] if oldy !=\n                                         None else None), name+\"[%s]\" % str(key))\n    elif isinstance(x, list):\n        for i, x_i in enumerate(x):\n            y += json2space(x_i, (oldy[i] if oldy !=\n                                  None else None), name+\"[%d]\" % i)\n    else:\n        pass\n    return y", "output": "Change search space from json format to hyperopt format", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main_target_usage_requirements (self, specification, project):\n        \"\"\" \n        \"\"\"\n        assert is_iterable_typed(specification, basestring)\n        assert isinstance(project, ProjectTarget)\n        project_usage_requirements = project.get ('usage-requirements')\n\n        # We don't use 'refine-from-user-input' because I'm not sure if:\n        # - removing of parent's usage requirements makes sense\n        # - refining of usage requirements is not needed, since usage requirements\n        #   are always free.\n        usage_requirements = property_set.create_from_user_input(\n            specification, project.project_module(), project.get(\"location\"))\n\n        return project_usage_requirements.add (usage_requirements)", "output": "Returns the use requirement to use when declaraing a main target,\n            which are obtained by\n            - translating all specified property paths, and\n            - adding project's usage requirements\n            specification:  Use-properties explicitly specified for a main target\n            project:        Project where the main target is to be declared", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def signature(self):\n        \"\"\"\"\"\"\n        if self.usage is not None:\n            return self.usage\n\n\n        params = self.clean_params\n        if not params:\n            return ''\n\n        result = []\n        for name, param in params.items():\n            greedy = isinstance(param.annotation, converters._Greedy)\n\n            if param.default is not param.empty:\n                # We don't want None or '' to trigger the [name=value] case and instead it should\n                # do [name] since [name=None] or [name=] are not exactly useful for the user.\n                should_print = param.default if isinstance(param.default, str) else param.default is not None\n                if should_print:\n                    result.append('[%s=%s]' % (name, param.default) if not greedy else\n                                  '[%s=%s]...' % (name, param.default))\n                    continue\n                else:\n                    result.append('[%s]' % name)\n\n            elif param.kind == param.VAR_POSITIONAL:\n                result.append('[%s...]' % name)\n            elif greedy:\n                result.append('[%s]...' % name)\n            elif self._is_typing_optional(param.annotation):\n                result.append('[%s]' % name)\n            else:\n                result.append('<%s>' % name)\n\n        return ' '.join(result)", "output": "Returns a POSIX-like signature useful for help command output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_dense_tensor(self, inputs, weight_collections=None, trainable=None):\n    \"\"\"\"\"\"\n    del weight_collections\n    text_batch = tf.reshape(inputs.get(self), shape=[-1])\n    m = module.Module(self.module_spec, trainable=self.trainable and trainable)\n    return m(text_batch)", "output": "Returns a `Tensor`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join(self, timeout: Union[float, datetime.timedelta] = None) -> Awaitable[None]:\n        \"\"\"\n        \"\"\"\n        return self._finished.wait(timeout)", "output": "Block until all items in the queue are processed.\n\n        Returns an awaitable, which raises `tornado.util.TimeoutError` after a\n        timeout.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def createURLParserCtxt(filename, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlCreateURLParserCtxt(filename, options)\n    if ret is None:raise parserError('xmlCreateURLParserCtxt() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a parser context for a file or URL content.\n      Automatic support for ZLIB/Compress compressed document is\n      provided by default if found at compile-time and for file\n       accesses", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _log_error_and_abort(ret, obj):\n    '''\n    \n    '''\n    ret['result'] = False\n    ret['abort'] = True\n    if 'error' in obj:\n        ret['comment'] = '{0}'.format(obj.get('error'))\n    return ret", "output": "helper function to update errors in the return structure", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_instances(name, lifecycle_state=\"InService\", health_status=\"Healthy\",\n                  attribute=\"private_ip_address\", attributes=None, region=None,\n                  key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n    ec2_conn = _get_ec2_conn(region=region, key=key, keyid=keyid, profile=profile)\n    retries = 30\n    while True:\n        try:\n            asgs = conn.get_all_groups(names=[name])\n            break\n        except boto.exception.BotoServerError as e:\n            if retries and e.code == 'Throttling':\n                log.debug('Throttled by AWS API, retrying in 5 seconds...')\n                time.sleep(5)\n                retries -= 1\n                continue\n            log.error(e)\n            return False\n    if len(asgs) != 1:\n        log.debug(\"name '%s' returns multiple ASGs: %s\", name, [asg.name for asg in asgs])\n        return False\n    asg = asgs[0]\n    instance_ids = []\n    # match lifecycle_state and health_status\n    for i in asg.instances:\n        if lifecycle_state is not None and i.lifecycle_state != lifecycle_state:\n            continue\n        if health_status is not None and i.health_status != health_status:\n            continue\n        instance_ids.append(i.instance_id)\n    # get full instance info, so that we can return the attribute\n    instances = ec2_conn.get_only_instances(instance_ids=instance_ids)\n    if attributes:\n        return [[_convert_attribute(instance, attr) for attr in attributes] for instance in instances]\n    else:\n        # properly handle case when not all instances have the requested attribute\n        return [_convert_attribute(instance, attribute) for instance in instances if getattr(instance, attribute)]", "output": "return attribute of all instances in the named autoscale group.\n\n    CLI example::\n\n        salt-call boto_asg.get_instances my_autoscale_group_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shell_split(text):\r\n    \"\"\"\r\n    \r\n    \"\"\"\r\n    assert is_text_string(text)  # in case a QString is passed...\r\n    pattern = r'(\\s+|(?<!\\\\)\".*?(?<!\\\\)\"|(?<!\\\\)\\'.*?(?<!\\\\)\\')'\r\n    out = []\r\n    for token in re.split(pattern, text):\r\n        if token.strip():\r\n            out.append(token.strip('\"').strip(\"'\"))\r\n    return out", "output": "Split the string `text` using shell-like syntax\r\n\r\n    This avoids breaking single/double-quoted strings (e.g. containing\r\n    strings with spaces). This function is almost equivalent to the shlex.split\r\n    function (see standard library `shlex`) except that it is supporting\r\n    unicode strings (shlex does not support unicode until Python 2.7.3).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def random_chars(number):\n    \"\"\"\"\"\"\n    char_map = {\n        k: v for k, v in chars.CHARS.iteritems()\n        if not format_character(k).startswith('\\\\x')\n    }\n\n    char_num = sum(char_map.values())\n    return (\n        format_character(nth_char(char_map, random.randint(0, char_num - 1)))\n        for _ in xrange(0, number)\n    )", "output": "Generate random characters", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_services(rule):\n    '''\n    \n    '''\n    parser = argparse.ArgumentParser()\n    rules = shlex.split(rule)\n    rules.pop(0)\n    parser.add_argument('--disabled', dest='disabled', action='store')\n    parser.add_argument('--enabled', dest='enabled', action='store')\n\n    args = clean_args(vars(parser.parse_args(rules)))\n    parser = None\n    return args", "output": "Parse the services line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def summary(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.hasSummary:\n            return LinearRegressionTrainingSummary(super(LinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "output": "Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exception(self, timeout=None):\n        \"\"\"\n        \"\"\"\n        # Wait until the future is done.\n        if not self._completed.wait(timeout=timeout):\n            raise exceptions.TimeoutError(\"Timed out waiting for result.\")\n\n        # If the batch completed successfully, this should return None.\n        if self._result != self._SENTINEL:\n            return None\n\n        # Okay, this batch had an error; this should return it.\n        return self._exception", "output": "Return the exception raised by the call, if any.\n\n        This blocks until the message has successfully been published, and\n        returns the exception. If the call succeeded, return None.\n\n        Args:\n            timeout (Union[int, float]): The number of seconds before this call\n                times out and raises TimeoutError.\n\n        Raises:\n            TimeoutError: If the request times out.\n\n        Returns:\n            Exception: The exception raised by the call, if any.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema_get(name, profile=None):\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    schema_props = {}\n    for prop in g_client.schemas.get(name).properties:\n        schema_props[prop.name] = prop.description\n    log.debug(\n        'Properties of schema %s:\\n%s',\n        name, pprint.PrettyPrinter(indent=4).pformat(schema_props)\n    )\n    return {name: schema_props}", "output": "Known valid names of schemas are:\n      - image\n      - images\n      - member\n      - members\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.schema_get name=f16-jeos", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process(self, processor:PreProcessors=None):\n        \"\"\n        if processor is not None: self.processor = processor\n        self.processor = listify(self.processor)\n        for p in self.processor: p.process(self)\n        return self", "output": "Apply `processor` or `self.processor` to `self`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def relabel(self, change):\n        \"\"\n        class_new,class_old,file_path = change.new,change.old,change.owner.file_path\n        fp = Path(file_path)\n        parent = fp.parents[1]\n        self._csv_dict[fp] = class_new", "output": "Relabel images by moving from parent dir with old label `class_old` to parent dir with new label `class_new`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def view(self, dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        return self._constructor(self._values.view(dtype),\n                                 index=self.index).__finalize__(self)", "output": "Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, statement):\n        \"\"\"\n        \n        \"\"\"\n        Statement = self.get_model('statement')\n        Tag = self.get_model('tag')\n\n        if hasattr(statement, 'id'):\n            statement.save()\n        else:\n            statement = Statement.objects.create(\n                text=statement.text,\n                search_text=self.tagger.get_bigram_pair_string(statement.text),\n                conversation=statement.conversation,\n                in_response_to=statement.in_response_to,\n                search_in_response_to=self.tagger.get_bigram_pair_string(statement.in_response_to),\n                created_at=statement.created_at\n            )\n\n        for _tag in statement.tags.all():\n            tag, _ = Tag.objects.get_or_create(name=_tag)\n\n            statement.tags.add(tag)\n\n        return statement", "output": "Update the provided statement.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def choose_trial_to_run(self, trial_runner):\n        \"\"\"\n        \"\"\"\n\n        candidates = []\n        for trial in trial_runner.get_trials():\n            if trial.status in [Trial.PENDING, Trial.PAUSED] and \\\n                    trial_runner.has_resources(trial.resources):\n                candidates.append(trial)\n        candidates.sort(\n            key=lambda trial: self._trial_state[trial].last_perturbation_time)\n        return candidates[0] if candidates else None", "output": "Ensures all trials get fair share of time (as defined by time_attr).\n\n        This enables the PBT scheduler to support a greater number of\n        concurrent trials than can fit in the cluster at any given time.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def info_installed(*names, **kwargs):\n    '''\n    \n    '''\n    all_versions = kwargs.get('all_versions', False)\n    ret = dict()\n    for pkg_name, pkgs_nfo in __salt__['lowpkg.info'](*names, **kwargs).items():\n        pkg_nfo = pkgs_nfo if all_versions else [pkgs_nfo]\n        for _nfo in pkg_nfo:\n            t_nfo = dict()\n            # Translate dpkg-specific keys to a common structure\n            for key, value in _nfo.items():\n                if key == 'source_rpm':\n                    t_nfo['source'] = value\n                else:\n                    t_nfo[key] = value\n            if not all_versions:\n                ret[pkg_name] = t_nfo\n            else:\n                ret.setdefault(pkg_name, []).append(t_nfo)\n    return ret", "output": ".. versionadded:: 2015.8.1\n\n    Return the information of the named package(s), installed on the system.\n\n    :param all_versions:\n        Include information for all versions of the packages installed on the minion.\n\n    CLI example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.info_installed <package1>\n        salt '*' pkg.info_installed <package1> <package2> <package3> ...\n        salt '*' pkg.info_installed <package1> <package2> <package3> all_versions=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_optional_arg_param(self, param_name, layer_index, blob_index):\n        \"\"\"\"\"\"\n        blobs = self.layers[layer_index].blobs\n        if blob_index < len(blobs):\n            self.add_arg_param(param_name, layer_index, blob_index)", "output": "Add an arg param. If there is no such param in .caffemodel fie, silently ignore it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        if self.seq is not None and self.shuffle:\n            random.shuffle(self.seq)\n        if self.last_batch_handle != 'roll_over' or \\\n            self._cache_data is None:\n            if self.imgrec is not None:\n                self.imgrec.reset()\n            self.cur = 0\n            if self._allow_read is False:\n                self._allow_read = True", "output": "Resets the iterator to the beginning of the data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def handle(self, message, connection):\n        ''' \n\n        '''\n\n        handler = self._handlers.get((message.msgtype, message.revision))\n\n        if handler is None:\n            handler = self._handlers.get(message.msgtype)\n\n        if handler is None:\n            raise ProtocolError(\"%s not expected on server\" % message)\n\n        try:\n            work = yield handler(message, connection)\n        except Exception as e:\n            log.error(\"error handling message %r: %r\", message, e)\n            log.debug(\"  message header %r content %r\", message.header, message.content, exc_info=1)\n            work = connection.error(message, repr(e))\n        raise gen.Return(work)", "output": "Delegate a received message to the appropriate handler.\n\n        Args:\n            message (Message) :\n                The message that was receive that needs to be handled\n\n            connection (ServerConnection) :\n                The connection that received this message\n\n        Raises:\n            ProtocolError", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_internet_gateway(internet_gateway_name=None, vpc_id=None,\n                            vpc_name=None, tags=None, region=None, key=None,\n                            keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        if vpc_id or vpc_name:\n            vpc_id = check_vpc(vpc_id, vpc_name, region, key, keyid, profile)\n            if not vpc_id:\n                return {'created': False,\n                        'error': {'message': 'VPC {0} does not exist.'.format(vpc_name or vpc_id)}}\n\n        r = _create_resource('internet_gateway', name=internet_gateway_name,\n                             tags=tags, region=region, key=key, keyid=keyid,\n                             profile=profile)\n        if r.get('created') and vpc_id:\n            conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n            conn.attach_internet_gateway(r['id'], vpc_id)\n            log.info(\n                'Attached internet gateway %s to VPC %s',\n                r['id'], vpc_name or vpc_id\n            )\n        return r\n    except BotoServerError as e:\n        return {'created': False, 'error': __utils__['boto.get_error'](e)}", "output": "Create an Internet Gateway, optionally attaching it to an existing VPC.\n\n    Returns the internet gateway id if the internet gateway was created and\n    returns False if the internet gateways was not created.\n\n    .. versionadded:: 2015.8.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_vpc.create_internet_gateway \\\\\n                internet_gateway_name=myigw vpc_name=myvpc", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def iter_find_files(directory, patterns, ignored=None):\n    \"\"\"\n\n    \"\"\"\n    if isinstance(patterns, basestring):\n        patterns = [patterns]\n    pats_re = re.compile('|'.join([fnmatch.translate(p) for p in patterns]))\n\n    if not ignored:\n        ignored = []\n    elif isinstance(ignored, basestring):\n        ignored = [ignored]\n    ign_re = re.compile('|'.join([fnmatch.translate(p) for p in ignored]))\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if pats_re.match(basename):\n                if ignored and ign_re.match(basename):\n                    continue\n                filename = os.path.join(root, basename)\n                yield filename\n    return", "output": "Returns a generator that yields file paths under a *directory*,\n    matching *patterns* using `glob`_ syntax (e.g., ``*.txt``). Also\n    supports *ignored* patterns.\n\n    Args:\n        directory (str): Path that serves as the root of the\n            search. Yielded paths will include this as a prefix.\n        patterns (str or list): A single pattern or list of\n            glob-formatted patterns to find under *directory*.\n        ignored (str or list): A single pattern or list of\n            glob-formatted patterns to ignore.\n\n    For example, finding Python files in the directory of this module:\n\n    >>> files = set(iter_find_files(os.path.dirname(__file__), '*.py'))\n\n    Or, Python files while ignoring emacs lockfiles:\n\n    >>> filenames = iter_find_files('.', '*.py', ignored='.#*')\n\n    .. _glob: https://en.wikipedia.org/wiki/Glob_%28programming%29", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mask_sigint():\n    \"\"\"\n    \n    \"\"\"\n    if is_main_thread():\n        sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)\n        yield True\n        signal.signal(signal.SIGINT, sigint_handler)\n    else:\n        yield False", "output": "Returns:\n        If called in main thread, returns a context where ``SIGINT`` is ignored, and yield True.\n        Otherwise yield False.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_sid_string(principal):\n    '''\n    \n    '''\n    # If None is passed, use the Universal Well-known SID \"Null SID\"\n    if principal is None:\n        principal = 'NULL SID'\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except TypeError:\n        # Not a PySID object\n        principal = get_sid(principal)\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except pywintypes.error:\n        log.exception('Invalid principal %s', principal)\n        raise CommandExecutionError('Invalid principal {0}'.format(principal))", "output": "Converts a PySID object to a string SID.\n\n    Args:\n\n        principal(str):\n            The principal to lookup the sid. Must be a PySID object.\n\n    Returns:\n        str: A string sid\n\n    Usage:\n\n    .. code-block:: python\n\n        # Get a PySID object\n        py_sid = salt.utils.win_dacl.get_sid('jsnuffy')\n\n        # Get the string version of the SID\n        salt.utils.win_dacl.get_sid_string(py_sid)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def absent(name):\n    '''\n    \n    '''\n\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n\n    try:\n        index = __salt__['elasticsearch.index_get'](index=name)\n        if index and name in index:\n            if __opts__['test']:\n                ret['comment'] = 'Index {0} will be removed'.format(name)\n                ret['changes']['old'] = index[name]\n                ret['result'] = None\n            else:\n                ret['result'] = __salt__['elasticsearch.index_delete'](index=name)\n                if ret['result']:\n                    ret['comment'] = 'Successfully removed index {0}'.format(name)\n                    ret['changes']['old'] = index[name]\n                else:\n                    ret['comment'] = 'Failed to remove index {0} for unknown reasons'.format(name)\n        else:\n            ret['comment'] = 'Index {0} is already absent'.format(name)\n    except Exception as err:\n        ret['result'] = False\n        ret['comment'] = six.text_type(err)\n\n    return ret", "output": "Ensure that the named index is absent.\n\n    name\n        Name of the index to remove", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init(complete_options=False, match_incomplete=None):\n    \"\"\"\n    \"\"\"\n    global _initialized\n    if not _initialized:\n        _patch()\n        completion_configuration.complete_options = complete_options\n        if match_incomplete is not None:\n            completion_configuration.match_incomplete = match_incomplete\n        _initialized = True", "output": "Initialize the enhanced click completion\n\n    Parameters\n    ----------\n    complete_options : bool\n        always complete the options, even when the user hasn't typed a first dash (Default value = False)\n    match_incomplete : func\n        a function with two parameters choice and incomplete. Must return True\n        if incomplete is a correct match for choice, False otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def spacetodepth(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs, {'blocksize':'block_size'})\n\n    return \"space_to_depth\", new_attrs, inputs", "output": "Rearranges blocks of spatial data into depth.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def with_rank_at_most(self, rank):\n        \"\"\"\n        \"\"\"\n        if self.ndims is not None and self.ndims > rank:\n            raise ValueError(\"Shape %s must have rank at most %d\" % (self, rank))\n        else:\n            return self", "output": "Returns a shape based on `self` with at most the given rank.\n\n        Args:\n          rank: An integer.\n\n        Returns:\n          A shape that is at least as specific as `self` with at most the given\n          rank.\n\n        Raises:\n          ValueError: If `self` does not represent a shape with at most the given\n            `rank`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def f_comb(self, pos, sample):\n        \"\"\"\n        \"\"\"\n        ret = 0\n        for i in range(self.effective_model_num):\n            model = self.effective_model[i]\n            y = self.predict_y(model, pos)\n            ret += sample[i] * y\n        return ret", "output": "return the value of the f_comb when epoch = pos\n\n        Parameters\n        ----------\n        pos: int\n            the epoch number of the position you want to predict\n        sample: list\n            sample is a (1 * NUM_OF_FUNCTIONS) matrix, representing{w1, w2, ... wk}\n\n        Returns\n        -------\n        int\n            The expected matrix at pos with all the active function's prediction", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def perform_iteration(self):\n        \"\"\"\"\"\"\n        stats = self.get_all_stats()\n\n        self.redis_client.publish(\n            self.redis_key,\n            jsonify_asdict(stats),\n        )", "output": "Get any changes to the log files and push updates to Redis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, filepath):\n    \"\"\"\n    \"\"\"\n    with tf.io.gfile.GFile(filepath, \"rb\") as f:\n      data = tfds.core.lazy_imports.scipy.io.loadmat(f)\n\n    # Maybe should shuffle ?\n\n    assert np.max(data[\"y\"]) <= 10  # Sanity check\n    assert np.min(data[\"y\"]) > 0\n\n    for image, label in zip(np.rollaxis(data[\"X\"], -1), data[\"y\"]):\n      yield {\n          \"image\": image,\n          \"label\": label % 10,  # digit 0 is saved as 0 (instead of 10)\n      }", "output": "Generate examples as dicts.\n\n    Args:\n      filepath: `str` path of the file to process.\n\n    Yields:\n      Generator yielding the next samples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def snapshots_delete(container, name, remote_addr=None,\n                     cert=None, key=None, verify_cert=True):\n    '''\n    \n    '''\n    cont = container_get(\n        container, remote_addr, cert, key, verify_cert, _raw=True\n    )\n\n    try:\n        for s in cont.snapshots.all():\n            if s.name == name:\n                s.delete()\n                return True\n    except pylxd.exceptions.LXDAPIException:\n        pass\n\n    return False", "output": "Delete a snapshot for a container\n\n    container :\n        The name of the container to get.\n\n    name :\n        The name of the snapshot.\n\n    remote_addr :\n        An URL to a remote server. The 'cert' and 'key' fields must also be\n        provided if 'remote_addr' is defined.\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Verify the ssl certificate.  Default: True\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.snapshots_delete test-container test-snapshot", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next(self) -> Future:\n        \"\"\"\n        \"\"\"\n        self._running_future = Future()\n\n        if self._finished:\n            self._return_result(self._finished.popleft())\n\n        return self._running_future", "output": "Returns a `.Future` that will yield the next available result.\n\n        Note that this `.Future` will not be the same object as any of\n        the inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def purge(name=None, slot=None, fromrepo=None, pkgs=None, **kwargs):\n    '''\n    \n    '''\n    ret = remove(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs)\n    ret.update(depclean(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs))\n    return ret", "output": ".. versionchanged:: 2015.8.12,2016.3.3,2016.11.0\n        On minions running systemd>=205, `systemd-run(1)`_ is now used to\n        isolate commands which modify installed packages from the\n        ``salt-minion`` daemon's control group. This is done to keep systemd\n        from killing any emerge commands spawned by Salt when the\n        ``salt-minion`` service is restarted. (see ``KillMode`` in the\n        `systemd.kill(5)`_ manpage for more information). If desired, usage of\n        `systemd-run(1)`_ can be suppressed by setting a :mod:`config option\n        <salt.modules.config.get>` called ``systemd.scope``, with a value of\n        ``False`` (no quotes).\n\n    .. _`systemd-run(1)`: https://www.freedesktop.org/software/systemd/man/systemd-run.html\n    .. _`systemd.kill(5)`: https://www.freedesktop.org/software/systemd/man/systemd.kill.html\n\n    Portage does not have a purge, this function calls remove followed\n    by depclean to emulate a purge process\n\n    name\n        The name of the package to be deleted.\n\n    slot\n        Restrict the remove to a specific slot. Ignored if name is None.\n\n    fromrepo\n        Restrict the remove to a specific slot. Ignored if ``name`` is None.\n\n    Multiple Package Options:\n\n    pkgs\n        Uninstall multiple packages. ``slot`` and ``fromrepo`` arguments are\n        ignored if this argument is present. Must be passed as a python list.\n\n    .. versionadded:: 0.16.0\n\n\n    Returns a dict containing the changes.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.purge <package name>\n        salt '*' pkg.purge <package name> slot=4.4\n        salt '*' pkg.purge <package1>,<package2>,<package3>\n        salt '*' pkg.purge pkgs='[\"foo\", \"bar\"]'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lambda_not_found_response(*args):\n        \"\"\"\n        \n        \"\"\"\n        response_data = jsonify(ServiceErrorResponses._NO_LAMBDA_INTEGRATION)\n        return make_response(response_data, ServiceErrorResponses.HTTP_STATUS_CODE_502)", "output": "Constructs a Flask Response for when a Lambda function is not found for an endpoint\n\n        :return: a Flask Response", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGSetSchema(self, reader):\n        \"\"\" \"\"\"\n        if reader is None: reader__o = None\n        else: reader__o = reader._o\n        ret = libxml2mod.xmlTextReaderRelaxNGSetSchema(reader__o, self._o)\n        return ret", "output": "Use RelaxNG to validate the document as it is processed.\n          Activation is only possible before the first Read(). if\n          @schema is None, then RelaxNG validation is desactivated. @\n          The @schema should not be freed until the reader is\n           deallocated or its use has been deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_ubuntu():\n    \"\"\"\"\"\"\n    if sys.platform.startswith('linux') and osp.isfile('/etc/lsb-release'):\n        release_info = open('/etc/lsb-release').read()\n        if 'Ubuntu' in release_info:\n            return True\n        else:\n            return False\n    else:\n        return False", "output": "Detect if we are running in an Ubuntu-based distribution", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def not_allowed(subset=None, show_ip=False, show_ipv4=None):\n    '''\n    \n    '''\n    show_ip = _show_ip_migration(show_ip, show_ipv4)\n    return list_not_state(subset=subset, show_ip=show_ip)", "output": ".. versionadded:: 2015.8.0\n    .. versionchanged:: 2019.2.0\n        The 'show_ipv4' argument has been renamed to 'show_ip' as it now\n        includes IPv6 addresses for IPv6-connected minions.\n\n    Print a list of all minions that are NOT up according to Salt's presence\n    detection (no commands will be sent)\n\n    subset : None\n        Pass in a CIDR range to filter minions by IP address.\n\n    show_ip : False\n        Also show the IP address each minion is connecting from.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run manage.not_allowed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def live_processes(self):\n        \"\"\"\n        \"\"\"\n        result = []\n        for process_type, process_infos in self.all_processes.items():\n            for process_info in process_infos:\n                if process_info.process.poll() is None:\n                    result.append((process_type, process_info.process))\n        return result", "output": "Return a list of the live processes.\n\n        Returns:\n            A list of the live processes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lovasz_softmax(probas, labels, only_present=False, per_image=False, ignore=None):\n    \"\"\"\n    \n    \"\"\"\n    if per_image:\n        loss = mean(lovasz_softmax_flat(*flatten_probas(prob.unsqueeze(0), lab.unsqueeze(0), ignore), only_present=only_present)\n                          for prob, lab in zip(probas, labels))\n    else:\n        loss = lovasz_softmax_flat(*flatten_probas(probas, labels, ignore), only_present=only_present)\n    return loss", "output": "Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      only_present: average only on classes present in ground truth\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def human_to_bytes(size):\n    '''\n    \n    '''\n    sbytes = size[:-1]\n    unit = size[-1]\n    if sbytes.isdigit():\n        sbytes = int(sbytes)\n        if unit == 'P':\n            sbytes *= 1125899906842624\n        elif unit == 'T':\n            sbytes *= 1099511627776\n        elif unit == 'G':\n            sbytes *= 1073741824\n        elif unit == 'M':\n            sbytes *= 1048576\n        else:\n            sbytes = 0\n    else:\n        sbytes = 0\n    return sbytes", "output": "Given a human-readable byte string (e.g. 2G, 30M),\n    return the number of bytes.  Will return 0 if the argument has\n    unexpected form.\n\n    .. versionadded:: 2018.3.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_trainable(name, trainable):\n    \"\"\"\n    \"\"\"\n\n    from ray.tune.trainable import Trainable\n    from ray.tune.function_runner import wrap_function\n\n    if isinstance(trainable, type):\n        logger.debug(\"Detected class for trainable.\")\n    elif isinstance(trainable, FunctionType):\n        logger.debug(\"Detected function for trainable.\")\n        trainable = wrap_function(trainable)\n    elif callable(trainable):\n        logger.warning(\n            \"Detected unknown callable for trainable. Converting to class.\")\n        trainable = wrap_function(trainable)\n\n    if not issubclass(trainable, Trainable):\n        raise TypeError(\"Second argument must be convertable to Trainable\",\n                        trainable)\n    _global_registry.register(TRAINABLE_CLASS, name, trainable)", "output": "Register a trainable function or class.\n\n    Args:\n        name (str): Name to register.\n        trainable (obj): Function or tune.Trainable class. Functions must\n            take (config, status_reporter) as arguments and will be\n            automatically converted into a class during registration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def returner(ret):\n    '''\n    \n    '''\n    log.debug('sqlite3 returner <returner> called with data: %s', ret)\n    conn = _get_conn(ret)\n    cur = conn.cursor()\n    sql = '''INSERT INTO salt_returns\n             (fun, jid, id, fun_args, date, full_ret, success)\n             VALUES (:fun, :jid, :id, :fun_args, :date, :full_ret, :success)'''\n    cur.execute(sql,\n                {'fun': ret['fun'],\n                 'jid': ret['jid'],\n                 'id': ret['id'],\n                 'fun_args': six.text_type(ret['fun_args']) if ret.get('fun_args') else None,\n                 'date': six.text_type(datetime.datetime.now()),\n                 'full_ret': salt.utils.json.dumps(ret['return']),\n                 'success': ret.get('success', '')})\n    _close_conn(conn)", "output": "Insert minion return data into the sqlite3 database", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_epoch_end(self, epoch, logs=None):\n        \"\"\"\n        \n        \"\"\"\n        if logs is None:\n            logs = dict()\n        logger.debug(logs)\n        nni.report_intermediate_result(logs[\"val_acc\"])", "output": "Run on end of each epoch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_user(user_cookie, db=DATABASE):\n    \"\"\"\n    \n    \"\"\"\n    collection = DATABASE.account\n\n    return [res for res in collection.find({'user_cookie': user_cookie}, {\"_id\": 0})]", "output": "get the user\n\n    Arguments:\n        user_cookie : str the unique cookie_id for a user\n    Keyword Arguments:\n        db: database for query\n\n    Returns:\n        list ---  [ACCOUNT]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_logits(self, x, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    outputs = self.fprop(x, **kwargs)\n    if self.O_LOGITS in outputs:\n      return outputs[self.O_LOGITS]\n    raise NotImplementedError(str(type(self)) + \"must implement `get_logits`\"\n                              \" or must define a \" + self.O_LOGITS +\n                              \" output in `fprop`\")", "output": ":param x: A symbolic representation (Tensor) of the network input\n    :return: A symbolic representation (Tensor) of the output logits\n    (i.e., the values fed as inputs to the softmax layer).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resource_group_get(name, **kwargs):\n    '''\n    \n\n    '''\n    result = {}\n    resconn = __utils__['azurearm.get_client']('resource', **kwargs)\n    try:\n        group = resconn.resource_groups.get(name)\n        result = group.as_dict()\n\n    except CloudError as exc:\n        __utils__['azurearm.log_cloud_error']('resource', str(exc), **kwargs)\n        result = {'error': str(exc)}\n\n    return result", "output": ".. versionadded:: 2019.2.0\n\n    Get a dictionary representing a resource group's properties.\n\n    :param name: The resource group name to get.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call azurearm_resource.resource_group_get testgroup", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_toolbar(self, title, object_name, iconsize=24):\r\n        \"\"\"\"\"\"\r\n        toolbar = self.addToolBar(title)\r\n        toolbar.setObjectName(object_name)\r\n        toolbar.setIconSize(QSize(iconsize, iconsize))\r\n        self.toolbarslist.append(toolbar)\r\n        return toolbar", "output": "Create and return toolbar with *title* and *object_name*", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(profile=\"splunk\"):\n    '''\n    \n    '''\n    client = _get_splunk(profile)\n    searches = [x['name'] for x in client.saved_searches]\n    return searches", "output": "List splunk searches (names only)\n\n    CLI Example:\n        splunk_search.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_full_slice(obj, l):\n    \"\"\"\n    \n    \"\"\"\n    return (isinstance(obj, slice) and obj.start == 0 and obj.stop == l and\n            obj.step is None)", "output": "We have a full length slice.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _read_info(info_path):\n  \"\"\"\"\"\"\n  if not tf.io.gfile.exists(info_path):\n    return None\n  with tf.io.gfile.GFile(info_path) as info_f:\n    return json.load(info_f)", "output": "Returns info dict or None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prep_acl_for_compare(ACL):\n    '''\n    \n    '''\n    ret = copy.deepcopy(ACL)\n    ret['Owner'] = _normalize_user(ret['Owner'])\n    for item in ret.get('Grants', ()):\n        item['Grantee'] = _normalize_user(item.get('Grantee'))\n    return ret", "output": "Prepares the ACL returned from the AWS API for comparison with a given one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        \"\"\"\n        \n        \"\"\"\n        connection = self.output().connect()\n        # kill any sessions other than ours and\n        # internal Redshift sessions (rdsdb)\n        query = (\"select pg_terminate_backend(process) \"\n                 \"from STV_SESSIONS \"\n                 \"where db_name=%s \"\n                 \"and user_name != 'rdsdb' \"\n                 \"and process != pg_backend_pid()\")\n        cursor = connection.cursor()\n        logger.info('Killing all open Redshift sessions for database: %s', self.database)\n        try:\n            cursor.execute(query, (self.database,))\n            cursor.close()\n            connection.commit()\n        except psycopg2.DatabaseError as e:\n            if e.message and 'EOF' in e.message:\n                # sometimes this operation kills the current session.\n                # rebuild the connection. Need to pause for 30-60 seconds\n                # before Redshift will allow us back in.\n                connection.close()\n                logger.info('Pausing %s seconds for Redshift to reset connection', self.connection_reset_wait_seconds)\n                time.sleep(self.connection_reset_wait_seconds)\n                logger.info('Reconnecting to Redshift')\n                connection = self.output().connect()\n            else:\n                raise\n\n        try:\n            self.output().touch(connection)\n            connection.commit()\n        finally:\n            connection.close()\n\n        logger.info('Done killing all open Redshift sessions for database: %s', self.database)", "output": "Kill any open Redshift sessions for the given database.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clone(zone, source, snapshot=None):\n    '''\n    \n    '''\n    ret = {'status': True}\n\n    ## install zone\n    res = __salt__['cmd.run_all']('zoneadm -z {zone} clone {snapshot}{source}'.format(\n        zone=zone,\n        source=source,\n        snapshot='-s {0} '.format(snapshot) if snapshot else '',\n    ))\n    ret['status'] = res['retcode'] == 0\n    ret['message'] = res['stdout'] if ret['status'] else res['stderr']\n    ret['message'] = ret['message'].replace('zoneadm: ', '')\n    if ret['message'] == '':\n        del ret['message']\n\n    return ret", "output": "Install a zone by copying an existing installed zone.\n\n    zone : string\n        name of the zone\n    source : string\n        zone to clone from\n    snapshot : string\n        optional name of snapshot to use as source\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' zoneadm.clone clementine dolores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rounding_sequence_accuracy(predictions,\n                               labels,\n                               weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  outputs = tf.squeeze(tf.to_int32(predictions), axis=-1)\n  weights = weights_fn(labels)\n  labels = tf.to_int32(labels)\n  not_correct = tf.to_float(tf.not_equal(outputs, labels)) * weights\n  axis = list(range(1, len(outputs.get_shape())))\n  correct_seq = 1.0 - tf.minimum(1.0, tf.reduce_sum(not_correct, axis=axis))\n  return correct_seq, tf.constant(1.0)", "output": "Sequence accuracy for L1/L2 losses: round down the predictions to ints.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_args_for_reloading():\n    \"\"\"\"\"\"\n    rv = [sys.executable]\n    main_module = sys.modules[\"__main__\"]\n    mod_spec = getattr(main_module, \"__spec__\", None)\n    if mod_spec:\n        # Parent exe was launched as a module rather than a script\n        rv.extend([\"-m\", mod_spec.name])\n        if len(sys.argv) > 1:\n            rv.extend(sys.argv[1:])\n    else:\n        rv.extend(sys.argv)\n    return rv", "output": "Returns the executable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _worker(reader: DatasetReader,\n            input_queue: Queue,\n            output_queue: Queue,\n            index: int) -> None:\n    \"\"\"\n    \n    \"\"\"\n    # Keep going until you get a file_path that's None.\n    while True:\n        file_path = input_queue.get()\n        if file_path is None:\n            # Put my index on the queue to signify that I'm finished\n            output_queue.put(index)\n            break\n\n        logger.info(f\"reading instances from {file_path}\")\n        for instance in reader.read(file_path):\n            output_queue.put(instance)", "output": "A worker that pulls filenames off the input queue, uses the dataset reader\n    to read them, and places the generated instances on the output queue.\n    When there are no filenames left on the input queue, it puts its ``index``\n    on the output queue and doesn't do anything else.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_valid_relpath(\n        relpath,\n        maxdepth=None):\n    '''\n    \n    '''\n    # Check relpath surrounded by slashes, so that `..` can be caught as\n    # a path component at the start, end, and in the middle of the path.\n    sep, pardir = posixpath.sep, posixpath.pardir\n    if sep + pardir + sep in sep + relpath + sep:\n        return False\n\n    # Check that the relative path's depth does not exceed maxdepth\n    if maxdepth is not None:\n        path_depth = relpath.strip(sep).count(sep)\n        if path_depth > maxdepth:\n            return False\n\n    return True", "output": "Performs basic sanity checks on a relative path.\n\n    Requires POSIX-compatible paths (i.e. the kind obtained through\n    cp.list_master or other such calls).\n\n    Ensures that the path does not contain directory transversal, and\n    that it does not exceed a stated maximum depth (if specified).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _byte_encode(self, token):\n    \"\"\"\"\"\"\n    # Vocab ids for all bytes follow ids for the subwords\n    offset = len(self._subwords)\n    if token == \"_\":\n      return [len(self._subwords) + ord(\" \")]\n    return [i + offset for i in list(bytearray(tf.compat.as_bytes(token)))]", "output": "Encode a single token byte-wise into integer ids.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(tmp_dir, dataset_split):\n  \"\"\"\n  \"\"\"\n  if dataset_split == problem.DatasetSplit.TRAIN:\n    file_name = _TRAINING_SET\n  else:\n    file_name = _DEV_SET\n  squad_file = generator_utils.maybe_download(tmp_dir,\n                                              file_name,\n                                              os.path.join(_URL, file_name))\n  with tf.gfile.GFile(squad_file, mode=\"r\") as fp:\n    squad = json.load(fp)\n\n  version = squad[\"version\"]\n  for article in squad[\"data\"]:\n    if \"title\" in article:\n      title = article[\"title\"].strip()\n    else:\n      title = \"no title\"\n    for paragraph in article[\"paragraphs\"]:\n      context = paragraph[\"context\"].strip()\n      for qa in paragraph[\"qas\"]:\n        question = qa[\"question\"].strip()\n        id_ = qa[\"id\"]\n        answer_starts = [answer[\"answer_start\"] for answer in qa[\"answers\"]]\n        answers = [answer[\"text\"].strip() for answer in qa[\"answers\"]]\n\n        # Features currently used are \"context\", \"question\", and \"answers\".\n        # Others are extracted here for the ease of future expansions.\n        example = {\n            \"version\": version,\n            \"title\": title,\n            \"context\": context,\n            \"question\": question,\n            \"id\": id_,\n            \"answer_starts\": answer_starts,\n            \"answers\": answers,\n            \"num_answers\": len(answers),\n            \"is_supervised\": True,\n        }\n        yield example", "output": "Generate squad examples.\n\n  Args:\n    tmp_dir: a string\n    dataset_split: problem.DatasetSplit.TRAIN or problem.DatasetSplit.EVAL\n  Yields:\n    dictionaries representing examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def CopyFrom(self, other_msg):\n    \"\"\"\n    \"\"\"\n    if self is other_msg:\n      return\n    self.Clear()\n    self.MergeFrom(other_msg)", "output": "Copies the content of the specified message into the current message.\n\n    The method clears the current message and then merges the specified\n    message using MergeFrom.\n\n    Args:\n      other_msg: Message to copy into the current one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_xsrf_cookie(self) -> None:\n        \"\"\"\n        \"\"\"\n        # Prior to release 1.1.1, this check was ignored if the HTTP header\n        # ``X-Requested-With: XMLHTTPRequest`` was present.  This exception\n        # has been shown to be insecure and has been removed.  For more\n        # information please see\n        # http://www.djangoproject.com/weblog/2011/feb/08/security/\n        # http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n        token = (\n            self.get_argument(\"_xsrf\", None)\n            or self.request.headers.get(\"X-Xsrftoken\")\n            or self.request.headers.get(\"X-Csrftoken\")\n        )\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n        _, token, _ = self._decode_xsrf_token(token)\n        _, expected_token, _ = self._get_raw_xsrf_token()\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument has invalid format\")\n        if not hmac.compare_digest(utf8(token), utf8(expected_token)):\n            raise HTTPError(403, \"XSRF cookie does not match POST argument\")", "output": "Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.\n\n        To prevent cross-site request forgery, we set an ``_xsrf``\n        cookie and include the same value as a non-cookie\n        field with all ``POST`` requests. If the two do not match, we\n        reject the form submission as a potential forgery.\n\n        The ``_xsrf`` value may be set as either a form field named ``_xsrf``\n        or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``\n        (the latter is accepted for compatibility with Django).\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n\n        .. versionchanged:: 3.2.2\n           Added support for cookie version 2.  Both versions 1 and 2 are\n           supported.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_result(self, result):\n        \"\"\"\"\"\"\n        self._result = result\n        self._result_set = True\n        self._invoke_callbacks(self)", "output": "Set the Future's result.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_image(kwargs, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_images function must be called with '\n            '-f or --function'\n        )\n\n    if not isinstance(kwargs, dict):\n        kwargs = {}\n\n    images = kwargs['image']\n    images = images.split(',')\n\n    params = {\n        'action': 'DescribeImages',\n        'images': images,\n        'zone': _get_specified_zone(kwargs, get_configured_provider()),\n    }\n\n    items = query(params=params)\n\n    if not items['image_set']:\n        raise SaltCloudNotFound('The specified image could not be found.')\n\n    result = {}\n    for image in items['image_set']:\n        result[image['image_id']] = {}\n        for key in image:\n            result[image['image_id']][key] = image[key]\n\n    return result", "output": "Show the details from QingCloud concerning an image.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c,coreos4\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c zone=ap1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cache_key(self, name, filename=None):\n        \"\"\"\"\"\"\n        hash = sha1(name.encode('utf-8'))\n        if filename is not None:\n            filename = '|' + filename\n            if isinstance(filename, text_type):\n                filename = filename.encode('utf-8')\n            hash.update(filename)\n        return hash.hexdigest()", "output": "Returns the unique hash key for this template name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernel_status(self, user_name, kernel_slug, **kwargs):  # noqa: E501\n        \"\"\"\n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n        else:\n            (data) = self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n            return data", "output": "Get the status of the latest kernel version  # noqa: E501\n\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.kernel_status(user_name, kernel_slug, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str user_name: Kernel owner (required)\n        :param str kernel_slug: Kernel name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explode(col):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    jc = sc._jvm.functions.explode(_to_java_column(col))\n    return Column(jc)", "output": "Returns a new row for each element in the given array or map.\n    Uses the default column name `col` for elements in the array and\n    `key` and `value` for elements in the map unless specified otherwise.\n\n    >>> from pyspark.sql import Row\n    >>> eDF = spark.createDataFrame([Row(a=1, intlist=[1,2,3], mapfield={\"a\": \"b\"})])\n    >>> eDF.select(explode(eDF.intlist).alias(\"anInt\")).collect()\n    [Row(anInt=1), Row(anInt=2), Row(anInt=3)]\n\n    >>> eDF.select(explode(eDF.mapfield).alias(\"key\", \"value\")).show()\n    +---+-----+\n    |key|value|\n    +---+-----+\n    |  a|    b|\n    +---+-----+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_exists(username, domain='', database=None, **kwargs):\n    '''\n    \n    '''\n    if domain:\n        username = '{0}\\\\{1}'.format(domain, username)\n    if database:\n        kwargs['database'] = database\n    # We should get one, and only one row\n    return len(tsql_query(query=\"SELECT name FROM sysusers WHERE name='{0}'\".format(username), **kwargs)) == 1", "output": "Find if an user exists in a specific database on the MS SQL server.\n    domain, if provided, will be prepended to username\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt minion mssql.user_exists 'USERNAME' [database='DBNAME']", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch2(self, path, api='public', method='GET', params={}, headers=None, body=None):\n        \"\"\"\"\"\"\n        if self.enableRateLimit:\n            self.throttle()\n        self.lastRestRequestTimestamp = self.milliseconds()\n        request = self.sign(path, api, method, params, headers, body)\n        return self.fetch(request['url'], request['method'], request['headers'], request['body'])", "output": "A better wrapper over request for deferred signing", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def project_delete(project_id=None, name=None, profile=None, **connection_args):\n    '''\n    \n    '''\n    auth(profile, **connection_args)\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        return tenant_delete(tenant_id=project_id, name=name, profile=None, **connection_args)\n    else:\n        return False", "output": "Delete a project (keystone project-delete).\n    Overrides keystone tenant-delete form api V2. For keystone api V3 only.\n\n    .. versionadded:: 2016.11.0\n\n    project_id\n        The project id.\n\n    name\n        The project name.\n\n    profile\n        Configuration profile - if configuration for multiple openstack accounts required.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.project_delete c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete project_id=c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete name=demo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def property_data_zpool():\n    '''\n    \n\n    '''\n    # NOTE: man page also mentions a few short forms\n    property_data = _property_parse_cmd(_zpool_cmd(), {\n        'allocated': 'alloc',\n        'autoexpand': 'expand',\n        'autoreplace': 'replace',\n        'listsnapshots': 'listsnaps',\n        'fragmentation': 'frag',\n    })\n\n    # NOTE: zpool status/iostat has a few extra fields\n    zpool_size_extra = [\n        'capacity-alloc', 'capacity-free',\n        'operations-read', 'operations-write',\n        'bandwith-read', 'bandwith-write',\n        'read', 'write',\n    ]\n    zpool_numeric_extra = [\n        'cksum', 'cap',\n    ]\n\n    for prop in zpool_size_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'size',\n            'values': '<size>',\n        }\n\n    for prop in zpool_numeric_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'numeric',\n            'values': '<count>',\n        }\n\n    return property_data", "output": "Return a dict of zpool properties\n\n    .. note::\n\n        Each property will have an entry with the following info:\n            - edit : boolean - is this property editable after pool creation\n            - type : str - either bool, bool_alt, size, numeric, or string\n            - values : str - list of possible values\n\n    .. warning::\n\n        This data is probed from the output of 'zpool get' with some suplimental\n        data that is hardcoded. There is no better way to get this informatio aside\n        from reading the code.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parameter_objects(parameter_objects_from_pillars, parameter_object_overrides):\n    '''\n    \n    '''\n    from_pillars = copy.deepcopy(__salt__['pillar.get'](parameter_objects_from_pillars))\n    from_pillars.update(parameter_object_overrides)\n    parameter_objects = _standardize(_dict_to_list_ids(from_pillars))\n    for parameter_object in parameter_objects:\n        parameter_object['attributes'] = _properties_from_dict(parameter_object['attributes'])\n    return parameter_objects", "output": "Return a list of parameter objects that configure the pipeline\n\n    parameter_objects_from_pillars\n        The pillar key to use for lookup\n\n    parameter_object_overrides\n        Parameter objects to use. Will override objects read from pillars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_website(Bucket,\n           region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_bucket_website(Bucket=Bucket)\n        return {'deleted': True, 'name': Bucket}\n    except ClientError as e:\n        return {'deleted': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove the website configuration from the given bucket\n\n    Returns {deleted: true} if website configuration was deleted and returns\n    {deleted: False} if website configuration was not deleted.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_s3_bucket.delete_website my_bucket", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, label_images):\n    \"\"\"\"\"\"\n\n    for label, image_paths in label_images.items():\n      for image_path in image_paths:\n        yield {\n            \"image\": image_path,\n            \"label\": label,\n        }", "output": "Generate example for each image in the dict.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vanilla_lstm(num_hidden, indata, prev_state, param, seqidx, layeridx, is_batchnorm=False, gamma=None, beta=None, name=None):\n    \"\"\"\"\"\"\n    i2h = mx.sym.FullyConnected(data=indata,\n                                weight=param.i2h_weight,\n                                bias=param.i2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_i2h\" % (seqidx, layeridx))\n    if is_batchnorm:\n        if name is not None:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta, name=\"%s_batchnorm\" % name)\n        else:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta)\n    h2h = mx.sym.FullyConnected(data=prev_state.h,\n                                weight=param.h2h_weight,\n                                bias=param.h2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_h2h\" % (seqidx, layeridx))\n    gates = i2h + h2h\n    slice_gates = mx.sym.SliceChannel(gates, num_outputs=4,\n                                      name=\"t%d_l%d_slice\" % (seqidx, layeridx))\n    in_gate = mx.sym.Activation(slice_gates[0], act_type=\"sigmoid\")\n    in_transform = mx.sym.Activation(slice_gates[1], act_type=\"tanh\")\n    forget_gate = mx.sym.Activation(slice_gates[2], act_type=\"sigmoid\")\n    out_gate = mx.sym.Activation(slice_gates[3], act_type=\"sigmoid\")\n    next_c = (forget_gate * prev_state.c) + (in_gate * in_transform)\n    next_h = out_gate * mx.sym.Activation(next_c, act_type=\"tanh\")\n    return LSTMState(c=next_c, h=next_h)", "output": "LSTM Cell symbol", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rfc_cv(n_estimators, min_samples_split, max_features, data, targets):\n    \"\"\"\n    \"\"\"\n    estimator = RFC(\n        n_estimators=n_estimators,\n        min_samples_split=min_samples_split,\n        max_features=max_features,\n        random_state=2\n    )\n    cval = cross_val_score(estimator, data, targets,\n                           scoring='neg_log_loss', cv=4)\n    return cval.mean()", "output": "Random Forest cross validation.\n\n    This function will instantiate a random forest classifier with parameters\n    n_estimators, min_samples_split, and max_features. Combined with data and\n    targets this will in turn be used to perform cross validation. The result\n    of cross validation is returned.\n\n    Our goal is to find combinations of n_estimators, min_samples_split, and\n    max_features that minimzes the log loss.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_network_interface(name, resource_group):\n    '''\n    \n    '''\n    public_ips = []\n    private_ips = []\n    netapi_versions = get_api_versions(kwargs={\n        'resource_provider': 'Microsoft.Network',\n        'resource_type': 'publicIPAddresses'\n        }\n    )\n    netapi_version = netapi_versions[0]\n    netconn = get_conn(client_type='network')\n    netiface_query = netconn.network_interfaces.get(\n        resource_group_name=resource_group,\n        network_interface_name=name\n    )\n\n    netiface = netiface_query.as_dict()\n    for index, ip_config in enumerate(netiface['ip_configurations']):\n        if ip_config.get('private_ip_address') is not None:\n            private_ips.append(ip_config['private_ip_address'])\n        if 'id' in ip_config.get('public_ip_address', {}):\n            public_ip_name = get_resource_by_id(\n                ip_config['public_ip_address']['id'],\n                netapi_version,\n                'name'\n            )\n            public_ip = _get_public_ip(public_ip_name, resource_group)\n            public_ips.append(public_ip['ip_address'])\n            netiface['ip_configurations'][index]['public_ip_address'].update(public_ip)\n\n    return netiface, public_ips, private_ips", "output": "Get a network interface.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ID(self, ID):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlGetID(self._o, ID)\n        if ret is None:raise treeError('xmlGetID() failed')\n        __tmp = xmlAttr(_obj=ret)\n        return __tmp", "output": "Search the attribute declaring the given ID", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_permissions(vhost, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'list_permissions', '-q', '-p', vhost],\n        reset_system_locale=False,\n        runas=runas,\n        python_shell=False)\n\n    return _output_to_dict(res)", "output": "Lists permissions for vhost via rabbitmqctl list_permissions\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.list_permissions /myvhost", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_weight_param_summary(wp):\n    \"\"\"\n    \"\"\"\n    summary_str = ''\n    if wp.HasField('quantization'):\n        nbits = wp.quantization.numberOfBits\n        quant_type = 'linearly' if wp.quantization.HasField('linearQuantization') else 'lookup-table'\n        summary_str += '{}-bit {} quantized'.format(nbits, quant_type)\n\n    if len(wp.floatValue) > 0:\n        summary_str += '({} floatValues)'.format(len(wp.floatValue))\n    if len(wp.float16Value) > 0:\n        summary_str += '({} bytes float16Values)'.format(len(wp.float16Value))\n    if len(wp.rawValue) > 0:\n        summary_str += '({} bytes rawValues)'.format(len(wp.rawValue))\n\n    return summary_str", "output": "Get a summary of _NeuralNetwork_pb2.WeightParams\n    Args:\n    wp : _NeuralNetwork_pb2.WeightParams - the _NeuralNetwork_pb2.WeightParams message to display\n    Returns:\n    a str summary for wp", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remote_addr(self):\n        \"\"\"\n        \"\"\"\n        if not hasattr(self, \"_remote_addr\"):\n            if self.app.config.PROXIES_COUNT == 0:\n                self._remote_addr = \"\"\n            elif self.app.config.REAL_IP_HEADER and self.headers.get(\n                self.app.config.REAL_IP_HEADER\n            ):\n                self._remote_addr = self.headers[\n                    self.app.config.REAL_IP_HEADER\n                ]\n            elif self.app.config.FORWARDED_FOR_HEADER:\n                forwarded_for = self.headers.get(\n                    self.app.config.FORWARDED_FOR_HEADER, \"\"\n                ).split(\",\")\n                remote_addrs = [\n                    addr\n                    for addr in [addr.strip() for addr in forwarded_for]\n                    if addr\n                ]\n                if self.app.config.PROXIES_COUNT == -1:\n                    self._remote_addr = remote_addrs[0]\n                elif len(remote_addrs) >= self.app.config.PROXIES_COUNT:\n                    self._remote_addr = remote_addrs[\n                        -self.app.config.PROXIES_COUNT\n                    ]\n                else:\n                    self._remote_addr = \"\"\n            else:\n                self._remote_addr = \"\"\n        return self._remote_addr", "output": "Attempt to return the original client ip based on X-Forwarded-For\n        or X-Real-IP. If HTTP headers are unavailable or untrusted, returns\n        an empty string.\n\n        :return: original client ip.", "category": "Python"}]